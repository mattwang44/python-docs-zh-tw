Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/frame", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/perfmaps", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/enum", "howto/functional", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/isolating-extensions", "howto/logging", "howto/logging-cookbook", "howto/perf_profiling", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-extending", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-runner", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/importlib", "library/importlib.metadata", "library/importlib.resources", "library/importlib.resources.abc", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sys_path_init", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/tomllib", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.11", "whatsnew/3.12", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/frame.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/perfmaps.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/enum.rst", "howto/functional.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/isolating-extensions.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/perf_profiling.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-extending.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-runner.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/importlib.resources.rst", "library/importlib.resources.abc.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sys_path_init.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/tomllib.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.11.rst", "whatsnew/3.12.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)", "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "\u7a0b\u5f0f\u78bc\u7269\u4ef6", "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f", "\u8907\u6578\u7269\u4ef6", "\u5177\u9ad4\u7269\u4ef6\u5c64", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\u7269\u4ef6 (File Objects)", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "Frame Objects", "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668 (Generator) \u7269\u4ef6", "\u5f15\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "\u758a\u4ee3\u5668\u5354\u8b70", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "Support for Perf Maps", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "Set Objects", "\u5207\u7247\u7269\u4ef6", "C API \u7a69\u5b9a\u6027", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6", "Type Objects", "\u578b\u5225\u63d0\u793a\u7269\u4ef6", "\u578b\u5225\u7269\u4ef6", "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "<span class=\"section-number\">4. </span>\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "Annotations Best Practices", "Argparse \u6559\u5b78", "Argument Clinic How-To", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u4fee\u98fe\u5668 HowTo \u6307\u5357", "Enum HOWTO", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "Instrumenting CPython with DTrace and SystemTap", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "Isolating Extension Modules", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "Python support for the Linux <code class=\"docutils literal notranslate\"><span class=\"pre\">perf</span></code> profiler", "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357", "\u5982\u4f55\u6392\u5e8f", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- Top-level code environment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- Abstract Syntax Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Extending", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "Runners", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- Debugger framework", "Binary Data Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- General calendar-related functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- Mathematical functions for complex numbers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- Configuration file parser", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- Register <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> support functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Interfaces to Unix &quot;databases&quot;", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: \u8868\u793a\u5b57\u5143\u96c6\u5408", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- Bootstrapping the <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> installer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- Support for enumerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP \u5354\u5b9a\u7528\u6236\u7aef", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- Support for <strong class=\"program\">gzip</strong> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- HyperText Markup Language support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> --- HTTP servers", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code> \u7684\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code> -- Accessing package metadata", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code> -- Package resource reading, opening and access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code> -- Abstract base classes for resources", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- Inspect live objects", "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- Functions creating iterators for efficient looping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> --- Internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Logging facility for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- Manipulate mailboxes in various formats", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "\u591a\u5a92\u9ad4\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u5f15\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- Shared memory for direct access across processes", "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc \u6a94\u6848\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- Object-oriented filesystem paths", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python object serialization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- Tools for pickle developers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> --- Compile Python source files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "Security Considerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> --- High-level file operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- TLS/SSL wrapper for socket objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- Common string operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- Subprocess management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- Access to the compiler's symbol tables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f", "The initialization of the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> module search path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Regression tests package for Python", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593", "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- Color choosing dialog", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter font wrapper", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter message prompts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tomllib</span></code> --- \u5256\u6790 TOML \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- Support for type hints", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- mock object library", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- getting started", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- <strong>RFC 4122</strong> \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- Read and write WAV files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI Utilities and Reference Implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> --- Manage executable Python zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- \u76f8\u5bb9\u65bc <strong class=\"program\">gzip</strong> \u7684\u58d3\u7e2e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA \u6642\u5340\u652f\u63f4", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>Data model", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>\u547d\u4ee4\u5217\u8207\u74b0\u5883", "<span class=\"section-number\">3. </span>Configure Python", "<span class=\"section-number\">6. </span>\u7de8\u8f2f\u5668\u8207 IDE", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 67, 79, 83, 100, 469, 478], "restructuredtext": [0, 67, 79, 189, 478], "bug": [0, 58, 62, 67, 71, 72, 77, 78, 79, 83, 88, 92, 94, 100, 102, 106, 122, 148, 173, 204, 221, 238, 239, 267, 280, 289, 292, 295, 304, 336, 337, 344, 357, 360, 363, 381, 384, 402, 439, 441, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "fred": [0, 100, 310, 364, 430, 457, 458, 459, 460, 462, 463, 474], "drake": [0, 457, 458, 459, 460, 462, 463], "jr": [0, 83, 458, 459, 460, 462, 463], "docutil": [0, 463, 478], "fredrik": [0, 84, 94, 421, 457, 458, 459, 461, 462, 464, 466, 470], "lundh": [0, 84, 94, 421, 457, 458, 459, 461, 462, 464, 470], "altern": [0, 18, 23, 30, 32, 44, 62, 67, 72, 78, 83, 84, 89, 92, 94, 103, 106, 107, 109, 117, 119, 123, 129, 134, 135, 136, 140, 151, 154, 157, 163, 169, 171, 172, 173, 174, 177, 178, 182, 189, 192, 195, 196, 201, 206, 207, 210, 211, 214, 217, 221, 224, 238, 247, 250, 257, 263, 264, 265, 268, 271, 279, 288, 289, 291, 293, 295, 310, 320, 328, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 353, 354, 360, 364, 370, 371, 376, 379, 381, 383, 384, 385, 389, 394, 395, 397, 400, 402, 420, 421, 425, 426, 427, 428, 439, 450, 453, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 472, 473, 474, 475, 476, 477, 478], "refer": [0, 3, 5, 7, 9, 11, 12, 13, 17, 19, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 41, 44, 48, 49, 53, 54, 57, 58, 59, 63, 65, 66, 67, 70, 71, 73, 75, 76, 77, 83, 86, 92, 97, 98, 99, 100, 103, 107, 108, 111, 112, 115, 117, 119, 123, 126, 130, 133, 134, 136, 137, 138, 139, 141, 151, 154, 160, 163, 166, 173, 178, 179, 181, 187, 201, 206, 207, 208, 209, 211, 218, 221, 222, 223, 224, 226, 229, 231, 234, 235, 236, 239, 241, 243, 246, 247, 249, 250, 251, 252, 254, 255, 258, 263, 264, 265, 267, 269, 274, 280, 284, 289, 293, 294, 295, 298, 303, 309, 310, 315, 317, 320, 325, 328, 329, 330, 333, 337, 340, 341, 343, 346, 348, 351, 356, 357, 360, 361, 363, 370, 371, 372, 376, 380, 381, 383, 384, 385, 389, 390, 395, 400, 404, 405, 406, 410, 412, 416, 417, 420, 422, 423, 424, 428, 429, 430, 431, 435, 436, 440, 445, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "misc": [0, 34, 79, 219, 340, 371, 451, 457, 460, 461, 462, 463, 464, 465, 468, 470, 472, 478, 479], "ack": [0, 67, 115, 174, 463], "tracker": [1, 67, 279, 357, 462, 464, 478], "https": [1, 67, 70, 74, 77, 78, 79, 80, 83, 84, 94, 99, 100, 102, 106, 107, 123, 133, 156, 158, 165, 179, 222, 231, 235, 236, 238, 239, 244, 247, 257, 265, 303, 309, 310, 314, 315, 322, 324, 336, 337, 348, 374, 382, 383, 389, 390, 394, 398, 402, 406, 408, 414, 419, 421, 423, 430, 435, 439, 440, 446, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 469, 470, 471, 472, 473, 475, 476, 478], "github": [1, 74, 79, 108, 244, 303, 383, 421, 469, 474, 475, 478], "com": [1, 67, 68, 72, 74, 79, 83, 84, 92, 99, 100, 102, 103, 107, 133, 158, 162, 172, 179, 180, 196, 239, 244, 257, 284, 293, 303, 314, 315, 322, 336, 337, 340, 383, 390, 391, 393, 400, 408, 414, 448, 449, 454, 456, 459, 461, 462, 463, 464, 469, 470, 471, 472, 473, 476, 478], "doc": [1, 23, 57, 59, 67, 74, 75, 78, 79, 92, 102, 103, 123, 172, 190, 201, 219, 221, 238, 243, 247, 251, 258, 281, 289, 292, 309, 336, 337, 348, 357, 362, 380, 381, 389, 398, 400, 407, 447, 449, 451, 455, 456, 457, 459, 460, 462, 463, 464, 469, 470, 474, 475, 476, 478], "zh": 1, "tw": [1, 154], "issu": [1, 7, 22, 31, 32, 33, 60, 65, 67, 75, 79, 92, 93, 99, 100, 102, 106, 111, 116, 117, 123, 132, 152, 154, 172, 173, 177, 181, 182, 184, 199, 209, 217, 221, 231, 238, 243, 244, 254, 258, 262, 263, 267, 268, 279, 280, 288, 289, 292, 295, 307, 329, 331, 333, 337, 340, 344, 357, 379, 381, 383, 384, 385, 395, 397, 404, 407, 408, 416, 421, 450, 453, 457, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "discours": [1, 478], "org": [1, 56, 67, 74, 77, 78, 83, 86, 94, 100, 104, 106, 107, 108, 123, 156, 162, 163, 165, 180, 219, 222, 231, 235, 236, 238, 239, 243, 244, 279, 284, 299, 303, 309, 310, 315, 324, 331, 333, 336, 337, 348, 350, 382, 389, 390, 391, 393, 398, 406, 408, 410, 414, 421, 423, 430, 435, 439, 440, 446, 448, 449, 450, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478], "list": [1, 2, 5, 7, 16, 18, 23, 30, 32, 33, 34, 39, 41, 48, 51, 53, 54, 56, 57, 58, 59, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 83, 85, 86, 88, 89, 91, 92, 93, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 112, 114, 116, 117, 118, 119, 123, 125, 130, 133, 136, 137, 141, 147, 148, 152, 154, 156, 157, 159, 160, 163, 165, 166, 167, 169, 171, 172, 173, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 216, 218, 219, 221, 222, 223, 224, 226, 227, 229, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 270, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 301, 303, 304, 306, 307, 308, 310, 314, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 344, 346, 347, 348, 350, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 389, 390, 391, 395, 397, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 418, 421, 423, 424, 426, 427, 428, 430, 431, 435, 438, 440, 441, 443, 445, 446, 448, 449, 450, 451, 452, 456, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "cpython": [1, 4, 10, 13, 32, 34, 53, 56, 58, 62, 67, 70, 72, 74, 75, 79, 84, 86, 88, 89, 95, 98, 139, 154, 157, 182, 184, 187, 206, 209, 210, 221, 231, 233, 246, 251, 253, 271, 279, 289, 292, 299, 307, 312, 316, 320, 328, 339, 340, 344, 348, 357, 360, 374, 380, 397, 402, 420, 422, 423, 424, 425, 426, 429, 431, 445, 450, 451, 455, 456, 458, 459, 460, 462, 463, 464, 470, 471, 473, 478, 479], "sign": [1, 18, 48, 63, 67, 74, 84, 103, 118, 138, 151, 154, 163, 172, 173, 179, 182, 192, 197, 205, 217, 221, 224, 231, 262, 264, 265, 268, 271, 279, 280, 288, 289, 291, 293, 295, 315, 332, 340, 341, 343, 360, 361, 389, 408, 423, 425, 430, 456, 458, 459, 461, 462, 463, 464, 469, 470, 472, 474, 476, 478], "up": [1, 7, 9, 23, 32, 34, 41, 44, 60, 62, 63, 67, 72, 74, 75, 76, 83, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 106, 117, 119, 123, 129, 135, 136, 137, 147, 148, 154, 159, 162, 163, 173, 175, 179, 182, 186, 187, 189, 190, 193, 196, 204, 205, 207, 209, 217, 218, 221, 222, 226, 231, 236, 238, 239, 241, 243, 248, 251, 254, 257, 261, 262, 263, 264, 265, 266, 271, 272, 274, 276, 278, 279, 280, 288, 289, 292, 293, 304, 305, 307, 311, 315, 316, 319, 324, 327, 329, 330, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 351, 353, 354, 357, 359, 360, 364, 369, 370, 371, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 397, 402, 405, 408, 411, 412, 416, 420, 422, 423, 424, 425, 427, 429, 430, 431, 436, 445, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "new": [1, 3, 5, 7, 9, 13, 17, 22, 23, 26, 27, 28, 30, 32, 34, 36, 37, 38, 41, 42, 44, 48, 49, 53, 54, 55, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 125, 126, 129, 130, 132, 135, 136, 137, 140, 141, 146, 148, 150, 152, 153, 154, 156, 157, 163, 165, 166, 170, 171, 172, 173, 174, 177, 179, 180, 182, 184, 187, 189, 190, 191, 192, 194, 196, 197, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 217, 221, 222, 230, 231, 232, 233, 238, 243, 244, 246, 251, 253, 254, 255, 257, 262, 263, 264, 265, 266, 267, 268, 272, 274, 276, 277, 279, 280, 284, 289, 291, 292, 293, 295, 296, 297, 300, 303, 304, 305, 308, 310, 311, 315, 316, 318, 321, 324, 325, 328, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 346, 347, 348, 350, 353, 355, 356, 357, 360, 361, 364, 367, 370, 371, 375, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 398, 400, 402, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 427, 429, 431, 435, 436, 437, 444, 446, 447, 450, 451, 456, 468, 478, 479], "titl": [1, 63, 67, 83, 92, 94, 103, 106, 107, 117, 148, 156, 180, 185, 218, 236, 243, 258, 263, 277, 279, 288, 333, 336, 340, 341, 364, 368, 379, 381, 390, 406, 407, 408, 415, 421, 457, 459, 461, 468, 470, 476, 478], "comment": [1, 9, 63, 67, 72, 89, 94, 100, 103, 106, 109, 116, 119, 163, 172, 189, 199, 218, 236, 239, 240, 243, 251, 252, 260, 269, 289, 295, 296, 309, 310, 315, 327, 344, 357, 372, 373, 389, 407, 408, 410, 417, 418, 426, 431, 444, 457, 459, 460, 462, 464, 465, 467, 469, 470, 476, 478], "mozilla": [1, 107, 239, 337, 390, 398, 461, 478], "patch": [1, 56, 67, 79, 83, 88, 91, 96, 103, 117, 173, 183, 237, 238, 284, 340, 357, 381, 455, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 473, 474, 476, 477, 478], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 74, 75, 76, 86, 88, 93, 96, 98, 99, 100, 103, 104, 105, 107, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 129, 132, 133, 136, 137, 141, 142, 145, 146, 148, 149, 150, 151, 153, 156, 162, 163, 164, 165, 167, 169, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 186, 188, 191, 192, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 209, 211, 215, 217, 218, 219, 221, 222, 223, 226, 227, 230, 231, 232, 233, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 254, 255, 257, 258, 261, 264, 265, 267, 269, 271, 274, 275, 276, 277, 279, 280, 284, 285, 287, 288, 290, 291, 292, 294, 296, 298, 299, 301, 302, 303, 309, 310, 314, 315, 316, 317, 319, 323, 324, 327, 328, 330, 331, 333, 334, 337, 339, 340, 341, 343, 344, 347, 348, 351, 352, 355, 358, 360, 361, 363, 371, 374, 376, 377, 380, 381, 383, 384, 385, 389, 390, 392, 393, 394, 395, 397, 398, 400, 402, 404, 405, 406, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 436, 437, 438, 439, 441, 442, 448, 449, 450, 452], "except": [2, 5, 7, 9, 11, 13, 14, 17, 18, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 44, 46, 48, 50, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 73, 74, 75, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 102, 103, 106, 109, 111, 112, 114, 115, 119, 122, 123, 124, 126, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 163, 166, 167, 169, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 186, 187, 190, 191, 192, 196, 197, 201, 202, 203, 204, 206, 208, 210, 211, 214, 219, 221, 222, 224, 225, 228, 230, 231, 238, 239, 240, 241, 243, 244, 246, 250, 251, 252, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 274, 275, 277, 279, 281, 282, 283, 284, 289, 291, 292, 293, 295, 298, 300, 301, 304, 307, 310, 311, 312, 316, 318, 319, 321, 324, 325, 326, 327, 328, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 348, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 373, 374, 376, 377, 380, 381, 383, 384, 388, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 403, 405, 406, 408, 409, 410, 411, 414, 415, 417, 418, 419, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 436, 440, 445, 447, 450, 451, 456, 457, 458, 459, 460, 461, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "pylist_new": [2, 34, 37, 56], "null": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 74, 75, 78, 92, 98, 100, 102, 106, 119, 171, 172, 187, 221, 223, 239, 258, 268, 277, 280, 283, 289, 295, 314, 315, 333, 336, 337, 343, 344, 400, 403, 405, 406, 417, 426, 430, 431, 457, 461, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478], "protocol": [2, 8, 9, 23, 28, 31, 54, 57, 60, 62, 65, 67, 73, 78, 83, 86, 89, 93, 94, 97, 100, 106, 107, 118, 120, 123, 127, 134, 138, 139, 142, 143, 148, 154, 157, 165, 172, 179, 180, 183, 190, 199, 205, 208, 213, 221, 231, 237, 239, 241, 246, 247, 250, 251, 254, 256, 258, 263, 264, 265, 267, 279, 284, 289, 291, 295, 296, 324, 325, 326, 333, 334, 336, 340, 342, 343, 353, 354, 357, 360, 364, 381, 384, 385, 390, 400, 402, 411, 414, 415, 418, 422, 423, 425, 430, 451, 457, 459, 460, 462, 463, 464, 466, 467, 468, 470, 472, 475, 477, 478, 479], "call": [2, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 41, 44, 46, 48, 50, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 73, 74, 75, 76, 78, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100, 103, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 146, 148, 150, 152, 153, 154, 156, 157, 159, 160, 163, 165, 166, 169, 171, 173, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 220, 221, 222, 223, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 278, 279, 280, 284, 287, 289, 291, 292, 293, 295, 298, 301, 303, 304, 305, 310, 315, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 343, 344, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 386, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 420, 422, 423, 424, 426, 427, 430, 431, 435, 436, 437, 438, 441, 444, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478], "tp_call": [2, 23, 62, 67, 74, 469, 478], "vectorcal": [2, 27, 57, 62, 67, 467, 468, 469, 477, 478], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 34, 37, 38, 44, 45, 47, 50, 54, 57, 58, 60, 62, 63, 64, 67, 71, 73, 74, 75, 78, 83, 86, 87, 90, 91, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 117, 122, 124, 125, 126, 129, 130, 133, 134, 136, 137, 139, 155, 157, 160, 165, 166, 171, 172, 173, 181, 183, 184, 187, 188, 190, 191, 193, 194, 197, 198, 199, 201, 202, 204, 205, 207, 213, 219, 224, 231, 232, 242, 246, 250, 251, 253, 254, 255, 257, 258, 263, 264, 265, 267, 269, 276, 277, 278, 279, 281, 289, 290, 291, 294, 298, 300, 314, 315, 316, 328, 333, 337, 338, 341, 348, 350, 352, 355, 357, 360, 364, 374, 381, 383, 384, 385, 389, 395, 400, 401, 402, 404, 406, 409, 410, 414, 415, 424, 425, 427, 428, 430, 431, 435, 436, 440, 446, 456, 457, 458, 459, 479], "number": [2, 5, 7, 9, 13, 18, 22, 23, 25, 26, 28, 30, 31, 32, 38, 39, 40, 41, 49, 53, 54, 57, 58, 59, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 109, 112, 113, 114, 115, 117, 119, 123, 129, 130, 134, 135, 136, 138, 141, 143, 146, 147, 148, 149, 152, 154, 156, 159, 162, 163, 166, 169, 171, 172, 173, 179, 182, 184, 186, 187, 189, 191, 192, 195, 198, 199, 201, 204, 207, 208, 209, 210, 211, 212, 214, 221, 222, 226, 230, 231, 236, 238, 240, 241, 243, 244, 246, 247, 250, 251, 253, 254, 255, 257, 260, 262, 263, 265, 266, 267, 268, 270, 272, 274, 277, 279, 280, 281, 284, 286, 288, 291, 292, 293, 295, 296, 300, 301, 303, 304, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 322, 324, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 347, 348, 350, 353, 354, 357, 359, 360, 361, 362, 364, 367, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 389, 390, 395, 396, 397, 398, 400, 401, 402, 403, 405, 408, 409, 411, 412, 414, 417, 420, 422, 423, 425, 426, 427, 429, 430, 431, 436, 437, 438, 439, 440, 445, 446, 447, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "sequenc": [2, 5, 7, 16, 22, 31, 32, 34, 36, 38, 41, 48, 49, 55, 58, 63, 65, 67, 74, 78, 83, 86, 89, 91, 93, 94, 98, 100, 103, 106, 109, 117, 119, 123, 136, 140, 142, 153, 154, 155, 157, 159, 160, 171, 172, 173, 178, 183, 185, 186, 187, 189, 192, 198, 201, 202, 205, 208, 209, 214, 221, 226, 232, 234, 239, 246, 250, 251, 254, 255, 257, 258, 262, 264, 266, 267, 271, 272, 277, 279, 280, 288, 289, 292, 295, 296, 297, 298, 303, 308, 310, 314, 315, 317, 321, 322, 328, 333, 336, 337, 339, 341, 346, 353, 354, 357, 358, 361, 362, 364, 371, 373, 376, 377, 379, 381, 382, 383, 384, 385, 389, 390, 395, 397, 400, 405, 408, 409, 414, 420, 423, 425, 429, 430, 431, 435, 436, 440, 444, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "map": [2, 16, 22, 31, 32, 33, 41, 48, 49, 58, 64, 65, 67, 74, 77, 78, 83, 84, 86, 89, 92, 93, 94, 100, 101, 106, 107, 109, 113, 119, 140, 152, 154, 156, 157, 160, 162, 165, 166, 171, 173, 177, 178, 179, 180, 182, 183, 186, 187, 189, 191, 192, 199, 201, 207, 208, 209, 212, 213, 221, 222, 226, 232, 238, 241, 243, 250, 251, 255, 256, 257, 263, 264, 265, 266, 267, 268, 269, 275, 276, 277, 279, 281, 283, 284, 287, 288, 289, 291, 292, 294, 295, 304, 308, 310, 314, 315, 317, 318, 325, 333, 336, 337, 339, 341, 342, 343, 344, 346, 348, 357, 360, 361, 362, 363, 371, 372, 379, 380, 381, 382, 384, 389, 390, 397, 402, 406, 408, 410, 411, 423, 425, 426, 427, 431, 435, 436, 437, 439, 445, 447, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478], "buffer": [2, 8, 9, 18, 24, 31, 32, 33, 40, 41, 42, 49, 63, 64, 65, 67, 74, 86, 89, 91, 99, 109, 115, 117, 118, 123, 124, 127, 133, 134, 139, 143, 146, 148, 153, 154, 157, 172, 173, 178, 183, 184, 208, 209, 210, 211, 221, 230, 231, 238, 241, 265, 266, 274, 278, 279, 280, 289, 291, 292, 294, 310, 311, 318, 324, 327, 328, 329, 333, 337, 340, 343, 344, 348, 353, 354, 355, 357, 358, 360, 381, 383, 390, 402, 403, 408, 409, 417, 419, 450, 451, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 475, 477, 478, 479], "structur": [2, 3, 5, 13, 17, 22, 26, 30, 31, 32, 33, 34, 41, 42, 44, 46, 49, 54, 57, 58, 60, 65, 67, 72, 74, 75, 78, 84, 89, 91, 92, 94, 98, 99, 103, 115, 119, 125, 132, 136, 141, 150, 154, 173, 183, 190, 192, 197, 199, 200, 201, 202, 203, 208, 209, 211, 213, 218, 222, 226, 229, 241, 243, 244, 247, 250, 251, 252, 254, 257, 258, 267, 272, 277, 279, 289, 292, 295, 301, 303, 307, 315, 328, 329, 333, 335, 337, 340, 342, 343, 344, 349, 357, 361, 364, 370, 379, 380, 383, 384, 397, 405, 408, 409, 414, 417, 418, 422, 423, 427, 428, 457, 458, 459, 460, 461, 462, 463, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "request": [2, 5, 23, 30, 32, 41, 44, 48, 60, 62, 67, 75, 83, 84, 87, 93, 94, 97, 98, 100, 106, 107, 117, 130, 136, 139, 148, 154, 156, 162, 165, 172, 173, 182, 193, 204, 206, 208, 209, 211, 219, 221, 222, 226, 230, 237, 238, 239, 240, 241, 243, 244, 246, 250, 251, 252, 254, 267, 279, 280, 284, 288, 289, 291, 295, 301, 303, 310, 312, 318, 324, 327, 329, 330, 337, 340, 344, 348, 355, 357, 361, 371, 379, 384, 387, 389, 391, 394, 400, 402, 405, 411, 412, 414, 415, 418, 423, 427, 431, 436, 446, 448, 456, 457, 458, 460, 461, 462, 463, 464, 467, 470, 471, 472, 473, 475, 476, 477, 478], "type": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 55, 58, 59, 61, 66, 67, 72, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 99, 100, 107, 109, 112, 114, 115, 116, 118, 120, 123, 136, 139, 141, 142, 148, 149, 150, 152, 154, 156, 157, 163, 164, 165, 168, 169, 171, 173, 174, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 212, 217, 219, 221, 222, 223, 226, 231, 232, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 252, 254, 257, 258, 260, 262, 263, 264, 265, 266, 268, 269, 271, 274, 275, 277, 279, 280, 281, 286, 289, 292, 293, 294, 300, 303, 304, 309, 310, 311, 312, 315, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 337, 338, 341, 343, 344, 345, 346, 347, 348, 353, 357, 358, 360, 361, 363, 371, 372, 373, 376, 377, 379, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 399, 401, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 420, 421, 424, 425, 426, 427, 428, 430, 434, 435, 436, 437, 438, 443, 444, 445, 446, 450, 451, 456, 457, 458, 464, 465, 466, 470, 478, 479], "independ": [2, 18, 22, 25, 32, 33, 44, 67, 72, 74, 83, 91, 93, 94, 98, 100, 156, 179, 182, 189, 197, 206, 221, 222, 242, 257, 262, 263, 267, 314, 339, 340, 348, 349, 361, 362, 364, 371, 373, 383, 394, 405, 408, 417, 425, 451, 457, 464, 471, 477, 478, 479], "field": [2, 3, 5, 13, 28, 30, 32, 33, 41, 53, 54, 57, 59, 60, 62, 63, 65, 67, 72, 74, 75, 83, 86, 89, 92, 93, 99, 115, 119, 148, 150, 154, 156, 171, 173, 179, 182, 187, 192, 195, 198, 199, 201, 204, 205, 209, 229, 230, 232, 238, 243, 252, 255, 257, 263, 264, 268, 277, 289, 310, 311, 312, 318, 321, 331, 333, 335, 336, 337, 338, 340, 341, 343, 344, 348, 351, 353, 356, 361, 362, 364, 371, 373, 376, 380, 389, 393, 395, 400, 402, 406, 408, 417, 430, 447, 450, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "readon": [2, 57, 67, 244, 252, 328, 336, 340, 371, 405, 406, 463, 469, 478], "format": [2, 5, 9, 10, 18, 23, 25, 30, 34, 40, 47, 48, 58, 62, 63, 67, 72, 74, 78, 83, 84, 86, 89, 91, 92, 93, 102, 103, 106, 107, 109, 114, 115, 116, 117, 119, 130, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 154, 160, 163, 165, 169, 172, 178, 180, 181, 182, 186, 187, 188, 189, 190, 192, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 213, 217, 221, 224, 226, 230, 231, 239, 241, 244, 245, 246, 250, 251, 255, 258, 261, 262, 263, 265, 266, 268, 272, 277, 280, 281, 288, 289, 291, 292, 293, 294, 296, 298, 300, 303, 304, 310, 311, 315, 316, 317, 326, 327, 328, 332, 333, 334, 336, 337, 344, 345, 348, 354, 357, 358, 361, 363, 364, 367, 370, 371, 373, 376, 377, 379, 380, 383, 389, 390, 392, 395, 396, 400, 402, 408, 412, 417, 418, 422, 423, 425, 426, 429, 437, 439, 440, 444, 445, 446, 450, 456, 457, 458, 459, 460, 461, 462, 468, 469, 470, 471, 472, 475, 476, 478, 479], "shape": [2, 62, 67, 93, 218, 221, 280, 314, 340, 381, 463, 467, 468, 471, 478], "stride": [2, 62, 67, 251, 311, 340, 423, 425, 460, 471, 478], "suboffset": [2, 62, 67, 340, 471], "contigu": [2, 5, 42, 67, 86, 186, 244, 257, 267, 295, 340, 410, 463, 471, 478], "compound": [2, 34, 67, 218, 243, 341, 359, 364, 370, 371, 426, 428, 430, 463, 471, 478], "complex": [2, 5, 13, 15, 34, 67, 71, 72, 74, 83, 84, 86, 100, 103, 117, 119, 123, 125, 129, 157, 163, 166, 171, 180, 182, 183, 186, 190, 196, 199, 221, 222, 250, 257, 258, 264, 271, 285, 286, 288, 295, 303, 315, 329, 330, 341, 344, 348, 353, 379, 381, 384, 414, 422, 423, 425, 430, 431, 435, 444, 445, 450, 459, 461, 462, 463, 464, 466, 467, 468, 470, 472, 474, 475, 476, 478], "array": [2, 5, 9, 10, 16, 30, 38, 44, 53, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 86, 89, 92, 98, 100, 114, 115, 139, 147, 154, 160, 174, 178, 211, 250, 275, 279, 280, 281, 283, 289, 295, 305, 333, 340, 343, 356, 374, 376, 380, 381, 397, 403, 414, 422, 423, 437, 447, 460, 461, 462, 463, 464, 465, 470, 473, 475, 477, 478], "numpi": [2, 67, 84, 118, 221, 280, 295, 339, 439, 445, 448, 456, 462, 463, 468, 470, 471, 473, 478], "style": [2, 5, 9, 23, 63, 67, 72, 75, 77, 86, 93, 94, 99, 103, 111, 115, 117, 119, 130, 140, 141, 143, 147, 156, 163, 186, 192, 201, 203, 216, 217, 220, 221, 222, 226, 236, 238, 241, 250, 257, 263, 264, 267, 271, 272, 280, 288, 289, 292, 293, 295, 304, 309, 315, 326, 328, 329, 333, 336, 348, 350, 357, 360, 363, 364, 367, 368, 370, 376, 383, 386, 402, 415, 425, 426, 429, 430, 440, 441, 444, 447, 451, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 469, 470, 471, 472, 475, 476, 478, 479], "and": [2, 3, 9, 10, 11, 13, 16, 17, 18, 22, 24, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 69, 73, 77, 83, 86, 88, 90, 95, 97, 99, 101, 102, 104, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 126, 127, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 144, 146, 147, 149, 150, 152, 153, 155, 156, 159, 160, 162, 163, 166, 168, 169, 170, 173, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 228, 229, 230, 232, 234, 238, 240, 241, 242, 244, 245, 247, 249, 250, 252, 253, 254, 257, 260, 261, 263, 265, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 286, 287, 291, 293, 294, 296, 297, 298, 299, 301, 303, 305, 307, 308, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 330, 331, 332, 334, 335, 338, 339, 341, 342, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 382, 386, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 403, 404, 407, 409, 410, 411, 412, 415, 416, 417, 418, 421, 422, 426, 428, 429, 431, 433, 436, 437, 438, 439, 441, 444, 445, 446, 448, 450, 452, 453, 467, 468, 479], "pil": [2, 67, 84, 340], "relat": [2, 32, 41, 44, 62, 67, 78, 83, 84, 89, 92, 94, 99, 100, 103, 106, 109, 110, 111, 119, 123, 130, 136, 142, 150, 151, 154, 163, 165, 173, 177, 178, 179, 186, 187, 189, 190, 192, 196, 201, 203, 204, 205, 206, 209, 211, 213, 221, 224, 231, 237, 241, 250, 251, 253, 254, 255, 257, 261, 262, 263, 265, 266, 267, 271, 274, 276, 277, 279, 286, 289, 292, 294, 295, 296, 298, 304, 310, 311, 315, 316, 320, 321, 327, 328, 329, 333, 336, 337, 339, 340, 341, 344, 348, 349, 355, 357, 361, 364, 370, 371, 375, 379, 380, 381, 383, 384, 389, 394, 395, 397, 400, 402, 407, 408, 410, 416, 417, 420, 423, 425, 426, 428, 430, 431, 445, 450, 456, 457, 458, 460, 461, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "function": [2, 5, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 86, 87, 88, 91, 96, 97, 99, 100, 101, 102, 106, 107, 109, 110, 111, 112, 114, 115, 121, 123, 125, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 157, 160, 162, 163, 166, 169, 171, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 220, 221, 224, 226, 230, 231, 232, 234, 238, 239, 241, 243, 244, 245, 246, 248, 250, 252, 253, 254, 258, 260, 261, 262, 265, 266, 268, 272, 274, 276, 277, 279, 283, 286, 288, 289, 291, 292, 293, 294, 296, 298, 300, 303, 304, 305, 307, 308, 309, 310, 311, 316, 317, 318, 320, 321, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 372, 373, 375, 376, 377, 381, 382, 384, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 420, 421, 423, 424, 426, 427, 430, 431, 434, 435, 437, 439, 440, 445, 446, 450, 451, 456, 459, 460, 464, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 89, 96, 98, 172, 315, 357, 459, 462, 463, 467, 468, 475, 476, 478], "_pyobject_new": 3, "pytypeobject": [3, 6, 8, 9, 12, 13, 15, 17, 19, 21, 22, 25, 26, 27, 28, 29, 34, 36, 37, 38, 43, 44, 45, 48, 49, 54, 55, 56, 57, 59, 60, 61, 63, 67, 74, 75, 89, 98, 458, 468, 469, 473, 476, 477, 478], "pyvarobject": [3, 28, 49, 56, 57, 67, 357, 468], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 13, 18, 22, 23, 28, 33, 34, 37, 38, 39, 40, 42, 44, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 72, 74, 89, 98, 172, 348, 423, 462, 463, 468, 476, 478], "size": [3, 5, 7, 9, 18, 28, 30, 33, 34, 38, 40, 41, 42, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 67, 72, 74, 75, 91, 92, 93, 96, 98, 99, 100, 106, 112, 114, 115, 116, 117, 130, 134, 138, 139, 141, 142, 148, 150, 154, 157, 159, 160, 169, 170, 173, 178, 181, 182, 183, 186, 187, 211, 212, 215, 219, 221, 222, 238, 241, 243, 244, 246, 247, 252, 254, 257, 258, 262, 265, 266, 274, 279, 280, 291, 295, 301, 304, 307, 310, 316, 317, 318, 331, 333, 334, 336, 338, 339, 340, 341, 344, 345, 348, 353, 355, 356, 357, 359, 360, 364, 367, 370, 371, 376, 379, 381, 383, 390, 403, 405, 416, 417, 423, 427, 441, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pyobject_init": [3, 56, 476, 477, 478], "op": [3, 10, 15, 27, 28, 32, 36, 38, 48, 62, 63, 67, 74, 84, 119, 135, 173, 187, 226, 260, 265, 279, 289, 315, 333, 336, 348, 360, 372, 373, 402, 460, 463, 467, 468, 469, 475, 478], "part": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 74, 84, 89, 91, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 111, 119, 125, 140, 148, 151, 153, 154, 155, 157, 163, 165, 172, 173, 179, 182, 187, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 215, 221, 226, 231, 241, 243, 244, 246, 247, 254, 255, 262, 263, 264, 265, 266, 271, 272, 277, 278, 279, 289, 295, 298, 303, 304, 310, 315, 319, 327, 330, 333, 334, 336, 337, 340, 341, 342, 348, 357, 360, 361, 364, 370, 376, 379, 380, 381, 383, 384, 385, 389, 394, 397, 398, 405, 406, 408, 414, 421, 422, 423, 424, 425, 427, 430, 431, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "ofthe": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 21, 22, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 73, 74, 76, 78, 85, 86, 90, 92, 93, 95, 97, 104, 107, 108, 109, 110, 112, 114, 115, 116, 119, 120, 121, 122, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 269, 271, 272, 274, 275, 276, 277, 280, 281, 283, 284, 286, 287, 291, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 346, 350, 351, 353, 354, 355, 356, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 380, 382, 383, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 409, 410, 412, 414, 415, 417, 418, 421, 424, 426, 428, 429, 430, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 453, 454, 457, 458, 461, 465, 466, 467, 468, 478, 479], "stabl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 206, 221, 232, 248, 272, 288, 340, 348, 420, 460, 461, 464, 472, 473, 474, 476, 477, 478, 479], "abi": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 96, 348, 451, 455, 464, 468, 469, 472, 473, 475, 477, 478, 479], "pyobject_initvar": [3, 56, 478], "pyobject_new": [3, 28, 41, 62, 460, 476, 477, 478], "typeobj": [3, 28, 383], "alloc": [3, 5, 7, 16, 23, 28, 30, 31, 33, 44, 48, 55, 57, 58, 62, 63, 65, 67, 71, 72, 73, 75, 84, 92, 98, 112, 130, 165, 172, 181, 184, 210, 250, 254, 255, 279, 280, 289, 295, 310, 318, 333, 348, 360, 371, 400, 411, 450, 451, 457, 458, 459, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "object": [3, 5, 6, 7, 11, 13, 14, 16, 18, 22, 25, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 45, 46, 52, 53, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 79, 86, 89, 91, 94, 96, 101, 102, 103, 105, 106, 107, 112, 113, 114, 115, 116, 118, 119, 122, 126, 130, 133, 134, 135, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 165, 166, 167, 168, 169, 170, 172, 176, 177, 178, 180, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 229, 230, 233, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 260, 265, 266, 267, 269, 270, 272, 274, 278, 280, 281, 284, 286, 287, 288, 290, 293, 294, 296, 298, 300, 301, 303, 304, 306, 309, 310, 311, 318, 320, 325, 327, 328, 329, 331, 332, 333, 335, 341, 343, 345, 346, 347, 348, 350, 353, 355, 356, 357, 358, 359, 361, 362, 364, 366, 367, 369, 373, 375, 376, 377, 380, 382, 383, 388, 389, 392, 394, 395, 396, 399, 401, 402, 406, 407, 409, 410, 412, 415, 416, 418, 419, 420, 421, 422, 424, 425, 427, 428, 431, 435, 436, 437, 441, 444, 445, 447, 450, 451, 454, 456, 457, 458, 459, 462, 465, 466, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479], "use": [3, 5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 77, 78, 86, 87, 88, 90, 91, 92, 94, 96, 98, 101, 106, 107, 109, 111, 112, 114, 116, 117, 119, 120, 121, 123, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 221, 222, 224, 226, 230, 234, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 274, 276, 277, 280, 281, 283, 284, 285, 286, 288, 289, 291, 293, 294, 295, 296, 297, 298, 300, 301, 303, 305, 307, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 351, 353, 354, 355, 356, 359, 361, 362, 363, 364, 367, 368, 369, 373, 375, 376, 377, 380, 381, 382, 384, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 437, 438, 439, 441, 444, 448, 450, 451, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 477, 478, 479], "not": [3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 79, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 117, 119, 120, 121, 122, 123, 125, 126, 129, 130, 132, 133, 134, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 224, 225, 226, 229, 230, 231, 232, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 366, 368, 370, 371, 373, 375, 376, 377, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "defin": [3, 5, 7, 11, 23, 25, 28, 32, 33, 34, 41, 42, 44, 49, 56, 58, 60, 62, 63, 67, 70, 71, 72, 73, 76, 78, 83, 87, 91, 92, 93, 94, 99, 100, 102, 103, 106, 107, 111, 112, 115, 117, 119, 122, 123, 129, 130, 137, 138, 140, 141, 143, 147, 148, 150, 151, 152, 154, 157, 163, 165, 168, 169, 171, 172, 173, 175, 177, 179, 180, 182, 183, 185, 187, 189, 190, 192, 195, 199, 201, 204, 207, 208, 209, 211, 212, 221, 222, 226, 229, 230, 231, 234, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 254, 255, 258, 261, 262, 263, 265, 267, 271, 272, 279, 283, 284, 286, 289, 291, 292, 293, 295, 297, 298, 300, 301, 303, 305, 308, 310, 315, 316, 318, 319, 320, 321, 324, 325, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 353, 356, 357, 360, 361, 362, 364, 367, 370, 371, 372, 375, 376, 379, 380, 382, 383, 384, 385, 389, 390, 392, 395, 396, 397, 398, 400, 402, 403, 405, 406, 408, 409, 410, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 435, 436, 438, 444, 445, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "by": [3, 5, 7, 13, 15, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 112, 114, 115, 117, 119, 123, 125, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 169, 171, 173, 174, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 230, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 276, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 438, 444, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "header": [3, 25, 28, 57, 62, 67, 72, 83, 99, 103, 114, 133, 139, 143, 147, 148, 150, 152, 163, 165, 171, 172, 180, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 211, 226, 230, 238, 239, 240, 241, 243, 244, 246, 252, 263, 265, 267, 272, 281, 284, 289, 293, 301, 307, 313, 331, 332, 333, 337, 345, 348, 350, 353, 357, 372, 376, 380, 388, 390, 392, 396, 406, 414, 417, 422, 424, 447, 451, 456, 458, 460, 462, 463, 464, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478], "are": [3, 5, 7, 9, 11, 13, 22, 23, 25, 26, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 224, 226, 229, 230, 231, 234, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 286, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 312, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 439, 441, 444, 446, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "initi": [3, 5, 13, 16, 18, 22, 23, 24, 27, 28, 30, 31, 34, 41, 48, 50, 57, 58, 59, 60, 62, 65, 67, 68, 70, 71, 73, 75, 78, 84, 85, 89, 91, 92, 94, 98, 99, 100, 106, 111, 112, 117, 118, 119, 123, 132, 136, 137, 138, 139, 143, 152, 154, 162, 163, 171, 172, 173, 177, 182, 185, 186, 187, 189, 191, 198, 199, 202, 209, 222, 226, 230, 231, 239, 243, 244, 246, 250, 254, 257, 258, 262, 263, 264, 265, 266, 267, 272, 274, 276, 277, 279, 280, 284, 288, 289, 295, 297, 301, 304, 310, 316, 317, 327, 330, 331, 333, 334, 336, 337, 340, 344, 348, 351, 354, 360, 361, 362, 364, 371, 379, 380, 381, 383, 390, 395, 408, 414, 420, 421, 422, 423, 426, 427, 431, 445, 450, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 477, 478], "caller": [3, 5, 9, 18, 23, 30, 32, 33, 34, 44, 60, 63, 72, 84, 87, 92, 94, 136, 141, 153, 154, 165, 172, 177, 185, 187, 209, 221, 231, 238, 247, 248, 251, 254, 263, 287, 289, 292, 298, 304, 328, 329, 331, 333, 337, 344, 348, 360, 365, 371, 375, 376, 381, 383, 390, 392, 395, 396, 398, 400, 414, 416, 423, 424, 425, 435, 438, 458, 459, 460, 461, 462, 463, 464, 468, 474, 477, 478], "will": [3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 218, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 305, 307, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 368, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "own": [3, 5, 7, 9, 22, 23, 26, 28, 32, 34, 44, 58, 60, 62, 63, 67, 71, 72, 75, 76, 83, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 106, 107, 108, 109, 111, 115, 117, 123, 130, 134, 136, 148, 163, 165, 171, 177, 182, 189, 192, 196, 199, 201, 203, 206, 207, 221, 226, 239, 243, 246, 251, 254, 263, 264, 265, 267, 279, 280, 288, 289, 292, 293, 295, 304, 315, 317, 322, 327, 328, 329, 333, 336, 337, 340, 341, 344, 348, 353, 357, 359, 360, 364, 379, 383, 389, 390, 394, 397, 398, 402, 405, 408, 410, 415, 421, 423, 425, 427, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 473, 475, 477, 478], "onli": [3, 5, 7, 9, 10, 13, 22, 23, 26, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 48, 50, 53, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 117, 119, 123, 129, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 148, 150, 151, 152, 154, 156, 157, 159, 162, 163, 165, 166, 171, 172, 173, 175, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 217, 221, 222, 224, 226, 228, 230, 231, 238, 239, 240, 241, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 278, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 297, 298, 300, 301, 304, 307, 308, 309, 310, 311, 314, 315, 316, 318, 321, 323, 324, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 348, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 438, 439, 440, 444, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 477, 478, 479], "to": [3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 86, 87, 90, 91, 92, 94, 95, 96, 97, 103, 104, 107, 108, 109, 111, 112, 114, 115, 117, 119, 121, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 291, 293, 294, 296, 297, 298, 300, 301, 303, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 382, 383, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 456, 458, 459, 467, 468, 478, 479], "its": [3, 5, 7, 9, 11, 22, 23, 25, 28, 30, 32, 33, 34, 38, 41, 42, 44, 46, 48, 54, 55, 57, 59, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 130, 132, 133, 134, 136, 140, 141, 146, 148, 149, 151, 152, 154, 159, 162, 163, 165, 166, 171, 172, 173, 174, 177, 179, 180, 182, 184, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 214, 221, 222, 224, 226, 231, 238, 239, 241, 243, 244, 246, 247, 248, 249, 251, 254, 257, 258, 261, 263, 264, 265, 267, 271, 272, 274, 275, 279, 280, 288, 289, 291, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 307, 309, 310, 311, 315, 316, 317, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 347, 348, 350, 353, 355, 357, 359, 360, 361, 362, 364, 367, 370, 371, 373, 375, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 421, 422, 423, 424, 425, 427, 429, 430, 431, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "count": [3, 5, 7, 9, 32, 33, 34, 44, 53, 57, 62, 63, 67, 73, 74, 75, 77, 79, 83, 84, 86, 88, 89, 92, 93, 94, 98, 100, 103, 117, 118, 123, 136, 141, 143, 145, 148, 156, 157, 160, 172, 173, 178, 181, 184, 186, 187, 189, 192, 204, 207, 214, 220, 222, 232, 243, 244, 246, 251, 254, 257, 263, 267, 274, 277, 279, 280, 284, 288, 289, 293, 295, 301, 304, 314, 315, 324, 327, 333, 336, 337, 339, 340, 341, 343, 348, 357, 359, 360, 361, 362, 364, 375, 377, 383, 390, 395, 408, 423, 425, 430, 431, 437, 441, 447, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 476, 478], "be": [3, 5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 125, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 175, 177, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 229, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 439, 441, 443, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "one": [3, 5, 7, 9, 11, 13, 18, 23, 24, 25, 28, 30, 32, 33, 34, 36, 41, 42, 44, 46, 48, 50, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 106, 107, 109, 111, 112, 114, 116, 117, 119, 123, 129, 130, 132, 134, 135, 136, 138, 140, 141, 143, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 162, 163, 165, 166, 169, 171, 172, 173, 177, 179, 180, 182, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 214, 217, 221, 222, 224, 226, 228, 230, 231, 238, 239, 241, 243, 244, 246, 247, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 307, 310, 314, 315, 316, 318, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 400, 402, 403, 404, 405, 406, 407, 408, 410, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "memori": [3, 5, 7, 18, 23, 28, 30, 31, 32, 33, 34, 40, 42, 44, 46, 48, 54, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 84, 86, 92, 94, 98, 99, 100, 103, 104, 106, 112, 116, 119, 129, 134, 148, 154, 160, 172, 180, 181, 182, 184, 203, 208, 209, 210, 221, 230, 231, 243, 246, 250, 251, 254, 256, 257, 265, 267, 279, 289, 295, 310, 318, 326, 328, 329, 333, 334, 336, 343, 344, 348, 353, 357, 360, 381, 384, 397, 400, 401, 404, 406, 408, 416, 417, 423, 430, 437, 450, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 474, 475, 476, 477, 478], "is": [3, 5, 6, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 112, 113, 114, 117, 119, 120, 121, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 437, 438, 439, 441, 444, 445, 446, 447, 450, 451, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "determin": [3, 5, 7, 11, 18, 22, 23, 32, 33, 38, 39, 44, 48, 53, 59, 62, 67, 72, 74, 75, 84, 89, 91, 93, 97, 99, 100, 102, 103, 106, 117, 123, 130, 141, 148, 151, 153, 154, 155, 157, 171, 172, 173, 175, 177, 178, 180, 182, 185, 186, 187, 189, 193, 199, 204, 207, 209, 211, 221, 226, 238, 243, 244, 245, 246, 251, 255, 261, 262, 263, 264, 265, 266, 267, 268, 271, 275, 279, 288, 289, 291, 292, 293, 295, 303, 304, 307, 310, 314, 315, 316, 317, 324, 326, 327, 328, 329, 330, 333, 336, 340, 341, 342, 343, 344, 348, 349, 350, 351, 353, 355, 356, 357, 361, 362, 364, 371, 373, 379, 381, 383, 390, 394, 395, 400, 405, 410, 416, 420, 421, 422, 424, 425, 427, 429, 430, 431, 450, 456, 459, 460, 462, 463, 464, 466, 469, 470, 471, 472, 473, 475, 478], "from": [3, 5, 7, 9, 10, 11, 13, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 73, 74, 75, 76, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 123, 125, 129, 130, 132, 133, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 166, 169, 171, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 226, 228, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 279, 280, 281, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 347, 348, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 369, 370, 371, 372, 373, 375, 376, 377, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 450, 451, 453, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "tp_basics": [3, 28, 60, 62, 74, 75, 477, 478], "pyobject_newvar": [3, 28, 41, 62, 460, 476, 477, 478], "tp_items": [3, 28, 60, 62, 74, 75], "tupl": [3, 5, 10, 14, 16, 23, 27, 34, 37, 39, 41, 48, 53, 54, 57, 58, 60, 61, 62, 65, 67, 71, 72, 74, 75, 78, 86, 89, 93, 94, 96, 99, 100, 103, 107, 109, 110, 112, 113, 114, 117, 118, 119, 123, 130, 131, 134, 138, 141, 144, 147, 149, 152, 154, 162, 166, 168, 172, 173, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 192, 199, 201, 204, 205, 209, 217, 221, 222, 223, 228, 229, 232, 238, 239, 240, 241, 244, 246, 250, 251, 254, 255, 257, 258, 260, 262, 263, 265, 267, 268, 270, 272, 275, 277, 279, 282, 284, 285, 287, 288, 289, 291, 292, 295, 296, 299, 300, 301, 303, 304, 306, 310, 312, 314, 315, 318, 321, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 347, 350, 354, 355, 356, 357, 360, 361, 364, 367, 371, 373, 376, 377, 379, 380, 383, 384, 389, 390, 391, 393, 395, 396, 397, 400, 402, 407, 408, 410, 411, 414, 415, 417, 422, 423, 424, 425, 426, 427, 431, 435, 436, 438, 440, 441, 445, 446, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "void": [3, 5, 7, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 47, 48, 50, 51, 52, 57, 58, 59, 60, 62, 63, 65, 66, 70, 71, 72, 74, 75, 76, 85, 96, 98, 172, 315, 343, 406, 426, 464, 467, 468, 469, 476, 477, 478], "pyobject_del": [3, 41, 62, 460], "tp_dealloc": [3, 28, 60, 62, 66, 74, 75, 468, 476, 478], "handler": [3, 23, 24, 28, 32, 33, 58, 60, 62, 63, 65, 66, 67, 72, 74, 75, 80, 86, 106, 112, 115, 117, 119, 122, 127, 129, 132, 142, 148, 149, 163, 173, 181, 184, 185, 187, 192, 193, 197, 198, 209, 221, 225, 236, 241, 250, 252, 254, 256, 262, 269, 279, 288, 289, 293, 304, 310, 311, 324, 325, 328, 333, 336, 340, 346, 348, 351, 353, 357, 361, 363, 383, 388, 390, 398, 406, 407, 409, 411, 412, 415, 422, 423, 424, 450, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "_py_nonestruct": [3, 85], "none": [3, 5, 16, 20, 23, 26, 30, 32, 33, 44, 54, 55, 57, 62, 63, 66, 67, 72, 79, 84, 86, 87, 88, 89, 92, 94, 99, 100, 103, 104, 105, 107, 109, 110, 111, 113, 114, 117, 119, 123, 125, 126, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 177, 179, 180, 182, 185, 186, 187, 189, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 214, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 277, 279, 280, 282, 283, 284, 287, 288, 289, 292, 293, 295, 296, 298, 300, 301, 303, 304, 307, 308, 310, 312, 314, 315, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 348, 350, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 425, 426, 427, 430, 431, 432, 436, 437, 438, 441, 445, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "py_non": [3, 23, 27, 32, 45, 46, 55, 66, 72, 85, 89, 426], "pymodule_cr": [3, 32, 44, 71, 72, 75], "macro": [4, 5, 6, 17, 23, 28, 32, 33, 34, 37, 41, 42, 43, 44, 49, 54, 55, 58, 59, 62, 63, 67, 72, 75, 89, 172, 213, 282, 348, 357, 451, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "built": [4, 7, 16, 23, 30, 32, 33, 36, 41, 46, 48, 57, 58, 60, 62, 67, 72, 74, 75, 76, 78, 79, 83, 84, 89, 92, 96, 99, 100, 102, 106, 107, 108, 109, 112, 117, 119, 125, 129, 132, 142, 148, 151, 154, 155, 157, 159, 164, 174, 177, 178, 182, 183, 186, 187, 191, 195, 198, 202, 207, 209, 217, 221, 226, 231, 243, 246, 247, 248, 250, 251, 253, 254, 257, 262, 271, 272, 279, 280, 288, 289, 292, 293, 295, 304, 307, 309, 316, 317, 324, 325, 333, 336, 337, 341, 343, 344, 348, 350, 357, 364, 371, 379, 383, 384, 395, 397, 400, 405, 406, 408, 410, 414, 418, 421, 422, 423, 424, 425, 427, 429, 430, 431, 437, 438, 450, 451, 456, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "run": [4, 23, 28, 32, 33, 41, 44, 50, 58, 62, 63, 67, 71, 72, 75, 76, 78, 80, 83, 84, 85, 87, 88, 89, 91, 92, 94, 96, 98, 99, 101, 102, 103, 104, 106, 109, 111, 112, 117, 120, 121, 122, 126, 129, 130, 131, 133, 134, 135, 137, 141, 148, 149, 153, 159, 160, 162, 163, 165, 166, 169, 172, 173, 177, 181, 182, 183, 189, 196, 199, 204, 209, 210, 222, 224, 226, 231, 232, 238, 239, 240, 241, 246, 247, 251, 252, 257, 262, 263, 264, 265, 267, 275, 279, 284, 288, 289, 292, 293, 304, 309, 316, 318, 319, 320, 321, 323, 327, 328, 329, 330, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 350, 351, 359, 360, 361, 362, 363, 364, 371, 375, 377, 379, 381, 384, 385, 394, 395, 397, 398, 400, 402, 415, 416, 422, 423, 424, 425, 426, 427, 430, 435, 438, 439, 446, 447, 448, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "time": [4, 5, 13, 20, 22, 23, 27, 28, 30, 32, 33, 40, 41, 44, 53, 62, 63, 67, 71, 72, 74, 75, 76, 78, 80, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 102, 103, 107, 112, 114, 115, 117, 119, 123, 129, 130, 131, 133, 135, 136, 137, 138, 139, 141, 143, 147, 148, 153, 156, 159, 162, 163, 165, 169, 172, 173, 178, 182, 186, 189, 198, 199, 204, 205, 208, 209, 210, 212, 214, 221, 222, 226, 230, 231, 239, 241, 243, 244, 246, 250, 251, 253, 255, 257, 262, 263, 264, 265, 267, 272, 277, 278, 279, 280, 284, 288, 289, 290, 291, 292, 293, 295, 296, 304, 305, 310, 314, 315, 316, 318, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 336, 337, 338, 340, 344, 348, 353, 354, 357, 359, 360, 362, 364, 367, 370, 371, 374, 375, 379, 381, 383, 384, 385, 390, 393, 395, 397, 400, 402, 403, 404, 405, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 425, 427, 429, 430, 431, 435, 438, 444, 446, 447, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 472, 478], "py_major_vers": [4, 110], "1a2": 4, "py_minor_vers": [4, 65, 110, 476], "py_micro_vers": [4, 110], "py_release_level": [4, 110], "0xa": 4, "alpha": [4, 67, 79, 86, 110, 280, 284, 303, 314, 348, 350, 446, 457, 458, 463, 466, 479], "0xb": 4, "beta": [4, 67, 110, 314, 348, 446, 457, 463, 473, 479], "0xc": 4, "0xf": 4, "py_release_seri": [4, 110], "py_version_hex": [4, 56, 467, 468, 476, 477, 478], "32": [4, 16, 25, 40, 58, 67, 85, 93, 94, 96, 97, 103, 104, 106, 112, 118, 136, 138, 143, 150, 154, 162, 172, 182, 211, 222, 231, 246, 247, 255, 257, 258, 266, 279, 289, 299, 300, 302, 307, 314, 322, 329, 333, 339, 340, 343, 345, 348, 360, 361, 383, 393, 400, 401, 417, 418, 419, 423, 430, 441, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478], "big": [4, 25, 34, 41, 63, 67, 72, 77, 83, 89, 94, 100, 104, 106, 129, 130, 138, 150, 154, 163, 172, 173, 187, 226, 255, 265, 291, 340, 343, 345, 348, 357, 384, 393, 400, 429, 447, 451, 459, 460, 461, 464, 466, 468, 470, 472, 478], "endian": [4, 25, 30, 41, 63, 83, 104, 106, 138, 150, 154, 172, 226, 255, 291, 343, 345, 348, 393, 400, 447, 472, 478], "order": [4, 7, 13, 28, 30, 32, 33, 42, 44, 57, 58, 62, 63, 67, 71, 72, 74, 75, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 106, 107, 109, 113, 115, 117, 119, 123, 130, 136, 137, 142, 144, 146, 148, 150, 152, 154, 156, 163, 165, 171, 173, 174, 175, 179, 180, 182, 183, 186, 187, 189, 192, 196, 198, 199, 201, 204, 207, 209, 210, 214, 220, 221, 224, 226, 229, 232, 241, 243, 244, 246, 250, 251, 254, 255, 257, 258, 262, 263, 265, 267, 271, 277, 279, 280, 284, 289, 291, 292, 295, 298, 299, 300, 303, 304, 305, 309, 310, 311, 312, 314, 315, 321, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 344, 346, 348, 353, 357, 359, 360, 361, 364, 371, 376, 377, 379, 380, 381, 383, 384, 389, 390, 394, 395, 397, 402, 405, 406, 408, 410, 416, 417, 422, 423, 424, 426, 427, 428, 430, 437, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479], "0x03": [4, 187], "16": [4, 5, 16, 33, 40, 46, 67, 77, 84, 88, 93, 94, 100, 104, 106, 114, 118, 138, 143, 154, 169, 172, 173, 179, 189, 207, 217, 221, 222, 231, 232, 236, 255, 257, 258, 263, 279, 288, 289, 291, 310, 314, 315, 318, 322, 328, 333, 337, 339, 340, 341, 344, 348, 361, 364, 373, 393, 419, 421, 430, 435, 437, 439, 441, 444, 446, 447, 448, 451, 457, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "0x04": [4, 187, 423], "17": [4, 93, 94, 100, 106, 136, 179, 182, 186, 189, 204, 219, 232, 253, 257, 288, 289, 315, 361, 373, 439, 444, 458, 461, 463, 464, 466, 469, 470, 472, 473, 476, 477, 478], "24": [4, 84, 93, 94, 97, 103, 106, 136, 138, 179, 182, 189, 205, 232, 255, 257, 291, 315, 328, 339, 340, 343, 345, 361, 419, 421, 430, 464, 468, 471, 472, 476, 477, 478], "0x01": [4, 187, 333], "25": [4, 84, 93, 94, 123, 179, 182, 186, 217, 232, 255, 257, 279, 314, 315, 318, 331, 333, 336, 339, 340, 356, 373, 377, 379, 419, 437, 441, 443, 444, 446, 457, 459, 460, 461, 463, 464, 468, 469, 471, 473, 474, 475, 476, 477, 478], "28": [4, 32, 96, 100, 182, 222, 232, 255, 336, 361, 379, 461, 462, 463, 467, 470, 476, 477, 478], "29": [4, 96, 100, 103, 179, 182, 186, 232, 255, 257, 263, 314, 361, 460, 463, 467, 471, 476, 477, 478], "0x2": 4, "hexvers": [4, 67, 79, 311, 348, 445, 471], "0x030401a2": 4, "10": [4, 10, 14, 20, 22, 23, 26, 28, 32, 33, 35, 38, 44, 46, 48, 51, 54, 56, 57, 60, 62, 63, 67, 72, 78, 83, 86, 91, 92, 93, 94, 96, 99, 100, 103, 105, 106, 107, 109, 110, 112, 113, 117, 118, 119, 120, 123, 126, 128, 131, 132, 133, 134, 135, 136, 140, 144, 146, 148, 151, 152, 154, 156, 159, 165, 172, 173, 177, 179, 181, 182, 184, 187, 189, 205, 209, 210, 211, 212, 214, 216, 217, 219, 221, 222, 227, 229, 231, 232, 233, 237, 238, 246, 247, 248, 251, 254, 255, 257, 262, 263, 264, 270, 271, 274, 278, 279, 280, 282, 284, 287, 288, 289, 290, 292, 299, 300, 303, 304, 307, 308, 314, 315, 318, 321, 322, 326, 328, 333, 336, 337, 338, 339, 340, 341, 343, 344, 348, 350, 355, 357, 359, 360, 361, 362, 364, 367, 373, 376, 379, 380, 381, 383, 385, 389, 390, 402, 408, 410, 415, 417, 418, 420, 422, 423, 424, 425, 426, 427, 430, 435, 436, 437, 438, 439, 441, 443, 444, 446, 447, 448, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 476, 477, 479], "0x030a00f0": 4, "if": [4, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 79, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 119, 123, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 228, 229, 230, 231, 232, 234, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 437, 438, 440, 443, 445, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "py_vers": [4, 32, 56, 172, 468, 470, 478], "const": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 32, 33, 38, 39, 40, 42, 44, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 62, 63, 65, 67, 72, 74, 78, 96, 98, 115, 288, 346, 406, 472, 475, 476, 478], "unsign": [4, 5, 7, 9, 25, 30, 32, 33, 34, 38, 41, 50, 57, 60, 62, 63, 74, 89, 118, 138, 143, 172, 289, 291, 295, 333, 340, 343, 345, 403, 405, 406, 419, 447, 459, 460, 462, 467, 471, 475, 478], "long": [4, 5, 6, 9, 22, 23, 30, 32, 33, 34, 38, 40, 44, 57, 58, 60, 62, 63, 65, 67, 72, 74, 83, 84, 88, 89, 94, 96, 98, 99, 100, 102, 103, 104, 107, 109, 117, 118, 123, 136, 140, 143, 163, 165, 172, 173, 186, 189, 198, 204, 208, 211, 221, 222, 224, 238, 241, 243, 244, 254, 255, 257, 263, 264, 279, 288, 289, 295, 299, 301, 302, 303, 304, 315, 317, 324, 326, 329, 331, 333, 334, 336, 337, 340, 343, 344, 348, 353, 357, 359, 360, 361, 362, 364, 370, 371, 376, 390, 395, 400, 402, 405, 406, 420, 421, 422, 423, 425, 430, 450, 456, 457, 458, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "sinc": [4, 5, 7, 10, 13, 14, 22, 23, 26, 28, 30, 32, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 87, 89, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 123, 130, 141, 143, 146, 148, 153, 157, 163, 165, 169, 171, 172, 173, 177, 179, 182, 186, 189, 190, 192, 194, 195, 197, 199, 201, 203, 204, 205, 209, 214, 218, 221, 222, 226, 230, 231, 239, 240, 241, 243, 244, 246, 247, 254, 258, 262, 264, 265, 267, 268, 271, 274, 279, 284, 288, 289, 291, 292, 293, 303, 304, 310, 315, 324, 326, 328, 331, 333, 334, 335, 336, 337, 340, 341, 343, 348, 353, 357, 359, 360, 361, 364, 371, 373, 375, 376, 377, 381, 383, 384, 385, 390, 394, 395, 397, 400, 402, 404, 405, 406, 407, 409, 410, 414, 416, 417, 422, 423, 425, 427, 429, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "version": [4, 7, 9, 10, 13, 14, 23, 26, 28, 30, 32, 33, 34, 35, 40, 41, 42, 44, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 84, 88, 89, 90, 91, 92, 93, 94, 96, 99, 100, 103, 106, 107, 108, 109, 114, 115, 116, 117, 119, 123, 125, 130, 136, 139, 140, 148, 154, 159, 163, 169, 172, 173, 179, 180, 182, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 217, 221, 226, 229, 231, 238, 239, 240, 241, 243, 244, 246, 248, 251, 252, 253, 255, 258, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 276, 277, 279, 281, 284, 289, 291, 292, 294, 295, 299, 300, 303, 304, 308, 309, 310, 311, 314, 315, 316, 326, 327, 328, 330, 333, 334, 335, 336, 340, 341, 343, 344, 346, 348, 349, 350, 351, 354, 356, 357, 359, 360, 362, 364, 370, 371, 372, 374, 375, 376, 380, 381, 382, 383, 384, 385, 389, 390, 393, 394, 396, 397, 398, 400, 402, 405, 406, 408, 412, 416, 417, 420, 421, 423, 424, 425, 426, 427, 430, 431, 445, 448, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479], "11": [4, 7, 13, 23, 25, 26, 30, 32, 33, 34, 42, 51, 57, 58, 59, 60, 67, 71, 84, 86, 88, 91, 92, 93, 94, 98, 99, 100, 101, 103, 106, 109, 110, 114, 117, 123, 124, 125, 132, 133, 135, 136, 138, 143, 148, 149, 150, 154, 156, 162, 165, 169, 171, 172, 177, 179, 180, 182, 187, 189, 207, 208, 209, 211, 214, 217, 221, 222, 226, 227, 230, 231, 232, 237, 238, 241, 243, 245, 246, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 268, 271, 274, 277, 279, 283, 284, 287, 289, 291, 292, 293, 295, 297, 303, 314, 315, 317, 318, 326, 328, 329, 330, 332, 333, 335, 336, 337, 339, 340, 341, 343, 344, 345, 348, 349, 350, 353, 354, 355, 356, 357, 359, 361, 373, 374, 376, 381, 383, 390, 392, 394, 395, 398, 402, 403, 407, 417, 418, 419, 420, 422, 423, 425, 426, 430, 431, 437, 441, 450, 451, 456, 459, 460, 461, 463, 465, 467, 469, 470, 472, 473, 474, 475, 476, 479], "includ": [4, 5, 7, 9, 13, 18, 22, 23, 26, 27, 28, 30, 31, 32, 33, 44, 48, 52, 54, 55, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 80, 83, 84, 85, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 106, 107, 109, 111, 114, 117, 119, 130, 134, 136, 140, 143, 147, 149, 150, 151, 152, 153, 154, 155, 157, 159, 163, 169, 172, 173, 174, 177, 179, 182, 186, 187, 189, 192, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 269, 271, 272, 274, 277, 279, 284, 285, 288, 289, 292, 293, 295, 301, 303, 304, 307, 308, 310, 315, 318, 319, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 340, 341, 343, 344, 348, 350, 351, 353, 354, 357, 359, 360, 361, 364, 367, 368, 370, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 397, 398, 400, 401, 402, 404, 405, 406, 408, 410, 411, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 444, 446, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "patchlevel": [4, 299], "these": [5, 7, 9, 11, 13, 23, 25, 28, 30, 32, 33, 34, 40, 41, 44, 50, 56, 57, 58, 62, 63, 65, 71, 72, 74, 75, 76, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 111, 112, 117, 119, 123, 129, 130, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 159, 163, 165, 172, 173, 174, 177, 179, 180, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 217, 221, 222, 226, 231, 238, 239, 241, 243, 246, 247, 248, 251, 254, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 303, 304, 308, 310, 314, 315, 316, 317, 318, 320, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 356, 357, 360, 361, 362, 364, 370, 373, 375, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 395, 397, 398, 400, 402, 403, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "when": [5, 7, 9, 10, 11, 13, 18, 22, 23, 27, 28, 30, 32, 33, 34, 35, 36, 38, 41, 44, 46, 48, 49, 53, 56, 57, 58, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 89, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 121, 123, 125, 126, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 150, 151, 152, 153, 154, 163, 165, 166, 168, 169, 171, 172, 173, 174, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 217, 221, 222, 224, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 304, 305, 307, 309, 310, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 348, 349, 350, 351, 353, 354, 355, 356, 357, 360, 361, 362, 364, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 427, 429, 430, 431, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "creat": [5, 7, 9, 11, 13, 16, 17, 22, 23, 24, 25, 27, 28, 30, 33, 34, 38, 39, 41, 42, 44, 48, 50, 54, 57, 58, 59, 62, 65, 66, 67, 72, 74, 75, 76, 85, 86, 87, 89, 91, 92, 98, 99, 102, 103, 104, 106, 107, 108, 111, 112, 114, 117, 119, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 141, 146, 147, 148, 150, 153, 154, 156, 157, 159, 163, 165, 166, 170, 171, 172, 173, 177, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 194, 195, 196, 197, 198, 199, 201, 203, 204, 206, 207, 209, 211, 214, 217, 220, 221, 222, 226, 230, 232, 237, 238, 241, 243, 244, 246, 247, 248, 250, 251, 252, 254, 255, 263, 264, 265, 266, 267, 268, 274, 277, 278, 279, 280, 281, 284, 289, 292, 293, 294, 295, 296, 298, 301, 303, 304, 308, 310, 315, 318, 319, 324, 326, 328, 330, 331, 333, 334, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 353, 355, 357, 359, 360, 362, 364, 365, 366, 367, 368, 370, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 390, 392, 394, 397, 398, 400, 402, 405, 406, 408, 409, 410, 411, 412, 414, 415, 417, 418, 420, 421, 422, 424, 425, 427, 429, 430, 431, 435, 436, 437, 446, 447, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "your": [5, 22, 32, 56, 58, 62, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 93, 94, 98, 99, 101, 103, 106, 107, 108, 109, 111, 115, 117, 119, 130, 138, 149, 155, 163, 173, 177, 179, 183, 187, 189, 192, 194, 196, 197, 198, 201, 203, 207, 209, 218, 222, 230, 231, 238, 239, 240, 241, 242, 243, 246, 251, 254, 258, 262, 263, 264, 265, 267, 274, 279, 289, 292, 293, 295, 301, 304, 309, 315, 316, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 346, 349, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 370, 377, 379, 381, 383, 384, 389, 390, 394, 395, 397, 402, 405, 406, 408, 410, 415, 416, 417, 420, 421, 429, 431, 436, 437, 444, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "extens": [5, 7, 11, 13, 23, 27, 33, 34, 41, 44, 49, 56, 60, 62, 65, 67, 71, 73, 78, 83, 84, 86, 89, 90, 91, 93, 95, 102, 103, 111, 115, 136, 140, 149, 163, 169, 172, 173, 177, 179, 180, 185, 186, 189, 190, 196, 199, 204, 214, 216, 231, 237, 238, 241, 242, 244, 246, 247, 250, 251, 254, 258, 265, 267, 269, 272, 276, 284, 288, 289, 292, 293, 295, 301, 304, 308, 310, 315, 326, 327, 328, 329, 331, 333, 336, 337, 340, 348, 349, 350, 353, 357, 360, 363, 364, 370, 377, 379, 380, 381, 383, 390, 397, 400, 405, 406, 409, 410, 414, 416, 417, 421, 423, 425, 427, 435, 440, 446, 450, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 474, 475, 476, 477, 478], "method": [5, 7, 10, 16, 21, 22, 23, 24, 25, 28, 32, 33, 38, 39, 41, 44, 45, 48, 49, 52, 53, 54, 55, 60, 61, 62, 65, 67, 71, 73, 74, 79, 80, 85, 86, 87, 88, 89, 91, 94, 99, 100, 102, 106, 107, 109, 112, 113, 114, 115, 119, 122, 125, 127, 128, 129, 130, 133, 134, 135, 136, 139, 141, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 163, 164, 166, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 186, 187, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 214, 215, 217, 218, 221, 222, 223, 226, 230, 231, 233, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 252, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 269, 272, 274, 275, 277, 280, 287, 289, 291, 293, 294, 295, 297, 298, 301, 303, 304, 307, 308, 309, 310, 311, 312, 314, 315, 317, 319, 321, 324, 325, 326, 327, 331, 334, 337, 339, 341, 343, 344, 345, 346, 347, 348, 353, 354, 355, 357, 359, 360, 362, 364, 365, 367, 368, 369, 370, 371, 373, 376, 377, 380, 381, 382, 383, 389, 390, 392, 394, 396, 398, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 424, 427, 428, 430, 431, 436, 437, 438, 439, 440, 442, 444, 446, 447, 450, 451, 458, 459, 460, 463, 464, 466, 467, 469, 470, 472, 476, 478, 479], "addit": [5, 7, 9, 23, 30, 32, 34, 40, 41, 44, 57, 60, 62, 65, 67, 72, 74, 75, 83, 89, 93, 94, 96, 97, 98, 99, 100, 103, 106, 109, 112, 114, 117, 119, 123, 136, 138, 142, 147, 148, 153, 154, 163, 165, 169, 171, 172, 173, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 189, 190, 192, 193, 195, 198, 199, 201, 202, 204, 206, 209, 211, 214, 217, 221, 222, 226, 230, 231, 238, 239, 241, 243, 246, 247, 251, 253, 254, 255, 257, 258, 262, 263, 264, 266, 267, 271, 272, 274, 279, 281, 288, 289, 292, 295, 301, 303, 304, 309, 310, 315, 317, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 339, 341, 343, 344, 348, 353, 354, 355, 357, 359, 360, 361, 362, 364, 367, 370, 371, 373, 379, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 400, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 417, 421, 422, 423, 424, 425, 427, 429, 430, 431, 439, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478], "inform": [5, 7, 11, 16, 23, 25, 28, 32, 33, 41, 44, 50, 57, 59, 62, 63, 65, 67, 69, 71, 72, 74, 76, 84, 85, 87, 88, 89, 92, 94, 96, 97, 99, 101, 103, 106, 107, 109, 112, 115, 117, 119, 120, 123, 130, 137, 140, 141, 148, 149, 151, 154, 159, 165, 168, 169, 171, 172, 173, 177, 179, 182, 184, 186, 187, 189, 191, 192, 193, 197, 199, 201, 203, 205, 206, 207, 209, 211, 212, 221, 222, 224, 225, 229, 231, 236, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 272, 274, 279, 283, 284, 288, 292, 295, 298, 301, 303, 304, 307, 308, 309, 310, 311, 315, 316, 317, 324, 325, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 343, 344, 346, 348, 351, 353, 354, 356, 357, 360, 361, 364, 368, 370, 371, 375, 376, 377, 379, 381, 383, 384, 386, 389, 390, 394, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 438, 443, 447, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "exampl": [5, 7, 18, 22, 23, 32, 33, 34, 41, 44, 50, 57, 60, 62, 63, 65, 67, 71, 72, 73, 74, 76, 83, 84, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 106, 107, 109, 111, 114, 116, 117, 119, 123, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 146, 147, 148, 151, 154, 155, 156, 159, 166, 168, 169, 171, 172, 173, 177, 178, 180, 182, 183, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 276, 278, 279, 280, 281, 284, 289, 291, 292, 293, 295, 296, 301, 303, 304, 307, 309, 310, 311, 314, 316, 317, 322, 325, 327, 329, 330, 331, 333, 334, 336, 337, 339, 340, 342, 343, 344, 346, 348, 350, 351, 354, 357, 358, 359, 360, 361, 362, 364, 370, 371, 373, 375, 377, 379, 380, 381, 382, 383, 384, 389, 393, 395, 397, 398, 402, 403, 404, 405, 406, 407, 408, 410, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 435, 439, 445, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "avail": [5, 7, 11, 13, 22, 23, 25, 26, 27, 32, 33, 38, 41, 44, 54, 57, 58, 60, 63, 65, 67, 70, 71, 72, 74, 76, 83, 84, 89, 91, 93, 98, 99, 100, 101, 102, 103, 106, 107, 109, 112, 117, 119, 120, 123, 130, 133, 134, 136, 148, 152, 154, 159, 163, 165, 166, 169, 171, 172, 173, 178, 180, 182, 187, 191, 203, 206, 207, 208, 209, 210, 211, 214, 219, 221, 222, 225, 226, 229, 231, 238, 241, 243, 244, 246, 247, 248, 251, 253, 254, 255, 258, 262, 263, 264, 265, 267, 271, 272, 274, 278, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 300, 301, 304, 306, 309, 310, 311, 314, 315, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 348, 349, 351, 353, 354, 356, 357, 360, 361, 364, 369, 370, 371, 373, 376, 377, 379, 380, 381, 383, 384, 385, 390, 394, 397, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "in": [5, 6, 7, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 67, 70, 73, 74, 75, 77, 79, 86, 88, 90, 91, 92, 93, 96, 97, 98, 101, 103, 104, 105, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 162, 163, 164, 166, 169, 171, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 228, 229, 230, 231, 232, 234, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 289, 291, 293, 294, 295, 296, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 382, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 450, 451, 453, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 478, 479], "first": [5, 13, 18, 22, 23, 25, 27, 30, 32, 33, 36, 38, 40, 41, 44, 46, 48, 50, 53, 57, 58, 59, 60, 62, 63, 66, 71, 72, 74, 75, 76, 77, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 111, 114, 117, 119, 123, 129, 132, 136, 137, 138, 141, 144, 147, 148, 150, 152, 153, 154, 156, 163, 165, 171, 172, 173, 174, 179, 180, 182, 184, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 209, 210, 211, 214, 217, 221, 222, 224, 226, 231, 238, 239, 240, 243, 244, 251, 254, 255, 257, 261, 262, 263, 264, 265, 267, 268, 271, 272, 274, 277, 279, 280, 283, 284, 287, 288, 289, 291, 292, 293, 295, 297, 298, 299, 303, 304, 309, 310, 315, 316, 320, 321, 324, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 351, 353, 354, 356, 357, 359, 361, 362, 364, 370, 371, 372, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 395, 396, 397, 400, 402, 403, 405, 408, 409, 414, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 441, 444, 447, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "three": [5, 7, 23, 30, 34, 41, 57, 62, 72, 74, 75, 76, 83, 84, 87, 89, 92, 93, 99, 100, 103, 106, 114, 117, 119, 130, 131, 136, 154, 156, 157, 171, 172, 173, 177, 179, 182, 185, 186, 187, 189, 190, 192, 196, 201, 203, 207, 209, 212, 221, 222, 239, 241, 244, 246, 262, 263, 264, 265, 267, 274, 279, 284, 288, 289, 291, 292, 293, 295, 303, 304, 310, 314, 315, 324, 328, 329, 330, 333, 336, 337, 340, 341, 343, 344, 348, 353, 354, 361, 362, 364, 371, 379, 380, 381, 383, 384, 385, 390, 394, 398, 404, 405, 409, 410, 414, 420, 422, 423, 425, 426, 427, 429, 430, 431, 436, 446, 447, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 475, 476, 478], "describ": [5, 7, 13, 23, 26, 30, 41, 44, 48, 49, 50, 57, 58, 59, 60, 62, 65, 67, 71, 72, 74, 76, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 106, 107, 109, 112, 114, 117, 119, 123, 125, 134, 140, 141, 142, 147, 148, 149, 154, 159, 163, 165, 171, 172, 173, 176, 177, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 198, 199, 204, 209, 212, 213, 218, 220, 221, 226, 231, 238, 240, 241, 242, 243, 244, 245, 247, 251, 254, 255, 256, 262, 263, 264, 265, 267, 272, 276, 277, 280, 284, 286, 288, 289, 291, 294, 295, 303, 304, 308, 310, 311, 315, 317, 318, 320, 324, 328, 331, 332, 333, 336, 337, 338, 340, 341, 343, 344, 348, 349, 353, 360, 364, 370, 371, 379, 381, 383, 384, 389, 390, 392, 400, 401, 402, 403, 405, 409, 410, 411, 414, 417, 418, 421, 422, 423, 425, 427, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pyarg_parsetupl": [5, 7, 47, 56, 57, 71, 72, 74, 76, 89, 425, 457, 459, 460, 462, 463, 467, 469, 471, 476, 478], "pyarg_parsetupleandkeyword": [5, 56, 57, 72, 74, 75, 89, 461, 474, 478], "pyarg_pars": [5, 56, 89, 464, 470, 478], "all": [5, 7, 9, 17, 22, 23, 25, 28, 30, 32, 33, 34, 37, 38, 41, 44, 46, 54, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 76, 83, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 114, 117, 119, 121, 123, 125, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 221, 222, 224, 226, 229, 230, 231, 234, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 280, 283, 284, 289, 291, 292, 293, 295, 296, 298, 301, 304, 305, 307, 308, 309, 310, 312, 318, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 364, 370, 371, 373, 375, 376, 379, 380, 381, 382, 383, 384, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 435, 436, 437, 439, 444, 445, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478], "which": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 48, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 83, 84, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 111, 112, 114, 117, 119, 123, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 186, 187, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 221, 222, 224, 226, 230, 231, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 315, 316, 317, 318, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 342, 343, 344, 348, 349, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 439, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "tell": [5, 30, 32, 67, 72, 74, 88, 89, 91, 94, 100, 102, 103, 109, 114, 115, 117, 123, 148, 150, 155, 189, 204, 218, 231, 254, 263, 265, 273, 274, 279, 288, 291, 294, 295, 328, 329, 333, 334, 336, 337, 340, 345, 346, 362, 364, 375, 381, 384, 390, 396, 402, 417, 441, 457, 459, 460, 461, 463, 473, 474, 475, 478], "about": [5, 7, 13, 22, 23, 25, 27, 28, 41, 50, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 79, 83, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 111, 117, 119, 123, 125, 130, 138, 140, 141, 151, 152, 153, 154, 165, 168, 172, 174, 177, 179, 182, 183, 186, 187, 190, 191, 193, 197, 199, 203, 205, 209, 212, 221, 231, 239, 241, 243, 246, 251, 254, 257, 261, 263, 264, 265, 266, 267, 271, 274, 275, 279, 284, 288, 289, 292, 293, 295, 296, 303, 304, 308, 315, 316, 317, 318, 324, 326, 328, 329, 331, 333, 335, 336, 337, 338, 340, 343, 344, 346, 348, 353, 354, 357, 364, 371, 376, 379, 381, 383, 384, 385, 389, 390, 395, 397, 400, 402, 403, 404, 405, 407, 409, 410, 411, 417, 418, 420, 422, 423, 424, 425, 427, 429, 431, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "expect": [5, 9, 23, 28, 38, 44, 56, 57, 62, 65, 67, 72, 74, 75, 76, 83, 84, 88, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 111, 117, 119, 123, 124, 130, 131, 136, 148, 150, 154, 163, 165, 172, 173, 177, 182, 183, 184, 186, 187, 189, 193, 199, 209, 217, 221, 226, 231, 238, 239, 241, 246, 247, 249, 251, 257, 258, 262, 263, 265, 267, 274, 279, 288, 289, 295, 298, 305, 308, 324, 326, 327, 329, 333, 336, 337, 339, 340, 344, 346, 348, 349, 353, 354, 357, 361, 371, 373, 379, 380, 381, 384, 385, 389, 390, 392, 394, 402, 403, 408, 410, 411, 414, 420, 423, 424, 425, 426, 427, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "same": [5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 28, 32, 33, 37, 38, 40, 41, 44, 45, 48, 50, 53, 55, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 101, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 129, 130, 132, 134, 135, 136, 137, 138, 141, 147, 148, 151, 153, 154, 159, 163, 165, 166, 169, 171, 172, 173, 174, 177, 179, 180, 182, 183, 186, 187, 189, 190, 191, 192, 197, 198, 199, 201, 203, 204, 205, 207, 209, 211, 212, 214, 216, 217, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 248, 249, 251, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 301, 303, 304, 305, 308, 309, 310, 315, 316, 317, 318, 321, 324, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 364, 366, 369, 370, 371, 373, 376, 379, 380, 381, 382, 383, 384, 389, 390, 395, 396, 397, 398, 400, 402, 405, 408, 410, 414, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 477, 478], "syntax": [5, 7, 67, 72, 77, 78, 79, 84, 89, 94, 97, 99, 100, 103, 106, 107, 109, 115, 123, 136, 148, 153, 155, 163, 164, 172, 177, 182, 199, 207, 209, 221, 226, 243, 250, 251, 258, 260, 262, 264, 269, 279, 288, 291, 293, 310, 327, 336, 340, 348, 357, 358, 364, 371, 376, 377, 381, 383, 389, 390, 412, 414, 422, 423, 424, 425, 426, 427, 429, 430, 431, 439, 440, 441, 444, 450, 452, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 470, 472, 475, 476, 477, 478, 479], "for": [5, 7, 9, 11, 13, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 85, 86, 88, 90, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 162, 163, 166, 168, 169, 171, 174, 177, 178, 179, 180, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 220, 221, 222, 225, 226, 228, 229, 231, 232, 234, 236, 238, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 283, 284, 286, 287, 289, 291, 292, 293, 294, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 333, 335, 336, 338, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 375, 376, 377, 382, 383, 384, 388, 389, 390, 392, 394, 396, 397, 398, 399, 400, 403, 404, 405, 406, 412, 414, 415, 416, 417, 418, 420, 421, 424, 426, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 452, 453, 457, 458, 459, 465, 467, 468, 478, 479], "each": [5, 7, 13, 22, 23, 28, 30, 32, 33, 34, 36, 39, 41, 44, 58, 60, 62, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 109, 111, 114, 117, 119, 123, 129, 130, 135, 136, 138, 140, 146, 147, 148, 149, 150, 151, 152, 154, 155, 159, 162, 163, 165, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 191, 192, 193, 198, 199, 200, 201, 204, 207, 208, 210, 212, 214, 221, 222, 224, 226, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 277, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 301, 303, 304, 305, 308, 309, 310, 314, 315, 316, 317, 318, 321, 325, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 348, 349, 350, 351, 353, 354, 356, 357, 359, 360, 362, 364, 367, 370, 371, 373, 375, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 400, 402, 403, 404, 405, 406, 408, 410, 412, 414, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 437, 439, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478], "consist": [5, 7, 9, 18, 23, 30, 32, 55, 62, 63, 65, 72, 84, 89, 91, 93, 94, 99, 100, 102, 111, 114, 119, 138, 143, 147, 148, 150, 154, 163, 173, 174, 179, 186, 187, 189, 192, 199, 201, 203, 204, 205, 207, 224, 238, 239, 243, 244, 246, 248, 255, 258, 262, 264, 265, 266, 271, 279, 289, 295, 297, 304, 315, 321, 327, 331, 334, 336, 340, 342, 343, 344, 348, 357, 359, 364, 370, 371, 379, 381, 383, 390, 405, 420, 421, 422, 423, 425, 427, 430, 451, 456, 457, 458, 459, 460, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "zero": [5, 7, 18, 23, 25, 26, 28, 30, 32, 33, 34, 35, 37, 38, 41, 44, 48, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 83, 84, 86, 89, 93, 97, 98, 99, 100, 103, 106, 117, 119, 123, 130, 136, 138, 140, 143, 147, 151, 152, 154, 156, 172, 173, 177, 179, 182, 186, 187, 189, 192, 205, 207, 209, 221, 222, 230, 231, 238, 244, 246, 254, 255, 257, 265, 267, 271, 274, 279, 284, 288, 289, 293, 295, 301, 310, 315, 316, 324, 328, 329, 331, 333, 336, 337, 338, 340, 341, 343, 344, 348, 353, 356, 359, 360, 361, 371, 379, 383, 392, 400, 405, 408, 417, 423, 424, 425, 426, 429, 430, 431, 436, 438, 439, 443, 450, 457, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "or": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 119, 120, 125, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 166, 168, 169, 171, 173, 174, 175, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 370, 371, 372, 373, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 440, 443, 444, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "more": [5, 11, 13, 18, 22, 23, 24, 25, 27, 32, 33, 34, 41, 44, 48, 50, 55, 56, 57, 59, 60, 62, 63, 65, 67, 70, 71, 72, 73, 75, 76, 78, 83, 84, 85, 87, 89, 92, 93, 94, 96, 98, 99, 102, 106, 107, 109, 111, 112, 117, 119, 120, 123, 130, 134, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 163, 165, 166, 168, 169, 171, 172, 173, 177, 179, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 209, 211, 214, 216, 218, 221, 222, 224, 225, 226, 228, 229, 230, 231, 238, 239, 241, 243, 244, 246, 247, 248, 251, 253, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 271, 272, 274, 277, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 301, 303, 304, 307, 308, 310, 314, 315, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 356, 357, 359, 360, 361, 362, 364, 369, 370, 371, 372, 376, 377, 381, 383, 384, 389, 390, 394, 395, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 410, 414, 415, 417, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 436, 438, 439, 443, 448, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478], "unit": [5, 63, 67, 72, 84, 86, 89, 93, 94, 97, 99, 100, 106, 111, 174, 179, 183, 189, 221, 222, 271, 304, 321, 333, 337, 340, 341, 361, 362, 364, 371, 379, 383, 384, 402, 421, 423, 424, 458, 463, 469, 471, 473, 476, 477, 478], "it": [5, 6, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 109, 111, 112, 114, 117, 119, 123, 126, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 229, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 367, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 439, 444, 445, 447, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "usual": [5, 7, 23, 28, 32, 33, 34, 38, 44, 46, 60, 62, 63, 72, 74, 83, 84, 89, 91, 92, 93, 94, 97, 98, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 130, 143, 146, 148, 150, 169, 171, 172, 182, 186, 189, 190, 192, 194, 198, 201, 209, 217, 221, 222, 226, 239, 241, 243, 244, 246, 247, 251, 254, 255, 257, 264, 265, 268, 271, 279, 284, 288, 289, 291, 293, 295, 300, 315, 317, 324, 328, 329, 330, 333, 334, 335, 336, 337, 340, 341, 344, 348, 353, 357, 361, 364, 370, 371, 376, 379, 381, 383, 384, 385, 390, 396, 397, 408, 416, 417, 418, 422, 423, 425, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 476, 478], "singl": [5, 7, 9, 16, 22, 23, 25, 30, 32, 38, 47, 50, 57, 58, 60, 62, 63, 65, 66, 67, 70, 72, 75, 78, 84, 86, 89, 91, 93, 94, 97, 98, 102, 103, 106, 107, 117, 119, 123, 141, 143, 147, 148, 153, 154, 155, 159, 162, 163, 171, 172, 173, 174, 177, 179, 182, 185, 186, 187, 189, 191, 192, 198, 199, 203, 204, 209, 214, 216, 221, 222, 226, 230, 231, 238, 239, 243, 244, 246, 247, 251, 254, 255, 257, 261, 263, 264, 265, 266, 267, 271, 274, 277, 279, 280, 284, 288, 289, 292, 293, 295, 298, 301, 303, 304, 310, 311, 314, 315, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 347, 348, 350, 353, 357, 359, 361, 364, 366, 367, 371, 373, 375, 376, 381, 383, 384, 385, 389, 390, 395, 397, 402, 403, 405, 408, 410, 412, 414, 416, 417, 422, 423, 425, 426, 427, 429, 430, 431, 436, 439, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478], "charact": [5, 9, 16, 18, 32, 33, 38, 41, 48, 58, 67, 72, 83, 84, 86, 89, 91, 100, 106, 115, 117, 118, 119, 123, 128, 134, 140, 142, 143, 147, 148, 152, 154, 163, 169, 171, 172, 174, 179, 180, 182, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 209, 210, 216, 221, 224, 227, 234, 235, 240, 241, 243, 244, 246, 247, 250, 254, 261, 262, 264, 267, 268, 269, 278, 279, 280, 281, 284, 289, 292, 295, 303, 310, 315, 316, 317, 319, 327, 328, 331, 333, 334, 336, 338, 340, 341, 342, 344, 348, 353, 354, 356, 357, 359, 361, 364, 367, 370, 371, 382, 383, 389, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 421, 425, 426, 429, 430, 431, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "parenthes": [5, 62, 67, 72, 78, 84, 89, 94, 100, 103, 153, 187, 244, 246, 262, 304, 315, 340, 394, 422, 423, 424, 426, 429, 430, 431, 437, 444, 457, 461, 462, 463, 464, 467, 469, 473, 475, 476, 478], "with": [5, 7, 9, 10, 11, 13, 18, 22, 23, 24, 25, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 73, 74, 75, 76, 86, 87, 88, 89, 90, 92, 94, 95, 99, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 129, 130, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 162, 163, 166, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 226, 229, 230, 231, 234, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 271, 272, 274, 277, 278, 279, 280, 284, 286, 287, 288, 289, 291, 292, 293, 294, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 364, 366, 367, 370, 371, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 389, 390, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 418, 420, 421, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 441, 444, 446, 447, 450, 451, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 472, 474, 477, 478, 479], "few": [5, 32, 72, 84, 89, 93, 94, 98, 99, 100, 103, 106, 111, 117, 138, 152, 154, 163, 166, 169, 172, 173, 177, 179, 182, 186, 189, 194, 196, 226, 243, 265, 277, 279, 288, 295, 296, 315, 330, 331, 333, 337, 340, 343, 357, 362, 364, 376, 383, 384, 389, 390, 423, 429, 430, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 472, 473, 474, 476, 478], "that": [5, 7, 9, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 91, 96, 97, 98, 99, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 121, 122, 123, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 226, 228, 229, 230, 231, 234, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 279, 280, 283, 284, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 439, 441, 445, 447, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "normal": [5, 20, 22, 23, 25, 30, 32, 33, 34, 37, 44, 48, 50, 55, 57, 62, 65, 67, 71, 72, 74, 75, 84, 89, 91, 92, 93, 99, 100, 103, 104, 106, 107, 117, 119, 136, 137, 140, 141, 143, 147, 152, 154, 163, 165, 172, 173, 177, 179, 182, 184, 186, 189, 191, 192, 194, 196, 198, 201, 204, 205, 207, 209, 210, 214, 216, 217, 221, 222, 226, 230, 231, 238, 242, 243, 244, 254, 262, 263, 264, 265, 269, 271, 272, 278, 279, 284, 286, 288, 289, 292, 293, 295, 298, 304, 307, 310, 315, 316, 317, 320, 327, 329, 331, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 355, 357, 358, 359, 360, 361, 363, 364, 367, 369, 371, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 395, 397, 402, 405, 406, 409, 410, 411, 414, 416, 417, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 436, 450, 456, 458, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "correspond": [5, 9, 18, 22, 23, 30, 32, 39, 44, 48, 55, 57, 60, 62, 63, 67, 70, 72, 74, 75, 78, 84, 91, 93, 94, 97, 98, 99, 100, 101, 103, 106, 107, 112, 114, 117, 119, 123, 125, 130, 134, 136, 143, 147, 152, 154, 159, 163, 166, 171, 172, 173, 174, 179, 180, 182, 185, 187, 189, 195, 204, 205, 208, 209, 214, 215, 218, 221, 222, 226, 229, 231, 234, 239, 241, 243, 244, 246, 247, 251, 255, 257, 258, 262, 263, 264, 265, 267, 279, 288, 289, 291, 303, 304, 310, 315, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 340, 341, 343, 344, 347, 348, 350, 353, 359, 360, 361, 364, 370, 371, 376, 381, 382, 383, 384, 389, 392, 394, 397, 398, 401, 405, 406, 410, 412, 414, 417, 418, 422, 423, 424, 425, 426, 427, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "address": [5, 9, 23, 41, 50, 57, 62, 63, 67, 72, 74, 84, 99, 100, 104, 109, 118, 123, 125, 130, 139, 160, 166, 172, 179, 187, 189, 190, 196, 199, 204, 205, 208, 211, 221, 238, 239, 241, 252, 258, 263, 265, 266, 267, 280, 281, 315, 318, 331, 333, 334, 336, 337, 357, 377, 381, 389, 402, 415, 423, 451, 457, 459, 460, 462, 463, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "follow": [5, 7, 9, 18, 23, 28, 32, 33, 38, 40, 41, 44, 54, 56, 57, 60, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 125, 129, 130, 132, 134, 136, 137, 138, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 214, 216, 217, 221, 222, 224, 226, 229, 230, 231, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 274, 279, 280, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 308, 310, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 366, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 437, 438, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "descript": [5, 23, 24, 52, 57, 58, 62, 63, 67, 72, 88, 92, 96, 98, 99, 100, 114, 117, 119, 125, 138, 156, 171, 172, 173, 178, 186, 187, 189, 192, 196, 197, 198, 201, 208, 211, 226, 237, 241, 246, 247, 251, 255, 262, 263, 264, 266, 269, 274, 280, 284, 288, 289, 293, 294, 296, 303, 309, 311, 318, 328, 329, 333, 336, 337, 340, 346, 351, 354, 356, 357, 361, 364, 370, 371, 381, 383, 394, 396, 403, 409, 410, 414, 415, 422, 423, 424, 425, 429, 431, 446, 450, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 470, 472, 473, 475, 477, 478], "quot": [5, 67, 78, 83, 84, 86, 87, 89, 103, 106, 123, 134, 143, 154, 171, 172, 190, 191, 192, 193, 194, 198, 199, 201, 204, 205, 213, 218, 231, 234, 243, 244, 252, 258, 281, 293, 313, 315, 327, 336, 340, 341, 344, 355, 359, 362, 379, 381, 390, 408, 412, 421, 422, 426, 429, 430, 441, 444, 446, 456, 457, 460, 462, 469, 470, 471, 475, 478], "form": [5, 7, 23, 30, 32, 33, 36, 37, 53, 54, 62, 67, 71, 72, 78, 83, 84, 88, 89, 91, 94, 97, 99, 100, 103, 106, 107, 117, 119, 123, 141, 148, 154, 157, 163, 165, 172, 173, 174, 177, 179, 182, 183, 186, 187, 189, 192, 193, 194, 196, 199, 201, 202, 204, 205, 209, 217, 221, 222, 224, 226, 238, 240, 241, 244, 247, 251, 253, 255, 257, 262, 263, 264, 265, 267, 269, 272, 279, 284, 289, 292, 294, 298, 300, 301, 303, 315, 330, 333, 336, 337, 338, 340, 341, 342, 343, 348, 353, 357, 359, 360, 361, 362, 363, 364, 371, 379, 382, 383, 384, 385, 389, 390, 393, 395, 400, 402, 403, 405, 408, 414, 416, 420, 421, 422, 423, 424, 426, 427, 430, 431, 434, 450, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "entri": [5, 13, 22, 26, 27, 30, 32, 44, 48, 50, 57, 62, 67, 72, 74, 86, 88, 92, 93, 94, 96, 100, 106, 107, 111, 117, 123, 132, 136, 141, 147, 154, 156, 163, 165, 172, 173, 177, 180, 182, 187, 189, 191, 212, 221, 222, 226, 229, 232, 239, 243, 244, 246, 251, 257, 261, 264, 265, 266, 267, 268, 276, 277, 279, 280, 288, 289, 292, 295, 298, 303, 304, 310, 312, 315, 317, 320, 326, 327, 329, 331, 335, 336, 337, 340, 347, 348, 349, 353, 355, 357, 360, 364, 370, 371, 373, 376, 379, 380, 384, 385, 395, 397, 398, 400, 416, 417, 420, 424, 425, 447, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 478], "round": [5, 62, 63, 67, 119, 146, 169, 179, 186, 189, 217, 221, 239, 250, 257, 271, 285, 286, 289, 311, 314, 339, 340, 341, 343, 348, 373, 379, 381, 383, 396, 423, 425, 437, 439, 444, 445, 446, 447, 457, 459, 461, 462, 463, 464, 465, 466, 471, 472, 475, 476, 478], "match": [5, 11, 22, 23, 32, 41, 44, 60, 62, 63, 67, 72, 77, 84, 88, 91, 93, 94, 99, 100, 106, 107, 115, 123, 133, 136, 137, 138, 141, 147, 148, 152, 159, 163, 173, 179, 182, 183, 186, 187, 189, 192, 193, 199, 200, 201, 204, 207, 209, 212, 215, 221, 222, 224, 238, 239, 242, 243, 244, 247, 250, 251, 257, 260, 263, 264, 266, 268, 279, 283, 284, 289, 292, 293, 298, 304, 307, 310, 314, 316, 319, 327, 328, 329, 333, 336, 337, 340, 341, 343, 344, 346, 348, 353, 354, 357, 358, 361, 364, 370, 371, 373, 376, 377, 380, 381, 383, 384, 389, 390, 395, 396, 398, 405, 406, 408, 410, 415, 420, 424, 425, 426, 428, 430, 440, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "squar": [5, 32, 62, 84, 86, 88, 93, 94, 106, 138, 151, 173, 177, 182, 257, 271, 293, 304, 336, 339, 340, 379, 389, 408, 422, 423, 425, 429, 430, 431, 435, 437, 444, 459, 460, 463, 467, 476, 478], "bracket": [5, 32, 62, 94, 100, 103, 106, 141, 205, 216, 221, 267, 293, 315, 336, 340, 381, 382, 389, 405, 408, 422, 423, 425, 429, 430, 431, 462, 463, 464, 478], "variabl": [5, 9, 13, 16, 18, 22, 23, 26, 28, 30, 31, 33, 34, 41, 44, 52, 54, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 86, 88, 91, 92, 93, 94, 98, 100, 101, 103, 106, 107, 109, 111, 115, 123, 136, 138, 148, 149, 151, 152, 159, 160, 163, 170, 173, 184, 187, 189, 205, 209, 210, 211, 219, 221, 224, 226, 241, 243, 244, 245, 246, 250, 251, 254, 257, 260, 262, 263, 277, 279, 291, 293, 295, 297, 307, 309, 311, 315, 316, 320, 323, 327, 328, 329, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 353, 357, 360, 361, 362, 363, 371, 376, 377, 379, 380, 381, 383, 384, 389, 390, 394, 395, 398, 400, 402, 403, 405, 406, 407, 415, 420, 422, 423, 424, 425, 426, 427, 430, 431, 435, 436, 443, 444, 447, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478], "whose": [5, 23, 30, 32, 34, 41, 44, 59, 60, 62, 72, 84, 89, 92, 100, 117, 119, 165, 171, 172, 173, 177, 179, 182, 189, 194, 196, 199, 201, 204, 207, 209, 211, 212, 217, 221, 222, 224, 229, 238, 239, 240, 248, 251, 254, 262, 263, 264, 265, 267, 279, 288, 289, 292, 293, 295, 303, 304, 308, 315, 318, 328, 329, 330, 333, 335, 336, 340, 341, 348, 353, 355, 357, 360, 361, 364, 371, 375, 376, 383, 384, 385, 390, 395, 397, 400, 408, 410, 422, 423, 425, 427, 430, 457, 458, 459, 461, 462, 463, 464, 469, 471, 472, 473, 475, 476, 478], "should": [5, 7, 10, 11, 13, 22, 23, 25, 27, 28, 30, 32, 33, 36, 41, 44, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 109, 112, 114, 117, 119, 123, 125, 129, 130, 132, 134, 136, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 176, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 217, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 278, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 305, 307, 310, 314, 315, 316, 317, 318, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 348, 350, 353, 354, 355, 357, 359, 360, 361, 362, 364, 366, 369, 370, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 389, 390, 394, 395, 396, 397, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 422, 423, 424, 425, 427, 429, 430, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "pass": [5, 7, 9, 11, 13, 17, 22, 23, 27, 28, 32, 33, 34, 41, 42, 44, 46, 48, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 89, 91, 92, 93, 97, 98, 99, 102, 103, 106, 107, 109, 111, 113, 115, 117, 119, 123, 130, 132, 134, 135, 136, 137, 138, 141, 143, 146, 147, 148, 151, 152, 153, 154, 156, 159, 162, 163, 165, 166, 168, 169, 171, 173, 174, 177, 179, 186, 187, 189, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 221, 222, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 254, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 274, 275, 277, 279, 284, 288, 289, 291, 292, 293, 295, 301, 303, 304, 305, 307, 310, 315, 316, 317, 318, 321, 326, 327, 328, 329, 331, 333, 334, 336, 337, 340, 341, 342, 343, 344, 347, 348, 350, 353, 354, 357, 359, 360, 361, 362, 364, 370, 371, 373, 375, 376, 378, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 430, 438, 440, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "allow": [5, 7, 9, 22, 23, 32, 33, 34, 40, 41, 42, 44, 48, 57, 58, 60, 62, 63, 67, 70, 71, 72, 74, 75, 78, 83, 84, 88, 89, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 129, 130, 132, 134, 135, 136, 140, 147, 148, 150, 151, 153, 154, 156, 157, 159, 163, 165, 169, 171, 172, 173, 176, 177, 179, 182, 185, 186, 187, 189, 190, 191, 192, 198, 199, 201, 204, 206, 207, 209, 210, 211, 214, 217, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 249, 251, 254, 257, 258, 261, 262, 263, 264, 265, 267, 271, 272, 274, 275, 279, 283, 284, 288, 289, 291, 292, 293, 295, 298, 301, 303, 304, 307, 309, 310, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 340, 341, 342, 344, 348, 349, 351, 353, 357, 359, 360, 361, 364, 369, 370, 371, 372, 375, 377, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 408, 410, 411, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 430, 431, 436, 438, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "access": [5, 7, 11, 16, 23, 30, 32, 44, 46, 48, 49, 53, 54, 58, 59, 60, 62, 67, 71, 72, 74, 75, 76, 78, 83, 84, 86, 89, 92, 96, 97, 99, 100, 102, 103, 106, 107, 115, 119, 133, 135, 136, 139, 143, 146, 148, 151, 154, 156, 157, 160, 165, 166, 171, 173, 177, 179, 182, 187, 189, 190, 192, 196, 199, 201, 203, 206, 208, 209, 213, 214, 215, 217, 221, 222, 226, 229, 231, 238, 239, 240, 241, 242, 243, 246, 249, 250, 251, 252, 253, 254, 255, 257, 260, 263, 265, 267, 271, 272, 274, 276, 277, 278, 279, 288, 289, 291, 293, 295, 298, 308, 310, 311, 315, 316, 318, 320, 324, 326, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 341, 344, 348, 349, 353, 354, 355, 357, 360, 362, 364, 370, 371, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 397, 399, 401, 402, 404, 405, 406, 407, 408, 410, 415, 417, 420, 421, 422, 424, 425, 427, 431, 444, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 476, 477, 478], "an": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 73, 74, 75, 76, 79, 86, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 114, 117, 119, 120, 123, 125, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 166, 169, 171, 172, 173, 174, 175, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 221, 222, 224, 226, 229, 230, 231, 232, 234, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 276, 277, 279, 280, 281, 283, 284, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 437, 438, 444, 446, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "as": [5, 6, 7, 9, 11, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 48, 50, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 91, 92, 93, 94, 96, 98, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 125, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 224, 226, 228, 229, 230, 231, 232, 234, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 433, 436, 438, 439, 441, 445, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 477, 478, 479], "chunk": [5, 13, 42, 67, 77, 84, 89, 100, 104, 106, 130, 146, 162, 176, 221, 231, 236, 238, 250, 254, 257, 258, 266, 279, 280, 289, 299, 310, 328, 330, 333, 343, 346, 390, 402, 410, 411, 425, 457, 460, 462, 464, 468, 469, 474, 478], "you": [5, 13, 22, 23, 25, 26, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 109, 111, 112, 114, 117, 119, 120, 123, 130, 137, 138, 140, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 163, 165, 166, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 186, 188, 189, 191, 192, 194, 196, 197, 198, 201, 202, 203, 204, 207, 209, 210, 211, 214, 217, 221, 222, 226, 230, 231, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 254, 255, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 274, 279, 284, 288, 289, 291, 292, 293, 295, 296, 301, 303, 304, 309, 310, 315, 316, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 348, 350, 353, 354, 355, 357, 359, 360, 362, 364, 366, 370, 371, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 420, 421, 422, 423, 425, 426, 427, 429, 431, 436, 437, 445, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "don": [5, 9, 18, 23, 28, 32, 33, 34, 48, 57, 58, 62, 72, 74, 75, 78, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 106, 117, 119, 123, 130, 134, 136, 141, 148, 149, 150, 151, 155, 156, 159, 163, 165, 172, 175, 177, 179, 186, 187, 189, 196, 205, 212, 221, 222, 226, 238, 239, 246, 253, 254, 255, 258, 263, 264, 265, 271, 279, 284, 288, 289, 291, 292, 293, 295, 303, 304, 315, 324, 326, 328, 331, 333, 336, 337, 340, 360, 362, 364, 371, 381, 383, 384, 385, 390, 394, 396, 397, 400, 402, 408, 421, 422, 423, 425, 426, 427, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 473, 474, 476, 477, 478], "have": [5, 7, 11, 18, 22, 23, 27, 28, 30, 32, 33, 34, 41, 44, 46, 48, 57, 58, 59, 62, 63, 66, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 126, 129, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 207, 209, 211, 214, 217, 219, 221, 222, 226, 230, 231, 237, 238, 239, 240, 243, 244, 246, 247, 248, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 301, 303, 304, 307, 308, 310, 314, 315, 318, 319, 320, 321, 323, 324, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 348, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 364, 366, 370, 371, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 400, 402, 403, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 437, 438, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "provid": [5, 7, 11, 18, 23, 25, 28, 30, 32, 33, 39, 41, 42, 44, 46, 48, 50, 53, 57, 60, 62, 63, 65, 67, 71, 73, 74, 78, 83, 84, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 102, 103, 106, 107, 111, 112, 114, 117, 119, 121, 123, 130, 134, 136, 138, 140, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 163, 165, 166, 168, 169, 171, 172, 173, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 216, 217, 220, 221, 222, 224, 226, 229, 230, 231, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 284, 286, 288, 289, 291, 292, 294, 296, 298, 300, 301, 303, 304, 307, 308, 310, 311, 315, 316, 317, 318, 320, 322, 324, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 427, 430, 431, 435, 450, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "raw": [5, 7, 16, 31, 62, 67, 99, 103, 115, 117, 119, 148, 163, 172, 173, 187, 189, 192, 193, 201, 202, 203, 221, 226, 251, 266, 279, 284, 289, 292, 294, 295, 325, 327, 333, 334, 337, 340, 358, 361, 362, 364, 376, 378, 390, 393, 397, 410, 422, 430, 444, 458, 460, 462, 463, 465, 468, 469, 471, 473, 478], "storag": [5, 31, 34, 41, 54, 67, 86, 92, 98, 100, 106, 154, 163, 173, 187, 246, 254, 257, 280, 289, 296, 326, 336, 340, 343, 408, 435, 459, 462, 463, 464, 469, 471, 472, 478], "return": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 77, 78, 83, 85, 86, 87, 88, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 115, 117, 119, 122, 123, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 168, 169, 171, 173, 174, 175, 177, 179, 180, 182, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 229, 230, 231, 232, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 430, 435, 436, 438, 444, 445, 446, 447, 450, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "unicod": [5, 16, 27, 30, 31, 38, 44, 58, 62, 64, 67, 79, 84, 86, 89, 91, 95, 100, 102, 103, 109, 116, 118, 140, 142, 143, 163, 171, 172, 173, 178, 179, 182, 189, 190, 191, 192, 193, 196, 197, 198, 199, 204, 205, 209, 217, 221, 226, 234, 235, 236, 243, 250, 254, 258, 262, 278, 289, 290, 292, 295, 298, 315, 336, 340, 341, 342, 348, 358, 373, 381, 389, 395, 400, 402, 406, 407, 408, 417, 420, 423, 425, 430, 437, 450, 451, 458, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479], "byte": [5, 7, 12, 16, 18, 23, 24, 25, 26, 28, 30, 32, 33, 38, 40, 41, 42, 48, 57, 58, 60, 62, 63, 65, 67, 77, 78, 83, 84, 86, 89, 91, 92, 93, 98, 100, 102, 103, 104, 107, 110, 114, 115, 118, 119, 123, 124, 130, 133, 134, 138, 139, 140, 142, 143, 146, 148, 150, 154, 157, 162, 163, 173, 174, 178, 180, 182, 184, 186, 187, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 208, 209, 211, 219, 221, 226, 230, 231, 233, 238, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 257, 258, 260, 262, 264, 265, 266, 267, 270, 274, 278, 279, 280, 283, 284, 289, 291, 292, 294, 295, 300, 305, 307, 310, 313, 314, 315, 318, 320, 324, 328, 329, 331, 332, 333, 334, 336, 337, 338, 344, 345, 348, 353, 354, 357, 364, 372, 373, 377, 381, 390, 393, 395, 396, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 414, 416, 417, 419, 420, 422, 423, 425, 426, 427, 435, 441, 445, 446, 450, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "area": [5, 7, 41, 44, 62, 91, 93, 99, 100, 106, 173, 192, 201, 221, 243, 254, 274, 295, 318, 333, 337, 366, 371, 429, 441, 457, 462, 463, 472, 475], "unless": [5, 7, 9, 13, 22, 23, 26, 27, 30, 32, 41, 50, 53, 55, 57, 58, 62, 72, 75, 84, 93, 94, 98, 99, 102, 103, 109, 111, 114, 117, 119, 123, 136, 137, 138, 146, 147, 157, 163, 165, 177, 179, 182, 187, 189, 192, 196, 201, 202, 205, 221, 222, 238, 239, 240, 243, 246, 251, 254, 255, 257, 263, 264, 266, 267, 271, 277, 279, 284, 288, 289, 293, 305, 310, 315, 319, 324, 325, 328, 330, 331, 333, 334, 336, 337, 340, 341, 344, 348, 349, 353, 354, 359, 360, 381, 383, 384, 389, 390, 394, 395, 397, 401, 402, 407, 410, 421, 422, 423, 424, 425, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 474, 475, 476, 477, 478], "otherwis": [5, 7, 11, 13, 18, 22, 23, 27, 28, 30, 32, 33, 38, 39, 41, 42, 44, 46, 48, 53, 57, 58, 60, 62, 63, 65, 72, 75, 78, 89, 93, 94, 99, 100, 102, 103, 107, 109, 114, 117, 119, 123, 126, 130, 132, 136, 138, 143, 146, 147, 151, 152, 153, 154, 159, 163, 165, 166, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 191, 192, 193, 195, 196, 198, 201, 202, 204, 205, 206, 207, 210, 212, 214, 221, 222, 226, 230, 238, 239, 240, 241, 243, 246, 247, 248, 251, 253, 254, 255, 257, 258, 263, 264, 265, 267, 271, 272, 274, 279, 288, 289, 292, 293, 295, 297, 298, 300, 301, 303, 307, 308, 310, 315, 317, 320, 324, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 344, 348, 349, 350, 351, 353, 354, 357, 359, 360, 361, 364, 371, 373, 376, 377, 379, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 401, 402, 406, 408, 410, 414, 415, 416, 417, 420, 421, 422, 423, 425, 426, 427, 430, 431, 437, 450, 451, 456, 458, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "state": [5, 13, 17, 22, 23, 27, 30, 31, 44, 49, 50, 52, 58, 60, 62, 67, 72, 74, 75, 83, 84, 89, 91, 94, 96, 99, 102, 103, 107, 116, 123, 130, 135, 136, 137, 138, 141, 148, 151, 153, 154, 156, 160, 163, 165, 166, 167, 173, 181, 187, 208, 209, 214, 218, 222, 231, 239, 244, 246, 250, 252, 254, 255, 264, 266, 267, 289, 291, 293, 294, 297, 304, 310, 311, 314, 316, 319, 321, 324, 329, 333, 334, 336, 337, 340, 344, 348, 357, 360, 361, 363, 364, 370, 376, 380, 383, 384, 385, 389, 390, 395, 397, 400, 406, 407, 420, 421, 423, 425, 427, 436, 447, 457, 459, 460, 462, 469, 470, 471, 472, 475, 476, 477, 478], "nul": [5, 7, 62, 67, 89, 115, 172, 173, 174, 233, 265, 280, 289, 292, 310, 343, 348, 414, 470, 471, 478], "termin": [5, 7, 9, 30, 32, 33, 36, 38, 44, 57, 59, 60, 62, 63, 65, 67, 72, 83, 84, 91, 94, 98, 99, 100, 106, 112, 115, 117, 123, 127, 129, 130, 134, 136, 137, 152, 160, 171, 172, 174, 185, 186, 187, 189, 203, 204, 210, 215, 221, 225, 238, 241, 243, 250, 251, 254, 257, 261, 262, 265, 267, 279, 284, 288, 293, 298, 304, 315, 318, 329, 331, 334, 336, 337, 340, 341, 344, 348, 355, 356, 360, 364, 372, 379, 386, 390, 395, 400, 402, 406, 408, 410, 421, 422, 424, 425, 427, 430, 431, 436, 450, 457, 461, 462, 463, 465, 470, 471, 473, 475, 476, 478], "there": [5, 7, 9, 13, 18, 22, 23, 25, 26, 27, 30, 32, 33, 34, 37, 38, 40, 41, 44, 45, 48, 50, 54, 56, 57, 58, 59, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 106, 107, 111, 112, 117, 119, 123, 129, 130, 134, 136, 140, 141, 148, 150, 151, 152, 153, 154, 155, 159, 162, 163, 165, 166, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 192, 193, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 209, 211, 212, 214, 221, 222, 224, 226, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 254, 255, 257, 261, 262, 263, 264, 265, 267, 271, 274, 277, 279, 283, 284, 288, 289, 291, 292, 293, 295, 300, 301, 303, 304, 309, 310, 314, 315, 320, 321, 324, 326, 327, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 353, 354, 357, 359, 360, 361, 362, 364, 370, 371, 373, 379, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 402, 403, 404, 405, 406, 408, 409, 410, 411, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 438, 450, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "way": [5, 7, 9, 13, 23, 25, 30, 32, 33, 34, 41, 44, 57, 58, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 117, 119, 121, 123, 130, 136, 138, 141, 148, 151, 153, 154, 155, 157, 159, 163, 165, 168, 169, 172, 173, 177, 179, 182, 184, 186, 189, 190, 191, 192, 196, 197, 201, 203, 204, 205, 207, 221, 224, 226, 231, 239, 243, 244, 246, 247, 251, 254, 255, 257, 262, 263, 264, 265, 266, 267, 271, 274, 276, 279, 280, 288, 289, 291, 292, 293, 295, 303, 304, 314, 315, 320, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 343, 344, 348, 349, 353, 357, 360, 362, 364, 370, 373, 376, 379, 381, 382, 383, 384, 385, 390, 395, 397, 398, 402, 405, 408, 410, 414, 415, 416, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "can": [5, 7, 11, 13, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 40, 41, 42, 44, 46, 48, 50, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 115, 117, 119, 120, 123, 125, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 159, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 221, 222, 224, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 251, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 294, 296, 297, 298, 300, 303, 304, 305, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 367, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 439, 441, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "convert": [5, 7, 18, 25, 32, 38, 46, 54, 55, 57, 58, 63, 65, 67, 71, 72, 74, 75, 83, 91, 92, 93, 94, 98, 99, 100, 103, 109, 114, 117, 123, 136, 138, 141, 145, 151, 152, 154, 156, 160, 163, 171, 172, 173, 174, 177, 179, 180, 182, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 204, 205, 209, 211, 216, 221, 222, 226, 234, 240, 244, 250, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 279, 281, 288, 289, 294, 295, 297, 298, 303, 305, 315, 331, 333, 338, 340, 341, 343, 348, 353, 357, 361, 371, 373, 378, 381, 383, 389, 393, 395, 400, 402, 406, 408, 410, 414, 420, 422, 423, 425, 430, 431, 438, 441, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "such": [5, 7, 13, 18, 23, 25, 27, 28, 30, 32, 33, 34, 37, 41, 44, 50, 56, 57, 60, 62, 63, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 106, 107, 109, 112, 117, 119, 123, 129, 130, 134, 136, 138, 141, 143, 147, 148, 152, 154, 155, 157, 163, 165, 168, 171, 172, 173, 177, 179, 180, 182, 186, 189, 190, 192, 193, 198, 199, 201, 203, 204, 205, 207, 208, 209, 211, 212, 221, 222, 226, 230, 231, 234, 239, 241, 243, 244, 246, 247, 249, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 267, 268, 271, 274, 277, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 298, 300, 303, 304, 309, 310, 315, 320, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 348, 350, 353, 354, 356, 357, 360, 361, 364, 370, 371, 372, 375, 376, 379, 380, 381, 382, 383, 384, 389, 390, 392, 394, 395, 397, 401, 402, 404, 405, 406, 407, 408, 410, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 427, 430, 431, 438, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "fill": [5, 7, 22, 32, 33, 37, 41, 44, 46, 54, 59, 62, 63, 67, 74, 75, 84, 91, 94, 98, 100, 102, 107, 114, 117, 119, 135, 148, 171, 172, 173, 179, 182, 189, 192, 197, 201, 218, 221, 241, 243, 246, 250, 254, 257, 265, 289, 331, 333, 336, 337, 340, 341, 343, 344, 357, 358, 361, 364, 423, 425, 427, 447, 451, 457, 459, 460, 461, 462, 463, 469, 470, 471, 473, 474, 478], "py_buff": [5, 7, 42, 56, 62, 67, 463, 468, 471, 478], "this": [5, 6, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 117, 119, 120, 123, 125, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 166, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 286, 288, 289, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 439, 441, 444, 445, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "lock": [5, 30, 31, 50, 62, 67, 72, 75, 83, 86, 98, 100, 112, 121, 139, 160, 162, 163, 165, 172, 208, 211, 222, 237, 254, 263, 265, 266, 267, 278, 279, 281, 289, 301, 312, 318, 320, 326, 329, 334, 336, 338, 348, 357, 364, 381, 397, 399, 423, 447, 457, 459, 461, 462, 463, 464, 465, 468, 469, 470, 473, 475, 476, 477, 478, 479], "under": [5, 7, 13, 18, 23, 32, 33, 41, 42, 44, 53, 57, 60, 65, 67, 73, 83, 84, 91, 92, 94, 99, 100, 102, 103, 117, 123, 129, 130, 132, 142, 146, 148, 150, 152, 154, 157, 165, 171, 172, 173, 179, 186, 189, 192, 195, 199, 204, 208, 209, 211, 212, 221, 222, 226, 230, 231, 238, 243, 251, 254, 257, 258, 263, 264, 265, 266, 267, 271, 274, 277, 279, 280, 288, 289, 291, 292, 293, 295, 301, 304, 310, 316, 318, 324, 325, 326, 327, 328, 329, 333, 334, 336, 337, 338, 340, 344, 348, 350, 355, 357, 360, 361, 364, 366, 370, 371, 375, 376, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 398, 400, 401, 402, 405, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 430, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "so": [5, 7, 11, 13, 22, 23, 25, 27, 28, 30, 32, 33, 34, 40, 41, 44, 48, 53, 56, 58, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 115, 117, 119, 123, 134, 136, 137, 138, 140, 147, 148, 150, 151, 153, 154, 155, 163, 165, 166, 169, 172, 173, 174, 175, 177, 179, 182, 186, 187, 189, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 217, 221, 222, 224, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 246, 249, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 274, 279, 280, 288, 289, 292, 293, 295, 298, 304, 308, 310, 315, 321, 324, 325, 327, 328, 329, 330, 331, 333, 336, 337, 340, 341, 343, 344, 348, 349, 350, 353, 354, 357, 359, 360, 361, 362, 364, 370, 371, 373, 379, 380, 381, 383, 384, 385, 390, 394, 396, 397, 400, 401, 402, 404, 405, 406, 408, 410, 411, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 431, 439, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "subsequ": [5, 23, 32, 44, 59, 63, 84, 87, 92, 99, 103, 112, 117, 155, 173, 186, 187, 198, 202, 204, 207, 222, 239, 246, 251, 254, 257, 264, 265, 267, 274, 279, 288, 289, 315, 328, 333, 337, 340, 341, 348, 351, 353, 360, 364, 370, 379, 384, 390, 421, 422, 425, 427, 429, 431, 460, 461, 462, 463, 464, 466, 473, 476, 478], "even": [5, 9, 18, 23, 26, 30, 32, 33, 41, 44, 56, 57, 58, 62, 63, 72, 75, 83, 84, 88, 89, 92, 93, 94, 98, 100, 102, 103, 106, 109, 117, 119, 123, 129, 136, 143, 148, 151, 154, 157, 159, 163, 165, 172, 173, 177, 179, 182, 184, 189, 190, 192, 194, 195, 201, 202, 203, 204, 207, 209, 210, 211, 214, 217, 221, 222, 231, 239, 243, 246, 247, 251, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 271, 279, 288, 289, 292, 293, 295, 303, 304, 314, 315, 327, 328, 329, 330, 331, 333, 336, 337, 340, 341, 343, 348, 349, 353, 355, 357, 359, 360, 361, 364, 371, 377, 379, 381, 382, 383, 384, 385, 390, 394, 395, 397, 398, 400, 402, 406, 410, 412, 414, 417, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 477, 478], "insid": [5, 7, 11, 32, 41, 62, 67, 75, 84, 89, 91, 94, 103, 110, 111, 119, 132, 141, 165, 171, 173, 182, 192, 195, 201, 206, 221, 222, 247, 248, 254, 258, 277, 279, 280, 292, 293, 295, 298, 315, 328, 329, 333, 341, 364, 370, 371, 379, 381, 383, 384, 385, 408, 415, 417, 418, 422, 423, 424, 425, 430, 444, 456, 458, 459, 460, 461, 462, 463, 465, 468, 469, 470, 472, 474, 475, 476, 478], "py_begin_allow_thread": [5, 32, 56, 72], "block": [5, 7, 23, 32, 41, 44, 54, 62, 67, 72, 74, 76, 89, 91, 92, 103, 104, 107, 109, 111, 112, 114, 119, 122, 123, 130, 131, 132, 134, 135, 136, 141, 143, 146, 165, 172, 173, 174, 181, 182, 184, 186, 187, 189, 195, 203, 204, 208, 209, 211, 219, 221, 222, 228, 230, 231, 238, 239, 243, 244, 251, 253, 254, 257, 265, 269, 278, 279, 280, 284, 289, 291, 292, 301, 309, 312, 318, 321, 323, 324, 325, 326, 328, 329, 331, 333, 336, 338, 344, 347, 348, 353, 354, 357, 360, 364, 381, 383, 384, 390, 396, 398, 400, 401, 406, 411, 423, 424, 425, 426, 427, 431, 450, 458, 459, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "without": [5, 7, 9, 13, 22, 23, 25, 26, 28, 32, 33, 34, 37, 38, 41, 44, 48, 50, 53, 54, 56, 57, 58, 60, 62, 65, 67, 71, 72, 74, 75, 78, 84, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 103, 111, 112, 117, 119, 123, 130, 132, 134, 136, 137, 146, 148, 152, 154, 163, 165, 166, 169, 172, 173, 177, 179, 180, 182, 184, 186, 187, 188, 189, 190, 192, 193, 198, 201, 204, 205, 207, 209, 210, 214, 221, 222, 224, 226, 230, 231, 239, 240, 244, 246, 248, 249, 251, 254, 255, 257, 261, 262, 263, 266, 267, 271, 274, 278, 279, 284, 288, 289, 291, 292, 293, 295, 301, 304, 305, 310, 314, 315, 318, 319, 320, 321, 324, 326, 328, 330, 333, 336, 337, 340, 341, 343, 344, 348, 349, 353, 354, 357, 359, 360, 361, 362, 363, 364, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 402, 405, 406, 408, 411, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 436, 444, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "risk": [5, 41, 42, 72, 84, 94, 123, 209, 264, 267, 279, 288, 295, 357, 379, 408, 416, 421, 463, 470, 475, 476, 478], "mutabl": [5, 27, 28, 32, 34, 62, 67, 84, 86, 94, 98, 157, 167, 172, 183, 199, 211, 221, 222, 251, 279, 280, 287, 289, 293, 295, 311, 326, 397, 408, 419, 422, 423, 425, 431, 435, 437, 444, 457, 460, 462, 463, 464, 465, 468, 469, 474, 477, 478], "data": [5, 7, 9, 13, 28, 31, 32, 41, 48, 53, 54, 55, 57, 59, 62, 63, 64, 67, 71, 72, 73, 74, 76, 78, 83, 87, 88, 89, 91, 92, 96, 98, 100, 101, 103, 105, 111, 112, 114, 115, 116, 117, 118, 119, 123, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 146, 147, 148, 150, 153, 154, 156, 160, 162, 163, 165, 171, 173, 174, 175, 178, 179, 180, 182, 186, 187, 191, 192, 193, 194, 197, 199, 202, 203, 204, 208, 209, 211, 219, 221, 222, 226, 230, 231, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 257, 258, 262, 263, 265, 267, 268, 269, 270, 272, 274, 277, 279, 280, 284, 286, 288, 289, 291, 292, 296, 298, 300, 304, 305, 310, 311, 312, 314, 315, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 350, 353, 354, 355, 356, 357, 358, 361, 363, 367, 370, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 389, 390, 392, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 425, 427, 428, 434, 435, 438, 440, 446, 451, 453, 457, 458, 459, 460, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "being": [5, 7, 13, 22, 23, 27, 28, 32, 34, 37, 44, 59, 60, 62, 63, 65, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 111, 117, 119, 123, 130, 136, 146, 147, 148, 154, 155, 157, 159, 163, 165, 166, 172, 173, 177, 179, 180, 187, 189, 191, 192, 198, 201, 204, 207, 209, 212, 214, 221, 222, 226, 230, 243, 244, 246, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 272, 274, 279, 288, 289, 291, 292, 293, 295, 298, 303, 304, 305, 308, 310, 314, 315, 316, 320, 324, 325, 326, 328, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 357, 359, 360, 361, 362, 364, 371, 376, 381, 383, 384, 385, 389, 394, 395, 397, 402, 405, 408, 409, 410, 412, 416, 417, 421, 422, 423, 425, 427, 429, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "resiz": [5, 9, 28, 41, 53, 55, 59, 63, 67, 115, 172, 173, 254, 274, 329, 340, 364, 370, 371, 379, 383, 473, 475, 478], "destroy": [5, 11, 13, 22, 27, 32, 59, 62, 66, 86, 94, 98, 243, 254, 274, 279, 280, 288, 341, 360, 364, 383, 395, 397, 400, 423, 427, 457, 459, 460, 462, 470, 474, 475, 477, 478], "result": [5, 7, 9, 13, 23, 26, 30, 32, 33, 34, 38, 41, 44, 46, 48, 52, 53, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 111, 114, 117, 119, 120, 122, 123, 126, 130, 132, 134, 135, 136, 138, 139, 140, 141, 143, 148, 149, 151, 154, 155, 156, 159, 160, 162, 163, 165, 166, 169, 172, 173, 174, 177, 179, 181, 182, 186, 187, 189, 192, 193, 195, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 215, 221, 222, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 248, 250, 251, 252, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 301, 303, 304, 305, 307, 314, 315, 317, 318, 320, 324, 327, 328, 329, 331, 333, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 350, 353, 354, 357, 359, 360, 361, 362, 364, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 390, 392, 395, 397, 398, 400, 402, 404, 405, 406, 408, 411, 412, 414, 415, 416, 417, 420, 421, 422, 423, 425, 426, 427, 430, 431, 436, 438, 439, 441, 445, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pybuffer_releas": [5, 7, 47, 56, 62, 89, 463, 468, 478], "after": [5, 7, 13, 18, 23, 26, 27, 28, 32, 33, 38, 41, 44, 57, 58, 60, 62, 63, 67, 70, 71, 72, 75, 84, 87, 88, 89, 91, 93, 94, 96, 99, 100, 102, 103, 107, 109, 112, 114, 117, 119, 123, 125, 130, 132, 136, 137, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 153, 163, 165, 166, 171, 172, 173, 175, 177, 179, 181, 182, 186, 187, 189, 191, 192, 201, 202, 203, 205, 206, 208, 209, 211, 212, 214, 221, 224, 228, 230, 231, 238, 241, 243, 244, 246, 251, 254, 257, 262, 263, 264, 265, 266, 267, 271, 274, 275, 278, 279, 280, 284, 288, 289, 291, 292, 293, 296, 301, 304, 305, 310, 315, 316, 320, 321, 324, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 348, 353, 355, 356, 357, 359, 360, 361, 362, 364, 370, 371, 376, 377, 379, 381, 383, 384, 385, 390, 394, 395, 396, 397, 400, 402, 405, 408, 410, 411, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "finish": [5, 33, 41, 60, 62, 67, 71, 78, 83, 84, 89, 96, 99, 100, 119, 121, 122, 123, 125, 132, 134, 135, 136, 141, 146, 152, 165, 209, 238, 252, 254, 266, 279, 280, 310, 312, 329, 334, 336, 337, 340, 344, 353, 357, 363, 366, 383, 398, 406, 407, 408, 411, 414, 417, 422, 423, 447, 450, 462, 463, 470, 471, 473, 474, 477, 478], "process": [5, 7, 23, 31, 33, 38, 44, 50, 57, 62, 64, 65, 67, 71, 72, 74, 76, 77, 78, 83, 89, 91, 94, 96, 97, 99, 103, 104, 106, 107, 108, 109, 111, 112, 115, 117, 119, 127, 130, 131, 134, 137, 142, 146, 147, 148, 152, 154, 160, 162, 165, 171, 172, 173, 179, 182, 189, 196, 197, 199, 206, 208, 209, 210, 214, 221, 222, 224, 226, 228, 231, 236, 237, 241, 243, 244, 246, 250, 251, 253, 256, 257, 262, 263, 264, 265, 266, 267, 274, 276, 288, 291, 292, 295, 304, 305, 310, 311, 312, 315, 318, 320, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 338, 340, 342, 343, 344, 348, 349, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 366, 373, 375, 376, 379, 380, 381, 389, 390, 394, 395, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 420, 422, 423, 425, 427, 430, 431, 450, 451, 456, 458, 459, 460, 461, 462, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "ani": [5, 7, 9, 11, 13, 18, 22, 23, 24, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 42, 44, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 111, 112, 113, 114, 117, 119, 123, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 163, 166, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 214, 216, 217, 221, 222, 226, 230, 231, 232, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 272, 274, 279, 280, 284, 287, 288, 289, 291, 292, 293, 295, 298, 301, 304, 305, 309, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 353, 354, 355, 357, 359, 360, 361, 364, 367, 370, 371, 373, 375, 376, 377, 379, 380, 383, 385, 389, 390, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 441, 445, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "earli": [5, 33, 74, 165, 251, 265, 288, 329, 337, 340, 360, 364, 377, 406, 417, 425, 427, 457, 461, 463, 470, 478], "abort": [5, 34, 41, 58, 67, 72, 100, 115, 123, 127, 130, 133, 135, 160, 208, 209, 219, 244, 252, 289, 293, 329, 336, 337, 348, 353, 354, 360, 383, 427, 460, 475, 478], "case": [5, 7, 13, 18, 22, 23, 24, 25, 27, 30, 32, 33, 34, 38, 40, 44, 48, 55, 56, 57, 58, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 107, 109, 111, 114, 117, 119, 121, 123, 130, 132, 136, 138, 141, 143, 146, 148, 151, 152, 154, 155, 159, 163, 165, 169, 172, 173, 174, 177, 179, 182, 183, 184, 186, 187, 189, 191, 192, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 216, 221, 226, 230, 231, 239, 240, 241, 243, 244, 246, 247, 251, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 279, 284, 288, 289, 291, 292, 293, 295, 298, 303, 304, 310, 314, 315, 320, 321, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 342, 343, 344, 348, 349, 353, 354, 355, 357, 360, 361, 362, 364, 370, 371, 373, 377, 379, 381, 382, 384, 385, 389, 390, 394, 395, 396, 400, 402, 404, 405, 406, 408, 410, 411, 415, 416, 420, 423, 424, 425, 426, 427, 430, 431, 436, 438, 439, 445, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "es": [5, 84, 89, 340, 459, 463, 464, 465, 467, 469, 478], "et": [5, 78, 89, 100, 177, 333, 337, 371, 408, 459, 462, 464, 467, 478], "pymem_fre": [5, 18, 33, 41, 56, 58, 63, 460, 462, 478], "other": [5, 7, 9, 11, 13, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 41, 42, 44, 53, 54, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 72, 73, 74, 76, 77, 83, 87, 88, 89, 91, 92, 94, 96, 98, 102, 103, 105, 106, 107, 109, 111, 112, 115, 119, 123, 129, 130, 134, 138, 141, 142, 143, 147, 148, 149, 150, 151, 154, 155, 157, 159, 163, 165, 166, 171, 172, 173, 175, 177, 179, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 212, 221, 222, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 274, 276, 279, 280, 283, 284, 285, 289, 292, 293, 294, 298, 303, 304, 305, 309, 310, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 360, 361, 362, 364, 371, 373, 375, 377, 379, 380, 382, 383, 384, 385, 389, 390, 394, 395, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 439, 441, 450, 451, 456, 461, 462, 463, 466, 467, 469, 470, 476, 477, 478, 479], "take": [5, 9, 13, 22, 23, 27, 32, 34, 48, 50, 57, 59, 62, 63, 65, 72, 74, 75, 78, 83, 84, 89, 91, 92, 93, 94, 99, 100, 101, 102, 103, 106, 117, 119, 123, 132, 136, 138, 141, 147, 148, 149, 154, 163, 165, 171, 172, 173, 174, 177, 182, 183, 186, 187, 189, 190, 194, 197, 198, 199, 202, 203, 204, 205, 211, 214, 221, 222, 226, 228, 231, 239, 240, 241, 243, 245, 246, 247, 254, 257, 258, 262, 263, 264, 266, 267, 271, 272, 279, 284, 288, 289, 292, 295, 296, 303, 304, 315, 320, 321, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 353, 356, 357, 359, 362, 364, 370, 371, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 402, 403, 405, 406, 407, 408, 410, 412, 414, 416, 417, 422, 423, 425, 427, 431, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478], "str": [5, 10, 18, 22, 24, 25, 26, 32, 33, 34, 38, 48, 57, 58, 62, 63, 65, 67, 74, 75, 77, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 109, 111, 117, 119, 123, 133, 139, 143, 146, 152, 154, 156, 159, 163, 165, 171, 173, 177, 178, 179, 182, 184, 186, 187, 191, 192, 193, 197, 198, 199, 201, 204, 205, 207, 209, 217, 221, 222, 230, 231, 232, 233, 236, 238, 240, 242, 243, 247, 248, 250, 251, 254, 255, 257, 258, 262, 263, 264, 266, 279, 280, 284, 287, 288, 289, 292, 295, 302, 314, 315, 327, 331, 334, 336, 337, 341, 343, 344, 348, 353, 357, 358, 359, 362, 373, 374, 377, 380, 381, 383, 384, 389, 393, 395, 397, 400, 405, 408, 409, 414, 417, 420, 422, 423, 425, 430, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "read": [5, 7, 22, 23, 24, 25, 30, 32, 33, 40, 41, 42, 57, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 78, 84, 85, 86, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 104, 107, 109, 111, 114, 115, 116, 117, 119, 133, 134, 137, 140, 142, 143, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 159, 162, 163, 166, 171, 172, 173, 177, 179, 180, 184, 185, 186, 187, 189, 190, 196, 199, 200, 203, 204, 207, 208, 209, 211, 212, 213, 214, 219, 221, 222, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 254, 258, 261, 264, 267, 272, 273, 274, 276, 277, 278, 279, 280, 281, 284, 288, 289, 291, 292, 293, 294, 295, 297, 298, 300, 301, 304, 305, 308, 309, 310, 311, 315, 316, 321, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 346, 348, 350, 354, 355, 360, 361, 364, 371, 373, 375, 376, 377, 379, 380, 384, 385, 388, 389, 390, 391, 392, 394, 395, 397, 402, 405, 408, 409, 410, 411, 412, 414, 416, 417, 420, 421, 422, 423, 425, 427, 430, 433, 435, 441, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "like": [5, 7, 13, 18, 23, 25, 28, 30, 32, 33, 34, 41, 42, 44, 48, 50, 54, 55, 56, 57, 59, 60, 62, 63, 65, 67, 72, 73, 74, 75, 76, 78, 83, 84, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 106, 107, 109, 111, 114, 117, 118, 119, 123, 126, 130, 133, 136, 138, 140, 141, 143, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 159, 163, 165, 168, 171, 172, 173, 177, 178, 179, 180, 182, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 209, 210, 211, 214, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 279, 280, 288, 289, 290, 291, 292, 293, 295, 296, 297, 300, 303, 304, 305, 306, 307, 309, 310, 315, 317, 320, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 350, 353, 354, 355, 356, 357, 360, 361, 364, 370, 371, 373, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 389, 390, 392, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 47, 48, 50, 52, 53, 57, 58, 59, 60, 62, 63, 65, 71, 72, 74, 75, 78, 89, 96, 118, 143, 154, 172, 173, 198, 243, 258, 278, 340, 341, 343, 362, 364, 381, 404, 408, 423, 435, 460, 462, 463, 464, 467, 472, 475, 476, 478], "pointer": [5, 7, 9, 11, 13, 17, 18, 23, 30, 32, 34, 38, 41, 42, 44, 48, 53, 54, 57, 58, 59, 60, 62, 63, 67, 71, 74, 75, 77, 78, 84, 86, 89, 96, 98, 101, 114, 115, 139, 173, 175, 238, 274, 279, 289, 295, 299, 304, 345, 348, 396, 425, 435, 459, 461, 462, 463, 464, 469, 470, 472, 474, 475, 478], "borrow": [5, 22, 27, 34, 57, 62, 66, 72, 74, 86, 94, 208, 459, 460, 461, 478], "manag": [5, 17, 28, 32, 41, 62, 67, 73, 75, 86, 87, 99, 107, 115, 117, 119, 121, 123, 125, 134, 136, 141, 148, 154, 160, 172, 180, 182, 183, 184, 187, 188, 190, 199, 209, 214, 221, 239, 241, 243, 246, 248, 250, 252, 254, 263, 267, 274, 280, 281, 291, 294, 295, 304, 311, 324, 325, 326, 333, 334, 337, 348, 350, 353, 354, 355, 357, 360, 363, 369, 371, 379, 383, 384, 390, 397, 398, 414, 417, 421, 422, 426, 429, 455, 456, 457, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "share": [5, 7, 32, 34, 40, 41, 44, 57, 62, 63, 67, 70, 72, 75, 76, 78, 83, 93, 96, 98, 100, 101, 104, 108, 112, 115, 117, 119, 130, 135, 160, 177, 179, 182, 208, 211, 222, 226, 231, 250, 255, 257, 262, 263, 274, 288, 289, 290, 292, 295, 307, 318, 322, 326, 333, 334, 336, 338, 340, 341, 348, 349, 353, 355, 360, 361, 364, 370, 383, 384, 402, 421, 422, 423, 425, 427, 435, 450, 451, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 474, 475, 476, 478, 479], "lifetim": [5, 41, 67, 72, 84, 154, 165, 289, 400, 425, 458, 471, 474, 475, 478], "won": [5, 32, 33, 40, 62, 72, 74, 75, 84, 89, 91, 93, 94, 97, 99, 100, 103, 106, 111, 119, 130, 136, 148, 163, 179, 180, 182, 189, 202, 221, 226, 239, 263, 265, 288, 289, 293, 295, 296, 325, 333, 343, 348, 364, 384, 411, 416, 450, 458, 459, 461, 462, 463, 464, 465, 466, 470, 473, 475, 478], "releas": [5, 7, 9, 13, 23, 26, 28, 33, 34, 35, 38, 41, 44, 50, 56, 57, 60, 62, 63, 67, 71, 72, 74, 75, 76, 79, 83, 84, 86, 92, 100, 102, 107, 112, 115, 119, 123, 129, 132, 135, 136, 144, 160, 165, 172, 173, 187, 206, 230, 231, 232, 251, 254, 263, 267, 279, 280, 289, 294, 295, 299, 329, 333, 336, 340, 348, 357, 360, 364, 366, 377, 379, 381, 395, 417, 421, 423, 431, 435, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 479], "yourself": [5, 32, 42, 71, 84, 89, 91, 93, 103, 106, 119, 152, 173, 175, 189, 197, 207, 246, 258, 262, 263, 264, 265, 288, 293, 324, 331, 337, 348, 383, 384, 385, 405, 456, 462, 465, 470], "ensur": [5, 18, 32, 33, 41, 44, 48, 50, 58, 62, 65, 67, 72, 75, 78, 83, 87, 89, 91, 97, 98, 99, 100, 103, 117, 123, 129, 130, 134, 140, 154, 162, 165, 172, 177, 179, 182, 189, 192, 201, 206, 207, 222, 251, 258, 263, 265, 266, 274, 279, 280, 288, 289, 295, 320, 333, 336, 337, 340, 344, 348, 356, 357, 359, 364, 367, 371, 377, 381, 383, 384, 385, 395, 397, 400, 402, 414, 416, 417, 423, 425, 450, 451, 456, 457, 460, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478], "may": [5, 7, 9, 10, 11, 13, 22, 23, 24, 26, 27, 28, 30, 32, 33, 34, 37, 38, 41, 42, 44, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 112, 114, 117, 119, 123, 125, 129, 130, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 157, 159, 163, 165, 168, 169, 171, 172, 173, 177, 178, 179, 180, 182, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 214, 217, 219, 221, 222, 224, 226, 229, 230, 231, 238, 239, 241, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 301, 303, 307, 308, 309, 310, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 438, 441, 448, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "safe": [5, 22, 23, 32, 33, 34, 41, 44, 48, 50, 55, 58, 62, 63, 67, 71, 72, 74, 75, 84, 87, 100, 119, 122, 123, 126, 127, 129, 130, 131, 134, 135, 136, 140, 147, 148, 156, 165, 171, 172, 173, 177, 189, 210, 231, 234, 243, 246, 252, 254, 262, 263, 264, 266, 267, 279, 289, 295, 308, 320, 321, 324, 326, 327, 328, 330, 333, 336, 337, 341, 344, 357, 360, 381, 384, 385, 389, 393, 395, 397, 404, 410, 456, 457, 458, 460, 463, 464, 469, 470, 471, 475, 476, 478], "pybufferproc": [5, 60, 62, 74], "bf_releasebuff": [5, 60, 62, 468], "must": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 48, 55, 57, 58, 59, 60, 62, 63, 65, 70, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 96, 97, 98, 102, 103, 107, 109, 112, 114, 117, 119, 123, 129, 130, 136, 137, 140, 141, 143, 146, 147, 148, 151, 152, 154, 157, 163, 165, 168, 169, 171, 172, 173, 177, 179, 180, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 221, 222, 224, 226, 228, 230, 231, 238, 239, 241, 243, 244, 246, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 284, 287, 288, 289, 291, 292, 293, 295, 297, 298, 300, 304, 310, 314, 315, 316, 318, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 348, 350, 351, 353, 354, 355, 356, 357, 360, 361, 364, 366, 370, 371, 373, 375, 377, 379, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 437, 438, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "disallow": [5, 32, 62, 93, 117, 163, 177, 268, 289, 333, 336, 340, 418, 422, 456, 463, 469, 472, 475, 476, 478], "common": [5, 7, 23, 32, 33, 34, 57, 62, 67, 72, 75, 83, 84, 88, 91, 92, 93, 94, 97, 99, 100, 106, 107, 111, 112, 117, 125, 132, 136, 154, 156, 163, 165, 172, 177, 179, 186, 189, 191, 196, 197, 199, 201, 203, 204, 207, 209, 211, 212, 215, 231, 238, 239, 241, 243, 247, 250, 255, 257, 258, 261, 263, 267, 268, 271, 272, 279, 280, 288, 289, 291, 295, 303, 314, 327, 328, 329, 331, 334, 336, 337, 342, 343, 344, 346, 349, 353, 356, 357, 358, 359, 360, 361, 362, 364, 368, 370, 379, 381, 383, 384, 385, 389, 390, 394, 395, 403, 412, 414, 416, 417, 420, 421, 422, 423, 425, 426, 427, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "bytearray": [5, 7, 8, 32, 33, 63, 67, 77, 84, 86, 89, 130, 142, 143, 157, 172, 178, 187, 209, 211, 221, 231, 233, 250, 254, 257, 258, 270, 274, 280, 295, 300, 314, 333, 337, 343, 381, 389, 395, 414, 419, 422, 423, 425, 445, 450, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478], "but": [5, 7, 9, 13, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 37, 38, 41, 44, 46, 48, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 125, 129, 130, 134, 136, 138, 140, 141, 143, 147, 148, 149, 151, 152, 154, 155, 157, 163, 165, 168, 171, 172, 173, 177, 179, 180, 182, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 214, 216, 217, 221, 224, 226, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 253, 254, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 278, 279, 280, 284, 285, 288, 289, 291, 292, 293, 295, 297, 300, 304, 305, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 347, 348, 350, 353, 355, 357, 359, 360, 361, 362, 364, 368, 370, 371, 372, 373, 376, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 395, 397, 398, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 439, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "also": [5, 7, 11, 13, 23, 26, 28, 30, 32, 33, 34, 39, 41, 44, 48, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 129, 130, 134, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 163, 165, 168, 169, 171, 172, 173, 177, 179, 180, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 226, 229, 230, 231, 234, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 274, 275, 277, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 301, 303, 304, 305, 307, 309, 310, 315, 317, 318, 320, 321, 324, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 347, 348, 353, 356, 357, 359, 360, 361, 362, 364, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "some": [5, 7, 23, 28, 32, 33, 34, 41, 57, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 129, 130, 134, 135, 136, 138, 142, 146, 148, 151, 152, 153, 154, 157, 159, 163, 165, 171, 172, 173, 176, 177, 179, 180, 182, 184, 186, 187, 189, 190, 191, 192, 194, 195, 199, 200, 201, 202, 203, 204, 205, 209, 211, 212, 214, 217, 221, 222, 226, 230, 231, 236, 239, 240, 243, 244, 246, 247, 251, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 303, 304, 307, 310, 315, 318, 324, 325, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 364, 371, 372, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 397, 398, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 438, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "memoryview": [5, 7, 16, 67, 86, 109, 142, 221, 250, 280, 295, 328, 333, 348, 381, 422, 423, 445, 465, 469, 470, 472, 473, 476, 478, 479], "besid": [5, 75, 89, 92, 93, 179, 221, 254, 329, 371, 397, 430, 431, 456, 478], "requir": [5, 7, 18, 23, 28, 32, 41, 44, 50, 57, 58, 62, 63, 67, 70, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 109, 112, 115, 119, 123, 129, 135, 136, 146, 147, 153, 154, 157, 162, 163, 165, 166, 171, 173, 177, 179, 180, 182, 183, 185, 187, 189, 190, 191, 192, 196, 197, 198, 199, 203, 204, 206, 208, 209, 217, 222, 224, 230, 231, 239, 241, 243, 244, 246, 248, 249, 251, 253, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 276, 277, 279, 280, 284, 288, 289, 291, 292, 295, 296, 297, 301, 303, 304, 310, 315, 318, 324, 326, 328, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 351, 353, 356, 357, 360, 361, 364, 370, 371, 373, 376, 379, 380, 381, 382, 383, 384, 389, 390, 392, 394, 397, 400, 402, 404, 405, 408, 409, 410, 411, 412, 414, 416, 417, 420, 421, 422, 423, 425, 426, 427, 430, 431, 436, 448, 450, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "no": [5, 7, 11, 13, 17, 18, 22, 23, 24, 26, 27, 30, 32, 33, 34, 36, 37, 38, 40, 41, 44, 45, 48, 50, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 106, 107, 109, 112, 114, 117, 119, 123, 129, 130, 134, 135, 136, 138, 141, 143, 147, 148, 150, 151, 152, 154, 157, 159, 163, 165, 166, 169, 171, 172, 173, 177, 179, 180, 182, 186, 187, 189, 191, 192, 193, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 221, 222, 224, 226, 230, 238, 239, 240, 241, 243, 244, 246, 247, 249, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 279, 280, 284, 288, 289, 291, 292, 293, 295, 297, 298, 301, 303, 304, 305, 307, 309, 310, 314, 315, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 356, 357, 359, 360, 361, 364, 366, 367, 368, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 436, 438, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "check": [5, 7, 9, 17, 23, 25, 30, 32, 33, 34, 37, 40, 41, 42, 44, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 83, 87, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 103, 106, 111, 116, 117, 119, 123, 125, 136, 140, 141, 146, 148, 152, 156, 157, 159, 163, 165, 169, 172, 173, 174, 177, 179, 182, 183, 184, 187, 193, 196, 201, 204, 207, 209, 210, 211, 217, 222, 229, 238, 239, 241, 243, 244, 251, 252, 255, 258, 260, 261, 263, 264, 265, 266, 268, 271, 276, 279, 283, 284, 285, 289, 291, 292, 298, 299, 301, 316, 318, 323, 324, 327, 328, 329, 330, 331, 333, 336, 337, 338, 340, 341, 343, 344, 346, 348, 352, 353, 357, 358, 360, 370, 371, 373, 377, 379, 380, 381, 383, 384, 390, 395, 397, 404, 408, 411, 414, 417, 419, 422, 425, 426, 427, 431, 441, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "verifi": [5, 7, 67, 74, 84, 92, 94, 96, 102, 157, 178, 183, 189, 207, 231, 239, 246, 252, 264, 265, 267, 289, 331, 336, 357, 383, 395, 402, 456, 463, 464, 468, 470, 471, 472, 476, 478], "whether": [5, 7, 9, 11, 13, 17, 23, 30, 34, 44, 57, 58, 62, 63, 72, 78, 84, 88, 89, 91, 92, 94, 97, 98, 99, 102, 103, 106, 111, 112, 117, 130, 136, 140, 141, 148, 149, 151, 152, 153, 154, 155, 157, 163, 165, 172, 173, 177, 179, 182, 185, 187, 189, 192, 198, 203, 204, 206, 216, 221, 226, 230, 231, 239, 240, 243, 246, 251, 254, 255, 257, 262, 264, 265, 267, 268, 271, 272, 279, 280, 288, 289, 291, 292, 293, 295, 298, 303, 304, 307, 310, 315, 320, 324, 328, 329, 330, 331, 333, 334, 336, 337, 340, 342, 343, 344, 348, 353, 355, 357, 360, 361, 364, 371, 375, 379, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 400, 402, 404, 405, 410, 415, 416, 417, 421, 422, 423, 424, 425, 427, 431, 450, 451, 456, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478], "input": [5, 9, 33, 62, 63, 65, 67, 72, 74, 78, 83, 84, 89, 92, 94, 97, 99, 106, 107, 109, 111, 115, 117, 119, 130, 134, 138, 139, 140, 141, 143, 146, 148, 152, 153, 154, 155, 156, 163, 165, 169, 171, 172, 179, 182, 186, 187, 189, 190, 191, 192, 193, 196, 197, 199, 203, 204, 205, 209, 215, 217, 218, 221, 225, 230, 231, 240, 241, 243, 250, 254, 257, 258, 260, 263, 265, 266, 267, 271, 279, 280, 286, 288, 289, 291, 293, 297, 298, 303, 305, 307, 310, 313, 315, 316, 318, 324, 327, 331, 333, 336, 337, 340, 344, 348, 349, 354, 356, 357, 359, 361, 363, 364, 370, 371, 372, 376, 384, 389, 390, 392, 396, 402, 403, 406, 407, 408, 409, 410, 411, 412, 416, 422, 423, 424, 425, 426, 427, 429, 430, 436, 438, 439, 445, 447, 450, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478], "immut": [5, 9, 10, 28, 32, 34, 59, 62, 63, 67, 84, 86, 92, 98, 119, 157, 171, 172, 177, 179, 182, 204, 217, 221, 222, 251, 263, 287, 289, 292, 422, 423, 425, 437, 444, 457, 460, 461, 462, 463, 464, 465, 469, 476, 477, 478], "would": [5, 7, 18, 23, 30, 32, 33, 46, 57, 58, 60, 63, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 106, 109, 111, 117, 119, 123, 135, 136, 148, 151, 154, 157, 163, 165, 166, 168, 172, 173, 177, 179, 180, 182, 184, 186, 189, 192, 195, 196, 198, 199, 201, 203, 204, 208, 209, 221, 222, 224, 226, 230, 231, 238, 239, 241, 243, 246, 249, 251, 254, 257, 258, 263, 264, 265, 268, 271, 272, 279, 288, 289, 301, 303, 304, 309, 315, 316, 318, 326, 327, 328, 329, 333, 334, 336, 337, 338, 340, 341, 342, 344, 348, 351, 353, 357, 360, 364, 367, 371, 376, 377, 379, 381, 382, 383, 384, 385, 389, 390, 395, 397, 398, 400, 403, 405, 407, 408, 416, 417, 418, 420, 421, 422, 423, 425, 427, 429, 430, 431, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478], "honor": [5, 112, 247, 293, 348, 353, 415, 463, 464, 474, 478], "writabl": [5, 7, 42, 57, 67, 83, 115, 117, 130, 146, 148, 244, 251, 254, 274, 279, 289, 291, 300, 311, 328, 333, 334, 337, 340, 343, 363, 364, 397, 417, 423, 427, 431, 461, 463, 471, 473, 474, 475, 478], "anoth": [5, 7, 22, 23, 30, 32, 34, 41, 57, 62, 63, 71, 72, 74, 75, 76, 83, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 122, 123, 129, 130, 132, 136, 141, 148, 152, 154, 159, 163, 165, 169, 172, 173, 177, 179, 182, 189, 190, 192, 199, 209, 211, 217, 221, 222, 226, 231, 239, 241, 243, 246, 251, 254, 257, 258, 263, 264, 266, 267, 274, 279, 283, 284, 288, 289, 292, 293, 295, 297, 304, 305, 307, 310, 315, 324, 328, 329, 334, 336, 337, 340, 341, 343, 344, 348, 349, 360, 362, 364, 370, 371, 373, 375, 379, 381, 383, 384, 385, 389, 390, 394, 397, 400, 402, 403, 404, 405, 406, 408, 409, 417, 420, 422, 423, 424, 425, 427, 431, 438, 439, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 473, 474, 476, 477, 478], "thread": [5, 17, 23, 30, 31, 33, 34, 41, 50, 52, 58, 62, 67, 72, 75, 78, 84, 86, 98, 99, 104, 115, 121, 122, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 156, 160, 162, 165, 166, 172, 183, 186, 210, 222, 228, 241, 243, 244, 250, 252, 253, 262, 264, 265, 266, 267, 279, 286, 289, 312, 317, 318, 320, 321, 328, 334, 336, 337, 340, 344, 348, 361, 363, 381, 390, 394, 395, 397, 423, 440, 450, 451, 457, 459, 460, 461, 462, 463, 464, 465, 474, 477, 478, 479], "mutat": [5, 22, 62, 84, 98, 163, 177, 192, 222, 246, 254, 279, 326, 340, 381, 385, 395, 459, 461, 472, 478], "variant": [5, 22, 30, 40, 46, 62, 67, 72, 83, 92, 94, 100, 103, 106, 117, 123, 154, 156, 163, 173, 179, 180, 182, 187, 199, 221, 222, 241, 244, 252, 257, 278, 279, 289, 292, 299, 328, 333, 336, 337, 353, 383, 384, 385, 390, 393, 411, 423, 427, 462, 463, 464, 465, 469, 472, 475, 476, 477, 478], "etc": [5, 33, 63, 78, 83, 84, 93, 94, 99, 100, 106, 107, 117, 130, 138, 143, 148, 152, 171, 202, 207, 221, 239, 240, 243, 248, 251, 255, 262, 263, 265, 268, 272, 277, 279, 280, 288, 289, 292, 299, 303, 304, 306, 307, 315, 325, 330, 333, 336, 337, 353, 360, 361, 364, 370, 379, 381, 383, 389, 402, 405, 417, 423, 426, 431, 446, 451, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478], "py_ssize_t_clean": [5, 34, 58, 71, 72, 75, 462, 467, 476, 478], "befor": [5, 7, 13, 17, 22, 23, 27, 28, 30, 31, 33, 37, 41, 44, 50, 54, 55, 57, 58, 59, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 106, 107, 112, 114, 117, 123, 125, 129, 132, 133, 134, 136, 137, 138, 140, 146, 147, 148, 150, 152, 153, 154, 155, 163, 165, 166, 172, 173, 179, 180, 182, 186, 187, 189, 191, 192, 197, 199, 201, 209, 214, 221, 222, 230, 238, 239, 241, 243, 244, 246, 251, 254, 255, 257, 262, 263, 264, 265, 266, 267, 272, 274, 279, 284, 288, 289, 291, 292, 293, 295, 296, 301, 303, 304, 305, 309, 310, 315, 316, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 347, 348, 351, 353, 354, 355, 357, 359, 360, 361, 370, 371, 377, 378, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 400, 402, 405, 406, 407, 408, 409, 410, 411, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 441, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "on": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 44, 46, 48, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 117, 119, 120, 123, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 147, 150, 151, 152, 153, 154, 157, 159, 160, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 216, 217, 220, 221, 224, 225, 228, 229, 230, 231, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 336, 338, 341, 342, 343, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 373, 376, 377, 379, 380, 381, 382, 383, 384, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 436, 437, 441, 443, 444, 446, 448, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "older": [5, 32, 62, 67, 72, 74, 91, 100, 102, 116, 117, 160, 173, 182, 186, 198, 226, 231, 243, 247, 248, 264, 284, 289, 291, 293, 295, 310, 324, 336, 337, 348, 349, 357, 364, 372, 381, 390, 410, 417, 425, 427, 457, 460, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478], "length": [5, 7, 9, 22, 23, 24, 33, 34, 37, 48, 53, 54, 55, 57, 58, 59, 62, 63, 67, 72, 74, 78, 84, 89, 91, 92, 93, 94, 96, 98, 100, 106, 107, 114, 117, 118, 119, 138, 139, 140, 143, 147, 154, 170, 171, 172, 173, 180, 182, 186, 187, 191, 192, 197, 198, 201, 203, 204, 211, 221, 238, 241, 244, 250, 254, 255, 257, 258, 264, 265, 266, 267, 269, 271, 274, 279, 280, 288, 289, 304, 310, 315, 316, 324, 328, 331, 333, 336, 337, 341, 343, 348, 353, 356, 359, 360, 361, 371, 380, 381, 383, 384, 388, 390, 395, 400, 402, 403, 405, 410, 414, 417, 418, 419, 422, 423, 425, 430, 431, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 478], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 78, 83, 86, 87, 88, 89, 92, 93, 96, 97, 98, 99, 100, 102, 103, 109, 110, 111, 117, 118, 119, 123, 124, 136, 137, 152, 156, 162, 163, 166, 172, 177, 179, 182, 186, 189, 207, 209, 217, 221, 222, 232, 236, 244, 250, 251, 252, 255, 258, 263, 271, 277, 280, 285, 287, 288, 289, 291, 295, 300, 302, 312, 314, 315, 322, 324, 333, 336, 339, 341, 343, 347, 348, 353, 361, 362, 373, 374, 377, 379, 380, 381, 383, 384, 393, 397, 400, 402, 405, 406, 407, 408, 414, 422, 423, 424, 425, 435, 436, 438, 441, 444, 445, 446, 450, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "exist": [5, 9, 22, 23, 25, 26, 30, 32, 33, 38, 41, 54, 57, 58, 62, 63, 65, 66, 67, 71, 72, 75, 78, 83, 84, 92, 93, 94, 97, 99, 100, 102, 103, 106, 107, 109, 112, 114, 116, 117, 119, 123, 125, 133, 136, 141, 146, 148, 152, 154, 156, 157, 159, 163, 165, 172, 177, 179, 180, 183, 185, 187, 189, 190, 192, 196, 201, 202, 204, 206, 207, 208, 209, 212, 214, 215, 221, 222, 226, 230, 231, 232, 239, 240, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 257, 263, 264, 265, 266, 267, 268, 272, 274, 277, 279, 280, 283, 284, 288, 289, 290, 291, 292, 293, 295, 298, 304, 309, 315, 316, 320, 326, 328, 329, 330, 333, 336, 337, 338, 339, 340, 341, 343, 344, 348, 349, 350, 353, 355, 357, 361, 363, 364, 367, 370, 371, 379, 381, 382, 383, 384, 389, 390, 392, 394, 395, 397, 398, 400, 402, 405, 408, 414, 416, 417, 418, 420, 422, 423, 424, 425, 427, 430, 431, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "store": [5, 7, 11, 13, 18, 25, 27, 28, 32, 33, 40, 41, 48, 55, 57, 60, 62, 63, 67, 72, 74, 75, 78, 83, 84, 87, 88, 89, 92, 94, 98, 99, 100, 103, 106, 107, 114, 117, 119, 130, 131, 138, 151, 154, 156, 163, 166, 169, 171, 172, 173, 177, 179, 180, 182, 187, 189, 192, 193, 196, 197, 199, 201, 204, 239, 241, 243, 244, 246, 249, 251, 252, 254, 257, 260, 263, 266, 267, 268, 272, 274, 279, 280, 284, 289, 294, 295, 296, 310, 324, 325, 326, 331, 333, 334, 336, 337, 338, 340, 343, 346, 348, 350, 353, 357, 360, 370, 371, 375, 376, 377, 379, 380, 381, 383, 384, 385, 390, 397, 400, 402, 405, 408, 414, 416, 417, 420, 422, 423, 425, 426, 427, 430, 431, 438, 443, 450, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478], "contain": [5, 7, 9, 13, 22, 23, 25, 28, 30, 32, 33, 34, 37, 39, 40, 41, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 114, 115, 119, 123, 130, 136, 138, 140, 141, 143, 146, 147, 148, 149, 153, 154, 155, 159, 163, 165, 166, 168, 171, 172, 173, 174, 177, 178, 179, 180, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 220, 221, 222, 226, 230, 231, 234, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 258, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 275, 277, 279, 280, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 307, 308, 309, 310, 315, 318, 320, 324, 326, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 347, 348, 349, 350, 353, 356, 357, 359, 360, 361, 362, 364, 370, 371, 373, 375, 376, 377, 379, 380, 382, 383, 384, 385, 388, 389, 390, 392, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "embed": [5, 7, 9, 32, 34, 44, 56, 60, 63, 67, 72, 73, 78, 89, 91, 92, 96, 98, 103, 106, 125, 132, 159, 171, 173, 195, 198, 255, 262, 276, 277, 289, 304, 315, 340, 344, 357, 361, 364, 370, 395, 410, 415, 416, 430, 446, 456, 458, 459, 462, 464, 470, 472, 475, 476, 477, 478, 479], "code": [5, 7, 9, 11, 12, 13, 18, 22, 23, 26, 27, 30, 33, 34, 37, 38, 40, 41, 44, 47, 50, 54, 55, 58, 59, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 79, 83, 86, 87, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 115, 118, 119, 125, 127, 129, 130, 132, 134, 136, 138, 139, 140, 141, 143, 148, 149, 154, 159, 162, 163, 164, 165, 166, 171, 172, 173, 176, 177, 178, 180, 182, 183, 184, 186, 187, 189, 192, 198, 199, 201, 202, 204, 207, 208, 209, 210, 211, 217, 221, 222, 224, 226, 231, 232, 237, 238, 239, 241, 244, 247, 250, 252, 253, 255, 257, 258, 262, 263, 264, 265, 266, 267, 269, 270, 274, 275, 276, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 298, 304, 305, 307, 308, 309, 310, 311, 315, 316, 320, 321, 326, 327, 328, 329, 330, 331, 333, 336, 337, 342, 343, 344, 347, 348, 349, 351, 357, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 375, 376, 377, 380, 381, 384, 385, 388, 389, 390, 392, 397, 402, 403, 404, 405, 406, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 440, 443, 449, 450, 451, 453, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 472, 474, 475, 476, 478, 479], "point": [5, 7, 16, 17, 18, 22, 23, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 54, 57, 59, 62, 63, 65, 67, 72, 76, 78, 83, 84, 86, 89, 91, 92, 94, 96, 98, 99, 100, 102, 103, 106, 111, 112, 113, 123, 130, 132, 134, 135, 136, 138, 141, 150, 151, 154, 156, 158, 159, 163, 165, 166, 172, 173, 177, 179, 185, 186, 189, 192, 196, 198, 199, 201, 202, 205, 209, 217, 221, 228, 231, 243, 246, 250, 257, 258, 262, 263, 264, 265, 267, 270, 271, 274, 276, 277, 279, 286, 288, 289, 290, 292, 293, 295, 298, 304, 315, 318, 324, 327, 328, 329, 333, 336, 337, 339, 340, 341, 342, 343, 348, 349, 350, 353, 357, 360, 361, 364, 367, 371, 373, 376, 379, 381, 383, 384, 385, 390, 394, 398, 403, 404, 406, 407, 408, 409, 416, 418, 420, 422, 423, 424, 425, 427, 431, 436, 437, 439, 444, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "doe": [5, 9, 13, 22, 23, 25, 26, 27, 28, 30, 32, 33, 37, 39, 41, 44, 48, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 83, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 107, 111, 112, 117, 119, 120, 123, 130, 136, 137, 140, 143, 146, 148, 150, 153, 154, 157, 159, 163, 165, 169, 171, 172, 173, 175, 177, 179, 180, 182, 184, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 204, 206, 207, 209, 211, 216, 217, 221, 222, 224, 225, 226, 229, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 272, 274, 279, 280, 283, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 301, 304, 305, 307, 310, 315, 318, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 351, 353, 354, 355, 357, 359, 360, 361, 363, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 435, 437, 444, 447, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "valueerror": [5, 9, 18, 23, 38, 40, 57, 63, 67, 84, 92, 93, 97, 99, 107, 111, 112, 117, 118, 119, 123, 131, 135, 140, 141, 144, 148, 153, 154, 155, 156, 159, 162, 163, 169, 171, 172, 177, 179, 182, 189, 192, 193, 199, 201, 204, 205, 206, 207, 209, 219, 221, 223, 228, 239, 244, 246, 251, 254, 255, 257, 258, 263, 264, 270, 271, 274, 279, 280, 284, 288, 289, 290, 292, 298, 301, 310, 312, 314, 318, 321, 325, 326, 328, 329, 331, 333, 336, 337, 339, 340, 341, 344, 347, 348, 360, 361, 374, 382, 383, 384, 389, 390, 394, 403, 405, 417, 420, 422, 425, 436, 437, 438, 441, 445, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "rais": [5, 7, 9, 13, 18, 22, 24, 25, 26, 28, 31, 32, 33, 36, 38, 44, 46, 48, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 67, 72, 74, 75, 77, 87, 91, 92, 93, 94, 97, 100, 102, 104, 106, 107, 109, 111, 112, 117, 119, 122, 123, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 148, 150, 151, 153, 154, 155, 156, 159, 163, 165, 166, 168, 169, 171, 172, 173, 177, 179, 180, 182, 183, 187, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 204, 205, 207, 209, 211, 214, 217, 221, 222, 224, 226, 229, 230, 231, 232, 238, 239, 240, 241, 243, 244, 246, 248, 249, 251, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 274, 277, 278, 279, 280, 283, 284, 287, 289, 291, 292, 293, 295, 298, 300, 301, 303, 307, 310, 315, 318, 319, 321, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 340, 341, 343, 344, 346, 347, 348, 350, 351, 353, 354, 357, 360, 361, 364, 373, 376, 377, 379, 380, 381, 382, 383, 384, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 414, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 430, 435, 436, 437, 438, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "utf": [5, 16, 23, 26, 30, 32, 33, 44, 58, 67, 86, 99, 100, 106, 115, 117, 119, 142, 148, 163, 171, 184, 186, 192, 193, 201, 202, 204, 205, 214, 219, 221, 231, 244, 246, 247, 248, 254, 258, 261, 262, 280, 282, 284, 293, 295, 301, 303, 310, 326, 333, 334, 336, 337, 340, 348, 353, 373, 389, 390, 393, 394, 402, 406, 408, 414, 416, 417, 423, 427, 430, 436, 441, 443, 450, 451, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478], "encod": [5, 14, 16, 23, 24, 26, 30, 32, 33, 44, 57, 58, 65, 67, 70, 76, 83, 86, 89, 91, 96, 99, 100, 102, 103, 107, 115, 116, 117, 118, 123, 130, 133, 138, 140, 142, 143, 146, 147, 148, 150, 163, 166, 171, 172, 173, 174, 180, 182, 184, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 209, 210, 214, 219, 221, 226, 230, 231, 238, 240, 244, 246, 247, 248, 249, 251, 252, 254, 260, 261, 262, 263, 264, 265, 266, 272, 280, 281, 289, 291, 292, 293, 295, 300, 303, 305, 310, 313, 326, 331, 333, 336, 337, 340, 343, 344, 345, 346, 348, 351, 353, 354, 355, 357, 364, 372, 373, 381, 390, 392, 396, 402, 403, 406, 408, 410, 411, 412, 414, 415, 416, 417, 423, 427, 440, 441, 450, 456, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479], "convers": [5, 9, 18, 32, 33, 62, 63, 67, 71, 89, 91, 92, 96, 115, 117, 119, 130, 140, 143, 154, 163, 179, 182, 191, 221, 250, 252, 254, 258, 262, 267, 272, 286, 288, 289, 295, 314, 333, 337, 341, 343, 344, 348, 353, 373, 380, 384, 389, 392, 421, 422, 426, 428, 430, 445, 450, 456, 462, 463, 464, 465, 466, 470, 472, 473, 475, 476, 478, 479], "fail": [5, 7, 9, 11, 18, 23, 24, 30, 32, 34, 40, 41, 44, 46, 55, 63, 67, 71, 72, 75, 78, 83, 84, 87, 88, 89, 93, 100, 102, 103, 107, 117, 119, 135, 136, 148, 150, 151, 165, 172, 179, 183, 184, 186, 189, 205, 207, 209, 211, 240, 241, 243, 245, 246, 251, 253, 254, 257, 258, 262, 264, 266, 267, 268, 274, 279, 288, 289, 291, 292, 293, 298, 303, 315, 318, 324, 326, 328, 329, 330, 331, 332, 333, 336, 337, 340, 341, 344, 348, 353, 355, 357, 360, 364, 377, 381, 383, 384, 385, 390, 400, 403, 408, 411, 414, 417, 420, 422, 423, 424, 426, 427, 431, 438, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 478], "unicodeerror": [5, 23, 67, 86, 154, 179, 198, 209, 289, 340, 445, 460, 465], "accept": [5, 18, 23, 28, 30, 32, 57, 60, 63, 65, 66, 67, 72, 74, 75, 78, 84, 88, 89, 91, 94, 97, 100, 102, 103, 104, 106, 107, 111, 114, 117, 119, 123, 130, 134, 136, 138, 140, 143, 146, 148, 151, 152, 154, 159, 160, 163, 165, 169, 172, 173, 174, 177, 179, 180, 182, 186, 189, 197, 201, 202, 204, 205, 209, 211, 217, 222, 224, 230, 231, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 274, 278, 279, 288, 289, 291, 295, 310, 315, 320, 324, 325, 326, 328, 329, 331, 334, 336, 337, 340, 344, 348, 353, 357, 359, 361, 370, 371, 373, 375, 377, 380, 381, 383, 389, 390, 392, 396, 398, 400, 402, 406, 408, 411, 414, 416, 417, 421, 422, 423, 425, 427, 430, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "want": [5, 7, 23, 25, 32, 33, 55, 62, 67, 71, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 112, 117, 119, 123, 129, 133, 138, 140, 141, 148, 149, 152, 153, 155, 163, 165, 172, 173, 176, 179, 183, 186, 189, 192, 196, 197, 198, 201, 204, 207, 211, 214, 221, 222, 224, 226, 231, 238, 239, 241, 243, 244, 246, 247, 251, 262, 263, 264, 265, 268, 271, 272, 274, 279, 288, 289, 292, 293, 295, 296, 298, 304, 309, 315, 324, 325, 328, 329, 331, 333, 334, 336, 337, 340, 341, 344, 348, 353, 359, 360, 364, 376, 379, 381, 383, 384, 385, 389, 390, 395, 397, 402, 408, 416, 417, 420, 421, 423, 424, 427, 436, 448, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 474, 476, 477, 478], "filesystem": [5, 23, 32, 33, 58, 63, 65, 67, 86, 106, 117, 123, 140, 163, 209, 211, 212, 215, 246, 250, 262, 267, 279, 289, 293, 298, 320, 328, 337, 348, 353, 357, 383, 384, 394, 395, 416, 417, 450, 456, 458, 464, 469, 472, 475, 478], "path": [5, 23, 24, 30, 31, 32, 34, 38, 58, 63, 67, 71, 72, 75, 83, 84, 86, 87, 89, 92, 94, 96, 98, 99, 100, 106, 108, 111, 115, 116, 117, 123, 133, 136, 139, 141, 145, 146, 148, 159, 163, 165, 172, 180, 186, 189, 196, 206, 209, 211, 215, 216, 219, 221, 226, 227, 230, 238, 239, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 254, 257, 261, 262, 263, 264, 265, 266, 267, 272, 275, 276, 277, 279, 282, 284, 288, 289, 293, 298, 304, 307, 308, 309, 311, 316, 320, 323, 326, 327, 328, 330, 331, 333, 336, 337, 338, 344, 348, 351, 353, 355, 357, 361, 364, 379, 381, 383, 384, 389, 390, 394, 395, 398, 400, 402, 408, 411, 414, 415, 416, 418, 420, 423, 428, 431, 433, 445, 447, 448, 450, 451, 453, 455, 457, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 475, 477, 478], "them": [5, 7, 22, 23, 32, 33, 34, 44, 58, 62, 63, 65, 67, 70, 72, 75, 76, 83, 84, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 103, 106, 107, 109, 111, 117, 119, 123, 125, 131, 136, 148, 152, 154, 155, 157, 159, 163, 165, 166, 171, 172, 173, 177, 179, 180, 182, 184, 187, 189, 191, 192, 197, 202, 204, 210, 212, 221, 222, 226, 231, 239, 240, 243, 244, 246, 247, 251, 254, 262, 263, 264, 265, 267, 279, 280, 284, 288, 289, 291, 292, 295, 303, 304, 315, 318, 320, 324, 326, 331, 333, 336, 337, 338, 340, 342, 343, 344, 348, 353, 354, 357, 359, 360, 362, 364, 370, 371, 377, 379, 381, 383, 384, 385, 395, 396, 400, 404, 405, 406, 407, 408, 416, 417, 422, 423, 425, 426, 427, 429, 431, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "prefer": [5, 22, 23, 28, 30, 33, 42, 48, 60, 62, 67, 84, 89, 93, 94, 100, 107, 111, 117, 123, 136, 157, 163, 173, 179, 182, 198, 201, 209, 221, 246, 251, 254, 257, 262, 267, 271, 279, 288, 289, 295, 309, 336, 337, 339, 340, 344, 348, 350, 357, 359, 360, 361, 363, 371, 379, 380, 381, 398, 400, 411, 416, 421, 427, 451, 456, 462, 464, 469, 470, 471, 473, 474, 475, 476, 478], "pyunicode_fsconvert": [5, 56, 63, 474, 478], "previous": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 28, 32, 37, 39, 41, 46, 57, 58, 60, 62, 63, 71, 72, 74, 75, 78, 83, 84, 88, 89, 91, 94, 99, 100, 103, 106, 117, 119, 123, 129, 130, 136, 137, 141, 146, 147, 148, 154, 163, 165, 166, 169, 172, 173, 177, 179, 182, 186, 187, 189, 203, 204, 207, 209, 210, 212, 217, 222, 226, 238, 241, 243, 246, 251, 257, 261, 263, 265, 266, 267, 272, 274, 278, 279, 280, 288, 289, 293, 295, 307, 310, 315, 325, 326, 327, 329, 331, 333, 336, 337, 340, 343, 348, 350, 351, 353, 357, 359, 360, 361, 370, 371, 375, 377, 379, 380, 381, 383, 384, 385, 389, 390, 395, 396, 400, 405, 408, 415, 417, 418, 421, 422, 423, 424, 427, 431, 441, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "typeerror": [5, 9, 22, 23, 38, 40, 46, 47, 48, 53, 54, 57, 58, 60, 62, 63, 66, 67, 72, 74, 75, 84, 88, 92, 93, 94, 97, 106, 107, 117, 118, 119, 126, 140, 163, 164, 165, 168, 172, 177, 179, 180, 182, 189, 192, 193, 194, 195, 201, 202, 207, 209, 221, 229, 246, 251, 254, 255, 258, 264, 270, 271, 274, 287, 288, 289, 292, 300, 314, 340, 348, 361, 381, 383, 384, 389, 393, 397, 406, 408, 414, 417, 422, 423, 425, 431, 436, 437, 438, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "was": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 30, 32, 41, 44, 48, 53, 55, 57, 58, 59, 60, 62, 63, 65, 72, 74, 75, 76, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 122, 123, 129, 130, 134, 136, 137, 138, 140, 141, 146, 148, 149, 152, 153, 154, 157, 159, 163, 165, 166, 171, 173, 177, 179, 182, 184, 186, 187, 189, 192, 195, 197, 198, 201, 202, 203, 206, 207, 209, 210, 214, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 254, 255, 262, 263, 264, 265, 266, 267, 268, 271, 274, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 303, 304, 307, 309, 310, 315, 316, 317, 318, 324, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 342, 343, 344, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 403, 405, 408, 409, 410, 414, 415, 417, 418, 420, 421, 422, 423, 425, 427, 429, 430, 431, 436, 438, 447, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "were": [5, 7, 9, 17, 18, 23, 26, 32, 34, 57, 60, 62, 65, 72, 74, 75, 89, 92, 94, 99, 100, 103, 109, 117, 119, 123, 130, 136, 137, 141, 146, 148, 154, 156, 163, 165, 173, 177, 179, 182, 184, 186, 187, 189, 192, 195, 196, 197, 199, 201, 203, 204, 209, 212, 221, 224, 231, 243, 246, 247, 251, 258, 263, 264, 271, 272, 274, 279, 289, 291, 295, 304, 310, 315, 326, 329, 331, 333, 334, 336, 340, 341, 343, 344, 348, 351, 353, 354, 357, 364, 371, 375, 376, 377, 379, 381, 383, 384, 385, 389, 390, 395, 402, 407, 408, 418, 422, 423, 424, 425, 427, 429, 430, 431, 436, 438, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "encount": [5, 9, 54, 62, 103, 106, 117, 148, 150, 171, 182, 189, 195, 201, 204, 208, 209, 224, 236, 240, 251, 258, 263, 264, 268, 288, 293, 295, 307, 310, 315, 327, 328, 334, 336, 337, 340, 344, 354, 371, 379, 381, 383, 395, 408, 410, 427, 457, 460, 461, 462, 463, 470, 471, 476, 478], "well": [5, 23, 34, 48, 62, 63, 72, 74, 75, 76, 78, 83, 84, 87, 88, 92, 93, 94, 98, 99, 100, 102, 103, 104, 106, 107, 111, 117, 129, 130, 134, 138, 140, 141, 143, 148, 149, 151, 153, 154, 163, 165, 172, 173, 180, 182, 187, 189, 190, 193, 196, 199, 200, 204, 207, 209, 211, 214, 221, 222, 224, 226, 230, 231, 239, 243, 247, 253, 254, 255, 257, 263, 264, 265, 266, 267, 272, 275, 280, 284, 288, 289, 295, 303, 315, 317, 320, 325, 328, 331, 336, 337, 338, 339, 340, 341, 344, 348, 349, 353, 356, 357, 359, 362, 364, 368, 370, 373, 376, 377, 379, 380, 381, 383, 384, 385, 389, 397, 405, 408, 409, 410, 411, 414, 420, 422, 423, 425, 427, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "into": [5, 9, 13, 18, 22, 23, 25, 26, 32, 33, 37, 40, 48, 54, 58, 60, 62, 63, 67, 71, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 106, 109, 111, 117, 119, 123, 130, 131, 134, 135, 136, 137, 138, 141, 143, 148, 150, 153, 154, 156, 159, 163, 165, 171, 172, 173, 177, 179, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 209, 210, 211, 218, 219, 221, 222, 226, 238, 240, 241, 243, 244, 246, 247, 248, 250, 251, 252, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 272, 274, 277, 278, 279, 280, 288, 289, 291, 292, 293, 294, 295, 301, 303, 304, 305, 307, 308, 310, 315, 316, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 348, 353, 357, 359, 360, 361, 364, 370, 371, 372, 373, 375, 376, 377, 380, 381, 382, 383, 384, 385, 390, 392, 394, 395, 397, 400, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 416, 417, 422, 423, 425, 427, 430, 431, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "two": [5, 7, 9, 14, 23, 25, 28, 30, 32, 33, 34, 36, 40, 41, 44, 46, 56, 57, 62, 63, 66, 67, 71, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 111, 114, 117, 119, 123, 129, 130, 136, 138, 140, 141, 143, 147, 148, 151, 152, 153, 154, 155, 156, 159, 163, 168, 169, 171, 172, 173, 174, 177, 179, 182, 185, 186, 187, 189, 190, 191, 192, 196, 198, 203, 204, 205, 206, 207, 209, 212, 214, 217, 221, 222, 224, 226, 231, 239, 241, 243, 244, 245, 246, 251, 254, 255, 256, 257, 262, 263, 264, 267, 271, 272, 274, 279, 280, 284, 288, 289, 291, 292, 293, 295, 297, 299, 301, 304, 308, 310, 314, 315, 318, 320, 321, 326, 328, 329, 330, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 348, 353, 356, 357, 359, 360, 361, 362, 367, 370, 371, 373, 377, 379, 381, 382, 383, 384, 385, 389, 394, 395, 396, 397, 400, 402, 403, 405, 408, 411, 416, 417, 420, 422, 423, 425, 426, 427, 429, 430, 431, 435, 436, 437, 444, 445, 446, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "second": [5, 20, 22, 23, 32, 34, 57, 63, 66, 67, 72, 74, 75, 76, 83, 84, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 106, 107, 109, 112, 114, 123, 126, 131, 132, 133, 135, 136, 138, 148, 154, 163, 165, 171, 172, 173, 178, 179, 182, 186, 187, 189, 191, 196, 199, 204, 205, 207, 209, 210, 211, 214, 217, 221, 224, 226, 231, 238, 239, 243, 244, 246, 251, 254, 257, 263, 264, 265, 267, 268, 271, 272, 278, 279, 280, 288, 289, 291, 293, 295, 297, 298, 301, 303, 304, 314, 315, 318, 321, 324, 325, 327, 328, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 353, 354, 356, 357, 360, 361, 362, 371, 373, 379, 381, 383, 384, 389, 390, 391, 402, 408, 414, 417, 423, 425, 426, 427, 430, 431, 437, 441, 444, 451, 457, 458, 459, 460, 461, 462, 463, 464, 470, 471, 473, 474, 475, 476, 478], "set": [5, 7, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 48, 55, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 80, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 126, 130, 132, 133, 134, 135, 136, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 162, 163, 165, 166, 169, 171, 172, 173, 174, 175, 177, 178, 179, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 218, 219, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 244, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 297, 301, 303, 304, 307, 309, 310, 314, 315, 316, 317, 318, 319, 320, 324, 326, 327, 328, 330, 331, 333, 334, 336, 338, 341, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 369, 370, 371, 372, 375, 377, 378, 380, 381, 382, 383, 384, 389, 390, 392, 394, 395, 396, 397, 398, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 422, 423, 424, 426, 427, 430, 431, 435, 440, 443, 445, 447, 450, 451, 453, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "buf": [5, 7, 41, 67, 123, 160, 211, 231, 280, 337, 340, 353, 462], "member": [5, 7, 26, 30, 32, 33, 34, 44, 49, 55, 58, 59, 60, 62, 67, 72, 74, 75, 87, 89, 109, 146, 159, 163, 172, 173, 177, 178, 187, 207, 209, 229, 230, 240, 241, 244, 257, 258, 264, 266, 289, 295, 307, 309, 311, 328, 333, 335, 336, 337, 338, 340, 343, 348, 353, 357, 361, 373, 380, 381, 383, 384, 417, 422, 423, 425, 460, 461, 462, 463, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "doesn": [5, 7, 22, 23, 30, 32, 33, 42, 55, 62, 71, 72, 75, 76, 78, 84, 89, 91, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 117, 119, 129, 130, 132, 141, 147, 148, 154, 165, 169, 171, 172, 179, 180, 182, 189, 192, 194, 196, 201, 209, 210, 221, 222, 239, 240, 243, 246, 247, 251, 254, 255, 258, 262, 263, 264, 265, 288, 289, 292, 293, 295, 298, 301, 310, 315, 318, 319, 324, 326, 328, 329, 330, 331, 333, 335, 336, 337, 340, 341, 344, 348, 353, 357, 360, 362, 364, 379, 380, 382, 383, 384, 385, 395, 400, 402, 404, 414, 418, 423, 425, 427, 436, 444, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "recommend": [5, 32, 41, 44, 62, 63, 67, 71, 72, 74, 75, 84, 87, 89, 90, 93, 94, 99, 102, 106, 117, 119, 123, 129, 130, 132, 136, 140, 154, 163, 169, 172, 177, 179, 182, 189, 192, 209, 221, 226, 231, 238, 241, 243, 244, 246, 251, 258, 263, 271, 284, 289, 291, 292, 295, 304, 310, 315, 320, 327, 328, 333, 334, 336, 337, 344, 348, 353, 355, 361, 364, 379, 381, 383, 389, 402, 404, 405, 406, 410, 411, 417, 420, 423, 427, 430, 451, 456, 457, 459, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "binari": [5, 7, 33, 40, 41, 46, 56, 62, 65, 67, 74, 77, 83, 85, 86, 89, 93, 96, 100, 106, 112, 115, 119, 123, 138, 140, 146, 164, 172, 182, 187, 190, 192, 193, 194, 196, 197, 199, 201, 203, 204, 207, 211, 217, 219, 221, 226, 230, 231, 241, 246, 248, 249, 250, 251, 252, 255, 257, 258, 262, 264, 265, 266, 267, 270, 271, 277, 278, 279, 281, 284, 288, 289, 292, 295, 298, 300, 333, 341, 344, 346, 348, 350, 353, 355, 358, 364, 381, 390, 392, 394, 397, 400, 408, 411, 415, 416, 417, 420, 421, 423, 428, 431, 434, 440, 441, 451, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pybytesobject": [5, 9, 13, 63, 89, 463, 468, 478], "attempt": [5, 11, 23, 25, 30, 32, 46, 58, 60, 62, 66, 84, 87, 89, 91, 93, 96, 97, 100, 103, 106, 107, 117, 119, 123, 130, 137, 146, 152, 163, 165, 169, 173, 179, 180, 182, 186, 187, 189, 190, 192, 195, 199, 201, 202, 203, 205, 208, 209, 221, 222, 238, 239, 243, 244, 246, 251, 254, 261, 262, 264, 265, 266, 267, 274, 278, 279, 280, 289, 291, 295, 298, 301, 303, 307, 309, 310, 315, 316, 318, 321, 324, 328, 329, 330, 331, 333, 334, 336, 337, 340, 343, 348, 353, 354, 357, 359, 360, 361, 381, 383, 384, 389, 390, 396, 402, 405, 408, 410, 411, 412, 417, 418, 422, 423, 425, 427, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 475, 476, 477, 478], "declar": [5, 32, 57, 62, 67, 72, 74, 75, 77, 83, 84, 89, 94, 100, 106, 125, 136, 163, 165, 166, 168, 172, 221, 222, 236, 246, 251, 254, 264, 288, 295, 310, 327, 334, 336, 340, 347, 381, 383, 397, 398, 404, 405, 406, 408, 410, 411, 420, 422, 423, 424, 425, 426, 431, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pybytearrayobject": [5, 8, 89], "implement": [5, 9, 13, 23, 28, 30, 31, 32, 38, 41, 44, 48, 53, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 98, 99, 103, 106, 107, 111, 117, 119, 125, 129, 130, 134, 136, 140, 141, 148, 152, 153, 154, 157, 163, 166, 169, 172, 177, 178, 179, 182, 187, 189, 192, 199, 201, 203, 204, 207, 208, 209, 210, 214, 216, 217, 221, 222, 226, 230, 231, 233, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 257, 262, 263, 264, 265, 267, 269, 271, 276, 277, 278, 279, 280, 281, 284, 288, 289, 292, 294, 295, 296, 298, 301, 303, 304, 305, 308, 310, 311, 315, 316, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 350, 351, 353, 354, 355, 357, 360, 361, 364, 365, 369, 371, 373, 374, 376, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 404, 405, 408, 409, 410, 411, 412, 414, 417, 418, 420, 422, 424, 425, 427, 428, 430, 431, 436, 437, 445, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 476, 477, 478, 479], "write": [5, 7, 18, 23, 25, 28, 32, 33, 34, 40, 41, 42, 50, 57, 58, 62, 63, 67, 71, 73, 74, 75, 77, 78, 83, 85, 86, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 109, 111, 114, 115, 116, 117, 123, 127, 132, 133, 134, 136, 137, 139, 140, 142, 146, 148, 152, 153, 154, 157, 159, 163, 165, 166, 171, 172, 173, 176, 180, 183, 185, 186, 189, 190, 192, 196, 197, 201, 204, 209, 211, 213, 214, 218, 219, 221, 222, 224, 226, 230, 232, 239, 241, 242, 243, 244, 246, 250, 251, 254, 255, 258, 263, 264, 265, 267, 269, 273, 274, 277, 279, 280, 281, 284, 288, 289, 291, 292, 294, 295, 297, 300, 301, 303, 304, 305, 307, 311, 316, 324, 325, 326, 327, 328, 329, 333, 334, 337, 338, 340, 343, 344, 346, 348, 351, 354, 355, 358, 360, 364, 366, 371, 373, 375, 377, 379, 381, 383, 384, 385, 392, 394, 395, 400, 402, 405, 406, 408, 410, 412, 414, 416, 417, 421, 422, 423, 426, 427, 431, 436, 441, 445, 446, 447, 450, 456, 457, 458, 459, 460, 461, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "interfac": [5, 7, 28, 30, 31, 32, 42, 50, 56, 58, 62, 63, 65, 67, 71, 72, 74, 79, 83, 84, 91, 92, 94, 99, 100, 102, 103, 106, 107, 111, 115, 116, 117, 123, 129, 130, 140, 146, 147, 150, 152, 154, 157, 163, 165, 166, 168, 169, 172, 173, 176, 181, 183, 185, 188, 189, 190, 192, 193, 199, 200, 201, 202, 203, 208, 210, 211, 214, 218, 224, 226, 229, 231, 238, 239, 241, 243, 246, 247, 248, 249, 250, 252, 254, 256, 257, 260, 262, 263, 266, 267, 269, 272, 277, 279, 281, 288, 291, 292, 293, 294, 295, 298, 300, 301, 304, 308, 310, 311, 321, 324, 326, 329, 331, 334, 335, 337, 340, 344, 346, 347, 348, 351, 356, 358, 360, 361, 365, 370, 373, 376, 379, 389, 392, 393, 395, 396, 397, 398, 399, 402, 404, 405, 406, 408, 409, 410, 412, 421, 423, 427, 450, 456, 457, 459, 460, 461, 462, 463, 464, 466, 469, 471, 472, 473, 474, 475, 477, 478, 479], "done": [5, 7, 30, 32, 33, 34, 35, 46, 48, 50, 53, 54, 57, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 94, 96, 97, 99, 100, 102, 103, 106, 107, 111, 117, 122, 123, 126, 130, 133, 136, 138, 148, 152, 154, 155, 160, 162, 163, 169, 171, 172, 173, 178, 179, 180, 182, 187, 189, 192, 196, 200, 201, 204, 205, 212, 218, 221, 228, 230, 231, 241, 243, 246, 251, 254, 262, 263, 264, 265, 274, 279, 284, 288, 289, 291, 292, 295, 298, 304, 305, 310, 312, 315, 330, 334, 336, 337, 340, 341, 344, 346, 348, 353, 354, 356, 357, 361, 362, 370, 371, 379, 380, 381, 384, 385, 390, 394, 395, 397, 403, 406, 407, 408, 409, 416, 423, 425, 427, 430, 431, 447, 456, 457, 458, 459, 460, 462, 463, 469, 470, 471, 472, 473, 474, 476, 478], "work": [5, 18, 23, 25, 32, 33, 35, 36, 40, 41, 44, 54, 58, 62, 63, 67, 71, 72, 75, 76, 77, 78, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 111, 112, 116, 117, 119, 120, 129, 130, 131, 132, 134, 135, 136, 137, 142, 147, 148, 152, 154, 157, 159, 163, 165, 166, 169, 172, 173, 177, 179, 180, 183, 186, 187, 188, 193, 201, 203, 204, 206, 207, 211, 221, 222, 224, 225, 226, 228, 229, 237, 238, 239, 241, 243, 244, 246, 247, 250, 251, 253, 254, 256, 257, 260, 262, 263, 264, 265, 269, 271, 274, 279, 280, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 300, 301, 304, 305, 312, 315, 318, 320, 324, 325, 326, 328, 331, 333, 334, 335, 337, 339, 340, 341, 343, 344, 348, 351, 353, 354, 355, 356, 357, 359, 360, 364, 370, 371, 376, 379, 383, 384, 385, 389, 390, 394, 395, 397, 398, 400, 402, 405, 406, 408, 409, 414, 415, 416, 420, 421, 422, 423, 425, 427, 429, 431, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 26, 28, 29, 30, 32, 33, 34, 41, 44, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 88, 89, 91, 94, 96, 99, 100, 101, 102, 105, 106, 107, 109, 111, 114, 115, 116, 119, 123, 125, 130, 131, 133, 136, 137, 139, 141, 142, 144, 146, 147, 148, 149, 150, 152, 153, 156, 157, 159, 160, 162, 163, 165, 166, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 196, 198, 199, 201, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 219, 221, 222, 224, 226, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 287, 288, 290, 291, 292, 293, 295, 296, 298, 299, 301, 303, 304, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 324, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 354, 355, 356, 357, 358, 360, 361, 363, 364, 367, 369, 370, 371, 372, 373, 375, 376, 377, 379, 381, 382, 383, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 441, 444, 445, 447, 448, 450, 451, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "known": [5, 9, 23, 32, 59, 60, 62, 63, 67, 74, 84, 93, 94, 96, 103, 104, 107, 117, 119, 148, 151, 154, 163, 165, 172, 179, 182, 192, 193, 205, 231, 238, 243, 246, 247, 249, 262, 263, 264, 271, 272, 280, 289, 295, 315, 316, 323, 324, 333, 336, 337, 338, 340, 344, 348, 349, 361, 364, 370, 371, 373, 379, 381, 382, 384, 385, 394, 395, 404, 405, 410, 411, 417, 420, 421, 423, 425, 429, 430, 431, 451, 453, 460, 462, 464, 465, 466, 470, 472, 474, 475, 476, 478], "content": [5, 7, 9, 25, 32, 37, 41, 44, 53, 57, 60, 63, 65, 67, 71, 83, 84, 87, 89, 91, 94, 99, 100, 103, 106, 107, 111, 115, 119, 140, 146, 148, 150, 153, 154, 156, 159, 162, 171, 172, 173, 175, 180, 183, 187, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 211, 212, 219, 221, 222, 226, 230, 231, 236, 237, 238, 241, 243, 246, 247, 248, 249, 251, 252, 254, 258, 264, 267, 269, 272, 274, 275, 276, 277, 280, 281, 289, 292, 295, 296, 298, 303, 307, 311, 315, 316, 328, 330, 333, 336, 337, 340, 341, 343, 348, 349, 353, 355, 357, 359, 364, 373, 380, 388, 389, 390, 394, 397, 402, 404, 405, 406, 408, 410, 411, 412, 414, 415, 416, 417, 420, 421, 424, 425, 427, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "text": [5, 53, 58, 63, 67, 71, 74, 83, 84, 86, 88, 89, 94, 99, 100, 103, 106, 107, 115, 117, 119, 123, 142, 143, 146, 147, 148, 149, 152, 153, 155, 163, 164, 169, 171, 172, 174, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 208, 209, 214, 215, 219, 221, 222, 230, 234, 236, 238, 241, 244, 246, 248, 249, 250, 251, 254, 258, 262, 263, 264, 265, 266, 267, 269, 277, 278, 284, 288, 289, 292, 295, 301, 303, 304, 309, 310, 311, 316, 319, 327, 329, 336, 337, 341, 342, 344, 346, 348, 353, 355, 362, 363, 364, 367, 370, 371, 372, 376, 379, 381, 382, 383, 389, 390, 394, 395, 398, 402, 404, 406, 407, 408, 410, 411, 417, 421, 423, 424, 425, 427, 429, 430, 441, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "specifi": [5, 7, 9, 11, 13, 17, 18, 22, 23, 25, 30, 32, 33, 38, 41, 44, 48, 55, 60, 62, 63, 65, 67, 72, 74, 75, 76, 78, 84, 87, 89, 91, 92, 93, 94, 99, 100, 103, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 123, 129, 130, 132, 135, 136, 138, 140, 141, 143, 146, 147, 148, 151, 152, 153, 154, 157, 159, 162, 163, 165, 169, 171, 173, 177, 179, 180, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 214, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 271, 272, 274, 275, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 307, 309, 310, 315, 316, 318, 320, 324, 325, 326, 327, 328, 329, 331, 333, 336, 337, 340, 341, 343, 344, 348, 349, 350, 353, 354, 355, 356, 357, 360, 361, 362, 364, 367, 370, 371, 373, 375, 376, 379, 380, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 400, 401, 402, 405, 406, 408, 410, 411, 417, 418, 420, 422, 423, 424, 425, 426, 427, 430, 431, 441, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "need": [5, 7, 11, 13, 18, 23, 26, 28, 30, 32, 33, 34, 41, 44, 48, 50, 56, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 114, 117, 119, 123, 129, 134, 135, 136, 137, 138, 141, 146, 148, 150, 151, 152, 153, 154, 157, 163, 165, 169, 172, 173, 175, 177, 179, 182, 186, 187, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 221, 222, 226, 230, 231, 234, 239, 241, 243, 244, 246, 247, 248, 251, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 274, 277, 279, 280, 284, 288, 289, 291, 292, 295, 298, 301, 303, 304, 307, 310, 315, 316, 317, 318, 321, 322, 326, 327, 328, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 353, 355, 356, 357, 359, 360, 361, 364, 370, 372, 373, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 423, 425, 426, 427, 429, 430, 431, 450, 451, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "copi": [5, 7, 9, 17, 25, 32, 33, 41, 42, 54, 57, 62, 63, 67, 72, 76, 79, 83, 84, 89, 94, 98, 100, 109, 116, 117, 119, 123, 130, 136, 148, 154, 156, 160, 162, 163, 166, 168, 170, 172, 173, 177, 178, 179, 182, 187, 189, 196, 197, 199, 204, 209, 211, 215, 221, 222, 226, 231, 233, 240, 243, 244, 250, 251, 252, 254, 257, 263, 264, 265, 267, 272, 274, 279, 280, 286, 288, 289, 293, 295, 297, 298, 305, 315, 326, 336, 340, 341, 343, 344, 346, 348, 350, 353, 357, 363, 367, 377, 379, 380, 383, 384, 385, 390, 394, 395, 402, 410, 411, 416, 419, 421, 423, 435, 436, 437, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "adjust": [5, 44, 53, 55, 56, 63, 67, 89, 102, 117, 156, 173, 179, 182, 197, 204, 286, 289, 303, 320, 330, 336, 337, 340, 361, 364, 370, 371, 408, 457, 464, 472, 474, 475, 476, 478], "newli": [5, 41, 58, 67, 72, 84, 99, 136, 153, 157, 177, 187, 194, 228, 239, 254, 279, 289, 298, 328, 330, 333, 370, 371, 379, 405, 422, 423, 461, 463, 469, 471, 474, 475, 478], "respons": [5, 18, 23, 32, 33, 34, 44, 60, 62, 63, 67, 72, 75, 78, 92, 93, 94, 99, 100, 106, 107, 123, 130, 132, 134, 152, 165, 173, 175, 179, 187, 192, 207, 238, 239, 241, 244, 246, 250, 252, 262, 263, 284, 301, 310, 321, 331, 333, 334, 336, 337, 343, 344, 346, 347, 353, 381, 383, 385, 388, 396, 407, 414, 415, 416, 420, 421, 423, 425, 427, 436, 446, 456, 457, 460, 463, 464, 468, 470, 471, 472, 473, 475, 476, 478], "free": [5, 7, 11, 13, 18, 32, 33, 41, 58, 62, 63, 72, 74, 75, 77, 83, 84, 88, 94, 102, 119, 125, 131, 137, 154, 172, 186, 187, 221, 225, 226, 244, 251, 279, 280, 288, 289, 295, 299, 312, 328, 340, 347, 348, 357, 377, 380, 383, 397, 405, 414, 415, 420, 421, 422, 423, 424, 425, 427, 431, 456, 458, 459, 460, 462, 463, 465, 470, 471, 472, 477, 478], "through": [5, 7, 9, 11, 22, 23, 28, 32, 41, 44, 50, 54, 58, 59, 62, 63, 66, 67, 72, 75, 76, 84, 89, 90, 92, 94, 97, 99, 100, 102, 103, 106, 107, 117, 119, 123, 141, 148, 154, 163, 171, 172, 173, 174, 177, 179, 182, 186, 187, 189, 190, 192, 193, 194, 198, 200, 201, 202, 204, 206, 212, 217, 221, 222, 226, 238, 240, 241, 243, 246, 247, 253, 263, 264, 265, 267, 271, 274, 277, 279, 280, 288, 289, 293, 297, 298, 308, 310, 315, 331, 333, 336, 337, 338, 340, 341, 344, 348, 350, 357, 359, 360, 362, 364, 370, 371, 380, 381, 383, 384, 385, 389, 390, 397, 401, 405, 406, 408, 410, 412, 414, 417, 421, 422, 423, 424, 425, 427, 429, 430, 431, 436, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "recod": 5, "instead": [5, 7, 13, 17, 22, 23, 28, 30, 32, 33, 39, 41, 44, 48, 57, 58, 60, 62, 65, 67, 71, 72, 74, 75, 76, 83, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 111, 117, 119, 120, 123, 125, 130, 132, 136, 140, 143, 146, 148, 149, 153, 154, 155, 157, 163, 165, 166, 171, 172, 173, 177, 179, 180, 182, 186, 187, 189, 192, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 221, 222, 224, 226, 230, 238, 239, 240, 241, 243, 244, 246, 249, 251, 254, 257, 258, 262, 263, 265, 266, 267, 271, 279, 280, 284, 288, 289, 292, 293, 295, 296, 298, 299, 303, 304, 307, 308, 309, 310, 315, 316, 317, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 340, 341, 343, 344, 348, 349, 350, 353, 354, 357, 360, 362, 364, 370, 371, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 397, 398, 400, 402, 404, 405, 406, 407, 408, 410, 418, 420, 422, 423, 424, 425, 426, 427, 430, 431, 444, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "assum": [5, 7, 32, 33, 34, 40, 44, 53, 55, 59, 62, 71, 72, 75, 83, 84, 87, 88, 94, 96, 97, 98, 99, 100, 102, 103, 106, 117, 123, 147, 148, 150, 151, 154, 157, 163, 165, 171, 172, 179, 192, 195, 197, 198, 199, 205, 206, 221, 226, 231, 238, 239, 243, 244, 245, 248, 254, 262, 263, 264, 279, 284, 288, 289, 292, 293, 298, 307, 309, 330, 333, 336, 337, 340, 341, 343, 344, 348, 353, 359, 361, 367, 371, 381, 383, 385, 390, 394, 403, 411, 416, 421, 423, 425, 427, 431, 456, 457, 458, 459, 462, 463, 465, 469, 471, 472, 473, 474, 475, 478], "paramet": [5, 7, 9, 11, 13, 17, 22, 23, 28, 31, 33, 36, 44, 48, 55, 57, 60, 62, 63, 65, 66, 67, 73, 74, 78, 83, 86, 92, 93, 94, 99, 103, 106, 109, 112, 114, 115, 117, 123, 132, 133, 134, 136, 138, 141, 146, 147, 148, 154, 159, 162, 163, 165, 166, 168, 173, 179, 182, 186, 187, 189, 192, 193, 194, 195, 197, 199, 201, 202, 204, 205, 209, 210, 211, 212, 213, 214, 216, 219, 221, 222, 224, 226, 230, 231, 238, 239, 241, 243, 244, 246, 247, 248, 249, 251, 254, 255, 257, 258, 260, 262, 263, 264, 265, 267, 268, 271, 272, 274, 277, 278, 279, 280, 284, 288, 291, 292, 293, 301, 303, 307, 308, 310, 311, 315, 316, 318, 321, 324, 326, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 344, 347, 348, 351, 353, 354, 355, 357, 360, 361, 362, 363, 370, 375, 376, 377, 379, 383, 384, 385, 389, 390, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 410, 412, 414, 415, 417, 420, 423, 424, 425, 426, 427, 428, 431, 440, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478], "buffer_length": 5, "unlik": [5, 32, 37, 40, 41, 44, 48, 54, 59, 63, 72, 75, 83, 84, 92, 93, 94, 98, 99, 100, 106, 119, 123, 134, 136, 146, 159, 165, 171, 173, 179, 180, 182, 201, 221, 224, 239, 244, 254, 257, 258, 266, 267, 271, 279, 289, 291, 292, 293, 295, 301, 315, 320, 333, 337, 340, 341, 344, 353, 355, 357, 361, 364, 377, 379, 380, 381, 383, 384, 397, 400, 402, 408, 420, 423, 425, 427, 429, 430, 431, 456, 458, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 477, 478], "third": [5, 7, 23, 28, 30, 32, 57, 62, 72, 74, 75, 83, 84, 88, 89, 92, 94, 99, 100, 103, 106, 109, 114, 123, 125, 129, 130, 135, 154, 163, 172, 173, 177, 179, 180, 182, 221, 224, 246, 247, 257, 263, 264, 289, 295, 298, 303, 315, 326, 328, 333, 336, 337, 339, 340, 348, 350, 364, 375, 381, 383, 385, 390, 394, 395, 397, 414, 421, 423, 427, 444, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 476, 477, 478], "integ": [5, 7, 9, 18, 22, 23, 32, 33, 34, 38, 40, 41, 44, 46, 48, 55, 60, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 93, 94, 97, 100, 102, 103, 106, 107, 111, 112, 114, 117, 119, 123, 130, 135, 138, 146, 147, 148, 151, 154, 163, 169, 172, 173, 174, 179, 182, 189, 199, 207, 208, 209, 211, 214, 217, 221, 229, 230, 239, 241, 244, 246, 250, 252, 254, 258, 262, 263, 264, 265, 266, 271, 274, 277, 279, 284, 285, 288, 289, 295, 300, 301, 303, 304, 310, 314, 315, 316, 317, 318, 324, 325, 328, 333, 334, 335, 336, 337, 341, 343, 344, 345, 348, 356, 357, 360, 361, 364, 371, 374, 379, 382, 384, 389, 395, 396, 400, 403, 405, 406, 408, 414, 417, 422, 423, 425, 431, 436, 438, 446, 450, 451, 457, 458, 460, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "referenc": [5, 7, 13, 59, 62, 66, 72, 74, 84, 99, 103, 111, 117, 136, 163, 175, 187, 221, 222, 243, 251, 279, 289, 292, 295, 315, 340, 347, 397, 405, 423, 456, 458, 459, 460, 463, 464, 465, 471, 472, 478], "output": [5, 9, 18, 32, 33, 41, 58, 62, 63, 65, 67, 72, 74, 75, 78, 83, 91, 94, 96, 99, 101, 103, 106, 109, 111, 114, 117, 123, 130, 134, 136, 138, 140, 141, 143, 145, 146, 147, 148, 149, 152, 153, 154, 159, 160, 163, 165, 171, 172, 173, 179, 183, 186, 187, 189, 191, 196, 197, 198, 200, 204, 205, 206, 208, 214, 215, 219, 221, 224, 230, 231, 238, 240, 241, 242, 244, 251, 252, 254, 257, 258, 263, 265, 266, 271, 275, 279, 284, 288, 289, 291, 295, 296, 297, 298, 301, 303, 304, 305, 307, 309, 310, 313, 315, 317, 318, 321, 324, 327, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 352, 353, 354, 356, 357, 359, 361, 362, 363, 373, 375, 376, 377, 379, 381, 383, 390, 392, 394, 395, 396, 397, 402, 406, 408, 412, 416, 417, 423, 430, 431, 440, 445, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "mode": [5, 24, 32, 33, 34, 40, 41, 58, 63, 65, 67, 72, 83, 84, 89, 91, 99, 100, 101, 102, 103, 106, 109, 114, 115, 116, 117, 119, 122, 132, 139, 141, 146, 148, 154, 159, 163, 170, 172, 173, 174, 180, 183, 185, 186, 189, 196, 203, 209, 210, 214, 218, 219, 221, 224, 230, 234, 241, 243, 247, 248, 249, 250, 254, 262, 263, 265, 266, 267, 271, 278, 284, 286, 288, 291, 292, 293, 295, 297, 301, 305, 307, 314, 315, 316, 318, 319, 323, 327, 328, 330, 331, 333, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 353, 355, 357, 371, 373, 377, 378, 379, 381, 383, 392, 396, 398, 408, 410, 416, 417, 419, 420, 423, 431, 441, 443, 450, 451, 456, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478], "oper": [5, 7, 22, 23, 28, 32, 34, 36, 40, 41, 46, 48, 53, 58, 62, 63, 65, 67, 71, 72, 74, 75, 76, 83, 86, 89, 91, 92, 93, 99, 100, 102, 103, 106, 107, 109, 110, 115, 116, 119, 123, 130, 136, 138, 139, 141, 142, 144, 148, 151, 157, 162, 163, 165, 169, 171, 172, 173, 179, 180, 182, 184, 187, 190, 191, 192, 196, 197, 198, 201, 203, 204, 206, 207, 208, 209, 211, 212, 215, 216, 217, 220, 221, 223, 226, 238, 241, 243, 246, 247, 250, 251, 252, 253, 254, 257, 262, 263, 265, 266, 267, 271, 272, 279, 285, 291, 292, 295, 304, 305, 309, 310, 315, 316, 318, 324, 326, 327, 329, 331, 333, 336, 338, 343, 344, 348, 353, 354, 355, 356, 357, 358, 360, 364, 371, 373, 379, 380, 381, 385, 389, 390, 395, 397, 398, 399, 400, 402, 404, 405, 406, 408, 411, 414, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 437, 438, 441, 444, 450, 451, 456, 457, 458, 460, 461, 462, 463, 464, 469, 470, 474, 475, 476, 478, 479], "usag": [5, 32, 33, 62, 63, 66, 67, 71, 72, 75, 84, 88, 89, 94, 99, 100, 102, 103, 106, 109, 115, 132, 137, 140, 146, 150, 165, 174, 178, 181, 183, 184, 190, 209, 214, 221, 222, 224, 226, 230, 239, 241, 244, 246, 247, 250, 252, 255, 260, 263, 265, 268, 276, 279, 288, 289, 293, 295, 301, 303, 311, 315, 328, 340, 341, 348, 353, 357, 362, 363, 370, 377, 381, 383, 386, 390, 394, 395, 398, 402, 405, 406, 416, 420, 422, 423, 444, 450, 451, 456, 459, 460, 461, 462, 463, 464, 469, 470, 473, 474, 478], "non": [5, 7, 9, 11, 13, 18, 22, 23, 25, 26, 28, 30, 33, 34, 35, 37, 38, 41, 44, 48, 57, 58, 59, 60, 62, 63, 67, 70, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 96, 98, 99, 100, 104, 106, 107, 112, 117, 119, 122, 123, 129, 130, 136, 140, 141, 146, 148, 152, 154, 163, 165, 171, 172, 173, 174, 177, 179, 180, 182, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 219, 221, 222, 224, 226, 229, 230, 231, 233, 238, 239, 241, 243, 244, 246, 248, 249, 253, 254, 255, 257, 261, 262, 263, 264, 265, 269, 271, 272, 274, 279, 280, 281, 284, 288, 289, 291, 292, 293, 295, 298, 301, 304, 307, 310, 312, 314, 315, 316, 318, 324, 327, 328, 329, 330, 331, 333, 334, 336, 338, 340, 341, 342, 343, 344, 348, 350, 353, 354, 357, 359, 360, 361, 372, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 398, 410, 414, 417, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 435, 436, 438, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478], "alreadi": [5, 7, 9, 13, 22, 23, 24, 27, 28, 30, 32, 33, 37, 41, 48, 50, 53, 59, 60, 62, 63, 65, 67, 72, 74, 75, 76, 83, 84, 91, 92, 93, 94, 97, 98, 100, 102, 103, 106, 109, 117, 119, 123, 126, 130, 136, 148, 159, 163, 165, 172, 177, 179, 180, 185, 186, 192, 195, 196, 201, 204, 206, 207, 208, 209, 214, 223, 238, 239, 243, 244, 246, 251, 254, 257, 263, 264, 266, 267, 272, 277, 278, 279, 280, 288, 289, 292, 295, 298, 301, 303, 304, 315, 316, 317, 324, 325, 328, 329, 333, 336, 337, 340, 344, 348, 351, 353, 354, 357, 360, 364, 371, 379, 383, 384, 385, 389, 392, 394, 395, 398, 400, 405, 406, 408, 412, 416, 422, 423, 425, 427, 431, 456, 457, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "locat": [5, 7, 32, 33, 34, 57, 63, 67, 71, 76, 83, 84, 88, 91, 92, 93, 96, 99, 100, 103, 107, 109, 119, 138, 144, 154, 159, 163, 172, 173, 179, 180, 187, 189, 206, 207, 209, 221, 239, 243, 246, 247, 248, 249, 250, 262, 264, 265, 269, 272, 276, 279, 289, 293, 295, 296, 298, 307, 308, 309, 310, 315, 316, 328, 336, 337, 349, 350, 357, 361, 370, 379, 381, 383, 389, 390, 394, 395, 402, 404, 405, 408, 409, 410, 417, 420, 421, 422, 423, 426, 427, 431, 448, 450, 456, 457, 459, 460, 461, 462, 463, 464, 467, 469, 470, 472, 474, 476, 478], "interpret": [5, 7, 13, 23, 24, 26, 27, 28, 30, 31, 33, 38, 41, 44, 46, 48, 50, 52, 57, 58, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 86, 89, 92, 94, 96, 99, 100, 101, 102, 103, 106, 109, 111, 112, 117, 119, 123, 137, 142, 147, 148, 149, 159, 162, 163, 171, 172, 173, 178, 179, 180, 182, 186, 187, 188, 189, 193, 199, 203, 205, 206, 209, 215, 218, 221, 223, 231, 241, 243, 244, 246, 247, 250, 254, 255, 257, 258, 263, 264, 274, 277, 279, 288, 289, 292, 293, 295, 303, 304, 305, 307, 309, 310, 311, 314, 315, 316, 320, 324, 326, 327, 329, 330, 331, 333, 336, 337, 340, 341, 344, 348, 350, 351, 356, 357, 360, 361, 364, 367, 370, 371, 376, 381, 383, 384, 390, 394, 395, 397, 398, 401, 405, 408, 421, 422, 423, 424, 425, 427, 429, 430, 431, 437, 444, 450, 451, 456, 457, 458, 460, 461, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "then": [5, 7, 13, 18, 23, 25, 27, 28, 30, 32, 33, 34, 41, 42, 46, 48, 58, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 84, 87, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 111, 112, 117, 119, 123, 129, 130, 136, 141, 148, 151, 153, 154, 157, 159, 165, 172, 173, 177, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 221, 222, 224, 226, 231, 239, 241, 243, 244, 246, 247, 249, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 267, 268, 271, 272, 274, 277, 279, 280, 284, 288, 289, 293, 294, 295, 298, 303, 304, 305, 309, 310, 315, 318, 320, 321, 324, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 353, 355, 357, 359, 360, 361, 362, 364, 366, 367, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 395, 396, 397, 398, 400, 402, 403, 405, 408, 409, 410, 415, 416, 417, 421, 422, 423, 425, 426, 427, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "larg": [5, 7, 18, 54, 57, 58, 62, 67, 71, 83, 91, 92, 94, 97, 100, 102, 103, 106, 107, 119, 134, 154, 172, 173, 179, 180, 182, 184, 186, 189, 208, 209, 218, 243, 244, 254, 255, 258, 271, 279, 284, 288, 289, 291, 292, 295, 314, 329, 340, 341, 342, 343, 344, 348, 353, 377, 379, 383, 386, 397, 404, 405, 406, 408, 417, 420, 439, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 476, 478], "enough": [5, 41, 44, 58, 62, 63, 83, 84, 91, 92, 97, 99, 100, 102, 154, 172, 179, 186, 195, 197, 243, 246, 254, 257, 261, 266, 288, 289, 295, 304, 333, 335, 337, 340, 341, 344, 357, 359, 362, 364, 380, 384, 397, 457, 458, 459, 460, 465, 471, 478], "both": [5, 7, 18, 22, 23, 24, 32, 44, 48, 54, 57, 62, 63, 71, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 111, 117, 119, 123, 130, 134, 136, 138, 140, 147, 148, 151, 154, 155, 157, 163, 165, 171, 172, 173, 177, 179, 182, 186, 187, 189, 190, 191, 192, 196, 197, 198, 199, 201, 202, 203, 206, 209, 211, 212, 216, 221, 222, 226, 229, 231, 234, 239, 240, 241, 243, 246, 251, 253, 254, 255, 263, 264, 266, 271, 274, 277, 278, 279, 280, 283, 288, 289, 291, 292, 293, 295, 298, 300, 301, 303, 304, 305, 315, 316, 318, 320, 325, 326, 328, 329, 330, 331, 333, 336, 337, 340, 341, 343, 344, 348, 350, 356, 357, 359, 361, 362, 364, 371, 373, 375, 377, 379, 381, 383, 384, 385, 389, 390, 395, 397, 400, 402, 406, 408, 412, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 437, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "trail": [5, 18, 32, 33, 38, 63, 77, 89, 91, 94, 103, 140, 143, 153, 154, 155, 163, 173, 182, 186, 192, 201, 204, 217, 221, 224, 243, 267, 280, 310, 333, 337, 340, 341, 344, 351, 361, 364, 376, 384, 390, 402, 405, 422, 423, 425, 426, 430, 431, 437, 446, 450, 457, 461, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 478], "12": [5, 6, 10, 13, 20, 22, 23, 26, 27, 28, 30, 32, 33, 41, 44, 45, 48, 51, 55, 56, 57, 60, 62, 63, 65, 67, 70, 77, 79, 84, 88, 93, 94, 99, 100, 101, 103, 105, 106, 117, 123, 129, 132, 133, 134, 136, 137, 140, 143, 147, 157, 163, 165, 169, 172, 179, 182, 187, 189, 205, 207, 211, 217, 219, 221, 222, 230, 231, 232, 237, 238, 241, 244, 246, 247, 248, 249, 251, 255, 257, 263, 264, 265, 271, 274, 279, 289, 290, 292, 293, 298, 300, 301, 314, 315, 317, 318, 320, 327, 328, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 348, 351, 353, 355, 357, 359, 360, 361, 364, 373, 376, 377, 378, 379, 380, 381, 383, 389, 393, 394, 395, 396, 398, 408, 417, 418, 420, 422, 423, 424, 425, 426, 427, 430, 431, 436, 437, 439, 441, 443, 444, 446, 450, 451, 454, 456, 459, 460, 461, 462, 463, 464, 466, 467, 470, 474, 475, 477, 479], "remov": [5, 10, 22, 24, 26, 28, 30, 33, 34, 39, 44, 48, 54, 62, 63, 65, 67, 72, 74, 75, 79, 83, 86, 89, 92, 93, 94, 99, 100, 103, 107, 109, 115, 117, 118, 119, 123, 129, 132, 134, 136, 137, 139, 140, 141, 146, 148, 152, 153, 154, 156, 157, 159, 163, 165, 171, 173, 175, 178, 179, 182, 184, 187, 189, 190, 192, 196, 199, 201, 203, 204, 206, 207, 208, 209, 214, 219, 222, 230, 231, 232, 238, 239, 243, 244, 246, 247, 248, 251, 255, 257, 258, 262, 263, 265, 267, 269, 271, 277, 279, 280, 281, 288, 289, 292, 293, 295, 300, 301, 304, 309, 310, 315, 316, 321, 324, 325, 327, 328, 329, 330, 331, 336, 337, 340, 341, 348, 353, 354, 355, 357, 359, 371, 372, 377, 379, 380, 381, 383, 384, 389, 390, 395, 397, 398, 400, 402, 405, 407, 408, 416, 417, 418, 420, 421, 423, 425, 427, 431, 435, 437, 444, 446, 447, 450, 451, 453, 457, 458, 459, 460, 461, 465, 467, 470, 471, 478, 479], "becaus": [5, 23, 28, 32, 33, 34, 41, 44, 46, 53, 57, 59, 62, 70, 71, 72, 74, 75, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 117, 119, 123, 126, 130, 132, 133, 134, 136, 146, 147, 148, 153, 154, 157, 159, 162, 163, 165, 172, 177, 179, 180, 182, 184, 186, 189, 192, 197, 199, 201, 204, 207, 208, 209, 210, 211, 221, 222, 226, 231, 239, 240, 241, 243, 246, 247, 249, 251, 254, 257, 263, 264, 265, 266, 267, 271, 277, 279, 280, 283, 288, 289, 291, 292, 293, 295, 296, 297, 298, 314, 315, 324, 326, 327, 328, 330, 331, 333, 334, 336, 337, 340, 341, 344, 348, 353, 354, 355, 357, 360, 361, 362, 364, 370, 379, 381, 383, 384, 385, 390, 394, 395, 396, 397, 401, 402, 405, 408, 410, 414, 420, 422, 423, 424, 425, 426, 427, 430, 431, 444, 445, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "they": [5, 7, 18, 23, 28, 32, 33, 34, 41, 44, 53, 54, 57, 58, 60, 62, 63, 65, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 130, 132, 135, 136, 137, 138, 141, 147, 148, 150, 151, 152, 154, 157, 159, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 180, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 201, 203, 204, 205, 207, 209, 211, 212, 214, 221, 222, 224, 226, 229, 231, 239, 243, 244, 246, 248, 251, 254, 255, 257, 258, 263, 264, 265, 266, 267, 271, 272, 277, 278, 279, 280, 284, 288, 289, 291, 292, 295, 298, 299, 300, 303, 304, 305, 308, 310, 314, 315, 318, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 348, 353, 354, 357, 359, 360, 361, 362, 364, 370, 371, 372, 375, 376, 379, 381, 382, 383, 384, 385, 389, 390, 395, 397, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 437, 439, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "legaci": [5, 23, 32, 57, 67, 74, 140, 159, 160, 168, 190, 192, 194, 198, 201, 202, 205, 213, 231, 246, 251, 252, 266, 284, 288, 289, 328, 336, 337, 343, 348, 357, 383, 417, 427, 430, 450, 456, 464, 469, 470, 471, 472, 474, 476, 477, 478], "py_unicod": [5, 63, 118, 467, 468, 469, 471, 477, 478], "represent": [5, 7, 9, 18, 23, 25, 26, 38, 40, 48, 57, 58, 62, 63, 67, 74, 75, 84, 89, 99, 102, 106, 117, 118, 119, 143, 151, 154, 156, 163, 172, 173, 174, 178, 179, 182, 187, 192, 193, 197, 200, 201, 203, 208, 209, 221, 238, 240, 241, 244, 246, 249, 255, 258, 262, 263, 267, 268, 277, 279, 286, 289, 292, 295, 303, 310, 317, 326, 333, 336, 340, 341, 342, 343, 348, 357, 361, 367, 372, 376, 379, 381, 383, 384, 403, 405, 408, 421, 423, 427, 440, 457, 461, 462, 463, 464, 466, 469, 470, 472, 473, 474, 476, 477, 478, 479], "nonneg": [5, 146, 182, 266, 271, 333, 340, 379, 425, 431], "tini": [5, 83, 84, 177, 457, 463, 464, 478], "overflow": [5, 23, 34, 38, 41, 67, 138, 172, 179, 182, 184, 208, 210, 271, 279, 286, 348, 423, 451, 461, 463, 464, 474, 475, 478], "short": [5, 7, 40, 41, 57, 62, 67, 72, 74, 83, 89, 93, 94, 98, 100, 103, 104, 111, 117, 118, 140, 155, 172, 173, 189, 224, 241, 254, 255, 267, 279, 288, 289, 296, 327, 340, 343, 344, 348, 357, 361, 362, 364, 379, 381, 383, 406, 408, 416, 429, 437, 450, 456, 457, 459, 460, 462, 464, 470, 471, 472, 474, 475, 477, 478], "repres": [5, 6, 7, 9, 11, 13, 17, 18, 22, 25, 32, 37, 38, 41, 44, 46, 54, 57, 59, 62, 63, 65, 67, 72, 76, 83, 84, 87, 89, 91, 93, 94, 97, 100, 102, 103, 106, 107, 117, 119, 123, 130, 136, 141, 143, 147, 148, 150, 151, 154, 163, 172, 173, 179, 182, 187, 190, 193, 195, 197, 199, 202, 204, 205, 209, 211, 217, 221, 238, 239, 240, 244, 246, 247, 248, 249, 251, 254, 255, 258, 262, 263, 264, 266, 267, 268, 271, 272, 277, 278, 279, 281, 284, 288, 289, 292, 295, 300, 301, 303, 304, 310, 315, 317, 318, 321, 324, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 353, 354, 357, 360, 361, 364, 367, 370, 371, 372, 376, 379, 381, 383, 384, 385, 392, 395, 397, 400, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 420, 421, 422, 423, 425, 427, 430, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "float": [5, 16, 18, 40, 41, 46, 57, 62, 67, 75, 77, 83, 84, 86, 89, 92, 93, 102, 109, 112, 117, 118, 123, 136, 138, 151, 156, 158, 163, 171, 172, 177, 179, 186, 189, 205, 209, 217, 221, 222, 223, 229, 244, 246, 250, 257, 258, 262, 267, 270, 271, 279, 280, 285, 286, 288, 289, 295, 300, 304, 314, 315, 318, 324, 329, 333, 336, 337, 339, 341, 343, 348, 353, 360, 361, 362, 371, 373, 374, 379, 380, 381, 382, 383, 403, 414, 422, 423, 425, 431, 435, 437, 439, 444, 445, 446, 447, 451, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "doubl": [5, 15, 18, 25, 34, 38, 57, 62, 63, 74, 75, 77, 84, 87, 89, 100, 103, 118, 154, 156, 171, 172, 173, 178, 185, 189, 205, 231, 243, 244, 258, 265, 271, 279, 289, 293, 315, 327, 340, 341, 343, 344, 354, 357, 384, 394, 403, 412, 414, 422, 423, 425, 426, 430, 437, 439, 444, 456, 460, 461, 462, 463, 468, 469, 470, 471, 474, 475, 476, 478], "py_complex": [5, 15, 72, 89], "program": [5, 30, 32, 33, 41, 44, 65, 67, 71, 72, 76, 83, 85, 88, 92, 93, 94, 95, 99, 100, 102, 103, 107, 109, 111, 115, 117, 119, 122, 123, 130, 134, 137, 143, 147, 148, 152, 153, 154, 155, 156, 160, 163, 164, 165, 171, 172, 179, 182, 189, 196, 197, 199, 204, 209, 210, 212, 218, 220, 221, 222, 223, 224, 230, 242, 243, 244, 246, 250, 251, 263, 265, 267, 268, 272, 278, 288, 289, 292, 293, 295, 303, 304, 305, 307, 309, 310, 315, 318, 324, 326, 329, 333, 334, 336, 337, 340, 343, 344, 348, 349, 357, 360, 362, 363, 370, 371, 375, 376, 379, 381, 383, 389, 390, 395, 397, 398, 400, 402, 405, 406, 414, 416, 417, 421, 422, 423, 425, 428, 429, 430, 431, 435, 447, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 478], "thus": [5, 7, 10, 32, 34, 37, 41, 53, 72, 83, 84, 89, 93, 98, 99, 100, 102, 114, 117, 119, 137, 163, 165, 172, 173, 189, 197, 200, 201, 204, 209, 221, 224, 231, 239, 246, 247, 255, 258, 262, 263, 264, 265, 271, 279, 288, 289, 295, 309, 315, 323, 327, 328, 330, 333, 336, 337, 340, 344, 348, 353, 357, 361, 379, 381, 383, 389, 390, 394, 400, 402, 416, 420, 422, 425, 427, 430, 431, 450, 456, 457, 465, 470, 471, 472, 473, 474, 476, 478], "receiv": [5, 23, 32, 34, 44, 48, 66, 67, 71, 72, 75, 83, 89, 94, 99, 102, 107, 111, 112, 117, 123, 129, 130, 133, 135, 148, 152, 154, 163, 172, 186, 187, 209, 221, 231, 238, 239, 240, 241, 243, 244, 255, 263, 264, 265, 271, 279, 284, 291, 295, 301, 305, 310, 318, 325, 328, 329, 331, 333, 334, 337, 344, 354, 360, 371, 376, 381, 383, 390, 395, 397, 402, 405, 406, 408, 409, 410, 415, 421, 422, 424, 425, 457, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "actual": [5, 7, 13, 23, 32, 34, 38, 48, 54, 57, 60, 62, 63, 65, 67, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 97, 99, 100, 102, 103, 106, 114, 119, 123, 136, 146, 148, 154, 156, 163, 165, 169, 172, 173, 174, 177, 187, 189, 193, 194, 196, 199, 202, 203, 205, 207, 209, 221, 226, 230, 241, 244, 246, 247, 248, 249, 251, 254, 257, 261, 263, 264, 265, 266, 267, 274, 277, 279, 288, 289, 291, 292, 293, 301, 304, 316, 320, 321, 326, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 353, 360, 363, 364, 367, 376, 379, 381, 383, 384, 385, 390, 394, 396, 397, 400, 402, 405, 409, 417, 421, 422, 423, 424, 427, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 475, 476, 477, 478], "strong": [5, 7, 9, 13, 23, 26, 32, 34, 48, 57, 58, 62, 63, 72, 74, 86, 93, 99, 136, 166, 179, 221, 236, 337, 348, 397, 410, 417, 423, 427, 451, 458, 459, 462, 463, 468, 471, 474, 478], "increas": [5, 67, 75, 88, 89, 93, 97, 99, 106, 117, 154, 186, 187, 207, 217, 243, 251, 255, 263, 266, 286, 289, 324, 336, 337, 340, 348, 362, 371, 377, 379, 383, 395, 407, 409, 423, 430, 451, 457, 459, 460, 463, 464, 471, 474, 475, 476, 477, 478], "typeobject": [5, 92, 459, 469, 478], "similar": [5, 7, 9, 13, 22, 23, 26, 28, 30, 32, 37, 44, 48, 57, 58, 59, 62, 63, 65, 66, 71, 72, 74, 77, 78, 83, 84, 87, 88, 89, 92, 93, 94, 98, 99, 100, 102, 103, 106, 107, 109, 117, 123, 130, 134, 136, 140, 143, 147, 148, 151, 153, 154, 159, 163, 165, 166, 171, 172, 173, 176, 177, 179, 180, 182, 184, 186, 187, 189, 191, 192, 201, 203, 207, 209, 216, 221, 222, 224, 226, 229, 231, 238, 239, 241, 243, 246, 247, 248, 251, 254, 255, 257, 262, 264, 266, 267, 272, 278, 279, 288, 289, 292, 293, 295, 297, 298, 301, 304, 309, 315, 317, 327, 328, 331, 333, 334, 335, 336, 337, 340, 341, 343, 344, 348, 350, 353, 359, 360, 361, 362, 364, 370, 376, 377, 379, 381, 383, 385, 389, 397, 402, 403, 404, 405, 406, 408, 409, 412, 414, 417, 420, 422, 423, 425, 427, 430, 431, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "anyth": [5, 28, 40, 62, 71, 72, 75, 84, 91, 94, 99, 100, 103, 106, 111, 117, 134, 148, 172, 173, 174, 177, 179, 182, 189, 192, 199, 207, 244, 253, 254, 263, 265, 279, 288, 293, 297, 315, 319, 326, 330, 331, 337, 341, 344, 348, 357, 360, 364, 371, 379, 381, 384, 389, 396, 400, 402, 408, 416, 422, 423, 425, 427, 436, 456, 458, 459, 462, 463, 471, 472, 476, 478], "arbitrari": [5, 13, 23, 32, 34, 38, 41, 44, 54, 58, 60, 62, 67, 71, 73, 75, 83, 84, 87, 89, 93, 94, 100, 103, 106, 107, 112, 117, 130, 140, 148, 154, 155, 165, 171, 172, 175, 179, 182, 187, 199, 204, 221, 226, 229, 230, 241, 244, 246, 247, 251, 254, 255, 258, 263, 264, 267, 271, 279, 283, 286, 289, 291, 292, 293, 295, 303, 309, 315, 318, 324, 326, 329, 330, 333, 334, 335, 340, 341, 346, 348, 349, 353, 357, 360, 361, 364, 379, 381, 383, 384, 385, 392, 405, 408, 414, 415, 416, 423, 440, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "turn": [5, 23, 32, 33, 34, 57, 62, 72, 84, 87, 88, 89, 91, 92, 94, 99, 102, 103, 106, 107, 109, 111, 117, 119, 125, 152, 154, 163, 172, 173, 186, 189, 190, 204, 205, 221, 239, 241, 243, 251, 262, 263, 264, 279, 288, 292, 294, 297, 307, 312, 316, 324, 329, 331, 333, 340, 348, 356, 357, 360, 362, 364, 379, 383, 385, 390, 395, 415, 422, 427, 429, 430, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 474, 478], "status": [5, 32, 33, 48, 58, 62, 67, 72, 83, 91, 93, 99, 100, 107, 111, 112, 117, 141, 173, 192, 201, 203, 207, 209, 210, 237, 238, 241, 243, 244, 252, 267, 279, 284, 288, 289, 301, 303, 305, 307, 330, 334, 336, 337, 344, 348, 371, 390, 402, 436, 443, 457, 461, 462, 464, 465, 467, 469, 470, 472, 473, 474, 475, 477, 478], "where": [5, 23, 32, 33, 34, 37, 39, 41, 44, 46, 48, 53, 55, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 76, 77, 78, 83, 84, 86, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 109, 111, 117, 119, 123, 130, 136, 138, 141, 147, 148, 149, 150, 151, 154, 159, 163, 165, 171, 172, 173, 177, 179, 182, 183, 184, 186, 187, 189, 192, 195, 197, 198, 199, 201, 204, 206, 207, 209, 211, 217, 221, 222, 226, 231, 238, 239, 241, 243, 244, 246, 247, 249, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 299, 304, 308, 309, 310, 315, 320, 324, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 348, 353, 354, 356, 357, 360, 361, 362, 364, 366, 371, 373, 375, 376, 377, 379, 380, 381, 383, 385, 388, 389, 390, 394, 395, 397, 402, 405, 406, 407, 408, 410, 411, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 439, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "success": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 84, 87, 89, 91, 94, 96, 99, 103, 107, 111, 112, 119, 123, 129, 130, 136, 155, 159, 160, 163, 165, 172, 173, 187, 189, 205, 211, 219, 238, 241, 244, 246, 257, 262, 265, 274, 279, 284, 288, 289, 291, 292, 295, 296, 301, 310, 314, 315, 328, 331, 333, 336, 337, 340, 343, 344, 348, 360, 370, 371, 383, 390, 402, 405, 418, 422, 423, 427, 431, 448, 451, 457, 460, 461, 464, 470, 472, 473, 474, 476, 478], "has": [5, 7, 9, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 39, 41, 42, 44, 45, 46, 48, 55, 57, 58, 60, 62, 63, 69, 70, 71, 72, 74, 75, 76, 78, 83, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 112, 114, 117, 119, 123, 125, 126, 129, 130, 131, 134, 136, 137, 138, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 163, 165, 166, 171, 172, 173, 174, 177, 179, 180, 182, 184, 186, 187, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 217, 221, 222, 224, 226, 228, 231, 238, 239, 240, 241, 243, 244, 246, 247, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 277, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 300, 301, 303, 304, 307, 308, 309, 310, 314, 315, 316, 318, 320, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 356, 357, 359, 360, 361, 362, 364, 369, 370, 371, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 407, 408, 410, 411, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 438, 439, 441, 444, 446, 448, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "leav": [5, 23, 30, 34, 59, 63, 65, 74, 75, 89, 91, 94, 100, 106, 117, 123, 135, 137, 163, 165, 173, 180, 182, 184, 187, 189, 192, 201, 207, 209, 222, 231, 239, 243, 246, 265, 267, 271, 279, 280, 288, 289, 336, 337, 353, 357, 360, 364, 379, 383, 400, 416, 422, 427, 429, 431, 437, 439, 451, 457, 459, 460, 461, 462, 464, 471, 474, 478], "unmodifi": [5, 7, 89, 112, 204, 205, 303, 340, 360, 389, 412, 478], "py_cleanup_support": 5, "get": [5, 7, 17, 23, 26, 30, 32, 33, 38, 39, 41, 44, 48, 53, 57, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 79, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 114, 117, 119, 123, 125, 126, 130, 131, 133, 134, 136, 138, 141, 147, 148, 154, 156, 157, 160, 163, 165, 166, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 192, 196, 201, 202, 204, 205, 207, 209, 212, 213, 218, 221, 224, 226, 228, 229, 231, 237, 238, 239, 241, 243, 244, 246, 247, 250, 251, 252, 254, 257, 258, 261, 262, 263, 264, 265, 267, 269, 275, 277, 279, 281, 284, 285, 288, 289, 291, 292, 293, 295, 298, 301, 304, 305, 309, 312, 314, 316, 318, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 344, 345, 346, 348, 350, 353, 354, 355, 357, 360, 361, 363, 364, 370, 371, 376, 380, 381, 383, 384, 389, 390, 393, 394, 395, 396, 397, 398, 402, 405, 406, 408, 409, 410, 411, 414, 415, 420, 422, 423, 425, 427, 433, 447, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "eventu": [5, 32, 34, 72, 75, 78, 83, 103, 130, 136, 189, 228, 238, 243, 246, 279, 289, 305, 362, 390, 406, 414, 427, 430, 458, 459, 461, 462, 463, 464, 465, 469, 472, 474, 478], "give": [5, 7, 23, 34, 41, 62, 63, 71, 72, 74, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 98, 102, 103, 106, 114, 117, 119, 138, 148, 150, 151, 152, 154, 172, 173, 177, 179, 182, 186, 187, 189, 204, 209, 212, 221, 224, 226, 246, 254, 257, 264, 265, 271, 272, 274, 275, 279, 283, 288, 289, 292, 293, 295, 303, 310, 315, 328, 329, 334, 337, 340, 341, 344, 348, 360, 361, 362, 364, 371, 379, 381, 383, 385, 389, 394, 398, 400, 402, 404, 405, 406, 410, 417, 421, 422, 423, 429, 430, 439, 450, 456, 457, 459, 460, 462, 463, 464, 465, 466, 470, 471, 476, 477, 478], "chanc": [5, 34, 58, 74, 99, 100, 102, 136, 137, 179, 246, 360, 462, 469, 476, 478], "had": [5, 22, 32, 41, 60, 71, 75, 84, 88, 89, 94, 100, 109, 117, 119, 137, 152, 154, 165, 166, 173, 179, 182, 187, 195, 207, 209, 239, 251, 279, 289, 293, 310, 324, 333, 337, 341, 364, 375, 377, 381, 383, 384, 389, 405, 427, 431, 436, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "origin": [5, 7, 9, 23, 32, 33, 41, 42, 59, 61, 62, 66, 67, 72, 84, 89, 91, 93, 99, 103, 106, 109, 117, 119, 123, 138, 141, 146, 149, 151, 154, 163, 165, 169, 171, 172, 173, 177, 182, 184, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 204, 206, 209, 217, 221, 222, 226, 230, 239, 243, 246, 251, 257, 258, 262, 263, 265, 267, 271, 274, 276, 279, 280, 288, 289, 292, 293, 295, 304, 308, 315, 320, 324, 327, 328, 333, 336, 337, 340, 341, 344, 348, 353, 357, 360, 361, 364, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 397, 402, 403, 408, 410, 411, 412, 416, 417, 418, 420, 421, 422, 423, 425, 427, 429, 431, 435, 436, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 478], "bool": [5, 6, 30, 57, 67, 89, 91, 93, 117, 123, 136, 163, 164, 172, 177, 179, 207, 221, 222, 250, 257, 258, 263, 280, 285, 287, 336, 343, 374, 377, 381, 383, 405, 414, 422, 423, 425, 435, 445, 460, 463, 467, 469, 475, 476, 478], "test": [5, 23, 45, 57, 60, 67, 72, 77, 83, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 111, 117, 119, 122, 151, 152, 157, 166, 172, 173, 174, 177, 182, 183, 185, 187, 196, 209, 216, 221, 222, 224, 232, 236, 241, 243, 244, 245, 246, 247, 250, 251, 255, 257, 258, 262, 265, 268, 271, 279, 289, 292, 301, 305, 311, 315, 331, 332, 336, 338, 340, 346, 348, 353, 359, 360, 362, 370, 371, 377, 381, 384, 390, 397, 402, 408, 414, 417, 420, 421, 422, 423, 429, 435, 437, 438, 441, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477], "truth": [5, 67, 88, 94, 172, 220, 287, 340, 343, 408, 423, 425, 460, 469, 478], "boolean": [5, 16, 67, 84, 89, 99, 105, 117, 119, 135, 163, 164, 172, 173, 179, 187, 189, 221, 231, 239, 241, 244, 250, 258, 264, 270, 279, 287, 289, 291, 300, 315, 316, 333, 334, 336, 337, 346, 360, 364, 371, 374, 379, 381, 384, 390, 394, 397, 405, 406, 414, 422, 423, 428, 458, 461, 462, 463, 464, 465, 469, 470, 472, 473, 474, 476, 477, 478, 479], "redic": 5, "equival": [5, 7, 9, 13, 18, 22, 23, 24, 32, 37, 39, 41, 44, 46, 48, 53, 54, 57, 59, 60, 62, 63, 67, 72, 75, 77, 88, 89, 93, 94, 96, 98, 102, 103, 109, 112, 114, 117, 119, 130, 134, 136, 146, 151, 154, 159, 163, 165, 172, 173, 174, 177, 179, 182, 186, 187, 192, 200, 201, 203, 209, 221, 222, 224, 230, 231, 239, 240, 241, 243, 246, 247, 251, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 279, 288, 289, 292, 295, 296, 297, 298, 304, 314, 315, 317, 320, 325, 333, 334, 340, 341, 344, 348, 350, 353, 357, 360, 361, 364, 379, 380, 381, 382, 383, 389, 396, 398, 400, 405, 417, 422, 423, 425, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 477, 478], "true": [5, 6, 7, 9, 11, 13, 15, 17, 20, 22, 23, 25, 27, 32, 33, 34, 36, 37, 38, 42, 43, 44, 48, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 72, 75, 77, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 109, 111, 112, 113, 117, 119, 122, 123, 126, 127, 129, 130, 131, 132, 133, 135, 136, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 177, 179, 182, 184, 185, 186, 187, 189, 192, 194, 196, 197, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 223, 224, 226, 227, 228, 231, 232, 234, 236, 237, 238, 239, 244, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 271, 272, 274, 278, 279, 280, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 299, 300, 303, 304, 307, 308, 310, 312, 313, 315, 316, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 350, 353, 355, 357, 359, 360, 361, 364, 367, 368, 371, 372, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 391, 392, 394, 395, 397, 398, 400, 402, 405, 406, 407, 408, 410, 412, 414, 415, 416, 417, 418, 420, 422, 423, 425, 426, 430, 431, 435, 436, 437, 438, 439, 441, 443, 444, 445, 447, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "fals": [5, 6, 7, 22, 32, 33, 34, 46, 48, 57, 62, 63, 65, 67, 72, 83, 84, 88, 89, 91, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 111, 112, 113, 117, 119, 123, 126, 129, 130, 131, 132, 133, 135, 136, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 162, 163, 164, 165, 166, 171, 172, 173, 175, 177, 179, 182, 184, 186, 187, 189, 192, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 221, 222, 223, 224, 226, 227, 228, 231, 232, 237, 238, 239, 241, 244, 246, 248, 249, 250, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 272, 279, 280, 284, 287, 288, 289, 290, 291, 292, 293, 295, 299, 300, 303, 307, 308, 310, 312, 313, 316, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 348, 350, 353, 355, 357, 359, 360, 361, 364, 367, 368, 371, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 391, 392, 394, 395, 397, 398, 402, 408, 410, 412, 414, 415, 416, 417, 420, 422, 423, 425, 426, 430, 431, 435, 436, 437, 438, 439, 444, 445, 447, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "express": [5, 22, 39, 46, 48, 53, 59, 65, 67, 72, 84, 86, 92, 100, 111, 117, 136, 141, 151, 155, 157, 159, 163, 179, 182, 186, 187, 189, 209, 216, 221, 226, 243, 250, 251, 255, 257, 260, 262, 264, 271, 279, 289, 293, 304, 319, 329, 333, 336, 337, 340, 341, 343, 348, 354, 357, 358, 361, 362, 364, 373, 375, 380, 381, 382, 383, 385, 395, 397, 408, 414, 421, 422, 423, 424, 426, 427, 428, 430, 434, 437, 441, 442, 444, 446, 450, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "valid": [5, 7, 11, 18, 23, 28, 33, 41, 60, 62, 63, 65, 67, 71, 72, 84, 87, 89, 91, 97, 103, 106, 109, 117, 119, 136, 140, 143, 148, 153, 154, 155, 159, 163, 165, 168, 169, 171, 172, 173, 177, 179, 180, 182, 183, 185, 187, 190, 191, 193, 199, 203, 205, 207, 221, 234, 238, 240, 241, 243, 246, 251, 252, 254, 255, 257, 258, 261, 263, 264, 266, 274, 277, 279, 283, 284, 289, 297, 298, 300, 304, 307, 310, 315, 318, 319, 320, 327, 329, 331, 333, 336, 337, 340, 341, 343, 344, 348, 353, 357, 360, 361, 371, 373, 379, 381, 382, 383, 384, 389, 390, 396, 400, 406, 408, 410, 411, 415, 417, 418, 420, 422, 423, 426, 427, 430, 431, 438, 446, 450, 451, 457, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "see": [5, 7, 11, 18, 23, 26, 30, 32, 33, 39, 41, 44, 46, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 111, 117, 119, 120, 123, 129, 130, 134, 136, 138, 140, 141, 142, 147, 148, 152, 154, 157, 159, 162, 163, 164, 165, 168, 169, 171, 172, 173, 177, 179, 182, 184, 186, 187, 189, 191, 192, 193, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 214, 216, 217, 221, 222, 225, 226, 229, 230, 231, 238, 239, 241, 243, 244, 246, 247, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 268, 271, 274, 275, 277, 279, 280, 283, 284, 288, 289, 291, 293, 295, 296, 297, 298, 300, 301, 304, 307, 309, 310, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 370, 371, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "how": [5, 7, 11, 32, 34, 41, 57, 60, 62, 63, 67, 70, 71, 72, 74, 75, 76, 85, 87, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 111, 114, 117, 119, 123, 129, 130, 134, 136, 137, 138, 141, 146, 148, 151, 152, 154, 159, 163, 168, 171, 172, 177, 179, 180, 182, 183, 185, 186, 190, 191, 196, 197, 198, 203, 207, 209, 214, 218, 221, 222, 226, 230, 231, 238, 239, 240, 243, 246, 247, 249, 251, 254, 255, 257, 258, 263, 264, 265, 268, 271, 274, 279, 280, 284, 289, 292, 294, 295, 304, 307, 314, 315, 316, 317, 318, 327, 328, 329, 333, 334, 337, 340, 341, 342, 344, 346, 348, 353, 355, 359, 360, 361, 362, 363, 371, 375, 377, 381, 383, 384, 385, 389, 390, 394, 397, 402, 403, 405, 414, 416, 420, 422, 423, 424, 425, 427, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "item": [5, 7, 14, 22, 23, 30, 32, 33, 34, 35, 36, 37, 39, 48, 53, 59, 62, 63, 67, 72, 75, 78, 83, 86, 89, 93, 94, 100, 102, 109, 117, 119, 131, 138, 144, 147, 148, 153, 154, 156, 157, 160, 163, 166, 167, 172, 177, 178, 180, 185, 186, 187, 189, 190, 192, 193, 196, 201, 205, 207, 209, 213, 221, 222, 229, 230, 231, 232, 240, 243, 244, 246, 248, 249, 257, 258, 264, 265, 267, 269, 271, 272, 275, 279, 281, 284, 287, 289, 295, 298, 303, 304, 309, 312, 315, 316, 320, 328, 330, 333, 335, 336, 337, 340, 341, 343, 344, 348, 349, 354, 356, 357, 360, 363, 364, 370, 373, 376, 379, 380, 381, 384, 389, 397, 400, 402, 403, 404, 405, 407, 408, 411, 414, 417, 418, 422, 423, 425, 426, 427, 429, 430, 431, 435, 436, 437, 441, 444, 445, 447, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 478], "individu": [5, 13, 41, 44, 57, 60, 62, 67, 91, 93, 97, 98, 99, 100, 103, 109, 114, 117, 154, 171, 173, 180, 182, 186, 187, 189, 192, 194, 199, 202, 215, 226, 244, 245, 257, 263, 267, 277, 278, 279, 289, 309, 315, 328, 332, 340, 341, 351, 353, 354, 357, 359, 361, 362, 364, 371, 379, 381, 383, 384, 385, 389, 395, 403, 408, 414, 415, 417, 421, 423, 427, 429, 431, 435, 450, 458, 461, 462, 464, 466, 471, 472, 477, 478], "nest": [5, 13, 67, 72, 84, 86, 93, 94, 99, 103, 110, 136, 156, 165, 172, 177, 182, 183, 186, 187, 189, 195, 209, 222, 251, 257, 258, 263, 267, 279, 293, 298, 303, 308, 310, 315, 340, 341, 347, 348, 360, 364, 371, 376, 381, 383, 404, 408, 410, 422, 423, 424, 425, 430, 431, 436, 437, 450, 457, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 478, 479], "possibl": [5, 7, 13, 18, 22, 23, 27, 30, 32, 33, 34, 38, 41, 46, 48, 57, 60, 62, 63, 65, 67, 70, 71, 72, 75, 78, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 109, 111, 112, 114, 117, 119, 123, 129, 136, 137, 138, 146, 148, 154, 155, 159, 163, 165, 166, 169, 171, 172, 173, 176, 177, 179, 180, 182, 186, 187, 189, 190, 192, 193, 196, 197, 198, 199, 201, 202, 204, 206, 207, 209, 214, 218, 221, 222, 228, 231, 238, 241, 243, 246, 251, 254, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 278, 279, 284, 288, 289, 291, 293, 295, 298, 300, 304, 305, 307, 308, 310, 315, 316, 324, 327, 328, 329, 333, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 351, 353, 354, 357, 359, 360, 361, 362, 364, 370, 371, 377, 380, 381, 383, 384, 385, 389, 390, 395, 397, 398, 400, 401, 402, 408, 410, 411, 414, 416, 417, 418, 421, 422, 423, 425, 426, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "exceed": [5, 58, 123, 136, 163, 182, 208, 209, 221, 254, 265, 280, 289, 295, 303, 318, 340, 359, 360, 376, 405, 417, 460, 461, 463, 464, 474, 475, 478], "platform": [5, 9, 18, 25, 32, 33, 50, 58, 60, 63, 67, 71, 72, 74, 75, 83, 84, 89, 100, 112, 115, 120, 123, 130, 147, 148, 154, 159, 169, 171, 172, 179, 182, 185, 189, 204, 206, 208, 209, 211, 215, 221, 225, 229, 231, 238, 241, 243, 244, 246, 247, 250, 253, 254, 262, 265, 267, 271, 274, 278, 279, 280, 283, 284, 288, 289, 292, 301, 303, 304, 305, 311, 318, 319, 322, 324, 325, 329, 331, 333, 334, 335, 336, 337, 338, 343, 344, 348, 349, 350, 351, 353, 354, 357, 360, 361, 362, 363, 364, 373, 383, 390, 394, 398, 401, 402, 414, 415, 420, 425, 430, 445, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "long_max": [5, 38, 478], "howev": [5, 23, 24, 32, 33, 34, 41, 44, 48, 56, 62, 70, 71, 72, 75, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 106, 107, 109, 111, 117, 123, 125, 130, 132, 136, 148, 154, 157, 163, 165, 166, 172, 173, 177, 179, 182, 186, 189, 190, 192, 195, 197, 199, 201, 202, 204, 205, 209, 221, 222, 226, 231, 239, 241, 243, 244, 246, 248, 251, 254, 255, 257, 263, 264, 265, 267, 268, 277, 279, 284, 288, 289, 295, 296, 307, 315, 324, 327, 328, 329, 330, 333, 336, 337, 340, 341, 344, 348, 349, 353, 357, 359, 360, 362, 364, 371, 373, 376, 380, 381, 382, 383, 384, 385, 392, 397, 398, 400, 402, 405, 406, 410, 411, 414, 417, 421, 423, 424, 425, 427, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478], "proper": [5, 23, 32, 33, 44, 48, 58, 62, 67, 71, 72, 74, 75, 84, 89, 98, 100, 103, 111, 123, 134, 151, 165, 166, 173, 186, 187, 198, 199, 203, 205, 207, 209, 226, 231, 241, 243, 246, 262, 279, 280, 289, 304, 310, 328, 331, 333, 337, 340, 343, 344, 348, 353, 357, 360, 364, 371, 383, 384, 389, 390, 405, 408, 410, 422, 423, 425, 456, 457, 458, 459, 460, 464, 465, 469, 471, 472, 473, 474, 475, 476, 478], "rang": [5, 7, 23, 25, 38, 58, 63, 67, 71, 72, 75, 83, 84, 86, 89, 91, 92, 93, 94, 97, 100, 101, 103, 106, 107, 109, 117, 123, 131, 135, 136, 138, 141, 146, 147, 151, 154, 162, 163, 165, 172, 173, 174, 179, 182, 186, 187, 189, 207, 208, 209, 221, 222, 231, 232, 237, 240, 244, 250, 251, 255, 257, 258, 274, 279, 280, 284, 289, 291, 293, 295, 300, 301, 304, 311, 312, 314, 315, 318, 322, 329, 331, 333, 336, 337, 339, 341, 343, 348, 360, 361, 362, 364, 370, 373, 376, 377, 379, 381, 383, 389, 401, 405, 414, 420, 422, 423, 424, 425, 427, 429, 430, 431, 435, 437, 438, 440, 441, 444, 445, 446, 447, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "most": [5, 7, 9, 23, 25, 30, 32, 33, 38, 41, 44, 57, 58, 60, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 122, 123, 130, 133, 136, 138, 140, 141, 143, 146, 148, 150, 154, 156, 163, 165, 172, 173, 179, 180, 182, 184, 186, 187, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 203, 206, 207, 209, 210, 211, 217, 221, 222, 226, 229, 230, 239, 243, 244, 246, 247, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 268, 271, 274, 279, 280, 288, 289, 291, 292, 293, 295, 298, 301, 303, 304, 310, 315, 317, 324, 325, 326, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 351, 353, 357, 359, 360, 361, 362, 364, 369, 370, 376, 377, 379, 381, 382, 383, 384, 385, 389, 390, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 416, 417, 420, 422, 423, 424, 425, 427, 429, 431, 435, 436, 437, 438, 439, 441, 444, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "signific": [5, 40, 84, 94, 97, 100, 103, 106, 123, 129, 130, 154, 165, 174, 182, 189, 193, 254, 255, 257, 265, 271, 280, 289, 295, 304, 337, 340, 341, 348, 360, 383, 406, 423, 427, 429, 430, 439, 450, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "bit": [5, 7, 25, 34, 40, 41, 57, 60, 62, 63, 65, 67, 72, 74, 75, 84, 85, 88, 89, 91, 92, 93, 94, 97, 100, 103, 106, 114, 115, 130, 138, 143, 149, 150, 151, 154, 163, 165, 173, 174, 182, 187, 189, 191, 196, 197, 198, 201, 204, 207, 211, 212, 221, 223, 226, 231, 239, 240, 255, 262, 266, 271, 280, 283, 285, 288, 289, 291, 295, 299, 302, 311, 315, 318, 324, 328, 332, 333, 337, 338, 340, 343, 344, 345, 348, 351, 353, 355, 361, 362, 364, 371, 385, 392, 393, 399, 405, 416, 417, 419, 422, 423, 425, 430, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "silent": [5, 22, 48, 55, 58, 65, 99, 100, 106, 112, 130, 137, 165, 182, 209, 214, 244, 263, 265, 267, 274, 279, 280, 289, 291, 293, 303, 304, 328, 330, 336, 341, 344, 360, 384, 389, 420, 431, 450, 456, 457, 461, 462, 464, 465, 469, 470, 472, 473, 475, 476, 477, 478], "truncat": [5, 18, 58, 63, 67, 83, 84, 115, 138, 139, 146, 173, 179, 182, 209, 221, 230, 244, 254, 257, 266, 289, 316, 333, 336, 340, 343, 355, 357, 359, 376, 377, 392, 417, 423, 425, 441, 457, 459, 463, 464, 465, 470, 471, 472, 473, 475, 478], "too": [5, 18, 34, 62, 65, 74, 83, 89, 91, 93, 94, 99, 100, 103, 106, 107, 130, 134, 136, 148, 151, 154, 163, 165, 172, 180, 182, 184, 187, 189, 190, 200, 208, 209, 226, 239, 253, 254, 255, 279, 288, 301, 303, 328, 329, 333, 334, 336, 337, 340, 341, 343, 344, 348, 354, 357, 360, 364, 379, 381, 383, 384, 385, 404, 408, 417, 418, 423, 427, 429, 446, 450, 457, 458, 459, 460, 461, 463, 464, 465, 469, 471, 473, 475, 476, 478], "small": [5, 32, 38, 41, 54, 57, 62, 67, 72, 83, 84, 89, 91, 93, 97, 100, 101, 103, 106, 119, 154, 165, 172, 182, 186, 189, 239, 243, 254, 257, 267, 271, 279, 284, 289, 304, 315, 326, 329, 333, 339, 340, 357, 360, 362, 370, 377, 383, 402, 404, 408, 423, 431, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 474, 476, 477, 478], "semant": [5, 7, 11, 13, 27, 56, 62, 63, 89, 93, 99, 100, 102, 130, 136, 157, 182, 189, 192, 198, 201, 203, 204, 221, 244, 246, 248, 263, 264, 265, 267, 279, 288, 289, 291, 292, 295, 307, 312, 315, 326, 327, 328, 333, 338, 348, 360, 361, 381, 389, 400, 418, 420, 422, 423, 424, 425, 427, 431, 450, 451, 457, 459, 460, 462, 463, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "inherit": [5, 28, 33, 60, 62, 67, 74, 75, 84, 87, 89, 92, 93, 98, 113, 115, 117, 119, 123, 125, 136, 152, 154, 157, 165, 172, 173, 179, 195, 207, 209, 217, 218, 221, 230, 231, 243, 246, 251, 254, 255, 265, 267, 279, 280, 288, 292, 295, 311, 324, 333, 334, 337, 338, 344, 347, 357, 360, 364, 365, 371, 373, 381, 405, 409, 410, 411, 422, 423, 425, 440, 456, 457, 460, 462, 463, 465, 469, 471, 473, 475, 476, 477, 478], "downcast": [5, 451], "mileag": [5, 331], "vari": [5, 7, 57, 74, 83, 84, 94, 102, 103, 106, 138, 148, 154, 179, 187, 189, 221, 243, 247, 251, 254, 262, 267, 275, 301, 331, 334, 336, 337, 338, 340, 348, 357, 360, 361, 364, 380, 384, 385, 395, 422, 423, 429, 457, 458, 459, 461, 463, 464, 470, 471, 472], "mean": [5, 7, 13, 18, 22, 23, 27, 30, 32, 33, 34, 41, 44, 58, 60, 62, 63, 65, 66, 67, 72, 74, 75, 83, 88, 89, 92, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 112, 114, 117, 119, 123, 130, 136, 138, 141, 148, 152, 154, 159, 163, 165, 166, 171, 172, 173, 174, 177, 179, 180, 182, 186, 187, 189, 192, 198, 199, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 216, 221, 222, 224, 229, 230, 231, 238, 239, 240, 243, 246, 247, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 272, 274, 277, 279, 284, 286, 288, 289, 292, 293, 295, 297, 303, 304, 307, 310, 314, 315, 317, 318, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 348, 356, 357, 360, 361, 362, 364, 371, 376, 379, 380, 381, 383, 384, 385, 389, 390, 392, 394, 395, 396, 397, 400, 402, 405, 408, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 444, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "occur": [5, 7, 13, 17, 18, 22, 23, 30, 38, 39, 41, 44, 48, 58, 62, 63, 65, 72, 74, 78, 84, 89, 92, 94, 97, 99, 100, 102, 106, 117, 119, 123, 134, 136, 141, 147, 148, 149, 151, 153, 154, 163, 165, 166, 171, 173, 177, 179, 182, 186, 187, 189, 199, 208, 209, 214, 224, 226, 243, 246, 251, 254, 257, 263, 265, 266, 267, 271, 284, 288, 289, 293, 295, 298, 307, 310, 315, 324, 328, 329, 331, 333, 337, 340, 341, 344, 348, 353, 357, 359, 360, 361, 364, 366, 371, 376, 379, 380, 381, 383, 390, 395, 397, 398, 402, 404, 405, 407, 408, 410, 414, 417, 422, 423, 424, 425, 427, 430, 431, 438, 447, 460, 462, 463, 464, 465, 467, 470, 471, 472, 475, 476, 477, 478], "indic": [5, 7, 30, 31, 32, 37, 40, 41, 48, 53, 55, 57, 58, 60, 62, 63, 67, 72, 74, 75, 83, 84, 89, 96, 97, 99, 100, 103, 106, 107, 111, 114, 117, 119, 123, 134, 136, 148, 152, 153, 154, 163, 165, 169, 171, 172, 173, 179, 182, 185, 187, 192, 198, 199, 201, 204, 205, 206, 209, 219, 221, 222, 224, 230, 231, 237, 238, 239, 241, 243, 244, 246, 247, 251, 254, 257, 262, 263, 264, 266, 267, 272, 274, 279, 284, 288, 289, 291, 293, 296, 299, 301, 303, 304, 307, 310, 314, 315, 324, 325, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 353, 356, 357, 360, 361, 364, 371, 372, 376, 381, 383, 384, 389, 390, 394, 395, 400, 401, 402, 403, 405, 408, 414, 417, 421, 422, 423, 425, 426, 427, 430, 431, 444, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478], "remain": [5, 13, 32, 41, 62, 72, 75, 84, 93, 94, 100, 103, 117, 119, 123, 136, 150, 157, 165, 171, 172, 173, 179, 182, 186, 187, 189, 190, 194, 198, 199, 201, 204, 205, 207, 209, 214, 221, 222, 243, 244, 246, 264, 267, 271, 279, 288, 289, 291, 292, 293, 295, 308, 318, 320, 329, 333, 336, 340, 341, 344, 348, 357, 359, 360, 371, 379, 380, 381, 383, 389, 395, 397, 402, 421, 422, 423, 427, 430, 431, 437, 450, 451, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "option": [5, 23, 32, 33, 41, 46, 48, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 77, 87, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 106, 107, 109, 112, 115, 116, 119, 123, 125, 132, 134, 136, 137, 138, 140, 143, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 163, 165, 166, 169, 171, 172, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 213, 214, 217, 221, 222, 226, 231, 234, 237, 238, 241, 244, 246, 247, 248, 250, 251, 254, 255, 257, 260, 262, 263, 264, 265, 266, 267, 268, 272, 274, 277, 279, 280, 281, 284, 289, 291, 292, 293, 295, 301, 303, 304, 305, 307, 308, 309, 310, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 354, 357, 359, 360, 361, 362, 363, 365, 367, 368, 370, 373, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 398, 402, 406, 408, 409, 410, 412, 414, 415, 416, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 444, 448, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478], "their": [5, 7, 18, 28, 32, 33, 34, 41, 44, 54, 60, 62, 63, 67, 71, 72, 74, 75, 76, 83, 84, 87, 89, 91, 92, 94, 97, 98, 99, 100, 103, 106, 107, 109, 112, 117, 119, 123, 129, 134, 136, 148, 154, 159, 162, 163, 165, 166, 171, 172, 173, 177, 179, 180, 182, 183, 187, 189, 190, 191, 192, 199, 201, 203, 204, 207, 209, 210, 211, 212, 214, 221, 222, 226, 231, 239, 240, 246, 247, 251, 254, 255, 257, 258, 262, 263, 264, 265, 271, 275, 278, 279, 280, 284, 288, 289, 292, 293, 295, 303, 304, 308, 309, 310, 320, 321, 322, 325, 328, 329, 331, 333, 336, 337, 338, 340, 341, 343, 344, 348, 350, 353, 356, 357, 358, 360, 361, 364, 367, 370, 371, 376, 377, 379, 381, 382, 383, 384, 389, 390, 394, 395, 397, 402, 405, 406, 407, 408, 410, 412, 414, 416, 417, 420, 421, 422, 423, 424, 425, 427, 430, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "default": [5, 7, 17, 23, 24, 27, 31, 32, 33, 34, 44, 48, 57, 60, 62, 63, 65, 67, 70, 75, 76, 83, 88, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 112, 114, 115, 116, 119, 122, 123, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 165, 166, 169, 171, 172, 173, 174, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 224, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 251, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 279, 280, 281, 282, 283, 284, 287, 289, 291, 292, 293, 294, 295, 296, 300, 301, 303, 304, 305, 307, 309, 310, 311, 314, 315, 316, 317, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 340, 341, 343, 344, 346, 348, 350, 351, 354, 355, 357, 359, 360, 361, 362, 364, 368, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 420, 422, 423, 424, 425, 426, 427, 430, 431, 443, 446, 448, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478], "touch": [5, 67, 84, 173, 215, 243, 292, 293, 424, 463, 476, 478], "keyword": [5, 57, 62, 63, 65, 67, 73, 74, 75, 83, 86, 88, 89, 94, 98, 99, 100, 112, 117, 119, 123, 132, 136, 137, 146, 148, 154, 156, 163, 166, 171, 172, 173, 179, 182, 185, 186, 187, 189, 192, 201, 202, 203, 204, 209, 214, 220, 221, 222, 226, 231, 239, 241, 243, 247, 250, 251, 257, 258, 260, 262, 263, 264, 267, 274, 279, 284, 288, 289, 292, 293, 295, 300, 303, 309, 311, 314, 315, 317, 319, 321, 323, 327, 328, 331, 333, 340, 341, 344, 348, 351, 353, 357, 359, 360, 364, 367, 371, 379, 380, 381, 383, 384, 385, 390, 394, 395, 398, 402, 406, 408, 415, 417, 422, 423, 424, 425, 426, 428, 431, 437, 438, 440, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 475, 476, 477, 478], "current": [5, 7, 11, 13, 17, 18, 23, 26, 27, 28, 30, 32, 33, 38, 40, 41, 42, 44, 48, 52, 58, 60, 62, 63, 65, 67, 72, 74, 75, 78, 83, 87, 88, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 112, 114, 117, 119, 125, 126, 129, 130, 132, 133, 134, 135, 136, 141, 147, 148, 149, 150, 152, 154, 156, 159, 163, 165, 166, 169, 171, 172, 173, 175, 179, 181, 182, 185, 187, 189, 192, 193, 196, 198, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 214, 216, 218, 221, 226, 230, 231, 238, 240, 241, 243, 244, 246, 254, 255, 257, 262, 263, 265, 267, 271, 272, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 303, 304, 305, 307, 309, 310, 311, 315, 316, 318, 319, 320, 321, 323, 325, 327, 328, 329, 333, 336, 337, 340, 341, 344, 348, 349, 350, 351, 353, 357, 359, 360, 361, 362, 363, 364, 367, 370, 371, 375, 376, 379, 381, 383, 389, 390, 393, 394, 395, 396, 397, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 414, 417, 422, 423, 424, 425, 426, 427, 430, 431, 446, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "alway": [5, 7, 9, 11, 13, 17, 18, 23, 25, 30, 32, 33, 34, 36, 38, 39, 41, 42, 44, 46, 48, 53, 54, 55, 57, 58, 59, 60, 62, 63, 66, 72, 74, 75, 78, 84, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 107, 109, 112, 117, 119, 123, 130, 136, 138, 140, 141, 143, 146, 148, 151, 153, 154, 159, 163, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 191, 192, 199, 201, 202, 203, 204, 206, 207, 209, 210, 212, 217, 222, 226, 230, 231, 238, 240, 241, 243, 244, 246, 247, 251, 253, 254, 255, 258, 262, 263, 265, 266, 267, 268, 271, 279, 280, 288, 289, 291, 292, 295, 303, 305, 315, 320, 326, 327, 329, 330, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 353, 355, 357, 359, 360, 361, 362, 364, 371, 372, 376, 379, 381, 383, 384, 389, 390, 394, 395, 397, 400, 402, 404, 405, 408, 410, 412, 417, 420, 422, 423, 424, 425, 427, 430, 431, 444, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "end": [5, 7, 9, 13, 23, 24, 28, 30, 32, 33, 34, 36, 37, 38, 41, 55, 57, 59, 62, 63, 65, 67, 71, 72, 74, 77, 78, 79, 83, 88, 89, 93, 94, 96, 98, 99, 100, 103, 106, 113, 114, 117, 119, 123, 130, 132, 135, 136, 140, 143, 146, 147, 148, 150, 152, 154, 155, 156, 159, 163, 165, 171, 172, 173, 174, 178, 179, 182, 186, 187, 189, 190, 192, 201, 203, 204, 205, 206, 209, 211, 221, 222, 230, 231, 236, 238, 239, 241, 243, 244, 246, 251, 254, 257, 258, 263, 264, 265, 266, 267, 269, 274, 275, 278, 279, 280, 284, 288, 289, 291, 292, 293, 297, 298, 301, 304, 305, 307, 310, 315, 316, 324, 326, 327, 328, 331, 333, 336, 337, 340, 341, 343, 344, 348, 350, 353, 354, 357, 358, 359, 361, 366, 371, 372, 373, 375, 376, 379, 383, 384, 385, 390, 395, 402, 403, 405, 406, 408, 410, 411, 412, 416, 417, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 435, 436, 437, 438, 441, 443, 444, 445, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "here": [5, 7, 23, 28, 32, 33, 34, 41, 44, 50, 62, 71, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 103, 107, 109, 111, 117, 119, 126, 134, 138, 141, 148, 150, 152, 154, 163, 165, 166, 171, 172, 173, 177, 179, 182, 186, 187, 189, 192, 194, 195, 196, 198, 201, 202, 203, 204, 205, 212, 217, 218, 221, 222, 226, 230, 231, 238, 241, 243, 244, 247, 251, 263, 264, 265, 266, 271, 279, 284, 288, 289, 293, 295, 301, 303, 310, 311, 315, 318, 325, 327, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 348, 353, 356, 357, 360, 361, 362, 364, 371, 379, 380, 381, 383, 384, 385, 390, 395, 398, 402, 403, 405, 406, 408, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 444, 446, 450, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 473, 474, 475, 476, 477, 478], "colon": [5, 67, 89, 103, 179, 189, 192, 195, 201, 204, 224, 226, 238, 251, 255, 260, 263, 267, 293, 298, 315, 331, 341, 372, 373, 390, 395, 402, 405, 422, 425, 426, 430, 450, 451, 456, 463, 464, 474, 478], "error": [5, 7, 9, 13, 14, 17, 18, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 73, 74, 75, 78, 83, 86, 88, 89, 93, 94, 97, 98, 99, 100, 102, 103, 106, 111, 112, 115, 116, 117, 119, 129, 130, 134, 137, 138, 139, 140, 141, 142, 143, 146, 148, 151, 152, 153, 155, 159, 160, 163, 165, 167, 171, 172, 173, 177, 178, 179, 180, 183, 186, 189, 190, 192, 193, 197, 198, 199, 201, 203, 204, 205, 208, 209, 210, 212, 213, 214, 215, 221, 222, 224, 225, 230, 240, 241, 242, 243, 244, 246, 248, 250, 252, 253, 254, 255, 258, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 279, 280, 281, 283, 284, 286, 289, 291, 292, 294, 295, 298, 301, 304, 307, 315, 318, 324, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 345, 346, 348, 351, 354, 355, 357, 358, 360, 364, 371, 376, 379, 381, 383, 384, 385, 386, 387, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 414, 415, 416, 417, 419, 422, 423, 424, 425, 426, 430, 431, 437, 440, 447, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "messag": [5, 23, 32, 33, 53, 58, 65, 67, 71, 72, 74, 75, 78, 83, 84, 88, 91, 94, 97, 103, 106, 107, 111, 117, 119, 123, 130, 133, 139, 140, 141, 143, 148, 152, 153, 154, 159, 170, 172, 173, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 208, 209, 224, 230, 238, 239, 241, 242, 243, 244, 246, 250, 251, 255, 258, 263, 264, 265, 268, 269, 275, 279, 280, 281, 284, 288, 289, 293, 301, 307, 310, 315, 318, 327, 329, 331, 333, 334, 336, 337, 338, 348, 351, 352, 353, 354, 357, 362, 363, 370, 373, 376, 381, 383, 384, 385, 390, 394, 395, 402, 408, 409, 410, 414, 416, 422, 424, 426, 431, 444, 447, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 477, 478, 479], "associ": [5, 23, 32, 57, 60, 62, 65, 72, 74, 75, 83, 86, 89, 91, 93, 97, 98, 99, 100, 101, 103, 107, 112, 117, 123, 132, 136, 141, 148, 154, 171, 173, 175, 182, 187, 189, 190, 192, 197, 199, 209, 226, 238, 241, 243, 244, 246, 248, 251, 263, 272, 279, 288, 289, 291, 293, 295, 310, 324, 325, 333, 340, 342, 344, 353, 357, 360, 362, 364, 370, 371, 381, 383, 397, 398, 400, 401, 402, 405, 408, 410, 411, 414, 415, 417, 418, 421, 422, 423, 424, 426, 427, 431, 437, 449, 456, 464, 470, 471, 472, 475, 476, 477, 478], "semicolon": [5, 32, 75, 103, 293, 336, 422, 431, 450, 456], "mutual": [5, 62, 67, 102, 115, 258, 264, 267, 288, 315, 364, 375, 381, 398, 424, 478], "exclud": [5, 18, 33, 58, 63, 98, 100, 103, 159, 177, 179, 187, 189, 231, 243, 257, 267, 271, 275, 277, 289, 292, 304, 310, 337, 340, 348, 353, 360, 361, 362, 371, 377, 384, 408, 416, 417, 421, 422, 423, 425, 431, 437, 444, 450, 463, 464, 470, 471, 472, 473, 475, 476, 477, 478], "note": [5, 7, 18, 23, 25, 28, 30, 32, 33, 39, 41, 44, 45, 50, 53, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 129, 134, 136, 137, 138, 140, 147, 148, 151, 153, 154, 157, 159, 163, 165, 168, 171, 172, 173, 174, 177, 178, 179, 180, 186, 187, 189, 190, 192, 194, 195, 196, 197, 200, 201, 204, 205, 209, 210, 211, 212, 216, 217, 221, 222, 224, 226, 229, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 263, 264, 265, 266, 267, 271, 274, 279, 280, 281, 283, 284, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 301, 303, 304, 305, 315, 317, 318, 320, 324, 327, 328, 330, 331, 336, 340, 341, 343, 344, 347, 348, 349, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 373, 376, 379, 380, 381, 383, 384, 385, 389, 390, 395, 396, 397, 398, 400, 402, 404, 405, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 422, 425, 426, 427, 429, 430, 431, 437, 438, 441, 444, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 473, 474, 475, 476, 477, 478], "do": [5, 7, 18, 22, 23, 28, 32, 33, 34, 35, 41, 42, 55, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 76, 77, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 112, 117, 119, 123, 129, 134, 135, 136, 137, 138, 147, 148, 154, 155, 157, 159, 163, 165, 172, 173, 174, 175, 177, 182, 185, 186, 187, 189, 190, 191, 192, 193, 197, 198, 201, 203, 204, 207, 209, 210, 221, 222, 224, 226, 239, 240, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 262, 263, 264, 265, 267, 271, 279, 280, 288, 289, 291, 292, 293, 295, 301, 304, 310, 315, 316, 318, 326, 327, 328, 329, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 348, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 363, 369, 370, 371, 373, 375, 377, 379, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 401, 402, 405, 406, 408, 409, 410, 412, 414, 416, 417, 420, 421, 422, 423, 424, 425, 427, 430, 431, 436, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "decrement": [5, 7, 9, 34, 62, 72, 75, 84, 136, 187, 279, 289, 293, 329, 360, 371, 423, 478], "abov": [5, 7, 23, 32, 33, 41, 57, 62, 63, 67, 71, 72, 74, 75, 84, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 112, 114, 115, 117, 119, 123, 134, 136, 146, 147, 148, 151, 154, 159, 163, 165, 171, 172, 173, 174, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 193, 196, 199, 201, 204, 209, 211, 221, 226, 230, 231, 238, 239, 243, 247, 254, 255, 262, 263, 264, 265, 266, 271, 274, 279, 284, 288, 289, 293, 295, 303, 304, 309, 315, 320, 328, 329, 330, 331, 333, 336, 337, 338, 340, 341, 343, 344, 348, 349, 357, 361, 364, 370, 371, 375, 379, 381, 383, 384, 385, 389, 390, 392, 397, 400, 402, 403, 405, 408, 415, 416, 421, 422, 423, 426, 427, 429, 430, 431, 438, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 475, 476, 477, 478], "what": [5, 9, 23, 25, 26, 30, 32, 33, 38, 39, 41, 48, 50, 53, 57, 62, 63, 67, 71, 74, 75, 88, 89, 92, 93, 94, 96, 100, 102, 103, 106, 107, 109, 117, 119, 123, 130, 136, 148, 151, 154, 159, 163, 166, 171, 172, 173, 179, 181, 182, 183, 195, 196, 197, 199, 203, 204, 209, 211, 221, 226, 231, 239, 240, 243, 244, 245, 246, 247, 257, 262, 263, 264, 265, 266, 268, 275, 289, 291, 292, 294, 303, 307, 310, 311, 315, 316, 324, 328, 332, 333, 334, 336, 337, 340, 341, 342, 343, 344, 346, 348, 353, 356, 357, 363, 370, 371, 375, 379, 381, 383, 384, 385, 389, 395, 405, 406, 408, 416, 422, 424, 425, 427, 429, 430, 431, 437, 456, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "succeed": [5, 7, 9, 11, 13, 17, 18, 25, 36, 38, 39, 42, 44, 46, 48, 53, 54, 55, 59, 60, 62, 63, 66, 84, 103, 119, 172, 189, 205, 228, 245, 284, 289, 292, 328, 332, 333, 337, 357, 383, 384, 385, 389, 390, 400, 405, 422, 424, 426, 450, 459, 460, 461, 478], "arg": [5, 10, 20, 23, 28, 32, 33, 34, 35, 57, 58, 60, 61, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 84, 86, 88, 89, 92, 93, 98, 99, 100, 109, 112, 113, 117, 119, 122, 123, 129, 134, 136, 137, 139, 141, 152, 156, 160, 162, 165, 166, 171, 172, 173, 179, 183, 186, 187, 193, 196, 199, 201, 208, 209, 211, 220, 221, 222, 224, 228, 243, 244, 249, 251, 257, 260, 263, 264, 265, 267, 279, 280, 287, 288, 289, 293, 295, 296, 303, 304, 311, 312, 314, 331, 340, 341, 344, 348, 350, 354, 357, 360, 371, 375, 379, 381, 383, 384, 385, 390, 394, 397, 422, 423, 426, 431, 436, 438, 443, 446, 450, 451, 457, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 476, 477, 478], "exhaust": [5, 62, 94, 119, 154, 156, 187, 221, 238, 257, 289, 323, 338, 340, 357, 364, 381, 384, 417, 422, 423, 425, 459, 461, 462, 463, 465, 473, 474, 478], "appropri": [5, 9, 18, 23, 30, 40, 41, 48, 53, 60, 62, 63, 67, 70, 72, 74, 75, 87, 89, 91, 93, 94, 99, 100, 102, 103, 107, 109, 117, 123, 134, 136, 148, 153, 154, 173, 179, 180, 182, 189, 191, 192, 194, 197, 198, 201, 202, 203, 204, 207, 221, 222, 226, 231, 238, 239, 241, 244, 246, 254, 255, 262, 263, 264, 265, 267, 271, 279, 288, 289, 292, 295, 303, 304, 310, 315, 320, 324, 329, 331, 333, 334, 337, 340, 341, 343, 344, 348, 353, 360, 361, 370, 376, 379, 380, 381, 384, 389, 390, 394, 397, 398, 403, 405, 406, 408, 410, 416, 417, 421, 424, 425, 427, 431, 450, 456, 457, 458, 459, 460, 461, 463, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "due": [5, 23, 32, 44, 62, 65, 74, 75, 83, 92, 99, 102, 107, 119, 123, 134, 136, 165, 171, 172, 173, 179, 180, 186, 204, 209, 217, 238, 243, 246, 254, 263, 264, 265, 267, 271, 279, 295, 310, 321, 323, 337, 340, 344, 357, 360, 366, 381, 383, 384, 397, 404, 417, 422, 423, 425, 426, 427, 430, 451, 456, 457, 458, 461, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478], "failur": [5, 7, 9, 11, 13, 18, 22, 23, 24, 25, 28, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 48, 50, 53, 54, 57, 58, 59, 63, 65, 67, 72, 89, 102, 103, 111, 119, 130, 172, 173, 179, 183, 187, 189, 209, 239, 265, 274, 278, 279, 289, 292, 298, 318, 328, 330, 333, 337, 340, 357, 361, 363, 384, 385, 418, 420, 421, 422, 425, 426, 431, 438, 458, 461, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 478], "at": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 30, 32, 33, 34, 37, 40, 41, 42, 44, 48, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 111, 112, 114, 117, 119, 122, 123, 126, 130, 132, 133, 135, 136, 137, 138, 140, 141, 143, 146, 148, 150, 151, 152, 154, 156, 159, 163, 165, 166, 169, 171, 172, 173, 176, 177, 179, 182, 184, 186, 187, 188, 189, 190, 192, 196, 197, 198, 199, 203, 204, 206, 207, 209, 210, 211, 214, 217, 219, 221, 222, 226, 228, 230, 231, 238, 239, 241, 243, 244, 246, 247, 251, 254, 257, 258, 260, 262, 263, 264, 265, 266, 267, 271, 274, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 301, 304, 305, 307, 309, 310, 314, 315, 316, 318, 320, 324, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 340, 341, 343, 344, 348, 349, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 370, 371, 372, 373, 375, 376, 377, 379, 381, 383, 384, 385, 389, 390, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "left": [5, 15, 32, 33, 46, 62, 63, 67, 71, 72, 74, 89, 91, 94, 100, 103, 106, 119, 123, 138, 143, 146, 151, 152, 153, 156, 163, 172, 173, 177, 179, 182, 186, 187, 189, 192, 208, 212, 215, 218, 221, 222, 224, 231, 243, 246, 263, 264, 265, 267, 277, 279, 288, 289, 291, 293, 298, 310, 315, 320, 327, 333, 336, 337, 340, 341, 344, 359, 360, 364, 370, 371, 379, 381, 382, 383, 385, 390, 395, 406, 422, 423, 425, 427, 430, 431, 451, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 473, 475, 476, 478], "untouch": [5, 63, 177, 451, 478], "posit": [5, 7, 13, 23, 25, 37, 46, 57, 59, 60, 62, 63, 67, 72, 75, 83, 84, 86, 88, 89, 91, 93, 94, 96, 98, 100, 103, 106, 112, 114, 117, 119, 123, 130, 133, 135, 136, 137, 141, 146, 150, 151, 152, 154, 156, 159, 171, 172, 173, 177, 179, 182, 186, 187, 189, 207, 209, 211, 217, 218, 221, 222, 230, 231, 243, 248, 251, 254, 257, 258, 260, 262, 263, 266, 269, 271, 274, 278, 279, 280, 289, 292, 295, 296, 307, 310, 311, 314, 316, 317, 321, 324, 328, 333, 336, 337, 340, 341, 343, 344, 345, 346, 348, 353, 357, 358, 360, 361, 364, 367, 371, 373, 376, 377, 380, 381, 383, 384, 385, 389, 394, 396, 403, 405, 408, 410, 416, 417, 422, 425, 426, 437, 440, 444, 457, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "local": [5, 13, 16, 18, 30, 31, 33, 34, 48, 52, 58, 65, 67, 72, 78, 83, 84, 86, 87, 88, 89, 91, 94, 98, 99, 100, 103, 105, 106, 111, 117, 123, 137, 141, 147, 148, 149, 153, 156, 160, 163, 166, 171, 172, 173, 179, 182, 186, 187, 188, 189, 196, 205, 209, 221, 222, 238, 241, 242, 243, 244, 246, 250, 251, 254, 255, 257, 263, 265, 268, 274, 279, 284, 289, 290, 292, 293, 295, 304, 309, 310, 315, 316, 328, 330, 331, 333, 337, 340, 341, 344, 347, 348, 350, 357, 358, 361, 374, 375, 376, 381, 383, 385, 390, 393, 400, 404, 408, 409, 410, 411, 414, 417, 420, 422, 423, 424, 425, 427, 431, 433, 435, 436, 443, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 476, 478, 479], "pyarg_vapars": [5, 56, 478], "va_list": [5, 9, 18, 23, 63, 461, 473, 478], "varg": [5, 9, 23, 63], "ident": [5, 9, 18, 25, 45, 48, 63, 67, 72, 83, 92, 93, 94, 97, 99, 100, 119, 123, 137, 139, 151, 155, 160, 177, 179, 182, 186, 189, 192, 197, 201, 203, 211, 212, 221, 226, 241, 257, 263, 265, 267, 277, 279, 289, 301, 304, 315, 324, 328, 329, 333, 336, 337, 340, 343, 348, 351, 360, 361, 370, 373, 380, 384, 385, 397, 405, 408, 420, 423, 426, 436, 459, 460, 462, 463, 467, 470, 474, 475, 476, 478], "rather": [5, 7, 22, 23, 30, 32, 40, 44, 54, 57, 60, 63, 71, 72, 74, 75, 83, 93, 98, 99, 100, 111, 117, 119, 123, 134, 137, 146, 148, 151, 152, 154, 159, 165, 172, 173, 177, 179, 182, 187, 204, 205, 206, 207, 209, 221, 222, 231, 239, 243, 244, 251, 254, 257, 263, 264, 265, 266, 267, 271, 279, 288, 289, 291, 292, 296, 298, 308, 309, 310, 315, 320, 327, 328, 330, 331, 333, 336, 337, 340, 341, 344, 348, 353, 357, 361, 362, 364, 367, 370, 371, 373, 379, 381, 383, 384, 385, 389, 390, 394, 395, 397, 402, 405, 408, 414, 417, 418, 420, 422, 423, 425, 427, 429, 431, 450, 451, 456, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "than": [5, 10, 18, 22, 23, 24, 25, 30, 32, 33, 34, 37, 38, 40, 41, 44, 48, 54, 55, 57, 60, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 102, 103, 106, 107, 111, 112, 114, 117, 119, 123, 130, 134, 136, 137, 141, 143, 144, 146, 148, 151, 154, 156, 157, 159, 163, 165, 166, 171, 172, 173, 177, 179, 182, 184, 186, 187, 189, 191, 192, 193, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 211, 214, 221, 222, 226, 230, 231, 238, 239, 243, 244, 246, 247, 251, 254, 255, 257, 258, 263, 264, 265, 266, 267, 268, 271, 272, 274, 279, 280, 284, 288, 289, 291, 292, 293, 295, 296, 298, 303, 304, 308, 309, 310, 315, 316, 318, 320, 321, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 343, 344, 347, 348, 349, 353, 354, 357, 359, 360, 361, 362, 364, 367, 369, 370, 371, 373, 376, 377, 379, 381, 383, 384, 385, 389, 390, 394, 395, 397, 400, 402, 404, 405, 406, 408, 410, 414, 417, 420, 422, 423, 425, 427, 429, 430, 431, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "kw": [5, 62, 172, 185, 193, 199, 201, 204, 258, 357, 367, 369, 370, 371, 384, 385, 395, 436, 457, 460, 463, 470], "empti": [5, 13, 17, 22, 24, 30, 32, 33, 37, 44, 48, 54, 58, 67, 72, 75, 83, 84, 87, 89, 94, 103, 111, 117, 119, 123, 130, 131, 133, 135, 136, 140, 141, 146, 147, 148, 150, 152, 153, 154, 156, 160, 163, 166, 171, 177, 179, 180, 184, 186, 187, 189, 192, 193, 199, 201, 203, 204, 205, 208, 209, 214, 221, 222, 224, 226, 229, 230, 232, 238, 241, 246, 251, 254, 255, 257, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 279, 284, 288, 289, 292, 295, 305, 310, 311, 312, 315, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 336, 337, 340, 341, 343, 344, 348, 353, 354, 357, 359, 360, 364, 370, 371, 375, 377, 379, 380, 381, 382, 383, 384, 389, 390, 395, 400, 402, 403, 405, 406, 408, 414, 415, 417, 418, 422, 423, 425, 426, 427, 430, 431, 435, 437, 444, 450, 451, 456, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "denot": [5, 45, 60, 67, 84, 103, 163, 187, 240, 241, 251, 255, 289, 318, 337, 340, 364, 381, 390, 422, 423, 425, 426, 427, 430, 457, 463, 475, 478], "added": [5, 13, 22, 23, 30, 33, 41, 44, 57, 58, 60, 62, 63, 67, 72, 74, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 109, 111, 112, 114, 117, 123, 125, 132, 133, 136, 138, 140, 146, 147, 148, 152, 154, 156, 157, 159, 163, 165, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 221, 230, 231, 238, 239, 241, 243, 244, 246, 247, 254, 255, 258, 262, 263, 264, 265, 266, 267, 271, 272, 277, 279, 284, 288, 289, 292, 295, 298, 300, 301, 303, 304, 307, 314, 315, 317, 320, 324, 326, 328, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 351, 353, 354, 357, 359, 360, 361, 364, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 389, 390, 394, 395, 396, 397, 398, 402, 405, 406, 408, 411, 414, 415, 416, 417, 421, 422, 423, 425, 427, 430, 431, 439, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "support": [5, 7, 13, 16, 22, 23, 25, 31, 33, 37, 39, 41, 42, 46, 48, 53, 57, 59, 60, 62, 64, 66, 67, 72, 73, 78, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 103, 107, 109, 112, 114, 116, 117, 119, 123, 129, 130, 134, 136, 138, 140, 143, 148, 150, 154, 157, 159, 160, 169, 171, 172, 173, 176, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 197, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 213, 214, 216, 217, 218, 220, 221, 222, 224, 231, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 277, 279, 280, 284, 286, 288, 289, 291, 292, 293, 294, 295, 298, 300, 301, 303, 304, 310, 311, 314, 315, 316, 317, 318, 324, 325, 326, 328, 329, 330, 331, 333, 334, 336, 338, 340, 341, 343, 344, 348, 350, 354, 356, 360, 361, 363, 364, 371, 372, 373, 376, 377, 380, 382, 383, 385, 389, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 410, 411, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 437, 444, 446, 450, 451, 452, 456, 458, 459, 461, 462, 464, 465, 466, 469, 470, 471, 478, 479], "pyarg_vaparsetupleandkeyword": [5, 56, 461, 478], "pyarg_validatekeywordargu": [5, 56, 478], "key": [5, 22, 32, 34, 39, 48, 53, 54, 62, 67, 77, 83, 84, 86, 91, 92, 93, 94, 98, 99, 100, 102, 109, 119, 123, 139, 144, 148, 152, 153, 156, 157, 160, 163, 166, 170, 171, 173, 177, 178, 179, 180, 182, 185, 187, 189, 190, 192, 193, 197, 199, 201, 202, 208, 209, 221, 222, 226, 232, 233, 240, 241, 244, 246, 247, 251, 252, 255, 257, 258, 262, 263, 264, 266, 267, 268, 269, 275, 278, 281, 283, 284, 287, 289, 291, 293, 294, 295, 300, 301, 303, 304, 308, 315, 316, 325, 326, 329, 330, 336, 340, 341, 342, 348, 350, 353, 357, 363, 364, 371, 379, 380, 381, 384, 385, 389, 390, 397, 400, 402, 408, 411, 412, 414, 416, 420, 422, 423, 425, 426, 427, 431, 435, 436, 437, 441, 447, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "dictionari": [5, 21, 22, 23, 30, 32, 41, 44, 48, 52, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 83, 84, 86, 87, 92, 93, 94, 99, 103, 107, 109, 112, 115, 117, 119, 141, 148, 153, 154, 156, 163, 169, 171, 172, 177, 179, 180, 182, 183, 187, 189, 191, 192, 196, 197, 198, 199, 201, 202, 203, 208, 209, 212, 221, 222, 226, 232, 238, 240, 241, 246, 247, 251, 255, 258, 262, 263, 265, 266, 267, 268, 270, 272, 275, 279, 283, 284, 287, 288, 289, 293, 295, 296, 300, 301, 303, 304, 308, 310, 315, 320, 321, 322, 326, 331, 336, 337, 340, 341, 342, 344, 348, 350, 353, 357, 360, 364, 370, 371, 372, 375, 376, 379, 381, 383, 384, 388, 389, 390, 395, 397, 402, 408, 411, 412, 422, 423, 424, 426, 431, 435, 436, 440, 441, 447, 450, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 472, 473, 474, 475, 476, 478, 479], "latter": [5, 7, 23, 41, 72, 84, 102, 103, 107, 117, 123, 130, 141, 163, 179, 180, 192, 197, 201, 205, 211, 243, 246, 251, 254, 255, 263, 264, 272, 288, 289, 292, 295, 304, 328, 333, 336, 340, 343, 355, 364, 370, 371, 379, 381, 383, 395, 396, 422, 423, 424, 425, 426, 427, 431, 456, 460, 465, 470, 471, 472, 475, 477, 478], "deconstruct": 5, "old": [5, 9, 13, 23, 41, 44, 57, 58, 59, 63, 67, 72, 84, 89, 99, 103, 109, 117, 119, 148, 156, 165, 172, 173, 183, 192, 201, 209, 221, 222, 239, 244, 246, 258, 264, 265, 267, 272, 279, 288, 289, 292, 293, 295, 300, 304, 326, 329, 336, 340, 341, 348, 353, 356, 357, 364, 376, 377, 379, 381, 384, 394, 402, 405, 410, 422, 423, 425, 430, 431, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "meth_oldarg": [5, 459, 465], "been": [5, 7, 13, 18, 22, 23, 24, 27, 28, 30, 32, 33, 41, 42, 44, 46, 48, 57, 58, 59, 62, 63, 66, 69, 72, 74, 77, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 106, 107, 109, 112, 114, 117, 119, 123, 130, 131, 136, 137, 138, 141, 146, 148, 150, 152, 154, 156, 157, 163, 165, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 192, 195, 197, 198, 200, 203, 208, 209, 214, 219, 221, 222, 226, 228, 231, 238, 239, 240, 243, 244, 246, 247, 251, 254, 255, 257, 262, 263, 264, 265, 266, 267, 272, 277, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 298, 301, 303, 304, 305, 310, 315, 316, 318, 324, 325, 327, 329, 330, 331, 333, 334, 336, 337, 340, 343, 344, 348, 349, 351, 353, 355, 356, 357, 359, 360, 361, 364, 370, 376, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 398, 400, 402, 403, 406, 407, 408, 411, 414, 415, 416, 417, 421, 422, 423, 424, 425, 427, 430, 431, 437, 441, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "standard": [5, 7, 18, 30, 31, 32, 33, 41, 58, 60, 62, 63, 65, 67, 72, 73, 74, 75, 76, 78, 79, 83, 87, 93, 94, 99, 100, 102, 103, 106, 107, 109, 111, 112, 115, 117, 123, 130, 134, 138, 140, 141, 142, 147, 148, 150, 151, 153, 159, 163, 172, 173, 174, 178, 179, 182, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 203, 204, 205, 207, 209, 210, 214, 216, 219, 221, 226, 231, 234, 239, 241, 243, 244, 246, 251, 253, 254, 257, 262, 263, 264, 265, 267, 268, 269, 271, 272, 274, 275, 277, 279, 281, 284, 289, 291, 293, 295, 297, 298, 301, 304, 305, 307, 308, 310, 315, 317, 320, 322, 324, 327, 328, 329, 330, 331, 333, 334, 339, 341, 344, 346, 348, 349, 350, 352, 353, 354, 357, 360, 361, 362, 363, 364, 365, 370, 376, 379, 381, 382, 383, 384, 385, 389, 390, 392, 393, 395, 397, 402, 403, 405, 408, 414, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 436, 439, 440, 447, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "modifi": [5, 9, 22, 23, 27, 32, 33, 60, 62, 63, 65, 67, 72, 75, 76, 78, 86, 87, 89, 93, 94, 98, 99, 100, 106, 107, 109, 117, 119, 134, 136, 138, 154, 163, 169, 172, 173, 180, 181, 182, 187, 189, 192, 193, 194, 197, 199, 201, 204, 207, 211, 212, 221, 241, 243, 251, 252, 262, 263, 264, 265, 267, 269, 277, 279, 280, 288, 289, 292, 293, 295, 298, 303, 304, 310, 315, 317, 320, 324, 325, 326, 327, 328, 331, 333, 334, 336, 340, 341, 344, 346, 348, 350, 353, 357, 360, 364, 367, 370, 371, 373, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 391, 392, 395, 400, 402, 404, 405, 411, 412, 415, 416, 418, 420, 421, 422, 423, 424, 427, 429, 430, 431, 450, 453, 457, 458, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 478], "longer": [5, 7, 22, 23, 30, 33, 34, 38, 44, 57, 58, 60, 62, 63, 66, 67, 70, 72, 84, 91, 93, 94, 98, 99, 102, 107, 114, 117, 123, 138, 154, 163, 172, 173, 180, 184, 186, 187, 195, 197, 204, 207, 221, 222, 231, 238, 241, 244, 246, 247, 251, 255, 257, 261, 264, 265, 267, 279, 280, 288, 289, 303, 305, 307, 314, 315, 321, 324, 328, 333, 336, 337, 340, 341, 343, 344, 348, 353, 357, 359, 360, 361, 371, 376, 377, 379, 381, 383, 384, 385, 394, 395, 397, 404, 405, 406, 407, 408, 409, 417, 423, 425, 427, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478], "purpos": [5, 7, 17, 18, 30, 32, 41, 62, 67, 71, 72, 74, 84, 89, 92, 93, 99, 100, 103, 107, 111, 119, 123, 125, 140, 151, 154, 163, 166, 169, 172, 173, 177, 179, 182, 186, 189, 192, 198, 201, 202, 209, 222, 226, 231, 241, 246, 249, 251, 257, 264, 279, 280, 288, 289, 291, 295, 303, 304, 315, 319, 321, 323, 330, 333, 336, 337, 343, 348, 353, 360, 364, 371, 379, 380, 381, 383, 384, 389, 395, 402, 405, 408, 409, 416, 420, 421, 422, 424, 425, 426, 427, 430, 435, 450, 451, 456, 457, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 478], "conveni": [5, 7, 23, 28, 30, 32, 41, 44, 62, 67, 72, 74, 83, 84, 89, 99, 100, 106, 107, 117, 121, 123, 136, 143, 147, 148, 153, 154, 163, 177, 179, 182, 185, 187, 191, 192, 194, 197, 198, 199, 201, 202, 203, 204, 205, 221, 222, 226, 230, 231, 239, 243, 247, 250, 251, 252, 254, 263, 264, 266, 267, 271, 272, 279, 280, 288, 291, 293, 295, 304, 322, 327, 331, 333, 337, 340, 344, 353, 356, 357, 359, 361, 362, 364, 368, 370, 379, 381, 383, 384, 385, 394, 396, 402, 404, 405, 408, 409, 411, 416, 422, 423, 427, 430, 431, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 476, 478], "decompos": [5, 94, 382, 389, 478], "continu": [5, 23, 28, 34, 35, 58, 60, 67, 72, 77, 78, 84, 86, 92, 94, 98, 99, 106, 107, 112, 115, 119, 123, 136, 151, 152, 154, 165, 173, 177, 178, 189, 192, 195, 196, 198, 203, 207, 237, 238, 241, 244, 246, 247, 257, 260, 263, 267, 278, 288, 289, 292, 293, 310, 315, 328, 329, 333, 334, 337, 339, 340, 349, 353, 361, 372, 379, 383, 385, 390, 395, 410, 422, 423, 424, 425, 426, 427, 428, 429, 430, 438, 440, 447, 450, 456, 457, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 475, 476, 478], "pyarg_unpacktupl": [5, 56, 57, 67, 459, 478], "min": [5, 67, 86, 94, 100, 103, 104, 156, 162, 178, 179, 182, 221, 222, 232, 250, 251, 257, 271, 286, 311, 312, 339, 340, 348, 362, 425, 435, 445, 462, 464, 472, 478], "max": [5, 67, 86, 94, 117, 138, 151, 156, 178, 179, 182, 221, 222, 232, 239, 240, 250, 257, 271, 286, 311, 314, 336, 337, 339, 340, 346, 348, 395, 422, 425, 435, 445, 462, 464, 469, 470, 472, 476, 478], "simpler": [5, 62, 67, 88, 89, 91, 100, 103, 117, 148, 221, 231, 279, 315, 340, 341, 364, 384, 397, 406, 408, 410, 427, 456, 457, 458, 459, 460, 462, 464, 471, 472, 475, 478, 479], "retriev": [5, 11, 23, 32, 38, 44, 48, 53, 55, 60, 67, 71, 72, 74, 83, 84, 91, 92, 94, 103, 107, 136, 148, 162, 163, 167, 172, 173, 177, 180, 185, 192, 199, 203, 204, 221, 222, 230, 237, 238, 239, 243, 244, 250, 252, 254, 261, 262, 264, 267, 279, 289, 292, 295, 298, 300, 301, 311, 315, 318, 324, 326, 328, 336, 337, 340, 341, 348, 355, 360, 367, 377, 381, 384, 390, 397, 400, 404, 408, 422, 423, 425, 431, 450, 458, 459, 460, 461, 462, 463, 464, 469, 471, 472, 473, 474, 476, 477, 478], "meth_vararg": [5, 57, 71, 72, 459, 478], "tabl": [5, 7, 30, 32, 41, 44, 57, 58, 63, 67, 73, 74, 76, 77, 89, 92, 94, 99, 102, 103, 106, 107, 144, 147, 154, 172, 173, 179, 182, 186, 199, 208, 231, 243, 246, 250, 257, 258, 260, 262, 263, 272, 279, 292, 294, 315, 324, 334, 336, 337, 340, 342, 343, 346, 348, 353, 361, 364, 374, 381, 383, 398, 400, 404, 405, 417, 421, 425, 436, 441, 447, 450, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 472, 477, 478], "least": [5, 28, 33, 34, 40, 48, 60, 62, 65, 71, 72, 75, 83, 84, 89, 92, 97, 100, 102, 103, 106, 112, 117, 133, 146, 150, 151, 154, 156, 171, 172, 173, 179, 182, 186, 189, 190, 196, 199, 204, 206, 211, 217, 222, 228, 230, 238, 244, 254, 257, 265, 266, 271, 288, 289, 304, 305, 314, 324, 328, 329, 331, 333, 337, 339, 340, 341, 343, 344, 348, 354, 355, 356, 357, 360, 361, 362, 373, 375, 377, 381, 383, 384, 401, 404, 417, 421, 422, 423, 425, 426, 429, 431, 456, 460, 463, 464, 465, 469, 471, 474, 475, 477, 478], "equal": [5, 7, 25, 32, 33, 36, 41, 53, 58, 62, 63, 65, 67, 74, 84, 88, 93, 94, 100, 109, 117, 119, 129, 130, 137, 138, 144, 146, 151, 156, 166, 172, 173, 177, 179, 182, 186, 189, 191, 192, 198, 204, 212, 217, 221, 222, 224, 239, 254, 255, 257, 258, 260, 262, 268, 271, 274, 280, 289, 291, 293, 304, 315, 327, 330, 333, 336, 337, 340, 342, 343, 348, 357, 359, 360, 371, 372, 373, 377, 379, 381, 382, 383, 384, 385, 395, 397, 403, 405, 407, 408, 418, 422, 423, 425, 426, 427, 430, 431, 436, 445, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 474, 476, 477, 478], "given": [5, 7, 9, 13, 22, 23, 27, 30, 32, 34, 41, 42, 44, 48, 55, 57, 60, 62, 63, 65, 71, 72, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 109, 112, 114, 117, 119, 123, 130, 132, 136, 141, 146, 147, 150, 151, 152, 153, 154, 159, 163, 165, 166, 169, 171, 172, 173, 174, 175, 177, 179, 180, 182, 186, 187, 189, 191, 192, 196, 198, 199, 201, 202, 204, 205, 206, 207, 209, 212, 214, 217, 221, 222, 224, 226, 229, 230, 231, 238, 239, 240, 241, 243, 244, 246, 248, 251, 254, 255, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 279, 284, 288, 289, 291, 292, 293, 295, 296, 297, 298, 304, 308, 309, 310, 315, 318, 320, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 348, 351, 353, 354, 357, 359, 360, 361, 362, 364, 367, 370, 371, 375, 376, 379, 380, 381, 382, 383, 384, 389, 390, 394, 395, 397, 398, 402, 403, 405, 406, 407, 408, 409, 412, 415, 416, 417, 418, 422, 423, 424, 425, 427, 429, 430, 431, 436, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "wrong": [5, 32, 41, 72, 83, 84, 94, 98, 102, 103, 107, 117, 141, 172, 179, 189, 208, 209, 244, 271, 288, 289, 291, 331, 336, 343, 348, 353, 361, 383, 384, 390, 402, 423, 436, 444, 458, 460, 461, 462, 463, 467, 469, 470, 472, 478], "element": [5, 7, 13, 32, 34, 39, 41, 48, 53, 54, 58, 60, 62, 63, 67, 84, 86, 100, 103, 106, 114, 117, 119, 130, 136, 138, 148, 152, 156, 157, 168, 171, 172, 174, 177, 178, 182, 186, 187, 189, 191, 192, 199, 201, 203, 205, 209, 216, 221, 222, 224, 238, 241, 251, 257, 258, 263, 268, 269, 271, 279, 288, 289, 300, 310, 314, 315, 318, 328, 331, 333, 340, 341, 343, 344, 348, 361, 364, 370, 371, 373, 376, 379, 380, 381, 383, 389, 397, 403, 406, 407, 410, 411, 412, 414, 415, 420, 422, 423, 424, 425, 426, 435, 437, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 476, 477, 478], "taken": [5, 32, 33, 41, 44, 54, 62, 65, 72, 74, 86, 94, 100, 117, 138, 141, 159, 163, 179, 182, 187, 189, 192, 198, 201, 202, 207, 212, 221, 226, 244, 257, 262, 264, 265, 272, 274, 279, 289, 304, 307, 310, 318, 327, 336, 337, 340, 343, 353, 355, 357, 359, 360, 362, 376, 377, 392, 395, 422, 423, 427, 431, 457, 459, 460, 462, 469, 470, 471, 472, 476, 478], "sourc": [5, 13, 22, 23, 30, 32, 33, 65, 67, 71, 72, 74, 75, 78, 83, 84, 89, 91, 92, 93, 94, 100, 102, 109, 119, 139, 149, 153, 154, 155, 159, 163, 171, 172, 173, 177, 178, 183, 186, 187, 189, 199, 203, 204, 205, 209, 210, 218, 221, 226, 231, 238, 244, 247, 248, 250, 253, 257, 260, 261, 263, 264, 265, 266, 276, 277, 279, 288, 289, 291, 292, 293, 295, 296, 304, 308, 309, 311, 317, 320, 323, 326, 327, 328, 331, 333, 336, 337, 340, 341, 342, 343, 347, 348, 350, 353, 354, 357, 359, 361, 362, 363, 364, 366, 372, 375, 376, 377, 383, 390, 394, 395, 400, 402, 405, 408, 409, 410, 411, 412, 416, 417, 418, 421, 422, 423, 427, 429, 430, 431, 438, 448, 450, 451, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "_weakref": [5, 477, 478], "helper": [5, 32, 50, 67, 85, 92, 125, 160, 165, 172, 183, 192, 201, 214, 231, 246, 250, 253, 254, 260, 263, 295, 315, 328, 337, 358, 362, 376, 379, 383, 385, 390, 408, 462, 463, 471, 473, 474, 478], "modul": [5, 7, 11, 16, 17, 23, 24, 30, 32, 33, 34, 40, 41, 57, 58, 60, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 86, 87, 88, 89, 90, 93, 95, 96, 101, 102, 106, 107, 109, 111, 112, 114, 115, 117, 119, 120, 122, 123, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 283, 284, 286, 287, 288, 289, 291, 293, 294, 296, 297, 298, 300, 301, 303, 305, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 422, 424, 425, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 443, 444, 446, 447, 450, 451, 453, 465, 467, 468, 478, 479], "weak": [5, 62, 66, 67, 72, 73, 84, 136, 178, 209, 222, 231, 250, 337, 340, 383, 423, 440, 459, 462, 464, 469, 472, 478, 479], "static": [5, 10, 28, 32, 34, 41, 44, 49, 51, 57, 59, 61, 63, 67, 71, 72, 74, 75, 76, 78, 79, 86, 89, 100, 103, 110, 185, 187, 211, 221, 222, 246, 252, 295, 311, 315, 340, 360, 364, 381, 384, 385, 422, 423, 427, 431, 435, 451, 458, 459, 460, 461, 464, 466, 467, 470, 473, 474, 475, 476, 477, 478], "weakref_ref": 5, "self": [5, 10, 22, 28, 43, 51, 57, 60, 62, 67, 71, 72, 74, 75, 78, 83, 86, 92, 93, 94, 96, 98, 100, 101, 104, 105, 113, 117, 119, 123, 129, 130, 139, 141, 145, 152, 156, 157, 165, 168, 172, 177, 179, 182, 183, 187, 199, 201, 207, 209, 212, 217, 219, 221, 222, 223, 226, 228, 236, 238, 239, 244, 249, 251, 255, 257, 258, 270, 279, 284, 285, 288, 289, 292, 293, 295, 301, 314, 316, 317, 329, 331, 333, 334, 336, 340, 341, 353, 354, 357, 364, 367, 370, 376, 377, 379, 380, 381, 383, 384, 385, 390, 394, 397, 405, 408, 412, 414, 415, 416, 422, 423, 427, 435, 436, 441, 446, 447, 450, 457, 458, 459, 460, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 477, 478], "callback": [5, 11, 13, 14, 22, 27, 28, 32, 60, 62, 66, 67, 72, 80, 86, 92, 98, 115, 117, 120, 122, 126, 127, 129, 130, 133, 136, 165, 219, 223, 251, 277, 279, 295, 304, 305, 310, 311, 312, 316, 325, 328, 336, 337, 338, 346, 354, 362, 364, 366, 371, 380, 381, 397, 407, 408, 410, 416, 423, 447, 462, 463, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479], "ref": [5, 33, 34, 62, 66, 67, 77, 173, 178, 397, 450, 451, 458, 464, 467, 472, 476, 478], "pyweakref_newref": [5, 56, 66, 478], "entir": [5, 41, 62, 72, 74, 83, 84, 89, 91, 92, 97, 98, 102, 103, 106, 109, 111, 123, 147, 148, 165, 173, 180, 192, 196, 201, 203, 209, 212, 226, 231, 238, 243, 254, 255, 257, 262, 263, 265, 266, 267, 274, 284, 288, 289, 291, 315, 318, 327, 328, 336, 337, 340, 341, 348, 353, 359, 360, 362, 364, 371, 379, 382, 383, 395, 400, 403, 405, 408, 411, 421, 422, 424, 427, 430, 431, 441, 450, 456, 458, 460, 461, 462, 463, 464, 466, 469, 471, 472, 475, 478], "py_buildvalu": [5, 10, 34, 56, 58, 59, 67, 72, 85, 462, 467, 476, 478], "base": [5, 23, 25, 30, 32, 33, 38, 42, 44, 46, 48, 49, 60, 62, 63, 67, 72, 74, 75, 77, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 107, 115, 117, 119, 120, 123, 129, 133, 136, 140, 141, 142, 143, 147, 151, 159, 160, 163, 165, 169, 172, 176, 177, 178, 179, 182, 183, 185, 189, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 207, 217, 221, 222, 230, 231, 238, 239, 241, 242, 243, 244, 247, 250, 251, 252, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 271, 272, 276, 277, 278, 280, 284, 288, 289, 292, 294, 295, 298, 301, 304, 308, 310, 315, 316, 317, 320, 323, 325, 326, 328, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 350, 353, 355, 357, 361, 364, 368, 370, 371, 377, 380, 381, 382, 383, 384, 385, 389, 390, 393, 394, 395, 397, 398, 403, 404, 405, 406, 408, 409, 411, 412, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 430, 435, 438, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479], "those": [5, 7, 23, 32, 34, 38, 58, 62, 63, 65, 66, 71, 72, 75, 76, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 111, 117, 119, 123, 130, 136, 148, 151, 154, 157, 163, 165, 168, 171, 172, 173, 174, 179, 182, 186, 187, 189, 190, 192, 198, 199, 200, 201, 204, 206, 207, 209, 212, 216, 221, 222, 224, 230, 238, 240, 243, 246, 247, 248, 249, 251, 254, 255, 257, 258, 262, 263, 264, 265, 267, 271, 272, 279, 280, 288, 289, 291, 292, 293, 295, 298, 304, 307, 310, 315, 318, 320, 321, 325, 326, 327, 328, 329, 331, 333, 337, 340, 348, 350, 353, 356, 357, 360, 361, 364, 370, 371, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 397, 400, 405, 407, 408, 410, 411, 417, 420, 421, 422, 423, 424, 425, 427, 430, 431, 450, 456, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "famili": [5, 16, 32, 41, 53, 67, 94, 106, 123, 133, 139, 160, 196, 208, 231, 267, 279, 289, 294, 333, 334, 351, 357, 363, 364, 367, 405, 450, 456, 460, 461, 462, 464, 471, 474, 475, 476, 478], "exact": [5, 7, 9, 11, 13, 18, 24, 28, 38, 46, 63, 65, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 97, 98, 100, 103, 106, 109, 117, 123, 130, 144, 146, 149, 165, 172, 173, 179, 182, 187, 189, 192, 194, 197, 199, 201, 203, 207, 209, 217, 221, 224, 239, 241, 246, 251, 263, 264, 265, 266, 267, 271, 279, 280, 286, 288, 289, 291, 295, 310, 315, 318, 324, 331, 333, 334, 337, 340, 341, 342, 343, 344, 348, 350, 355, 356, 359, 360, 364, 373, 376, 381, 383, 384, 385, 394, 397, 406, 408, 416, 417, 422, 425, 427, 430, 431, 439, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 478], "whatev": [5, 30, 72, 77, 83, 84, 87, 99, 100, 103, 117, 148, 172, 191, 196, 204, 221, 246, 263, 264, 288, 289, 293, 307, 315, 340, 348, 354, 357, 360, 381, 384, 385, 390, 402, 425, 427, 457, 458, 459, 460, 461, 464, 478], "forc": [5, 32, 33, 62, 67, 72, 83, 84, 89, 94, 97, 102, 123, 130, 149, 155, 159, 173, 177, 179, 180, 182, 189, 231, 244, 254, 263, 278, 279, 284, 289, 304, 305, 307, 315, 329, 341, 343, 344, 348, 357, 361, 384, 397, 402, 423, 427, 450, 464, 469, 471, 472, 473, 474, 476, 477, 478], "suppli": [5, 18, 28, 32, 62, 74, 84, 89, 91, 92, 93, 94, 103, 106, 107, 117, 119, 136, 143, 148, 149, 157, 172, 173, 174, 177, 179, 182, 187, 189, 211, 222, 231, 239, 243, 244, 247, 249, 251, 255, 257, 263, 265, 279, 280, 284, 288, 289, 291, 292, 293, 298, 304, 310, 320, 324, 333, 336, 337, 340, 344, 350, 357, 360, 371, 376, 379, 381, 383, 389, 390, 394, 395, 397, 402, 410, 414, 416, 417, 420, 422, 423, 425, 427, 431, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 474, 478], "never": [5, 13, 18, 22, 23, 27, 28, 32, 33, 34, 41, 58, 59, 60, 62, 67, 72, 75, 84, 86, 89, 91, 94, 99, 100, 102, 103, 107, 117, 125, 129, 130, 136, 138, 141, 148, 154, 159, 162, 163, 165, 166, 171, 172, 173, 177, 179, 182, 183, 186, 192, 195, 201, 209, 222, 226, 238, 239, 241, 243, 246, 251, 254, 255, 258, 261, 262, 263, 265, 274, 279, 288, 289, 292, 293, 295, 310, 315, 318, 320, 324, 328, 330, 334, 336, 337, 340, 343, 344, 353, 354, 357, 360, 364, 380, 381, 384, 389, 395, 397, 398, 402, 405, 408, 410, 417, 420, 422, 423, 425, 427, 430, 431, 450, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "word": [5, 11, 32, 62, 72, 84, 89, 91, 93, 96, 100, 103, 105, 106, 117, 151, 154, 156, 163, 169, 172, 179, 182, 186, 189, 197, 199, 204, 243, 271, 288, 292, 293, 315, 316, 322, 327, 336, 340, 341, 345, 359, 360, 364, 381, 407, 408, 412, 425, 427, 429, 430, 431, 435, 436, 437, 444, 457, 459, 461, 462, 463, 465, 469, 473, 474, 475, 476, 478], "invok": [5, 13, 23, 27, 30, 34, 57, 58, 62, 63, 67, 74, 83, 84, 92, 94, 96, 97, 100, 102, 103, 106, 111, 117, 123, 141, 148, 152, 163, 165, 172, 177, 179, 189, 206, 221, 222, 239, 241, 243, 251, 262, 263, 264, 279, 288, 289, 293, 295, 296, 298, 304, 307, 309, 315, 316, 320, 328, 331, 334, 336, 337, 340, 344, 348, 354, 357, 360, 362, 364, 366, 371, 372, 375, 381, 383, 389, 394, 397, 402, 408, 409, 410, 411, 414, 415, 417, 418, 420, 422, 424, 427, 430, 432, 446, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 475, 477, 478], "malloc": [5, 7, 33, 41, 72, 77, 209, 278, 419, 450, 457, 458, 460, 462, 472, 473, 474, 478], "onc": [5, 7, 13, 22, 23, 24, 28, 32, 33, 55, 58, 60, 62, 71, 72, 74, 75, 83, 84, 88, 89, 91, 93, 94, 98, 99, 100, 102, 103, 106, 114, 117, 123, 129, 130, 132, 136, 137, 146, 148, 152, 154, 155, 156, 159, 163, 165, 182, 184, 186, 189, 192, 201, 207, 209, 214, 222, 226, 230, 231, 241, 243, 246, 247, 251, 254, 257, 263, 264, 265, 266, 267, 279, 280, 284, 288, 289, 291, 295, 304, 310, 315, 316, 324, 325, 328, 329, 330, 333, 334, 336, 337, 340, 343, 349, 353, 357, 360, 362, 364, 377, 379, 381, 383, 384, 385, 390, 394, 395, 397, 398, 402, 405, 406, 408, 410, 411, 422, 423, 425, 426, 427, 431, 450, 451, 456, 457, 458, 460, 461, 462, 463, 464, 465, 469, 470, 471, 473, 475, 476, 477, 478], "space": [5, 32, 41, 48, 58, 60, 62, 63, 71, 72, 84, 91, 92, 94, 98, 99, 103, 106, 112, 117, 119, 140, 143, 147, 152, 154, 157, 158, 163, 171, 173, 174, 180, 182, 186, 187, 189, 194, 195, 197, 198, 208, 209, 217, 221, 222, 238, 243, 244, 251, 255, 257, 258, 262, 263, 264, 279, 280, 288, 289, 293, 296, 299, 310, 315, 317, 318, 327, 328, 329, 330, 331, 333, 340, 341, 342, 344, 357, 359, 360, 361, 362, 364, 367, 370, 371, 373, 377, 379, 389, 390, 392, 394, 402, 405, 408, 421, 423, 427, 429, 430, 456, 457, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 474, 475, 477, 478], "tab": [5, 65, 67, 76, 115, 119, 143, 152, 171, 173, 174, 186, 189, 194, 198, 209, 221, 238, 243, 251, 258, 293, 313, 315, 316, 319, 327, 330, 340, 341, 344, 359, 363, 370, 389, 398, 414, 430, 436, 440, 444, 450, 457, 462, 464, 467, 469, 471, 472, 474, 475, 476, 477, 478], "comma": [5, 33, 67, 77, 89, 93, 109, 148, 171, 182, 189, 238, 244, 260, 262, 263, 264, 267, 288, 315, 340, 341, 357, 372, 375, 390, 395, 422, 423, 425, 426, 431, 437, 450, 461, 462, 463, 464, 465, 467, 469, 472, 475, 476, 478, 479], "ignor": [5, 18, 22, 23, 24, 32, 33, 34, 38, 46, 48, 58, 60, 62, 63, 65, 67, 72, 75, 76, 89, 99, 103, 106, 107, 112, 119, 130, 133, 134, 136, 140, 141, 146, 148, 152, 154, 155, 159, 163, 165, 168, 171, 172, 173, 177, 179, 181, 182, 184, 186, 187, 189, 192, 195, 196, 204, 205, 209, 211, 212, 214, 219, 221, 222, 226, 238, 239, 243, 244, 245, 246, 247, 251, 254, 257, 258, 262, 263, 264, 265, 266, 267, 268, 272, 279, 280, 284, 289, 292, 293, 295, 298, 300, 304, 310, 315, 316, 324, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 351, 353, 355, 357, 359, 360, 361, 367, 371, 373, 375, 376, 377, 381, 383, 384, 389, 390, 393, 395, 400, 402, 405, 408, 410, 411, 416, 417, 420, 422, 423, 426, 427, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "within": [5, 7, 22, 32, 41, 48, 53, 67, 72, 75, 84, 91, 93, 94, 96, 97, 98, 100, 102, 103, 111, 117, 119, 132, 136, 137, 141, 151, 153, 154, 159, 163, 165, 172, 173, 179, 182, 186, 187, 189, 199, 212, 214, 221, 226, 243, 244, 246, 247, 248, 249, 251, 257, 263, 266, 267, 271, 279, 280, 281, 293, 298, 303, 304, 308, 309, 315, 317, 320, 327, 328, 333, 334, 336, 340, 341, 343, 344, 347, 348, 349, 357, 359, 362, 364, 366, 371, 379, 381, 383, 384, 389, 390, 394, 395, 405, 406, 408, 415, 417, 418, 421, 422, 423, 424, 425, 427, 430, 431, 444, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 474, 475, 476, 477, 478], "make": [5, 10, 11, 23, 32, 38, 44, 50, 58, 62, 63, 67, 71, 72, 74, 75, 83, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 103, 106, 107, 109, 110, 111, 117, 119, 123, 130, 136, 137, 138, 148, 152, 153, 154, 156, 157, 159, 163, 165, 166, 171, 172, 173, 175, 177, 179, 182, 184, 186, 187, 189, 192, 193, 196, 201, 202, 205, 207, 208, 209, 214, 217, 218, 221, 222, 226, 230, 231, 238, 241, 243, 246, 248, 251, 254, 255, 257, 262, 263, 264, 265, 266, 267, 271, 275, 277, 279, 284, 288, 289, 291, 292, 293, 295, 298, 304, 308, 314, 318, 324, 325, 326, 327, 329, 330, 333, 334, 336, 337, 339, 340, 341, 343, 348, 350, 353, 355, 357, 358, 359, 360, 362, 364, 365, 371, 373, 375, 376, 380, 381, 383, 384, 385, 389, 390, 393, 395, 396, 397, 398, 402, 406, 407, 408, 411, 416, 417, 421, 422, 423, 425, 427, 429, 430, 431, 439, 448, 451, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 470, 471, 472, 475, 476, 477, 478, 479], "tad": 5, "readabl": [5, 67, 84, 89, 91, 99, 100, 103, 114, 115, 117, 130, 146, 148, 152, 156, 163, 172, 186, 187, 194, 201, 226, 239, 241, 254, 263, 264, 279, 284, 289, 295, 299, 300, 303, 306, 315, 329, 334, 337, 338, 340, 343, 344, 345, 363, 364, 372, 384, 396, 409, 421, 430, 450, 458, 459, 461, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 478], "wchar_t": [5, 16, 32, 33, 58, 65, 67, 71, 72, 89, 118, 172, 468, 469, 475, 477, 478], "ucs": [5, 348, 459, 471], "increment": [5, 32, 33, 34, 41, 62, 67, 72, 75, 84, 93, 94, 100, 115, 116, 119, 142, 182, 187, 203, 207, 266, 279, 288, 289, 340, 360, 361, 364, 371, 381, 406, 408, 457, 459, 460, 461, 462, 464, 468, 470, 471, 478], "caus": [5, 9, 18, 23, 32, 34, 41, 46, 50, 58, 60, 62, 63, 65, 72, 74, 75, 76, 84, 89, 94, 99, 100, 103, 107, 109, 111, 112, 117, 119, 123, 130, 132, 135, 136, 148, 149, 152, 154, 155, 159, 163, 165, 171, 172, 173, 180, 182, 184, 186, 187, 189, 201, 204, 207, 208, 209, 221, 224, 238, 241, 243, 244, 246, 251, 254, 258, 262, 263, 265, 267, 271, 272, 278, 279, 280, 289, 293, 295, 298, 304, 309, 310, 315, 323, 324, 326, 329, 330, 333, 336, 337, 340, 341, 348, 351, 353, 357, 359, 360, 361, 362, 371, 381, 383, 384, 385, 390, 395, 397, 400, 402, 405, 406, 410, 414, 417, 421, 422, 423, 424, 425, 426, 427, 430, 431, 438, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478], "produc": [5, 7, 22, 23, 25, 33, 38, 58, 62, 75, 76, 83, 84, 87, 88, 89, 91, 94, 99, 100, 101, 103, 106, 117, 119, 136, 146, 148, 154, 157, 159, 163, 171, 172, 173, 179, 182, 183, 186, 189, 190, 192, 193, 197, 198, 199, 201, 204, 209, 210, 221, 224, 226, 230, 231, 244, 254, 257, 258, 263, 266, 272, 279, 284, 289, 295, 298, 301, 304, 309, 314, 315, 317, 337, 340, 341, 343, 344, 348, 353, 360, 372, 373, 375, 379, 389, 392, 401, 402, 406, 407, 409, 410, 411, 416, 417, 423, 425, 427, 430, 444, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478], "found": [5, 17, 22, 30, 32, 41, 44, 48, 54, 57, 58, 60, 62, 63, 70, 71, 72, 75, 76, 78, 87, 89, 92, 93, 94, 96, 98, 99, 100, 103, 106, 107, 111, 117, 119, 146, 148, 154, 159, 163, 166, 171, 172, 173, 187, 189, 192, 193, 195, 199, 201, 203, 204, 207, 209, 211, 212, 221, 222, 224, 226, 229, 232, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 251, 257, 261, 262, 263, 264, 266, 267, 268, 272, 274, 275, 278, 279, 288, 289, 291, 292, 293, 298, 310, 315, 318, 328, 329, 331, 333, 335, 336, 337, 340, 344, 348, 349, 350, 353, 354, 357, 364, 366, 371, 373, 380, 381, 382, 383, 384, 385, 390, 395, 401, 402, 405, 407, 408, 409, 410, 414, 415, 418, 420, 422, 423, 424, 425, 427, 429, 430, 431, 436, 446, 447, 448, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "therefor": [5, 23, 32, 41, 48, 62, 72, 74, 75, 83, 84, 86, 88, 89, 91, 94, 99, 100, 101, 102, 103, 106, 117, 119, 136, 143, 148, 154, 169, 172, 177, 179, 204, 209, 210, 211, 221, 239, 249, 254, 258, 262, 265, 277, 279, 289, 295, 309, 315, 326, 328, 329, 333, 337, 340, 348, 353, 355, 360, 370, 381, 384, 395, 408, 409, 416, 417, 422, 423, 425, 429, 430, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 474, 475, 478], "yet": [5, 13, 23, 28, 30, 32, 33, 44, 62, 63, 72, 78, 83, 84, 88, 89, 91, 93, 98, 102, 103, 130, 134, 136, 148, 165, 172, 173, 182, 192, 193, 201, 209, 228, 246, 264, 265, 279, 289, 291, 293, 304, 330, 331, 337, 340, 344, 360, 376, 381, 384, 405, 408, 424, 426, 431, 457, 459, 460, 462, 464, 469, 472, 474, 475, 477, 478], "systemerror": [5, 23, 27, 44, 48, 54, 59, 63, 67, 209, 438, 445, 469, 474, 478], "constructor": [5, 18, 23, 28, 52, 54, 62, 63, 67, 72, 78, 86, 92, 93, 94, 97, 99, 100, 102, 109, 117, 119, 123, 132, 146, 147, 153, 154, 156, 157, 160, 163, 168, 171, 172, 177, 179, 182, 186, 189, 194, 197, 198, 199, 202, 203, 204, 209, 214, 217, 221, 222, 230, 231, 233, 238, 239, 242, 244, 254, 255, 257, 258, 263, 264, 266, 267, 274, 279, 288, 294, 295, 301, 303, 304, 312, 317, 321, 323, 324, 326, 327, 331, 333, 334, 337, 340, 341, 347, 353, 354, 357, 359, 360, 362, 364, 379, 380, 381, 383, 384, 385, 390, 397, 398, 402, 408, 415, 417, 418, 420, 423, 425, 436, 438, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "compat": [5, 23, 24, 32, 33, 41, 56, 58, 60, 62, 63, 65, 67, 74, 75, 78, 83, 86, 89, 91, 96, 98, 99, 100, 103, 106, 107, 117, 123, 125, 136, 141, 142, 154, 157, 163, 172, 180, 182, 189, 190, 192, 197, 199, 201, 203, 204, 209, 210, 218, 224, 226, 239, 241, 243, 244, 246, 247, 248, 249, 251, 255, 262, 263, 264, 267, 279, 284, 289, 291, 292, 295, 297, 298, 304, 308, 310, 315, 318, 321, 328, 333, 336, 337, 340, 344, 348, 353, 357, 360, 361, 363, 376, 379, 381, 382, 383, 389, 390, 392, 396, 402, 406, 414, 416, 417, 420, 422, 423, 425, 427, 430, 431, 451, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "dict": [5, 10, 22, 23, 26, 30, 32, 34, 53, 58, 60, 62, 67, 72, 77, 78, 83, 84, 86, 89, 92, 94, 98, 109, 117, 119, 123, 156, 160, 163, 167, 171, 177, 178, 180, 183, 186, 187, 189, 201, 221, 222, 240, 246, 250, 251, 257, 258, 260, 263, 264, 265, 279, 284, 287, 295, 300, 303, 322, 326, 336, 337, 341, 350, 353, 357, 360, 364, 371, 374, 380, 381, 383, 397, 408, 414, 422, 423, 425, 426, 430, 436, 437, 441, 445, 447, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478], "pair": [5, 7, 22, 28, 32, 39, 63, 67, 72, 74, 84, 91, 93, 94, 97, 103, 106, 117, 123, 130, 133, 138, 141, 148, 151, 156, 163, 173, 177, 180, 182, 186, 187, 189, 192, 193, 198, 205, 209, 217, 224, 226, 240, 251, 255, 257, 258, 264, 267, 271, 279, 284, 288, 289, 292, 293, 295, 305, 318, 328, 333, 334, 336, 337, 340, 344, 350, 353, 354, 356, 358, 360, 364, 370, 371, 379, 380, 381, 384, 389, 390, 397, 402, 405, 408, 411, 412, 422, 423, 425, 430, 431, 436, 437, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 474, 478], "consecut": [5, 22, 60, 63, 94, 119, 140, 154, 257, 271, 340, 341, 343, 379, 430, 450, 461, 472, 478], "add": [5, 7, 28, 30, 32, 33, 44, 54, 57, 58, 62, 67, 72, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 106, 107, 109, 114, 116, 117, 119, 136, 138, 140, 148, 149, 152, 153, 154, 156, 157, 159, 163, 165, 173, 177, 178, 179, 181, 182, 184, 185, 187, 189, 190, 191, 192, 193, 196, 199, 201, 202, 204, 209, 220, 221, 222, 226, 228, 230, 232, 239, 240, 241, 243, 246, 251, 254, 257, 258, 260, 263, 264, 267, 272, 277, 279, 281, 285, 286, 287, 288, 289, 292, 295, 297, 298, 303, 304, 315, 317, 324, 328, 330, 331, 333, 334, 336, 337, 340, 341, 343, 346, 348, 349, 350, 353, 357, 359, 361, 363, 364, 370, 371, 379, 380, 381, 383, 384, 385, 389, 390, 395, 397, 402, 405, 406, 408, 409, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 429, 430, 431, 435, 438, 441, 444, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "serv": [5, 72, 75, 99, 100, 123, 130, 133, 182, 189, 198, 199, 222, 241, 249, 257, 264, 279, 289, 295, 309, 329, 336, 337, 364, 379, 381, 402, 408, 415, 427, 430, 461, 465, 470, 471, 473, 475, 478], "respect": [5, 7, 18, 22, 23, 30, 32, 33, 38, 46, 48, 63, 71, 72, 74, 75, 83, 84, 92, 93, 99, 100, 103, 109, 117, 119, 129, 132, 136, 138, 146, 147, 148, 151, 154, 159, 163, 172, 173, 179, 182, 187, 189, 190, 192, 204, 209, 211, 221, 226, 239, 241, 249, 254, 258, 263, 264, 265, 266, 271, 274, 279, 289, 295, 304, 305, 318, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 353, 360, 361, 370, 371, 379, 381, 383, 392, 406, 421, 423, 425, 427, 431, 450, 451, 457, 459, 461, 463, 465, 469, 470, 471, 472, 474, 475, 476, 477, 478], "py_vabuildvalu": [5, 56], "py_fals": [6, 62, 63, 74, 426, 478], "py_tru": [6, 62, 63, 74, 426, 478], "pybool_typ": [6, 56], "instanc": [6, 9, 13, 16, 23, 25, 28, 30, 32, 37, 38, 41, 42, 44, 46, 48, 52, 54, 57, 59, 60, 62, 63, 67, 70, 72, 74, 75, 77, 88, 89, 91, 94, 98, 99, 100, 102, 103, 107, 114, 117, 119, 123, 125, 129, 130, 132, 133, 134, 136, 137, 141, 146, 147, 148, 150, 152, 153, 154, 155, 157, 163, 165, 168, 171, 172, 173, 179, 182, 186, 187, 189, 190, 191, 192, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 217, 221, 222, 226, 230, 231, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 254, 257, 258, 263, 264, 265, 266, 267, 277, 279, 280, 281, 284, 288, 289, 292, 293, 294, 296, 301, 303, 304, 308, 310, 311, 314, 315, 317, 319, 321, 325, 326, 327, 328, 331, 333, 334, 336, 337, 341, 343, 344, 347, 348, 350, 353, 354, 357, 359, 360, 362, 364, 367, 375, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 395, 396, 397, 398, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 414, 415, 417, 418, 420, 422, 424, 425, 430, 431, 435, 438, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "layer": [6, 9, 25, 26, 31, 37, 38, 55, 59, 60, 67, 74, 83, 100, 301, 331, 333, 337, 343, 414, 450, 457, 460, 463, 476, 477, 478], "pybool_check": 6, "immort": [6, 32, 33, 45, 51, 55, 86, 348, 460, 469, 476, 478], "py_return_fals": [6, 461], "py_return_tru": [6, 461], "pybool_fromlong": [6, 56], "certain": [7, 23, 32, 40, 41, 48, 57, 58, 62, 65, 72, 76, 84, 87, 91, 93, 94, 99, 100, 103, 117, 130, 141, 154, 169, 172, 179, 186, 189, 191, 192, 195, 199, 201, 202, 204, 205, 209, 230, 243, 251, 262, 263, 264, 265, 266, 267, 268, 279, 288, 289, 291, 293, 303, 304, 333, 337, 342, 344, 349, 353, 360, 361, 362, 364, 381, 382, 383, 384, 389, 402, 405, 414, 423, 425, 427, 430, 456, 457, 458, 459, 460, 461, 463, 464, 466, 469, 471, 472, 475, 476, 478], "wrap": [7, 18, 21, 32, 41, 42, 57, 62, 67, 78, 87, 89, 92, 96, 100, 106, 109, 111, 117, 119, 123, 126, 134, 136, 138, 146, 152, 154, 165, 172, 173, 177, 186, 187, 189, 197, 198, 203, 204, 209, 216, 220, 221, 222, 226, 230, 238, 243, 247, 250, 251, 254, 257, 263, 264, 266, 277, 279, 288, 289, 300, 329, 336, 337, 340, 343, 348, 351, 353, 357, 358, 363, 371, 380, 381, 383, 384, 385, 389, 390, 400, 402, 408, 412, 422, 423, 447, 456, 459, 460, 461, 462, 463, 464, 465, 469, 470, 472, 473, 474, 476, 478], "parti": [7, 30, 32, 67, 83, 84, 100, 109, 123, 125, 129, 130, 135, 154, 160, 172, 177, 179, 180, 221, 231, 246, 247, 263, 279, 289, 295, 298, 315, 326, 330, 336, 337, 348, 350, 360, 364, 375, 381, 394, 395, 397, 420, 421, 423, 456, 457, 458, 460, 461, 463, 464, 466, 470, 471, 472, 474, 476, 477, 478], "librari": [7, 18, 23, 32, 33, 41, 44, 50, 58, 62, 65, 67, 70, 71, 72, 73, 75, 76, 78, 79, 83, 84, 87, 89, 90, 91, 94, 96, 98, 102, 103, 104, 106, 107, 111, 115, 117, 120, 123, 130, 136, 139, 142, 163, 165, 173, 174, 179, 180, 182, 183, 188, 189, 190, 199, 204, 208, 224, 226, 231, 239, 243, 247, 252, 253, 260, 262, 263, 265, 271, 279, 283, 288, 289, 292, 294, 295, 298, 304, 309, 310, 315, 316, 324, 326, 327, 329, 330, 333, 336, 337, 340, 341, 348, 349, 350, 353, 357, 360, 361, 364, 370, 373, 379, 381, 383, 385, 386, 389, 395, 402, 404, 405, 417, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 440, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "special": [7, 23, 30, 32, 33, 41, 48, 56, 57, 59, 60, 62, 63, 67, 72, 74, 83, 84, 86, 89, 91, 93, 94, 98, 99, 100, 101, 102, 103, 106, 111, 117, 119, 123, 134, 135, 136, 140, 141, 148, 149, 151, 152, 163, 164, 165, 171, 172, 173, 176, 177, 179, 183, 187, 189, 192, 199, 201, 204, 209, 216, 218, 224, 226, 241, 243, 246, 250, 251, 255, 257, 258, 262, 263, 264, 267, 268, 277, 278, 279, 286, 288, 289, 292, 295, 298, 315, 317, 320, 325, 327, 328, 329, 333, 337, 338, 343, 344, 348, 353, 356, 360, 364, 370, 383, 384, 389, 390, 397, 402, 405, 408, 410, 414, 420, 421, 422, 424, 425, 426, 428, 430, 431, 444, 451, 456, 457, 458, 459, 461, 462, 463, 464, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "imag": [7, 15, 41, 67, 84, 86, 148, 151, 173, 194, 196, 202, 221, 222, 239, 245, 258, 285, 286, 318, 332, 340, 341, 348, 363, 371, 379, 390, 397, 401, 414, 423, 426, 470, 475, 478], "numer": [7, 40, 46, 62, 63, 67, 83, 84, 89, 94, 99, 100, 103, 106, 107, 141, 144, 151, 154, 171, 173, 182, 187, 205, 207, 208, 209, 217, 221, 229, 230, 234, 236, 238, 241, 250, 257, 258, 262, 263, 271, 279, 285, 286, 289, 298, 304, 310, 315, 321, 327, 331, 333, 336, 337, 341, 348, 358, 364, 371, 372, 379, 382, 383, 384, 390, 408, 414, 417, 425, 444, 456, 458, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478], "analysi": [7, 32, 67, 101, 103, 149, 151, 186, 218, 250, 260, 275, 304, 381, 425, 428, 429, 431, 462, 471, 473, 478], "while": [7, 13, 22, 23, 28, 32, 34, 35, 39, 44, 48, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 109, 112, 113, 117, 119, 123, 130, 131, 133, 135, 136, 137, 144, 146, 148, 151, 154, 156, 163, 165, 166, 168, 171, 172, 173, 175, 179, 180, 182, 186, 187, 188, 189, 192, 195, 204, 205, 207, 209, 221, 222, 223, 226, 228, 230, 231, 232, 238, 239, 243, 246, 247, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 271, 279, 280, 288, 289, 292, 293, 295, 298, 304, 307, 310, 312, 314, 315, 322, 324, 325, 327, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 353, 355, 357, 359, 360, 361, 364, 366, 375, 376, 379, 381, 383, 389, 390, 394, 395, 396, 405, 408, 417, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 444, 445, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "characterist": [7, 84, 295, 342, 348, 462, 463], "back": [7, 10, 22, 25, 28, 34, 38, 40, 41, 57, 58, 62, 63, 67, 72, 75, 83, 84, 88, 89, 94, 96, 100, 102, 103, 106, 109, 117, 119, 125, 130, 143, 148, 151, 152, 154, 157, 163, 165, 173, 177, 179, 182, 186, 187, 189, 190, 192, 201, 204, 211, 218, 221, 226, 228, 231, 239, 241, 246, 254, 258, 264, 265, 274, 278, 279, 280, 288, 289, 291, 293, 295, 308, 310, 315, 326, 333, 334, 336, 337, 338, 340, 341, 348, 353, 357, 361, 364, 372, 373, 379, 385, 389, 390, 408, 412, 414, 415, 417, 420, 422, 423, 427, 431, 444, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 476, 477, 478], "desir": [7, 9, 23, 32, 41, 60, 72, 84, 91, 92, 93, 94, 99, 100, 103, 106, 117, 134, 136, 148, 154, 157, 163, 165, 172, 173, 185, 186, 187, 204, 208, 222, 231, 241, 243, 246, 255, 262, 263, 267, 268, 272, 274, 288, 293, 298, 303, 307, 315, 316, 334, 336, 337, 340, 341, 343, 349, 357, 359, 360, 364, 370, 371, 379, 381, 389, 394, 397, 400, 407, 408, 411, 423, 425, 427, 450, 457, 459, 460, 461, 462, 463, 464, 472, 473, 474, 476, 478], "situat": [7, 34, 41, 60, 62, 72, 74, 84, 87, 89, 93, 94, 98, 99, 100, 102, 107, 111, 117, 123, 148, 154, 165, 177, 187, 203, 209, 226, 231, 246, 249, 254, 263, 267, 279, 288, 331, 344, 357, 360, 385, 392, 395, 405, 423, 459, 464, 465, 469, 472, 473, 474, 478], "direct": [7, 13, 28, 30, 32, 33, 41, 44, 45, 48, 53, 57, 58, 60, 62, 63, 66, 67, 71, 72, 74, 75, 84, 87, 89, 92, 93, 96, 97, 98, 99, 100, 102, 107, 109, 111, 112, 117, 119, 120, 125, 129, 130, 136, 143, 146, 147, 148, 154, 155, 156, 157, 159, 160, 163, 165, 171, 172, 177, 179, 182, 183, 186, 187, 190, 192, 197, 201, 202, 205, 206, 208, 209, 214, 217, 221, 222, 228, 231, 238, 239, 241, 243, 247, 248, 249, 250, 251, 254, 255, 258, 262, 263, 264, 266, 267, 274, 276, 279, 288, 289, 291, 295, 298, 303, 304, 310, 315, 316, 320, 326, 331, 333, 334, 336, 337, 340, 341, 344, 348, 353, 357, 359, 360, 361, 362, 364, 369, 370, 371, 373, 375, 376, 379, 380, 383, 384, 385, 390, 395, 397, 402, 405, 408, 409, 412, 416, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 438, 450, 456, 457, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "intermedi": [7, 83, 86, 94, 182, 187, 202, 222, 246, 257, 271, 288, 289, 328, 337, 384, 427, 439, 462, 466, 470, 475, 478], "facil": [7, 32, 67, 89, 91, 99, 115, 139, 141, 152, 153, 173, 243, 250, 260, 265, 267, 289, 295, 333, 337, 341, 351, 353, 364, 379, 423, 456, 460, 478], "level": [7, 13, 16, 22, 23, 30, 31, 32, 33, 41, 42, 56, 58, 62, 67, 72, 73, 74, 78, 83, 84, 88, 89, 92, 93, 94, 96, 98, 102, 106, 107, 115, 117, 119, 122, 123, 126, 130, 132, 133, 134, 136, 137, 143, 146, 147, 149, 154, 156, 159, 160, 163, 165, 166, 173, 176, 177, 179, 186, 187, 189, 190, 198, 200, 203, 206, 207, 208, 209, 215, 219, 221, 222, 226, 230, 238, 239, 241, 243, 244, 246, 247, 250, 251, 252, 254, 256, 257, 264, 265, 266, 267, 275, 277, 278, 279, 280, 281, 284, 289, 291, 292, 293, 295, 296, 298, 300, 301, 303, 304, 307, 308, 309, 310, 311, 315, 317, 318, 320, 326, 327, 329, 330, 331, 336, 337, 343, 346, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 364, 370, 371, 376, 380, 381, 383, 384, 390, 394, 395, 397, 398, 402, 404, 405, 406, 408, 410, 414, 417, 419, 420, 422, 423, 424, 425, 426, 427, 430, 431, 435, 445, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "side": [7, 14, 22, 30, 32, 51, 59, 67, 72, 74, 83, 84, 89, 94, 100, 103, 106, 107, 119, 123, 130, 148, 151, 156, 165, 173, 177, 183, 186, 187, 192, 206, 222, 238, 239, 246, 262, 263, 265, 279, 284, 289, 295, 298, 307, 314, 319, 320, 326, 333, 334, 340, 344, 348, 357, 364, 371, 381, 383, 384, 402, 408, 420, 422, 425, 427, 431, 437, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "export": [7, 23, 41, 42, 44, 47, 62, 67, 70, 71, 72, 76, 84, 107, 115, 119, 147, 207, 295, 333, 336, 340, 348, 373, 431, 451, 460, 464, 470, 471, 473, 474, 475, 476, 477, 478], "expos": [7, 32, 37, 42, 43, 44, 45, 54, 56, 57, 60, 61, 62, 63, 71, 72, 75, 88, 99, 107, 123, 136, 172, 173, 177, 182, 206, 211, 246, 248, 251, 255, 262, 263, 277, 279, 289, 295, 303, 326, 327, 331, 340, 341, 342, 344, 348, 375, 379, 380, 382, 397, 400, 402, 415, 417, 420, 423, 427, 460, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "section": [7, 17, 33, 41, 50, 54, 57, 62, 63, 67, 70, 71, 72, 74, 75, 76, 84, 87, 89, 91, 92, 94, 96, 97, 99, 100, 103, 106, 107, 111, 117, 119, 123, 129, 130, 132, 134, 136, 140, 142, 148, 152, 154, 156, 163, 165, 171, 172, 177, 180, 182, 189, 190, 194, 198, 199, 208, 213, 217, 226, 231, 237, 238, 239, 243, 244, 254, 257, 258, 263, 264, 267, 288, 289, 295, 301, 303, 304, 310, 315, 317, 324, 328, 333, 336, 337, 340, 341, 343, 344, 348, 353, 360, 362, 364, 379, 381, 383, 384, 385, 389, 390, 402, 404, 405, 406, 408, 410, 411, 414, 417, 421, 422, 423, 424, 425, 427, 430, 431, 446, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "consum": [7, 58, 62, 63, 67, 83, 84, 94, 103, 111, 117, 122, 124, 131, 133, 148, 154, 165, 187, 190, 203, 238, 254, 257, 258, 279, 284, 288, 289, 292, 294, 304, 312, 315, 318, 326, 343, 357, 360, 377, 381, 384, 389, 404, 408, 423, 426, 450, 457, 461, 462, 463, 464, 470, 471, 472, 474, 476, 478], "sever": [7, 28, 32, 34, 41, 56, 65, 71, 72, 74, 76, 83, 84, 89, 92, 93, 94, 98, 99, 100, 103, 106, 107, 109, 117, 119, 123, 132, 134, 147, 153, 154, 157, 163, 172, 173, 179, 180, 182, 184, 187, 189, 195, 208, 209, 221, 237, 246, 251, 255, 263, 264, 265, 267, 269, 277, 279, 283, 288, 289, 291, 295, 303, 304, 307, 315, 317, 325, 329, 331, 333, 334, 336, 337, 338, 340, 343, 344, 353, 360, 364, 370, 371, 373, 375, 376, 379, 381, 382, 383, 384, 385, 390, 395, 397, 398, 400, 401, 404, 410, 414, 420, 422, 423, 427, 429, 431, 444, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478], "obtain": [7, 30, 63, 67, 91, 97, 99, 103, 123, 134, 146, 148, 149, 150, 173, 179, 182, 186, 192, 193, 199, 201, 204, 211, 221, 231, 244, 254, 255, 257, 262, 263, 264, 265, 266, 274, 279, 288, 289, 304, 307, 309, 315, 333, 337, 340, 344, 347, 361, 390, 394, 397, 402, 408, 409, 410, 421, 422, 425, 431, 456, 457, 459, 460, 462, 463, 470, 471, 472, 473, 474, 475, 478], "simpl": [7, 32, 34, 42, 62, 63, 66, 67, 72, 74, 83, 84, 89, 91, 93, 94, 97, 98, 99, 100, 106, 107, 110, 112, 117, 119, 135, 137, 138, 147, 148, 152, 154, 157, 163, 165, 166, 169, 170, 172, 177, 179, 180, 183, 185, 186, 190, 192, 196, 201, 203, 204, 205, 218, 222, 226, 230, 238, 240, 244, 250, 251, 252, 258, 264, 265, 267, 274, 279, 285, 288, 289, 291, 292, 293, 295, 300, 303, 304, 311, 315, 320, 325, 329, 331, 333, 336, 339, 340, 341, 343, 353, 354, 357, 360, 362, 364, 373, 375, 376, 379, 380, 381, 383, 385, 389, 390, 394, 395, 397, 401, 403, 404, 405, 406, 408, 409, 414, 415, 417, 422, 425, 426, 428, 435, 441, 450, 456, 457, 458, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479], "orient": [7, 41, 67, 75, 84, 86, 92, 94, 106, 130, 147, 197, 215, 218, 250, 279, 304, 333, 340, 360, 361, 364, 371, 435, 458, 463, 470, 472], "multi": [7, 16, 31, 32, 67, 70, 72, 83, 84, 85, 86, 93, 94, 98, 100, 103, 106, 110, 115, 119, 146, 147, 182, 186, 187, 189, 222, 230, 243, 246, 257, 263, 264, 266, 279, 312, 315, 318, 321, 327, 328, 336, 340, 360, 362, 402, 415, 417, 422, 430, 440, 450, 456, 457, 462, 464, 467, 469, 471, 472, 476, 478, 479], "valu": [7, 9, 11, 12, 13, 15, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 44, 45, 46, 48, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 73, 74, 75, 77, 78, 86, 87, 88, 91, 92, 97, 99, 100, 102, 103, 106, 107, 109, 111, 112, 114, 115, 119, 123, 126, 130, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 165, 166, 169, 171, 173, 174, 178, 179, 180, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 211, 212, 213, 214, 217, 221, 222, 224, 226, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 257, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 286, 287, 289, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 357, 359, 360, 361, 362, 364, 367, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 428, 430, 431, 435, 436, 437, 439, 441, 444, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "file": [7, 16, 23, 25, 30, 31, 32, 33, 40, 44, 48, 50, 58, 62, 65, 67, 71, 72, 74, 75, 76, 77, 78, 80, 83, 85, 86, 88, 92, 93, 94, 96, 98, 101, 103, 107, 109, 111, 112, 114, 115, 116, 118, 119, 122, 127, 128, 129, 130, 134, 136, 137, 138, 140, 141, 142, 143, 145, 148, 149, 150, 152, 153, 154, 156, 159, 165, 170, 171, 172, 173, 174, 179, 180, 181, 182, 183, 186, 187, 192, 196, 197, 200, 202, 203, 204, 208, 209, 211, 213, 214, 215, 216, 219, 221, 224, 225, 226, 227, 238, 239, 241, 244, 245, 248, 249, 250, 251, 253, 255, 256, 258, 260, 261, 262, 263, 265, 267, 269, 270, 272, 273, 275, 276, 277, 279, 282, 284, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 308, 309, 310, 315, 317, 318, 320, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 350, 354, 355, 356, 357, 358, 360, 361, 362, 363, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 394, 395, 397, 398, 399, 400, 401, 402, 404, 406, 407, 409, 411, 412, 414, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 435, 436, 437, 438, 440, 441, 443, 444, 445, 447, 450, 453, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 477, 478, 479], "seri": [7, 32, 60, 94, 103, 109, 117, 119, 152, 171, 172, 182, 187, 221, 231, 288, 310, 333, 340, 350, 360, 370, 381, 384, 385, 389, 402, 425, 436, 444, 445, 459, 461, 462, 463, 464, 472, 475], "written": [7, 9, 18, 23, 33, 41, 44, 48, 58, 63, 71, 72, 75, 83, 84, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 106, 109, 111, 114, 123, 130, 134, 136, 143, 148, 149, 153, 154, 157, 159, 163, 165, 171, 172, 173, 180, 187, 189, 192, 198, 201, 209, 210, 221, 226, 230, 231, 241, 243, 251, 254, 265, 267, 274, 277, 279, 284, 288, 289, 291, 295, 296, 297, 300, 303, 304, 307, 309, 316, 320, 324, 326, 328, 329, 333, 334, 336, 337, 340, 348, 353, 356, 357, 375, 377, 379, 380, 381, 383, 385, 395, 396, 397, 400, 402, 403, 405, 408, 414, 415, 416, 417, 418, 421, 423, 426, 429, 430, 431, 448, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "intern": [7, 9, 10, 11, 13, 16, 22, 23, 30, 32, 33, 40, 41, 44, 54, 58, 60, 62, 63, 67, 72, 74, 75, 83, 89, 91, 92, 94, 99, 100, 102, 103, 106, 107, 109, 115, 117, 119, 123, 125, 132, 133, 136, 137, 146, 151, 152, 153, 154, 157, 163, 171, 172, 177, 179, 180, 182, 187, 189, 195, 200, 203, 204, 206, 209, 231, 239, 241, 243, 246, 251, 254, 257, 261, 262, 263, 265, 266, 270, 271, 272, 274, 279, 289, 293, 295, 298, 303, 304, 310, 311, 318, 324, 327, 328, 329, 333, 336, 337, 342, 343, 344, 348, 353, 354, 357, 360, 361, 364, 370, 371, 376, 379, 381, 383, 390, 394, 395, 397, 405, 406, 408, 410, 414, 417, 418, 423, 424, 425, 445, 451, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "readinto": [7, 67, 115, 146, 238, 252, 254, 295, 463, 471, 473, 478], "argument": [7, 9, 11, 13, 18, 22, 23, 24, 25, 28, 30, 32, 33, 34, 36, 38, 41, 46, 48, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 72, 74, 75, 77, 78, 83, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 114, 115, 119, 123, 125, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 173, 174, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 214, 217, 219, 221, 222, 224, 226, 229, 230, 231, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 271, 272, 274, 275, 277, 278, 279, 280, 283, 284, 291, 292, 293, 295, 296, 297, 298, 300, 303, 304, 307, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 340, 341, 343, 346, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 361, 362, 364, 366, 371, 373, 375, 376, 379, 380, 381, 383, 384, 389, 390, 392, 394, 395, 397, 398, 400, 401, 402, 403, 405, 406, 408, 409, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 431, 435, 437, 438, 440, 441, 445, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478], "select": [7, 32, 58, 63, 65, 67, 83, 92, 93, 99, 101, 103, 104, 106, 117, 119, 123, 135, 138, 151, 156, 165, 172, 173, 206, 207, 209, 221, 226, 242, 243, 244, 247, 250, 252, 254, 256, 257, 258, 262, 264, 266, 277, 279, 284, 289, 295, 304, 307, 309, 314, 325, 329, 331, 333, 334, 336, 340, 341, 343, 344, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 379, 381, 385, 398, 402, 408, 412, 422, 423, 424, 425, 427, 451, 456, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 473, 474, 475, 476, 477, 478], "reject": [7, 77, 97, 103, 163, 239, 244, 271, 314, 353, 381, 430, 431, 457, 464, 472, 474, 478], "acquir": [7, 32, 67, 72, 88, 112, 115, 135, 160, 165, 204, 211, 263, 267, 279, 289, 329, 337, 353, 360, 369, 423, 462, 463, 464, 465, 468, 470, 471, 473, 475, 478], "over": [7, 13, 22, 23, 32, 41, 48, 60, 63, 67, 72, 73, 74, 83, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 106, 117, 119, 123, 130, 138, 141, 148, 149, 156, 157, 163, 166, 172, 173, 179, 180, 182, 186, 187, 189, 192, 197, 198, 200, 201, 207, 215, 221, 222, 226, 239, 243, 244, 246, 248, 249, 250, 254, 255, 257, 263, 264, 265, 267, 272, 274, 279, 284, 289, 295, 296, 301, 304, 315, 318, 324, 325, 328, 331, 333, 336, 337, 340, 341, 344, 346, 348, 353, 357, 362, 364, 370, 371, 372, 373, 375, 379, 380, 381, 383, 384, 385, 392, 395, 402, 404, 405, 407, 408, 414, 417, 422, 423, 425, 427, 430, 435, 436, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "target": [7, 32, 34, 63, 67, 83, 92, 96, 99, 100, 102, 117, 119, 123, 130, 133, 165, 179, 182, 187, 207, 237, 238, 243, 246, 247, 251, 264, 265, 269, 279, 280, 288, 289, 292, 310, 312, 315, 328, 329, 333, 334, 336, 347, 353, 357, 360, 364, 366, 381, 383, 384, 394, 402, 405, 408, 410, 414, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 431, 437, 450, 453, 456, 460, 462, 463, 465, 467, 469, 470, 471, 472, 475, 476, 478], "pyobject_getbuff": [7, 47, 56, 62, 463, 468, 478], "right": [7, 15, 41, 46, 63, 67, 71, 72, 84, 89, 91, 94, 100, 103, 106, 109, 119, 138, 141, 143, 148, 151, 152, 154, 156, 165, 172, 173, 179, 182, 186, 187, 189, 192, 209, 212, 215, 218, 221, 222, 231, 243, 244, 251, 263, 271, 284, 285, 288, 289, 291, 292, 295, 298, 304, 315, 326, 333, 337, 340, 341, 350, 359, 364, 369, 370, 371, 379, 383, 384, 385, 395, 398, 399, 406, 420, 421, 422, 423, 425, 426, 430, 431, 447, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 472, 474, 475, 476, 478], "sibl": [7, 84, 109, 117, 221, 371, 405], "isn": [7, 22, 23, 25, 30, 32, 60, 62, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 97, 98, 100, 102, 103, 106, 111, 112, 117, 119, 130, 136, 153, 154, 165, 179, 187, 189, 192, 198, 200, 201, 230, 239, 244, 251, 254, 265, 289, 292, 298, 310, 315, 333, 334, 337, 338, 348, 350, 364, 373, 383, 384, 385, 389, 398, 400, 401, 402, 404, 414, 423, 431, 444, 457, 458, 459, 460, 461, 462, 463, 464, 470, 478], "anymor": [7, 11, 30, 32, 62, 63, 84, 89, 130, 258, 279, 289, 293, 333, 348, 464, 465, 469, 470, 471, 476, 478], "could": [7, 22, 23, 27, 30, 32, 34, 38, 41, 46, 55, 60, 62, 72, 75, 76, 84, 87, 89, 91, 92, 93, 94, 98, 99, 100, 102, 106, 107, 109, 111, 117, 119, 123, 125, 126, 129, 130, 132, 135, 138, 148, 152, 163, 172, 173, 179, 189, 196, 197, 202, 204, 209, 212, 221, 222, 224, 226, 241, 243, 251, 254, 255, 257, 258, 263, 264, 265, 267, 279, 288, 289, 291, 292, 293, 295, 304, 307, 310, 315, 317, 325, 327, 329, 333, 336, 344, 348, 353, 357, 360, 364, 377, 381, 383, 384, 385, 389, 390, 392, 397, 402, 405, 417, 420, 423, 425, 427, 429, 430, 431, 438, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "lead": [7, 18, 28, 38, 62, 63, 72, 74, 77, 84, 93, 97, 98, 99, 100, 102, 103, 119, 136, 137, 147, 148, 152, 159, 163, 179, 182, 184, 186, 189, 192, 195, 201, 204, 209, 217, 221, 224, 239, 241, 243, 246, 251, 254, 255, 257, 263, 265, 267, 271, 272, 279, 289, 292, 293, 295, 304, 310, 314, 333, 337, 340, 341, 343, 348, 349, 351, 353, 354, 357, 359, 361, 362, 376, 383, 384, 389, 390, 395, 405, 408, 417, 422, 423, 424, 425, 427, 430, 431, 450, 456, 457, 460, 461, 462, 463, 465, 469, 471, 472, 474, 475, 476, 477, 478], "various": [7, 32, 41, 57, 62, 67, 72, 74, 78, 84, 89, 90, 91, 92, 93, 94, 102, 103, 106, 109, 114, 117, 130, 143, 148, 154, 165, 172, 174, 177, 182, 186, 189, 190, 193, 199, 204, 207, 209, 212, 213, 226, 238, 239, 246, 250, 254, 255, 257, 260, 264, 269, 274, 277, 281, 286, 288, 289, 292, 294, 296, 304, 310, 327, 331, 333, 334, 335, 336, 337, 340, 341, 343, 348, 349, 353, 357, 361, 364, 379, 380, 382, 383, 385, 390, 392, 402, 404, 408, 423, 425, 427, 430, 431, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 478], "resourc": [7, 23, 32, 62, 67, 83, 84, 90, 98, 107, 116, 117, 119, 129, 130, 132, 135, 139, 165, 184, 189, 208, 209, 222, 238, 244, 246, 247, 250, 253, 263, 276, 279, 280, 289, 295, 298, 325, 328, 333, 337, 340, 348, 357, 360, 364, 371, 377, 383, 386, 389, 390, 393, 395, 400, 402, 404, 408, 411, 414, 423, 427, 450, 460, 462, 463, 464, 468, 469, 470, 474, 477, 478], "leak": [7, 32, 37, 44, 58, 59, 72, 98, 100, 221, 223, 279, 289, 344, 348, 377, 425, 457, 458, 464, 465, 470, 472, 473, 477, 478], "simpli": [7, 62, 71, 72, 74, 75, 78, 83, 84, 87, 89, 94, 97, 100, 102, 103, 106, 117, 136, 147, 149, 152, 154, 163, 172, 173, 179, 182, 189, 221, 226, 246, 251, 258, 264, 265, 268, 279, 288, 289, 292, 293, 295, 300, 310, 315, 320, 321, 329, 331, 336, 338, 341, 344, 348, 360, 380, 381, 383, 384, 385, 390, 395, 397, 398, 402, 404, 405, 406, 414, 416, 427, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 473, 478], "programm": [7, 62, 72, 76, 79, 84, 86, 91, 92, 99, 171, 173, 177, 179, 182, 189, 190, 209, 262, 267, 271, 279, 288, 289, 291, 333, 336, 340, 343, 348, 364, 370, 379, 385, 395, 397, 400, 422, 431, 458, 459, 461, 462, 463, 470, 478], "slice": [7, 37, 39, 41, 53, 55, 59, 67, 84, 86, 94, 102, 118, 119, 138, 164, 167, 172, 187, 202, 209, 221, 224, 250, 257, 260, 274, 279, 280, 287, 289, 292, 295, 315, 336, 340, 361, 410, 423, 426, 431, 437, 441, 444, 445, 457, 459, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 475, 477, 478, 479], "mechan": [7, 11, 28, 32, 34, 44, 60, 62, 72, 74, 78, 83, 84, 91, 92, 93, 99, 100, 103, 111, 123, 136, 140, 165, 172, 177, 189, 193, 199, 222, 239, 240, 241, 242, 244, 247, 255, 256, 262, 263, 264, 265, 267, 268, 280, 288, 293, 295, 298, 315, 318, 320, 329, 331, 333, 334, 337, 340, 353, 360, 364, 370, 371, 380, 383, 390, 394, 395, 418, 421, 423, 427, 430, 431, 457, 458, 459, 460, 461, 462, 464, 466, 469, 470, 471, 472, 473, 476, 477, 478], "abil": [7, 71, 72, 84, 88, 91, 94, 99, 100, 103, 114, 119, 209, 249, 264, 279, 288, 320, 328, 340, 341, 381, 383, 405, 416, 417, 418, 421, 422, 458, 459, 460, 462, 463, 464, 470, 471, 472, 473, 474, 478], "quit": [7, 67, 71, 72, 75, 83, 84, 88, 89, 91, 94, 99, 100, 103, 117, 141, 164, 165, 172, 173, 180, 185, 196, 219, 243, 252, 254, 265, 271, 279, 284, 288, 293, 301, 305, 331, 336, 337, 346, 363, 364, 425, 427, 429, 436, 443, 445, 446, 457, 458, 459, 460, 462, 471, 472, 478], "easili": [7, 23, 41, 71, 72, 75, 83, 84, 88, 89, 93, 97, 99, 100, 102, 103, 111, 136, 148, 154, 163, 165, 171, 172, 196, 221, 226, 251, 293, 315, 327, 340, 357, 383, 397, 423, 430, 446, 456, 457, 460, 462, 466, 470, 471, 473, 474, 477, 478], "constant": [7, 25, 32, 44, 57, 62, 63, 67, 75, 83, 84, 89, 91, 93, 100, 112, 115, 117, 119, 123, 136, 147, 151, 154, 157, 160, 169, 171, 172, 174, 179, 180, 182, 187, 189, 207, 211, 221, 222, 231, 238, 240, 250, 251, 254, 257, 260, 262, 263, 266, 269, 271, 277, 278, 279, 288, 289, 291, 294, 295, 296, 300, 304, 315, 318, 322, 324, 325, 329, 333, 337, 338, 340, 348, 351, 353, 354, 356, 357, 358, 360, 364, 370, 373, 377, 381, 382, 395, 399, 401, 405, 407, 408, 410, 414, 417, 423, 425, 430, 436, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "manipul": [7, 13, 32, 33, 34, 41, 44, 54, 67, 72, 75, 94, 97, 100, 141, 142, 165, 172, 173, 179, 182, 190, 201, 203, 234, 250, 252, 265, 279, 281, 289, 292, 304, 320, 327, 328, 330, 333, 338, 340, 346, 348, 364, 370, 371, 389, 402, 405, 408, 415, 420, 427, 450, 457, 460, 463, 469, 471, 472, 474, 476, 477, 478], "system": [7, 16, 23, 32, 33, 41, 58, 62, 67, 72, 73, 76, 78, 83, 84, 85, 88, 91, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 111, 112, 115, 116, 118, 123, 130, 134, 139, 141, 147, 152, 159, 160, 163, 165, 169, 171, 172, 173, 179, 182, 183, 203, 204, 205, 206, 209, 210, 216, 221, 224, 226, 227, 241, 243, 246, 247, 248, 249, 250, 252, 253, 254, 262, 263, 264, 265, 266, 267, 268, 272, 274, 278, 279, 280, 283, 291, 292, 293, 295, 297, 298, 299, 302, 304, 305, 307, 310, 318, 320, 322, 324, 327, 328, 329, 330, 333, 334, 336, 337, 338, 340, 343, 346, 348, 350, 351, 353, 355, 356, 357, 360, 361, 364, 370, 377, 379, 380, 381, 383, 384, 385, 386, 390, 394, 398, 400, 401, 402, 404, 405, 408, 409, 410, 411, 414, 415, 416, 420, 421, 423, 428, 430, 431, 446, 450, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 475, 476, 477, 478, 479], "around": [7, 23, 25, 30, 32, 42, 58, 71, 72, 75, 78, 94, 96, 98, 100, 102, 111, 117, 136, 138, 145, 149, 152, 163, 165, 171, 173, 179, 182, 187, 189, 202, 211, 214, 217, 222, 243, 246, 251, 261, 265, 271, 277, 279, 280, 283, 288, 289, 293, 298, 315, 333, 337, 348, 353, 357, 364, 371, 376, 379, 381, 383, 397, 422, 423, 426, 437, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 478], "nativ": [7, 25, 32, 40, 63, 67, 89, 101, 106, 112, 142, 151, 154, 165, 166, 172, 179, 180, 204, 209, 231, 254, 289, 292, 326, 333, 336, 340, 348, 360, 363, 365, 379, 381, 417, 427, 456, 459, 464, 465, 470, 471, 472, 474, 475, 476, 477, 478], "contrari": [7, 60, 186], "veri": [7, 31, 32, 58, 62, 67, 72, 73, 74, 83, 84, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 103, 106, 107, 125, 146, 148, 154, 163, 165, 173, 179, 182, 186, 189, 192, 198, 199, 202, 203, 207, 226, 238, 241, 246, 251, 262, 266, 267, 279, 280, 284, 288, 289, 295, 304, 315, 324, 326, 331, 333, 334, 337, 342, 344, 348, 353, 354, 362, 364, 370, 379, 381, 383, 384, 385, 389, 421, 423, 425, 427, 431, 436, 456, 457, 458, 459, 460, 461, 462, 464, 465, 469, 470, 471, 472, 473, 474, 476, 478], "generic": [7, 16, 34, 48, 60, 61, 62, 67, 75, 84, 86, 89, 97, 99, 109, 130, 141, 148, 154, 157, 163, 180, 183, 187, 189, 190, 196, 199, 222, 231, 246, 250, 254, 264, 265, 277, 305, 321, 326, 333, 337, 357, 360, 373, 380, 389, 408, 424, 425, 426, 431, 453, 463, 467, 469, 470, 471, 472, 473, 474, 476, 478], "wrapper": [7, 18, 21, 23, 25, 30, 32, 41, 43, 57, 58, 67, 85, 86, 91, 92, 100, 105, 111, 115, 123, 134, 143, 145, 156, 165, 172, 173, 187, 189, 211, 222, 246, 250, 251, 256, 263, 271, 277, 279, 283, 289, 295, 298, 324, 333, 341, 357, 359, 363, 364, 376, 395, 402, 405, 408, 414, 420, 422, 423, 435, 457, 458, 459, 461, 462, 463, 464, 469, 470, 472, 473, 476, 478], "instruct": [7, 13, 26, 67, 76, 83, 94, 96, 148, 171, 182, 189, 236, 251, 260, 288, 289, 304, 310, 329, 336, 337, 383, 405, 408, 410, 423, 425, 450, 457, 462, 464, 468, 469, 470, 472, 476, 477, 478], "start": [7, 9, 11, 22, 23, 25, 32, 33, 41, 55, 62, 63, 65, 67, 71, 74, 75, 78, 79, 83, 84, 89, 92, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 111, 112, 114, 115, 117, 118, 119, 123, 129, 130, 134, 136, 137, 138, 139, 141, 143, 147, 148, 150, 153, 154, 156, 157, 160, 162, 165, 172, 173, 174, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 195, 197, 199, 201, 204, 207, 209, 211, 213, 216, 218, 221, 223, 226, 229, 236, 238, 239, 241, 243, 244, 247, 250, 251, 254, 255, 257, 258, 262, 263, 264, 265, 267, 268, 269, 271, 274, 277, 280, 284, 286, 288, 289, 290, 292, 293, 295, 296, 298, 301, 304, 305, 308, 309, 310, 312, 314, 315, 316, 328, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 349, 351, 353, 357, 358, 360, 361, 363, 364, 366, 371, 373, 375, 376, 377, 381, 383, 389, 390, 394, 395, 397, 398, 402, 405, 406, 408, 410, 412, 416, 417, 422, 423, 425, 426, 427, 430, 431, 436, 437, 446, 447, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "logic": [7, 67, 83, 84, 87, 94, 98, 100, 111, 136, 157, 165, 173, 177, 187, 189, 203, 217, 228, 252, 263, 265, 266, 267, 277, 286, 292, 298, 315, 340, 341, 351, 355, 357, 364, 372, 381, 383, 422, 431, 457, 460, 461, 463, 464, 469, 471, 475, 476, 478], "physic": [7, 67, 91, 173, 189, 243, 248, 274, 277, 333, 340, 372, 373, 379, 400, 427, 462, 475], "negat": [7, 15, 18, 22, 23, 30, 37, 38, 41, 44, 46, 48, 53, 57, 59, 60, 62, 63, 65, 89, 92, 93, 94, 98, 103, 112, 117, 119, 130, 134, 143, 146, 147, 150, 151, 154, 156, 171, 172, 173, 174, 179, 182, 207, 217, 221, 222, 254, 255, 257, 258, 262, 266, 271, 274, 279, 289, 292, 295, 304, 314, 315, 316, 324, 327, 328, 329, 333, 336, 337, 340, 341, 344, 348, 360, 361, 364, 367, 376, 379, 405, 408, 422, 423, 425, 426, 431, 436, 437, 457, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "begin": [7, 18, 23, 34, 57, 72, 74, 75, 77, 78, 83, 84, 89, 94, 100, 102, 103, 114, 117, 136, 147, 148, 152, 163, 173, 174, 179, 182, 186, 189, 192, 197, 205, 211, 243, 246, 251, 254, 258, 266, 267, 274, 279, 284, 289, 292, 293, 297, 298, 310, 315, 316, 320, 330, 331, 336, 337, 340, 341, 343, 353, 354, 357, 359, 362, 364, 371, 373, 379, 383, 396, 408, 410, 411, 420, 422, 423, 424, 425, 427, 429, 430, 431, 444, 450, 451, 456, 459, 462, 463, 464, 467, 469, 474, 475, 478], "obj": [7, 9, 10, 23, 24, 26, 28, 32, 35, 38, 42, 44, 47, 48, 51, 62, 63, 67, 74, 76, 77, 83, 84, 86, 89, 92, 93, 94, 100, 109, 126, 136, 139, 154, 157, 172, 175, 177, 187, 189, 193, 204, 207, 209, 221, 223, 251, 255, 258, 274, 279, 287, 295, 317, 340, 341, 357, 377, 381, 383, 384, 397, 423, 426, 435, 436, 457, 458, 459, 460, 461, 462, 463, 467, 468, 473, 475, 476, 478], "automat": [7, 23, 28, 32, 44, 54, 58, 60, 62, 67, 70, 72, 75, 83, 84, 89, 91, 94, 97, 102, 103, 106, 109, 117, 123, 129, 130, 136, 137, 148, 152, 154, 157, 163, 165, 172, 173, 177, 180, 182, 183, 186, 187, 189, 192, 197, 201, 202, 204, 205, 209, 221, 222, 230, 238, 239, 244, 246, 251, 263, 264, 266, 267, 268, 274, 277, 279, 284, 288, 289, 293, 295, 304, 309, 314, 316, 319, 324, 326, 328, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 351, 353, 355, 357, 360, 361, 362, 363, 364, 371, 379, 381, 383, 384, 385, 389, 390, 396, 397, 400, 402, 406, 410, 414, 417, 418, 421, 423, 424, 425, 427, 431, 441, 446, 447, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "temporari": [7, 22, 39, 48, 54, 62, 67, 100, 107, 109, 141, 172, 181, 189, 243, 248, 254, 257, 262, 267, 268, 279, 289, 293, 320, 336, 340, 348, 353, 355, 357, 377, 383, 390, 397, 453, 459, 461, 463, 470, 471, 472, 477, 478], "pymemoryview_frombuff": [7, 42, 56, 468, 478], "pybuffer_fillinfo": [7, 56, 62, 468, 478], "general": [7, 13, 23, 32, 36, 39, 41, 50, 53, 56, 62, 67, 71, 72, 75, 83, 84, 86, 89, 90, 92, 93, 98, 99, 100, 103, 106, 117, 119, 123, 130, 136, 143, 148, 149, 154, 163, 165, 172, 173, 177, 178, 179, 180, 182, 187, 199, 204, 209, 220, 221, 222, 231, 238, 239, 240, 243, 246, 250, 257, 262, 263, 264, 265, 266, 267, 269, 271, 279, 284, 289, 295, 301, 303, 310, 315, 316, 321, 326, 331, 333, 337, 338, 340, 341, 343, 344, 346, 348, 353, 359, 361, 364, 370, 376, 379, 381, 382, 384, 385, 389, 390, 394, 400, 402, 403, 404, 406, 407, 408, 409, 410, 412, 420, 421, 422, 423, 425, 426, 429, 430, 431, 450, 453, 456, 457, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478], "scheme": [7, 30, 62, 74, 77, 94, 100, 107, 133, 138, 154, 172, 179, 206, 243, 265, 267, 330, 336, 337, 348, 350, 353, 370, 389, 390, 394, 402, 423, 450, 457, 458, 460, 463, 464, 469, 470, 471, 472, 473, 478], "len": [7, 8, 9, 22, 37, 39, 40, 48, 53, 54, 59, 63, 67, 75, 84, 86, 92, 93, 100, 103, 104, 106, 111, 138, 139, 144, 146, 148, 156, 157, 162, 166, 172, 184, 186, 187, 189, 207, 211, 221, 222, 226, 231, 232, 238, 243, 250, 257, 265, 274, 279, 280, 284, 287, 288, 289, 292, 301, 314, 316, 331, 333, 336, 337, 339, 340, 343, 357, 377, 380, 384, 395, 402, 403, 405, 408, 422, 423, 430, 435, 436, 437, 438, 444, 445, 446, 457, 460, 461, 462, 463, 464, 465, 468, 470, 471, 472, 473, 476, 478], "product": [7, 67, 79, 83, 94, 99, 119, 122, 140, 182, 189, 220, 232, 241, 243, 257, 265, 271, 314, 323, 340, 348, 379, 383, 384, 416, 421, 425, 430, 435, 445, 454, 457, 458, 462, 463, 464, 466, 469, 471, 474, 476, 478], "items": [7, 60, 67, 118, 178, 279, 333, 340, 478], "guarante": [7, 9, 11, 18, 32, 34, 41, 53, 57, 58, 60, 62, 63, 66, 71, 72, 75, 84, 87, 89, 91, 94, 96, 102, 112, 119, 123, 136, 172, 179, 182, 187, 189, 192, 201, 221, 222, 228, 231, 239, 246, 251, 254, 258, 271, 272, 274, 279, 284, 288, 289, 295, 304, 320, 324, 327, 340, 343, 344, 348, 355, 357, 359, 360, 373, 381, 395, 397, 400, 402, 403, 408, 410, 420, 422, 423, 427, 456, 461, 462, 464, 466, 470, 471, 474, 475, 476, 477, 478], "pybuf_simpl": 7, "pybuf_writ": [7, 42, 463], "control": [7, 31, 32, 33, 34, 41, 49, 57, 67, 72, 73, 74, 76, 78, 82, 83, 84, 91, 92, 93, 98, 99, 100, 103, 112, 117, 123, 127, 129, 130, 134, 136, 140, 141, 146, 148, 149, 152, 154, 159, 171, 172, 173, 174, 179, 180, 182, 186, 187, 189, 190, 192, 193, 197, 198, 201, 203, 204, 206, 207, 209, 211, 214, 218, 221, 225, 230, 241, 243, 244, 246, 250, 251, 252, 254, 255, 258, 260, 263, 264, 265, 267, 272, 277, 278, 279, 280, 284, 288, 289, 291, 293, 294, 295, 301, 303, 304, 305, 307, 310, 311, 317, 318, 324, 325, 327, 329, 333, 334, 337, 339, 340, 342, 343, 344, 346, 348, 353, 359, 360, 362, 363, 364, 369, 370, 371, 375, 376, 380, 383, 384, 385, 386, 389, 390, 397, 400, 401, 402, 408, 410, 412, 414, 415, 417, 421, 422, 423, 424, 425, 427, 429, 431, 433, 438, 443, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "flag": [7, 9, 10, 13, 18, 24, 28, 32, 33, 42, 48, 49, 60, 62, 63, 65, 67, 71, 72, 74, 75, 88, 97, 98, 99, 100, 101, 102, 106, 109, 111, 115, 123, 133, 135, 139, 140, 141, 152, 154, 172, 173, 177, 178, 179, 180, 182, 183, 184, 187, 192, 203, 204, 205, 207, 211, 221, 223, 234, 239, 244, 253, 254, 260, 262, 263, 264, 267, 272, 274, 277, 278, 279, 284, 289, 292, 297, 301, 303, 309, 310, 311, 324, 326, 328, 329, 330, 333, 334, 336, 337, 338, 340, 341, 344, 346, 348, 355, 356, 357, 358, 360, 361, 371, 380, 381, 383, 389, 390, 395, 401, 402, 403, 414, 415, 417, 420, 422, 423, 427, 445, 450, 453, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "struct": [7, 15, 16, 21, 26, 30, 32, 38, 44, 56, 57, 60, 62, 65, 67, 72, 74, 75, 77, 83, 85, 89, 98, 100, 118, 138, 142, 172, 211, 221, 250, 264, 265, 280, 333, 340, 361, 414, 435, 447, 459, 462, 463, 464, 467, 468, 469, 470, 475, 476, 477, 478], "calcsiz": [7, 67, 142, 221, 333, 340, 343, 478], "import": [7, 11, 23, 30, 32, 33, 34, 41, 44, 58, 62, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 122, 123, 128, 130, 131, 133, 134, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 152, 156, 158, 159, 162, 163, 164, 165, 166, 168, 169, 171, 172, 177, 179, 180, 182, 183, 184, 186, 187, 189, 191, 192, 196, 198, 201, 203, 204, 205, 209, 210, 211, 212, 214, 216, 217, 219, 221, 222, 224, 226, 227, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 248, 250, 251, 253, 254, 257, 258, 260, 261, 262, 266, 267, 268, 271, 272, 274, 275, 276, 279, 280, 284, 288, 289, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 360, 361, 362, 363, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 389, 390, 391, 393, 394, 395, 397, 401, 402, 403, 404, 405, 406, 407, 408, 410, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 428, 430, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 450, 451, 456, 457, 459, 464, 465, 466, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479], "pybuf_format": 7, "still": [7, 9, 13, 22, 23, 27, 28, 30, 32, 33, 57, 62, 71, 72, 74, 75, 76, 83, 84, 89, 91, 93, 94, 97, 98, 99, 100, 102, 103, 107, 111, 117, 119, 130, 136, 140, 148, 154, 159, 163, 165, 166, 172, 173, 177, 182, 189, 190, 198, 202, 204, 209, 222, 226, 239, 243, 246, 248, 251, 263, 264, 265, 267, 271, 274, 279, 280, 288, 289, 291, 292, 295, 304, 310, 315, 318, 319, 320, 324, 326, 329, 330, 333, 334, 336, 337, 340, 341, 344, 348, 355, 357, 359, 360, 364, 371, 377, 380, 381, 383, 384, 385, 390, 397, 402, 404, 405, 408, 411, 421, 422, 423, 425, 427, 430, 431, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "present": [7, 22, 30, 33, 38, 44, 48, 62, 67, 72, 73, 76, 78, 84, 91, 92, 93, 94, 96, 99, 100, 102, 103, 106, 107, 111, 112, 117, 119, 140, 143, 148, 149, 150, 152, 154, 157, 163, 172, 173, 177, 180, 182, 186, 187, 189, 192, 193, 201, 206, 209, 211, 217, 221, 222, 231, 239, 241, 243, 246, 247, 251, 255, 258, 263, 264, 265, 267, 272, 274, 280, 284, 288, 289, 292, 293, 295, 299, 303, 304, 309, 310, 315, 318, 327, 331, 333, 337, 340, 341, 348, 353, 354, 357, 359, 360, 361, 362, 364, 366, 370, 371, 373, 376, 379, 381, 383, 389, 390, 397, 402, 405, 408, 410, 414, 416, 418, 422, 423, 425, 427, 430, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "hold": [7, 9, 23, 27, 32, 34, 44, 50, 54, 57, 62, 65, 72, 84, 86, 92, 98, 99, 100, 117, 119, 121, 136, 163, 165, 166, 172, 179, 182, 187, 199, 211, 238, 241, 251, 253, 264, 265, 267, 279, 280, 288, 289, 298, 304, 315, 318, 321, 326, 333, 337, 340, 344, 348, 357, 360, 364, 376, 383, 397, 400, 406, 408, 410, 416, 421, 423, 427, 431, 457, 458, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "navig": [7, 67, 91, 173, 292, 309, 363, 370, 478], "disregard": [7, 32, 340], "string": [7, 8, 9, 11, 16, 18, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 38, 39, 40, 41, 44, 46, 48, 52, 57, 58, 62, 64, 65, 67, 71, 72, 74, 75, 78, 86, 87, 88, 89, 91, 92, 94, 96, 97, 99, 100, 102, 105, 107, 109, 110, 111, 114, 117, 118, 119, 123, 130, 134, 136, 138, 140, 141, 142, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 160, 163, 165, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 182, 184, 186, 187, 189, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 221, 222, 224, 226, 229, 230, 231, 234, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 260, 262, 263, 264, 265, 267, 268, 270, 272, 274, 277, 278, 279, 280, 283, 284, 285, 287, 289, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 316, 317, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 346, 347, 348, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 431, 437, 439, 440, 442, 444, 445, 447, 450, 451, 456, 458, 459, 462, 464, 466, 467, 470, 472, 473, 478, 479], "ndim": [7, 67, 340], "dimens": [7, 172, 173, 271, 328, 340, 463, 471, 476, 478], "dimension": [7, 86, 199, 271, 295, 314, 340, 370, 379, 471, 473, 478], "scalar": [7, 138, 192, 195, 222, 379, 381, 478], "maximum": [7, 25, 58, 63, 84, 92, 94, 99, 100, 103, 112, 123, 136, 138, 148, 151, 154, 159, 163, 172, 173, 182, 186, 191, 198, 199, 204, 209, 231, 243, 257, 258, 265, 266, 271, 274, 277, 279, 284, 289, 295, 301, 303, 315, 316, 317, 318, 325, 333, 335, 336, 337, 339, 341, 344, 348, 353, 359, 360, 371, 373, 377, 379, 383, 389, 390, 402, 408, 430, 450, 457, 459, 460, 462, 463, 464, 470, 471, 473, 474, 475, 478], "pybuf_max_ndim": 7, "restrict": [7, 32, 41, 57, 67, 72, 74, 75, 88, 89, 92, 98, 100, 103, 112, 117, 119, 147, 154, 172, 173, 179, 182, 186, 201, 219, 221, 226, 231, 243, 252, 253, 258, 279, 289, 294, 304, 308, 315, 323, 333, 336, 337, 340, 341, 342, 344, 349, 351, 360, 361, 381, 384, 405, 408, 414, 415, 421, 422, 423, 425, 426, 430, 431, 450, 456, 458, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "attent": [7, 98, 103, 173, 379, 460, 470, 472], "further": [7, 32, 40, 62, 67, 72, 74, 75, 77, 78, 84, 87, 89, 94, 97, 99, 100, 106, 107, 116, 119, 136, 141, 146, 148, 150, 154, 165, 169, 172, 177, 183, 187, 189, 207, 209, 214, 224, 243, 262, 263, 265, 266, 271, 278, 288, 289, 291, 293, 295, 315, 328, 329, 333, 334, 336, 337, 340, 341, 348, 349, 361, 364, 376, 381, 404, 405, 408, 410, 416, 420, 422, 423, 425, 427, 430, 439, 450, 456, 457, 458, 459, 460, 461, 463, 464, 469, 471, 475, 476, 478], "skip": [7, 32, 33, 34, 57, 67, 83, 89, 94, 102, 103, 106, 136, 141, 150, 154, 159, 163, 165, 179, 183, 187, 189, 200, 201, 206, 214, 246, 251, 257, 258, 263, 267, 268, 293, 300, 315, 327, 330, 338, 340, 343, 346, 348, 353, 357, 371, 381, 394, 408, 410, 421, 422, 431, 447, 450, 456, 457, 459, 460, 461, 462, 463, 464, 466, 469, 470, 472, 477, 478], "regular": [7, 11, 32, 33, 41, 62, 67, 75, 83, 84, 86, 92, 94, 100, 102, 117, 119, 123, 130, 156, 157, 159, 163, 165, 171, 172, 177, 182, 189, 196, 206, 209, 216, 221, 222, 230, 239, 243, 250, 251, 257, 262, 264, 289, 292, 295, 304, 307, 324, 329, 331, 333, 337, 338, 340, 341, 348, 353, 354, 357, 358, 379, 381, 383, 390, 395, 397, 423, 424, 425, 430, 431, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "abl": [7, 32, 62, 72, 74, 75, 76, 83, 88, 89, 91, 93, 99, 100, 101, 102, 103, 106, 119, 138, 148, 154, 155, 165, 172, 173, 177, 179, 190, 209, 231, 251, 263, 264, 265, 288, 289, 291, 293, 295, 305, 310, 315, 328, 333, 336, 337, 344, 353, 357, 360, 379, 384, 389, 395, 401, 402, 408, 416, 422, 423, 429, 450, 451, 456, 457, 458, 459, 462, 464, 469, 470, 471, 472, 475, 476, 478], "handl": [7, 25, 30, 31, 32, 33, 34, 41, 48, 50, 55, 60, 62, 63, 65, 67, 72, 74, 75, 78, 84, 88, 89, 90, 91, 93, 94, 97, 98, 99, 102, 103, 106, 109, 110, 112, 115, 117, 119, 129, 136, 137, 139, 141, 143, 146, 148, 149, 151, 153, 154, 163, 165, 166, 171, 172, 177, 179, 182, 183, 185, 186, 187, 189, 192, 196, 197, 198, 199, 203, 204, 207, 208, 209, 211, 221, 222, 226, 230, 238, 240, 241, 243, 244, 246, 249, 250, 251, 252, 254, 255, 258, 263, 264, 265, 266, 267, 271, 274, 278, 279, 281, 289, 291, 292, 293, 294, 304, 305, 307, 315, 317, 324, 326, 327, 328, 329, 331, 333, 334, 336, 338, 340, 341, 344, 346, 348, 353, 357, 360, 361, 366, 370, 373, 381, 384, 385, 390, 395, 397, 398, 399, 402, 404, 408, 410, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 427, 430, 431, 438, 447, 450, 456, 457, 458, 459, 461, 462, 465, 466, 467, 469, 470, 471, 474, 475, 476, 477, 478, 479], "along": [7, 57, 89, 94, 98, 99, 100, 117, 123, 137, 138, 146, 151, 159, 165, 172, 182, 189, 199, 201, 214, 226, 230, 231, 240, 246, 247, 263, 265, 274, 289, 295, 304, 325, 331, 333, 337, 340, 341, 344, 364, 371, 375, 379, 381, 383, 384, 402, 409, 416, 421, 422, 457, 458, 459, 460, 461, 463, 464, 470, 472, 473, 478], "nth": [7, 257, 371], "dictat": [7, 86, 163, 218, 221, 295, 333, 456, 457, 463], "mani": [7, 13, 18, 32, 33, 34, 62, 63, 71, 72, 74, 75, 78, 83, 89, 91, 93, 94, 97, 98, 99, 100, 103, 106, 107, 114, 117, 119, 125, 130, 134, 136, 140, 151, 154, 159, 163, 165, 172, 173, 174, 177, 179, 182, 186, 187, 189, 190, 199, 204, 208, 221, 226, 231, 238, 239, 240, 243, 246, 254, 255, 257, 258, 261, 263, 271, 274, 279, 280, 284, 288, 289, 291, 292, 294, 295, 301, 303, 304, 310, 315, 321, 324, 326, 328, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 353, 354, 357, 359, 360, 361, 362, 364, 370, 375, 376, 379, 380, 381, 384, 385, 390, 397, 398, 400, 401, 402, 405, 410, 422, 423, 427, 429, 431, 448, 450, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "de": [7, 12, 23, 28, 40, 67, 73, 79, 116, 173, 226, 239, 248, 257, 284, 295, 340, 353, 381, 389, 414, 467, 468, 469, 472, 474, 475, 477, 478], "might": [7, 23, 32, 34, 57, 62, 63, 72, 74, 75, 84, 87, 89, 91, 93, 94, 98, 99, 100, 102, 103, 106, 107, 111, 119, 129, 134, 136, 138, 141, 143, 154, 172, 175, 177, 179, 187, 189, 192, 201, 203, 205, 209, 217, 230, 231, 234, 239, 243, 254, 255, 262, 263, 264, 265, 267, 268, 274, 279, 280, 284, 288, 289, 291, 295, 298, 301, 304, 315, 331, 333, 336, 337, 340, 348, 357, 360, 362, 364, 379, 381, 384, 385, 389, 390, 395, 397, 403, 408, 417, 423, 427, 429, 445, 450, 456, 457, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 474, 475, 478], "re": [7, 32, 41, 44, 62, 67, 71, 72, 74, 75, 76, 83, 84, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 106, 111, 119, 136, 137, 141, 142, 152, 156, 159, 163, 165, 172, 173, 179, 182, 183, 186, 187, 189, 192, 197, 201, 203, 207, 216, 239, 243, 244, 246, 250, 254, 255, 262, 263, 264, 265, 267, 274, 275, 279, 284, 288, 289, 291, 292, 293, 304, 311, 334, 337, 340, 341, 344, 348, 358, 359, 360, 362, 364, 372, 373, 379, 381, 385, 389, 390, 395, 402, 408, 410, 414, 422, 423, 424, 427, 429, 430, 431, 436, 446, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 476, 478], "cast": [7, 32, 41, 44, 57, 60, 63, 67, 72, 75, 89, 115, 172, 182, 183, 257, 340, 376, 381, 471, 475, 476, 478], "freed": [7, 13, 22, 27, 32, 41, 44, 72, 74, 98, 100, 228, 279, 289, 325, 423, 458, 460, 462, 474, 478], "alter": [7, 22, 41, 84, 123, 150, 182, 204, 239, 243, 244, 258, 264, 268, 295, 320, 340, 341, 379, 421, 423, 427, 457, 461, 470, 472, 476, 478], "limit": [7, 13, 23, 26, 32, 33, 34, 38, 56, 57, 58, 60, 62, 63, 67, 74, 84, 89, 91, 93, 94, 96, 100, 103, 109, 116, 117, 119, 123, 129, 130, 133, 134, 136, 139, 146, 154, 159, 165, 169, 180, 182, 187, 197, 203, 204, 207, 210, 211, 221, 222, 231, 243, 244, 250, 253, 257, 264, 266, 272, 278, 279, 280, 281, 288, 289, 291, 295, 303, 304, 308, 310, 315, 317, 320, 326, 329, 330, 333, 336, 337, 339, 341, 344, 348, 353, 357, 360, 368, 370, 376, 377, 379, 384, 386, 400, 402, 405, 408, 416, 421, 423, 424, 425, 427, 429, 430, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "64": [7, 63, 67, 84, 92, 93, 97, 104, 133, 140, 143, 172, 173, 179, 182, 221, 231, 255, 257, 266, 279, 280, 289, 299, 300, 302, 328, 333, 337, 340, 343, 348, 379, 399, 414, 423, 437, 441, 444, 451, 456, 457, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "send": [7, 67, 78, 83, 91, 94, 99, 102, 103, 104, 107, 115, 123, 125, 130, 133, 134, 138, 139, 148, 149, 154, 157, 160, 165, 173, 187, 190, 196, 197, 208, 219, 226, 238, 240, 241, 243, 244, 252, 253, 263, 264, 265, 274, 279, 280, 284, 289, 295, 301, 312, 325, 329, 331, 333, 334, 337, 344, 351, 356, 357, 364, 379, 381, 390, 402, 414, 423, 425, 447, 457, 460, 461, 462, 464, 468, 469, 470, 471, 473, 474, 475, 477, 478], "via": [7, 32, 41, 44, 60, 62, 63, 67, 72, 75, 83, 84, 88, 89, 94, 96, 99, 107, 109, 112, 117, 119, 136, 137, 141, 148, 163, 166, 179, 186, 189, 192, 196, 197, 198, 201, 202, 203, 204, 209, 212, 214, 217, 221, 224, 229, 231, 238, 243, 247, 251, 257, 258, 261, 262, 263, 264, 265, 274, 279, 280, 288, 289, 293, 294, 295, 298, 301, 304, 310, 315, 316, 317, 319, 331, 333, 334, 337, 340, 341, 344, 348, 350, 355, 357, 379, 381, 383, 384, 390, 395, 400, 402, 405, 408, 414, 420, 422, 423, 425, 450, 453, 457, 462, 463, 464, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478], "drastic": [7, 109], "unambigu": [7, 117, 119, 179, 264, 304, 331, 423, 431, 463, 470], "influenc": [7, 295, 333, 450, 463, 478], "correct": [7, 25, 32, 44, 62, 63, 65, 67, 70, 72, 75, 76, 84, 89, 92, 93, 94, 97, 98, 100, 106, 107, 109, 111, 114, 117, 130, 148, 154, 165, 171, 172, 179, 182, 183, 184, 187, 189, 192, 193, 195, 199, 204, 205, 207, 212, 221, 239, 243, 244, 250, 255, 262, 271, 274, 279, 285, 288, 289, 291, 295, 310, 320, 327, 328, 333, 336, 337, 339, 340, 341, 343, 344, 348, 353, 361, 364, 379, 381, 383, 384, 385, 394, 396, 400, 402, 410, 416, 420, 423, 425, 427, 430, 439, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "els": [7, 22, 28, 34, 35, 40, 41, 52, 62, 63, 67, 71, 72, 74, 75, 77, 78, 83, 84, 87, 88, 89, 94, 98, 100, 102, 103, 104, 107, 111, 119, 123, 133, 136, 148, 156, 162, 165, 169, 172, 179, 182, 186, 187, 189, 192, 196, 203, 222, 224, 226, 236, 238, 243, 244, 246, 257, 258, 263, 265, 267, 272, 279, 285, 287, 288, 289, 295, 305, 314, 315, 325, 328, 333, 336, 337, 338, 339, 340, 344, 348, 353, 355, 357, 360, 367, 373, 379, 380, 381, 384, 394, 395, 397, 402, 405, 417, 423, 425, 426, 427, 429, 430, 431, 438, 440, 450, 456, 457, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 477, 478], "report": [7, 22, 32, 39, 44, 60, 67, 71, 72, 84, 96, 97, 99, 101, 103, 106, 117, 119, 130, 148, 149, 162, 171, 172, 173, 186, 187, 189, 192, 199, 201, 209, 212, 215, 221, 229, 251, 255, 257, 275, 276, 279, 288, 289, 304, 310, 315, 324, 325, 329, 335, 337, 338, 340, 348, 357, 362, 364, 375, 381, 383, 390, 395, 408, 410, 426, 450, 456, 457, 459, 460, 461, 462, 463, 464, 470, 471, 472, 474, 476, 478], "either": [7, 11, 22, 23, 32, 42, 44, 48, 54, 57, 58, 60, 62, 63, 66, 70, 71, 72, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 114, 117, 119, 123, 130, 134, 136, 138, 140, 141, 142, 146, 148, 151, 154, 165, 168, 169, 171, 172, 173, 174, 177, 179, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 201, 202, 203, 204, 205, 207, 209, 211, 217, 221, 231, 238, 239, 241, 243, 244, 246, 248, 251, 253, 254, 255, 257, 258, 263, 264, 265, 266, 267, 268, 271, 274, 277, 279, 280, 284, 288, 289, 291, 292, 293, 295, 297, 298, 304, 305, 307, 310, 315, 318, 320, 321, 324, 325, 327, 328, 330, 333, 336, 337, 340, 341, 343, 344, 348, 350, 353, 354, 355, 357, 360, 361, 364, 370, 371, 373, 376, 379, 381, 383, 384, 389, 390, 394, 395, 396, 397, 398, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 427, 430, 431, 436, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "choic": [7, 67, 72, 83, 84, 88, 100, 102, 107, 115, 148, 151, 170, 189, 207, 221, 226, 243, 251, 263, 264, 267, 279, 286, 288, 304, 310, 314, 320, 322, 325, 326, 337, 339, 340, 343, 346, 370, 426, 429, 436, 446, 459, 462, 469, 470, 473, 474, 475, 478], "next": [7, 23, 26, 32, 36, 41, 62, 63, 67, 71, 72, 74, 75, 84, 86, 89, 91, 92, 93, 94, 97, 100, 102, 103, 106, 109, 111, 114, 116, 123, 136, 138, 141, 146, 148, 150, 152, 153, 155, 156, 157, 163, 171, 172, 173, 182, 186, 187, 189, 190, 191, 192, 193, 201, 207, 209, 214, 217, 221, 222, 226, 232, 238, 239, 243, 249, 250, 251, 257, 263, 265, 266, 267, 274, 278, 279, 284, 288, 289, 292, 293, 303, 304, 310, 315, 316, 321, 326, 327, 329, 333, 334, 336, 337, 340, 341, 344, 346, 349, 353, 363, 364, 370, 371, 379, 384, 385, 390, 395, 408, 420, 422, 423, 424, 425, 427, 429, 431, 435, 437, 444, 445, 447, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 473, 475, 476, 477, 479], "stand": [7, 80, 85, 106, 165, 182, 206, 271, 288, 298, 315, 415, 416, 422, 430, 457, 462, 463, 464, 470, 472, 475, 476, 478], "alon": [7, 63, 74, 80, 85, 100, 103, 119, 246, 293, 315, 320, 327, 415, 421, 422, 429, 459, 462, 472, 478], "impli": [7, 30, 41, 57, 62, 88, 100, 106, 109, 159, 177, 254, 288, 310, 316, 336, 337, 340, 410, 417, 421, 423, 425, 431, 450, 451, 456, 463, 472, 475, 476, 478], "decreas": [7, 135, 179, 187, 255, 361, 457, 461, 464, 471, 474, 476, 478], "below": [7, 23, 30, 32, 44, 54, 56, 58, 59, 60, 62, 63, 65, 67, 72, 75, 84, 87, 89, 92, 93, 94, 99, 100, 107, 111, 112, 114, 115, 117, 130, 141, 146, 151, 154, 163, 168, 171, 173, 175, 177, 179, 182, 184, 185, 187, 189, 191, 199, 204, 209, 217, 226, 229, 231, 238, 239, 241, 243, 244, 245, 246, 248, 254, 262, 263, 264, 265, 272, 278, 279, 284, 288, 289, 291, 292, 293, 303, 310, 315, 316, 317, 318, 320, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 343, 344, 348, 349, 351, 353, 354, 357, 359, 360, 361, 364, 366, 371, 375, 379, 381, 383, 384, 385, 390, 398, 401, 408, 409, 414, 415, 417, 421, 422, 423, 424, 425, 426, 427, 430, 436, 456, 457, 458, 460, 462, 463, 464, 465, 469, 472, 473, 478], "pybuf_indirect": 7, "yes": [7, 72, 78, 84, 88, 96, 163, 182, 189, 262, 263, 310, 315, 337, 364, 368, 400, 402, 406, 408, 436, 441, 444, 451, 456, 459, 470], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 77, 86, 295, 336, 340, 439, 458, 461, 463], "explicit": [7, 23, 28, 30, 32, 33, 34, 44, 48, 50, 62, 65, 67, 72, 75, 77, 84, 87, 89, 91, 93, 94, 96, 98, 99, 100, 102, 103, 109, 111, 117, 119, 123, 129, 130, 132, 136, 137, 148, 153, 162, 163, 165, 166, 172, 175, 177, 179, 182, 184, 186, 192, 194, 198, 201, 202, 204, 206, 209, 210, 214, 221, 222, 226, 229, 239, 241, 246, 251, 254, 255, 258, 262, 263, 264, 265, 266, 267, 271, 277, 279, 280, 288, 289, 291, 293, 295, 303, 307, 310, 320, 324, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 351, 353, 357, 360, 376, 379, 380, 381, 383, 384, 390, 394, 395, 397, 400, 402, 405, 406, 407, 408, 409, 416, 418, 421, 422, 423, 424, 425, 427, 431, 435, 450, 451, 456, 457, 458, 459, 460, 462, 464, 465, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479], "contig": [7, 67, 251, 311], "pybuf_c_contigu": [7, 463], "pybuf_f_contigu": [7, 463], "pybuf_any_contigu": 7, "fulli": [7, 13, 27, 32, 33, 44, 60, 62, 70, 86, 100, 102, 106, 109, 117, 131, 182, 189, 193, 199, 203, 204, 246, 251, 257, 264, 265, 279, 295, 329, 331, 333, 340, 344, 348, 353, 355, 381, 383, 393, 395, 402, 405, 408, 412, 418, 423, 427, 450, 456, 459, 464, 465, 469, 470, 471, 472, 473, 474, 476, 477, 478], "combin": [7, 23, 32, 48, 55, 57, 62, 63, 67, 71, 75, 84, 89, 91, 94, 98, 100, 103, 106, 107, 114, 117, 123, 136, 154, 156, 159, 165, 172, 173, 177, 178, 179, 182, 185, 189, 199, 201, 204, 207, 220, 239, 240, 241, 243, 246, 257, 262, 263, 279, 288, 289, 291, 292, 304, 314, 315, 318, 324, 325, 327, 330, 331, 333, 334, 336, 339, 340, 341, 342, 343, 344, 351, 353, 358, 364, 371, 381, 382, 383, 389, 400, 401, 418, 421, 422, 423, 425, 427, 430, 431, 451, 457, 461, 462, 463, 464, 472, 473, 474, 475, 476, 478], "frequent": [7, 67, 72, 74, 83, 84, 96, 103, 106, 107, 160, 179, 186, 243, 262, 265, 279, 284, 288, 301, 381, 383, 460, 461, 463, 464, 476, 478], "undefin": [7, 18, 25, 28, 32, 38, 41, 62, 63, 84, 89, 123, 137, 154, 162, 192, 201, 203, 209, 221, 223, 254, 271, 288, 324, 340, 348, 361, 373, 377, 395, 408, 411, 423, 425, 430, 444, 451, 473, 475, 478], "pybuffer_iscontigu": [7, 56, 468, 478], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 33, 41, 255, 461, 473], "typeof": 7, "def": [7, 17, 22, 34, 44, 60, 65, 67, 70, 71, 72, 75, 78, 83, 84, 86, 87, 89, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 113, 117, 119, 120, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144, 145, 146, 152, 156, 157, 162, 165, 166, 168, 169, 172, 177, 179, 182, 184, 186, 187, 189, 196, 199, 207, 209, 212, 221, 222, 223, 224, 226, 228, 231, 232, 236, 239, 241, 243, 246, 247, 251, 254, 255, 257, 258, 263, 264, 271, 279, 285, 287, 288, 292, 293, 295, 299, 305, 308, 310, 312, 314, 315, 316, 317, 321, 325, 327, 328, 329, 331, 333, 334, 336, 337, 338, 339, 340, 341, 347, 348, 353, 356, 357, 359, 360, 362, 364, 373, 376, 377, 379, 380, 381, 383, 384, 385, 394, 395, 397, 402, 406, 408, 414, 415, 417, 422, 423, 424, 425, 426, 430, 431, 435, 436, 438, 445, 446, 447, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 20, 22, 23, 26, 28, 57, 60, 62, 67, 74, 75, 83, 92, 96, 119, 123, 138, 139, 150, 172, 179, 182, 187, 199, 205, 209, 211, 219, 231, 236, 251, 254, 260, 267, 269, 274, 279, 289, 302, 310, 311, 333, 336, 343, 357, 361, 374, 376, 410, 417, 420, 423, 441, 450, 457, 462, 463, 467, 470, 471, 475, 478], "bound": [7, 10, 13, 37, 41, 43, 53, 55, 59, 62, 63, 84, 92, 93, 99, 100, 103, 119, 123, 127, 135, 136, 154, 165, 182, 186, 187, 207, 209, 221, 222, 244, 246, 251, 264, 265, 279, 314, 315, 318, 327, 333, 336, 337, 340, 347, 357, 360, 362, 364, 370, 371, 380, 381, 384, 385, 390, 397, 415, 421, 422, 423, 424, 425, 426, 427, 431, 457, 459, 460, 462, 463, 464, 469, 471, 472, 475, 477, 478], "mem": [7, 41, 42], "imin": 7, "sum": [7, 67, 86, 92, 94, 117, 119, 123, 138, 156, 179, 182, 189, 204, 221, 222, 250, 257, 266, 271, 280, 289, 292, 304, 314, 318, 322, 333, 339, 340, 361, 371, 377, 381, 425, 426, 435, 436, 439, 444, 445, 446, 447, 460, 461, 463, 466, 468, 469, 471, 476, 477, 478], "imax": 7, "view": [7, 22, 42, 47, 62, 67, 83, 86, 91, 92, 93, 96, 102, 117, 119, 130, 136, 156, 157, 179, 182, 187, 192, 196, 201, 204, 221, 243, 254, 263, 268, 295, 304, 309, 336, 338, 343, 346, 347, 348, 364, 370, 371, 379, 380, 400, 405, 457, 462, 463, 467, 470, 471, 473, 478, 479], "anywher": [7, 84, 148, 182, 186, 207, 243, 247, 257, 264, 288, 315, 348, 373, 381, 389, 410, 420, 424, 425, 427, 465, 477, 478], "index": [7, 13, 33, 34, 37, 46, 53, 58, 59, 62, 63, 67, 78, 79, 83, 86, 93, 94, 97, 100, 102, 103, 108, 112, 113, 118, 119, 138, 139, 141, 144, 148, 152, 156, 157, 160, 172, 178, 187, 188, 192, 201, 205, 207, 209, 220, 221, 226, 229, 232, 238, 241, 250, 251, 257, 258, 264, 274, 277, 279, 280, 287, 289, 292, 295, 309, 310, 311, 315, 316, 318, 333, 335, 336, 338, 340, 341, 348, 354, 356, 360, 361, 363, 371, 376, 377, 389, 400, 402, 405, 408, 417, 422, 423, 425, 431, 435, 437, 444, 448, 449, 454, 457, 459, 461, 463, 464, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "get_item_point": 7, "pyobject_checkbuff": [7, 56, 468, 477, 478], "cannot": [7, 9, 24, 26, 28, 32, 33, 37, 38, 48, 53, 57, 60, 62, 63, 65, 66, 71, 72, 75, 84, 88, 89, 91, 93, 94, 97, 98, 99, 100, 101, 102, 107, 109, 112, 119, 123, 129, 132, 141, 148, 154, 156, 157, 159, 163, 165, 172, 173, 177, 179, 182, 187, 189, 193, 197, 198, 199, 204, 208, 209, 210, 211, 214, 221, 222, 226, 229, 241, 243, 246, 248, 249, 251, 254, 262, 263, 264, 265, 266, 267, 271, 272, 274, 278, 279, 289, 291, 292, 293, 295, 298, 300, 303, 304, 310, 315, 318, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 340, 341, 344, 348, 349, 353, 355, 357, 360, 361, 364, 381, 389, 390, 394, 397, 400, 401, 405, 408, 410, 411, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 438, 450, 451, 456, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478], "buffererror": [7, 23, 62, 67, 209, 295, 445, 478], "chain": [7, 23, 62, 67, 84, 92, 94, 98, 100, 107, 116, 153, 156, 163, 172, 183, 209, 210, 220, 221, 232, 251, 257, 263, 289, 340, 348, 376, 384, 390, 423, 425, 431, 440, 463, 465, 469, 471, 472, 473, 477, 478], "redirect": [7, 62, 67, 85, 99, 100, 107, 130, 134, 165, 238, 239, 241, 246, 263, 329, 344, 348, 390, 394, 450, 453, 457, 472, 473, 474, 475, 478], "pybuffer_sizefromformat": [7, 56, 468, 478], "pybuffer_getpoint": [7, 56, 468, 478], "pybuffer_fromcontigu": [7, 56, 468, 478], "fort": 7, "pybuffer_tocontigu": [7, 56, 468, 478], "src": [7, 51, 88, 101, 139, 172, 189, 196, 227, 236, 274, 277, 289, 328, 336, 460, 462], "pyobject_copydata": [7, 56], "dest": [7, 67, 88, 100, 115, 196, 224, 265, 274, 288, 305, 346, 394, 460, 462, 463, 464, 478], "between": [7, 32, 33, 37, 38, 41, 44, 53, 55, 59, 60, 62, 67, 71, 72, 73, 74, 75, 78, 83, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 117, 119, 123, 130, 137, 138, 146, 147, 151, 154, 157, 160, 163, 168, 169, 173, 179, 182, 187, 189, 191, 192, 193, 197, 201, 205, 207, 209, 212, 214, 221, 226, 231, 243, 246, 247, 250, 251, 254, 255, 257, 258, 262, 263, 264, 265, 266, 271, 272, 274, 280, 281, 289, 291, 292, 293, 295, 296, 304, 314, 315, 316, 330, 333, 334, 335, 336, 337, 339, 340, 343, 344, 346, 348, 354, 357, 359, 360, 361, 362, 364, 366, 367, 370, 371, 372, 373, 377, 379, 380, 381, 383, 384, 385, 389, 390, 395, 396, 400, 402, 405, 406, 408, 412, 414, 420, 421, 422, 423, 425, 426, 427, 429, 431, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pybuffer_fillcontiguousstrid": [7, 56, 468], "per": [7, 13, 22, 23, 30, 34, 44, 48, 62, 63, 67, 72, 83, 84, 87, 89, 100, 114, 117, 119, 123, 129, 130, 138, 140, 141, 143, 147, 154, 173, 177, 179, 182, 187, 192, 193, 199, 201, 204, 205, 222, 238, 246, 247, 258, 263, 267, 277, 279, 284, 289, 291, 301, 303, 304, 315, 325, 330, 333, 334, 336, 337, 340, 348, 357, 360, 361, 362, 364, 371, 375, 377, 383, 414, 417, 422, 423, 427, 431, 450, 456, 460, 461, 462, 464, 465, 466, 467, 471, 472, 473, 475, 476, 478, 479], "accord": [7, 18, 32, 38, 63, 65, 75, 91, 92, 93, 94, 97, 100, 106, 119, 123, 148, 151, 154, 165, 171, 177, 179, 182, 192, 197, 199, 201, 204, 205, 212, 214, 221, 222, 229, 231, 239, 243, 244, 246, 257, 262, 263, 264, 271, 277, 279, 288, 289, 304, 337, 338, 340, 342, 343, 361, 370, 371, 373, 379, 383, 389, 390, 396, 405, 417, 421, 423, 425, 427, 430, 450, 456, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 478], "design": [7, 33, 62, 75, 83, 84, 87, 89, 92, 93, 94, 98, 99, 100, 102, 106, 107, 119, 134, 136, 143, 149, 154, 163, 165, 173, 179, 182, 188, 189, 190, 197, 206, 207, 209, 221, 222, 224, 226, 231, 243, 246, 267, 279, 288, 289, 295, 304, 319, 327, 333, 337, 343, 353, 357, 360, 364, 370, 373, 379, 381, 384, 389, 402, 412, 420, 421, 427, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 475, 477, 478], "getbufferproc": [7, 56, 62, 471, 478], "pybytearray_typ": [8, 56], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 56, 463], "pybytearray_fromstringands": [8, 56, 463], "pybytearray_concat": [8, 56], "pybytearray_s": [8, 56], "pybytearray_asstr": [8, 56], "pybytearray_res": [8, 56], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "subtyp": [9, 11, 25, 37, 38, 44, 48, 54, 59, 60, 62, 63, 67, 183, 190, 192, 193, 196, 197, 199, 200, 201, 202, 243, 272, 281, 288, 329, 337, 340, 411, 422, 423, 425, 459, 478], "pybytes_typ": [9, 56, 478], "pybytes_check": [9, 78, 463], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 41, 56], "pybytes_fromstringands": [9, 56, 463], "uniniti": [9, 32, 34, 41, 72, 84, 89, 295, 451, 478], "pybytes_fromformat": [9, 56, 478], "printf": [9, 63, 67, 71, 72, 96, 172, 241, 263, 425, 441, 444, 455, 462, 468, 478], "calcul": [9, 30, 32, 33, 58, 62, 63, 72, 84, 88, 89, 92, 94, 117, 147, 173, 177, 179, 182, 187, 202, 222, 231, 265, 271, 279, 291, 318, 329, 333, 340, 341, 343, 347, 349, 351, 361, 362, 373, 376, 379, 380, 385, 390, 396, 423, 425, 427, 430, 459, 462, 463, 466, 468, 469, 472, 476, 478], "liter": [9, 38, 63, 67, 77, 89, 93, 102, 103, 109, 110, 117, 153, 154, 155, 179, 182, 183, 187, 189, 216, 217, 221, 226, 227, 244, 253, 258, 260, 263, 264, 266, 298, 303, 315, 327, 336, 340, 341, 344, 361, 362, 364, 371, 373, 381, 383, 389, 395, 398, 408, 410, 423, 424, 426, 427, 428, 429, 436, 440, 444, 457, 459, 460, 462, 464, 465, 467, 469, 470, 472, 475, 476, 477, 478, 479], "ld": [9, 71, 76, 172, 340, 451], "lu": [9, 340, 382, 430, 457, 472, 474, 475, 478], "zd": [9, 478], "zu": [9, 478], "size_t": [9, 10, 18, 28, 33, 34, 38, 41, 58, 63, 89, 172, 343, 471, 478], "hex": [9, 63, 67, 84, 93, 103, 106, 140, 143, 154, 172, 207, 221, 231, 250, 252, 337, 340, 341, 348, 364, 393, 423, 430, 439, 445, 447, 457, 458, 460, 462, 463, 465, 466, 467, 472, 473, 478], "0x": [9, 46, 63, 84, 86, 93, 103, 135, 172, 189, 221, 240, 279, 288, 340, 341, 379, 384, 385, 430, 461, 470, 478], "regardless": [9, 24, 32, 33, 40, 58, 63, 93, 102, 111, 117, 136, 165, 171, 173, 179, 182, 204, 207, 216, 243, 246, 254, 257, 258, 298, 310, 329, 330, 331, 333, 336, 337, 340, 341, 343, 344, 348, 371, 379, 383, 384, 385, 394, 395, 397, 398, 407, 420, 425, 427, 430, 450, 456, 469, 470, 471, 472, 473, 475, 478], "yield": [9, 35, 63, 67, 74, 84, 86, 94, 113, 119, 130, 135, 136, 146, 148, 156, 163, 165, 179, 186, 187, 193, 203, 221, 222, 228, 231, 238, 249, 251, 254, 257, 258, 260, 267, 279, 289, 292, 295, 298, 315, 327, 340, 343, 353, 357, 373, 376, 381, 384, 385, 389, 402, 405, 408, 414, 422, 423, 424, 426, 428, 430, 435, 459, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "unrecogn": [9, 63, 88, 117, 224, 409, 417, 430, 469, 473, 474, 478], "rest": [9, 18, 63, 76, 84, 88, 89, 94, 98, 99, 100, 103, 109, 117, 119, 125, 148, 157, 173, 182, 189, 209, 219, 222, 243, 263, 272, 288, 289, 298, 315, 319, 340, 357, 371, 373, 384, 414, 422, 423, 426, 430, 431, 436, 457, 459, 460, 462, 463, 464, 465, 467, 469, 471, 472, 475, 477, 478], "extra": [9, 16, 18, 28, 56, 62, 63, 67, 75, 84, 87, 89, 91, 93, 100, 107, 109, 116, 117, 119, 123, 129, 157, 166, 171, 182, 187, 189, 192, 198, 199, 201, 204, 207, 238, 243, 247, 263, 264, 267, 279, 280, 288, 289, 328, 336, 337, 340, 343, 353, 354, 357, 362, 371, 381, 384, 408, 417, 423, 426, 447, 450, 451, 457, 460, 463, 464, 469, 470, 471, 474, 475, 476, 478], "discard": [9, 34, 37, 48, 54, 59, 63, 65, 67, 72, 89, 93, 94, 123, 136, 140, 148, 153, 154, 157, 179, 182, 239, 252, 254, 263, 264, 267, 279, 281, 288, 333, 336, 340, 356, 371, 395, 397, 406, 408, 411, 422, 423, 444, 450, 459, 462, 463, 464, 469, 472, 474, 476, 478], "effect": [9, 11, 14, 22, 23, 27, 30, 32, 33, 44, 51, 57, 58, 62, 63, 67, 72, 74, 83, 84, 87, 91, 92, 94, 97, 99, 100, 102, 103, 107, 112, 117, 119, 123, 129, 137, 141, 155, 163, 165, 172, 173, 177, 179, 181, 182, 183, 187, 189, 199, 204, 206, 209, 211, 214, 221, 222, 223, 239, 243, 246, 254, 257, 262, 263, 264, 265, 268, 279, 288, 289, 291, 292, 293, 298, 304, 307, 310, 315, 318, 319, 320, 321, 324, 326, 327, 328, 330, 336, 337, 338, 339, 340, 341, 344, 348, 353, 357, 359, 360, 361, 371, 377, 379, 380, 381, 383, 384, 395, 400, 407, 415, 416, 417, 420, 422, 423, 425, 427, 430, 431, 437, 445, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "precis": [9, 13, 18, 25, 44, 63, 67, 71, 99, 209, 221, 226, 255, 258, 264, 265, 271, 279, 286, 289, 304, 309, 324, 325, 333, 336, 340, 341, 343, 348, 361, 362, 371, 381, 390, 403, 422, 423, 425, 429, 430, 439, 447, 457, 461, 462, 463, 464, 470, 471, 472, 474, 475, 476, 477, 478], "pybytes_fromformatv": [9, 56], "pybytes_fromobject": [9, 56], "pybytes_s": [9, 56, 78], "pybytes_get_s": 9, "pybytes_asstr": [9, 56, 467], "last": [9, 22, 23, 25, 26, 32, 33, 34, 44, 58, 62, 66, 67, 72, 75, 77, 83, 84, 86, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 106, 111, 117, 119, 122, 136, 137, 141, 143, 147, 148, 152, 154, 156, 157, 163, 165, 172, 173, 179, 180, 182, 184, 186, 187, 189, 192, 196, 199, 201, 205, 207, 209, 210, 211, 214, 217, 221, 230, 231, 241, 243, 244, 251, 255, 257, 258, 262, 263, 265, 266, 267, 271, 279, 280, 284, 287, 288, 289, 292, 293, 295, 297, 304, 310, 315, 316, 319, 324, 326, 327, 328, 333, 335, 336, 338, 340, 341, 343, 344, 346, 348, 353, 360, 361, 364, 371, 373, 376, 377, 379, 381, 382, 383, 384, 385, 389, 390, 397, 400, 401, 405, 408, 410, 417, 422, 423, 424, 425, 427, 430, 431, 435, 436, 437, 438, 441, 444, 447, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "just": [9, 13, 28, 32, 34, 38, 50, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 117, 119, 125, 126, 135, 136, 146, 147, 148, 152, 153, 154, 155, 157, 163, 165, 172, 173, 175, 177, 179, 182, 186, 189, 190, 196, 197, 207, 209, 214, 221, 222, 226, 230, 231, 239, 243, 246, 248, 249, 257, 262, 263, 264, 265, 267, 277, 279, 280, 288, 289, 292, 293, 295, 304, 309, 310, 315, 316, 324, 326, 327, 329, 333, 334, 336, 337, 340, 341, 344, 347, 348, 350, 353, 355, 357, 359, 360, 364, 370, 371, 376, 379, 381, 383, 384, 385, 390, 394, 397, 402, 404, 405, 408, 409, 410, 415, 416, 417, 418, 422, 423, 425, 427, 429, 431, 436, 447, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "dealloc": [9, 13, 22, 28, 32, 34, 41, 44, 51, 62, 63, 72, 74, 75, 86, 98, 357, 397, 431, 451, 458, 459, 464, 468, 470, 476, 478], "pybytes_as_str": [9, 426], "pybytes_asstringands": [9, 56, 78], "pybytes_concat": [9, 56, 478], "newpart": 9, "append": [9, 33, 37, 58, 63, 67, 75, 77, 78, 79, 83, 84, 89, 99, 100, 104, 109, 117, 118, 131, 146, 148, 153, 154, 156, 157, 159, 172, 177, 178, 180, 182, 185, 187, 190, 192, 196, 198, 199, 201, 204, 221, 222, 230, 244, 245, 246, 251, 252, 254, 257, 263, 265, 266, 267, 269, 277, 279, 280, 281, 284, 288, 289, 292, 293, 295, 297, 298, 305, 312, 314, 315, 316, 317, 326, 330, 333, 336, 337, 338, 340, 346, 348, 353, 357, 373, 383, 390, 395, 402, 403, 406, 408, 417, 422, 423, 430, 435, 436, 437, 438, 444, 445, 447, 450, 451, 456, 457, 458, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 478], "stolen": [9, 34, 71, 478], "pybytes_concatanddel": [9, 56], "_pybytes_res": [9, 478], "newsiz": [9, 28, 59, 274], "though": [9, 11, 30, 32, 57, 62, 63, 72, 74, 75, 83, 84, 89, 91, 93, 94, 100, 102, 103, 106, 107, 111, 112, 117, 123, 129, 130, 151, 152, 154, 157, 169, 173, 182, 189, 192, 195, 196, 201, 202, 204, 207, 209, 221, 226, 231, 239, 243, 246, 247, 248, 251, 254, 258, 263, 265, 267, 271, 279, 280, 284, 288, 289, 301, 307, 310, 315, 324, 327, 337, 340, 343, 357, 360, 361, 364, 377, 379, 381, 383, 384, 385, 390, 402, 405, 406, 410, 420, 421, 423, 424, 425, 427, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 469, 470, 471, 478], "build": [9, 32, 33, 41, 57, 63, 64, 67, 73, 74, 75, 78, 83, 84, 89, 92, 96, 100, 101, 107, 119, 138, 152, 153, 154, 172, 180, 182, 183, 184, 186, 187, 199, 202, 204, 207, 221, 231, 241, 250, 253, 254, 257, 269, 271, 278, 288, 292, 303, 307, 310, 324, 330, 333, 334, 337, 340, 348, 350, 357, 364, 377, 379, 383, 385, 389, 390, 394, 395, 404, 405, 420, 421, 423, 446, 450, 453, 456, 457, 459, 479], "brand": [9, 54, 59, 72, 301, 478], "refcount": [9, 32, 62, 98, 348, 357, 462, 478], "lvalu": [9, 288, 340], "differ": [9, 10, 13, 23, 27, 32, 33, 34, 41, 44, 56, 57, 58, 62, 63, 65, 67, 71, 72, 73, 74, 75, 78, 83, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 117, 119, 123, 129, 130, 134, 135, 136, 138, 148, 151, 152, 153, 154, 155, 157, 159, 163, 165, 166, 169, 170, 171, 172, 173, 179, 181, 182, 187, 189, 191, 192, 198, 199, 201, 204, 207, 209, 210, 212, 218, 221, 222, 226, 238, 239, 241, 243, 246, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 277, 279, 280, 288, 289, 291, 292, 293, 295, 298, 299, 304, 309, 310, 314, 315, 316, 317, 318, 324, 326, 327, 329, 331, 333, 334, 336, 337, 340, 341, 343, 344, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 364, 367, 370, 371, 376, 380, 381, 383, 384, 385, 389, 390, 396, 400, 402, 405, 406, 415, 417, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 439, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "realloc": [9, 41, 53, 72, 173, 461, 474, 478], "memoryerror": [9, 23, 54, 59, 63, 67, 119, 182, 209, 390, 445, 472, 478], "slot": [10, 16, 31, 44, 46, 48, 49, 57, 60, 67, 74, 75, 89, 92, 100, 131, 177, 187, 208, 222, 246, 251, 277, 279, 295, 312, 340, 381, 423, 425, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 471, 472, 473, 476, 477, 478], "callabl": [10, 32, 36, 57, 58, 62, 66, 67, 71, 72, 84, 86, 87, 91, 93, 94, 100, 105, 109, 117, 119, 123, 129, 133, 135, 136, 157, 162, 163, 166, 168, 172, 173, 177, 178, 183, 186, 187, 202, 203, 204, 220, 221, 231, 244, 246, 247, 250, 254, 263, 264, 265, 267, 279, 287, 288, 289, 292, 294, 295, 309, 310, 311, 321, 328, 329, 331, 340, 344, 348, 353, 360, 362, 366, 371, 373, 383, 384, 385, 390, 394, 395, 397, 402, 408, 416, 422, 425, 427, 445, 450, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478], "kwarg": [10, 57, 62, 67, 84, 86, 89, 92, 99, 100, 109, 112, 117, 119, 123, 136, 137, 139, 154, 156, 162, 163, 166, 173, 182, 183, 221, 249, 251, 258, 263, 264, 279, 287, 288, 289, 295, 303, 304, 311, 321, 340, 341, 353, 357, 359, 360, 380, 381, 383, 384, 385, 394, 397, 423, 426, 436, 463, 468, 471, 473, 474, 476, 478], "tp_new": [10, 60, 62, 67, 74, 75, 98, 469, 478], "tp_init": [10, 60, 62, 67, 74, 75, 469, 478], "pyobject_cal": [10, 56, 62, 72, 477, 478], "pep": [10, 13, 23, 26, 30, 32, 33, 34, 44, 48, 56, 58, 61, 62, 63, 65, 67, 70, 72, 74, 77, 79, 84, 85, 86, 87, 89, 94, 106, 109, 110, 113, 114, 119, 123, 126, 138, 139, 148, 149, 150, 151, 154, 156, 157, 159, 162, 165, 166, 169, 171, 177, 183, 187, 196, 206, 209, 217, 221, 222, 223, 243, 245, 246, 247, 251, 254, 261, 263, 268, 271, 277, 283, 284, 285, 289, 291, 292, 295, 297, 298, 307, 318, 320, 322, 324, 325, 328, 329, 330, 332, 333, 335, 336, 337, 340, 341, 344, 345, 348, 353, 354, 357, 361, 373, 380, 392, 394, 397, 402, 403, 418, 420, 422, 423, 424, 425, 426, 427, 430, 431, 436, 445, 450, 451, 452, 456, 457, 477, 478, 479], "590": [10, 67, 467, 468, 477, 478], "pyvectorcall_cal": [10, 56, 62, 469, 478], "py_tpflags_have_vectorcal": [10, 62, 469, 478], "now": [10, 23, 28, 32, 33, 34, 38, 41, 48, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 88, 89, 91, 92, 93, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 117, 119, 123, 129, 130, 134, 136, 137, 138, 140, 143, 146, 148, 150, 154, 156, 157, 159, 163, 165, 166, 168, 171, 172, 173, 177, 178, 179, 180, 182, 184, 187, 189, 196, 198, 201, 207, 208, 209, 210, 211, 212, 214, 217, 221, 222, 226, 230, 231, 238, 239, 240, 241, 244, 246, 247, 248, 251, 254, 255, 258, 262, 263, 264, 265, 266, 267, 271, 274, 278, 279, 280, 284, 288, 289, 291, 292, 293, 295, 300, 301, 304, 305, 307, 309, 314, 315, 324, 325, 326, 327, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 348, 354, 355, 360, 361, 362, 372, 376, 377, 379, 380, 381, 383, 384, 385, 389, 390, 394, 395, 396, 400, 406, 408, 414, 415, 417, 418, 422, 423, 425, 427, 430, 431, 436, 437, 444, 445, 446, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "class": [10, 22, 23, 28, 32, 39, 43, 44, 48, 52, 53, 57, 60, 61, 62, 63, 66, 67, 72, 74, 75, 79, 83, 85, 86, 87, 91, 94, 97, 99, 102, 103, 104, 105, 106, 107, 109, 113, 115, 118, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 155, 156, 160, 162, 163, 165, 166, 168, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 207, 214, 215, 217, 218, 219, 220, 221, 222, 223, 228, 230, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 250, 252, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 269, 272, 274, 275, 276, 280, 281, 282, 284, 285, 288, 289, 291, 292, 293, 294, 296, 297, 298, 300, 301, 303, 307, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 329, 331, 333, 334, 336, 337, 339, 341, 344, 346, 347, 348, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 382, 389, 391, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 424, 425, 426, 427, 428, 429, 431, 434, 436, 438, 440, 441, 445, 446, 447, 450, 456, 457, 458, 460, 461, 464, 465, 466, 467, 469, 470, 472, 473, 475, 476, 477, 478, 479], "__call__": [10, 62, 67, 84, 86, 92, 117, 155, 156, 157, 178, 190, 199, 207, 220, 221, 279, 281, 287, 353, 381, 384, 385, 397, 423, 425, 469, 474, 478], "reassign": [10, 41, 62, 75, 207, 303, 344, 381, 397, 469, 476, 478], "behav": [10, 23, 32, 33, 44, 62, 63, 75, 84, 88, 89, 93, 98, 100, 103, 106, 159, 163, 165, 166, 171, 172, 179, 180, 182, 184, 221, 222, 240, 253, 254, 267, 274, 284, 289, 316, 317, 329, 331, 333, 334, 337, 340, 344, 348, 351, 359, 364, 381, 383, 384, 385, 406, 408, 422, 423, 424, 425, 430, 431, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 475, 476, 478], "earlier": [10, 32, 62, 63, 71, 83, 84, 89, 91, 94, 99, 100, 102, 103, 111, 112, 123, 173, 179, 189, 206, 226, 241, 243, 254, 263, 265, 271, 288, 289, 295, 315, 327, 336, 337, 344, 348, 353, 364, 375, 381, 383, 384, 389, 395, 397, 406, 410, 423, 425, 427, 430, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 471, 472, 473, 474, 475, 476, 477, 478], "tp_vectorcall_offset": [10, 57, 60, 62, 74, 478], "vectorcallfunc": [10, 27, 56, 62, 74, 469], "typedef": [10, 11, 13, 15, 22, 27, 28, 31, 32, 49, 57, 58, 60, 63, 67, 74, 75, 89, 478], "nargsf": 10, "kwname": [10, 57, 98], "py_vectorcall_arguments_offset": [10, 56, 469, 478], "pyvectorcall_narg": [10, 56, 469, 478], "pyobject_vectorcallmethod": [10, 56, 469, 478], "pyobject_vectorcal": [10, 56, 101, 469, 478], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 478], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 478], "_pyobject_callmethodnoarg": [10, 478], "_pyobject_callmethodonearg": [10, 478], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 56, 477, 478], "py_leaverecursivecal": [10, 23, 56, 477, 478], "pyvectorcall_funct": [10, 478], "fall": [10, 22, 25, 38, 41, 62, 63, 83, 94, 99, 157, 173, 177, 179, 182, 192, 201, 209, 221, 231, 264, 289, 291, 321, 337, 340, 341, 353, 389, 390, 420, 423, 427, 430, 443, 457, 459, 460, 462, 463, 464, 465, 469, 470, 472, 474, 475, 477, 478], "pyobject_callnoarg": [10, 56, 74, 477, 478], "pyobject_callonearg": [10, 477, 478], "pyobject_callobject": [10, 56, 71, 72, 78], "pyobject_callfunct": [10, 56, 462, 476], "pyobject_callmethod": [10, 38, 54, 56, 78, 467, 469], "pyobject_callfunctionobjarg": [10, 56, 478], "pyobject_callmethodobjarg": [10, 56, 478], "pyobject_callmethodnoarg": [10, 478], "pyobject_callmethodonearg": [10, 478], "arg1": [10, 74, 84, 94, 96, 113, 221, 288, 289, 423, 459, 460, 462], "arg2": [10, 74, 84, 94, 96, 113, 221, 288, 384, 423, 459, 460, 462], "kwdict": [10, 72], "py_tpflags_method_descriptor": [10, 62, 478], "unbound": [10, 62, 67, 100, 112, 182, 183, 187, 221, 222, 251, 264, 357, 360, 379, 380, 423, 424, 427, 431, 459, 461, 465, 467, 473, 475, 478], "pycallable_check": [10, 56, 71, 72], "pycapsul": [11, 72, 464, 466, 467, 470, 478], "opaqu": [11, 13, 26, 32, 34, 38, 60, 62, 113, 167, 254, 310, 325, 338, 403, 408, 458, 469, 470, 472, 475, 476, 477, 478], "who": [11, 67, 72, 97, 99, 100, 106, 123, 159, 224, 226, 244, 263, 289, 296, 318, 337, 341, 353, 379, 406, 416, 418, 420, 441, 456, 457, 459, 460, 461, 462, 464, 471, 474, 476, 477, 478], "often": [11, 13, 32, 34, 57, 63, 72, 74, 75, 83, 84, 89, 91, 92, 94, 97, 100, 103, 106, 107, 111, 117, 119, 143, 148, 152, 172, 179, 180, 182, 186, 189, 190, 194, 209, 221, 226, 229, 251, 257, 277, 288, 295, 304, 305, 307, 327, 333, 336, 337, 340, 342, 344, 349, 357, 360, 361, 364, 381, 384, 385, 390, 409, 423, 425, 429, 430, 431, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 473, 476, 478], "dynam": [11, 22, 25, 30, 41, 44, 62, 65, 67, 71, 72, 76, 78, 79, 83, 84, 99, 100, 101, 115, 138, 178, 186, 199, 221, 222, 243, 246, 250, 251, 280, 289, 317, 331, 333, 336, 340, 341, 348, 364, 371, 379, 381, 384, 385, 402, 418, 423, 425, 427, 431, 435, 451, 457, 459, 460, 462, 463, 470, 471, 472, 475, 476, 478], "load": [11, 30, 32, 33, 40, 44, 57, 58, 67, 71, 72, 76, 78, 83, 84, 85, 89, 92, 93, 96, 98, 99, 100, 107, 115, 119, 139, 148, 152, 162, 163, 180, 181, 183, 187, 189, 209, 213, 239, 240, 243, 246, 247, 249, 252, 257, 258, 260, 263, 264, 270, 272, 275, 280, 281, 289, 293, 294, 295, 298, 300, 303, 304, 307, 310, 316, 326, 330, 336, 337, 340, 348, 349, 357, 361, 363, 364, 374, 377, 379, 380, 400, 405, 408, 409, 414, 415, 416, 418, 420, 422, 423, 426, 428, 431, 441, 450, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pycapsule_destructor": [11, 56], "destructor": [11, 32, 56, 62, 74, 75, 77, 83, 86, 112, 184, 289, 312, 344, 348, 423, 431, 450, 466, 470, 474, 476, 478], "pycapsule_new": [11, 56, 72], "pycapsule_checkexact": 11, "encapsul": [11, 83, 84, 87, 92, 98, 109, 111, 152, 198, 204, 244, 254, 282, 301, 331, 348, 405, 409, 411, 414, 422, 427, 431, 461, 462, 463, 464, 472], "outliv": [11, 280, 422, 478], "permit": [11, 27, 58, 72, 87, 89, 97, 119, 182, 206, 208, 217, 221, 241, 251, 253, 255, 258, 261, 267, 279, 280, 289, 295, 304, 315, 340, 344, 349, 384, 405, 414, 421, 425, 426, 430, 431, 450, 462, 463, 469, 471, 472, 473, 476, 478], "attribut": [11, 22, 23, 26, 27, 30, 32, 44, 48, 49, 55, 59, 60, 62, 67, 73, 78, 86, 87, 89, 94, 99, 103, 107, 109, 111, 112, 115, 117, 119, 123, 130, 134, 139, 141, 146, 147, 148, 152, 154, 155, 156, 163, 168, 170, 171, 172, 173, 177, 179, 182, 183, 184, 186, 187, 189, 191, 192, 193, 196, 199, 201, 203, 204, 207, 209, 211, 212, 221, 222, 224, 229, 230, 234, 238, 239, 240, 241, 243, 244, 246, 247, 250, 254, 255, 258, 260, 264, 265, 266, 267, 269, 277, 279, 280, 284, 287, 291, 292, 294, 295, 298, 299, 300, 301, 308, 309, 310, 311, 315, 317, 321, 324, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 341, 343, 344, 346, 353, 355, 356, 357, 359, 360, 361, 362, 364, 366, 367, 369, 376, 377, 378, 379, 380, 381, 383, 388, 389, 390, 394, 395, 397, 400, 402, 403, 405, 406, 408, 409, 410, 412, 414, 415, 417, 418, 420, 421, 422, 424, 430, 431, 435, 437, 451, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479], "modulenam": [11, 70, 72, 78, 84, 96, 445, 478], "attributenam": [11, 72], "enabl": [11, 28, 33, 48, 62, 67, 74, 75, 89, 91, 93, 103, 107, 109, 117, 119, 130, 136, 139, 141, 148, 149, 152, 163, 165, 172, 173, 181, 182, 184, 189, 193, 209, 210, 221, 222, 223, 226, 238, 241, 243, 244, 246, 251, 252, 254, 262, 264, 265, 279, 284, 289, 292, 293, 295, 301, 304, 307, 310, 311, 315, 316, 329, 330, 333, 336, 337, 340, 341, 344, 346, 348, 349, 357, 362, 364, 366, 371, 375, 381, 383, 385, 395, 402, 407, 409, 410, 415, 417, 422, 423, 424, 431, 450, 451, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478], "pycapsule_import": [11, 56, 72, 478], "pycapsule_getpoint": [11, 56, 464], "compar": [11, 23, 32, 33, 48, 62, 63, 67, 71, 74, 83, 88, 91, 93, 97, 99, 100, 102, 103, 119, 123, 172, 177, 178, 179, 182, 186, 187, 189, 191, 192, 193, 198, 210, 212, 221, 222, 232, 255, 258, 260, 262, 263, 265, 267, 279, 280, 286, 288, 293, 304, 307, 310, 312, 322, 324, 336, 337, 338, 340, 342, 348, 357, 358, 362, 364, 377, 381, 382, 383, 384, 385, 400, 408, 420, 422, 423, 425, 427, 430, 439, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "strcmp": [11, 18, 74, 478], "pycapsule_getdestructor": [11, 56], "legal": [11, 76, 89, 91, 106, 221, 237, 243, 254, 293, 357, 361, 364, 371, 381, 415, 421, 425, 430, 458, 459, 460, 462, 463, 464, 478], "somewhat": [11, 23, 89, 98, 100, 172, 179, 200, 222, 243, 262, 288, 289, 333, 364, 420, 457, 462, 465, 475, 476, 478], "ambigu": [11, 67, 89, 94, 103, 117, 179, 255, 288, 293, 315, 340, 420, 422, 425, 429, 430, 457, 463, 469, 472, 474, 475, 476, 477, 478], "pycapsule_isvalid": [11, 56, 464], "pyerr_occur": [11, 22, 23, 25, 34, 35, 38, 40, 48, 56, 63, 71, 72, 89, 426, 478], "disambigu": [11, 38, 67, 179, 425, 430, 478], "pycapsule_getcontext": [11, 56], "context": [11, 16, 23, 32, 41, 44, 48, 53, 63, 65, 67, 72, 77, 78, 84, 86, 89, 94, 98, 106, 117, 119, 120, 121, 123, 125, 126, 129, 136, 148, 149, 156, 160, 162, 163, 179, 180, 183, 184, 186, 187, 214, 219, 221, 226, 231, 238, 246, 247, 248, 250, 251, 254, 258, 263, 264, 265, 266, 267, 274, 284, 286, 289, 291, 293, 294, 295, 301, 303, 304, 310, 311, 312, 315, 317, 318, 324, 325, 326, 331, 333, 334, 341, 344, 348, 353, 354, 355, 357, 360, 363, 370, 372, 381, 383, 384, 390, 394, 397, 400, 405, 407, 408, 409, 410, 414, 417, 422, 424, 425, 426, 430, 431, 451, 457, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "pycapsule_getnam": [11, 56], "no_block": [11, 478], "full": [11, 28, 32, 33, 62, 63, 67, 72, 75, 83, 89, 92, 99, 100, 102, 103, 107, 131, 136, 147, 153, 154, 157, 159, 160, 163, 164, 169, 172, 176, 179, 182, 186, 187, 189, 193, 196, 197, 208, 209, 218, 239, 243, 247, 251, 255, 257, 263, 265, 271, 274, 276, 277, 279, 280, 288, 289, 291, 292, 293, 298, 310, 311, 312, 315, 327, 328, 329, 331, 333, 334, 337, 340, 343, 344, 348, 353, 357, 361, 364, 379, 380, 381, 383, 384, 389, 390, 394, 397, 398, 402, 406, 408, 414, 417, 422, 423, 424, 426, 427, 431, 441, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "accessor": [11, 67, 84, 221, 269, 406, 462, 476, 478], "pycapsule_get": 11, "nonzero": [11, 23, 32, 58, 72, 103, 109, 112, 182, 187, 221, 265, 271, 274, 279, 296, 307, 315, 340, 348, 356, 360, 361, 423, 430, 450, 463, 476], "pycapsule_setcontext": [11, 56], "pycapsule_setdestructor": [11, 56], "pycapsule_setnam": [11, 56], "made": [11, 30, 32, 34, 42, 57, 58, 62, 65, 71, 84, 88, 89, 93, 96, 99, 100, 102, 103, 109, 117, 130, 136, 154, 156, 163, 165, 172, 173, 179, 182, 187, 189, 192, 195, 196, 201, 204, 209, 226, 238, 239, 243, 246, 251, 254, 263, 264, 265, 271, 274, 277, 279, 289, 293, 295, 303, 304, 310, 315, 316, 317, 318, 320, 324, 327, 328, 329, 330, 331, 333, 337, 340, 344, 353, 357, 360, 364, 377, 384, 385, 389, 395, 397, 402, 405, 408, 414, 415, 416, 420, 421, 422, 423, 431, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pycapsule_setpoint": [11, 56], "stack": [12, 23, 32, 34, 58, 67, 72, 74, 77, 89, 93, 99, 101, 112, 115, 119, 123, 132, 136, 137, 141, 153, 156, 165, 167, 173, 180, 181, 187, 189, 209, 210, 221, 222, 243, 250, 253, 263, 265, 293, 311, 312, 315, 318, 327, 329, 333, 337, 338, 340, 348, 360, 370, 383, 384, 385, 395, 422, 423, 424, 425, 430, 431, 438, 440, 450, 457, 458, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478], "frame": [12, 13, 16, 19, 23, 29, 32, 34, 48, 52, 65, 67, 77, 83, 93, 96, 101, 114, 136, 138, 139, 140, 141, 167, 173, 181, 187, 209, 210, 243, 251, 258, 263, 293, 311, 329, 332, 333, 337, 340, 345, 348, 363, 364, 369, 370, 371, 376, 380, 395, 396, 402, 422, 423, 424, 450, 458, 460, 461, 462, 464, 467, 469, 471, 472, 473, 475, 477, 478], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 29, 55, 66, 397, 468], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 467, 478], "low": [13, 16, 32, 37, 56, 59, 62, 63, 67, 74, 83, 96, 99, 103, 106, 123, 126, 127, 130, 132, 133, 134, 136, 143, 147, 160, 163, 165, 173, 174, 187, 209, 221, 250, 254, 256, 263, 277, 280, 289, 292, 304, 314, 315, 324, 325, 326, 329, 331, 336, 337, 339, 340, 348, 351, 364, 381, 395, 397, 408, 410, 423, 451, 459, 460, 462, 463, 464, 469, 471, 473, 474, 476, 478], "detail": [13, 17, 18, 26, 33, 38, 41, 44, 53, 54, 56, 58, 60, 62, 63, 65, 67, 70, 71, 72, 75, 76, 78, 83, 84, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 109, 111, 115, 117, 119, 123, 130, 134, 136, 138, 141, 148, 149, 154, 165, 168, 169, 172, 173, 177, 178, 179, 182, 186, 187, 189, 190, 192, 197, 201, 203, 207, 209, 211, 221, 222, 226, 230, 231, 241, 242, 243, 246, 247, 251, 255, 258, 261, 263, 265, 266, 267, 268, 277, 279, 288, 289, 295, 296, 315, 318, 320, 327, 328, 331, 333, 334, 336, 338, 340, 341, 343, 344, 348, 349, 350, 351, 353, 354, 357, 359, 360, 364, 376, 380, 381, 383, 384, 389, 390, 394, 395, 397, 400, 402, 405, 408, 410, 414, 416, 417, 422, 423, 424, 425, 426, 427, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "execut": [13, 22, 23, 26, 27, 32, 33, 44, 48, 50, 52, 58, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 92, 94, 96, 100, 101, 102, 103, 106, 111, 112, 117, 119, 125, 130, 132, 134, 136, 137, 139, 141, 148, 152, 153, 154, 156, 159, 162, 165, 166, 172, 181, 183, 187, 188, 197, 209, 221, 222, 230, 241, 244, 246, 250, 251, 254, 262, 263, 264, 265, 268, 276, 277, 279, 280, 288, 289, 292, 293, 294, 295, 296, 297, 299, 304, 305, 309, 311, 316, 318, 321, 324, 326, 327, 328, 330, 333, 336, 338, 340, 342, 343, 344, 346, 348, 349, 353, 360, 361, 362, 363, 364, 366, 370, 373, 381, 383, 384, 385, 390, 394, 395, 398, 400, 402, 415, 421, 422, 425, 426, 427, 428, 431, 436, 438, 445, 446, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "hasn": [13, 34, 78, 83, 84, 89, 130, 132, 136, 186, 228, 293, 310, 330, 337, 351, 384, 385, 457, 458, 462, 463, 465, 473, 475, 478], "pycodeobject": [13, 26, 468, 478], "subject": [13, 38, 44, 54, 60, 62, 74, 83, 94, 99, 100, 107, 119, 163, 179, 187, 189, 192, 196, 198, 199, 201, 239, 243, 258, 263, 264, 265, 267, 284, 289, 303, 304, 326, 333, 337, 357, 361, 381, 421, 422, 423, 426, 430, 436, 462, 467, 469, 472, 478], "chang": [13, 17, 22, 23, 26, 27, 28, 32, 33, 34, 38, 44, 50, 53, 54, 56, 57, 58, 59, 60, 62, 65, 67, 71, 72, 74, 75, 76, 78, 87, 88, 91, 92, 93, 94, 96, 100, 102, 103, 106, 107, 109, 110, 112, 117, 119, 136, 146, 147, 148, 152, 159, 162, 163, 165, 166, 171, 172, 173, 175, 177, 179, 180, 182, 186, 187, 189, 190, 192, 193, 197, 201, 202, 203, 204, 207, 208, 209, 212, 214, 218, 219, 221, 222, 230, 231, 239, 242, 243, 244, 246, 247, 251, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 271, 274, 277, 279, 280, 289, 292, 293, 295, 301, 304, 307, 309, 310, 315, 316, 317, 324, 325, 327, 328, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 348, 353, 356, 357, 359, 360, 361, 362, 364, 370, 371, 372, 373, 377, 378, 380, 381, 383, 384, 385, 389, 390, 395, 396, 400, 402, 405, 406, 407, 408, 411, 416, 417, 420, 421, 422, 423, 424, 427, 429, 430, 431, 436, 446, 450, 451, 456, 478, 479], "pycode_typ": 13, "pycode_check": 13, "co": [13, 30, 57, 65, 67, 75, 117, 162, 173, 252, 333, 357, 379, 461, 470, 475, 478], "pycode_getnumfre": 13, "pyunstable_code_new": [13, 469], "argcount": [13, 65, 139, 380, 476], "kwonlyargcount": [13, 139, 380, 478], "nlocal": [13, 139, 380], "stacksiz": [13, 139, 380, 478], "varnam": [13, 478], "freevar": [13, 478], "cellvar": [13, 221, 478], "filenam": [13, 23, 32, 33, 44, 58, 65, 67, 70, 76, 83, 84, 89, 94, 96, 99, 100, 103, 109, 116, 117, 119, 139, 141, 146, 148, 152, 153, 154, 155, 156, 159, 163, 165, 171, 172, 180, 181, 183, 185, 186, 189, 192, 193, 196, 197, 201, 209, 210, 213, 214, 215, 219, 221, 226, 230, 239, 243, 246, 250, 251, 252, 261, 263, 264, 265, 266, 268, 275, 277, 279, 281, 282, 288, 289, 291, 292, 293, 295, 298, 304, 305, 307, 311, 315, 316, 326, 327, 328, 332, 336, 344, 347, 348, 353, 357, 364, 370, 373, 376, 377, 379, 380, 383, 385, 388, 390, 395, 398, 400, 401, 402, 406, 407, 408, 409, 416, 417, 423, 431, 433, 441, 446, 447, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478], "qualnam": [13, 19, 27, 29, 93, 99, 193, 207, 264, 478], "firstlineno": 13, "linet": 13, "exceptiont": 13, "unstabl": [13, 23, 26, 28, 38, 50, 56, 60, 74, 109, 182, 469, 476, 478], "warn": [13, 26, 27, 28, 31, 32, 33, 38, 50, 56, 57, 58, 60, 67, 75, 84, 89, 96, 99, 100, 102, 109, 115, 122, 123, 132, 136, 177, 178, 183, 184, 209, 246, 250, 254, 264, 265, 268, 269, 279, 294, 304, 307, 311, 315, 329, 335, 336, 337, 344, 348, 353, 364, 368, 379, 381, 383, 392, 402, 409, 410, 411, 423, 424, 427, 430, 445, 446, 447, 450, 451, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 472, 473, 476, 477, 478, 479], "minor": [13, 23, 26, 28, 32, 38, 50, 56, 60, 62, 65, 67, 76, 78, 83, 91, 100, 102, 107, 115, 119, 173, 190, 199, 202, 281, 289, 299, 309, 348, 350, 410, 451, 456, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478], "dummi": [13, 67, 72, 100, 111, 160, 172, 186, 226, 254, 289, 337, 353, 357, 360, 379, 402, 474, 478], "pycode_newempti": [13, 464], "definit": [13, 30, 32, 38, 44, 49, 57, 58, 63, 67, 72, 74, 75, 84, 86, 87, 89, 91, 93, 97, 98, 100, 103, 106, 109, 117, 140, 141, 147, 154, 157, 165, 172, 173, 177, 179, 207, 221, 222, 226, 228, 234, 243, 246, 247, 251, 252, 260, 263, 265, 277, 279, 280, 285, 288, 295, 304, 308, 309, 320, 331, 336, 340, 341, 348, 354, 359, 361, 372, 379, 380, 381, 382, 383, 390, 397, 403, 404, 405, 406, 409, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 475, 476, 477, 478], "bytecod": [13, 30, 32, 65, 67, 83, 84, 86, 94, 96, 101, 103, 159, 183, 221, 246, 250, 251, 260, 296, 307, 320, 329, 347, 348, 377, 423, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 471, 472, 473, 478, 479], "bind": [13, 43, 57, 60, 67, 84, 92, 100, 104, 123, 126, 139, 165, 167, 173, 189, 221, 226, 237, 241, 251, 262, 264, 290, 294, 310, 311, 316, 325, 331, 333, 334, 337, 347, 348, 357, 363, 366, 370, 371, 379, 404, 421, 422, 423, 425, 427, 428, 429, 431, 436, 454, 457, 458, 459, 461, 462, 463, 467, 471, 472, 473, 475, 478], "inter": [13, 186, 253, 256, 329, 381, 470, 478], "depend": [13, 18, 27, 32, 33, 44, 52, 62, 63, 67, 71, 72, 74, 76, 78, 83, 84, 89, 91, 92, 93, 94, 98, 99, 100, 103, 106, 108, 111, 112, 119, 123, 130, 136, 141, 147, 148, 152, 154, 163, 165, 169, 172, 173, 177, 179, 182, 186, 187, 189, 191, 201, 204, 206, 207, 209, 211, 215, 217, 221, 226, 230, 238, 239, 240, 243, 246, 251, 253, 254, 255, 257, 262, 263, 264, 265, 266, 267, 271, 275, 277, 279, 284, 289, 292, 295, 304, 305, 311, 315, 318, 324, 325, 326, 329, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 353, 354, 355, 356, 357, 359, 361, 362, 364, 371, 379, 381, 383, 384, 385, 390, 394, 396, 397, 398, 400, 401, 402, 408, 410, 414, 416, 420, 422, 423, 424, 425, 427, 430, 431, 447, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478], "subtl": [13, 23, 62, 72, 189, 211, 288, 291, 304, 423, 424, 472, 478], "incorrect": [13, 96, 100, 103, 109, 140, 153, 180, 189, 209, 221, 240, 243, 251, 263, 267, 288, 289, 344, 361, 381, 383, 384, 385, 392, 406, 417, 423, 426, 458, 459, 460, 462, 465, 469, 470, 471, 472, 476, 477, 478], "vm": [13, 62, 83, 318, 471, 478], "crash": [13, 32, 42, 56, 62, 72, 74, 98, 119, 137, 148, 172, 180, 184, 210, 243, 246, 267, 279, 288, 293, 295, 348, 357, 451, 457, 462, 463, 469, 471, 472, 474, 478], "extrem": [13, 94, 98, 100, 106, 203, 258, 264, 289, 295, 314, 384, 405, 417, 425, 478], "care": [13, 23, 32, 34, 62, 65, 67, 72, 74, 75, 83, 84, 89, 92, 93, 98, 99, 100, 102, 103, 106, 107, 111, 117, 119, 132, 141, 165, 172, 177, 179, 182, 187, 189, 192, 204, 207, 226, 246, 254, 263, 264, 265, 267, 279, 288, 295, 304, 310, 315, 326, 329, 343, 344, 346, 348, 353, 383, 384, 385, 395, 403, 406, 408, 416, 423, 425, 443, 450, 456, 457, 461, 462, 463, 464, 465, 467, 469, 470, 472, 477, 478], "renam": [13, 41, 57, 62, 67, 75, 83, 100, 109, 115, 139, 156, 209, 215, 219, 243, 244, 248, 252, 265, 267, 289, 292, 307, 324, 328, 338, 376, 383, 384, 416, 447, 457, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 473, 474, 478], "pycode_new": [13, 464, 468, 469, 476, 478], "deprec": [13, 23, 30, 32, 41, 48, 53, 55, 56, 57, 58, 60, 62, 63, 67, 88, 92, 109, 117, 119, 123, 136, 146, 148, 154, 157, 169, 172, 182, 183, 194, 195, 201, 203, 209, 214, 219, 221, 230, 238, 239, 244, 246, 248, 251, 255, 263, 268, 271, 288, 289, 292, 294, 295, 300, 301, 310, 318, 320, 323, 324, 328, 331, 333, 337, 340, 342, 348, 353, 357, 360, 361, 364, 366, 379, 383, 390, 392, 395, 398, 408, 418, 423, 425, 427, 456, 458, 459, 462, 465, 478, 479], "until": [13, 30, 32, 33, 58, 62, 65, 71, 72, 75, 78, 83, 84, 87, 89, 91, 94, 99, 100, 103, 112, 117, 119, 123, 126, 130, 131, 134, 135, 136, 140, 148, 150, 156, 173, 179, 182, 187, 203, 207, 210, 214, 221, 222, 226, 231, 238, 239, 243, 246, 254, 257, 261, 263, 265, 266, 279, 288, 289, 291, 293, 295, 301, 304, 312, 316, 321, 324, 325, 327, 329, 333, 334, 335, 336, 337, 340, 343, 344, 354, 356, 357, 360, 362, 364, 376, 379, 381, 384, 390, 395, 397, 398, 400, 402, 403, 407, 410, 411, 422, 423, 431, 447, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 477, 478], "signatur": [13, 17, 44, 57, 62, 67, 70, 84, 89, 92, 93, 98, 99, 100, 119, 123, 136, 142, 155, 156, 157, 165, 177, 179, 209, 212, 221, 222, 231, 243, 254, 263, 264, 288, 295, 309, 311, 328, 336, 337, 344, 348, 376, 379, 380, 381, 384, 385, 389, 408, 410, 414, 419, 423, 425, 435, 463, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479], "again": [13, 22, 27, 28, 32, 44, 62, 72, 74, 75, 83, 84, 91, 93, 94, 100, 103, 106, 107, 119, 130, 143, 148, 163, 166, 172, 173, 179, 184, 196, 208, 210, 217, 222, 228, 239, 243, 257, 263, 265, 271, 274, 278, 279, 288, 289, 291, 292, 293, 295, 304, 309, 324, 327, 329, 331, 336, 337, 340, 344, 348, 355, 357, 360, 364, 370, 371, 379, 382, 384, 385, 390, 395, 404, 408, 409, 422, 423, 425, 427, 430, 431, 436, 438, 456, 457, 459, 460, 463, 465, 470, 471, 475, 476, 478], "pyunstable_code_newwithposonlyarg": [13, 469], "posonlyargcount": [13, 139, 380, 476, 478], "caveat": [13, 60, 67, 112, 179, 188, 242, 246, 251, 304, 307, 384, 423, 431], "appli": [13, 18, 33, 62, 63, 67, 72, 74, 87, 93, 94, 99, 100, 109, 117, 119, 136, 138, 151, 154, 160, 165, 171, 172, 173, 174, 177, 179, 182, 183, 186, 187, 189, 194, 201, 204, 205, 209, 216, 219, 221, 222, 226, 231, 239, 240, 241, 243, 251, 255, 257, 263, 264, 266, 267, 268, 272, 279, 288, 289, 293, 295, 304, 310, 315, 317, 318, 320, 324, 328, 333, 337, 340, 341, 344, 348, 349, 353, 357, 360, 361, 362, 364, 371, 373, 377, 381, 382, 383, 384, 389, 395, 404, 406, 408, 414, 417, 421, 422, 423, 424, 425, 427, 431, 437, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 474, 475, 476, 477, 478], "pycode_newwithposonlyarg": [13, 468, 469, 476, 478], "funcnam": [13, 67, 71, 96, 141, 181, 263, 422, 435], "line": [13, 23, 24, 26, 32, 33, 63, 65, 67, 71, 72, 75, 83, 84, 88, 91, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 109, 110, 111, 115, 116, 122, 133, 134, 139, 140, 141, 143, 146, 147, 148, 149, 151, 153, 154, 155, 156, 163, 165, 166, 171, 172, 173, 174, 179, 181, 182, 183, 184, 187, 188, 189, 191, 192, 195, 196, 197, 198, 200, 201, 203, 204, 207, 209, 210, 215, 218, 219, 221, 226, 236, 238, 241, 244, 246, 247, 250, 254, 255, 257, 260, 263, 264, 265, 266, 267, 268, 274, 277, 278, 279, 281, 284, 292, 293, 294, 295, 297, 298, 301, 303, 304, 308, 309, 310, 311, 315, 317, 320, 323, 327, 328, 331, 337, 340, 341, 343, 344, 346, 347, 348, 349, 354, 358, 359, 362, 363, 364, 367, 370, 372, 376, 377, 379, 381, 382, 384, 385, 391, 394, 395, 398, 402, 406, 408, 411, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 435, 436, 437, 438, 441, 443, 444, 446, 447, 448, 450, 451, 453, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479], "pycode_addr2lin": [13, 460, 467, 468, 474], "byte_offset": 13, "pyframe_getlinenumb": [13, 26, 56, 464, 467, 468, 474, 477], "effici": [13, 22, 25, 32, 48, 59, 62, 63, 67, 91, 94, 97, 104, 106, 123, 130, 148, 154, 179, 182, 187, 209, 212, 215, 216, 220, 222, 231, 247, 250, 279, 280, 289, 295, 296, 303, 314, 315, 324, 325, 337, 340, 343, 359, 360, 400, 402, 404, 408, 423, 459, 461, 463, 465, 469, 470, 471, 472, 473, 476, 477, 478], "iter": [13, 16, 22, 28, 29, 32, 35, 48, 53, 54, 62, 63, 66, 67, 74, 77, 86, 87, 92, 97, 103, 105, 109, 113, 118, 119, 123, 130, 133, 136, 141, 146, 147, 148, 154, 156, 157, 162, 163, 165, 166, 171, 172, 177, 178, 183, 187, 190, 191, 192, 193, 201, 207, 209, 215, 216, 220, 221, 222, 226, 227, 230, 231, 232, 238, 239, 247, 248, 249, 250, 251, 252, 254, 258, 262, 263, 266, 267, 269, 271, 279, 281, 284, 289, 292, 293, 295, 296, 300, 304, 314, 315, 324, 333, 336, 339, 341, 343, 348, 357, 373, 380, 381, 384, 389, 390, 397, 402, 405, 408, 409, 410, 414, 420, 422, 426, 427, 431, 436, 437, 438, 440, 445, 457, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "626": [13, 67, 187, 469, 478], "pycode_addr2loc": [13, 468, 478], "start_lin": [13, 423], "start_column": [13, 423], "end_lin": [13, 423], "end_column": [13, 423], "column": [13, 33, 62, 67, 84, 89, 96, 106, 115, 119, 147, 148, 152, 171, 173, 186, 187, 189, 209, 218, 221, 243, 251, 257, 258, 277, 289, 296, 304, 310, 315, 328, 336, 340, 343, 359, 363, 364, 373, 408, 411, 423, 450, 457, 464, 468, 473, 478], "particular": [13, 32, 44, 58, 62, 63, 65, 67, 71, 72, 74, 84, 86, 92, 94, 97, 98, 99, 103, 106, 107, 111, 112, 117, 119, 136, 148, 154, 157, 163, 165, 172, 173, 179, 189, 199, 204, 209, 239, 243, 244, 247, 251, 255, 258, 263, 264, 265, 267, 271, 272, 279, 280, 284, 288, 289, 293, 295, 298, 304, 315, 318, 324, 328, 329, 330, 331, 333, 334, 337, 338, 340, 341, 343, 344, 348, 350, 357, 359, 360, 364, 370, 371, 376, 381, 383, 384, 385, 389, 390, 395, 397, 405, 406, 408, 415, 421, 422, 423, 425, 426, 427, 429, 431, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 478], "pycode_getcod": [13, 468, 478], "getattr": [13, 67, 77, 84, 86, 87, 92, 99, 100, 113, 123, 156, 172, 177, 187, 221, 250, 251, 279, 287, 288, 295, 341, 353, 380, 381, 422, 435, 445, 457, 470, 472, 475, 478], "co_cod": [13, 251, 423, 468, 478], "demand": [13, 41, 63, 92, 163, 279, 288, 299, 384, 422, 456, 469, 473, 477, 478], "necessarili": [13, 23, 60, 62, 71, 75, 84, 98, 112, 119, 173, 182, 189, 192, 201, 247, 267, 271, 279, 280, 289, 295, 315, 333, 336, 337, 340, 348, 361, 380, 384, 402, 405, 410, 420, 421, 431, 456, 460, 462, 463, 464, 478], "primari": [13, 67, 75, 84, 92, 93, 105, 111, 153, 165, 189, 190, 192, 201, 202, 214, 257, 263, 272, 277, 289, 295, 304, 330, 333, 336, 337, 341, 348, 373, 397, 414, 420, 426, 427, 428, 431, 447, 457, 458, 460, 461, 463, 464, 465, 470, 471, 472, 478], "debugg": [13, 31, 41, 56, 67, 72, 84, 181, 189, 209, 210, 221, 243, 250, 317, 348, 376, 383, 423, 435, 451, 456, 459, 460, 462, 463, 464, 469, 470, 474, 475, 476, 478], "profil": [13, 31, 33, 50, 67, 84, 95, 96, 154, 181, 250, 329, 337, 342, 348, 349, 360, 364, 400, 433, 446, 450, 451, 454, 458, 459, 461, 462, 463, 465, 467, 468, 469, 474, 476, 478], "pycode_getvarnam": [13, 468, 478], "co_varnam": [13, 187, 251, 423, 468, 478], "pytupleobject": [13, 53, 58, 59, 61], "pycode_getcellvar": [13, 468, 478], "co_cellvar": [13, 251, 423, 468, 478], "pycode_getfreevar": [13, 468, 478], "co_freevar": [13, 251, 423, 468, 478], "pycode_addwatch": [13, 469, 478], "pycode_watchcallback": 13, "regist": [13, 22, 27, 32, 33, 58, 60, 62, 67, 72, 75, 83, 84, 86, 89, 106, 107, 113, 117, 123, 125, 129, 130, 133, 137, 142, 154, 157, 160, 163, 165, 171, 181, 189, 193, 199, 204, 210, 221, 222, 246, 250, 252, 254, 263, 272, 279, 285, 289, 294, 295, 298, 311, 316, 324, 325, 328, 329, 333, 337, 340, 348, 357, 364, 371, 379, 381, 383, 390, 395, 397, 398, 401, 405, 408, 410, 415, 416, 422, 423, 425, 427, 456, 457, 458, 460, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478], "watcher": [13, 22, 27, 60, 62, 67, 74, 134, 469, 477, 478], "id": [13, 22, 27, 32, 44, 60, 67, 77, 86, 94, 96, 99, 100, 112, 114, 115, 119, 127, 130, 139, 150, 156, 173, 177, 183, 189, 192, 193, 196, 199, 201, 205, 221, 226, 229, 236, 250, 255, 257, 263, 264, 265, 266, 267, 268, 277, 279, 284, 289, 295, 299, 301, 303, 306, 310, 315, 318, 324, 325, 330, 333, 336, 337, 338, 344, 345, 351, 353, 360, 364, 371, 381, 383, 384, 385, 393, 396, 397, 408, 411, 423, 425, 426, 445, 458, 459, 461, 462, 463, 468, 469, 475, 476, 477, 478], "pycode_clearwatch": [13, 469, 478], "ids": [13, 22, 27, 60, 84, 226, 255, 264, 266, 279, 284, 289, 295, 299, 360, 371, 397, 461, 471, 478], "watcher_id": [13, 22, 27, 60], "clear": [13, 22, 27, 31, 32, 34, 44, 46, 57, 60, 62, 66, 67, 72, 74, 75, 79, 84, 89, 91, 94, 96, 98, 100, 102, 103, 106, 107, 115, 117, 123, 135, 152, 154, 156, 157, 160, 163, 165, 173, 178, 182, 187, 189, 190, 201, 212, 218, 219, 222, 239, 243, 246, 251, 252, 261, 263, 265, 267, 269, 272, 281, 288, 289, 293, 298, 315, 316, 328, 329, 333, 336, 340, 348, 353, 357, 360, 371, 376, 377, 379, 381, 383, 384, 385, 394, 395, 408, 418, 422, 423, 425, 437, 444, 451, 456, 457, 459, 460, 462, 463, 464, 469, 470, 471, 472, 474, 475, 477, 478], "identifi": [13, 22, 23, 27, 32, 41, 60, 63, 67, 72, 74, 75, 76, 84, 86, 89, 97, 99, 106, 107, 112, 117, 119, 150, 156, 171, 172, 187, 189, 190, 192, 201, 208, 221, 226, 243, 244, 251, 255, 264, 265, 267, 277, 279, 284, 289, 293, 298, 304, 310, 315, 316, 319, 324, 331, 333, 337, 340, 341, 342, 347, 348, 350, 357, 360, 363, 364, 367, 381, 382, 383, 385, 389, 390, 393, 400, 402, 405, 408, 410, 411, 415, 421, 422, 423, 424, 427, 428, 431, 435, 438, 443, 456, 460, 461, 462, 463, 464, 465, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478], "pycodeev": 13, "enumer": [13, 22, 23, 27, 67, 77, 92, 94, 105, 106, 147, 160, 178, 221, 222, 250, 257, 279, 307, 340, 360, 377, 400, 417, 436, 437, 445, 447, 456, 468, 469, 472, 474, 478, 479], "event": [13, 22, 24, 27, 30, 32, 41, 57, 58, 65, 67, 72, 80, 91, 96, 99, 112, 118, 120, 121, 122, 126, 127, 129, 130, 132, 133, 134, 136, 139, 141, 160, 172, 173, 181, 185, 187, 218, 223, 250, 253, 256, 263, 265, 270, 277, 279, 289, 304, 310, 324, 325, 331, 337, 338, 346, 348, 353, 357, 363, 366, 380, 383, 390, 397, 405, 406, 407, 408, 409, 410, 411, 412, 421, 423, 425, 441, 447, 450, 456, 457, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "py_code_event_cr": 13, "py_code_event_destroy": 13, "destruct": [13, 32, 72, 74, 152, 173, 251, 254, 280, 340, 423, 458, 469, 470, 478], "place": [13, 22, 23, 27, 32, 33, 34, 37, 41, 44, 46, 51, 53, 57, 59, 60, 62, 63, 67, 72, 74, 75, 76, 78, 83, 86, 89, 92, 93, 94, 96, 98, 99, 100, 105, 107, 109, 117, 119, 136, 148, 149, 154, 156, 163, 164, 165, 171, 172, 173, 177, 179, 182, 185, 186, 187, 189, 192, 201, 204, 207, 214, 220, 221, 222, 226, 228, 239, 243, 246, 254, 258, 263, 264, 265, 267, 271, 274, 279, 289, 292, 293, 295, 298, 304, 307, 310, 314, 315, 317, 320, 334, 336, 337, 340, 341, 344, 350, 359, 364, 370, 371, 375, 379, 380, 381, 383, 384, 385, 390, 392, 394, 402, 416, 417, 421, 422, 423, 425, 427, 431, 447, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 473, 474, 475, 476, 478], "prior": [13, 22, 27, 32, 44, 58, 84, 92, 99, 100, 119, 123, 140, 182, 207, 221, 222, 241, 247, 251, 263, 325, 328, 333, 336, 337, 339, 340, 344, 348, 351, 353, 357, 360, 381, 383, 397, 408, 417, 421, 422, 423, 425, 427, 430, 469, 472, 473, 474, 475, 476, 478], "inspect": [13, 22, 27, 32, 33, 65, 67, 72, 75, 86, 87, 89, 96, 100, 102, 117, 119, 126, 136, 157, 171, 177, 189, 221, 231, 246, 247, 250, 255, 263, 267, 293, 298, 303, 309, 311, 328, 329, 330, 337, 340, 348, 353, 357, 366, 377, 381, 383, 384, 390, 417, 422, 423, 450, 457, 458, 459, 463, 464, 478], "resurrect": [13, 22, 27, 348, 357, 360, 423, 470, 477, 478], "prevent": [13, 22, 23, 27, 32, 34, 41, 57, 60, 67, 72, 74, 75, 83, 84, 91, 92, 98, 99, 100, 106, 107, 123, 136, 154, 163, 165, 166, 172, 177, 182, 184, 186, 189, 202, 209, 221, 222, 243, 246, 255, 258, 264, 265, 267, 268, 272, 279, 284, 288, 289, 292, 301, 307, 331, 333, 337, 344, 348, 353, 357, 364, 376, 379, 381, 383, 384, 385, 395, 397, 404, 417, 423, 425, 427, 450, 456, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 476, 477, 478], "later": [13, 22, 23, 24, 27, 32, 33, 41, 44, 60, 71, 72, 74, 75, 83, 89, 91, 94, 99, 100, 103, 107, 111, 117, 122, 123, 135, 136, 137, 138, 146, 148, 149, 151, 152, 154, 163, 165, 172, 173, 179, 187, 192, 198, 201, 226, 231, 239, 243, 246, 251, 254, 257, 261, 262, 264, 266, 275, 279, 288, 289, 295, 315, 321, 324, 327, 329, 333, 336, 337, 348, 353, 357, 376, 381, 383, 384, 385, 390, 395, 396, 397, 416, 421, 422, 423, 425, 427, 431, 450, 451, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 472, 473, 475, 477, 478], "activ": [13, 22, 23, 27, 32, 48, 58, 62, 65, 71, 84, 91, 102, 103, 123, 129, 135, 136, 141, 148, 149, 156, 165, 173, 182, 206, 209, 214, 219, 221, 239, 243, 247, 268, 279, 284, 288, 291, 293, 301, 304, 310, 324, 330, 334, 336, 337, 340, 344, 348, 360, 361, 364, 371, 379, 380, 384, 385, 394, 406, 407, 410, 431, 436, 448, 450, 456, 457, 459, 460, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "user": [13, 23, 28, 32, 33, 34, 38, 41, 60, 62, 63, 65, 67, 69, 71, 72, 73, 75, 78, 83, 84, 85, 89, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 111, 115, 117, 123, 130, 132, 136, 139, 141, 148, 151, 152, 153, 154, 155, 156, 157, 159, 163, 165, 169, 173, 175, 177, 179, 181, 182, 183, 185, 189, 196, 206, 207, 208, 209, 212, 219, 222, 224, 225, 226, 229, 231, 238, 239, 241, 244, 246, 247, 250, 251, 252, 253, 254, 262, 263, 265, 267, 268, 271, 277, 279, 284, 288, 289, 290, 291, 292, 293, 295, 296, 301, 307, 308, 315, 316, 318, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 343, 344, 348, 350, 351, 353, 354, 355, 357, 360, 361, 364, 365, 368, 370, 371, 375, 376, 379, 380, 383, 385, 389, 390, 391, 394, 395, 398, 400, 402, 406, 407, 408, 409, 410, 414, 416, 417, 420, 421, 422, 423, 424, 425, 427, 431, 433, 436, 448, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "reli": [13, 50, 72, 75, 87, 92, 93, 98, 100, 102, 130, 137, 148, 157, 177, 179, 221, 246, 251, 263, 272, 279, 288, 289, 295, 298, 326, 328, 340, 348, 357, 359, 360, 361, 383, 385, 394, 422, 423, 424, 427, 456, 457, 460, 461, 462, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "runtim": [13, 24, 27, 32, 34, 41, 50, 51, 58, 65, 67, 72, 74, 75, 76, 84, 86, 87, 89, 98, 99, 106, 110, 137, 139, 159, 163, 172, 178, 184, 187, 209, 221, 246, 250, 253, 264, 265, 288, 307, 336, 340, 344, 348, 349, 364, 377, 381, 384, 395, 399, 406, 416, 419, 422, 423, 424, 427, 431, 435, 450, 451, 456, 458, 460, 464, 465, 467, 469, 471, 472, 473, 474, 477, 478], "creation": [13, 16, 27, 32, 57, 58, 62, 67, 72, 75, 84, 92, 93, 94, 99, 100, 115, 117, 130, 132, 134, 136, 146, 177, 178, 182, 188, 193, 207, 221, 222, 226, 244, 246, 250, 251, 252, 254, 263, 266, 267, 277, 279, 280, 284, 288, 301, 307, 317, 318, 327, 328, 331, 338, 340, 341, 344, 353, 355, 357, 364, 370, 384, 397, 405, 408, 416, 421, 422, 424, 427, 460, 469, 471, 472, 473, 475, 477, 478], "observ": [13, 27, 84, 93, 96, 100, 179, 204, 314, 339, 344, 377, 379, 389, 431, 459, 471, 478], "print": [13, 22, 27, 31, 32, 33, 41, 48, 58, 62, 67, 71, 72, 74, 75, 77, 78, 83, 84, 85, 86, 87, 88, 89, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 109, 110, 111, 112, 115, 119, 120, 122, 123, 126, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 147, 148, 152, 153, 155, 156, 159, 162, 163, 165, 166, 168, 171, 172, 173, 177, 179, 180, 182, 184, 186, 187, 189, 192, 196, 197, 200, 201, 207, 209, 210, 212, 216, 221, 222, 224, 226, 228, 231, 236, 238, 240, 241, 243, 244, 246, 247, 250, 251, 254, 257, 258, 263, 265, 267, 274, 275, 278, 279, 284, 289, 292, 293, 295, 296, 297, 300, 301, 303, 304, 305, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 325, 327, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 344, 346, 348, 350, 352, 353, 354, 355, 357, 359, 360, 362, 364, 370, 371, 373, 375, 377, 379, 381, 383, 384, 390, 392, 394, 395, 397, 400, 402, 403, 406, 407, 408, 411, 412, 414, 415, 416, 417, 420, 422, 423, 424, 425, 430, 431, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "unrais": [13, 22, 23, 27, 139, 336, 348, 357, 468, 476, 478], "pyerr_writeunrais": [13, 22, 23, 27, 56, 74, 478], "pend": [13, 22, 23, 27, 32, 38, 67, 74, 109, 123, 130, 136, 162, 254, 267, 277, 301, 324, 329, 336, 337, 425, 470, 471, 472, 474, 477, 478], "save": [13, 22, 23, 27, 32, 41, 62, 67, 71, 72, 74, 84, 89, 92, 93, 94, 98, 99, 100, 103, 117, 136, 137, 146, 148, 149, 152, 163, 165, 173, 179, 183, 196, 205, 222, 239, 243, 252, 257, 262, 265, 266, 267, 288, 289, 295, 304, 309, 315, 316, 330, 336, 348, 357, 360, 361, 363, 364, 376, 378, 379, 395, 400, 414, 420, 422, 423, 459, 461, 462, 463, 464, 465, 466, 469, 470, 472, 475, 477, 478], "restor": [13, 17, 22, 23, 27, 32, 62, 67, 74, 89, 91, 100, 129, 154, 165, 166, 167, 173, 182, 183, 186, 187, 239, 243, 251, 262, 288, 295, 297, 315, 316, 320, 336, 344, 348, 353, 356, 357, 358, 360, 371, 379, 381, 383, 384, 385, 395, 400, 423, 457, 459, 460, 462, 463, 469, 472, 475, 477, 478], "evalu": [13, 22, 32, 51, 55, 65, 67, 72, 84, 87, 89, 93, 94, 101, 110, 119, 141, 221, 226, 257, 263, 264, 271, 279, 289, 293, 319, 320, 340, 348, 360, 364, 381, 389, 397, 422, 423, 428, 430, 431, 441, 444, 451, 457, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 476, 477, 478], "extern": [13, 34, 50, 67, 72, 78, 83, 84, 89, 92, 98, 100, 115, 118, 119, 148, 154, 163, 172, 180, 193, 212, 243, 246, 251, 253, 263, 268, 289, 294, 307, 310, 334, 340, 343, 344, 353, 357, 360, 364, 379, 383, 402, 403, 404, 405, 407, 408, 409, 410, 411, 417, 423, 425, 456, 463, 465, 466, 470, 473, 474, 475, 476, 477, 478], "compil": [13, 30, 32, 33, 41, 44, 57, 58, 62, 65, 67, 73, 75, 76, 78, 83, 84, 85, 89, 94, 100, 101, 106, 109, 110, 139, 153, 163, 172, 176, 178, 180, 187, 189, 209, 216, 221, 226, 231, 238, 243, 244, 246, 248, 250, 251, 260, 264, 266, 270, 304, 310, 315, 316, 320, 327, 336, 337, 340, 341, 343, 348, 350, 354, 357, 358, 362, 376, 380, 381, 382, 383, 395, 405, 417, 421, 423, 424, 427, 429, 430, 431, 435, 445, 450, 453, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "attach": [13, 32, 44, 67, 71, 98, 99, 100, 117, 123, 129, 179, 183, 189, 190, 192, 193, 195, 199, 201, 202, 203, 208, 243, 263, 264, 280, 281, 324, 325, 336, 348, 364, 370, 383, 385, 402, 420, 421, 422, 423, 431, 458, 460, 464, 465, 471, 474, 476, 478], "tier": [13, 56, 468, 469, 478], "pyunstable_eval_requestcodeextraindex": [13, 469], "freefunc": [13, 44, 62, 74], "adding": [13, 22, 32, 46, 56, 60, 67, 72, 73, 76, 83, 84, 91, 92, 94, 98, 102, 103, 107, 119, 138, 148, 177, 182, 191, 192, 193, 201, 202, 203, 239, 243, 258, 263, 267, 289, 315, 336, 340, 346, 360, 371, 381, 383, 384, 390, 397, 402, 408, 417, 418, 423, 425, 427, 430, 431, 450, 456, 457, 459, 460, 461, 462, 463, 465, 469, 470, 472, 473, 475, 476, 477, 478, 479], "pycode_getextra": 13, "pycode_setextra": 13, "py_decref": [13, 22, 23, 28, 34, 35, 44, 51, 56, 62, 71, 72, 74, 75, 78, 86, 467, 469, 476, 478], "_pyeval_requestcodeextraindex": [13, 469], "privat": [13, 31, 32, 41, 42, 56, 67, 84, 92, 93, 94, 172, 177, 186, 219, 221, 243, 244, 246, 255, 274, 279, 295, 301, 331, 337, 342, 344, 357, 381, 384, 425, 430, 431, 435, 456, 458, 459, 460, 463, 469, 470, 471, 472, 473, 474, 476, 478], "pyunstable_code_getextra": [13, 469], "_pycode_getextra": [13, 469, 478], "pyunstable_code_setextra": [13, 469], "_pycode_setextra": [13, 469, 478], "pycodec_regist": [14, 56], "search_funct": [14, 154], "pycodec_unregist": [14, 56, 467, 478], "registri": [14, 23, 33, 63, 67, 142, 163, 171, 191, 193, 199, 222, 246, 250, 255, 265, 272, 295, 299, 337, 348, 349, 381, 390, 395, 399, 401, 408, 453, 457, 463, 464, 474, 477, 478], "pycodec_knownencod": [14, 56], "pycodec_encod": [14, 56], "lookuperror": [14, 23, 63, 67, 154, 166, 209, 340, 445, 472], "pycodec_decod": [14, 56], "keyerror": [14, 22, 23, 34, 54, 67, 77, 84, 156, 163, 166, 180, 192, 193, 201, 207, 209, 229, 232, 239, 246, 257, 267, 292, 306, 324, 325, 326, 335, 340, 341, 350, 353, 380, 381, 382, 384, 385, 417, 420, 423, 427, 445, 447, 460, 461, 464, 471, 474, 476, 478], "pycodec_incrementalencod": [14, 56], "incrementalencod": [14, 67, 142, 462], "pycodec_incrementaldecod": [14, 56], "incrementaldecod": [14, 67, 142, 254, 462], "pycodec_streamread": [14, 56], "stream": [14, 32, 33, 40, 67, 83, 86, 94, 99, 104, 106, 115, 123, 133, 134, 136, 142, 143, 146, 153, 165, 173, 190, 196, 197, 202, 203, 208, 209, 215, 221, 225, 230, 238, 241, 243, 245, 248, 250, 257, 258, 263, 264, 265, 266, 272, 277, 289, 294, 296, 303, 304, 310, 324, 325, 327, 328, 329, 330, 332, 333, 334, 344, 345, 348, 353, 357, 373, 381, 383, 390, 394, 396, 402, 403, 404, 407, 408, 411, 412, 414, 417, 423, 425, 429, 430, 450, 457, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 478], "streamread": [14, 67, 121, 123, 134, 142, 461, 462, 473, 474, 478], "pycodec_streamwrit": [14, 56], "streamwrit": [14, 67, 121, 123, 134, 142, 462, 468, 475, 478], "pycodec_registererror": [14, 56], "unicodeencodeerror": [14, 23, 44, 67, 70, 106, 154, 209, 348, 389, 445, 468, 470, 476, 478], "unicodedecodeerror": [14, 23, 67, 106, 154, 209, 289, 389, 445, 462, 465, 470, 472, 476, 478], "unicodetranslateerror": [14, 23, 67, 154, 209, 445, 478], "pycodec_lookuperror": [14, 56], "strict": [14, 33, 62, 63, 67, 72, 93, 94, 97, 100, 106, 117, 130, 140, 154, 163, 171, 172, 177, 178, 179, 182, 190, 198, 203, 204, 207, 213, 214, 221, 236, 238, 239, 240, 244, 248, 251, 254, 255, 257, 258, 271, 272, 281, 289, 290, 291, 292, 295, 337, 340, 348, 357, 361, 389, 390, 405, 421, 422, 423, 424, 425, 427, 430, 451, 457, 458, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 475, 478], "pycodec_stricterror": [14, 56], "exc": [14, 23, 32, 46, 109, 119, 130, 136, 162, 165, 209, 376, 383, 385, 423, 431, 438, 463, 465, 467, 469, 471, 478], "pycodec_ignoreerror": [14, 56], "pycodec_replaceerror": [14, 56], "fffd": [14, 106, 154, 457], "pycodec_xmlcharrefreplaceerror": [14, 56], "xml": [14, 67, 79, 94, 103, 106, 154, 221, 250, 252, 254, 269, 300, 323, 390, 413, 446, 447, 456, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 474, 478, 479], "pycodec_backslashreplaceerror": [14, 56], "pycodec_namereplaceerror": [14, 56, 473], "derefer": [15, 56, 279, 353, 478], "real": [15, 34, 37, 46, 58, 67, 71, 75, 84, 86, 92, 100, 107, 141, 150, 151, 153, 165, 172, 187, 189, 196, 201, 209, 221, 222, 244, 246, 258, 284, 285, 286, 289, 304, 315, 318, 320, 327, 329, 330, 336, 337, 339, 340, 341, 348, 349, 361, 364, 383, 384, 385, 408, 422, 423, 426, 430, 435, 456, 462, 463, 464, 469, 470, 471, 474, 478], "_py_c_sum": 15, "_py_c_diff": 15, "_py_c_neg": 15, "num": [15, 100, 119, 154, 173, 182, 222, 226, 236, 244, 279, 288, 296, 337, 341, 381, 436, 437, 463, 464, 469, 476, 478], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 182], "divisor": [15, 182, 271, 444], "errno": [15, 23, 34, 50, 67, 72, 83, 115, 130, 139, 172, 184, 209, 211, 246, 250, 289, 310, 324, 329, 333, 337, 348, 357, 438, 463, 468, 471, 473, 475, 478], "edom": [15, 67, 115, 208], "_py_c_pow": 15, "exp": [15, 67, 151, 182, 221, 271, 286, 314, 341, 463, 464, 471, 478], "pycomplexobject": 15, "pycomplex_typ": [15, 56], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 56], "pycomplex_realasdoubl": [15, 56], "pycomplex_imagasdoubl": [15, 56], "pycomplex_asccomplex": [15, 463], "__complex__": [15, 67, 151, 221, 258, 381, 384, 423, 463, 468, 472, 475, 476, 478], "__float__": [15, 25, 62, 67, 151, 221, 381, 384, 423, 467, 475, 476, 478], "__index__": [15, 25, 38, 62, 67, 220, 221, 287, 340, 343, 381, 384, 423, 463, 464, 465, 467, 468, 472, 475, 476, 478, 479], "pydict_check": [16, 22], "tree": [16, 32, 33, 62, 67, 77, 83, 84, 89, 94, 109, 148, 159, 170, 186, 190, 192, 200, 201, 203, 212, 243, 250, 260, 269, 289, 292, 307, 308, 328, 338, 340, 348, 352, 355, 363, 364, 370, 371, 379, 394, 404, 405, 406, 423, 426, 447, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 473, 474, 476, 477, 478], "singleton": [16, 20, 32, 44, 45, 48, 55, 57, 62, 72, 84, 86, 93, 100, 119, 179, 270, 295, 340, 384, 414, 422, 423, 425, 436, 437, 451, 458, 468, 474, 475, 478], "heap": [16, 31, 34, 41, 49, 57, 67, 72, 74, 75, 89, 178, 210, 250, 278, 318, 379, 447, 460, 461, 463, 464, 467, 468, 469, 476, 477, 478], "pack": [16, 67, 100, 138, 142, 172, 211, 221, 230, 243, 250, 252, 255, 264, 265, 267, 280, 281, 289, 299, 333, 340, 364, 369, 371, 403, 416, 423, 437, 447, 462, 464, 468, 470, 478], "unpack": [16, 67, 72, 83, 89, 94, 100, 109, 119, 142, 156, 183, 187, 196, 211, 221, 279, 300, 328, 333, 340, 341, 343, 346, 380, 381, 384, 422, 425, 426, 431, 437, 438, 440, 447, 457, 461, 462, 463, 465, 467, 468, 469, 470, 472, 476, 478], "properti": [16, 57, 62, 67, 84, 86, 93, 94, 97, 99, 103, 113, 119, 147, 154, 156, 166, 171, 172, 173, 177, 178, 182, 189, 191, 192, 199, 201, 204, 207, 215, 217, 221, 222, 226, 231, 237, 247, 250, 251, 253, 254, 255, 258, 262, 267, 277, 279, 300, 327, 331, 337, 340, 342, 343, 348, 360, 373, 377, 379, 380, 381, 382, 383, 384, 390, 397, 400, 405, 406, 409, 410, 411, 417, 421, 422, 423, 430, 431, 445, 456, 457, 459, 460, 461, 462, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "codec": [16, 33, 67, 86, 102, 106, 142, 191, 197, 198, 209, 221, 250, 254, 289, 331, 340, 358, 417, 443, 446, 456, 457, 459, 461, 462, 465, 468, 473, 474, 476, 477, 478, 479], "escap": [16, 41, 48, 58, 67, 72, 77, 84, 91, 100, 103, 106, 117, 123, 134, 154, 163, 171, 173, 174, 186, 204, 215, 218, 221, 227, 234, 243, 246, 254, 258, 269, 284, 315, 317, 327, 340, 341, 344, 358, 361, 379, 381, 389, 412, 414, 423, 430, 444, 457, 458, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "latin": [16, 67, 103, 106, 117, 133, 154, 191, 219, 235, 315, 327, 353, 382, 425, 459, 460, 463, 466, 470, 473, 474, 475, 477, 478], "ascii": [16, 23, 30, 33, 41, 48, 57, 67, 70, 91, 99, 100, 103, 104, 106, 107, 115, 117, 119, 130, 134, 140, 142, 148, 154, 172, 173, 179, 187, 191, 192, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 210, 221, 226, 233, 244, 250, 252, 254, 258, 262, 268, 278, 281, 282, 284, 289, 295, 310, 313, 315, 327, 331, 334, 336, 337, 340, 341, 342, 345, 353, 354, 357, 358, 390, 392, 408, 414, 417, 421, 429, 430, 436, 441, 443, 445, 450, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478], "mbcs": [16, 32, 33, 67, 142, 348, 450, 456, 459, 460, 470, 471, 474, 478], "window": [16, 23, 32, 33, 34, 41, 56, 58, 62, 65, 67, 70, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86, 89, 99, 100, 102, 104, 106, 107, 108, 112, 115, 117, 123, 129, 130, 134, 142, 148, 152, 160, 162, 163, 172, 175, 209, 210, 218, 221, 225, 227, 239, 246, 250, 254, 257, 262, 265, 268, 271, 272, 274, 277, 278, 279, 288, 289, 290, 292, 302, 312, 324, 325, 327, 328, 329, 330, 331, 333, 336, 337, 338, 348, 349, 350, 353, 355, 356, 357, 360, 361, 363, 365, 366, 367, 370, 371, 373, 383, 390, 392, 394, 398, 402, 416, 417, 420, 421, 423, 430, 433, 434, 436, 441, 443, 445, 448, 450, 451, 453, 457, 458, 459, 461, 462, 465, 466, 467, 469, 470, 472, 473, 476, 477, 479], "cell": [16, 27, 65, 67, 84, 91, 92, 115, 172, 187, 222, 250, 251, 371, 380, 423, 463, 468, 478], "phase": [16, 31, 32, 67, 70, 72, 98, 135, 151, 223, 246, 286, 337, 371, 426, 427, 431, 463, 467, 470, 471, 478], "lookup": [16, 17, 22, 30, 60, 62, 67, 76, 84, 93, 119, 142, 144, 154, 156, 177, 187, 191, 199, 207, 209, 221, 222, 226, 241, 251, 255, 260, 265, 283, 289, 340, 341, 347, 348, 358, 363, 364, 371, 376, 382, 384, 420, 422, 427, 457, 459, 461, 462, 463, 469, 470, 471, 472, 474, 476, 477, 478], "descriptor": [16, 23, 24, 30, 32, 48, 60, 62, 67, 74, 77, 80, 83, 86, 93, 96, 113, 115, 122, 127, 128, 129, 130, 172, 173, 181, 183, 208, 211, 214, 221, 222, 231, 244, 251, 253, 254, 264, 274, 278, 279, 291, 305, 308, 311, 318, 324, 325, 328, 329, 333, 334, 337, 340, 344, 353, 354, 356, 357, 364, 378, 380, 422, 425, 431, 461, 462, 463, 464, 467, 468, 469, 470, 471, 473, 475, 477, 478], "ellipsi": [16, 62, 67, 86, 119, 164, 183, 189, 250, 260, 270, 303, 372, 373, 380, 381, 423, 426, 430, 445, 461, 465, 469, 476, 478], "capsul": [16, 67, 72, 94, 465, 478], "generat": [16, 26, 30, 32, 48, 50, 57, 63, 65, 67, 70, 71, 72, 74, 76, 78, 84, 86, 96, 99, 100, 101, 106, 109, 110, 117, 119, 123, 127, 131, 132, 134, 136, 138, 139, 140, 141, 147, 148, 152, 154, 157, 159, 162, 165, 169, 171, 173, 177, 178, 179, 183, 186, 187, 189, 190, 192, 199, 201, 204, 205, 207, 209, 213, 221, 222, 223, 226, 231, 238, 240, 241, 244, 250, 257, 260, 263, 265, 267, 271, 277, 279, 280, 281, 289, 292, 295, 303, 307, 310, 311, 314, 315, 317, 319, 322, 327, 331, 336, 339, 342, 344, 346, 348, 353, 361, 364, 371, 372, 373, 375, 376, 379, 380, 381, 383, 389, 390, 393, 397, 402, 404, 405, 408, 412, 414, 415, 416, 421, 422, 423, 424, 426, 427, 429, 430, 431, 440, 450, 451, 456, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479], "coroutin": [16, 26, 67, 86, 94, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 134, 135, 157, 165, 178, 182, 183, 184, 187, 209, 311, 340, 348, 381, 383, 384, 425, 451, 462, 468, 469, 474, 475, 476, 477, 478], "datetim": [16, 67, 84, 93, 100, 123, 130, 134, 136, 147, 178, 186, 190, 199, 205, 207, 244, 250, 252, 265, 281, 284, 295, 300, 336, 337, 341, 361, 374, 380, 385, 414, 415, 420, 430, 446, 460, 461, 462, 463, 464, 467, 469, 473, 478], "pycontext": 17, "pycontextvar": [17, 478], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 34, 179, 184, 222, 263, 265, 279, 289, 298, 328, 381, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "34762": [17, 475, 478], "public": [17, 26, 28, 32, 33, 54, 56, 62, 67, 83, 92, 104, 107, 123, 152, 171, 172, 186, 200, 207, 218, 219, 231, 236, 239, 246, 247, 251, 255, 260, 279, 288, 310, 327, 333, 337, 341, 347, 348, 353, 357, 359, 362, 381, 382, 383, 390, 403, 405, 408, 411, 421, 430, 431, 435, 457, 458, 460, 461, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "contextvar": [17, 67, 86, 123, 126, 132, 136, 160, 182, 250, 451, 478], "token": [17, 65, 67, 83, 113, 119, 160, 166, 170, 218, 246, 250, 260, 261, 277, 282, 300, 310, 314, 327, 344, 352, 358, 390, 422, 426, 428, 429, 438, 442, 464, 465, 470, 474, 475, 478], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 41, 100, 119, 166, 182, 279, 337, 463], "shallow": [17, 32, 67, 156, 166, 177, 178, 189, 212, 240, 250, 251, 295, 340, 353, 380, 437, 478], "pycontext_copycurr": 17, "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 89, 348, 364, 394, 423, 448, 456, 469, 478], "pycontextvar_new": 17, "introspect": [17, 67, 74, 84, 86, 89, 92, 166, 183, 187, 209, 222, 246, 295, 311, 364, 380, 384, 414, 415, 423, 427, 465, 467, 468, 469, 470, 471, 472, 473, 478], "debug": [17, 31, 32, 33, 48, 62, 65, 67, 74, 75, 84, 91, 96, 99, 100, 101, 102, 115, 116, 119, 122, 132, 141, 149, 166, 172, 182, 183, 184, 187, 192, 200, 201, 207, 209, 218, 238, 244, 252, 263, 264, 265, 275, 284, 288, 289, 293, 297, 301, 315, 327, 331, 336, 337, 340, 346, 348, 353, 354, 355, 357, 358, 363, 364, 370, 377, 381, 383, 384, 395, 408, 414, 417, 423, 424, 430, 431, 441, 447, 450, 452, 453, 456, 457, 458, 459, 460, 462, 463, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478], "pycontextvar_get": 17, "var": [17, 67, 77, 84, 86, 87, 92, 93, 100, 117, 119, 156, 160, 163, 166, 221, 250, 265, 340, 350, 355, 381, 384, 426, 436, 441, 445, 461, 462, 463, 464, 465, 467, 470, 478], "default_valu": [17, 89], "dure": [17, 18, 22, 23, 28, 32, 33, 44, 50, 57, 62, 63, 67, 76, 84, 89, 92, 93, 100, 102, 119, 130, 136, 137, 148, 154, 163, 172, 173, 177, 179, 182, 187, 189, 194, 197, 198, 199, 204, 207, 209, 214, 222, 231, 246, 247, 254, 258, 263, 264, 265, 266, 267, 277, 284, 289, 292, 295, 304, 309, 310, 315, 316, 319, 328, 329, 330, 331, 336, 337, 340, 348, 355, 356, 357, 361, 362, 371, 375, 377, 379, 380, 381, 383, 384, 385, 395, 397, 408, 409, 410, 411, 417, 420, 422, 423, 425, 427, 430, 431, 438, 439, 450, 456, 457, 460, 461, 462, 463, 464, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 32, 58, 67, 84, 93, 94, 107, 135, 141, 142, 152, 153, 154, 156, 160, 166, 173, 181, 182, 186, 194, 202, 208, 209, 210, 214, 218, 236, 241, 243, 246, 263, 269, 279, 289, 291, 297, 322, 324, 329, 333, 337, 340, 346, 351, 353, 357, 360, 361, 370, 375, 379, 383, 384, 395, 403, 407, 408, 411, 420, 422, 430, 459, 463, 470, 471, 472, 473, 478], "pyos_snprintf": [18, 56, 459], "unix": [18, 23, 32, 33, 34, 58, 65, 67, 72, 73, 79, 80, 82, 86, 91, 94, 99, 104, 106, 112, 115, 117, 121, 127, 128, 129, 130, 133, 134, 143, 147, 156, 163, 170, 171, 173, 186, 192, 195, 197, 204, 211, 215, 221, 224, 225, 226, 229, 239, 243, 250, 253, 254, 257, 262, 265, 267, 268, 274, 279, 282, 283, 284, 288, 289, 290, 291, 292, 294, 297, 301, 302, 305, 306, 309, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 344, 346, 348, 349, 353, 355, 356, 357, 360, 361, 364, 370, 378, 383, 398, 402, 416, 417, 430, 433, 434, 441, 443, 448, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478], "man": [18, 91, 123, 169, 267, 289, 309, 318, 324, 329, 333, 338, 361, 364, 370, 464, 478], "page": [18, 63, 67, 83, 86, 91, 94, 99, 100, 107, 112, 117, 123, 130, 133, 147, 154, 162, 165, 169, 173, 186, 207, 211, 243, 247, 250, 254, 262, 263, 264, 265, 267, 274, 280, 289, 300, 309, 310, 318, 324, 329, 333, 336, 338, 343, 346, 351, 356, 357, 360, 361, 364, 370, 379, 390, 398, 402, 408, 415, 417, 421, 429, 435, 446, 448, 450, 456, 457, 459, 461, 462, 463, 464, 470, 471, 474, 475, 476, 478], "snprintf": [18, 459, 467, 478], "pyos_vsnprintf": [18, 56, 459], "va": [18, 421], "vsnprintf": [18, 459, 467, 478], "behavior": [18, 22, 23, 27, 28, 32, 33, 34, 41, 57, 60, 62, 67, 72, 78, 84, 89, 91, 92, 93, 98, 99, 100, 111, 116, 117, 123, 129, 136, 146, 153, 163, 169, 171, 172, 173, 177, 179, 182, 186, 189, 190, 192, 197, 199, 201, 202, 204, 207, 209, 211, 214, 221, 230, 238, 241, 243, 246, 251, 253, 254, 257, 258, 262, 263, 265, 266, 267, 271, 272, 279, 280, 284, 288, 289, 292, 295, 298, 305, 310, 324, 327, 328, 329, 330, 331, 333, 334, 337, 339, 340, 341, 343, 344, 348, 353, 355, 357, 360, 361, 362, 364, 369, 371, 373, 376, 381, 383, 389, 390, 395, 402, 405, 420, 422, 423, 424, 425, 427, 430, 431, 450, 451, 456, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 477, 478, 479], "corner": [18, 62, 91, 173, 379, 402, 459, 462, 463, 468, 478], "upon": [18, 25, 32, 40, 63, 65, 71, 72, 84, 92, 99, 137, 141, 148, 152, 154, 155, 165, 169, 171, 173, 182, 184, 185, 189, 238, 240, 243, 244, 246, 267, 280, 289, 293, 295, 324, 325, 327, 329, 330, 336, 337, 343, 348, 350, 355, 357, 375, 394, 395, 396, 405, 421, 423, 425, 427, 458, 463, 471, 472, 474, 476, 478], "int_max": [18, 478], "c99": [18, 34, 62, 75, 151, 172, 271, 340, 343, 348, 439, 451, 463, 467, 470, 474, 478], "necessari": [18, 32, 34, 48, 60, 62, 63, 71, 72, 75, 76, 83, 84, 92, 93, 94, 97, 98, 99, 100, 102, 103, 109, 112, 117, 130, 136, 140, 151, 152, 154, 157, 163, 165, 173, 180, 182, 187, 189, 190, 191, 192, 201, 202, 203, 204, 205, 209, 221, 222, 238, 239, 243, 244, 246, 254, 257, 262, 263, 266, 267, 268, 271, 274, 279, 284, 288, 289, 292, 295, 298, 304, 328, 331, 333, 336, 337, 340, 342, 343, 344, 350, 351, 357, 359, 360, 362, 367, 369, 371, 379, 383, 397, 400, 402, 403, 405, 407, 410, 414, 417, 423, 424, 425, 426, 431, 456, 459, 460, 462, 463, 464, 466, 469, 471, 472, 473, 474, 476, 478], "rv": [18, 34, 211], "someth": [18, 22, 32, 35, 72, 74, 83, 84, 88, 89, 91, 92, 94, 97, 98, 99, 100, 102, 103, 104, 117, 119, 129, 136, 141, 148, 165, 171, 172, 197, 209, 221, 224, 243, 247, 249, 251, 257, 258, 263, 264, 279, 288, 289, 295, 304, 310, 318, 334, 336, 337, 353, 357, 360, 364, 381, 383, 384, 385, 390, 396, 397, 402, 405, 408, 414, 420, 423, 426, 427, 431, 436, 444, 457, 458, 459, 460, 461, 462, 463, 464, 467, 469, 470, 477, 478], "bad": [18, 41, 67, 71, 72, 99, 102, 107, 117, 171, 183, 186, 189, 197, 208, 209, 231, 243, 262, 264, 267, 279, 288, 304, 329, 379, 381, 392, 417, 431, 436, 438, 459, 463, 465, 467, 472, 474, 478], "happen": [18, 23, 25, 32, 58, 67, 72, 75, 83, 89, 91, 92, 94, 100, 102, 107, 112, 123, 136, 153, 165, 172, 173, 177, 179, 186, 203, 209, 221, 222, 243, 246, 251, 254, 262, 263, 264, 265, 280, 288, 289, 291, 295, 310, 315, 324, 330, 333, 337, 340, 341, 348, 354, 355, 356, 357, 360, 364, 376, 383, 384, 385, 390, 402, 422, 423, 424, 425, 427, 430, 431, 438, 457, 459, 461, 462, 463, 464, 465, 469, 472, 473, 476, 477, 478], "pyos_string_to_doubl": [18, 56, 464, 466], "endptr": 18, "overflow_except": 18, "whitespac": [18, 38, 63, 67, 84, 93, 94, 103, 106, 109, 117, 123, 134, 140, 143, 152, 163, 171, 174, 182, 186, 189, 195, 198, 199, 204, 217, 218, 241, 243, 251, 258, 262, 293, 310, 315, 327, 340, 341, 343, 344, 357, 358, 359, 361, 376, 395, 405, 408, 410, 450, 457, 460, 463, 464, 466, 470, 471, 472, 475, 478], "whole": [18, 41, 78, 89, 96, 97, 103, 117, 138, 147, 154, 163, 165, 173, 179, 203, 204, 231, 238, 255, 257, 263, 274, 288, 289, 292, 301, 303, 315, 324, 333, 336, 340, 359, 370, 383, 405, 408, 421, 422, 430, 450, 457, 464, 472, 476, 478], "much": [18, 23, 34, 54, 60, 62, 66, 72, 74, 75, 83, 84, 87, 89, 91, 94, 100, 102, 103, 106, 107, 117, 123, 134, 148, 151, 154, 163, 172, 182, 189, 190, 199, 203, 221, 251, 254, 257, 265, 266, 267, 271, 279, 288, 289, 291, 295, 304, 315, 326, 333, 344, 350, 364, 371, 377, 379, 381, 383, 384, 385, 405, 406, 414, 422, 427, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 476, 477, 478], "unconvert": 18, "segment": [18, 41, 47, 119, 151, 172, 189, 210, 211, 216, 279, 289, 329, 361, 389, 394, 402, 462, 464, 470, 471, 478], "1e500": 18, "py_huge_v": 18, "out": [18, 23, 30, 33, 34, 37, 38, 41, 55, 56, 58, 59, 63, 67, 71, 72, 75, 84, 88, 89, 91, 93, 94, 97, 99, 100, 102, 103, 106, 107, 117, 119, 130, 131, 136, 137, 138, 141, 146, 154, 157, 159, 163, 171, 172, 173, 174, 179, 180, 182, 186, 187, 189, 191, 192, 199, 201, 207, 208, 209, 211, 222, 226, 231, 239, 243, 246, 247, 249, 254, 255, 257, 258, 262, 263, 271, 279, 288, 289, 291, 293, 294, 296, 300, 304, 307, 309, 310, 315, 318, 324, 327, 329, 333, 334, 336, 337, 340, 341, 343, 344, 348, 353, 357, 360, 364, 376, 379, 380, 381, 383, 384, 385, 389, 394, 395, 402, 404, 405, 408, 412, 414, 418, 420, 421, 422, 423, 424, 431, 436, 437, 439, 444, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 478], "pyos_double_to_str": [18, 56], "val": [18, 22, 23, 72, 94, 113, 163, 186, 187, 192, 201, 219, 240, 262, 293, 336, 340, 381, 385, 390, 423, 462, 469, 478], "format_cod": 18, "ptype": [18, 23, 299, 478], "repr": [18, 23, 24, 48, 62, 63, 67, 74, 93, 100, 105, 106, 109, 119, 136, 172, 177, 178, 179, 187, 189, 207, 221, 238, 243, 250, 279, 310, 325, 333, 340, 341, 348, 357, 359, 373, 376, 380, 381, 384, 385, 420, 422, 423, 430, 431, 439, 441, 445, 447, 457, 458, 460, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "ed": [18, 41, 62, 72, 91, 163, 173, 189, 207, 266, 289, 315, 328, 336, 467, 470, 477, 478], "togeth": [18, 60, 62, 67, 71, 87, 89, 91, 92, 94, 97, 99, 100, 102, 103, 117, 123, 130, 154, 156, 171, 172, 189, 198, 203, 204, 214, 221, 230, 231, 239, 240, 243, 255, 257, 263, 264, 267, 289, 328, 337, 340, 346, 364, 369, 379, 381, 383, 384, 385, 390, 394, 407, 409, 421, 423, 425, 444, 461, 469, 470, 471, 477, 478], "preced": [18, 67, 92, 99, 100, 101, 103, 150, 163, 171, 174, 179, 186, 187, 189, 190, 198, 203, 222, 243, 251, 262, 263, 264, 272, 299, 304, 315, 330, 333, 336, 340, 341, 343, 344, 348, 361, 364, 371, 379, 395, 405, 408, 414, 415, 417, 422, 423, 424, 426, 428, 429, 430, 431, 450, 451, 456, 458, 459, 471, 475, 478], "look": [18, 28, 32, 34, 41, 44, 48, 50, 62, 63, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 106, 107, 109, 111, 117, 119, 123, 136, 138, 140, 148, 151, 154, 163, 165, 172, 173, 176, 177, 179, 182, 185, 186, 187, 189, 192, 193, 195, 199, 201, 207, 209, 221, 222, 226, 230, 239, 241, 243, 246, 247, 255, 261, 263, 264, 265, 267, 288, 289, 291, 292, 298, 304, 309, 315, 320, 328, 334, 336, 337, 340, 341, 344, 348, 349, 350, 357, 362, 364, 371, 373, 376, 377, 380, 381, 382, 383, 384, 385, 390, 397, 402, 405, 408, 418, 420, 422, 423, 424, 425, 427, 430, 431, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 471, 472, 474, 476, 478], "rule": [18, 23, 28, 32, 60, 62, 67, 84, 89, 92, 93, 94, 98, 100, 102, 103, 106, 117, 119, 148, 151, 157, 172, 174, 177, 179, 182, 186, 190, 192, 198, 199, 201, 203, 204, 205, 217, 218, 221, 234, 239, 240, 243, 255, 262, 271, 288, 292, 315, 340, 341, 343, 344, 360, 361, 370, 381, 384, 385, 389, 395, 406, 410, 422, 423, 424, 425, 426, 427, 429, 430, 431, 457, 458, 460, 462, 463, 464, 465, 469, 470, 471, 478], "document": [18, 23, 24, 28, 41, 44, 50, 54, 57, 58, 60, 62, 63, 67, 70, 71, 72, 74, 75, 76, 78, 84, 87, 88, 89, 91, 92, 94, 97, 98, 99, 100, 102, 103, 106, 107, 109, 112, 117, 119, 123, 125, 130, 134, 136, 141, 142, 148, 152, 163, 165, 172, 173, 177, 179, 183, 186, 189, 190, 191, 192, 194, 198, 199, 201, 203, 204, 209, 216, 217, 221, 222, 226, 231, 237, 239, 243, 244, 246, 247, 250, 251, 252, 255, 258, 262, 263, 264, 265, 267, 268, 269, 277, 278, 279, 281, 286, 288, 289, 291, 293, 300, 303, 310, 318, 326, 327, 331, 333, 334, 336, 337, 338, 340, 344, 347, 348, 349, 353, 356, 357, 359, 360, 361, 364, 370, 371, 379, 380, 381, 389, 390, 394, 395, 397, 398, 400, 404, 406, 407, 409, 410, 411, 412, 414, 417, 418, 420, 421, 422, 423, 425, 427, 429, 430, 431, 440, 441, 448, 451, 456, 457, 458, 459, 460, 461, 462, 465, 466, 469, 470, 473, 474, 475, 477, 479], "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "signifi": [18, 93, 102, 177, 241, 336, 337, 340, 381, 423, 430], "finit": [18, 25, 34, 83, 91, 94, 103, 151, 182, 217, 257, 271, 340, 348, 423, 478], "infinit": [18, 22, 27, 44, 60, 67, 84, 94, 103, 135, 154, 182, 244, 257, 271, 279, 281, 289, 292, 295, 315, 316, 340, 348, 383, 423, 457, 461, 463, 471, 478], "pyos_stricmp": [18, 463], "s1": [18, 106, 157, 186, 262, 333, 460], "s2": [18, 106, 157, 186, 262, 333, 460], "insensit": [18, 67, 103, 106, 154, 163, 192, 201, 240, 241, 246, 272, 292, 315, 330, 336, 341, 342, 353, 357, 395, 402, 450, 456, 461, 463, 475, 478, 479], "comparison": [18, 23, 48, 62, 63, 67, 73, 94, 102, 106, 109, 119, 137, 151, 156, 157, 169, 172, 177, 179, 182, 186, 187, 189, 215, 216, 221, 222, 250, 251, 252, 262, 271, 279, 287, 294, 341, 342, 348, 357, 381, 383, 384, 385, 400, 408, 414, 423, 426, 428, 430, 437, 444, 450, 457, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "almost": [18, 32, 34, 63, 71, 74, 75, 83, 84, 89, 91, 100, 103, 106, 109, 117, 151, 153, 173, 182, 247, 254, 262, 268, 271, 279, 284, 288, 315, 337, 340, 344, 364, 381, 383, 384, 402, 423, 429, 451, 456, 458, 460, 463, 465, 469, 471, 477, 478], "pyos_strnicmp": [18, 463], "strncmp": 18, "async": [19, 23, 26, 31, 49, 67, 86, 100, 120, 121, 122, 123, 126, 130, 131, 132, 133, 134, 135, 136, 165, 166, 187, 221, 222, 251, 260, 308, 337, 372, 380, 381, 383, 384, 385, 423, 425, 426, 430, 467, 468, 474, 475, 476, 477, 478], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 26, 29, 32, 52, 56, 65, 468, 472, 478], "__name__": [19, 29, 44, 60, 62, 67, 83, 84, 86, 92, 93, 99, 100, 101, 123, 141, 152, 153, 162, 178, 179, 183, 184, 186, 189, 193, 196, 207, 221, 222, 224, 246, 251, 263, 279, 285, 288, 292, 293, 295, 298, 309, 311, 317, 319, 320, 329, 334, 336, 338, 340, 357, 360, 362, 380, 381, 383, 394, 395, 397, 402, 415, 423, 427, 445, 459, 460, 463, 465, 467, 469, 471, 472, 473, 474, 476, 477, 478], "__qualname__": [19, 27, 29, 60, 67, 86, 92, 93, 193, 207, 221, 222, 251, 340, 423, 424, 467, 471, 473, 478], "pydatetime_import": 20, "pydatetimeapi": 20, "utc": [20, 67, 178, 179, 186, 199, 205, 265, 336, 337, 361, 420, 446, 463, 468, 469, 470, 473, 474, 475, 478], "pydatetime_timezone_utc": [20, 475], "timezon": [20, 67, 100, 115, 178, 186, 199, 205, 336, 337, 357, 374, 420, 446, 468, 469, 470, 471, 473, 474, 475, 478], "pydate_check": 20, "pydatetime_datetyp": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_datetimetyp": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pydatetime_timetyp": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydatetime_deltatyp": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pydatetime_tzinfotyp": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 67, 84, 92, 103, 147, 178, 179, 189, 258, 336, 339, 361, 381, 408, 417, 430, 441, 456, 458, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 476, 477, 478], "month": [20, 67, 84, 147, 178, 179, 262, 361, 417, 430, 457, 458, 460, 464, 469, 478], "day": [20, 67, 72, 83, 84, 93, 103, 123, 147, 163, 178, 179, 222, 240, 258, 262, 265, 271, 284, 289, 335, 337, 339, 361, 380, 417, 420, 427, 430, 446, 457, 460, 462, 463, 464, 469, 472, 474, 476, 477, 478], "date": [20, 32, 67, 71, 84, 93, 100, 130, 134, 136, 147, 159, 178, 189, 195, 199, 204, 205, 207, 239, 241, 262, 263, 265, 267, 284, 287, 289, 295, 307, 335, 336, 337, 340, 346, 353, 361, 364, 374, 385, 414, 415, 417, 418, 421, 427, 430, 446, 447, 456, 457, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pydatetime_fromdateandtim": 20, "hour": [20, 67, 84, 103, 123, 130, 136, 178, 179, 205, 265, 267, 361, 417, 420, 430, 460, 474], "minut": [20, 67, 106, 132, 178, 179, 265, 289, 357, 361, 417, 430, 451, 460, 475, 478], "usecond": 20, "pydatetime_fromdateandtimeandfold": [20, 478], "fold": [20, 67, 178, 179, 190, 197, 198, 199, 204, 246, 281, 340, 342, 420, 421, 461, 462, 474, 475, 478], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "timedelta": [20, 67, 93, 178, 284, 380, 420, 460, 464, 470, 471, 475, 476, 477, 478], "pytimezone_fromoffset": [20, 475], "pytimezone_fromoffsetandnam": [20, 475], "pyunicod": [20, 63, 478], "tzname": [20, 67, 115, 178, 179, 361, 420, 474, 477, 478], "pydatetime_d": 20, "pydatetime_datetim": 20, "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 92, 103, 147, 169, 172, 174, 179, 207, 230, 255, 258, 314, 315, 339, 340, 348, 361, 414, 417, 419, 420, 430, 446, 460, 462, 463, 470, 475, 476, 477, 478], "pydatetime_date_get_hour": 20, "23": [20, 93, 96, 100, 106, 179, 182, 205, 221, 222, 232, 255, 257, 263, 279, 315, 328, 333, 340, 344, 354, 361, 362, 459, 460, 468, 470, 472, 473, 474, 476, 477, 478], "pydatetime_date_get_minut": 20, "59": [20, 88, 100, 179, 257, 315, 361, 377, 448, 470, 478], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 179, 182, 471], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 467, 478], "tzinfo": [20, 67, 178, 205, 374, 420, 460, 467, 468, 470, 471, 474, 475, 477, 478], "pydatetime_tim": 20, "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 467, 478], "delta": [20, 67, 106, 138, 179, 187, 250, 266, 358, 383, 459, 461, 464, 474, 476, 478], "pydatetime_delta": 20, "pydatetime_delta_get_day": 20, "999999999": [20, 179], "pydatetime_delta_get_second": 20, "86399": [20, 179], "pydatetime_delta_get_microsecond": 20, "db": [20, 67, 92, 171, 180, 221, 250, 257, 277, 294, 326, 446, 451, 462, 463, 465, 468, 478], "pydatetime_fromtimestamp": 20, "fromtimestamp": [20, 67, 100, 178, 179, 186, 336, 469, 475, 478], "pydate_fromtimestamp": [20, 478], "pyproperty_typ": [21, 56, 92], "pydescr_newgetset": [21, 56], "pygetsetdef": [21, 56, 57, 62, 74, 75, 98, 251, 380, 475, 478], "getset": [21, 62, 251], "pydescr_newmemb": [21, 56], "pymemberdef": [21, 56, 57, 60, 62, 74, 75, 92, 251, 380, 464, 469, 475, 478], "meth": [21, 43, 62, 77, 84, 86, 109, 340, 381, 458, 461, 467, 468, 471], "pydescr_newmethod": [21, 56, 478], "pymethoddef": [21, 34, 44, 56, 57, 61, 62, 71, 72, 74, 75, 89, 98, 460, 478], "pydescr_newwrapp": 21, "wrapperbas": [21, 475, 478], "pydescr_newclassmethod": [21, 56], "pydescr_isdata": [21, 478], "descr": [21, 92, 172], "pywrapper_new": [21, 56], "pydictobject": [22, 54, 469, 478], "pydict_typ": [22, 56], "pydict_checkexact": 22, "pydict_new": [22, 56], "pydictproxy_new": [22, 56], "mappingproxytyp": [22, 67, 177, 178, 221, 340, 380, 422, 467, 469, 471, 478], "enforc": [22, 93, 182, 192, 201, 221, 239, 289, 318, 338, 340, 341, 379, 381, 405, 406, 408, 422, 425, 431, 450, 458, 459, 462, 465, 470, 471, 478], "modif": [22, 27, 33, 60, 63, 65, 72, 93, 100, 109, 119, 165, 186, 212, 230, 241, 244, 246, 262, 265, 267, 274, 279, 288, 289, 292, 320, 328, 330, 334, 338, 348, 353, 357, 371, 405, 408, 417, 421, 423, 456, 462, 464, 470, 471, 472, 473, 474, 476, 478], "pydict_clear": [22, 56], "pydict_contain": [22, 56, 461], "pydict_copi": [22, 56], "pydict_setitem": [22, 56, 62, 72, 478], "insert": [22, 30, 32, 33, 37, 59, 67, 71, 72, 79, 89, 94, 106, 109, 111, 117, 118, 119, 123, 140, 143, 144, 148, 156, 157, 163, 173, 177, 178, 186, 189, 204, 221, 222, 243, 246, 254, 258, 263, 266, 269, 277, 280, 288, 293, 295, 303, 316, 336, 340, 341, 343, 348, 363, 371, 380, 395, 397, 402, 405, 408, 418, 423, 425, 427, 431, 435, 437, 450, 455, 457, 460, 462, 463, 464, 466, 469, 471, 472, 473, 474, 475, 476, 478], "hashabl": [22, 48, 62, 67, 84, 86, 113, 157, 178, 179, 183, 186, 217, 221, 222, 228, 251, 255, 292, 314, 340, 381, 397, 423, 425, 460, 461, 463, 464, 468, 469, 471, 473, 477, 478], "steal": [22, 23, 32, 34, 37, 39, 44, 48, 53, 59, 478], "pydict_setitemstr": [22, 56, 478], "pyunicode_fromstr": [22, 34, 56, 63, 71, 75], "pydict_delitem": [22, 56], "pydict_delitemstr": [22, 56], "pydict_getitem": [22, 56, 72, 467, 478], "__hash__": [22, 62, 67, 77, 79, 84, 86, 157, 177, 207, 221, 285, 340, 384, 423, 450, 462, 463, 465, 471, 475, 478], "__eq__": [22, 62, 67, 77, 79, 84, 86, 144, 157, 164, 177, 190, 191, 198, 207, 220, 222, 240, 251, 281, 287, 340, 380, 384, 385, 414, 423, 458, 463, 464, 465, 468, 470, 475, 478], "pydict_getitemwitherror": [22, 56, 478], "gil": [22, 23, 41, 44, 50, 58, 62, 67, 75, 83, 86, 98, 136, 162, 172, 184, 231, 246, 463, 464, 467, 470, 472, 474, 477, 478], "held": [22, 30, 32, 41, 58, 83, 98, 163, 243, 254, 264, 265, 274, 279, 340, 348, 360, 383, 397, 421, 423, 457, 462, 463, 464, 474, 478], "histor": [22, 40, 62, 72, 74, 94, 98, 163, 173, 179, 209, 244, 267, 291, 361, 409, 417, 431, 456, 464, 469, 472, 474, 478], "reason": [22, 23, 32, 34, 41, 45, 46, 48, 50, 62, 67, 72, 75, 83, 84, 87, 88, 89, 91, 93, 94, 99, 100, 102, 103, 106, 107, 112, 136, 138, 148, 151, 152, 173, 177, 179, 182, 189, 190, 192, 207, 209, 212, 226, 237, 238, 241, 243, 244, 246, 252, 254, 263, 264, 265, 266, 267, 271, 288, 289, 292, 295, 301, 304, 310, 328, 330, 333, 337, 340, 348, 353, 354, 357, 359, 361, 364, 379, 381, 383, 384, 385, 388, 390, 394, 402, 420, 421, 422, 423, 427, 459, 460, 462, 465, 470, 471, 472, 473, 478], "suppress": [22, 32, 33, 39, 67, 89, 91, 99, 117, 136, 149, 153, 159, 165, 189, 284, 288, 307, 311, 330, 331, 340, 344, 348, 357, 402, 422, 423, 431, 450, 456, 458, 460, 462, 463, 464, 465, 466, 472, 473, 475, 476, 478, 479], "wasn": [22, 30, 44, 75, 100, 117, 265, 288, 351, 383, 418, 457, 459, 460, 462, 463, 474, 478], "pydict_getitemstr": [22, 56, 72], "pydict_setdefault": [22, 478], "defaultobj": 22, "setdefault": [22, 67, 77, 156, 157, 180, 240, 252, 340, 402, 423, 457, 460, 470, 471, 478], "hash": [22, 32, 33, 48, 62, 63, 67, 74, 77, 83, 84, 86, 89, 143, 157, 159, 163, 170, 177, 180, 219, 221, 233, 246, 247, 250, 266, 285, 294, 307, 333, 346, 348, 380, 384, 393, 397, 421, 423, 425, 427, 430, 444, 445, 450, 451, 459, 460, 462, 463, 464, 467, 468, 470, 471, 474, 477, 478], "pydict_item": [22, 56], "pylistobject": [22, 37, 53, 75], "pydict_key": [22, 56], "pydict_valu": [22, 56], "pydict_s": [22, 56], "pydict_next": [22, 56], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 71], "spars": [22, 289, 353, 478], "pos": [22, 59, 67, 114, 138, 150, 182, 218, 220, 251, 258, 274, 281, 287, 289, 296, 315, 316, 345, 358, 371, 379, 396, 460, 464, 473], "interest": [22, 62, 67, 71, 72, 74, 76, 83, 84, 92, 93, 94, 96, 99, 100, 103, 106, 117, 148, 150, 151, 163, 179, 186, 189, 190, 196, 203, 211, 212, 243, 257, 263, 267, 269, 272, 288, 293, 304, 310, 315, 324, 360, 362, 381, 383, 384, 385, 395, 396, 410, 423, 429, 431, 457, 458, 459, 460, 462, 464, 478], "pylong_aslong": [22, 34, 38, 56, 71, 476], "pylong_fromlong": [22, 34, 38, 44, 56, 71, 72, 74, 75, 478], "pydict_merg": [22, 56], "overrid": [22, 32, 33, 48, 60, 62, 63, 65, 67, 84, 89, 92, 99, 100, 107, 113, 117, 123, 129, 132, 133, 141, 147, 152, 153, 157, 163, 167, 171, 172, 177, 179, 183, 185, 189, 192, 198, 199, 201, 204, 205, 209, 214, 221, 222, 226, 239, 240, 241, 244, 246, 251, 254, 258, 263, 265, 268, 279, 283, 288, 289, 292, 295, 307, 310, 311, 315, 327, 330, 333, 334, 340, 341, 344, 348, 349, 357, 360, 371, 379, 381, 383, 384, 385, 390, 397, 402, 408, 412, 417, 423, 424, 425, 427, 435, 450, 451, 456, 457, 460, 463, 464, 465, 466, 471, 472, 474, 475, 476, 478], "pymapping_key": [22, 39, 56, 475, 478], "pyobject_getitem": [22, 34, 39, 48, 56, 62], "replac": [22, 24, 30, 32, 33, 37, 41, 55, 58, 59, 60, 62, 63, 67, 70, 72, 83, 84, 88, 89, 91, 92, 93, 94, 100, 106, 109, 115, 117, 119, 123, 129, 136, 147, 148, 153, 154, 160, 163, 169, 172, 173, 175, 177, 178, 179, 186, 187, 189, 192, 193, 198, 201, 202, 205, 207, 209, 210, 214, 215, 221, 225, 231, 246, 247, 248, 251, 254, 262, 263, 264, 267, 268, 272, 275, 279, 288, 289, 292, 293, 303, 304, 311, 314, 315, 316, 317, 327, 328, 329, 336, 337, 340, 341, 348, 353, 357, 359, 360, 361, 363, 364, 366, 370, 371, 373, 377, 379, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 397, 402, 404, 405, 408, 410, 412, 416, 417, 420, 423, 425, 428, 430, 431, 444, 446, 450, 451, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pydict_upd": [22, 56], "updat": [22, 32, 33, 41, 44, 58, 62, 67, 74, 75, 83, 84, 89, 91, 92, 94, 100, 106, 114, 117, 123, 130, 132, 137, 156, 157, 159, 165, 170, 173, 175, 178, 179, 181, 185, 187, 189, 192, 201, 203, 209, 218, 221, 222, 231, 232, 233, 240, 243, 244, 246, 251, 252, 254, 261, 267, 274, 277, 279, 281, 284, 288, 289, 292, 295, 298, 311, 320, 326, 333, 336, 337, 340, 344, 350, 353, 361, 364, 371, 375, 379, 380, 384, 389, 390, 396, 402, 408, 416, 423, 427, 431, 435, 450, 456, 457, 458, 459, 460, 461, 462, 463, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "pydict_mergefromseq2": [22, 56], "seq2": [22, 94, 287, 457], "merg": [22, 67, 84, 86, 91, 92, 94, 99, 100, 173, 178, 179, 189, 209, 232, 263, 265, 278, 288, 289, 340, 375, 381, 421, 447, 451, 456, 457, 460, 463, 464, 469, 473, 478], "duplic": [22, 67, 87, 94, 109, 159, 163, 165, 182, 186, 187, 192, 201, 204, 207, 211, 251, 255, 263, 267, 289, 298, 333, 340, 341, 357, 379, 381, 383, 402, 417, 421, 422, 423, 425, 426, 436, 437, 459, 461, 462, 463, 469, 470, 473, 475, 477, 478], "win": [22, 32, 67, 91, 100, 173, 175, 288, 314, 350, 383, 456, 466, 470, 478], "pydict_addwatch": [22, 469], "pydict_watchcallback": 22, "futur": [22, 32, 60, 62, 67, 76, 83, 86, 89, 98, 99, 102, 103, 109, 111, 117, 119, 120, 122, 124, 127, 129, 130, 135, 136, 152, 155, 160, 161, 163, 171, 179, 189, 193, 199, 201, 203, 204, 206, 209, 221, 230, 241, 243, 246, 248, 250, 251, 253, 263, 264, 279, 280, 288, 289, 304, 311, 315, 321, 324, 329, 333, 336, 337, 348, 357, 360, 361, 380, 381, 383, 390, 395, 408, 423, 425, 430, 456, 457, 458, 459, 460, 461, 462, 463, 468, 471, 472, 476, 478, 479], "pydict_watch": [22, 469], "pydict_clearwatch": 22, "mark": [22, 23, 28, 33, 56, 57, 60, 63, 74, 83, 89, 92, 96, 100, 102, 103, 106, 109, 114, 117, 119, 127, 130, 136, 141, 154, 162, 163, 173, 177, 186, 187, 189, 201, 226, 232, 236, 243, 251, 258, 265, 267, 293, 296, 301, 310, 324, 333, 336, 340, 344, 354, 357, 364, 375, 381, 383, 397, 405, 410, 421, 423, 425, 426, 430, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "watch": [22, 58, 60, 67, 98, 99, 102, 130, 134, 182, 257, 263, 265, 324, 364, 446], "grant": [22, 60, 92, 103, 355, 421, 457, 458, 462], "pydict_unwatch": 22, "pydict_watchev": 22, "pydict_event_ad": 22, "pydict_event_modifi": 22, "pydict_event_delet": 22, "pydict_event_clon": 22, "pydict_event_clear": 22, "pydict_event_dealloc": 22, "new_valu": [22, 27, 357], "delet": [22, 37, 48, 53, 57, 58, 62, 63, 67, 72, 74, 75, 83, 86, 87, 89, 92, 96, 100, 103, 107, 113, 119, 141, 156, 163, 173, 174, 175, 177, 180, 183, 186, 187, 192, 196, 201, 202, 209, 214, 219, 221, 222, 237, 243, 244, 246, 252, 260, 265, 267, 279, 289, 292, 293, 301, 326, 328, 330, 336, 338, 340, 348, 355, 357, 360, 363, 364, 371, 379, 390, 394, 395, 397, 400, 402, 416, 422, 423, 427, 430, 431, 433, 456, 459, 460, 462, 463, 464, 465, 466, 470, 472, 475, 476, 477, 478, 479], "maintain": [22, 32, 72, 75, 83, 89, 91, 93, 98, 100, 117, 144, 154, 163, 165, 172, 177, 182, 192, 203, 204, 209, 221, 244, 246, 247, 251, 262, 288, 303, 304, 321, 334, 343, 348, 361, 370, 383, 395, 397, 398, 402, 407, 420, 425, 427, 429, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 473, 475, 476, 477, 478], "doing": [22, 27, 32, 35, 62, 83, 84, 91, 94, 96, 97, 99, 100, 102, 103, 106, 119, 130, 148, 154, 155, 165, 172, 182, 190, 212, 221, 231, 239, 246, 254, 261, 265, 274, 275, 279, 288, 289, 291, 295, 301, 315, 324, 329, 334, 337, 338, 341, 344, 357, 360, 364, 379, 381, 383, 384, 385, 390, 408, 416, 423, 424, 459, 462, 463, 464, 465, 470, 472, 473, 474, 475, 478], "unpredict": [22, 27, 209, 267, 289, 408, 411, 423, 450, 459], "recurs": [22, 27, 31, 32, 60, 67, 72, 84, 94, 109, 119, 139, 148, 159, 163, 166, 177, 186, 187, 189, 192, 196, 201, 209, 212, 222, 227, 246, 248, 258, 279, 289, 292, 293, 295, 298, 303, 304, 309, 317, 326, 328, 338, 348, 353, 360, 379, 381, 383, 384, 390, 407, 408, 417, 423, 424, 427, 431, 435, 457, 458, 459, 460, 461, 463, 469, 470, 472, 473, 474, 475, 476, 478], "trigger": [22, 32, 33, 41, 62, 67, 75, 89, 92, 94, 96, 102, 136, 165, 173, 182, 185, 192, 201, 206, 209, 222, 246, 251, 279, 280, 288, 289, 329, 330, 336, 340, 348, 364, 366, 383, 384, 389, 395, 404, 414, 423, 450, 458, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 478], "notifi": [22, 58, 67, 99, 102, 131, 135, 136, 160, 243, 244, 279, 360, 366, 397, 478], "chapter": [23, 41, 49, 65, 71, 72, 74, 75, 76, 83, 90, 94, 142, 176, 183, 213, 218, 220, 242, 243, 256, 276, 286, 294, 311, 348, 362, 425, 429, 430, 478], "let": [23, 41, 65, 71, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 106, 107, 117, 123, 136, 152, 157, 163, 165, 172, 186, 196, 222, 226, 241, 247, 258, 262, 263, 264, 265, 288, 293, 303, 315, 326, 327, 336, 337, 364, 371, 379, 381, 384, 385, 408, 425, 427, 456, 457, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 472, 475, 478], "understand": [23, 41, 67, 72, 74, 75, 83, 89, 92, 99, 100, 102, 103, 106, 117, 151, 179, 189, 203, 226, 238, 239, 258, 271, 284, 303, 304, 315, 336, 341, 344, 346, 363, 371, 381, 385, 402, 411, 417, 422, 429, 457, 458, 459, 460, 462, 463, 464, 465, 474, 478], "basic": [23, 32, 62, 63, 67, 72, 73, 74, 76, 83, 84, 91, 92, 94, 97, 99, 100, 102, 109, 117, 132, 141, 142, 152, 154, 156, 163, 165, 173, 179, 180, 183, 185, 186, 207, 215, 218, 226, 230, 241, 243, 246, 248, 250, 251, 252, 254, 258, 263, 265, 279, 280, 288, 300, 303, 304, 318, 323, 333, 334, 336, 337, 339, 340, 344, 353, 357, 360, 363, 364, 369, 371, 376, 381, 383, 384, 385, 390, 401, 407, 408, 409, 410, 414, 425, 431, 451, 457, 459, 460, 462, 463, 464, 466, 470, 471, 472, 473, 476, 478], "posix": [23, 33, 67, 100, 104, 108, 112, 130, 134, 147, 172, 179, 205, 209, 250, 253, 262, 279, 282, 288, 289, 290, 292, 297, 305, 312, 318, 324, 327, 328, 333, 334, 344, 348, 350, 353, 355, 360, 361, 386, 394, 416, 420, 421, 450, 451, 457, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 475, 476, 478], "global": [23, 27, 30, 31, 33, 34, 44, 50, 52, 62, 65, 67, 72, 75, 78, 86, 87, 89, 93, 94, 96, 107, 111, 112, 117, 119, 129, 132, 137, 141, 148, 156, 162, 165, 172, 173, 178, 187, 189, 191, 206, 207, 209, 214, 219, 221, 223, 226, 238, 243, 244, 246, 250, 251, 260, 261, 265, 272, 279, 288, 289, 292, 293, 294, 301, 304, 316, 320, 323, 330, 331, 333, 340, 341, 347, 348, 349, 350, 353, 354, 357, 360, 362, 364, 375, 379, 381, 383, 385, 390, 395, 397, 408, 415, 422, 423, 424, 426, 427, 428, 430, 435, 436, 445, 450, 456, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "suppos": [23, 59, 62, 63, 72, 76, 84, 97, 100, 177, 182, 189, 192, 195, 244, 305, 315, 330, 333, 336, 337, 341, 353, 371, 385, 397, 462, 463, 464, 470, 475, 476, 478], "pyarg_": 23, "concret": [23, 32, 67, 74, 75, 93, 103, 119, 172, 179, 183, 193, 204, 215, 226, 246, 249, 250, 254, 264, 288, 325, 334, 340, 343, 348, 360, 383, 389, 402, 405, 412, 420, 427, 459, 460, 463, 471, 472, 475, 477, 478], "traceback": [23, 33, 41, 65, 67, 72, 75, 78, 84, 88, 91, 92, 93, 94, 97, 98, 99, 100, 106, 111, 117, 122, 136, 137, 139, 148, 153, 156, 159, 163, 165, 172, 173, 179, 181, 182, 184, 187, 189, 207, 209, 221, 243, 250, 251, 255, 261, 263, 264, 265, 279, 280, 292, 293, 295, 307, 311, 315, 334, 336, 340, 341, 343, 344, 346, 348, 360, 362, 379, 380, 382, 383, 384, 385, 402, 422, 423, 424, 425, 431, 435, 436, 437, 438, 441, 444, 447, 450, 451, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 475, 476, 477, 478], "although": [23, 25, 27, 41, 62, 71, 84, 89, 93, 99, 100, 136, 147, 154, 172, 177, 179, 186, 189, 192, 193, 196, 201, 202, 244, 251, 254, 257, 263, 267, 277, 279, 288, 289, 291, 292, 295, 303, 315, 341, 348, 350, 353, 361, 370, 402, 407, 409, 410, 411, 416, 420, 422, 423, 425, 427, 429, 431, 450, 456, 457, 469, 472, 473, 474, 478], "forbidden": [23, 41, 93, 107, 136, 237, 295, 340, 360, 463, 473, 478], "clean": [23, 32, 67, 72, 74, 96, 98, 100, 103, 117, 119, 129, 136, 137, 154, 162, 187, 189, 197, 201, 204, 208, 209, 243, 248, 251, 267, 278, 279, 280, 281, 283, 311, 334, 336, 337, 339, 353, 355, 357, 390, 394, 397, 411, 423, 425, 451, 457, 458, 459, 461, 462, 463, 464, 465, 467, 470, 471, 476, 477, 478], "prepar": [23, 58, 65, 67, 100, 106, 107, 115, 147, 153, 178, 179, 187, 221, 226, 228, 231, 240, 250, 254, 265, 289, 295, 323, 333, 344, 348, 357, 358, 379, 380, 383, 390, 408, 409, 412, 417, 421, 463, 465, 472, 473, 475, 477, 478], "propag": [23, 32, 35, 67, 89, 94, 99, 100, 115, 122, 136, 153, 166, 209, 246, 263, 264, 279, 292, 293, 298, 321, 328, 329, 336, 340, 344, 348, 361, 376, 383, 384, 385, 390, 397, 422, 423, 425, 427, 438, 460, 462, 474, 478], "intend": [23, 30, 32, 33, 41, 44, 56, 60, 63, 71, 72, 74, 83, 89, 94, 99, 100, 103, 107, 111, 112, 123, 136, 148, 154, 165, 180, 187, 189, 197, 204, 209, 222, 240, 241, 243, 247, 251, 254, 255, 263, 265, 266, 267, 271, 284, 289, 295, 298, 303, 330, 333, 337, 340, 341, 343, 344, 348, 353, 360, 371, 375, 379, 381, 383, 384, 389, 390, 395, 402, 406, 417, 420, 422, 423, 425, 429, 430, 431, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 472, 473, 474, 475, 476, 478], "mysteri": [23, 72, 148, 292, 330, 472], "sys": [23, 24, 28, 30, 32, 33, 34, 44, 58, 62, 63, 65, 67, 72, 78, 79, 84, 86, 87, 89, 96, 98, 99, 100, 101, 102, 106, 109, 110, 111, 112, 115, 119, 130, 133, 134, 136, 137, 139, 141, 148, 149, 152, 153, 159, 165, 171, 172, 173, 182, 184, 186, 187, 189, 196, 206, 209, 210, 211, 212, 214, 219, 221, 223, 224, 225, 226, 230, 241, 243, 246, 247, 250, 251, 254, 257, 258, 261, 263, 264, 265, 271, 275, 276, 279, 288, 289, 291, 293, 295, 296, 298, 299, 303, 304, 305, 307, 308, 309, 311, 317, 320, 323, 324, 327, 328, 329, 330, 333, 334, 336, 338, 340, 343, 344, 350, 351, 353, 354, 356, 357, 360, 362, 364, 375, 376, 377, 380, 383, 384, 385, 390, 394, 395, 397, 402, 408, 412, 415, 416, 417, 418, 422, 423, 425, 427, 431, 432, 433, 438, 441, 443, 445, 446, 447, 448, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 478, 479], "exc_info": [23, 32, 34, 67, 72, 99, 100, 109, 141, 149, 183, 187, 189, 263, 265, 311, 328, 348, 353, 383, 400, 402, 422, 423, 445, 460, 462, 463, 465, 468, 473, 478], "former": [23, 30, 62, 74, 84, 117, 141, 155, 157, 172, 173, 179, 182, 221, 240, 246, 251, 263, 271, 279, 284, 304, 318, 328, 336, 361, 364, 370, 379, 381, 423, 425, 427, 466, 469, 470, 471, 474, 475, 476, 477, 478], "caught": [23, 98, 112, 117, 136, 149, 153, 209, 279, 289, 298, 301, 319, 328, 329, 333, 336, 348, 357, 361, 364, 383, 384, 409, 418, 422, 423, 431, 438, 458, 463, 465, 472, 476, 478], "stop": [23, 28, 33, 55, 67, 84, 93, 94, 96, 99, 100, 102, 115, 118, 127, 130, 134, 136, 141, 152, 155, 156, 157, 179, 181, 183, 186, 187, 189, 193, 203, 209, 221, 223, 224, 231, 243, 251, 257, 263, 264, 265, 267, 279, 280, 288, 289, 291, 292, 293, 296, 298, 304, 310, 314, 329, 334, 340, 344, 357, 360, 363, 371, 377, 379, 380, 381, 383, 385, 401, 402, 422, 423, 425, 436, 457, 458, 459, 460, 462, 463, 464, 465, 467, 469, 470, 473, 474, 475, 478], "pyerr_clear": [23, 34, 56, 72, 472], "pyerr_printex": [23, 56, 478], "set_sys_last_var": 23, "stderr": [23, 32, 33, 41, 58, 63, 67, 71, 72, 84, 99, 100, 111, 123, 127, 130, 134, 148, 153, 160, 165, 186, 189, 210, 223, 225, 241, 243, 254, 263, 264, 265, 279, 288, 289, 307, 311, 317, 329, 336, 340, 344, 348, 353, 357, 360, 362, 376, 381, 383, 394, 395, 402, 423, 445, 446, 447, 450, 456, 457, 461, 463, 464, 465, 470, 472, 473, 474, 475, 477, 478], "systemexit": [23, 65, 67, 99, 112, 136, 137, 153, 164, 209, 243, 348, 360, 401, 424, 438, 445, 462, 463, 465, 474, 478], "exit": [23, 32, 33, 58, 65, 67, 71, 72, 83, 85, 88, 91, 94, 100, 111, 112, 115, 119, 123, 129, 130, 132, 134, 135, 136, 148, 152, 153, 160, 162, 164, 165, 171, 173, 182, 184, 185, 189, 196, 209, 210, 214, 224, 243, 244, 248, 250, 257, 263, 265, 279, 288, 289, 293, 304, 305, 307, 311, 315, 324, 329, 330, 331, 333, 334, 336, 340, 344, 348, 354, 355, 357, 360, 362, 373, 375, 379, 380, 383, 384, 385, 394, 395, 397, 398, 401, 402, 406, 415, 416, 417, 422, 423, 425, 438, 443, 445, 446, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 473, 474, 475, 476, 477, 478], "fatal": [23, 32, 41, 58, 71, 72, 137, 210, 337, 353, 383, 438, 464, 465, 471, 474, 478], "last_exc": [23, 67, 311, 348, 376, 469, 478], "backward": [23, 24, 32, 58, 60, 63, 65, 67, 79, 86, 89, 99, 100, 117, 125, 141, 163, 173, 179, 187, 189, 190, 192, 201, 203, 204, 209, 218, 224, 241, 243, 244, 246, 251, 263, 264, 267, 289, 291, 295, 298, 304, 310, 315, 318, 328, 333, 337, 340, 344, 357, 361, 376, 379, 381, 389, 390, 392, 414, 425, 427, 430, 431, 435, 456, 457, 459, 460, 462, 463, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478], "last_typ": [23, 67, 311, 348, 445, 465, 469, 478], "last_valu": [23, 67, 93, 207, 311, 348, 376, 445, 469, 478], "last_traceback": [23, 67, 293, 311, 348, 423, 445, 469, 478], "pyerr_print": [23, 56, 67, 71, 72, 478], "unraisablehook": [23, 28, 67, 112, 139, 311, 336, 348, 357, 445, 476, 478], "util": [23, 30, 32, 58, 67, 92, 93, 94, 100, 111, 115, 119, 130, 148, 152, 154, 155, 159, 173, 178, 182, 183, 186, 187, 189, 190, 192, 196, 199, 201, 203, 204, 226, 234, 237, 244, 247, 250, 252, 266, 269, 276, 281, 288, 307, 311, 318, 328, 338, 340, 342, 344, 346, 360, 364, 379, 383, 386, 394, 406, 456, 457, 459, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478], "imposs": [23, 39, 53, 62, 84, 99, 154, 209, 264, 279, 289, 292, 308, 357, 360, 381, 383, 396, 405, 417, 431, 457, 458, 459, 460, 461, 463, 464, 469, 473, 478], "__del__": [23, 32, 51, 62, 67, 72, 83, 115, 178, 223, 254, 279, 312, 336, 355, 357, 384, 423, 472, 478], "pyerr_displayexcept": [23, 56, 469, 478], "display": [23, 32, 33, 41, 67, 86, 88, 93, 96, 100, 106, 115, 117, 119, 136, 148, 149, 152, 153, 156, 175, 181, 182, 184, 187, 189, 196, 199, 209, 210, 234, 243, 250, 251, 255, 262, 263, 267, 277, 284, 289, 292, 293, 303, 307, 309, 315, 316, 317, 338, 340, 341, 342, 344, 348, 353, 359, 362, 364, 367, 370, 371, 373, 375, 376, 379, 383, 390, 394, 395, 398, 416, 421, 423, 430, 431, 444, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "help": [23, 32, 44, 48, 57, 60, 65, 67, 74, 79, 83, 84, 85, 86, 88, 89, 92, 93, 99, 100, 102, 103, 106, 107, 115, 119, 120, 148, 149, 152, 154, 165, 172, 173, 183, 186, 188, 189, 196, 218, 221, 222, 224, 226, 230, 231, 234, 237, 240, 242, 246, 249, 250, 251, 254, 257, 258, 277, 284, 289, 293, 304, 331, 333, 336, 337, 340, 346, 348, 357, 361, 362, 363, 364, 370, 373, 375, 381, 384, 385, 389, 390, 393, 394, 400, 408, 416, 423, 427, 430, 439, 443, 445, 446, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "statement": [23, 39, 46, 48, 53, 60, 62, 65, 67, 71, 72, 78, 84, 86, 88, 89, 94, 98, 100, 109, 110, 111, 112, 114, 117, 123, 136, 141, 146, 148, 155, 160, 162, 172, 180, 181, 182, 184, 187, 189, 197, 209, 214, 221, 230, 238, 243, 244, 246, 248, 250, 251, 254, 260, 266, 267, 274, 277, 279, 280, 284, 287, 288, 289, 291, 293, 308, 311, 315, 324, 331, 333, 334, 336, 337, 340, 344, 347, 348, 349, 353, 354, 355, 356, 357, 362, 373, 379, 381, 384, 385, 396, 400, 405, 406, 407, 417, 421, 424, 425, 426, 427, 428, 430, 432, 434, 435, 441, 450, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "pyerr_setstr": [23, 34, 56, 72, 74, 75, 98, 464, 469], "pyexc_runtimeerror": [23, 56, 74], "py_incref": [23, 34, 51, 56, 66, 72, 74, 75, 85, 86, 467, 468, 469, 476, 478], "decod": [23, 32, 33, 58, 63, 65, 67, 71, 72, 86, 100, 102, 106, 118, 123, 130, 133, 134, 138, 140, 142, 143, 171, 172, 184, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 221, 231, 240, 246, 252, 254, 266, 281, 284, 289, 295, 296, 300, 313, 333, 336, 337, 340, 343, 344, 346, 348, 353, 354, 357, 372, 373, 389, 390, 392, 394, 402, 414, 417, 423, 427, 430, 446, 450, 457, 459, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 477, 478], "pyerr_setobject": [23, 56, 72, 469, 478], "pyerr_format": [23, 56, 74, 89, 464, 473, 478], "pyunicode_fromformat": [23, 56, 63, 74, 75, 467, 469, 471, 472, 473, 478], "pyerr_formatv": [23, 56, 473, 478], "pyerr_setnon": [23, 56], "shorthand": [23, 84, 97, 117, 140, 187, 189, 255, 298, 333, 359, 364, 376, 381, 395, 422, 438, 460, 461, 472], "pyerr_badargu": [23, 56], "pyexc_typeerror": [23, 56, 72, 74, 75], "illeg": [23, 46, 94, 106, 154, 192, 201, 208, 209, 289, 310, 329, 337, 340, 361, 371, 402, 405, 417, 422, 423, 426, 430, 431, 458, 459, 461, 462, 464, 470, 475, 476], "pyerr_nomemori": [23, 41, 56, 72], "pyexc_memoryerror": [23, 56], "pyerr_setfromerrno": [23, 56, 72], "construct": [23, 53, 57, 58, 60, 61, 65, 71, 72, 74, 84, 92, 93, 94, 97, 98, 99, 100, 111, 117, 123, 130, 134, 136, 146, 154, 157, 165, 172, 179, 182, 185, 187, 189, 190, 193, 197, 199, 204, 205, 209, 212, 216, 217, 230, 231, 239, 241, 246, 255, 257, 263, 264, 266, 277, 279, 288, 289, 292, 295, 303, 304, 310, 315, 316, 327, 330, 331, 333, 336, 337, 340, 343, 360, 364, 376, 379, 381, 383, 384, 385, 389, 394, 397, 404, 406, 407, 408, 409, 414, 415, 417, 420, 422, 423, 424, 425, 430, 431, 446, 450, 456, 457, 458, 459, 461, 462, 464, 469, 470, 471, 473, 474, 475, 476, 477, 478], "gotten": [23, 148, 182, 279, 457, 478], "strerror": [23, 67, 115, 208, 209, 262, 289, 463, 478], "eintr": [23, 67, 115, 208, 209, 279, 464, 478], "interrupt": [23, 32, 67, 100, 112, 116, 123, 136, 148, 173, 174, 182, 187, 208, 209, 243, 267, 279, 289, 294, 324, 325, 329, 333, 334, 336, 344, 354, 360, 361, 383, 390, 401, 415, 421, 423, 436, 463, 464, 470, 473, 476, 477, 478], "pyerr_checksign": [23, 56, 469, 478], "pyerr_setfromerrnowithfilenameobject": [23, 56], "filenameobject": 23, "oserror": [23, 67, 106, 123, 127, 130, 150, 172, 179, 184, 209, 211, 214, 219, 221, 226, 230, 239, 241, 246, 251, 254, 274, 278, 279, 284, 289, 290, 291, 292, 299, 302, 318, 324, 328, 329, 331, 333, 337, 344, 353, 354, 357, 361, 388, 390, 400, 418, 422, 438, 445, 464, 467, 471, 472, 476, 478], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 56], "pyerr_setfromwindowserr": [23, 56], "ierr": 23, "windowserror": [23, 67, 172, 209, 400, 471], "getlasterror": [23, 67, 115, 172, 478], "win32": [23, 63, 83, 85, 134, 172, 265, 279, 289, 333, 344, 348, 350, 400, 401, 456, 457, 463, 465, 470, 473, 478], "formatmessag": [23, 172, 209], "pyexc_windowserror": [23, 56], "pyerr_setexcfromwindowserr": [23, 56], "pyerr_setfromwindowserrwithfilenam": [23, 56], "pyerr_setfromwindowserrwithfilenameobject": 23, "os": [23, 32, 33, 58, 63, 67, 72, 77, 84, 86, 89, 91, 92, 94, 96, 99, 100, 106, 109, 112, 115, 117, 121, 122, 123, 129, 130, 134, 135, 136, 137, 139, 148, 156, 159, 160, 162, 163, 165, 166, 179, 183, 184, 185, 186, 189, 196, 204, 206, 208, 210, 211, 212, 215, 216, 221, 225, 226, 227, 230, 231, 239, 241, 243, 248, 250, 254, 262, 265, 268, 274, 278, 279, 282, 288, 295, 297, 298, 299, 302, 304, 305, 314, 316, 324, 325, 328, 329, 330, 331, 333, 336, 337, 338, 340, 348, 349, 350, 353, 355, 360, 361, 364, 375, 377, 383, 384, 394, 395, 398, 402, 416, 417, 420, 423, 433, 438, 446, 447, 450, 451, 456, 457, 459, 460, 461, 462, 465, 478, 479], "fsdecod": [23, 67, 86, 115, 289, 348, 470, 474, 478], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 56], "filename2": [23, 67, 209], "pyerr_setexcfromwindowserrwithfilenam": [23, 56], "pyerr_setimporterror": [23, 56, 472, 474], "msg": [23, 67, 83, 100, 104, 119, 126, 136, 148, 165, 172, 186, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 209, 213, 224, 231, 233, 238, 246, 252, 258, 262, 263, 265, 267, 279, 281, 282, 311, 315, 331, 333, 340, 346, 354, 357, 358, 376, 383, 388, 390, 403, 409, 445, 460, 461, 462, 470, 471, 472, 473, 474, 478], "importerror": [23, 67, 100, 102, 209, 246, 264, 275, 279, 295, 298, 330, 337, 348, 357, 383, 405, 418, 427, 431, 445, 451, 458, 460, 463, 469, 471, 472, 474, 475, 477, 478], "pyerr_setimporterrorsubclass": [23, 56, 474], "subclass": [23, 28, 42, 46, 48, 53, 57, 58, 60, 62, 67, 73, 74, 86, 89, 97, 98, 99, 103, 107, 113, 117, 119, 123, 129, 130, 135, 136, 141, 147, 152, 153, 154, 157, 163, 168, 171, 172, 177, 178, 179, 182, 183, 185, 189, 195, 199, 201, 202, 204, 207, 209, 212, 214, 221, 222, 238, 241, 244, 246, 247, 249, 251, 252, 254, 255, 258, 263, 264, 265, 267, 279, 280, 288, 289, 292, 295, 301, 303, 314, 315, 326, 327, 328, 330, 331, 333, 334, 336, 337, 340, 341, 344, 348, 353, 357, 360, 364, 370, 371, 379, 380, 381, 383, 384, 389, 390, 392, 394, 395, 397, 402, 404, 405, 407, 408, 409, 410, 412, 414, 418, 420, 422, 424, 425, 431, 435, 438, 447, 450, 457, 459, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pyerr_syntaxlocationobject": [23, 478], "lineno": [23, 67, 96, 119, 141, 163, 181, 183, 184, 187, 189, 209, 213, 214, 215, 218, 251, 258, 260, 261, 263, 269, 281, 282, 293, 295, 304, 308, 310, 311, 315, 327, 357, 358, 376, 377, 383, 395, 426, 450, 467, 473, 474, 476, 478], "col_offset": [23, 67, 119, 187, 260, 476, 478], "syntaxerror": [23, 65, 67, 78, 103, 119, 153, 155, 164, 189, 209, 221, 243, 315, 357, 373, 376, 381, 422, 424, 426, 430, 431, 437, 438, 441, 444, 445, 457, 458, 459, 468, 469, 470, 472, 473, 474, 475, 478], "subsystem": [23, 94, 100, 246, 344, 364, 456, 460, 462, 464, 476, 478], "think": [23, 59, 63, 74, 84, 89, 94, 98, 100, 103, 106, 189, 197, 221, 248, 257, 263, 288, 295, 381, 384, 385, 423, 425, 427, 459, 462, 463], "pyerr_syntaxlocationex": [23, 56, 478], "pyerr_syntaxloc": [23, 56], "omit": [23, 57, 59, 67, 74, 89, 100, 101, 103, 114, 117, 119, 123, 150, 163, 171, 172, 173, 179, 186, 189, 196, 197, 198, 200, 209, 221, 226, 230, 241, 243, 244, 248, 254, 255, 261, 262, 267, 272, 274, 279, 284, 288, 289, 293, 295, 301, 310, 315, 316, 324, 327, 328, 330, 331, 333, 336, 340, 341, 353, 360, 371, 376, 378, 379, 381, 383, 384, 395, 396, 404, 406, 408, 409, 416, 421, 422, 423, 425, 426, 430, 431, 450, 456, 460, 461, 462, 464, 465, 471, 472, 474, 475, 478], "pyerr_badinternalcal": [23, 56], "pyexc_systemerror": [23, 56], "mirror": [23, 67, 107, 219, 263, 264, 265, 358, 364, 372, 382, 410, 450, 461, 478], "problem": [23, 25, 32, 34, 58, 62, 67, 72, 75, 83, 84, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 106, 111, 123, 138, 149, 151, 154, 155, 163, 165, 171, 179, 182, 186, 189, 192, 195, 199, 201, 203, 226, 241, 243, 246, 258, 262, 263, 264, 279, 280, 286, 288, 289, 295, 304, 310, 329, 333, 336, 337, 340, 343, 346, 353, 357, 359, 381, 384, 385, 397, 402, 405, 408, 422, 430, 438, 439, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 475, 476, 478], "machineri": [23, 44, 62, 67, 72, 86, 92, 100, 154, 205, 207, 221, 247, 251, 264, 276, 298, 337, 348, 380, 397, 401, 418, 423, 427, 450, 456, 458, 459, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478], "nor": [23, 32, 33, 62, 74, 75, 83, 88, 93, 97, 107, 130, 140, 141, 154, 184, 187, 238, 239, 263, 266, 271, 279, 288, 289, 293, 295, 298, 315, 326, 334, 336, 337, 340, 348, 371, 375, 381, 383, 398, 420, 421, 423, 425, 450, 451, 469, 470, 472, 474, 475, 478], "intent": [23, 30, 71, 72, 89, 100, 177, 179, 192, 201, 243, 271, 284, 289, 348, 381, 383, 384, 402, 414, 421, 422, 423, 460, 461, 463, 465, 471, 472, 478], "pyerr_warnex": [23, 56, 395, 462], "stack_level": 23, "forth": [23, 84, 91, 103, 156, 289, 315, 324, 340, 423, 457, 459, 460, 462], "pyexc_warn": [23, 56], "pyexc_except": [23, 56], "pyexc_runtimewarn": [23, 56], "command": [23, 32, 33, 65, 67, 71, 72, 76, 78, 84, 88, 99, 100, 101, 102, 106, 109, 111, 115, 116, 123, 134, 139, 148, 153, 160, 173, 181, 183, 184, 187, 188, 189, 202, 210, 218, 221, 226, 241, 244, 247, 250, 252, 254, 260, 264, 268, 279, 281, 284, 291, 292, 294, 297, 301, 304, 305, 309, 311, 320, 323, 327, 328, 331, 337, 340, 346, 348, 349, 354, 358, 362, 363, 364, 370, 371, 377, 379, 394, 395, 398, 402, 408, 415, 416, 423, 424, 431, 443, 446, 450, 451, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 469, 473, 475, 476, 477, 478, 479], "pyerr_warnexplicitobject": 23, "straightforward": [23, 72, 83, 84, 98, 100, 106, 154, 163, 172, 255, 264, 288, 324, 333, 379, 384, 385, 459, 460, 463, 470, 471, 478], "warn_explicit": [23, 67, 311, 395, 474, 478], "pyerr_warnexplicit": [23, 56, 478], "pyerr_warnformat": [23, 56], "pyerr_resourcewarn": [23, 56, 474, 478], "resourcewarn": [23, 67, 122, 183, 209, 223, 289, 344, 357, 383, 395, 445, 470, 474, 478], "warningmessag": [23, 474, 478], "pyerr_set": 23, "pyerr_restor": [23, 56, 62, 74, 469, 478], "specif": [23, 33, 34, 41, 44, 48, 50, 57, 59, 60, 62, 65, 66, 67, 72, 75, 76, 84, 87, 89, 92, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 112, 117, 119, 123, 129, 130, 142, 148, 150, 151, 152, 157, 163, 165, 168, 171, 172, 173, 177, 179, 180, 182, 189, 190, 191, 192, 198, 199, 201, 202, 204, 206, 207, 208, 209, 211, 217, 218, 221, 222, 224, 226, 231, 236, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 262, 263, 264, 265, 267, 271, 277, 279, 284, 289, 291, 292, 293, 295, 304, 310, 311, 317, 318, 323, 324, 325, 327, 328, 331, 333, 334, 336, 337, 338, 340, 343, 348, 349, 350, 353, 354, 357, 358, 359, 360, 361, 363, 364, 367, 369, 372, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 396, 397, 399, 402, 405, 406, 408, 412, 414, 417, 418, 420, 421, 422, 423, 427, 429, 430, 431, 441, 450, 456, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478], "pyerr_exceptionmatch": [23, 34, 56], "shown": [23, 41, 72, 76, 89, 91, 93, 98, 99, 100, 101, 102, 107, 117, 165, 177, 182, 184, 186, 187, 189, 199, 209, 210, 243, 263, 264, 288, 293, 304, 309, 315, 321, 341, 344, 361, 370, 371, 376, 379, 383, 384, 385, 389, 395, 397, 423, 456, 463, 473, 474, 475, 476, 477, 478], "pyerr_givenexceptionmatch": [23, 56], "violat": [23, 41, 60, 62, 93, 172, 179, 184, 199, 204, 211, 244, 295, 301, 337, 340, 396, 423, 474, 478], "subtupl": 23, "search": [23, 30, 32, 33, 34, 58, 63, 67, 74, 83, 84, 92, 98, 99, 106, 111, 138, 144, 148, 154, 156, 159, 172, 189, 192, 207, 212, 221, 226, 244, 246, 250, 252, 261, 262, 263, 264, 266, 274, 275, 276, 284, 289, 292, 293, 295, 298, 304, 307, 308, 309, 327, 328, 330, 336, 340, 344, 348, 358, 363, 364, 366, 370, 379, 383, 390, 391, 398, 405, 407, 408, 410, 415, 417, 418, 420, 422, 423, 424, 425, 428, 431, 436, 445, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478], "pyerr_getraisedexcept": [23, 56, 469, 478], "catch": [23, 41, 67, 84, 91, 94, 100, 102, 106, 107, 117, 119, 136, 163, 171, 189, 209, 240, 251, 263, 288, 289, 311, 318, 327, 329, 336, 344, 357, 381, 383, 390, 403, 423, 425, 457, 460, 462, 463, 464, 465, 469, 470, 471, 472, 474, 477, 478], "temporarili": [23, 34, 67, 72, 89, 100, 107, 147, 165, 182, 189, 226, 246, 262, 263, 311, 328, 340, 344, 357, 362, 371, 377, 383, 384, 385, 422, 456, 463, 469, 474, 475, 478], "pyerr_setraisedexcept": [23, 56, 469, 478], "pyerr_gethandledexcept": [23, 56, 468, 478], "pyerr_fetch": [23, 56, 62, 74, 469, 472, 478], "ptraceback": 23, "invalid": [23, 28, 33, 58, 60, 62, 63, 67, 72, 78, 84, 86, 88, 92, 93, 97, 99, 103, 106, 107, 112, 115, 123, 143, 153, 155, 156, 159, 172, 179, 180, 182, 192, 195, 197, 199, 201, 204, 205, 207, 208, 209, 212, 222, 226, 230, 234, 238, 240, 243, 246, 251, 258, 264, 267, 271, 279, 288, 289, 291, 295, 305, 307, 315, 318, 324, 325, 329, 333, 337, 340, 341, 344, 353, 357, 360, 361, 371, 373, 381, 383, 389, 395, 396, 397, 400, 405, 414, 420, 422, 423, 426, 431, 436, 438, 444, 450, 457, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478], "away": [23, 27, 32, 34, 75, 84, 89, 94, 99, 117, 162, 173, 179, 182, 189, 209, 243, 246, 251, 271, 279, 280, 288, 289, 304, 315, 447, 459, 460, 465, 472, 473, 478], "pyerr_normalizeexcept": [23, 56, 478], "tb": [23, 100, 187, 209, 243, 376, 377, 380, 385, 423, 462, 463, 469, 472, 478], "avoid": [23, 32, 33, 41, 60, 62, 67, 71, 72, 74, 75, 84, 87, 89, 91, 93, 94, 98, 99, 102, 103, 106, 117, 123, 129, 130, 134, 135, 136, 154, 156, 163, 165, 172, 173, 179, 182, 206, 209, 211, 221, 238, 241, 244, 251, 255, 258, 261, 264, 265, 267, 271, 274, 279, 280, 285, 288, 289, 295, 310, 315, 317, 328, 329, 333, 336, 338, 340, 344, 348, 353, 357, 359, 360, 361, 362, 364, 370, 380, 381, 383, 385, 397, 401, 404, 405, 406, 408, 412, 422, 423, 425, 426, 427, 430, 431, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "circumst": [23, 41, 84, 91, 93, 99, 100, 148, 163, 209, 239, 263, 266, 288, 289, 318, 328, 390, 398, 423, 431, 461, 472, 476, 478], "unnorm": [23, 478], "instanti": [23, 62, 75, 93, 98, 99, 100, 107, 119, 123, 129, 130, 136, 148, 150, 152, 156, 172, 173, 177, 179, 186, 190, 192, 194, 199, 226, 238, 241, 244, 246, 263, 264, 265, 267, 279, 288, 292, 293, 295, 324, 325, 327, 331, 333, 334, 340, 357, 364, 371, 380, 381, 383, 384, 385, 398, 403, 405, 406, 409, 411, 423, 431, 435, 438, 462, 463, 469, 470, 473, 475, 476, 477, 478], "noth": [23, 32, 33, 34, 41, 57, 63, 71, 72, 74, 89, 99, 100, 103, 107, 112, 119, 129, 136, 137, 151, 154, 165, 173, 177, 179, 186, 187, 189, 194, 206, 207, 209, 222, 243, 244, 254, 262, 263, 264, 265, 267, 278, 279, 288, 295, 301, 315, 328, 329, 334, 336, 340, 342, 344, 354, 360, 364, 377, 381, 383, 394, 402, 412, 421, 423, 425, 430, 431, 436, 450, 459, 460, 463, 464, 469, 472, 473, 476, 477, 478], "delay": [23, 67, 83, 91, 100, 126, 136, 173, 218, 241, 243, 251, 265, 279, 284, 321, 329, 333, 337, 357, 379, 385, 390, 391, 423, 445, 463, 470, 474, 475, 476, 478], "improv": [23, 67, 72, 84, 88, 92, 98, 100, 103, 111, 117, 130, 136, 154, 163, 218, 230, 244, 246, 271, 295, 310, 336, 337, 344, 371, 405, 421, 423, 425, 451, 465, 478, 479], "perform": [23, 28, 32, 34, 38, 41, 58, 59, 62, 63, 67, 71, 74, 88, 89, 91, 94, 99, 100, 101, 106, 109, 115, 117, 119, 123, 130, 136, 154, 157, 159, 163, 165, 171, 173, 177, 179, 182, 184, 187, 189, 195, 202, 205, 207, 209, 211, 216, 221, 222, 223, 238, 239, 241, 243, 244, 245, 246, 248, 255, 257, 258, 262, 263, 264, 265, 268, 279, 280, 284, 289, 294, 296, 301, 304, 310, 315, 317, 327, 328, 329, 330, 332, 333, 334, 336, 337, 340, 341, 344, 348, 360, 361, 362, 366, 373, 379, 381, 383, 384, 389, 390, 394, 400, 410, 414, 415, 421, 423, 425, 427, 430, 431, 450, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "implicit": [23, 33, 58, 62, 67, 72, 84, 89, 98, 100, 109, 111, 117, 123, 130, 136, 140, 163, 165, 177, 180, 184, 186, 209, 221, 244, 246, 251, 254, 264, 277, 291, 293, 310, 315, 320, 329, 331, 333, 336, 340, 341, 343, 344, 381, 384, 385, 395, 397, 407, 422, 423, 425, 427, 431, 435, 438, 450, 464, 465, 470, 472, 473, 474, 475, 476, 478, 479], "__traceback__": [23, 209, 348, 376, 380, 423, 425, 431, 465, 468, 478], "snippet": [23, 93, 100, 136, 166, 240, 264, 327, 337, 360, 362, 456, 459, 460, 462, 473, 478], "pyexception_settraceback": [23, 56, 478], "fresh": [23, 62, 84, 89, 94, 154, 165, 251, 279, 303, 320, 357, 380, 427, 456, 459, 460, 478], "pyerr_sethandledexcept": [23, 56, 468, 478], "pyerr_getexcinfo": [23, 56, 468, 478], "info": [23, 62, 67, 72, 83, 92, 99, 100, 115, 117, 122, 134, 149, 154, 165, 179, 187, 221, 223, 226, 238, 239, 242, 247, 251, 252, 260, 263, 264, 265, 267, 279, 284, 298, 299, 303, 328, 345, 353, 364, 379, 381, 383, 390, 416, 417, 425, 447, 454, 458, 460, 462, 463, 464, 469, 470, 472, 476, 478], "kept": [23, 24, 32, 44, 58, 63, 84, 89, 98, 100, 111, 163, 172, 180, 182, 191, 195, 204, 207, 209, 210, 221, 239, 240, 243, 254, 257, 265, 267, 307, 308, 315, 330, 334, 337, 381, 384, 397, 431, 457, 459, 464, 465, 467, 469, 470, 471, 472, 477, 478], "pyerr_setexcinfo": [23, 56, 468, 478], "deriv": [23, 32, 48, 60, 67, 75, 87, 117, 119, 141, 153, 154, 170, 172, 173, 174, 177, 179, 193, 195, 197, 198, 199, 209, 222, 226, 240, 244, 246, 247, 251, 254, 257, 258, 263, 264, 268, 284, 288, 289, 292, 304, 308, 309, 310, 324, 334, 337, 341, 348, 364, 379, 381, 383, 390, 395, 402, 403, 406, 411, 414, 415, 421, 423, 426, 427, 430, 435, 438, 457, 460, 461, 462, 463, 464, 465, 471, 472, 474, 475, 478], "interact": [23, 32, 33, 41, 58, 62, 65, 67, 71, 78, 83, 84, 86, 92, 100, 103, 111, 112, 117, 119, 123, 141, 152, 162, 173, 176, 182, 183, 187, 190, 203, 209, 210, 214, 221, 239, 243, 250, 251, 253, 254, 260, 279, 280, 288, 289, 291, 293, 303, 304, 309, 311, 316, 319, 330, 337, 344, 346, 348, 349, 353, 354, 364, 370, 371, 376, 379, 383, 390, 395, 408, 415, 417, 423, 426, 427, 429, 430, 431, 443, 450, 456, 459, 460, 461, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "main": [23, 32, 33, 41, 44, 58, 62, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 92, 98, 99, 100, 101, 111, 112, 117, 119, 120, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 152, 153, 162, 163, 165, 166, 173, 181, 183, 184, 186, 189, 190, 192, 195, 196, 197, 200, 201, 202, 204, 222, 224, 226, 236, 243, 246, 247, 248, 251, 254, 263, 264, 267, 279, 284, 288, 289, 292, 295, 305, 311, 318, 320, 329, 330, 334, 336, 340, 343, 348, 349, 350, 351, 353, 357, 360, 362, 364, 367, 370, 371, 377, 379, 381, 383, 384, 385, 390, 394, 397, 402, 406, 408, 410, 414, 415, 416, 423, 424, 427, 445, 446, 447, 450, 453, 456, 459, 460, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "sent": [23, 67, 89, 91, 94, 99, 104, 106, 107, 119, 123, 130, 134, 165, 173, 196, 231, 238, 240, 241, 243, 244, 255, 263, 264, 265, 279, 284, 289, 293, 301, 318, 329, 331, 333, 334, 336, 337, 344, 361, 362, 381, 390, 402, 414, 415, 421, 456, 457, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 476, 478], "immedi": [23, 24, 28, 30, 32, 44, 62, 65, 72, 78, 83, 84, 89, 91, 92, 94, 102, 103, 112, 123, 130, 132, 136, 138, 150, 152, 165, 171, 172, 173, 180, 182, 189, 201, 209, 210, 212, 214, 222, 228, 238, 243, 251, 254, 262, 263, 267, 278, 279, 280, 289, 291, 293, 299, 308, 315, 327, 329, 333, 336, 337, 340, 341, 344, 348, 354, 355, 356, 360, 361, 364, 371, 379, 381, 383, 384, 385, 390, 395, 401, 405, 408, 410, 411, 414, 415, 422, 423, 424, 425, 427, 450, 459, 460, 461, 463, 464, 469, 471, 472, 474, 475, 476, 477, 478], "invoc": [23, 28, 55, 67, 72, 89, 96, 160, 165, 172, 206, 270, 279, 304, 360, 376, 383, 394, 402, 410, 422, 423, 435, 450, 461, 470, 472, 476, 478], "press": [23, 91, 100, 123, 151, 173, 243, 278, 293, 319, 364, 370, 371, 379, 383, 417, 464, 470, 478], "ctrl": [23, 67, 85, 91, 100, 115, 123, 132, 164, 174, 279, 293, 329, 334, 336, 436, 450, 457, 462, 470, 476, 478], "sigint": [23, 67, 112, 132, 279, 293, 312, 329, 344, 383, 467, 470, 476, 478], "keyboardinterrupt": [23, 67, 99, 100, 112, 132, 136, 153, 209, 279, 312, 329, 383, 402, 415, 433, 438, 445, 462, 463, 464, 465, 474, 475, 476, 478], "pyerr_setinterrupt": [23, 56], "simul": [23, 67, 89, 91, 92, 100, 112, 123, 130, 133, 173, 230, 286, 295, 314, 329, 343, 358, 379, 397, 458, 459, 472], "arriv": [23, 112, 189, 239, 241, 279, 314, 329, 334, 337, 361, 437, 457], "pyerr_setinterruptex": [23, 56, 467], "signum": [23, 83, 112, 123, 210, 289, 329, 478], "sig_dfl": [23, 67, 112, 329, 344, 478], "sig_ign": [23, 67, 112, 329, 344, 478], "outsid": [23, 58, 84, 89, 92, 94, 99, 100, 103, 104, 123, 129, 136, 147, 154, 159, 166, 172, 173, 179, 182, 192, 195, 201, 204, 209, 241, 243, 248, 258, 295, 309, 310, 315, 321, 328, 333, 337, 340, 341, 343, 353, 357, 360, 361, 362, 371, 379, 381, 395, 408, 410, 417, 422, 423, 430, 431, 435, 460, 461, 464, 469, 470, 474, 475, 476, 477, 478], "pysignal_setwakeupfd": [23, 463], "fd": [23, 24, 67, 83, 123, 127, 130, 139, 173, 211, 218, 254, 278, 289, 305, 324, 325, 328, 329, 333, 356, 378, 379, 463, 478], "whenev": [23, 60, 62, 65, 72, 84, 92, 93, 94, 99, 100, 117, 130, 173, 182, 186, 203, 221, 243, 248, 251, 263, 265, 267, 279, 288, 292, 295, 310, 324, 329, 336, 337, 340, 348, 357, 371, 379, 383, 384, 408, 420, 423, 427, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 478], "disabl": [23, 28, 32, 33, 41, 62, 67, 72, 93, 99, 100, 103, 109, 115, 117, 123, 132, 141, 148, 160, 163, 171, 173, 181, 182, 186, 189, 197, 210, 214, 221, 222, 223, 238, 246, 251, 258, 263, 264, 265, 279, 284, 288, 289, 293, 295, 304, 311, 315, 316, 323, 324, 327, 329, 330, 331, 333, 335, 336, 337, 340, 348, 355, 357, 371, 379, 381, 383, 384, 390, 395, 397, 400, 408, 420, 423, 427, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "featur": [23, 32, 33, 48, 50, 53, 60, 62, 65, 67, 74, 78, 83, 84, 86, 89, 91, 92, 93, 94, 99, 100, 103, 106, 117, 140, 148, 149, 151, 154, 163, 168, 172, 173, 175, 176, 177, 179, 183, 189, 190, 204, 206, 209, 221, 222, 239, 243, 246, 253, 258, 263, 266, 279, 288, 289, 293, 295, 298, 315, 320, 328, 331, 336, 337, 340, 344, 346, 348, 353, 357, 360, 364, 375, 379, 383, 384, 390, 395, 397, 402, 404, 405, 406, 409, 410, 411, 417, 423, 425, 427, 429, 430, 431, 450, 451, 456, 457, 458, 459, 460, 461, 463, 465, 466, 470, 478, 479], "set_wakeup_fd": [23, 67, 329, 463, 473, 475, 478], "socket": [23, 67, 79, 86, 94, 95, 97, 99, 103, 106, 121, 124, 127, 128, 139, 154, 166, 167, 183, 203, 208, 209, 219, 231, 238, 241, 243, 244, 250, 252, 253, 254, 255, 256, 263, 264, 265, 279, 280, 284, 289, 292, 301, 303, 318, 324, 325, 329, 331, 334, 338, 353, 354, 364, 397, 402, 408, 423, 434, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 469, 478], "pyerr_newexcept": [23, 56, 72, 462, 464, 470], "classnam": [23, 84, 119, 157, 364, 370, 384, 385, 422, 435], "__module__": [23, 27, 62, 67, 87, 92, 93, 156, 177, 183, 193, 207, 221, 222, 251, 275, 357, 381, 423, 460, 467, 473, 474, 478], "dot": [23, 30, 44, 62, 63, 67, 75, 77, 86, 89, 92, 96, 99, 100, 103, 119, 189, 218, 221, 239, 243, 246, 255, 257, 260, 262, 263, 264, 267, 272, 284, 298, 309, 315, 319, 328, 333, 340, 348, 353, 355, 364, 372, 379, 383, 384, 385, 415, 417, 418, 422, 423, 427, 429, 431, 435, 442, 450, 456, 463, 466, 467, 473, 478], "pyerr_newexceptionwithdoc": [23, 56, 464, 470], "docstr": [23, 27, 33, 44, 57, 59, 62, 65, 67, 74, 83, 86, 89, 100, 119, 152, 156, 183, 218, 221, 222, 243, 251, 293, 309, 357, 373, 380, 381, 383, 402, 422, 423, 430, 431, 435, 436, 446, 450, 457, 458, 459, 460, 461, 462, 463, 464, 468, 470, 472, 473, 474, 475, 476, 477, 478], "pyexception_gettraceback": [23, 56], "ex": [23, 33, 41, 100, 316, 333, 340, 414, 426, 450, 462, 469, 473, 474, 477, 478], "pyexception_getcontext": [23, 56], "__context__": [23, 67, 209, 311, 376, 431, 465, 471, 478], "pyexception_setcontext": [23, 56], "sure": [23, 44, 62, 63, 67, 71, 74, 75, 83, 84, 89, 91, 94, 99, 100, 103, 117, 148, 152, 154, 163, 172, 182, 209, 221, 231, 246, 262, 279, 288, 289, 292, 325, 336, 337, 355, 357, 360, 364, 392, 395, 396, 408, 416, 423, 456, 459, 460, 462, 463, 465, 470, 471, 478], "pyexception_getcaus": [23, 56], "__cause__": [23, 67, 187, 209, 311, 376, 431, 465, 478], "pyexception_setcaus": [23, 56], "__suppress_context__": [23, 67, 209, 311, 376, 431], "pyexception_getarg": [23, 56, 469, 478], "pyexception_setarg": [23, 56, 469, 478], "pyunstable_exc_prepreraisestar": [23, 478], "orig": [23, 199, 391], "unhandl": [23, 65, 112, 148, 153, 165, 189, 224, 243, 348, 360, 376, 390, 423, 438, 465, 469, 478], "claus": [23, 67, 94, 100, 112, 119, 136, 165, 209, 251, 279, 293, 310, 336, 340, 348, 357, 423, 424, 425, 430, 431, 436, 438, 457, 462, 463, 470, 472, 475, 476, 477, 478], "rerais": [23, 165, 187, 279, 340, 422, 423, 478], "exceptiongroup": [23, 67, 123, 136, 165, 187, 209, 333, 376, 422, 438, 468, 469, 478], "pyunicodedecodeerror_cr": [23, 56], "pyunicodedecodeerror_getencod": [23, 56], "pyunicodeencodeerror_getencod": [23, 56], "pyunicodedecodeerror_getobject": [23, 56], "pyunicodeencodeerror_getobject": [23, 56], "pyunicodetranslateerror_getobject": [23, 56], "pyunicodedecodeerror_getstart": [23, 56], "pyunicodeencodeerror_getstart": [23, 56], "pyunicodetranslateerror_getstart": [23, 56], "pyunicodedecodeerror_setstart": [23, 56], "pyunicodeencodeerror_setstart": [23, 56], "pyunicodetranslateerror_setstart": [23, 56], "pyunicodedecodeerror_getend": [23, 56], "pyunicodeencodeerror_getend": [23, 56], "pyunicodetranslateerror_getend": [23, 56], "pyunicodedecodeerror_setend": [23, 56], "pyunicodeencodeerror_setend": [23, 56], "pyunicodetranslateerror_setend": [23, 56], "pyunicodedecodeerror_getreason": [23, 56], "pyunicodeencodeerror_getreason": [23, 56], "pyunicodetranslateerror_getreason": [23, 56], "pyunicodedecodeerror_setreason": [23, 56], "pyunicodeencodeerror_setreason": [23, 56], "pyunicodetranslateerror_setreason": [23, 56], "core": [23, 28, 32, 33, 58, 67, 72, 75, 99, 102, 103, 115, 123, 159, 163, 201, 231, 246, 247, 257, 262, 265, 288, 289, 296, 304, 309, 318, 329, 340, 357, 360, 364, 380, 384, 394, 405, 408, 420, 423, 431, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 479], "track": [23, 28, 41, 62, 67, 84, 93, 99, 102, 103, 123, 148, 154, 163, 165, 177, 181, 182, 183, 189, 250, 265, 271, 279, 280, 288, 289, 292, 295, 315, 324, 348, 360, 361, 364, 366, 383, 384, 390, 405, 421, 439, 457, 458, 461, 464, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478], "depth": [23, 90, 99, 119, 139, 159, 163, 173, 175, 180, 187, 192, 201, 209, 231, 266, 295, 303, 317, 336, 340, 348, 353, 357, 370, 376, 380, 383, 407, 408, 457, 458, 459, 473, 474, 475, 478], "use_stackcheck": [23, 58, 478], "pyos_checkstack": [23, 56, 58, 478], "reach": [23, 24, 56, 65, 72, 74, 83, 84, 94, 100, 103, 107, 123, 134, 141, 146, 150, 155, 221, 238, 254, 257, 263, 266, 289, 293, 309, 310, 324, 327, 333, 334, 336, 340, 344, 376, 390, 408, 410, 422, 423, 425, 427, 431, 436, 456, 457, 458, 459, 460, 462, 463, 464, 470, 472, 473, 475, 476, 478], "recursionerror": [23, 67, 119, 209, 258, 295, 303, 348, 438, 473, 474, 478], "concaten": [23, 52, 53, 67, 75, 103, 117, 118, 146, 148, 153, 154, 183, 187, 221, 230, 231, 263, 266, 267, 289, 292, 293, 310, 315, 327, 331, 333, 337, 340, 341, 353, 376, 381, 419, 423, 425, 438, 441, 444, 456, 460, 461, 467, 478], "tp_repr": [23, 62, 74], "protect": [23, 32, 72, 74, 75, 100, 136, 163, 172, 173, 177, 219, 226, 231, 244, 254, 266, 274, 279, 303, 320, 327, 334, 337, 338, 353, 384, 395, 416, 423, 450, 459, 462, 469, 473, 478], "cycl": [23, 28, 60, 62, 67, 72, 75, 77, 84, 86, 94, 96, 98, 100, 111, 136, 206, 220, 223, 228, 243, 251, 257, 280, 348, 357, 360, 371, 397, 422, 423, 431, 458, 460, 462, 463, 464, 470, 472, 476, 477, 478, 479], "facilit": [23, 89, 243, 264, 315, 316, 331, 395, 472, 475, 478], "reprlib": [23, 67, 178, 250, 447, 465, 478], "recursive_repr": [23, 67, 178, 317, 470, 478], "py_reprent": [23, 56], "detect": [23, 28, 33, 41, 58, 62, 67, 72, 74, 75, 84, 89, 92, 94, 103, 107, 109, 130, 137, 154, 157, 171, 173, 177, 179, 182, 184, 187, 190, 199, 202, 209, 243, 246, 251, 267, 271, 288, 289, 291, 292, 295, 303, 310, 316, 317, 327, 329, 331, 333, 336, 340, 344, 348, 353, 357, 359, 360, 373, 377, 383, 384, 390, 398, 402, 422, 423, 424, 425, 430, 450, 451, 456, 457, 458, 459, 460, 463, 464, 469, 470, 472, 473, 474, 475, 476, 478], "typic": [23, 32, 33, 44, 48, 57, 60, 62, 72, 76, 84, 89, 92, 93, 98, 99, 100, 102, 107, 111, 117, 119, 123, 136, 146, 148, 154, 163, 169, 182, 186, 189, 192, 199, 201, 214, 221, 222, 224, 226, 241, 246, 247, 248, 249, 251, 254, 262, 263, 264, 265, 267, 271, 272, 277, 279, 288, 289, 292, 293, 295, 303, 304, 316, 320, 328, 330, 337, 340, 341, 343, 344, 348, 350, 353, 354, 360, 361, 362, 364, 366, 371, 379, 380, 381, 383, 384, 390, 394, 395, 400, 402, 405, 406, 408, 409, 410, 411, 416, 418, 423, 425, 427, 450, 456, 460, 461, 464, 465, 469, 470, 472, 473, 475, 476, 478], "py_reprleav": [23, 56], "pyexc_": 23, "complet": [23, 32, 33, 41, 58, 63, 65, 67, 72, 74, 75, 76, 86, 89, 91, 93, 94, 98, 100, 103, 114, 117, 123, 130, 133, 134, 136, 137, 147, 148, 151, 152, 153, 154, 155, 159, 162, 163, 165, 173, 177, 179, 182, 186, 189, 190, 192, 198, 199, 201, 202, 203, 204, 207, 209, 211, 219, 222, 226, 229, 231, 241, 250, 251, 255, 256, 257, 258, 263, 264, 265, 267, 268, 272, 277, 279, 280, 288, 289, 291, 293, 295, 304, 312, 315, 318, 327, 328, 330, 333, 334, 336, 337, 338, 340, 344, 348, 349, 353, 356, 357, 358, 360, 363, 364, 370, 371, 373, 375, 376, 379, 381, 383, 385, 389, 390, 396, 402, 403, 405, 406, 408, 411, 422, 423, 424, 425, 427, 429, 440, 448, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "pyexc_baseexcept": [23, 56], "baseexcept": [23, 67, 124, 136, 162, 209, 263, 348, 376, 427, 431, 438, 445, 462, 463, 465, 468, 475, 476, 478], "pyexc_arithmeticerror": [23, 56], "arithmeticerror": [23, 67, 182, 209, 445], "pyexc_assertionerror": [23, 56], "assertionerror": [23, 67, 187, 209, 279, 357, 383, 384, 385, 402, 431, 445, 468, 477, 478], "pyexc_attributeerror": [23, 56, 74, 75], "attributeerror": [23, 48, 57, 67, 87, 92, 100, 148, 165, 172, 177, 209, 221, 222, 246, 251, 257, 264, 279, 289, 295, 298, 315, 329, 340, 357, 362, 380, 383, 384, 385, 405, 406, 422, 423, 425, 431, 445, 451, 457, 459, 464, 468, 470, 471, 472, 473, 475, 478], "pyexc_blockingioerror": [23, 56], "blockingioerror": [23, 67, 115, 208, 209, 254, 289, 337, 422, 445, 471, 478], "pyexc_brokenpipeerror": [23, 56], "brokenpipeerror": [23, 67, 134, 208, 209, 329, 445, 471, 478], "pyexc_buffererror": [23, 56], "pyexc_childprocesserror": [23, 56], "childprocesserror": [23, 67, 208, 209, 289, 445, 471, 478], "pyexc_connectionabortederror": [23, 56], "connectionabortederror": [23, 67, 208, 209, 445, 471], "pyexc_connectionerror": [23, 56], "connectionerror": [23, 67, 209, 238, 438, 445, 471, 473], "pyexc_connectionrefusederror": [23, 56], "connectionrefusederror": [23, 67, 208, 209, 445, 471], "pyexc_connectionreseterror": [23, 56], "connectionreseterror": [23, 67, 134, 208, 209, 238, 445, 471, 478], "pyexc_eoferror": [23, 56], "eoferror": [23, 24, 40, 67, 118, 124, 146, 150, 153, 209, 219, 221, 230, 266, 270, 279, 295, 331, 354, 445, 465], "pyexc_fileexistserror": [23, 56], "fileexistserror": [23, 67, 196, 208, 209, 221, 254, 289, 292, 307, 328, 353, 417, 445, 471, 472, 478], "pyexc_filenotfounderror": [23, 56], "filenotfounderror": [23, 67, 117, 137, 165, 208, 209, 249, 264, 282, 289, 292, 316, 438, 445, 471, 473, 478], "pyexc_floatingpointerror": [23, 56], "floatingpointerror": [23, 67, 209, 445], "pyexc_generatorexit": [23, 56], "generatorexit": [23, 67, 94, 209, 423, 425, 445, 462, 463, 478], "pyexc_importerror": [23, 56, 98], "pyexc_indentationerror": [23, 56], "indentationerror": [23, 67, 85, 209, 445, 457, 478], "pyexc_indexerror": [23, 56], "indexerror": [23, 36, 37, 46, 59, 67, 154, 156, 172, 192, 209, 232, 257, 279, 295, 314, 315, 340, 341, 376, 384, 423, 425, 431, 444, 445, 457, 470, 478], "pyexc_interruptederror": [23, 56], "interruptederror": [23, 67, 208, 209, 221, 289, 324, 329, 333, 445, 471, 473, 478], "pyexc_isadirectoryerror": [23, 56], "isadirectoryerror": [23, 67, 208, 209, 289, 445, 471, 478], "pyexc_keyerror": [23, 34, 56], "pyexc_keyboardinterrupt": [23, 56], "pyexc_lookuperror": [23, 56], "pyexc_modulenotfounderror": [23, 56], "modulenotfounderror": [23, 67, 209, 246, 427, 474, 475, 478], "pyexc_nameerror": [23, 56], "nameerror": [23, 26, 67, 172, 209, 246, 424, 425, 431, 438, 444, 445, 457, 458, 459, 462, 469, 478], "pyexc_notadirectoryerror": [23, 56], "notadirectoryerror": [23, 67, 208, 209, 289, 445, 471, 478], "pyexc_notimplementederror": [23, 56], "notimplementederror": [23, 67, 130, 164, 179, 196, 209, 222, 239, 246, 263, 279, 289, 292, 314, 337, 381, 400, 417, 445, 472, 474, 478], "pyexc_oserror": [23, 56, 72], "pyexc_overflowerror": [23, 56], "overflowerror": [23, 25, 38, 46, 67, 112, 153, 155, 179, 182, 189, 209, 221, 271, 300, 333, 336, 340, 360, 361, 423, 445, 459, 460, 463, 464, 466, 467, 471, 472, 478], "pyexc_permissionerror": [23, 56], "permissionerror": [23, 67, 208, 209, 246, 289, 318, 335, 355, 357, 445, 471, 474, 478], "pyexc_processlookuperror": [23, 56], "processlookuperror": [23, 67, 208, 209, 318, 445, 471], "pyexc_recursionerror": [23, 56, 473], "pyexc_referenceerror": [23, 56], "referenceerror": [23, 67, 209, 397, 445, 458, 459], "runtimeerror": [23, 67, 94, 104, 112, 118, 123, 124, 129, 134, 135, 136, 137, 162, 165, 166, 209, 214, 221, 254, 257, 264, 279, 289, 292, 315, 331, 340, 344, 348, 351, 357, 360, 381, 401, 417, 423, 425, 431, 438, 445, 460, 461, 462, 464, 469, 471, 473, 474, 475, 476, 478], "pyexc_stopasynciter": [23, 56], "stopasynciter": [23, 67, 86, 187, 209, 221, 384, 422, 423, 425, 431, 478], "pyexc_stopiter": [23, 56], "stopiter": [23, 62, 67, 74, 86, 94, 110, 156, 187, 209, 221, 257, 270, 279, 340, 384, 423, 425, 431, 435, 445, 459, 460, 462, 463, 467, 474, 475, 478], "pyexc_syntaxerror": [23, 56, 426], "pyexc_systemexit": [23, 56], "pyexc_taberror": [23, 56], "taberror": [23, 67, 85, 209, 430, 445, 457, 469], "pyexc_timeouterror": [23, 56], "timeouterror": [23, 67, 124, 136, 160, 162, 208, 209, 279, 331, 333, 445, 467, 471, 478], "pyexc_unboundlocalerror": [23, 56], "unboundlocalerror": [23, 67, 187, 209, 424, 445, 457, 478], "pyexc_unicodedecodeerror": [23, 56], "pyexc_unicodeencodeerror": [23, 56], "pyexc_unicodeerror": [23, 56], "pyexc_unicodetranslateerror": [23, 56], "pyexc_valueerror": [23, 56, 72, 464], "pyexc_zerodivisionerror": [23, 56, 72], "zerodivisionerror": [23, 67, 91, 100, 179, 182, 209, 217, 279, 293, 329, 336, 424, 425, 431, 438, 445, 446, 460, 466, 468, 470, 473, 477, 478], "3151": [23, 67, 209, 318, 324, 333, 460, 479], "alias": [23, 67, 93, 117, 119, 147, 154, 183, 191, 207, 209, 226, 262, 293, 299, 333, 336, 340, 371, 379, 382, 424, 430, 431, 435, 451, 456, 458, 460, 463, 467, 469, 470, 471, 472, 474, 477, 478], "pyexc_environmenterror": [23, 56], "pyexc_ioerror": [23, 56], "separ": [23, 32, 33, 54, 58, 62, 63, 67, 76, 78, 83, 84, 87, 89, 91, 93, 98, 99, 100, 102, 103, 106, 109, 117, 124, 129, 133, 136, 143, 147, 148, 151, 152, 154, 163, 165, 171, 172, 173, 174, 179, 182, 186, 189, 192, 197, 198, 201, 204, 207, 209, 216, 221, 222, 226, 241, 243, 244, 246, 248, 254, 255, 258, 262, 263, 264, 265, 266, 267, 272, 279, 284, 288, 289, 292, 293, 298, 299, 303, 309, 310, 315, 320, 327, 330, 331, 333, 334, 336, 337, 340, 341, 343, 344, 353, 356, 357, 359, 360, 362, 363, 364, 367, 375, 381, 383, 384, 385, 389, 390, 395, 397, 398, 402, 417, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 436, 447, 450, 451, 456, 457, 459, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "preprocessor": [23, 41, 56, 67, 89, 327, 453, 457, 464, 478], "ms_window": [23, 33], "pyexc_byteswarn": [23, 56], "byteswarn": [23, 33, 67, 209, 395, 445, 475, 478], "pyexc_deprecationwarn": [23, 56], "deprecationwarn": [23, 67, 103, 109, 129, 164, 184, 209, 248, 336, 343, 353, 357, 383, 395, 408, 423, 427, 430, 445, 450, 458, 460, 464, 467, 468, 469, 470, 472, 473, 474, 476, 478, 479], "pyexc_futurewarn": [23, 56], "futurewarn": [23, 67, 209, 315, 395, 445, 460, 461, 464, 469, 475, 478], "pyexc_importwarn": [23, 56], "importwarn": [23, 67, 184, 209, 383, 395, 427, 445, 462, 467, 469, 474, 478], "pyexc_pendingdeprecationwarn": [23, 56], "pendingdeprecationwarn": [23, 67, 109, 184, 209, 383, 395, 445, 460, 463, 464, 473, 474, 475, 476, 477, 478], "pyexc_resourcewarn": [23, 56], "runtimewarn": [23, 44, 67, 122, 123, 209, 333, 348, 383, 395, 445, 470, 476, 478], "pyexc_syntaxwarn": [23, 56], "syntaxwarn": [23, 67, 209, 315, 357, 395, 430, 445, 460, 468, 469, 474, 476, 478], "pyexc_unicodewarn": [23, 56], "unicodewarn": [23, 67, 209, 395, 445, 462, 470], "pyexc_userwarn": [23, 56], "userwarn": [23, 67, 209, 225, 357, 395, 445, 478], "minim": [24, 44, 67, 72, 75, 83, 89, 91, 100, 111, 119, 138, 148, 182, 186, 189, 210, 231, 244, 246, 250, 255, 269, 288, 295, 301, 315, 320, 329, 333, 335, 336, 357, 359, 374, 381, 390, 404, 451, 456, 457, 462, 474, 478], "emul": [24, 32, 67, 75, 78, 84, 92, 153, 155, 173, 177, 185, 189, 211, 254, 262, 267, 279, 288, 289, 298, 305, 316, 328, 329, 344, 348, 354, 459, 460, 463, 470, 471, 474, 476, 478], "io": [24, 32, 33, 67, 70, 78, 84, 86, 102, 115, 120, 121, 122, 123, 133, 136, 146, 154, 160, 165, 183, 184, 186, 192, 209, 211, 214, 215, 221, 230, 231, 238, 241, 247, 249, 250, 258, 266, 267, 284, 289, 295, 304, 305, 334, 337, 340, 344, 348, 353, 355, 357, 373, 374, 384, 394, 402, 406, 416, 417, 420, 423, 450, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 477, 478, 479], "pyfile_fromfd": [24, 56], "newlin": [24, 67, 78, 86, 100, 103, 115, 117, 119, 140, 143, 146, 153, 155, 171, 173, 186, 189, 192, 203, 214, 221, 230, 243, 246, 254, 258, 260, 261, 263, 265, 266, 267, 274, 284, 292, 295, 303, 315, 327, 333, 334, 340, 344, 351, 355, 359, 361, 362, 372, 373, 376, 377, 389, 395, 406, 414, 416, 417, 422, 426, 430, 432, 444, 446, 447, 450, 458, 461, 462, 463, 464, 465, 468, 472, 474, 475, 476, 478, 479], "closefd": [24, 184, 221, 254, 279, 465, 478], "open": [24, 32, 33, 40, 50, 65, 67, 72, 77, 83, 86, 89, 91, 94, 99, 102, 103, 106, 109, 114, 115, 116, 117, 130, 133, 137, 139, 142, 145, 146, 148, 152, 154, 156, 163, 165, 171, 173, 179, 180, 184, 185, 186, 196, 203, 204, 208, 209, 210, 211, 214, 215, 219, 221, 226, 230, 231, 236, 238, 239, 241, 243, 244, 245, 249, 250, 251, 252, 254, 260, 261, 262, 263, 264, 265, 266, 267, 272, 273, 274, 276, 277, 279, 284, 289, 290, 291, 292, 294, 295, 297, 298, 301, 305, 309, 310, 316, 318, 322, 324, 326, 327, 329, 331, 332, 333, 336, 337, 338, 340, 344, 345, 346, 348, 351, 353, 354, 355, 357, 360, 363, 364, 370, 371, 373, 374, 376, 379, 381, 384, 385, 390, 392, 396, 398, 400, 402, 406, 408, 409, 411, 414, 416, 417, 420, 421, 422, 423, 430, 433, 435, 438, 441, 445, 446, 447, 450, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "comprehens": [24, 67, 83, 84, 86, 89, 98, 109, 146, 187, 231, 251, 260, 295, 340, 364, 424, 425, 426, 430, 435, 440, 452, 461, 462, 464, 465, 467, 468, 471, 472, 473, 475, 476, 477, 478, 479], "pleas": [24, 32, 70, 87, 89, 98, 99, 100, 102, 103, 107, 117, 125, 134, 148, 163, 172, 180, 226, 238, 244, 246, 263, 264, 265, 284, 289, 301, 315, 318, 328, 331, 333, 336, 337, 344, 348, 353, 356, 379, 381, 384, 395, 402, 423, 425, 429, 436, 438, 452, 456, 457, 458, 460, 462, 465, 469, 471, 472, 473, 474, 475, 476, 477, 478], "pyobject_asfiledescriptor": [24, 56], "fileno": [24, 58, 67, 83, 100, 115, 139, 146, 160, 184, 211, 214, 215, 231, 238, 252, 254, 274, 279, 289, 291, 324, 325, 329, 333, 334, 337, 346, 354, 355, 356, 364, 459, 462, 472, 478], "pyfile_getlin": [24, 56], "readlin": [24, 33, 65, 67, 78, 83, 94, 98, 106, 115, 123, 133, 134, 137, 140, 142, 148, 152, 154, 166, 184, 186, 200, 203, 209, 214, 219, 221, 244, 250, 252, 254, 264, 274, 289, 292, 293, 295, 311, 327, 334, 358, 364, 373, 377, 384, 390, 394, 416, 417, 423, 433, 435, 438, 441, 442, 443, 450, 451, 457, 458, 459, 460, 462, 463, 464, 467, 470, 472, 475, 478], "greater": [24, 32, 33, 37, 38, 44, 55, 62, 63, 67, 75, 91, 99, 100, 106, 112, 130, 136, 141, 143, 144, 151, 173, 179, 182, 186, 192, 204, 205, 207, 222, 226, 238, 244, 255, 260, 263, 265, 271, 289, 293, 318, 330, 331, 340, 348, 353, 357, 360, 371, 372, 377, 379, 383, 402, 405, 423, 430, 431, 457, 459, 460, 461, 462, 473, 474, 475, 477, 478], "partial": [24, 33, 67, 87, 89, 94, 106, 107, 111, 115, 123, 124, 126, 133, 173, 177, 183, 193, 202, 203, 220, 221, 244, 250, 251, 252, 257, 265, 266, 269, 271, 280, 318, 320, 333, 334, 340, 344, 353, 404, 408, 422, 457, 460, 461, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479], "less": [24, 25, 32, 33, 38, 55, 58, 63, 67, 72, 75, 84, 89, 98, 100, 103, 106, 109, 130, 136, 144, 146, 148, 150, 154, 173, 179, 182, 183, 189, 192, 211, 222, 224, 230, 231, 240, 243, 247, 254, 255, 257, 260, 263, 266, 271, 274, 279, 280, 289, 293, 295, 296, 303, 304, 315, 328, 329, 333, 336, 337, 340, 341, 344, 348, 353, 357, 360, 361, 364, 370, 371, 372, 376, 383, 390, 395, 405, 422, 423, 425, 431, 458, 459, 460, 461, 462, 463, 466, 469, 470, 472, 473, 474, 476, 477, 478], "pyfile_setopencodehook": [24, 254, 478], "py_opencodehookfunct": 24, "open_cod": [24, 67, 115, 254, 478], "userdata": [24, 58], "pyunicodeobject": [24, 62, 63, 89, 467, 468], "hook": [24, 30, 31, 33, 58, 65, 67, 86, 92, 96, 98, 112, 139, 152, 172, 179, 184, 204, 212, 214, 221, 238, 250, 276, 298, 303, 304, 311, 327, 336, 340, 348, 358, 360, 377, 380, 384, 394, 395, 418, 423, 425, 431, 433, 450, 451, 457, 459, 462, 464, 467, 468, 469, 471, 473, 474, 475, 477, 478, 479], "py_initi": [24, 30, 32, 33, 34, 56, 58, 71, 72, 85, 456, 467, 470, 475, 477, 478], "audit": [24, 57, 58, 67, 96, 112, 118, 139, 172, 181, 223, 270, 289, 311, 331, 348, 380, 390, 445, 450, 460, 467, 478], "setopencodehook": [24, 139], "pyfile_writeobject": [24, 56], "py_print_raw": [24, 48], "pyfile_writestr": [24, 56], "pyfloatobject": [25, 75], "pyfloat_typ": [25, 56], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 56], "pyfloat_fromdoubl": [25, 56], "pyfloat_asdoubl": [25, 56, 476], "pyfloat": 25, "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 56, 463], "structseq": [25, 464, 478], "minimum": [25, 33, 41, 63, 75, 89, 92, 100, 102, 108, 112, 130, 138, 151, 172, 173, 182, 193, 253, 257, 271, 289, 324, 330, 337, 340, 341, 348, 357, 360, 367, 371, 379, 381, 383, 384, 451, 459, 460, 463, 470, 471, 472, 474, 475, 478], "thin": [25, 58, 67, 222, 271, 283, 329, 364, 451, 468, 478], "pyfloat_getmax": [25, 56, 463], "dbl_max": [25, 348], "pyfloat_getmin": [25, 56, 463], "dbl_min": [25, 348], "routin": [25, 32, 40, 62, 67, 71, 72, 74, 85, 92, 106, 137, 138, 169, 173, 180, 191, 211, 246, 250, 254, 262, 277, 289, 304, 337, 361, 386, 399, 402, 460, 461, 475, 478], "suffix": [25, 63, 67, 70, 89, 100, 109, 116, 172, 196, 215, 241, 244, 246, 255, 263, 264, 265, 272, 289, 292, 315, 326, 331, 340, 355, 390, 417, 425, 426, 451, 456, 457, 459, 468, 470, 471, 476, 478], "appear": [25, 32, 33, 44, 57, 58, 65, 67, 74, 75, 83, 89, 91, 93, 94, 97, 99, 100, 101, 102, 103, 109, 117, 119, 130, 148, 154, 159, 163, 171, 172, 173, 177, 182, 186, 187, 189, 192, 195, 198, 199, 201, 209, 218, 221, 226, 231, 243, 244, 246, 251, 255, 262, 264, 265, 267, 268, 277, 279, 293, 304, 310, 315, 327, 329, 331, 333, 336, 340, 341, 353, 359, 364, 371, 381, 384, 385, 390, 395, 397, 402, 403, 405, 408, 411, 415, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 450, 456, 458, 460, 462, 463, 464, 466, 469, 470, 472, 473, 474, 475, 476, 478], "ieee": [25, 151, 182, 258, 271, 290, 333, 343, 357, 425, 439, 451, 461, 463, 466, 468, 470, 474, 475, 478], "754": [25, 151, 182, 258, 271, 343, 357, 425, 439, 451, 461, 463, 466, 468, 470, 474, 475, 478], "binary16": [25, 343], "half": [25, 91, 100, 130, 171, 173, 179, 217, 222, 271, 291, 324, 340, 343, 430, 464, 469, 474, 478], "binary32": [25, 343], "binary64": [25, 343, 439], "inf": [25, 67, 151, 182, 221, 258, 271, 286, 340, 341, 348, 463, 464, 468, 470, 473, 474, 478], "nan": [25, 67, 84, 151, 182, 221, 271, 281, 286, 339, 340, 341, 348, 425, 437, 451, 461, 463, 464, 467, 468, 470, 471, 473, 474, 478], "thing": [25, 32, 62, 67, 71, 72, 74, 75, 76, 83, 84, 89, 91, 93, 94, 97, 99, 100, 102, 106, 107, 117, 130, 153, 155, 163, 165, 172, 177, 189, 196, 202, 207, 211, 221, 240, 246, 254, 263, 264, 271, 279, 288, 295, 315, 330, 337, 342, 348, 353, 360, 362, 364, 369, 371, 379, 381, 382, 383, 384, 385, 390, 395, 398, 425, 426, 429, 456, 457, 458, 459, 460, 461, 462, 465, 469, 471, 472, 476, 478], "larger": [25, 41, 48, 55, 75, 84, 91, 92, 114, 130, 148, 151, 172, 173, 179, 182, 211, 221, 254, 255, 271, 274, 280, 289, 315, 318, 336, 337, 340, 341, 357, 360, 362, 417, 423, 425, 430, 456, 457, 459, 460, 462, 464, 465, 469, 470, 473, 474, 475, 476, 477, 478], "smaller": [25, 41, 63, 91, 92, 103, 130, 172, 179, 182, 186, 187, 222, 255, 266, 271, 289, 295, 304, 341, 343, 350, 364, 371, 377, 379, 389, 406, 423, 425, 430, 450, 458, 460, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 476, 478], "accident": [25, 32, 100, 102, 182, 186, 189, 209, 381, 431, 458, 460, 463, 473, 478], "ala": 25, "le": [25, 67, 94, 106, 154, 196, 220, 287, 458, 466, 471], "littl": [25, 30, 63, 67, 89, 94, 99, 100, 103, 104, 106, 138, 143, 150, 154, 172, 173, 174, 182, 186, 187, 189, 226, 239, 264, 279, 288, 291, 315, 329, 333, 340, 343, 348, 362, 377, 379, 385, 393, 400, 421, 436, 447, 457, 458, 459, 463, 470, 471, 472, 478], "expon": [25, 88, 182, 221, 271, 314, 340, 341, 343, 348, 373, 430, 461, 463, 471, 476, 478], "py_big_endian": 25, "processor": [25, 34, 67, 72, 92, 106, 115, 279, 284, 288, 291, 299, 310, 318, 333, 390, 404, 410, 423, 457, 461, 462, 476, 477, 478], "ok": [25, 67, 72, 107, 115, 173, 185, 189, 219, 237, 238, 239, 241, 244, 288, 331, 337, 368, 370, 381, 383, 402, 436, 461, 468, 469, 470, 478], "infin": [25, 103, 151, 182, 221, 258, 271, 340, 341, 348, 461, 463, 470, 478], "pyfloat_pack2": [25, 468, 478], "pyfloat_pack4": [25, 468, 478], "pyfloat_pack8": [25, 468, 478], "refus": [25, 208, 209, 268, 284, 326, 331, 333, 337, 353, 417, 478], "pyfloat_unpack2": [25, 468, 478], "pyfloat_unpack4": [25, 468, 478], "pyfloat_unpack8": [25, 468, 478], "pyeval_getfram": [26, 32, 52, 56, 478], "pythreadstate_getfram": [26, 32, 52, 56, 468, 477, 478], "reflect": [26, 31, 64, 67, 84, 88, 96, 100, 114, 117, 119, 171, 173, 179, 189, 206, 211, 221, 222, 243, 246, 251, 280, 288, 289, 304, 316, 333, 336, 337, 340, 343, 348, 364, 379, 380, 396, 400, 406, 416, 422, 423, 424, 450, 463, 469, 470, 471, 473, 476, 477, 478], "pyframe_typ": [26, 468, 478], "frametyp": [26, 67, 178, 380, 478], "frameobject": [26, 467, 468, 478], "pyframe_check": [26, 468, 478], "pyframe_getback": [26, 468, 477, 478], "outer": [26, 84, 136, 165, 182, 187, 203, 222, 233, 251, 348, 422, 423, 424, 425, 430, 431, 465, 468, 469, 470, 471, 477, 478], "pyframe_getbuiltin": [26, 468, 478], "f_builtin": [26, 251, 423, 468, 478], "pyframe_getcod": [26, 56, 468, 477, 478], "pyframe_getgener": [26, 468, 478], "pyframe_getglob": [26, 468, 478], "f_global": [26, 251, 423, 468, 478], "pyframe_getlasti": [26, 468, 478], "f_lasti": [26, 187, 251, 423, 460, 467, 468, 478], "pyframe_getvar": [26, 469, 478], "pyframe_getvarstr": [26, 469, 478], "pyframe_getloc": [26, 468, 478], "f_local": [26, 251, 380, 423, 468, 478], "523": [26, 32, 67, 460, 468, 469, 477, 478], "_pyinterpreterfram": [26, 32, 468, 478], "pyunstable_interpreterframe_getcod": [26, 478], "pyunstable_interpreterframe_getlasti": [26, 478], "pyunstable_interpreterframe_getlin": [26, 478], "pyfunctionobject": [27, 469, 478], "pyfunction_typ": [27, 478], "functiontyp": [27, 67, 119, 178, 260, 380, 467, 478], "pyfunction_check": 27, "pyfunction_new": 27, "annot": [27, 67, 84, 86, 89, 95, 110, 119, 177, 183, 187, 222, 244, 250, 251, 262, 296, 311, 347, 357, 375, 397, 402, 421, 422, 423, 425, 426, 440, 465, 467, 468, 469, 470, 471, 473, 476, 477, 478], "closur": [27, 57, 65, 75, 123, 165, 166, 187, 221, 246, 251, 288, 340, 355, 423, 468, 471, 474, 478], "co_qualnam": [27, 251, 423, 478], "pyfunction_newwithqualnam": 27, "pyfunction_getcod": 27, "pyfunction_getglob": 27, "pyfunction_getmodul": 27, "pyfunction_getdefault": 27, "pyfunction_setdefault": 27, "pyfunction_setvectorcal": [27, 469, 478], "func": [27, 32, 33, 34, 43, 52, 58, 62, 65, 67, 77, 84, 86, 87, 89, 92, 94, 98, 117, 119, 123, 136, 137, 141, 156, 162, 172, 173, 208, 220, 222, 251, 257, 262, 263, 279, 288, 304, 310, 328, 336, 340, 348, 357, 360, 362, 364, 375, 381, 383, 397, 415, 422, 424, 438, 461, 463, 465, 470, 471, 474, 476, 478], "preserv": [27, 32, 41, 67, 72, 83, 84, 89, 94, 100, 109, 117, 163, 171, 179, 182, 186, 189, 192, 197, 199, 201, 204, 209, 251, 257, 258, 264, 265, 288, 289, 293, 295, 296, 327, 328, 336, 340, 353, 357, 363, 380, 381, 383, 384, 397, 406, 408, 422, 423, 425, 430, 456, 457, 458, 459, 460, 462, 463, 464, 470, 471, 472, 473, 475, 476, 477, 478], "unalt": [27, 478], "pyfunction_getclosur": 27, "pyfunction_setclosur": 27, "pyfunction_getannot": [27, 478], "pyfunction_setannot": 27, "pyfunction_addwatch": 27, "pyfunction_watchcallback": 27, "pyfunction_clearwatch": 27, "pyfunction_watchev": 27, "pyfunction_event_cr": 27, "pyfunction_event_destroy": 27, "pyfunction_event_modify_cod": 27, "pyfunction_event_modify_default": 27, "pyfunction_event_modify_kwdefault": 27, "optim": [27, 33, 41, 57, 62, 65, 67, 75, 84, 89, 103, 119, 125, 130, 136, 138, 154, 159, 173, 187, 207, 221, 231, 239, 246, 251, 260, 261, 289, 295, 296, 304, 307, 314, 333, 336, 347, 348, 357, 360, 361, 417, 422, 423, 431, 451, 456, 457, 459, 467, 472, 478, 479], "emit": [27, 32, 33, 44, 57, 67, 75, 99, 100, 112, 115, 123, 129, 132, 136, 173, 179, 184, 187, 209, 241, 254, 257, 263, 265, 289, 295, 336, 344, 348, 357, 371, 376, 381, 383, 395, 406, 408, 412, 423, 425, 431, 450, 460, 463, 466, 469, 470, 472, 474, 475, 476, 477, 478], "decis": [27, 100, 102, 153, 251, 348, 371, 422, 431, 457, 461, 462, 464, 470, 471, 478], "involv": [28, 41, 44, 62, 72, 75, 98, 119, 151, 163, 165, 173, 182, 189, 209, 222, 239, 279, 288, 295, 304, 328, 336, 337, 340, 343, 357, 376, 385, 390, 407, 423, 425, 426, 427, 431, 457, 464, 472, 473, 475, 476, 478], "circular": [28, 32, 34, 72, 75, 84, 258, 379, 385, 423, 458, 473, 475, 478], "atom": [28, 67, 83, 223, 279, 289, 312, 315, 333, 340, 360, 361, 426, 428, 464, 465, 468, 471, 478], "tp_flag": [28, 60, 62, 74, 75, 98, 187, 463, 477, 478], "py_tpflags_have_gc": [28, 60, 62, 75, 98, 468, 478], "tp_travers": [28, 60, 62, 74, 75, 98, 223, 468, 477, 478], "tp_clear": [28, 44, 62, 74, 75, 98, 478], "conform": [28, 62, 67, 93, 99, 123, 143, 148, 163, 178, 179, 182, 197, 199, 204, 205, 207, 238, 241, 243, 246, 248, 252, 262, 263, 269, 292, 295, 310, 348, 381, 389, 406, 408, 414, 420, 423, 451, 461, 465, 466, 471, 472, 474, 475, 476, 477, 478], "pyobject_gc_new": [28, 62, 459, 476], "pyobject_gc_newvar": [28, 62, 459, 476], "pyobject_gc_track": [28, 56, 459, 478], "pyobject_gc_untrack": [28, 56, 62, 74, 75, 459, 468, 478], "pyobject_gc_del": [28, 56, 62, 459, 476, 478], "pytype_readi": [28, 44, 56, 60, 62, 74, 75, 98, 468, 478], "indirect": [28, 48, 57, 60, 63, 67, 72, 84, 92, 102, 172, 209, 246, 251, 289, 303, 310, 311, 348, 397, 421, 423, 424, 425, 427, 465, 472, 475, 476, 478], "pytype_fromspecwithbas": [28, 56, 60, 62, 467, 469, 478], "pytype_fromspec": [28, 44, 56, 57, 60, 62, 75, 98, 469, 476, 477, 478], "popul": [28, 34, 44, 67, 99, 100, 111, 117, 119, 179, 187, 203, 246, 263, 280, 295, 314, 320, 340, 346, 380, 395, 402, 406, 408, 423, 427, 456, 460, 467, 468, 474, 478], "child": [28, 32, 58, 84, 87, 99, 100, 117, 119, 129, 130, 134, 156, 208, 209, 244, 249, 274, 279, 289, 292, 305, 310, 318, 324, 329, 333, 334, 344, 364, 371, 381, 384, 385, 405, 406, 408, 417, 423, 457, 461, 462, 463, 464, 469, 470, 471, 472, 474, 475, 476, 477, 478], "analog": [28, 37, 63, 74, 84, 100, 182, 251, 263, 264, 271, 279, 295, 359, 379, 423, 425, 427, 459, 461, 462, 464, 470, 472, 476, 478], "pyunstable_object_gc_newwithextradata": [28, 478], "extra_s": [28, 447], "final": [28, 31, 33, 34, 44, 48, 58, 60, 62, 67, 72, 73, 75, 83, 84, 89, 93, 94, 99, 100, 102, 103, 110, 112, 119, 123, 130, 132, 135, 136, 138, 141, 154, 172, 177, 178, 182, 183, 184, 186, 187, 189, 193, 199, 207, 209, 231, 241, 246, 251, 254, 257, 261, 263, 267, 279, 288, 289, 292, 293, 295, 304, 307, 310, 311, 315, 328, 330, 334, 336, 337, 341, 348, 349, 353, 355, 356, 357, 359, 360, 362, 364, 371, 373, 376, 377, 379, 380, 381, 383, 384, 385, 394, 395, 401, 404, 409, 417, 423, 424, 425, 426, 427, 430, 431, 436, 438, 439, 441, 451, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479], "reserv": [28, 48, 60, 67, 93, 116, 251, 255, 292, 295, 310, 315, 318, 329, 335, 340, 360, 400, 405, 414, 417, 421, 423, 431, 438, 450, 458, 463, 465, 470, 475, 476, 478], "decid": [28, 33, 75, 84, 88, 89, 94, 99, 102, 129, 136, 141, 151, 153, 165, 179, 189, 239, 265, 333, 334, 348, 360, 381, 423, 427, 431, 462, 464, 469, 478], "pyobject_gc_res": [28, 478], "unexpect": [28, 99, 100, 166, 189, 201, 204, 226, 246, 263, 271, 284, 314, 315, 318, 329, 331, 333, 337, 339, 357, 383, 385, 390, 395, 417, 422, 423, 425, 430, 435, 438, 456, 459, 464, 467, 469, 471, 473, 475, 476, 477, 478], "becom": [28, 32, 33, 34, 62, 63, 65, 72, 83, 84, 86, 89, 91, 92, 93, 94, 96, 98, 100, 102, 103, 104, 106, 109, 111, 123, 129, 130, 136, 138, 154, 173, 189, 192, 198, 201, 207, 221, 243, 251, 254, 257, 279, 288, 289, 293, 295, 304, 307, 314, 315, 324, 325, 327, 328, 329, 337, 340, 341, 344, 348, 353, 360, 364, 371, 379, 381, 384, 385, 390, 397, 417, 422, 423, 424, 425, 431, 436, 445, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "near": [28, 89, 99, 102, 151, 163, 180, 182, 186, 243, 263, 265, 271, 279, 289, 293, 423, 431, 439, 459, 460, 462, 463, 464, 465, 470, 473, 478], "pyobject_is_gc": [28, 62, 74, 477, 478], "pyobject_gc_istrack": [28, 56, 477, 478], "gc": [28, 44, 60, 62, 67, 72, 75, 77, 84, 86, 96, 139, 250, 251, 311, 348, 357, 362, 377, 397, 406, 423, 447, 451, 457, 460, 462, 464, 469, 470, 478], "is_track": [28, 67, 223, 311, 464], "pyobject_gc_isfin": [28, 56, 477, 478], "is_fin": [28, 32, 67, 223, 311, 348, 445, 473, 476, 477, 478], "_pyobject_gc_track": [28, 476, 478], "_pyobject_gc_untrack": [28, 476, 478], "visitproc": [28, 56, 62, 75, 477], "visitor": [28, 119], "travers": [28, 30, 44, 62, 67, 75, 94, 98, 109, 119, 159, 180, 192, 201, 209, 248, 249, 263, 276, 289, 298, 340, 371, 383, 384, 402, 407, 408, 417, 427, 431, 457, 459, 460, 462, 463, 464, 468, 469, 473, 476, 477, 478], "traverseproc": [28, 44, 56, 62, 74, 75], "visit": [28, 62, 67, 75, 94, 98, 119, 179, 260, 289, 292, 309, 328, 338, 410, 456, 457, 459, 460, 463, 471, 477, 478], "simplifi": [28, 30, 32, 41, 65, 92, 94, 103, 107, 121, 125, 132, 154, 165, 179, 180, 193, 197, 212, 222, 246, 251, 279, 315, 333, 334, 370, 371, 373, 381, 397, 405, 422, 430, 456, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478], "py_visit": [28, 62, 75, 98, 477], "my_travers": 28, "noddi": 28, "foo": [28, 77, 78, 84, 85, 86, 87, 88, 89, 93, 99, 100, 101, 103, 107, 113, 117, 119, 148, 152, 163, 172, 189, 192, 196, 224, 239, 243, 246, 251, 258, 262, 263, 264, 268, 279, 284, 287, 288, 289, 290, 292, 293, 295, 298, 300, 304, 307, 315, 330, 336, 340, 353, 357, 380, 381, 383, 384, 385, 400, 402, 406, 407, 408, 417, 418, 422, 425, 427, 430, 431, 436, 457, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478], "bar": [28, 50, 84, 86, 89, 93, 99, 100, 101, 103, 117, 119, 152, 163, 172, 173, 196, 224, 239, 243, 246, 258, 263, 264, 279, 284, 287, 288, 289, 290, 292, 293, 298, 300, 304, 307, 309, 315, 330, 336, 340, 353, 357, 364, 369, 371, 380, 381, 383, 384, 385, 402, 417, 418, 420, 422, 427, 429, 430, 431, 436, 457, 463, 478], "inquiri": [28, 44, 56, 62, 74, 75, 254, 383], "drop": [28, 62, 67, 75, 83, 84, 86, 92, 93, 99, 102, 106, 130, 156, 189, 207, 208, 221, 246, 250, 257, 265, 279, 301, 317, 321, 337, 340, 344, 348, 359, 363, 364, 371, 383, 389, 457, 458, 459, 461, 462, 463, 465, 470, 472, 473, 478], "pygc_collect": [28, 56, 477, 478], "uncondit": [28, 112, 243, 279, 280, 284, 289, 293, 330, 383, 385, 423, 430, 450, 464, 465, 470, 471, 472, 473, 475, 477, 478], "unreach": [28, 208, 223, 381, 423, 475, 477, 478], "pygc_en": [28, 56, 467, 478], "pygc_dis": [28, 56, 467, 478], "pygc_isen": [28, 56, 467, 478], "isen": [28, 67, 223, 311], "pyunstable_gc_visitobject": 28, "gcvisitobjects_t": 28, "live": [28, 34, 62, 66, 67, 72, 83, 89, 100, 148, 179, 203, 243, 244, 247, 249, 250, 279, 289, 295, 301, 311, 336, 337, 353, 389, 395, 397, 405, 420, 423, 441, 456, 457, 458, 459, 465, 470, 478], "capabl": [28, 63, 75, 91, 92, 94, 100, 103, 119, 123, 165, 173, 182, 189, 208, 230, 241, 244, 247, 249, 251, 253, 254, 255, 268, 278, 279, 284, 288, 301, 303, 316, 370, 385, 389, 408, 410, 417, 425, 450, 459, 460, 461, 462, 470, 471, 472, 473, 478], "behaviour": [28, 30, 32, 34, 48, 62, 67, 83, 84, 94, 99, 100, 103, 123, 165, 185, 209, 211, 213, 239, 251, 254, 262, 263, 264, 265, 279, 288, 289, 292, 295, 307, 315, 316, 324, 327, 329, 333, 334, 336, 340, 344, 348, 359, 379, 384, 385, 389, 390, 395, 408, 411, 414, 423, 425, 427, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 471, 472, 474, 475, 478], "multipl": [28, 30, 32, 33, 44, 46, 62, 63, 67, 70, 72, 74, 75, 83, 86, 88, 89, 91, 93, 94, 102, 103, 106, 107, 112, 113, 117, 118, 119, 121, 123, 132, 134, 140, 146, 148, 154, 156, 159, 163, 165, 171, 173, 177, 179, 182, 183, 185, 189, 195, 201, 205, 209, 215, 217, 221, 222, 224, 226, 230, 231, 241, 243, 247, 249, 250, 251, 254, 257, 258, 263, 264, 266, 267, 271, 272, 274, 278, 279, 280, 288, 289, 292, 293, 295, 296, 298, 303, 310, 315, 316, 325, 326, 327, 331, 333, 334, 336, 337, 338, 340, 343, 347, 348, 351, 353, 357, 360, 362, 364, 370, 371, 372, 375, 379, 381, 383, 395, 397, 402, 404, 408, 410, 414, 422, 423, 424, 425, 426, 427, 430, 431, 436, 439, 450, 456, 457, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478], "pygen_new": 29, "pygen_newwithqualnam": 29, "pygenobject": 29, "pygen_typ": 29, "pygen_check": 29, "pygen_checkexact": 29, "pyimport_importmodul": [30, 56, 72, 78, 458, 463, 465, 467, 478], "pyimport_importmoduleex": [30, 471], "submodul": [30, 62, 67, 86, 154, 180, 189, 221, 234, 246, 298, 320, 337, 375, 381, 404, 417, 431, 445, 450, 462, 465, 466, 472, 475, 478], "packag": [30, 32, 33, 62, 63, 67, 69, 73, 75, 76, 78, 79, 83, 84, 86, 92, 99, 100, 108, 109, 140, 148, 156, 169, 172, 179, 183, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 208, 221, 226, 234, 238, 243, 246, 249, 250, 251, 257, 263, 264, 265, 272, 275, 276, 277, 279, 281, 303, 308, 309, 311, 320, 326, 330, 331, 336, 337, 341, 348, 349, 350, 364, 370, 375, 379, 380, 381, 383, 384, 385, 387, 394, 395, 404, 406, 409, 416, 417, 418, 420, 421, 428, 431, 433, 440, 448, 449, 450, 451, 453, 454, 455, 457, 459, 461, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "fromlist": [30, 67, 118, 178, 187, 221, 246, 478], "top": [30, 32, 41, 67, 72, 83, 84, 89, 91, 93, 94, 96, 99, 100, 102, 103, 107, 112, 115, 117, 119, 132, 136, 139, 148, 149, 154, 163, 166, 172, 173, 175, 181, 185, 186, 187, 189, 203, 207, 209, 221, 222, 226, 239, 243, 244, 246, 247, 250, 251, 252, 253, 254, 262, 272, 281, 289, 292, 295, 298, 300, 301, 304, 308, 309, 310, 311, 320, 337, 338, 347, 348, 353, 357, 360, 364, 366, 370, 371, 379, 380, 383, 384, 394, 408, 414, 415, 417, 422, 424, 427, 430, 431, 435, 445, 446, 450, 457, 458, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478], "unfortun": [30, 83, 87, 91, 94, 98, 100, 101, 102, 103, 107, 148, 154, 279, 301, 304, 326, 333, 337, 353, 364, 385, 456, 458, 461, 463, 466, 474, 477], "fact": [30, 32, 63, 72, 84, 94, 99, 103, 107, 123, 147, 163, 172, 182, 189, 202, 206, 219, 221, 246, 275, 288, 295, 304, 340, 353, 364, 379, 381, 390, 402, 416, 423, 425, 427, 429, 456, 457, 458, 463, 469, 471, 472, 473, 478], "subpackag": [30, 62, 86, 246, 277, 348, 383, 417, 427, 445, 457], "__all__": [30, 221, 243, 275, 315, 357, 431, 445, 458, 474, 478], "absolut": [30, 32, 33, 46, 60, 62, 67, 71, 75, 83, 99, 110, 119, 123, 136, 138, 141, 148, 150, 151, 152, 182, 187, 189, 209, 215, 221, 226, 238, 246, 247, 253, 254, 264, 265, 266, 271, 274, 288, 289, 292, 320, 327, 328, 331, 336, 340, 341, 348, 349, 353, 355, 361, 364, 367, 377, 379, 381, 389, 394, 400, 410, 417, 420, 425, 427, 431, 441, 445, 450, 451, 456, 457, 461, 463, 464, 465, 469, 470, 471, 472, 473, 475, 477, 478, 479], "pyimport_importmodulenoblock": [30, 56, 463, 465, 471, 478], "alia": [30, 39, 58, 67, 84, 86, 93, 100, 102, 119, 130, 134, 150, 154, 157, 172, 174, 179, 187, 191, 193, 201, 207, 209, 214, 224, 226, 239, 246, 250, 251, 260, 279, 283, 288, 289, 293, 310, 318, 324, 325, 329, 333, 336, 337, 344, 354, 360, 371, 379, 380, 381, 388, 398, 400, 401, 402, 414, 417, 422, 423, 424, 431, 451, 465, 467, 469, 472, 474, 475, 477, 478], "switch": [30, 32, 34, 63, 67, 74, 83, 89, 98, 106, 107, 108, 109, 125, 130, 134, 154, 189, 206, 221, 226, 239, 241, 243, 288, 301, 315, 318, 320, 336, 340, 341, 348, 353, 379, 384, 407, 427, 436, 445, 450, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 475, 477, 478], "best": [30, 34, 54, 63, 67, 83, 86, 89, 91, 94, 95, 98, 99, 100, 102, 138, 170, 179, 182, 184, 186, 189, 190, 191, 201, 209, 221, 222, 226, 230, 231, 238, 243, 244, 251, 263, 266, 279, 284, 288, 289, 301, 303, 304, 327, 331, 333, 336, 340, 348, 353, 362, 364, 370, 379, 381, 384, 398, 420, 423, 427, 451, 456, 457, 461, 462, 465, 467, 469, 470, 472, 473, 474, 477, 478], "__import__": [30, 67, 187, 221, 246, 250, 264, 276, 295, 423, 427, 445, 463, 466, 471, 474, 477, 478], "incomplet": [30, 60, 63, 67, 78, 115, 143, 153, 154, 176, 179, 243, 257, 264, 281, 310, 324, 353, 417, 460, 461, 464, 465, 469, 471, 472, 478], "pyimport_importmodulelevelobject": [30, 56], "pyimport_importmodulelevel": [30, 56, 471], "pyimport_import": [30, 56, 71, 463], "higher": [30, 32, 55, 67, 94, 96, 99, 100, 112, 123, 137, 143, 165, 173, 182, 187, 198, 200, 220, 221, 226, 238, 250, 254, 257, 263, 264, 265, 266, 275, 277, 278, 279, 284, 289, 295, 301, 321, 328, 333, 336, 337, 340, 346, 348, 353, 354, 360, 362, 377, 381, 395, 408, 458, 459, 462, 463, 470, 471, 472, 475, 478], "__builtins__": [30, 145, 221, 251, 424, 445, 465, 467, 478], "instal": [30, 32, 33, 34, 41, 67, 71, 75, 78, 83, 84, 88, 91, 96, 100, 102, 107, 108, 109, 111, 129, 132, 141, 159, 180, 184, 188, 208, 210, 226, 231, 242, 243, 246, 247, 250, 257, 263, 265, 272, 307, 311, 316, 329, 330, 336, 337, 340, 344, 346, 348, 349, 356, 364, 370, 377, 379, 383, 390, 394, 395, 400, 402, 416, 421, 427, 448, 450, 453, 455, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "environ": [30, 32, 33, 41, 62, 65, 67, 83, 84, 86, 92, 99, 100, 101, 102, 106, 107, 108, 115, 123, 148, 154, 156, 159, 172, 173, 178, 182, 184, 188, 206, 210, 218, 221, 224, 226, 231, 243, 247, 250, 252, 254, 262, 264, 276, 288, 291, 293, 295, 302, 304, 305, 307, 309, 311, 321, 323, 328, 333, 334, 337, 340, 344, 348, 350, 353, 357, 361, 364, 375, 377, 383, 384, 386, 390, 395, 398, 400, 405, 415, 423, 424, 427, 433, 443, 448, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 463, 465, 466, 469, 470, 472, 475, 476, 477, 478, 479], "pyimport_reloadmodul": [30, 56, 478], "reload": [30, 67, 84, 89, 93, 109, 239, 243, 246, 276, 348, 357, 377, 427, 445, 460, 465, 469, 472, 475, 478], "pyimport_addmoduleobject": [30, 56], "pyimport_addmodul": [30, 56, 72], "pyimport_execcodemodul": [30, 56], "danger": [30, 34, 58, 60, 84, 279, 288, 289, 292, 337, 353, 384, 429, 458, 461, 462, 469, 478], "know": [30, 32, 34, 58, 62, 72, 75, 76, 84, 89, 92, 94, 97, 99, 100, 101, 102, 103, 106, 107, 114, 117, 129, 136, 148, 151, 157, 172, 174, 177, 186, 189, 191, 196, 197, 204, 239, 241, 246, 255, 262, 264, 265, 267, 268, 279, 288, 289, 326, 328, 333, 337, 340, 348, 364, 371, 377, 379, 384, 390, 395, 400, 402, 411, 414, 417, 420, 427, 429, 431, 456, 457, 458, 459, 462, 463, 464, 469, 471, 472, 474, 478], "unknown": [30, 32, 63, 67, 87, 93, 103, 119, 136, 138, 186, 189, 192, 195, 197, 198, 204, 207, 221, 231, 241, 252, 272, 284, 288, 289, 300, 303, 315, 338, 348, 353, 360, 361, 377, 390, 393, 411, 436, 451, 459, 460, 464, 468, 470, 474, 475, 478], "probabl": [30, 32, 55, 67, 72, 74, 78, 84, 89, 91, 97, 100, 102, 103, 140, 154, 155, 172, 179, 189, 196, 209, 226, 279, 286, 289, 293, 296, 304, 314, 331, 333, 334, 336, 337, 348, 362, 379, 384, 390, 400, 401, 402, 410, 429, 451, 457, 458, 459, 460, 462, 463, 465, 470, 471, 478], "damag": [30, 295, 353, 381, 421], "author": [30, 72, 76, 94, 98, 99, 101, 103, 107, 108, 123, 154, 156, 189, 209, 231, 238, 247, 248, 265, 289, 303, 336, 337, 383, 390, 402, 414, 421, 448, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 472, 473, 478], "__spec__": [30, 67, 178, 246, 248, 320, 380, 445, 467, 469, 472, 474, 475, 478], "__loader__": [30, 44, 67, 178, 221, 246, 261, 320, 380, 427, 445, 467, 471, 472, 475, 478], "spec": [30, 44, 60, 67, 86, 105, 207, 232, 235, 240, 246, 251, 258, 320, 337, 348, 371, 384, 385, 389, 414, 418, 426, 460, 469, 472, 473, 474, 475, 476, 477, 478], "loader": [30, 67, 86, 165, 172, 189, 246, 247, 248, 249, 261, 276, 298, 357, 377, 380, 383, 408, 416, 418, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "sourcefileload": [30, 67, 246, 276, 469, 471, 474, 478], "__file__": [30, 44, 67, 88, 100, 111, 184, 189, 221, 231, 246, 251, 261, 298, 319, 320, 357, 377, 383, 395, 418, 423, 427, 451, 460, 472, 474, 475, 477, 478], "co_filenam": [30, 251, 423, 464, 478], "applic": [30, 32, 33, 56, 62, 63, 67, 71, 72, 74, 76, 84, 88, 94, 98, 99, 101, 102, 103, 106, 107, 111, 117, 119, 123, 130, 134, 136, 137, 140, 142, 148, 153, 163, 165, 171, 173, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 204, 209, 210, 221, 222, 231, 238, 242, 254, 258, 262, 263, 264, 265, 267, 268, 271, 272, 277, 278, 279, 280, 288, 289, 292, 295, 301, 304, 310, 315, 321, 327, 328, 329, 333, 336, 337, 340, 342, 344, 349, 353, 357, 359, 360, 361, 363, 364, 366, 367, 370, 371, 377, 379, 382, 383, 389, 390, 395, 397, 400, 402, 405, 406, 408, 409, 410, 411, 412, 417, 418, 420, 421, 422, 425, 429, 431, 450, 453, 454, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 471, 472, 474, 475, 476, 477, 478, 479], "__cached__": [30, 67, 221, 246, 320, 427, 467, 469, 470, 472, 478], "pyimport_execcodemoduleex": [30, 56], "pyimport_execcodemodulewithpathnam": [30, 56], "modulespec": [30, 44, 67, 86, 246, 276, 298, 320, 348, 380, 427], "pathnam": [30, 83, 139, 148, 172, 216, 219, 227, 263, 265, 275, 277, 289, 290, 292, 327, 338, 348, 353, 355, 364, 370, 392, 417, 418, 423, 427, 450, 470, 473, 478], "pyimport_execcodemoduleobject": [30, 56, 478], "cpathnam": 30, "figur": [30, 72, 75, 91, 93, 94, 102, 103, 106, 117, 182, 189, 288, 304, 333, 353, 457, 458, 459, 460, 461, 462, 463, 464, 471, 478], "imp": [30, 465, 467, 468, 469, 470, 471, 472, 474, 478], "source_from_cach": [30, 67, 246, 276, 469, 470, 472, 474], "pyimport_getmagicnumb": [30, 56, 471], "magic": [30, 67, 84, 86, 88, 89, 112, 163, 172, 183, 189, 196, 226, 246, 304, 337, 345, 357, 360, 361, 381, 385, 417, 420, 457, 458, 460, 472, 473, 474, 475, 478], "pyc": [30, 32, 33, 67, 85, 86, 159, 246, 270, 277, 295, 307, 328, 340, 348, 357, 377, 417, 418, 423, 427, 445, 450, 451, 456, 458, 460, 461, 463, 464, 468, 469, 472, 473, 477, 478, 479], "four": [30, 57, 63, 87, 88, 89, 91, 92, 93, 103, 106, 117, 129, 154, 173, 186, 187, 203, 207, 238, 243, 251, 255, 263, 264, 267, 274, 277, 288, 310, 314, 330, 333, 334, 336, 340, 341, 343, 364, 371, 379, 384, 430, 436, 456, 463, 466, 470, 477, 478], "pyimport_getmagictag": [30, 56], "tag": [30, 60, 62, 67, 74, 96, 103, 119, 148, 186, 236, 244, 246, 265, 269, 274, 289, 295, 310, 342, 348, 351, 363, 390, 405, 408, 412, 414, 456, 457, 462, 464, 468, 472, 473, 476, 478, 479], "3147": [30, 67, 84, 159, 246, 307, 320, 357, 427, 445, 471, 479], "keep": [30, 32, 38, 62, 67, 72, 84, 89, 93, 98, 100, 102, 103, 106, 117, 119, 125, 136, 141, 148, 154, 156, 165, 172, 173, 175, 177, 178, 182, 187, 189, 192, 207, 210, 222, 230, 239, 243, 248, 251, 254, 257, 267, 274, 288, 289, 292, 295, 301, 303, 315, 334, 340, 344, 348, 357, 364, 383, 384, 390, 397, 402, 405, 410, 422, 423, 427, 431, 458, 460, 461, 462, 463, 464, 470, 472, 475, 478], "mind": [30, 84, 89, 91, 98, 100, 102, 103, 117, 119, 172, 182, 196, 248, 265, 279, 288, 381, 390, 408, 427, 459, 461, 470], "cache_tag": [30, 246, 348, 469, 471, 478], "authorit": [30, 107, 469, 478], "pyimport_getmoduledict": [30, 56, 478], "administr": [30, 32, 58, 99, 148, 152, 244, 283, 284, 289, 330, 333, 361, 402, 424, 456, 461, 471, 476, 477, 478], "pyimport_getmodul": [30, 56, 475, 478], "pyimport_getimport": [30, 56], "finder": [30, 67, 86, 189, 246, 247, 266, 275, 298, 348, 428, 454, 456, 461, 463, 467, 469, 471, 472, 478], "pkg": [30, 246, 298, 416, 431, 450, 451, 455, 457, 458, 462, 464, 467, 468, 469, 476, 478], "__path__": [30, 67, 86, 246, 298, 308, 348, 445, 472, 474, 475, 478], "fetch": [30, 67, 89, 92, 94, 107, 111, 163, 171, 204, 244, 252, 253, 257, 277, 279, 280, 289, 295, 303, 311, 329, 333, 336, 337, 346, 384, 385, 390, 391, 409, 414, 447, 461, 470, 471, 478], "path_importer_cach": [30, 67, 246, 298, 311, 348, 427, 445, 460, 468, 469, 471, 472, 473, 475, 478], "cach": [30, 33, 41, 60, 62, 63, 67, 72, 74, 83, 86, 92, 99, 103, 107, 113, 123, 136, 144, 154, 156, 159, 172, 180, 186, 187, 212, 216, 220, 222, 226, 246, 261, 263, 276, 279, 284, 289, 298, 307, 315, 320, 326, 336, 337, 343, 348, 355, 357, 377, 381, 383, 390, 397, 418, 420, 422, 445, 447, 448, 450, 456, 458, 460, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "path_hook": [30, 67, 86, 139, 246, 276, 298, 311, 348, 427, 431, 445, 460, 471, 472, 478], "our": [30, 34, 72, 75, 84, 88, 89, 92, 93, 100, 103, 106, 107, 111, 131, 163, 165, 172, 192, 196, 201, 255, 288, 295, 315, 331, 334, 336, 337, 357, 381, 384, 385, 397, 402, 408, 417, 459, 462, 463, 478], "find": [30, 32, 60, 62, 67, 71, 72, 74, 76, 88, 89, 92, 93, 94, 96, 97, 99, 100, 102, 103, 106, 109, 115, 117, 119, 138, 144, 148, 154, 156, 173, 177, 179, 183, 186, 187, 189, 191, 192, 193, 195, 201, 203, 207, 209, 217, 221, 222, 226, 231, 242, 243, 246, 247, 250, 251, 254, 262, 263, 269, 274, 276, 288, 289, 295, 296, 298, 309, 319, 333, 337, 340, 344, 348, 349, 357, 358, 360, 362, 364, 381, 383, 384, 385, 389, 390, 397, 405, 424, 425, 427, 429, 431, 436, 437, 450, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478], "pyimport_importfrozenmoduleobject": [30, 56, 478], "frozen": [30, 33, 67, 172, 221, 246, 279, 298, 311, 348, 377, 381, 423, 427, 450, 456, 460, 469, 472, 475, 478], "misnom": 30, "pyimport_importfrozenmodul": [30, 56, 478], "_frozen": [30, 172, 468, 478], "freez": [30, 67, 80, 84, 222, 223, 243, 284, 311, 448, 475, 478], "tool": [30, 32, 50, 56, 67, 71, 78, 84, 86, 89, 91, 92, 94, 96, 97, 99, 100, 101, 102, 103, 106, 109, 111, 119, 134, 152, 165, 172, 183, 189, 190, 200, 215, 219, 221, 222, 226, 227, 247, 250, 251, 252, 257, 258, 260, 295, 303, 317, 327, 329, 348, 373, 375, 377, 379, 381, 383, 394, 408, 416, 417, 423, 431, 439, 451, 452, 456, 457, 458, 459, 460, 462, 463, 465, 466, 468, 470, 471, 472, 473, 474, 477, 479], "distribut": [30, 32, 65, 67, 69, 70, 72, 74, 83, 84, 111, 123, 182, 205, 226, 231, 246, 267, 271, 276, 279, 280, 286, 298, 314, 336, 350, 353, 364, 372, 383, 409, 416, 421, 451, 456, 457, 458, 460, 462, 463, 465, 467, 470, 473, 474, 475, 476, 477, 478], "is_packag": [30, 67, 246, 276, 418, 468, 478], "pyimport_frozenmodul": [30, 33, 172, 478], "record": [30, 60, 67, 74, 77, 91, 92, 93, 94, 99, 100, 101, 106, 119, 152, 156, 159, 171, 172, 173, 174, 180, 181, 182, 183, 193, 199, 208, 247, 251, 255, 263, 265, 267, 275, 288, 289, 291, 295, 304, 305, 311, 336, 338, 340, 343, 346, 357, 379, 380, 381, 383, 384, 385, 395, 417, 427, 435, 440, 457, 460, 461, 462, 463, 464, 470, 471, 472, 473, 476, 478], "play": [30, 67, 75, 88, 172, 182, 250, 291, 314, 337, 379, 383, 399, 423, 435, 465, 478], "trick": [30, 67, 84, 172, 221, 293, 336, 348, 381, 385, 435, 459], "collect": [30, 31, 41, 44, 49, 51, 62, 63, 66, 67, 72, 73, 74, 77, 83, 84, 86, 89, 91, 94, 96, 99, 100, 102, 103, 109, 111, 113, 117, 119, 122, 130, 136, 144, 148, 154, 163, 165, 166, 172, 175, 177, 178, 180, 183, 189, 190, 209, 210, 221, 222, 223, 238, 239, 247, 250, 251, 257, 260, 279, 289, 295, 301, 304, 310, 311, 312, 326, 328, 329, 332, 333, 334, 336, 337, 340, 343, 348, 354, 355, 357, 362, 371, 377, 379, 380, 383, 390, 396, 397, 400, 406, 408, 422, 423, 425, 431, 436, 437, 447, 448, 451, 456, 459, 460, 461, 462, 463, 465, 466, 468, 469, 478, 479], "pyimport_appendinittab": [30, 32, 33, 44, 56, 71, 72, 478], "initfunc": 30, "pyimport_extendinittab": [30, 32, 33, 478], "extend": [30, 32, 41, 44, 60, 62, 67, 72, 73, 74, 75, 78, 79, 83, 91, 93, 100, 103, 107, 115, 117, 118, 119, 120, 130, 140, 147, 151, 152, 154, 156, 157, 163, 164, 165, 172, 173, 178, 179, 186, 187, 188, 189, 192, 201, 203, 209, 221, 222, 226, 241, 243, 245, 254, 257, 258, 267, 269, 271, 272, 274, 276, 278, 295, 298, 299, 304, 310, 316, 324, 328, 331, 333, 337, 340, 346, 348, 353, 355, 361, 371, 373, 383, 390, 396, 397, 404, 405, 408, 415, 423, 424, 425, 427, 431, 436, 437, 439, 456, 458, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "_inittab": 30, "emb": [30, 32, 33, 65, 67, 71, 84, 159, 189, 242, 246, 362, 364, 404, 408, 459, 464, 475, 476, 478], "conjunct": [30, 186, 188, 189, 221, 251, 264, 327, 333, 337, 381, 426, 430, 472], "newtab": 30, "sentinel": [30, 36, 57, 67, 72, 74, 75, 84, 89, 100, 160, 177, 183, 221, 257, 265, 279, 385, 459, 471, 475, 478], "fault": [30, 67, 99, 172, 181, 252, 288, 293, 318, 329, 361, 376, 462, 464, 471, 478], "insuffici": [30, 157, 182, 189, 208, 248, 279, 289, 384, 474], "high": [31, 32, 37, 41, 59, 63, 67, 72, 73, 78, 83, 84, 99, 100, 102, 107, 119, 123, 125, 127, 130, 132, 133, 134, 136, 146, 160, 173, 179, 182, 187, 190, 197, 215, 222, 244, 250, 254, 255, 256, 257, 262, 266, 279, 285, 289, 291, 295, 304, 305, 314, 315, 324, 329, 333, 336, 337, 339, 348, 351, 353, 361, 381, 398, 431, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 475, 477, 478], "queri": [31, 49, 67, 83, 94, 100, 103, 106, 115, 130, 133, 148, 154, 165, 201, 215, 226, 241, 246, 247, 251, 277, 292, 294, 301, 324, 346, 353, 357, 364, 370, 371, 381, 389, 390, 400, 402, 405, 414, 427, 450, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "signal": [31, 32, 33, 48, 58, 62, 67, 91, 94, 98, 100, 103, 112, 127, 129, 130, 132, 134, 137, 138, 139, 162, 172, 173, 181, 183, 184, 187, 189, 209, 238, 250, 253, 254, 256, 257, 263, 264, 271, 279, 286, 288, 289, 293, 295, 305, 315, 318, 324, 325, 327, 333, 336, 337, 341, 344, 348, 357, 360, 361, 366, 376, 381, 390, 408, 410, 414, 425, 427, 450, 457, 458, 459, 460, 461, 462, 463, 464, 467, 470, 474, 476, 478], "categori": [31, 67, 83, 99, 103, 106, 130, 209, 237, 254, 262, 265, 311, 315, 336, 340, 357, 358, 382, 389, 430, 450, 457, 458, 462, 463, 465, 470, 475, 478], "marshal": [31, 64, 67, 84, 139, 154, 250, 258, 265, 294, 374, 414, 460, 461, 464, 473, 478], "perf": [31, 33, 64, 67, 95, 348, 450, 469, 478], "abstract": [31, 37, 54, 62, 67, 73, 75, 77, 78, 83, 84, 86, 90, 91, 92, 123, 129, 130, 165, 172, 178, 179, 182, 204, 209, 217, 222, 240, 247, 250, 251, 254, 260, 265, 276, 286, 289, 297, 325, 333, 337, 340, 348, 355, 381, 402, 420, 423, 425, 460, 462, 464, 465, 467, 470, 471, 473, 474, 475, 477, 478, 479], "configur": [31, 34, 41, 58, 62, 63, 67, 71, 72, 84, 89, 91, 94, 96, 98, 101, 103, 112, 115, 123, 129, 132, 133, 166, 168, 172, 178, 180, 182, 185, 207, 213, 218, 231, 241, 243, 244, 246, 250, 262, 263, 265, 267, 268, 288, 289, 301, 302, 303, 310, 311, 316, 319, 323, 327, 331, 333, 336, 337, 348, 349, 353, 356, 357, 360, 363, 364, 367, 368, 369, 370, 371, 383, 384, 385, 390, 394, 395, 400, 402, 406, 407, 408, 412, 414, 421, 450, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479], "wide": [31, 33, 58, 63, 67, 89, 91, 94, 98, 99, 102, 106, 112, 117, 129, 132, 138, 147, 152, 163, 172, 173, 179, 182, 189, 190, 239, 243, 251, 253, 262, 267, 278, 289, 291, 295, 298, 301, 311, 326, 337, 340, 343, 344, 353, 360, 361, 370, 405, 417, 420, 421, 451, 456, 459, 462, 463, 464, 469, 470, 471, 472, 478], "sub": [31, 44, 49, 67, 89, 94, 98, 99, 100, 103, 115, 119, 121, 130, 172, 173, 174, 179, 186, 187, 190, 192, 197, 201, 203, 210, 220, 227, 244, 248, 250, 257, 260, 264, 267, 274, 287, 304, 310, 315, 326, 340, 348, 357, 358, 370, 381, 383, 385, 400, 408, 425, 426, 438, 446, 456, 457, 459, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 478], "asynchron": [31, 62, 67, 83, 86, 119, 122, 123, 127, 130, 132, 133, 134, 136, 157, 162, 165, 166, 183, 187, 209, 221, 250, 252, 256, 263, 279, 311, 333, 337, 344, 348, 380, 383, 384, 401, 422, 431, 464, 468, 469, 470, 471, 472, 473, 475, 476, 478], "notif": [31, 66, 67, 325, 395, 400, 410, 457, 464, 469, 476, 478], "trace": [31, 33, 34, 41, 62, 67, 72, 96, 99, 101, 112, 141, 153, 167, 172, 181, 187, 210, 222, 237, 244, 250, 251, 253, 289, 293, 311, 336, 348, 357, 360, 376, 379, 421, 423, 431, 450, 451, 458, 459, 460, 464, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "advanc": [31, 67, 75, 84, 91, 100, 103, 146, 163, 165, 171, 172, 173, 182, 183, 190, 207, 221, 230, 251, 254, 257, 263, 266, 274, 288, 333, 337, 341, 344, 348, 362, 375, 379, 385, 397, 406, 407, 417, 422, 423, 429, 456, 460, 465, 470, 476, 478, 479], "pywidestringlist": [31, 67, 476], "pystatus": [31, 32, 67, 469, 476], "pypreconfig": [31, 32, 41, 58, 67, 469, 476], "preiniti": [31, 41, 58, 67, 262], "pyconfig": [31, 32, 34, 58, 65, 67, 86, 289, 348, 349, 350, 451, 464, 467, 468, 469, 476, 477, 478], "isol": [31, 32, 44, 62, 65, 67, 86, 94, 95, 111, 119, 136, 189, 243, 323, 348, 349, 357, 383, 384, 394, 450, 456, 468, 469, 472, 474, 477, 478], "py_runmain": [31, 67, 476, 478], "py_getargcargv": [31, 67, 478], "provision": [31, 67, 86, 193, 199, 201, 204, 247, 348, 472, 473, 474, 475, 476, 478], "domain": [31, 67, 96, 99, 123, 142, 181, 190, 199, 204, 205, 208, 226, 231, 239, 240, 244, 262, 264, 265, 279, 281, 283, 331, 333, 334, 337, 342, 343, 348, 377, 389, 393, 450, 460, 462, 469, 471, 472, 473, 474, 475, 478], "custom": [31, 32, 33, 58, 62, 67, 70, 72, 75, 78, 84, 107, 112, 115, 116, 119, 123, 132, 136, 147, 152, 154, 157, 160, 177, 179, 181, 185, 189, 190, 203, 204, 207, 209, 213, 221, 238, 241, 243, 246, 247, 250, 251, 252, 254, 258, 263, 265, 267, 276, 281, 288, 294, 316, 319, 328, 329, 330, 337, 340, 348, 349, 353, 357, 358, 360, 364, 371, 381, 383, 384, 390, 394, 395, 397, 402, 405, 407, 408, 414, 420, 422, 425, 427, 431, 451, 453, 455, 457, 460, 461, 462, 463, 464, 465, 469, 470, 471, 473, 476, 477, 478], "pymalloc": [31, 33, 67, 348, 450, 451, 458, 463, 464, 470, 472, 474, 476, 478, 479], "tracemalloc": [31, 33, 67, 181, 184, 250, 357, 421, 450, 478], "cyclic": [31, 44, 49, 62, 67, 73, 84, 86, 266, 288, 406, 419, 423, 470, 472, 478], "garbag": [31, 41, 44, 49, 51, 62, 63, 66, 67, 72, 73, 74, 83, 84, 86, 94, 96, 100, 122, 136, 148, 155, 165, 166, 172, 175, 189, 209, 210, 250, 270, 279, 288, 289, 311, 333, 336, 348, 355, 357, 362, 383, 397, 406, 422, 423, 425, 447, 451, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "pyinitfrozenextens": 32, "pymem_setalloc": [32, 33, 41, 469], "pymem_setupdebughook": [32, 41, 184, 474, 478], "pyobject_setarenaalloc": [32, 41], "py_setpath": [32, 56, 349, 456, 468, 476, 478], "py_setprogramnam": [32, 33, 34, 56, 71, 72, 456, 468, 478], "py_setpythonhom": [32, 33, 56, 468, 478], "py_setstandardstreamencod": [32, 33, 468, 472, 478], "pysys_addwarnopt": [32, 56, 58, 468, 475, 478], "pysys_addxopt": [32, 56, 58, 468, 478], "pysys_resetwarnopt": [32, 56, 58, 478], "py_isiniti": [32, 34, 56], "pymem_getalloc": [32, 41], "pyobject_getarenaalloc": [32, 41], "py_getbuildinfo": [32, 56, 462], "py_getcompil": [32, 56], "py_getcopyright": [32, 56], "py_getplatform": [32, 56], "py_getvers": [32, 56], "py_decodelocal": [32, 33, 56, 58, 63, 71, 72, 473, 475, 478], "pymem_rawmalloc": [32, 33, 41, 65, 472, 478], "pymem_rawrealloc": [32, 41, 65, 472], "pymem_rawcalloc": [32, 41, 473, 478], "pymem_rawfre": [32, 41, 58, 71, 72], "py_encodelocal": [32, 56, 58, 63, 473, 475, 478], "py_getpath": [32, 34, 56, 467, 478], "py_getprefix": [32, 34, 56, 467, 478], "py_getexecprefix": [32, 34, 56, 467, 478], "py_getprogramfullpath": [32, 34, 56, 467, 476, 478], "py_getpythonhom": [32, 56, 467, 478], "py_getprogramnam": [32, 56, 467, 476, 478], "pyeval_initthread": [32, 56, 470, 477, 478], "py_byteswarningflag": [32, 469, 475], "bb": [32, 94, 102, 156, 257, 263, 450, 475, 478], "bytes_warn": [32, 33, 348, 469, 470], "py_debugflag": [32, 469], "parser_debug": [32, 33, 469], "parser": [32, 33, 67, 72, 78, 88, 94, 100, 103, 106, 109, 115, 119, 153, 155, 156, 171, 186, 189, 190, 192, 195, 196, 197, 199, 201, 202, 204, 209, 213, 234, 250, 258, 264, 269, 281, 293, 300, 305, 315, 327, 340, 346, 390, 394, 404, 405, 406, 407, 408, 410, 412, 426, 430, 431, 436, 438, 442, 446, 450, 451, 457, 458, 460, 461, 462, 464, 467, 469, 470, 471, 472, 473, 474, 475, 478], "expert": [32, 33, 288, 450], "pythondebug": [32, 33, 450, 451], "py_dontwritebytecodeflag": [32, 469], "write_bytecod": [32, 33, 469], "tri": [32, 33, 34, 41, 44, 48, 62, 67, 70, 72, 74, 75, 76, 77, 78, 83, 86, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 112, 117, 119, 123, 130, 132, 135, 136, 137, 138, 143, 148, 155, 156, 162, 163, 171, 172, 173, 179, 182, 184, 186, 187, 189, 196, 199, 205, 208, 209, 221, 222, 224, 226, 241, 243, 246, 251, 254, 257, 258, 260, 262, 263, 264, 265, 267, 272, 275, 278, 279, 288, 289, 291, 292, 293, 295, 298, 301, 304, 309, 310, 311, 315, 316, 318, 319, 327, 328, 329, 331, 333, 336, 337, 340, 341, 344, 348, 353, 354, 356, 357, 360, 362, 364, 370, 376, 379, 381, 384, 385, 390, 394, 395, 397, 398, 402, 403, 408, 414, 415, 417, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 438, 441, 444, 450, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pythondontwritebytecod": [32, 33, 84, 348, 450, 463], "py_frozenflag": [32, 469], "pathconfig_warn": [32, 33, 469], "_freeze_modul": [32, 478], "frozenmain": 32, "py_hashrandomizationflag": [32, 469], "hash_se": [32, 33, 469], "use_hash_se": [32, 33, 469], "pythonhashse": [32, 33, 423, 450, 471, 478], "secret": [32, 67, 130, 170, 231, 250, 279, 288, 289, 301, 314, 323, 337, 421, 450, 457, 478], "seed": [32, 33, 67, 86, 286, 289, 314, 337, 339, 348, 421, 450, 464, 470, 477, 478], "py_ignoreenvironmentflag": [32, 469, 475, 478], "use_environ": [32, 33, 34, 469, 477], "pythonpath": [32, 33, 34, 70, 85, 148, 348, 349, 357, 427, 445, 450, 454, 456, 472, 478], "pythonhom": [32, 33, 34, 349, 357, 450, 456, 474], "py_inspectflag": [32, 469], "script": [32, 33, 34, 65, 67, 71, 72, 74, 78, 85, 86, 88, 96, 99, 100, 101, 107, 109, 111, 117, 119, 149, 159, 165, 180, 184, 189, 206, 209, 218, 224, 226, 236, 240, 241, 246, 247, 250, 276, 288, 293, 304, 305, 307, 309, 311, 320, 323, 326, 330, 336, 346, 348, 349, 357, 364, 371, 373, 381, 383, 390, 394, 398, 402, 415, 416, 424, 427, 429, 430, 431, 445, 448, 450, 451, 453, 455, 457, 458, 459, 460, 461, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "enter": [32, 33, 67, 78, 83, 84, 85, 89, 91, 94, 96, 106, 132, 141, 148, 152, 153, 155, 160, 165, 173, 185, 221, 243, 254, 278, 288, 289, 293, 308, 321, 331, 336, 337, 340, 348, 354, 360, 364, 370, 379, 383, 395, 422, 423, 424, 436, 438, 447, 450, 459, 460, 462, 470, 471, 472, 475, 476, 478], "stdin": [32, 33, 58, 65, 67, 75, 84, 86, 93, 94, 98, 117, 119, 123, 127, 130, 134, 141, 148, 152, 153, 159, 160, 172, 179, 182, 186, 189, 204, 210, 211, 214, 225, 230, 243, 244, 254, 255, 258, 279, 289, 292, 293, 305, 311, 317, 324, 327, 340, 343, 344, 348, 353, 356, 357, 373, 382, 390, 402, 415, 422, 423, 425, 427, 431, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 450, 451, 458, 459, 460, 461, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 477, 478], "pythoninspect": [32, 33, 450, 460], "py_interactiveflag": [32, 469], "py_isolatedflag": [32, 469], "neither": [32, 75, 89, 94, 97, 103, 111, 130, 140, 141, 154, 177, 182, 187, 189, 192, 201, 205, 221, 238, 258, 263, 266, 267, 271, 279, 288, 289, 295, 315, 334, 336, 337, 340, 348, 371, 375, 381, 383, 398, 420, 421, 423, 425, 450, 469, 472, 474, 475, 478], "directori": [32, 33, 50, 67, 72, 74, 75, 78, 83, 84, 85, 88, 89, 92, 94, 96, 100, 106, 109, 111, 115, 134, 148, 149, 159, 163, 165, 180, 185, 186, 189, 196, 206, 208, 209, 215, 216, 219, 221, 226, 241, 243, 244, 246, 247, 248, 249, 250, 267, 275, 279, 288, 292, 293, 298, 306, 307, 308, 309, 316, 320, 323, 327, 330, 336, 337, 338, 344, 346, 348, 349, 350, 352, 353, 355, 357, 363, 370, 375, 379, 383, 390, 394, 397, 398, 402, 416, 417, 418, 420, 427, 438, 446, 450, 451, 456, 457, 458, 460, 461, 462, 464, 465, 466, 469, 471, 472, 474, 475, 476, 477, 478, 479], "site": [32, 33, 67, 84, 94, 106, 107, 163, 206, 221, 239, 240, 246, 247, 250, 255, 263, 289, 298, 311, 331, 348, 349, 350, 353, 390, 394, 395, 409, 425, 427, 433, 445, 448, 450, 451, 456, 457, 462, 464, 465, 471, 472, 473, 478, 479], "py_legacywindowsfsencodingflag": [32, 469, 478], "legacy_windows_fs_encod": [32, 33, 58, 469], "surrogatepass": [32, 33, 154, 450, 472, 474, 478], "pythonlegacywindowsfsencod": [32, 33, 348, 450, 474], "529": [32, 63, 67, 289, 348, 450, 456, 476, 478], "py_legacywindowsstdioflag": [32, 469], "legacy_windows_stdio": [32, 33, 469], "fileio": [32, 33, 67, 115, 117, 221, 254, 464, 472, 478], "_windowsconsoleio": [32, 33], "pythonlegacywindowsstdio": [32, 33, 348, 450, 474], "528": [32, 33, 67, 456, 478], "py_nositeflag": [32, 469], "site_import": [32, 33, 469], "entail": [32, 33, 450], "py_nousersitedirectori": [32, 469], "user_site_directori": [32, 33, 469], "pythonnousersit": [32, 33, 330, 450, 463], "py_optimizeflag": [32, 469], "optimization_level": [32, 33, 469], "pythonoptim": [32, 33, 450], "py_quietflag": [32, 469], "quiet": [32, 33, 88, 159, 182, 186, 271, 288, 307, 348, 357, 392, 456, 461, 464, 467, 469, 470, 473, 478], "copyright": [32, 33, 67, 68, 72, 85, 120, 164, 231, 243, 311, 348, 408, 421, 443, 445, 450, 470, 476], "py_unbufferedstdioflag": [32, 469], "buffered_stdio": [32, 33, 469], "stdout": [32, 33, 58, 63, 65, 67, 72, 86, 89, 99, 100, 117, 119, 123, 127, 130, 134, 136, 148, 152, 160, 165, 172, 173, 186, 187, 189, 206, 212, 219, 221, 238, 243, 244, 254, 258, 264, 265, 279, 288, 289, 293, 296, 303, 304, 305, 311, 317, 329, 340, 344, 348, 353, 354, 357, 373, 375, 376, 383, 384, 394, 395, 402, 408, 412, 417, 423, 441, 445, 446, 450, 451, 456, 457, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 478], "unbuff": [32, 254, 344, 348, 450, 478], "pythonunbuff": [32, 33, 348, 450, 478], "py_verboseflag": [32, 469], "verbos": [32, 33, 62, 67, 88, 89, 97, 99, 100, 117, 156, 173, 183, 184, 189, 206, 222, 224, 260, 264, 288, 297, 315, 327, 328, 341, 348, 352, 353, 357, 358, 362, 377, 383, 394, 414, 423, 456, 459, 460, 461, 463, 464, 468, 469, 470, 472, 474, 475, 478], "show": [32, 33, 67, 71, 72, 75, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 106, 107, 115, 117, 119, 123, 136, 148, 149, 152, 154, 156, 165, 168, 172, 175, 182, 184, 185, 186, 189, 198, 207, 209, 212, 221, 222, 230, 231, 238, 239, 243, 244, 246, 257, 258, 263, 274, 279, 288, 289, 295, 303, 304, 314, 317, 328, 330, 333, 336, 337, 339, 340, 341, 353, 362, 363, 364, 365, 370, 371, 373, 375, 376, 379, 383, 384, 385, 394, 395, 397, 414, 415, 416, 426, 430, 437, 446, 447, 448, 450, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 472, 473, 474, 477, 478], "cleanup": [32, 33, 34, 58, 67, 89, 94, 100, 112, 132, 137, 160, 165, 210, 280, 289, 334, 344, 346, 348, 355, 357, 383, 385, 397, 400, 406, 422, 423, 424, 425, 450, 457, 459, 462, 464, 465, 469, 470, 471, 476, 478], "pythonverbos": [32, 33, 450], "fundament": [32, 62, 67, 115, 190, 255, 279, 288, 295, 303, 304, 336, 380, 397, 427, 456, 457, 463, 474, 478], "builtin": [32, 33, 34, 52, 62, 67, 84, 86, 89, 92, 119, 139, 154, 156, 183, 187, 189, 221, 226, 231, 240, 243, 246, 250, 251, 255, 257, 264, 295, 304, 311, 319, 330, 340, 348, 355, 380, 381, 385, 422, 423, 425, 427, 430, 432, 435, 445, 451, 463, 466, 467, 469, 470, 472, 473, 474, 475, 477, 479], "__main__": [32, 33, 34, 65, 67, 78, 83, 84, 86, 92, 99, 100, 101, 123, 141, 152, 162, 184, 186, 189, 196, 209, 224, 246, 250, 275, 279, 288, 293, 295, 304, 309, 311, 319, 320, 329, 334, 336, 338, 340, 357, 362, 377, 379, 381, 383, 384, 385, 394, 395, 397, 402, 416, 424, 428, 432, 435, 445, 450, 458, 461, 462, 463, 464, 466, 470, 471, 472, 473, 476, 477, 478], "argv": [32, 33, 34, 65, 67, 71, 72, 100, 111, 115, 123, 133, 139, 184, 186, 189, 214, 224, 243, 288, 289, 293, 305, 311, 320, 334, 338, 348, 351, 364, 383, 402, 438, 443, 445, 446, 450, 460, 464, 465, 470, 475, 476, 478], "pysys_setargvex": [32, 56, 464, 468, 470, 478], "py_finalizeex": [32, 34, 56, 58, 71, 98, 474, 478], "py_initializefromconfig": [32, 33, 41, 349, 469, 476, 478], "consol": [32, 33, 65, 67, 84, 91, 99, 100, 111, 172, 174, 176, 189, 197, 243, 264, 289, 293, 309, 316, 344, 348, 399, 450, 456, 459, 463, 470, 471, 475, 478], "o_text": [32, 67, 115, 278, 289], "o_binari": [32, 33, 67, 115, 278, 289], "affect": [32, 37, 44, 58, 59, 63, 67, 72, 83, 92, 93, 94, 100, 103, 136, 141, 163, 173, 179, 182, 187, 189, 198, 201, 221, 226, 239, 243, 246, 254, 262, 265, 267, 274, 289, 303, 315, 316, 317, 318, 333, 336, 337, 341, 344, 349, 351, 353, 357, 361, 362, 370, 371, 379, 381, 383, 384, 385, 389, 395, 397, 400, 402, 405, 422, 423, 425, 427, 431, 439, 450, 451, 456, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "py_initializeex": [32, 56, 98, 478], "initsig": 32, "registr": [32, 58, 157, 165, 289, 295, 325, 390, 400, 415, 463, 478], "undo": [32, 67, 152, 173, 218, 243, 263, 379, 384, 463, 478], "py_newinterpret": [32, 56, 98, 478], "ideal": [32, 62, 94, 100, 102, 106, 132, 147, 179, 348, 395, 402, 461, 470], "flush": [32, 67, 99, 100, 104, 112, 115, 116, 123, 127, 130, 133, 146, 154, 156, 173, 210, 221, 241, 254, 263, 265, 266, 267, 274, 279, 281, 289, 310, 318, 329, 333, 344, 348, 357, 394, 400, 402, 408, 419, 471, 472, 474, 476, 478], "restart": [32, 100, 173, 208, 243, 264, 293, 329, 356, 361, 463, 464, 473, 475, 476, 478], "itself": [32, 41, 44, 48, 50, 60, 62, 63, 66, 67, 71, 72, 74, 75, 84, 87, 89, 92, 93, 94, 98, 99, 100, 103, 107, 111, 112, 116, 117, 119, 123, 130, 136, 141, 147, 148, 151, 152, 159, 172, 173, 174, 177, 179, 184, 187, 189, 191, 193, 199, 201, 209, 211, 221, 222, 239, 241, 243, 244, 246, 251, 253, 255, 257, 258, 263, 264, 265, 267, 277, 278, 279, 280, 284, 288, 289, 292, 295, 304, 310, 315, 327, 328, 333, 336, 337, 340, 341, 342, 344, 348, 350, 353, 354, 356, 357, 360, 371, 376, 379, 380, 381, 383, 384, 389, 390, 392, 394, 395, 409, 410, 411, 414, 423, 424, 425, 427, 429, 430, 431, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 475, 477, 478], "loadabl": [32, 62, 98, 246, 303, 336, 451, 456, 478], "dll": [32, 56, 67, 76, 83, 172, 265, 289, 348, 364, 456, 462, 463, 467, 472, 476, 478], "unload": [32, 67, 98, 183, 357, 397, 478], "hunt": [32, 288, 478], "develop": [32, 33, 56, 67, 74, 76, 77, 84, 86, 89, 91, 96, 98, 99, 100, 102, 103, 106, 122, 123, 148, 157, 165, 172, 182, 183, 209, 210, 231, 246, 250, 260, 263, 264, 265, 288, 289, 303, 309, 336, 340, 344, 348, 357, 363, 364, 370, 379, 381, 395, 414, 417, 420, 450, 451, 452, 456, 458, 459, 460, 461, 462, 464, 465, 470, 471, 472, 473, 476, 477, 478, 479], "random": [32, 33, 34, 67, 72, 83, 84, 86, 91, 94, 100, 106, 115, 123, 131, 146, 154, 169, 170, 172, 189, 214, 215, 222, 243, 250, 253, 254, 257, 279, 286, 288, 304, 315, 322, 323, 324, 339, 353, 357, 379, 383, 393, 405, 419, 421, 423, 446, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 476, 478], "amount": [32, 44, 72, 75, 83, 84, 89, 94, 123, 130, 136, 173, 182, 231, 254, 255, 266, 279, 284, 288, 289, 291, 292, 295, 301, 303, 318, 326, 328, 329, 333, 338, 340, 359, 360, 361, 364, 367, 371, 379, 390, 404, 406, 458, 461, 463, 470, 472, 473, 474, 475, 477, 478], "tie": [32, 182, 304, 337, 422, 476, 478], "_pysys_clearaudithook": [32, 139], "py_fin": [32, 33, 56, 464, 478], "stdio_encod": [32, 33, 348], "stdio_error": [32, 33, 348], "pythonioencod": [32, 33, 289, 348, 450, 463, 472, 478], "backslashreplac": [32, 33, 106, 154, 210, 221, 254, 263, 289, 340, 348, 450, 460, 473, 475, 478], "program_nam": [32, 33], "durat": [32, 34, 100, 132, 136, 179, 267, 279, 304, 333, 334, 337, 340, 348, 356, 357, 360, 361, 383, 401, 464, 469, 470, 471, 473, 476, 478], "prefix": [32, 33, 34, 46, 56, 57, 60, 62, 63, 67, 72, 89, 97, 102, 103, 115, 152, 155, 159, 163, 169, 171, 172, 173, 182, 186, 187, 199, 209, 224, 226, 231, 239, 241, 243, 252, 264, 265, 269, 276, 289, 293, 298, 308, 310, 311, 315, 328, 330, 340, 341, 343, 348, 349, 350, 355, 357, 359, 364, 370, 371, 375, 383, 384, 394, 395, 405, 408, 410, 414, 418, 422, 426, 430, 431, 435, 444, 445, 450, 451, 455, 456, 460, 463, 464, 469, 470, 471, 473, 474, 476, 478], "complic": [32, 62, 72, 87, 89, 91, 93, 94, 98, 102, 103, 106, 107, 138, 154, 165, 172, 177, 186, 189, 211, 222, 239, 288, 295, 315, 361, 423, 425, 457, 459, 460, 461, 462, 463, 464, 466, 470, 478], "usr": [32, 34, 78, 83, 88, 94, 96, 100, 106, 148, 163, 172, 196, 226, 227, 268, 288, 290, 292, 299, 315, 322, 330, 340, 344, 348, 350, 355, 361, 364, 377, 390, 416, 433, 443, 448, 450, 451, 454, 455, 456, 458, 460, 462, 467, 470, 472, 473, 478], "bin": [32, 34, 67, 71, 78, 83, 94, 100, 106, 107, 148, 160, 163, 196, 221, 241, 247, 250, 288, 289, 292, 297, 340, 341, 350, 390, 391, 394, 416, 423, 433, 443, 445, 448, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 478], "makefil": [32, 67, 71, 72, 78, 227, 231, 254, 292, 333, 337, 350, 423, 453, 457, 458, 463, 464, 469, 471, 472, 473, 474, 478], "exec": [32, 67, 72, 83, 109, 119, 139, 141, 153, 155, 189, 208, 209, 221, 223, 246, 250, 289, 293, 304, 340, 344, 347, 348, 357, 364, 373, 375, 376, 377, 423, 424, 431, 432, 433, 435, 445, 451, 457, 458, 459, 461, 462, 465, 467, 472, 473, 478], "exec_prefix": [32, 33, 34, 67, 279, 311, 330, 348, 349, 375, 394, 445, 450, 451, 455, 470], "background": [32, 67, 76, 91, 96, 100, 123, 136, 163, 165, 173, 242, 243, 265, 279, 289, 336, 344, 346, 357, 360, 364, 370, 371, 379, 422, 423, 447, 461, 472, 478], "plat": [32, 456, 474, 478], "subtre": [32, 408, 457], "speak": [32, 33, 67, 72, 84, 179, 340, 343, 351], "hardwar": [32, 106, 138, 173, 182, 289, 291, 318, 333, 344, 361, 400, 464, 473, 478], "softwar": [32, 67, 68, 76, 79, 84, 94, 99, 100, 106, 148, 154, 173, 183, 188, 189, 190, 206, 208, 224, 231, 241, 242, 243, 262, 263, 284, 289, 303, 337, 361, 379, 394, 400, 402, 414, 421, 454, 456, 457, 458, 460, 461, 463, 464, 478, 479], "sparc": [32, 291], "machin": [32, 50, 63, 67, 72, 83, 86, 96, 99, 100, 115, 130, 154, 173, 174, 179, 196, 208, 221, 226, 239, 251, 254, 256, 264, 265, 266, 268, 279, 280, 284, 289, 292, 299, 304, 309, 329, 331, 333, 336, 337, 340, 343, 360, 362, 404, 415, 416, 423, 429, 451, 456, 457, 458, 459, 462, 463, 464, 466, 469, 470, 471, 475, 476, 478], "solari": [32, 67, 242, 289, 299, 302, 324, 348, 350, 361, 457, 464, 470, 471, 473, 475, 478], "consid": [32, 33, 38, 41, 48, 54, 55, 56, 62, 63, 67, 71, 72, 74, 75, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 100, 101, 103, 109, 111, 117, 123, 125, 141, 148, 151, 159, 163, 171, 172, 173, 177, 179, 180, 182, 186, 187, 189, 192, 200, 201, 204, 221, 222, 224, 226, 231, 239, 246, 248, 249, 251, 253, 254, 255, 257, 258, 262, 263, 264, 265, 266, 267, 271, 279, 280, 284, 288, 292, 293, 295, 304, 310, 315, 316, 324, 327, 329, 337, 340, 341, 343, 348, 350, 353, 357, 359, 360, 361, 364, 380, 381, 383, 384, 389, 390, 397, 402, 405, 406, 407, 415, 416, 422, 423, 424, 425, 427, 431, 451, 456, 457, 458, 459, 460, 461, 462, 464, 465, 469, 470, 472, 473, 474, 475, 476, 477, 478], "intel": [32, 85, 138, 291, 304, 343, 451, 454, 462, 464, 473, 474, 476, 477, 478], "linux": [32, 33, 50, 67, 70, 71, 79, 82, 83, 91, 92, 95, 96, 112, 115, 129, 172, 173, 182, 208, 210, 211, 226, 243, 253, 254, 265, 274, 279, 291, 302, 305, 318, 322, 324, 328, 329, 333, 338, 344, 348, 350, 353, 355, 357, 360, 361, 364, 390, 443, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "major": [32, 67, 76, 89, 92, 93, 102, 106, 107, 115, 119, 163, 173, 179, 183, 190, 199, 202, 204, 226, 231, 239, 281, 288, 289, 299, 301, 309, 340, 348, 350, 389, 456, 457, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 476, 477, 478], "revis": [32, 67, 106, 107, 343, 403, 421, 457, 462, 463, 466, 474, 475, 478], "stori": [32, 72, 144, 441], "strategi": [32, 41, 62, 72, 75, 78, 117, 132, 154, 265, 357, 364, 383, 398, 419, 420, 427, 436, 460, 465, 470, 475, 478], "meaningless": [32, 106, 458, 459, 472, 478], "mount": [32, 289, 290, 292, 328, 464, 469, 472, 475, 478], "automount": 32, "comput": [32, 33, 34, 48, 62, 63, 67, 71, 74, 75, 84, 86, 89, 91, 92, 94, 96, 97, 99, 100, 103, 106, 130, 136, 138, 143, 147, 151, 156, 157, 174, 177, 179, 181, 182, 187, 189, 212, 221, 222, 231, 250, 251, 255, 257, 263, 265, 271, 279, 289, 290, 292, 303, 304, 307, 314, 330, 333, 334, 337, 340, 348, 358, 360, 364, 379, 383, 390, 400, 421, 422, 423, 425, 430, 431, 435, 446, 450, 451, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 472, 475, 476, 478], "delimit": [32, 58, 67, 84, 86, 89, 103, 163, 171, 189, 197, 213, 217, 234, 243, 244, 267, 284, 288, 295, 315, 316, 340, 341, 344, 364, 373, 389, 420, 428, 447, 456, 460, 470, 478], "maco": [32, 33, 56, 67, 79, 80, 82, 83, 84, 96, 106, 108, 112, 115, 130, 172, 211, 253, 265, 274, 279, 289, 300, 304, 305, 316, 324, 328, 330, 333, 336, 337, 338, 348, 350, 357, 360, 361, 363, 364, 371, 390, 398, 421, 434, 448, 450, 453, 454, 457, 458, 459, 460, 462, 463, 464, 467, 469, 474, 475, 476], "startup": [32, 33, 67, 111, 184, 210, 246, 262, 264, 289, 330, 340, 348, 358, 363, 377, 427, 450, 462, 463, 471, 472, 473, 475, 477, 478], "module_search_path": [32, 33, 58, 468, 478], "module_search_paths_set": [32, 33, 58, 468, 478], "knowledg": [32, 91, 179, 190, 262, 326, 463], "compon": [32, 41, 44, 63, 67, 72, 84, 92, 99, 100, 103, 106, 107, 136, 154, 156, 173, 179, 182, 190, 204, 206, 226, 239, 241, 246, 247, 250, 251, 252, 277, 289, 292, 315, 327, 328, 340, 341, 348, 350, 351, 353, 361, 362, 364, 371, 379, 380, 381, 390, 400, 405, 410, 415, 417, 420, 423, 427, 430, 450, 456, 460, 461, 464, 465, 469, 470, 472, 473, 474, 475, 478], "wchar_": 32, "0a5": 32, "py3k": [32, 86, 102, 348, 350, 465], "63103m": 32, "2008": [32, 154, 179, 219, 328, 343, 408, 421, 463, 464, 465, 470, 478], "00": [32, 88, 101, 104, 106, 179, 182, 217, 231, 263, 315, 337, 361, 379, 420, 446, 447, 450, 462, 463, 464, 470, 474, 477, 478], "53": [32, 77, 100, 101, 136, 179, 182, 271, 314, 339, 340, 361, 385, 439, 462, 478], "55": [32, 92, 94, 99, 100, 101, 136, 182, 222, 280, 314, 315, 379, 436, 437, 439, 444, 445, 450, 474], "gcc": [32, 34, 62, 172, 299, 348, 443, 450, 451, 463, 464, 466, 467, 468, 472, 474, 478], "period": [32, 56, 84, 89, 93, 99, 148, 173, 179, 182, 216, 222, 263, 265, 279, 290, 298, 319, 333, 334, 337, 339, 359, 371, 415, 425, 430, 456, 457, 460, 461, 462, 463, 464, 469, 470, 478], "offici": [32, 154, 191, 205, 272, 291, 337, 364, 383, 406, 414, 423, 456, 457, 458, 459, 462, 464, 470, 471, 473, 475, 477, 478], "lower": [32, 63, 67, 71, 83, 84, 86, 91, 96, 100, 102, 103, 105, 119, 123, 130, 136, 137, 143, 152, 154, 156, 159, 163, 173, 174, 176, 182, 191, 192, 196, 198, 199, 201, 207, 221, 222, 232, 241, 257, 267, 279, 284, 289, 304, 315, 318, 321, 333, 336, 337, 340, 341, 348, 360, 361, 362, 370, 372, 379, 381, 389, 390, 395, 423, 425, 431, 458, 460, 461, 462, 463, 464, 466, 470, 472, 477, 478], "suno": [32, 299, 353, 478], "sunos5": [32, 348], "darwin": [32, 299, 348, 361, 457, 463, 473, 478], "1991": [32, 68, 79, 336, 421], "1995": [32, 68, 205, 421, 457, 478], "sticht": [32, 68, 421], "mathematisch": [32, 68, 421], "centrum": [32, 68, 421], "amsterdam": [32, 361, 421], "67": [32, 101, 217, 221, 333, 339, 377, 379, 441, 463, 478], "aug": [32, 94, 179, 418, 459, 460], "1997": [32, 144, 421, 464, 470], "22": [32, 76, 100, 103, 106, 156, 169, 172, 179, 187, 232, 243, 255, 257, 263, 280, 314, 333, 337, 341, 379, 418, 421, 439, 460, 469, 470, 476, 477, 478], "34": [32, 100, 136, 179, 182, 217, 222, 333, 337, 339, 425, 436, 444, 445, 470, 478], "argc": [32, 33, 65, 71, 72, 187, 478], "updatepath": [32, 464], "parse_argv": [32, 33, 34, 478], "safe_path": [32, 33, 348, 468], "host": [32, 67, 83, 100, 104, 123, 133, 139, 154, 173, 174, 205, 208, 213, 219, 221, 238, 239, 241, 243, 244, 252, 253, 265, 267, 279, 282, 283, 284, 289, 290, 292, 301, 309, 315, 331, 333, 334, 337, 340, 342, 343, 354, 357, 381, 384, 389, 390, 393, 402, 414, 451, 456, 457, 460, 462, 463, 464, 470, 471, 472, 473, 474, 475, 478], "condit": [32, 58, 62, 67, 72, 74, 77, 84, 86, 93, 94, 107, 111, 119, 121, 130, 134, 136, 137, 141, 160, 177, 182, 186, 187, 195, 209, 222, 224, 236, 244, 246, 247, 253, 254, 263, 264, 267, 268, 277, 279, 293, 305, 310, 315, 323, 324, 333, 337, 346, 348, 355, 357, 381, 383, 395, 397, 407, 409, 411, 414, 421, 422, 423, 424, 428, 436, 440, 447, 450, 457, 458, 459, 461, 463, 464, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479], "py_fatalerror": [32, 34, 41, 56, 58, 63, 477, 478], "algorithm": [32, 41, 67, 83, 84, 86, 103, 106, 116, 123, 130, 138, 143, 146, 148, 154, 169, 178, 179, 182, 186, 189, 198, 204, 218, 221, 226, 231, 244, 250, 254, 255, 262, 265, 271, 276, 277, 304, 323, 333, 337, 340, 348, 359, 362, 385, 390, 402, 417, 418, 425, 451, 457, 459, 460, 462, 464, 466, 470, 471, 474, 476, 478], "prepend": [32, 33, 67, 89, 92, 100, 154, 159, 174, 198, 222, 257, 265, 267, 284, 288, 297, 308, 323, 327, 328, 346, 348, 351, 359, 394, 408, 416, 450, 456, 469, 478], "orig_argv": [32, 33, 67, 311, 348, 467, 478], "themselv": [32, 62, 72, 74, 84, 89, 97, 99, 103, 138, 148, 151, 154, 163, 171, 172, 190, 204, 207, 226, 257, 258, 271, 279, 293, 295, 315, 328, 336, 340, 357, 359, 381, 383, 384, 385, 406, 414, 423, 425, 427, 459, 462, 463, 464, 469, 470, 472, 473, 475, 478], "cve": [32, 340, 464, 468, 478], "5983": [32, 464], "achiev": [32, 44, 62, 71, 84, 89, 94, 98, 100, 117, 154, 163, 172, 222, 241, 257, 263, 279, 316, 337, 348, 357, 360, 362, 364, 369, 384, 385, 390, 394, 396, 408, 423, 430, 431, 457, 459, 460, 462, 472, 473, 478], "manual": [32, 44, 60, 67, 71, 72, 76, 78, 83, 84, 91, 92, 94, 98, 100, 102, 106, 109, 117, 123, 129, 130, 136, 160, 172, 173, 181, 189, 193, 202, 207, 211, 221, 263, 267, 279, 280, 288, 289, 298, 300, 309, 316, 324, 333, 336, 340, 351, 353, 356, 361, 363, 370, 381, 384, 405, 408, 416, 419, 423, 429, 446, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 469, 471, 472, 473, 475, 476, 478], "pop": [32, 34, 67, 79, 83, 84, 89, 100, 118, 156, 157, 178, 182, 187, 190, 199, 232, 257, 267, 281, 289, 301, 327, 340, 370, 371, 379, 383, 394, 423, 430, 437, 447, 459, 460, 461, 462, 463, 470, 472, 473, 478], "pysys_setargv": [32, 56, 464, 468, 478], "pyrun_simplestr": [32, 33, 65, 71, 78, 85], "home": [32, 33, 67, 84, 85, 91, 100, 103, 148, 152, 163, 173, 210, 215, 218, 230, 243, 247, 267, 268, 289, 290, 292, 293, 302, 306, 310, 316, 327, 330, 344, 349, 350, 357, 364, 370, 379, 394, 429, 433, 448, 451, 456, 463, 470, 471, 473, 476, 478], "simplest": [32, 62, 71, 72, 75, 89, 94, 97, 98, 99, 103, 107, 117, 154, 165, 171, 182, 189, 196, 206, 263, 295, 315, 337, 360, 381, 383, 384, 423, 425, 450, 457, 459, 460], "simultan": [32, 62, 100, 102, 134, 135, 146, 182, 243, 254, 257, 267, 277, 326, 334, 336, 357, 360, 370, 431, 456, 463, 473, 476, 478], "twice": [32, 33, 76, 87, 94, 100, 102, 106, 143, 159, 163, 179, 184, 210, 251, 271, 315, 336, 373, 395, 417, 450, 457, 459, 460, 461, 463, 464, 474, 476, 478], "concurr": [32, 67, 83, 86, 111, 120, 121, 123, 126, 127, 130, 131, 134, 166, 222, 250, 267, 279, 292, 295, 307, 316, 326, 336, 337, 344, 348, 360, 408, 438, 464, 468, 476, 478, 479], "setswitchinterv": [32, 67, 83, 183, 311, 348, 357, 445, 470, 477, 478], "potenti": [32, 33, 34, 62, 84, 94, 98, 100, 102, 123, 163, 169, 179, 221, 244, 246, 249, 251, 257, 263, 264, 265, 279, 280, 289, 295, 301, 323, 334, 337, 340, 348, 359, 380, 381, 383, 389, 404, 416, 423, 427, 450, 456, 458, 459, 463, 469, 470, 471, 472, 473, 475, 478], "meantim": [32, 119, 478], "bookkeep": [32, 67, 173, 286, 469], "pythreadst": [32, 56, 467, 468, 469, 472, 477, 478], "pythreadstate_get": [32, 56, 478], "reacquir": [32, 172, 360], "py_end_allow_thread": [32, 56, 72, 476, 478], "hidden": [32, 67, 84, 115, 175, 187, 243, 293, 304, 334, 371, 379, 469, 471, 475, 476, 477, 478], "close": [32, 50, 62, 65, 67, 75, 77, 78, 84, 89, 94, 98, 99, 100, 104, 106, 114, 115, 116, 117, 123, 127, 129, 130, 132, 133, 134, 136, 148, 150, 151, 152, 153, 154, 157, 160, 163, 165, 166, 173, 180, 184, 186, 187, 190, 195, 203, 204, 209, 210, 214, 215, 219, 221, 230, 231, 236, 238, 239, 243, 244, 252, 254, 263, 265, 266, 267, 269, 271, 273, 274, 277, 279, 280, 281, 284, 288, 289, 291, 292, 294, 297, 304, 305, 310, 311, 316, 324, 325, 326, 327, 329, 331, 333, 334, 336, 337, 340, 344, 345, 346, 348, 353, 354, 355, 357, 360, 361, 364, 370, 371, 373, 379, 381, 383, 384, 385, 390, 394, 396, 399, 400, 402, 408, 411, 412, 414, 415, 416, 417, 423, 425, 426, 430, 438, 441, 447, 450, 457, 461, 462, 463, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "expand": [32, 57, 62, 67, 74, 93, 103, 106, 119, 163, 179, 182, 189, 226, 243, 251, 255, 257, 264, 279, 288, 292, 310, 315, 340, 350, 358, 359, 361, 364, 371, 384, 389, 400, 404, 405, 407, 408, 410, 415, 425, 456, 459, 460, 463, 470, 471, 472, 473, 474, 475, 476, 477, 478], "_save": 32, "pyeval_savethread": [32, 56, 470], "pyeval_restorethread": [32, 56, 470, 476, 478], "compress": [32, 67, 89, 94, 97, 100, 114, 116, 130, 154, 163, 196, 214, 220, 230, 231, 250, 252, 255, 257, 272, 277, 291, 295, 328, 332, 337, 338, 345, 353, 396, 404, 416, 417, 419, 446, 459, 460, 462, 464, 466, 470, 471, 472, 473, 474, 475, 476, 478], "cryptograph": [32, 231, 289, 337, 408, 471, 474], "zlib": [32, 67, 83, 89, 103, 116, 154, 230, 231, 250, 328, 357, 417, 446, 459, 460, 462, 467, 468, 477, 478], "hashlib": [32, 67, 83, 169, 170, 233, 250, 323, 336, 421, 451, 463, 464, 465, 469, 478], "dedic": [32, 67, 100, 163, 189, 231, 337, 340, 357, 381, 478], "aforement": [32, 471], "pygilstate_ensur": [32, 56, 476, 478], "pygilstate_releas": [32, 56], "idiom": [32, 72, 84, 102, 109, 111, 117, 189, 221, 279, 327, 337, 348, 381, 397, 460, 465, 470, 471, 477, 478], "pygilstate_st": [32, 56], "gstate": 32, "action": [32, 41, 54, 67, 72, 74, 75, 88, 91, 103, 112, 115, 119, 141, 152, 156, 165, 171, 173, 186, 196, 211, 224, 238, 244, 277, 279, 289, 293, 297, 304, 305, 321, 324, 329, 334, 336, 340, 346, 348, 353, 354, 355, 356, 360, 371, 379, 383, 384, 390, 394, 395, 402, 421, 423, 436, 450, 457, 458, 460, 461, 462, 463, 464, 466, 470, 472, 477, 478], "callsomefunct": 32, "beyond": [32, 67, 73, 91, 97, 99, 103, 115, 179, 182, 193, 199, 251, 258, 264, 267, 278, 289, 315, 333, 336, 337, 340, 343, 381, 400, 421, 422, 429, 458, 471, 478], "pygilstate_": 32, "mix": [32, 41, 67, 88, 100, 102, 113, 163, 179, 182, 200, 201, 202, 203, 207, 214, 221, 224, 255, 271, 279, 291, 315, 334, 337, 340, 350, 357, 381, 389, 422, 423, 430, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 478], "unsupport": [32, 33, 67, 88, 89, 107, 112, 117, 123, 163, 179, 189, 221, 226, 254, 279, 280, 291, 295, 300, 333, 337, 344, 360, 381, 384, 389, 390, 400, 417, 427, 438, 456, 457, 461, 463, 470, 474, 477, 478], "face": [32, 106, 123, 146, 243, 265, 298, 389, 420, 457, 463, 465, 471, 472, 473, 478], "impact": [32, 74, 163, 246, 289, 292, 303, 330, 336, 337, 343, 344, 357, 381, 469, 478], "solv": [32, 83, 84, 89, 94, 103, 111, 243, 279, 326, 343, 353, 381, 384, 385, 422, 459, 460, 462, 466, 470, 472, 476, 478], "afterward": [32, 71, 92, 172, 179, 182, 257, 289, 324, 336, 348, 354, 385, 416, 423, 459, 460], "pthread_atfork": 32, "accomplish": [32, 84, 102, 117, 173, 244, 326, 405, 422, 478], "deadlock": [32, 134, 162, 208, 210, 263, 279, 312, 334, 344, 348, 360, 423, 463, 470, 471, 478], "defunct": 32, "pyos_afterfork_child": [32, 56, 58, 289, 475, 476, 478], "go": [32, 41, 67, 72, 74, 75, 77, 78, 84, 88, 89, 91, 93, 94, 99, 100, 102, 103, 107, 112, 130, 136, 148, 173, 185, 189, 196, 243, 246, 280, 292, 309, 315, 336, 337, 344, 348, 354, 360, 361, 363, 375, 389, 390, 422, 441, 452, 457, 458, 459, 460, 462, 464, 465, 471, 478], "belong": [32, 41, 57, 62, 72, 84, 93, 98, 136, 189, 207, 239, 255, 268, 277, 288, 289, 310, 334, 336, 340, 371, 380, 395, 405, 411, 422, 423, 464, 471, 478], "pyinterpreterst": [32, 33, 56, 62, 467, 476, 477, 478], "natur": [32, 34, 84, 93, 103, 106, 111, 123, 151, 154, 172, 182, 189, 190, 226, 271, 274, 304, 326, 333, 371, 397, 398, 408, 425, 430, 457, 461, 463, 464, 465, 466, 470, 474, 475, 478], "cooper": [32, 86, 113, 136, 199, 221, 337, 348, 364, 421, 475, 478], "interp": [32, 364, 478], "didn": [32, 75, 78, 84, 89, 102, 103, 106, 111, 119, 165, 288, 315, 331, 385, 423, 457, 458, 459, 461, 462, 463, 464, 472, 475, 477, 478], "pyeval_threadsiniti": [32, 56, 461, 477, 478], "tstate": [32, 468, 469, 477, 478], "ensu": [32, 470], "_py_isfin": [32, 476], "unwant": [32, 84, 353, 475, 478], "needn": [32, 315, 343, 475], "pythreadstate_swap": [32, 56], "swap": [32, 71, 154, 156, 172, 187, 257, 279, 318, 333, 343, 357, 423, 431, 468, 475, 478], "readi": [32, 63, 67, 79, 91, 99, 100, 102, 129, 130, 133, 141, 147, 160, 166, 172, 182, 186, 238, 241, 254, 265, 279, 324, 325, 333, 337, 361, 376, 384, 411, 412, 457, 460, 470, 471, 473, 478], "uniqu": [32, 67, 72, 74, 89, 92, 94, 96, 99, 102, 106, 112, 117, 156, 172, 178, 179, 180, 186, 199, 201, 205, 207, 208, 221, 224, 232, 251, 255, 257, 258, 267, 277, 280, 289, 295, 301, 310, 336, 337, 340, 350, 360, 367, 371, 381, 383, 384, 389, 393, 421, 422, 423, 427, 435, 437, 451, 456, 461, 462, 464, 466, 469, 470, 475, 477, 478], "henc": [32, 72, 88, 100, 111, 119, 165, 168, 187, 189, 243, 249, 265, 279, 288, 292, 297, 304, 318, 327, 340, 343, 344, 360, 384, 395, 422, 423, 425, 461, 472, 475, 478], "gilstat": [32, 478], "everi": [32, 34, 41, 48, 56, 57, 67, 72, 74, 76, 84, 89, 92, 94, 98, 99, 100, 101, 103, 106, 107, 109, 119, 123, 129, 136, 137, 140, 143, 154, 163, 166, 172, 173, 179, 180, 182, 183, 186, 187, 189, 190, 192, 201, 210, 221, 226, 239, 241, 243, 247, 251, 255, 257, 258, 263, 265, 274, 279, 288, 289, 291, 298, 310, 315, 328, 329, 330, 333, 334, 336, 340, 341, 344, 347, 350, 351, 359, 360, 371, 379, 381, 383, 384, 390, 395, 402, 403, 405, 408, 414, 420, 422, 423, 427, 429, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 476, 478], "pygilstate_getthisthreadst": [32, 56, 478], "auto": [32, 67, 92, 107, 178, 179, 207, 243, 316, 327, 333, 337, 379, 384, 385, 451, 455, 457, 464, 467, 470, 474, 475, 478], "diagnost": [32, 41, 67, 74, 99, 381, 384, 402, 414, 416, 453, 470, 474], "pygilstate_check": 32, "sensit": [32, 163, 216, 244, 265, 272, 292, 348, 381, 383, 395, 450, 458, 460, 461, 462, 463, 469, 472, 478], "brace": [32, 89, 154, 277, 315, 340, 341, 393, 425, 430, 474, 475, 478], "discuss": [32, 56, 71, 72, 84, 94, 98, 100, 103, 106, 107, 177, 186, 199, 204, 207, 226, 254, 263, 264, 271, 284, 289, 315, 326, 329, 337, 371, 381, 385, 390, 405, 414, 421, 422, 424, 425, 427, 430, 457, 458, 459, 462, 463, 464, 466, 472, 474, 477, 478], "py_block_thread": [32, 56], "py_unblock_thread": [32, 56], "pyinterpreterstate_new": [32, 56, 139, 478], "serial": [32, 40, 41, 67, 100, 163, 178, 190, 192, 193, 197, 199, 201, 202, 203, 204, 250, 258, 263, 265, 279, 280, 294, 300, 326, 329, 331, 336, 343, 348, 408, 441, 457, 463, 464, 466, 468, 470, 471, 472, 477, 478], "pyinterpreterstate_clear": [32, 56, 139], "pyinterpreterstate_delet": [32, 56], "pythreadstate_new": [32, 56, 478], "pythreadstate_clear": [32, 56, 478], "on_delet": [32, 478], "pythreadstate_delet": [32, 56, 478], "pythreadstate_deletecurr": [32, 477, 478], "uint64_t": 32, "pythreadstate_getid": [32, 56, 477, 478], "pythreadstate_getinterpret": [32, 56, 477, 478], "pythreadstate_entertrac": [32, 468, 478], "suspend": [32, 94, 136, 173, 251, 310, 329, 356, 360, 361, 422, 423, 425, 459, 460, 462, 473, 475, 478], "resum": [32, 94, 130, 136, 165, 173, 174, 187, 251, 279, 289, 292, 293, 295, 310, 356, 360, 402, 422, 423, 425, 459, 460, 461, 462, 468, 478], "pythreadstate_leavetrac": [32, 468, 478], "pyeval_settrac": [32, 459, 478], "pyeval_setprofil": [32, 459, 478], "pyinterpreterstate_get": [32, 56, 477, 478], "int64_t": 32, "pyinterpreterstate_getid": [32, 56, 475], "pyinterpreterstate_getdict": [32, 56, 478], "pymodule_getst": [32, 44, 56, 60, 89, 98, 477, 478], "_pyframeevalfunct": [32, 468, 478], "throwflag": [32, 65, 478], "throw": [32, 65, 67, 76, 87, 89, 93, 94, 99, 109, 125, 136, 157, 173, 187, 243, 289, 357, 381, 389, 423, 425, 426, 462, 469, 471, 474, 477, 478], "_pyinterpreterstate_getevalframefunc": [32, 478], "_pyinterpreterstate_setevalframefunc": [32, 478], "eval_fram": [32, 477], "pythreadstate_getdict": [32, 56, 478], "okay": [32, 93, 117, 163, 262, 381, 402], "pythreadstate_setasyncexc": [32, 56, 475, 478], "naiv": [32, 67, 103, 178, 199, 205, 231, 286, 336, 471, 478], "misus": [32, 44, 102, 336, 459, 478], "pyeval_acquirethread": [32, 56, 476, 478], "pyeval_releasethread": [32, 56], "pyeval_acquirelock": [32, 56, 470, 476, 478], "pyeval_releaselock": [32, 56, 470], "perhap": [32, 62, 71, 72, 75, 78, 83, 89, 93, 98, 99, 100, 103, 107, 117, 148, 151, 173, 177, 189, 214, 239, 254, 262, 264, 279, 289, 295, 330, 333, 389, 406, 423, 425, 426, 457, 458, 459, 461, 462, 463, 467, 469, 476, 478], "pyinterpreterstate_main": [32, 478], "pyinterpreterconfig": [32, 469, 478], "py_newinterpreterfromconfig": [32, 469, 478], "use_main_obmalloc": 32, "check_multi_interp_extens": [32, 469], "pyinterpreterconfig_own_gil": [32, 469, 478], "allow_fork": 32, "unrestrict": [32, 58], "subprocess": [32, 67, 100, 120, 127, 128, 129, 139, 160, 162, 165, 204, 206, 244, 250, 253, 279, 289, 297, 323, 327, 333, 334, 357, 363, 377, 379, 394, 395, 450, 455, 460, 463, 464, 467, 470, 476, 477, 478, 479], "allow_exec": 32, "execv": [32, 67, 115, 253, 288, 289, 302, 471, 478], "allow_thread": 32, "allow_daemon_thread": 32, "daemon": [32, 67, 99, 100, 160, 265, 279, 312, 331, 333, 334, 360, 361, 397, 460, 463, 467, 471, 475, 477, 478], "init": [32, 44, 62, 67, 72, 85, 139, 172, 199, 246, 272, 281, 289, 292, 304, 311, 358, 370, 381, 462, 463, 478], "489": [32, 44, 67, 70, 72, 246, 477, 478], "py_mod_multiple_interpret": [32, 44, 478], "pyinterpreterconfig_default_gil": [32, 478], "pyinterpreterconfig_shared_gil": [32, 478], "tstate_p": 32, "config": [32, 33, 67, 71, 78, 84, 99, 100, 115, 163, 243, 250, 262, 263, 265, 288, 328, 348, 350, 363, 364, 367, 384, 385, 402, 447, 451, 455, 460, 464, 467, 468, 469, 470, 472, 474, 475, 476, 478], "total": [32, 33, 34, 58, 67, 72, 77, 84, 88, 89, 94, 100, 114, 123, 130, 131, 136, 156, 178, 179, 182, 186, 187, 189, 192, 201, 221, 222, 226, 254, 255, 257, 268, 289, 304, 315, 328, 333, 336, 337, 340, 341, 353, 361, 362, 371, 377, 381, 383, 390, 396, 423, 425, 430, 439, 450, 464, 468, 469, 470, 471, 472, 473, 474, 476, 478], "unsuccess": [32, 37, 478], "likewis": [32, 54, 84, 93, 109, 117, 182, 186, 204, 205, 207, 263, 267, 334, 379, 410, 429, 430, 470, 471, 478], "briefli": [32, 76, 106, 182, 462, 478], "pymodule_fromdefandspec": [32, 44, 473], "squirrel": [32, 304], "across": [32, 41, 56, 60, 62, 67, 89, 96, 98, 102, 117, 160, 163, 165, 172, 179, 187, 189, 205, 250, 251, 256, 257, 262, 263, 264, 265, 279, 295, 296, 316, 324, 326, 340, 348, 360, 364, 371, 373, 379, 425, 430, 460, 461, 463, 464, 469, 470, 474, 475, 476, 478], "initmodul": 32, "essenti": [32, 72, 84, 92, 130, 163, 211, 221, 246, 264, 265, 271, 284, 288, 289, 292, 320, 326, 334, 340, 348, 383, 406, 417, 428, 457, 459, 464, 465, 471, 472, 477, 478], "unisol": 32, "py_endinterpret": [32, 56, 98, 478], "haven": [32, 103, 106, 136, 148, 182, 384, 463, 464, 469, 478], "benefit": [32, 84, 94, 100, 102, 111, 182, 263, 264, 280, 295, 337, 340, 348, 357, 371, 381, 397, 402, 456, 459, 460, 461, 464, 470, 471, 475, 476, 478], "truli": [32, 72, 83, 84, 98, 112, 136, 177, 267, 359, 390, 464, 465, 478], "advantag": [32, 50, 72, 74, 84, 89, 94, 99, 100, 182, 193, 246, 295, 304, 320, 327, 340, 362, 370, 383, 397, 406, 408, 410, 457, 460, 461, 466, 469, 470, 471, 472, 473, 476, 478], "cpu": [32, 83, 101, 104, 106, 119, 122, 123, 127, 136, 154, 160, 162, 231, 232, 258, 266, 289, 318, 333, 340, 353, 361, 362, 377, 404, 451, 454, 460, 467, 469, 471, 475, 476, 477, 478], "encourag": [32, 57, 72, 76, 87, 102, 209, 288, 324, 325, 327, 381, 400, 406, 410, 429, 451, 457, 458, 465, 476, 478], "approach": [32, 34, 67, 72, 73, 75, 78, 84, 87, 88, 89, 94, 99, 100, 106, 107, 112, 148, 154, 165, 182, 186, 189, 206, 221, 271, 279, 289, 329, 334, 336, 340, 344, 355, 360, 362, 364, 379, 381, 383, 385, 390, 408, 414, 423, 425, 456, 457, 458, 462, 463, 464, 466, 470, 471, 473, 474, 475, 478, 479], "554": [32, 156, 469, 478], "vigil": 32, "especi": [32, 62, 71, 72, 75, 83, 84, 97, 102, 106, 123, 163, 165, 179, 182, 189, 194, 201, 243, 254, 258, 264, 280, 284, 289, 293, 304, 307, 309, 310, 329, 337, 338, 344, 348, 357, 379, 397, 405, 422, 427, 429, 457, 459, 460, 463, 464, 465, 470, 471, 472, 473, 474, 476, 478], "safeti": [32, 67, 72, 87, 93, 115, 136, 196, 251, 279, 288, 320, 336, 464, 466, 470, 478], "spite": 32, "come": [32, 63, 70, 74, 83, 84, 89, 91, 92, 96, 99, 100, 102, 106, 107, 111, 147, 148, 154, 157, 165, 173, 177, 182, 189, 205, 222, 231, 240, 246, 288, 291, 295, 296, 315, 316, 330, 334, 336, 337, 340, 364, 371, 381, 390, 394, 405, 410, 422, 423, 427, 429, 430, 436, 456, 457, 458, 459, 460, 461, 463, 472, 475, 476, 477, 478], "consequ": [32, 41, 62, 72, 84, 157, 163, 187, 251, 279, 289, 292, 329, 333, 340, 348, 423, 425, 429, 462, 464, 465, 469, 470, 471, 472, 473, 475, 478], "race": [32, 86, 137, 182, 222, 246, 289, 323, 333, 355, 397, 469, 470, 471, 477, 478], "hard": [32, 41, 71, 72, 75, 89, 91, 92, 94, 98, 100, 102, 103, 159, 163, 171, 172, 173, 179, 186, 189, 198, 221, 263, 264, 288, 289, 292, 293, 304, 315, 318, 336, 337, 344, 353, 357, 370, 381, 385, 456, 457, 470, 472, 475, 476, 478], "asid": [32, 179, 221, 243, 304, 353, 385, 423, 425, 470, 475, 476], "challeng": [32, 279, 331, 395, 470, 475, 478], "communic": [32, 67, 100, 123, 130, 134, 160, 189, 208, 238, 241, 243, 250, 253, 265, 279, 280, 289, 295, 301, 305, 329, 333, 334, 337, 343, 344, 360, 371, 381, 402, 414, 421, 457, 461, 462, 463, 473, 475, 476, 478], "break": [32, 62, 63, 67, 74, 75, 77, 83, 89, 91, 93, 94, 100, 102, 103, 119, 125, 129, 133, 136, 141, 148, 154, 165, 166, 172, 173, 186, 189, 196, 198, 204, 243, 246, 251, 257, 260, 267, 279, 288, 293, 295, 303, 310, 315, 317, 322, 329, 331, 333, 337, 340, 341, 344, 348, 354, 356, 357, 359, 360, 379, 383, 389, 394, 395, 402, 406, 422, 423, 424, 425, 426, 428, 430, 435, 438, 440, 457, 458, 459, 460, 462, 463, 464, 466, 470, 471, 472, 473, 475, 476, 478], "stdlib": [32, 33, 34, 67, 72, 98, 100, 207, 231, 243, 350, 404, 451, 462, 468, 469, 470, 471, 473, 478], "mitig": [32, 67, 132, 240, 286, 340, 353, 439, 466, 476, 478], "effort": [32, 56, 78, 89, 100, 103, 222, 271, 303, 457, 459, 460, 461, 463, 464, 466, 467, 470, 475, 478], "insul": 32, "perfect": [32, 89, 94, 148, 192, 239, 243, 288, 337, 339, 425, 456, 478], "malici": [32, 106, 264, 295, 310, 323, 344, 348, 353, 404, 406, 407, 408, 409, 414, 415, 450, 463, 478], "namespac": [32, 44, 60, 67, 72, 77, 78, 84, 86, 88, 89, 92, 94, 99, 111, 115, 119, 153, 156, 160, 164, 177, 187, 189, 203, 207, 218, 221, 222, 226, 243, 244, 246, 247, 251, 252, 263, 264, 269, 279, 289, 293, 295, 298, 310, 320, 327, 333, 340, 341, 347, 361, 362, 377, 380, 381, 383, 384, 385, 393, 395, 405, 406, 407, 410, 411, 422, 424, 431, 432, 440, 445, 450, 457, 458, 459, 460, 462, 464, 465, 469, 470, 472, 473, 474, 475, 476, 478, 479], "reachabl": [32, 189, 288, 289, 292, 381, 423, 477, 478], "delic": [32, 62], "biject": [32, 106], "assumpt": [32, 62, 72, 75, 98, 137, 157, 177, 179, 459, 463, 470, 474, 475, 478], "broken": [32, 67, 98, 100, 104, 106, 109, 135, 160, 186, 203, 208, 251, 262, 279, 289, 292, 301, 329, 337, 340, 348, 357, 359, 360, 364, 383, 384, 385, 389, 430, 450, 462, 466, 469, 471, 472, 476, 477, 478], "presenc": [32, 62, 72, 74, 109, 154, 157, 182, 214, 239, 246, 288, 292, 304, 337, 344, 348, 373, 381, 383, 422, 423, 425, 459, 460, 465, 474, 478], "furthermor": [32, 83, 117, 154, 187, 251, 264, 265, 267, 320, 340, 381, 394, 422, 456, 469, 472], "ctype": [32, 67, 72, 115, 139, 160, 192, 196, 201, 210, 250, 289, 298, 340, 348, 381, 464, 469, 471, 474, 478], "py_addpendingcal": [32, 56, 464, 477, 478], "schedul": [32, 67, 79, 83, 112, 115, 122, 160, 248, 250, 251, 318, 329, 348, 361, 371, 425, 459, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 477, 478], "queu": [32, 123, 152, 173, 265, 291, 333, 356, 463], "met": [32, 62, 74, 92, 93, 94, 99, 186, 207, 337, 421, 462, 476], "boundari": [32, 93, 103, 150, 179, 189, 192, 195, 201, 202, 207, 209, 279, 295, 315, 340, 343, 357, 410, 430, 463, 468, 478], "subinterpret": [32, 44, 62, 137, 246, 289, 340, 344, 351, 357, 468, 469, 476, 477, 478], "quick": [32, 49, 67, 74, 83, 84, 94, 100, 102, 103, 107, 115, 183, 186, 209, 212, 213, 214, 218, 265, 286, 315, 329, 348, 364, 370, 381, 383, 385, 458, 459, 460, 461, 462, 463, 465, 466, 469, 470, 472, 478], "busi": [32, 84, 134, 208, 265, 334, 344, 364, 401, 410, 421, 436], "suitabl": [32, 62, 63, 72, 84, 89, 94, 99, 100, 106, 121, 143, 154, 165, 169, 172, 179, 186, 192, 200, 204, 205, 231, 240, 249, 255, 257, 262, 263, 264, 265, 267, 272, 279, 284, 289, 295, 304, 319, 320, 323, 329, 331, 333, 334, 340, 348, 353, 357, 360, 361, 362, 375, 383, 395, 402, 405, 408, 416, 417, 423, 450, 456, 459, 460, 461, 463, 464, 470, 474, 475, 476, 478], "pygilst": 32, "coverag": [32, 84, 102, 348, 375, 465, 467, 469, 472, 478], "overhead": [32, 34, 74, 100, 129, 136, 184, 248, 257, 266, 289, 304, 336, 338, 340, 348, 362, 377, 379, 381, 397, 423, 427, 457, 458, 459, 460, 462, 466, 468, 470, 471, 474, 475, 476, 477, 478], "py_tracefunc": 32, "pertain": [32, 34, 62, 72, 289, 348, 370, 421, 465, 478], "pytrace_cal": 32, "pytrace_except": 32, "pytrace_lin": 32, "pytrace_return": 32, "pytrace_c_cal": 32, "pytrace_c_except": 32, "pytrace_c_return": 32, "pytrace_opcod": 32, "transfer": [32, 34, 67, 71, 72, 91, 107, 133, 140, 165, 187, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 219, 231, 237, 238, 240, 267, 272, 279, 284, 289, 295, 331, 343, 390, 392, 414, 421, 425, 427, 463, 464, 470, 471, 474, 476, 478], "unwind": [32, 74, 101, 132, 165, 251, 423, 478], "f_trace_lin": [32, 348, 423, 468, 475, 478], "opcod": [32, 67, 186, 260, 295, 296, 348, 423, 460, 461, 463, 464, 467, 469, 472, 474, 475, 476, 477, 478], "f_trace_opcod": [32, 348, 423, 468, 475, 478], "monitor": [32, 96, 99, 100, 123, 129, 134, 182, 265, 304, 325, 334, 348, 394, 461, 463, 474, 475, 478], "setprofil": [32, 67, 139, 160, 279, 311, 348, 360, 445, 459, 467, 478], "pyeval_setprofileallthread": [32, 469, 478], "settrac": [32, 67, 139, 141, 160, 279, 311, 348, 360, 445, 459, 467, 478], "pyeval_settraceallthread": [32, 469, 478], "pyinterpreterstate_head": [32, 459], "head": [32, 62, 67, 100, 103, 133, 147, 148, 152, 174, 196, 218, 236, 237, 238, 241, 284, 290, 304, 314, 329, 330, 334, 337, 346, 363, 371, 379, 390, 408, 457, 459, 471, 478], "pyinterpreterstate_next": [32, 459], "pyinterpreterstate_threadhead": [32, 459], "pythreadstate_next": [32, 459], "offer": [32, 62, 72, 83, 90, 91, 92, 93, 94, 97, 99, 100, 106, 153, 157, 168, 182, 212, 221, 231, 254, 257, 263, 264, 265, 267, 279, 292, 293, 315, 316, 320, 328, 333, 336, 340, 344, 349, 360, 361, 384, 390, 400, 403, 411, 421, 456, 457, 458, 459, 460, 461, 462, 463, 464, 470, 472, 476, 477, 478], "pthread": [32, 112, 348, 360, 451, 470, 478], "pythread": 32, "behalf": [32, 123, 329, 421, 478], "introduc": [32, 33, 44, 72, 77, 84, 88, 89, 94, 98, 99, 100, 102, 103, 119, 123, 136, 184, 209, 231, 239, 241, 246, 247, 265, 267, 271, 279, 288, 293, 295, 301, 304, 337, 340, 341, 343, 347, 348, 364, 370, 371, 379, 380, 381, 389, 409, 420, 422, 423, 424, 425, 427, 429, 430, 431, 450, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "supersed": [32, 58, 249, 284, 291, 337, 421, 457, 464, 467, 471, 475, 478], "py_tss_t": [32, 475], "539": [32, 67, 478], "py_limited_api": [32, 55, 56, 58, 60, 467, 468, 470, 475, 477, 478], "py_tss_needs_init": 32, "pythread_tss_alloc": [32, 56], "pythread_tss_fre": [32, 56], "pythread_tss_delet": [32, 56], "unassign": [32, 92, 342, 478], "dangl": [32, 62, 72, 76, 86, 289, 328, 340, 341, 357, 422, 478], "moreov": [32, 33, 221, 267, 379, 381, 464, 465, 478], "pythread_tss_set": [32, 56], "pythread_tss_get": [32, 56], "pythread_tss_cr": [32, 56], "pythread_tss_is_cr": [32, 56], "repeat": [32, 53, 57, 62, 67, 78, 94, 107, 109, 117, 152, 157, 172, 173, 179, 181, 186, 193, 210, 220, 221, 231, 243, 257, 262, 272, 279, 281, 288, 291, 293, 298, 304, 314, 315, 333, 336, 337, 340, 341, 343, 360, 362, 375, 376, 379, 381, 383, 384, 390, 400, 401, 402, 404, 422, 423, 450, 459, 460, 461, 463, 464, 470, 471, 472, 473, 474, 478], "forget": [32, 67, 71, 72, 89, 98, 100, 136, 182, 183, 357, 363, 371, 425, 426, 437, 461, 462, 463, 467, 469, 470, 476, 478], "distinct": [32, 34, 41, 44, 62, 84, 91, 102, 103, 106, 138, 165, 177, 179, 182, 189, 222, 257, 264, 266, 271, 280, 288, 295, 304, 330, 336, 337, 340, 343, 348, 364, 381, 402, 427, 430, 457, 459, 463, 470, 471, 474, 475, 477, 478], "pythread_create_key": [32, 56, 478], "ops": [32, 99, 119, 337], "pythread_delete_key": [32, 56], "pythread_set_key_valu": [32, 56, 472], "pythread_get_key_valu": [32, 56], "pythread_delete_key_valu": [32, 56], "pythread_reinittl": [32, 56], "py_preiniti": [33, 41, 58, 469, 476], "kind": [33, 62, 63, 67, 72, 75, 78, 84, 86, 89, 97, 98, 100, 102, 106, 117, 119, 130, 148, 172, 179, 189, 209, 246, 247, 251, 254, 277, 279, 289, 292, 295, 297, 311, 315, 324, 336, 337, 340, 342, 348, 360, 364, 381, 383, 390, 395, 404, 408, 409, 410, 421, 422, 423, 425, 426, 427, 435, 436, 451, 456, 459, 460, 461, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478], "lc_ctype": [33, 58, 67, 86, 106, 242, 262, 289, 340, 450, 474, 475, 478], "unchang": [33, 41, 89, 92, 100, 103, 109, 141, 148, 152, 163, 172, 173, 182, 204, 226, 251, 257, 262, 265, 267, 289, 298, 315, 333, 336, 340, 341, 353, 364, 379, 380, 381, 389, 422, 423, 425, 430, 456, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 474, 475, 478], "587": [33, 67, 100, 337, 478], "pyconfig_initpythonconfig": [33, 476], "pyconfig_setbytesargv": [33, 476], "pystatus_except": [33, 469, 476], "goto": [33, 34, 67, 152, 218, 379, 451, 466, 468, 470, 478], "pyconfig_clear": [33, 476, 478], "pystatus_isexit": [33, 476], "exitcod": [33, 67, 160, 279, 289, 344, 357, 478], "py_exitstatusexcept": [33, 476], "pywidestringlist_append": [33, 476], "pywidestringlist_insert": [33, 476], "err_msg": [33, 336, 348, 357], "pystatus_ok": [33, 476], "pystatus_error": [33, 476], "pystatus_nomemori": [33, 476], "pystatus_exit": [33, 476], "pystatus_iserror": [33, 476], "wherea": [33, 72, 84, 100, 123, 134, 163, 258, 263, 279, 315, 325, 348, 364, 384, 397, 427, 456, 465, 477, 478], "preconfigur": [33, 384], "pypreconfig_initpythonconfig": [33, 476], "preconfig": [33, 476], "pypreconfig_initisolatedconfig": [33, 476], "pymem_allocator_not_set": 33, "pymem_allocator_default": 33, "pymem_allocator_debug": 33, "pymem_allocator_malloc": 33, "pymem_allocator_malloc_debug": 33, "pymem_allocator_pymalloc": 33, "pymem_allocator_pymalloc_debug": 33, "configure_local": 33, "coerce_c_local": 33, "coerce_c_locale_warn": 33, "coerc": [33, 63, 97, 163, 171, 182, 191, 192, 201, 257, 258, 341, 450, 457, 465, 475, 478], "dev_mod": [33, 184, 348, 478], "utf8_mod": [33, 289, 348, 469], "filesystem_encod": [33, 58, 86, 289, 348, 469], "filesystem_error": [33, 58, 86, 289, 348, 469], "ifdef": [33, 67, 72, 451, 457, 478], "py_preinitializefromarg": [33, 476], "py_preinitializefrombytesarg": [33, 476], "pars": [33, 58, 63, 64, 65, 67, 72, 78, 83, 84, 89, 97, 100, 103, 107, 109, 111, 115, 119, 130, 133, 148, 152, 153, 155, 163, 171, 179, 183, 189, 190, 192, 195, 196, 197, 199, 201, 202, 204, 205, 213, 218, 221, 224, 226, 234, 236, 238, 239, 240, 241, 244, 246, 250, 252, 255, 258, 260, 264, 265, 267, 269, 272, 281, 282, 289, 304, 336, 340, 341, 344, 346, 350, 358, 361, 373, 377, 387, 390, 391, 394, 395, 402, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 425, 426, 430, 431, 438, 441, 445, 450, 457, 458, 459, 460, 461, 462, 463, 469, 471, 472, 473, 474, 476, 478, 479], "utf8": [33, 57, 67, 119, 148, 154, 190, 199, 201, 203, 204, 244, 252, 281, 289, 301, 310, 331, 348, 406, 408, 450, 456, 473, 475, 478], "pythonutf8": [33, 289, 348, 450, 456, 475, 478], "_pyruntim": [33, 477, 478], "pre": [33, 34, 72, 99, 100, 103, 108, 182, 187, 199, 204, 222, 241, 246, 254, 257, 264, 288, 320, 327, 334, 336, 348, 353, 376, 381, 382, 384, 390, 394, 422, 431, 450, 451, 456, 457, 460, 461, 462, 464, 470, 472, 473, 474, 475, 477, 478], "pyconfig_initisolatedconfig": [33, 476], "pyconfig_setstr": [33, 476], "config_str": 33, "pyconfig_setbytesstr": [33, 58, 476], "pyconfig_setargv": [33, 476], "pyconfig_setwidestringlist": [33, 478], "pyconfig_read": [33, 58, 86, 289, 348, 468, 476, 478], "stripp": [33, 478], "tune": [33, 222, 239, 288, 315, 318, 337, 457, 460, 469, 478], "strip": [33, 67, 84, 89, 94, 103, 117, 119, 154, 163, 166, 173, 174, 179, 186, 189, 196, 204, 205, 221, 224, 241, 243, 264, 265, 280, 304, 322, 327, 331, 334, 339, 340, 344, 351, 353, 357, 376, 377, 381, 389, 395, 402, 408, 417, 437, 438, 457, 460, 465, 466, 470, 473, 478], "unsaf": [33, 62, 67, 74, 84, 146, 163, 184, 252, 279, 323, 327, 336, 348, 353, 383, 384, 393, 450, 460, 469, 473, 475, 478], "py": [33, 34, 50, 67, 72, 75, 78, 84, 85, 86, 88, 89, 93, 94, 96, 99, 100, 101, 106, 108, 109, 110, 113, 114, 117, 119, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 136, 140, 141, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 172, 174, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 210, 212, 214, 216, 217, 219, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 272, 275, 277, 280, 282, 284, 285, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 357, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 425, 427, 433, 443, 444, 445, 446, 447, 448, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "symbol": [33, 65, 67, 70, 72, 76, 78, 84, 91, 93, 100, 101, 106, 115, 119, 153, 155, 172, 173, 182, 189, 207, 241, 250, 260, 262, 265, 268, 289, 292, 296, 315, 318, 328, 329, 333, 336, 338, 340, 348, 349, 352, 353, 354, 356, 357, 364, 371, 379, 382, 389, 400, 405, 410, 423, 426, 429, 431, 436, 450, 456, 457, 459, 461, 462, 464, 466, 467, 470, 474, 476, 477, 478], "link": [33, 34, 62, 65, 67, 70, 72, 73, 76, 77, 78, 83, 84, 85, 86, 99, 100, 115, 119, 139, 157, 159, 174, 179, 196, 208, 231, 236, 239, 241, 253, 255, 257, 262, 263, 289, 292, 324, 328, 337, 338, 344, 348, 349, 352, 353, 357, 364, 370, 371, 394, 397, 398, 400, 402, 408, 409, 421, 423, 427, 450, 451, 457, 460, 461, 463, 464, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478], "resolv": [33, 67, 74, 84, 99, 100, 117, 123, 125, 136, 163, 172, 179, 187, 189, 207, 215, 246, 247, 248, 251, 255, 263, 264, 288, 289, 292, 298, 299, 304, 310, 328, 333, 337, 344, 348, 380, 381, 383, 384, 406, 407, 408, 410, 411, 412, 424, 450, 456, 459, 471, 472, 473, 474, 475, 476, 478], "pythonsafepath": [33, 323, 348, 450, 468, 478], "base_exec_prefix": [33, 67, 311, 330, 348, 394, 445], "base_execut": 33, "_base_execut": [33, 478], "__pyvenv_launcher__": [33, 478], "base_prefix": [33, 67, 226, 311, 330, 348, 394, 445], "configure_c_stdio": 33, "warn_default_encod": [33, 254, 348, 450, 467, 478], "encodingwarn": [33, 67, 209, 254, 450, 478], "textiowrapp": [33, 67, 115, 117, 146, 184, 214, 221, 230, 249, 254, 266, 344, 355, 417, 463, 467, 471, 472, 474, 475, 478], "code_debug_rang": 33, "inclus": [33, 38, 41, 67, 89, 117, 156, 179, 181, 208, 234, 255, 261, 263, 266, 289, 304, 314, 315, 327, 339, 377, 408, 421, 425, 429, 431, 450, 464, 470, 475, 478], "caret": [33, 103, 173, 174, 189, 315, 376, 478], "pythonnodebugrang": [33, 423, 450, 468], "no_debug_rang": [33, 423, 450, 468], "check_hash_pycs_mod": 33, "check_sourc": 33, "552": [33, 67, 246, 307, 468, 478], "determinist": [33, 67, 100, 103, 165, 181, 184, 246, 251, 333, 336, 354, 408, 470, 475, 477, 478], "dev": [33, 67, 78, 79, 96, 100, 123, 184, 225, 265, 267, 268, 289, 290, 291, 303, 329, 344, 348, 350, 433, 450, 457, 458, 459, 460, 461, 462, 463, 464, 470, 471, 473, 478], "pythondevmod": [33, 184, 450, 475], "dump_ref": 33, "dump": [33, 41, 67, 72, 89, 93, 99, 100, 119, 139, 148, 168, 171, 181, 184, 213, 250, 252, 258, 260, 262, 265, 269, 270, 280, 281, 282, 289, 293, 294, 295, 300, 304, 329, 336, 338, 376, 377, 402, 408, 414, 441, 450, 451, 457, 458, 459, 460, 463, 464, 466, 471, 472, 473, 474, 477, 478], "aliv": [33, 62, 67, 84, 172, 178, 222, 279, 280, 301, 340, 357, 360, 397, 422, 423, 447, 450, 458, 464, 465, 470, 472, 478], "pythondumpref": [33, 62, 450, 451, 476, 478], "py_trace_ref": [33, 34, 62, 451, 467, 476, 477, 478], "faulthandl": [33, 67, 172, 181, 184, 250, 293, 329, 357, 376, 450, 478], "pythonfaulthandl": [33, 184, 210, 450, 471], "getfilesystemencod": [33, 65, 67, 86, 106, 117, 289, 311, 348, 353, 416, 445, 474, 478], "android": [33, 63, 86, 262, 299, 348, 357, 474, 475, 476, 478], "vxwork": [33, 63, 86, 169, 262, 289, 297, 318, 467, 478], "nl_langinfo": [33, 67, 242, 262, 459, 478], "codeset": [33, 67, 154, 226, 242, 262, 459, 468, 476, 478], "announc": [33, 79, 106, 289, 471], "mbstowc": 33, "latin1": [33, 133, 154, 295, 310, 462, 471, 474, 477, 478], "ansi_x3": 33, "1968": 33, "getfilesystemencodeerror": [33, 67, 86, 311, 348, 445, 474], "surrogateescap": [33, 58, 63, 106, 154, 197, 204, 214, 221, 289, 333, 348, 353, 450, 470, 473, 474, 475, 478], "chosen": [33, 44, 72, 89, 93, 99, 103, 182, 207, 221, 231, 264, 279, 280, 288, 295, 333, 337, 343, 348, 370, 410, 423, 446, 450, 456, 460, 461, 465, 478], "import_tim": 33, "importtim": [33, 450, 475, 478], "pythonprofileimporttim": [33, 450, 475, 478], "install_signal_handl": [33, 467, 478], "repl": [33, 111, 120, 187, 315, 348, 450, 467, 476, 478], "int_max_str_digit": [33, 340, 348, 450, 478], "4300": [33, 340, 468], "int_info": [33, 67, 311, 340, 348, 445, 451, 466], "default_max_str_digit": [33, 340, 348], "640": [33, 340, 379], "str_digits_check_threshold": [33, 340, 348], "pythonintmaxstrdigit": [33, 340, 348, 450, 478], "prompt": [33, 65, 67, 78, 84, 109, 111, 117, 139, 152, 153, 162, 169, 172, 185, 187, 189, 196, 203, 218, 221, 225, 243, 244, 250, 279, 293, 309, 315, 316, 331, 337, 340, 344, 348, 356, 360, 363, 376, 379, 390, 394, 427, 431, 436, 439, 444, 450, 456, 460, 463, 467, 470, 472, 474, 475, 476, 477, 478], "malloc_stat": 33, "statist": [33, 41, 67, 92, 181, 222, 250, 271, 284, 286, 304, 314, 328, 337, 348, 362, 375, 446, 450, 451, 457, 458, 462, 464, 468, 470, 471, 478], "pythonmallocstat": [33, 41, 450, 478], "platlibdir": [33, 67, 311, 348, 349, 450, 451, 477, 478], "pythonplatlibdir": [33, 349, 450, 478], "lib": [33, 34, 71, 76, 78, 83, 85, 88, 94, 96, 109, 110, 113, 114, 117, 119, 120, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 136, 140, 141, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 172, 173, 174, 177, 179, 180, 182, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 214, 216, 217, 219, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 272, 275, 277, 279, 280, 282, 284, 285, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 312, 313, 314, 315, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 425, 433, 445, 447, 448, 450, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478], "dlls": [33, 67, 73, 115, 289, 457, 462, 476, 478], "layout": [33, 41, 60, 62, 67, 75, 98, 99, 100, 154, 185, 209, 263, 267, 337, 343, 350, 363, 364, 368, 393, 423, 427, 440, 456, 463, 469, 471, 472, 478], "virtual": [33, 34, 67, 72, 84, 86, 100, 102, 108, 113, 157, 172, 173, 175, 188, 206, 221, 222, 238, 247, 250, 251, 276, 289, 329, 333, 336, 337, 348, 350, 353, 363, 380, 390, 402, 422, 423, 424, 427, 435, 448, 453, 457, 463, 469, 470, 472, 474, 475, 476, 478, 479], "pythonpath_env": 33, "delim": 33, "pathsep": [33, 67, 115, 289, 330, 375, 398, 420, 450, 451], "peephol": [33, 461, 462, 470, 475, 478], "__debug__": [33, 65, 67, 164, 184, 221, 246, 250, 431, 445, 450, 460, 467, 478], "assert": [33, 34, 48, 65, 67, 100, 105, 109, 113, 119, 136, 140, 164, 177, 179, 180, 183, 184, 187, 189, 209, 221, 224, 251, 260, 279, 288, 293, 295, 315, 336, 340, 357, 380, 381, 383, 384, 395, 397, 406, 420, 421, 422, 425, 426, 428, 430, 445, 450, 451, 460, 461, 463, 466, 470, 472, 473, 476, 477, 478], "py_debug": [33, 34, 67, 183, 357, 451, 467, 476, 478], "log": [33, 58, 67, 92, 94, 95, 106, 115, 122, 123, 136, 144, 148, 149, 151, 160, 162, 165, 184, 189, 210, 219, 226, 232, 241, 250, 254, 271, 284, 286, 289, 301, 323, 328, 331, 337, 340, 344, 348, 351, 353, 357, 381, 383, 395, 402, 415, 423, 440, 446, 450, 456, 457, 458, 459, 461, 462, 463, 466, 467, 477, 478, 479], "pythonexecut": [33, 450], "with_next_framework": 33, "python3": [33, 56, 71, 88, 89, 96, 100, 108, 109, 196, 204, 292, 330, 340, 349, 350, 377, 394, 416, 433, 443, 448, 450, 451, 455, 456, 464, 467, 469, 470, 472, 474, 476, 477, 478], "pycache_prefix": [33, 67, 159, 311, 348, 445, 450, 476, 478], "pythonpycacheprefix": [33, 348, 450, 476, 478], "run_command": [33, 139, 450], "run_filenam": 33, "skip_source_first_lin": 33, "run_modul": [33, 67, 139, 276, 320, 450, 478], "show_ref_count": 33, "showrefcount": [33, 450, 451, 472, 478], "py_ref_debug": [33, 451], "no_sit": [33, 348, 470], "invert": [33, 67, 92, 93, 94, 119, 154, 182, 187, 207, 220, 260, 287, 340, 423, 425, 426, 468, 478], "cmd": [33, 67, 85, 100, 117, 123, 134, 139, 141, 160, 173, 211, 218, 219, 250, 289, 293, 297, 304, 328, 331, 344, 375, 394, 450, 469, 470, 478], "dos": [33, 77, 173, 284, 288, 450, 457, 459, 470, 472, 478], "hack": [33, 83, 94, 98, 189, 327, 390, 450, 457, 458, 459, 469, 478], "pythontracemalloc": [33, 377, 450, 478], "perf_profil": 33, "trampolin": [33, 348, 469, 478], "pythonperfsupport": [33, 101, 450, 469], "warnopt": [33, 58, 67, 311, 348, 357, 395, 445, 475, 478], "filter": [33, 58, 67, 84, 94, 96, 99, 109, 115, 116, 138, 156, 173, 181, 184, 185, 186, 209, 212, 214, 215, 216, 221, 250, 257, 264, 308, 311, 324, 328, 333, 357, 383, 384, 394, 416, 420, 425, 437, 445, 450, 451, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 474, 475, 476, 477, 478], "lowest": [33, 41, 99, 119, 182, 187, 207, 217, 232, 274, 337, 340, 344, 360, 362, 367, 425, 457, 462, 474], "highest": [33, 78, 92, 93, 99, 119, 130, 163, 207, 263, 274, 295, 296, 324, 329, 336, 337, 340, 348, 361, 367, 425, 463, 471, 478], "prioriti": [33, 67, 92, 121, 139, 163, 232, 246, 257, 258, 265, 289, 295, 312, 318, 321, 324, 337, 340, 344, 351, 360, 370, 423, 425, 459, 460, 463, 470, 471, 472, 474, 476, 478], "revers": [33, 37, 67, 72, 79, 91, 92, 94, 105, 106, 118, 137, 138, 154, 156, 157, 165, 173, 177, 178, 179, 182, 183, 187, 207, 210, 221, 232, 250, 251, 255, 257, 279, 285, 289, 292, 304, 310, 315, 327, 336, 340, 346, 373, 377, 380, 381, 383, 389, 397, 423, 435, 437, 445, 457, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478, 479], "pythonwarn": [33, 184, 395, 450, 464, 470, 475, 478], "dont_write_bytecod": [33, 67, 311, 348, 445, 463, 470], "xoption": [33, 58, 450, 468, 478], "_xoption": [33, 58, 67, 311, 348, 445, 450], "show_alloc_count": [33, 474, 477, 478], "init_python": 33, "my_program": 33, "pysys_getobject": [33, 56, 58, 468], "my_execut": 33, "unspecifi": [33, 89, 94, 102, 123, 146, 172, 189, 254, 255, 266, 271, 283, 289, 292, 295, 310, 333, 361, 371, 381], "coercion": [33, 67, 221, 289, 341, 423, 450, 451, 462, 464, 478, 479], "538": [33, 67, 450, 451, 478], "540": [33, 67, 289, 478], "pythoncoerceclocal": [33, 289, 450, 451, 475, 478], "softwarepythonpythoncorex": 33, "ypythonpath": 33, "hkey_current_us": [33, 67, 399, 400, 456], "hkey_local_machin": [33, 67, 399, 400, 456], "unset": [33, 58, 62, 67, 183, 187, 267, 289, 291, 340, 348, 357, 427, 463, 464, 475, 478], "overridden": [33, 84, 92, 93, 100, 117, 141, 152, 157, 163, 179, 204, 207, 221, 226, 239, 240, 241, 246, 251, 254, 263, 265, 288, 289, 293, 303, 309, 320, 334, 336, 337, 340, 344, 348, 353, 360, 371, 381, 383, 390, 394, 395, 402, 423, 425, 427, 438, 450, 463, 464, 471, 472, 476, 477, 478], "py_main": [33, 56, 65, 456, 475, 478], "pyvenv": [33, 330, 349, 394, 456, 471, 472, 474, 476, 478], "cfg": [33, 84, 163, 264, 330, 349, 379, 394, 456, 463, 471, 473, 474, 478], "_pth": [33, 67, 276, 456, 474, 475, 478], "pybuilddir": [33, 478], "txt": [33, 34, 67, 77, 94, 100, 106, 117, 156, 162, 165, 184, 189, 204, 214, 216, 221, 226, 227, 230, 231, 239, 243, 247, 250, 252, 254, 274, 284, 288, 289, 292, 295, 328, 340, 344, 348, 353, 364, 382, 387, 394, 408, 416, 417, 430, 435, 438, 446, 447, 448, 451, 456, 457, 463, 464, 466, 470, 471, 472, 473, 474, 476, 478], "432": [33, 475, 478], "bare": [33, 89, 99, 100, 119, 163, 199, 288, 331, 426, 454, 456, 462, 465, 468, 476, 478], "importlib": [33, 67, 84, 86, 96, 100, 102, 109, 221, 243, 250, 251, 264, 276, 298, 307, 320, 348, 357, 377, 380, 417, 418, 423, 428, 431, 445, 456, 466, 468, 469, 470, 476, 478, 479], "_init_main": 33, "_py_initializemain": 33, "move": [33, 67, 69, 75, 83, 84, 89, 90, 91, 92, 97, 100, 107, 109, 115, 117, 119, 139, 152, 172, 173, 175, 177, 179, 192, 201, 202, 214, 215, 243, 257, 265, 267, 274, 289, 293, 307, 328, 357, 361, 363, 366, 370, 371, 379, 383, 385, 389, 390, 394, 408, 446, 454, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "mayb": [33, 72, 89, 93, 94, 267, 395, 426, 429, 467], "meta_path": [33, 67, 86, 139, 246, 247, 298, 311, 348, 427, 431, 445, 456, 460, 471, 474, 478], "motiv": [33, 92, 353, 423, 425, 458, 460, 461, 471, 476, 478], "anytim": [33, 148, 337, 340, 364], "res": [33, 41, 44, 78, 103, 136, 238, 279, 315, 333, 336, 478], "put": [33, 48, 67, 72, 74, 75, 78, 83, 84, 87, 89, 91, 92, 93, 94, 98, 100, 103, 111, 119, 131, 135, 148, 154, 160, 163, 171, 172, 187, 189, 197, 199, 204, 211, 226, 228, 237, 238, 243, 246, 264, 277, 279, 291, 295, 296, 312, 329, 330, 331, 333, 337, 340, 346, 350, 359, 360, 364, 384, 385, 390, 420, 427, 436, 444, 456, 458, 459, 460, 461, 462, 463, 464, 470, 473, 478], "cookbook": [34, 67, 73, 84, 95, 99, 107, 207, 263, 264, 265, 271, 362, 449, 470], "stdio": [34, 71, 72, 101, 289, 463, 468, 478], "_pi": [34, 476, 478], "pythonvers": 34, "version_info": [34, 67, 79, 102, 110, 119, 294, 311, 336, 348, 350, 445, 457, 464, 466, 468, 469, 470, 471, 478], "pythonx": [34, 71, 330, 340, 348, 394, 478], "py_return_non": [34, 45, 72, 461], "py_ab": 34, "py_always_inlin": [34, 478], "inlin": [34, 51, 57, 59, 63, 67, 86, 89, 163, 186, 187, 192, 193, 199, 201, 233, 304, 315, 383, 451, 460, 462, 467, 468, 470, 474, 476, 478], "msc": [34, 85, 478], "py_charmask": 34, "128": [34, 63, 86, 97, 100, 106, 138, 156, 173, 182, 222, 231, 255, 280, 289, 336, 337, 379, 393, 430, 444, 462, 469, 473, 478], "127": [34, 57, 63, 100, 104, 106, 123, 130, 133, 166, 241, 243, 255, 279, 289, 334, 337, 340, 344, 348, 357, 377, 462, 473, 478], "255": [34, 63, 67, 86, 91, 97, 106, 110, 154, 156, 173, 187, 221, 231, 255, 340, 343, 379, 425, 468, 471, 473, 475, 478, 479], "py_deprec": [34, 476, 478], "pyapi_func": [34, 451, 460, 476, 478], "py_oldfunct": [34, 476], "msvc": [34, 62, 76, 85, 172, 461, 476, 478], "py_getenv": 34, "getenv": [34, 67, 115, 289, 302], "py_max": 34, "py_member_s": 34, "py_min": 34, "py_no_inlin": [34, 478], "lto": [34, 451, 468, 478], "pgo": [34, 67, 183, 357, 451, 463, 474, 477, 478], "33720": [34, 478], "py_stringifi": 34, "123": [34, 72, 89, 98, 100, 102, 103, 119, 182, 217, 221, 257, 264, 333, 340, 343, 425, 435, 441, 457, 459, 463, 464, 466, 470], "py_unreach": [34, 475, 478], "__builtin_unreach": [34, 478], "_py_no_return": 34, "py_unus": [34, 57, 75, 89, 478], "pydoc_strvar": [34, 44, 89, 98, 451, 478], "pop_doc": 34, "rightmost": [34, 144, 154, 156, 173, 182, 257, 289, 340, 425, 461], "deque_method": 34, "pycfunct": [34, 43, 56, 57, 72, 74, 75, 89, 98, 461, 478], "deque_pop": 34, "meth_noarg": [34, 57, 67, 75, 459, 460, 478], "pydoc_str": [34, 57, 62, 75, 478], "pysqlite_row_method": 34, "pysqlite_row_key": 34, "row": [34, 67, 72, 84, 87, 147, 171, 221, 257, 294, 364, 371, 373, 379, 430, 437, 462, 466, 470, 473, 474, 478], "pylist_check": [34, 37, 78], "today": [34, 67, 71, 93, 102, 106, 163, 178, 179, 207, 284, 291, 336, 385, 414, 430, 446, 458, 460, 461, 463, 476], "obvious": [34, 62, 72, 89, 94, 99, 100, 103, 163, 173, 182, 263, 288, 291, 295, 304, 319, 343, 344, 357, 374, 384, 385, 408, 456, 457, 461, 462, 474, 478], "solut": [34, 67, 72, 83, 84, 89, 92, 93, 94, 98, 100, 102, 103, 106, 129, 177, 182, 243, 257, 295, 315, 329, 334, 339, 346, 379, 385, 421, 427, 456, 457, 459, 460, 461, 462, 463, 464, 466, 470, 476, 478], "consider": [34, 67, 72, 84, 98, 99, 115, 123, 160, 173, 177, 189, 209, 219, 238, 244, 250, 252, 267, 281, 284, 301, 311, 331, 336, 390, 405, 428, 457, 460, 461, 462, 464, 469, 471, 475, 478], "incref": [34, 62, 478], "sizeof": [34, 41, 62, 67, 75, 115, 172, 299, 343, 348, 384, 478], "theori": [34, 83, 315, 421, 472, 473], "goe": [34, 76, 88, 89, 92, 98, 102, 103, 117, 119, 130, 163, 165, 173, 174, 189, 226, 239, 243, 264, 271, 279, 288, 310, 348, 376, 381, 422, 439, 459, 470, 471], "down": [34, 50, 67, 71, 75, 84, 94, 99, 100, 102, 123, 136, 148, 156, 173, 175, 187, 189, 208, 218, 241, 243, 263, 271, 279, 289, 292, 293, 304, 305, 315, 324, 329, 333, 334, 337, 348, 366, 371, 379, 383, 389, 402, 447, 450, 457, 459, 460, 464, 469, 473, 474, 475, 476, 477, 478], "scope": [34, 67, 75, 77, 84, 86, 89, 93, 97, 99, 100, 110, 111, 119, 141, 156, 187, 251, 255, 293, 303, 310, 316, 327, 333, 337, 347, 348, 364, 381, 384, 385, 394, 406, 408, 410, 422, 423, 425, 427, 431, 440, 445, 457, 463, 465, 469, 470, 471, 474, 475, 476, 477, 478, 479], "cancel": [34, 67, 121, 122, 123, 126, 131, 132, 135, 138, 148, 160, 162, 165, 173, 174, 185, 210, 277, 310, 321, 329, 360, 363, 366, 370, 371, 379, 383, 422, 425, 439, 468, 470, 475, 476, 477, 478], "we": [34, 63, 71, 72, 74, 75, 84, 87, 88, 89, 90, 92, 93, 94, 99, 100, 101, 103, 104, 106, 107, 111, 117, 119, 123, 126, 130, 131, 133, 136, 141, 151, 152, 153, 156, 162, 163, 165, 166, 172, 179, 186, 187, 190, 192, 196, 198, 201, 204, 207, 209, 228, 231, 238, 239, 243, 247, 257, 262, 264, 265, 279, 280, 288, 289, 295, 315, 328, 329, 334, 336, 337, 339, 340, 341, 343, 344, 357, 362, 364, 373, 377, 379, 381, 383, 384, 385, 389, 390, 395, 397, 402, 406, 408, 414, 417, 421, 422, 423, 425, 426, 427, 436, 438, 441, 451, 457, 459, 460, 462, 463, 464, 465, 469, 470, 471, 474, 476, 477, 478], "aris": [34, 182, 254, 263, 264, 295, 380, 421, 425, 459, 461, 470, 476, 478], "pitfal": [34, 67, 103, 116, 468, 478], "extract": [34, 55, 67, 71, 73, 74, 88, 93, 94, 97, 98, 116, 117, 173, 179, 186, 187, 189, 193, 194, 196, 210, 221, 226, 238, 239, 247, 248, 251, 257, 289, 293, 308, 309, 311, 315, 326, 328, 331, 340, 348, 376, 389, 423, 456, 460, 461, 462, 463, 464, 469, 470, 472, 473, 474, 476, 478], "conceiv": [34, 295, 353], "innoc": 34, "flow": [34, 67, 72, 94, 127, 130, 173, 174, 182, 260, 344, 354, 381, 422, 424, 425, 457, 459, 460, 462, 463, 473, 478], "pyobject_": [34, 44, 62, 462], "pynumber_": 34, "pysequence_": 34, "pymapping_": 34, "soon": [34, 83, 89, 91, 102, 103, 106, 133, 136, 189, 224, 228, 257, 279, 289, 293, 340, 355, 357, 379, 381, 406, 422, 423, 460, 462, 469, 472, 477, 478], "explain": [34, 41, 44, 62, 72, 74, 75, 76, 84, 88, 91, 94, 97, 99, 100, 102, 103, 106, 107, 111, 148, 172, 189, 209, 221, 231, 239, 241, 243, 251, 257, 288, 293, 340, 364, 371, 383, 384, 425, 450, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478], "term": [34, 72, 88, 89, 92, 94, 102, 136, 173, 182, 205, 209, 217, 231, 239, 246, 258, 263, 271, 288, 295, 304, 340, 341, 357, 361, 364, 380, 394, 396, 397, 402, 409, 421, 422, 426, 427, 461, 463, 464, 466, 469, 471, 472, 474, 476, 478], "ownership": [34, 67, 98, 100, 123, 133, 253, 279, 360, 421, 463, 471, 478], "py_xdecref": [34, 44, 51, 62, 71, 72, 75, 468, 476, 478], "said": [34, 84, 91, 92, 163, 209, 279, 422, 423, 430, 444, 458, 459, 474, 478], "pylist_setitem": [34, 37, 56, 72], "pytuple_setitem": [34, 54, 56, 59, 71, 72], "pytuple_new": [34, 56, 59, 71], "1l": [34, 459, 460, 463, 464, 478], "2l": [34, 457], "pysequence_setitem": [34, 37, 53, 56, 62, 478], "pyobject_setitem": [34, 39, 48, 56, 62, 462, 478], "iis": [34, 402], "friend": [34, 62, 72, 91, 100, 117, 186, 190, 288, 333, 340, 348, 383, 385, 408, 420, 457, 461, 465, 472, 475, 477, 478], "regard": [34, 62, 89, 98, 99, 165, 201, 222, 231, 265, 289, 336, 340, 344, 405, 408, 421, 456, 478], "saner": 34, "set_al": [34, 222], "pyobject_length": [34, 48, 56], "pylong_fromssize_t": [34, 38, 56], "pysequence_getitem": [34, 53, 56, 62, 78, 478], "plumag": [34, 72, 436], "pylist_getitem": [34, 37, 56, 72, 78, 478], "sum_list": 34, "pylist_s": [34, 37, 56, 78, 462], "pylong_check": [34, 38, 62], "fit": [34, 72, 97, 117, 172, 173, 174, 182, 187, 189, 191, 211, 246, 255, 265, 288, 303, 304, 333, 343, 359, 364, 379, 383, 390, 395, 405, 416, 421, 460, 461, 464, 469, 470, 471, 472, 477, 478], "bail": 34, "sum_sequ": 34, "pysequence_length": [34, 53, 56, 78], "353": [34, 67, 467, 478, 479], "py_ssize_t_max": [34, 46, 55, 89, 478], "incr_item": 34, "const_on": 34, "incremented_item": 34, "0l": [34, 72, 343], "pynumber_add": [34, 46, 56], "shell": [34, 67, 72, 75, 78, 79, 84, 85, 86, 91, 94, 100, 108, 121, 123, 127, 134, 148, 152, 160, 163, 173, 189, 216, 218, 227, 250, 251, 258, 268, 280, 284, 288, 289, 290, 305, 309, 336, 346, 348, 349, 357, 363, 364, 379, 383, 394, 395, 400, 433, 434, 442, 443, 444, 445, 446, 448, 450, 451, 454, 455, 456, 457, 459, 461, 464, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478], "fallback": [34, 67, 123, 159, 164, 180, 213, 226, 295, 328, 348, 353, 357, 371, 401, 423, 427, 470, 476, 478], "getpath": [34, 478], "specialbuild": [34, 451], "pydebug": [34, 348, 357, 451, 460, 467, 472, 478], "_debug": 34, "doubli": [34, 62, 84, 464], "pyiter_check": [35, 56, 62, 478], "pyiter_next": [35, 56, 62], "pyaiter_check": [35, 56, 478], "asynciter": [35, 48, 67, 157, 178, 183, 340, 381, 473, 478], "pyobject_getit": [35, 48, 54, 56, 62], "pysendresult": [35, 62], "pyiter_send": [35, 56, 62, 467, 478], "enum": [35, 41, 67, 95, 117, 159, 178, 237, 250, 251, 258, 304, 307, 315, 329, 337, 340, 380, 423, 436, 469, 471, 478], "presult": 35, "pygen_return": 35, "pygen_next": 35, "pygen_error": 35, "__getitem__": [36, 39, 53, 62, 63, 67, 79, 86, 96, 100, 105, 113, 156, 157, 172, 178, 190, 192, 199, 201, 207, 214, 220, 221, 267, 279, 281, 287, 315, 340, 341, 358, 381, 384, 385, 402, 405, 407, 408, 422, 425, 447, 459, 460, 461, 465, 468, 469, 470, 474, 476, 478], "pyseqiter_typ": [36, 56], "pyseqiter_new": [36, 56], "pyseqiter_check": 36, "seq": [36, 63, 84, 156, 187, 216, 221, 257, 287, 314, 340, 457, 461, 468, 470], "subscript": [36, 62, 67, 86, 172, 187, 209, 243, 260, 340, 381, 423, 431, 444, 450, 460, 463, 467, 468, 469, 477, 478], "pycalliter_typ": [36, 56], "pycalliter_new": [36, 56], "pycalliter_check": 36, "pylist_typ": [37, 56, 75], "pylist_checkexact": 37, "pylist_get_s": 37, "pylist_get_item": [37, 56], "pylist_set_item": [37, 467, 478], "pylist_insert": [37, 56], "front": [37, 89, 103, 165, 197, 204, 243, 257, 298, 385, 395, 402, 418, 423, 425, 450, 457, 460, 462, 464, 478], "pylist_append": [37, 56], "pylist_getslic": [37, 56], "pylist_setslic": [37, 56], "itemlist": 37, "assign": [37, 53, 60, 62, 67, 72, 74, 75, 78, 84, 86, 87, 88, 92, 93, 94, 106, 109, 112, 117, 119, 123, 136, 154, 163, 166, 172, 173, 177, 182, 187, 192, 198, 199, 201, 204, 207, 208, 209, 221, 222, 239, 246, 260, 263, 267, 274, 279, 280, 288, 289, 292, 293, 295, 310, 315, 326, 327, 333, 336, 337, 340, 343, 347, 348, 357, 359, 360, 371, 376, 381, 382, 383, 384, 395, 406, 408, 417, 420, 422, 423, 424, 426, 427, 428, 430, 435, 436, 437, 444, 451, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 471, 473, 474, 475, 477, 478, 479], "pylist_sort": [37, 56], "sort": [37, 67, 75, 76, 79, 83, 86, 88, 94, 107, 109, 117, 144, 148, 156, 163, 169, 172, 180, 182, 186, 189, 204, 221, 222, 228, 232, 244, 247, 250, 251, 252, 255, 257, 258, 262, 267, 279, 287, 288, 289, 292, 300, 303, 304, 314, 315, 324, 331, 336, 339, 340, 353, 357, 377, 379, 383, 390, 402, 405, 408, 417, 423, 425, 435, 436, 437, 445, 447, 456, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 475, 476, 477, 478], "pylist_revers": [37, 56], "pylist_astupl": [37, 56], "pylong_a": 38, "distinguish": [38, 62, 67, 72, 89, 119, 151, 157, 173, 183, 187, 189, 193, 221, 239, 251, 264, 271, 310, 337, 350, 371, 381, 395, 423, 425, 427, 456, 458, 459, 464, 471, 472, 478], "pylongobject": [38, 56, 469, 478], "pylong_typ": [38, 56], "pylong_checkexact": 38, "256": [38, 41, 63, 86, 97, 154, 169, 173, 182, 221, 231, 266, 322, 337, 340, 353, 423, 444, 461, 462, 476, 477, 478], "pylong_fromunsignedlong": [38, 56, 478], "pylong_fromsize_t": [38, 56, 478], "pylong_fromlonglong": [38, 56, 478], "pylong_fromunsignedlonglong": [38, 56, 478], "pylong_fromdoubl": [38, 56, 477, 478], "pylong_fromstr": [38, 56, 478], "radix": [38, 67, 182, 221, 262, 286, 311, 348, 430, 478], "decim": [38, 58, 63, 67, 77, 84, 103, 106, 151, 154, 163, 174, 179, 217, 221, 222, 250, 255, 257, 258, 262, 264, 271, 286, 288, 304, 315, 339, 340, 341, 348, 358, 360, 361, 373, 374, 382, 383, 414, 421, 423, 425, 430, 439, 440, 444, 450, 451, 457, 462, 463, 464, 466, 467, 468, 476, 478, 479], "36": [38, 99, 101, 106, 221, 257, 267, 279, 314, 318, 339, 341, 361, 437, 441, 444, 446, 447, 448, 467, 470, 472, 476, 477, 478], "underscor": [38, 56, 67, 70, 84, 89, 93, 100, 143, 148, 154, 172, 182, 192, 201, 217, 221, 267, 303, 315, 327, 340, 341, 348, 349, 364, 384, 402, 417, 422, 423, 424, 425, 429, 430, 431, 463, 465, 466, 469, 478], "digit": [38, 58, 63, 67, 84, 98, 103, 106, 114, 138, 140, 143, 151, 154, 156, 169, 174, 179, 182, 189, 217, 221, 231, 240, 255, 262, 264, 271, 284, 289, 315, 317, 322, 336, 337, 340, 341, 348, 357, 358, 361, 362, 364, 373, 382, 383, 389, 390, 393, 408, 419, 421, 430, 439, 444, 451, 457, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 478], "to_byt": [38, 67, 340, 478], "from_byt": [38, 67, 340, 478], "pylong_fromunicodeobject": [38, 467], "pylong_fromvoidptr": [38, 56], "pylong_asvoidptr": [38, 56], "__int__": [38, 62, 67, 217, 221, 381, 384, 423, 462, 464, 467, 468, 475, 476, 478], "pylong_aslongandoverflow": [38, 56, 464, 470], "long_min": 38, "pylong_aslonglong": [38, 56], "pylong_aslonglongandoverflow": [38, 56, 464, 470], "llong_max": 38, "llong_min": 38, "pylong_asssize_t": [38, 56], "pylong": [38, 466, 478], "pylong_asunsignedlong": [38, 56], "pylong_assize_t": [38, 56], "pylong_asunsignedlonglong": [38, 56, 466], "pylong_asunsignedlongmask": [38, 56], "reduct": [38, 67, 168, 294, 340, 469, 471, 478], "modulo": [38, 100, 182, 209, 221, 287, 329, 340, 371, 423, 425, 441, 460, 464, 470, 476, 478], "ulong_max": 38, "pylong_asunsignedlonglongmask": [38, 56, 478], "ullong_max": 38, "pylong_asdoubl": [38, 56, 478], "assur": [38, 75, 84, 151, 222, 271, 279, 373, 423, 464, 466, 470, 478], "usabl": [38, 53, 55, 58, 62, 63, 75, 84, 97, 102, 123, 148, 154, 172, 173, 205, 221, 241, 246, 255, 264, 272, 279, 289, 333, 337, 340, 341, 344, 405, 423, 425, 427, 459, 460, 461, 462, 469, 470, 474, 475, 478], "pyunstable_long_iscompact": [38, 469, 478], "compact": [38, 41, 84, 103, 106, 119, 148, 152, 186, 193, 194, 258, 295, 303, 343, 376, 425, 460, 469, 471, 472, 474, 478], "critic": [38, 67, 74, 86, 99, 100, 115, 123, 187, 246, 263, 264, 265, 288, 401, 427, 446, 447, 460, 462, 463, 466, 468, 470, 473, 478], "fast": [38, 57, 63, 67, 93, 98, 138, 166, 180, 182, 187, 221, 230, 246, 250, 251, 254, 257, 265, 269, 294, 295, 304, 328, 340, 362, 364, 379, 381, 408, 423, 437, 457, 461, 462, 464, 470, 471, 472, 473, 474, 475, 477, 478], "pyunstable_long_compactvalu": [38, 469, 478], "speedup": [38, 295, 421, 426, 458, 462, 463, 464, 466, 469, 470, 471, 472, 476, 478], "neglig": [38, 340, 421], "pyobject_delitem": [39, 48, 56, 62, 460], "pymapping_check": [39, 56, 62], "pymapping_s": [39, 56, 62, 478], "pymapping_length": [39, 56], "pymapping_getitemstr": [39, 56], "pymapping_setitemstr": [39, 56, 478], "pymapping_delitem": 39, "del": [39, 48, 53, 57, 67, 72, 75, 84, 87, 92, 98, 115, 119, 141, 156, 174, 187, 192, 201, 221, 223, 226, 232, 243, 251, 260, 267, 279, 280, 287, 288, 289, 292, 295, 326, 340, 384, 397, 422, 423, 424, 425, 426, 427, 428, 430, 435, 436, 440, 447, 457, 458, 460, 462, 463, 464, 470, 478], "pymapping_delitemstr": 39, "pymapping_haskey": [39, 56], "pymapping_haskeystr": [39, 56], "pymapping_valu": [39, 56, 475, 478], "pymapping_item": [39, 56, 475, 478], "unmarshal": [40, 414, 460, 462, 474, 478], "py_marshal_vers": [40, 468, 478], "pymarshal_writelongtofil": [40, 468, 478], "pymarshal_writeobjecttofil": [40, 468, 478], "pymarshal_writeobjecttostr": [40, 468, 478], "pymarshal_readlongfromfil": 40, "pymarshal_readshortfromfil": 40, "pymarshal_readobjectfromfil": 40, "pymarshal_readlastobjectfromfil": 40, "aggress": [40, 340, 384, 462, 478], "pymarshal_readobjectfromstr": [40, 468, 478], "deal": [41, 62, 63, 67, 71, 102, 103, 106, 117, 122, 153, 154, 190, 192, 193, 201, 221, 254, 262, 278, 279, 288, 295, 314, 321, 323, 333, 361, 379, 385, 389, 408, 421, 426, 457, 459, 460, 461, 462, 465, 471, 473, 478], "aspect": [41, 71, 72, 89, 93, 100, 103, 107, 177, 179, 189, 246, 264, 289, 331, 389, 423, 470, 474], "prealloc": 41, "room": [41, 54, 339, 384, 429, 441, 465, 478], "polici": [41, 67, 100, 120, 123, 128, 132, 190, 192, 196, 197, 199, 201, 202, 203, 209, 221, 239, 281, 289, 331, 334, 337, 421, 451, 456, 458, 461, 464, 469, 472, 473, 474, 478], "adapt": [41, 67, 84, 89, 100, 119, 138, 172, 182, 187, 221, 226, 263, 293, 294, 328, 333, 337, 364, 379, 457, 458, 462, 464, 466, 468, 469, 474, 478], "peculiar": [41, 84, 123, 251, 289], "speed": [41, 63, 67, 72, 92, 99, 103, 143, 157, 173, 180, 182, 186, 212, 218, 222, 230, 246, 254, 257, 291, 292, 293, 295, 326, 337, 339, 346, 348, 356, 362, 379, 423, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "tradeoff": [41, 478], "deleg": [41, 62, 67, 98, 99, 100, 221, 222, 230, 263, 264, 265, 271, 295, 320, 380, 383, 385, 423, 425, 427, 465, 468, 470, 474, 476, 477, 478, 479], "corrupt": [41, 58, 92, 106, 143, 173, 208, 211, 239, 266, 267, 279, 295, 336, 340, 353, 456, 475, 476, 478], "writer": [41, 67, 72, 75, 106, 123, 133, 146, 154, 166, 189, 213, 242, 247, 254, 289, 315, 406, 408, 411, 450, 460, 469, 473, 475, 478], "calloc": [41, 473, 478], "bufsiz": [41, 67, 72, 117, 123, 291, 333, 344, 346, 353, 406, 407, 419, 461, 476, 478], "exclus": [41, 46, 62, 67, 103, 115, 146, 147, 173, 182, 211, 254, 258, 265, 266, 267, 287, 288, 289, 315, 336, 339, 340, 353, 375, 377, 398, 417, 421, 423, 425, 463, 471, 472, 473, 476, 477, 478], "accur": [41, 89, 102, 172, 203, 241, 271, 288, 304, 348, 353, 361, 362, 364, 377, 396, 417, 439, 461, 463, 464, 469, 470, 472, 474, 475, 476, 478], "footprint": [41, 91, 451, 471, 474, 476, 478], "procedur": [41, 71, 79, 94, 101, 118, 148, 154, 172, 304, 331, 342, 357, 379, 413, 414, 431, 436, 458, 459, 462, 470], "pythonmalloc": [41, 67, 184, 450, 451, 478], "shutdown": [41, 67, 86, 98, 100, 104, 115, 123, 132, 133, 137, 160, 162, 208, 209, 223, 244, 252, 263, 265, 279, 280, 329, 333, 334, 337, 360, 397, 400, 423, 425, 450, 463, 470, 472, 473, 475, 477, 478], "pymemallocatordomain": 41, "hint": [41, 67, 78, 84, 86, 87, 102, 116, 154, 163, 183, 198, 226, 237, 239, 242, 243, 250, 254, 258, 296, 340, 379, 380, 422, 423, 431, 468, 474, 475, 478, 479], "practic": [41, 62, 67, 73, 75, 83, 86, 91, 94, 95, 97, 99, 100, 102, 107, 117, 170, 173, 174, 182, 189, 190, 195, 221, 231, 238, 244, 247, 248, 251, 279, 280, 284, 301, 331, 336, 337, 340, 353, 361, 364, 381, 389, 406, 420, 423, 425, 458, 459, 460, 465, 467, 470, 472, 475, 478], "pyobject_malloc": [41, 56, 460, 462, 472, 474, 478], "pymem_malloc": [41, 56, 63, 65, 460, 462, 472, 474, 478], "nelem": 41, "elsiz": 41, "model": [41, 59, 67, 83, 84, 92, 123, 165, 179, 182, 190, 192, 201, 221, 250, 269, 279, 289, 314, 331, 337, 339, 360, 363, 379, 390, 406, 407, 410, 422, 428, 456, 457, 459, 460, 461, 462, 468, 470, 472, 473, 474, 475, 476, 478, 479], "ansi": [41, 67, 86, 117, 142, 172, 262, 289, 348, 361, 456, 457, 469, 471, 474, 476, 478], "pymem_calloc": [41, 56, 473, 478], "pymem_realloc": [41, 56, 65, 460, 462, 472], "pymem_new": [41, 63, 458], "pymem_res": 41, "lose": [41, 93, 103, 163, 179, 182, 207, 209, 239, 257, 265, 267, 314, 315, 336, 344, 457, 464, 470, 478], "pymem_del": [41, 458], "intercept": [41, 100, 136, 339, 348, 474, 478], "pyobject_calloc": [41, 56, 473, 478], "pyobject_realloc": [41, 56, 460, 462, 478], "pyobject_fre": [41, 56, 62, 460, 462, 474, 478], "pymalloc_debug": [41, 450, 478], "malloc_debug": [41, 450], "legend": 41, "pymemallocatorex": [41, 473], "new_siz": [41, 468], "pymemalloc": [41, 473], "pymem_domain_raw": [41, 450], "pymem_domain_mem": [41, 450, 474, 478], "pymem_domain_obj": [41, 450, 474], "reinstal": [41, 456], "contract": [41, 243, 340, 421], "impos": [41, 191, 258, 289, 292, 295, 317, 318, 340, 381, 429, 450], "substitut": [41, 67, 84, 86, 99, 100, 103, 109, 129, 140, 154, 160, 163, 174, 179, 182, 189, 246, 257, 268, 288, 289, 304, 315, 316, 317, 336, 340, 341, 354, 358, 373, 381, 398, 421, 422, 423, 425, 431, 442, 447, 456, 460, 462, 463, 464, 469, 470, 472, 473, 478, 479], "setup": [41, 67, 72, 75, 78, 91, 100, 107, 165, 183, 189, 218, 243, 252, 292, 334, 337, 357, 362, 379, 383, 384, 385, 448, 450, 451, 456, 457, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 474, 476, 478], "recogniz": [41, 157, 182, 478], "pattern": [41, 62, 67, 75, 84, 92, 99, 106, 139, 141, 159, 165, 174, 183, 185, 186, 187, 215, 218, 222, 243, 244, 250, 257, 260, 263, 271, 277, 279, 280, 284, 288, 289, 292, 293, 304, 314, 315, 328, 340, 341, 357, 358, 364, 366, 377, 381, 383, 384, 385, 397, 424, 425, 426, 430, 436, 451, 456, 458, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478], "0xcd": [41, 478], "pymem_cleanbyt": 41, "0xdd": [41, 478], "pymem_deadbyt": 41, "surround": [41, 78, 94, 103, 163, 171, 186, 221, 240, 243, 262, 341, 344, 369, 394, 422, 424, 425, 426, 430, 445, 451, 457, 462, 463, 464, 465, 466, 469, 474, 478], "0xfd": [41, 478], "pymem_forbiddenbyt": 41, "underflow": [41, 67, 182, 184, 286, 451, 474, 478], "treatment": [41, 48, 100, 190, 279, 389, 457, 465], "ask": [41, 86, 89, 91, 100, 157, 190, 229, 231, 239, 243, 254, 265, 288, 293, 315, 328, 335, 337, 340, 381, 390, 407, 408, 409, 417, 425, 427, 431, 456, 461, 462, 463, 464, 465, 478], "easier": [41, 75, 83, 86, 89, 91, 94, 96, 98, 102, 103, 112, 157, 165, 171, 189, 202, 246, 248, 255, 265, 289, 304, 309, 315, 340, 341, 353, 357, 369, 383, 384, 385, 389, 402, 429, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 478], "excess": [41, 84, 109, 119, 130, 143, 172, 182, 238, 263, 317, 361, 422, 425, 478], "overwritten": [41, 89, 100, 239, 265, 267, 292, 304, 328, 348, 381, 422, 464, 471, 478], "pymem_debug_serialno": [41, 478], "excel": [41, 67, 106, 171, 189, 196, 213, 379, 460, 461, 465], "breakpoint": [41, 67, 78, 84, 139, 141, 144, 181, 221, 243, 250, 293, 348, 450, 462, 470, 478], "captur": [41, 67, 91, 94, 100, 119, 165, 172, 179, 189, 261, 263, 289, 315, 333, 337, 341, 344, 348, 353, 357, 376, 381, 395, 424, 461, 468, 471, 472, 473, 475, 478], "instant": [41, 67, 91, 181, 289, 379], "bumpserialno": 41, "obmalloc": [41, 458, 460, 462, 472, 477, 478], "intact": [41, 100, 163, 179, 199, 201, 204, 214, 265, 341, 402, 461], "ve": [41, 75, 88, 89, 93, 94, 96, 97, 100, 103, 106, 111, 136, 149, 247, 267, 288, 292, 336, 364, 448, 457, 458, 459, 460, 461, 463, 464, 466, 472, 478], "provok": 41, "0xcb": [41, 474, 478], "0xdb": [41, 474, 478], "0xfb": [41, 474, 478], "crt": [41, 67, 337, 464, 472, 478], "512": [41, 128, 169, 231, 289, 324, 353, 419, 441, 462, 470, 474, 476, 478], "fix": [41, 54, 60, 62, 67, 76, 78, 83, 84, 88, 89, 91, 92, 94, 102, 103, 109, 111, 117, 119, 123, 148, 155, 157, 172, 173, 178, 179, 184, 189, 197, 221, 239, 243, 250, 257, 279, 284, 286, 289, 295, 315, 336, 339, 340, 341, 343, 344, 346, 360, 367, 381, 384, 402, 403, 422, 450, 457, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "kib": [41, 112, 133, 266, 289, 328, 360, 377, 476, 478], "virtualalloc": [41, 472], "virtualfre": 41, "mmap": [41, 67, 139, 209, 250, 256, 457, 463, 468, 470, 473, 474, 478], "munmap": 41, "pyobjectarenaalloc": 41, "pytracemalloc_track": [41, 475], "uintptr_t": 41, "pytracemalloc_untrack": [41, 475], "untrack": [41, 75, 466, 478], "rewritten": [41, 89, 132, 189, 190, 231, 279, 431, 457, 458, 459, 460, 463, 464, 466, 470, 471, 472, 474, 475, 476, 478], "inde": [41, 75, 134, 191, 337], "reduc": [41, 55, 67, 74, 77, 84, 94, 109, 123, 130, 173, 182, 220, 222, 231, 243, 254, 257, 289, 295, 304, 324, 337, 340, 357, 360, 384, 397, 404, 408, 416, 430, 451, 456, 457, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "label": [41, 67, 77, 93, 94, 154, 185, 187, 243, 267, 277, 288, 314, 327, 337, 341, 363, 364, 370, 381, 423, 456, 459, 460, 470, 472, 475, 478], "buf1": 41, "buf2": 41, "buf3": 41, "aim": [41, 71, 74, 97, 102, 106, 132, 266, 277, 348, 381, 408, 456, 459, 461, 462, 472, 476], "pymemoryview_fromobject": [42, 56], "discret": [42, 314, 334, 339, 476], "pymemoryview_frommemori": [42, 56, 471], "pybuf_read": 42, "pymemoryview_getcontigu": [42, 56], "buffertyp": 42, "ortran": 42, "pymemoryview_check": 42, "pymemoryview_get_buff": 42, "mview": 42, "pymemoryview_get_bas": 42, "pymethod_new": 43, "pyinstancemethod_typ": 43, "pyinstancemethod_check": 43, "pyinstancemethod_new": 43, "pyinstancemethod_funct": 43, "im": [43, 84, 91, 340], "pyinstancemethod_get_funct": 43, "pymethod_typ": [43, 92], "methodtyp": [43, 67, 92, 178, 380, 478], "pymethod_check": 43, "pymethod_funct": 43, "pymethod_get_funct": 43, "pymethod_self": 43, "pymethod_get_self": 43, "pymodule_typ": [44, 56], "moduletyp": [44, 67, 178, 246, 248, 380, 423, 427, 460, 469, 473, 478], "pymodule_check": 44, "pymodule_checkexact": 44, "pymodule_newobject": [44, 56], "__doc__": [44, 62, 67, 74, 79, 83, 86, 92, 93, 153, 156, 178, 186, 189, 207, 221, 222, 251, 285, 309, 316, 319, 380, 422, 423, 430, 435, 436, 445, 458, 459, 460, 465, 467, 470, 472, 473, 477, 478], "__package__": [44, 67, 178, 221, 246, 320, 380, 427, 445, 463, 467, 469, 471, 472, 474, 478], "pymodule_new": [44, 56], "pymodule_getdict": [44, 56], "__dict__": [44, 48, 60, 62, 67, 84, 87, 92, 98, 100, 113, 141, 145, 189, 221, 222, 246, 251, 263, 265, 293, 295, 304, 340, 380, 414, 422, 423, 427, 435, 458, 459, 464, 465, 467, 469, 473, 474, 478], "pymodule_": 44, "pymodule_getnameobject": [44, 56], "pymodule_getnam": [44, 56], "pymoduledef": [44, 56, 60, 70, 71, 72, 75, 89, 98, 477, 478], "m_size": [44, 75, 98, 477, 478], "pymodule_getdef": [44, 56], "pymodule_getfilenameobject": [44, 56], "pymodule_getfilenam": [44, 56], "unencod": [44, 106, 154, 460, 465, 470, 478], "pymoduledef_bas": [44, 56], "m_base": [44, 75], "pymoduledef_head_init": [44, 71, 72, 75], "m_name": [44, 75], "m_doc": [44, 75], "m_free": [44, 98, 477, 478], "3121": [44, 465, 478], "m_method": [44, 478], "pymoduledef_slot": 44, "m_slot": 44, "m_reload": 44, "m_travers": [44, 98, 477, 478], "py_mod_exec": [44, 477, 478], "m_clear": [44, 98, 477, 478], "collector": [44, 49, 62, 67, 72, 75, 84, 86, 94, 98, 210, 250, 279, 288, 311, 348, 357, 397, 406, 423, 451, 457, 459, 462, 463, 464, 466, 467, 469, 471, 472, 475, 477, 478], "pymodule_create2": [44, 56], "module_api_vers": 44, "python_api_vers": [44, 460], "pymodule_addobjectref": [44, 56, 75, 467, 478], "split": [44, 63, 67, 77, 83, 84, 100, 105, 117, 138, 152, 154, 163, 182, 186, 187, 192, 196, 198, 204, 209, 215, 218, 224, 226, 244, 257, 277, 287, 288, 289, 290, 293, 299, 303, 314, 315, 317, 327, 331, 336, 337, 340, 341, 344, 358, 359, 373, 381, 383, 389, 394, 402, 410, 430, 435, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478], "__new__": [44, 60, 62, 67, 75, 79, 84, 89, 92, 118, 139, 199, 207, 209, 221, 270, 274, 292, 295, 333, 377, 380, 384, 423, 469, 472, 474, 476, 478], "__init__": [44, 60, 62, 67, 75, 77, 78, 79, 84, 86, 89, 92, 99, 100, 104, 105, 111, 115, 117, 125, 130, 136, 145, 156, 157, 163, 165, 168, 171, 172, 179, 180, 186, 190, 209, 210, 221, 222, 234, 237, 241, 246, 247, 248, 249, 257, 258, 263, 264, 265, 277, 279, 292, 295, 298, 304, 311, 316, 329, 336, 341, 353, 357, 358, 360, 364, 377, 380, 381, 383, 384, 385, 394, 397, 402, 405, 409, 417, 423, 427, 435, 436, 445, 447, 457, 458, 459, 460, 462, 463, 467, 468, 469, 471, 474, 476, 478], "pyinit_modulenam": [44, 70], "pymoduledef_init": [44, 56], "py_mod_cr": 44, "create_modul": [44, 67, 246, 276, 418, 427, 467, 473, 474, 478], "451": [44, 67, 86, 156, 237, 246, 298, 320, 348, 427, 467, 469, 473, 478], "loop": [44, 63, 65, 67, 72, 91, 94, 99, 100, 103, 119, 120, 121, 122, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 153, 155, 172, 173, 180, 182, 185, 187, 192, 201, 214, 220, 221, 228, 250, 253, 265, 279, 293, 304, 305, 315, 328, 329, 333, 334, 337, 340, 341, 344, 348, 357, 360, 362, 364, 376, 379, 383, 384, 407, 408, 415, 422, 423, 424, 425, 426, 430, 431, 435, 436, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "hierarchi": [44, 67, 84, 96, 99, 100, 182, 221, 246, 250, 251, 254, 263, 264, 286, 295, 298, 325, 329, 336, 364, 370, 371, 381, 383, 405, 408, 423, 427, 431, 460, 462, 465, 478, 479], "symlink": [44, 67, 115, 139, 159, 253, 288, 289, 292, 307, 328, 353, 394, 445, 454, 455, 461, 463, 467, 470, 471, 472, 476, 478], "exec_modul": [44, 67, 98, 246, 276, 418, 427, 467, 469, 472, 473, 474, 478], "py_mod_multiple_interpreters_not_support": 44, "py_mod_multiple_interpreters_support": 44, "py_mod_per_interpreter_gil_support": [44, 478], "hood": [44, 99, 100, 103, 357, 384, 385, 462, 463, 470], "pymodule_execdef": [44, 56, 473], "pymodule_fromdefandspec2": [44, 56, 473], "pymodule_setdocstr": [44, 56], "pymodule_addfunct": [44, 56], "lack": [44, 45, 84, 97, 171, 209, 212, 243, 246, 279, 289, 331, 337, 343, 355, 417, 424, 425, 456, 457, 458, 463, 465, 471, 472, 473, 475, 478], "add_spam": 44, "spam": [44, 72, 76, 100, 103, 107, 117, 166, 171, 172, 214, 221, 222, 226, 238, 239, 241, 246, 251, 254, 264, 292, 303, 309, 315, 317, 326, 330, 336, 340, 344, 353, 376, 380, 381, 384, 385, 390, 408, 417, 423, 425, 427, 435, 436, 438, 441, 444, 445, 457, 463, 473, 478], "pymodule_addobject": [44, 56, 72, 75, 457, 467, 478], "easi": [44, 62, 67, 72, 83, 84, 88, 89, 91, 97, 98, 100, 103, 117, 134, 148, 163, 165, 179, 182, 187, 189, 190, 200, 204, 222, 224, 264, 288, 289, 295, 314, 327, 333, 337, 340, 353, 359, 383, 384, 385, 402, 406, 423, 425, 458, 459, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 478, 479], "stole": 44, "pymodule_addintconst": [44, 56, 457], "pymodule_addstringconst": [44, 56, 457], "pymodule_addintmacro": [44, 463], "af_inet": [44, 67, 100, 104, 123, 279, 333, 334, 337, 357, 463, 478], "pymodule_addstringmacro": [44, 463], "pymodule_addtyp": [44, 56, 477, 478], "tp_name": [44, 60, 62, 74, 75, 89, 478], "pystate_findmodul": [44, 56], "pystate_addmodul": [44, 56, 478], "beforehand": [44, 427], "unnecessari": [44, 72, 84, 99, 117, 130, 267, 279, 280, 284, 340, 348, 377, 381, 385, 389, 405, 431, 458, 459, 461, 464, 469, 473, 476, 478], "harmless": [44, 72, 89, 189, 371, 421, 478], "pystate_removemodul": [44, 56], "suffici": [45, 62, 72, 96, 97, 98, 99, 112, 119, 154, 179, 180, 182, 189, 271, 289, 308, 337, 340, 360, 383, 385, 398, 410, 427, 431, 456, 470, 471, 474, 475, 478], "pynone_check": 45, "pynumber_check": [46, 56, 476], "o1": [46, 48, 53, 77, 177], "o2": [46, 48, 53, 77, 177, 302, 397], "pynumber_subtract": [46, 54, 56], "subtract": [46, 67, 138, 156, 178, 179, 182, 255, 266, 271, 286, 304, 379, 414, 425, 457, 460, 463, 464, 470, 475, 478], "pynumber_multipli": [46, 56], "multipli": [46, 67, 71, 75, 138, 172, 179, 182, 195, 257, 265, 286, 304, 314, 340, 341, 348, 414, 425, 457, 460, 461, 463, 470, 478], "pynumber_matrixmultipli": [46, 56, 473], "matrix": [46, 67, 84, 147, 221, 379, 397, 421, 425, 437, 458, 476, 478], "pynumber_floordivid": [46, 56], "floor": [46, 67, 84, 86, 102, 162, 179, 182, 189, 217, 221, 271, 285, 286, 340, 379, 423, 425, 444, 459, 463, 476, 477, 478], "divid": [46, 67, 83, 89, 91, 103, 138, 163, 179, 182, 187, 189, 190, 221, 243, 271, 280, 286, 292, 304, 362, 370, 414, 430, 438, 463, 470, 471, 472, 476, 478], "pynumber_truedivid": [46, 56], "approxim": [46, 63, 67, 84, 151, 154, 173, 177, 182, 186, 189, 198, 209, 217, 243, 271, 276, 279, 286, 343, 344, 357, 376, 379, 383, 423, 425, 427, 439, 441, 456, 463, 464, 475, 478], "mathemat": [46, 67, 94, 103, 179, 182, 250, 257, 271, 286, 314, 340, 423, 425, 461, 463, 473, 478], "pynumber_remaind": [46, 56], "remaind": [46, 67, 74, 96, 103, 152, 179, 182, 204, 257, 264, 271, 286, 288, 315, 340, 361, 364, 425, 444, 463, 475, 478], "pynumber_divmod": [46, 56], "divmod": [46, 67, 84, 179, 182, 221, 250, 285, 286, 340, 423, 425, 439, 445, 476, 478], "pynumber_pow": [46, 56], "o3": [46, 71], "pow": [46, 67, 84, 88, 119, 162, 165, 220, 221, 250, 257, 260, 271, 279, 285, 286, 287, 340, 415, 423, 425, 426, 445, 459, 468, 470, 476, 478], "pynumber_neg": [46, 56], "pynumber_posit": [46, 56], "pynumber_absolut": [46, 56], "abs": [46, 62, 67, 94, 151, 179, 182, 220, 221, 250, 271, 285, 286, 287, 340, 376, 377, 379, 381, 423, 425, 435, 437, 445, 468, 475, 478], "pynumber_invert": [46, 56], "bitwis": [46, 57, 67, 89, 91, 93, 94, 103, 173, 174, 189, 207, 211, 278, 289, 315, 325, 333, 336, 401, 423, 426, 428, 460, 463, 464, 469, 474, 478], "pynumber_lshift": [46, 56], "shift": [46, 67, 173, 174, 179, 182, 187, 243, 279, 286, 289, 340, 371, 402, 423, 428, 457, 459, 461, 463, 464, 468, 471, 478], "pynumber_rshift": [46, 56], "pynumber_and": [46, 54, 56], "pynumber_xor": [46, 54, 56], "pynumber_or": [46, 54, 56], "pynumber_inplaceadd": [46, 56], "pynumber_inplacesubtract": [46, 54, 56], "pynumber_inplacemultipli": [46, 56], "pynumber_inplacematrixmultipli": [46, 56, 473], "pynumber_inplacefloordivid": [46, 56], "pynumber_inplacetruedivid": [46, 56], "pynumber_inplaceremaind": [46, 56], "pynumber_inplacepow": [46, 56], "pynumber_inplacelshift": [46, 56], "pynumber_inplacershift": [46, 56], "pynumber_inplaceand": [46, 54, 56], "pynumber_inplacexor": [46, 54, 56], "pynumber_inplaceor": [46, 54, 56], "pynumber_long": [46, 56, 466, 476], "pynumber_float": [46, 56, 476], "pynumber_index": [46, 56, 78, 462, 467, 478], "pynumber_tobas": [46, 56, 478], "marker": [46, 67, 106, 114, 146, 154, 166, 187, 189, 221, 251, 254, 266, 293, 295, 336, 337, 372, 381, 395, 451, 471, 474, 475, 478], "0b": [46, 221, 288, 340, 341, 463, 470], "0o": [46, 84, 221, 340, 341, 463, 470], "pynumber_asssize_t": [46, 56], "clip": [46, 55, 89, 173, 431], "py_ssize_t_min": [46, 55], "pyindex_check": [46, 56, 477, 478], "nb_index": [46, 62, 462], "tp_as_numb": [46, 62, 74, 477, 478], "pyobject_ascharbuff": [47, 56, 478], "buffer_len": 47, "pyobject_asreadbuff": [47, 56, 478], "pyobject_checkreadbuff": [47, 56, 478], "pyobject_aswritebuff": [47, 56, 478], "py_notimpl": [48, 62, 63, 74, 458], "notimpl": [48, 67, 93, 113, 164, 179, 209, 222, 246, 250, 285, 295, 380, 384, 423, 425, 445, 464, 465, 467, 472, 477, 478], "py_return_notimpl": 48, "pyobject_print": [48, 54, 72, 478], "fp": [48, 58, 65, 67, 77, 94, 117, 148, 182, 184, 192, 196, 197, 200, 203, 219, 226, 238, 252, 258, 272, 289, 300, 350, 355, 374, 377, 388, 390, 421, 461, 478], "pyobject_hasattr": [48, 56], "attr_nam": [48, 357, 459], "hasattr": [48, 67, 86, 92, 100, 107, 221, 222, 250, 251, 279, 316, 340, 348, 353, 362, 381, 383, 384, 422, 423, 427, 445, 460, 463, 469, 470, 472, 475, 478], "__getattr__": [48, 57, 62, 67, 74, 84, 92, 139, 172, 212, 221, 251, 295, 319, 340, 380, 384, 423, 425, 442, 459, 463, 469, 470, 471, 472, 475, 478], "__getattribute__": [48, 62, 67, 79, 86, 92, 221, 251, 295, 423, 459, 463, 470, 475, 478], "pyobject_getattr": [48, 56, 60, 62], "pyobject_hasattrstr": [48, 56, 478], "pyobject_getattrstr": [48, 56, 71, 72, 78, 468], "pyobject_genericgetattr": [48, 56, 62, 92], "getter": [48, 49, 56, 67, 75, 92, 113, 163, 221, 222, 340, 360, 390, 463, 469, 472, 473, 478], "meant": [48, 60, 99, 100, 102, 111, 119, 130, 136, 138, 154, 209, 226, 246, 304, 333, 357, 364, 381, 390, 417, 426, 456, 462, 463, 464, 467, 470, 471, 472, 473, 475, 476, 478], "tp_getattro": [48, 62, 74, 478], "mro": [48, 60, 67, 84, 86, 113, 177, 193, 340, 380, 435, 475, 478], "outlin": [48, 99, 100, 132, 136, 163, 217, 240, 379, 423, 478], "pyobject_setattr": [48, 56, 62, 478], "favour": [48, 53, 77, 246, 251, 462, 471, 474, 475, 477, 478], "pyobject_delattr": 48, "plan": [48, 89, 102, 130, 295, 379, 381, 398, 457, 461, 462, 463, 464, 465, 469, 470, 472, 478], "pyobject_setattrstr": [48, 56, 78, 478], "pyobject_delattrstr": 48, "pyobject_genericsetattr": [48, 56, 62], "setter": [48, 49, 56, 67, 75, 92, 113, 221, 222, 340, 360, 384, 390, 463, 472, 478], "tp_setattro": [48, 62, 74], "pyobject_genericgetdict": [48, 56, 62, 478], "pyobject_genericsetdict": [48, 56], "_pyobject_getdictptr": 48, "pyobject_richcompar": [48, 56, 62, 74], "opid": 48, "py_lt": [48, 62, 63, 74], "py_l": [48, 62, 63, 74], "py_eq": [48, 62, 63, 74], "py_n": [48, 62, 63, 74], "py_gt": [48, 62, 63, 74], "py_g": [48, 62, 63, 74], "pyobject_richcomparebool": [48, 54, 56, 74, 478], "pyobject_format": [48, 56, 187], "format_spec": [48, 119, 217, 221, 341, 423, 430, 463, 478], "pyobject_repr": [48, 54, 56, 62, 63, 472, 473, 478], "pyobject_ascii": [48, 56], "pyobject_str": [48, 56, 62, 63, 472], "pyobject_byt": [48, 56], "pyobject_issubclass": [48, 56, 60, 473, 478], "cls": [48, 60, 62, 84, 89, 92, 93, 113, 119, 157, 177, 187, 199, 207, 209, 221, 222, 251, 258, 292, 295, 336, 357, 377, 380, 381, 383, 422, 423, 426, 431, 438, 459, 461, 468, 470, 474, 475, 478], "against": [48, 71, 72, 74, 75, 84, 93, 100, 102, 103, 109, 117, 119, 123, 133, 138, 169, 172, 177, 186, 187, 189, 231, 247, 251, 274, 288, 289, 292, 301, 303, 304, 307, 310, 315, 320, 327, 329, 337, 338, 340, 353, 357, 360, 364, 370, 379, 380, 381, 383, 384, 385, 395, 404, 406, 407, 408, 409, 414, 415, 416, 421, 422, 423, 427, 450, 451, 457, 458, 459, 460, 461, 462, 469, 470, 472, 473, 475, 476, 478], "__subclasscheck__": [48, 60, 67, 113, 384, 423, 478], "3119": [48, 67, 113, 157, 423, 465, 479], "__mro__": [48, 62, 67, 84, 92, 113, 193, 221, 340, 381, 423], "__bases__": [48, 62, 67, 75, 199, 221, 295, 340, 380, 423, 460, 478], "pyobject_isinst": [48, 56, 62, 473, 478], "inst": [48, 92, 431, 438], "__instancecheck__": [48, 67, 384, 423, 478], "__class__": [48, 67, 79, 84, 86, 92, 93, 98, 179, 183, 207, 221, 246, 295, 340, 384, 395, 423, 435, 459, 460, 463, 474, 478], "py_hash_t": [48, 62, 74, 470], "pyobject_hash": [48, 54, 56, 62, 468], "pyobject_hashnotimpl": [48, 56, 62, 463], "tp_hash": [48, 62, 74, 463], "pyobject_istru": [48, 54, 56, 478], "pyobject_not": [48, 56, 478], "pyobject_typ": [48, 56], "realli": [48, 62, 71, 74, 76, 84, 87, 89, 91, 94, 103, 106, 111, 179, 187, 196, 199, 201, 267, 279, 284, 289, 324, 340, 348, 360, 361, 379, 382, 408, 423, 430, 431, 436, 457, 458, 459, 460, 461, 462, 465, 469, 474, 478], "py_typ": [48, 57, 60, 62, 74, 75, 89, 98, 463, 468, 476, 477, 478], "pyobject_typecheck": [48, 74, 478], "pyobject_s": [48, 56, 62, 478], "pyobject_lengthhint": [48, 472], "defaultvalu": [48, 264], "estim": [48, 67, 171, 182, 284, 286, 314, 357, 423, 478], "__length_hint__": [48, 67, 287, 423, 472, 478], "length_hint": [48, 67, 220, 287, 423, 472], "pyobject_dir": [48, 56], "dir": [48, 67, 77, 79, 84, 93, 109, 111, 159, 180, 185, 206, 207, 219, 221, 250, 252, 262, 288, 289, 290, 292, 319, 340, 344, 353, 355, 364, 375, 384, 394, 417, 423, 440, 446, 451, 460, 463, 467, 468, 469, 470, 471, 478], "pyobject_getait": [48, 56, 478], "aiter": [48, 67, 221, 250, 423, 467, 474, 478], "pyobject_gettypedata": [48, 56, 60, 469, 478], "pytype_spec": [48, 56, 60, 62, 98, 469, 478], "basics": [48, 57, 60, 469, 478], "pytype_gettypedatas": [48, 56, 469], "memset": [48, 67, 115, 172, 478], "pyobject_getitemdata": [48, 469], "py_tpflags_items_at_end": [48, 60, 62, 469, 478], "tp": [49, 67, 333, 357, 379, 381, 478], "visibl": [50, 59, 67, 72, 84, 86, 89, 91, 94, 100, 123, 125, 136, 154, 163, 173, 175, 186, 192, 201, 218, 243, 251, 257, 267, 333, 355, 371, 384, 390, 395, 424, 458, 461, 462, 469, 470, 475, 476, 478], "tmp": [50, 75, 100, 106, 165, 219, 241, 267, 328, 355, 427, 451, 457, 460, 461, 462, 463, 464, 470, 476], "fli": [50, 67, 74, 101, 182, 221, 242, 422, 434], "pyunstable_perfmapstate_init": [50, 478], "pid": [50, 67, 96, 123, 129, 134, 139, 160, 163, 274, 279, 289, 295, 305, 318, 333, 344, 357, 462, 464, 477, 478], "pyunstable_writeperfmapentri": [50, 478], "code_addr": 50, "code_s": 50, "entry_nam": 50, "7f3529fcf759": 50, "pyunstable_perfmapstate_fini": [50, 478], "shut": [50, 71, 100, 123, 241, 324, 329, 333, 334, 348, 379, 402, 447, 450, 460, 464, 473, 477, 478], "shouldn": [50, 63, 75, 87, 89, 98, 103, 130, 206, 263, 268, 298, 323, 337, 341, 348, 383, 390, 458, 459, 461, 462, 463, 466, 474, 478], "scenario": [50, 89, 99, 100, 132, 182, 184, 263, 264, 316, 383, 384, 385, 390, 427, 451, 472, 474, 478], "fork": [50, 58, 67, 72, 83, 100, 115, 137, 139, 162, 209, 223, 253, 274, 279, 289, 305, 324, 328, 334, 337, 344, 386, 460, 464, 469, 472, 475, 476, 478], "py_refcnt": [51, 57, 75, 463, 467, 478], "py_set_refcnt": [51, 467, 478], "refcnt": [51, 467], "py_newref": [51, 56, 75, 86, 467, 478], "py_xincref": [51, 72, 468, 476, 478], "py_xnewref": [51, 56, 467, 478], "attr": [51, 62, 67, 78, 89, 91, 119, 173, 187, 236, 240, 247, 251, 269, 277, 287, 288, 295, 310, 357, 364, 383, 384, 408, 410, 411, 412, 422, 423, 426, 431, 457, 458, 461, 468, 471, 478], "py_clear": [51, 62, 72, 74, 75, 461, 469, 478], "py_setref": [51, 75, 469, 478], "dst": [51, 67, 139, 172, 178, 179, 289, 328, 336, 361, 471], "py_xsetref": [51, 75, 469, 478], "pyeval_getbuiltin": [52, 56], "pyeval_getloc": [52, 56], "pyeval_getglob": [52, 56], "pyeval_getfuncnam": [52, 56], "pyeval_getfuncdesc": [52, 56], "pysequence_check": [53, 56, 62], "pysequence_s": [53, 56, 62, 478], "pysequence_concat": [53, 56, 62], "pysequence_repeat": [53, 56, 62], "pysequence_inplaceconcat": [53, 56, 62], "pysequence_inplacerepeat": [53, 56, 62], "th": [53, 171, 187, 192, 221, 262, 271, 279, 319, 339, 340, 361, 379, 405, 423, 457, 460, 462], "pysequence_getslic": [53, 56, 62], "i1": [53, 186, 274, 414, 461], "i2": [53, 186, 274, 414, 461], "pysequence_delitem": [53, 56, 478], "pysequence_setslic": [53, 56, 62], "pysequence_delslic": [53, 56, 62], "pysequence_count": [53, 56], "occurr": [53, 63, 84, 103, 119, 137, 156, 163, 173, 182, 192, 201, 224, 267, 280, 288, 315, 324, 340, 353, 367, 395, 408, 423, 424, 425, 426, 429, 430, 431, 459, 461, 462, 465, 470, 478], "pysequence_contain": [53, 56, 62], "pysequence_index": [53, 56], "pysequence_list": [53, 56], "pysequence_tupl": [53, 56, 478], "pysequence_fast": [53, 56], "pysequence_fast_get_s": 53, "faster": [53, 62, 67, 83, 84, 92, 103, 123, 136, 172, 173, 182, 203, 222, 230, 231, 243, 257, 279, 289, 304, 337, 340, 379, 384, 421, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478], "pysequence_fast_get_item": 53, "pysequence_fast_item": 53, "reloc": [53, 463, 478], "pysequence_item": 53, "frozenset": [54, 67, 86, 119, 178, 183, 221, 250, 270, 295, 348, 381, 383, 397, 422, 423, 425, 445, 461, 462, 463, 468, 470, 477, 478], "pysetobject": 54, "medium": [54, 93, 174, 182, 421, 461, 462, 478], "pyset_typ": [54, 56], "pyfrozenset_typ": [54, 56], "pyset_check": 54, "pyfrozenset_check": 54, "pyanyset_check": 54, "pyset_checkexact": [54, 467, 478], "pyanyset_checkexact": 54, "pyfrozenset_checkexact": 54, "pyset_new": [54, 56, 462], "pyfrozenset_new": [54, 56, 462], "pyset_s": [54, 56, 462], "anyset": 54, "pyset_get_s": 54, "pyset_contain": [54, 56, 462], "__contains__": [54, 57, 62, 67, 79, 84, 86, 93, 96, 157, 178, 190, 192, 201, 207, 220, 257, 267, 281, 287, 340, 384, 402, 411, 423, 425, 457, 460, 461, 463, 478], "unhash": [54, 77, 177, 340, 383, 423, 425, 467, 477, 478], "pyset_add": [54, 56, 462], "grow": [54, 59, 84, 100, 189, 222, 265, 316, 371, 457, 461, 463, 464, 470, 478], "pyset_discard": [54, 56, 462], "miss": [54, 67, 102, 103, 119, 156, 160, 166, 171, 172, 177, 182, 192, 195, 201, 207, 222, 231, 243, 246, 247, 251, 257, 263, 272, 275, 288, 289, 292, 311, 315, 333, 337, 339, 341, 344, 357, 361, 362, 370, 375, 381, 384, 389, 390, 420, 422, 423, 425, 426, 427, 436, 457, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "pyset_pop": [54, 56], "pyset_clear": [54, 56], "pyslice_typ": [55, 56], "pyslice_check": 55, "pyslice_new": [55, 56], "step": [55, 62, 67, 71, 72, 76, 83, 84, 89, 92, 94, 98, 101, 102, 103, 107, 109, 117, 119, 138, 141, 148, 152, 154, 165, 172, 181, 182, 187, 189, 221, 226, 238, 243, 246, 257, 263, 271, 277, 279, 288, 289, 293, 314, 315, 334, 336, 340, 348, 353, 363, 371, 379, 385, 394, 409, 416, 422, 423, 425, 431, 436, 439, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 478], "pyslice_getindic": [55, 56], "treat": [55, 57, 58, 60, 62, 63, 65, 67, 83, 93, 94, 97, 98, 102, 103, 117, 136, 138, 151, 154, 163, 173, 177, 179, 182, 184, 186, 189, 190, 199, 201, 212, 217, 222, 239, 241, 254, 255, 257, 263, 264, 267, 271, 288, 292, 315, 327, 331, 336, 337, 340, 341, 344, 353, 357, 359, 362, 364, 367, 371, 381, 383, 389, 390, 395, 396, 402, 407, 408, 422, 423, 424, 425, 430, 431, 456, 457, 459, 462, 463, 464, 465, 471, 474, 476, 477, 478], "pysliceobject": 55, "pyslice_getindicesex": [55, 56, 475, 478], "slicelength": 55, "manner": [55, 72, 84, 89, 91, 100, 163, 241, 264, 266, 288, 292, 303, 307, 309, 315, 317, 344, 381, 383, 395, 410, 422, 423, 427, 451, 460, 462, 463, 478], "pyslice_unpack": [55, 56, 475, 478], "pyslice_adjustindic": [55, 56, 475, 478], "0x03050400": [55, 475, 478], "0x03060000": [55, 475, 478], "0x03060100": [55, 475, 478], "boost": [55, 78, 222, 461, 478], "py_ellipsi": [55, 426], "387": [56, 209], "stabil": [56, 257, 468, 478], "exepect": 56, "pyunstabl": 56, "subset": [56, 94, 102, 154, 163, 173, 231, 243, 244, 249, 253, 258, 265, 267, 291, 295, 310, 324, 328, 333, 340, 353, 360, 368, 405, 408, 410, 417, 425, 460, 462, 464, 473, 475, 478], "_py_internalst": 56, "notic": [56, 72, 75, 88, 89, 98, 99, 100, 103, 107, 109, 129, 130, 154, 163, 169, 180, 182, 198, 214, 246, 254, 265, 279, 328, 333, 336, 350, 357, 364, 379, 381, 421, 423, 425, 456, 458, 460, 464, 470, 471, 475, 476, 478], "bugfix": [56, 79, 88, 102, 457, 458, 459, 460, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "project": [56, 69, 74, 76, 83, 84, 85, 90, 100, 102, 108, 109, 119, 148, 163, 179, 189, 206, 219, 226, 231, 246, 247, 257, 288, 303, 310, 381, 383, 384, 416, 417, 420, 421, 429, 451, 454, 456, 457, 460, 463, 464, 465, 469, 470, 471, 472, 474, 477, 478], "spend": [56, 318, 457, 478], "hardcod": [56, 172, 253, 263, 265, 455, 472, 478], "0x030a0000": 56, "0x03020000": 56, "python39": 56, "abi3": [56, 471], "mymodul": [56, 78, 99, 226, 384, 385, 395, 464, 470], "prereleas": [56, 469, 478], "pybaseobject_typ": [56, 62], "pybytearrayiter_typ": 56, "pybytesiter_typ": 56, "pybytes_decodeescap": [56, 478], "pybytes_repr": [56, 478], "pycfunctionwithkeyword": [56, 57], "pycfunction_cal": [56, 478], "pycfunction_getflag": 56, "pycfunction_getfunct": 56, "pycfunction_getself": 56, "pycfunction_new": [56, 478], "pycfunction_newex": [56, 478], "pycfunction_typ": 56, "pycmethod_new": [56, 478], "pycapsule_typ": 56, "pyclassmethoddescr_typ": 56, "pydictitems_typ": 56, "pydictiteritem_typ": 56, "pydictiterkey_typ": 56, "pydictitervalue_typ": 56, "pydictkeys_typ": 56, "pydictproxy_typ": 56, "pydictreviteritem_typ": 56, "pydictreviterkey_typ": 56, "pydictrevitervalue_typ": 56, "pydictvalues_typ": 56, "pyellipsis_typ": 56, "pyenum_typ": 56, "pyerr_display": [56, 467, 469, 478], "pyerr_programtext": 56, "pyeval_callfunct": [56, 477, 478], "pyeval_callmethod": [56, 477, 478], "pyeval_callobjectwithkeyword": [56, 477, 478], "pyeval_evalcod": [56, 65, 101, 467, 478], "pyeval_evalcodeex": [56, 65, 478], "pyeval_evalfram": [56, 65], "pyeval_evalframeex": [56, 65, 472, 478], "pyexc_baseexceptiongroup": 56, "pyexc_encodingwarn": 56, "pyexceptionclass_nam": [56, 476, 478], "pyfilter_typ": 56, "pygetsetdescr_typ": 56, "pylistiter_typ": 56, "pylistreviter_typ": 56, "pylongrangeiter_typ": 56, "pylong_getinfo": 56, "pymap_typ": 56, "pymemberdescr_typ": 56, "pymember_geton": [56, 57, 92, 469], "pymember_seton": [56, 57, 469], "pymemoryview_typ": 56, "pymethoddescr_typ": 56, "pymoduledef_typ": 56, "pyos_afterfork": [56, 58, 475, 478], "pyos_afterfork_par": [56, 58, 289, 475, 478], "pyos_beforefork": [56, 58, 289, 475, 478], "pyos_fspath": [56, 58, 474, 478], "pyos_inputhook": [56, 65, 469, 478], "pyos_interruptoccur": [56, 478], "pyos_getsig": [56, 58, 457], "pyos_mystricmp": [56, 478], "pyos_mystrnicmp": [56, 478], "pyos_setsig": [56, 58, 457, 478], "pyos_sighandler_t": [56, 58], "pyos_strtol": 56, "pyos_strtoul": 56, "ob_refcnt": [56, 62, 467, 478], "ob_typ": [56, 62, 75, 468, 478], "pyobject_clearweakref": [56, 62, 66, 74, 469], "pyobject_delitemstr": [56, 460], "pyobject_selfit": 56, "pyrangeiter_typ": 56, "pyrange_typ": [56, 462], "pyreversed_typ": 56, "pysequence_in": 56, "pysetiter_typ": 56, "pystructsequence_desc": [56, 59, 475, 478], "pystructsequence_field": [56, 59, 475, 478], "pystructsequence_getitem": [56, 59], "pystructsequence_new": [56, 59], "pystructsequence_newtyp": [56, 59, 478], "pystructsequence_setitem": [56, 59], "pystructsequence_unnamedfield": [56, 59, 477, 478], "pysuper_typ": 56, "pysys_addwarnoptionunicod": [56, 58, 468, 475, 478], "pysys_formatstderr": [56, 58], "pysys_formatstdout": [56, 58], "pysys_getxopt": [56, 58], "pysys_haswarnopt": [56, 468, 478], "pysys_setobject": [56, 58], "pysys_setpath": [56, 58, 468, 478], "pysys_writestderr": [56, 58], "pysys_writestdout": [56, 58], "pythread_getinfo": 56, "pythread_acquire_lock": [56, 478], "pythread_acquire_lock_tim": [56, 478], "pythread_allocate_lock": 56, "pythread_exit_thread": [56, 478], "pythread_free_lock": 56, "pythread_get_stacks": 56, "pythread_get_thread_id": [56, 475, 478], "pythread_get_thread_native_id": [56, 478], "pythread_init_thread": 56, "pythread_release_lock": [56, 478], "pythread_set_stacks": 56, "pythread_start_new_thread": [56, 475, 478], "pytraceback_her": [56, 478], "pytraceback_print": [56, 474, 478], "pytraceback_typ": 56, "pytupleiter_typ": 56, "pytuple_getitem": [56, 59, 72, 78], "pytuple_getslic": [56, 59], "pytuple_pack": [56, 59, 78, 461], "pytuple_s": [56, 59, 78], "pytuple_typ": [56, 59], "pytype_clearcach": [56, 60], "pytype_frommetaclass": [56, 60, 62, 469, 478], "pytype_frommoduleandspec": [56, 60, 62, 89, 98, 467, 469, 477, 478], "pytype_genericalloc": [56, 60, 62, 476], "pytype_genericnew": [56, 60, 62, 75], "pytype_getflag": [56, 60, 478], "pytype_getmodul": [56, 60, 98, 477, 478], "pytype_getmodulest": [56, 60, 89, 98, 477, 478], "pytype_getnam": [56, 60, 468, 478], "pytype_getqualnam": [56, 60, 468, 478], "pytype_getslot": [56, 60, 467, 472, 478], "pytype_issubtyp": [56, 60], "pytype_modifi": [56, 60, 62, 478], "pytype_slot": [56, 60], "pytype_typ": [56, 60, 62, 469, 478], "pyunicodeiter_typ": 56, "pyunicode_append": 56, "pyunicode_appendanddel": 56, "pyunicode_asasciistr": [56, 63, 471], "pyunicode_ascharmapstr": [56, 63], "pyunicode_asdecodedobject": [56, 474, 478], "pyunicode_asdecodedunicod": [56, 474, 478], "pyunicode_asencodedobject": [56, 471, 474, 478], "pyunicode_asencodedstr": [56, 63, 478], "pyunicode_asencodedunicod": [56, 474, 478], "pyunicode_aslatin1str": [56, 63, 471], "pyunicode_asmbcsstr": [56, 63, 471], "pyunicode_asrawunicodeescapestr": [56, 63, 471], "pyunicode_asucs4": [56, 63, 471], "pyunicode_asucs4copi": [56, 63, 467, 471], "pyunicode_asutf16str": [56, 63], "pyunicode_asutf32str": [56, 63], "pyunicode_asutf8ands": [56, 63, 467, 475, 478], "pyunicode_asutf8str": [56, 63, 471], "pyunicode_asunicodeescapestr": [56, 63, 471], "pyunicode_aswidechar": [56, 63, 478], "pyunicode_aswidecharstr": [56, 63, 467, 471, 475, 478], "pyunicode_buildencodingmap": [56, 478], "pyunicode_compar": [56, 63, 467, 471], "pyunicode_comparewithasciistr": [56, 63, 470, 478], "pyunicode_concat": [56, 63, 471], "pyunicode_contain": [56, 63], "pyunicode_count": [56, 63], "pyunicode_decod": [56, 63, 478], "pyunicode_decodeascii": [56, 63], "pyunicode_decodecharmap": [56, 63], "pyunicode_decodecodepagest": 56, "pyunicode_decodefsdefault": [56, 63, 71], "pyunicode_decodefsdefaultands": [56, 58, 63], "pyunicode_decodelatin1": [56, 63], "pyunicode_decodelocal": [56, 63], "pyunicode_decodelocaleands": [56, 58, 63, 475], "pyunicode_decodembc": [56, 63], "pyunicode_decodembcsst": [56, 63], "pyunicode_decoderawunicodeescap": [56, 63], "pyunicode_decodeutf16": [56, 63], "pyunicode_decodeutf16st": [56, 63], "pyunicode_decodeutf32": [56, 63], "pyunicode_decodeutf32st": [56, 63], "pyunicode_decodeutf7": [56, 63], "pyunicode_decodeutf7st": [56, 63], "pyunicode_decodeutf8": [56, 63], "pyunicode_decodeutf8st": [56, 63, 478], "pyunicode_decodeunicodeescap": [56, 63], "pyunicode_encodecodepag": [56, 63, 471, 478], "pyunicode_encodefsdefault": [56, 58, 63, 478], "pyunicode_encodelocal": [56, 58, 63, 475, 478], "pyunicode_fsdecod": [56, 63, 469, 474, 478], "pyunicode_find": [56, 63], "pyunicode_findchar": [56, 63, 467, 471, 475, 478], "pyunicode_format": [56, 63], "pyunicode_fromencodedobject": [56, 63], "pyunicode_fromformatv": [56, 58, 63, 469, 478], "pyunicode_fromobject": [56, 63], "pyunicode_fromordin": 56, "pyunicode_fromstringands": [56, 63, 467, 478], "pyunicode_fromwidechar": [56, 63, 471], "pyunicode_getdefaultencod": 56, "pyunicode_getlength": [56, 63, 467, 471], "pyunicode_internfromstr": [56, 63], "pyunicode_interninplac": [56, 63, 467, 478], "pyunicode_isidentifi": [56, 63, 478], "pyunicode_join": [56, 63, 471], "pyunicode_partit": 56, "pyunicode_rpartit": 56, "pyunicode_rsplit": 56, "pyunicode_readchar": [56, 63, 471], "pyunicode_replac": [56, 63], "pyunicode_res": 56, "pyunicode_richcompar": [56, 63], "pyunicode_split": [56, 63], "pyunicode_splitlin": [56, 63], "pyunicode_substr": [56, 63, 467, 471], "pyunicode_tailmatch": [56, 63, 467, 471, 477], "pyunicode_transl": [56, 63], "pyunicode_typ": [56, 62, 63, 89], "pyunicode_writechar": [56, 63, 471], "ob_bas": [56, 57, 75, 478], "ob_siz": [56, 57, 62, 468, 478], "pyweakrefer": [56, 468, 478], "pyweakref_getobject": [56, 66], "pyweakref_newproxi": [56, 66], "pywrapperdescr_typ": 56, "pyzip_typ": 56, "py_atexit": [56, 58], "py_bytesmain": [56, 65, 101, 476], "py_compilestr": [56, 65, 467], "py_exit": [56, 58, 474, 478], "py_filesystemdefaultencodeerror": [56, 469, 478], "py_filesystemdefaultencod": [56, 469, 478], "py_genericalia": [56, 61, 478], "py_genericaliastyp": [56, 61, 478], "py_getrecursionlimit": 56, "py_hasfilesystemdefaultencod": [56, 469], "py_i": [56, 57, 467, 478], "py_isfals": [56, 57, 467, 478], "py_isnon": [56, 57, 467, 478], "py_istru": [56, 57, 467, 478], "py_makependingcal": 56, "py_setrecursionlimit": 56, "py_ucs4": [56, 63, 471], "py_utf8mod": [56, 469, 478], "py_intptr_t": 56, "py_uintptr_t": 56, "allocfunc": [56, 62, 74], "binaryfunc": [56, 62], "descrgetfunc": [56, 62, 74], "descrsetfunc": [56, 62, 74], "getattrfunc": [56, 62, 74], "getattrofunc": [56, 62, 74], "getiterfunc": [56, 62, 74], "hashfunc": [56, 62, 74], "initproc": [56, 62, 74, 75], "iternextfunc": [56, 62, 74], "lenfunc": [56, 62], "newfunc": [56, 62, 74, 222], "objobjargproc": [56, 62], "objobjproc": [56, 62], "releasebufferproc": [56, 62, 478], "reprfunc": [56, 62, 74], "richcmpfunc": [56, 62, 74], "setattrfunc": [56, 62, 74], "setattrofunc": [56, 62, 74], "ssizeargfunc": [56, 62], "ssizeobjargproc": [56, 62], "ssizessizeargfunc": 56, "ssizessizeobjargproc": 56, "symtabl": [56, 67, 250, 260, 464, 467, 477, 478], "ternaryfunc": [56, 62, 74], "unaryfunc": [56, 62], "ultim": [57, 189, 221, 231, 288, 348, 423, 425, 427, 431, 459, 461, 478], "expans": [57, 216, 230, 243, 271, 290, 304, 310, 344, 359, 404, 417, 461, 471, 472], "notion": [57, 179, 182, 186, 189, 221, 295, 340, 371, 405, 409, 425, 429, 470], "py_siz": [57, 463, 468, 478], "pyobject_head": [57, 62, 75, 465], "pyobject_var_head": [57, 62, 74], "py_set_typ": [57, 468, 478], "py_is_typ": [57, 478], "py_set_s": [57, 468, 478], "pyobject_head_init": [57, 62, 469], "_pyobject_extra_init": 57, "pyvarobject_head_init": [57, 62, 74, 75, 478], "shall": [57, 292, 295, 325, 410, 421, 456, 470], "meth_keyword": [57, 72, 98], "_pycfunctionfast": 57, "meth_fastcal": [57, 98, 475, 478], "narg": [57, 67, 88, 98, 100, 115, 288, 305, 336, 346, 394, 446, 464, 470, 478], "_pycfunctionfastwithkeyword": 57, "pycmethod": [57, 60, 98, 468, 477, 478], "meth_method": [57, 89, 98, 477], "defining_class": [57, 89, 98, 478], "ml_name": [57, 74], "ml_meth": [57, 74], "ml_flag": [57, 74], "ml_doc": [57, 74], "bitfield": [57, 110, 478], "convent": [57, 60, 62, 72, 84, 89, 91, 92, 98, 99, 100, 106, 111, 147, 163, 172, 173, 174, 177, 179, 205, 224, 226, 239, 242, 262, 267, 280, 288, 289, 291, 340, 341, 348, 357, 359, 361, 390, 423, 425, 429, 430, 447, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 475, 478], "fourth": [57, 89, 94, 173, 190, 263, 303, 315, 361, 414, 459], "question": [57, 72, 78, 84, 93, 94, 99, 100, 103, 106, 119, 138, 154, 189, 190, 231, 262, 263, 288, 336, 364, 368, 401, 402, 437, 457, 459, 460, 462, 475, 477, 478], "superclass": [57, 60, 62, 98, 113, 152, 177, 221, 222, 258, 264, 308, 334, 381, 423, 459, 460, 462, 469, 478], "unus": [57, 62, 75, 88, 89, 123, 146, 173, 226, 254, 255, 278, 279, 296, 309, 328, 334, 336, 341, 353, 357, 396, 430, 456, 459, 463, 472, 475, 477, 478], "meth_o": [57, 61, 67, 459, 478], "meth_class": [57, 61, 460], "classmethod": [57, 67, 86, 92, 93, 113, 156, 157, 172, 179, 182, 187, 189, 199, 207, 217, 221, 222, 246, 250, 251, 257, 279, 292, 295, 339, 340, 353, 376, 377, 381, 383, 417, 420, 423, 445, 459, 461, 464, 467, 468, 469, 470, 471, 474, 475, 476, 478], "meth_stat": [57, 460], "staticmethod": [57, 67, 84, 86, 92, 93, 113, 189, 207, 221, 222, 250, 264, 353, 415, 423, 445, 459, 461, 464, 467, 470, 471, 476, 478], "meth_coexist": [57, 461], "sq_contain": [57, 62], "preclud": [57, 340, 476], "py_readon": [57, 74, 469], "py_t_str": 57, "py_t_object_ex": [57, 75, 469], "t_object": [57, 469, 478], "__vectorcalloffset__": 57, "py_t_pyssizet": 57, "spam_type_memb": 57, "offsetof": [57, 75, 469], "spam_object": 57, "stddef": [57, 75, 469], "tp_dictoffset": [57, 60, 62, 74, 469, 478], "tp_weaklistoffset": [57, 60, 62, 74, 469, 477, 478], "__dictoffset__": 57, "__weaklistoffset__": 57, "py_tpflags_managed_dict": [57, 60, 62, 469, 478], "py_tpflags_managed_weakref": [57, 60, 62, 74, 469, 478], "structmemb": [57, 92, 469, 478], "obj_addr": 57, "py_audit_read": [57, 469], "py_relative_offset": [57, 469], "py_tp_memb": [57, 478], "mandatori": [57, 75, 83, 238, 244, 246, 264, 289, 337, 338, 451, 460, 471, 475, 477, 478], "pytypeslot": 57, "tp_member": [57, 62, 74, 75, 468, 478], "read_restrict": [57, 469], "write_restrict": [57, 469], "py_": [57, 60, 456, 478], "delattr": [57, 67, 221, 250, 435, 445], "py_t_byt": 57, "py_t_short": 57, "py_t_int": [57, 74, 75, 469], "py_t_long": 57, "py_t_longlong": 57, "py_t_ubyt": 57, "py_t_uint": 57, "py_t_ushort": 57, "py_t_ulong": 57, "py_t_ulonglong": 57, "py_t_float": 57, "py_t_doubl": [57, 74, 469], "py_t_bool": 57, "ro": [57, 84, 336], "py_t_string_inplac": 57, "py_t_char": 57, "py_t_string_inlin": 57, "t_int": [57, 469], "surpris": [57, 67, 83, 84, 87, 100, 115, 179, 182, 189, 221, 243, 263, 271, 279, 304, 339, 353, 364, 381, 420, 427, 458, 459, 462, 466, 469, 473, 475, 478], "t_none": [57, 469, 478], "tp_getset": [57, 62, 74, 75], "pathlik": [58, 63, 67, 86, 115, 159, 221, 248, 289, 290, 292, 340, 384, 420, 474, 478], "__fspath__": [58, 67, 115, 289, 292, 357, 384, 474, 478], "py_fdisinteract": 58, "deem": [58, 119, 203, 226, 265, 340, 402, 421, 457, 458, 462, 464, 469, 470, 471, 472, 478], "isatti": [58, 67, 115, 150, 221, 254, 289, 346, 348, 441, 478], "clone": [58, 67, 190, 197, 201, 204, 218, 226, 231, 233, 279, 281, 289, 297, 331, 346, 371, 379, 405, 429, 455, 471, 476], "parent": [58, 60, 62, 67, 84, 87, 97, 99, 100, 111, 115, 119, 130, 156, 173, 178, 185, 215, 221, 244, 246, 249, 251, 252, 260, 263, 274, 276, 277, 279, 289, 292, 298, 301, 305, 308, 310, 329, 333, 334, 336, 337, 344, 348, 363, 364, 366, 371, 380, 384, 385, 390, 394, 405, 408, 416, 423, 427, 435, 459, 460, 461, 462, 463, 467, 469, 471, 472, 474, 475, 478], "register_at_fork": [58, 67, 115, 289, 475, 478], "reliabl": [58, 121, 123, 129, 130, 136, 154, 157, 182, 184, 247, 279, 329, 344, 398, 410, 422, 427, 456, 460, 464, 470, 471, 472, 473, 474, 475, 478], "microsoft": [58, 67, 76, 85, 154, 163, 172, 250, 289, 346, 348, 393, 394, 402, 430, 443, 451, 453, 459, 460, 462, 463, 468, 473, 478], "visual": [58, 76, 84, 91, 102, 315, 337, 370, 379, 408, 450, 451, 456, 457, 460, 463, 473, 478], "sigact": [58, 478], "undecod": [58, 106, 154, 192, 289, 470, 478], "dc80": [58, 106, 154, 221], "dcff": [58, 106, 154, 221], "surrog": [58, 63, 154, 221, 258, 289, 342, 353, 405, 471, 472, 476, 478], "error_po": 58, "0x80": [58, 106, 174, 340, 478], "0xff": [58, 154, 221, 340], "1000": [58, 84, 96, 100, 106, 146, 169, 173, 179, 217, 243, 255, 257, 271, 279, 280, 316, 325, 340, 341, 348, 364, 377, 379, 421, 435, 436, 439, 441, 444, 445, 457, 462, 463, 464, 470, 471, 476], "plus": [58, 62, 67, 74, 83, 117, 172, 173, 174, 182, 186, 190, 204, 207, 260, 279, 286, 288, 289, 301, 327, 338, 340, 348, 357, 359, 360, 372, 384, 385, 389, 402, 406, 425, 429, 430, 456, 459, 460, 461, 462, 469, 471, 472, 478], "hundr": [58, 100, 189, 231], "pysys_audit": [58, 96, 139, 348, 478], "apart": [58, 75, 94, 99, 103, 119, 163, 186, 271, 279, 288, 298, 425, 430, 456, 460, 464, 466], "unavoid": [58, 94, 179, 461, 464, 466], "pysys_addaudithook": [58, 139, 348], "py_audithookfunct": 58, "silenc": [58, 117, 221, 319, 328, 392, 464, 470, 472, 477, 478], "578": [58, 67, 139, 348, 462, 463, 478], "addaudithook": [58, 67, 139, 311, 348, 445], "kill": [58, 67, 83, 112, 115, 127, 130, 134, 137, 139, 160, 162, 173, 243, 253, 279, 289, 329, 344, 357, 397, 402, 417, 463, 464, 465, 470, 475, 478], "120": [58, 71, 94, 152, 189, 222, 257, 348, 379, 464, 474, 476, 478], "pytuple_check": [59, 78], "pytuple_checkexact": 59, "oo": [59, 172, 348, 357, 445, 450, 466, 473, 478], "pytuple_get_s": 59, "pytuple_get_item": 59, "pytuple_set_item": [59, 467, 478], "_pytuple_res": [59, 459], "shrink": [59, 180, 461, 478], "client": [59, 67, 72, 83, 92, 99, 100, 104, 107, 123, 139, 141, 148, 154, 160, 163, 166, 190, 192, 237, 240, 241, 247, 250, 252, 254, 255, 263, 265, 284, 289, 295, 324, 325, 333, 334, 336, 354, 357, 360, 379, 381, 389, 390, 402, 404, 405, 412, 413, 415, 421, 436, 446, 459, 461, 463, 469, 471, 476, 478], "namedtupl": [59, 67, 86, 93, 114, 144, 178, 183, 284, 295, 298, 299, 315, 325, 332, 336, 340, 343, 345, 348, 377, 380, 381, 396, 437, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478], "desc": [59, 92, 277, 284, 336, 466], "pystructsequence_inittyp": [59, 472], "pystructsequence_inittype2": [59, 472], "meta": [59, 67, 86, 89, 109, 115, 119, 148, 173, 174, 216, 227, 246, 247, 288, 348, 390, 423, 459, 469, 471, 472, 474, 478], "n_in_sequ": 59, "unnam": [59, 72, 93, 172, 207, 336, 400, 425, 472, 478], "pystructsequence_get_item": 59, "pystructsequence_set_item": 59, "pytype_check": [60, 72, 478], "pytype_checkexact": [60, 478], "primarili": [60, 84, 97, 99, 136, 138, 154, 179, 190, 202, 222, 248, 251, 263, 295, 300, 340, 344, 348, 381, 383, 395, 402, 406, 422, 424, 456, 458, 459, 461, 463, 464, 471, 473, 475, 477, 478], "pytype_getdict": [60, 62, 478], "proxi": [60, 66, 67, 160, 163, 166, 178, 183, 209, 221, 222, 238, 244, 253, 337, 340, 380, 383, 390, 397, 405, 414, 421, 423, 458, 463, 469, 470, 471, 473, 474, 476, 478], "tp_dict": [60, 62, 74, 463, 478], "languag": [60, 63, 67, 71, 72, 73, 79, 83, 86, 88, 92, 93, 94, 96, 98, 100, 102, 103, 106, 107, 109, 119, 154, 163, 172, 176, 187, 192, 198, 201, 205, 213, 217, 218, 221, 236, 242, 243, 246, 250, 262, 269, 277, 295, 303, 315, 336, 340, 348, 350, 358, 359, 364, 372, 374, 380, 381, 397, 405, 406, 414, 423, 425, 429, 430, 431, 440, 441, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478], "adequ": [60, 62, 75, 84, 209, 464, 471], "pytype_addwatch": [60, 469], "pytype_watchcallback": 60, "pytype_watch": [60, 469, 478], "pytype_clearwatch": 60, "_pytype_lookup": [60, 92, 467, 478], "pytype_hasfeatur": [60, 62, 478], "pytype_is_gc": 60, "detector": [60, 72, 251, 451, 464], "issubclass": [60, 67, 77, 86, 113, 157, 221, 250, 340, 380, 381, 395, 423, 435, 445, 457, 463, 467, 475, 478], "nitem": [60, 62], "tp_alloc": [60, 62, 74, 75, 478], "kwds": [60, 62, 74, 75, 92, 134, 141, 165, 171, 199, 207, 221, 222, 251, 279, 293, 314, 341, 357, 375, 380, 383, 423, 426, 436, 462, 476, 478], "qualifi": [60, 67, 86, 92, 187, 189, 193, 246, 251, 264, 265, 295, 331, 333, 340, 344, 381, 383, 393, 395, 408, 411, 418, 423, 427, 431, 450, 456, 462, 468, 473, 476, 478, 479], "pytype_getmodulebydef": [60, 89, 98, 468, 478], "shortcut": [60, 67, 189, 231, 243, 294, 315, 317, 340, 353, 380, 423, 456, 461, 463, 475, 478], "nb_add": [60, 62, 98], "pyunstable_type_assignversiontag": [60, 478], "metaclass": [60, 67, 86, 92, 93, 109, 113, 119, 172, 207, 221, 222, 251, 340, 380, 381, 422, 463, 465, 468, 469, 470, 472, 473, 474, 475, 476, 478], "py_tpflags_heaptyp": [60, 62, 98, 467, 477], "py_tp_bas": [60, 62], "pytype_from": [60, 469, 478], "14": [60, 67, 84, 88, 94, 96, 103, 106, 118, 136, 138, 154, 156, 157, 162, 172, 173, 179, 182, 187, 189, 205, 221, 232, 237, 243, 249, 255, 257, 279, 289, 292, 298, 315, 318, 328, 333, 336, 339, 340, 341, 348, 353, 361, 373, 381, 393, 408, 423, 425, 427, 430, 437, 439, 441, 444, 447, 459, 461, 462, 464, 468, 470, 473, 474, 475, 476, 477, 478], "__init_subclass__": [60, 67, 178, 207, 221, 423, 468, 474, 478], "__set_name__": [60, 67, 92, 177, 423, 469, 474, 478], "tp_doc": [60, 62, 74, 75, 467, 478], "overlap": [60, 63, 67, 91, 103, 157, 173, 186, 252, 255, 257, 278, 286, 288, 292, 315, 339, 340, 367, 379, 431, 458, 459, 478], "mistak": [60, 72, 93, 102, 103, 117, 207, 209, 263, 267, 288, 340, 361, 364, 451, 461, 462, 464, 466, 469, 478], "suggest": [60, 67, 73, 83, 84, 90, 94, 100, 103, 106, 112, 130, 182, 221, 226, 231, 246, 295, 303, 316, 336, 360, 361, 377, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 472, 474, 476, 477, 478], "pynumbermethod": [60, 62, 74, 459, 462], "pysequencemethod": [60, 62, 74], "pymappingmethod": [60, 62, 74], "pyasyncmethod": [60, 62, 74, 478], "py_tp_dealloc": 60, "py_nb_add": 60, "py_sq_length": 60, "sq_length": [60, 62, 478], "tp_mro": [60, 62, 74, 478], "tp_cach": [60, 62, 74], "tp_subclass": [60, 62, 74, 469, 478], "tp_weaklist": [60, 62, 74, 469], "tp_vectorcal": [60, 62, 74, 478], "problemat": [60, 163, 264, 279, 461, 466, 470, 475, 478], "unlimit": [60, 123, 134, 148, 198, 199, 204, 231, 243, 279, 316, 318, 340, 344, 360, 423, 430, 478], "bf_getbuff": [60, 62, 468], "pfunc": [60, 71], "py_tp_doc": 60, "genericalia": [61, 67, 178, 380, 381, 423, 425, 467, 477, 478], "union": [61, 67, 87, 115, 156, 157, 183, 207, 221, 222, 248, 250, 329, 338, 342, 380, 381, 421, 423, 460, 461, 463, 464, 467, 468, 469, 473, 477, 478], "__origin__": [61, 67, 340], "__args__": [61, 67, 340, 467, 477, 478], "__parameters__": [61, 67, 340, 381, 478], "lazili": [61, 87, 162, 212, 239, 257, 340, 381, 383, 384, 422, 424, 425, 467, 468, 472, 478], "my_obj_method": 61, "__class_getitem__": [61, 67, 340, 381, 425, 468, 475, 478], "585": [61, 86, 157, 340, 380, 381, 468, 477, 478], "pytype_": 62, "fair": [62, 83, 91, 100, 106, 189, 200, 204, 277, 304, 326, 337, 364, 383, 389, 405, 406, 451, 457, 459, 460, 462, 463, 474, 478], "examin": [62, 67, 71, 84, 87, 99, 106, 177, 183, 251, 260, 289, 293, 296, 304, 327, 328, 329, 331, 340, 348, 357, 405, 458, 460, 462, 463, 471, 478], "glanc": [62, 100, 460], "insight": 62, "tp_getattr": [62, 74], "tp_setattr": [62, 74], "__setattr__": [62, 67, 74, 79, 84, 92, 139, 177, 295, 384, 423, 431, 459, 478], "__delattr__": [62, 67, 74, 79, 92, 139, 177, 423, 478], "tp_as_async": [62, 74, 473], "__repr__": [62, 67, 79, 92, 93, 105, 156, 160, 177, 178, 179, 191, 207, 213, 221, 251, 279, 282, 303, 317, 336, 380, 381, 384, 414, 420, 423, 447, 459, 460, 467, 468, 470, 475, 476, 478], "tp_as_sequ": [62, 74], "tp_as_map": [62, 74], "tp_str": [62, 74], "__str__": [62, 67, 79, 93, 99, 100, 156, 160, 178, 179, 190, 191, 192, 197, 198, 199, 201, 207, 251, 263, 279, 281, 340, 341, 380, 384, 420, 423, 438, 459, 467, 468, 476, 478], "tp_as_buff": [62, 74, 477, 478], "tp_richcompar": [62, 74, 478], "__lt__": [62, 67, 74, 79, 93, 105, 144, 157, 164, 177, 220, 221, 222, 287, 340, 380, 384, 423, 425, 458, 464, 465, 470, 478], "__le__": [62, 67, 79, 93, 157, 177, 220, 222, 287, 340, 384, 423, 458, 464, 470], "__ne__": [62, 67, 79, 157, 190, 191, 198, 220, 281, 287, 384, 414, 423, 458, 468, 478], "__gt__": [62, 67, 79, 93, 105, 157, 177, 220, 221, 222, 287, 340, 384, 423, 458, 464, 470], "__ge__": [62, 67, 79, 93, 157, 177, 220, 222, 287, 340, 384, 423, 458, 464, 470], "tp_iter": [62, 74, 340, 459], "__iter__": [62, 67, 74, 79, 86, 93, 100, 113, 157, 178, 183, 207, 221, 254, 257, 267, 279, 281, 340, 381, 383, 384, 385, 417, 422, 423, 425, 435, 459, 460, 463, 472, 474, 477, 478], "tp_iternext": [62, 74, 340, 459, 478], "__next__": [62, 67, 74, 86, 94, 109, 157, 162, 171, 187, 209, 213, 221, 254, 257, 279, 340, 417, 423, 425, 435, 465, 478], "tp_method": [62, 74, 75], "tp_base": [62, 74, 75, 478], "__base__": 62, "tp_descr_get": [62, 74], "__get__": [62, 67, 86, 92, 177, 222, 251, 384, 423, 459, 474, 478], "tp_descr_set": [62, 74, 478], "__set__": [62, 67, 86, 92, 177, 251, 384, 423, 459, 474, 478], "__delete__": [62, 67, 86, 92, 251, 384, 423, 459, 478], "tp_free": [62, 74, 75, 98], "tp_is_gc": [62, 74], "__subclasses__": [62, 67, 340, 384, 469, 478], "tp_del": [62, 74, 223], "tp_version_tag": [62, 74], "tp_final": [62, 74, 473, 476, 478], "tp_watch": [62, 74], "angl": [62, 103, 141, 151, 154, 205, 221, 271, 379, 463, 464, 478], "am_await": 62, "__await__": [62, 67, 86, 157, 187, 380, 423, 473, 478], "am_ait": 62, "__aiter__": [62, 67, 86, 157, 187, 221, 384, 385, 422, 423, 473, 474, 475, 478], "am_anext": 62, "__anext__": [62, 67, 86, 157, 187, 209, 221, 384, 422, 423, 425, 478], "am_send": 62, "sendfunc": 62, "__add__": [62, 67, 79, 93, 98, 156, 164, 220, 251, 285, 287, 384, 423, 425, 478], "__radd__": [62, 67, 285, 423, 425], "nb_inplace_add": 62, "__iadd__": [62, 67, 79, 84, 157, 220, 287, 423, 457], "nb_subtract": 62, "__sub__": [62, 67, 157, 220, 287, 384, 423, 425], "__rsub__": [62, 67, 164, 423], "nb_inplace_subtract": 62, "__isub__": [62, 67, 157, 220, 287, 423, 457], "nb_multipli": 62, "__mul__": [62, 67, 79, 156, 220, 287, 384, 423, 425, 478], "__rmul__": [62, 67, 79, 423, 425, 478], "nb_inplace_multipli": 62, "__imul__": [62, 67, 79, 156, 164, 220, 287, 423, 478], "nb_remaind": 62, "__mod__": [62, 67, 102, 220, 287, 384, 423, 425, 467, 478], "__rmod__": [62, 67, 156, 423, 467, 473, 478], "nb_inplace_remaind": 62, "__imod__": [62, 67, 220, 287, 423], "nb_divmod": 62, "__divmod__": [62, 67, 384, 423, 467, 473, 478], "__rdivmod__": [62, 67, 423, 467, 478], "nb_power": 62, "__pow__": [62, 67, 220, 287, 384, 423, 425, 467, 478], "__rpow__": [62, 67, 423, 467, 478], "nb_inplace_pow": 62, "__ipow__": [62, 67, 220, 287, 423, 467, 478], "nb_negat": 62, "__neg__": [62, 67, 220, 287, 384, 423, 425], "nb_posit": 62, "__pos__": [62, 67, 220, 287, 384, 423, 425], "nb_absolut": 62, "__abs__": [62, 67, 220, 221, 287, 381, 423, 478], "nb_bool": [62, 465], "__bool__": [62, 67, 93, 109, 207, 228, 287, 340, 362, 384, 400, 423, 425, 465, 478], "nb_invert": 62, "__invert__": [62, 67, 207, 220, 287, 384, 423, 425], "nb_lshift": 62, "__lshift__": [62, 67, 220, 287, 384, 423, 425], "__rlshift__": [62, 67, 423], "nb_inplace_lshift": 62, "__ilshift__": [62, 67, 220, 287, 423], "nb_rshift": 62, "__rshift__": [62, 67, 220, 287, 384, 423, 425], "__rrshift__": [62, 67, 423], "nb_inplace_rshift": 62, "__irshift__": [62, 67, 220, 287, 423], "nb_and": 62, "__and__": [62, 67, 157, 178, 207, 220, 287, 384, 423, 425], "__rand__": [62, 67, 423, 425], "nb_inplace_and": 62, "__iand__": [62, 67, 157, 164, 220, 287, 423], "nb_xor": 62, "__xor__": [62, 67, 157, 178, 207, 220, 287, 384, 423, 425], "__rxor__": [62, 67, 423, 425], "nb_inplace_xor": 62, "__ixor__": [62, 67, 157, 220, 287, 423], "nb_or": 62, "__or__": [62, 67, 157, 178, 207, 220, 287, 340, 384, 423, 425], "__ror__": [62, 67, 423, 425, 478], "nb_inplace_or": 62, "__ior__": [62, 67, 157, 220, 287, 423], "nb_int": 62, "nb_reserv": 62, "nb_float": 62, "nb_floor_divid": 62, "__floordiv__": [62, 67, 102, 220, 287, 384, 423, 425, 459, 467, 478], "nb_inplace_floor_divid": 62, "__ifloordiv__": [62, 67, 220, 287, 423], "nb_true_divid": 62, "__truediv__": [62, 67, 102, 220, 249, 276, 287, 384, 423, 425, 459, 473], "nb_inplace_true_divid": 62, "__itruediv__": [62, 67, 220, 287, 423], "nb_matrix_multipli": 62, "__matmul__": [62, 67, 220, 287, 384, 423, 473], "__rmatmul__": [62, 67, 423, 473], "nb_inplace_matrix_multipli": 62, "__imatmul__": [62, 67, 220, 287, 423, 473], "mp_length": 62, "__len__": [62, 67, 79, 86, 113, 157, 178, 190, 192, 201, 207, 221, 267, 279, 281, 287, 340, 381, 384, 405, 408, 422, 423, 460, 461, 476, 478], "mp_subscript": [62, 478], "mp_ass_subscript": 62, "__setitem__": [62, 67, 79, 156, 157, 187, 190, 192, 201, 204, 220, 267, 279, 281, 287, 295, 384, 385, 402, 405, 408, 423, 431, 460, 465, 478], "__delitem__": [62, 67, 79, 156, 157, 190, 192, 201, 220, 267, 281, 287, 384, 402, 405, 408, 423, 460, 465, 478], "sq_concat": 62, "sq_repeat": 62, "sq_item": [62, 478], "sq_ass_item": 62, "sq_inplace_concat": 62, "sq_inplace_repeat": 62, "_typeobject": [62, 74], "tp_compar": [62, 74], "tp_reserv": [62, 74, 473], "suit": [62, 67, 74, 83, 84, 86, 89, 94, 99, 100, 102, 157, 183, 189, 226, 250, 254, 279, 288, 336, 337, 353, 377, 383, 384, 395, 417, 422, 451, 456, 462, 463, 464, 465, 468, 469, 470, 472, 474, 475, 477, 478], "rich": [62, 63, 67, 74, 109, 156, 193, 221, 222, 287, 364, 370, 414, 423, 425, 427, 465, 470, 475, 477, 478, 479], "stuff": [62, 74, 78, 89, 99, 100, 119, 165, 172, 189, 303, 384, 465], "resolut": [62, 67, 74, 75, 84, 86, 92, 98, 113, 115, 123, 178, 179, 210, 212, 221, 222, 228, 230, 241, 251, 289, 290, 291, 292, 295, 304, 333, 340, 361, 422, 423, 427, 435, 460, 462, 471, 472, 473, 474, 476, 477, 478], "bitset": [62, 74], "type_new": [62, 92, 478], "metatyp": [62, 251], "complain": [62, 75, 88, 89, 100, 165, 243, 458, 478], "foo_typ": 62, "_ob_next": 62, "_ob_prev": 62, "getobject": [62, 451, 476, 478], "act": [62, 66, 74, 84, 94, 99, 102, 119, 141, 172, 177, 179, 187, 192, 197, 201, 204, 221, 222, 240, 244, 246, 249, 255, 263, 289, 305, 307, 336, 340, 348, 360, 370, 379, 380, 381, 384, 421, 423, 430, 456, 457, 458, 463, 471, 472, 476, 477, 478], "everyth": [62, 72, 75, 84, 87, 88, 89, 91, 100, 102, 107, 117, 189, 204, 216, 221, 243, 264, 288, 289, 292, 295, 315, 328, 329, 333, 354, 364, 384, 395, 414, 429, 430, 463, 465, 469, 471, 478], "pickl": [62, 67, 75, 83, 89, 99, 100, 139, 154, 156, 162, 167, 172, 178, 179, 182, 222, 250, 258, 260, 263, 264, 265, 270, 279, 280, 294, 323, 326, 343, 374, 381, 384, 441, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 478, 479], "pydoc": [62, 67, 75, 83, 183, 221, 250, 415, 458, 459, 460, 461, 464, 466, 473, 478], "meaning": [62, 103, 189, 194, 231, 246, 251, 255, 264, 267, 279, 289, 310, 315, 333, 337, 348, 377, 380, 390, 423, 429, 431, 465, 470, 472, 473, 478], "whichev": [62, 72, 74, 111, 179, 263, 343, 383, 456, 471, 473], "align": [62, 67, 115, 142, 150, 341, 357, 371, 379, 403, 463, 464, 469, 478], "py_tpflags_basetyp": [62, 75], "permiss": [62, 83, 84, 86, 99, 100, 107, 159, 208, 209, 212, 244, 253, 289, 292, 307, 328, 329, 333, 336, 338, 353, 355, 381, 390, 392, 400, 421, 456, 464, 475, 478], "foo_dealloc": [62, 476], "foo_object": 62, "tp_print": [62, 477], "inconsist": [62, 186, 209, 288, 289, 333, 384, 430, 458, 469, 474, 478], "relev": [62, 67, 72, 74, 83, 84, 88, 89, 91, 94, 97, 99, 100, 119, 142, 163, 182, 183, 189, 190, 204, 211, 238, 241, 247, 258, 263, 264, 265, 284, 288, 289, 296, 298, 337, 340, 344, 350, 351, 357, 383, 402, 409, 418, 420, 456, 457, 459, 461, 469, 471, 472, 473, 474, 477, 478], "await": [62, 67, 86, 120, 121, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 157, 165, 166, 178, 183, 184, 187, 221, 251, 260, 340, 372, 380, 381, 383, 384, 422, 424, 426, 428, 430, 457, 460, 467, 468, 474, 475, 476, 477, 478], "eval": [62, 67, 84, 87, 109, 118, 119, 141, 153, 155, 209, 221, 250, 251, 264, 293, 295, 303, 323, 340, 370, 376, 424, 426, 430, 431, 432, 435, 439, 445, 457, 461, 463, 465, 466, 467, 468, 469, 470, 478], "feasibl": [62, 72, 326, 472, 478], "deduc": [62, 171, 189, 279, 304, 349, 456, 470], "isinst": [62, 67, 77, 84, 86, 87, 92, 93, 99, 100, 109, 113, 148, 157, 165, 177, 179, 207, 221, 246, 247, 250, 251, 258, 285, 287, 295, 340, 380, 381, 383, 384, 385, 422, 423, 435, 445, 457, 460, 461, 463, 465, 467, 468, 469, 470, 474, 475, 478], "among": [62, 123, 138, 172, 177, 186, 189, 267, 279, 280, 296, 324, 348, 353, 361, 364, 370, 383, 423, 430, 456, 470, 476, 478], "mask": [62, 67, 172, 173, 207, 252, 289, 318, 325, 328, 329, 333, 338, 351, 364, 371, 400, 423, 461, 463, 470, 471, 477, 478], "guard": [62, 67, 98, 100, 119, 123, 247, 309, 357, 360, 380, 381, 426, 427, 436, 476, 478], "xxx": [62, 99, 100, 117, 427, 464, 466, 471, 478], "py_tpflags_default": [62, 75], "ore": [62, 174, 186, 189, 211, 289, 315, 337, 364, 401], "decref": [62, 63, 478], "java": [62, 67, 77, 79, 83, 84, 94, 100, 103, 104, 113, 115, 221, 289, 340, 360, 405, 409, 410, 423, 429, 434, 436, 439, 457, 461, 462, 463, 465, 467, 470], "py_tpflags_readi": 62, "group": [62, 67, 83, 88, 93, 97, 99, 100, 106, 115, 121, 139, 148, 154, 165, 171, 174, 182, 183, 186, 187, 189, 190, 199, 207, 215, 221, 244, 247, 250, 255, 257, 262, 267, 277, 279, 281, 284, 289, 292, 295, 310, 315, 328, 330, 333, 335, 337, 338, 340, 341, 344, 346, 353, 358, 360, 370, 371, 376, 377, 381, 386, 389, 395, 400, 404, 410, 414, 423, 425, 426, 429, 430, 438, 447, 456, 457, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "bitmask": [62, 123, 189, 291, 324, 325], "py_tpflags_have_stackless_extens": 62, "py_tpflags_immutabletyp": [62, 98, 467, 468, 469, 478], "portion": [62, 86, 89, 91, 94, 97, 103, 125, 138, 151, 175, 179, 182, 199, 205, 222, 231, 263, 264, 265, 333, 338, 371, 383, 389, 402, 405, 411, 414, 415, 421, 427, 457, 470, 471, 473, 478], "py_tpflags_long_subclass": 62, "py_tpflags_list_subclass": 62, "py_tpflags_tuple_subclass": 62, "py_tpflags_bytes_subclass": 62, "py_tpflags_unicode_subclass": 62, "py_tpflags_dict_subclass": 62, "py_tpflags_base_exc_subclass": 62, "py_tpflags_type_subclass": 62, "ins": [62, 93, 94, 457, 459, 460, 461], "py_tpflags_have_fin": [62, 476], "py_tpflags_disallow_instanti": [62, 98, 467, 469, 478], "py_tpflags_map": [62, 187, 422, 478], "abc": [62, 67, 72, 77, 79, 84, 86, 87, 89, 92, 94, 102, 103, 106, 109, 123, 130, 133, 156, 163, 166, 172, 178, 180, 183, 187, 222, 224, 238, 247, 248, 250, 254, 255, 257, 263, 264, 276, 279, 286, 295, 311, 315, 317, 326, 327, 340, 341, 348, 357, 377, 380, 417, 418, 421, 422, 423, 425, 427, 430, 435, 437, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 474, 475, 476, 478], "py_tpflags_sequ": [62, 187, 422, 478], "634": [62, 67, 109, 422, 423, 478], "py_tpflags_valid_version_tag": [62, 478], "local_travers": 62, "_thread": [62, 67, 83, 139, 160, 250, 360, 460, 471, 478], "localobject": [62, 89], "particip": [62, 74, 75, 179, 239, 246, 263, 295, 315, 457, 459, 462, 464], "hand": [62, 72, 74, 83, 84, 89, 93, 94, 102, 103, 119, 126, 172, 173, 177, 182, 192, 197, 202, 209, 221, 226, 243, 254, 265, 295, 301, 315, 334, 361, 364, 379, 381, 384, 422, 425, 429, 431, 446, 457, 458, 459, 460, 462, 463, 465, 466, 471, 476, 478], "aid": [62, 101, 336, 456, 460, 461, 464, 470, 471, 472, 478], "anyway": [62, 75, 88, 172, 179, 221, 239, 243, 255, 383, 384, 458, 459, 469, 478], "get_refer": [62, 67, 139, 223, 311, 460, 467, 478], "weakrefer": 62, "40217": [62, 477, 478], "doubt": [62, 83, 91, 163, 179, 462], "prove": [62, 94, 172, 257, 337, 422, 460, 465, 466], "compos": [62, 67, 169, 196, 197, 198, 199, 204, 268, 289, 331, 350, 351, 370, 377, 381, 382, 430, 471], "rare": [62, 83, 123, 130, 173, 177, 189, 195, 209, 231, 239, 243, 263, 288, 326, 329, 333, 340, 353, 385, 402, 405, 458, 459, 462, 463, 469, 471, 478], "good": [62, 74, 77, 78, 83, 84, 88, 92, 93, 98, 99, 100, 102, 103, 106, 107, 117, 119, 136, 148, 151, 152, 163, 166, 172, 173, 179, 186, 189, 194, 203, 207, 221, 231, 246, 279, 288, 289, 291, 295, 303, 315, 337, 357, 359, 362, 379, 381, 383, 385, 406, 414, 421, 423, 457, 458, 460, 461, 463, 464, 468, 478], "local_clear": 62, "trash": [62, 267, 478], "reclam": 62, "weakref": [62, 67, 74, 84, 86, 177, 178, 209, 250, 279, 312, 340, 357, 447, 458, 459, 461, 462, 464, 468, 469, 478], "goal": [62, 74, 89, 94, 98, 197, 221, 231, 316, 357, 408, 429, 458, 460, 462, 463, 470, 472, 473, 474], "eas": [62, 67, 326, 340, 360, 383, 431, 457, 471, 473, 475, 478], "py_return_richcompar": [62, 475, 478], "val_a": 62, "val_b": 62, "pyweakref_": 62, "confus": [62, 71, 83, 84, 91, 98, 100, 102, 103, 107, 153, 172, 182, 186, 189, 221, 255, 265, 288, 289, 295, 315, 329, 353, 364, 384, 390, 423, 425, 430, 431, 457, 458, 459, 460, 461, 462, 464, 466, 469, 470, 472, 474, 475, 476, 478], "unari": [62, 67, 119, 182, 187, 340, 384, 423, 428, 430, 471], "overload": [62, 67, 123, 183, 222, 381, 390, 414, 423, 425, 458, 459, 468, 472, 478], "retreiv": 62, "reiniti": [62, 478], "unrel": [62, 72, 84, 93, 147, 209, 267, 333, 478], "thumb": [62, 98, 102, 186, 371], "defer": [62, 67, 72, 99, 123, 156, 189, 242, 254, 265, 274, 336, 337, 351, 458, 463, 469, 478], "presum": [62, 99, 157, 171, 179, 267, 279, 343, 344, 389, 425, 459, 464, 465, 478], "factori": [62, 67, 86, 97, 117, 123, 125, 127, 130, 154, 165, 168, 172, 185, 189, 199, 203, 204, 222, 246, 252, 263, 264, 265, 267, 271, 276, 279, 286, 288, 294, 311, 328, 360, 364, 366, 381, 385, 397, 402, 405, 408, 414, 415, 423, 459, 462, 463, 466, 469, 470, 471, 473, 475, 476, 477, 478], "mixtur": [62, 199, 426, 430, 473], "_pyobject_get_weakrefs_listptr": [62, 469], "sane": [62, 173, 179, 315, 478], "trivial": [62, 67, 71, 72, 74, 83, 94, 134, 148, 190, 196, 204, 230, 279, 295, 315, 346, 348, 385, 402, 460, 471, 472, 478], "local_fin": 62, "error_typ": 62, "error_valu": 62, "error_traceback": 62, "442": [62, 67, 74, 223, 477, 478], "tradit": [62, 72, 75, 92, 98, 169, 262, 267, 271, 288, 289, 295, 304, 354, 357, 422, 426, 427, 451, 456, 460, 463, 470, 475, 478], "ternari": [62, 423, 425], "operand": [62, 67, 88, 119, 154, 179, 187, 189, 209, 221, 263, 286, 340, 423, 425, 431, 438, 444, 459, 464, 465, 470, 471, 478], "nb_long": 62, "augment": [62, 67, 84, 117, 119, 189, 264, 272, 327, 370, 423, 426, 430, 450, 470, 478, 479], "counter": [62, 67, 72, 75, 84, 86, 94, 137, 178, 183, 186, 187, 196, 232, 279, 288, 289, 340, 360, 361, 381, 383, 425, 435, 459, 461, 462, 463, 464, 466, 470, 471, 476, 478], "root": [62, 67, 87, 92, 99, 100, 108, 109, 111, 138, 139, 151, 156, 172, 182, 197, 201, 202, 203, 206, 215, 231, 243, 244, 248, 257, 260, 263, 264, 271, 279, 289, 290, 292, 298, 300, 310, 328, 335, 337, 338, 344, 348, 353, 357, 361, 364, 366, 367, 370, 371, 381, 383, 405, 408, 410, 416, 417, 418, 423, 447, 450, 451, 457, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 476, 477, 478], "react": [62, 91, 268, 364, 457, 463], "demonstr": [62, 72, 74, 88, 91, 93, 100, 103, 104, 111, 117, 137, 146, 172, 182, 238, 240, 243, 274, 279, 280, 288, 303, 315, 316, 339, 343, 364, 375, 376, 379, 383, 408, 420, 425, 437, 456, 458, 470, 478], "tricki": [62, 84, 89, 93, 153, 288, 364, 457, 458, 465], "tutori": [62, 67, 69, 73, 88, 91, 100, 107, 111, 115, 117, 158, 173, 189, 207, 209, 218, 221, 222, 243, 263, 264, 265, 269, 286, 294, 333, 340, 346, 364, 402, 422, 429, 448, 459, 461, 462, 463, 470, 478], "assort": [62, 67, 73, 189, 370, 478], "topic": [62, 67, 71, 73, 75, 83, 89, 91, 103, 152, 189, 207, 263, 288, 303, 309, 333, 457, 460, 466, 478], "myobject": [62, 74], "myobject_typ": 62, "mymod": 62, "my": [62, 72, 77, 93, 94, 100, 107, 148, 156, 189, 226, 244, 264, 292, 337, 340, 341, 357, 364, 441, 457, 459, 460, 461, 462, 469, 478], "myobj_new": 62, "myobj_dealloc": 62, "myobj_repr": 62, "myobj_travers": 62, "myobj_clear": 62, "myobj_hash": 62, "mystr": 62, "mystr_typ": 62, "393": [63, 67, 154, 348, 467, 477, 478, 479], "varieti": [63, 72, 74, 94, 98, 106, 117, 154, 182, 190, 221, 226, 269, 288, 289, 304, 340, 344, 364, 368, 381, 402, 427, 461, 462, 463, 464, 472], "stay": [63, 67, 135, 348, 469, 470, 471, 474, 478], "65536": [63, 444, 478], "1114112": [63, 154], "623": [63, 314, 467, 469, 478], "py_ucs2": [63, 471], "py_ucs1": [63, 471], "narrow": [63, 315, 333, 340, 381, 451, 459, 467, 470, 471, 478], "pyasciiobject": [63, 471], "pycompactunicodeobject": [63, 471], "pyunicode_check": [63, 75], "pyunicode_checkexact": 63, "pyunicode_readi": [63, 468, 471], "pyunicode_get_length": [63, 467, 471], "canon": [63, 67, 84, 86, 93, 141, 163, 179, 181, 182, 191, 207, 231, 286, 288, 292, 333, 342, 382, 408, 420, 425, 464, 473, 478], "pyunicode_1byte_data": [63, 471], "pyunicode_2byte_data": [63, 471], "pyunicode_4byte_data": [63, 471], "ucs1": [63, 478], "ucs2": [63, 478], "ucs4": [63, 459, 478], "pyunicode_kind": [63, 471], "pyunicode_1byte_kind": [63, 471], "pyunicode_2byte_kind": [63, 471], "pyunicode_4byte_kind": [63, 471], "pyunicode_wchar_kind": [63, 468, 469, 471], "pyunicode_data": [63, 471, 478], "pyunicode_writ": [63, 471], "saniti": [63, 451, 472, 478], "pyunicode_read": [63, 471], "pyunicode_read_char": [63, 471], "pyunicode_max_char_valu": [63, 471], "py_unicode_isspac": [63, 478], "ch": [63, 89, 91, 99, 100, 154, 173, 186, 390, 455, 457, 478], "py_unicode_islow": 63, "lowercas": [63, 103, 106, 140, 152, 154, 163, 182, 192, 201, 231, 244, 255, 301, 315, 340, 341, 348, 359, 430, 465, 478], "py_unicode_isupp": 63, "uppercas": [63, 84, 89, 92, 106, 117, 145, 174, 244, 255, 277, 288, 289, 340, 341, 430, 457, 464, 465, 469, 472, 474, 478], "py_unicode_istitl": 63, "titlecas": [63, 340, 430, 478], "py_unicode_islinebreak": 63, "linebreak": 63, "py_unicode_isdecim": [63, 470], "py_unicode_isdigit": 63, "py_unicode_isnumer": 63, "py_unicode_isalpha": 63, "alphabet": [63, 84, 88, 140, 143, 169, 174, 182, 192, 195, 258, 263, 264, 267, 304, 322, 330, 340, 380, 456, 460, 461, 462, 463, 464, 467, 472, 473, 474, 475, 476, 478], "py_unicode_isalnum": 63, "alphanumer": [63, 103, 148, 174, 189, 246, 264, 268, 295, 315, 327, 340, 341, 361, 460, 478], "py_unicode_isprint": 63, "printabl": [63, 67, 143, 154, 173, 174, 191, 192, 193, 194, 198, 199, 204, 221, 278, 313, 340, 341, 342, 358, 423, 458, 465, 470], "nonprint": [63, 340], "databas": [63, 67, 71, 83, 92, 103, 106, 139, 154, 173, 177, 179, 205, 221, 239, 250, 257, 262, 272, 292, 294, 295, 304, 326, 335, 336, 340, 342, 346, 358, 360, 361, 364, 370, 371, 386, 390, 420, 427, 430, 438, 458, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "0x20": [63, 140, 340, 423], "bear": [63, 179, 239, 246, 279, 340, 348, 478], "py_unicode_tolow": [63, 470], "py_unicode_toupp": 63, "upper": [63, 67, 84, 91, 93, 94, 99, 100, 103, 119, 143, 145, 148, 156, 173, 186, 244, 279, 315, 333, 334, 336, 337, 340, 341, 370, 379, 383, 423, 425, 426, 431, 460, 470, 476, 478], "py_unicode_totitl": 63, "py_unicode_todecim": 63, "py_unicode_todigit": 63, "py_unicode_tonumer": 63, "py_unicode_is_surrog": 63, "0xd800": 63, "0xdfff": 63, "py_unicode_is_high_surrog": 63, "0xdbff": 63, "py_unicode_is_low_surrog": 63, "0xdc00": 63, "py_unicode_join_surrog": 63, "join": [63, 67, 76, 78, 84, 94, 100, 104, 111, 117, 123, 131, 133, 148, 151, 154, 156, 160, 171, 182, 186, 196, 198, 199, 204, 215, 218, 221, 238, 239, 240, 243, 255, 257, 264, 266, 275, 279, 280, 289, 290, 292, 298, 312, 315, 316, 317, 322, 327, 328, 331, 333, 334, 338, 340, 341, 357, 359, 360, 362, 380, 381, 389, 394, 402, 405, 406, 408, 417, 420, 436, 444, 447, 457, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 478], "pyunicode_new": [63, 467, 471], "maxchar": 63, "nearest": [63, 179, 182, 217, 221, 271, 348, 396, 424, 431, 465, 466, 478], "65535": [63, 417, 459], "1114111": [63, 348, 471], "pyunicode_fromkindanddata": [63, 471], "transform": [63, 67, 86, 92, 93, 94, 100, 102, 105, 106, 109, 119, 136, 142, 163, 179, 182, 189, 192, 193, 197, 201, 204, 207, 209, 221, 222, 251, 262, 263, 267, 295, 340, 373, 379, 380, 381, 408, 421, 422, 423, 425, 457, 458, 463, 465, 472, 473, 475, 478], "codepoint": [63, 243], "width": [63, 67, 74, 84, 91, 103, 114, 117, 138, 147, 154, 172, 173, 177, 179, 182, 218, 221, 243, 277, 288, 289, 303, 315, 340, 341, 348, 358, 359, 361, 364, 367, 371, 376, 379, 381, 382, 396, 423, 430, 444, 447, 457, 460, 462, 463, 464, 469, 470, 472, 474, 476, 478], "asterisk": [63, 119, 244, 340, 381, 401, 408, 422, 425, 431, 475], "pad": [63, 67, 83, 119, 140, 143, 150, 173, 179, 182, 192, 195, 221, 230, 231, 255, 280, 333, 340, 341, 343, 345, 361, 364, 371, 390, 403, 457, 460, 463, 464, 470, 474, 478], "ll": [63, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 103, 104, 106, 107, 109, 175, 189, 196, 265, 268, 288, 293, 315, 327, 336, 337, 340, 364, 379, 385, 408, 427, 429, 430, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 476, 477, 478], "intmax_t": [63, 469, 478], "uintmax_t": 63, "ssize_t": [63, 67, 89, 172, 343, 470, 471, 479], "ptrdiff_t": [63, 469, 478], "octal": [63, 84, 103, 109, 148, 180, 255, 288, 289, 315, 340, 341, 430, 457, 458, 460, 461, 463, 465, 468, 469, 470, 476, 477, 478], "hexadecim": [63, 84, 98, 103, 143, 154, 174, 231, 255, 288, 315, 340, 341, 348, 430, 457, 461, 463, 468, 469, 470, 471, 472, 478], "formatt": [63, 67, 115, 117, 264, 265, 288, 341, 358, 460, 464, 467, 470, 472, 473, 475, 478], "lld": [63, 451, 464], "llu": [63, 464], "li": [63, 406, 473, 475, 478], "lli": [63, 379], "zi": 63, "ing": [63, 78, 103, 189, 239, 464, 471, 475, 478], "pyunicode_copycharact": [63, 467, 468, 471, 478], "to_start": 63, "from_start": 63, "how_mani": 63, "memcpi": [63, 468, 478], "pyunicode_fil": [63, 468, 471, 478], "fill_char": 63, "bigger": [63, 92, 271, 328, 340, 353, 456, 476, 478], "contrast": [63, 182, 222, 243, 304, 337, 340, 343, 364, 381, 407, 423, 424, 425, 427, 459, 471, 474, 475], "substr": [63, 89, 94, 103, 106, 163, 189, 231, 288, 315, 340, 383, 425, 444, 457, 459, 460, 461, 462, 463, 471, 473, 475, 478], "buflen": [63, 333], "copy_nul": 63, "383": [63, 154, 333, 478], "strlen": [63, 78, 104, 106], "parsetupl": 63, "wcslen": 63, "deviat": [63, 102, 344, 362, 389, 470, 471, 472, 478], "simplic": [63, 74, 258, 336, 340, 457, 459], "pyunicode_asutf8": [63, 471, 475, 478], "byteord": [63, 67, 311, 340, 343, 348, 445, 478], "bom": [63, 67, 106, 142, 258, 373, 478], "divis": [63, 65, 67, 84, 86, 100, 110, 119, 179, 182, 209, 293, 298, 329, 336, 340, 423, 424, 425, 431, 438, 444, 460, 461, 463, 464, 468, 470, 477, 478, 479], "ufeff": 63, "ufff": 63, "odd": [63, 91, 94, 150, 182, 231, 304, 344, 430, 436, 457, 460, 461, 462, 464, 478], "ordin": [63, 93, 106, 154, 172, 173, 174, 179, 339, 340, 379, 471, 473], "unmap": [63, 371], "0xfffe": [63, 154], "translat": [63, 67, 72, 102, 103, 106, 109, 154, 172, 173, 183, 208, 209, 215, 216, 218, 221, 234, 241, 242, 246, 254, 258, 278, 289, 329, 333, 340, 341, 344, 382, 408, 412, 414, 421, 422, 423, 457, 460, 461, 463, 464, 465, 466, 468, 470, 473, 475, 476, 478], "dbcs": [63, 154], "code_pag": [63, 471], "cp_acp": [63, 154, 471, 474], "concat": [63, 67, 94, 220, 287, 381, 436], "sep": [63, 67, 84, 94, 115, 143, 179, 182, 221, 227, 240, 243, 289, 292, 337, 340, 341, 353, 402, 422, 436, 459, 462, 463, 464, 465, 468, 478], "maxsplit": [63, 103, 315, 340], "keepend": [63, 154, 186, 196, 340], "crlf": [63, 219, 240, 241, 475, 478], "tail": [63, 67, 93, 148, 156, 186, 257, 269, 290, 330, 408, 462, 469, 471, 474, 478], "forward": [63, 67, 84, 89, 92, 94, 103, 119, 150, 152, 172, 173, 179, 187, 196, 218, 222, 226, 243, 267, 285, 292, 293, 336, 337, 340, 379, 381, 397, 402, 406, 422, 457, 458, 459, 461, 463, 466, 470, 475, 478], "replstr": 63, "maxcount": 63, "uni": 63, "iso": [63, 147, 154, 179, 186, 191, 192, 198, 201, 235, 238, 262, 284, 310, 333, 336, 348, 361, 393, 402, 412, 414, 457, 461, 468, 470, 473, 474, 476, 478], "8859": [63, 106, 154, 186, 191, 192, 198, 201, 238, 284, 310, 402, 412, 457, 470, 473], "clarif": [63, 427, 478], "lot": [63, 67, 72, 74, 76, 78, 83, 84, 89, 99, 103, 106, 107, 148, 165, 166, 172, 180, 189, 196, 230, 241, 255, 263, 279, 288, 300, 304, 326, 334, 344, 369, 377, 384, 404, 457, 458, 459, 460, 461, 463, 464, 465, 472, 477, 478], "talk": [63, 84, 89, 91, 100, 106, 337, 344, 423, 462, 473], "neutral": [63, 72, 97, 472], "portabl": [64, 67, 72, 79, 80, 100, 106, 128, 172, 173, 211, 212, 215, 245, 246, 262, 271, 274, 289, 294, 295, 299, 302, 333, 338, 353, 361, 394, 398, 416, 443, 456, 457, 460, 466, 471, 475, 476, 478], "grammar": [65, 67, 94, 109, 153, 260, 341, 372, 422, 426, 429, 430, 457, 458, 462, 465, 467, 477, 478], "py_eval_input": [65, 78, 426], "py_file_input": [65, 426, 467], "py_single_input": [65, 426], "incompat": [65, 79, 89, 102, 172, 180, 207, 209, 251, 255, 263, 267, 284, 295, 381, 431, 451, 457, 460, 462, 465, 469, 470, 471, 473, 475, 476, 477, 478], "pyrun_anyfil": 65, "pyrun_anyfileexflag": 65, "closeit": 65, "pyrun_anyfileflag": 65, "pycompilerflag": [65, 476], "pyrun_anyfileex": 65, "devic": [65, 67, 97, 128, 154, 173, 174, 208, 221, 243, 254, 265, 289, 292, 324, 325, 328, 329, 333, 338, 344, 346, 348, 353, 400, 408, 450, 457, 463, 478], "pseudo": [65, 67, 89, 93, 117, 172, 177, 187, 192, 250, 270, 282, 289, 298, 318, 322, 337, 340, 348, 386, 427, 459, 460, 463, 469, 471, 474, 478], "pyrun_interactiveloop": [65, 78], "pyrun_simplefil": [65, 71], "pyrun_simplefileexflag": [65, 478], "pyrun_simplestringflag": 65, "pyrun_simplefileex": 65, "fopen": [65, 186, 471], "rb": [65, 83, 86, 100, 102, 114, 123, 146, 156, 196, 204, 214, 221, 230, 231, 248, 249, 254, 266, 284, 295, 298, 340, 373, 374, 381, 392, 396, 402, 414, 417, 430, 441, 447, 457, 460, 467, 471, 478], "lf": [65, 67, 115, 174, 204, 430, 478], "pyrun_interactiveon": [65, 478], "pyrun_interactiveoneflag": 65, "ps1": [65, 67, 153, 311, 333, 348, 394, 433, 445, 450, 476, 478], "ps2": [65, 67, 153, 311, 348, 433, 445, 450, 478], "errcod": [65, 67, 252, 414], "pyrun_interactiveloopflag": 65, "eof": [65, 67, 104, 116, 123, 127, 130, 133, 134, 146, 152, 153, 164, 189, 209, 218, 219, 221, 254, 266, 289, 305, 324, 327, 333, 336, 337, 354, 419, 450, 462, 467, 471, 478], "prototyp": [65, 67, 89, 115, 152, 182, 336, 457, 462, 464, 478], "idl": [65, 67, 78, 79, 84, 86, 171, 172, 174, 225, 250, 330, 344, 363, 364, 379, 405, 406, 408, 454, 456, 459, 460, 479], "wait": [65, 67, 72, 84, 91, 100, 107, 112, 115, 117, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 160, 162, 173, 185, 203, 204, 241, 243, 250, 251, 253, 256, 265, 278, 279, 280, 289, 291, 314, 318, 321, 325, 329, 331, 333, 334, 336, 337, 338, 344, 356, 357, 360, 365, 379, 390, 394, 398, 436, 447, 460, 461, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "integr": [65, 67, 72, 84, 86, 96, 100, 112, 115, 182, 189, 217, 221, 243, 266, 271, 285, 286, 315, 334, 336, 340, 343, 360, 364, 383, 384, 385, 396, 423, 425, 452, 456, 457, 460, 461, 463, 465, 470, 471, 475, 476, 477, 478], "_tkinter": [65, 364, 379, 460, 468, 473, 477, 478], "pyos_readlinefunctionpoint": [65, 78, 467, 469, 472, 478], "edit": [65, 67, 89, 91, 94, 100, 103, 106, 115, 152, 163, 173, 186, 246, 247, 258, 267, 268, 289, 315, 316, 339, 353, 362, 363, 364, 371, 440, 450, 456, 457, 458, 460, 461, 463, 465, 470, 474, 475, 478], "pyrun_str": [65, 78, 478], "pyrun_stringflag": 65, "pyrun_fil": 65, "pyrun_fileexflag": 65, "pyrun_fileex": 65, "pyrun_fileflag": 65, "py_compilestringflag": 65, "py_compilestringexflag": 65, "py_compilestringobject": 65, "constrain": [65, 97, 119, 204, 280, 381, 408, 422, 425, 427, 459, 462, 470, 476, 478], "kws": [65, 221, 348], "kwcount": 65, "defcount": 65, "kwdef": [65, 478], "precompil": [65, 89, 320, 340, 450, 478], "unvarnish": 65, "thrown": [65, 89, 94, 136, 179, 182, 264, 315, 459, 460, 471, 478], "pyeval_mergecompilerflag": 65, "cf": [65, 103, 333], "arbitrarili": [65, 119, 163, 165, 187, 264, 289, 314, 340, 383, 390, 425, 461, 469, 476, 478], "__future__": [65, 67, 86, 87, 102, 109, 155, 209, 221, 250, 251, 259, 311, 381, 422, 423, 431, 459, 460, 462, 463, 465, 467, 468, 472, 473, 475, 477, 478, 479], "cf_flag": [65, 476], "cf_feature_vers": [65, 476, 478], "pycf_only_ast": [65, 67, 119, 260, 462, 476, 478], "co_future_divis": [65, 477], "238": [65, 67, 86, 110, 465, 479], "pyweakref_check": 66, "pyweakref_checkref": 66, "pyweakref_checkproxi": 66, "pyweakref_get_object": [66, 468, 478], "701": [67, 478], "syntact": [67, 84, 165, 198, 246, 310, 336, 340, 373, 381, 384, 389, 395, 409, 422, 424, 425, 429, 430, 431, 436, 461, 462, 465, 478], "formal": [67, 89, 189, 221, 231, 288, 315, 340, 341, 389, 409, 416, 423, 424, 425, 429, 431, 457, 459, 466, 472, 473, 476, 477, 478], "709": [67, 464, 478], "688": [67, 157, 423, 478], "684": [67, 478], "692": [67, 381, 478], "typeddict": [67, 183, 380, 381, 467, 476, 478], "698": [67, 381, 478], "decor": [67, 86, 92, 93, 100, 119, 137, 157, 172, 177, 178, 183, 221, 222, 251, 311, 317, 340, 357, 381, 383, 415, 422, 423, 424, 425, 426, 462, 464, 465, 468, 470, 471, 472, 475, 476, 477, 478, 479], "695": [67, 99, 381, 424, 431, 478], "asyncio": [67, 83, 99, 100, 111, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 160, 165, 184, 250, 256, 263, 279, 337, 344, 348, 360, 384, 385, 423, 425, 450, 478], "calendar": [67, 178, 179, 250, 361, 446, 457, 460, 468, 474, 478], "csv": [67, 98, 156, 213, 250, 357, 446, 460, 462, 466, 474, 478], "dis": [67, 86, 250, 251, 260, 296, 348, 474, 478], "fraction": [67, 72, 106, 179, 182, 189, 221, 222, 250, 257, 262, 271, 285, 286, 304, 314, 315, 336, 337, 339, 340, 360, 361, 379, 425, 430, 439, 444, 459, 460, 461, 462, 464, 465, 466, 467, 473, 474, 476, 477, 478], "itertool": [67, 86, 109, 156, 220, 221, 222, 232, 243, 246, 250, 271, 275, 287, 314, 339, 460, 461, 462, 463, 464, 465, 466, 478], "math": [67, 86, 89, 94, 151, 162, 182, 189, 208, 217, 221, 250, 257, 279, 285, 286, 314, 339, 340, 343, 348, 379, 421, 423, 425, 437, 439, 441, 446, 451, 460, 461, 463, 464, 466, 478], "pathlib": [67, 117, 139, 159, 215, 227, 247, 248, 249, 250, 289, 290, 411, 417, 478], "pdb": [67, 84, 111, 139, 141, 181, 189, 210, 221, 250, 348, 376, 377, 450, 456, 460, 462, 463, 466, 468, 478], "shutil": [67, 83, 100, 107, 116, 139, 162, 215, 221, 230, 250, 289, 292, 344, 353, 357, 397, 446, 460, 463, 464, 467, 475, 478], "sqlite3": [67, 83, 92, 139, 156, 250, 294, 295, 451, 463, 464, 476, 478], "tempfil": [67, 107, 139, 196, 215, 221, 250, 279, 289, 323, 357, 390, 397, 463, 465, 478], "tkinter": [67, 79, 250, 363, 379, 454, 457, 460, 463, 465, 466, 478], "unicodedata": [67, 103, 106, 250, 340, 358, 425, 430, 457, 462, 463, 464, 467, 470, 471, 478], "unittest": [67, 77, 83, 109, 183, 250, 357, 377, 395, 446, 460, 466, 477, 478], "uuid": [67, 250, 252, 277, 333, 462, 468, 476, 478], "demo": [67, 88, 100, 218, 243, 402, 406, 415, 446, 460, 463, 470, 479], "13": [67, 94, 96, 100, 101, 106, 109, 114, 136, 138, 147, 148, 149, 150, 154, 156, 169, 172, 179, 189, 207, 222, 232, 237, 245, 255, 257, 262, 268, 274, 277, 283, 290, 291, 297, 318, 328, 332, 335, 336, 339, 340, 341, 345, 354, 355, 373, 381, 392, 398, 403, 424, 436, 439, 441, 444, 445, 459, 460, 461, 462, 463, 464, 468, 470, 472, 473, 475, 476, 477, 478, 479], "port": [67, 89, 90, 91, 100, 102, 104, 107, 123, 133, 139, 163, 219, 238, 239, 241, 243, 244, 252, 253, 264, 265, 279, 284, 289, 301, 309, 329, 331, 333, 334, 336, 337, 338, 354, 357, 389, 390, 402, 414, 415, 458, 459, 478, 479], "657": [67, 478], "654": [67, 478], "678": [67, 469, 478], "exe": [67, 85, 101, 103, 243, 265, 279, 289, 290, 328, 330, 344, 394, 417, 433, 441, 443, 451, 456, 459, 464, 470, 474, 475, 478], "launcher": [67, 394, 416, 443, 453, 464, 472, 474, 475, 478, 479], "646": [67, 154, 381, 478], "variad": [67, 115, 381, 436, 478], "655": [67, 381, 478], "673": [67, 100, 381, 478], "675": [67, 221, 381, 478], "681": [67, 381, 478], "563": [67, 110, 284, 381, 422, 431, 478], "contextlib": [67, 77, 183, 250, 311, 340, 377, 464, 465, 466, 476, 478], "dataclass": [67, 156, 207, 232, 250, 303, 304, 311, 312, 336, 340, 381, 435, 436, 478], "fcntl": [67, 139, 250, 333, 386, 459, 460, 461, 463, 478], "functool": [67, 84, 86, 87, 92, 105, 109, 123, 126, 144, 156, 216, 220, 221, 247, 250, 251, 257, 340, 423, 462, 463, 464, 465, 466, 478], "idlelib": [67, 363, 364, 460, 478], "sysconfig": [67, 71, 101, 250, 289, 311, 377, 394, 420, 467, 472, 478], "venv": [67, 86, 100, 108, 111, 188, 247, 250, 350, 448, 456, 469, 471, 475, 478], "zipfil": [67, 116, 250, 320, 323, 328, 353, 395, 416, 427, 446, 447, 450, 457, 462, 463, 464, 466, 478], "cheaper": [67, 376, 475], "lazi": [67, 87, 94, 132, 221, 257, 276, 337, 340, 348, 354, 381, 400, 422, 431, 462, 467, 469, 473, 475, 478], "659": [67, 478], "faq": [67, 77, 84, 85, 221, 231, 251, 286, 301, 340, 389, 424, 449, 462, 464, 472, 478], "jit": [67, 469, 474, 478], "wildcard": [67, 119, 185, 216, 227, 284, 327, 344, 383, 408, 430, 436, 438, 440, 475, 476, 478], "604": [67, 87, 340, 381, 478], "612": [67, 99, 381, 463, 478], "613": [67, 381, 478], "typealia": [67, 119, 183, 260, 381, 478], "647": [67, 381, 478], "argpars": [67, 84, 95, 100, 115, 156, 186, 196, 224, 250, 288, 305, 394, 446, 469, 478, 479], "asynchat": [67, 421, 463, 468, 469, 472, 478], "asyncor": [67, 421, 461, 463, 468, 469, 478], "smtpd": [67, 468, 469, 474, 477, 478], "base64": [67, 143, 154, 191, 192, 193, 194, 195, 198, 199, 202, 204, 231, 244, 247, 250, 281, 313, 322, 323, 331, 337, 377, 390, 392, 414, 459, 461, 477, 478], "bdb": [67, 163, 181, 250, 293, 451, 464, 476, 478], "bisect": [67, 178, 250, 447, 461, 478], "curs": [67, 89, 95, 115, 250, 457, 458, 461, 463, 478], "__slots__": [67, 86, 156, 177, 221, 222, 251, 295, 397, 459, 464, 476, 478], "distutil": [67, 70, 75, 76, 108, 247, 350, 458, 462, 463, 464, 468, 469, 470, 476, 478, 479], "doctest": [67, 77, 83, 109, 172, 183, 250, 357, 373, 376, 377, 383, 439, 446, 458, 460, 462, 464, 466, 470, 471, 478], "fileinput": [67, 215, 221, 250, 289, 348, 462, 468, 470, 476, 478], "glob": [67, 100, 139, 141, 183, 189, 215, 216, 250, 277, 290, 292, 293, 328, 344, 346, 446, 463, 464, 468, 469, 470, 474, 478], "hmac": [67, 169, 170, 231, 250, 265, 279, 295, 322, 333, 459, 464, 476, 478], "metadata": [67, 83, 96, 107, 108, 177, 222, 226, 246, 250, 251, 276, 284, 289, 290, 307, 328, 338, 353, 381, 414, 416, 417, 423, 427, 436, 448, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "linecach": [67, 215, 250, 377, 478], "pprint": [67, 92, 144, 178, 186, 250, 293, 295, 337, 447, 458, 466, 470, 478], "py_compil": [67, 84, 159, 250, 260, 464, 469, 470, 472, 478], "pyclbr": [67, 250, 260, 478], "shelv": [67, 83, 180, 250, 270, 294, 295, 323, 340, 457, 460, 470, 478], "ssl": [67, 93, 107, 123, 130, 133, 219, 238, 244, 250, 256, 265, 284, 289, 301, 323, 331, 333, 381, 390, 402, 414, 421, 451, 455, 457, 460, 461, 464, 469, 477, 478], "urllib": [67, 83, 95, 109, 133, 139, 148, 162, 165, 219, 222, 237, 238, 239, 250, 252, 265, 303, 377, 384, 394, 446, 457, 460, 462, 463, 465, 476, 478], "zipimport": [67, 172, 248, 250, 276, 298, 427, 460, 462, 466, 469, 478], "652": [67, 478], "summari": [67, 83, 89, 189, 247, 288, 298, 303, 318, 346, 375, 376, 381, 402, 421, 448, 456, 458, 459, 460, 461, 470, 478, 479], "highlight": [67, 79, 91, 173, 186, 243, 383, 389, 452, 457, 464, 467, 468, 470, 478, 479], "zoneinfo": [67, 178, 179, 250, 361, 451, 478], "graphlib": [67, 178, 250, 478], "ast": [67, 180, 221, 250, 260, 347, 372, 373, 462, 467, 468, 469, 471, 475, 478], "compileal": [67, 84, 250, 260, 307, 348, 445, 451, 456, 469, 470, 474, 478], "ftplib": [67, 139, 154, 250, 252, 390, 458, 460, 463, 464, 469, 470, 472, 473, 474, 478], "http": [67, 79, 83, 99, 100, 104, 107, 130, 139, 140, 148, 154, 162, 165, 179, 190, 196, 204, 205, 236, 250, 252, 265, 281, 309, 310, 323, 329, 333, 334, 337, 357, 377, 388, 389, 390, 391, 404, 408, 410, 413, 414, 415, 419, 421, 423, 427, 446, 447, 448, 449, 450, 454, 455, 457, 459, 460, 461, 462, 463, 465, 469, 476, 478], "imaplib": [67, 103, 139, 190, 250, 252, 301, 459, 460, 461, 464, 466, 469, 474, 478], "ipaddress": [67, 95, 250, 252, 476, 478], "multiprocess": [67, 83, 99, 104, 122, 123, 160, 162, 243, 250, 265, 312, 323, 337, 357, 360, 393, 402, 464, 465, 469, 478, 479], "nntplib": [67, 139, 190, 197, 250, 346, 457, 461, 464, 466, 468, 469, 470, 478], "poplib": [67, 139, 190, 250, 252, 446, 461, 469, 471, 474, 478], "smtplib": [67, 83, 100, 139, 190, 196, 197, 204, 250, 252, 265, 337, 446, 459, 463, 469, 470, 474, 478], "notabl": [67, 98, 134, 187, 262, 279, 280, 329, 336, 395, 420, 458, 459, 460, 461, 462, 463, 464, 466, 479], "sur": [67, 478], "appl": [67, 92, 172, 186, 213, 243, 250, 265, 287, 343, 437, 446, 454, 460, 463, 464, 474, 478], "silicon": [67, 478], "mac": [67, 221, 231, 299, 328, 337, 371, 393, 451, 453, 465, 467, 469, 470, 472, 474, 475, 478], "parallel": [67, 83, 86, 94, 98, 100, 121, 123, 126, 131, 134, 159, 160, 165, 203, 221, 228, 231, 250, 257, 348, 379, 383, 396, 398, 408, 438, 450, 457, 464, 470, 471, 472, 473, 477, 478], "band": [67, 294, 324, 478], "cprofil": [67, 181, 462, 478], "gettext": [67, 88, 100, 242, 250, 262, 406, 430, 446, 457, 461, 468, 478], "gzip": [67, 79, 86, 100, 116, 146, 154, 196, 214, 250, 272, 328, 353, 357, 404, 421, 446, 457, 460, 464, 466, 467, 469, 472, 474, 478], "json": [67, 99, 100, 117, 148, 163, 247, 250, 254, 264, 265, 281, 294, 303, 343, 440, 446, 464, 466, 467, 470, 471, 472, 477, 478], "plistlib": [67, 213, 250, 474, 475, 477, 478], "shlex": [67, 111, 123, 134, 163, 218, 250, 293, 344, 469, 477, 478], "tarfil": [67, 111, 116, 250, 328, 446, 460, 461, 462, 463, 464, 469, 474, 475, 478], "xmlrpc": [67, 250, 252, 279, 295, 404, 421, 446, 459, 465, 472, 478], "postpon": [67, 110, 173, 246, 381, 422, 423, 468, 478], "553": [67, 478], "562": [67, 423, 478], "564": [67, 478], "nanosecond": [67, 289, 361, 400, 462, 471, 476, 477, 478], "565": [67, 209], "560": [67, 380, 423, 478], "545": 67, "binascii": [67, 98, 140, 154, 250, 281, 392, 421, 464, 468, 472, 477, 478], "crypt": [67, 170, 250, 306, 346, 421, 468, 469, 474, 478], "dbm": [67, 83, 250, 294, 295, 326, 423, 451, 464, 465, 476, 478], "server": [67, 83, 84, 91, 94, 99, 104, 107, 133, 148, 163, 166, 172, 188, 190, 194, 196, 204, 219, 222, 231, 237, 238, 239, 240, 243, 244, 250, 252, 253, 255, 263, 264, 265, 279, 284, 289, 290, 292, 301, 309, 314, 323, 324, 325, 329, 331, 333, 336, 348, 351, 354, 357, 360, 364, 377, 381, 388, 390, 404, 413, 421, 446, 447, 456, 458, 459, 460, 461, 462, 463, 464, 469, 471, 472, 473, 474, 476, 477, 478, 479], "mimetyp": [67, 193, 196, 250, 268, 281, 377, 402, 459, 463, 474, 478], "msilib": [67, 250, 346, 462, 463, 468, 469, 478], "queue": [67, 83, 99, 100, 104, 120, 123, 133, 156, 160, 173, 178, 208, 228, 250, 257, 264, 265, 289, 314, 318, 321, 324, 333, 334, 340, 354, 356, 360, 364, 408, 440, 447, 457, 460, 461, 462, 463, 465, 470, 473, 476, 477, 478], "socketserv": [67, 100, 237, 241, 250, 252, 333, 415, 463, 464, 465, 478], "mock": [67, 183, 250, 377, 383, 468, 471, 472, 476, 477, 478], "uu": [67, 143, 154, 392, 421, 459, 468, 469, 478], "etre": [67, 250, 269, 404, 406, 446, 462, 464, 469, 470, 474, 476, 477, 478], "zipapp": [67, 111, 188, 250, 478], "aifc": [67, 202, 250, 332, 345, 346, 396, 457, 468, 469, 477, 478], "macpath": [67, 476, 478], "sunau": [67, 250, 346, 468, 469, 477, 478], "wave": [67, 150, 250, 273, 345, 457, 474, 477, 478], "498": [67, 86, 430, 472, 478], "526": [67, 86, 100, 119, 177, 381, 422, 431, 467, 475, 476, 478], "515": [67, 217, 341, 468, 478], "525": [67, 86, 157, 251, 348, 425, 478], "530": [67, 425, 478], "487": [67, 478], "enhanc": [67, 79, 86, 91, 94, 100, 171, 222, 241, 264, 279, 337, 344, 357, 371, 379, 381, 425, 430, 457, 458, 459, 461, 462, 465, 466, 470, 471, 472, 473, 478, 479], "519": [67, 86, 377, 478], "495": [67, 420, 478], "520": 67, "468": [67, 156, 478], "dtrace": [67, 95, 451, 478], "systemtap": [67, 95, 451, 478], "probe": [67, 472, 478], "cmath": [67, 86, 250, 271, 286, 340, 461, 463, 472, 478], "email": [67, 86, 99, 140, 143, 148, 231, 238, 239, 241, 247, 250, 264, 265, 267, 268, 281, 289, 315, 331, 337, 348, 361, 390, 421, 427, 446, 448, 459, 461, 462, 463, 464, 469, 478], "pickletool": [67, 250, 260, 295, 377, 463, 478], "rlcomplet": [67, 111, 250, 316, 330, 358, 462, 463, 478], "telnetlib": [67, 139, 250, 346, 463, 468, 469, 478], "timeit": [67, 84, 165, 181, 250, 304, 446, 450, 460, 461, 463, 478], "robotpars": [67, 250, 252, 387, 457, 465, 478], "winreg": [67, 139, 250, 399, 445, 465, 478], "winsound": [67, 76, 250, 399, 478], "grp": [67, 250, 306, 335, 344, 386, 460, 477, 478], "regen": [67, 89, 451, 478], "492": [67, 86, 157, 251, 422, 423, 425, 474, 478], "465": [67, 331, 478], "infix": 67, "448": [67, 425, 478], "461": [67, 340], "percent": [67, 83, 260, 339, 341, 372, 389, 421, 456, 463, 465, 470, 478], "484": [67, 86, 119, 340, 381, 422, 423, 431, 436, 467, 468, 469, 474, 475, 476, 478], "471": [67, 156, 478], "scandir": [67, 115, 139, 227, 289, 292, 474, 475, 476, 478], "better": [67, 71, 72, 74, 75, 83, 84, 92, 94, 98, 100, 102, 103, 111, 117, 123, 135, 138, 155, 172, 186, 189, 207, 211, 222, 224, 230, 243, 257, 262, 267, 279, 288, 289, 301, 304, 324, 343, 344, 360, 361, 364, 371, 379, 381, 383, 384, 385, 392, 408, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478], "475": [67, 209, 221, 289, 324, 325, 329, 333, 361, 478], "retri": [67, 89, 103, 107, 209, 265, 289, 324, 325, 329, 333, 337, 344, 390, 424, 436, 459, 460, 464, 468, 478], "479": [67, 110, 209, 474, 475, 478], "485": [67, 151, 271, 478], "486": [67, 210, 471, 478], "awar": [67, 76, 97, 103, 105, 136, 163, 175, 178, 190, 192, 196, 198, 199, 201, 202, 205, 222, 226, 244, 262, 268, 289, 292, 336, 337, 341, 348, 361, 362, 364, 395, 408, 411, 445, 450, 451, 456, 457, 459, 460, 461, 465, 466, 469, 470, 471, 474, 475, 478], "488": [67, 246, 307, 357, 450, 478], "elimin": [67, 92, 99, 102, 182, 186, 246, 247, 257, 258, 267, 292, 296, 379, 451, 461, 471, 476, 478], "pyo": [67, 159, 246, 377, 460, 463, 464, 472, 478], "bz2": [67, 116, 154, 172, 214, 250, 266, 292, 328, 353, 357, 417, 446, 460, 464, 466, 467, 472, 477, 478], "cgi": [67, 107, 241, 250, 323, 324, 346, 390, 391, 402, 415, 457, 463, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478], "configpars": [67, 111, 213, 250, 264, 327, 457, 461, 464, 465, 466, 468, 469, 472, 475, 478], "difflib": [67, 142, 189, 212, 250, 358, 458, 459, 461, 462, 463, 464, 472, 478], "heapq": [67, 86, 178, 221, 222, 250, 312, 314, 447, 460, 461, 462, 463, 478], "imghdr": [67, 250, 332, 346, 468, 469, 478], "lzma": [67, 116, 146, 250, 328, 353, 357, 404, 417, 446, 467, 472, 478], "selector": [67, 94, 122, 123, 128, 250, 252, 256, 257, 324, 329, 334, 337, 356, 363, 390, 464, 466, 475, 478], "sndhdr": [67, 250, 346, 468, 469, 478], "bio": [67, 284, 478], "negoti": [67, 237, 337, 463, 471, 478], "wsgiref": [67, 250, 252, 468, 470, 474, 476, 478], "sax": [67, 250, 269, 404, 405, 406, 407, 446, 457, 458, 467, 476, 478], "453": [67, 206], "bootstrap": [67, 108, 139, 188, 250, 314, 330, 394, 469, 478], "pip": [67, 102, 111, 188, 247, 250, 257, 394, 416, 440, 450, 456, 467, 469, 478], "446": [67, 464], "ensurepip": [67, 108, 139, 188, 250, 394, 451, 467, 469, 478], "audioop": [67, 250, 346, 462, 468, 469, 477, 478], "colorsi": [67, 250, 273, 478], "filecmp": [67, 186, 215, 250, 457, 478], "html": [67, 70, 77, 78, 79, 94, 99, 103, 107, 123, 133, 147, 148, 149, 154, 158, 186, 196, 201, 238, 239, 241, 243, 250, 269, 289, 309, 336, 337, 346, 364, 375, 389, 390, 391, 402, 406, 407, 408, 412, 414, 415, 419, 421, 423, 430, 447, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 473, 475, 476, 477, 478, 479], "pti": [67, 139, 250, 289, 337, 386, 469, 478], "stat": [67, 86, 106, 115, 181, 186, 212, 215, 230, 246, 250, 252, 254, 265, 284, 289, 290, 292, 301, 328, 337, 346, 353, 377, 381, 427, 451, 459, 460, 462, 463, 467, 469, 470, 473, 474, 475, 476, 478], "textwrap": [67, 117, 250, 358, 447, 460, 463, 478], "445": 67, "456": [67, 72, 100, 182], "secur": [67, 84, 100, 115, 123, 160, 170, 172, 219, 238, 239, 240, 244, 250, 252, 265, 266, 268, 279, 281, 284, 289, 295, 301, 310, 322, 327, 330, 331, 333, 340, 346, 348, 353, 390, 400, 402, 404, 406, 407, 408, 409, 414, 415, 453, 457, 458, 459, 460, 462, 463, 470, 471, 473, 474, 475, 476, 477], "interchang": [67, 100, 114, 140, 150, 179, 182, 209, 231, 263, 332, 340, 343, 364, 381, 385, 423, 430, 457, 463, 470, 471], "436": [67, 89, 315], "clinic": [67, 95, 474, 476, 478], "476": [67, 377, 478], "certif": [67, 123, 130, 133, 238, 244, 265, 301, 357, 390, 414, 463, 469, 475, 478], "verif": [67, 116, 264, 336, 337, 340, 389, 470, 478], "405": [67, 107, 237, 394, 479], "420": [67, 86, 246, 427, 478, 479], "3118": [67, 340, 465, 476, 478, 479], "flexibl": [67, 72, 83, 88, 89, 92, 97, 99, 100, 103, 109, 130, 148, 165, 172, 186, 189, 192, 201, 204, 226, 263, 264, 279, 288, 291, 295, 336, 340, 344, 353, 361, 381, 384, 395, 406, 408, 423, 457, 458, 460, 462, 464, 465, 470, 473, 477, 479], "397": [67, 328, 456, 473, 478, 479], "rework": [67, 209, 284, 458, 459, 460, 462, 464, 470, 474, 478, 479], "380": [67, 425, 479], "subgener": [67, 425, 479], "409": [67, 107, 237, 479], "414": [67, 107, 182, 237, 377, 430, 460, 478, 479], "3155": [67, 86, 479], "412": [67, 107, 222, 237, 479], "362": [67, 86, 96, 251, 479], "421": [67, 237, 348, 478, 479], "simplenamespac": [67, 156, 178, 303, 380, 394, 477, 478], "finer": [67, 73, 99, 123, 263, 289, 469, 475, 476, 478, 479], "grain": [67, 83, 99, 100, 173, 189, 207, 263, 289, 314, 348, 390, 423, 469, 478, 479], "framework": [67, 83, 100, 120, 123, 130, 152, 163, 166, 172, 181, 183, 189, 218, 243, 250, 252, 330, 331, 337, 340, 348, 381, 383, 384, 390, 402, 415, 423, 438, 451, 454, 459, 460, 463, 464, 465, 470, 472, 473, 475, 476, 477, 478, 479], "sched": [67, 160, 250, 463, 478], "webbrows": [67, 139, 196, 250, 252, 457, 462, 468, 469, 478], "elementtre": [67, 250, 269, 404, 406, 446, 469, 472, 474, 476, 477, 478], "384": [67, 179, 462, 467, 477, 478, 479], "389": [67, 479], "391": [67, 479], "3148": [67, 162, 479], "repositori": [67, 246, 420, 455, 457, 458, 462, 464, 478, 479], "3149": [67, 348, 478, 479], "3333": [67, 402, 479], "web": [67, 83, 84, 94, 102, 104, 106, 107, 148, 222, 231, 240, 241, 243, 250, 252, 253, 265, 268, 309, 336, 337, 389, 390, 402, 405, 415, 421, 427, 456, 457, 458, 459, 460, 461, 462, 463, 464, 472, 478, 479], "gateway": [67, 107, 148, 252, 462, 479], "v1": [67, 333, 343, 478, 479], "ftp": [67, 79, 107, 250, 252, 265, 282, 389, 390, 455, 457, 458, 463, 464, 471, 477, 478], "popen": [67, 100, 115, 123, 130, 134, 139, 148, 160, 204, 244, 289, 297, 302, 324, 333, 355, 357, 394, 423, 461, 463, 471, 472, 474, 475, 476, 478], "nntp": [67, 190, 250, 346, 389, 461, 471, 477, 478], "mailbox": [67, 84, 190, 197, 244, 250, 281, 301, 462, 464, 474, 477, 478], "turtledemo": [67, 218, 243, 478], "372": [67, 479], "378": [67, 341, 377, 479], "thousand": [67, 106, 231, 262, 303, 304, 315, 341, 404, 436, 474, 475, 478, 479], "stumbl": [67, 479], "vs": [67, 183, 304, 358, 362, 422, 478], "overview": [67, 73, 97, 106, 255, 276, 284, 288, 303, 304, 311, 381, 404, 456, 457, 458, 459, 460, 462, 463, 464, 470, 473, 475, 479], "3101": [67, 341, 479], "miscellan": [67, 115, 116, 152, 160, 187, 190, 213, 281, 363, 402, 453, 478, 479], "3106": [67, 479], "3137": [67, 479], "ttk": [67, 250, 363, 364, 370, 466, 474, 475, 476, 478], "theme": [67, 243, 250, 363, 364, 460, 463, 466, 474, 475, 478], "widget": [67, 80, 91, 92, 100, 115, 165, 177, 185, 243, 250, 288, 363, 366, 379, 383, 457, 460, 461, 466, 470, 474, 478], "tk": [67, 243, 250, 366, 367, 379, 434, 454, 456, 457, 458, 463, 466, 467, 468, 470, 471, 473, 474, 475, 477, 478], "freebsd": [67, 91, 112, 130, 208, 211, 274, 289, 291, 305, 318, 324, 333, 348, 357, 360, 361, 453, 462, 468, 472, 475, 477, 478], "mainten": [67, 206, 430, 456, 469, 470, 471, 472, 475, 476, 477, 478, 479], "434": [67, 243], "branch": [67, 151, 187, 266, 315, 357, 370, 375, 457, 462, 463, 477, 478], "466": 67, "network": [67, 99, 104, 106, 107, 130, 133, 138, 142, 180, 208, 243, 245, 250, 252, 253, 265, 279, 284, 289, 295, 318, 324, 331, 337, 343, 353, 357, 389, 390, 393, 400, 404, 409, 415, 427, 458, 459, 460, 463, 471, 473, 475, 476, 478], "477": [67, 469, 478], "backport": [67, 102, 182, 243, 247, 248, 353, 381, 384, 417, 463, 473, 474, 475, 476, 477, 478], "493": [67, 96], "migrat": [67, 90, 247, 248, 251, 381, 395, 405, 431, 462, 463, 466, 469, 471, 472, 478], "roundup": 67, "343": [67, 86, 110, 165, 422, 423, 441, 444, 465, 479], "366": [67, 93, 96, 179, 246, 320, 361, 427, 465, 471, 479], "370": [67, 330, 450, 465, 478, 479], "371": [67, 465, 479], "3105": [67, 110, 465, 479], "3110": [67, 465, 479], "3112": [67, 110, 465, 479], "3116": [67, 86, 465, 466, 479], "3127": [67, 465, 479], "3129": [67, 422, 465, 479], "3141": [67, 113, 285, 465, 479], "future_builtin": [67, 109], "javascript": [67, 163, 236, 240, 253, 258, 295, 436, 441, 467, 478], "notat": [67, 77, 86, 89, 94, 97, 100, 103, 106, 163, 182, 221, 255, 258, 269, 274, 289, 295, 310, 333, 340, 341, 344, 358, 364, 384, 405, 408, 410, 422, 423, 425, 426, 428, 430, 435, 441, 450, 460, 461, 462, 465, 470, 476, 477, 478], "irix": [67, 465, 478], "308": [67, 222, 237, 425, 478, 479], "309": [67, 479], "314": [67, 84, 479], "328": [67, 110, 221, 246, 427, 465, 471, 479], "338": [67, 320, 427, 450, 479], "341": [67, 100, 479], "unifi": [67, 119, 154, 186, 189, 295, 382, 472, 478, 479], "342": [67, 94, 157, 362, 425, 479], "352": [67, 463, 465, 468, 478, 479], "357": [67, 479], "218": [67, 222, 479], "237": [67, 340, 465, 479], "289": [67, 94, 222, 304, 479], "292": [67, 100, 263, 341, 479], "318": [67, 422, 479], "322": [67, 479], "324": [67, 84, 344, 479], "327": [67, 468, 479], "whi": [67, 72, 74, 89, 91, 92, 93, 94, 97, 99, 102, 106, 111, 148, 163, 172, 189, 197, 231, 249, 257, 267, 271, 279, 288, 295, 341, 383, 384, 385, 402, 423, 456, 459, 462, 464, 475, 478], "331": [67, 479], "cookielib": [67, 464, 465], "datatyp": [67, 74, 84, 172, 182, 213, 258, 295, 461, 463, 464, 466, 470, 479], "263": [67, 106, 246, 373, 462, 478, 479], "273": [67, 154, 266, 280, 418, 479], "zip": [67, 84, 86, 94, 100, 109, 111, 116, 143, 154, 156, 162, 188, 221, 246, 247, 248, 249, 250, 257, 271, 276, 323, 328, 336, 340, 341, 349, 353, 357, 404, 427, 435, 437, 445, 447, 448, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 470, 473, 474, 475, 478, 479], "archiv": [67, 83, 100, 102, 111, 116, 188, 215, 247, 250, 267, 276, 338, 349, 357, 394, 421, 446, 457, 458, 462, 463, 464, 466, 469, 470, 472, 475, 476, 478, 479], "277": [67, 479], "nt": [67, 99, 107, 156, 265, 289, 299, 310, 348, 350, 394, 406, 408, 457, 470, 476, 478, 479], "278": [67, 86, 479], "univers": [67, 86, 93, 171, 179, 221, 231, 244, 246, 254, 340, 353, 361, 383, 389, 393, 417, 451, 454, 461, 462, 463, 468, 472, 474, 475, 477, 478, 479], "279": [67, 222, 479], "282": [67, 263, 328, 479], "285": [67, 86, 435, 479], "293": [67, 377, 479], "301": [67, 100, 107, 237, 390, 478, 479], "302": [67, 86, 107, 221, 237, 238, 241, 246, 261, 298, 320, 348, 390, 418, 427, 462, 463, 466, 471, 478, 479], "305": [67, 107, 171, 237, 479], "307": [67, 107, 237, 295, 390, 479], "optpars": [67, 88, 115, 250, 346, 461, 462, 464, 470, 474, 478], "252": [67, 97, 423, 478, 479], "253": [67, 97, 479], "diamond": [67, 93, 173, 221, 423], "234": [67, 182, 341, 447, 466, 473, 479], "227": [67, 110, 479], "236": [67, 431, 479], "207": [67, 237, 304, 479], "230": [67, 219, 470, 474, 479], "229": [67, 479], "205": [67, 107, 237, 241, 284, 397, 478, 479], "232": [67, 479], "235": [67, 246, 478, 479], "217": [67, 377, 479], "208": [67, 237, 479], "241": [67, 479], "sax2": [67, 250, 269, 404, 406, 410], "dom": [67, 250, 253, 269, 404, 410, 446, 458, 460, 462, 468, 476, 478], "relationship": [67, 92, 101, 130, 157, 179, 189, 294, 339, 340, 348, 364, 375, 397, 405, 421, 423, 462, 478], "pyxml": [67, 458], "changelog": [67, 303, 464, 467, 471, 472, 473, 474, 475, 476, 477, 479], "candid": [67, 79, 92, 110, 201, 226, 348, 423, 462, 463, 464, 472, 479], "lambda": [67, 86, 100, 105, 119, 123, 130, 141, 144, 156, 163, 177, 186, 222, 231, 251, 257, 260, 279, 295, 314, 336, 340, 353, 359, 362, 380, 383, 384, 385, 394, 415, 422, 423, 426, 428, 430, 437, 440, 457, 458, 459, 461, 462, 463, 465, 472, 473, 477, 478], "templat": [67, 72, 84, 89, 99, 111, 156, 197, 263, 315, 340, 346, 358, 362, 363, 368, 379, 440, 441, 459, 461, 463, 464, 468, 470, 471, 474, 475, 478], "histori": [67, 79, 100, 106, 137, 152, 179, 243, 267, 293, 330, 358, 360, 419, 440, 450, 472, 473, 474, 478], "openbsd": [67, 112, 219, 274, 289, 333, 360, 361, 453, 473, 475, 478], "openssl": [67, 231, 233, 337, 357, 451, 453, 457, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478], "webassembl": [67, 120, 148, 159, 162, 169, 206, 211, 219, 225, 229, 238, 241, 244, 274, 279, 283, 284, 289, 301, 306, 318, 324, 325, 329, 331, 333, 334, 335, 337, 344, 348, 351, 354, 360, 390, 394, 398, 414, 415, 420, 453, 468, 478], "linker": [67, 71, 76, 172, 453, 468, 478], "cross": [67, 71, 75, 100, 138, 179, 208, 240, 243, 289, 295, 333, 346, 353, 405, 420, 421, 430, 453, 457, 458, 459, 460, 463, 464, 466, 470, 471, 472, 473, 474, 476, 478], "max_path": [67, 453, 474, 478], "nuget": [67, 453, 475, 478], "embedd": [67, 240, 279, 453, 476, 478], "bundl": [67, 84, 165, 197, 203, 206, 244, 301, 337, 363, 364, 416, 451, 453, 460, 464, 469, 470, 472, 473, 475, 478], "excursus": [67, 443, 453], "shebang": [67, 163, 394, 416, 443, 453, 455, 471, 474, 478], "ini": [67, 213, 327, 453, 470, 478], "dri": [67, 280, 288, 453], "pywin32": [67, 84, 453, 478], "cx_freez": [67, 84, 279, 453], "macpython": [67, 453, 459], "gui": [67, 82, 84, 94, 106, 243, 288, 336, 338, 346, 348, 363, 364, 383, 434, 453, 463, 471, 478], "ide": [67, 79, 84, 86, 352, 381, 431, 446, 453, 456, 457, 459], "lexic": [67, 218, 236, 250, 251, 292, 352, 373, 410, 423, 425, 428, 429, 475, 478], "blank": [67, 83, 84, 89, 94, 117, 148, 152, 163, 171, 173, 182, 186, 189, 192, 201, 203, 204, 238, 241, 243, 264, 293, 296, 330, 337, 340, 349, 379, 389, 402, 408, 431, 461, 473, 475, 478], "indent": [67, 89, 96, 103, 109, 117, 119, 163, 165, 178, 183, 189, 200, 209, 251, 258, 260, 269, 296, 303, 317, 358, 359, 362, 363, 370, 372, 373, 384, 385, 406, 408, 422, 426, 442, 457, 467, 469, 470, 471, 472, 477, 478], "soft": [67, 173, 243, 259, 318, 353, 357, 422, 426, 431, 467, 478], "imaginari": [67, 151, 179, 340, 341, 348, 379, 422, 423, 425, 463, 464, 470], "codeobject": [67, 423, 468, 478], "co_posit": [67, 423, 468], "__bytes__": [67, 190, 192, 197, 201, 281, 340, 381, 423, 468, 472, 473, 478], "__format__": [67, 79, 178, 179, 207, 217, 221, 252, 255, 286, 341, 384, 423, 430, 463, 464, 468, 471, 472, 475, 478], "__dir__": [67, 79, 93, 178, 183, 207, 221, 251, 384, 423, 463, 472, 475, 478], "__mro_entries__": [67, 380, 423, 475, 478], "bodi": [67, 83, 84, 89, 107, 109, 119, 132, 133, 136, 140, 165, 179, 185, 187, 191, 192, 193, 195, 196, 197, 201, 203, 204, 221, 236, 238, 241, 244, 251, 267, 268, 284, 329, 331, 336, 340, 346, 357, 362, 363, 381, 383, 384, 385, 388, 390, 397, 402, 408, 422, 424, 425, 426, 431, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 478], "versus": [67, 179, 189, 249, 263, 425, 470, 476, 478], "__missing__": [67, 156, 178, 340, 384, 422, 423, 462, 470, 478], "__reversed__": [67, 79, 86, 156, 157, 178, 207, 221, 384, 423, 474], "__rtruediv__": [67, 423], "__rfloordiv__": [67, 423, 467, 478], "__round__": [67, 217, 221, 286, 381, 384, 423, 465, 478], "__trunc__": [67, 221, 271, 384, 423, 468, 478], "__floor__": [67, 217, 271, 286, 384, 423, 478], "__ceil__": [67, 217, 271, 286, 384, 423, 478], "__enter__": [67, 86, 100, 187, 254, 279, 311, 329, 340, 353, 381, 383, 384, 399, 400, 422, 423, 462, 463, 464, 468, 471, 474, 478], "__exit__": [67, 86, 100, 165, 187, 254, 279, 329, 340, 353, 357, 383, 384, 399, 400, 422, 423, 462, 463, 464, 474, 478], "__match_args__": [67, 177, 422, 423, 436, 467, 478], "__buffer__": [67, 157, 251, 423, 469, 478], "__release_buffer__": [67, 423, 478], "__aenter__": [67, 86, 165, 187, 383, 384, 385, 422, 423, 478], "__aexit__": [67, 86, 136, 165, 187, 383, 384, 385, 422, 423, 478], "arithmet": [67, 179, 209, 217, 221, 250, 252, 271, 286, 315, 340, 348, 414, 420, 422, 423, 426, 428, 446, 460, 461, 462, 470, 471, 473, 476, 478], "agen": [67, 251, 425], "asend": [67, 157, 425, 477, 478], "athrow": [67, 157, 425, 469, 477, 478], "aclos": [67, 123, 157, 165, 311, 425, 467, 477, 478], "power": [67, 84, 88, 92, 93, 101, 138, 163, 169, 172, 182, 207, 221, 231, 257, 286, 288, 289, 293, 295, 315, 333, 340, 353, 379, 384, 385, 408, 421, 422, 426, 428, 444, 460, 461, 463, 464, 465, 470, 471, 476, 478], "membership": [67, 91, 93, 97, 148, 174, 207, 229, 289, 340, 384, 423, 437, 461, 470, 478], "nonloc": [67, 84, 86, 119, 156, 221, 251, 260, 347, 422, 424, 426, 428, 430, 435, 436, 465, 474, 478], "irrefut": 67, "anext": [67, 221, 250, 467, 478], "chr": [67, 84, 106, 221, 236, 250, 310, 382, 423, 445, 462, 464], "oct": [67, 84, 94, 100, 179, 207, 219, 221, 250, 337, 340, 341, 348, 362, 423, 445, 459, 463, 465, 478], "ord": [67, 91, 106, 117, 119, 172, 174, 221, 250, 336, 340, 384, 423, 425, 445, 457, 463], "setattr": [67, 84, 86, 92, 117, 177, 221, 246, 250, 288, 397, 435, 445, 457, 478], "super": [67, 84, 86, 100, 103, 113, 117, 129, 156, 165, 177, 187, 199, 209, 221, 246, 250, 260, 279, 292, 295, 308, 318, 364, 377, 379, 385, 390, 394, 397, 423, 435, 445, 459, 463, 465, 467, 469, 472, 474, 478], "credit": [67, 85, 120, 164, 170, 243, 257, 348, 422, 443, 445, 476, 478], "licens": [67, 85, 120, 164, 243, 247, 267, 303, 348, 421, 443, 445, 448, 459, 476, 478], "bit_length": [67, 271, 314, 340, 464, 466], "bit_count": [67, 340, 467, 478], "as_integer_ratio": [67, 182, 217, 286, 340, 439, 463, 474, 476, 478], "is_integ": [67, 217, 286, 340, 478], "fromhex": [67, 143, 340, 439, 463, 468, 474, 475, 478], "capit": [67, 103, 106, 182, 315, 340, 341, 381, 382, 422, 425, 457, 475, 477, 478], "casefold": [67, 106, 117, 140, 156, 340, 471, 473, 476, 478], "center": [67, 147, 152, 173, 182, 243, 244, 251, 340, 341, 364, 371, 379, 421, 423, 441, 461, 463, 471, 478], "endswith": [67, 295, 340, 394, 457, 460, 462, 463, 473, 478], "expandtab": [67, 340, 359], "format_map": [67, 156, 340, 470, 473, 478], "isalnum": [67, 84, 115, 174, 315, 340], "isalpha": [67, 115, 174, 340], "isascii": [67, 115, 174, 340, 475, 478], "isdecim": [67, 102, 340, 341], "isdigit": [67, 115, 174, 322, 340], "isidentifi": [67, 340, 478], "islow": [67, 115, 174, 322, 340], "isnumer": [67, 102, 340], "isprint": [67, 115, 156, 174, 340, 473, 478], "isspac": [67, 115, 174, 340], "istitl": [67, 340], "isupp": [67, 92, 115, 174, 257, 322, 340, 383], "ljust": [67, 333, 340, 441, 461, 471], "lstrip": [67, 340, 460, 478], "maketran": [67, 156, 340, 466, 470, 473, 478], "partit": [67, 257, 328, 333, 340, 462, 473, 476, 478], "removeprefix": [67, 340, 477, 478], "removesuffix": [67, 340, 477, 478], "rfind": [67, 100, 274, 340, 463, 470, 471, 473, 478], "rindex": [67, 340, 464, 470, 471], "rjust": [67, 340, 441, 461, 471], "rpartit": [67, 246, 340, 462, 464, 470, 478], "rsplit": [67, 340, 461, 464, 470, 478], "rstrip": [67, 84, 130, 133, 134, 184, 243, 280, 340, 446, 460, 478], "splitlin": [67, 86, 152, 186, 196, 204, 340, 359, 376, 463, 470, 472, 478], "startswith": [67, 236, 289, 340, 348, 383, 394, 417, 446, 457, 460, 462, 463, 466, 471, 473, 476, 478], "swapcas": [67, 340, 478], "zfill": [67, 340, 441, 460], "tobyt": [67, 118, 178, 340, 464, 470, 477, 478], "tolist": [67, 118, 178, 340, 459, 464, 470], "toreadon": [67, 340, 478], "nbyte": [67, 123, 130, 139, 278, 280, 310, 322, 333, 340], "c_contigu": [67, 251, 311, 340], "f_contigu": [67, 251, 311, 340], "isdisjoint": [67, 157, 340, 478], "issubset": [67, 340, 460], "issuperset": [67, 340, 460, 478], "intersect": [67, 156, 340, 379, 423, 460, 461, 463, 464, 478], "symmetric_differ": [67, 340, 460], "intersection_upd": [67, 340, 460, 463], "difference_upd": [67, 340, 463, 477, 478], "symmetric_difference_upd": [67, 340, 460], "fromkey": [67, 92, 156, 178, 257, 340, 380, 460, 468, 470, 478], "popitem": [67, 156, 157, 163, 178, 257, 267, 281, 284, 340, 423, 458, 460, 464, 478], "contextmanag": [67, 165, 183, 311, 340, 381, 462, 463, 470, 474, 478], "__unpacked__": [67, 340, 478], "__type_params__": [67, 183, 187, 340, 381, 422, 423, 424, 478], "with_traceback": [67, 109, 209, 431, 478], "add_not": [67, 209, 438, 468, 478], "__notes__": [67, 209, 311, 376, 478], "winerror": [67, 115, 172, 209, 478], "end_lineno": [67, 119, 187, 209, 260, 311, 376, 426, 467, 476, 478], "end_offset": [67, 209, 311, 376, 467, 478], "environmenterror": [67, 209, 445, 471], "ioerror": [67, 150, 186, 209, 211, 214, 221, 226, 239, 251, 254, 278, 279, 291, 328, 329, 388, 418, 445, 463, 464, 465, 471], "characters_written": [67, 209, 478], "baseexceptiongroup": [67, 136, 209, 376, 422, 468, 478], "subgroup": [67, 103, 187, 209, 315, 470, 476, 478], "ascii_lett": [67, 240, 322, 341, 358, 459, 465], "ascii_lowercas": [67, 315, 341, 358, 459], "ascii_uppercas": [67, 341, 358, 459], "hexdigit": [67, 174, 277, 341, 358, 430], "octdigit": [67, 341, 358, 430], "punctuat": [67, 103, 106, 327, 341, 358, 430, 474], "vformat": [67, 341, 358], "get_field": [67, 341, 358], "get_valu": [67, 341, 358], "check_unused_arg": [67, 341, 358], "format_field": [67, 341, 358], "convert_field": [67, 341, 358], "mini": [67, 163, 217, 221, 340, 358, 423, 430, 441, 464, 466, 468], "safe_substitut": [67, 341, 358, 447, 461], "is_valid": [67, 341, 358, 468, 478], "get_identifi": [67, 260, 341, 347, 358, 468, 478], "capword": [67, 340, 341, 358, 478], "regexflag": [67, 207, 315, 358, 468, 475, 478], "ignorecas": [67, 103, 315, 341, 358, 478], "multilin": [67, 103, 154, 163, 243, 315, 331, 358, 383, 469, 470, 477, 478], "noflag": [67, 315, 358, 478], "dotal": [67, 103, 315, 358], "fullmatch": [67, 315, 358, 472, 478], "findal": [67, 103, 156, 269, 315, 358, 408, 446, 472, 478], "findit": [67, 103, 275, 315, 358, 459, 478], "subn": [67, 103, 315, 358, 464, 466, 469, 473, 478], "purg": [67, 315, 358], "colno": [67, 258, 281, 315, 358, 473], "groupindex": [67, 315, 358, 478], "groupdict": [67, 103, 315, 358, 478], "span": [67, 98, 103, 119, 147, 163, 171, 189, 216, 236, 274, 315, 340, 341, 358, 422, 462, 463, 469, 471, 473, 474, 478], "endpo": [67, 315, 358], "lastindex": [67, 315, 358], "lastgroup": [67, 315, 358], "scanf": [67, 358], "phonebook": [67, 358], "mung": [67, 358], "adverb": [67, 358], "htmldiff": [67, 186, 358, 461, 473, 478], "make_fil": [67, 186, 358, 473, 478], "make_t": [67, 186, 358], "context_diff": [67, 186, 358], "get_close_match": [67, 186, 358], "ndiff": [67, 189, 358, 458, 459], "unified_diff": [67, 186, 358], "diff_byt": [67, 186, 358, 473, 478], "is_line_junk": [67, 186, 358], "is_character_junk": [67, 186, 358], "sequencematch": [67, 358, 458, 462, 463, 472, 478], "set_seq": [67, 186, 358], "set_seq1": [67, 186, 358], "set_seq2": [67, 186, 358], "find_longest_match": [67, 186, 358, 478], "get_matching_block": [67, 186, 358, 462, 478], "get_opcod": [67, 186, 358], "get_grouped_opcod": [67, 186, 358], "ratio": [67, 146, 186, 217, 271, 339, 340, 358, 379, 471, 478], "quick_ratio": [67, 186, 358], "real_quick_ratio": [67, 186, 358], "shorten": [67, 180, 317, 358, 359, 470, 471, 472, 477, 478], "dedent": [67, 117, 243, 260, 358, 359, 372, 373, 422, 426, 430, 478], "textwrapp": [67, 358, 359, 460, 472, 478], "expand_tab": [67, 358, 359], "tabsiz": [67, 186, 340, 358, 359, 478], "replace_whitespac": [67, 358, 359], "drop_whitespac": [67, 358, 359, 463], "initial_ind": [67, 358, 359], "subsequent_ind": [67, 358, 359], "fix_sentence_end": [67, 358, 359], "break_long_word": [67, 358, 359, 478], "break_on_hyphen": [67, 358, 359, 478], "max_lin": [67, 358, 359, 472], "placehold": [67, 92, 100, 187, 226, 232, 263, 265, 294, 317, 341, 353, 358, 359, 389, 394, 400, 431, 447, 462, 468, 469, 470, 472, 475, 478], "bidirect": [67, 106, 123, 130, 279, 340, 342, 358, 382, 457, 478], "east_asian_width": [67, 358, 382, 478], "decomposit": [67, 100, 358, 382, 478], "is_norm": [67, 182, 286, 358, 382, 476, 478], "unidata_vers": [67, 358, 382], "ucd_3_2_0": [67, 358, 382, 462], "stringprep": [67, 154, 250, 358, 460], "internet": [67, 97, 102, 107, 140, 190, 206, 231, 236, 239, 243, 250, 268, 331, 333, 334, 337, 357, 358, 361, 389, 390, 421, 436, 456, 457, 458, 460, 467, 470, 472, 478], "in_table_a1": [67, 342, 358], "in_table_b1": [67, 342, 358], "map_table_b2": [67, 342, 358], "map_table_b3": [67, 342, 358], "in_table_c11": [67, 342, 358], "in_table_c12": [67, 342, 358], "in_table_c11_c12": [67, 342, 358], "in_table_c21": [67, 342, 358], "in_table_c22": [67, 342, 358], "in_table_c21_c22": [67, 342, 358], "in_table_c3": [67, 342, 358], "in_table_c4": [67, 342, 358], "in_table_c5": [67, 342, 358], "in_table_c6": [67, 342, 358], "in_table_c7": [67, 342, 358], "in_table_c8": [67, 342, 358], "in_table_c9": [67, 342, 358], "in_table_d1": [67, 342, 358], "in_table_d2": [67, 342, 358], "gnu": [67, 71, 96, 224, 230, 242, 250, 262, 288, 289, 294, 326, 328, 353, 358, 421, 423, 430, 433, 442, 443, 450, 451, 455, 457, 460, 461, 463, 464, 469, 473, 475, 476, 478], "parse_and_bind": [67, 316, 319, 358, 478], "read_init_fil": [67, 316, 319, 358, 478], "get_line_buff": [67, 316, 319, 358], "insert_text": [67, 316, 319, 358], "redisplay": [67, 173, 316, 358, 460], "read_history_fil": [67, 316, 358], "write_history_fil": [67, 316, 358], "append_history_fil": [67, 316, 358, 473, 478], "get_history_length": [67, 316, 358, 478], "set_history_length": [67, 316, 358], "clear_histori": [67, 316, 358], "get_current_history_length": [67, 316, 358, 460], "get_history_item": [67, 316, 358, 460], "remove_history_item": [67, 316, 358], "replace_history_item": [67, 316, 358], "add_histori": [67, 316, 358], "set_auto_histori": [67, 316, 358, 474, 478], "set_startup_hook": [67, 316, 358], "set_pre_input_hook": [67, 316, 358], "set_complet": [67, 316, 319, 358], "get_complet": [67, 316, 358], "get_completion_typ": [67, 316, 358], "get_begidx": [67, 316, 358, 478], "get_endidx": [67, 316, 358, 478], "set_completer_delim": [67, 316, 358, 478], "get_completer_delim": [67, 316, 358], "set_completion_display_matches_hook": [67, 316, 358], "servic": [67, 100, 107, 119, 221, 242, 250, 251, 258, 263, 265, 278, 279, 280, 289, 299, 317, 324, 331, 333, 334, 337, 340, 353, 358, 361, 404, 414, 421, 423, 450, 456, 457, 461, 464, 467, 468, 471, 478], "pack_into": [67, 142, 221, 343, 462, 478], "unpack_from": [67, 142, 221, 343, 462, 478], "iter_unpack": [67, 142, 343, 472], "codecinfo": [67, 142, 154, 462], "getencod": [67, 86, 91, 106, 142, 154, 171, 173, 221, 242, 254, 262, 269, 411, 456, 468, 478], "getdecod": [67, 106, 142, 154], "getincrementalencod": [67, 142, 154, 471], "getincrementaldecod": [67, 142, 154], "getread": [67, 106, 142, 154], "getwrit": [67, 106, 142, 154], "unregist": [67, 123, 125, 137, 142, 154, 181, 210, 289, 311, 324, 325, 328, 364, 397, 467, 477, 478], "encodedfil": [67, 142, 154], "iterencod": [67, 142, 154, 258, 281], "iterdecod": [67, 142, 154], "bom_b": [67, 142, 154], "bom_l": [67, 142, 154], "bom_utf8": [67, 142, 154], "bom_utf16": [67, 142, 154], "bom_utf16_b": [67, 142, 154], "bom_utf16_l": [67, 142, 154], "bom_utf32": [67, 142, 154], "bom_utf32_b": [67, 142, 154], "bom_utf32_l": [67, 142, 154], "register_error": [67, 142, 154, 221, 254, 340, 460], "lookup_error": [67, 142, 154, 460], "strict_error": [67, 142, 154], "ignore_error": [67, 142, 154, 328], "replace_error": [67, 142, 154], "backslashreplace_error": [67, 142, 154], "xmlcharrefreplace_error": [67, 142, 154], "namereplace_error": [67, 142, 154], "stateless": [67, 138, 142, 144], "getstat": [67, 142, 154, 286, 314], "setstat": [67, 142, 154, 286, 314, 478], "writelin": [67, 115, 127, 130, 133, 142, 154, 186, 254, 457, 478], "streamreaderwrit": [67, 142], "streamrecod": [67, 106, 142, 478], "idna": [67, 142, 199, 382, 389, 460, 478], "internation": [67, 88, 106, 142, 190, 242, 250, 278, 281, 331, 337, 341, 342, 361, 430, 457, 460, 461, 473, 475, 478], "nameprep": [67, 142, 154, 342], "toascii": [67, 142, 154], "tounicod": [67, 84, 118, 142, 154, 178], "codepag": [67, 117, 142, 348, 469, 478], "utf_8_sig": [67, 142], "minyear": [67, 178, 179], "maxyear": [67, 178, 179, 478], "total_second": [67, 178, 179, 464], "fromordin": [67, 178, 179, 475], "fromisoformat": [67, 178, 179, 336, 468, 475, 478], "fromisocalendar": [67, 178, 179, 476, 478], "timetupl": [67, 178, 179], "toordin": [67, 178, 179], "weekday": [67, 93, 147, 178, 179, 207, 265, 361, 476, 478], "isoweekday": [67, 93, 178, 179, 207], "isocalendar": [67, 178, 179, 476, 477, 478], "isoformat": [67, 100, 178, 179, 186, 336, 420, 460, 474, 475, 478], "ctime": [67, 71, 115, 178, 179, 289, 290, 338, 361, 460], "strftime": [67, 99, 100, 115, 136, 178, 262, 263, 265, 267, 361, 414, 446, 447, 460, 462, 463, 470, 471, 474, 478], "utcnow": [67, 178, 179, 469, 478], "utcfromtimestamp": [67, 178, 179, 337, 469, 478], "strptime": [67, 115, 178, 263, 337, 361, 414, 459, 460, 462, 470, 478], "microsecond": [67, 96, 178, 179, 318, 336, 361, 463, 478], "timetz": [67, 178, 179], "astimezon": [67, 178, 179, 186, 420, 471, 474, 476, 478], "utcoffset": [67, 178, 179, 478], "utctimetupl": [67, 178, 179, 478], "timestamp": [67, 96, 100, 123, 147, 156, 159, 178, 179, 199, 205, 230, 241, 260, 289, 307, 331, 336, 337, 353, 361, 375, 417, 427, 450, 460, 464, 471, 473, 475, 478], "fromutc": [67, 178, 179, 478], "iana": [67, 178, 179, 237, 250, 255, 272, 310, 337, 406, 408, 477, 478], "from_fil": [67, 116, 178, 408, 417, 420, 474, 478], "no_cach": [67, 178, 420], "clear_cach": [67, 178, 212, 215, 420, 472], "available_timezon": [67, 178, 420, 478], "reset_tzpath": [67, 178, 420], "tzpath": [67, 178, 420, 451, 478], "zoneinfonotfounderror": [67, 178, 420], "invalidtzpathwarn": [67, 178, 420], "monday": [67, 93, 147, 178, 179, 207, 262, 265, 361, 478], "tuesday": [67, 93, 147, 178, 179, 207, 265, 446], "wednesday": [67, 93, 147, 178, 179, 207], "thursday": [67, 93, 147, 178, 179, 207], "friday": [67, 93, 147, 178, 207], "saturday": [67, 93, 147, 178, 179, 207], "sunday": [67, 93, 147, 178, 179, 207, 262, 265, 361, 464, 478], "januari": [67, 147, 150, 178, 179, 314, 361, 421, 430, 458, 469, 478], "februari": [67, 147, 178, 179, 361, 430, 458, 469, 470, 478], "march": [67, 147, 178, 179, 340, 361, 379, 446, 457, 461, 472], "april": [67, 147, 178, 179, 430, 443, 457, 458], "june": [67, 94, 147, 178, 403, 466, 475], "juli": [67, 94, 147, 178, 186, 421, 430, 459, 460, 464, 478], "august": [67, 147, 178, 462], "septemb": [67, 147, 178, 430, 457, 462, 471, 473], "octob": [67, 147, 178, 179, 457, 459, 460, 463, 476, 477], "novemb": [67, 77, 147, 178, 179, 430, 478], "decemb": [67, 147, 178, 179, 430, 446, 459, 460, 465, 474], "iterweekday": [67, 147, 178], "itermonthd": [67, 147, 178, 475, 478], "itermonthday": [67, 147, 178, 478], "itermonthdays2": [67, 147, 178, 478], "itermonthdays3": [67, 147, 178, 475, 478], "itermonthdays4": [67, 147, 178, 475, 478], "monthdatescalendar": [67, 147, 178], "monthdays2calendar": [67, 147, 178], "monthdayscalendar": [67, 147, 178], "yeardatescalendar": [67, 147, 178], "yeardays2calendar": [67, 147, 178], "yeardayscalendar": [67, 147, 178], "textcalendar": [67, 147, 178, 478], "formatmonth": [67, 147, 178], "prmonth": [67, 147, 178, 478], "formatyear": [67, 147, 178], "pryear": [67, 147, 178, 478], "htmlcalendar": [67, 147, 178, 475], "formatyearpag": [67, 147, 178], "cssclass": [67, 147, 178], "cssclass_noday": [67, 147, 178], "cssclasses_weekday_head": [67, 147, 178], "cssclass_month_head": [67, 147, 178], "cssclass_month": [67, 147, 178], "cssclass_year": [67, 147, 178], "cssclass_year_head": [67, 147, 178], "localetextcalendar": [67, 147, 178, 468, 478], "localehtmlcalendar": [67, 147, 178, 468, 478], "setfirstweekday": [67, 147, 178], "firstweekday": [67, 147, 178], "isleap": [67, 147, 178], "leapday": [67, 147, 178], "weekhead": [67, 147, 178], "monthrang": [67, 147, 178], "monthcalendar": [67, 147, 178], "prcal": [67, 147, 178], "timegm": [67, 147, 178, 361], "day_nam": [67, 147, 178], "day_abbr": [67, 147, 178], "month_nam": [67, 147, 178, 430], "month_abbr": [67, 147, 178], "chainmap": [67, 178, 183, 340, 381, 469, 471, 472, 475, 478], "new_child": [67, 156, 178, 472, 478], "most_common": [67, 156, 178, 464], "dequ": [67, 178, 183, 257, 312, 340, 381, 397, 422, 425, 437, 447, 461, 462, 463, 464, 468, 470, 473, 474, 478], "appendleft": [67, 156, 178, 461], "extendleft": [67, 156, 178], "popleft": [67, 156, 178, 257, 312, 437, 447, 461], "rotat": [67, 99, 115, 156, 178, 182, 265, 286, 379, 461, 463, 464, 478], "maxlen": [67, 148, 156, 178, 257, 381, 463, 464], "defaultdict": [67, 86, 178, 183, 340, 381, 462, 470, 478], "default_factori": [67, 156, 177, 178, 381, 478], "somenamedtupl": [67, 156, 178], "_make": [67, 156, 178, 336, 343, 478], "_asdict": [67, 156, 178, 463, 464, 466, 476, 478], "_replac": [67, 156, 178, 389, 463, 478], "_field": [67, 119, 156, 178, 260, 381, 463, 464, 478], "_field_default": [67, 156, 178, 381, 478], "ordereddict": [67, 86, 163, 171, 178, 183, 251, 340, 381, 464, 466, 468, 470, 473, 474, 476, 477, 478], "move_to_end": [67, 156, 178, 470, 478], "userdict": [67, 178, 458, 460, 463, 478], "userlist": [67, 178, 459, 478], "userstr": [67, 178, 457, 473, 477, 478], "mutablesequ": [67, 157, 178, 183, 340, 381, 465, 471, 473, 478], "bytestr": [67, 91, 157, 178, 183, 289, 333, 336, 340, 381, 402, 408, 419, 463, 469, 478], "mutableset": [67, 157, 178, 183, 340, 381, 478], "mutablemap": [67, 77, 86, 157, 163, 178, 180, 183, 326, 340, 381, 423, 463, 465, 471], "mappingview": [67, 157, 178, 183, 340, 381, 478], "itemsview": [67, 157, 178, 183, 340, 381], "keysview": [67, 157, 178, 183, 340, 381], "valuesview": [67, 157, 178, 183, 340, 381, 478], "asyncgener": [67, 157, 178, 183, 340, 381, 474, 478], "recip": [67, 84, 93, 100, 107, 144, 156, 178, 186, 196, 220, 246, 271, 286, 289, 294, 311, 314, 326, 339, 340, 348, 408, 449, 469, 470, 478], "heappush": [67, 178, 232, 447, 460, 463], "heappop": [67, 178, 232, 257, 447, 460, 463], "heappushpop": [67, 178, 232, 463], "heapifi": [67, 178, 232, 314, 447, 478], "heapreplac": [67, 178, 232, 314], "nlargest": [67, 86, 178, 221, 222, 232, 461, 462, 478], "nsmallest": [67, 86, 178, 221, 222, 232, 461, 462], "bisect_left": [67, 144, 178], "bisect_right": [67, 144, 178], "insort_left": [67, 144, 178, 478], "insort_right": [67, 144, 178], "insort": [67, 144, 178, 447, 478], "typecod": [67, 118, 139, 178, 279, 380, 465, 478], "buffer_info": [67, 118, 178], "byteswap": [67, 118, 138, 178, 346, 472], "frombyt": [67, 118, 178, 333, 470, 477, 478], "fromfil": [67, 118, 178, 186, 465], "fromunicod": [67, 118, 178], "tofil": [67, 118, 178, 186, 465], "__callback__": [67, 178, 397, 472], "getweakrefcount": [67, 178, 397], "getweakref": [67, 178, 397], "weakkeydictionari": [67, 178, 340, 397, 462, 478], "keyref": [67, 178, 397, 462], "weakvaluedictionari": [67, 178, 340, 397, 447, 462, 478], "valueref": [67, 178, 397, 462], "weakset": [67, 178, 340, 397, 464, 468, 478], "weakmethod": [67, 178, 340, 397, 472, 478], "detach": [67, 115, 129, 139, 146, 178, 254, 266, 289, 333, 337, 363, 371, 397, 399, 400, 425, 470, 471, 478], "peek": [67, 115, 116, 146, 156, 178, 230, 254, 266, 397, 470, 478], "atexit": [67, 77, 83, 109, 162, 178, 250, 263, 311, 316, 397, 457, 461, 467, 478], "referencetyp": [67, 178, 397, 478], "proxytyp": [67, 178, 279, 397, 478], "callableproxytyp": [67, 178, 397, 478], "new_class": [67, 178, 380, 471, 478], "prepare_class": [67, 178, 380, 471], "resolve_bas": [67, 178, 380, 423, 475, 478], "get_original_bas": [67, 178, 380, 423, 469, 478], "nonetyp": [67, 88, 89, 164, 178, 189, 222, 280, 314, 315, 380, 381, 467, 468, 478], "lambdatyp": [67, 178, 380], "generatortyp": [67, 178, 380], "coroutinetyp": [67, 178, 380, 473, 478], "asyncgeneratortyp": [67, 178, 380], "codetyp": [67, 178, 380, 476, 478], "celltyp": [67, 178, 380, 478], "builtinfunctiontyp": [67, 178, 380], "builtinmethodtyp": [67, 178, 380, 478], "wrapperdescriptortyp": [67, 178, 380, 475, 478], "methodwrappertyp": [67, 178, 251, 380, 468, 475, 478], "notimplementedtyp": [67, 164, 178, 380, 467, 478], "methoddescriptortyp": [67, 178, 380, 475, 478], "classmethoddescriptortyp": [67, 178, 380, 475, 478], "ellipsistyp": [67, 164, 178, 380, 467, 478], "uniontyp": [67, 178, 222, 340, 380, 381, 468, 478], "tracebacktyp": [67, 178, 263, 376, 380, 423, 475, 478], "getsetdescriptortyp": [67, 178, 380], "memberdescriptortyp": [67, 178, 380, 478], "dynamicclassattribut": [67, 178, 380, 468, 472], "deep": [67, 100, 178, 246, 250, 295, 303, 327, 348, 353, 405, 478], "deepcopi": [67, 84, 156, 167, 177, 178, 315, 385, 419, 464, 469, 474, 475, 478], "pretti": [67, 75, 88, 91, 106, 119, 163, 178, 181, 186, 246, 250, 251, 258, 265, 288, 293, 304, 373, 384, 406, 408, 414, 425, 457, 458, 459, 462, 463, 465, 469, 477, 478], "printer": [67, 103, 178, 243, 250, 364, 373, 400], "prettyprint": [67, 178, 472, 478], "pformat": [67, 178, 303, 472, 478], "pp": [67, 92, 178, 293, 303, 314, 476, 478], "isread": [67, 178, 303], "isrecurs": [67, 178, 303], "saferepr": [67, 178, 303], "arepr": [67, 178, 317], "fillvalu": [67, 178, 257, 317, 463, 478], "maxlevel": [67, 159, 178, 303, 317], "maxdict": [67, 178, 317], "maxlist": [67, 178, 317], "maxtupl": [67, 178, 317], "maxset": [67, 178, 317], "maxfrozenset": [67, 178, 317], "maxdequ": [67, 178, 317], "maxarray": [67, 178, 317], "maxlong": [67, 178, 317], "maxstr": [67, 178, 317], "maxoth": [67, 178, 317], "repr1": [67, 178, 317], "enumtyp": [67, 178, 207, 468], "_ignore_": [67, 93, 178, 207, 475, 478], "_generate_next_value_": [67, 93, 178, 207, 478], "_missing_": [67, 93, 178, 207, 478], "intenum": [67, 178, 207, 237, 329, 333, 337, 340, 474, 478], "strenum": [67, 178, 207, 237, 467, 468, 478], "_numeric_repr_": [67, 178, 207], "intflag": [67, 178, 207, 251, 315, 337, 340, 474, 478], "reprenum": [67, 178, 207, 468], "enumcheck": [67, 178, 207, 468], "named_flag": [67, 178, 207], "flagboundari": [67, 93, 178, 207, 468], "eject": [67, 93, 178, 207], "__dunder__": [67, 178], "_sunder_": [67, 178], "nonmemb": [67, 178, 207, 468, 478], "global_enum": [67, 178, 207, 468], "show_flag_valu": [67, 178, 207], "graph": [67, 178, 250, 264, 288, 295, 379, 459, 472, 477, 478], "topologicalsort": [67, 178, 228, 477, 478], "is_act": [67, 129, 178, 228], "get_readi": [67, 178, 228], "static_ord": [67, 178, 228], "cycleerror": [67, 178, 228], "conjug": [67, 182, 285, 286, 340, 463], "ration": [67, 179, 182, 250, 285, 286, 340, 423, 463, 464, 465, 470, 478], "denomin": [67, 182, 217, 285, 286, 340, 463, 474, 476, 478], "theoret": [67, 87, 89, 94, 182, 286], "ceil": [67, 217, 271, 285, 286, 318, 340, 423, 463, 476, 478], "comb": [67, 257, 271, 286, 339, 437, 468, 476, 478], "copysign": [67, 271, 286, 463, 478], "fab": [67, 271, 286], "fmod": [67, 271, 286, 425], "frexp": [67, 271, 286], "fsum": [67, 221, 271, 286, 339, 439, 463, 478], "gcd": [67, 217, 271, 286, 473, 477, 478], "isclos": [67, 151, 271, 286, 439, 473, 478], "isfinit": [67, 151, 271, 286, 470, 478], "isinf": [67, 151, 271, 286, 340, 463, 478], "isnan": [67, 151, 271, 286, 339, 340, 437, 463, 478], "isqrt": [67, 257, 271, 286, 476, 478], "lcm": [67, 271, 286, 477, 478], "ldexp": [67, 271, 286, 314, 478], "modf": [67, 271, 286], "nextaft": [67, 271, 286, 469, 477, 478], "perm": [67, 93, 219, 271, 286, 430, 468, 475, 476, 478], "prod": [67, 257, 271, 286, 476, 478], "sumprod": [67, 257, 271, 286, 469, 478], "trunc": [67, 271, 285, 286, 340, 423, 463, 478], "ulp": [67, 271, 286, 314, 348, 463, 477, 478], "logarithm": [67, 182, 286, 291, 340, 460, 463, 466, 470, 471], "cbrt": [67, 271, 286, 468, 478], "exp2": [67, 271, 286, 468, 478], "expm1": [67, 271, 286, 464, 470, 478], "log1p": [67, 271, 286, 463, 478], "log2": [67, 271, 286, 470, 471], "log10": [67, 151, 182, 271, 286, 463], "sqrt": [67, 138, 151, 162, 182, 271, 286, 339, 461, 462, 463, 470, 476, 478], "trigonometr": [67, 286, 461], "aco": [67, 151, 271, 286], "asin": [67, 151, 271, 286], "atan": [67, 151, 271, 286, 463], "atan2": [67, 151, 271, 286, 478], "cos": [67, 151, 182, 217, 271, 286, 295, 446, 460, 476], "dist": [67, 247, 266, 271, 286, 292, 379, 416, 462, 470, 473, 476, 478], "hypot": [67, 156, 271, 286, 476, 478], "sin": [67, 119, 151, 182, 271, 286, 423, 460], "tan": [67, 151, 271, 286, 478], "angular": [67, 286, 429], "degre": [67, 72, 152, 173, 218, 271, 286, 339, 340, 379, 423, 460, 476, 478], "radian": [67, 151, 182, 218, 271, 286, 379, 460, 476, 478], "hyperbol": [67, 186, 286, 463], "acosh": [67, 151, 271, 286, 463, 478], "asinh": [67, 151, 271, 286, 463, 478], "atanh": [67, 151, 271, 286, 463, 478], "cosh": [67, 151, 271, 286], "sinh": [67, 151, 271, 286], "tanh": [67, 151, 271, 286], "erf": [67, 92, 271, 286, 464, 470, 475, 478], "erfc": [67, 271, 286, 464, 470, 475, 478], "gamma": [67, 271, 286, 314, 464, 470], "lgamma": [67, 271, 286, 464, 470], "pi": [67, 92, 151, 172, 173, 182, 217, 269, 271, 286, 293, 314, 379, 408, 437, 439, 441, 446, 470, 471, 476], "tau": [67, 151, 271, 286, 474, 478], "polar": [67, 286, 463, 478], "coordin": [67, 84, 89, 91, 93, 100, 172, 173, 175, 179, 267, 271, 277, 286, 336, 341, 361, 364, 371, 373, 379, 457, 463, 469, 478], "rect": [67, 151, 172, 286, 463], "classif": [67, 262, 286, 288, 430], "infj": [67, 151, 286, 474, 478], "nanj": [67, 151, 286, 474, 478], "as_tupl": [67, 182, 286, 463], "compare_sign": [67, 182, 286], "compare_tot": [67, 182, 286], "compare_total_mag": [67, 182, 286], "copy_ab": [67, 182, 286], "copy_neg": [67, 182, 286], "copy_sign": [67, 182, 286], "from_float": [67, 182, 217, 286, 439, 464, 466, 470, 478], "fma": [67, 182, 286], "is_canon": [67, 182, 286, 464], "is_finit": [67, 182, 286], "is_infinit": [67, 182, 286], "is_nan": [67, 182, 286], "is_qnan": [67, 182, 286], "is_sign": [67, 182, 286], "is_snan": [67, 182, 286], "is_subnorm": [67, 182, 286], "is_zero": [67, 182, 286], "ln": [67, 182, 243, 286, 463, 471, 478], "logb": [67, 182, 286], "logical_and": [67, 182, 286], "logical_invert": [67, 182, 286], "logical_or": [67, 182, 286], "logical_xor": [67, 182, 286], "max_mag": [67, 182, 286], "min_mag": [67, 182, 286], "next_minus": [67, 182, 286], "next_plus": [67, 182, 286], "next_toward": [67, 182, 286], "number_class": [67, 182, 286], "quantiz": [67, 182, 286, 471, 478], "remainder_near": [67, 182, 286], "same_quantum": [67, 182, 286], "scaleb": [67, 182, 286], "to_eng_str": [67, 182, 286, 461], "to_integr": [67, 182, 286], "to_integral_exact": [67, 182, 286], "to_integral_valu": [67, 182, 286], "getcontext": [67, 182, 286, 447, 461], "setcontext": [67, 182, 286], "localcontext": [67, 182, 286, 340, 462, 463, 478], "basiccontext": [67, 182, 286, 471], "extendedcontext": [67, 182, 286, 471], "defaultcontext": [67, 182, 286, 471], "clear_flag": [67, 182, 286], "clear_trap": [67, 182, 286], "copy_decim": [67, 182, 286], "create_decim": [67, 182, 286, 463, 471], "create_decimal_from_float": [67, 182, 286], "etini": [67, 182, 286], "etop": [67, 182, 286], "divide_int": [67, 182, 286], "minus": [67, 173, 182, 221, 260, 271, 286, 328, 340, 341, 343, 360, 372, 425, 431, 475, 478], "to_sci_str": [67, 182, 286, 461], "max_prec": [67, 182, 286, 471], "max_emax": [67, 182, 286, 471], "min_emin": [67, 182, 286, 471], "min_etini": [67, 182, 286], "have_thread": [67, 182, 286, 471], "have_contextvar": [67, 182, 286, 451], "round_ceil": [67, 182, 286, 461], "round_down": [67, 182, 286, 461], "round_floor": [67, 182, 286, 478], "round_half_down": [67, 182, 286], "round_half_even": [67, 182, 286, 461, 478], "round_half_up": [67, 182, 286], "round_up": [67, 182, 286], "round_05up": [67, 182, 286], "clamp": [67, 182, 286, 470, 471, 478], "decimalexcept": [67, 182, 286], "divisionbyzero": [67, 182, 286, 461], "inexact": [67, 182, 286, 289, 471], "invalidoper": [67, 182, 286, 461, 463, 464, 471], "subnorm": [67, 182, 286, 478], "floatoper": [67, 182, 286, 471], "off": [67, 83, 89, 91, 94, 99, 100, 102, 103, 107, 109, 117, 152, 163, 172, 173, 179, 186, 187, 196, 204, 205, 212, 221, 228, 239, 243, 257, 263, 264, 265, 271, 286, 288, 297, 301, 304, 327, 331, 340, 348, 356, 357, 361, 362, 371, 379, 383, 384, 390, 415, 423, 427, 430, 431, 443, 450, 457, 458, 459, 460, 461, 462, 463, 465, 470, 472, 473, 474, 476, 477, 478], "from_decim": [67, 217, 286, 470], "limit_denomin": [67, 217, 286], "randbyt": [67, 286, 314, 477, 478], "randrang": [67, 83, 286, 314, 446, 461, 467, 469, 470, 478], "randint": [67, 286, 314, 470, 478], "getrandbit": [67, 286, 314, 461, 472, 478], "shuffl": [67, 83, 286, 314, 315, 468, 470, 477, 478], "sampl": [67, 72, 74, 83, 87, 89, 92, 93, 94, 100, 101, 103, 114, 138, 152, 171, 172, 189, 243, 275, 286, 291, 295, 303, 304, 314, 315, 332, 339, 345, 353, 362, 371, 390, 396, 408, 422, 436, 446, 456, 458, 459, 460, 463, 464, 468, 470, 472, 474, 475, 476, 478], "binomialvari": [67, 286, 314, 469, 478], "uniform": [67, 83, 107, 131, 186, 251, 286, 314, 339, 389, 393, 414, 470, 478], "triangular": [67, 286, 314, 339, 463], "betavari": [67, 286, 314], "expovari": [67, 286, 314, 469, 478], "gammavari": [67, 286, 314, 478], "gauss": [67, 286, 314, 478], "lognormvari": [67, 286, 314], "normalvari": [67, 83, 286, 314, 478], "vonmisesvari": [67, 286, 314], "paretovari": [67, 286, 314, 478], "weibullvari": [67, 286, 314], "systemrandom": [67, 170, 286, 289, 314, 322], "reproduc": [67, 84, 107, 119, 197, 230, 286, 344, 357, 390, 412, 421, 470, 475, 476, 478], "spread": [67, 132, 286, 364, 463], "fmean": [67, 286, 314, 339, 476, 478], "geometric_mean": [67, 286, 339, 476, 478], "harmonic_mean": [67, 286, 339, 474, 478], "median": [67, 92, 286, 314, 339, 446, 472, 478], "median_low": [67, 286, 339], "median_high": [67, 286, 339], "median_group": [67, 286, 339, 478], "multimod": [67, 286, 339, 476], "pstdev": [67, 286, 339, 478], "pvarianc": [67, 286, 339, 478], "stdev": [67, 222, 286, 339, 468, 476, 478], "varianc": [67, 286, 339, 381, 446, 468, 469, 472, 474, 476, 478], "quantil": [67, 286, 314, 339, 476, 478], "covari": [67, 286, 339, 381, 467, 478], "correl": [67, 249, 286, 339, 467, 469, 478], "linear_regress": [67, 286, 339, 467, 478], "statisticserror": [67, 286, 339], "normaldist": [67, 286, 476, 478], "from_sampl": [67, 286, 339, 476], "pdf": [67, 79, 99, 106, 231, 286, 314, 339, 348, 476, 478], "cdf": [67, 286, 339, 476], "inv_cdf": [67, 286, 339, 478], "zscore": [67, 286, 339, 478], "classic": [67, 94, 163, 180, 199, 226, 267, 286, 364, 379, 385, 444, 459, 460, 462, 464, 465, 470, 478], "mont": [67, 286], "carlo": [67, 286, 468], "binomi": [67, 271, 286, 314, 478], "bayesian": [67, 286], "classifi": [67, 102, 247, 286, 303, 460, 464, 478], "kernel": [67, 91, 112, 123, 129, 253, 257, 274, 286, 289, 324, 328, 329, 333, 337, 348, 350, 360, 457, 462, 467, 471, 472, 474, 476, 478], "densiti": [67, 286], "accumul": [67, 84, 89, 91, 94, 117, 182, 220, 222, 257, 288, 295, 304, 314, 327, 375, 383, 439, 458, 470, 471, 476, 478], "batch": [67, 99, 103, 123, 220, 257, 295, 344, 456, 469, 473, 478], "from_iter": [67, 220, 257, 463, 478], "combinations_with_replac": [67, 94, 156, 220, 257, 314, 464, 466, 478], "dropwhil": [67, 94, 220, 257], "filterfals": [67, 94, 109, 220, 221, 257, 339], "groupbi": [67, 86, 94, 220, 222, 257, 287, 461, 466, 478], "islic": [67, 86, 94, 156, 220, 221, 257, 462, 475, 478], "pairwis": [67, 220, 257, 379, 467, 478], "permut": [67, 94, 220, 257, 314, 430, 457, 463, 466, 476, 478], "starmap": [67, 94, 160, 220, 221, 257, 271, 279, 471], "takewhil": [67, 94, 220, 257], "tee": [67, 94, 173, 220, 257, 461, 478], "zip_longest": [67, 220, 221, 257, 465, 478], "cached_properti": [67, 84, 92, 220, 222, 340, 469, 476, 478], "cmp_to_key": [67, 105, 220, 221, 222, 340, 464, 470], "lru_cach": [67, 84, 156, 216, 220, 222, 257, 470, 471, 473, 476, 478], "total_ord": [67, 220, 222, 423, 425, 464, 470, 472, 478], "partialmethod": [67, 220, 222, 340, 472, 476, 478], "singledispatch": [67, 86, 220, 222, 468, 472, 475, 478], "singledispatchmethod": [67, 220, 222, 476, 478], "update_wrapp": [67, 87, 92, 220, 222, 251, 462, 472, 478], "lt": [67, 94, 119, 218, 220, 260, 287, 340, 379, 412, 426, 430, 458, 470], "eq": [67, 94, 119, 177, 220, 260, 287, 381, 426, 478], "ne": [67, 94, 109, 220, 287, 364], "ge": [67, 94, 220, 287], "gt": [67, 94, 119, 220, 234, 235, 236, 260, 287, 412, 426, 470, 471], "not_": [67, 94, 220, 287], "__not__": [67, 220, 287], "is_": [67, 94, 220, 287], "is_not": [67, 94, 220, 287], "and_": [67, 94, 220, 287], "floordiv": [67, 94, 119, 220, 260, 287, 426], "inv": [67, 220, 287, 473], "__inv__": [67, 220, 287], "lshift": [67, 119, 220, 260, 287, 426], "mod": [67, 84, 100, 119, 220, 221, 246, 260, 275, 287, 375, 416, 426, 431, 463, 476, 478], "mul": [67, 94, 109, 138, 182, 220, 257, 271, 279, 287, 346, 415], "matmul": [67, 220, 257, 287, 473, 478], "neg": [67, 182, 220, 222, 257, 287], "or_": [67, 94, 220, 287], "rshift": [67, 119, 220, 260, 287, 426], "truediv": [67, 220, 287], "xor": [67, 182, 207, 220, 287, 340, 425], "__concat__": [67, 220, 287], "countof": [67, 220, 287, 477, 478], "delitem": [67, 220, 287], "getitem": [67, 220, 257, 287, 385, 459], "indexof": [67, 220, 257, 287, 477, 478], "setitem": [67, 220, 287, 385], "attrgett": [67, 86, 94, 105, 144, 220, 287, 461, 462, 463, 470, 473, 478], "itemgett": [67, 86, 105, 144, 220, 257, 287, 461, 462, 473, 476, 478], "methodcal": [67, 86, 105, 220, 287, 463, 473, 478], "iadd": [67, 220, 287], "iand": [67, 220, 287], "iconcat": [67, 220, 287], "__iconcat__": [67, 220, 287], "ifloordiv": [67, 220, 287], "ilshift": [67, 220, 287], "imod": [67, 220, 287], "imul": [67, 109, 220, 287], "imatmul": [67, 220, 287, 473], "ior": [67, 220, 287], "ipow": [67, 220, 287], "irshift": [67, 220, 287], "isub": [67, 220, 287], "itruediv": [67, 220, 287], "ixor": [67, 220, 287], "purepath": [67, 215, 247, 289, 292, 467, 468, 469, 477, 478], "pureposixpath": [67, 215, 292, 478], "purewindowspath": [67, 215, 292, 478], "drive": [67, 215, 227, 243, 288, 289, 290, 292, 353, 357, 364, 383, 417, 421, 456, 469, 471, 472, 473, 478], "anchor": [67, 215, 246, 248, 276, 292, 337, 349, 364, 371, 464, 472, 478], "stem": [67, 116, 215, 292, 417, 464, 468, 478], "as_posix": [67, 215, 292], "as_uri": [67, 215, 292], "is_absolut": [67, 215, 292, 478], "is_relative_to": [67, 215, 292, 478], "is_reserv": [67, 215, 252, 255, 292, 478], "joinpath": [67, 116, 215, 248, 249, 276, 292, 417, 478], "relative_to": [67, 215, 292, 469, 478], "with_nam": [67, 215, 292, 478], "with_stem": [67, 215, 292, 478], "with_suffix": [67, 215, 292, 478], "with_seg": [67, 215, 292, 469, 478], "posixpath": [67, 215, 247, 290, 292, 478], "windowspath": [67, 215, 292, 478], "cwd": [67, 139, 215, 219, 252, 289, 292, 344, 357, 394, 461, 476, 478], "chmod": [67, 83, 100, 115, 139, 148, 215, 289, 292, 328, 338, 353, 433, 455, 467, 471, 478], "expandus": [67, 163, 215, 227, 239, 282, 290, 292, 316, 328, 344, 473, 476, 478], "is_dir": [67, 115, 116, 215, 249, 276, 289, 292, 417, 474, 476, 478], "is_fil": [67, 115, 116, 215, 248, 249, 276, 289, 292, 417, 473, 476, 478], "is_junct": [67, 115, 215, 289, 292, 469, 478], "is_mount": [67, 215, 292, 475, 476, 478], "is_symlink": [67, 115, 215, 289, 292, 476, 478], "is_socket": [67, 215, 292, 476, 478], "is_fifo": [67, 215, 292, 476, 478], "is_block_devic": [67, 215, 292, 476, 478], "is_char_devic": [67, 215, 292, 476, 478], "iterdir": [67, 116, 215, 248, 249, 276, 292, 417, 478], "walk": [67, 89, 115, 117, 119, 139, 190, 192, 196, 200, 201, 203, 215, 260, 281, 288, 289, 292, 344, 364, 376, 403, 459, 463, 465, 469, 471, 473, 478], "lchmod": [67, 115, 215, 289, 292, 463, 478], "lstat": [67, 115, 215, 289, 290, 292, 338, 357, 469, 471, 476, 478], "mkdir": [67, 83, 115, 116, 139, 196, 215, 289, 292, 417, 446, 468, 471, 473, 478], "owner": [67, 72, 92, 96, 100, 177, 215, 279, 289, 292, 328, 338, 353, 421, 423, 447, 474, 478], "read_byt": [67, 116, 215, 248, 249, 274, 276, 292, 417, 473, 478], "read_text": [67, 116, 215, 247, 248, 249, 254, 276, 292, 417, 468, 473, 478], "readlink": [67, 115, 215, 289, 292, 471, 476, 477, 478], "rglob": [67, 139, 215, 292, 468, 469, 478], "rmdir": [67, 83, 115, 139, 183, 215, 289, 292, 357, 471], "samefil": [67, 215, 290, 292, 472, 473, 478], "symlink_to": [67, 215, 292, 467, 476, 478], "hardlink_to": [67, 215, 292, 467, 476, 478], "unlink": [67, 83, 115, 160, 183, 209, 215, 269, 279, 280, 289, 292, 324, 355, 357, 371, 394, 405, 406, 471, 478], "write_byt": [67, 215, 274, 292, 473, 478], "write_text": [67, 215, 292, 473, 478], "abspath": [67, 196, 215, 290, 292, 394, 464, 478], "basenam": [67, 89, 96, 100, 117, 180, 189, 215, 288, 290, 292, 364, 370, 394, 417, 478], "commonpath": [67, 215, 290, 473, 478], "commonprefix": [67, 215, 290, 473], "dirnam": [67, 89, 92, 215, 219, 267, 289, 290, 292, 298, 357, 383, 395, 451, 475], "lexist": [67, 215, 290, 461, 476, 478], "expandvar": [67, 215, 227, 290, 344, 463, 478], "getatim": [67, 215, 290], "getmtim": [67, 215, 290], "getctim": [67, 215, 290], "getsiz": [67, 150, 215, 289, 290, 346, 478], "isab": [67, 215, 290, 292], "isfil": [67, 116, 196, 215, 290, 292, 353, 433, 470, 476, 478], "isdir": [67, 116, 215, 290, 292, 298, 353, 476, 478], "isjunct": [67, 215, 289, 290, 469, 478], "islink": [67, 215, 289, 290, 292, 476, 478], "ismount": [67, 215, 290, 472, 476, 478], "isdevdr": [67, 215, 290, 478], "normcas": [67, 215, 216, 290, 478], "normpath": [67, 215, 289, 290, 464, 478], "realpath": [67, 215, 289, 290, 292, 456, 467, 476, 478], "relpath": [67, 215, 290, 292, 463, 469, 478], "sameopenfil": [67, 215, 290], "samestat": [67, 215, 290, 292, 472], "splitdriv": [67, 215, 290, 475, 478], "splitroot": [67, 215, 290, 469, 478], "splitext": [67, 89, 100, 196, 215, 290, 292, 353, 447, 463, 474, 478], "supports_unicode_filenam": [67, 215, 290, 460], "filelineno": [67, 214, 215], "isfirstlin": [67, 214, 215], "isstdin": [67, 214, 215], "nextfil": [67, 214, 215], "hook_compress": [67, 214, 215, 467], "hook_encod": [67, 214, 215, 474, 478], "s_isdir": [67, 215, 289, 338], "s_ischr": [67, 215, 338], "s_isblk": [67, 215, 338], "s_isreg": [67, 215, 338], "s_isfifo": [67, 215, 338], "s_islnk": [67, 215, 338], "s_issock": [67, 215, 338], "s_isdoor": [67, 215, 338, 478], "s_isport": [67, 215, 338, 478], "s_iswht": [67, 215, 338, 478], "s_imod": [67, 215, 338], "s_ifmt": [67, 215, 338], "filemod": [67, 99, 100, 215, 263, 338, 353, 471, 476, 478], "st_mode": [67, 115, 215, 289, 292, 338, 472, 476], "st_ino": [67, 115, 215, 265, 289, 338, 469, 478], "st_dev": [67, 115, 215, 289, 338, 469], "st_nlink": [67, 115, 215, 289, 338], "st_uid": [67, 115, 215, 289, 338], "st_gid": [67, 115, 215, 289, 338], "st_size": [67, 115, 215, 289, 292, 338, 459], "st_atim": [67, 115, 215, 289, 338], "st_mtime": [67, 115, 186, 215, 230, 289, 292, 338, 353, 460], "st_ctime": [67, 115, 215, 289, 338, 469], "s_ifsock": [67, 215, 338], "s_iflnk": [67, 215, 338, 476], "s_ifreg": [67, 215, 289, 338], "s_ifblk": [67, 215, 289, 338], "s_ifdir": [67, 215, 338], "s_ifchr": [67, 215, 289, 338, 478], "s_ififo": [67, 215, 289, 338], "s_ifdoor": [67, 215, 338, 472, 478], "s_ifport": [67, 215, 338, 472, 478], "s_ifwht": [67, 215, 338, 472, 478], "s_isuid": [67, 215, 289, 338], "s_isgid": [67, 215, 289, 338], "s_isvtx": [67, 215, 289, 338], "s_irwxu": [67, 215, 289, 338], "s_irusr": [67, 215, 289, 338], "s_iwusr": [67, 215, 289, 338, 353], "s_ixusr": [67, 215, 289, 338, 353], "s_irwxg": [67, 215, 289, 338], "s_irgrp": [67, 215, 289, 338], "s_iwgrp": [67, 215, 289, 338], "s_ixgrp": [67, 215, 289, 338], "s_irwxo": [67, 215, 289, 338], "s_iroth": [67, 215, 289, 338], "s_iwoth": [67, 215, 289, 338, 353], "s_ixoth": [67, 215, 289, 338, 353], "s_enfmt": [67, 215, 289, 338], "s_iread": [67, 215, 289, 338], "s_iwrit": [67, 215, 289, 328, 338], "s_iexec": [67, 215, 289, 338], "uf_nodump": [67, 215, 289, 338], "uf_immut": [67, 215, 289, 338, 463], "uf_append": [67, 215, 289, 338, 463], "uf_opaqu": [67, 215, 289, 338], "uf_nounlink": [67, 215, 289, 338], "uf_compress": [67, 215, 289, 338], "uf_hidden": [67, 215, 289, 338], "sf_archiv": [67, 215, 289, 338], "sf_immut": [67, 215, 289, 338], "sf_append": [67, 215, 289, 338], "sf_nounlink": [67, 215, 289, 338], "sf_snapshot": [67, 215, 289, 338], "file_attribute_arch": [67, 215, 289, 338], "file_attribute_compress": [67, 215, 338], "file_attribute_devic": [67, 215, 338], "file_attribute_directori": [67, 215, 338], "file_attribute_encrypt": [67, 215, 338], "file_attribute_hidden": [67, 215, 338], "file_attribute_integrity_stream": [67, 215, 338], "file_attribute_norm": [67, 215, 338], "file_attribute_not_content_index": [67, 215, 338], "file_attribute_no_scrub_data": [67, 215, 338], "file_attribute_offlin": [67, 215, 338], "file_attribute_readon": [67, 215, 338], "file_attribute_reparse_point": [67, 215, 289, 338], "file_attribute_sparse_fil": [67, 215, 338], "file_attribute_system": [67, 215, 338], "file_attribute_temporari": [67, 215, 338], "file_attribute_virtu": [67, 215, 338], "io_reparse_tag_symlink": [67, 215, 338], "io_reparse_tag_mount_point": [67, 215, 338], "io_reparse_tag_appexeclink": [67, 215, 338, 478], "cmp": [67, 105, 212, 215, 221, 340, 457, 458, 461, 465, 478], "cmpfile": [67, 212, 215], "dircmp": [67, 215, 457, 462, 472, 478], "report_partial_closur": [67, 212, 215], "report_full_closur": [67, 212, 215], "left_list": [67, 212, 215], "right_list": [67, 212, 215], "left_on": [67, 212, 215], "right_on": [67, 212, 215], "common_dir": [67, 212, 215], "common_fil": [67, 212, 215], "common_funni": [67, 212, 215], "same_fil": [67, 212, 215], "diff_fil": [67, 212, 215], "funny_fil": [67, 212, 215], "subdir": [67, 117, 212, 215, 267, 357, 478], "default_ignor": [67, 212, 215, 472], "temporaryfil": [67, 215, 355, 478], "namedtemporaryfil": [67, 107, 196, 215, 355, 463, 469, 478], "spooledtemporaryfil": [67, 215, 355, 463, 468, 471, 478], "temporarydirectori": [67, 215, 355, 470, 478], "mkstemp": [67, 139, 215, 279, 355, 478], "mkdtemp": [67, 139, 215, 289, 355, 357, 397, 469, 478], "gettempdir": [67, 215, 355, 478], "gettempdirb": [67, 215, 355, 478], "gettempprefix": [67, 215, 355], "gettempprefixb": [67, 215, 355], "tempdir": [67, 215, 355, 397, 478], "mktemp": [67, 215, 323, 355, 390, 478], "iglob": [67, 215, 227, 467, 473, 474, 478], "fnmatch": [67, 215, 227, 250, 292, 344, 377, 383, 478], "fnmatchcas": [67, 215, 216, 383, 478], "getlin": [67, 215, 261, 377, 473, 478], "clearcach": [67, 215, 261], "checkcach": [67, 215, 261, 478], "lazycach": [67, 215, 261, 473, 478], "copyfileobj": [67, 100, 107, 215, 230, 328, 476, 478], "copyfil": [67, 83, 139, 215, 328, 446, 464, 472, 476, 478], "samefileerror": [67, 215, 328, 472, 478], "copymod": [67, 139, 215, 328], "copystat": [67, 139, 215, 328, 471, 478], "copy2": [67, 83, 215, 328, 470, 471, 473, 476, 478], "ignore_pattern": [67, 215, 328, 357, 463], "copytre": [67, 83, 139, 215, 463, 464, 470, 476, 478], "rmtree": [67, 83, 139, 183, 215, 289, 292, 357, 397, 468, 469, 471, 475, 476, 478], "avoids_symlink_attack": [67, 215, 328], "disk_usag": [67, 215, 328, 471, 478], "chown": [67, 100, 115, 139, 215, 289, 328, 471, 478], "make_arch": [67, 139, 215, 328, 464, 469, 470, 473, 476, 478], "get_archive_format": [67, 215, 328, 470], "register_archive_format": [67, 215, 328, 470], "unregister_archive_format": [67, 215, 328], "unpack_arch": [67, 139, 215, 328, 469, 470, 478], "register_unpack_format": [67, 215, 328], "unregister_unpack_format": [67, 215, 328], "get_unpack_format": [67, 215, 328], "base_dir": [67, 139, 215], "get_terminal_s": [67, 115, 215, 289, 328, 471, 478], "persist": [67, 180, 237, 241, 243, 250, 264, 265, 270, 277, 316, 346, 385, 421, 470, 472, 478], "highest_protocol": [67, 294, 295, 460], "default_protocol": [67, 294, 295, 326, 467, 478], "pickleerror": [67, 294, 295], "picklingerror": [67, 89, 294, 295], "unpicklingerror": [67, 294, 295, 478], "pickler": [67, 89, 168, 294, 295, 296, 466, 471, 476, 478], "persistent_id": [67, 294, 295, 478], "dispatch_t": [67, 168, 294, 295, 471, 478], "reducer_overrid": [67, 294, 295, 476, 478], "unpickl": [67, 75, 93, 100, 179, 263, 265, 279, 280, 294, 296, 420, 460, 463, 464, 466, 478], "persistent_load": [67, 294, 295, 478], "find_class": [67, 139, 294, 295], "picklebuff": [67, 294, 295, 478], "__getnewargs_ex__": [67, 294, 295, 478], "__getnewargs__": [67, 93, 156, 294, 295, 384, 460, 473, 478], "__getstate__": [67, 294, 295, 384, 460, 468, 478], "__setstate__": [67, 294, 295, 384, 460, 476, 478], "__reduce__": [67, 79, 207, 294, 295, 384, 462, 476, 478], "__reduce_ex__": [67, 79, 93, 294, 295, 384, 478], "dispatch": [67, 77, 83, 84, 86, 99, 100, 141, 152, 173, 193, 222, 241, 294, 304, 317, 383, 414, 466, 468, 470, 472, 476, 478], "copyreg": [67, 167, 250, 275, 294, 295, 465, 478], "shelf": [67, 294, 326, 340, 470, 472], "sync": [67, 93, 115, 173, 180, 251, 279, 289, 291, 294, 326, 346, 364, 469, 471, 476, 478], "bsddbshelf": [67, 294, 326, 340], "dbfilenameshelf": [67, 294, 326, 340], "whichdb": [67, 180, 294, 465], "reinterpret": [67, 294], "gdbm": [67, 83, 180, 294, 451, 465, 478], "firstkey": [67, 180, 294], "nextkey": [67, 180, 294], "reorgan": [67, 180, 190, 294, 458, 463, 466, 474, 476, 478], "ndbm": [67, 294, 326, 423, 451, 476, 478], "dumb": [67, 294, 354, 473, 474, 475, 476, 478], "dumbdbm": [67, 180, 294, 465], "sqlite": [67, 250, 294, 438, 446, 451, 462, 464, 467, 468, 469, 470, 471, 472, 475, 478], "connect": [67, 91, 92, 97, 100, 104, 107, 115, 121, 133, 139, 148, 156, 160, 165, 203, 208, 209, 219, 237, 238, 239, 241, 243, 244, 252, 254, 263, 265, 280, 284, 288, 289, 294, 295, 301, 305, 323, 324, 328, 329, 331, 334, 337, 343, 344, 348, 354, 357, 360, 364, 370, 379, 381, 385, 390, 392, 400, 402, 404, 406, 409, 411, 414, 421, 425, 444, 450, 451, 456, 457, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "complete_stat": [67, 294, 336], "enable_callback_traceback": [67, 294, 336], "register_adapt": [67, 294, 336], "register_convert": [67, 294, 336], "legacy_transaction_control": [67, 294, 336], "parse_colnam": [67, 294, 336, 478], "parse_decltyp": [67, 294, 336], "sqlite_ok": [67, 294, 336], "sqlite_deni": [67, 294, 336], "sqlite_ignor": [67, 294, 336], "apilevel": [67, 294, 336], "paramstyl": [67, 294, 336], "sqlite_vers": [67, 294, 336], "sqlite_version_info": [67, 294, 336], "threadsafeti": [67, 294, 336, 468, 478], "sqlite_dbconfig_defens": [67, 294, 336], "sqlite_dbconfig_dqs_ddl": [67, 294, 336], "sqlite_dbconfig_dqs_dml": [67, 294, 336], "sqlite_dbconfig_enable_fkey": [67, 294, 336], "sqlite_dbconfig_enable_fts3_token": [67, 294, 336], "sqlite_dbconfig_enable_load_extens": [67, 294, 336], "sqlite_dbconfig_enable_qpsg": [67, 294, 336], "sqlite_dbconfig_enable_trigg": [67, 294, 336], "sqlite_dbconfig_enable_view": [67, 294, 336], "sqlite_dbconfig_legacy_alter_t": [67, 294, 336], "sqlite_dbconfig_legacy_file_format": [67, 294, 336], "sqlite_dbconfig_no_ckpt_on_clos": [67, 294, 336], "sqlite_dbconfig_reset_databas": [67, 294, 336], "sqlite_dbconfig_trigger_eqp": [67, 294, 336], "sqlite_dbconfig_trusted_schema": [67, 294, 336], "sqlite_dbconfig_writable_schema": [67, 294, 336], "cursor": [67, 91, 152, 156, 171, 173, 243, 294, 295, 316, 364, 370, 371, 385, 462, 463, 466, 470, 474, 476, 477, 478], "blobopen": [67, 294, 336, 468, 478], "commit": [67, 92, 117, 277, 284, 294, 301, 336, 344, 346, 366, 426, 462, 463, 464, 472, 474, 478], "rollback": [67, 294, 336, 462, 463, 468, 478], "executemani": [67, 294, 336, 478], "executescript": [67, 294, 336, 478], "create_funct": [67, 294, 336, 478], "create_aggreg": [67, 294, 336, 478], "create_window_funct": [67, 294, 336, 468, 478], "create_col": [67, 294, 336, 468, 478], "set_author": [67, 294, 336, 468, 478], "set_progress_handl": [67, 294, 336, 478], "set_trace_callback": [67, 294, 336, 471, 478], "enable_load_extens": [67, 139, 294, 336, 451, 464, 467, 470, 478], "load_extens": [67, 139, 294, 336, 464, 467, 469, 470, 478], "iterdump": [67, 294, 336, 478], "backup": [67, 100, 109, 214, 265, 294, 336, 353, 463, 470, 475, 478], "getlimit": [67, 294, 336, 468, 478], "setlimit": [67, 294, 336, 468, 478], "getconfig": [67, 294, 336, 469, 478], "setconfig": [67, 294, 336, 469, 478], "deseri": [67, 258, 280, 294, 295, 336, 420, 441, 464, 468, 472, 474, 478], "autocommit": [67, 294, 469, 478], "in_transact": [67, 294, 336], "isolation_level": [67, 294, 478], "row_factori": [67, 294, 336], "text_factori": [67, 294, 336], "total_chang": [67, 294, 336], "fetchon": [67, 92, 294, 295, 336, 462, 470], "fetchmani": [67, 294, 336], "fetchal": [67, 156, 294, 336, 462], "setinputs": [67, 294, 336], "setoutputs": [67, 294, 336], "arrays": [67, 294, 336], "lastrowid": [67, 294, 336, 474, 478], "rowcount": [67, 294, 336, 478], "blob": [67, 294, 337, 385, 468, 478], "seek": [67, 78, 83, 84, 106, 114, 115, 150, 171, 208, 211, 214, 254, 274, 289, 294, 295, 336, 346, 353, 355, 357, 417, 419, 441, 457, 463, 466, 478], "prepareprotocol": [67, 294, 478], "sqlite_errorcod": [67, 294, 336, 468], "sqlite_errornam": [67, 294, 336, 468], "interfaceerror": [67, 294, 336, 468, 478], "databaseerror": [67, 294, 336], "dataerror": [67, 294, 336, 478], "operationalerror": [67, 294, 336, 478], "integrityerror": [67, 294, 336], "internalerror": [67, 294, 336], "programmingerror": [67, 294, 336, 468, 469, 478], "notsupportederror": [67, 294, 336, 478], "guid": [67, 69, 73, 75, 90, 91, 92, 98, 102, 106, 108, 111, 179, 182, 183, 186, 206, 221, 247, 289, 291, 294, 346, 385, 394, 448, 451, 454, 455, 463, 464, 469, 470, 472, 478], "sql": [67, 94, 106, 171, 257, 277, 288, 294, 381, 446, 462, 466, 468, 471, 478], "uri": [67, 100, 107, 238, 239, 292, 294, 310, 337, 379, 389, 390, 402, 405, 408, 410, 411, 413, 414, 467, 469, 471, 472, 478], "transact": [67, 94, 238, 239, 277, 294, 314, 360, 460, 462, 463, 469, 470, 473, 474, 478], "adler32": [67, 116, 231, 419, 478], "compressobj": [67, 116, 419, 478], "crc32": [67, 116, 143, 231, 281, 419, 446, 447, 478], "decompress": [67, 116, 146, 154, 214, 230, 404, 419, 446, 462, 470, 471, 473, 474, 478], "decompressobj": [67, 116, 419], "unused_data": [67, 116, 146, 266, 419], "unconsumed_tail": [67, 116, 419], "zlib_vers": [67, 116, 419], "zlib_runtime_vers": [67, 116, 419, 471], "badgzipfil": [67, 116, 230, 476, 478], "gzipfil": [67, 86, 116, 230, 353, 464, 466, 467, 469, 470, 473, 477, 478], "mtime": [67, 116, 212, 230, 246, 252, 289, 353, 391, 476, 478], "bzip2": [67, 116, 214, 250, 328, 353, 417, 468, 470, 471, 478], "bz2file": [67, 116, 146, 266, 464, 466, 467, 471, 472, 477, 478], "bz2compressor": [67, 116, 146, 478], "bz2decompressor": [67, 116, 146, 473, 478], "needs_input": [67, 116, 146, 266], "shot": [67, 116, 165, 324, 475], "lzmaerror": [67, 116, 266], "lzmafil": [67, 116, 266, 472, 478], "lzmacompressor": [67, 116, 266, 478], "lzmadecompressor": [67, 116, 266, 473, 478], "is_check_support": [67, 116, 266], "badzipfil": [67, 116, 417, 478], "largezipfil": [67, 116, 417], "zipinfo": [67, 116, 463, 474, 478], "is_zipfil": [67, 116, 417, 464, 478], "zip_stor": [67, 116, 417, 478], "zip_defl": [67, 116, 417, 447], "zip_bzip2": [67, 116, 417], "zip_lzma": [67, 116, 417], "getinfo": [67, 116, 417], "infolist": [67, 116, 417], "namelist": [67, 116, 417], "extractal": [67, 116, 353, 417, 462, 463, 473, 478], "printdir": [67, 116, 417], "setpassword": [67, 116, 417], "testzip": [67, 116, 417], "writestr": [67, 116, 417, 464], "pyzipfil": [67, 116, 472], "writepi": [67, 116, 417, 472], "date_tim": [67, 116, 244, 417], "compress_typ": [67, 116, 417, 464], "create_system": [67, 116, 417], "create_vers": [67, 116, 417], "extract_vers": [67, 116, 417], "flag_bit": [67, 116, 417, 478], "volum": [67, 77, 83, 116, 139, 156, 257, 289, 291, 323, 417, 461, 469, 472, 478], "internal_attr": [67, 116, 417], "external_attr": [67, 116, 417], "header_offset": [67, 116, 417], "crc": [67, 116, 143, 417, 419, 478], "compress_s": [67, 116, 417], "file_s": [67, 116, 417, 459], "tar": [67, 79, 116, 250, 272, 288, 292, 328, 394, 448, 455, 457, 460, 461, 462, 463, 464, 469, 470, 478], "is_tarfil": [67, 116, 353, 478], "tarerror": [67, 116, 353], "readerror": [67, 116, 353, 478], "compressionerror": [67, 116, 353], "streamerror": [67, 116, 353], "extracterror": [67, 116, 353], "headererror": [67, 116, 353], "filtererror": [67, 116, 353], "tarinfo": [67, 116, 464, 470], "absolutepatherror": [67, 116, 353], "outsidedestinationerror": [67, 116, 353], "specialfileerror": [67, 116, 353, 464], "absolutelinkerror": [67, 116, 353], "linkoutsidedestinationerror": [67, 116, 353], "ustar_format": [67, 116, 353], "gnu_format": [67, 116, 353], "pax_format": [67, 116, 353, 463], "default_format": [67, 116, 353, 474], "getmemb": [67, 116, 251, 311, 353, 473, 478], "getnam": [67, 116, 150, 160, 269, 346, 353, 360, 411, 467, 478], "extractfil": [67, 116, 353, 478], "errorlevel": [67, 116, 353], "extraction_filt": [67, 116, 353], "addfil": [67, 116, 353], "gettarinfo": [67, 116, 353], "pax_head": [67, 116, 353], "frombuf": [67, 116, 353], "fromtarfil": [67, 116, 353], "tobuf": [67, 116, 353], "linknam": [67, 116, 353], "uid": [67, 116, 123, 139, 148, 213, 241, 244, 252, 289, 292, 300, 301, 306, 318, 328, 338, 353, 463, 464, 471, 473, 476, 478], "gid": [67, 116, 139, 229, 289, 292, 306, 353, 463, 464, 471, 473, 478], "unam": [67, 115, 116, 289, 299, 348, 350, 353, 470, 471, 478], "gname": [67, 116, 353], "isreg": [67, 116, 353], "issym": [67, 116, 353], "islnk": [67, 116, 353], "ischr": [67, 116, 353], "isblk": [67, 116, 353], "isfifo": [67, 116, 353], "isdev": [67, 116, 353], "fully_trusted_filt": [67, 116, 353], "tar_filt": [67, 116, 353], "data_filt": [67, 116, 353], "reader": [67, 90, 97, 103, 106, 123, 133, 146, 154, 156, 166, 192, 196, 198, 201, 213, 221, 238, 249, 254, 267, 268, 279, 284, 288, 295, 329, 333, 337, 343, 382, 394, 405, 408, 409, 410, 411, 412, 423, 429, 450, 460, 462, 465, 467, 473, 478], "register_dialect": [67, 171, 213], "unregister_dialect": [67, 171, 213, 478], "get_dialect": [67, 171, 213, 478], "list_dialect": [67, 171, 213, 478], "field_size_limit": [67, 98, 171, 213, 462, 478], "dictread": [67, 171, 213, 474, 476, 478], "dictwrit": [67, 171, 213, 470, 478], "dialect": [67, 213, 336, 460, 462, 470, 478], "excel_tab": [67, 171, 213], "unix_dialect": [67, 171, 213, 470], "sniffer": [67, 171, 213, 333, 478], "sniff": [67, 171, 213, 478], "has_head": [67, 171, 213, 239, 252, 390, 478], "quote_al": [67, 171, 213], "quote_minim": [67, 171, 213], "quote_nonnumer": [67, 171, 213], "quote_non": [67, 171, 213], "quote_notnul": [67, 171, 213, 469, 478], "quote_str": [67, 171, 213, 469, 478], "doublequot": [67, 171, 213, 478], "escapechar": [67, 171, 213, 478], "linetermin": [67, 171, 213], "quotechar": [67, 171, 213, 478], "skipinitialspac": [67, 171, 213, 478], "csvreader": [67, 171, 213], "line_num": [67, 171, 213, 315, 462], "fieldnam": [67, 119, 156, 171, 213, 463, 466, 478], "csvwriter": [67, 171, 213], "writerow": [67, 171, 213, 470, 473, 478], "writehead": [67, 171, 213, 470, 478], "interpol": [67, 213, 340, 425, 441, 470, 473, 474, 478], "basicinterpol": [67, 163, 213, 468, 478], "extendedinterpol": [67, 163, 213, 468, 470, 478], "boolean_st": [67, 163, 213], "sectcr": [67, 163, 213], "add_sect": [67, 163, 213, 470], "has_sect": [67, 163, 213], "has_opt": [67, 163, 213, 288, 346], "read_fil": [67, 163, 213, 264, 469], "read_str": [67, 163, 213, 470, 473], "read_dict": [67, 163, 213, 470, 475, 476, 477, 478], "getint": [67, 163, 213, 478], "getfloat": [67, 163, 213], "getboolean": [67, 163, 213, 478], "remove_opt": [67, 163, 213, 288, 346], "remove_sect": [67, 163, 213], "optionxform": [67, 163, 213], "max_interpolation_depth": [67, 163, 213], "rawconfigpars": [67, 213, 264, 464, 468, 472, 478], "nosectionerror": [67, 163, 213], "duplicatesectionerror": [67, 163, 213, 470], "duplicateoptionerror": [67, 163, 213, 470], "nooptionerror": [67, 163, 213, 464], "interpolationerror": [67, 163, 213], "interpolationdeptherror": [67, 163, 213], "interpolationmissingoptionerror": [67, 163, 213, 478], "interpolationsyntaxerror": [67, 163, 213], "missingsectionheadererror": [67, 163, 213], "parsingerror": [67, 163, 213, 468, 469, 478], "tomllib": [67, 163, 213, 250, 468, 478], "toml": [67, 163, 213, 250, 254, 467, 468, 478], "tomldecodeerror": [67, 213, 374], "netrc": [67, 213, 219, 250, 284, 459, 472, 473, 478], "netrcparseerror": [67, 213, 282], "authent": [67, 160, 213, 231, 237, 244, 252, 263, 265, 282, 284, 301, 331, 337, 390, 414, 419, 459, 464, 470, 471, 472, 473, 474, 476, 477, 478], "plist": [67, 213, 250, 268, 454, 463, 472, 475, 476, 478], "fmt_xml": [67, 213, 300, 472], "fmt_binari": [67, 213, 300, 472], "digest": [67, 170, 192, 200, 201, 233, 250, 279, 301, 337, 390, 462, 464, 465, 470, 471, 472, 475, 476, 477, 478], "md5": [67, 169, 170, 231, 233, 244, 331, 336, 337, 393, 451, 462, 463, 464, 465, 470, 472, 476, 477, 478], "sha1": [67, 170, 231, 451, 462, 464, 470, 478], "sha224": [67, 170, 231, 462, 464, 470], "sha256": [67, 170, 231, 247, 333, 337, 451, 462, 464, 470, 478], "sha384": [67, 170, 231, 337, 462, 464, 470], "sha512": [67, 170, 231, 451, 462, 464, 470, 478], "sha3_224": [67, 170, 231, 474], "sha3_256": [67, 170, 231, 474, 478], "sha3_384": [67, 170, 231, 474], "sha3_512": [67, 170, 231, 474, 478], "algorithms_guarante": [67, 170, 231, 464, 470], "algorithms_avail": [67, 170, 231, 464, 470, 478], "digest_s": [67, 170, 231, 233, 472], "block_siz": [67, 170, 231, 233, 472], "hexdigest": [67, 170, 231, 233, 336, 462, 478], "shake": [67, 170, 451, 468, 474, 477, 478], "shake_128": [67, 170, 231, 474], "shake_256": [67, 170, 231, 474], "file_digest": [67, 170, 231, 468, 478], "pbkdf2_hmac": [67, 170, 231, 464, 467, 469, 472, 478], "scrypt": [67, 170, 231, 474, 478], "blake2": [67, 170, 451, 468, 474, 477, 478], "blake2b": [67, 170, 231, 468, 474, 477, 478], "salt_siz": [67, 170, 231], "person_s": [67, 170, 231], "max_key_s": [67, 170, 231], "max_digest_s": [67, 170, 231], "person": [67, 92, 94, 170, 243, 336, 337, 421, 456, 457, 459, 463], "compare_digest": [67, 169, 170, 231, 233, 322, 464, 471, 478], "randbelow": [67, 170, 322, 478], "randbit": [67, 170, 322], "token_byt": [67, 170, 314, 322], "token_hex": [67, 170, 322, 478], "token_urlsaf": [67, 170, 322], "ctermid": [67, 115, 289], "environb": [67, 115, 289, 344, 470, 478], "fsencod": [67, 86, 115, 289, 292, 348, 357, 470, 474, 478], "fspath": [67, 86, 115, 230, 289, 292, 474, 478], "getenvb": [67, 115, 289, 470], "get_exec_path": [67, 115, 289], "getegid": [67, 115, 289, 478], "geteuid": [67, 115, 289, 478], "getgid": [67, 115, 289, 478], "getgrouplist": [67, 115, 289, 471, 478], "getgroup": [67, 115, 289, 478], "getlogin": [67, 115, 225, 289], "getpgid": [67, 115, 289, 460], "getpgrp": [67, 115, 211, 289], "getpid": [67, 99, 115, 123, 279, 289, 478], "getppid": [67, 115, 279, 289, 478], "getprior": [67, 115, 289, 471], "prio_process": [67, 115, 289], "prio_pgrp": [67, 115, 289], "prio_us": [67, 115, 289], "prio_darwin_thread": [67, 115, 289, 478], "prio_darwin_process": [67, 115, 289, 478], "prio_darwin_bg": [67, 115, 289, 478], "prio_darwin_nonui": [67, 115, 289, 478], "getresuid": [67, 115, 289, 464, 478], "getresgid": [67, 115, 289, 464, 478], "getuid": [67, 115, 289, 478], "initgroup": [67, 115, 289, 464], "putenv": [67, 115, 139, 289, 302, 477, 478], "setegid": [67, 115, 289], "seteuid": [67, 115, 289], "setgid": [67, 115, 289, 353], "setgroup": [67, 115, 289, 344, 478], "setn": [67, 115, 289, 478], "setpgrp": [67, 115, 289], "setpgid": [67, 115, 289, 344], "setprior": [67, 115, 289, 471, 478], "setregid": [67, 115, 289, 344], "setresgid": [67, 115, 289, 464], "setresuid": [67, 115, 289, 464], "setreuid": [67, 115, 289, 344], "getsid": [67, 115, 289, 461], "setsid": [67, 115, 289, 344, 478], "setuid": [67, 115, 289, 353], "supports_bytes_environ": [67, 115, 289, 470], "umask": [67, 115, 180, 289, 292, 344, 357, 475, 478], "unsetenv": [67, 115, 139, 289, 463, 477, 478], "unshar": [67, 115, 289, 318, 478], "clone_fil": [67, 115, 289], "clone_f": [67, 115, 289], "clone_newcgroup": [67, 115, 289], "clone_newipc": [67, 115, 289], "clone_newnet": [67, 115, 289], "clone_newn": [67, 115, 289], "clone_newpid": [67, 115, 289], "clone_newtim": [67, 115, 289], "clone_newus": [67, 115, 289], "clone_newut": [67, 115, 289], "clone_sighand": [67, 115, 289], "clone_sysvsem": [67, 115, 289], "clone_thread": [67, 115, 289], "clone_vm": [67, 115, 289], "fdopen": [67, 115, 278, 289, 333, 423], "closerang": [67, 115, 289, 463, 478], "copy_file_rang": [67, 115, 289, 478], "device_encod": [67, 115, 289, 478], "dup": [67, 115, 156, 289, 333, 478], "dup2": [67, 115, 210, 289, 329, 468, 473, 475, 478], "fchmod": [67, 115, 289, 463, 473, 478], "fchown": [67, 115, 289, 463, 473], "fdatasync": [67, 115, 289, 473], "fpathconf": [67, 115, 289, 478], "fstat": [67, 115, 289, 290, 338, 459, 471, 473, 478], "fstatvf": [67, 115, 289, 459, 473], "fsync": [67, 115, 289, 473, 478], "ftruncat": [67, 83, 115, 289, 473, 478], "get_block": [67, 115, 289, 473, 478], "lockf": [67, 115, 139, 211, 267, 289, 386, 459, 463, 471, 478], "f_lock": [67, 115, 289, 478], "f_tlock": [67, 115, 289], "f_ulock": [67, 115, 289], "f_test": [67, 115, 289], "login_tti": [67, 115, 289, 478], "lseek": [67, 115, 289, 462, 471], "seek_set": [67, 115, 211, 254, 274, 289, 336, 462, 466], "seek_cur": [67, 115, 211, 254, 274, 289, 336, 462, 466], "seek_end": [67, 115, 211, 254, 274, 289, 336, 462, 466], "seek_hol": [67, 115, 254, 289, 471], "seek_data": [67, 115, 254, 289, 471], "o_rdon": [67, 115, 221, 278, 279, 289], "o_wron": [67, 115, 289, 329], "o_rdwr": [67, 115, 289, 329], "o_append": [67, 115, 278, 289], "o_creat": [67, 115, 289], "o_excl": [67, 115, 289, 355], "o_trunc": [67, 115, 289], "o_dsync": [67, 115, 289], "o_rsync": [67, 115, 289], "o_sync": [67, 115, 289], "o_ndelay": [67, 104, 115, 211, 289], "o_nonblock": [67, 104, 115, 289, 471, 473, 478], "o_noctti": [67, 115, 289], "o_cloexec": [67, 115, 289, 471, 478], "o_noinherit": [67, 115, 289], "o_short_liv": [67, 115, 289], "o_temporari": [67, 115, 289, 355], "o_random": [67, 115, 289], "o_sequenti": [67, 115, 289], "o_evton": [67, 115, 289, 467, 478], "o_fsync": [67, 115, 289, 467, 478], "o_symlink": [67, 115, 289, 467, 478], "o_nofollow_ani": [67, 115, 289, 467, 478], "o_async": [67, 115, 289], "o_direct": [67, 115, 289], "o_directori": [67, 115, 289], "o_nofollow": [67, 115, 289], "o_noatim": [67, 115, 289], "o_path": [67, 115, 289, 472, 478], "o_tmpfil": [67, 115, 289, 355, 472, 478], "o_shlock": [67, 115, 211, 289, 462, 478], "o_exlock": [67, 115, 211, 289, 462, 478], "openpti": [67, 115, 289, 305, 386, 478], "pipe": [67, 86, 100, 103, 104, 115, 122, 127, 128, 130, 134, 160, 186, 204, 208, 209, 211, 250, 254, 289, 324, 325, 328, 329, 338, 344, 346, 348, 353, 357, 394, 450, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478], "pipe2": [67, 115, 289, 471], "posix_falloc": [67, 115, 289, 471, 473, 478], "posix_fadvis": [67, 115, 289, 471, 473, 478], "posix_fadv_norm": [67, 115, 289], "posix_fadv_sequenti": [67, 115, 289], "posix_fadv_random": [67, 115, 289], "posix_fadv_noreus": [67, 115, 289], "posix_fadv_willne": [67, 115, 289], "posix_fadv_dontne": [67, 115, 289], "pread": [67, 115, 289, 471, 473, 475, 478], "preadv": [67, 115, 289, 475, 478], "rwf_nowait": [67, 115, 289], "rwf_hipri": [67, 115, 289], "pwrite": [67, 115, 289, 471, 473, 475], "pwritev": [67, 115, 289, 475, 478], "rwf_dsync": [67, 115, 289], "rwf_sync": [67, 115, 289], "rwf_append": [67, 115, 289, 478], "sendfil": [67, 115, 123, 124, 127, 130, 252, 289, 328, 333, 337, 402, 471, 473, 475, 478], "set_block": [67, 115, 289, 473, 478], "sf_nodiskio": [67, 115, 289], "sf_mnowait": [67, 115, 289], "sf_sync": [67, 115, 289], "sf_nocach": [67, 115, 289, 478], "splice": [67, 115, 208, 289, 467, 478], "splice_f_mov": [67, 115, 289], "splice_f_nonblock": [67, 115, 289], "splice_f_mor": [67, 115, 289], "readv": [67, 115, 289, 471, 473, 475, 478], "tcgetpgrp": [67, 115, 289], "tcsetpgrp": [67, 115, 289], "ttynam": [67, 115, 289, 478], "writev": [67, 115, 289, 471, 473, 475, 478], "terminal_s": [67, 115, 289, 328], "get_inherit": [67, 115, 289, 333, 472], "set_inherit": [67, 115, 289, 324, 333, 472, 478], "get_handle_inherit": [67, 115, 289, 472], "set_handle_inherit": [67, 115, 289, 344, 472], "f_ok": [67, 115, 289, 328], "r_ok": [67, 115, 289], "w_ok": [67, 115, 289], "x_ok": [67, 115, 289, 328], "chdir": [67, 115, 139, 165, 289, 311, 328, 348, 446, 468, 470, 471, 477, 478], "chflag": [67, 115, 139, 289, 328, 338, 463, 471], "chroot": [67, 115, 289, 478], "fchdir": [67, 115, 289, 473], "getcwd": [67, 109, 115, 289, 290, 292, 357, 402, 446, 475, 478], "getcwdb": [67, 115, 289, 465, 476, 478], "lchflag": [67, 115, 289, 463], "lchown": [67, 115, 289, 460], "listdir": [67, 77, 92, 106, 115, 139, 196, 209, 216, 226, 241, 289, 292, 328, 338, 394, 460, 461, 464, 465, 471, 475, 478], "listdriv": [67, 115, 139, 289, 469, 478], "listmount": [67, 115, 139, 289, 469, 478], "listvolum": [67, 115, 139, 289, 469, 478], "makedir": [67, 83, 115, 289, 292, 473, 475, 478], "mkfifo": [67, 115, 289, 471, 473, 478], "mknod": [67, 115, 289, 460, 471, 473, 478], "makedev": [67, 115, 289, 460, 478], "pathconf": [67, 115, 289, 471], "pathconf_nam": [67, 115, 289], "removedir": [67, 83, 115, 289], "direntri": [67, 115, 289, 469, 473, 474, 478], "inod": [67, 115, 265, 289, 338, 478], "stat_result": [67, 115, 289, 292, 353, 460, 473, 476, 478], "st_atime_n": [67, 115, 289], "st_mtime_n": [67, 115, 289], "st_ctime_n": [67, 115, 289], "st_birthtim": [67, 115, 289, 462, 469], "st_birthtime_n": [67, 115, 289], "st_block": [67, 115, 289, 478], "st_blksize": [67, 115, 289], "st_rdev": [67, 115, 289, 469], "st_flag": [67, 115, 289, 462], "st_gen": [67, 115, 289, 462], "st_fstype": [67, 115, 289, 475, 478], "st_rsize": [67, 115, 289], "st_creator": [67, 115, 289], "st_type": [67, 115, 289], "st_file_attribut": [67, 115, 289, 338, 473, 478], "st_reparse_tag": [67, 115, 289, 338, 476], "statvf": [67, 115, 289, 459, 463, 471, 478], "supports_dir_fd": [67, 115, 289, 471], "supports_effective_id": [67, 115, 289, 471], "supports_fd": [67, 115, 289, 471], "supports_follow_symlink": [67, 115, 289, 328], "utim": [67, 115, 139, 289, 328, 471, 478], "fwalk": [67, 115, 139, 289, 471, 475, 478], "memfd_creat": [67, 115, 211, 289, 476, 478], "mfd_cloexec": [67, 115, 289], "mfd_allow_s": [67, 115, 289], "mfd_hugetlb": [67, 115, 289], "mfd_huge_shift": [67, 115, 289], "mfd_huge_mask": [67, 115, 289], "mfd_huge_64kb": [67, 115, 289], "mfd_huge_512kb": [67, 115, 289], "mfd_huge_1mb": [67, 115, 289], "mfd_huge_2mb": [67, 115, 289], "mfd_huge_8mb": [67, 115, 289], "mfd_huge_16mb": [67, 115, 289], "mfd_huge_32mb": [67, 115, 289], "mfd_huge_256mb": [67, 115, 289], "mfd_huge_512mb": [67, 115, 289], "mfd_huge_1gb": [67, 115, 289], "mfd_huge_2gb": [67, 115, 289], "mfd_huge_16gb": [67, 115, 289], "eventfd": [67, 115, 289, 467, 478], "eventfd_read": [67, 115, 289], "eventfd_writ": [67, 115, 289], "efd_cloexec": [67, 115, 289, 478], "efd_nonblock": [67, 115, 289, 478], "efd_semaphor": [67, 115, 289, 478], "getxattr": [67, 115, 139, 289, 471], "listxattr": [67, 115, 139, 289, 471], "removexattr": [67, 115, 139, 289, 471], "setxattr": [67, 115, 139, 289, 471, 478], "xattr_size_max": [67, 115, 289], "xattr_creat": [67, 115, 289], "xattr_replac": [67, 115, 289], "add_dll_directori": [67, 115, 139, 289, 476, 478], "execl": [67, 115, 288, 289], "execlp": [67, 115, 289], "execvp": [67, 115, 289, 344], "_exit": [67, 115, 137, 209, 210, 289], "ex_ok": [67, 115, 289], "ex_usag": [67, 115, 289], "ex_dataerr": [67, 115, 289], "ex_noinput": [67, 115, 289], "ex_nous": [67, 115, 289], "ex_nohost": [67, 115, 289], "ex_unavail": [67, 115, 289], "ex_softwar": [67, 115, 289], "ex_oserr": [67, 115, 289], "ex_osfil": [67, 115, 289], "ex_cantcreat": [67, 115, 289], "ex_ioerr": [67, 115, 289], "ex_tempfail": [67, 115, 289], "ex_protocol": [67, 115, 289], "ex_noperm": [67, 115, 289], "ex_config": [67, 115, 289], "ex_notfound": [67, 115, 289], "forkpti": [67, 115, 139, 289, 478], "killpg": [67, 115, 139, 289, 460, 478], "nice": [67, 115, 117, 137, 141, 148, 165, 172, 189, 221, 266, 289, 318, 331, 334, 340, 385, 398, 423, 457, 470, 471], "pidfd_open": [67, 115, 289, 469, 477, 478], "pidfd_nonblock": [67, 115, 289, 469, 478], "plock": [67, 115, 289], "posix_spawn": [67, 115, 139, 160, 289, 476, 478], "posix_spawn_open": [67, 115, 289], "posix_spawn_clos": [67, 115, 289], "posix_spawn_dup2": [67, 115, 289], "posix_spawnp": [67, 115, 289, 478], "spawnl": [67, 115, 289], "spawnlp": [67, 115, 289, 344], "spawnv": [67, 115, 289, 478], "spawnvp": [67, 115, 289, 344], "p_nowait": [67, 115, 289, 344], "p_nowaito": [67, 115, 289], "p_wait": [67, 115, 289, 344], "p_detach": [67, 115, 289], "p_overlay": [67, 115, 289], "startfil": [67, 115, 139, 289, 478], "waitid": [67, 115, 289, 471, 473, 478], "waitpid": [67, 115, 129, 253, 289, 305, 462, 472, 473, 478], "wait3": [67, 115, 289, 462, 473, 478], "wait4": [67, 115, 289, 462, 473], "p_pid": [67, 115, 289], "p_pgid": [67, 115, 289], "p_all": [67, 115, 289], "p_pidfd": [67, 115, 289, 477, 478], "wcontinu": [67, 115, 289], "wexit": [67, 115, 289], "wstop": [67, 115, 289], "wuntrac": [67, 115, 289], "wnohang": [67, 115, 289], "wnowait": [67, 115, 289], "cld_exit": [67, 115, 289], "cld_kill": [67, 115, 289, 477, 478], "cld_dump": [67, 115, 289], "cld_trap": [67, 115, 289], "cld_stop": [67, 115, 289, 477, 478], "cld_continu": [67, 115, 289], "waitstatus_to_exitcod": [67, 115, 289, 305, 477, 478], "wcoredump": [67, 115, 289], "wifcontinu": [67, 115, 289], "wifstop": [67, 115, 289], "wifsign": [67, 115, 289], "wifexit": [67, 115, 289], "wexitstatus": [67, 115, 289], "wstopsig": [67, 115, 289], "wtermsig": [67, 115, 289], "sched_oth": [67, 115, 289], "sched_batch": [67, 115, 289], "sched_idl": [67, 115, 289], "sched_sporad": [67, 115, 289], "sched_fifo": [67, 115, 289], "sched_rr": [67, 115, 289], "sched_reset_on_fork": [67, 115, 289], "sched_param": [67, 115, 289], "sched_prior": [67, 115, 289], "sched_get_priority_min": [67, 115, 289, 471], "sched_get_priority_max": [67, 115, 289, 471], "sched_setschedul": [67, 115, 289, 471], "sched_getschedul": [67, 115, 289, 471], "sched_setparam": [67, 115, 289, 471], "sched_getparam": [67, 115, 289, 471], "sched_rr_get_interv": [67, 115, 289, 471], "sched_yield": [67, 115, 289, 471, 478], "sched_setaffin": [67, 115, 289, 471, 478], "sched_getaffin": [67, 115, 279, 289, 471, 478], "confstr": [67, 115, 289, 478], "confstr_nam": [67, 115, 289], "cpu_count": [67, 115, 159, 160, 162, 279, 289, 467, 472, 478], "getloadavg": [67, 115, 289], "sysconf": [67, 115, 289, 333, 478], "sysconf_nam": [67, 115, 289, 478], "curdir": [67, 115, 185, 212, 289, 290, 328, 364], "pardir": [67, 115, 212, 289], "altsep": [67, 115, 227, 243, 289, 292, 468, 478], "extsep": [67, 115, 289], "defpath": [67, 115, 289, 328, 478], "linesep": [67, 115, 190, 197, 198, 199, 204, 221, 254, 281, 289, 331, 344, 471, 478], "devnul": [67, 115, 123, 134, 160, 279, 289, 329, 344, 471, 478], "rtld_lazi": [67, 115, 289, 348, 471], "rtld_now": [67, 115, 172, 289, 471], "rtld_global": [67, 115, 172, 289, 348, 471, 476, 478], "rtld_local": [67, 115, 172, 289, 471, 476, 478], "rtld_nodelet": [67, 115, 289, 471], "rtld_noload": [67, 115, 289, 471], "rtld_deepbind": [67, 115, 289, 471], "getrandom": [67, 115, 289, 473, 474, 478], "urandom": [67, 115, 123, 231, 279, 289, 314, 337, 461, 464, 468, 469, 472, 473, 474, 478], "grnd_nonblock": [67, 115, 289, 478], "grnd_random": [67, 115, 289], "default_buffer_s": [67, 115, 221, 254, 344, 478], "text_encod": [67, 115, 254, 478], "unsupportedoper": [67, 115, 254, 478], "iobas": [67, 115, 184, 186, 209, 211, 254, 373, 450, 476, 478], "seekabl": [67, 114, 115, 146, 254, 396, 417, 463, 478], "rawiobas": [67, 115, 221, 254, 463, 471, 473, 478], "readal": [67, 115, 254, 467, 472, 478], "bufferediobas": [67, 115, 146, 221, 230, 238, 241, 254, 266, 295, 334, 355, 364, 402, 463, 464, 468, 470, 471, 473, 474, 478], "read1": [67, 115, 146, 230, 254, 478], "readinto1": [67, 115, 254, 473], "bytesio": [67, 86, 115, 192, 203, 230, 231, 254, 267, 295, 340, 355, 373, 416, 420, 463, 465, 470, 473, 478], "getbuff": [67, 115, 254, 470], "getvalu": [67, 77, 78, 84, 115, 148, 165, 192, 230, 254, 258, 269, 295, 304, 357, 384, 411, 416, 470, 473], "bufferedread": [67, 115, 221, 254, 353, 463, 464, 470, 478], "bufferedwrit": [67, 115, 221, 254, 463, 470, 478], "bufferedrandom": [67, 115, 221, 254, 463], "bufferedrwpair": [67, 115, 254, 463, 478], "textiobas": [67, 78, 115, 221, 238, 254, 355, 364, 423, 463, 464, 465, 468, 478], "line_buff": [67, 115, 254], "write_through": [67, 115, 221, 254, 471, 478], "reconfigur": [67, 89, 115, 221, 254, 475, 478], "stringio": [67, 78, 84, 86, 115, 165, 192, 203, 254, 258, 304, 340, 348, 357, 384, 402, 406, 463, 464, 465, 470, 472, 473, 478], "incrementalnewlinedecod": [67, 115, 254, 478], "reentranc": [67, 115, 165, 312, 478], "asctim": [67, 99, 100, 115, 263, 264, 305, 361, 458, 464, 470], "pthread_getcpuclockid": [67, 115, 361, 475, 478], "clock_getr": [67, 115, 361, 471], "clock_gettim": [67, 115, 361, 471, 477, 478], "clock_gettime_n": [67, 115, 361, 475, 478], "clock_settim": [67, 115, 361, 471], "clock_settime_n": [67, 115, 361, 475, 478], "get_clock_info": [67, 115, 361, 471, 478], "gmtime": [67, 99, 100, 115, 147, 179, 205, 263, 267, 361, 459, 470, 471, 478], "localtim": [67, 86, 99, 115, 179, 190, 199, 205, 244, 263, 281, 361, 458, 459, 469, 471, 478], "mktime": [67, 115, 179, 205, 361, 470, 478], "monoton": [67, 89, 115, 123, 128, 131, 165, 186, 321, 339, 361, 435, 460, 471, 473, 478], "monotonic_n": [67, 115, 361, 475, 478], "perf_count": [67, 115, 304, 361, 362, 471, 476, 478], "perf_counter_n": [67, 115, 361, 475, 478], "process_tim": [67, 115, 304, 361, 362, 471, 476, 478], "process_time_n": [67, 115, 361, 475, 478], "sleep": [67, 83, 94, 100, 115, 120, 121, 122, 123, 126, 130, 131, 132, 134, 135, 162, 163, 173, 253, 279, 318, 321, 329, 336, 344, 357, 361, 463, 467, 468, 471, 473, 474, 475, 476, 478], "struct_tim": [67, 115, 179, 244, 267, 361, 474], "time_n": [67, 115, 361, 475, 478], "thread_tim": [67, 115, 361, 475, 477, 478], "thread_time_n": [67, 115, 361, 475, 478], "tzset": [67, 115, 361, 478], "clock": [67, 84, 115, 123, 128, 136, 179, 304, 318, 379, 463, 471, 473, 474, 475, 476, 478], "clock_boottim": [67, 115, 361, 475, 478], "clock_highr": [67, 115, 361], "clock_monoton": [67, 115, 361, 468, 475, 478], "clock_monotonic_raw": [67, 115, 361], "clock_process_cputime_id": [67, 115, 361], "clock_prof": [67, 115, 361, 475, 478], "clock_tai": [67, 115, 361, 478], "clock_thread_cputime_id": [67, 115, 361, 477, 478], "clock_uptim": [67, 115, 361, 475, 478], "clock_uptime_raw": [67, 115, 361, 476, 478], "clock_realtim": [67, 115, 361, 468, 478], "altzon": [67, 115, 179, 361], "daylight": [67, 115, 179, 205, 361, 420, 477], "add_argu": [67, 88, 100, 115, 156, 186, 196, 224, 305, 394, 446, 464, 470, 478], "argumentpars": [67, 88, 100, 115, 156, 186, 196, 224, 305, 394, 446, 464, 469, 470, 473, 475, 478], "prog": [67, 88, 100, 115, 288, 315, 394, 446, 470], "epilog": [67, 115, 201, 288, 462, 470], "formatter_class": [67, 100, 115], "rawdescriptionhelpformatt": [67, 115, 117], "rawtexthelpformatt": [67, 115, 117], "argumentdefaultshelpformatt": [67, 100, 115, 117, 478], "metavartypehelpformatt": [67, 115, 117], "prefix_char": [67, 115], "fromfile_prefix_char": [67, 115, 469, 478], "argument_default": [67, 115], "allow_abbrev": [67, 115, 473, 478], "conflict_handl": [67, 115, 288], "add_help": [67, 115], "exit_on_error": [67, 115, 478], "metavar": [67, 100, 115, 196, 288, 346, 394, 464, 469, 470, 478], "parse_arg": [67, 88, 100, 115, 156, 186, 196, 224, 288, 305, 346, 394, 446, 460, 464, 470], "abbrevi": [67, 106, 115, 147, 173, 179, 182, 262, 288, 293, 304, 344, 361, 376, 408, 450, 472, 473, 474, 478], "add_subpars": [67, 100, 115, 117, 470, 475, 478], "filetyp": [67, 115, 185, 332, 464, 472, 478], "add_argument_group": [67, 115, 117, 478], "add_mutually_exclusive_group": [67, 88, 115, 117, 478], "set_default": [67, 115, 117, 288, 346, 478], "get_default": [67, 115, 117], "print_usag": [67, 115, 117, 288, 346], "print_help": [67, 115, 117, 288], "format_usag": [67, 115, 117, 478], "format_help": [67, 115, 117], "parse_known_arg": [67, 115, 117, 478], "convert_arg_line_to_arg": [67, 115, 117], "intermix": [67, 115, 224, 475, 478], "parse_intermixed_arg": [67, 115, 117, 475, 478], "parse_known_intermixed_arg": [67, 115, 117], "upgrad": [67, 107, 108, 115, 133, 206, 238, 243, 394, 448, 451, 456, 459, 460, 464, 470, 472, 474, 475, 476, 478], "argumenterror": [67, 115, 117, 172, 478], "argumenttypeerror": [67, 115, 117], "getopt": [67, 88, 115, 186, 250, 288, 460, 464, 478], "gnu_getopt": [67, 115, 224, 460], "getopterror": [67, 115, 224], "logger": [67, 115, 122, 165, 264, 265, 279, 328, 351, 381, 383, 460, 464, 466, 470, 471, 472, 473, 475, 476, 477, 478], "setlevel": [67, 99, 100, 115, 122, 263, 279, 460, 478], "isenabledfor": [67, 99, 100, 115, 263, 464, 478], "geteffectivelevel": [67, 115, 263], "getchild": [67, 115, 263, 464], "getchildren": [67, 115, 263, 464, 470, 476, 477, 478], "addfilt": [67, 99, 100, 115, 263], "removefilt": [67, 99, 115, 263], "addhandl": [67, 99, 100, 115, 263, 466], "removehandl": [67, 99, 100, 115, 183, 263, 383, 464], "findcal": [67, 115, 263], "makerecord": [67, 100, 115, 263], "hashandl": [67, 115, 263], "notset": [67, 99, 115, 263, 264, 279], "createlock": [67, 115, 263, 265], "setformatt": [67, 99, 100, 115, 263, 265], "handleerror": [67, 99, 115, 263, 265], "formattim": [67, 115, 263], "formatexcept": [67, 100, 115, 263], "formatstack": [67, 115, 263], "bufferingformatt": [67, 99, 115, 263], "formathead": [67, 115, 263], "formatfoot": [67, 115, 263], "logrecord": [67, 99, 115, 265, 383, 460, 472, 478], "getmessag": [67, 100, 115, 263, 269, 409], "loggeradapt": [67, 115, 464, 478], "getlogg": [67, 99, 100, 115, 122, 263, 383, 460, 464, 466, 477, 478], "getloggerclass": [67, 115, 263], "getlogrecordfactori": [67, 100, 115, 263], "addlevelnam": [67, 115, 263], "getlevelnamesmap": [67, 115, 263, 468, 478], "getlevelnam": [67, 100, 115, 263], "gethandlerbynam": [67, 115, 263, 264, 478], "gethandlernam": [67, 115, 263, 478], "makelogrecord": [67, 100, 115, 263, 265], "basicconfig": [67, 92, 99, 100, 115, 122, 165, 263, 461, 470, 471, 476, 478], "setloggerclass": [67, 100, 115, 263], "setlogrecordfactori": [67, 100, 115, 263], "lastresort": [67, 99, 115, 263, 470], "capturewarn": [67, 115, 263, 395], "dictconfig": [67, 99, 115, 264, 265, 464, 470, 478], "fileconfig": [67, 99, 100, 115, 264, 464, 472, 475, 478], "listen": [67, 83, 104, 115, 123, 160, 218, 241, 264, 265, 284, 309, 325, 331, 333, 334, 337, 357, 379, 402, 414, 460, 463, 464, 472, 473, 478], "stoplisten": [67, 100, 115, 264], "schema": [67, 92, 115, 277, 336, 346, 464, 478], "queuehandl": [67, 99, 115, 478], "queuelisten": [67, 115, 473, 478], "streamhandl": [67, 99, 100, 115, 263, 264, 470, 475, 478], "setstream": [67, 115, 265, 277, 346, 475, 478], "filehandl": [67, 99, 100, 107, 115, 252, 263, 264, 463, 478], "nullhandl": [67, 99, 115, 466], "watchedfilehandl": [67, 99, 115, 463, 474], "reopenifneed": [67, 115, 265, 474], "baserotatinghandl": [67, 99, 115, 461], "namer": [67, 115, 265, 478], "rotation_filenam": [67, 115, 265], "rotatingfilehandl": [67, 99, 100, 115, 264, 461, 463, 464], "dorollov": [67, 115, 265], "timedrotatingfilehandl": [67, 99, 115, 461, 463, 472, 478], "getfilestodelet": [67, 115, 265], "sockethandl": [67, 99, 100, 115, 264, 468, 472], "makesocket": [67, 115, 265], "makepickl": [67, 100, 115, 265], "createsocket": [67, 115, 265, 468, 478], "datagramhandl": [67, 99, 115, 264, 472], "sysloghandl": [67, 99, 115, 264, 351, 464, 468, 471, 478], "encodeprior": [67, 115, 265], "mapprior": [67, 115, 265], "nteventloghandl": [67, 99, 115, 264], "geteventcategori": [67, 115, 265], "geteventtyp": [67, 115, 265], "getmessageid": [67, 115, 265], "smtphandler": [67, 99, 100, 115, 264, 478], "getsubject": [67, 115, 265], "memoryhandl": [67, 99, 100, 115, 264, 478], "bufferinghandl": [67, 100, 115, 265], "shouldflush": [67, 115, 265], "settarget": [67, 115, 265, 478], "httphandler": [67, 99, 100, 107, 115, 252, 264, 473, 478], "maplogrecord": [67, 115, 265], "enqueu": [67, 100, 115, 265, 279, 478], "dequeu": [67, 100, 115, 265, 478], "enqueue_sentinel": [67, 115, 265], "getpass": [67, 115, 169, 244, 250, 278, 289, 301, 354, 356, 463, 478], "getpasswarn": [67, 115, 225], "getus": [67, 115, 225, 244, 289, 301], "baudrat": [67, 115, 173], "beep": [67, 115, 173, 399, 401, 474], "can_change_color": [67, 91, 115, 173], "cbreak": [67, 91, 115, 173, 378], "color_cont": [67, 115, 173, 467], "color_pair": [67, 91, 115, 173, 478], "curs_set": [67, 91, 115, 173], "def_prog_mod": [67, 115, 173], "def_shell_mod": [67, 115, 173], "delay_output": [67, 115, 173], "doupdat": [67, 91, 115, 173, 175], "echo": [67, 88, 91, 111, 115, 123, 127, 134, 138, 166, 173, 225, 243, 258, 278, 289, 295, 325, 327, 333, 344, 356, 383, 425, 445, 463, 478], "endwin": [67, 91, 115, 173], "erasechar": [67, 115, 173], "flash": [67, 91, 115, 173, 478], "flushinp": [67, 115, 173], "getmous": [67, 115, 173], "getsyx": [67, 115, 173], "getwin": [67, 115, 173], "has_color": [67, 91, 115, 173], "has_extended_color_support": [67, 115, 173, 467, 478], "has_ic": [67, 115, 173], "has_il": [67, 115, 173], "has_key": [67, 109, 115, 173, 457, 458, 459, 460, 465, 478], "halfdelay": [67, 91, 115, 173], "init_color": [67, 115, 173, 467], "init_pair": [67, 91, 115, 173, 467], "initscr": [67, 91, 115, 173], "is_term_res": [67, 115, 173], "isendwin": [67, 115, 173], "keynam": [67, 115, 173], "killchar": [67, 115, 173], "longnam": [67, 115, 173, 353, 478], "mouseinterv": [67, 115, 173], "mousemask": [67, 115, 173], "napm": [67, 115, 173], "newpad": [67, 91, 115, 173], "newwin": [67, 91, 115, 173], "nl": [67, 115, 173, 174, 236, 260, 333, 372, 373, 389, 421, 430, 463, 478], "nocbreak": [67, 91, 115, 173], "noecho": [67, 91, 115, 173], "nonl": [67, 115, 173], "noqiflush": [67, 115, 173], "noraw": [67, 115, 173], "pair_cont": [67, 115, 173, 467], "pair_numb": [67, 115, 173], "putp": [67, 115, 173], "qiflush": [67, 115, 173], "reset_prog_mod": [67, 115, 173], "reset_shell_mod": [67, 115, 173], "resetti": [67, 115, 173], "resize_term": [67, 115, 173], "resizeterm": [67, 115, 173], "savetti": [67, 115, 173], "get_escdelay": [67, 115, 173, 477, 478], "set_escdelay": [67, 115, 173, 477, 478], "get_tabs": [67, 115, 173, 477, 478], "set_tabs": [67, 115, 173, 477, 478], "setsyx": [67, 115, 173], "setupterm": [67, 115, 173], "start_color": [67, 91, 115, 173], "termattr": [67, 115, 173], "termnam": [67, 115, 173], "tigetflag": [67, 115, 173], "tigetnum": [67, 115, 173], "tigetstr": [67, 115, 173], "tparm": [67, 115, 173], "typeahead": [67, 115, 173], "unctrl": [67, 115, 173, 174], "ungetch": [67, 115, 173, 278, 399], "update_lines_col": [67, 115, 173, 473, 478], "unget_wch": [67, 115, 173, 471, 478], "ungetmous": [67, 115, 173, 478], "use_env": [67, 115, 173], "use_default_color": [67, 115, 173, 461], "addch": [67, 89, 91, 115, 173, 478], "addnstr": [67, 115, 173], "addstr": [67, 91, 115, 173, 478], "attroff": [67, 115, 173], "attron": [67, 115, 173], "attrset": [67, 115, 173], "bkgd": [67, 115, 173], "bkgdset": [67, 115, 173], "border": [67, 91, 115, 173, 364, 371, 389], "box": [67, 91, 100, 115, 173, 243, 267, 364, 368, 370, 371, 381, 425, 474, 475, 476, 478], "chgat": [67, 115, 173, 463], "clearok": [67, 115, 173], "clrtobot": [67, 115, 173], "clrtoeol": [67, 115, 173], "cursyncup": [67, 115, 173], "delch": [67, 115, 173], "deleteln": [67, 115, 173], "derwin": [67, 115, 173], "echochar": [67, 115, 173], "enclos": [67, 72, 86, 89, 103, 115, 156, 173, 221, 238, 244, 251, 258, 284, 293, 315, 327, 341, 357, 360, 362, 381, 383, 405, 422, 424, 425, 429, 430, 431, 435, 444, 458, 459, 462, 468, 469, 470, 476, 478], "eras": [67, 84, 91, 100, 115, 173, 340, 354], "getbegyx": [67, 115, 173], "getbkgd": [67, 115, 173], "getch": [67, 85, 91, 115, 173, 278, 399], "get_wch": [67, 115, 173, 471], "getkey": [67, 91, 115, 173, 478], "getmaxyx": [67, 115, 173], "getparyx": [67, 115, 173], "getstr": [67, 91, 115, 173, 277, 346, 463, 478], "getyx": [67, 115, 173], "hline": [67, 115, 173], "idcok": [67, 115, 173], "idlok": [67, 115, 173], "immedok": [67, 115, 173], "inch": [67, 115, 173, 364], "insch": [67, 115, 173], "insdelln": [67, 115, 173], "insertln": [67, 115, 173], "insnstr": [67, 115, 173], "insstr": [67, 115, 173], "instr": [67, 115, 173, 187, 357, 472, 478], "is_linetouch": [67, 115, 173], "is_wintouch": [67, 115, 173], "keypad": [67, 91, 115, 173], "leaveok": [67, 91, 115, 173], "mvderwin": [67, 115, 173], "mvwin": [67, 115, 173], "nodelay": [67, 91, 115, 173], "notimeout": [67, 115, 173], "noutrefresh": [67, 91, 115, 173], "overlay": [67, 115, 173], "overwrit": [67, 72, 89, 99, 100, 109, 115, 146, 159, 173, 177, 192, 196, 201, 254, 263, 265, 266, 289, 316, 326, 340, 353, 390, 416, 417, 422, 423, 436, 456, 460, 463, 464, 466, 469, 470, 471, 472, 478], "putwin": [67, 115, 173], "redrawln": [67, 115, 173], "redrawwin": [67, 115, 173], "refresh": [67, 91, 115, 156, 173, 284, 364, 371, 462, 477, 478], "scroll": [67, 91, 115, 152, 173, 243, 250, 363, 364, 371, 478], "scrollok": [67, 115, 173], "setscrreg": [67, 115, 173], "standend": [67, 115, 173], "standout": [67, 115, 173], "subpad": [67, 115, 173], "subwin": [67, 115, 173], "syncdown": [67, 115, 173], "syncok": [67, 115, 173], "syncup": [67, 115, 173], "timeout": [67, 100, 104, 107, 112, 115, 121, 123, 126, 131, 132, 134, 135, 160, 162, 165, 173, 181, 219, 238, 244, 252, 264, 265, 279, 284, 293, 301, 312, 324, 325, 329, 331, 334, 336, 337, 344, 354, 357, 360, 361, 376, 381, 390, 451, 460, 463, 464, 467, 468, 470, 471, 473, 476, 477, 478], "touchlin": [67, 115, 173], "touchwin": [67, 115, 173], "untouchwin": [67, 115, 173], "vline": [67, 115, 173, 478], "err": [67, 91, 115, 173, 209, 224, 265, 310, 344, 383, 414, 421, 438, 471], "__version__": [67, 115, 173, 186, 241, 383, 471, 473, 477, 478], "ncurses_vers": [67, 115, 173, 476, 478], "color": [67, 84, 86, 93, 100, 115, 152, 156, 158, 173, 185, 207, 218, 236, 250, 327, 363, 364, 370, 371, 373, 400, 423, 436, 437, 467, 468, 470, 474, 475, 478], "col": [67, 91, 115, 173, 243, 341, 473, 478], "a_altcharset": [67, 115, 173], "a_blink": [67, 91, 115, 173], "a_bold": [67, 91, 115, 173, 463], "a_dim": [67, 91, 115, 173], "a_invi": [67, 115, 173], "a_ital": [67, 115, 173, 478], "a_norm": [67, 115, 173], "a_protect": [67, 115, 173], "a_revers": [67, 91, 115, 173], "a_standout": [67, 91, 115, 173], "a_underlin": [67, 91, 115, 173], "a_horizont": [67, 115, 173], "a_left": [67, 115, 173], "a_low": [67, 115, 173], "a_right": [67, 115, 173], "a_top": [67, 115, 173], "a_vert": [67, 115, 173], "a_attribut": [67, 115, 173], "a_chartext": [67, 115, 173], "a_color": [67, 115, 173], "key_min": [67, 115, 173], "key_break": [67, 115, 173], "key_down": [67, 115, 173], "key_up": [67, 91, 115, 173], "key_left": [67, 91, 115, 173], "key_right": [67, 115, 173], "key_hom": [67, 91, 115, 173], "key_backspac": [67, 115, 173], "key_f0": [67, 115, 173], "key_fn": [67, 115, 173], "key_dl": [67, 115, 173], "key_il": [67, 115, 173], "key_dc": [67, 115, 173], "key_ic": [67, 115, 173], "key_eic": [67, 115, 173], "key_clear": [67, 115, 173], "key_eo": [67, 115, 173], "key_eol": [67, 115, 173], "key_sf": [67, 115, 173], "key_sr": [67, 115, 173], "key_npag": [67, 115, 173], "key_ppag": [67, 91, 115, 173], "key_stab": [67, 115, 173], "key_ctab": [67, 115, 173], "key_catab": [67, 115, 173], "key_ent": [67, 115, 173], "key_sreset": [67, 115, 173], "key_reset": [67, 115, 173], "key_print": [67, 115, 173], "key_ll": [67, 115, 173], "key_a1": [67, 115, 173], "key_a3": [67, 115, 173], "key_b2": [67, 115, 173], "key_c1": [67, 115, 173], "key_c3": [67, 115, 173], "key_btab": [67, 115, 173], "key_beg": [67, 115, 173], "key_cancel": [67, 115, 173], "key_clos": [67, 115, 173], "key_command": [67, 115, 173], "key_copi": [67, 115, 173], "key_creat": [67, 115, 173], "key_end": [67, 115, 173], "key_exit": [67, 115, 173], "key_find": [67, 115, 173], "key_help": [67, 115, 173], "key_mark": [67, 115, 173], "key_messag": [67, 115, 173], "key_mov": [67, 115, 173], "key_next": [67, 115, 173], "key_open": [67, 115, 173], "key_opt": [67, 115, 173], "key_previ": [67, 115, 173], "key_redo": [67, 115, 173], "key_refer": [67, 115, 173], "key_refresh": [67, 115, 173], "key_replac": [67, 115, 173], "key_restart": [67, 115, 173], "key_resum": [67, 115, 173], "key_sav": [67, 115, 173], "key_sbeg": [67, 115, 173], "key_scancel": [67, 115, 173], "key_scommand": [67, 115, 173], "key_scopi": [67, 115, 173], "key_screat": [67, 115, 173], "key_sdc": [67, 115, 173], "key_sdl": [67, 115, 173], "key_select": [67, 115, 173], "key_send": [67, 115, 173], "key_seol": [67, 115, 173], "key_sexit": [67, 115, 173], "key_sfind": [67, 115, 173], "key_shelp": [67, 115, 173], "key_shom": [67, 115, 173], "key_sic": [67, 115, 173], "key_sleft": [67, 115, 173], "key_smessag": [67, 115, 173], "key_smov": [67, 115, 173], "key_snext": [67, 115, 173], "key_sopt": [67, 115, 173], "key_sprevi": [67, 115, 173], "key_sprint": [67, 115, 173], "key_sredo": [67, 115, 173], "key_sreplac": [67, 115, 173], "key_sright": [67, 115, 173], "key_srsum": [67, 115, 173], "key_ssav": [67, 115, 173], "key_ssuspend": [67, 115, 173], "key_sundo": [67, 115, 173], "key_suspend": [67, 115, 173], "key_undo": [67, 115, 173], "key_mous": [67, 115, 173], "key_res": [67, 115, 173], "key_max": [67, 115, 173], "acs_bbss": [67, 115, 173], "acs_block": [67, 115, 173], "acs_board": [67, 115, 173], "acs_bsb": [67, 115, 173], "acs_bssb": [67, 115, 173], "acs_bsss": [67, 115, 173], "acs_bte": [67, 115, 173], "acs_bullet": [67, 115, 173], "acs_ckboard": [67, 115, 173], "acs_darrow": [67, 115, 173], "acs_degre": [67, 115, 173], "acs_diamond": [67, 115, 173], "acs_gequ": [67, 115, 173], "acs_hlin": [67, 115, 173], "acs_lantern": [67, 115, 173], "acs_larrow": [67, 115, 173], "acs_lequ": [67, 115, 173], "acs_llcorn": [67, 115, 173], "acs_lrcorn": [67, 115, 173], "acs_lte": [67, 115, 173], "acs_nequ": [67, 115, 173], "acs_pi": [67, 115, 173], "acs_plminus": [67, 91, 115, 173], "acs_plus": [67, 115, 173], "acs_rarrow": [67, 115, 173], "acs_rte": [67, 115, 173], "acs_s1": [67, 115, 173], "acs_s3": [67, 115, 173], "acs_s7": [67, 115, 173], "acs_s9": [67, 115, 173], "acs_sbb": [67, 115, 173], "acs_sbsb": [67, 115, 173], "acs_sbss": [67, 115, 173], "acs_ssbb": [67, 115, 173], "acs_ssb": [67, 115, 173], "acs_sssb": [67, 115, 173], "acs_ssss": [67, 115, 173], "acs_sterl": [67, 115, 173], "acs_tte": [67, 115, 173], "acs_uarrow": [67, 115, 173], "acs_ulcorn": [67, 91, 115, 173], "acs_urcorn": [67, 115, 173], "acs_vlin": [67, 115, 173], "buttonn_press": [67, 115, 173], "buttonn_releas": [67, 115, 173], "buttonn_click": [67, 115, 173], "buttonn_double_click": [67, 115, 173], "buttonn_triple_click": [67, 115, 173], "button_shift": [67, 115, 173], "button_ctrl": [67, 115, 173], "button_alt": [67, 115, 173], "color_black": [67, 91, 115, 173], "color_blu": [67, 115, 173], "color_cyan": [67, 115, 173], "color_green": [67, 115, 173], "color_magenta": [67, 115, 173], "color_r": [67, 91, 115, 173], "color_whit": [67, 91, 115, 173], "color_yellow": [67, 115, 173], "textpad": [67, 91, 115, 250, 463, 478], "rectangl": [67, 72, 91, 115, 173, 177], "textbox": [67, 91, 115, 463, 478], "do_command": [67, 115, 173], "gather": [67, 91, 96, 115, 117, 121, 131, 134, 136, 173, 207, 289, 304, 333, 375, 383, 451, 468, 473, 475, 476, 478], "stripspac": [67, 115, 173], "soh": [67, 115, 174], "stx": [67, 115, 174], "etx": [67, 115, 174], "eot": [67, 104, 115, 174], "enq": [67, 115, 174], "bel": [67, 115, 174, 430, 460, 461, 462, 463, 464, 470, 471], "bs": [67, 115, 173, 174, 430], "ht": [67, 115, 174, 218, 339, 379], "vt": [67, 115, 172, 174, 381, 430], "ff": [67, 115, 174, 186, 221, 315, 430], "cr": [67, 115, 173, 174, 204, 430, 475, 478], "si": [67, 72, 115, 174, 344], "dle": [67, 115, 174], "dc1": [67, 115, 174], "dc2": [67, 115, 174], "dc3": [67, 115, 174], "dc4": [67, 115, 174], "nak": [67, 115, 174], "syn": [67, 115, 174], "etb": [67, 115, 174], "em": [67, 115, 174, 315], "esc": [67, 115, 174], "fs": [67, 100, 115, 162, 174, 289, 339, 478], "gs": [67, 115, 174], "rs": [67, 115, 173, 174], "us": [67, 75, 88, 93, 94, 115, 154, 157, 174, 179, 191, 192, 198, 202, 205, 219, 262, 280, 295, 314, 315, 328, 337, 361, 381, 384, 385, 389, 390, 402, 408, 421, 423, 455, 456, 462, 478], "sp": [67, 115, 174, 231, 236], "isblank": [67, 115, 174, 478], "iscntrl": [67, 115, 174, 478], "isgraph": [67, 115, 174], "ispunct": [67, 115, 174, 478], "isxdigit": [67, 115, 174], "isctrl": [67, 115, 174], "ismeta": [67, 115, 174], "alt": [67, 115, 173, 174, 236, 243, 371, 457, 478], "controlnam": [67, 115, 174], "panel": [67, 82, 115, 173, 250, 401, 458, 478], "bottom_panel": [67, 115, 175], "new_panel": [67, 115, 175], "top_panel": [67, 115, 175], "update_panel": [67, 115, 175], "bottom": [67, 72, 83, 89, 94, 98, 115, 117, 172, 173, 175, 187, 254, 263, 289, 292, 293, 337, 364, 371, 379, 381, 384, 385, 423, 430, 456, 457, 459, 460, 478], "hide": [67, 91, 96, 106, 115, 175, 189, 190, 212, 243, 254, 288, 344, 357, 362, 363, 371, 379, 381, 395, 422, 456, 460, 464, 469, 470, 477, 478], "set_userptr": [67, 115, 175], "userptr": [67, 115, 175, 478], "architectur": [67, 101, 115, 209, 268, 275, 299, 329, 343, 350, 363, 405, 416, 423, 451, 455, 456, 460, 461, 463, 471, 473, 477, 478], "node": [67, 115, 228, 231, 255, 260, 269, 289, 290, 292, 299, 333, 337, 348, 371, 372, 393, 406, 407, 408, 410, 447, 451, 457, 460, 462, 463, 464, 467, 470, 474, 475, 476, 477, 478], "python_build": [67, 115, 299, 478], "python_compil": [67, 115, 299], "python_branch": [67, 115, 299, 478], "python_implement": [67, 115, 299], "python_revis": [67, 115, 299, 478], "python_vers": [67, 115, 299], "python_version_tupl": [67, 115, 299], "system_alia": [67, 115, 299], "java_v": [67, 115, 299], "win32_ver": [67, 115, 299, 478], "win32_edit": [67, 115, 299, 478], "win32_is_iot": [67, 115, 299, 478], "mac_ver": [67, 115, 299, 478], "libc_ver": [67, 115, 299, 478], "freedesktop_os_releas": [67, 115, 299, 467, 478], "errorcod": [67, 115, 208, 269, 310], "eperm": [67, 115, 208, 209, 471, 478], "enoent": [67, 115, 208, 209, 324, 471, 478], "esrch": [67, 115, 208, 209], "eio": [67, 115, 208], "enxio": [67, 115, 208], "e2big": [67, 115, 208], "enoexec": [67, 115, 208], "ebadf": [67, 115, 208, 324, 474, 477, 478], "echild": [67, 115, 208, 209], "eagain": [67, 115, 208, 209, 211, 289], "enomem": [67, 115, 208, 478], "eacc": [67, 115, 208, 209, 211, 246, 471, 478], "efault": [67, 115, 208], "enotblk": [67, 115, 208], "ebusi": [67, 115, 208], "eexist": [67, 115, 208, 209, 289, 478], "exdev": [67, 115, 208, 289], "enodev": [67, 115, 208], "enotdir": [67, 115, 208, 209], "eisdir": [67, 115, 208, 209], "einval": [67, 115, 208, 289, 478], "enfil": [67, 115, 208], "emfil": [67, 115, 208, 478], "enotti": [67, 115, 208, 478], "etxtbsi": [67, 115, 208], "efbig": [67, 115, 208], "enospc": [67, 115, 208], "espip": [67, 115, 208], "erof": [67, 115, 208], "emlink": [67, 115, 208], "epip": [67, 115, 208, 209, 329], "erang": [67, 115, 208], "edeadlk": [67, 115, 208], "enametoolong": [67, 115, 208], "enolck": [67, 115, 208], "enosi": [67, 115, 208, 478], "enotempti": [67, 115, 208], "eloop": [67, 115, 208], "ewouldblock": [67, 115, 208, 209], "enomsg": [67, 115, 208], "eidrm": [67, 115, 208], "echrng": [67, 115, 208], "el2nsync": [67, 115, 208], "el3hlt": [67, 115, 208], "el3rst": [67, 115, 208], "elnrng": [67, 115, 208], "eunatch": [67, 115, 208], "enocsi": [67, 115, 208], "el2hlt": [67, 115, 208], "ebad": [67, 115, 208], "ebadr": [67, 115, 208], "exful": [67, 115, 208], "enoano": [67, 115, 208], "ebadrqc": [67, 115, 208], "ebadslt": [67, 115, 208], "edeadlock": [67, 115, 208], "ebfont": [67, 115, 208], "enostr": [67, 115, 208], "enodata": [67, 115, 208, 289], "etim": [67, 115, 208], "enosr": [67, 115, 208], "enonet": [67, 115, 208], "enopkg": [67, 115, 208], "eremot": [67, 115, 208], "enolink": [67, 115, 208], "eadv": [67, 115, 208], "esrmnt": [67, 115, 208], "ecomm": [67, 115, 208], "eproto": [67, 115, 208], "emultihop": [67, 115, 208], "edotdot": [67, 115, 208], "ebadmsg": [67, 115, 208], "eoverflow": [67, 115, 208], "enotuniq": [67, 115, 208], "ebadfd": [67, 115, 208], "eremchg": [67, 115, 208], "elibacc": [67, 115, 208], "elibbad": [67, 115, 208], "elibscn": [67, 115, 208], "elibmax": [67, 115, 208], "elibexec": [67, 115, 208], "eilseq": [67, 115, 208], "erestart": [67, 115, 208], "estrpip": [67, 115, 208], "euser": [67, 115, 208], "enotsock": [67, 115, 208], "edestaddrreq": [67, 115, 208], "emsgsiz": [67, 115, 208], "eprototyp": [67, 115, 208], "enoprotoopt": [67, 115, 208], "eprotonosupport": [67, 115, 208], "esocktnosupport": [67, 115, 208], "eopnotsupp": [67, 115, 208], "epfnosupport": [67, 115, 208], "eafnosupport": [67, 115, 208], "eaddrinus": [67, 115, 208], "eaddrnotavail": [67, 115, 208], "enetdown": [67, 115, 208], "enetunreach": [67, 115, 208, 478], "enetreset": [67, 115, 208], "econnabort": [67, 115, 208, 209], "econnreset": [67, 115, 208, 209, 478], "enobuf": [67, 115, 130, 208, 478], "eisconn": [67, 83, 115, 208], "enotconn": [67, 115, 208, 472], "eshutdown": [67, 115, 208, 209], "etoomanyref": [67, 115, 208], "etimedout": [67, 115, 208, 209, 463], "econnrefus": [67, 115, 208, 209], "ehostdown": [67, 115, 208], "ehostunreach": [67, 115, 208], "ealreadi": [67, 115, 208, 209], "einprogress": [67, 83, 115, 208, 209], "estal": [67, 115, 208], "euclean": [67, 115, 208], "enotnam": [67, 115, 208], "enavail": [67, 115, 208], "eisnam": [67, 115, 208], "eremoteio": [67, 115, 208], "edquot": [67, 115, 208], "eqful": [67, 115, 208, 478], "enotcap": [67, 115, 208, 209, 478], "foreign": [67, 102, 115, 163, 250, 328, 336, 353], "cdll": [67, 115, 172, 462, 476, 478], "oledl": [67, 115, 172, 463, 478], "windll": [67, 115, 172, 463, 478], "pydll": [67, 115, 172, 478], "_handl": [67, 115, 172], "_name": [67, 92, 115, 172, 177, 192, 201, 478], "libraryload": [67, 115, 172], "loadlibrari": [67, 115, 172], "_funcptr": [67, 115, 172], "restyp": [67, 115, 172, 462], "argtyp": [67, 115, 119, 172, 478], "errcheck": [67, 115, 172], "cfunctyp": [67, 115, 172, 478], "winfunctyp": [67, 115, 172, 478], "pyfunctyp": [67, 115, 172], "addressof": [67, 115, 139, 172], "byref": [67, 115, 172, 463], "create_string_buff": [67, 115, 139, 172, 462], "create_unicode_buff": [67, 115, 139, 172, 478], "dllcanunloadnow": [67, 115, 172], "dllgetclassobject": [67, 115, 172], "find_librari": [67, 115, 172, 474, 478], "find_msvcrt": [67, 115, 172], "formaterror": [67, 115, 172, 267, 281], "get_errno": [67, 115, 139, 172, 463], "get_last_error": [67, 115, 139, 172, 463], "memmov": [67, 115, 172, 463], "set_errno": [67, 115, 139, 172, 463], "set_last_error": [67, 115, 139, 172, 463], "string_at": [67, 115, 139, 172, 210, 471], "wstring_at": [67, 115, 139, 172], "_cdata": [67, 115, 172, 478], "from_buff": [67, 115, 172, 463, 478], "from_buffer_copi": [67, 115, 172, 463, 478], "from_address": [67, 115, 172], "from_param": [67, 115, 172, 478], "in_dll": [67, 115, 172], "_b_base_": [67, 115, 172], "_b_needsfree_": [67, 115, 172], "_object": [67, 115, 172], "_simplecdata": [67, 115, 172], "c_byte": [67, 115, 172, 478], "c_char": [67, 115, 172, 279], "c_char_p": [67, 115, 172, 462], "c_doubl": [67, 115, 172, 279, 462, 478], "c_longdoubl": [67, 115, 172, 478], "c_float": [67, 115, 172, 462], "c_int": [67, 115, 172, 279, 462, 478], "c_int8": [67, 115, 172], "c_int16": [67, 115, 172], "c_int32": [67, 115, 172], "c_int64": [67, 115, 172], "c_long": [67, 115, 172, 340], "c_longlong": [67, 115, 172], "c_short": [67, 115, 172, 279], "c_size_t": [67, 115, 172], "c_ssize_t": [67, 115, 172, 470], "c_time_t": [67, 115, 172, 478], "c_ubyt": [67, 115, 172, 478], "c_uint": [67, 115, 172], "c_uint8": [67, 115, 172, 478], "c_uint16": [67, 115, 172], "c_uint32": [67, 115, 172], "c_uint64": [67, 115, 172], "c_ulong": [67, 115, 172], "c_ulonglong": [67, 115, 172], "c_ushort": [67, 115, 172], "c_void_p": [67, 115, 172], "c_wchar": [67, 115, 172], "c_wchar_p": [67, 115, 172, 478], "c_bool": [67, 115, 172, 463], "hresult": [67, 115, 172], "py_object": [67, 115, 172, 462, 478], "bigendianunion": [67, 115, 172, 478], "littleendianunion": [67, 115, 172, 478], "bigendianstructur": [67, 115, 172, 340, 478], "littleendianstructur": [67, 115, 172, 478], "_fields_": [67, 115, 172, 279, 340, 478], "_pack_": [67, 115, 172], "_anonymous_": [67, 115, 172, 478], "_length_": [67, 115, 172, 478], "_type_": [67, 115, 172], "_pointer": [67, 115, 172], "active_count": [67, 160, 243, 279, 360, 463, 467, 478], "current_thread": [67, 83, 160, 279, 334, 360, 467, 478], "excepthook": [67, 139, 149, 160, 311, 348, 357, 360, 445, 458, 467, 476, 477, 478], "__excepthook__": [67, 160, 311, 348, 360, 445, 467, 478], "get_id": [67, 112, 160, 260, 329, 347, 360, 361, 471], "get_native_id": [67, 112, 160, 360, 476, 478], "main_thread": [67, 160, 360, 472], "settrace_all_thread": [67, 160, 360, 469, 478], "gettrac": [67, 160, 311, 348, 360, 445, 463, 467, 478], "setprofile_all_thread": [67, 160, 360, 469, 478], "getprofil": [67, 160, 311, 348, 360, 445, 463, 467, 478], "stack_siz": [67, 112, 160, 360, 462, 478], "timeout_max": [67, 112, 160, 360], "setnam": [67, 160, 360, 467, 478], "native_id": [67, 160, 360, 476, 478], "is_al": [67, 160, 279, 360, 463, 477, 478], "isdaemon": [67, 160, 360, 463, 467, 478], "setdaemon": [67, 160, 360, 463, 467, 478], "rlock": [67, 160, 165, 279, 463, 467, 470, 473, 478], "wait_for": [67, 121, 131, 134, 135, 136, 160, 279, 360, 468, 476, 477, 478], "notify_al": [67, 135, 160, 360, 467, 478], "semaphor": [67, 83, 96, 112, 121, 160, 208, 279, 289, 348, 357, 447, 463, 470, 471, 476, 477, 478], "boundedsemaphor": [67, 121, 160, 279, 360, 471, 476, 478], "is_set": [67, 135, 160, 360, 467, 478], "timer": [67, 91, 96, 160, 181, 208, 210, 279, 324, 329, 361, 362, 364, 371, 379, 446, 459, 460, 463, 471, 473, 474, 475, 478], "barrier": [67, 121, 160, 279, 379, 468, 470, 478], "n_wait": [67, 135, 160, 360], "brokenbarriererror": [67, 121, 135, 160, 360, 468, 470], "exchang": [67, 71, 123, 160, 172, 208, 231, 274, 289, 337, 343, 353, 360, 463, 464, 470, 471, 478], "synchron": [67, 112, 120, 136, 160, 165, 174, 180, 182, 208, 222, 246, 254, 274, 289, 326, 329, 334, 337, 357, 360, 364, 384, 423, 447, 463, 469, 470, 473, 475, 478], "pool": [67, 72, 83, 121, 127, 160, 162, 219, 257, 280, 289, 314, 458, 460, 463, 464, 470, 471, 472, 474, 478], "worker": [67, 100, 131, 159, 160, 162, 228, 312, 360, 462, 463, 464, 473, 477, 478], "authkey": [67, 160, 279, 280], "processerror": [67, 160, 279], "buffertooshort": [67, 160, 279], "authenticationerror": [67, 160, 279], "qsize": [67, 131, 160, 279, 312], "put_nowait": [67, 100, 131, 160, 265, 279, 312], "get_nowait": [67, 131, 160, 257, 279, 312], "join_thread": [67, 160, 183, 279, 357, 478], "cancel_join_thread": [67, 160, 279], "simplequeu": [67, 160, 265, 279, 340, 475, 477, 478], "joinablequeu": [67, 160, 279, 473, 478], "task_don": [67, 131, 160, 279, 312, 462, 473, 478], "active_children": [67, 160, 279], "current_process": [67, 100, 160, 279], "parent_process": [67, 160, 279, 478], "freeze_support": [67, 160, 279], "get_all_start_method": [67, 160, 279, 472, 478], "get_context": [67, 123, 136, 160, 162, 279, 469, 472, 478], "get_start_method": [67, 160, 279, 472], "set_execut": [67, 160, 279, 478], "set_forkserver_preload": [67, 160, 279, 478], "set_start_method": [67, 160, 279, 469, 472], "recv": [67, 100, 104, 123, 160, 279, 323, 325, 329, 333, 334, 337, 357, 364, 464, 473, 478], "poll": [67, 83, 123, 129, 134, 160, 279, 289, 325, 329, 334, 337, 338, 344, 461, 463, 470, 471, 473, 477, 478], "send_byt": [67, 160, 279], "recv_byt": [67, 160, 279], "recv_bytes_into": [67, 160, 279], "primit": [67, 74, 83, 84, 112, 120, 121, 132, 133, 160, 172, 173, 183, 254, 295, 304, 315, 324, 325, 329, 337, 360, 447, 467, 471, 472, 475, 478], "sharedctyp": [67, 160, 473, 478], "rawarray": [67, 160, 279], "rawvalu": [67, 160, 279], "basemanag": [67, 160, 279, 280, 478], "get_serv": [67, 160, 279], "syncmanag": [67, 160, 279, 478], "remot": [67, 99, 100, 118, 123, 130, 160, 166, 208, 238, 241, 244, 263, 264, 265, 333, 337, 354, 370, 390, 398, 400, 404, 409, 413, 414, 459, 470, 473, 478], "baseproxi": [67, 160, 279, 478], "_callmethod": [67, 160, 279], "_getvalu": [67, 160, 279], "apply_async": [67, 160, 279, 463], "map_async": [67, 160, 279, 463, 471], "imap": [67, 79, 109, 160, 190, 244, 279, 301, 389, 460, 461, 476, 478], "imap_unord": [67, 160, 279, 478], "starmap_async": [67, 160, 279, 471], "asyncresult": [67, 160, 279], "deliver_challeng": [67, 160, 279], "answer_challeng": [67, 160, 279], "last_accept": [67, 160, 279], "get_logg": [67, 160, 279], "log_to_stderr": [67, 160, 279, 478], "threadpool": [67, 160, 279, 478], "guidelin": [67, 74, 87, 98, 160, 243, 357, 457, 458, 462, 478], "spawn": [67, 100, 121, 127, 129, 134, 135, 139, 160, 162, 253, 289, 305, 334, 357, 360, 386, 472, 476, 477, 478], "forkserv": [67, 160, 472, 478], "shared_memori": [67, 160, 250, 348, 476, 478], "sharedmemori": [67, 160, 279, 280, 478], "sharedmemorymanag": [67, 160, 280, 478], "shareablelist": [67, 160, 280, 478], "shm": [67, 160, 280, 478], "executor": [67, 100, 122, 123, 132, 160, 470, 473, 477, 478], "submit": [67, 91, 100, 107, 136, 148, 160, 162, 243, 279, 421, 457, 464, 470, 473, 474, 475, 476, 478], "threadpoolexecutor": [67, 83, 122, 123, 160, 279, 360, 468, 470, 473, 474, 475, 476, 477, 478], "processpoolexecutor": [67, 83, 122, 123, 160, 279, 360, 470, 473, 475, 476, 477, 478], "add_done_callback": [67, 126, 136, 160, 162, 475, 478], "set_running_or_notify_cancel": [67, 160, 162], "set_result": [67, 126, 130, 136, 160, 162, 478], "set_except": [67, 122, 126, 136, 139, 160, 162, 172, 474, 478], "as_complet": [67, 121, 126, 136, 160, 162, 469, 476, 478], "cancellederror": [67, 121, 124, 126, 132, 135, 136, 160, 162, 476, 478], "brokenexecutor": [67, 160, 162], "invalidstateerror": [67, 124, 126, 136, 160, 162, 478], "brokenthreadpool": [67, 160, 162], "brokenprocesspool": [67, 160, 162], "completedprocess": [67, 160, 344, 473, 478], "returncod": [67, 129, 130, 134, 160, 344, 473, 476, 478], "check_returncod": [67, 160, 344], "subprocesserror": [67, 160, 344, 478], "timeoutexpir": [67, 160, 344], "calledprocesserror": [67, 160, 344, 464, 473, 478], "send_sign": [67, 127, 130, 134, 160, 344, 463, 478], "startupinfo": [67, 160, 344, 461, 475, 478], "dwflag": [67, 160, 344], "hstdinput": [67, 160, 344], "hstdoutput": [67, 160, 344], "hstderror": [67, 160, 344], "wshowwindow": [67, 160, 344], "lpattributelist": [67, 160, 344, 475], "std_input_handl": [67, 160, 344], "std_output_handl": [67, 160, 344], "std_error_handl": [67, 160, 344], "sw_hide": [67, 160, 344], "startf_usestdhandl": [67, 160, 344], "startf_useshowwindow": [67, 160, 344], "create_new_consol": [67, 160, 344], "create_new_process_group": [67, 134, 160, 344], "above_normal_priority_class": [67, 160, 344], "below_normal_priority_class": [67, 160, 344], "high_priority_class": [67, 160, 344], "idle_priority_class": [67, 160, 344], "normal_priority_class": [67, 160, 344], "realtime_priority_class": [67, 160, 344], "create_no_window": [67, 160, 344], "detached_process": [67, 160, 344], "create_default_error_mod": [67, 160, 344], "create_breakaway_from_job": [67, 160, 344], "check_cal": [67, 160, 344], "check_output": [67, 160, 183, 189, 344, 464, 472, 478], "sh": [67, 83, 100, 160, 297, 305, 327, 457, 478], "pipelin": [67, 160, 250, 346, 457, 478], "popen2": [67, 160, 461, 463], "popen3": [67, 160], "getstatusoutput": [67, 160, 344, 472, 478], "getoutput": [67, 160, 344, 478], "vfork": [67, 160, 478], "enterab": [67, 160, 321, 471], "lifoqueu": [67, 121, 131, 160, 312, 340, 463, 478], "priorityqueu": [67, 121, 131, 160, 312, 340, 463, 478], "old_valu": [67, 160, 166], "copy_context": [67, 160, 166], "locktyp": [67, 112, 160], "start_new_thread": [67, 112, 139, 160, 478], "interrupt_main": [67, 112, 160, 467, 478], "allocate_lock": [67, 112, 160], "interprocess": [67, 130, 250, 279, 333], "runner": [67, 100, 120, 121, 189, 383, 395, 461, 464, 468, 478], "get_loop": [67, 123, 126, 132, 475, 478], "keyboard": [67, 80, 85, 91, 173, 243, 329, 344, 371, 379, 383, 436, 463, 478], "task": [67, 72, 84, 86, 88, 89, 94, 98, 99, 103, 106, 112, 120, 122, 124, 126, 127, 131, 132, 133, 135, 163, 165, 166, 197, 203, 232, 243, 255, 263, 265, 267, 279, 289, 292, 295, 304, 312, 318, 334, 336, 344, 360, 383, 389, 415, 425, 447, 451, 457, 459, 463, 464, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478], "create_task": [67, 121, 122, 123, 125, 126, 127, 131, 135, 136, 468, 473, 475, 476, 478], "taskgroup": [67, 121, 136, 468, 478], "eager": [67, 354, 422, 469, 475, 478], "eager_task_factori": [67, 136, 469, 478], "create_eager_task_factori": [67, 136, 469], "shield": [67, 121, 476, 478], "reschedul": [67, 123, 136], "expir": [67, 123, 136, 208, 239, 240, 252, 279, 321, 325, 329, 331, 333, 335, 337, 344, 360, 361, 390, 471, 478], "timeout_at": [67, 136, 478], "to_thread": [67, 121, 136, 477, 478], "run_coroutine_threadsaf": [67, 121, 122, 136, 467, 473, 474, 478], "current_task": [67, 121, 125, 136, 469, 475, 477, 478], "all_task": [67, 121, 125, 136, 475, 477, 478], "iscoroutin": [67, 126, 136, 251, 311, 469, 473, 478], "remove_done_callback": [67, 126, 136, 478], "get_stack": [67, 136, 141, 181, 478], "print_stack": [67, 136, 263, 311, 376, 473, 478], "get_coro": [67, 136, 476, 478], "get_nam": [67, 136, 260, 347, 476, 478], "set_nam": [67, 92, 123, 136, 476, 478], "uncancel": [67, 136, 468, 478], "open_connect": [67, 121, 123, 130, 133, 473, 475, 478], "start_serv": [67, 121, 123, 130, 133, 166, 360, 475, 478], "open_unix_connect": [67, 121, 133], "start_unix_serv": [67, 121, 123, 133], "readexact": [67, 133, 474, 478], "readuntil": [67, 133, 473, 474, 478], "at_eof": [67, 133], "can_write_eof": [67, 127, 130, 133], "write_eof": [67, 127, 130, 133, 337, 478], "transport": [67, 120, 123, 126, 127, 133, 134, 166, 190, 194, 197, 202, 208, 331, 337, 413, 414, 459, 473, 474, 475, 478], "get_extra_info": [67, 127, 130, 133, 166, 476, 478], "drain": [67, 130, 133, 135, 337, 470, 478], "start_tl": [67, 123, 127, 133, 468, 475, 478], "is_clos": [67, 123, 127, 130, 133, 473, 474, 475, 478], "wait_clos": [67, 123, 133, 475, 478], "tcp": [67, 79, 83, 99, 100, 104, 121, 123, 127, 253, 265, 279, 331, 333, 334, 337, 357, 463, 464, 474, 475, 478], "create_subprocess_exec": [67, 121, 123, 129, 134, 344, 476, 478], "create_subprocess_shel": [67, 121, 123, 134, 476, 478], "maxsiz": [67, 84, 89, 92, 109, 131, 156, 216, 221, 222, 257, 279, 299, 311, 312, 340, 348, 357, 364, 423, 445, 465, 470, 476, 478], "lifo": [67, 121, 156, 312, 340, 383], "queueempti": [67, 131], "queueful": [67, 131], "sendfilenotavailableerror": [67, 123, 124], "incompletereaderror": [67, 124, 133, 478], "limitoverrunerror": [67, 124, 133, 478], "get_running_loop": [67, 123, 126, 127, 130, 133, 136, 475, 478], "get_event_loop": [67, 123, 127, 129, 469, 473, 474, 475, 478], "set_event_loop": [67, 123, 127, 128, 129, 132, 476, 478], "new_event_loop": [67, 123, 127, 129, 132, 476], "run_until_complet": [67, 123, 127, 473, 474, 476, 478], "run_forev": [67, 123, 127, 478], "is_run": [67, 123, 127], "shutdown_asyncgen": [67, 123, 127, 348, 425, 474, 478], "shutdown_default_executor": [67, 123, 132, 477, 478], "call_soon": [67, 122, 126, 127, 130, 133, 381, 475, 478], "call_soon_threadsaf": [67, 122, 123, 127, 475, 478], "call_lat": [67, 127, 475, 478], "call_at": [67, 122, 123, 127, 475], "create_futur": [67, 123, 125, 126, 127, 130, 473, 474, 478], "set_task_factori": [67, 123, 127, 136, 473, 478], "get_task_factori": [67, 123, 127, 473, 478], "create_connect": [67, 123, 125, 127, 130, 133, 333, 337, 463, 464, 468, 470, 473, 475, 476, 478], "create_datagram_endpoint": [67, 123, 127, 130, 468, 474, 475, 476, 477, 478], "create_unix_connect": [67, 123, 127, 128, 130, 133, 478], "create_serv": [67, 123, 127, 130, 133, 333, 473, 474, 475, 476, 478], "create_unix_serv": [67, 123, 127, 128, 130, 133, 475, 478], "connect_accepted_socket": [67, 123, 127, 130, 467, 474, 478], "tls": [67, 127, 133, 219, 238, 250, 256, 265, 301, 323, 331, 333, 357, 451, 455, 459, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478], "add_read": [67, 123, 127, 128, 130, 133, 478], "remove_read": [67, 123, 127], "add_writ": [67, 123, 127, 128, 478], "remove_writ": [67, 123, 127], "sock_recv": [67, 123, 127, 475, 478], "sock_recv_into": [67, 123, 127, 475, 478], "sock_recvfrom": [67, 123, 127, 468, 478], "sock_recvfrom_into": [67, 123, 127, 468, 478], "sock_sendal": [67, 123, 127, 475, 478], "sock_sendto": [67, 123, 127, 468, 478], "sock_connect": [67, 123, 127, 473, 478], "sock_accept": [67, 123, 127, 475, 478], "sock_sendfil": [67, 123, 127, 475, 478], "dns": [67, 100, 125, 127, 154, 255, 265, 333, 337, 393, 473, 478], "getaddrinfo": [67, 107, 123, 127, 139, 333, 421, 473, 474, 475, 478], "getnameinfo": [67, 123, 127, 139, 333, 421, 475, 478], "connect_read_pip": [67, 123, 127, 128, 130, 134, 478], "connect_write_pip": [67, 123, 127, 128, 130, 134, 478], "add_signal_handl": [67, 123, 127, 128, 478], "remove_signal_handl": [67, 123, 127, 128], "run_in_executor": [67, 122, 123, 127, 136, 477, 478], "set_default_executor": [67, 123, 127, 468, 476, 478], "set_exception_handl": [67, 123, 127], "get_exception_handl": [67, 123, 127, 473, 474, 478], "default_exception_handl": [67, 123, 127], "call_exception_handl": [67, 123, 127], "get_debug": [67, 123, 127, 223, 311, 473], "set_debug": [67, 122, 123, 127, 223, 311, 473], "subprocess_exec": [67, 123, 127, 128, 129, 134, 478], "subprocess_shel": [67, 123, 127, 128, 130, 134], "timerhandl": [67, 123, 478], "serve_forev": [67, 123, 130, 133, 166, 241, 252, 279, 329, 334, 402, 414, 415, 462, 463, 471, 475, 478], "is_serv": [67, 123, 475, 478], "selectoreventloop": [67, 123, 128, 129, 134, 468, 478], "proactoreventloop": [67, 123, 128, 129, 134, 468, 476, 478], "abstracteventloop": [67, 123, 125, 129, 477, 478], "hello": [67, 72, 74, 78, 84, 85, 100, 109, 111, 118, 126, 130, 132, 133, 134, 136, 143, 148, 172, 180, 222, 226, 231, 236, 274, 279, 284, 287, 295, 297, 300, 333, 334, 336, 337, 340, 355, 357, 359, 360, 363, 373, 381, 383, 384, 402, 430, 435, 437, 438, 441, 456, 470, 472, 473, 476, 477, 478], "world": [67, 72, 75, 78, 84, 91, 97, 100, 111, 126, 130, 133, 136, 143, 148, 165, 172, 179, 222, 226, 231, 244, 253, 274, 279, 287, 288, 295, 297, 306, 321, 333, 334, 336, 337, 340, 355, 357, 359, 360, 363, 373, 379, 383, 402, 405, 421, 430, 435, 438, 441, 465, 473, 474, 478], "sigterm": [67, 130, 134, 279, 329, 344, 463, 478], "isfutur": [67, 126, 478], "ensure_futur": [67, 126, 136, 473, 474, 478], "wrap_futur": [67, 126, 478], "basetransport": [67, 130, 133, 476], "writetransport": [67, 123, 130, 478], "readtransport": [67, 123, 130, 475, 478], "datagramtransport": [67, 130, 478], "subprocesstransport": [67, 123, 130], "set_protocol": [67, 127, 130, 478], "get_protocol": [67, 127, 130, 478], "is_read": [67, 127, 130, 475, 478], "pause_read": [67, 127, 130, 475, 478], "resume_read": [67, 127, 130, 475, 478], "get_write_buffer_s": [67, 127, 130], "get_write_buffer_limit": [67, 127, 130, 473, 478], "set_write_buffer_limit": [67, 127, 130], "datagram": [67, 123, 127, 265, 334, 337, 447, 468, 478], "sendto": [67, 123, 127, 130, 139, 333, 334, 473, 478], "get_pid": [67, 127, 130], "get_pipe_transport": [67, 127, 130], "get_returncod": [67, 127, 130], "baseprotocol": [67, 130], "bufferedprotocol": [67, 130, 475, 476, 478], "datagramprotocol": [67, 130, 468], "subprocessprotocol": [67, 123], "connection_mad": [67, 123, 127, 130, 478], "connection_lost": [67, 127, 130, 478], "pause_writ": [67, 127, 130], "resume_writ": [67, 127, 130], "data_receiv": [67, 127, 130, 478], "eof_receiv": [67, 127, 130], "get_buff": [67, 127, 130, 346, 403], "buffer_upd": [67, 127, 130], "datagram_receiv": [67, 127, 130], "error_receiv": [67, 127, 130], "pipe_data_receiv": [67, 127, 130, 478], "pipe_connection_lost": [67, 127, 130], "process_exit": [67, 127, 130, 478], "udp": [67, 99, 123, 127, 265, 333, 334, 357, 464, 468, 474, 475, 476, 477, 478], "get_event_loop_polici": [67, 123, 127, 129], "set_event_loop_polici": [67, 123, 127, 129], "abstracteventlooppolici": [67, 127, 129, 469, 478], "get_child_watch": [67, 129, 469, 478], "set_child_watch": [67, 128, 129, 469, 478], "defaulteventlooppolici": [67, 123, 129, 478], "windowsselectoreventlooppolici": [67, 129, 475, 478], "windowsproactoreventlooppolici": [67, 129, 475, 478], "abstractchildwatch": [67, 129, 469, 478], "add_child_handl": [67, 129], "remove_child_handl": [67, 129], "attach_loop": [67, 129, 478], "threadedchildwatch": [67, 129, 134, 469], "multiloopchildwatch": [67, 129, 469, 478], "safechildwatch": [67, 129, 469, 478], "fastchildwatch": [67, 129, 469, 478], "pidfdchildwatch": [67, 129, 469, 477, 478], "_register_task": [67, 125, 478], "_unregister_task": [67, 125, 478], "_enter_task": [67, 125, 478], "_leave_task": [67, 125, 478], "multithread": [67, 123, 134, 136, 231, 262, 279, 344, 354, 402, 460, 477, 478], "herror": [67, 333], "gaierror": [67, 333, 478], "af_unix": [67, 123, 128, 279, 333, 334, 478], "af_inet6": [67, 123, 333, 478], "sock_stream": [67, 100, 104, 123, 265, 333, 334, 337, 357, 464, 475], "sock_dgram": [67, 123, 265, 333, 334, 464], "sock_raw": [67, 333], "sock_rdm": [67, 333], "sock_seqpacket": [67, 333], "sock_cloexec": [67, 333, 475, 478], "sock_nonblock": [67, 333, 475, 478], "somaxconn": [67, 333, 473], "af_can": [67, 333, 478], "pf_can": [67, 333, 471], "can_bcm": [67, 333, 472], "can_raw_fd_fram": [67, 333, 473, 478], "can_raw_join_filt": [67, 333, 477, 478], "can_isotp": [67, 333, 478], "can_j1939": [67, 333, 477, 478], "af_divert": [67, 333], "pf_divert": [67, 333], "af_packet": [67, 333, 478], "pf_packet": [67, 333], "eth_p_al": [67, 333, 478], "af_rd": [67, 333], "pf_rds": [67, 333, 471], "sol_rd": [67, 333], "sio_rcval": [67, 333], "sio_keepalive_v": [67, 333], "sio_loopback_fast_path": [67, 333, 474, 478], "af_alg": [67, 333, 474, 478], "sol_alg": [67, 333, 474], "af_vsock": [67, 333, 475, 478], "ioctl_vm_sockets_get_local_cid": [67, 333], "af_link": [67, 333, 472], "has_ipv6": [67, 333], "bdaddr_ani": [67, 333], "bdaddr_loc": [67, 333], "hci_filt": [67, 333], "hci_time_stamp": [67, 333], "hci_data_dir": [67, 333], "af_qipcrtr": [67, 333, 478], "scm_creds2": [67, 333, 478], "local_cr": [67, 333, 478], "local_creds_persist": [67, 333, 478], "so_incoming_cpu": [67, 333, 478], "af_hyperv": [67, 333], "hv_protocol_raw": [67, 333], "hvsocket_connect_timeout": [67, 333], "hvsocket_connect_timeout_max": [67, 333], "hvsocket_connected_suspend": [67, 333], "hvsocket_address_flag_passthru": [67, 333], "hv_guid_zero": [67, 333], "hv_guid_wildcard": [67, 333], "hv_guid_broadcast": [67, 333], "hv_guid_children": [67, 333], "hv_guid_loopback": [67, 333], "hv_guid_par": [67, 333], "ethertype_arp": [67, 333], "ethertype_ip": [67, 333], "ethertype_ipv6": [67, 333], "ethertype_vlan": [67, 333], "socketpair": [67, 123, 130, 133, 329, 333, 461, 475, 478], "has_dualstack_ipv6": [67, 333, 476, 478], "fromfd": [67, 324, 333], "fromshar": [67, 333, 475], "sockettyp": [67, 333], "getfqdn": [67, 331, 333, 478], "gethostbynam": [67, 139, 333], "gethostbyname_ex": [67, 333, 478], "gethostnam": [67, 100, 104, 139, 289, 333], "gethostbyaddr": [67, 139, 289, 333, 478], "getprotobynam": [67, 333], "getservbynam": [67, 139, 333, 478], "getservbyport": [67, 139, 333, 461, 478], "ntohl": [67, 104, 333], "ntoh": [67, 104, 333, 467, 475, 478], "htonl": [67, 104, 333], "hton": [67, 104, 333, 467, 475, 478], "inet_aton": [67, 333, 476, 477, 478], "inet_ntoa": [67, 333], "inet_pton": [67, 123, 255, 333, 472, 476, 477, 478], "inet_ntop": [67, 333, 472], "cmsg_len": [67, 333, 478], "cmsg_space": [67, 333, 478], "getdefaulttimeout": [67, 333], "setdefaulttimeout": [67, 107, 333], "sethostnam": [67, 139, 333, 471], "if_nameindex": [67, 333, 476, 478], "if_nametoindex": [67, 333, 476, 478], "if_indextonam": [67, 333, 476, 478], "send_fd": [67, 333, 477, 478], "recv_fd": [67, 333, 477], "connect_ex": [67, 83, 333, 457], "getpeernam": [67, 130, 166, 333, 337], "getsocknam": [67, 130, 133, 333, 337, 478], "getsockopt": [67, 130, 333, 337, 464, 474], "getblock": [67, 333, 475, 478], "gettimeout": [67, 333, 337], "ioctl": [67, 118, 139, 250, 291, 333, 386, 461, 463, 474, 478], "recvfrom": [67, 123, 333, 364, 473, 478], "recvmsg": [67, 333, 471, 473], "recvmsg_into": [67, 333, 471], "recvfrom_into": [67, 123, 333, 462, 464], "recv_into": [67, 123, 333, 337, 462, 464, 478], "sendal": [67, 123, 333, 334, 337, 473, 478], "sendmsg": [67, 139, 333, 469, 471, 473, 478], "sendmsg_afalg": [67, 333, 474], "setblock": [67, 104, 289, 325, 333, 337, 478], "settimeout": [67, 252, 333, 337, 390, 460, 478], "setsockopt": [67, 333, 337, 464, 474], "proto": [67, 123, 133, 296, 333, 381, 390], "create_default_context": [67, 123, 337, 390, 464, 472, 478], "sslerror": [67, 337, 470], "sslzeroreturnerror": [67, 337], "sslwantreaderror": [67, 337, 473, 478], "sslwantwriteerror": [67, 337, 473, 478], "sslsyscallerror": [67, 337], "ssleoferror": [67, 337, 478], "sslcertverificationerror": [67, 337, 475, 478], "verify_cod": [67, 337], "verify_messag": [67, 337], "certificateerror": [67, 337], "rand_byt": [67, 337, 469, 471, 478], "rand_status": [67, 337, 478], "rand_add": [67, 337, 478], "cert_time_to_second": [67, 337, 473, 478], "get_server_certif": [67, 337, 467, 471, 478], "der_cert_to_pem_cert": [67, 337], "pem_cert_to_der_cert": [67, 337], "get_default_verify_path": [67, 337, 472], "enum_certif": [67, 337, 472, 478], "enum_crl": [67, 337, 472, 478], "cert_non": [67, 337, 478], "cert_opt": [67, 337, 478], "cert_requir": [67, 337, 478], "verifymod": [67, 337], "verify_default": [67, 337, 472], "verify_crl_check_leaf": [67, 337, 472], "verify_crl_check_chain": [67, 337, 472], "verify_x509_strict": [67, 337, 472], "verify_allow_proxy_cert": [67, 337, 478], "verify_x509_trusted_first": [67, 337], "verify_x509_partial_chain": [67, 337, 467], "verifyflag": [67, 337], "protocol_tl": [67, 337, 467, 478], "protocol_tls_cli": [67, 337, 467, 478], "protocol_tls_serv": [67, 337, 467, 478], "protocol_sslv23": [67, 219, 337, 467, 478], "protocol_sslv3": [67, 337, 467, 478], "protocol_tlsv1": [67, 337, 467], "protocol_tlsv1_1": [67, 337, 467, 472], "protocol_tlsv1_2": [67, 337, 467, 472, 478], "op_al": [67, 337], "op_no_sslv2": [67, 337, 467, 470, 478], "op_no_sslv3": [67, 337, 467, 478], "op_no_tlsv1": [67, 337, 467], "op_no_tlsv1_1": [67, 337, 467], "op_no_tlsv1_2": [67, 337, 467], "op_no_tlsv1_3": [67, 337, 467, 478], "op_no_renegoti": [67, 337, 478], "op_cipher_server_prefer": [67, 337, 471, 478], "op_single_dh_us": [67, 337, 478], "op_single_ecdh_us": [67, 337, 478], "op_enable_middlebox_compat": [67, 337, 478], "op_no_compress": [67, 337, 471, 478], "op_no_ticket": [67, 337], "op_ignore_unexpected_eof": [67, 337, 467, 478], "op_enable_ktl": [67, 337, 478], "op_legacy_server_connect": [67, 337, 478], "has_alpn": [67, 337, 473], "has_never_check_common_nam": [67, 337], "has_ecdh": [67, 337], "has_sni": [67, 219, 238, 244, 284, 301, 331, 337, 390], "has_npn": [67, 337], "has_sslv2": [67, 337], "has_sslv3": [67, 337], "has_tlsv1": [67, 337], "has_tlsv1_1": [67, 337, 475], "has_tlsv1_2": [67, 337], "has_tlsv1_3": [67, 337], "channel_binding_typ": [67, 337], "openssl_vers": [67, 337, 464, 470], "openssl_version_info": [67, 337, 464, 470], "openssl_version_numb": [67, 337, 464, 470], "alert_description_handshake_failur": [67, 337], "alert_description_internal_error": [67, 337], "alertdescript": [67, 337], "server_auth": [67, 337, 472], "client_auth": [67, 337, 472], "sslerrornumb": [67, 337], "tlsversion": [67, 337, 478], "minimum_support": [67, 337], "maximum_support": [67, 337], "sslv3": [67, 337, 471, 473, 478], "tlsv1": [67, 337, 472, 478], "tlsv1_1": [67, 337], "tlsv1_2": [67, 337], "tlsv1_3": [67, 337], "sslsocket": [67, 130, 337, 464, 467, 472, 473, 475, 477, 478], "do_handshak": [67, 337, 472, 473], "getpeercert": [67, 130, 337, 463, 472, 478], "cipher": [67, 130, 163, 169, 231, 451, 464, 470, 471, 473, 474, 475, 478], "shared_ciph": [67, 337, 473, 478], "get_channel_bind": [67, 337, 471], "selected_alpn_protocol": [67, 337, 473], "selected_npn_protocol": [67, 337, 467], "unwrap": [67, 87, 251, 252, 311, 337, 389, 472, 478], "verify_client_post_handshak": [67, 337, 476, 478], "server_sid": [67, 123, 337], "server_hostnam": [67, 123, 133, 337, 470, 475, 478], "session": [67, 84, 92, 99, 100, 123, 152, 165, 189, 209, 238, 239, 279, 289, 293, 301, 305, 316, 325, 331, 348, 390, 431, 445, 450, 456, 461, 469, 471, 472, 474, 476, 478], "session_reus": [67, 337], "sslcontext": [67, 123, 130, 133, 219, 238, 244, 265, 284, 301, 331, 337, 390, 414, 464, 467, 469, 470, 471, 472, 473, 474, 475, 478], "cert_store_stat": [67, 337, 472], "load_cert_chain": [67, 337, 390, 471], "load_default_cert": [67, 337, 472, 478], "load_verify_loc": [67, 337, 390, 472, 478], "get_ca_cert": [67, 337, 472], "get_ciph": [67, 337, 474, 478], "set_default_verify_path": [67, 337, 472, 478], "set_ciph": [67, 337], "set_alpn_protocol": [67, 238, 337, 390, 473], "set_npn_protocol": [67, 337, 467, 471], "sni_callback": [67, 337, 478], "set_servername_callback": [67, 337, 472], "load_dh_param": [67, 337, 471, 478], "set_ecdh_curv": [67, 337, 471, 478], "wrap_socket": [67, 337, 463, 464, 467, 469, 470, 475, 478], "sslsocket_class": [67, 337], "wrap_bio": [67, 337, 473, 475, 478], "sslobject_class": [67, 337], "session_stat": [67, 337], "check_hostnam": [67, 219, 238, 244, 284, 301, 331, 337, 390, 408, 469, 474, 478], "keylog_filenam": [67, 337], "maximum_vers": [67, 337, 467, 475, 478], "minimum_vers": [67, 337, 467, 475, 478], "num_ticket": [67, 337, 478], "post_handshake_auth": [67, 238, 337, 476, 478], "hostname_checks_common_nam": [67, 337, 475, 478], "security_level": [67, 337, 478], "verify_flag": [67, 337, 472], "verify_mod": [67, 337, 478], "ca": [67, 91, 103, 158, 257, 390, 421, 463, 464, 472, 478], "sslobject": [67, 130, 337, 381, 473, 475, 478], "memorybio": [67, 337, 473, 478], "sslsession": [67, 337, 474, 478], "ticket_lifetime_hint": [67, 337], "has_ticket": [67, 337], "devpol": [67, 324, 325, 471, 472, 473, 478], "epol": [67, 325, 463, 472, 473, 477, 478], "kqueue": [67, 318, 325, 463, 473, 478], "kevent": 67, "pipe_buf": [67, 324, 470, 478], "edg": [67, 102, 172, 173, 189, 197, 221, 228, 357, 359, 379, 471, 472, 478], "fflag": [67, 324], "udata": [67, 324], "multiplex": [67, 250, 256, 324, 337, 472], "event_read": [67, 325, 329], "event_writ": [67, 325], "selectorkey": [67, 325], "fileobj": [67, 230, 231, 325, 329, 353, 471, 478], "baseselector": [67, 325, 478], "get_key": [67, 325, 478], "get_map": [67, 325], "defaultselector": [67, 325, 329, 478], "selectselector": [67, 123, 128, 325], "pollselector": [67, 128, 325, 475], "epollselector": [67, 325, 475, 478], "devpollselector": [67, 325, 473, 475], "kqueueselector": [67, 128, 325, 478], "sigmask": [67, 329], "sigabrt": [67, 184, 210, 289, 329, 450, 471, 478], "sigalrm": [67, 329, 478], "sigbreak": [67, 329], "sigbus": [67, 184, 210, 329, 450, 471], "sigchld": [67, 129, 289, 329], "sigcld": [67, 329], "sigcont": [67, 289, 329], "sigfp": [67, 184, 210, 329, 450, 471, 478], "sighup": [67, 329, 478], "sigil": [67, 184, 210, 329, 450, 471], "sigkil": [67, 130, 134, 279, 289, 329, 344, 355, 461, 475, 478], "sigpip": [67, 344], "sigsegv": [67, 184, 210, 329, 450, 471, 478], "sigstkflt": [67, 329, 478], "sigusr1": [67, 329], "sigusr2": [67, 329], "sigwinch": [67, 173, 329, 478], "ctrl_c_event": [67, 134, 289, 329, 344, 464], "ctrl_break_ev": [67, 134, 289, 329, 344, 464], "nsig": [67, 329, 478], "itimer_r": [67, 329], "itimer_virtu": [67, 329], "itimer_prof": [67, 329], "sig_block": [67, 329], "sig_unblock": [67, 329], "sig_setmask": [67, 329], "itimererror": [67, 329], "alarm": [67, 304, 329, 472, 478], "getsign": [67, 329, 478], "strsignal": [67, 329, 478], "valid_sign": [67, 329, 478], "paus": [67, 91, 94, 130, 134, 173, 291, 293, 329, 425, 461, 462, 478], "raise_sign": [67, 112, 329, 478], "pidfd_send_sign": [67, 329, 477, 478], "pthread_kil": [67, 139, 289, 329, 471], "pthread_sigmask": [67, 329, 471], "setitim": [67, 329, 463, 478], "getitim": [67, 329, 463], "siginterrupt": [67, 329, 463, 471, 478], "sigpend": [67, 329, 471], "sigwait": [67, 329, 471], "sigwaitinfo": [67, 329, 471, 473, 478], "sigtimedwait": [67, 329, 471, 473, 478], "madvis": [67, 274, 476, 478], "madv_": 67, "madv_norm": [67, 274], "madv_random": [67, 274], "madv_sequenti": [67, 274], "madv_willne": [67, 274], "madv_dontne": [67, 274], "madv_remov": [67, 274], "madv_dontfork": [67, 274], "madv_dofork": [67, 274], "madv_hwpoison": [67, 274], "madv_merg": [67, 274], "madv_unmerg": [67, 274], "madv_soft_offlin": [67, 274], "madv_hugepag": [67, 274], "madv_nohugepag": [67, 274], "madv_dontdump": [67, 274], "madv_dodump": [67, 274], "madv_fre": [67, 274], "madv_nosync": [67, 274], "madv_autosync": [67, 274], "madv_nocor": [67, 274], "madv_cor": [67, 274], "madv_protect": [67, 274], "madv_free_reus": [67, 274], "map_": 67, "map_shar": [67, 274], "map_priv": [67, 274], "map_denywrit": [67, 274], "map_execut": [67, 274], "map_anon": [67, 274], "map_anonym": [67, 274], "map_popul": [67, 274, 478], "map_stack": [67, 274, 478], "map_aligned_sup": [67, 274, 478], "map_conc": [67, 274, 478], "mime": [67, 86, 103, 140, 143, 148, 154, 192, 196, 198, 199, 200, 201, 203, 204, 241, 250, 268, 281, 348, 402, 427, 446, 459, 461, 464, 470, 472, 473, 474, 475, 478], "emailmessag": [67, 148, 190, 192, 193, 196, 197, 198, 201, 203, 204, 238, 281, 390, 472, 474, 478], "as_str": [67, 190, 192, 197, 198, 201, 281, 472, 478], "as_byt": [67, 190, 192, 196, 197, 201, 204, 247, 281, 472], "is_multipart": [67, 190, 192, 195, 201, 203, 281, 478], "set_unixfrom": [67, 190, 192, 201, 281], "get_unixfrom": [67, 190, 192, 201, 281], "get_al": [67, 190, 192, 201, 205, 252, 281, 402, 478], "add_head": [67, 190, 192, 201, 202, 252, 281, 384, 390, 402], "replace_head": [67, 190, 192, 201, 281], "get_content_typ": [67, 148, 190, 192, 196, 201, 281], "get_content_maintyp": [67, 190, 192, 196, 201, 281], "get_content_subtyp": [67, 190, 192, 201, 281], "get_default_typ": [67, 190, 192, 201, 281], "set_default_typ": [67, 190, 192, 201, 281], "set_param": [67, 190, 192, 201, 281, 472], "del_param": [67, 190, 192, 201, 281], "get_filenam": [67, 190, 192, 196, 201, 246, 276, 281, 418, 472], "get_boundari": [67, 190, 192, 201, 281], "set_boundari": [67, 190, 192, 195, 201, 281], "get_content_charset": [67, 190, 192, 201, 281], "get_charset": [67, 190, 192, 201, 281], "is_attach": [67, 190, 201, 281, 478], "get_content_disposit": [67, 190, 192, 201, 281, 473], "get_bodi": [67, 190, 196, 201, 203, 281], "iter_attach": [67, 190, 196, 201, 281, 478], "iter_part": [67, 190, 192, 201, 203, 281], "get_cont": [67, 190, 192, 193, 196, 201, 204, 281], "set_cont": [67, 190, 192, 193, 194, 196, 201, 203, 204, 281, 478], "make_rel": [67, 190, 201, 281], "make_altern": [67, 190, 201, 281], "make_mix": [67, 190, 201, 281], "add_rel": [67, 190, 196, 201, 281], "add_altern": [67, 190, 196, 201, 281], "add_attach": [67, 190, 196, 201, 281], "clear_cont": [67, 190, 193, 201, 281], "preambl": [67, 190, 192, 196, 201, 281, 296, 478], "epilogu": [67, 190, 192, 201, 281], "defect": [67, 190, 192, 199, 201, 203, 204, 281, 461, 471, 475, 478], "mimepart": [67, 190, 193, 201, 281, 472], "feedpars": [67, 190, 195, 281, 461, 478], "bytesfeedpars": [67, 190, 203, 281, 470], "feed": [67, 93, 154, 173, 174, 190, 203, 204, 231, 236, 257, 269, 279, 281, 340, 384, 402, 408, 411, 462, 470, 478], "bytespars": [67, 190, 196, 197, 203, 281, 470, 478], "parsebyt": [67, 190, 203, 281], "bytesheaderpars": [67, 190, 203, 281, 471], "parsestr": [67, 190, 196, 203, 269, 281, 406, 407, 409, 457, 473, 478], "headerpars": [67, 190, 203, 281, 471], "message_from_byt": [67, 190, 203, 281, 470], "message_from_binary_fil": [67, 190, 196, 203, 204, 281, 470], "message_from_str": [67, 190, 203, 281, 471], "message_from_fil": [67, 190, 200, 203, 281], "bytesgener": [67, 190, 192, 193, 197, 201, 204, 281, 331, 470], "flatten": [67, 156, 190, 192, 197, 198, 199, 201, 204, 257, 281, 295, 340, 381, 437, 469, 472, 473, 477, 478], "decodedgener": [67, 190, 197, 281, 474, 478], "max_line_length": [67, 190, 192, 201, 204, 281, 471, 478], "cte_typ": [67, 190, 197, 199, 204, 281, 471], "raise_on_defect": [67, 190, 204, 281, 471], "mangle_from_": [67, 190, 192, 197, 204, 281, 473], "message_factori": [67, 190, 203, 204, 281, 474], "handle_defect": [67, 190, 204, 281], "register_defect": [67, 190, 204, 281], "header_max_count": [67, 190, 204, 281], "header_source_pars": [67, 190, 204, 281], "header_store_pars": [67, 190, 204, 281], "header_fetch_pars": [67, 190, 204, 281], "fold_binari": [67, 190, 204, 281], "emailpolici": [67, 190, 193, 199, 204, 281, 471, 473], "refold_sourc": [67, 190, 197, 204, 281, 471], "header_factori": [67, 190, 199, 204, 281, 471], "content_manag": [67, 190, 193, 201, 204, 281, 472], "smtp": [67, 79, 83, 99, 100, 190, 196, 197, 199, 204, 250, 252, 265, 281, 337, 446, 457, 459, 463, 470, 471, 472, 473, 477, 478], "smtputf8": [67, 190, 204, 281, 331, 473, 478], "compat32": [67, 190, 191, 194, 197, 198, 201, 202, 203, 204, 205, 281, 471, 473, 474, 478], "messageerror": [67, 190, 195, 281], "messageparseerror": [67, 190, 195, 267, 281], "headerparseerror": [67, 190, 192, 195, 201, 281], "boundaryerror": [67, 190, 195, 281], "multipartconversionerror": [67, 190, 195, 202, 281], "headerregistri": [67, 190, 195, 196, 201, 204, 281, 478], "basehead": [67, 190, 199, 201, 281], "max_count": [67, 190, 199, 204, 281], "unstructuredhead": [67, 190, 199, 281], "datehead": [67, 190, 199, 281], "addresshead": [67, 190, 199, 281], "singleaddresshead": [67, 190, 199, 281], "mimeversionhead": [67, 190, 199, 281], "parameterizedmimehead": [67, 190, 199, 281], "param": [67, 100, 136, 148, 190, 192, 193, 199, 201, 205, 238, 251, 277, 281, 289, 301, 336, 383, 389, 390, 394, 414, 415, 426, 464, 470, 477, 478], "contenttypehead": [67, 190, 199, 281], "content_typ": [67, 190, 196, 199, 281], "maintyp": [67, 190, 192, 193, 196, 197, 199, 200, 201, 281], "contentdispositionhead": [67, 190, 199, 281], "content_disposit": [67, 190, 199, 281], "contenttransferencod": [67, 190, 199, 281], "cte": [67, 190, 192, 193, 194, 199, 201, 204, 281, 336, 478], "map_to_typ": [67, 190, 199, 281], "display_nam": [67, 190, 196, 199, 281, 471], "usernam": [67, 100, 107, 148, 169, 190, 196, 199, 225, 244, 265, 281, 289, 290, 301, 331, 389, 390, 470, 471, 473, 478], "addr_spec": [67, 190, 199, 281, 471], "contentmanag": [67, 190, 202, 281, 472, 478], "add_get_handl": [67, 190, 193, 281], "add_set_handl": [67, 190, 193, 281], "raw_data_manag": [67, 190, 193, 204, 281], "get_payload": [67, 190, 192, 196, 200, 202, 281, 470], "set_payload": [67, 190, 192, 202, 281, 478], "set_charset": [67, 190, 192, 281], "get_param": [67, 190, 192, 205, 281, 478], "set_typ": [67, 190, 192, 281], "scratch": [67, 88, 100, 125, 185, 190, 194, 197, 203, 281, 337, 405, 471, 472, 478], "mimebas": [67, 190, 202, 281], "mimenonmultipart": [67, 190, 195, 202, 281, 478], "mimemultipart": [67, 190, 202, 281], "mimeappl": [67, 190, 202, 281], "mimeaudio": [67, 190, 194, 202, 281, 478], "mimeimag": [67, 190, 194, 195, 196, 202, 281], "mimemessag": [67, 190, 202, 281], "mimetext": [67, 190, 194, 202, 281, 473, 478], "decode_head": [67, 190, 198, 281, 284, 346, 471], "make_head": [67, 190, 198, 281, 471], "charset": [67, 148, 179, 186, 190, 192, 193, 198, 201, 202, 204, 205, 226, 242, 244, 281, 337, 390, 402, 470, 473, 478], "input_charset": [67, 190, 191, 192, 281], "header_encod": [67, 190, 191, 281], "body_encod": [67, 190, 191, 281, 478], "output_charset": [67, 190, 191, 192, 281, 464, 468, 476], "input_codec": [67, 190, 191, 281], "output_codec": [67, 190, 191, 281], "get_body_encod": [67, 190, 191, 281], "get_output_charset": [67, 190, 191, 281], "header_encode_lin": [67, 190, 191, 281], "add_charset": [67, 190, 191, 281], "add_alia": [67, 190, 191, 281], "add_codec": [67, 190, 191, 281], "encode_quopri": [67, 190, 194, 281], "encode_base64": [67, 190, 194, 202, 281], "encode_7or8bit": [67, 190, 194, 281], "encode_noop": [67, 190, 194, 281], "make_msgid": [67, 190, 196, 205, 281, 478], "unquot": [67, 171, 190, 192, 201, 205, 252, 281, 299, 389, 390, 478], "parseaddr": [67, 190, 205, 281, 478], "formataddr": [67, 190, 205, 281, 471], "getaddress": [67, 190, 205, 281, 478], "parsed": [67, 190, 205, 281], "parsedate_tz": [67, 190, 205, 281, 478], "parsedate_to_datetim": [67, 190, 205, 281, 471], "mktime_tz": [67, 190, 205, 281], "formatd": [67, 190, 205, 281, 461, 478], "format_datetim": [67, 190, 199, 205, 281, 471], "decode_rfc2231": [67, 190, 205, 281], "encode_rfc2231": [67, 190, 205, 281], "collapse_rfc2231_valu": [67, 190, 192, 205, 281], "decode_param": [67, 190, 205, 281], "body_line_iter": [67, 190, 200, 281], "typed_subpart_iter": [67, 190, 200, 281], "_structur": [67, 190, 192, 200, 201, 281], "jsondecod": [67, 258, 281, 464, 474, 478], "raw_decod": [67, 258, 281, 478], "jsonencod": [67, 100, 258, 281, 474, 478], "jsondecodeerror": [67, 117, 258, 281, 473, 478], "complianc": [67, 182, 190, 199, 204, 281, 284, 402, 405, 471, 472, 478], "interoper": [67, 93, 100, 123, 138, 204, 241, 255, 281, 295, 314, 337, 340, 417, 423, 441, 466, 470, 472, 478], "iterkey": [67, 109, 267, 281, 459, 460, 461, 463, 465, 478], "itervalu": [67, 109, 267, 281, 459, 460, 461, 465, 478], "iteritem": [67, 109, 267, 281, 459, 460, 461, 465, 478], "get_messag": [67, 267, 281], "get_byt": [67, 267, 281, 470], "get_str": [67, 267, 281, 470, 478], "get_fil": [67, 267, 281, 470], "unlock": [67, 112, 135, 211, 267, 278, 279, 281, 301, 357, 360, 423, 462, 478], "maildir": [67, 281, 462, 464, 478], "list_fold": [67, 267, 281], "get_fold": [67, 267, 281], "add_fold": [67, 267, 281], "remove_fold": [67, 267, 281], "mbox": [67, 192, 197, 281, 462, 478], "mh": [67, 281, 462], "get_sequ": [67, 267, 281], "set_sequ": [67, 267, 281], "babyl": [67, 281], "get_label": [67, 267, 281], "mmdf": [67, 281], "maildirmessag": [67, 281], "get_subdir": [67, 267, 281], "set_subdir": [67, 267, 281], "get_flag": [67, 267, 281], "set_flag": [67, 267, 281], "add_flag": [67, 267, 281], "remove_flag": [67, 267, 281], "get_dat": [67, 130, 134, 267, 281], "set_dat": [67, 267, 281], "get_info": [67, 267, 281], "set_info": [67, 267, 281], "mboxmessag": [67, 201, 281], "get_from": [67, 267, 281], "set_from": [67, 267, 281], "mhmessag": [67, 281], "add_sequ": [67, 267, 281], "remove_sequ": [67, 267, 281], "babylmessag": [67, 281], "set_label": [67, 267, 281], "add_label": [67, 267, 281], "remove_label": [67, 267, 281], "get_vis": [67, 267, 281], "set_vis": [67, 267, 281], "update_vis": [67, 267, 281], "mmdfmessag": [67, 281], "nosuchmailboxerror": [67, 267, 281], "notemptyerror": [67, 267, 281], "externalclasherror": [67, 267, 281], "guess_typ": [67, 196, 241, 272, 281, 402, 478], "guess_all_extens": [67, 272, 281, 478], "guess_extens": [67, 196, 272, 281], "read_mime_typ": [67, 272, 281, 478], "add_typ": [67, 272, 281], "knownfil": [67, 272, 281], "suffix_map": [67, 272, 281], "encodings_map": [67, 272, 281, 478], "types_map": [67, 272, 281, 463, 478], "common_typ": [67, 272, 281], "types_map_inv": [67, 272, 281], "readfp": [67, 163, 272, 281, 464, 468, 469, 478], "read_windows_registri": [67, 272, 281], "base16": [67, 250, 281, 461], "base32": [67, 250, 281, 461, 467, 478], "base85": [67, 250, 281, 472, 478], "b64encod": [67, 140, 231, 281, 478], "b64decod": [67, 140, 231, 281, 471, 478], "standard_b64encod": [67, 140, 281], "standard_b64decod": [67, 140, 281], "urlsafe_b64encod": [67, 140, 281], "urlsafe_b64decod": [67, 140, 281], "b32encod": [67, 140, 281], "b32decod": [67, 140, 281, 472, 478], "b32hexencod": [67, 140, 281, 467, 478], "b32hexdecod": [67, 140, 281, 467, 478], "b16encod": [67, 140, 281], "b16decod": [67, 140, 281], "a85encod": [67, 140, 281, 472, 478], "a85decod": [67, 140, 281, 472, 478], "b85encod": [67, 140, 281, 472, 478], "b85decod": [67, 140, 281, 472], "decodebyt": [67, 140, 154, 281, 477, 478], "encodebyt": [67, 140, 154, 281, 477, 478], "a2b_uu": [67, 143, 281], "b2a_uu": [67, 143, 281, 475, 478], "a2b_base64": [67, 140, 143, 281, 478], "b2a_base64": [67, 143, 281, 474, 478], "a2b_qp": [67, 143, 281, 478], "b2a_qp": [67, 143, 281, 478], "crc_hqx": [67, 143, 281, 468, 478], "b2a_hex": [67, 143, 154, 281, 478], "hexlifi": [67, 143, 281, 478], "a2b_hex": [67, 143, 154, 281, 472], "unhexlifi": [67, 98, 143, 281, 478], "quopri": [67, 143, 154, 250, 281], "decodestr": [67, 281, 313, 477, 478], "encodestr": [67, 281, 313, 477, 478], "markup": [67, 213, 250, 310, 405, 414, 463, 470, 471, 478], "hypertext": [67, 107, 236, 237, 250, 269, 405], "unescap": [67, 86, 103, 186, 234, 235, 269, 284, 315, 389, 412, 430, 472, 477, 478], "xhtml": [67, 107, 234, 235, 250, 269, 310, 390, 405, 406, 408, 470], "htmlparser": [67, 269, 465, 467, 471, 472, 473, 477, 478], "getpo": [67, 236, 269], "get_starttag_text": [67, 236, 269], "handle_starttag": [67, 236, 269], "handle_endtag": [67, 236, 269], "handle_startendtag": [67, 236, 269], "handle_data": [67, 236, 269], "handle_entityref": [67, 236, 269], "handle_charref": [67, 236, 269], "handle_com": [67, 236, 269], "handle_decl": [67, 236, 269], "handle_pi": [67, 236, 269], "unknown_decl": [67, 236, 269], "entiti": [67, 86, 103, 107, 234, 236, 238, 250, 264, 269, 310, 390, 404, 405, 406, 407, 409, 410, 411, 412, 421, 460, 471, 476, 478], "html5": [67, 235, 269, 471, 472, 478], "entitydef": [67, 235, 269], "name2codepoint": [67, 235, 236, 269], "codepoint2nam": [67, 235, 269], "vulner": [67, 106, 123, 134, 189, 269, 295, 310, 323, 327, 336, 344, 381, 406, 407, 408, 409, 414, 415, 462, 478], "defusedxml": [67, 269], "pull": [67, 72, 179, 182, 269, 324, 379, 384, 407, 420, 457, 461, 464, 472, 475, 478], "xpath": [67, 269, 404, 477, 478], "canonic": [67, 269, 408, 476, 478], "fromstr": [67, 118, 269, 408, 470, 477, 478], "fromstringlist": [67, 269, 408, 470], "isel": [67, 269, 408], "iterpars": [67, 269, 408, 472, 478], "processinginstruct": [67, 269, 408, 410, 462], "register_namespac": [67, 269, 408, 464, 470], "subel": [67, 269, 408, 470], "tostr": [67, 118, 269, 408, 464, 470, 472, 477, 478], "tostringlist": [67, 269, 408, 470, 472, 478], "xmlid": [67, 269, 408], "xinclud": [67, 269, 478], "elementinclud": [67, 269, 408, 462], "default_load": [67, 269, 408], "attrib": [67, 269, 408, 462, 478], "findtext": [67, 269, 408, 478], "iterfind": [67, 269, 408, 470], "itertext": [67, 269, 408, 464, 470, 478], "makeel": [67, 269, 408], "_setroot": [67, 269, 408], "getroot": [67, 269, 408, 462], "qname": [67, 269, 405, 410, 411], "treebuild": [67, 269, 470, 476, 478], "doctyp": [67, 107, 236, 238, 269, 310, 390, 405, 408, 470, 476, 478], "start_n": [67, 269, 408, 476, 478], "end_n": [67, 269, 408, 476, 478], "c14nwritertarget": [67, 269, 408], "xmlparser": [67, 269, 464, 472, 476, 478], "xmlpullpars": [67, 269, 472, 478], "read_ev": [67, 269, 408], "parseerror": [67, 269, 404, 408, 464, 470, 478], "registerdomimplement": [67, 269, 405], "getdomimplement": [67, 269, 405, 406], "empty_namespac": [67, 269, 405], "xml_namespac": [67, 269, 405], "xmlns_namespac": [67, 269, 405], "xhtml_namespac": [67, 269, 405], "domimplement": [67, 269], "hasfeatur": [67, 269, 405], "createdocu": [67, 269, 405, 406], "createdocumenttyp": [67, 269, 405], "nodetyp": [67, 269, 405, 406], "parentnod": [67, 269, 405], "previouss": [67, 269, 405], "nextsibl": [67, 269, 405], "childnod": [67, 269, 405, 406, 457], "firstchild": [67, 269, 405], "lastchild": [67, 269, 405], "localnam": [67, 269, 405, 410, 411, 478], "namespaceuri": [67, 269, 405, 411], "nodenam": [67, 269, 289, 299, 405], "nodevalu": [67, 269, 405], "hasattribut": [67, 269, 405], "haschildnod": [67, 269, 405], "issamenod": [67, 269, 405], "appendchild": [67, 269, 405, 406, 457], "insertbefor": [67, 269, 405, 457], "removechild": [67, 269, 405, 457], "replacechild": [67, 269, 405], "clonenod": [67, 269, 405, 478], "nodelist": [67, 269, 406, 423], "documenttyp": [67, 269], "publicid": [67, 269, 310, 405, 410], "systemid": [67, 269, 310, 405, 410], "internalsubset": [67, 269, 405], "documentel": [67, 269, 405, 406, 457], "createel": [67, 269, 405], "createelementn": [67, 269, 405], "createtextnod": [67, 269, 405, 406], "createcom": [67, 269, 405], "createprocessinginstruct": [67, 269, 405], "createattribut": [67, 269, 405], "createattributen": [67, 269, 405], "getelementsbytagnam": [67, 269, 405, 406, 457], "getelementsbytagnamen": [67, 269, 405], "tagnam": [67, 269, 274, 371, 405, 406, 407], "hasattributen": [67, 269, 405], "getattribut": [67, 269, 405, 407, 423], "getattributenod": [67, 269, 405], "getattributen": [67, 269, 405], "getattributenoden": [67, 269, 405], "removeattribut": [67, 269, 405], "removeattributenod": [67, 269, 405, 478], "removeattributen": [67, 269, 405], "setattribut": [67, 269, 405], "setattributenod": [67, 269, 405], "setattributenoden": [67, 269, 405], "setattributen": [67, 269, 405], "namednodemap": [67, 269], "cdatasect": [67, 269], "domexcept": [67, 269, 405, 406], "domstringsizeerr": [67, 269, 405], "hierarchyrequesterr": [67, 269, 405], "indexsizeerr": [67, 269, 405], "inuseattributeerr": [67, 269, 405], "invalidaccesserr": [67, 269, 405], "invalidcharactererr": [67, 269, 405], "invalidmodificationerr": [67, 269, 405], "invalidstateerr": [67, 269, 405], "namespaceerr": [67, 269, 405], "notfounderr": [67, 269, 405], "notsupportederr": [67, 269, 405], "nodataallowederr": [67, 269, 405], "nomodificationallowederr": [67, 269, 405], "syntaxerr": [67, 269, 405], "wrongdocumenterr": [67, 269, 405], "minidom": [67, 250, 269, 404, 405, 407, 457, 458, 460, 476, 478], "writexml": [67, 269, 406, 476], "toxml": [67, 269, 406, 407, 457, 460, 476], "toprettyxml": [67, 269, 406, 460, 476], "pulldom": [67, 250, 269, 404, 468, 476, 478], "sax2dom": [67, 269, 407], "default_bufs": [67, 269, 407], "domeventstream": [67, 269, 468, 476, 478], "getev": [67, 269, 407], "expandnod": [67, 269, 407], "make_pars": [67, 269, 407, 409, 411, 457, 478], "saxexcept": [67, 269], "saxparseexcept": [67, 269, 409, 410], "saxnotrecognizedexcept": [67, 269, 409, 411], "saxnotsupportedexcept": [67, 269, 409, 411], "getexcept": [67, 269, 409], "contenthandl": [67, 269, 407, 409, 411, 412, 457], "dtdhandler": [67, 269, 411], "entityresolv": [67, 269, 411], "errorhandl": [67, 269, 409, 411, 450, 463], "lexicalhandl": [67, 269, 461, 467, 478], "feature_namespac": [67, 269, 410], "feature_namespace_prefix": [67, 269, 410], "feature_string_intern": [67, 269, 410], "feature_valid": [67, 269, 410], "feature_external_g": [67, 269, 407, 409, 410], "feature_external_p": [67, 269, 410], "all_featur": [67, 269, 410], "property_lexical_handl": [67, 269, 410], "property_declaration_handl": [67, 269, 410], "property_dom_nod": [67, 269, 410], "property_xml_str": [67, 269, 410], "all_properti": [67, 269, 410], "setdocumentloc": [67, 269, 410], "startdocu": [67, 269, 410], "enddocu": [67, 269, 410], "startprefixmap": [67, 269, 410], "endprefixmap": [67, 269, 410], "startel": [67, 269, 410, 411, 457], "endel": [67, 269, 410, 457], "startelementn": [67, 269, 410, 411], "endelementn": [67, 269, 410], "ignorablewhitespac": [67, 269, 410], "skippedent": [67, 269, 410], "notationdecl": [67, 269, 410], "unparsedentitydecl": [67, 269, 410], "resolveent": [67, 269, 410, 411], "fatalerror": [67, 269, 410], "startdtd": [67, 269, 410, 461], "enddtd": [67, 269, 410], "startcdata": [67, 269, 410], "endcdata": [67, 269, 410], "saxutil": [67, 250, 269, 409], "quoteattr": [67, 269, 412], "xmlgener": [67, 269, 412], "xmlfilterbas": [67, 269, 412], "prepare_input_sourc": [67, 269, 412], "xmlreader": [67, 250, 269, 407, 409, 410, 412, 473], "incrementalpars": [67, 269], "inputsourc": [67, 269, 409, 410, 412, 473, 478], "attributesimpl": [67, 269, 411], "attributesnsimpl": [67, 269, 411], "getcontenthandl": [67, 269, 411], "setcontenthandl": [67, 269, 411, 457], "getdtdhandl": [67, 269, 411], "setdtdhandl": [67, 269, 411], "getentityresolv": [67, 269, 411], "setentityresolv": [67, 269, 411], "geterrorhandl": [67, 269, 411], "seterrorhandl": [67, 269, 411], "setlocal": [67, 86, 242, 254, 262, 269, 411, 447, 468, 473, 478], "getfeatur": [67, 269, 411], "setfeatur": [67, 269, 407, 409, 411], "getproperti": [67, 269, 277, 346, 411, 478], "setproperti": [67, 269, 277, 346, 410, 411], "getcolumnnumb": [67, 269, 411], "getlinenumb": [67, 269, 411], "getpublicid": [67, 269, 411], "getsystemid": [67, 269, 411], "setpublicid": [67, 269, 411], "setsystemid": [67, 269, 411], "setencod": [67, 269, 411], "setbytestream": [67, 269, 411], "getbytestream": [67, 269, 411], "setcharacterstream": [67, 269, 411], "getcharacterstream": [67, 269, 411], "getlength": [67, 269, 411], "gettyp": [67, 269, 411, 462], "attributesn": [67, 269, 409, 410], "getvaluebyqnam": [67, 269, 411], "getnamebyqnam": [67, 269, 411], "getqnamebynam": [67, 269, 411], "getqnam": [67, 269, 411], "expat": [67, 250, 269, 300, 404, 408, 410, 451, 457, 458, 460, 462, 464, 470, 478], "expaterror": [67, 269, 470], "xmlparsertyp": [67, 269, 310], "errorstr": [67, 269, 310], "parsercr": [67, 269, 310], "parsefil": [67, 269, 310], "setbas": [67, 269, 310], "getbas": [67, 269, 310], "getinputcontext": [67, 269, 310], "externalentityparsercr": [67, 269, 310], "setparamentitypars": [67, 269, 310], "useforeigndtd": [67, 269, 310], "buffer_s": [67, 254, 269, 310, 463], "buffer_text": [67, 269, 310, 460], "buffer_us": [67, 269, 310], "ordered_attribut": [67, 269, 310], "specified_attribut": [67, 269, 310, 478], "errorbyteindex": [67, 269, 310], "errorcolumnnumb": [67, 269, 310], "errorlinenumb": [67, 269, 310], "currentbyteindex": [67, 269, 310], "currentcolumnnumb": [67, 269, 310], "currentlinenumb": [67, 269, 310], "xmldeclhandl": [67, 269, 310], "startdoctypedeclhandl": [67, 269, 310], "enddoctypedeclhandl": [67, 269, 310], "elementdeclhandl": [67, 269, 310], "attlistdeclhandl": [67, 269, 310], "startelementhandl": [67, 269, 310], "endelementhandl": [67, 269, 310], "processinginstructionhandl": [67, 269, 310], "characterdatahandl": [67, 269, 310], "unparsedentitydeclhandl": [67, 269, 310], "entitydeclhandl": [67, 269, 310], "notationdeclhandl": [67, 269, 310], "startnamespacedeclhandl": [67, 269, 310], "endnamespacedeclhandl": [67, 269, 310], "commenthandl": [67, 269, 310], "startcdatasectionhandl": [67, 269, 310], "endcdatasectionhandl": [67, 269, 310], "defaulthandl": [67, 269, 310], "defaulthandlerexpand": [67, 269, 310], "notstandalonehandl": [67, 269, 310], "externalentityrefhandl": [67, 269, 310], "xml_error_async_ent": [67, 269, 310], "xml_error_attribute_external_entity_ref": [67, 269, 310], "xml_error_bad_char_ref": [67, 269, 310], "xml_error_binary_entity_ref": [67, 269, 310], "xml_error_duplicate_attribut": [67, 269, 310], "xml_error_incorrect_encod": [67, 269, 310], "xml_error_invalid_token": [67, 269, 310], "xml_error_junk_after_doc_el": [67, 269, 310], "xml_error_misplaced_xml_pi": [67, 269, 310], "xml_error_no_el": [67, 269, 310], "xml_error_no_memori": [67, 269, 310], "xml_error_param_entity_ref": [67, 269, 310], "xml_error_partial_char": [67, 269, 310], "xml_error_recursive_entity_ref": [67, 269, 310], "xml_error_syntax": [67, 269, 310], "xml_error_tag_mismatch": [67, 269, 310], "xml_error_unclosed_token": [67, 269, 310], "xml_error_undefined_ent": [67, 269, 310], "xml_error_unknown_encod": [67, 269, 310], "xml_error_unclosed_cdata_sect": [67, 269, 310], "xml_error_external_entity_handl": [67, 269, 310], "xml_error_not_standalon": [67, 269, 310], "xml_error_unexpected_st": [67, 269, 310], "xml_error_entity_declared_in_p": [67, 269, 310], "xml_error_feature_requires_xml_dtd": [67, 269, 310], "xml_error_cant_change_feature_once_pars": [67, 269, 310], "xml_error_unbound_prefix": [67, 269, 310], "xml_error_undeclaring_prefix": [67, 269, 310], "xml_error_incomplete_p": [67, 269, 310], "xml_error_xml_decl": [67, 269, 310], "xml_error_text_decl": [67, 269, 310], "xml_error_publicid": [67, 269, 310], "xml_error_suspend": [67, 269, 310], "xml_error_not_suspend": [67, 269, 310], "xml_error_abort": [67, 269, 310], "xml_error_finish": [67, 269, 310], "xml_error_suspend_p": [67, 269, 310], "xml_error_reserved_prefix_xml": [67, 269, 310], "xml_error_reserved_prefix_xmln": [67, 269, 310], "xml_error_reserved_namespace_uri": [67, 269, 310], "xml_error_invalid_argu": [67, 269, 310], "xml_error_no_buff": [67, 269, 310], "xml_error_amplification_limit_breach": [67, 269, 310], "browser": [67, 94, 106, 107, 148, 149, 186, 240, 241, 243, 250, 252, 253, 260, 268, 304, 309, 348, 389, 390, 435, 451, 457, 458, 460, 461, 462, 463, 469, 470, 471, 474, 475, 478], "open_new": [67, 252, 398, 462], "open_new_tab": [67, 252, 398, 462], "wsgi": [67, 250, 252, 462, 468, 470, 478], "guess_schem": [67, 252, 402], "request_uri": [67, 252, 402], "application_uri": [67, 252, 402], "shift_path_info": [67, 252, 402], "setup_testing_default": [67, 252, 402], "is_hop_by_hop": [67, 252, 402], "filewrapp": [67, 252, 402, 468, 476, 478], "simple_serv": [67, 252, 462, 474, 478], "make_serv": [67, 252, 402, 462], "demo_app": [67, 252, 402], "wsgiserv": [67, 252, 402, 478], "set_app": [67, 252, 402], "get_app": [67, 252, 402], "wsgirequesthandl": [67, 252, 402, 478], "get_environ": [67, 252, 402], "get_stderr": [67, 252, 402], "checker": [67, 84, 102, 117, 173, 189, 252, 288, 340, 381, 422, 423, 461, 462, 467, 468, 469, 473, 474, 476, 477, 478], "cgihandl": [67, 252, 402], "iiscgihandl": [67, 252, 402], "basecgihandl": [67, 252, 402], "simplehandl": [67, 252, 402, 457], "basehandl": [67, 252, 384, 402, 478], "_write": [67, 252, 402], "_flush": [67, 252, 402], "get_stdin": [67, 252, 402], "add_cgi_var": [67, 252, 402], "wsgi_multithread": [67, 252, 402], "wsgi_multiprocess": [67, 252, 402], "wsgi_run_onc": [67, 252, 402], "os_environ": [67, 252, 402], "server_softwar": [67, 252, 402], "get_schem": [67, 252, 402], "setup_environ": [67, 252, 402], "log_except": [67, 252, 402], "traceback_limit": [67, 181, 252, 377, 402], "error_output": [67, 252, 402], "error_status": [67, 252, 402], "error_head": [67, 252, 402], "error_bodi": [67, 252, 402], "wsgi_file_wrapp": [67, 252, 402], "origin_serv": [67, 252, 402], "http_version": [67, 252, 402], "read_environ": [67, 252, 402, 470], "startrespons": [67, 252, 402], "wsgienviron": [67, 252, 402], "wsgiapplic": [67, 252, 402], "inputstream": [67, 252, 402, 478], "errorstream": [67, 252, 402], "url": [67, 84, 133, 139, 140, 148, 162, 163, 219, 237, 238, 239, 241, 243, 247, 250, 252, 265, 272, 309, 322, 340, 357, 388, 391, 393, 394, 398, 402, 408, 411, 412, 414, 415, 421, 427, 457, 460, 461, 462, 463, 464, 470, 472, 473, 478], "urlopen": [67, 83, 107, 162, 165, 222, 239, 252, 303, 388, 389, 390, 446, 462, 463, 464, 470, 471, 472, 473, 478], "install_open": [67, 107, 252, 390], "build_open": [67, 107, 239, 252, 390], "pathname2url": [67, 252, 390], "url2pathnam": [67, 252, 390], "getproxi": [67, 107, 252, 390, 478], "openerdirector": [67, 107, 252, 472], "httpdefaulterrorhandl": [67, 107, 252, 390], "httpredirecthandl": [67, 107, 252], "httpcookieprocessor": [67, 239, 252, 461], "proxyhandl": [67, 107, 252, 478], "httppasswordmgr": [67, 107, 252, 478], "httppasswordmgrwithdefaultrealm": [67, 107, 252, 390], "httppasswordmgrwithpriorauth": [67, 252, 473, 478], "abstractbasicauthhandl": [67, 252, 384, 478], "httpbasicauthhandl": [67, 107, 252], "proxybasicauthhandl": [67, 252], "abstractdigestauthhandl": [67, 252, 384, 478], "httpdigestauthhandl": [67, 252], "proxydigestauthhandl": [67, 252], "httpshandler": [67, 252, 470], "datahandl": [67, 107, 252, 472], "ftphandler": [67, 107, 252], "cacheftphandl": [67, 252, 478], "unknownhandl": [67, 107, 252], "httperrorprocessor": [67, 107, 252], "full_url": [67, 107, 252, 390, 472], "origin_req_host": [67, 239, 252, 390], "unverifi": [67, 238, 239, 252, 390], "get_method": [67, 252, 260, 347, 390, 471], "add_unredirected_head": [67, 239, 252, 390], "remove_head": [67, 252, 390, 472], "get_full_url": [67, 239, 252, 390], "set_proxi": [67, 252, 390, 414, 472], "get_head": [67, 239, 252, 381, 390], "header_item": [67, 239, 252, 390], "add_handl": [67, 107, 252, 390], "add_par": [67, 252, 390], "default_open": [67, 252, 390], "unknown_open": [67, 252, 390], "http_error_default": [67, 252, 390], "redirect_request": [67, 252, 390], "http_error_301": [67, 252, 390], "http_error_302": [67, 252, 390], "http_error_303": [67, 252, 390], "http_error_307": [67, 252, 390], "http_error_308": [67, 252, 390], "cookiejar": [67, 237, 240, 250, 252, 390, 478], "add_password": [67, 107, 252, 390], "find_user_password": [67, 252, 390, 478], "update_authent": [67, 252, 390], "is_authent": [67, 252, 390, 478], "http_error_auth_req": [67, 252, 390], "http_error_401": [67, 252, 390], "http_error_407": [67, 252, 390], "http_open": [67, 252, 390], "https_open": [67, 252, 390], "file_open": [67, 252, 390], "data_open": [67, 252, 390], "ftp_open": [67, 252, 390], "setmaxconn": [67, 252, 390], "http_respons": [67, 252, 390], "https_respons": [67, 252, 390], "urlretriev": [67, 252, 388, 390, 394, 478], "urlcleanup": [67, 252, 390, 478], "open_unknown": [67, 252, 390], "fancyurlopen": [67, 252, 390, 478], "prompt_user_passwd": [67, 252, 390], "addinfourl": [67, 252, 390, 478], "geturl": [67, 238, 252, 389, 390, 478], "getcod": [67, 238, 252, 390, 478], "urlpars": [67, 252, 389, 394, 463, 464, 465, 470, 474, 478], "parse_q": [67, 148, 252, 389, 463, 467, 474, 475, 476, 477, 478], "parse_qsl": [67, 148, 252, 389, 463, 467, 474, 475, 476, 477, 478], "urlunpars": [67, 252, 389], "urlsplit": [67, 133, 252, 389, 464, 474, 478], "urlunsplit": [67, 252, 389], "urljoin": [67, 252, 389, 473, 478], "urldefrag": [67, 252, 389, 470], "splitresult": [67, 252, 389, 478], "defragresult": [67, 252, 389, 470, 478], "parseresult": [67, 252, 389, 464, 470, 478], "defragresultbyt": [67, 252, 389, 478], "parseresultbyt": [67, 252, 389, 470, 478], "splitresultbyt": [67, 252, 389, 478], "quote_plus": [67, 252, 389, 470], "quote_from_byt": [67, 252, 389, 478], "unquote_plus": [67, 252, 389], "unquote_to_byt": [67, 252, 389, 478], "urlencod": [67, 83, 107, 148, 238, 252, 265, 389, 390, 470, 473, 478], "urlerror": [67, 252, 388, 390, 463, 478], "httperror": [67, 222, 252, 388, 390, 472, 478], "contenttooshorterror": [67, 252, 388, 390], "robot": [67, 250, 252, 379, 387, 457, 478], "robotfilepars": [67, 252, 391, 474, 478], "set_url": [67, 252, 391], "can_fetch": [67, 252, 391, 478], "crawl_delay": [67, 252, 391, 478], "request_r": [67, 252, 391, 478], "site_map": [67, 252, 391, 478], "httpstatus": [67, 237, 252, 473, 477, 478], "httpmethod": [67, 237, 252, 478], "httpconnect": [67, 252, 414, 463, 464, 470, 472, 473, 474, 475, 478], "httpsconnect": [67, 238, 252, 390, 463, 464, 470, 472, 475, 478], "httprespons": [67, 252, 390, 464, 471, 478], "parse_head": [67, 148, 238, 241, 252, 346, 478], "httpexcept": [67, 238, 252], "notconnect": [67, 238, 252], "invalidurl": [67, 238, 252, 478], "unknownprotocol": [67, 238, 252], "unknowntransferencod": [67, 238, 252], "unimplementedfilemod": [67, 238, 252], "incompleteread": [67, 238, 252], "improperconnectionst": [67, 238, 252], "cannotsendrequest": [67, 238, 252], "cannotsendhead": [67, 238, 252], "responsenotreadi": [67, 238, 252], "badstatuslin": [67, 238, 252], "linetoolong": [67, 238, 252], "remotedisconnect": [67, 238, 252, 473, 478], "http_port": [67, 238, 252], "https_port": [67, 238, 252], "getrespons": [67, 238, 252, 473, 478], "set_debuglevel": [67, 219, 238, 252, 284, 301, 331, 346, 354, 473], "set_tunnel": [67, 238, 252, 414, 470, 478], "get_proxy_response_head": [67, 238, 252, 478], "blocksiz": [67, 219, 238, 252, 289, 353, 475, 478], "putrequest": [67, 238, 252, 478], "puthead": [67, 238, 252], "endhead": [67, 238, 252, 474], "gethead": [67, 238, 252], "debuglevel": [67, 238, 252, 331, 354, 390, 473, 478], "httpmessag": [67, 107, 241, 252], "error_repli": [67, 219, 252], "error_temp": [67, 219, 252], "error_perm": [67, 219, 252], "error_proto": [67, 219, 252, 301, 471], "all_error": [67, 123, 219, 252, 333, 468, 478], "getwelcom": [67, 219, 252, 284, 301, 346], "login": [67, 100, 169, 219, 244, 252, 282, 284, 289, 331, 335, 346, 354, 390, 470, 478], "sendcmd": [67, 139, 219, 252], "voidcmd": [67, 219, 252], "retrbinari": [67, 219, 252], "retrlin": [67, 219, 252], "set_pasv": [67, 219, 252, 458], "storbinari": [67, 219, 252, 463, 464], "storlin": [67, 219, 252, 463], "transfercmd": [67, 219, 252], "ntransfercmd": [67, 219, 252], "mlsd": [67, 219, 252, 471], "nlst": [67, 219, 252, 471], "mkd": [67, 219, 252], "pwd": [67, 169, 219, 225, 229, 250, 252, 289, 290, 335, 344, 386, 417, 460, 477, 478], "rmd": [67, 219, 252], "ftp_tls": [67, 252, 464, 469, 470, 471, 477, 478], "ssl_version": [67, 219, 252, 337, 469, 478], "auth": [67, 219, 244, 252, 265, 331, 337, 460, 473, 478], "ccc": [67, 219, 252, 343, 371, 471], "prot_p": [67, 219, 252], "prot_c": [67, 219, 252], "pop3": [67, 250, 252, 471, 472, 473, 477, 478], "pop3_ssl": [67, 252, 301, 470, 477, 478], "capa": [67, 252, 301, 472], "pass_": [67, 252, 301], "apop": [67, 252, 301], "rpop": [67, 252, 301], "retr": [67, 219, 252, 301], "dele": [67, 252, 301], "rset": [67, 252, 301, 331, 478], "noop": [67, 244, 252, 279, 301, 331, 478], "uidl": [67, 252, 301], "stls": [67, 252, 301, 472], "imap4": [67, 250, 252, 301, 470, 473, 474, 476, 477, 478], "imap4_ssl": [67, 244, 252, 471, 477, 478], "imap4_stream": [67, 244, 252, 477, 478], "internaldate2tupl": [67, 244, 252], "int2ap": [67, 244, 252], "parseflag": [67, 244, 252], "time2internald": [67, 244, 252], "deleteacl": [67, 244, 252, 461], "expung": [67, 244, 252], "getacl": [67, 244, 252, 459], "getannot": [67, 244, 252], "getquota": [67, 244, 252], "getquotaroot": [67, 244, 252], "login_cram_md5": [67, 244, 252], "logout": [67, 244, 252, 473, 476, 478], "lsub": [67, 244, 252], "myright": [67, 244, 252, 461], "proxyauth": [67, 244, 252], "recent": [67, 72, 75, 83, 84, 88, 92, 93, 94, 97, 98, 100, 106, 111, 117, 122, 129, 141, 148, 156, 163, 165, 172, 179, 182, 184, 189, 206, 207, 210, 221, 222, 230, 243, 244, 251, 252, 255, 263, 265, 279, 280, 289, 291, 292, 293, 295, 303, 310, 315, 331, 333, 336, 337, 340, 341, 343, 344, 348, 357, 370, 376, 377, 379, 382, 383, 384, 385, 389, 395, 397, 417, 422, 423, 424, 425, 431, 435, 436, 437, 438, 441, 444, 447, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "setacl": [67, 244, 252, 459], "setannot": [67, 244, 252], "setquota": [67, 244, 252], "starttl": [67, 100, 244, 252, 265, 284, 331, 337, 346, 463, 470, 471, 478], "subscrib": [67, 100, 244, 252, 381, 423, 478], "unsubscrib": [67, 244, 252, 478], "unselect": [67, 244, 252, 477, 478], "xatom": [67, 244, 252], "protocol_vers": [67, 241, 244, 252], "utf8_en": [67, 244, 252, 473], "smtp_ssl": [67, 252, 331, 463, 471, 477, 478], "lmtp": [67, 252, 331, 463, 471, 477, 478], "smtpexcept": [67, 252, 331, 472], "smtpserverdisconnect": [67, 252, 331, 478], "smtpresponseexcept": [67, 252, 331], "smtpsenderrefus": [67, 252, 331], "smtprecipientsrefus": [67, 252, 331], "smtpdataerror": [67, 252, 331], "smtpconnecterror": [67, 252, 331], "smtpheloerror": [67, 252, 331], "smtpnotsupportederror": [67, 252, 331, 478], "smtpauthenticationerror": [67, 252, 331], "docmd": [67, 252, 331], "helo": [67, 252, 331], "ehlo": [67, 252, 331, 471], "ehlo_or_helo_if_need": [67, 252, 331], "has_extn": [67, 252, 331], "sendmail": [67, 83, 100, 103, 197, 204, 252, 315, 331, 446, 470, 473], "send_messag": [67, 196, 204, 252, 331, 470, 473, 478], "rfc": [67, 99, 100, 103, 107, 123, 140, 143, 154, 171, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 219, 226, 231, 233, 237, 238, 239, 240, 241, 244, 250, 252, 255, 258, 262, 265, 267, 268, 284, 301, 313, 323, 331, 333, 337, 342, 343, 354, 361, 388, 389, 390, 402, 403, 414, 446, 457, 459, 461, 462, 463, 464, 470, 471, 473, 475, 477, 478], "4122": [67, 250, 252, 462], "safeuuid": [67, 252, 393, 478], "bytes_l": [67, 252, 393], "urn": [67, 252, 389, 393], "is_saf": [67, 252, 393, 475, 478], "getnod": [67, 252, 393, 475, 478], "uuid1": [67, 252, 393, 462, 475, 478], "uuid3": [67, 252, 393, 462, 478], "uuid4": [67, 252, 393, 462, 478], "uuid5": [67, 252, 393, 462, 478], "namespace_dn": [67, 252, 393, 462], "namespace_url": [67, 252, 393], "namespace_oid": [67, 252, 393], "namespace_x500": [67, 252, 393], "reserved_nc": [67, 252, 393], "rfc_4122": [67, 252, 393], "reserved_microsoft": [67, 252, 393], "reserved_futur": [67, 252, 393], "tcpserver": [67, 100, 241, 252, 263, 415, 464, 478], "udpserv": [67, 252], "unixstreamserv": [67, 252, 334, 478], "unixdatagramserv": [67, 252, 334], "forkingmixin": [67, 252, 334, 471, 475, 478], "threadingmixin": [67, 241, 252, 334, 475, 478], "forkingtcpserv": [67, 252, 334], "forkingudpserv": [67, 252, 334], "threadingtcpserv": [67, 100, 252, 334], "threadingudpserv": [67, 252, 334], "forkingunixstreamserv": [67, 252, 334, 478], "forkingunixdatagramserv": [67, 252, 334, 478], "threadingunixstreamserv": [67, 252, 334], "threadingunixdatagramserv": [67, 252, 334], "baseserv": [67, 252, 334, 471, 478], "handle_request": [67, 100, 166, 252, 329, 334, 402, 415, 464], "service_act": [67, 252, 334, 471], "server_clos": [67, 252, 334, 402, 475, 478], "address_famili": [67, 252, 333, 334], "requesthandlerclass": [67, 241, 252, 334, 402], "server_address": [67, 241, 252, 334, 402], "allow_reuse_address": [67, 100, 252, 334, 415, 463], "request_queue_s": [67, 252, 334], "socket_typ": [67, 252, 334], "finish_request": [67, 252, 334], "get_request": [67, 252, 334], "handle_error": [67, 252, 334, 474, 478], "handle_timeout": [67, 252, 334, 463, 464], "process_request": [67, 100, 252, 334], "server_activ": [67, 252, 334, 415, 463], "server_bind": [67, 252, 334, 415, 463], "verify_request": [67, 252, 334, 478], "baserequesthandl": [67, 252, 334], "streamrequesthandl": [67, 100, 252, 334, 474, 478], "datagramrequesthandl": [67, 252, 334], "mixin": [67, 93, 157, 165, 252, 254, 357, 390, 478], "httpserver": [67, 241, 252, 329, 402], "threadinghttpserv": [67, 241, 252, 475, 478], "basehttprequesthandl": [67, 107, 238, 241, 252, 388, 402, 470, 471, 478], "client_address": [67, 241, 252, 334, 402], "close_connect": [67, 241, 252], "requestlin": [67, 241, 252], "request_vers": [67, 241, 252], "rfile": [67, 241, 252, 334], "wfile": [67, 241, 252, 334, 474, 478], "server_vers": [67, 241, 252], "sys_vers": [67, 241, 252], "error_message_format": [67, 241, 252, 472], "error_content_typ": [67, 241, 252], "messageclass": [67, 241, 252], "handle_one_request": [67, 241, 252], "handle_expect_100": [67, 241, 252], "send_error": [67, 241, 252, 472, 478], "send_respons": [67, 241, 252], "send_head": [67, 241, 252], "send_response_on": [67, 241, 252], "end_head": [67, 241, 252, 471], "flush_head": [67, 241, 252, 471], "log_request": [67, 241, 252], "log_error": [67, 241, 252], "log_messag": [67, 241, 252, 478], "version_str": [67, 241, 252], "date_time_str": [67, 241, 252], "log_date_time_str": [67, 241, 252], "address_str": [67, 241, 252], "simplehttprequesthandl": [67, 241, 252, 329, 475, 478], "extensions_map": [67, 241, 252], "do_head": [67, 152, 241, 252], "do_get": [67, 241, 252], "cgihttprequesthandl": [67, 241, 252, 478], "cgi_directori": [67, 241, 252], "do_post": [67, 241, 252], "cooki": [67, 107, 112, 231, 237, 250, 252, 337, 360, 373, 390, 461, 463, 464, 465, 473, 475, 478], "cookieerror": [67, 240, 252], "basecooki": [67, 240, 252], "simplecooki": [67, 240, 252, 478], "value_decod": [67, 240, 252], "value_encod": [67, 240, 252], "js_output": [67, 240, 252], "morsel": [67, 252, 463, 473, 475, 478], "coded_valu": [67, 240, 252, 473, 475, 478], "isreservedkey": [67, 240, 252], "outputstr": [67, 240, 252], "loaderror": [67, 239, 252], "filecookiejar": [67, 252, 478], "cookiepolici": [67, 252], "defaultcookiepolici": [67, 252, 478], "add_cookie_head": [67, 239, 252], "extract_cooki": [67, 239, 252], "set_polici": [67, 239, 252], "make_cooki": [67, 239, 252, 478], "set_cookie_if_ok": [67, 239, 252], "set_cooki": [67, 239, 252], "clear_session_cooki": [67, 239, 252], "revert": [67, 100, 166, 207, 238, 239, 252, 320, 353, 357, 450, 464, 471, 474, 478], "delayload": [67, 239, 252], "mozillacookiejar": [67, 239, 252, 478], "lwpcookiejar": [67, 239, 252, 478], "set_ok": [67, 239, 252], "return_ok": [67, 239, 252], "domain_return_ok": [67, 239, 252], "path_return_ok": [67, 239, 252], "netscap": [67, 173, 239, 252, 267, 398, 458, 461, 463, 469, 478], "rfc2965": [67, 239, 252], "hide_cookie2": [67, 239, 252], "blocked_domain": [67, 239, 252], "set_blocked_domain": [67, 239, 252], "is_block": [67, 239, 252], "allowed_domain": [67, 239, 252], "set_allowed_domain": [67, 239, 252], "is_not_allow": [67, 239, 252], "rfc2109_as_netscap": [67, 239, 252], "strict_domain": [67, 239, 252], "strict_rfc2965_unverifi": [67, 239, 252], "strict_ns_unverifi": [67, 239, 252], "strict_ns_domain": [67, 239, 252], "strict_ns_set_initial_dollar": [67, 239, 252], "strict_ns_set_path": [67, 239, 252], "domainstrictnodot": [67, 239, 252], "domainstrictnondomain": [67, 239, 252], "domainrfc2965match": [67, 239, 252], "domainliber": [67, 239, 252], "domainstrict": [67, 239, 252], "comment_url": [67, 239, 252], "rfc2109": [67, 239, 252], "port_specifi": [67, 239, 252], "domain_specifi": [67, 239, 252], "domain_initial_dot": [67, 239, 252], "has_nonstandard_attr": [67, 239, 252], "get_nonstandard_attr": [67, 239, 252], "set_nonstandard_attr": [67, 239, 252], "is_expir": [67, 239, 252], "rpc": [67, 79, 243, 250, 252, 258, 270, 413, 421, 459, 460, 461, 462, 463, 464, 474, 478], "serverproxi": [67, 252, 415, 473, 476, 478], "listmethod": [67, 252, 414, 415], "methodsignatur": [67, 252, 414, 415], "methodhelp": [67, 252, 414, 415], "faultcod": [67, 252, 414, 478], "faultstr": [67, 252, 414], "protocolerror": [67, 252], "errmsg": [67, 252, 414], "multical": [67, 252, 415], "simplexmlrpcserv": [67, 252, 414, 459, 461, 462, 463, 464, 465], "cgixmlrpcrequesthandl": [67, 252, 461], "simplexmlrpcrequesthandl": [67, 252, 415, 461, 464], "register_funct": [67, 252, 414, 415, 475, 478], "register_inst": [67, 252, 415], "register_introspection_funct": [67, 252, 415], "register_multicall_funct": [67, 252, 414, 415], "rpc_path": [67, 252, 415, 462], "docxmlrpcserv": [67, 252, 460, 462, 463, 465, 478], "doccgixmlrpcrequesthandl": [67, 252], "docxmlrpcrequesthandl": [67, 252, 415], "set_server_titl": [67, 252, 415], "set_server_nam": [67, 252, 415], "set_server_document": [67, 252, 415], "ipv4": [67, 97, 104, 123, 241, 250, 252, 333, 337, 463, 471, 476, 477, 478], "ipv6": [67, 97, 123, 241, 250, 252, 333, 337, 357, 389, 451, 459, 463, 464, 466, 470, 471, 473, 476, 477, 478], "ip_address": [67, 97, 139, 252, 255, 333], "ip_network": [67, 97, 252, 255], "ip_interfac": [67, 97, 252, 255, 478], "ip": [67, 79, 99, 100, 123, 144, 239, 241, 252, 263, 265, 333, 334, 337, 354, 357, 389, 390, 457, 463, 470, 471, 473, 475, 478], "ipv4address": [67, 97, 252, 255, 473, 478], "max_prefixlen": [67, 252, 255], "explod": [67, 97, 252, 255, 457, 459, 478], "reverse_point": [67, 252, 255, 473, 478], "is_multicast": [67, 252, 255, 478], "is_priv": [67, 252, 255, 478], "is_glob": [67, 252, 255, 260, 347, 472, 478], "is_unspecifi": [67, 252, 255], "is_loopback": [67, 252, 255], "is_link_loc": [67, 252, 255], "ipv6address": [67, 97, 252, 255, 473, 477, 478], "is_site_loc": [67, 252, 255], "ipv4_map": [67, 252, 255], "scope_id": [67, 252, 255, 333, 477], "sixtofour": [67, 252, 255], "teredo": [67, 252, 255], "net": [67, 80, 83, 107, 179, 190, 231, 239, 252, 289, 315, 324, 419, 421, 429, 456, 457, 458, 459, 460, 461, 462, 463, 465, 471, 478], "ipv4network": [67, 97, 252, 255, 473, 475, 478], "network_address": [67, 252, 255], "broadcast_address": [67, 252, 255], "hostmask": [67, 97, 252, 255], "netmask": [67, 97, 252, 255, 473, 478], "with_prefixlen": [67, 252, 255], "with_netmask": [67, 252, 255], "with_hostmask": [67, 252, 255], "num_address": [67, 97, 252, 255], "prefixlen": [67, 252, 255], "address_exclud": [67, 252, 255], "subnet": [67, 252, 255, 471, 473, 478], "supernet": [67, 252, 255, 473], "subnet_of": [67, 252, 255, 475, 478], "supernet_of": [67, 252, 255, 475], "compare_network": [67, 252, 255], "ipv6network": [67, 97, 252, 255, 473, 475, 478], "ipv4interfac": [67, 97, 252, 255, 478], "ipv6interfac": [67, 97, 252, 255, 478], "v4_int_to_pack": [67, 252, 255], "v6_int_to_pack": [67, 252, 255], "summarize_address_rang": [67, 252, 255, 473, 478], "collapse_address": [67, 252, 255, 473, 478], "get_mixed_type_key": [67, 252, 255], "addressvalueerror": [67, 97, 252, 255], "netmaskvalueerror": [67, 97, 252, 255], "wav": [67, 138, 202, 250, 273, 332, 401, 445], "wave_read": [67, 273], "getnchannel": [67, 114, 273, 345, 346, 396], "getsampwidth": [67, 114, 273, 345, 346, 396], "getframer": [67, 114, 273, 345, 346, 396], "getnfram": [67, 114, 273, 345, 346, 396], "getcomptyp": [67, 114, 273, 345, 346, 396], "getcompnam": [67, 114, 273, 345, 346, 396], "getparam": [67, 114, 273, 345, 346, 396, 472], "readfram": [67, 114, 273, 345, 346, 396], "rewind": [67, 114, 273, 345, 346, 396], "getmark": [67, 114, 273, 345, 346, 396], "setpo": [67, 114, 218, 273, 345, 346, 379, 396], "wave_writ": [67, 273], "setnchannel": [67, 114, 273, 345, 346, 396], "setsampwidth": [67, 114, 273, 345, 346, 396, 472], "setframer": [67, 114, 273, 345, 346, 396], "setnfram": [67, 114, 273, 345, 346, 396], "setcomptyp": [67, 114, 273, 345, 346, 396], "setparam": [67, 114, 273, 345, 346, 396], "writeframesraw": [67, 114, 273, 345, 346, 396, 472], "writefram": [67, 114, 273, 345, 346, 396, 472], "rgb_to_yiq": [67, 158, 273], "yiq_to_rgb": [67, 158, 273], "rgb_to_hl": [67, 158, 273, 478], "hls_to_rgb": [67, 158, 273], "rgb_to_hsv": [67, 158, 273], "hsv_to_rgb": [67, 158, 273], "multilingu": [67, 242, 243, 250, 478], "bindtextdomain": [67, 226, 242, 262], "textdomain": [67, 226, 242, 262], "dgettext": [67, 226, 242, 262], "ngettext": [67, 226, 242, 478], "dngettext": [67, 226, 242], "pgettext": [67, 226, 242, 476, 478], "dpgettext": [67, 226, 242], "npgettext": [67, 226, 242], "dnpgettext": [67, 226, 242], "nulltransl": [67, 242, 468], "_pars": [67, 226, 242], "add_fallback": [67, 226, 242], "gnutransl": [67, 242], "catalog": [67, 242, 457, 458, 460, 478], "localeconv": [67, 242, 262, 340, 447, 474, 475, 478], "d_t_fmt": [67, 242, 262], "d_fmt": [67, 242, 262], "t_fmt": [67, 242, 262], "t_fmt_ampm": [67, 242, 262], "radixchar": [67, 242, 262], "thousep": [67, 242, 262], "yesexpr": [67, 242, 262], "noexpr": [67, 242, 262], "crncystr": [67, 242, 262], "era": [67, 242, 262, 462], "era_d_t_fmt": [67, 242, 262], "era_d_fmt": [67, 242, 262], "era_t_fmt": [67, 242, 262], "alt_digit": [67, 242, 262], "getdefaultlocal": [67, 242, 262, 450, 468, 469, 478], "getlocal": [67, 242, 262, 468, 478], "getpreferredencod": [67, 117, 242, 254, 262, 289, 344, 468, 469, 475, 478], "resetlocal": [67, 242, 262, 468, 478], "strcoll": [67, 105, 222, 242, 262, 470], "strxfrm": [67, 86, 105, 242, 262], "format_str": [67, 242, 262, 341, 447, 462, 469, 473, 475, 478], "currenc": [67, 182, 242, 262, 462, 478], "deloc": [67, 242, 262, 473, 478], "atof": [67, 242, 262, 461, 462], "atoi": [67, 71, 242, 262], "lc_collat": [67, 242, 262], "lc_time": [67, 147, 242, 262], "lc_monetari": [67, 242, 262, 478], "lc_messag": [67, 226, 242, 262], "lc_numer": [67, 242, 262, 340, 473, 474, 475, 478], "lc_all": [67, 226, 242, 262, 357, 447, 450, 468, 475, 478], "char_max": [67, 242, 262], "tip": [67, 221, 242, 243, 457, 464, 478], "dcgettext": [67, 226, 242, 262], "turtl": [67, 152, 218, 243, 250, 364, 463, 465, 468, 469, 470, 478], "draw": [67, 91, 152, 173, 218, 243, 314, 371, 463, 478], "pen": [67, 218], "graphic": [67, 84, 91, 106, 154, 169, 173, 218, 245, 250, 364, 370, 383, 398, 463], "turtlescreen": [67, 218], "screen": [67, 84, 91, 94, 96, 106, 152, 173, 175, 218, 243, 316, 344, 364, 370, 371, 373, 457, 459, 460, 463, 470, 473, 477, 478], "rawturtl": [67, 218, 469, 478], "motion": [67, 173, 218, 366], "bk": [67, 218, 379], "rt": [67, 146, 218, 221, 230, 266, 357, 379, 478], "setposit": [67, 218, 379], "teleport": [67, 218, 379, 478], "setx": [67, 92, 218, 221, 379, 456], "seti": [67, 218, 379], "sethead": [67, 218, 379], "seth": [67, 218, 379, 478], "circl": [67, 93, 152, 218, 271, 379, 463], "stamp": [67, 179, 218, 379, 460, 461, 478], "clearstamp": [67, 218, 379], "toward": [67, 84, 143, 182, 189, 192, 201, 214, 217, 218, 221, 263, 271, 340, 348, 359, 361, 379, 423, 458, 460, 462, 463, 469, 472, 477, 478], "xcor": [67, 218, 379], "ycor": [67, 218, 379], "distanc": [67, 117, 151, 152, 218, 266, 271, 339, 364, 367, 379, 468, 476, 478], "measur": [67, 91, 92, 102, 130, 136, 138, 151, 182, 186, 218, 222, 295, 304, 318, 330, 334, 361, 362, 363, 364, 367, 377, 436, 457, 460, 461, 462, 463, 464, 469, 471, 472, 475, 476, 477, 478], "pendown": [67, 218, 379], "pd": [67, 218, 379], "penup": [67, 218, 379], "pu": [67, 218, 379], "pensiz": [67, 218, 379], "isdown": [67, 218, 379], "pencolor": [67, 218, 379], "fillcolor": [67, 218, 379], "begin_fil": [67, 218, 379], "end_fil": [67, 218, 379], "hideturtl": [67, 218, 379], "showturtl": [67, 218, 379], "st": [67, 218, 379, 460, 474, 475, 478], "isvis": [67, 218, 379], "resizemod": [67, 218, 379], "shapes": [67, 218, 379], "turtles": [67, 218, 379], "shearfactor": [67, 218, 379], "tilt": [67, 218, 379], "settiltangl": [67, 218, 379, 468, 469, 478], "tiltangl": [67, 218, 379, 468, 478], "shapetransform": [67, 218, 379], "get_shapepoli": [67, 218, 379], "onreleas": [67, 218, 379], "ondrag": [67, 218, 379], "begin_poli": [67, 218, 379], "end_poli": [67, 218, 379], "get_poli": [67, 218, 379], "getturtl": [67, 218, 379], "getpen": [67, 218, 379], "getscreen": [67, 218, 379], "setundobuff": [67, 218, 379], "undobufferentri": [67, 218, 379], "bgcolor": [67, 218, 379], "bgpic": [67, 218, 379], "clearscreen": [67, 218, 379], "resetscreen": [67, 218, 379], "screensiz": [67, 218, 379], "setworldcoordin": [67, 218, 379], "anim": [67, 93, 218, 226, 371, 441, 463, 473], "tracer": [67, 218, 375, 379, 463, 478], "onkey": [67, 218, 379], "onkeyreleas": [67, 218, 379], "onkeypress": [67, 218, 379], "onclick": [67, 218, 379], "onscreenclick": [67, 218, 379], "ontim": [67, 218, 379], "mainloop": [67, 80, 218, 243, 364, 371, 379, 478], "textinput": [67, 218, 379, 478], "numinput": [67, 218, 379, 478], "colormod": [67, 218, 379], "getcanva": [67, 218, 379], "getshap": [67, 218, 379], "register_shap": [67, 218, 379], "addshap": [67, 218, 379], "window_height": [67, 218, 379], "window_width": [67, 218, 379], "bye": [67, 152, 166, 218, 244, 284, 379, 471], "exitonclick": [67, 218, 379], "rawpen": [67, 218, 379], "scrolledcanva": [67, 218, 379], "addcompon": [67, 218, 379], "vec2d": [67, 218, 379, 478], "explan": [67, 103, 107, 163, 179, 186, 218, 241, 262, 267, 279, 293, 297, 300, 315, 333, 340, 348, 361, 364, 390, 457, 458, 459, 460, 461, 462, 463, 470, 478], "write_docstringdict": [67, 218, 379], "cmdloop": [67, 152, 218], "onecmd": [67, 152, 218], "emptylin": [67, 152, 218], "completedefault": [67, 152, 218], "precmd": [67, 152, 218], "postcmd": [67, 152, 218], "preloop": [67, 152, 218], "postloop": [67, 152, 218], "identchar": [67, 152, 218], "lastcmd": [67, 152, 218], "cmdqueue": [67, 152, 218], "intro": [67, 152, 218, 337, 454, 464], "doc_head": [67, 152, 218], "misc_head": [67, 152, 218], "undoc_head": [67, 152, 218], "ruler": [67, 152, 218], "use_rawinput": [67, 152, 218], "get_token": [67, 218, 327], "push_token": [67, 218, 327], "read_token": [67, 218, 327], "sourcehook": [67, 218, 327], "push_sourc": [67, 218, 327], "pop_sourc": [67, 218, 327], "error_lead": [67, 218, 327], "wordchar": [67, 218, 327], "escapedquot": [67, 218, 327], "whitespace_split": [67, 218, 327], "infil": [67, 117, 119, 137, 218, 258, 297, 327, 375, 447, 466, 470, 478], "instream": [67, 218, 327], "punctuation_char": [67, 218, 327, 474, 478], "tcl": [67, 80, 243, 250, 363, 370, 371, 447, 454, 456, 457, 460, 463, 464, 467, 468, 470, 473, 474, 476, 477, 478], "master": [67, 103, 106, 185, 189, 288, 289, 291, 295, 305, 315, 363, 364, 365, 368, 369, 371, 379, 463, 478], "children": [67, 84, 99, 101, 119, 129, 260, 263, 279, 289, 292, 308, 310, 318, 357, 363, 364, 371, 379, 383, 384, 385, 405, 406, 407, 408, 417, 457, 464, 475, 478], "life": [67, 86, 89, 163, 222, 280, 295, 336, 353, 363, 405, 417, 436, 456, 457, 463, 476, 478], "concept": [67, 91, 94, 97, 98, 99, 102, 106, 136, 163, 182, 190, 240, 246, 254, 257, 279, 297, 305, 336, 340, 353, 360, 363, 379, 381, 385, 407, 408, 422, 427, 459, 460, 465, 471, 472, 473, 478], "handi": [67, 84, 91, 92, 93, 102, 103, 111, 147, 163, 172, 186, 288, 340, 363, 384, 457, 461], "packer": [67, 346, 363], "coupl": [67, 74, 84, 89, 100, 102, 117, 123, 201, 204, 205, 263, 279, 288, 329, 363, 384, 385, 390, 404, 456, 472, 474, 475, 478], "createfilehandl": [67, 363, 364, 478], "deletefilehandl": [67, 363, 364], "colorchoos": [67, 250, 363, 364, 478], "choos": [67, 72, 74, 84, 88, 89, 94, 100, 102, 103, 106, 117, 154, 159, 189, 201, 221, 222, 231, 241, 246, 250, 263, 271, 280, 288, 291, 295, 304, 314, 336, 337, 343, 348, 360, 363, 364, 370, 384, 408, 421, 427, 456, 459, 460, 464, 470, 471, 472, 475, 478], "dialog": [67, 76, 91, 243, 250, 277, 288, 346, 357, 363, 364, 370, 379, 456, 472, 473, 474, 475, 476, 477, 478], "chooser": [67, 363, 365], "askcolor": [67, 363, 365], "font": [67, 100, 106, 163, 208, 243, 250, 359, 363, 364, 370, 371, 379, 467, 474, 475, 477, 478], "bold": [67, 91, 147, 173, 363, 364, 367], "ital": [67, 147, 173, 363, 367], "roman": [67, 106, 363, 367, 382, 460, 478], "cget": [67, 363, 367, 371], "metric": [67, 84, 363, 367, 478], "nametofont": [67, 363, 367, 478], "simpledialog": [67, 363, 364, 478], "askfloat": [67, 185, 363], "askinteg": [67, 185, 363, 478], "askstr": [67, 185, 363], "buttonbox": [67, 185, 363, 370], "filedialog": [67, 363, 364], "askopenfil": [67, 185, 363], "asksaveasfil": [67, 185, 363], "askopenfilenam": [67, 185, 363], "asksaveasfilenam": [67, 185, 363], "askdirectori": [67, 185, 363], "savea": [67, 185, 363], "cancel_command": [67, 185, 363], "dirs_double_ev": [67, 185, 363], "dirs_select_ev": [67, 185, 363], "files_double_ev": [67, 185, 363], "files_select_ev": [67, 185, 363], "filter_command": [67, 185, 363], "get_filt": [67, 185, 363], "get_select": [67, 185, 363], "ok_ev": [67, 185, 363], "set_filt": [67, 185, 363], "set_select": [67, 185, 363], "loadfiledialog": [67, 185, 363], "ok_command": [67, 185, 363], "savefiledialog": [67, 185, 363], "commondialog": [67, 363, 364, 365], "messagebox": [67, 172, 185, 250, 363, 364, 478], "showinfo": [67, 363, 368], "showwarn": [67, 311, 363, 368, 395, 463, 478], "showerror": [67, 363, 368], "askquest": [67, 363, 368], "askokcancel": [67, 363, 368], "askretrycancel": [67, 363, 368], "askyesno": [67, 363, 368], "askyesnocancel": [67, 363, 368], "scrolledtext": [67, 250, 363, 364], "vbar": [67, 260, 363, 369, 372], "dnd": [67, 250, 363, 364], "drag": [67, 250, 363, 364, 370, 371, 379, 478], "dndhandler": [67, 363, 366], "on_mot": [67, 363, 366], "on_releas": [67, 363, 366], "dnd_start": [67, 363, 366], "scrollabl": [67, 243, 363, 370], "instat": [67, 363, 371], "combobox": [67, 363, 370], "spinbox": [67, 363, 370, 475, 476, 478], "notebook": [67, 363, 370, 476, 478], "enable_travers": [67, 363, 371], "progressbar": [67, 363], "sizegrip": [67, 363], "treeview": [67, 363, 476, 478], "bbox": [67, 363, 371], "get_children": [67, 260, 347, 363, 371], "set_children": [67, 363, 371], "focus": [67, 80, 84, 98, 107, 179, 185, 204, 243, 353, 363, 364, 371, 379, 389, 462, 464, 470, 471, 472, 474, 478], "identify_row": [67, 363, 371], "identify_column": [67, 363, 371], "identify_region": [67, 363, 371], "identify_el": [67, 363, 371], "prev": [67, 173, 363, 371], "reattach": [67, 363, 371], "selection_set": [67, 363, 371, 476, 478], "selection_add": [67, 363, 371, 478], "selection_remov": [67, 363, 371, 478], "selection_toggl": [67, 363, 371, 478], "tag_bind": [67, 363, 371], "tag_configur": [67, 363, 371], "tag_ha": [67, 363, 371, 478], "xview": [67, 363, 371], "yview": [67, 363, 371], "element_cr": [67, 363, 371], "element_nam": [67, 363, 371], "element_opt": [67, 363, 371], "theme_cr": [67, 363, 371], "theme_set": [67, 363, 371], "theme_nam": [67, 363, 371], "theme_us": [67, 363, 371], "tix": [67, 80, 250, 363, 364, 460, 474, 478], "balloon": [67, 363, 370], "labelentri": [67, 363, 370], "labelfram": [67, 363, 370, 371], "meter": [67, 93, 363, 370], "optionmenu": [67, 363, 370, 478], "popupmenu": [67, 363, 370], "stdbuttonbox": [67, 363, 370], "dirlist": [67, 363, 370], "dirtre": [67, 363, 370], "dirselectdialog": [67, 363, 370], "dirselectbox": [67, 363, 370], "exfileselectbox": [67, 363, 370], "fileselectbox": [67, 363, 370], "fileentri": [67, 363, 370], "hierarch": [67, 99, 241, 263, 264, 363, 364, 371, 389, 407, 408, 415, 427], "listbox": [67, 363, 371, 478], "hlist": [67, 363, 370, 478], "checklist": [67, 363, 370], "tabular": [67, 363], "tlist": [67, 363, 370], "panedwindow": [67, 363, 370, 371, 478], "listnotebook": [67, 363, 370], "inputon": [67, 363, 370], "geometri": [67, 363, 364, 369, 371, 478], "tixcommand": [67, 363, 370], "tix_configur": [67, 363, 370], "tix_cget": [67, 363, 370], "tix_getbitmap": [67, 363, 370], "tix_addbitmapdir": [67, 363, 370], "tix_filedialog": [67, 363, 370], "tix_getimag": [67, 363, 370], "tix_option_get": [67, 363, 370], "tix_resetopt": [67, 363, 370], "menu": [67, 91, 363, 364, 370, 379, 423, 456, 462, 466, 470, 474, 475, 476, 477, 478], "editor": [67, 71, 89, 103, 106, 246, 363, 430, 452, 457, 463, 472, 473, 474, 475, 476, 478], "menus": [67, 363, 364, 478], "calltip": [67, 363, 478], "newtyp": [67, 183, 474, 478], "nomin": [67, 119, 183, 478], "anystr": [67, 183, 381], "literalstr": [67, 183, 381, 468, 478], "noreturn": [67, 183, 381, 478], "classvar": [67, 177, 183, 381, 468, 474, 478], "notrequir": [67, 183, 381, 468, 478], "typeguard": [67, 183, 381, 467, 478], "typevar": [67, 119, 183, 187, 260, 340, 380, 381, 422, 468, 469, 478], "__covariant__": [67, 183, 381], "__contravariant__": [67, 183, 381], "__infer_variance__": [67, 183, 381], "__bound__": [67, 183, 381, 422, 424], "__constraints__": [67, 183, 381, 422], "typevartupl": [67, 119, 183, 187, 260, 340, 381, 422, 426, 468, 469, 478], "paramspec": [67, 119, 183, 187, 260, 340, 381, 422, 426, 467, 469, 478], "paramspecarg": [67, 183, 381, 467, 478], "paramspeckwarg": [67, 183, 381, 467, 478], "typealiastyp": [67, 183, 187, 381, 422, 431, 469, 478], "__value__": [67, 183, 381, 424, 431, 478], "__supertype__": [67, 183, 381, 478], "runtime_check": [67, 183, 381, 467, 469, 476, 478], "__total__": [67, 183, 381], "__required_keys__": [67, 183, 381, 478], "__optional_keys__": [67, 183, 381, 478], "supportsab": [67, 183, 381], "supportsbyt": [67, 183, 381, 468, 478], "supportscomplex": [67, 183, 381, 468, 478], "supportsfloat": [67, 183, 381], "supportsindex": [67, 183, 381, 476, 478], "supportsint": [67, 183, 217, 381, 468, 476, 478], "supportsround": [67, 183, 381], "textio": [67, 183, 248, 381, 478], "binaryio": [67, 183, 248, 381, 478], "assert_typ": [67, 183, 381, 468, 478], "assert_nev": [67, 183, 381, 468, 478], "reveal_typ": [67, 183, 381, 468, 478], "dataclass_transform": [67, 183, 381, 468, 469, 478], "get_overload": [67, 183, 381, 468, 478], "clear_overload": [67, 183, 381, 468, 478], "no_type_check": [67, 183, 381, 468, 478], "no_type_check_decor": [67, 183, 381], "type_check_on": [67, 183, 381, 478], "get_type_hint": [67, 86, 183, 381, 468, 475, 477, 478], "get_origin": [67, 183, 381, 476, 478], "get_arg": [67, 183, 381, 467, 468, 476, 477, 478], "is_typeddict": [67, 183, 381, 467, 478], "forwardref": [67, 183, 381, 478], "type_check": [67, 87, 183, 246, 288, 346, 381, 474, 478], "abstractset": [67, 183, 381], "asynccontextmanag": [67, 165, 183, 311, 381, 385, 423, 475, 478], "timelin": [67, 183], "onlin": [67, 102, 183, 250, 364, 379, 394, 409, 459, 463], "recogn": [67, 72, 84, 92, 97, 103, 117, 152, 154, 163, 173, 183, 187, 192, 199, 214, 224, 231, 245, 246, 254, 258, 262, 272, 278, 288, 289, 293, 295, 315, 327, 332, 341, 357, 361, 364, 372, 381, 384, 389, 390, 411, 430, 431, 456, 457, 465, 470, 471, 472, 473, 478], "dont_accept_true_for_1": [67, 183, 189], "dont_accept_blanklin": [67, 183, 189], "normalize_whitespac": [67, 183, 189], "ignore_exception_detail": [67, 183, 189, 464], "comparison_flag": [67, 183, 189], "report_udiff": [67, 183, 189, 461], "report_cdiff": [67, 183, 189, 461], "report_ndiff": [67, 183, 189, 461], "report_only_first_failur": [67, 183, 189], "fail_fast": [67, 183, 189, 472], "reporting_flag": [67, 183, 189], "register_optionflag": [67, 183, 189], "testfil": [67, 183, 189, 462, 478], "testmod": [67, 183, 189, 357, 446, 461, 466], "run_docstring_exampl": [67, 183, 189], "docfilesuit": [67, 183, 189, 462], "doctestsuit": [67, 183, 189, 383, 460, 473, 478], "set_unittest_reportflag": [67, 183, 189], "exc_msg": [67, 183, 189], "doctestfind": [67, 183, 461, 478], "doctestpars": [67, 183], "get_doctest": [67, 183, 189], "get_exampl": [67, 183, 189], "doctestrunn": [67, 183, 461], "report_start": [67, 183, 189], "report_success": [67, 183, 189], "report_failur": [67, 183, 189], "report_unexpected_except": [67, 183, 189], "summar": [67, 92, 102, 106, 182, 183, 189, 255, 326, 340, 381, 383, 422, 425, 427, 461, 470], "outputcheck": [67, 183, 461], "output_differ": [67, 183, 189], "script_from_exampl": [67, 183, 189], "testsourc": [67, 183, 189], "debug_src": [67, 183, 189], "debugrunn": [67, 183, 189], "doctestfailur": [67, 183, 189], "got": [67, 72, 107, 123, 133, 135, 183, 189, 263, 279, 331, 336, 381, 390, 425, 436, 444, 450, 462, 466, 469, 476, 478], "unexpectedexcept": [67, 183, 189], "soapbox": [67, 183], "discoveri": [67, 183, 189, 276, 331, 414, 470, 472, 473, 478], "organ": [67, 83, 87, 94, 99, 100, 103, 183, 189, 254, 337, 421, 427, 460, 477, 478], "skipif": [67, 183, 357, 383], "skipunless": [67, 183, 383, 466], "expectedfailur": [67, 183, 357, 383, 466, 478], "skiptest": [67, 183, 357, 383, 464, 472, 478], "subtest": [67, 183, 472, 478], "testcas": [67, 183, 189, 357, 383, 384, 385, 421, 446, 464, 466, 468, 469, 470, 471, 472, 476, 478], "teardown": [67, 183, 189, 357, 383, 384, 385, 464, 478], "setupclass": [67, 183, 464, 476, 478], "teardownclass": [67, 183, 464, 478], "assertequ": [67, 109, 183, 357, 383, 384, 385, 446, 464, 468, 469, 470, 472, 476, 478], "assertnotequ": [67, 109, 183, 383, 468, 469, 470], "asserttru": [67, 109, 183, 383, 464, 468, 469, 470], "assertfals": [67, 109, 183, 383, 464, 468, 469], "asserti": [67, 183, 383, 385, 464], "assertisnot": [67, 183, 383, 464], "assertisnon": [67, 183, 383, 464, 466], "assertisnotnon": [67, 183, 383, 464, 466], "assertin": [67, 183, 383, 464], "assertnotin": [67, 183, 383, 464], "assertisinst": [67, 183, 383, 464], "assertnotisinst": [67, 183, 383, 464], "assertrais": [67, 109, 183, 383, 446, 464, 466, 468, 469, 471, 478], "assertraisesregex": [67, 183, 383, 468, 469, 471, 478], "assertwarn": [67, 183, 383, 470, 471, 478], "assertwarnsregex": [67, 183, 383, 470, 471, 478], "assertlog": [67, 183, 383, 467, 472, 478], "assertnolog": [67, 183, 383, 467, 478], "assertalmostequ": [67, 109, 183, 383, 464, 468, 469, 470, 478], "assertnotalmostequ": [67, 109, 183, 383, 464, 468, 469, 470, 478], "assertgreat": [67, 183, 383, 464], "assertgreaterequ": [67, 183, 383, 464], "assertless": [67, 183, 383, 464], "assertlessequ": [67, 183, 383, 464], "assertregex": [67, 183, 383, 468, 469, 470, 478], "assertnotregex": [67, 183, 383, 468, 469], "assertcountequ": [67, 183, 383, 470], "addtypeequalityfunc": [67, 183, 383, 464], "assertmultilineequ": [67, 183, 383, 464], "assertsequenceequ": [67, 183, 383, 464, 466, 478], "assertlistequ": [67, 183, 383, 464, 466, 478], "asserttupleequ": [67, 183, 383, 464, 466, 478], "assertsetequ": [67, 183, 383, 464, 466], "assertdictequ": [67, 183, 383, 464, 466], "failureexcept": [67, 183, 189, 383], "longmessag": [67, 107, 183, 241, 383, 464, 478], "maxdiff": [67, 183, 383, 470], "counttestcas": [67, 183, 383], "defaulttestresult": [67, 183, 383], "shortdescript": [67, 183, 383, 478], "addcleanup": [67, 183, 383, 384, 385, 464, 476], "entercontext": [67, 183, 383, 468, 478], "docleanup": [67, 183, 383, 464], "addclasscleanup": [67, 183, 383, 476, 478], "enterclasscontext": [67, 183, 383, 468, 478], "doclasscleanup": [67, 183, 383, 478], "isolatedasynciotestcas": [67, 183, 383, 468, 476, 478], "asyncsetup": [67, 183, 383, 476], "asyncteardown": [67, 183, 383, 476], "addasynccleanup": [67, 183, 383], "enterasynccontext": [67, 183, 383, 468, 478], "functiontestcas": [67, 183, 383], "testsuit": [67, 183, 189, 357, 383, 460, 472, 473, 478], "addtest": [67, 183, 189, 383], "testload": [67, 183, 357, 383, 384, 464, 468, 469, 473, 478], "loadtestsfromtestcas": [67, 183, 383, 468, 478], "loadtestsfrommodul": [67, 183, 357, 383, 468, 469, 473, 478], "loadtestsfromnam": [67, 183, 383, 464], "gettestcasenam": [67, 183, 383, 468, 469, 478], "discov": [67, 102, 111, 179, 183, 192, 201, 240, 357, 383, 410, 458, 459, 460, 464, 470, 472, 478], "testmethodprefix": [67, 183, 383], "sorttestmethodsus": [67, 183, 383], "suiteclass": [67, 183, 383, 464], "testnamepattern": [67, 183, 383], "testresult": [67, 183, 189, 383, 464, 466, 471, 478], "unexpectedsuccess": [67, 183, 383], "collecteddur": [67, 183, 383, 478], "shouldstop": [67, 183, 383], "testsrun": [67, 183, 383], "failfast": [67, 183, 383, 464, 478], "tb_local": [67, 183, 383], "wassuccess": [67, 183, 383], "starttest": [67, 183, 383], "stoptest": [67, 183, 383], "starttestrun": [67, 183, 383, 464, 478], "stoptestrun": [67, 183, 383, 464, 478], "adderror": [67, 183, 383, 478], "addfailur": [67, 183, 383, 478], "addsuccess": [67, 183, 383], "addskip": [67, 183, 383, 478], "addexpectedfailur": [67, 183, 383], "addunexpectedsuccess": [67, 183, 383], "addsubtest": [67, 183, 383, 478], "adddur": [67, 183, 383, 478], "texttestresult": [67, 183, 383, 469, 478], "defaulttestload": [67, 183, 383], "texttestrunn": [67, 183, 383, 478], "_makeresult": [67, 183, 383], "load_test": [67, 183, 189, 357, 473, 478], "fixtur": [67, 183, 464], "setupmodul": [67, 183, 464, 476, 478], "teardownmodul": [67, 183, 464, 478], "addmodulecleanup": [67, 183, 383, 476, 478], "entermodulecontext": [67, 183, 383, 468, 478], "domodulecleanup": [67, 183, 383, 478], "installhandl": [67, 183, 383], "registerresult": [67, 183, 383], "removeresult": [67, 183, 383], "assert_cal": [67, 183, 384, 474, 478], "assert_called_onc": [67, 183, 384, 474, 478], "assert_called_with": [67, 183, 384, 385, 478], "assert_called_once_with": [67, 183, 384, 385, 478], "assert_any_cal": [67, 183, 384], "assert_has_cal": [67, 183, 384, 385, 478], "assert_not_cal": [67, 183, 384, 473, 478], "reset_mock": [67, 183, 384, 474, 478], "mock_add_spec": [67, 183, 384], "attach_mock": [67, 183, 384, 385, 478], "configure_mock": [67, 183, 384, 385, 478], "_get_child_mock": [67, 183, 384, 385], "call_count": [67, 183, 384, 385], "return_valu": [67, 141, 183, 187, 384, 385, 470, 472, 474, 478], "side_effect": [67, 183, 384, 385, 474, 478], "call_arg": [67, 183, 384, 385, 478], "call_args_list": [67, 183, 384, 385], "method_cal": [67, 183, 384, 385], "mock_cal": [67, 183, 384, 385, 478], "noncallablemock": [67, 183, 384, 478], "propertymock": [67, 183, 384, 478], "asyncmock": [67, 183, 384, 385, 476, 478], "assert_await": [67, 183, 384], "assert_awaited_onc": [67, 183, 384, 385], "assert_awaited_with": [67, 183, 384], "assert_awaited_once_with": [67, 183, 384], "assert_any_await": [67, 183, 384], "assert_has_await": [67, 183, 384, 478], "assert_not_await": [67, 183, 384], "await_count": [67, 183, 384], "await_arg": [67, 183, 384], "await_args_list": [67, 183, 384, 478], "patcher": [67, 183, 385, 478], "stopal": [67, 183, 384, 478], "test_prefix": [67, 183], "magicmock": [67, 183, 473, 478], "noncallablemagicmock": [67, 183, 384], "call_list": [67, 183, 384, 385], "create_autospec": [67, 183, 478], "filter_dir": [67, 183], "mock_open": [67, 183, 472, 478], "autospecc": [67, 183, 478], "seal": [67, 183, 211, 470, 475, 478], "cope": [67, 183, 461, 478], "2to3": [67, 86, 183, 250, 463, 464, 465, 468, 470, 478], "fixer": [67, 183, 478], "lib2to3": [67, 86, 183, 468, 477, 478], "regress": [67, 77, 84, 89, 183, 189, 250, 258, 339, 464, 472, 473, 478], "testfail": [67, 183, 357], "resourcedeni": [67, 183, 357], "is_jython": [67, 183, 357], "is_android": [67, 183, 357, 478], "unix_shel": [67, 183, 357, 478], "loopback_timeout": [67, 183, 357, 478], "internet_timeout": [67, 183, 357, 478], "short_timeout": [67, 183, 357, 478], "long_timeout": [67, 183, 357, 478], "pipe_max_s": [67, 183, 357], "sock_max_s": [67, 183, 357], "test_support_dir": [67, 183, 357], "test_home_dir": [67, 183, 357], "test_data_dir": [67, 183, 357], "max_py_ssize_t": [67, 183, 357], "max_memus": [67, 183, 357], "real_max_memus": [67, 183, 357], "missing_c_docstr": [67, 183, 357], "have_docstr": [67, 183, 357], "test_http_url": [67, 183, 357, 478], "always_eq": [67, 183, 357], "never_eq": [67, 183, 357], "largest": [67, 94, 98, 163, 179, 182, 183, 271, 318, 340, 348, 357, 457, 458, 459, 460, 461, 462, 463, 471, 478], "smallest": [67, 94, 106, 179, 182, 183, 271, 340, 348, 357, 364, 377, 447, 460, 461, 462, 463, 478], "busy_retri": [67, 183, 357], "sleeping_retri": [67, 183, 357], "is_resource_en": [67, 183, 357], "python_is_optim": [67, 183, 357], "with_pymalloc": [67, 183, 357], "sortdict": [67, 183, 357], "findfil": [67, 183, 357, 478], "match_test": [67, 183, 357, 377], "set_match_test": [67, 183, 357], "run_unittest": [67, 183, 357, 478], "run_doctest": [67, 183, 357, 377], "get_pages": [67, 183, 357], "check_impl_detail": [67, 183, 357], "set_memlimit": [67, 183, 357], "record_original_stdout": [67, 183, 357], "get_original_stdout": [67, 183, 357], "args_from_interpreter_flag": [67, 183, 357], "optim_args_from_interpreter_flag": [67, 183, 357], "captured_stdin": [67, 183, 357], "captured_stdout": [67, 183, 357], "captured_stderr": [67, 183, 357, 478], "disable_faulthandl": [67, 183, 357], "gc_collect": [67, 183, 357], "disable_gc": [67, 183, 357], "swap_attr": [67, 183, 357, 478], "swap_item": [67, 183, 357, 478], "flush_std_stream": [67, 183, 357], "print_warn": [67, 183, 357], "wait_process": [67, 183, 357, 478], "calcobjs": [67, 183, 357, 478], "calcvobjs": [67, 183, 357], "checksizeof": [67, 183, 357], "anticipate_failur": [67, 183, 357], "system_must_validate_cert": [67, 183, 357], "run_with_local": [67, 183, 357], "run_with_tz": [67, 183, 357], "requires_freebsd_vers": [67, 183, 357], "requires_linux_vers": [67, 183, 357], "requires_mac_vers": [67, 183, 357], "requires_ieee_754": [67, 183, 357], "requires_zlib": [67, 183, 357, 478], "requires_gzip": [67, 183, 357], "requires_bz2": [67, 183, 357], "requires_lzma": [67, 183, 357], "requires_resourc": [67, 183, 357], "requires_docstr": [67, 183, 357], "requires_limited_api": [67, 183, 357], "cpython_on": [67, 183, 357, 478], "impl_detail": [67, 183, 357], "no_trac": [67, 183, 357], "refcount_test": [67, 183, 357], "bigmemtest": [67, 183, 357], "bigaddrspacetest": [67, 183, 357], "check_syntax_error": [67, 183, 357], "open_urlresourc": [67, 183, 357], "reap_children": [67, 183, 357], "get_attribut": [67, 183, 357], "catch_unraisable_except": [67, 183, 357, 478], "load_package_test": [67, 183, 357, 478], "detect_api_mismatch": [67, 183, 357], "run_in_subinterp": [67, 183, 357], "check_free_after_iter": [67, 183, 357], "missing_compiler_execut": [67, 183, 357, 478], "check__all__": [67, 183, 357, 478], "skip_if_broken_multiprocessing_synchron": [67, 183, 357, 478], "check_disallow_instanti": [67, 183, 357], "adjust_int_max_str_digit": [67, 183, 357], "suppresscrashreport": [67, 183, 357, 478], "savesign": [67, 183, 357], "matcher": [67, 183, 357, 385], "match_valu": [67, 183, 357], "socket_help": [67, 183, 250], "ipv6_en": [67, 183, 357], "find_unused_port": [67, 183, 357, 478], "bind_port": [67, 183, 357], "bind_unix_socket": [67, 183, 357], "skip_unless_bind_unix_socket": [67, 183, 357, 478], "transient_internet": [67, 183, 357], "script_help": [67, 183, 250, 478], "interpreter_requires_environ": [67, 183, 357], "run_python_until_end": [67, 183, 357, 478], "assert_python_ok": [67, 183, 357, 478], "assert_python_failur": [67, 183, 357, 478], "spawn_python": [67, 183, 357], "kill_python": [67, 183, 357], "make_script": [67, 183, 357], "make_zip_script": [67, 183, 357], "make_pkg": [67, 183, 357], "make_zip_pkg": [67, 183, 357], "bytecode_help": [67, 183, 250, 478], "bytecodetestcas": [67, 183, 357], "get_disassembly_as_str": [67, 183, 357], "assertinbytecod": [67, 183, 357], "assertnotinbytecod": [67, 183, 357, 478], "threading_help": [67, 183, 250], "reap_thread": [67, 183, 357], "start_thread": [67, 100, 183, 357, 478], "threading_cleanup": [67, 183, 357, 478], "threading_setup": [67, 183, 357, 478], "wait_threads_exit": [67, 183, 357], "catch_threading_except": [67, 183, 357, 478], "os_help": [67, 183, 250], "fs_nonascii": [67, 183, 357], "savedcwd": [67, 183, 357], "testfn": [67, 183, 357, 478], "testfn_nonascii": [67, 183, 357], "testfn_unencod": [67, 183, 357], "testfn_undecod": [67, 183, 357], "testfn_unicod": [67, 183, 357], "environmentvarguard": [67, 183, 357, 463], "fakepath": [67, 183, 357], "can_symlink": [67, 183, 357], "can_xattr": [67, 183, 357], "change_cwd": [67, 183, 357], "create_empty_fil": [67, 183, 357], "fd_count": [67, 183, 357, 478], "fs_is_case_insensit": [67, 183, 357], "make_bad_fd": [67, 183, 357], "skip_unless_symlink": [67, 183, 357], "skip_unless_xattr": [67, 183, 357], "temp_cwd": [67, 183, 357, 478], "temp_dir": [67, 183, 357], "temp_umask": [67, 183, 357], "import_help": [67, 183, 250, 478], "import_fresh_modul": [67, 183, 357, 478], "import_modul": [67, 84, 100, 183, 221, 264, 276, 320, 357, 423, 427, 431, 464, 469, 471, 478], "modules_setup": [67, 183, 357], "modules_cleanup": [67, 183, 357], "make_legacy_pyc": [67, 183, 357, 478], "cleanimport": [67, 183, 357], "dirsonsyspath": [67, 183, 357], "warnings_help": [67, 183, 250, 478], "ignore_warn": [67, 183, 357], "check_no_resource_warn": [67, 183, 357, 478], "check_syntax_warn": [67, 183, 357, 478], "check_warn": [67, 183, 357, 463], "warningsrecord": [67, 183, 357], "bdbquit": [67, 141, 181], "deletem": [67, 141, 181], "bpformat": [67, 141, 181], "bpprint": [67, 141, 181], "cond": [67, 135, 141, 181, 348, 381, 462], "bpbynumb": [67, 141, 181], "bplist": [67, 141, 181], "hit": [67, 85, 91, 141, 150, 172, 181, 209, 222, 243, 293, 337, 354, 364, 375, 384, 396, 462, 470, 478], "trace_dispatch": [67, 141, 181], "dispatch_lin": [67, 141, 181], "dispatch_cal": [67, 141, 181], "dispatch_return": [67, 141, 181], "dispatch_except": [67, 141, 181], "is_skipped_lin": [67, 141, 181], "stop_her": [67, 141, 181], "break_her": [67, 141, 181], "break_anywher": [67, 141, 181], "user_cal": [67, 141, 181], "user_lin": [67, 141, 181], "user_return": [67, 141, 181], "user_except": [67, 141, 181], "do_clear": [67, 141, 181], "set_step": [67, 141, 181], "set_next": [67, 141, 181], "set_return": [67, 141, 181], "set_until": [67, 141, 181], "set_trac": [67, 141, 181, 189, 221, 293, 348, 450, 475, 478], "set_continu": [67, 141, 181], "set_quit": [67, 141, 181], "set_break": [67, 141, 181], "clear_break": [67, 141, 181], "clear_bpbynumb": [67, 141, 181], "clear_all_file_break": [67, 141, 181], "clear_all_break": [67, 141, 181], "get_bpbynumb": [67, 141, 181], "get_break": [67, 141, 181], "get_file_break": [67, 141, 181], "get_all_break": [67, 141, 181], "format_stack_entri": [67, 141, 181, 478], "runev": [67, 141, 181, 293], "runctx": [67, 141, 181, 304, 375], "runcal": [67, 141, 181, 293, 304, 476], "checkfuncnam": [67, 141, 181], "dump_traceback": [67, 181, 210, 473, 478], "is_en": [67, 181, 210], "dump_traceback_lat": [67, 181, 210, 473, 478], "cancel_dump_traceback_lat": [67, 181, 210], "post_mortem": [67, 181, 189, 293, 463], "pm": [67, 179, 181, 189, 262, 293, 348, 361], "introduct": [67, 75, 91, 94, 97, 111, 117, 130, 181, 189, 255, 279, 333, 337, 362, 381, 385, 457, 458, 459, 461, 472, 474, 478], "create_stat": [67, 181, 304], "print_stat": [67, 181, 304], "dump_stat": [67, 181, 304], "strip_dir": [67, 181, 304], "sort_stat": [67, 181, 304], "reverse_ord": [67, 181, 304], "print_cal": [67, 181, 304], "print_calle": [67, 181, 304], "get_stats_profil": [67, 181, 304], "default_tim": [67, 181, 362], "autorang": [67, 181, 362, 474, 478], "print_exc": [67, 100, 181, 311, 362, 376, 478], "programmat": [67, 71, 119, 163, 165, 181, 204, 206, 260, 262, 264, 276, 288, 295, 305, 316, 348, 373, 390, 464, 471, 472, 478], "runfunc": [67, 181, 375, 476], "coverageresult": [67, 181, 375, 478], "write_result": [67, 181, 375], "peak": [67, 138, 181, 462, 477], "clear_trac": [67, 181, 377], "get_object_traceback": [67, 181, 377, 478], "get_traceback_limit": [67, 181, 377], "get_traced_memori": [67, 181, 377], "reset_peak": [67, 181, 377, 477], "get_tracemalloc_memori": [67, 181, 377], "is_trac": [67, 181, 377], "take_snapshot": [67, 181, 377], "domainfilt": [67, 181, 474], "filename_pattern": [67, 181, 377], "all_fram": [67, 181, 377], "snapshot": [67, 181, 253, 338, 472], "compare_to": [67, 181, 377], "filter_trac": [67, 181, 377], "statisticdiff": [67, 181], "count_diff": [67, 181, 377], "size_diff": [67, 181, 377], "total_nfram": [67, 181, 377, 478], "envbuild": [67, 188, 472, 478], "ensure_directori": [67, 188, 394, 478], "create_configur": [67, 188, 394], "setup_python": [67, 188, 394], "setup_script": [67, 188, 394], "upgrade_depend": [67, 188, 394, 478], "post_setup": [67, 188, 394], "install_script": [67, 188, 394], "create_arch": [67, 188, 416, 475, 478], "get_interpret": [67, 188, 416], "standalon": [67, 119, 165, 188, 189, 248, 310, 379, 383, 406, 422, 463, 478], "abiflag": [67, 311, 348, 445, 451, 470, 476, 478], "builtin_module_nam": [67, 83, 246, 311, 348, 445], "call_trac": [67, 311, 348, 445, 478], "_clear_type_cach": [67, 311, 348, 445], "_current_fram": [67, 139, 311, 348, 445, 462], "_current_except": [67, 139, 311, 348, 469, 478], "breakpointhook": [67, 139, 221, 311, 348, 445, 450, 475, 478], "_debugmallocstat": [67, 311, 348, 445], "dllhandl": [67, 311, 348], "displayhook": [67, 221, 311, 348, 445, 458], "_emscripten_info": [67, 311, 348, 478], "__breakpointhook__": [67, 311, 348, 445, 478], "__displayhook__": [67, 311, 348, 445], "__unraisablehook__": [67, 311, 348, 445], "float_info": [67, 86, 271, 311, 340, 445, 463, 478], "epsilon": [67, 271, 311, 348, 463], "dig": [67, 311, 348], "mant_dig": [67, 311, 348, 463], "max_exp": [67, 86, 311, 348], "max_10_exp": [67, 311, 348], "min_exp": [67, 311, 348], "min_10_exp": [67, 311, 348], "float_repr_styl": [67, 311, 348, 445, 464], "getallocatedblock": [67, 311, 348, 445, 472], "getunicodeinterneds": [67, 311, 348, 469], "getandroidapilevel": [67, 311, 348, 475, 478], "getdefaultencod": [67, 311, 348, 445], "getdlopenflag": [67, 289, 311, 348, 445, 459], "get_int_max_str_digit": [67, 311, 340, 348], "getrefcount": [67, 86, 311, 348, 445], "getrecursionlimit": [67, 159, 209, 243, 311, 348, 445, 457, 469, 478], "getsizeof": [67, 182, 311, 348, 357, 377, 445, 463, 468, 478], "getswitchinterv": [67, 311, 348, 445, 477, 478], "_getfram": [67, 99, 139, 311, 348, 445, 458, 468, 478], "_getframemodulenam": [67, 139, 311, 348, 478], "getwindowsvers": [67, 311, 348, 464, 474, 478], "get_asyncgen_hook": [67, 311, 348, 445, 478], "get_coroutine_origin_tracking_depth": [67, 311, 348, 445, 475, 478], "hash_info": [67, 311, 340, 348, 423, 445, 470, 472], "__interactivehook__": [67, 311, 330, 348, 445, 450, 472], "maxunicod": [67, 311, 348, 445, 471], "setdlopenflag": [67, 289, 311, 348, 445, 459, 471], "set_int_max_str_digit": [67, 311, 340, 348, 357, 478], "setrecursionlimit": [67, 243, 295, 311, 348, 445, 457, 469, 478], "set_asyncgen_hook": [67, 311, 348, 425, 445, 478], "set_coroutine_origin_tracking_depth": [67, 251, 311, 348, 445, 475, 478], "activate_stack_trampolin": [67, 101, 311, 348, 469, 478], "deactivate_stack_trampolin": [67, 101, 311, 348, 469, 478], "is_stack_trampoline_act": [67, 311, 348, 469, 478], "_enablelegacywindowsfsencod": [67, 311, 348, 450, 474], "__stdin__": [67, 243, 311, 348, 445], "__stdout__": [67, 243, 311, 328, 348, 445], "__stderr__": [67, 243, 311, 348, 357, 445], "stdlib_module_nam": [67, 311, 348, 467, 478], "thread_info": [67, 311, 348, 445, 471, 478], "tracebacklimit": [67, 311, 348, 478], "api_vers": [67, 311, 348, 445, 460], "winver": [67, 311, 348], "get_config_var": [67, 71, 289, 311, 350, 420, 464, 470, 472, 478], "get_scheme_nam": [67, 311, 350], "get_default_schem": [67, 311, 350, 478], "get_preferred_schem": [67, 311, 350, 468, 478], "_get_preferred_schem": [67, 311, 350], "get_path_nam": [67, 311, 350], "get_path": [67, 311, 350, 464, 470, 478], "get_python_vers": [67, 311, 350, 470], "get_platform": [67, 311, 350, 470, 478], "is_python_build": [67, 311, 350, 464], "parse_config_h": [67, 311, 350], "get_config_h_filenam": [67, 311, 350], "get_makefile_filenam": [67, 71, 311, 350], "idiomat": [67, 102, 109, 311, 381, 478], "formatwarn": [67, 263, 311, 395, 463, 478], "filterwarn": [67, 311, 395, 450, 458, 460, 478], "simplefilt": [67, 311, 357, 395, 463, 464, 468, 478], "resetwarn": [67, 311, 395, 470], "catch_warn": [67, 311, 357, 395, 463, 468, 469, 478], "asdict": [67, 177, 311, 478], "astupl": [67, 177, 311, 478], "make_dataclass": [67, 177, 311, 478], "is_dataclass": [67, 177, 311, 478], "kw_on": [67, 177, 311, 381, 467, 478], "frozeninstanceerror": [67, 177, 311, 478], "post": [67, 93, 94, 99, 100, 107, 140, 148, 172, 189, 190, 237, 238, 241, 265, 284, 291, 293, 311, 337, 346, 348, 364, 389, 390, 394, 415, 435, 451, 457, 459, 463, 469, 470, 471, 476, 478], "__post_init__": [67, 177, 311, 478], "abstractcontextmanag": [67, 165, 311, 340, 381, 474, 478], "abstractasynccontextmanag": [67, 165, 311, 340, 381, 475, 478], "nullcontext": [67, 165, 311, 467, 475, 478], "redirect_stdout": [67, 165, 311, 472, 473], "redirect_stderr": [67, 165, 311, 473, 478], "contextdecor": [67, 165, 311, 470], "asynccontextdecor": [67, 165, 311, 467, 478], "exitstack": [67, 165, 311, 468, 471, 475, 476, 478], "enter_context": [67, 165, 311, 468, 478], "push": [67, 89, 100, 153, 156, 165, 173, 175, 176, 182, 187, 209, 278, 279, 311, 327, 360, 408, 430, 431, 436, 457, 463, 471, 478], "pop_al": [67, 165, 311], "asyncexitstack": [67, 165, 311, 468, 475, 476, 478], "enter_async_context": [67, 165, 311, 468, 478], "push_async_exit": [67, 165, 311], "push_async_callback": [67, 165, 311, 476], "reusabl": [67, 111, 311, 381, 402, 472], "reentrant": [67, 254, 311, 312, 360, 472, 478], "abcmeta": [67, 113, 311, 423, 463, 470, 471, 472, 478], "__subclasshook__": [67, 79, 113, 157, 311, 478], "abstractmethod": [67, 92, 113, 222, 246, 247, 249, 285, 289, 311, 325, 463, 471], "abstractclassmethod": [67, 113, 311, 470, 471], "abstractstaticmethod": [67, 113, 311, 470, 471], "abstractproperti": [67, 113, 311, 463, 471], "get_cache_token": [67, 113, 311, 472], "update_abstractmethod": [67, 113, 311, 478], "print_tb": [67, 210, 311, 376, 473], "print_except": [67, 263, 265, 311, 376, 467, 478], "print_last": [67, 311, 376], "extract_tb": [67, 311, 376], "extract_stack": [67, 311, 376, 478], "format_list": [67, 311, 376, 478], "format_exception_on": [67, 189, 311, 376, 467, 478], "format_except": [67, 311, 376, 467, 478], "format_exc": [67, 311, 376], "format_tb": [67, 311, 376, 377], "format_stack": [67, 311, 376, 478], "clear_fram": [67, 311, 376, 472], "walk_stack": [67, 311, 376, 473], "walk_tb": [67, 311, 376, 473], "tracebackexcept": [67, 311, 468, 473, 478], "exc_typ": [67, 109, 165, 311, 329, 340, 348, 357, 360, 376, 385, 423, 465, 468, 478], "from_except": [67, 311, 376], "stacksummari": [67, 311, 468, 473, 478], "from_list": [67, 311, 376], "format_frame_summari": [67, 311, 376, 468, 478], "framesummari": [67, 311, 473, 478], "get_object": [67, 139, 223, 311, 467, 476, 478], "get_stat": [67, 94, 223, 311, 472, 478], "set_threshold": [67, 223, 311], "get_count": [67, 223, 311, 462], "get_threshold": [67, 223, 311], "get_referr": [67, 139, 223, 311, 377, 467, 478], "unfreez": [67, 223, 311, 475], "get_freeze_count": [67, 223, 311, 475], "debug_stat": [67, 223, 311], "debug_collect": [67, 223, 311], "debug_uncollect": [67, 223, 311, 470], "debug_saveal": [67, 223, 311], "debug_leak": [67, 223, 311], "getmembers_stat": [67, 251, 311, 468, 478], "getmodulenam": [67, 246, 251, 311, 474], "ismodul": [67, 251, 311], "isclass": [67, 251, 311, 423], "ismethod": [67, 251, 311], "isfunct": [67, 251, 311], "isgeneratorfunct": [67, 251, 311, 463, 478], "isgener": [67, 251, 311, 463], "iscoroutinefunct": [67, 251, 311, 384, 469, 473, 478], "markcoroutinefunct": [67, 251, 311, 469, 478], "isawait": [67, 126, 157, 251, 311, 384, 473, 478], "isasyncgenfunct": [67, 251, 311, 478], "isasyncgen": [67, 251, 311], "istraceback": [67, 251, 311], "isfram": [67, 251, 311], "iscod": [67, 251, 311], "isbuiltin": [67, 251, 311], "ismethodwrapp": [67, 251, 311, 468, 478], "isroutin": [67, 251, 311, 478], "isabstract": [67, 251, 311, 463, 478], "ismethoddescriptor": [67, 251, 311], "isdatadescriptor": [67, 251, 311, 478], "isgetsetdescriptor": [67, 251, 311], "ismemberdescriptor": [67, 251, 311], "getdoc": [67, 251, 311, 423, 473, 476, 478], "getcom": [67, 251, 309, 311], "getfil": [67, 251, 311, 478], "getmodul": [67, 251, 311, 478], "getsourcefil": [67, 251, 311, 478], "getsourcelin": [67, 251, 311, 478], "getsourc": [67, 251, 311, 478], "cleandoc": [67, 119, 251, 311], "return_annot": [67, 251, 311], "bind_parti": [67, 251, 311], "from_cal": [67, 251, 311, 467, 468, 473, 478], "boundargu": [67, 251, 311, 471, 473, 477, 478], "apply_default": [67, 251, 311, 473, 478], "getclasstre": [67, 251, 311], "getfullargspec": [67, 251, 309, 311, 468, 472, 473, 474, 478], "getargvalu": [67, 251, 311, 473], "formatargvalu": [67, 251, 311, 473], "getmro": [67, 251, 311], "getcallarg": [67, 251, 311, 464, 473, 478], "getclosurevar": [67, 251, 311, 471], "get_annot": [67, 87, 251, 311, 467, 478], "frameinfo": [67, 251, 311, 468], "code_context": [67, 251, 311], "getframeinfo": [67, 251, 311, 468, 478], "getouterfram": [67, 251, 311, 468, 473, 478], "getinnerfram": [67, 251, 311, 468, 473, 478], "currentfram": [67, 251, 311, 468], "getattr_stat": [67, 251, 311, 381, 469, 470, 478], "getgeneratorst": [67, 251, 311, 470], "getcoroutinest": [67, 251, 311, 473, 478], "getasyncgenst": [67, 251, 311, 469, 478], "getgeneratorloc": [67, 251, 311, 471], "getcoroutineloc": [67, 251, 311, 473, 478], "getasyncgenloc": [67, 251, 311, 469, 478], "co_optim": [67, 251, 311], "co_newloc": [67, 251, 311], "co_vararg": [67, 251, 311], "co_varkeyword": [67, 251, 311], "co_nest": [67, 251, 311], "co_gener": [67, 251, 311, 478], "co_coroutin": [67, 251, 311, 476, 478], "co_iterable_coroutin": [67, 187, 251, 311], "co_async_gener": [67, 251, 311], "bufferflag": [67, 251, 311, 423, 469], "nd": [67, 106, 221, 243, 251, 311, 315, 340, 430], "any_contigu": [67, 251, 311], "contig_ro": [67, 251, 311], "strided_ro": [67, 251, 311], "records_ro": [67, 251, 311], "full_ro": [67, 251, 311], "enable_user_sit": [67, 311, 330], "user_sit": [67, 311, 330], "user_bas": [67, 311, 330, 464], "addsitedir": [67, 311, 330], "getsitepackag": [67, 311, 330, 464, 470], "getuserbas": [67, 311, 330, 464, 470], "getusersitepackag": [67, 311, 330, 433, 464, 470], "interactiveinterpret": [67, 153, 176, 473, 478], "interactiveconsol": [67, 153, 176, 316], "compile_command": [67, 153, 155, 176, 478], "runsourc": [67, 153, 176, 336], "runcod": [67, 153, 176], "showsyntaxerror": [67, 153, 176], "showtraceback": [67, 153, 176, 473, 478], "resetbuff": [67, 153, 176], "raw_input": [67, 109, 153, 176, 465], "codeop": [67, 78, 176, 250, 478], "commandcompil": [67, 155, 176], "zipimporterror": [67, 276, 418], "find_spec": [67, 246, 276, 298, 348, 418, 427, 467, 469, 472, 473, 475, 478], "get_cod": [67, 172, 246, 276, 418, 472], "get_data": [67, 246, 276, 298, 390, 418, 463, 472, 478], "get_sourc": [67, 246, 261, 276, 418, 472, 478], "load_modul": [67, 86, 246, 276, 418, 427, 460, 467, 469, 472, 474, 478], "invalidate_cach": [67, 246, 276, 418, 467, 471, 475, 478], "pkgutil": [67, 250, 276, 462, 463, 467, 468, 469, 471, 474, 475, 478], "moduleinfo": [67, 276, 298, 474], "extend_path": [67, 276, 298], "find_load": [67, 276, 298, 418, 427, 467, 468, 469, 471, 472, 475, 478], "get_import": [67, 276, 298], "get_load": [67, 276, 298, 469, 478], "iter_import": [67, 276, 298, 471], "iter_modul": [67, 276, 298, 471, 474, 478], "walk_packag": [67, 276, 298, 471, 474, 475, 478], "resolve_nam": [67, 246, 276, 298, 477, 478], "modulefind": [67, 250, 276, 478], "addpackagepath": [67, 275, 276], "replacepackag": [67, 275, 276], "run_script": [67, 275, 276], "runpi": [67, 111, 250, 276, 377, 450, 462, 463, 464, 466, 467, 472, 478], "run_path": [67, 276, 320, 450, 464, 478], "metapathfind": [67, 86, 246, 247, 276, 348, 467, 468, 471, 472, 475, 478], "pathentryfind": [67, 86, 246, 276, 418, 427, 467, 468, 471, 472, 475], "resourceload": [67, 246, 276, 475, 478], "inspectload": [67, 246, 276, 472, 473, 478], "source_to_cod": [67, 246, 276, 472, 473, 478], "executionload": [67, 246, 276], "fileload": [67, 246, 276, 471, 472], "sourceload": [67, 246, 276, 471, 472], "path_stat": [67, 246, 276, 471], "path_mtim": [67, 246, 276, 471], "set_data": [67, 246, 276], "source_suffix": [67, 246, 276, 469], "debug_bytecode_suffix": [67, 246, 276], "optimized_bytecode_suffix": [67, 246, 276], "bytecode_suffix": [67, 246, 276, 469], "extension_suffix": [67, 246, 276, 469], "all_suffix": [67, 246, 251, 276], "builtinimport": [67, 246, 276, 279, 467, 468, 474, 478], "frozenimport": [67, 246, 276, 467, 468, 472, 478], "windowsregistryfind": [67, 246, 276, 456, 467, 468, 474, 478], "pathfind": [67, 246, 276, 427, 467, 468, 472, 475, 478], "filefind": [67, 246, 276, 298, 467, 468, 471, 478], "sourcelessfileload": [67, 246, 276, 471, 474], "extensionfileload": [67, 246, 276, 471, 472, 474], "submodule_search_loc": [67, 246, 248, 276, 427], "loader_st": [67, 246, 276, 478], "has_loc": [67, 246, 276, 427], "magic_numb": [67, 246, 276, 469, 472], "cache_from_sourc": [67, 246, 276, 469, 470, 472, 473, 474], "decode_sourc": [67, 246, 276, 472], "module_from_spec": [67, 246, 276, 380, 469, 473, 478], "spec_from_load": [67, 246, 276, 467], "spec_from_file_loc": [67, 246, 276, 469, 474], "source_hash": [67, 246, 276, 475, 478], "_incompatible_extension_module_restrict": [67, 246, 276, 478], "lazyload": [67, 246, 276, 473, 474, 478], "as_fil": [67, 248, 249, 276, 478], "open_binari": [67, 248, 276, 468], "open_text": [67, 248, 276, 468], "read_binari": [67, 248, 276, 468, 478], "is_resourc": [67, 248, 249, 276, 468], "resourceread": [67, 246, 248, 249, 276, 469, 475, 478], "open_resourc": [67, 249, 276], "resource_path": [67, 249, 276], "traversableresourc": [67, 249, 276, 469, 478], "end_col_offset": [67, 119, 187, 260, 426, 476, 478], "formattedvalu": [67, 119, 260, 478], "joinedstr": [67, 119, 260, 478], "star": [67, 92, 119, 187, 260, 353, 372, 408, 422, 426, 429, 431, 467, 468, 478], "expr": [67, 94, 119, 141, 260, 336, 383, 424, 425, 431, 457, 461, 465, 476, 477, 478], "unaryop": [67, 119, 260], "uadd": [67, 119, 260, 426], "usub": [67, 119, 260, 426], "binop": [67, 119, 260, 463, 478], "mult": [67, 119, 260, 426], "div": [67, 84, 119, 182, 236, 260, 407, 426], "bitor": [67, 119, 260, 426], "bitxor": [67, 119, 260, 426], "bitand": [67, 119, 260, 426], "matmult": [67, 119, 260, 426], "boolop": [67, 119, 260], "noteq": [67, 119, 260, 426], "lte": [67, 119, 260, 426], "gte": [67, 119, 260, 426], "isnot": [67, 119, 260, 426], "notin": [67, 119, 260, 426], "ifexp": [67, 119, 260], "namedexpr": [67, 119, 260], "listcomp": [67, 94, 119, 260, 426, 437], "setcomp": [67, 119, 260, 426], "generatorexp": [67, 119, 260], "dictcomp": [67, 119, 260, 426], "type_com": [67, 119, 260, 372, 426, 476, 478], "annassign": [67, 119, 260], "augassign": [67, 119, 260, 426], "importfrom": [67, 119, 260, 478], "trystar": [67, 119, 260], "excepthandl": [67, 119, 260], "withitem": [67, 119, 260], "match_cas": [67, 119, 260], "matchvalu": [67, 119, 260, 478], "matchsingleton": [67, 119, 260, 478], "matchsequ": [67, 119, 260, 478], "matchstar": [67, 119, 260, 478], "matchmap": [67, 119, 260, 478], "matchclass": [67, 119, 260, 478], "matcha": [67, 119, 260, 478], "matchor": [67, 119, 260, 478], "functiondef": [67, 119, 260, 478], "yieldfrom": [67, 119, 260], "classdef": [67, 119, 260, 422, 478], "asyncfunctiondef": [67, 119, 260, 478], "asyncfor": [67, 119, 260, 478], "asyncwith": [67, 119, 260, 478], "unpars": [67, 117, 119, 195, 247, 260, 310, 410, 477, 478], "literal_ev": [67, 119, 221, 260, 463, 470, 475, 478], "get_docstr": [67, 119, 260, 478], "get_source_seg": [67, 119, 260, 476, 478], "fix_missing_loc": [67, 119, 260, 478], "increment_lineno": [67, 119, 260, 478], "copy_loc": [67, 119, 260], "iter_field": [67, 119, 260], "iter_child_nod": [67, 119, 260], "nodevisitor": [67, 119, 260, 463, 476, 478], "generic_visit": [67, 119, 260], "nodetransform": [67, 119, 260, 463, 478], "pycf_allow_top_level_await": [67, 119, 221, 260, 476, 477, 478], "pycf_type_com": [67, 119, 260], "symbolt": [67, 260, 347, 477, 478], "get_typ": [67, 260, 347, 390, 472], "get_lineno": [67, 260, 347], "is_optim": [67, 260, 347], "is_nest": [67, 260, 347], "has_children": [67, 260, 347], "get_symbol": [67, 260, 347], "get_paramet": [67, 260, 347], "get_loc": [67, 260, 347], "get_glob": [67, 260, 347], "get_nonloc": [67, 260, 347], "get_fre": [67, 260, 347], "is_referenc": [67, 260, 347], "is_import": [67, 260, 347], "is_paramet": [67, 260, 347], "is_nonloc": [67, 260, 347, 478], "is_declared_glob": [67, 260, 347, 464], "is_loc": [67, 260, 347], "is_annot": [67, 260, 347], "is_fre": [67, 260, 347], "is_assign": [67, 260, 347], "is_namespac": [67, 260, 347], "get_namespac": [67, 260, 347], "tok_nam": [67, 260, 372, 478], "istermin": [67, 260, 372], "isnontermin": [67, 260, 372], "iseof": [67, 260, 372], "endmark": [67, 260, 372, 373, 426], "lpar": [67, 260, 372, 373, 478], "rpar": [67, 260, 372, 373], "lsqb": [67, 260, 372], "rsqb": [67, 260, 372], "semi": [67, 89, 260, 279, 288, 372, 478], "slash": [67, 103, 217, 221, 251, 255, 260, 288, 289, 292, 309, 353, 372, 389, 402, 417, 418, 456, 478], "amper": [67, 260, 372], "lbrace": [67, 260, 372], "rbrace": [67, 260, 372, 426], "eqequ": [67, 260, 372], "notequ": [67, 260, 372], "lessequ": [67, 260, 372], "greaterequ": [67, 260, 372], "tild": [67, 189, 227, 260, 290, 372], "circumflex": [67, 106, 260, 372], "leftshift": [67, 260, 372], "rightshift": [67, 260, 372], "doublestar": [67, 260, 372], "plusequ": [67, 260, 372], "minequ": [67, 260, 372], "starequ": [67, 260, 372], "slashequ": [67, 260, 372], "percentequ": [67, 260, 372], "amperequ": [67, 260, 372], "vbarequ": [67, 260, 372], "circumflexequ": [67, 260, 372], "leftshiftequ": [67, 260, 372], "rightshiftequ": [67, 260, 372], "doublestarequ": [67, 260, 372], "doubleslash": [67, 260, 372], "doubleslashequ": [67, 260, 372], "atequ": [67, 260, 372], "rarrow": [67, 260, 372], "colonequ": [67, 260, 372], "exclam": [67, 260, 267, 293, 341, 371, 372, 401, 430], "type_ignor": [67, 119, 260, 372], "soft_keyword": [67, 260, 372, 426], "fstring_start": [67, 260, 372, 426, 469], "fstring_middl": [67, 260, 372, 426, 469], "fstring_end": [67, 260, 372, 426, 469], "errortoken": [67, 260, 372, 469], "n_token": [67, 260, 372], "nt_offset": [67, 260, 372], "iskeyword": [67, 259, 260, 340], "kwlist": [67, 72, 75, 186, 259, 260], "issoftkeyword": [67, 259, 260], "softkwlist": [67, 259, 260], "generate_token": [67, 260, 373, 465, 469, 478], "untoken": [67, 260, 373, 478], "detect_encod": [67, 260, 261, 373], "tokenerror": [67, 260, 373, 469, 478], "tabnanni": [67, 85, 250, 260, 457, 478], "filename_on": [67, 260, 352], "nannynag": [67, 260, 352], "process_token": [67, 260, 352], "readmodul": [67, 260, 308, 478], "readmodule_ex": [67, 260, 308, 478], "is_async": [67, 119, 260, 308, 478], "pycompileerror": [67, 260, 307, 478], "pycinvalidationmod": [67, 159, 260, 307], "checked_hash": [67, 260, 307], "unchecked_hash": [67, 260, 307], "compile_dir": [67, 159, 260, 473, 475, 478], "compile_fil": [67, 159, 260, 473, 478], "compile_path": [67, 159, 260, 473], "from_traceback": [67, 187, 260, 472], "codeobj": [67, 187, 260], "first_lin": [67, 187, 260], "code_info": [67, 187, 260, 470], "show_cod": [67, 187, 260, 470, 472], "distb": [67, 187, 260, 472, 478], "disassembl": [67, 187, 260, 296, 357, 472, 475, 478], "disco": [67, 187, 260], "get_instruct": [67, 187, 260, 472, 478], "findlinestart": [67, 187, 260, 478], "findlabel": [67, 187, 260], "stack_effect": [67, 187, 260, 472, 478], "opnam": [67, 84, 187, 260, 357, 472], "argval": [67, 187, 260, 357], "argrepr": [67, 187, 260], "starts_lin": [67, 187, 260], "is_jump_target": [67, 187, 260], "opmap": [67, 187, 260], "cmp_op": [67, 187, 260], "hasarg": [67, 187, 260, 469], "hasconst": [67, 187, 260], "hasfre": [67, 187, 260], "hasnam": [67, 187, 260], "hasjrel": [67, 187, 260], "hasjab": [67, 187, 260], "hasloc": [67, 187, 260], "hascompar": [67, 187, 260], "hasexc": [67, 187, 260], "genop": [67, 260, 296], "ms": [67, 96, 154, 172, 173, 250, 288, 289, 344, 370, 456, 457, 475, 478], "msvcrt": [67, 85, 139, 172, 250, 399, 463, 464, 478], "vc": [67, 172, 250, 399, 478], "lk_lock": [67, 278, 399], "lk_rlck": [67, 278, 399], "lk_nblck": [67, 278, 399], "lk_nbrlck": [67, 278, 399], "lk_unlck": [67, 278, 399], "setmod": [67, 278, 399], "open_osfhandl": [67, 139, 278, 399], "get_osfhandl": [67, 139, 278, 399], "kbhit": [67, 85, 278, 399], "getwch": [67, 278, 399, 463], "putch": [67, 278, 399], "putwch": [67, 278, 399, 463], "ungetwch": [67, 278, 399], "heapmin": [67, 278, 399], "closekey": [67, 399, 400], "connectregistri": [67, 139, 399, 400], "createkey": [67, 139, 399, 400], "createkeyex": [67, 399, 400, 464], "deletekey": [67, 139, 399, 400], "deletekeyex": [67, 399, 400, 464], "deletevalu": [67, 139, 399, 400], "enumkey": [67, 139, 399, 400], "enumvalu": [67, 139, 399, 400], "expandenvironmentstr": [67, 139, 399, 400, 463], "flushkey": [67, 399, 400], "loadkey": [67, 139, 399, 400], "openkey": [67, 139, 399, 400], "openkeyex": [67, 399, 400], "queryinfokey": [67, 139, 399, 400], "queryvalu": [67, 139, 399, 400, 478], "queryvalueex": [67, 399, 400, 478], "savekey": [67, 139, 399, 400], "setvalu": [67, 139, 399, 400, 478], "setvalueex": [67, 399, 400, 478], "disablereflectionkey": [67, 139, 399, 400, 463, 464], "enablereflectionkey": [67, 139, 399, 400, 463, 464], "queryreflectionkey": [67, 139, 399, 400, 463, 464], "hkey_": [67, 399], "hkey_classes_root": [67, 399, 400], "hkey_us": [67, 399, 400], "hkey_performance_data": [67, 399, 400], "hkey_current_config": [67, 399, 400], "hkey_dyn_data": [67, 399, 400], "key_all_access": [67, 399, 400], "key_writ": [67, 399, 400], "key_read": [67, 399, 400], "key_execut": [67, 399, 400], "key_query_valu": [67, 399, 400], "key_set_valu": [67, 399, 400], "key_create_sub_key": [67, 399, 400], "key_enumerate_sub_key": [67, 399, 400], "key_notifi": [67, 399, 400], "key_create_link": [67, 399, 400], "key_wow64_64key": [67, 399, 400], "key_wow64_32key": [67, 399, 400], "reg_binari": [67, 399, 400, 478], "reg_dword": [67, 399, 400], "reg_dword_little_endian": [67, 399, 400], "reg_dword_big_endian": [67, 399, 400], "reg_expand_sz": [67, 399, 400], "reg_link": [67, 399, 400], "reg_multi_sz": [67, 399, 400, 478], "reg_non": [67, 399, 400], "reg_qword": [67, 399, 400, 474, 478], "reg_qword_little_endian": [67, 399, 400], "reg_resource_list": [67, 399, 400], "reg_full_resource_descriptor": [67, 399, 400], "reg_resource_requirements_list": [67, 399, 400], "reg_sz": [67, 399, 400], "pyhkey": [67, 139, 399, 400], "sound": [67, 71, 83, 114, 138, 173, 219, 250, 291, 332, 399, 421, 445, 460, 463], "playsound": [67, 399, 401, 474, 478], "messagebeep": [67, 399, 401, 474, 478], "snd_filenam": [67, 399, 401], "snd_alia": [67, 399, 401], "snd_loop": [67, 399, 401], "snd_memori": [67, 399, 401, 478], "snd_purg": [67, 399, 401], "snd_async": [67, 399, 401], "snd_nodefault": [67, 399, 401], "snd_nostop": [67, 399, 401], "snd_nowait": [67, 399, 401], "mb_iconasterisk": [67, 399, 401], "mb_iconexclam": [67, 399, 401], "mb_iconhand": [67, 399, 401], "mb_iconquest": [67, 399, 401], "mb_ok": [67, 399, 401], "getpwuid": [67, 289, 306, 386, 478], "getpwnam": [67, 169, 306, 344, 386, 478], "getpwal": [67, 306, 386], "getgrgid": [67, 229, 386, 474, 478], "getgrnam": [67, 229, 344, 386, 460, 478], "getgral": [67, 229, 386, 478], "termio": [67, 211, 250, 378, 386, 477, 478], "tti": [67, 173, 225, 250, 254, 289, 386, 432, 433, 443, 450, 463, 478], "tcgetattr": [67, 356, 378, 386], "tcsetattr": [67, 356, 378, 386], "tcsendbreak": [67, 356, 386], "tcdrain": [67, 356, 386], "tcflush": [67, 356, 386], "tcflow": [67, 356, 386], "tcgetwins": [67, 356, 386, 478], "tcsetwins": [67, 356, 386, 478], "cfmakeraw": [67, 378, 386, 478], "cfmakecbreak": [67, 378, 386, 478], "setraw": [67, 378, 386, 478], "setcbreak": [67, 378, 386, 478], "flock": [67, 139, 211, 267, 386, 478], "rlim_infin": [67, 318, 386], "getrlimit": [67, 318, 386, 478], "setrlimit": [67, 139, 318, 357, 386, 478], "prlimit": [67, 139, 318, 386, 472, 478], "rlimit_cor": [67, 318, 357, 386], "rlimit_cpu": [67, 318, 386, 478], "rlimit_fs": [67, 318, 386, 478], "rlimit_data": [67, 318, 386], "rlimit_stack": [67, 318, 386], "rlimit_rss": [67, 318, 386], "rlimit_nproc": [67, 318, 386], "rlimit_nofil": [67, 318, 386], "rlimit_ofil": [67, 318, 386], "rlimit_memlock": [67, 318, 386], "rlimit_vmem": [67, 318, 386], "rlimit_a": [67, 318, 386], "rlimit_msgqueu": [67, 318, 386, 472], "rlimit_nic": [67, 318, 386, 472], "rlimit_rtprio": [67, 318, 386, 472], "rlimit_rttim": [67, 318, 386, 472], "rlimit_sigpend": [67, 318, 386, 472], "rlimit_sbs": [67, 318, 386, 472], "rlimit_swap": [67, 318, 386, 472], "rlimit_npt": [67, 318, 386, 472], "rlimit_kqueu": [67, 318, 386, 478], "getrusag": [67, 289, 318, 386, 462, 478], "getpages": [67, 318, 386], "rusage_self": [67, 318, 386], "rusage_children": [67, 318, 386], "rusage_both": [67, 318, 386], "rusage_thread": [67, 318, 386], "syslog": [67, 99, 139, 250, 265, 386, 464, 469, 471, 478], "openlog": [67, 139, 351, 386, 469, 478], "closelog": [67, 139, 351, 386, 469], "setlogmask": [67, 139, 351, 386], "aiff": [67, 150, 202, 250, 332, 346, 445, 478], "setmark": [67, 114, 346], "adpcm2lin": [67, 138, 346, 478], "alaw2lin": [67, 138, 346], "avg": [67, 138, 346], "avgpp": [67, 138, 346], "bias": [67, 138, 192, 201, 304, 314, 346, 460, 470], "findfactor": [67, 138, 346], "findfit": [67, 138, 346], "findmax": [67, 138, 346], "getsampl": [67, 138, 346], "lin2adpcm": [67, 138, 346, 478], "lin2alaw": [67, 138, 346], "lin2lin": [67, 138, 346], "lin2ulaw": [67, 138, 346], "maxpp": [67, 138, 346], "minmax": [67, 138, 346], "ratecv": [67, 138, 346, 478], "rms": [67, 138, 346], "tomono": [67, 138, 346], "tostereo": [67, 138, 346], "ulaw2lin": [67, 138, 346], "fieldstorag": [67, 148, 346, 472, 473, 475, 478], "getfirst": [67, 148, 346], "getlist": [67, 148, 346, 473], "parse_multipart": [67, 148, 346, 467, 474, 475, 476, 477, 478], "print_environ": [67, 148, 346], "print_form": [67, 148, 346], "print_directori": [67, 148, 346], "print_environ_usag": [67, 148, 346], "cgitb": [67, 148, 250, 346, 468, 469, 478], "iff": [67, 186, 189, 250, 346], "method_sha512": [67, 169, 346], "method_sha256": [67, 169, 346], "method_blowfish": [67, 169, 346], "method_md5": [67, 169, 346], "method_crypt": [67, 169, 346, 474, 478], "mksalt": [67, 169, 346, 471, 475, 478], "mailcap": [67, 250, 346, 468, 469, 478], "findmatch": [67, 268, 346], "getcap": [67, 268, 284, 346], "fcicreat": [67, 277, 346, 478], "uuidcreat": [67, 277, 346], "opendatabas": [67, 277, 346, 478], "createrecord": [67, 277, 346], "init_databas": [67, 277, 346, 478], "add_data": [67, 277, 346, 390, 472], "add_tabl": [67, 277, 346], "add_stream": [67, 277, 346], "gen_uuid": [67, 277, 346], "openview": [67, 277, 346, 478], "getsummaryinform": [67, 277, 346], "getcolumninfo": [67, 277, 346], "summaryinform": [67, 277, 346, 478], "getpropertycount": [67, 277, 346], "getfieldcount": [67, 277, 346], "getinteg": [67, 277, 346, 463], "setstr": [67, 277, 346], "setinteg": [67, 277, 346], "cleardata": [67, 277, 346], "cab": [67, 346, 462, 478], "start_compon": [67, 277, 346, 478], "add_fil": [67, 277, 346], "remove_pyc": [67, 277, 346], "set_curr": [67, 277, 346], "radiobuttongroup": [67, 277, 346], "bitmap": [67, 245, 251, 277, 324, 346, 364, 370, 371], "pushbutton": [67, 277, 346], "radiogroup": [67, 277, 346], "checkbox": [67, 91, 148, 277, 346, 456], "precomput": [67, 144, 346, 478], "nis": [67, 229, 250, 346, 462, 468, 469, 478], "sun": [67, 106, 138, 147, 179, 241, 245, 250, 270, 291, 339, 346, 361, 403, 468, 478], "yellow": [67, 91, 93, 144, 156, 173, 250, 346, 379, 447, 461, 469], "cat": [67, 93, 100, 103, 156, 226, 283, 344, 346, 436, 446, 448, 470, 473], "get_default_domain": [67, 283, 346], "nntp_ssl": [67, 284, 346, 470, 477, 478], "nntperror": [67, 284, 346, 478], "nntpreplyerror": [67, 284, 346], "nntptemporaryerror": [67, 284, 346], "nntppermanenterror": [67, 284, 346], "nntpprotocolerror": [67, 284, 346], "nntpdataerror": [67, 284, 346], "nntp_version": [67, 284, 346], "nntp_implement": [67, 284, 346], "newgroup": [67, 284, 346], "newnew": [67, 284, 346], "articl": [67, 94, 106, 222, 231, 257, 267, 284, 337, 346, 379, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477], "ihav": [67, 284, 346], "slave": [67, 284, 289, 305, 346, 364, 478], "xhdr": [67, 284, 346], "xover": [67, 284, 346], "terminolog": [67, 97, 197, 241, 346, 361, 371, 405, 458, 459, 462, 463], "optiongroup": [67, 288, 346], "optionpars": [67, 117, 288, 346, 460, 462], "get_option_group": [67, 288, 346], "print_vers": [67, 288, 346], "get_vers": [67, 288, 346], "add_opt": [67, 117, 288, 346, 460], "callback_arg": [67, 288, 346], "callback_kwarg": [67, 288, 346], "disable_interspersed_arg": [67, 117, 288, 346], "enable_interspersed_arg": [67, 288, 346], "get_opt": [67, 288, 346], "conflict": [67, 72, 100, 103, 107, 117, 163, 207, 209, 226, 237, 346, 348, 379, 381, 400, 408, 421, 450, 456, 470, 472, 475, 478], "set_usag": [67, 288, 346], "get_usag": [67, 288, 346], "store_act": [67, 288, 346], "typed_act": [67, 288, 346], "always_typed_act": [67, 288, 346], "optionerror": [67, 117, 288, 346], "optionconflicterror": [67, 288, 346], "optionvalueerror": [67, 117, 288, 346], "badoptionerror": [67, 288, 346], "ambiguousoptionerror": [67, 288, 346], "ossaudiodev": [67, 250, 346, 460, 468, 469, 473, 478], "oss": [67, 250, 344, 346, 460, 471, 478], "ossaudioerror": [67, 291, 346], "openmix": [67, 291, 346], "audio": [67, 114, 138, 150, 202, 332, 346, 357, 396, 401, 457, 478], "oss_audio_devic": [67, 291, 346], "writeal": [67, 291, 346], "nonblock": [67, 291, 346, 478], "getfmt": [67, 291, 346], "setfmt": [67, 291, 346], "channel": [67, 106, 114, 130, 138, 172, 197, 208, 264, 279, 291, 332, 333, 337, 345, 346, 396, 459, 471, 478], "setparamet": [67, 291, 346], "obufcount": [67, 291, 346], "obuffre": [67, 291, 346], "mixer": [67, 346], "oss_mixer_devic": [67, 291, 346], "stereocontrol": [67, 291, 346], "reccontrol": [67, 291, 346], "get_recsrc": [67, 291, 346], "set_recsrc": [67, 291, 346], "whathdr": [67, 332, 346, 473, 478], "spwd": [67, 229, 250, 306, 346, 462, 468, 469, 474, 478], "shadow": [67, 84, 85, 169, 229, 250, 251, 306, 346, 353, 445, 462, 472, 477, 478], "getspnam": [67, 335, 346, 474, 478], "getspal": [67, 335, 346], "au": [67, 202, 250, 291, 332, 337, 346, 445], "audio_file_mag": [67, 345, 346], "audio_file_encoding_mulaw_8": [67, 345, 346], "audio_file_encoding_linear_8": [67, 345, 346], "audio_file_encoding_linear_16": [67, 345, 346], "audio_file_encoding_linear_24": [67, 345, 346], "audio_file_encoding_linear_32": [67, 345, 346], "audio_file_encoding_alaw_8": [67, 345, 346], "audio_file_encoding_float": [67, 345, 346], "audio_file_encoding_doubl": [67, 345, 346], "audio_file_encoding_adpcm_g721": [67, 345, 346], "audio_file_encoding_adpcm_g722": [67, 345, 346], "audio_file_encoding_adpcm_g723_3": [67, 345, 346], "audio_file_encoding_adpcm_g723_5": [67, 345, 346], "au_read": [67, 346], "au_writ": [67, 346, 472], "telnet": [67, 139, 166, 250, 346, 389, 463, 474, 478], "read_until": [67, 346, 354], "read_al": [67, 346, 354], "read_som": [67, 346, 354], "read_very_eag": [67, 346, 354], "read_eag": [67, 346, 354], "read_lazi": [67, 346, 354], "read_very_lazi": [67, 346, 354], "read_sb_data": [67, 346, 354], "get_socket": [67, 346, 354], "mt_interact": [67, 346, 354], "set_option_negotiation_callback": [67, 346, 354], "xdrlib": [67, 118, 250, 346, 468, 469, 478], "uuencod": [67, 140, 143, 154, 250, 346], "xdr": [67, 118, 250, 295, 346], "pack_float": [67, 346, 403], "pack_doubl": [67, 346, 403], "pack_fstr": [67, 346, 403], "pack_fopaqu": [67, 346, 403], "pack_str": [67, 346, 403], "pack_opaqu": [67, 346, 403], "pack_byt": [67, 346, 403], "pack_list": [67, 346, 403], "pack_farray": [67, 346, 403], "pack_array": [67, 346, 403], "get_posit": [67, 346, 403], "set_posit": [67, 346, 403], "unpack_float": [67, 346, 403], "unpack_doubl": [67, 346, 403], "unpack_fstr": [67, 346, 403], "unpack_fopaqu": [67, 346, 403], "unpack_str": [67, 346, 403], "unpack_opaqu": [67, 346, 403], "unpack_byt": [67, 346, 403], "unpack_list": [67, 346, 403], "unpack_farray": [67, 346, 403], "unpack_array": [67, 346, 403], "conversionerror": [67, 346, 403, 478], "intermezzo": [67, 73], "linkag": [67, 73, 299], "ice": [67, 280], "setuptool": [67, 73, 75, 76, 247, 298, 303, 350, 394, 448, 456, 464, 467, 469, 472, 474, 478], "app": [67, 73, 100, 243, 265, 348, 364, 394, 402, 456, 463, 464, 470, 478], "pure": [67, 73, 83, 84, 94, 96, 98, 100, 102, 119, 172, 179, 182, 219, 221, 226, 231, 243, 257, 292, 304, 329, 348, 351, 357, 404, 422, 423, 437, 450, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 476, 478], "caution": [67, 72, 84, 125, 186, 264, 288, 289, 292, 344, 408, 462, 478], "tss": [67, 475, 478], "arena": [67, 426, 450, 462, 477, 478], "transit": [67, 93, 97, 98, 107, 179, 222, 257, 264, 326, 334, 390, 420, 425, 459, 461, 462, 464, 467, 471, 478], "howto": [67, 84, 91, 95, 102, 103, 117, 414, 457, 459, 464, 465, 470, 478], "primer": 67, "thought": [67, 89, 94, 98, 279, 457, 459, 460, 465, 473], "technic": [67, 94, 109, 163, 179, 187, 209, 248, 258, 288, 315, 340, 395, 422, 427, 456, 457, 464, 475, 478], "orm": 67, "_private__nam": 67, "minutia": 67, "aka": [67, 119, 189, 350, 404, 417, 423, 456, 475, 478], "orderedenum": 67, "duplicatefreeenum": 67, "planet": [67, 462], "timeperiod": [67, 207], "provabl": [67, 456, 478], "modular": [67, 83, 99, 169, 221, 471, 476, 478], "combinator": [67, 257, 314, 466, 476], "acknowledg": [67, 163, 174, 353, 421], "destin": [67, 89, 99, 106, 173, 185, 204, 208, 238, 263, 264, 265, 267, 274, 288, 289, 328, 333, 340, 351, 353, 394, 461, 463, 469, 471, 472, 476, 478], "contextu": [67, 186, 263], "impart": [67, 263], "deploy": [67, 83, 99, 140, 198, 289, 344, 364, 402, 420, 456, 470, 476, 477, 478], "gunicorn": 67, "uwsgi": [67, 344], "zeromq": 67, "elabor": [67, 89, 103, 421, 430, 457, 460, 478], "throughout": [67, 72, 92, 99, 109, 182, 246, 384, 429, 457, 459, 460, 462, 463, 464, 470, 473, 478], "gmt": [67, 99, 179, 205, 241, 263, 337, 361], "cli": [67, 89, 230, 247, 336, 357, 450, 472, 475, 478], "starter": 67, "qt": 67, "rfc5424": 67, "backslash": [67, 154, 155, 189, 205, 221, 243, 254, 279, 289, 292, 315, 344, 430, 441, 460, 461, 465, 469, 474, 475, 478], "plagu": [67, 472], "metacharact": [67, 268, 315, 344, 461], "lookahead": [67, 315, 422, 426, 461], "greedi": [67, 154, 315, 354], "feedback": [67, 226, 379, 421, 461], "ipc": [67, 120, 127, 130, 253, 333], "undecor": [67, 100, 222, 340], "cconvert": [67, 89], "py_default": [67, 89], "c_default": [67, 89], "c_ignored_default": [67, 89], "impl_by_refer": [67, 89], "parse_by_refer": [67, 89], "instrument": [67, 95, 123, 222, 304, 451, 470, 474, 478], "tapset": 67, "newer": [67, 70, 74, 75, 99, 102, 114, 189, 239, 243, 253, 264, 265, 284, 289, 293, 295, 308, 310, 324, 336, 337, 340, 361, 364, 381, 403, 404, 417, 451, 456, 469, 472, 473, 474, 475, 476, 477, 478], "un": [67, 196, 199, 251, 284, 431, 444, 472, 478], "stringiz": [67, 251, 467, 478], "__annotations__": [67, 86, 92, 177, 187, 221, 222, 251, 381, 422, 423, 431, 436, 465, 467, 470, 472, 473, 474, 476, 477, 478], "quirk": [67, 91, 340, 429, 467, 472, 478], "opt": [67, 71, 163, 186, 224, 246, 288, 295, 302, 334, 427, 445, 450, 451, 460, 463, 464, 469, 470, 472, 473, 475, 478], "lossless": [67, 182, 186, 373, 423, 469, 470, 478], "__builtin_new": 67, "__pure_virtu": 67, "pyd": [67, 70, 83, 265, 349, 418, 462, 470, 473, 476, 478], "keypress": [67, 91, 278, 463], "l1": [67, 83, 154, 371], "0rc1": [67, 469, 478], "psf": [67, 79, 292], "beopen": [67, 68], "cnri": [67, 457], "cwi": [67, 79, 236, 333, 389], "bsd": [67, 83, 91, 104, 130, 173, 211, 318, 324, 329, 333, 338, 361, 433, 451, 457, 459, 463, 472, 478], "mersenn": [67, 314, 460], "twister": [67, 314, 460], "uudecod": 67, "test_epol": [67, 478], "siphash24": [67, 451, 468, 478], "strtod": 67, "dtoa": [67, 451, 464, 478], "libffi": [67, 464, 468, 475, 478], "cfuhash": 67, "libmpdec": [67, 182, 451, 471, 478], "w3c": [67, 107, 236, 238, 390, 405, 406, 410, 423, 458, 467, 474, 475, 476, 477, 478], "c14n": [67, 408, 476, 478], "2001": [68, 97, 100, 205, 255, 328, 353, 361, 408, 417, 421, 458, 459, 460, 463, 470, 476, 478], "2023": [68, 100, 421, 469, 478], "foundat": [68, 79, 94, 165, 337, 364, 421, 456, 460, 461, 463, 471], "2000": [68, 84, 99, 154, 219, 265, 280, 361, 379, 421, 436, 439, 457, 460, 463, 470, 471, 472, 478], "corpor": [68, 421], "nation": [68, 421], "research": [68, 94, 421, 478], "guidanc": [69, 380, 464, 469, 478], "pyinit_": [70, 478], "pyinitu_": 70, "punycod": [70, 154, 460, 478], "hyphen": [70, 117, 154, 224, 288, 315, 359, 381, 393, 450, 456, 460, 478], "initfunc_nam": 70, "u_": 70, "pyinit": 70, "readthedoc": [70, 247, 402, 462], "en": [70, 94, 106, 107, 156, 226, 231, 236, 284, 390, 455, 456, 462, 470, 471, 478], "latest": [70, 84, 148, 179, 182, 206, 222, 243, 394, 417, 456, 462, 464, 466, 470, 471, 472, 474, 478], "learn": [70, 72, 74, 76, 78, 83, 86, 88, 89, 91, 92, 94, 102, 103, 106, 148, 172, 182, 189, 243, 271, 295, 327, 336, 364, 379, 406, 459, 460, 462, 463, 464, 470, 474, 475, 478], "enrich": [71, 478], "tailor": [71, 89, 242, 336, 340, 357, 469], "occasion": [71, 83, 89, 100, 117, 165, 173, 182, 186, 197, 201, 226, 243, 267, 271, 288, 289, 360, 431, 457, 462, 463, 470, 478], "identif": [71, 134, 279, 342, 360, 478], "great": [71, 93, 99, 187, 239, 315, 344, 384, 397, 457, 458, 459, 460, 462, 463, 464, 465, 469, 471, 473, 476, 478], "fprintf": [71, 72], "troubl": [71, 97, 107, 209, 456, 461], "piec": [71, 86, 94, 101, 103, 130, 138, 143, 148, 165, 175, 186, 187, 189, 198, 239, 266, 288, 337, 353, 364, 381, 409, 424, 430, 459, 462, 472, 477, 478], "cumbersom": [71, 98, 182, 364], "say": [71, 72, 74, 76, 84, 92, 97, 100, 103, 106, 130, 136, 179, 189, 198, 222, 226, 239, 243, 247, 262, 263, 264, 265, 267, 279, 344, 390, 408, 416, 423, 427, 429, 441, 458, 459, 460, 462, 463, 464, 468, 470, 472, 478], "cost": [71, 84, 89, 163, 179, 184, 186, 222, 231, 239, 246, 289, 340, 362, 364, 376, 381, 385, 417, 421, 423, 457, 460, 463, 464, 468, 472, 478], "despit": [71, 84, 100, 231, 258, 292, 321, 337, 344, 381, 427, 463, 478], "accommod": [71, 100, 197, 246, 364, 461, 478], "vice": [71, 83, 138, 172, 246, 263, 289, 292, 315, 340, 371, 375, 381, 408, 463, 469, 472, 478], "versa": [71, 83, 138, 172, 246, 263, 289, 292, 315, 340, 371, 375, 381, 408, 463, 469, 472, 478], "understood": [71, 148, 239, 264, 279, 289, 293, 327, 340, 362, 392, 416, 421, 423, 478], "pname": 71, "pmodul": [71, 72, 478], "parg": 71, "pythonfil": 71, "proceed": [71, 75, 107, 182, 191, 201, 257, 267, 279, 289, 304, 337, 360, 422, 425, 478], "subroutin": [71, 86, 94, 462], "glue": [71, 89, 459, 461], "numarg": 71, "emb_numarg": 71, "embmethod": 71, "embmodul": 71, "pyinit_emb": 71, "recompil": [71, 78, 159, 246, 457, 460, 464, 470, 473, 474], "cflag": [71, 101, 302, 356, 451, 460, 478], "wsign": 71, "dndebug": 71, "fwrapv": 71, "wall": [71, 179, 304, 463, 478], "ldflag": [71, 451, 460, 478], "x86_64": [71, 350, 451, 473, 476, 478], "lpython3": [71, 476, 478], "lpthread": 71, "ldl": 71, "lutil": 71, "lm": [71, 340, 430], "welcom": [71, 89, 91, 152, 279, 284, 379, 421, 462, 470, 478], "linkforshar": [71, 478], "xlinker": 71, "incorpor": [72, 99, 103, 182, 263, 337, 389, 408, 421, 460, 462, 463, 464, 470, 476, 478], "cffi": [72, 73, 90, 182, 478], "favorit": [72, 106, 437], "food": [72, 86, 295, 441], "monti": [72, 163, 189, 221, 258, 289, 292, 336, 339, 340, 353, 417, 434, 449, 461, 463, 470], "fan": 72, "ls": [72, 88, 100, 134, 173, 327, 344, 353, 354, 473], "spammodul": 72, "spammifi": 72, "spam_system": 72, "sts": [72, 83, 344, 461], "saw": 72, "predefin": [72, 84, 99, 103, 109, 152, 154, 172, 173, 243, 263, 277, 341, 364, 398, 400, 423, 478], "pyerr_": 72, "fine": [72, 77, 83, 84, 98, 100, 106, 107, 163, 172, 173, 189, 197, 207, 222, 239, 288, 289, 314, 315, 329, 337, 348, 364, 381, 384, 390, 423, 456, 457, 458, 460, 462, 469, 478], "lost": [72, 88, 89, 93, 99, 100, 106, 130, 173, 179, 182, 197, 222, 243, 258, 263, 265, 279, 304, 328, 329, 331, 334, 422, 439, 457, 459, 470, 471, 472, 477, 478], "pretend": [72, 102, 104, 173, 384, 423, 459, 476], "went": [72, 88, 141, 209, 291, 331, 408, 457, 459, 462, 463, 477], "predeclar": 72, "cours": [72, 75, 89, 93, 94, 99, 100, 172, 182, 189, 196, 198, 203, 231, 263, 264, 279, 288, 289, 327, 334, 337, 364, 379, 384, 385, 405, 414, 423, 450, 457, 458, 460, 465, 470, 471, 472], "wise": [72, 93, 177, 182, 264, 459, 475], "couldn": [72, 103, 107, 186, 254, 289, 329, 336, 381, 385, 418, 458, 459, 462, 464, 469, 474, 478], "satisfi": [72, 107, 177, 217, 230, 251, 254, 264, 271, 360, 423, 427, 470], "spamerror": 72, "pyinit_spam": 72, "pymodinit_func": [72, 75, 451, 460, 478], "retain": [72, 87, 117, 163, 165, 173, 182, 186, 192, 201, 204, 209, 243, 246, 251, 257, 263, 267, 289, 327, 336, 337, 379, 389, 414, 421, 423, 425, 430, 471, 472, 474, 476, 478], "unintend": [72, 84, 182, 279, 292, 353, 478], "going": [72, 74, 75, 78, 83, 89, 92, 94, 96, 102, 103, 114, 123, 134, 141, 148, 182, 192, 196, 275, 288, 289, 304, 330, 337, 353, 357, 360, 384, 385, 402, 408, 414, 423, 456, 457, 459, 463, 478], "genuin": [72, 189, 211, 464, 470], "seen": [72, 74, 83, 84, 89, 93, 94, 100, 152, 187, 207, 226, 231, 251, 257, 265, 267, 288, 301, 327, 357, 364, 395, 397, 408, 410, 450, 460, 463, 466, 469, 472, 475, 478], "promis": [72, 93, 251, 470, 478], "spammethod": 72, "obsolet": [72, 91, 148, 209, 239, 258, 263, 310, 340, 361, 384, 395, 398, 403, 414, 457, 458, 459, 462, 464, 469, 470, 472, 473, 474, 478], "spam_doc": 72, "pyinit_nam": 72, "satisfactorili": 72, "pyimport_inittab": [72, 478], "interven": [72, 100, 186, 189, 200, 471], "exercis": [72, 83, 99, 100, 156, 183, 263, 288, 304, 357, 421, 463, 478], "substanti": [72, 239, 257, 310, 405, 421, 459, 461, 466, 469, 470, 471, 472, 474, 478], "xxmodul": 72, "perman": [72, 107, 244, 390, 447, 456, 473, 477, 478], "rebuild": [72, 159, 470, 478], "luckili": [72, 89, 102, 383, 402], "toplevel": [72, 156, 182, 221, 347, 364, 370, 371, 408, 478], "subdirectori": [72, 75, 83, 84, 100, 159, 196, 212, 243, 248, 249, 267, 289, 292, 298, 330, 375, 383, 394, 416, 417, 418, 456, 457, 458, 460, 463, 464, 473, 475, 476, 477, 478], "lx11": 72, "far": [72, 75, 84, 88, 89, 103, 165, 179, 182, 186, 231, 239, 254, 271, 279, 288, 289, 304, 315, 327, 328, 354, 361, 370, 383, 390, 429, 457, 458, 459, 460, 461, 463, 478], "concentr": [72, 103, 107, 231, 364, 463], "imagin": [72, 103, 111, 295, 379, 384, 385], "fortun": [72, 75, 91, 111, 148, 465], "dwell": 72, "somehow": [72, 279, 353, 463, 464], "wherev": [72, 78, 89, 91, 93, 100, 103, 106, 173, 364, 381, 392, 421, 459, 462], "my_callback": [72, 74, 288], "my_set_callback": 72, "temp": [72, 279, 326, 336, 355, 406, 416, 425, 451, 456, 478], "set_callback": 72, "dispos": [72, 383], "rememb": [72, 84, 88, 89, 91, 92, 94, 99, 100, 103, 155, 189, 243, 257, 279, 315, 336, 357, 364, 371, 390, 397, 405, 407, 431, 436, 456, 457, 458, 462, 463, 464, 466, 470, 471], "boilerpl": [72, 75, 89, 98, 285, 357, 384, 427, 473, 478], "arglist": 72, "eventcod": 72, "placement": [72, 143, 364, 408, 469, 478], "whoop": [72, 100], "lls": 72, "ii": [72, 78, 156, 172, 337, 421, 422], "wb": [72, 86, 100, 114, 117, 146, 196, 204, 219, 230, 266, 274, 295, 305, 316, 345, 381, 392, 396, 414, 416, 417, 457, 466, 470], "100000": [72, 221, 304, 362, 377, 460], "400": [72, 100, 107, 114, 152, 219, 237, 279, 284, 331, 364, 379, 436, 447, 467], "300": [72, 91, 100, 107, 152, 237, 243, 379, 390, 422, 447, 470, 478], "myfunct": [72, 78, 165], "2j": [72, 96, 221, 258, 478], "geoff": [72, 478], "philbrick": 72, "hks": 72, "keywdarg_parrot": 72, "keywd": 72, "voltag": [72, 221, 436], "stiff": [72, 436], "voom": [72, 436], "norwegian": [72, 154, 436], "blue": [72, 91, 93, 100, 103, 105, 144, 152, 156, 173, 207, 257, 314, 339, 340, 364, 371, 379, 397, 436, 437, 447, 460, 461, 466, 467, 469, 470, 474, 478], "sss": [72, 74, 179], "parrot": [72, 221, 238, 303, 436, 463], "wouldn": [72, 83, 89, 102, 103, 263, 328, 357, 383, 384, 422, 436, 457, 458, 459, 460, 461, 463, 478], "volt": [72, 436], "love": [72, 100, 144, 171, 240, 436, 466, 472], "keywdarg_method": 72, "skit": [72, 189], "keywdargmodul": 72, "keywdarg": 72, "pyinit_keywdarg": 72, "counterpart": [72, 100, 173, 187, 221, 254, 257, 263, 284, 315, 333, 340, 356, 422, 464, 466, 468, 470, 475, 478], "iii": [72, 421], "789": [72, 182, 463], "ss": [72, 106, 179, 244, 340, 361, 467, 471], "hell": 72, "forgotten": [72, 106, 122], "occupi": [72, 106, 114, 279, 318, 367, 371, 472], "reus": [72, 75, 79, 89, 123, 125, 135, 154, 162, 165, 172, 180, 189, 210, 222, 246, 289, 315, 333, 334, 337, 343, 353, 357, 359, 360, 384, 397, 422, 427, 430, 462, 469, 470, 477, 478], "unusu": [72, 91, 100, 179, 209, 246, 291, 304, 318, 344, 355, 389, 425, 478], "prematur": [72, 99, 238, 267, 465, 478], "undetect": [72, 267, 360], "modern": [72, 96, 102, 111, 123, 136, 140, 173, 174, 190, 231, 254, 328, 333, 337, 353, 364, 401, 457, 461, 463, 464, 470, 471, 474, 475, 476, 477, 478], "plenti": 72, "appar": [72, 91, 148, 329, 403, 457, 461, 478], "heavi": [72, 107, 163, 464, 471, 475, 478], "principl": [72, 84, 182, 384, 402, 471], "somewher": [72, 83, 84, 89, 100, 241, 243, 288, 298, 310, 340, 405, 436, 456, 463, 467], "sometim": [72, 78, 83, 84, 91, 92, 93, 94, 97, 98, 100, 102, 103, 106, 107, 109, 111, 117, 132, 136, 148, 154, 163, 165, 172, 173, 182, 184, 186, 189, 199, 209, 221, 222, 231, 243, 251, 255, 257, 264, 267, 284, 288, 289, 295, 304, 315, 337, 338, 361, 364, 379, 381, 384, 385, 390, 408, 423, 425, 429, 431, 457, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 474, 477, 478], "claim": [72, 102, 186, 195, 337, 389, 421, 478], "disadvantag": [72, 75, 83, 84, 103, 129, 154, 182, 337, 362, 459, 466], "worri": [72, 74, 89, 91, 99, 102, 106, 148, 179, 190, 288, 315, 343, 383, 459, 464, 471], "reclaim": [72, 74, 246, 381, 397], "nobodi": [72, 148, 231, 241, 331, 478], "seem": [72, 75, 78, 89, 94, 99, 103, 117, 189, 212, 267, 275, 289, 304, 336, 355, 425, 427, 457, 458, 459, 460, 462, 478], "popular": [72, 92, 100, 186, 189, 222, 244, 267, 343, 375, 379, 429, 456, 470, 471, 476], "pictur": [72, 163, 196, 459, 461], "bet": 72, "therebi": [72, 84, 193, 199, 379, 472, 478], "no_bug": 72, "someon": [72, 84, 89, 179, 331, 390, 408, 464, 469, 478], "spent": [72, 136, 304, 318, 329, 462, 463], "his": [72, 83, 226, 430, 457, 459, 463, 464, 472, 474, 478], "redund": [72, 266, 315, 340, 381, 419, 431, 459, 464, 478], "slowli": [72, 100, 467], "ever": [72, 84, 92, 93, 119, 173, 195, 197, 246, 254, 257, 278, 279, 337, 344, 379, 381, 384, 456, 459, 460, 462, 463, 464, 465, 472, 478], "__cplusplus": 72, "sight": [72, 138], "aix": [72, 112, 289, 302, 348, 360, 476, 477, 478], "unic": [72, 291], "wish": [72, 74, 87, 89, 91, 94, 99, 103, 107, 117, 143, 154, 163, 179, 189, 199, 204, 230, 246, 247, 248, 249, 255, 258, 263, 265, 267, 274, 288, 315, 331, 337, 338, 344, 371, 380, 394, 395, 397, 402, 423, 458, 461, 462, 463, 464, 472, 478], "clash": [72, 93, 100, 172, 243, 263, 264, 267, 425, 430, 463, 473, 477, 478], "publish": [72, 100, 103, 182, 186, 188, 336, 357, 362, 415, 421, 456, 458, 464, 470, 477, 478], "certainti": [72, 400], "burden": [72, 464, 465, 469, 471, 473], "pyspam_system": 72, "realiti": [72, 179, 288, 333, 390, 422], "plain": [72, 84, 93, 100, 107, 123, 147, 148, 149, 156, 169, 179, 192, 193, 196, 200, 201, 202, 209, 238, 251, 263, 289, 331, 337, 338, 342, 381, 390, 402, 416, 417, 421, 422, 430, 459, 465, 470, 472, 473, 474, 478], "spam_modul": 72, "pyspam_api": 72, "pyspam_api_point": 72, "c_api_object": 72, "pyspam_system_num": 72, "_c_api": 72, "disappear": [72, 74, 99, 136, 379, 459, 461, 478], "bulk": [72, 182, 472], "ifndef": [72, 89, 478], "py_spammodule_h": 72, "endif": [72, 89, 236, 315, 451, 467, 468, 476, 477], "pyspam_system_return": 72, "pyspam_system_proto": 72, "import_spam": 72, "pyinit_cli": 72, "clientmodul": 72, "mention": [72, 74, 75, 76, 87, 94, 97, 100, 102, 103, 106, 111, 163, 172, 173, 187, 189, 209, 210, 211, 221, 258, 264, 267, 279, 288, 289, 327, 330, 334, 349, 357, 422, 423, 427, 429, 430, 431, 457, 465, 469, 471, 472, 475, 477, 478], "metaphor": [72, 248, 249, 370], "cython": [73, 77, 78, 84, 90, 472, 478], "swig": [73, 78, 85], "numba": 73, "baggag": 74, "easiest": [74, 75, 78, 83, 84, 117, 182, 189, 239, 243, 288, 289, 384], "dealt": [74, 153, 207, 288], "newdatatype_dealloc": 74, "newdatatypeobject": 74, "obj_underlyingdatatypeptr": 74, "other_obj": 74, "unwound": [74, 263, 315, 423], "mislead": [74, 106, 119, 149, 179, 390, 406, 459, 470, 478], "my_dealloc": 74, "cbresult": 74, "err_typ": 74, "err_valu": 74, "err_traceback": 74, "textual": [74, 75, 84, 102, 106, 117, 172, 197, 263, 284, 310, 315, 340, 353, 371, 405, 406, 425, 431, 435, 459, 474, 478], "newdatatype_repr": 74, "ified_newdatatyp": 74, "human": [74, 99, 100, 106, 114, 186, 187, 194, 226, 239, 241, 263, 284, 295, 299, 329, 331, 337, 338, 345, 348, 372, 382, 396, 409, 425, 448, 459, 466, 471, 472, 478], "consumpt": [74, 119, 251, 295, 318, 328, 348, 470, 471, 478], "newdatatype_str": 74, "stringified_newdatatyp": 74, "sens": [74, 84, 88, 89, 93, 97, 99, 100, 109, 111, 117, 179, 182, 186, 201, 202, 222, 243, 255, 267, 279, 288, 289, 304, 329, 334, 336, 337, 340, 341, 348, 362, 379, 389, 398, 421, 423, 427, 456, 465, 470, 472, 473, 475, 478], "flavor": [74, 189, 231, 257, 289, 338, 340, 422, 425, 451, 478], "newdatatype_getattr": 74, "100s": 74, "400s": 74, "newdatatype_setattr": 74, "newdatatype_richcmp": 74, "obj1": [74, 461], "obj2": [74, 461], "size1": 74, "size2": 74, "newdatatyp": 74, "unfil": [74, 425, 478], "newdatatype_hash": 74, "some_s": 74, "32767": [74, 343], "some_numb": 74, "toy": [74, 295], "newdatatype_cal": 74, "arg3": [74, 84, 96, 113], "slight": [74, 78, 84, 88, 89, 94, 99, 100, 107, 165, 171, 182, 192, 211, 226, 239, 247, 254, 288, 289, 293, 303, 304, 337, 340, 379, 385, 389, 427, 431, 457, 459, 460, 461, 462, 463, 464, 470, 472, 473, 475, 477, 478], "incur": [74, 182, 257, 421, 470], "trivialtyp": 74, "breviti": [74, 288], "trivial_dealloc": 74, "trivialobject": 74, "tp_": 74, "some_object": [74, 84, 251, 384], "mytyp": [74, 288, 468], "myth": 74, "download": [74, 79, 84, 100, 292, 303, 370, 390, 394, 423, 435, 448, 456, 462, 463, 464, 470, 471, 475, 476, 478], "www": [74, 78, 94, 104, 106, 107, 148, 154, 158, 162, 165, 179, 180, 196, 231, 236, 238, 239, 257, 310, 314, 315, 336, 337, 340, 348, 382, 389, 390, 391, 398, 406, 408, 419, 421, 423, 430, 435, 440, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 473, 475, 478], "gentl": [75, 92, 97, 117, 459], "cover": [75, 84, 91, 93, 98, 99, 100, 103, 106, 108, 130, 165, 187, 189, 190, 204, 239, 264, 279, 288, 315, 331, 333, 340, 344, 364, 375, 379, 381, 383, 389, 405, 422, 429, 450, 457, 458, 459, 462, 465, 469, 471, 472, 478], "customobject": 75, "customtyp": 75, "custommodul": 75, "pyinit_custom": 75, "hope": [75, 97, 99, 100, 209, 325, 381, 456, 457, 458, 471, 472, 474, 476], "familiar": [75, 91, 94, 97, 100, 103, 111, 153, 190, 224, 289, 336, 427, 458, 459, 460, 463, 478], "wari": [75, 349], "accid": [75, 117, 463, 464, 465, 476, 478], "ob_fval": 75, "pick": [75, 84, 100, 107, 138, 156, 241, 247, 271, 288, 293, 377, 383, 416, 457, 462], "mycustom": 75, "ext_modul": [75, 457], "fire": [75, 96, 100, 117, 136, 329, 469, 478], "uninterest": [75, 186], "showcas": [75, 123, 130], "custom2": 75, "custom_dealloc": 75, "custom_new": 75, "custom_init": 75, "ooi": 75, "custom_memb": 75, "custom_nam": 75, "custom_method": 75, "pyinit_custom2": 75, "midway": 75, "polymorph": [75, 86, 89, 412], "oppos": [75, 89, 91, 103, 119, 123, 153, 197, 204, 243, 333, 390, 427, 463, 473, 478], "ourselv": [75, 93, 111, 381, 478], "anyon": [75, 102, 337, 357, 421, 458, 464, 472], "tempt": [75, 100, 102, 103, 362], "riski": [75, 189, 478], "paranoid": 75, "uui": 75, "custom_getfirst": 75, "custom_setfirst": 75, "custom_getlast": 75, "custom_setlast": 75, "custom_getsett": 75, "custom3": 75, "pyinit_custom3": 75, "aren": [75, 83, 84, 87, 91, 92, 93, 94, 97, 103, 106, 109, 136, 151, 163, 172, 197, 213, 251, 255, 264, 265, 288, 292, 334, 337, 343, 348, 364, 372, 384, 385, 414, 416, 457, 458, 459, 460, 461, 462, 463, 464, 471, 472, 478], "did": [75, 83, 84, 89, 100, 102, 103, 107, 136, 163, 187, 189, 198, 239, 241, 279, 280, 288, 289, 310, 315, 325, 337, 344, 348, 377, 381, 383, 410, 417, 423, 426, 437, 457, 458, 459, 467, 469, 470, 471, 472, 475, 476, 478], "unneed": [75, 406, 464, 472, 477, 478], "some_attribut": [75, 384], "custom_travers": 75, "custom_clear": 75, "custom4": 75, "pyinit_custom4": 75, "subobject": [75, 84], "vret": 75, "autom": [75, 83, 102, 119, 284, 360, 458, 464, 472, 476, 478], "nevertheless": [75, 89, 100, 136, 154, 193, 209, 288, 353, 408, 465], "prone": [75, 111, 148, 179, 189, 295, 304, 340, 469, 473, 478], "micro": [75, 84, 348, 457, 464, 466, 475, 478], "expens": [75, 84, 99, 177, 184, 186, 222, 254, 262, 285, 304, 328, 334, 337, 348, 427, 450, 461, 469, 471, 472, 474, 475, 476, 478], "robust": [75, 136, 148, 180, 251, 304, 329, 397, 464, 470, 472, 473, 478], "reimplement": [75, 383, 459, 472, 473, 474, 475, 478], "difficult": [75, 83, 91, 94, 99, 102, 103, 106, 117, 264, 295, 390, 408, 457, 458, 459, 460, 461, 464, 470, 476, 478], "sublist": [75, 370, 457, 470], "sublistobject": 75, "sublist_incr": 75, "sublist_method": 75, "sublist_init": 75, "sublisttyp": 75, "sublistmodul": 75, "pyinit_sublist": 75, "resembl": [75, 93, 173, 221, 239, 289, 293, 327, 450, 459, 463, 464, 476, 478], "explanatori": [76, 189, 310, 383, 478], "materi": [76, 94, 103, 173, 186, 230, 333, 337, 370, 421, 461, 464, 478], "xy": [76, 257, 330, 381], "studi": [76, 84, 94, 189, 379, 460, 463], "paradigm": [76, 94], "reassur": 76, "pythonxi": [76, 456, 476], "ni": [76, 303, 389, 441, 462], "cl": [76, 293, 463], "thank": [76, 94, 98, 102, 103, 106, 152, 196, 231, 279, 336, 357, 381, 384, 457, 458, 459, 460, 461, 462, 463, 464, 470, 471, 474, 475, 478], "_declspec": 76, "dllexport": [76, 85], "initspam": 76, "nigetspamdata": 76, "studio": [76, 84, 451, 456, 463, 473, 478], "100k": 76, "rid": [76, 458, 478], "msvcrtxx": 76, "guido": [77, 79, 84, 86, 92, 186, 275, 340, 381, 421, 437, 445, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478], "van": [77, 79, 84, 86, 156, 179, 418, 421, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478], "rossum": [77, 79, 84, 86, 418, 421, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478], "20": [77, 84, 88, 91, 92, 94, 96, 99, 100, 103, 106, 131, 136, 152, 172, 177, 179, 182, 189, 205, 207, 217, 231, 232, 243, 251, 255, 257, 263, 279, 289, 292, 304, 314, 315, 317, 318, 333, 337, 339, 340, 348, 353, 361, 362, 379, 381, 389, 391, 421, 430, 435, 444, 446, 450, 451, 457, 461, 462, 463, 464, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "30": [77, 83, 84, 91, 92, 94, 96, 99, 100, 123, 133, 152, 156, 179, 182, 189, 232, 255, 257, 263, 265, 289, 312, 314, 317, 333, 339, 340, 341, 357, 360, 361, 362, 379, 418, 435, 436, 446, 447, 451, 460, 461, 462, 464, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478], "19999999999999996": 77, "0011001100110011001100110011001100110011001100110011": 77, "1999999999999999555910790149937383830547332763671875": 77, "15": [77, 84, 91, 94, 96, 99, 100, 105, 106, 128, 154, 156, 163, 177, 179, 189, 199, 207, 211, 219, 232, 237, 243, 254, 255, 257, 263, 284, 289, 295, 314, 315, 318, 336, 337, 339, 340, 341, 344, 348, 361, 362, 373, 376, 382, 419, 420, 430, 441, 451, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478], "eight": [77, 106, 173, 255, 340, 350, 364, 430, 457, 460, 461, 476, 478], "modula": [77, 79, 270, 435], "m_": 77, "baseclass": 77, "methodnam": [77, 279, 383, 414, 435, 436], "200": [77, 84, 107, 152, 173, 182, 186, 219, 237, 238, 241, 333, 337, 340, 364, 379, 383, 390, 402, 422, 441, 447, 460, 474, 476, 478], "572": [77, 422, 425, 469, 476, 478], "mail": [77, 79, 83, 94, 98, 100, 102, 103, 140, 190, 191, 192, 194, 196, 198, 201, 213, 244, 265, 267, 268, 284, 289, 331, 337, 351, 383, 402, 421, 447, 449, 457, 458, 459, 460, 461, 462, 463, 470, 473, 478], "pipermail": [77, 449, 458, 460], "3000": [77, 86, 110, 380, 381, 422, 423, 463, 465], "2006": [77, 94, 179, 263, 310, 406, 408, 417, 421, 462, 477], "004643": 77, "mydict": [77, 84, 381, 461], "elif": [77, 84, 88, 91, 94, 100, 107, 119, 179, 186, 196, 224, 246, 285, 315, 336, 338, 340, 348, 353, 422, 423, 426, 427, 430, 436, 462, 471, 478], "function_1": [77, 96], "function_2": [77, 96], "method_1": 77, "myvisitor": 77, "visit_a": 77, "method_nam": [77, 78], "visit_": [77, 119], "stackless": [77, 429], "nuitka": [77, 84], "jython": [77, 83, 86, 93, 299, 357, 402, 429, 444, 450, 458, 461, 463, 469, 470, 472, 478], "pypi": [77, 83, 88, 99, 102, 148, 184, 299, 303, 337, 348, 384, 394, 404, 420, 429, 444, 449, 454, 460, 462, 464, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478], "very_long_list_of_fil": 77, "boehm": 77, "purifi": [77, 451], "pascal": [77, 79, 84, 94, 343, 435, 436, 437, 460, 464], "lisp": [77, 84, 94, 459], "539294296": 77, "1142331976": 77, "listwrapp": 77, "the_list": 77, "98767": 77, "555": 77, "el": [77, 140, 354, 389, 408, 426], "9999999": 77, "1001": [77, 154, 341], "7777777": 77, "333": [77, 84, 437, 439, 462], "stub": [77, 152, 253, 254, 289, 348, 381, 384, 478], "driven": [77, 84, 165, 272, 357, 364, 379, 383, 405, 407, 457, 470, 478], "1970": [77, 79, 144, 147, 179, 335, 361, 478], "spaghetti": 77, "mydir": 77, "delphi": 77, "21": [77, 94, 96, 100, 106, 179, 182, 186, 199, 219, 222, 231, 232, 315, 337, 339, 361, 373, 377, 436, 444, 445, 450, 459, 460, 462, 463, 470, 471, 474, 476, 477, 478], "42": [77, 84, 93, 99, 117, 119, 122, 126, 136, 156, 165, 166, 172, 182, 189, 221, 222, 251, 264, 279, 280, 288, 292, 293, 314, 339, 340, 341, 362, 376, 379, 381, 383, 384, 415, 422, 424, 435, 436, 441, 444, 461, 462, 463, 470, 471, 474, 476, 477, 478], "63": [77, 314, 336, 348, 478], "propos": [77, 79, 86, 150, 171, 222, 263, 337, 340, 344, 397, 405, 422, 425, 427, 430, 431, 457, 458, 460, 461, 462, 463, 464, 470, 474, 476, 478], "idea": [77, 78, 83, 84, 88, 91, 92, 93, 98, 99, 100, 117, 179, 186, 189, 207, 257, 262, 291, 303, 339, 371, 379, 423, 457, 459, 460, 461, 464, 465, 466, 470, 474, 478], "2016": [77, 179, 337, 441, 448, 456, 474, 475, 478], "040070": 77, "fee": [77, 221, 421], "fie": 77, "fum": [77, 221], "fiefoo": 77, "pyrex": 78, "sip": [78, 389], "cxx": [78, 350, 451, 478], "weav": 78, "pythonrun": [78, 462, 478], "al": [78, 94, 177, 333, 337, 342, 371, 463, 474, 478], "pymap": 78, "arg_format": 78, "print_error": [78, 470], "stdoutcatch": 78, "attrnam": [78, 263, 405], "realiz": [78, 102, 204, 293, 462, 463, 478], "ugli": [78, 111, 186, 364, 457, 460], "hackeri": 78, "worth": [78, 100, 114, 189, 257, 264, 265, 279, 379, 429, 430, 457, 458, 459, 462, 469, 473, 478], "gdb": [78, 84, 464, 478], "gdbinit": [78, 464, 478], "br": [78, 173, 430, 465, 466, 470, 471, 478], "_pyimport_loaddynamicmodul": 78, "myscript": [78, 293, 304, 433, 450], "50": [78, 83, 84, 94, 99, 100, 102, 136, 152, 156, 179, 182, 243, 263, 275, 304, 314, 315, 333, 339, 348, 361, 362, 371, 379, 383, 385, 407, 408, 421, 444, 445, 446, 463, 464, 468, 470, 473, 474, 475, 476, 477, 478], "python2": [78, 108, 109, 340, 416, 456, 458, 463, 472, 478], "red": [78, 79, 91, 93, 99, 100, 103, 105, 144, 147, 156, 173, 207, 236, 257, 314, 339, 340, 364, 371, 379, 397, 421, 436, 447, 460, 461, 466, 467, 468, 469, 474, 478], "hat": [78, 79, 421, 446], "devel": [78, 96, 284, 478], "rpm": [78, 457, 460], "debian": [78, 219, 455, 457, 458, 475, 478], "apt": [78, 96, 474, 478], "tripl": [78, 86, 103, 106, 173, 186, 284, 289, 292, 296, 315, 324, 333, 340, 359, 379, 422, 430, 469, 478], "myreadlin": 78, "relink": 78, "linkcc": [78, 451], "bpl": 78, "amoeba": 79, "bourn": [79, 297], "1989": [79, 179, 463], "usenet": [79, 83, 99], "bn": 79, "rcn": [79, 92], "0an": 79, "0bn": 79, "0rcn": 79, "a0": 79, "4a0": 79, "newsgroup": [79, 284, 461], "comp": [79, 83, 84, 99, 146, 284, 449, 458, 459, 462, 471, 472], "lang": [79, 83, 84, 99, 106, 226, 262, 336, 390, 449, 458, 459, 460, 462, 465], "communiti": [79, 84, 243, 381, 454, 457, 458, 462, 463, 470, 475], "rss": [79, 459], "git": [79, 140, 344, 472, 476, 478], "jelk": 79, "boer": 79, "283": [79, 179], "303": [79, 107, 237, 390], "wiki": [79, 80, 83, 84, 94, 156, 231, 336, 337, 348, 363, 454, 461, 462, 464, 470, 471, 478], "moin": [79, 83, 454, 461], "pythonbook": 79, "bbc": [79, 162, 434, 473], "18": [79, 88, 94, 96, 106, 179, 182, 189, 219, 222, 232, 292, 314, 315, 328, 337, 339, 340, 343, 348, 371, 441, 446, 460, 461, 464, 467, 468, 469, 470, 475, 476, 477, 478], "602": [79, 477], "mailman": [79, 459, 461, 468, 477, 478], "zope": [79, 421, 458, 459, 470], "googl": [79, 82, 83, 99, 107, 398, 414, 462, 463, 464, 469, 471, 476, 478], "yahoo": [79, 180, 462, 463], "lucasfilm": 79, "ltd": [79, 337, 421], "pygam": 79, "__sizeof__": [79, 348, 384, 463, 478], "__": [79, 84, 100, 285, 357, 430], "emac": [79, 85, 91, 106, 152, 173, 243, 267, 327, 430, 454, 463], "edu": [79, 94, 390, 421, 459, 460, 478], "sig": [79, 98, 106, 108, 123, 139, 154, 231, 251, 289, 329, 373, 454, 457, 458, 460, 464, 473], "tcl_librari": 80, "tk_librari": 80, "sam": [80, 290, 421, 457, 468, 478], "sourceforg": [80, 179, 457, 458, 460, 463, 478], "tkappinit": 80, "tclsam_init": 80, "libtclsam": 80, "libtksam": 80, "xt": [80, 146, 230, 266], "xtaddinput": 80, "takefocus": [80, 371], "hp": [82, 461, 478], "compaq": 82, "engin": [83, 94, 97, 103, 182, 262, 315, 336, 364, 371, 408, 410, 457, 459, 461, 463, 464, 473, 478], "mathmodul": 83, "sl": [83, 280, 478], "scriptfil": 83, "755": [83, 100], "env": [83, 100, 106, 139, 163, 196, 289, 292, 340, 344, 390, 394, 416, 433, 443, 448, 450, 455, 456, 460, 461, 468, 476, 478], "alex": [83, 460, 463, 464, 467, 468, 469, 473, 474, 476, 477, 478], "rezinski": 83, "ncurs": [83, 91, 173, 457, 458, 461, 467, 476, 478], "sysv": [83, 457, 458], "colour": [83, 91, 103, 119, 457, 478], "mous": [83, 91, 173, 344, 366, 371, 379, 457, 463, 478], "ose": [83, 254, 333, 457, 475, 478], "fancier": [83, 117, 186, 461, 462, 464], "smalltalk": [83, 94, 156, 383, 435, 458], "delight": 83, "main_log": 83, "tractabl": 83, "ters": [83, 299, 379, 456], "pleasant": [83, 457, 458, 462], "fun": [83, 163, 222, 379, 381, 383, 468, 474], "flaw": [83, 87, 384, 459, 470, 478], "self_test": 83, "unavail": [83, 107, 189, 251, 266, 279, 289, 328, 381, 423, 478], "fake": [83, 288, 402, 423, 478], "epydoc": 83, "thread_task": 83, "sequenti": [83, 100, 122, 159, 214, 231, 279, 295, 304, 340, 357, 384, 423, 447, 478], "001": [83, 179, 221, 257, 267, 304, 361, 430], "guess": [83, 154, 163, 180, 189, 196, 202, 205, 241, 246, 251, 262, 272, 304, 390, 402, 429, 451, 460, 470, 478], "job": [83, 91, 99, 100, 103, 106, 117, 125, 147, 155, 197, 203, 226, 279, 289, 295, 341, 344, 370, 390, 427, 457, 463, 470, 478], "realist": [83, 344, 384, 406, 461, 462], "130283832797456": 83, "130283824404752": 83, "130283816012048": 83, "130283807619344": 83, "130283799226640": 83, "consult": [83, 84, 91, 94, 99, 103, 151, 163, 172, 179, 226, 263, 264, 267, 289, 291, 315, 318, 328, 331, 333, 336, 338, 348, 361, 402, 427, 448, 456, 457, 459, 460, 461, 462, 463, 464, 465, 469, 477, 478], "account": [83, 103, 154, 156, 159, 163, 179, 182, 186, 198, 205, 221, 231, 240, 262, 263, 264, 282, 289, 292, 303, 335, 343, 348, 353, 354, 357, 394, 462, 466, 470, 472, 473, 474, 476, 477, 478], "pvm": 83, "l2": [83, 154, 371], "d1": [83, 464, 477], "d2": [83, 464, 477], "mass": [83, 93, 179, 457], "mutex": [83, 112, 121, 135, 336, 348, 478], "hindranc": 83, "multiprocessor": [83, 280, 299], "insist": [83, 305, 364], "greg": [83, 457, 459, 460, 461, 462, 471, 473, 476, 478], "stein": [83, 457, 478], "adam": [83, 463, 464, 467, 469, 470, 471, 474, 475, 476, 477, 478], "olsen": [83, 463, 464], "experi": [83, 89, 93, 94, 99, 101, 103, 120, 123, 172, 226, 304, 336, 364, 379, 383, 405, 456, 457, 458, 459, 463, 464, 466, 473, 476, 478], "safethread": 83, "exhibit": [83, 243, 254, 289, 340], "sharp": [83, 154], "slower": [83, 84, 103, 154, 222, 243, 254, 266, 279, 326, 379, 439, 460, 461, 463, 465, 469, 475, 476, 477, 478], "compens": [83, 304, 474, 478], "creativ": [83, 231, 332], "judici": [83, 177, 463], "tremend": 83, "3rd": [83, 315, 330, 381, 441, 471, 478], "rate": [83, 114, 138, 285, 291, 304, 339, 345, 391, 396, 474, 478], "gain": [83, 89, 100, 141, 163, 246, 254, 295, 348, 390, 427, 429, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478], "old_path": 83, "new_path": 83, "ntfs": 83, "hfs": 83, "hhl": 83, "letter": [83, 91, 103, 106, 140, 154, 173, 174, 182, 186, 189, 224, 262, 263, 288, 292, 293, 297, 315, 337, 340, 341, 359, 371, 382, 389, 390, 417, 425, 430, 437, 444, 457, 459, 461, 462, 463, 464, 465, 469, 471, 473, 474, 475, 478], "homogen": [83, 340, 343, 403], "osx": [83, 172, 472, 475, 478], "ironpython": [83, 86, 93, 299, 429, 463, 478], "pyseri": 83, "mitch": 83, "chapman": [83, 461, 476, 478], "selm": 83, "34a04430": 83, "cf9": 83, "ohioe": 83, "arrang": [83, 94, 99, 100, 123, 129, 130, 136, 189, 232, 251, 264, 279, 337, 360, 364, 370, 371, 478], "paul": [83, 310, 456, 457, 458, 459, 460, 462, 463, 464, 468, 469, 471, 472, 473, 475, 476, 477, 478], "boddi": [83, 456], "webprogram": 83, "cameron": [83, 144], "laird": 83, "technolog": [83, 91, 421], "20210224183619": 83, "phaseit": 83, "claird": 83, "web_python": 83, "me": [83, 196, 222, 236, 284, 341, 357, 385, 448, 456, 463, 468, 469], "qs": [83, 389], "josephin": 83, "mi": [83, 146, 462, 476, 477, 478], "req": [83, 107, 337, 384, 390, 470], "hdrs": [83, 388, 390], "guy": 83, "steel": [83, 478], "2c": [83, 364, 478], "sender": [83, 100, 196, 199, 204, 267, 331], "fromaddr": [83, 100, 264, 265, 331, 337], "toaddr": [83, 100, 264, 265, 331], "localhost": [83, 100, 104, 107, 196, 238, 241, 243, 264, 265, 279, 301, 309, 325, 331, 334, 337, 354, 390, 414, 415, 446, 478], "sbin": [83, 172, 315], "progress": [83, 103, 148, 189, 208, 279, 289, 327, 336, 337, 353, 370, 371, 394, 395, 456, 457, 459, 464, 478], "twist": [83, 385, 421, 478], "disk": [83, 94, 99, 106, 165, 180, 190, 196, 204, 209, 230, 239, 243, 254, 261, 263, 265, 267, 274, 277, 280, 284, 289, 291, 294, 295, 318, 323, 326, 328, 336, 344, 348, 353, 377, 400, 408, 417, 423, 460, 462, 463, 465, 471, 478], "lightweight": [83, 212, 222, 336, 376, 394, 404, 456, 457, 462, 463, 473, 474], "databaseprogram": 83, "sdev": 83, "idle3": 84, "pythonwin": [84, 172, 456, 457], "cool": 84, "activepython": [84, 456], "eric": [84, 91, 171, 173, 292, 320, 408, 437, 457, 458, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "pyqt": [84, 454], "scintilla": 84, "trepan3k": 84, "wing": 84, "komodo": 84, "pycharm": [84, 474], "pylint": [84, 102], "pyflak": [84, 478], "sooner": [84, 172, 406, 463], "mypi": [84, 102, 381, 423, 468, 473, 474, 478], "pyre": 84, "pytyp": [84, 102, 474], "scan": [84, 89, 92, 94, 96, 99, 103, 154, 173, 224, 226, 241, 289, 315, 324, 357, 364, 381, 423, 424, 450, 459, 460, 462, 464, 470, 473, 478], "pyinstal": [84, 279], "pyoxid": 84, "py2app": [84, 454], "py2ex": [84, 279, 478], "foobar": [84, 117, 216, 221, 264, 288, 315, 340, 385, 478], "remind": [84, 340, 436, 465, 478], "superfici": 84, "moment": [84, 89, 102, 106, 179, 209, 254, 279, 289, 396, 427, 474, 478], "clutter": [84, 100, 470], "defeat": [84, 103, 395, 423, 478], "everywher": [84, 357, 478], "basi": [84, 99, 100, 154, 172, 239, 258, 263, 267, 304, 348, 353, 417, 421, 427, 431, 456, 459, 460, 475, 478], "harder": [84, 189, 288, 340, 385, 469, 478], "linter": [84, 119, 381], "dateutil": [84, 179, 478], "gordon": [84, 104, 457, 460, 478], "mcmillan": [84, 104, 460], "2nd": [84, 257, 315, 364, 478], "grab": [84, 99, 100, 360, 456, 478], "1st": [84, 179, 257], "techniqu": [84, 94, 100, 106, 148, 157, 189, 197, 222, 289, 304, 315, 349, 356, 370, 381, 384, 385, 427, 470, 476, 478], "gone": [84, 97, 107, 237, 384, 457, 458, 460, 463, 465, 470, 476, 478], "bite": [84, 103, 288, 385], "neophyt": 84, "memoiz": [84, 136, 222, 458, 474, 478], "_cach": [84, 279, 458], "matter": [84, 92, 93, 100, 106, 159, 179, 189, 204, 243, 249, 262, 288, 289, 292, 334, 336, 340, 348, 356, 371, 381, 383, 384, 385, 395, 423, 426, 456, 457, 459, 461, 462, 463, 464, 472, 478], "tast": 84, "3c": [84, 364], "somevar": 84, "mistaken": [84, 435, 457, 470, 472, 478], "diagnos": [84, 99, 172, 243, 263, 383, 385], "a_list": [84, 376], "some_tupl": 84, "some_int": 84, "calle": [84, 375], "se": [84, 239, 354, 364], "func1": [84, 381], "99": [84, 91, 104, 144, 172, 179, 182, 257, 262, 264, 315, 339, 340, 361, 461, 464, 465, 470], "100": [84, 91, 100, 106, 107, 114, 122, 123, 133, 144, 152, 177, 179, 182, 186, 197, 204, 210, 221, 237, 241, 243, 257, 262, 271, 279, 280, 291, 314, 325, 333, 339, 340, 341, 353, 361, 362, 371, 379, 383, 390, 400, 402, 414, 422, 425, 436, 439, 441, 444, 445, 446, 447, 457, 460, 462, 463, 464, 467, 468, 470, 472, 473, 476, 478], "clearest": [84, 460], "changeabl": 84, "func2": 84, "func3": 84, "func4": 84, "linear": [84, 129, 138, 157, 165, 186, 257, 324, 339, 340, 345, 379, 435, 460, 472, 476, 478], "tax": [84, 315, 444, 460], "10e6": 84, "exponenti": [84, 182, 265, 340, 357, 404, 425, 460, 461, 463, 478], "inc": [84, 337, 403, 421, 457, 463], "dec": [84, 85, 94, 179, 217, 219, 446, 459, 460, 478], "newdict": 84, "olddict": 84, "new_l": 84, "0x16d07cc": 84, "arguabl": [84, 337], "deliber": [84, 89, 117, 288, 301, 330, 340, 380, 383, 421, 450, 472], "benefici": [84, 100, 136, 421, 473], "on_tru": 84, "on_fals": 84, "ulf": 84, "bartelt": 84, "prime": [84, 162, 189, 204, 221, 257, 279, 340, 348, 361, 436, 446, 470, 474, 476, 478], "fibonacci": [84, 222, 436, 444, 445, 468], "mandelbrot": 84, "ru": [84, 214, 460], "iu": [84, 460], "sx": 84, "sy": 84, "yc": 84, "xc": [84, 348], "80": [84, 89, 102, 104, 133, 144, 152, 154, 163, 204, 238, 239, 243, 257, 303, 304, 328, 333, 334, 339, 379, 383, 389, 390, 447, 461, 468, 470, 473, 474, 478], "___": 84, "______": 84, "__________": 84, "_________________": 84, "axi": [84, 151, 271, 371, 436, 467], "____________________________": 84, "sole": [84, 89, 93, 102, 157, 182, 251, 279, 280, 336, 340, 359, 380, 381, 397, 421, 423, 425, 464, 471, 472, 473, 475, 478], "invari": [84, 93, 94, 182, 192, 295, 381, 425, 427, 478], "0o10": [84, 221], "0xa5": 84, "165": [84, 263, 339], "0xb2": 84, "178": 84, "ago": [84, 459, 478], "190": [84, 339, 459], "144": [84, 222, 257, 436, 444, 445, 476], "0144": 84, "0x144": 84, "rm": [84, 88, 292, 327, 478], "rf": [84, 327, 430, 478], "09": [84, 100, 151, 205, 263, 271, 328, 337, 443, 478], "fanci": [84, 91, 100, 460, 464, 478], "04d": [84, 222], "3f": [84, 156, 441, 470, 476], "assembl": [84, 94, 106, 187, 336, 344, 364, 423, 429, 462, 478], "sio": 84, "yello": 84, "paren": [84, 109, 119, 171, 243, 426, 462, 478], "get_input": 84, "do_foo": [84, 152], "do_bar": [84, 152], "foo_inst": 84, "do_": [84, 152, 241], "myfunc": [84, 100, 187, 315, 415], "fname": [84, 106, 165, 186, 264, 377, 472], "untermin": [84, 478], "workaround": [84, 177, 189, 293, 337, 340, 385, 397, 417, 469, 471, 476, 478], "tough": 84, "dive": 84, "hot": [84, 243, 304], "spot": [84, 291, 359], "benchmark": [84, 222, 304, 450, 457, 458, 460, 461, 462, 464, 465, 466, 468, 471, 472, 473, 476, 477, 478], "sophist": [84, 89, 130, 152, 165, 182, 263, 337, 341, 408, 459, 462], "sprinkl": [84, 429], "moder": [84, 94, 103, 284, 288, 301, 315, 459, 460], "tend": [84, 98, 146, 186, 222, 301, 304, 466], "outweigh": 84, "detriment": 84, "confid": [84, 102, 148, 314], "skill": [84, 379], "ineffici": [84, 254, 289, 377, 469, 473, 478], "quadrat": [84, 157, 186, 340, 404, 464, 467, 478], "my_str": [84, 469], "my_bytes_object": 84, "cheap": [84, 172, 295, 478], "penultim": 84, "activest": [84, 449, 454, 457, 470], "52560": 84, "reorder": [84, 93, 123, 408, 478], "mylist": [84, 177, 317, 470], "variat": [84, 92, 93, 103, 179, 189, 267, 289, 301, 337, 344, 349, 423, 456, 462, 478], "keep_funct": 84, "keep_condit": 84, "fastest": [84, 230, 279, 315, 362, 379, 446, 463, 470, 476], "con": [84, 336, 478], "lisp_list": 84, "analogu": [84, 279], "car": 84, "cdr": 84, "replic": [84, 94, 204, 279, 456, 461, 464, 478], "eleg": [84, 163, 461, 470], "suffic": [84, 221, 291], "exemplar": 84, "wrote": [84, 89, 94, 334, 421, 457, 459, 461, 472, 478], "randal": [84, 105], "schwartz": [84, 105, 463], "isort": 84, "list1": 84, "list2": 84, "embodi": [84, 203, 405], "refin": [84, 475, 478], "mboxmailbox": 84, "maildirmailbox": 84, "outlookmailbox": 84, "mere": [84, 165, 179, 189, 221, 280, 288, 329, 344, 348, 379, 421, 422, 465], "class1": [84, 384, 385, 459], "class2": [84, 384, 385, 459], "upperout": 84, "outfil": [84, 117, 137, 258, 288, 297, 375, 447, 466, 470, 478], "_outfil": 84, "redefin": [84, 141, 157, 246, 334, 423, 460, 463, 478], "trickier": [84, 288], "rough": [84, 92, 100, 106, 171, 198, 222, 239, 248, 257, 271, 277, 279, 288, 289, 298, 314, 340, 357, 360, 380, 423, 431, 439, 457, 463, 464, 475, 477, 478], "incident": [84, 209, 247, 380, 421, 478], "basealia": 84, "getcount": [84, 287, 477], "rebind": [84, 223, 431, 461, 478], "tight": [84, 99, 132, 425, 429, 478], "answer": [84, 88, 92, 93, 130, 151, 189, 222, 231, 264, 267, 304, 341, 361, 437, 441, 457, 461, 465, 478], "cout": 84, "mangl": [84, 192, 221, 317, 425, 430, 431, 435, 472, 478], "_classname__spam": [84, 435], "privaci": [84, 337], "bother": [84, 91, 100, 102, 106, 279, 458, 459, 469], "vanish": [84, 154, 381], "inconveni": [84, 89, 239, 251, 385, 408], "wors": [84, 103, 123, 179, 184, 469, 471, 472, 478], "patholog": [84, 478], "illustr": [84, 89, 98, 99, 100, 107, 117, 136, 169, 179, 189, 204, 239, 246, 264, 327, 329, 336, 340, 344, 354, 364, 383, 390, 422, 425, 461, 471], "13901272": 84, "13891296": 84, "inadvis": 84, "500": [84, 107, 152, 179, 182, 210, 219, 237, 284, 339, 340, 393, 402, 445, 447, 460, 462, 467, 478], "thon": [84, 444], "english": [84, 100, 106, 288, 359, 361, 379, 429, 430, 464, 465, 473], "_sentinel": 84, "late": [84, 91, 102, 186, 299, 457, 478], "firstofmonthd": 84, "namedint": 84, "xlat": 84, "ten": [84, 92, 100, 156, 173, 182, 304, 314, 343, 460], "titlestr": [84, 379], "2012": [84, 91, 106, 219, 471, 477, 478], "blog": [84, 385, 462], "rock": [84, 106, 117], "princip": [84, 119, 239, 337, 466, 470], "age": [84, 92, 102, 105, 156, 222, 239, 240, 336, 337, 446, 459, 460, 461, 464, 470], "weather": 84, "govern": [84, 100, 177, 182, 190, 389, 414, 421, 470], "websit": [84, 107, 180, 390, 429, 470, 478], "station_id": 84, "_station_id": 84, "current_temperatur": 84, "longitud": [84, 341], "latitud": [84, 341], "station": 84, "historic_rainfal": 84, "mm": [84, 179, 244, 274, 340, 361], "rainfal": 84, "change_st": 84, "cm": [84, 136, 165, 357, 383], "__pycache__": [84, 246, 292, 307, 348, 445, 450, 468, 470, 476, 478], "middl": [84, 89, 91, 123, 165, 195, 293, 314, 317, 359, 379, 411, 462, 464, 474, 478], "xyz": [84, 117, 263, 264, 340, 383, 470, 478], "cfile": [84, 307], "bar_var": 84, "foo_var": 84, "jim": [84, 94, 100, 304, 429, 457, 461, 463, 470, 474, 478], "roskind": [84, 304], "strang": [84, 112, 359, 389, 423, 456, 458, 462, 463], "matthia": [84, 464, 467, 469, 471, 474, 475, 476, 478], "urlich": 84, "restructur": [84, 303, 457, 458, 463, 478], "modnam": [84, 435, 445, 462, 469, 474], "fool": [84, 457, 461], "proof": [84, 94, 199, 279, 457, 476, 478], "paradox": [84, 460], "0x7352a0": 84, "0x4198d0": 84, "yournam": 85, "v3": [85, 333, 478], "d48eceb": 85, "19": [85, 88, 94, 99, 100, 103, 106, 136, 156, 172, 179, 182, 189, 205, 219, 232, 257, 289, 337, 339, 340, 341, 418, 460, 461, 462, 463, 464, 467, 470, 476, 477, 478], "2017": [85, 290, 337, 430, 451, 478], "06": [85, 100, 179, 241, 263, 328, 444, 462, 474, 478], "04": [85, 88, 91, 179, 341, 343, 361, 420, 443, 462, 464, 467, 474, 475, 478], "45": [85, 89, 94, 143, 156, 163, 182, 263, 279, 314, 333, 379, 381, 460, 461, 462, 467, 476, 477], "1900": [85, 179, 361, 430, 463, 470], "hellohellohello": 85, "desktop": [85, 106, 398, 456], "pathext": [85, 328, 394, 456, 469, 472, 478], "mcafe": 85, "pyinit_foo": 85, "__declspec": 85, "nn": 85, "33": [85, 144, 156, 172, 174, 257, 279, 280, 315, 348, 384, 439, 445, 446, 459, 460, 461, 470, 476, 477, 478], "loadlibraryex": [85, 172, 476], "getprocaddress": 85, "leo": [85, 146], "initleo": 85, "initleoc": 85, "initmyappc": 85, "myapp": [85, 99, 100, 163, 231, 364, 416, 473], "pythonnn": 85, "_resultobj": 85, "typemap": [85, 265], "wxpythonwindow": 85, "duck": [86, 340, 381, 463, 472, 478], "bdfl": 86, "benevol": [86, 457], "argument1": 86, "argument2": 86, "argumentn": 86, "1j": [86, 151, 221, 258, 384, 478], "multidimension": [86, 340], "perl": [86, 94, 103, 105, 239, 315, 434, 439, 447, 457, 461, 462, 478], "dictview": [86, 340, 476, 478], "eafp": [86, 289], "forgiv": [86, 457, 478], "lbyl": 86, "75": [86, 91, 100, 186, 189, 279, 339, 379, 444, 446, 460, 461, 463, 464, 474, 475, 476, 477, 478], "sum_two_numb": [86, 119], "_featur": [86, 110, 221], "8192": [86, 104, 219, 221, 238, 402], "81": [86, 101, 257, 279, 314, 339, 373, 437, 441, 444, 446, 476], "443": [86, 133, 238, 337, 472], "parameter": [86, 173, 189, 336, 340, 380, 381, 423, 467, 477, 478], "483": [86, 381, 473], "intens": [86, 173, 266, 289, 471, 478], "collat": [86, 262, 336, 468, 478], "leap": [86, 99, 103, 147, 179, 361], "new_local": 86, "cp1252": [86, 154, 443], "04x": [86, 106], "organiz": [86, 337, 423], "1024": [86, 106, 171, 182, 211, 231, 264, 305, 333, 334, 337, 340, 377, 430, 446, 478], "posonly1": 86, "posonly2": 86, "positional_or_keyword": [86, 251], "kw_only1": 86, "kw_only2": 86, "411": [86, 107, 237, 263, 348, 377, 478], "abracadabra": [86, 92, 156, 279, 340, 341, 437, 461], "variable_nam": 86, "0000": [86, 97, 106, 154, 179, 199, 205, 255, 340, 361, 423, 457, 470, 471, 478], "10ffff": [86, 154, 423, 471, 478], "datastream": 86, "remove_gray_shad": 86, "refactor": [86, 94, 109, 119, 383, 384, 385, 461, 472, 473, 474, 475, 478], "macintosh": [86, 154, 430, 457, 460], "zen": [86, 111], "larri": [87, 89, 339, 464, 466, 467, 471, 472, 476, 477, 478], "hast": [87, 89, 464, 466, 467, 471, 472, 476, 477, 478], "viabl": 87, "inadvert": [87, 165, 251, 463, 472, 473, 478], "ann": 87, "exot": [87, 98, 258, 459], "malform": [87, 119, 154, 182, 195, 221, 238, 254, 267, 341, 461, 463, 470, 478], "nutshel": [87, 89], "__wrapped__": [87, 92, 221, 222, 251, 467, 468, 470, 472, 473, 478], "__globals__": [87, 251, 423, 465, 467, 478], "fn": [87, 100, 106, 162, 196, 263, 394, 402, 416, 417, 465, 473, 476], "paragraph": [87, 89, 99, 136, 193, 243, 258, 288, 289, 292, 337, 340, 359, 408, 415, 421, 423, 457, 460, 478], "tshepang": 88, "mbambo": 88, "fulfil": [88, 107, 237, 241, 337, 355, 458, 460, 470], "devguid": [88, 472], "ctypes_configur": 88, "dotview": 88, "lib_pypi": 88, "drwxr": [88, 219], "xr": [88, 219, 328, 470], "wena": 88, "4096": [88, 104, 106, 112, 156, 169, 219, 221, 231, 333, 340, 360, 470], "feb": [88, 94, 179, 421, 459], "51": [88, 100, 101, 314, 379, 437, 463, 467], "rwxr": [88, 328], "535": 88, "05": [88, 100, 131, 151, 179, 257, 271, 315, 337, 343, 361, 447, 462, 463, 474, 478], "rw": [88, 93, 100, 219, 291, 328, 336, 344, 470, 473, 474, 475], "741": [88, 478], "01": [88, 100, 104, 143, 179, 182, 205, 221, 231, 236, 263, 328, 333, 335, 337, 340, 361, 403, 417, 420, 425, 446, 456, 458, 460, 461, 462, 470, 471, 474, 475, 478], "cftuvsux": 88, "cp": [88, 92, 154, 288, 289, 464, 473], "store_tru": [88, 117, 186, 224, 288, 305, 394, 464, 470, 478], "spirit": 88, "brought": [88, 295, 460, 478], "complaint": [88, 89, 458], "vv": [88, 117, 450, 466, 474, 478], "vvv": [88, 117, 390], "sad": [88, 93, 465, 478], "vvvv": 88, "surfac": [88, 379], "explor": [88, 99, 107, 163, 187, 236, 243, 289, 379, 394, 408, 423, 456, 463, 470, 478], "greedili": 88, "opposit": [88, 94, 103, 106, 205, 315, 379, 423, 457, 463, 465, 478], "sake": [88, 89, 91, 100, 125, 201, 289, 327, 427, 460, 478], "vq": 88, "po": [88, 226, 464, 468], "babel": [88, 226], "pybabel": [88, 226], "ship": [89, 123, 129, 249, 364, 383, 404, 416, 421, 456, 457, 460, 464, 466, 470, 472, 473, 477, 478], "checksum": [89, 143, 333, 353, 417, 419], "mismatch": [89, 189, 209, 212, 263, 315, 330, 337, 408, 422, 458, 460, 462, 464, 473, 478], "regener": [89, 197, 307, 427, 451, 464, 469, 473, 474, 478], "happi": [89, 93, 123, 460, 476, 478], "_end_": 89, "_start_": 89, "srcdir": [89, 451, 470, 478], "impl": [89, 406, 478], "farther": 89, "walkthrough": 89, "checkout": [89, 117, 456, 464, 478], "trunk": [89, 462, 463], "_pickl": [89, 478], "cut": [89, 103, 151, 221, 243, 339, 361, 461, 463, 478], "past": [89, 100, 117, 119, 179, 189, 212, 243, 251, 289, 292, 295, 310, 341, 344, 361, 402, 470, 472, 473, 476, 477, 478], "junk": [89, 186, 279, 284, 344, 478], "margin": 89, "wider": [89, 154, 179, 381, 461, 472], "257": [89, 478], "hygien": 89, "picklerobject": 89, "pickler_typ": 89, "name_of_paramet": 89, "establish": [89, 99, 123, 189, 243, 244, 265, 279, 295, 298, 301, 315, 324, 331, 337, 354, 390, 400, 422, 423, 424, 464, 470, 478], "multicharact": 89, "infer": [89, 117, 157, 189, 221, 222, 264, 279, 298, 361, 376, 381, 474, 478], "outdent": 89, "luck": [89, 405], "_pickle_pickler_dump": 89, "87ecad1261e02ac7": 89, "552eb1c0f52260d9": 89, "__pickle_pickler_dump_methoddef": 89, "__pickle_pickler_dump": 89, "__pickle_pickler_dump__doc__": 89, "rerun": [89, 427, 465], "cur": [89, 106, 267, 277, 336, 341, 382, 425, 430, 463, 464, 474, 478], "reiter": 89, "weird": [89, 117], "return_typ": [89, 426], "your_function_impl": 89, "da39a3ee5e6b4b0d3255bfef95601890afd80709": 89, "_pickle_pickler_dump_impl": 89, "3bd30745bf206a48f8b576a1da3d90f55a0a4187": 89, "issue3664": 89, "segfault": [89, 173, 461, 462, 474, 475, 478], "_pickler_clearbuff": 89, "pickler_method": 89, "__pickle_pickler_clear_memo_methoddef": 89, "_py_id": 89, "new_unique_py_id": 89, "congratul": 89, "collid": [89, 279, 315, 390, 431], "_impl": 89, "pickler_dump": 89, "pickler_dumper_impl": 89, "file_obj": [89, 457, 460], "fix_import": [89, 295, 466], "group_": 89, "favor": [89, 157, 221, 238, 284, 289, 337, 340, 357, 381, 390, 461, 463, 465, 469, 470, 472, 473, 474, 476, 478], "clearer": [89, 94, 102, 189, 288, 340, 457, 458, 459, 460, 461, 463, 475, 478], "mandat": [89, 192, 201, 244, 258, 315, 361, 474], "subclass_of": 89, "parameter_nam": 89, "_length": 89, "unsigned_short": 89, "unsigned_char": 89, "name_of_encod": 89, "unsigned_int": 89, "unsigned_long": 89, "unsigned_long_long": 89, "pysomething_typ": 89, "name_of_c_funct": 89, "rwbuffer": 89, "robuff": 89, "unsigned_": 89, "preprocess": [89, 163, 171, 254, 389], "unreason": [89, 462, 478], "bat": [89, 103, 292, 357, 394, 478], "yep": 89, "nope": [89, 163, 436], "nada": 89, "perspect": [89, 249, 402], "came": [89, 94, 99, 100, 102, 189, 198, 279, 458, 459, 460, 461, 462, 478], "max_widget": 89, "preload": [89, 279, 451, 478], "new_funct": 89, "c_basenam": 89, "existing_funct": 89, "sorri": [89, 436], "proposit": 89, "__ignored_unused_variable__": 89, "self_convert": 89, "thereof": [89, 202, 264, 265, 289, 357, 360, 421, 424, 478], "picklerobject_convert": 89, "zlibmodul": 89, "zlib_compress_compress_impl": 89, "compobject": 89, "6731b3f0ff357ca6": 89, "04d00f65ab01d260": 89, "zlibstat": 89, "__text_signature__": [89, 478], "setattro": 89, "_threadmodul": 89, "local_setattro": 89, "thread_modul": 89, "thread_module_st": 89, "get_thread_st": 89, "573": [89, 477, 478], "converternam": 89, "_convert": [89, 478], "converter_init": 89, "ssize_t_convert": 89, "da39a3ee5e6b4b0d": 89, "35521e4e733823c7": 89, "grep": [89, 96, 100, 101, 243, 344, 457, 478], "creturnconvert": 89, "meth_o_sampl": 89, "interspers": [89, 100, 288], "boon": 89, "rearrang": [89, 447, 457, 460, 462, 464, 477, 478], "peopl": [89, 92, 94, 97, 102, 106, 173, 182, 186, 189, 226, 231, 288, 408, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 471, 474, 476, 478], "hamper": 89, "subsect": [89, 91, 103, 123, 243, 340, 425, 478], "methoddef_defin": 89, "seven": [89, 147, 182, 240, 385, 470, 478], "docstring_prototyp": 89, "docstring_definit": 89, "impl_prototyp": 89, "parser_prototyp": 89, "parser_definit": 89, "impl_definit": 89, "methoddef": [89, 478], "_prototyp": 89, "_definit": 89, "_defin": 89, "five": [89, 100, 182, 265, 267, 288, 289, 315, 334, 336, 337, 348, 389, 410, 457, 463, 471, 476, 478], "preset": [89, 266, 293, 353, 478], "subcommand": [89, 100, 117, 464, 470], "file_templ": 89, "basename_root": 89, "basename_extens": 89, "line_prefix": 89, "line_suffix": 89, "have_functionnam": 89, "module_functionnam": 89, "functionnam": 89, "module_functionname_methoddef": 89, "_methoddef": 89, "wonder": [89, 92, 148, 171, 304, 429, 457, 460, 470], "clever": [89, 106, 148, 295, 341, 459], "ticklish": 89, "posixmodul": [89, 478], "12357": 89, "book": [90, 94, 102, 103, 147, 151, 156, 179, 267, 315, 336, 357, 364, 470, 478], "py3c": 90, "opinion": [90, 457, 462], "kuchl": [91, 94, 103, 106, 173, 457, 458, 459, 460, 461, 462, 463, 464, 472], "raymond": [91, 92, 94, 105, 173, 343, 422, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "paint": [91, 173, 379, 459], "vt100s": [91, 173], "nich": 91, "valuabl": [91, 111, 226, 333, 376, 471], "button": [91, 100, 148, 173, 185, 243, 277, 364, 370, 371, 379, 421, 456, 474, 475, 476, 478], "urwid": 91, "commerci": [91, 291, 421, 463], "carri": [91, 92, 99, 154, 180, 182, 187, 261, 263, 271, 279, 288, 314, 336, 340, 383, 404, 405, 421, 424, 430, 431, 462, 463, 464, 473, 476, 478], "proprietari": [91, 421], "unicurs": 91, "biggest": [91, 102, 377, 465, 470, 471], "mvaddstr": 91, "mvwaddstr": 91, "stdscr": [91, 173, 463], "multibyt": [91, 173, 204, 340, 471, 478], "mess": [91, 117, 288, 459], "die": [91, 324, 397, 476, 478], "buggi": [91, 457, 459, 469, 471, 472, 478], "uncaught": [91, 149, 336, 348, 360, 425, 458, 476, 478], "funni": [91, 138], "rectangular": [91, 151, 379], "redraw": 91, "begin_x": [91, 173], "begin_i": [91, 173], "height": [91, 173, 177, 243, 277, 289, 315, 339, 364, 371, 379, 381, 444, 462, 478], "40": [91, 92, 94, 99, 152, 156, 179, 189, 243, 263, 304, 314, 315, 317, 328, 339, 361, 370, 379, 419, 436, 446, 447, 467, 472, 475, 476, 477, 478], "slow": [91, 100, 180, 231, 243, 254, 257, 265, 279, 326, 334, 340, 357, 379, 381, 417, 418, 457, 458, 460, 461, 463, 477, 478], "baud": [91, 478], "flurri": [91, 457], "redrawn": [91, 173, 379], "26": [91, 93, 99, 101, 179, 232, 255, 279, 314, 328, 337, 361, 362, 373, 389, 418, 421, 460, 461, 464, 470, 474, 476, 477, 478], "ordinari": [91, 99, 103, 148, 165, 189, 221, 230, 296, 315, 326, 329, 336, 339, 353, 384, 397, 408, 427, 430, 431, 457, 471, 478], "annoy": [91, 106, 148, 263, 384, 457, 459, 460, 463, 465, 471, 476, 478], "flicker": [91, 173, 478], "twisti": 91, "maze": 91, "subt": [91, 171, 192, 201, 427], "waddstr": [91, 471], "boldfac": [91, 463], "underlin": [91, 173, 367, 371], "distract": [91, 288, 478], "blink": [91, 173, 476, 477, 478], "invis": [91, 154, 173, 175, 379, 464, 466, 478], "synonym": [91, 100, 106, 112, 173, 288, 295, 315, 338, 364, 405, 430, 463, 478], "video": [91, 173, 257, 268, 271, 463], "viewer": [91, 243, 265, 379, 478], "safest": [91, 172, 267, 478], "stick": [91, 106, 266, 279, 357, 371, 379, 459, 460, 463], "bright": 91, "xterm": [91, 173, 478], "american": [91, 179], "spell": [91, 154, 179, 199, 263, 304, 340, 371, 430, 431, 460, 465, 471, 478], "canadian": [91, 154], "british": 91, "resign": 91, "misspel": [91, 92, 163, 384, 478], "foreground": [91, 173, 243, 371, 447], "wire": [91, 99, 154, 173, 263, 264, 265, 337, 342, 384, 414, 473], "white": [91, 93, 103, 173, 174, 195, 207, 243, 344, 371, 379, 390, 421, 429, 447, 472, 477, 478], "black": [91, 93, 100, 106, 144, 156, 173, 207, 243, 314, 371, 379, 447, 460, 461, 467, 468, 469, 472, 476], "green": [91, 93, 119, 156, 173, 207, 236, 314, 339, 379, 397, 436, 447, 460, 461, 466, 467, 470, 474, 478], "magenta": [91, 93, 173, 447], "cyan": [91, 93, 173, 447], "alert": [91, 236, 265, 337, 381, 395, 475, 478], "rgb": [91, 93, 158, 173, 202, 245, 288, 364, 379, 472, 478], "purpl": [91, 93, 100, 207], "unabl": [91, 94, 99, 100, 107, 251, 263, 267, 289, 324, 336, 344, 348, 359, 438, 456, 462, 478], "lucki": [91, 172], "talent": 91, "tenth": [91, 138, 173, 205], "printdocu": 91, "backspac": [91, 103, 173, 174, 243, 315, 430, 443, 478], "keybind": [91, 173, 243, 316], "editwin": 91, "struck": 91, "brows": [91, 107, 309, 371, 463, 478], "vendor": [91, 231, 299, 455, 456, 478], "acs_": 91, "lengthi": [91, 94, 103, 257, 296, 457, 458, 459, 460, 461, 470, 478], "swear": 91, "pycon": [91, 106, 337, 462], "2013": [91, 100, 106, 179, 290, 337, 421, 478], "hetting": [92, 94, 105, 422, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "curious": [92, 148, 478], "objtyp": 92, "directorys": 92, "song": [92, 469], "game": [92, 117, 379, 462, 463], "twenti": [92, 171], "chess": [92, 94, 106, 459, 460], "reveal": [92, 179, 381, 463, 470, 478], "_age": 92, "loggedageaccess": 92, "birthday": [92, 446, 467], "mari": [92, 333, 436], "dave": [92, 105, 460, 461, 464, 470, 478], "david": [92, 94, 96, 106, 226, 421, 456, 457, 458, 459, 460, 461, 463, 464, 466, 468, 470, 471, 472, 473, 474, 476, 478], "hardwir": [92, 165, 304], "loggedaccess": 92, "public_nam": 92, "private_nam": 92, "pete": 92, "peter": [92, 97, 111, 226, 314, 362, 457, 458, 459, 460, 461, 462, 463, 468, 471, 472, 473, 474, 477, 478], "kate": 92, "catherin": 92, "some_class": 92, "descriptor_nam": 92, "notori": [92, 397], "meet": [92, 94, 100, 137, 165, 171, 182, 186, 189, 295, 340, 390, 421, 423, 457, 461], "oneof": 92, "predic": [92, 94, 135, 251, 257, 359, 360, 408, 460, 463, 470, 475, 477, 478], "minvalu": 92, "maxvalu": 92, "minsiz": 92, "wood": [92, 117], "metal": 92, "plastic": 92, "quantiti": [92, 182, 271, 289, 315, 337, 460, 464, 470], "metl": 92, "toolset": [92, 257, 288, 463, 478], "deeper": [92, 107, 163, 179, 189, 303, 341, 348], "behind": [92, 172, 189, 280, 305, 321, 353, 379, 390, 423, 456, 458, 461, 478], "everyday": [92, 221], "find_name_in_mro": 92, "object_getattribut": 92, "cls_var": 92, "descr_get": 92, "bypass": [92, 154, 222, 231, 289, 341, 348, 349, 384, 420, 423, 425, 427, 469, 478], "getattr_hook": 92, "slot_tp_getattr_hook": 92, "type_getattro": [92, 478], "super_getattro": 92, "skeleton": 92, "conn": [92, 123, 156, 162, 165, 238, 279, 295, 325, 333, 337, 360, 462, 470, 473], "movi": [92, 144, 336, 381, 468, 469], "director": [92, 144, 390], "music": [92, 156, 421], "artist": 92, "genr": 92, "entertain": [92, 148], "war": [92, 468], "georg": [92, 106, 257, 441, 462, 463, 464, 466, 467, 470, 471, 473, 474, 478], "luca": [92, 231, 472, 473, 478], "jaw": [92, 144], "1975": [92, 144, 258, 336, 339, 444, 476], "steven": [92, 458, 462, 464, 469, 470, 472, 473, 474, 476, 478], "spielberg": [92, 144], "countri": [92, 239, 262, 337, 340, 408, 461], "road": [92, 240], "john": [92, 105, 107, 156, 171, 186, 364, 408, 435, 436, 437, 458, 461, 462, 463, 464, 467, 468, 471, 474, 478], "denver": [92, 478], "abram": 92, "excit": [92, 457, 459], "prepackag": 92, "succinct": [92, 257, 381], "fget": [92, 221, 380], "fset": [92, 221, 380], "fdel": [92, 221, 380], "getx": [92, 221], "__x": 92, "delx": [92, 221], "descrobject": 92, "prop": [92, 456, 469, 478], "intervent": [92, 364, 420], "spreadsheet": [92, 460], "b10": 92, "recalcul": [92, 119, 263, 420], "recalc": 92, "_valu": [92, 192, 201], "seamless": 92, "classobject": [92, 468, 478], "__func__": [92, 109, 251, 340, 423, 435, 463, 464], "__self__": [92, 251, 340, 423, 435, 463, 478], "func_descr_get": 92, "funcobject": [92, 468, 478], "0x00c45070": 92, "0x00b18c90": 92, "0x1012e1f98": 92, "recap": 92, "chart": [92, 106], "experiment": [92, 243, 267, 364, 366, 405, 429, 451, 460, 465, 466, 468, 469, 470, 475, 476, 478], "averag": [92, 138, 257, 289, 304, 314, 340, 344, 362, 371, 377, 429, 446, 465, 472, 476, 478], "conceptu": [92, 94, 99, 117, 138, 190, 192, 196, 201, 249, 341, 381, 395, 427, 475], "dataset": [92, 163, 222, 461, 476, 478], "9332": 92, "unexcit": 92, "pystaticmethod_typ": 92, "dict_fromkey": 92, "dictobject": [92, 462, 478], "pyclassmethod_typ": 92, "vehicl": 92, "id_numb": 92, "id_nubm": 92, "vye483814lqex": 92, "_dept": 92, "dept": [92, 435, 466, 470], "botani": 92, "watney": 92, "pirat": 92, "mar": [92, 93, 94, 179, 339, 429, 436, 459, 463], "48": [92, 231, 339, 340, 377, 393, 467, 478], "152": 92, "flyweight": 92, "35": [92, 94, 182, 221, 314, 339, 398, 430, 460, 461, 462, 463, 469, 470, 474, 476, 477, 478], "m1": [92, 257, 343, 468], "100_000": [92, 339], "faith": [92, 204, 341, 348], "_slotvalu": 92, "clsname": 92, "descr_new": 92, "member_get": 92, "member_set": 92, "member_delet": 92, "member_repr": 92, "mcls": [92, 377], "pytypereadi": 92, "add_method": 92, "slot_nam": 92, "object_new": 92, "empty_slot": 92, "_pyobject_genericsetattrwithdict": 92, "0x7fb5d302f9d0": 92, "slot_valu": 92, "xz": [92, 266, 328, 353, 381, 470, 471, 473, 478], "week": [93, 147, 179, 262, 361, 457, 476, 478], "upper_cas": [93, 478], "from_dat": 93, "plot": [93, 339, 461], "chore": [93, 457], "first_week_day": 93, "weekend": 93, "96": [93, 97, 255, 340, 377, 474, 475, 476, 477, 478], "chores_for_ethan": 93, "dish": [93, 340], "show_chor": 93, "alias_for_squar": 93, "unimport": [93, 207], "autonam": 93, "north": [93, 179, 371, 379, 464, 466, 478], "south": [93, 154, 315, 371, 379, 463, 466], "east": [93, 179, 361, 371, 379, 382, 435, 461], "west": [93, 179, 361, 371, 379, 435, 466], "__members__": [93, 207, 459, 465], "recreat": [93, 154, 186, 294, 333, 389, 394, 397, 423, 471, 475, 478], "vast": [93, 326, 476, 477, 478], "mood": 93, "funki": [93, 163], "favorite_mood": 93, "enumnam": 93, "morecolor": 93, "pink": [93, 379], "some_behavior": 93, "creaturedatamixin": 93, "leg": 93, "creatur": 93, "beetl": 93, "dog": [93, 103, 156, 315, 435, 470, 473], "test_enum": 93, "fruit": [93, 303, 423, 437], "tomato": [93, 336], "picklabl": [93, 162, 251, 279, 295, 473, 478], "myenum": 93, "pickle_by_enum_nam": 93, "ant": [93, 146], "bee": 93, "closer": [93, 327, 385, 395, 464, 465, 473, 478], "somedata": [93, 231, 300], "newenumnam": 93, "chartreus": 93, "sea_green": 93, "rosemari": 93, "rwx": [93, 328], "floatenum": 93, "_value_": [93, 207], "px": [93, 271], "km": [93, 339], "vx": 93, "vy": 93, "member_nam": [93, 207, 467], "_name_": [93, 207], "_order_": [93, 207, 478], "enumclass": [93, 478], "earth": [93, 336, 339, 436], "jupit": [93, 339], "mercuri": [93, 339, 470, 472, 478], "neptun": [93, 339], "saturn": [93, 339], "uranus": [93, 339], "venus": [93, 339, 436], "radius": [93, 152, 271, 336, 379], "surface_grav": 93, "compris": [93, 119, 284, 298, 344, 425, 430, 431, 463], "_convert_": [93, 478], "some_enum_var": 93, "renumb": [93, 244, 423], "autonumb": 93, "swatch": 93, "panton": 93, "auburn": 93, "3497": 93, "1246": 93, "bleached_cor": 93, "grade": [93, 105, 144, 221, 339, 340, 379, 460, 478], "grene": 93, "303e": 93, "4397e6": 93, "869e": 93, "0518e6": 93, "976e": 93, "37814e6": 93, "421e": 93, "3972e6": 93, "9e": 93, "27": [93, 179, 232, 253, 289, 315, 333, 337, 339, 362, 373, 430, 441, 444, 457, 460, 466, 467, 470, 471, 475, 476, 477, 478], "1492e7": 93, "688e": 93, "0268e7": 93, "686e": 93, "5559e7": 93, "024e": 93, "4746e7": 93, "kilogram": 93, "gravit": [93, 379], "m3": [93, 361, 468], "kg": 93, "67300e": 93, "6378140": 93, "802652743337129": 93, "367": 93, "day_": 93, "day_0": 93, "day_1": [93, 262], "day_365": 93, "365": [93, 179, 337, 339, 361], "day_366": 93, "tour": [94, 459, 460], "subclaus": 94, "ml": [94, 460], "ocaml": 94, "haskel": [94, 257, 436, 457, 460], "emphas": [94, 189, 280, 422, 478], "discourag": [94, 103, 136, 154, 177, 190, 221, 246, 284, 315, 330, 337, 340, 353, 357, 423, 459, 462, 478], "puriti": [94, 389], "constraint": [94, 119, 182, 187, 207, 263, 289, 295, 303, 340, 381, 389, 422, 424, 426, 427, 462, 463, 465, 469, 478], "conclud": [94, 99, 103], "rigor": 94, "aros": 94, "onward": [94, 100, 182, 217, 251, 329, 336, 340, 478], "impract": 94, "enorm": 94, "daili": [94, 459, 478], "proven": [94, 189, 379, 460], "believ": [94, 288, 460], "synthes": [94, 189, 381], "jan": [94, 179, 337, 344, 400, 459, 464, 467, 468, 470, 473, 474, 475, 476, 477, 478], "apr": [94, 450, 459, 462], "jun": [94, 219, 361, 459], "jul": [94, 219, 459, 470], "nov": [94, 179, 205, 219, 241, 337, 361, 459, 474], "itali": 94, "rome": 94, "franc": 94, "pari": [94, 103, 420, 444], "washington": [94, 244], "dc": [94, 257, 408, 462], "genexp": [94, 426], "concis": [94, 97, 163, 288, 336, 423, 457, 461, 470, 474, 478], "line_list": 94, "stripped_it": 94, "stripped_list": 94, "sequence1": [94, 457], "condition1": 94, "expr2": [94, 425, 457], "sequence2": [94, 457], "condition2": 94, "expr3": [94, 425], "sequence3": 94, "condition3": 94, "exprn": [94, 457], "sequencen": [94, 457], "conditionn": 94, "obj_tot": 94, "list_all_object": [94, 461], "expr1": [94, 425, 457], "seq1": [94, 287, 457], "doubtless": [94, 458, 459, 460], "weren": [94, 103, 119, 231, 458, 459, 460, 461, 462, 464], "generate_int": [94, 459, 460], "gen": [94, 251, 257, 425, 459, 460, 470, 473, 478], "messier": [94, 103, 459, 460, 464], "test_gener": [94, 459, 460, 478], "inord": [94, 459, 460], "queen": [94, 314, 315, 459, 460], "nxn": [94, 459, 460], "board": [94, 98, 173, 459, 460], "threaten": [94, 459, 460], "knight": [94, 106, 303, 421, 437, 441, 459, 460, 476], "rout": [94, 107, 208, 380, 402, 447, 459, 460, 464, 472], "chessboard": [94, 459, 460], "messi": [94, 460, 464], "becam": [94, 146, 209, 289, 331, 348, 361, 381, 457, 463, 464, 473, 476, 477, 478], "cumul": [94, 214, 222, 271, 304, 339, 375, 377, 450, 462, 470, 472, 473, 478], "itera": 94, "iterb": 94, "sentenc": [94, 222, 315, 359, 459, 460, 463, 478], "fragment": [94, 138, 310, 340, 389, 390, 407, 408, 462, 464, 470, 471, 478], "is_even": [94, 414], "verb": [94, 289], "10000": [94, 304, 329, 362, 379, 460, 471, 478], "rand_list": 94, "769": 94, "7953": 94, "9828": 94, "6431": 94, "8442": 94, "9878": 94, "6213": 94, "2207": 94, "shortest": [94, 191, 221, 257, 457, 462, 464, 465, 466, 470], "broad": [94, 179, 288, 381, 389, 459, 462, 464, 471, 478], "interv": [94, 99, 173, 179, 243, 265, 289, 304, 314, 329, 339, 348, 357, 360, 361, 371, 379, 461, 463, 470, 474, 476, 478], "elem": [94, 144, 156, 221, 222, 257, 340, 408, 437, 462, 464, 468, 470], "endless": [94, 257, 457, 459, 461, 462, 478], "rubi": [94, 339, 447], "less_than_10": 94, "aba": 94, "relax": [94, 179, 240, 470, 477, 478], "key_func": 94, "city_list": 94, "decatur": 94, "huntsvill": 94, "selma": 94, "anchorag": 94, "ak": 94, "nome": 94, "flagstaff": 94, "az": 94, "phoenix": 94, "tucson": 94, "city_st": 94, "kwarg1": [94, 462], "value1": [94, 163, 462, 477], "kwarg2": [94, 462], "value2": [94, 163, 462, 477], "server_log": [94, 462], "initial_valu": [94, 254], "abbc": 94, "stripped_lin": 94, "existing_fil": 94, "file_list": 94, "anonym": [94, 172, 219, 264, 274, 289, 379, 422, 425, 457, 470, 478], "adder": 94, "print_assign": 94, "multiway": 94, "disentangl": 94, "heck": 94, "essenc": 94, "disagre": [94, 373, 457], "assist": [94, 106, 260, 274, 280, 355, 380, 394, 423, 459, 460, 461, 462, 463, 464, 475, 478], "draft": [94, 106, 148, 267, 292, 405, 457, 458, 459, 460, 461, 462, 463, 464, 469, 474, 475, 478], "ian": [94, 402, 468], "bick": [94, 402], "nick": [94, 97, 102, 106, 320, 423, 459, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 478], "coghlan": [94, 97, 102, 106, 320, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 478], "efford": 94, "jewett": [94, 461, 463], "mike": [94, 459, 461, 462, 463, 468, 478], "krell": 94, "leandro": 94, "lameiro": 94, "jussi": 94, "salmela": 94, "collin": [94, 463, 464, 473, 478], "winter": [94, 221, 463, 464], "blake": [94, 231], "winton": 94, "typo": [94, 148, 381, 384, 425, 459, 478], "tutor": 94, "harold": [94, 341], "abelson": 94, "gerald": 94, "jay": [94, 458, 470, 478], "sussman": 94, "mitpress": 94, "mit": [94, 247, 303, 421], "sicp": 94, "textbook": [94, 103, 315, 462, 463], "scienc": [94, 103, 339, 360, 473], "defmacro": 94, "rambl": 94, "wikipedia": [94, 106, 156, 231, 267, 337, 339, 343, 379, 462, 470, 471, 478], "functional_program": 94, "partial_appl": 94, "curri": 94, "gnosi": 94, "cx": [94, 257, 460], "tpip": 94, "mertz": 94, "ibm": [94, 154, 173, 182, 343, 417, 460, 462, 471, 478], "developerwork": 94, "malcolm": [96, 315, 464, 470, 474, 478], "ukasz": [96, 284, 470, 472, 473, 474, 475, 476, 477, 478], "langa": [96, 284, 470, 472, 473, 474, 475, 476, 477, 478], "yum": 96, "sdt": 96, "sudo": [96, 100], "29564": [96, 478], "python18035": 96, "_pyeval_evalframedefault": [96, 101, 478], "29565": 96, "dtrace_function_entri": 96, "29566": [96, 478], "29567": 96, "dtrace_function_return": 96, "29568": [96, 478], "29569": 96, "29570": 96, "29571": [96, 478], "maybe_dtrace_lin": 96, "stapsdt": 96, "readelf": [96, 478], "0000000000000000": 96, "00308d78": 96, "libpython3": [96, 478], "3dm": 96, "00365b68": 96, "0x00000254": 96, "0x00000020": [96, 172], "0x00000010": 96, "nt_gnu_abi_tag": 96, "0x00000274": 96, "0x00000024": 96, "0x00000014": 96, "nt_gnu_build_id": 96, "bitstr": 96, "df924a2b08a7e89f6e11251d4602022977af2670": 96, "0x002d6c30": 96, "0x00000144": 96, "0x00000031": 96, "nt_stapsdt": 96, "gc__start": 96, "0x00000000004371c3": 96, "0x0000000000630ce2": 96, "0x00000000008d6bf6": 96, "ebx": 96, "0x00000030": 96, "gc__done": 96, "0x00000000004374e1": 96, "0x00000000008d6bf8": 96, "rax": 96, "0x00000045": 96, "function__entri": 96, "0x000000000053db6c": 96, "0x00000000008d6be8": 96, "rbp": 96, "r12": 96, "eax": 96, "0x00000046": 96, "function__return": 96, "0x000000000053dba8": 96, "0x00000000008d6bea": 96, "strateg": 96, "copyinstr": 96, "probenam": 96, "arg0": [96, 289], "call_stack": 96, "156641360502280": 96, "156641360518804": 96, "156641360532797": 96, "function_3": 96, "156641360546807": 96, "156641360563367": 96, "156641360578365": 96, "156641360591757": 96, "156641360605556": 96, "156641360617482": 96, "156641360629814": 96, "156641360642285": 96, "156641360656770": 96, "156641360669707": 96, "156641360687853": 96, "function_4": 96, "156641360700719": 96, "156641360719640": 96, "function_5": 96, "156641360732567": 96, "156641360747370": 96, "user_str": 96, "thread_ind": 96, "stap": 96, "stp": 96, "11408": 96, "8274": 96, "_abcol": 96, "11414": 96, "425": [96, 237, 477, 478], "11418": 96, "490": 96, "11424": 96, "11428": 96, "426": [96, 237], "11433": 96, "libpython": [96, 451, 467, 468, 476, 478], "6dm": 96, "begun": [96, 360, 460, 461], "import__find__load__start": [96, 475], "import__find__load__don": [96, 475], "find_and_load": 96, "frameptr": 96, "arg4": 96, "probepoint": 96, "fn_call": 96, "033": [96, 173, 478], "1h": [96, 464], "6s": [96, 100, 186], "80s": 96, "30s": 96, "foreach": 96, "6d": [96, 100], "moodi": [97, 471, 472, 473], "192": [97, 100, 239, 255, 263, 341], "db8": [97, 255], "3221225985": [97, 255], "42540766411282592856903984951653826561": 97, "3221225984": 97, "42540766411282592856903984951653826560": 97, "firewal": [97, 243, 279, 404, 458, 471], "router": [97, 255, 333], "hybrid": [97, 179, 472], "ipv": [97, 478], "intuit": [97, 98, 99, 103, 148, 182, 186, 257, 370, 425, 457, 458, 459, 472], "addr4": 97, "addr6": [97, 473], "host4": 97, "host6": 97, "net4": 97, "net6": 97, "4294967296": [97, 255, 465], "254": [97, 478], "ffff": [97, 255, 457, 471], "0db8": 97, "0001": [97, 179, 430, 475, 478], "explos": [97, 408], "lend": [97, 459], "agnost": [97, 340, 381], "168": [97, 100, 239, 255, 263, 341], "octet": [97, 196, 202, 255, 301, 341, 389, 478], "concern": [97, 99, 123, 130, 154, 163, 265, 295, 310, 337, 357, 385, 421, 458, 459, 464, 474, 475, 476, 477, 478], "safer": [98, 189, 295, 296, 460, 461, 469, 478], "evolv": [98, 253, 264, 427], "granular": [98, 100, 246, 289, 348, 478], "old_binascii": 98, "stringent": [98, 472], "qwertyuiop": 98, "boo": 98, "circuit": [98, 340, 437], "led": [98, 163, 289, 458, 471, 474, 478], "price": [98, 156, 217, 315, 407, 444, 461, 462, 473, 476, 478], "xxlimit": [98, 478], "my_struct": 98, "pay": [98, 100, 103, 189, 456, 472], "myattribut": 98, "rewrit": [98, 102, 119, 196, 214, 289, 373, 457, 460, 462, 464, 465, 473, 476, 478], "unintent": [98, 100, 111, 263, 344, 470, 478], "pickleabl": [98, 265, 478], "blueprint": 98, "py_tp_travers": 98, "tedious": [98, 106, 119, 125, 148, 379, 384, 457, 462, 476], "roadblock": 98, "get_defining_class": 98, "get_type_of_self": 98, "example_method": 98, "example_method_doc": 98, "my_method": 98, "module_def": 98, "capi": [98, 464], "iron": 98, "vinay": [99, 100, 460, 461, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477], "sajip": [99, 100, 460, 461, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477], "vinay_sajip": [99, 100], "dove": [99, 100], "investig": [99, 340], "confirm": [99, 185, 263, 293, 381, 390, 395, 456, 478], "serious": [99, 123, 189, 209, 231, 263, 384], "told": [99, 381, 394, 423, 460], "resund": 99, "malm": 99, "threshold": [99, 100, 263, 340, 462], "loglevel": 99, "numeric_level": 99, "afresh": [99, 165, 263], "mylib": [99, 383], "do_someth": [99, 100, 148, 337, 383, 425], "levelnam": [99, 100, 263, 264, 265, 279, 461, 464, 470], "2010": [99, 100, 106, 263, 328, 341, 348, 385, 464, 470], "41": [99, 257, 303, 314, 315, 339, 414, 446, 463, 477, 478], "iso8601": [99, 414], "3339": 99, "datefmt": [99, 100, 263, 264], "46": [99, 156, 314, 340, 447, 467, 476, 477, 478], "am": [99, 100, 179, 262, 295, 361, 429], "invest": 99, "favourit": 99, "beverag": 99, "hereaft": [99, 304], "diagram": [99, 189, 221, 334, 459], "threefold": 99, "baz": [99, 100, 101, 117, 163, 243, 246, 258, 263, 264, 279, 289, 307, 315, 357, 380, 383, 384, 385, 402, 427, 431], "bam": [99, 263], "descend": [99, 105, 119, 159, 192, 201, 251, 263, 279, 292, 304, 338, 364, 371, 383, 405, 406, 408, 462, 464, 478], "ancestor": [99, 100, 173, 263, 264, 279, 292, 337, 371, 384, 385, 408, 423, 460, 478], "deconfigur": 99, "fmt": [99, 100, 179, 197, 255, 263, 291, 300, 357, 447, 463, 478], "millisecond": [99, 123, 173, 179, 243, 263, 324, 371, 379, 401, 470, 474, 477, 478], "tack": 99, "simple_exampl": [99, 100], "simple_logging_modul": 99, "2005": [99, 100, 179, 267, 421, 461, 462, 463], "03": [99, 100, 179, 182, 337, 341, 361, 446, 460, 462, 478], "618": [99, 257, 467, 478], "620": [99, 461], "697": [99, 469, 478], "773": 99, "conf": [99, 100, 103, 292, 447, 460, 470, 478], "simpleexampl": [99, 100], "consolehandl": 99, "simpleformatt": 99, "logger_root": [99, 264], "logger_simpleexampl": 99, "handler_consolehandl": 99, "formatter_simpleformatt": 99, "simple_logging_config": 99, "38": [99, 100, 186, 221, 263, 333, 377, 460, 467, 476, 477, 478], "977": [99, 284], "979": 99, "56": [99, 101, 179, 182, 221, 254, 279, 333, 339, 437, 439, 470, 473, 478], "054": 99, "055": 99, "130": [99, 255, 339, 464], "noncod": 99, "disable_existing_logg": [99, 100, 264], "mypackag": 99, "myhandl": [99, 100, 264], "superset": [99, 302, 340, 425, 457, 460, 478], "yaml": [99, 117, 247, 258, 264, 464, 467, 470], "ext": [99, 100, 154, 187, 196, 264, 272, 290, 293, 447, 460, 461, 470, 478], "raiseexcept": [99, 100, 263, 265, 470], "resort": [99, 180, 262, 263, 459], "absenc": [99, 107, 112, 251, 261, 263, 315, 337, 360, 402, 423, 478], "organis": [99, 100, 263], "orgnam": 99, "advis": [99, 165, 172, 244, 279, 284, 289, 360, 395, 420, 421, 423, 425, 470, 476, 478], "prerog": 99, "audienc": [99, 303, 395, 429, 460, 465], "interfer": [99, 129, 163, 222, 262, 293, 478], "deliv": [99, 107, 130, 179, 221, 324, 329, 331, 371, 385, 425, 463, 478], "desk": 99, "staff": [99, 328, 353], "convinc": [99, 262], "xp": [99, 265, 371, 460, 473], "criteria": [99, 171, 244, 263, 304], "reopen": [99, 265, 295, 336, 354, 355, 464, 474, 478], "provis": [99, 298, 337, 421, 425], "trailer": [99, 289, 419, 426, 478], "swallow": [99, 100, 136, 447, 457, 464, 470, 476, 478], "misconfigur": [99, 243, 478], "altogeth": [99, 100, 148, 209, 417, 423, 470], "expensive_func1": 99, "expensive_func2": 99, "deepli": [99, 357, 384, 404, 430, 457, 463, 478], "recomput": [99, 324, 325, 329, 361, 472, 478], "_srcfile": 99, "logthread": 99, "logprocess": 99, "logmultiprocess": 99, "logasynciotask": 99, "somelogg": 100, "auxiliary_modul": 100, "spam_appl": 100, "fh": 100, "auxiliari": [100, 257, 470, 478], "some_funct": [100, 384, 385], "module_logg": 100, "47": [100, 179, 205, 257, 314, 315, 419, 437, 446, 463, 467, 478], "663": 100, "665": 100, "668": [100, 328], "669": [100, 156, 478], "670": [100, 468], "671": 100, "672": [100, 217], "hi": [100, 144, 172, 300, 340, 364, 381, 478], "relativecr": [100, 263], "threadnam": [100, 263], "mainthread": [100, 478], "505": [100, 107, 237], "1007": 100, "1507": [100, 463], "1508": 100, "2258": 100, "2512": 100, "3009": 100, "3013": 100, "3515": 100, "3761": 100, "4017": 100, "4513": 100, "4518": 100, "quota": [100, 208, 244], "dormant": 100, "12s": 100, "8s": [100, 263, 264, 464, 470], "jackdaw": 100, "quartz": 100, "logger1": 100, "area1": 100, "logger2": 100, "area2": 100, "zephyr": 100, "blow": [100, 148, 288, 470, 478], "vex": [100, 458], "daft": 100, "jump": [100, 187, 189, 243, 266, 293, 379, 423, 436, 460, 462, 465, 468, 474, 475, 478], "zebra": [100, 156, 295], "jail": 100, "zesti": 100, "vixen": 100, "quack": [100, 463], "wizard": [100, 459], "warnings_and_below": 100, "filter_mak": 100, "levelno": [100, 263], "9999": [100, 101, 130, 179, 243, 334, 470, 475, 478], "data_to_send": 100, "culprit": 100, "sluggish": 100, "poor": [100, 146, 301, 304, 315, 458, 459, 478], "infrastructur": [100, 154, 337, 395, 463, 464, 472, 475, 478], "capac": [100, 173, 265, 289, 339, 360, 462, 464], "precaut": 100, "eat": [100, 271, 478], "que": 100, "queue_handl": 100, "respect_handler_level": [100, 265, 473, 478], "rootlogg": 100, "default_tcp_logging_port": [100, 264], "unformat": [100, 258, 315], "logrecordstreamhandl": 100, "slen": 100, "handlelogrecord": 100, "lognam": [100, 225, 289], "wast": [100, 106, 465, 478], "bandwidth": [100, 106, 436, 464, 467], "logrecordsocketreceiv": 100, "serve_until_stop": 100, "rd": [100, 337, 340], "wr": [100, 458, 478], "5d": 100, "15s": [100, 263, 264, 464, 470], "69": [100, 361, 408, 467], "supervisor": 100, "gist": 100, "bone": [100, 454], "bash": [100, 152, 292, 327, 394, 442, 448, 478], "ensure_app": 100, "log_listen": 100, "webapp": 100, "unzip": [100, 221, 416, 418, 460, 478], "bottl": [100, 172, 463], "supervisorctl": 100, "tweak": [100, 288, 385, 458, 461, 474, 478], "customadapt": 100, "connid": 100, "some_conn_id": 100, "threadloc": 100, "contextfilt": 100, "inject": [100, 123, 134, 263, 268, 327, 336, 344, 353, 381, 404, 450, 462, 473, 478], "sheila": 100, "ips": [100, 478], "231": 100, "5s": 100, "a1": [100, 224, 478], "a2": [100, 224, 315], "lvl": 100, "lvlname": 100, "webapplib": 100, "11s": 100, "appnam": [100, 265], "9s": 100, "4s": 100, "ctx_request": 100, "ctx_appnam": 100, "injectingfilt": 100, "num_request": 100, "adhf": 100, "ap": 100, "aa": [100, 156, 257, 315, 437, 464], "app1": 100, "app2": 100, "49": [100, 241, 257, 263, 279, 377, 437, 441, 444, 467, 476, 477, 478], "wc": 100, "153": 100, "147": [100, 476], "600": [100, 179, 474, 478], "issue3770": 100, "listener_configur": 100, "mptest": 100, "processnam": [100, 263, 279], "10s": [100, 343], "listener_process": 100, "worker_configur": 100, "worker_process": 100, "orchestr": 100, "logger_thread": 100, "qh": 100, "ham": [100, 156, 166, 186, 221, 251, 275, 317, 425, 427, 436, 473], "egg": [100, 156, 171, 186, 214, 221, 222, 247, 254, 292, 303, 315, 317, 326, 340, 344, 353, 376, 380, 381, 384, 385, 390, 408, 417, 427, 436, 438, 441, 444, 457, 478], "mplog": 100, "foofil": 100, "wp": 100, "lp": [100, 266, 468], "max_work": [100, 123, 162, 470, 478], "log_filenam": 100, "logging_rotatingfile_exampl": 100, "my_logg": 100, "mylogg": [100, 263], "maxbyt": [100, 264, 265, 464], "backupcount": [100, 264, 265, 464], "logfil": [100, 148], "bf": [100, 315, 446], "df": [100, 464], "924": 100, "494": [100, 474], "833": 100, "recal": [100, 243, 381], "bracemessag": 100, "dollarmessag": 100, "unwieldi": 100, "palat": 100, "brethren": 100, "2f": [100, 131, 217, 341, 389, 439, 463, 464, 466, 478], "penalti": [100, 177, 212, 457, 470], "trip": [100, 119, 146, 239, 373, 463, 465, 466, 478], "sugar": [100, 165, 221, 240, 246, 257, 336, 436, 465], "xxxmessag": 100, "styleadapt": 100, "_log": [100, 263], "interrog": [100, 201, 385], "old_factori": [100, 263], "record_factori": [100, 263], "custom_attribut": [100, 263], "0xdecafbad": [100, 263], "born": [100, 340], "zmq": 100, "pyzmq": 100, "sock": [100, 103, 104, 123, 130, 133, 238, 304, 325, 333, 334, 337, 357, 470, 473, 475, 478], "pub": [100, 121, 219, 328, 455], "5556": 100, "zeromqsockethandl": [100, 478], "send_json": 100, "socktyp": [100, 265, 333, 357, 464], "zeromqsocketlisten": [100, 478], "setsockopt_str": 100, "recv_json": 100, "django": [100, 156, 293, 298, 384, 464, 471], "specialfilt": 100, "mail_admin": 100, "adminemailhandl": 100, "myproject": [100, 383], "runnabl": [100, 123, 394, 478], "gz": [100, 214, 230, 272, 292, 328, 353, 394, 419, 448, 455, 457, 462, 469, 470, 478], "f_in": [100, 230], "f_out": [100, 230], "rh": 100, "six": [100, 102, 168, 179, 221, 222, 295, 314, 315, 336, 371, 389, 417, 463, 470, 472, 475, 476, 478], "zcat": 100, "02": [100, 101, 179, 182, 263, 279, 328, 361, 418, 446, 457, 459, 460, 461, 470, 474, 478], "767": [100, 401], "996": 100, "997": 100, "998": 100, "stop_ev": 100, "initialis": [100, 239, 265, 320, 348, 384, 423, 450, 472, 474, 478], "heterogen": [100, 340, 465, 478], "bunch": [100, 125, 196, 203, 288, 457, 458, 459, 460, 463, 478], "config_initi": 100, "config_work": 100, "config_listen": 100, "hang": [100, 107, 132, 279, 324, 329, 357, 460, 470, 478], "5424": [100, 265], "compliant": [100, 109, 123, 143, 179, 190, 191, 192, 194, 197, 198, 199, 203, 204, 205, 211, 231, 258, 267, 307, 327, 336, 361, 389, 402, 404, 421, 425, 459, 462, 464, 469, 471, 474, 475, 478], "ufeffunicod": 100, "feff": [100, 106, 154], "xef": [100, 143, 389, 430], "xbb": [100, 430], "xbf": [100, 430], "readili": [100, 254, 279, 354, 472, 478], "parseabl": [100, 299, 327], "serialis": [100, 154, 320, 408, 478], "structuredmessag": 100, "fnum": 100, "specialis": [100, 107, 336, 340, 381, 426, 478], "unicode_escap": [100, 154], "set_valu": 100, "snowman": [100, 469], "u2603": 100, "owned_file_handl": 100, "creator": [100, 279, 289, 328, 406, 417, 418, 423, 429, 478], "puls": 100, "chowntest": 100, "resid": [100, 196, 226, 267, 289, 309, 318, 338, 427, 457, 478], "orthogon": 100, "cater": [100, 189, 264, 265], "myfilt": [100, 470], "noshow": 100, "onelineexceptionformatt": 100, "exc_text": [100, 263, 265, 478], "configure_log": 100, "2015": [100, 179, 322, 451, 473, 478], "07": [100, 179, 263, 267, 315, 341, 361, 373, 420, 462, 463, 474, 477, 478], "logtest7": 100, "nzerodivisionerror": 100, "simplist": [100, 384], "render": [100, 106, 123, 185, 194, 197, 334, 371, 376, 406, 423, 456, 460, 463, 464, 476, 478], "audibl": [100, 173], "speech": [100, 291], "tts": 100, "frequenc": [100, 114, 361, 396, 401, 410, 463], "swamp": 100, "spoken": 100, "espeak": 100, "ttshandler": 100, "femal": [100, 339], "voic": [100, 332, 459], "s150": 100, "ven": 100, "f3": [100, 117], "goodby": [100, 137, 219, 295, 364, 438], "parameteris": [100, 381, 468], "log_if_error": 100, "target_handl": 100, "flush_level": 100, "flushlevel": [100, 265], "write_lin": 100, "decorated_foo": 100, "har": [100, 152, 383, 470, 472, 478], "bufferingsmtphandl": 100, "mailhost": [100, 264, 265], "password": [100, 107, 169, 225, 229, 231, 244, 265, 279, 282, 284, 289, 301, 306, 322, 331, 335, 337, 354, 356, 389, 390, 414, 417, 462, 463, 464, 471, 472, 473, 474, 478], "mailport": 100, "nto": [100, 331], "nsubject": 100, "addresse": [100, 265], "102": [100, 182, 237, 257, 339, 464, 470, 476, 477], "eleven": 100, "eleventh": 100, "utcformatt": 100, "console1": 100, "console2": 100, "501": [100, 107, 237, 241, 289, 470], "sat": [100, 147, 179, 337, 339], "loggingcontext": 100, "old_level": 100, "ev": [100, 337], "logctx": 100, "generalis": 100, "scriptnam": 100, "subpars": [100, 117, 470, 475, 478], "start_cmd": 100, "add_pars": [100, 117, 470], "stop_cmd": 100, "restart_cmd": 100, "log_level": 100, "plural": [100, 226, 464, 475, 478], "ui": [100, 402, 456, 457, 478], "pyside2": 100, "pyqt5": 100, "qthandler": 100, "qthread": 100, "qtcore": 100, "qtgui": 100, "qtwidget": 100, "pyqtsign": 100, "pyqtslot": 100, "qobject": 100, "slotfunc": 100, "ctname": 100, "currentthread": [100, 186, 360, 467, 478], "objectnam": 100, "kick": 100, "qthreadnam": 100, "isinterruptionrequest": 100, "1f": [100, 314, 377, 478], "qwidget": 100, "orang": [100, 156, 287, 379, 437, 478], "textedit": 100, "te": 100, "qplaintextedit": 100, "monospac": [100, 243, 359], "qfont": 100, "nosuchfont": 100, "setstylehint": 100, "setfont": 100, "setreadon": 100, "pb": [100, 266], "qpushbutton": 100, "work_button": 100, "log_button": 100, "clear_button": 100, "update_status": 100, "abouttoquit": 100, "force_quit": 100, "lay": [100, 211], "qvboxlayout": 100, "addwidget": 100, "setfixeds": 100, "900": [100, 444], "click": [100, 148, 173, 185, 243, 289, 353, 379, 394, 421, 456, 471, 474, 475, 476, 478], "manual_upd": 100, "clear_display": 100, "seten": 100, "worker_thread": 100, "setobjectnam": 100, "workerthread": 100, "movetothread": 100, "kill_thread": 100, "requestinterrupt": 100, "isrun": 100, "appendhtml": 100, "qapplic": 100, "exec_": 100, "2009": [100, 179, 315, 336, 385, 421, 458, 464, 466], "3164": 100, "hail": 100, "2003": [100, 179, 263, 408, 418, 446, 460, 463, 478], "widespread": [100, 102, 198, 429, 458, 470], "sysloghandler5424": 100, "tz_offset": 100, "msgid": [100, 196, 205], "has_offset": 100, "hrs": 100, "hostnam": [100, 107, 123, 133, 139, 148, 154, 180, 205, 219, 238, 244, 255, 265, 279, 284, 289, 301, 309, 331, 333, 337, 389, 390, 414, 444, 457, 460, 464, 469, 470, 471, 472, 475, 478], "procid": 100, "sdata": 100, "structured_data": 100, "sd": 100, "sdid": 100, "dv": [100, 357], "specir": 100, "12345": [100, 172, 221, 435, 437, 460, 466, 474, 478], "bozz": [100, 264], "fizz": 100, "buzz": 100, "54321": [100, 437], "rab": 100, "zab": 100, "zzif": 100, "loggerwrit": 100, "info_fp": 100, "debug_fp": 100, "merci": [100, 423], "slghtli": 100, "bufferingloggerwrit": 100, "52": [100, 101, 103, 136, 179, 271, 314, 315, 337, 339, 341, 377, 437, 439, 461, 464, 478], "unhelp": [100, 457, 478], "garbl": [100, 478], "circumv": [100, 404], "pointless": [100, 478], "pablo": [101, 464, 467, 468, 469, 473, 475, 476, 477, 478], "galindo": [101, 467, 468, 469, 475, 476, 477, 478], "vibrant": 101, "ecosystem": [101, 295], "interpos": 101, "teach": [101, 226, 336, 459, 476, 478], "have_perf_trampolin": 101, "1000000": [101, 163, 179, 217, 221, 279, 304, 362, 436, 464, 474, 478], "hertz": [101, 401], "my_script": 101, "analyz": [101, 102, 171, 275, 295, 296, 315, 327, 337, 377, 381, 421, 430, 462, 463, 464, 470, 478], "91": [101, 339], "08": [101, 179, 205, 241, 263, 337, 361, 420, 477, 478], "_start": 101, "90": [101, 102, 144, 152, 257, 279, 314, 339, 379, 476], "71": [101, 377, 469, 478], "__libc_start_main": 101, "88": [101, 179, 339, 377, 473], "pymain_run_python": [101, 478], "constprop": 101, "_pyrun_anyfileobject": 101, "_pyrun_simplefileobject": 101, "run_mod": 101, "54": [101, 136, 314, 328, 339, 418, 460, 467, 468], "65": [101, 284, 314, 328, 339, 340, 444, 457, 463, 464, 473, 478], "_pyeval_vector": [101, 478], "_pylong_add": 101, "97": [101, 106, 119, 221, 274, 340, 464, 470], "_pyobject_malloc": [101, 478], "_py_eval_evalframedefault": 101, "58": [101, 154, 314, 339, 341, 478], "89": [101, 144, 182, 222, 333, 339, 436, 444, 445, 466, 470], "86": [101, 169, 217, 339, 341, 377, 379], "43": [101, 156, 169, 179, 219, 337, 340, 362, 436, 470, 476, 477], "62": [101, 182, 234, 236, 377], "77": [101, 144, 182, 377, 379, 470], "do_profiled_stuff": 101, "non_profiled_stuff": 101, "fno": [101, 451, 467, 478], "mno": 101, "leaf": [101, 231, 289, 372, 381, 478], "dwarf": [101, 423], "brett": [102, 304, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "cannon": [102, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477], "caniusepython3": 102, "tox": 102, "cleaner": [102, 340, 457, 466, 471, 473, 478], "clarifi": [102, 103, 340, 384, 462, 463, 470, 472, 478], "feel": [102, 185, 288, 371, 385, 436, 459, 460, 463, 467], "worst": [102, 103, 172, 184, 186, 423, 427, 450, 461, 474, 475, 478], "overal": [102, 119, 179, 190, 264, 280, 288, 304, 315, 341, 343, 362, 377, 423, 439, 464, 472, 473], "freeli": [102, 189, 340, 421], "commonplac": [102, 470], "trove": [102, 460], "oldest": [102, 136, 223, 265, 360, 377, 397, 464, 470, 475, 478], "cheat": [102, 381], "sheet": [102, 147, 379, 381, 478], "pariti": [102, 478], "conserv": [102, 458, 461], "accustom": [102, 182], "diff": [102, 109, 140, 186, 189, 383, 458, 461, 464, 470, 478], "2002": [102, 106, 179, 255, 421, 459, 460], "confluenc": 102, "brittl": 102, "pronounc": [102, 470], "blind": [102, 340, 472], "predat": [102, 174, 186, 279, 389], "pose": [102, 123, 457, 461], "difficulti": [102, 279, 457, 460], "dichotomi": 102, "outdat": [102, 172, 246, 364, 463, 469, 470, 475, 478], "x00": [102, 172, 231, 254, 255, 280, 315, 333, 340, 343, 393, 478], "indexbyt": 102, "inevit": 102, "importlib2": 102, "absolute_import": [102, 110, 431, 462], "print_funct": [102, 109, 110, 431, 463], "werror": [102, 450, 451, 478], "lint": [102, 402, 469, 478], "amk": [103, 315, 460, 463, 464], "regex": [103, 159, 216, 262, 298, 315, 354, 383, 458, 462, 463, 470, 472, 475, 478], "tex": 103, "automata": 103, "devot": 103, "akm": 103, "complement": [103, 315, 340, 379, 423, 471, 475, 477, 478], "elsewher": [103, 111, 136, 153, 163, 268, 279, 320, 381, 389, 405, 422, 427, 430, 469, 472, 478], "za": [103, 106, 169, 315, 340, 430, 459], "z0": [103, 106, 169, 315, 341, 430], "9_": [103, 106, 315, 430], "ct": [103, 104], "caaat": 103, "repetit": [103, 117, 146, 231, 257, 266, 271, 315, 340, 362, 376, 383, 385, 395, 423, 425, 429, 459, 478], "fewer": [103, 119, 171, 243, 254, 257, 315, 336, 371, 427, 460, 462, 465, 472, 474, 475, 476, 478], "bcd": [103, 257], "abcbd": 103, "abcb": 103, "bc": [103, 147, 156, 243, 257, 340, 457], "quantifi": [103, 257, 310, 315, 468, 478], "brew": 103, "homebrew": 103, "ab": [103, 146, 156, 186, 230, 257, 266, 288, 305, 315, 340, 412, 421, 430, 437, 457, 460], "reductionist": 103, "bent": 103, "shorter": [103, 198, 221, 231, 257, 288, 296, 343, 425, 457, 458, 461, 463, 464, 469, 470, 478], "bloat": 103, "latex": [103, 463, 477], "stage": [103, 360, 390, 395, 405, 457, 477, 478], "tempo": 103, "drummer": 103, "drum": 103, "piper": 103, "lord": 103, "cook": [103, 173, 354, 478], "callable_iter": 103, "fromag": 103, "thu": [103, 147, 361], "1998": [103, 108, 314, 421], "0130": [103, 315], "0131": [103, 315], "dotless": [103, 315], "017f": [103, 315], "212a": [103, 315], "kelvin": [103, 315], "pam": [103, 478], "french": [103, 106, 361, 473, 475], "unreli": [103, 173, 315, 478], "cultur": [103, 226, 262, 315], "charref": 103, "9a": [103, 315], "fa": [103, 315], "crow": 103, "servo": 103, "cro": 103, "ervo": 103, "etern": [103, 136], "recit": 103, "bclass": 103, "declassifi": 103, "subtleti": [103, 179, 239], "collis": [103, 231, 285, 326, 456, 467, 472, 477, 478], "x08class": 103, "x08": [103, 343, 393], "dissect": [103, 458, 459], "822": [103, 106, 196, 198, 226, 238, 331, 361, 459], "agent": [103, 107, 267, 268, 331, 348, 390, 391, 459, 463], "thunderbird": 103, "x11": [103, 364, 371, 390, 398, 478], "20061227": 103, "ababababab": 103, "upward": [103, 173, 292, 295, 379, 384], "parenthesi": [103, 109, 119, 243, 422, 426, 461, 478], "abcd": [103, 106, 156, 186, 257, 460, 463, 467], "backrefer": [103, 315, 478], "spring": [103, 179, 221], "keystrok": [103, 152, 173, 329, 457, 464], "chose": [103, 246, 429, 462], "subexpress": [103, 478], "jane": [103, 105], "internald": [103, 244], "mon": [103, 147, 179, 205, 460], "sec": [103, 361, 362, 473, 478], "zonen": 103, "zoneh": 103, "zonem": 103, "news": [103, 180, 190, 222, 265, 284, 389, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 478, 479], "rc": [103, 172, 204, 292, 344, 350, 357, 394, 406], "autoexec": 103, "sweet": [103, 257], "p2": [103, 172, 257, 280, 344, 422, 436, 461, 467, 468, 473], "leftmost": [103, 144, 156, 186, 189, 222, 231, 315, 425, 461, 475, 476], "shoe": 103, "adjac": [103, 179, 186, 248, 266, 278, 315, 383, 405, 430, 456, 472, 475, 478], "abxd": [103, 315, 475], "carriag": [103, 174, 203, 204, 254, 315, 327, 340, 359, 402, 414, 430, 460, 462], "hexrepl": 103, "65490": 103, "49152": 103, "0xffd2": 103, "0xc000": 103, "bbbb": 103, "deed": 103, "swordfish": 103, "sdeedfish": 103, "bword": 103, "superstit": 103, "insuper": 103, "resist": [103, 231, 328, 458, 464, 471, 478], "temptat": [103, 383, 458], "backtrack": [103, 315, 478], "balanc": [103, 156, 337, 472], "pain": [103, 262, 457, 462, 478], "dirti": 103, "terribl": 103, "neat": [103, 165, 459, 464], "pat": [103, 185, 473], "unclear": [103, 469], "jeffrey": [103, 315, 337, 421, 463, 464, 467, 468, 470, 478], "friedl": [103, 315], "reilli": [103, 315, 362, 449, 459, 473, 478], "flavour": [103, 106, 246, 292, 353, 385, 462, 478], "inet": [104, 333], "scoket": 104, "berkeley": [104, 180, 465], "serversocket": 104, "snmp": 104, "clientsocket": 104, "client_thread": 104, "peer": [104, 130, 208, 209, 284, 324, 337, 478], "mysocket": [104, 258], "clariti": [104, 111, 288, 361, 422, 470, 478], "mysend": 104, "totals": 104, "msglen": [104, 333], "myrec": 104, "bytes_recd": 104, "2048": [104, 337, 400, 478], "x86": [104, 172, 296, 343, 451, 456, 463, 468, 475, 478], "amd64": [104, 299, 343, 350, 478], "arm": [104, 473, 478], "risc": [104, 478], "tcp_nodelay": [104, 123, 464, 474, 475, 478], "ready_to_read": 104, "ready_to_writ": 104, "in_error": 104, "potential_read": 104, "potential_writ": 104, "potential_err": 104, "outbound": 104, "andrew": [105, 106, 173, 421, 457, 459, 460, 461, 462, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478], "dalk": [105, 421, 459, 460, 462], "student_tupl": 105, "student": [105, 111, 171, 222, 343, 379, 381, 435, 456, 468, 470], "student_object": 105, "secondari": [105, 123, 243, 257, 304, 348, 464, 465, 478], "multisort": 105, "xs": 105, "timsort": [105, 470], "lexicograph": [105, 257, 340, 425, 437, 462], "schwartzian": 105, "standard_way": 105, "double_revers": 105, "newgrad": 105, "japanes": [106, 154, 262, 461, 475], "hebrew": [106, 154], "russian": [106, 154], "emoji": [106, 470, 476, 478], "0x10ffff": [106, 221, 348, 471], "million": [106, 339, 362, 436], "265e": 106, "0x265e": 106, "0061": 106, "0062": 106, "0063": 106, "007b": 106, "2167": 106, "2168": 106, "nine": [106, 182, 350, 472, 478], "265f": 106, "pawn": 106, "1f600": 106, "grin": 106, "1f609": 106, "wink": 106, "paper": [106, 117, 151, 333, 379, 460, 478], "glyph": [106, 204, 243], "diagon": [106, 436, 467], "stroke": [106, 459], "horizont": [106, 173, 174, 370, 371, 379, 430], "toolkit": [106, 243, 257, 364, 434, 457], "114": [106, 119, 221], "111": [106, 221, 257, 339, 341, 456], "0x50": 106, "79": [106, 377, 436], "74": [106, 339, 447, 476, 477], "68": [106, 182, 221, 314, 361, 408, 476], "6f": 106, "6e": [106, 217], "0x00": [106, 174, 187], "ram": [106, 182, 462, 478], "gigabyt": [106, 404], "factor": [106, 138, 157, 189, 231, 257, 288, 310, 340, 381, 383, 425, 426, 436, 459, 464, 471, 475, 477, 478], "intoler": 106, "strcpi": 106, "resynchron": [106, 471], "consortium": [106, 405], "glossari": [106, 177, 478], "chronolog": [106, 123, 474], "computerphil": 106, "youtub": [106, 257], "tom": [106, 374, 459, 462, 467, 470, 472, 478], "scott": [106, 460, 462, 476, 478], "jukka": [106, 473], "korpela": 106, "introductori": [106, 333, 379, 462], "joel": [106, 474, 478], "spolski": 106, "rudiment": 106, "fichier": 106, "trouv": 106, "pertoir": 106, "greek": [106, 154], "u0394": 106, "u00000394": 106, "xnn": 106, "x80abc": 106, "ufffdabc": 106, "iso_8859_1": 106, "57344": 106, "ue000": 106, "xmlcharrefreplac": [106, 154, 221, 254, 340, 460, 478], "unnnn": 106, "namereplac": [106, 154, 221, 254, 473, 478], "40960": 106, "1972": [106, 336, 460, 461, 462], "xea": 106, "x80": [106, 296, 459], "x80abcd": 106, "xde": 106, "xb4": 106, "ua000": 106, "ua000abcd": 106, "u07b4": 106, "yi": 106, "syllabl": 106, "comfort": [106, 189], "xac": 106, "u1234": [106, 154, 258], "u20ac": [106, 465, 473], "u00008000": 106, "172": [106, 471], "4660": 106, "8364": [106, 221], "32768": [106, 216, 337, 343, 419, 478], "dose": 106, "accent": [106, 327], "inspir": [106, 163, 196, 257, 421, 422, 457, 458, 460, 463, 470, 471, 478], "fifth": [106, 173, 243, 340, 361, 478], "233": [106, 222, 436, 444, 445], "0x0bf2": 106, "3972": [106, 464], "6000": [106, 231, 279], "13231": 106, "00e9": 106, "acut": 106, "0bf2": 106, "tamil": 106, "0f84": 106, "mn": [106, 430], "tibetan": 106, "halanta": 106, "1770": 106, "lo": [106, 144, 340, 381, 430, 466], "tagbanwa": 106, "sa": [106, 179, 333], "33af": 106, "rad": [106, 460], "subcategori": 106, "nonspac": [106, 430], "00ea": 106, "0065": 106, "0302": 106, "german": [106, 154, 262, 340, 379, 472, 478], "00df": 106, "street": [106, 117, 315], "rzenichstra": 106, "rzenichstrass": 106, "inequ": [106, 182, 191, 198, 383, 425, 463, 470], "compare_str": 106, "nfd": [106, 382], "single_char": 106, "multiple_char": 106, "strs": [106, 381], "nfc": [106, 382, 476], "nfkc": [106, 342, 382, 389, 430, 478], "nfkd": [106, 382], "caseless": [106, 340, 471], "compare_caseless": 106, "57": [106, 179, 460, 476, 477, 478], "thai": [106, 154, 421], "arab": [106, 154, 182, 340, 457, 464, 470], "u0e55": 106, "u0e57": 106, "pragmat": 106, "ned": [106, 464, 470, 472, 477, 478], "batcheld": [106, 478], "marc": [106, 226, 336, 457, 458, 459, 460, 462, 471, 478], "andr": [106, 226, 336, 457, 458, 459, 460, 462, 478], "lemburg": [106, 226, 336, 457, 458, 459, 460, 462], "gave": [106, 383, 464, 470, 478], "slide": [106, 406], "europython": 106, "transmiss": [106, 174, 204, 265, 296, 402], "gib": [106, 266, 302, 353, 357, 417, 457, 460, 462, 478], "u4500": 106, "blah": [106, 266, 288], "autodetect": [106, 300, 353, 390, 458, 462], "converg": 106, "u4500abc": 106, "xe4": 106, "x94": [106, 231], "occas": [106, 107, 293, 309, 329, 343, 357, 462, 472], "untrust": [106, 119, 186, 264, 279, 295, 296, 308, 310, 323, 326, 328, 337, 353, 404, 406, 407, 408, 409, 414, 415, 417, 460, 463, 478], "attack": [106, 119, 123, 169, 221, 231, 240, 258, 264, 328, 336, 340, 353, 381, 404, 462, 464, 468, 471, 472, 473, 478], "bytestream": 106, "transpar": [106, 117, 146, 154, 172, 173, 198, 199, 214, 237, 243, 254, 266, 295, 353, 371, 379, 456, 458, 460, 461, 471, 472, 474, 475, 478], "new_f": 106, "beazley": [106, 459, 470], "gut": [106, 148, 478], "benjamin": [106, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478], "peterson": [106, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476], "alexand": [106, 463, 464, 466, 469, 470, 473, 474, 475, 478], "belopolski": [106, 463, 464, 466, 469, 470, 473, 474, 475, 478], "brandl": [106, 462, 463, 464, 466, 470, 471, 473, 474, 478], "ezio": [106, 464, 470, 471, 472, 473], "melotti": [106, 464, 470, 471, 472, 473], "ric": [106, 468, 471, 472, 476, 478], "araujo": [106, 468, 471, 472, 476, 478], "nichola": [106, 460, 467], "bastin": [106, 461], "marius": [106, 457], "gedmina": 106, "kent": [106, 337, 357, 383, 458, 462, 463], "johnson": [106, 462, 463, 478], "ken": [106, 364, 467, 468, 469, 474, 475, 476, 477, 478], "krugler": 106, "martin": [106, 226, 284, 457, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 476, 478], "von": [106, 226, 314, 423, 457, 459, 460, 461, 462, 463, 464, 470, 471, 472, 476], "wis": [106, 226, 284, 457, 459, 460, 461, 462, 463, 464, 470, 471, 472, 476], "terri": [106, 437, 467, 468, 473, 474, 475, 476, 477, 478], "reedi": [106, 460, 467, 468, 473, 474, 475, 476, 477, 478], "serhiy": [106, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "storchaka": [106, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "eryk": [106, 468, 478], "chad": [106, 460, 462, 463, 478], "whitacr": 106, "graham": [106, 437, 463, 468, 478], "wideman": 106, "michael": [107, 436, 437, 458, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 476, 477, 478], "foord": [107, 464, 470], "2616": [107, 238, 388, 390, 402, 470], "tmp_file": 107, "the_pag": 107, "transmit": [107, 123, 130, 138, 238, 284, 331, 333, 356, 402, 404, 414, 461, 476], "someserv": 107, "northampton": 107, "upload": [107, 148, 458, 462, 464, 473, 475, 477, 478], "submiss": [107, 148, 279, 310, 421, 457], "hundredweight": 107, "tin": [107, 267, 478], "door": [107, 117, 338], "somebodi": 107, "url_valu": 107, "dislik": [107, 384], "user_ag": 107, "win64": [107, 457, 473, 478], "x64": [107, 463], "pretend_serv": 107, "404": [107, 148, 237, 238, 241, 258, 390, 402, 414, 415, 436, 467, 473], "403": [107, 237, 241, 436, 467], "401": [107, 237, 390, 436, 467, 473, 478], "299": [107, 219, 237], "599": [107, 219, 237, 284], "shortmessag": [107, 241], "101": [107, 117, 237, 257, 314, 339, 341, 377, 384, 439, 456, 464, 470], "obey": [107, 327, 340, 344, 360, 423, 463], "201": [107, 237, 257, 364, 457], "202": [107, 179, 231, 237], "203": [107, 237], "204": [107, 237, 241, 379], "206": [107, 237], "304": [107, 237, 241, 475], "unauthor": [107, 237], "402": [107, 237, 377], "payment": [107, 257], "charg": [107, 246, 421], "406": [107, 237], "407": [107, 237], "408": [107, 237], "410": [107, 237], "precondit": [107, 337, 459, 470], "413": [107, 237, 478], "415": [107, 237], "media": [107, 150, 277, 289, 315, 421], "416": [107, 237, 377], "417": [107, 237, 241], "502": [107, 237, 461], "503": [107, 237], "504": [107, 237, 340], "respond": [107, 238, 241, 243, 265, 309, 333, 337, 348, 364, 384, 402, 414, 415, 464, 478], "fish": [107, 295, 384, 385, 394, 448, 472, 478], "dtd": [107, 236, 310, 390, 404, 409, 410, 411, 476, 478], "w3": [107, 236, 310, 390, 406, 408, 421, 478], "tr": [107, 173, 236, 297, 310, 390, 406, 408, 421, 478], "xhtml1": [107, 390], "someurl": 107, "brief": [107, 117, 189, 201, 221, 222, 264, 288, 298, 304, 315, 318, 340, 344, 375, 421, 457, 459, 461, 462, 465, 470, 478], "lift": [107, 379, 469, 474, 475, 476], "some_handler_inst": 107, "realm": [107, 204, 390, 478], "cpanel": 107, "password_mgr": [107, 390], "knew": [107, 465], "top_level_url": 107, "a_url": 107, "http_proxi": [107, 390, 478], "8080": [107, 238, 239, 333, 390, 414], "userinfo": [107, 390], "joe": [107, 148, 230, 379, 390, 473, 476, 478], "proxy_support": 107, "request_method": [107, 390, 402, 478], "voidspac": [107, 464], "uk": [107, 162, 239, 340, 361, 464, 478], "review": [107, 140, 165, 231, 336, 460, 465, 474, 476, 478], "lee": [107, 421, 461, 462, 464, 468, 470, 475, 478], "snif": 107, "sensibl": [107, 117, 123, 163, 179, 231, 251, 288, 360, 384, 385, 389, 425, 461, 464, 474, 475, 478], "msie": [107, 240], "sv1": 107, "clr": 107, "4322": 107, "ie": [107, 201, 214, 236, 239, 244, 274, 288, 390, 414, 473, 478], "aspn": [107, 271], "virtualenv": [108, 456, 471, 478], "somepackag": 108, "wheel": [108, 186, 247, 314, 451, 467, 468, 469, 476, 477, 478], "greet": [109, 301, 331, 336, 381, 473], "beneath": [109, 408, 478], "py3": [109, 315, 448, 466, 470, 478], "mycod": 109, "failunlessequ": [109, 468, 469], "failifequ": [109, 468, 469], "failunless": [109, 468, 469], "assert_": [109, 468, 469, 470, 478], "failif": [109, 468, 469], "failunlessrais": [109, 468, 469], "cal": [109, 147, 390, 391], "failunlessalmostequ": [109, 468, 469], "failifalmostequ": [109, 468, 469], "basestr": [109, 460, 465, 472], "viewitem": [109, 464], "viewkey": [109, 464], "viewvalu": [109, 464], "execfil": [109, 460, 461, 465, 478], "exitfunc": [109, 457, 461, 465], "funcattr": 109, "my_funct": [109, 436], "func_closur": [109, 465], "__closure__": [109, 423, 465, 478], "new_featur": 109, "getcwdu": [109, 460], "someclass": [109, 295, 381, 384, 385, 457], "some_iter": 109, "imports2": 109, "itertools_import": 109, "ifilt": [109, 460], "izip": [109, 461], "ifilterfals": 109, "__metaclass__": [109, 459, 463, 465], "methodattr": 109, "im_func": [109, 463], "__nonzero__": [109, 465], "numliter": 109, "iscal": [109, 464, 465, 478], "sequenceinclud": [109, 464, 465], "issequencetyp": 109, "ismappingtyp": 109, "isnumbertyp": 109, "irepeat": 109, "maxint": [109, 465], "backtick": [109, 143, 392, 465, 475], "set_liter": 109, "standarderror": [109, 463, 465], "sys_exc": 109, "exc_valu": [109, 336, 348, 357, 360, 376, 423, 464, 465, 468, 478], "exc_traceback": [109, 348, 357, 360, 376, 465, 468, 478], "tuple_param": 109, "urllib2": [109, 390, 461, 463, 464, 465], "ws_comma": 109, "xrang": [109, 458, 459, 460, 461, 465], "xreadlin": [109, 458, 460, 461], "peg": [109, 426, 467, 468, 469, 477, 478], "617": [109, 426, 467, 468, 469, 477, 478], "parsabl": [109, 471, 477, 478], "libcst": [109, 119, 477], "parso": [109, 119, 477], "featurenam": [110, 411], "optionalreleas": 110, "mandatoryreleas": [110, 478], "compilerflag": 110, "0a3": [110, 478], "getoptionalreleas": 110, "getmandatoryreleas": 110, "compiler_flag": [110, 221], "nested_scop": [110, 431, 458, 459], "0b1": [110, 478], "0a1": [110, 478], "0a2": [110, 478], "with_stat": [110, 431, 462, 463], "unicode_liter": [110, 431, 463], "generator_stop": [110, 209, 431, 473, 478], "tbd": [110, 478], "steer": [110, 379, 458, 461, 468, 470, 478], "council": [110, 478], "649": [110, 424], "helloworld": [111, 430], "tim": [111, 341, 362, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 472, 473, 474, 477, 478], "beauti": [111, 186], "phrase": [111, 237, 238, 244, 268, 288, 390, 425, 429, 430, 460, 463, 471, 473, 478], "proactiv": 111, "exemplifi": [111, 264, 436], "hypothet": [111, 288, 333, 457], "bandclass": 111, "teacher": [111, 379], "search_stud": 111, "student_nam": 111, "fenc": 111, "did_user_define_their_nam": 111, "my_nam": [111, 384], "print_user_nam": 111, "dinsdal": 111, "uncom": [111, 196, 243, 459, 469], "jabberwocki": 111, "light": [112, 172, 173, 463, 464, 466, 478], "weight": [112, 156, 172, 198, 314, 339, 341, 367, 474, 478], "recycl": [112, 360, 478], "netbsd": [112, 299, 333, 360, 361, 468, 475, 478], "dragonflybsd": [112, 333, 360, 478], "768": [112, 360], "a_lock": 112, "surviv": [112, 172, 397], "myabc": 113, "get_iter": 113, "myiter": [113, 381], "my_abstract_method": 113, "my_abstract_classmethod": 113, "my_abstract_staticmethod": 113, "my_abstract_properti": 113, "_get_x": 113, "_set_x": 113, "__isabstractmethod__": [113, 471], "_fget": 113, "_fset": 113, "_fdel": 113, "594": [114, 138, 148, 149, 150, 169, 245, 268, 277, 283, 284, 291, 297, 332, 335, 345, 354, 392, 403, 468, 469, 478], "mono": [114, 138, 291, 396], "stereo": [114, 138, 291, 396], "quadro": 114, "nchannel": [114, 138, 291, 332, 345, 396], "samples": 114, "framer": [114, 332, 345, 396], "cd": [114, 117, 186, 257, 291, 383, 412, 463], "qualiti": [114, 189, 289, 291, 301, 421, 423, 470, 478], "44": [114, 156, 182, 280, 314, 324, 382, 467, 471, 476, 477], "44100": [114, 291], "176": 114, "ahead": [114, 257, 354, 361, 398, 405, 426, 461, 478], "sampwidth": [114, 332, 345, 396], "nframe": [114, 332, 345, 377, 396, 450], "comptyp": [114, 345, 396], "compnam": [114, 345, 396], "uncompress": [114, 146, 230, 266, 328, 353, 396, 416, 417, 470, 478], "ulaw": [114, 332, 345], "alaw": [114, 345], "g722": 114, "programnam": 117, "store_const": [117, 288, 478], "append_const": [117, 288, 478], "helpformatt": [117, 288, 478], "myprogram": 117, "parent_pars": 117, "foo_pars": 117, "bar_pars": 117, "yyy": [117, 427], "nbar": 117, "foonley": 117, "store_fals": [117, 288], "foon": 117, "_storeact": 117, "option_str": 117, "absent": [117, 173, 264, 293, 333, 341, 390, 470, 478], "f1": [117, 186, 212, 264, 279, 340, 422, 435, 478], "f2": [117, 186, 212, 279, 340, 422, 478], "f4": [117, 459], "booleanoptionalact": [117, 469, 478], "fooaction": 117, "xx": [117, 315, 326, 389, 478], "yy": 117, "_io": [117, 184, 470, 474, 478], "code_point": 117, "source_fil": 117, "dest_fil": 117, "datapath": 117, "short_titl": 117, "tale": 117, "citi": [117, 337, 391, 421, 478], "downstream": [117, 420, 478], "scissor": 117, "frobbl": 117, "foo_bar": [117, 288, 385], "xyzz": 117, "badger": 117, "inher": [117, 360, 394, 408, 478], "cautious": [117, 267, 389], "1s": [117, 478], "bacon": [117, 156, 186, 246, 275, 340, 376, 390, 423], "bac": 117, "mmm": [117, 244], "ba": [117, 251, 257, 417, 473], "parser_class": 117, "svn": [117, 159, 350, 389, 460, 462, 463, 464, 470, 478], "cmd1": 117, "cmd2": 117, "parser_a": 117, "parser_b": 117, "parser_foo": 117, "parser_bar": 117, "xyzyx": 117, "subparser_nam": 117, "subparser1": 117, "subparser2": 117, "dat": [117, 180, 456], "group1": [117, 315, 438], "group2": [117, 438], "exclusive_group": 117, "736": 117, "arg_lin": 117, "myargumentpars": 117, "errorcatchingargumentpars": 117, "doit": 117, "monkey": [117, 381, 384, 385, 469, 478], "callback_": 117, "unicodestr": 118, "enc": [118, 337], "u2641": 118, "asdl": [119, 462, 467, 477, 478], "stmt": [119, 336, 362, 463, 478], "decorator_list": 119, "type_param": [119, 381, 422, 426, 431, 478], "orels": [119, 463], "finalbodi": 119, "elt": 119, "cmpop": 119, "expr_context": 119, "ifs": 119, "posonlyarg": [119, 478], "vararg": [119, 251, 478], "kwonlyarg": [119, 251], "kw_default": 119, "asnam": 119, "context_expr": 119, "optional_var": 119, "kwd_attr": 119, "kwd_pattern": 119, "typeignor": [119, 478], "_ast": [119, 462, 470, 478], "source_lin": 119, "nameconst": [119, 469, 476, 478], "extslic": [119, 477, 478], "fantast": 119, "snake": [119, 156], "contributor": [119, 421, 465, 478], "func_typ": [119, 426, 476], "115": [119, 257, 341, 377, 478], "collaps": [119, 192, 255, 292, 359, 472, 478], "walrus": [119, 425, 476, 478], "soc": 119, "otherexcept": [119, 209], "subpattern": [119, 422, 436, 478], "point2d": [119, 381], "point3d": [119, 156, 381], "ts": [119, 173, 228, 379, 381, 422, 462, 469, 478], "outermost": [119, 251, 340, 360, 478], "decorator1": 119, "decorator2": 119, "3115": [119, 380, 422, 423, 465, 471], "base1": [119, 435], "base2": [119, 435], "other_func": 119, "feature_vers": [119, 372, 476, 478], "misplac": [119, 478], "ast_obj": 119, "node_or_str": 119, "oneself": 119, "denial": [119, 221, 258, 340, 353, 404, 423, 450, 468, 478], "new_nod": 119, "old_nod": 119, "visit_num": [119, 476, 478], "visit_str": [119, 476, 478], "visit_byt": [119, 476], "visit_nameconst": [119, 476], "visit_ellipsi": [119, 476], "visit_const": [119, 476, 478], "rewritenam": 119, "visit_nam": 119, "new_tre": 119, "yourtransform": 119, "annotate_field": 119, "include_attribut": 119, "asttoken": 119, "leoast": 119, "codemod": 119, "recoveri": [119, 197, 244, 390, 426], "emscripten": [120, 148, 159, 162, 169, 206, 211, 219, 225, 229, 238, 241, 244, 253, 274, 279, 283, 284, 289, 301, 306, 318, 324, 325, 329, 331, 333, 334, 335, 337, 344, 348, 351, 354, 360, 390, 394, 398, 414, 415, 420, 451, 468, 478], "wasi": [120, 148, 159, 162, 169, 206, 208, 209, 211, 219, 225, 229, 238, 241, 244, 253, 274, 279, 283, 284, 289, 301, 306, 318, 324, 325, 329, 331, 333, 334, 335, 337, 344, 348, 351, 354, 360, 390, 394, 398, 414, 415, 420, 451, 468, 478], "wasm32": [120, 148, 159, 162, 169, 206, 211, 219, 225, 229, 238, 241, 244, 253, 274, 279, 283, 284, 289, 301, 306, 318, 324, 325, 329, 331, 333, 334, 335, 337, 344, 348, 351, 354, 360, 390, 394, 398, 414, 415, 420, 451, 468, 478], "fifo": [121, 131, 156, 257, 279, 289, 292, 312, 325, 338, 353, 474, 475, 478], "pythonasynciodebug": [122, 123, 184, 450, 478], "threadsaf": [122, 222, 257, 263, 314, 478], "slow_callback_dur": 122, "fut": [122, 126], "coro_func": 122, "coro": [122, 123, 125, 132, 136, 473, 478], "321": [122, 182], "source_traceback": 122, "base_ev": [123, 348, 425, 478], "prefac": [123, 130], "idempot": [123, 130, 163, 222, 469, 475, 478], "irrevers": 123, "567": [123, 126, 166, 182, 341, 447, 466, 475, 478], "protocol_factori": [123, 130], "local_addr": [123, 130, 133], "ssl_handshake_timeout": [123, 133, 475], "ssl_shutdown_timeout": [123, 133, 478], "happy_eyeballs_delay": [123, 133, 476, 478], "interleav": [123, 133, 189, 279, 464, 470, 475, 476, 478], "synopsi": [123, 309, 337, 478], "eyebal": [123, 476, 478], "8305": 123, "250": [123, 219, 304, 331, 336, 379, 464], "local_host": 123, "local_port": 123, "handshak": [123, 133, 337, 472, 473, 474, 475, 476, 478], "60": [123, 133, 144, 152, 162, 179, 182, 192, 257, 303, 314, 337, 339, 361, 376, 377, 379, 393, 430, 460, 462, 468, 470, 474, 476, 478], "dual": [123, 333, 337, 421, 430, 478], "undesir": [123, 337, 458, 462, 478], "datatrack": 123, "ietf": [123, 231, 255, 337, 343], "rfc6555": 123, "remote_addr": [123, 130], "reuse_port": [123, 133, 333], "allow_broadcast": 123, "remote_host": 123, "remote_port": 123, "endpoint": [123, 130, 208, 238, 333, 379, 470, 478], "so_reuseport": [123, 333, 357, 478], "broadcast": [123, 255, 333, 478], "preexist": 123, "reuse_address": [123, 133, 468, 474, 475, 476, 477, 478], "so_reuseaddr": [123, 333, 357, 468, 474, 475, 476, 477, 478], "incom": [123, 130, 209, 241, 258, 279, 334, 337, 407, 469, 470, 478], "packet": [123, 130, 138, 255, 265, 333, 334, 414, 464, 478], "af_unspec": [123, 133, 333], "ai_pass": [123, 133, 333], "backlog": [123, 133, 279, 333, 473, 478], "time_wait": [123, 333], "syscal": [123, 209, 289, 318, 328, 473, 474, 476, 478], "coder": [123, 138], "sporad": [123, 289], "sockaddr": [123, 139, 333], "uncatch": 123, "blocking_io": [123, 136], "cpu_bound": 123, "asyncgen": 123, "universal_newlin": [123, 134, 344, 461, 475, 478], "srv": [123, 166, 475], "client_connect": 123, "trsock": [123, 478], "transportsocket": [123, 478], "mypolici": [123, 471], "iocp": [123, 478], "msdn": [123, 289], "hello_world": 123, "display_d": [123, 136], "end_tim": [123, 136], "rsock": [123, 130, 133], "wsock": [123, 130, 133], "recept": [123, 130, 133], "ask_exit": 123, "signam": [123, 329], "3600": [123, 130, 136, 165, 179], "baseeventloop": [125, 478], "successor": [125, 228], "_make_socket_transport": 125, "base_futur": 126, "_asyncio_future_block": 126, "set_aft": 126, "excutor": 127, "water": [127, 324, 473, 478], "proactor_ev": 128, "windows_ev": [128, 478], "windows_util": [128, 475, 478], "hpet": 128, "prohibit": [129, 189, 254, 258, 337, 402, 425, 475, 476, 477, 478], "inact": [129, 134, 436, 463, 478], "disrupt": [129, 469, 478], "reap": [129, 478], "pidfd": [129, 329, 478], "goldilock": 129, "launch": [129, 182, 279, 289, 344, 348, 357, 398, 456, 457, 470, 471, 472, 476, 478], "scale": [129, 314, 324, 371, 381, 457, 460, 463, 474, 475, 478], "myeventlooppolici": 129, "eventloop": [129, 478], "extent": [130, 152, 231, 254, 274, 371, 379, 421, 466, 478], "outgo": [130, 196, 333, 337, 469, 470, 471], "peernam": [130, 133], "socknam": [130, 478], "peercert": 130, "ssl_object": 130, "watermark": [130, 133], "opportun": [130, 136, 154, 321, 385, 456, 478], "list_of_data": 130, "addr": [130, 133, 148, 166, 255, 325, 333, 337, 357, 415, 470, 473, 478], "terminateprocess": [130, 134, 139, 279, 289, 344, 463, 464], "unidirect": [130, 279], "reassembl": 130, "sizehint": [130, 154, 324, 478], "recipi": [130, 196, 204, 205, 331, 334, 421], "undeliver": 130, "echoserverprotocol": 130, "8888": [130, 133], "echoclientprotocol": 130, "on_con_lost": 130, "myprotocol": 130, "dateprotocol": 130, "exit_futur": 130, "unblock": [131, 135, 279, 329, 478], "priority_numb": [131, 312], "sleep_for": 131, "slept": 131, "workload": [131, 477, 478], "total_sleep_tim": 131, "started_at": 131, "total_slept_for": 131, "return_except": [131, 136, 478], "loop_factori": [132, 469, 478], "tcp_echo_cli": 133, "client_connected_cb": 133, "feed_eof": [133, 478], "handle_echo": 133, "print_http_head": 133, "wait_for_data": 133, "base_subprocess": 134, "proc": [134, 236, 289, 344, 474, 478], "zzz": [134, 427], "stdout_data": [134, 344, 461], "stderr_data": [134, 344, 461], "creationflag": [134, 344, 461], "waiter": [135, 360, 478], "waiter_task": 135, "codit": 135, "sem": 135, "example_barri": 135, "housekeep": [135, 360], "0x1053bb7c8": 136, "say_aft": 136, "task1": [136, 447], "task2": [136, 447], "tg": 136, "function_that_returns_a_future_object": 136, "some_python_coroutin": 136, "leverag": [136, 248, 279, 472, 477], "mid": [136, 478], "background_task": 136, "some_coro": 136, "forev": [136, 305, 324, 458, 459, 460, 461, 471, 478], "misbehav": [136, 478], "another_coro": 136, "bubbl": [136, 422, 478], "aws": 136, "aggreg": [136, 257, 336, 383, 468, 478], "stronger": [136, 385, 478], "subtask": 136, "employ": [136, 148, 279, 289, 407, 427, 471], "custom_task_constructor": 136, "aw": [136, 478], "long_running_task": 136, "deadlin": [136, 321], "overdu": 136, "new_deadlin": 136, "yay": [136, 444], "return_when": [136, 162], "all_complet": [136, 162], "first_complet": [136, 162], "first_except": [136, 162], "earliest": [136, 147, 179, 186, 361], "earliest_result": 136, "took": [136, 165, 304, 362, 457, 478], "eager_start": 136, "newest": 136, "deni": [136, 208, 334, 423, 460, 478], "cancel_m": 136, "ineffect": [136, 472], "make_request_with_timeout": 136, "make_request": 136, "make_another_request": 136, "unrelated_cod": 136, "fashion": [136, 166, 230, 258, 279, 304, 315, 333, 376, 381, 408, 422, 423, 425, 461, 464, 471, 472, 478], "suppres": 136, "unregistr": [137, 325], "counterfil": 137, "_count": 137, "incrcount": 137, "savecount": 137, "adject": [137, 441], "donni": 137, "sector": 137, "law": [138, 231, 332, 339, 345, 361, 421, 462, 478], "dvi": 138, "adpcm": 138, "fragment1": 138, "fragment2": 138, "adpcmfrag": 138, "newstat": 138, "proport": [138, 163, 314, 339, 478], "energi": 138, "maxim": [138, 186, 187, 192, 231, 243, 357, 435, 478], "wherebi": [138, 148, 264, 295], "ima": 138, "newwidth": 138, "new_fram": 138, "old_width": 138, "inrat": 138, "outrat": 138, "weighta": 138, "weightb": [138, 478], "newfrag": 138, "s_i": 138, "lfactor": 138, "rfactor": 138, "recombin": [138, 471], "mul_stereo": 138, "lsampl": 138, "rsampl": 138, "toler": [138, 151, 255, 271, 473, 475, 478], "loss": [138, 182, 221, 239, 254, 267, 271, 361, 390, 416, 421, 425, 439, 459, 461, 463, 470, 474, 475, 476, 478], "predict": [138, 221, 254, 348, 408, 423, 450, 456, 470, 477, 478], "misinterpret": 138, "energet": 138, "echocancel": 138, "outputdata": 138, "inputdata": 138, "800": [138, 231, 266, 462, 464, 467, 470, 474, 478], "out_test": 138, "in_test": 138, "ipo": 138, "prefil": 138, "postfil": 138, "run_fil": [139, 450], "run_interactivehook": [139, 348], "run_startup": [139, 450], "run_stdin": [139, 450], "call_funct": [139, 172, 468, 474, 478], "func_point": 139, "cdata": [139, 172, 310, 405, 410, 411, 478], "dlopen": [139, 172, 289, 348, 451, 459, 462, 478], "dlsym": [139, 172], "code_object": [139, 221, 478], "whenc": [139, 150, 211, 254, 274, 289, 441, 459], "root_dir": [139, 227, 328, 467, 469, 478], "dir_fd": [139, 221, 227, 289, 328, 467, 468, 471, 478], "putlin": [139, 284, 301, 478], "topdown": [139, 289], "onerror": [139, 289, 298, 328, 469, 475, 478], "follow_symlink": [139, 289, 292, 328, 467, 471, 478], "pgid": [139, 289], "src_dir_fd": [139, 289], "dst_dir_fd": [139, 289], "show_cmd": [139, 289], "ns": [139, 289, 310, 377, 380, 393, 408, 468, 478], "followlink": [139, 289, 463], "base_nam": [139, 328], "extract_dir": [139, 328], "thread_id": [139, 329, 361], "signalnum": [139, 329], "servicenam": [139, 333], "protocolnam": [139, 333], "connection_handl": [139, 336], "set_asyncgen_hooks_fin": [139, 348], "set_asyncgen_hooks_firstit": [139, 348], "logopt": [139, 351], "maskpri": [139, 351], "fullpath": [139, 355], "fullurl": [139, 390], "computer_nam": [139, 400], "sub_key": [139, 400], "file_nam": [139, 400], "value_nam": [139, 400], "_winapi": [139, 478], "createfil": 139, "desired_access": 139, "share_mod": 139, "creation_disposit": 139, "flags_and_attribut": 139, "createjunct": 139, "src_path": 139, "dst_path": 139, "createnamedpip": 139, "open_mod": 139, "pipe_mod": 139, "createpip": 139, "createprocess": [139, 344], "application_nam": 139, "command_lin": [139, 344], "current_directori": 139, "openprocess": 139, "process_id": [139, 333], "exit_cod": [139, 209], "pyobj_fromptr": 139, "4648": [140, 323, 478], "ascii85": [140, 472, 478], "76": [140, 198, 339, 377, 379, 414], "2045": [140, 190, 192, 198, 199, 201, 414], "altchar": 140, "map01": 140, "oh": 140, "eye": [140, 182, 186, 462, 469, 473, 476], "foldspac": 140, "wrapcol": 140, "adob": [140, 472, 478], "btoa": 140, "ignorechar": 140, "x0b": [140, 340, 393], "zgf0ysb0bybizsblbmnvzgvk": 140, "1521": [140, 313], "multipurpos": 140, "botfram": 141, "stopfram": 141, "returnfram": 141, "c_call": [141, 348], "c_return": [141, 348], "c_except": [141, 348], "module_nam": [141, 246, 279, 357, 467, 475, 478], "argument_list": [141, 422, 425], "dispatch_": 141, "frame_lineno": 141, "lprefix": 141, "a2b_": [143, 471], "strict_mod": [143, 478], "3548": [143, 461], "quotetab": [143, 154, 313], "istext": 143, "1522": [143, 313], "linefe": [143, 204, 327, 341, 430, 460], "ccitt": [143, 345], "polynomi": [143, 257, 271], "0x1021": 143, "binhex4": [143, 477, 478], "010x": 143, "bytes_per_sep": [143, 340], "xb9": 143, "x01": [143, 254, 255, 280, 333, 343, 393], "b901ef": 143, "b9": 143, "ef": [143, 156, 257, 389, 412], "b9_01ef": 143, "b901": 143, "hexstr": 143, "invers": [143, 147, 151, 179, 182, 197, 205, 207, 221, 240, 255, 271, 287, 295, 327, 336, 339, 340, 361, 425, 426, 463, 469, 476, 478], "liber": [143, 189], "85": [143, 150, 284, 339, 473], "domin": [144, 239, 478], "sortedcollect": 144, "find_lt": 144, "find_l": 144, "find_gt": 144, "find_g": 144, "score": [144, 186, 336, 339, 447], "70": [144, 179, 182, 314, 339, 359, 377, 436, 446, 447, 478], "fdcba": 144, "titan": 144, "bird": 144, "1963": 144, "hitchcock": 144, "alien": [144, 360], "1986": [144, 179], "1960": 144, "by_year": 144, "romanc": 144, "hiller": 144, "_f": 145, "compresslevel": [146, 230, 353, 417, 475, 477, 478], "xb": [146, 230, 266], "wt": [146, 221, 230, 266, 339], "compressor": [146, 266, 478], "decompressor": [146, 266, 478], "max_length": [146, 266, 419, 473, 478], "donec": 146, "rhoncus": 146, "qui": 146, "sapien": 146, "sit": [146, 370, 412], "amet": 146, "molesti": 146, "fusc": 146, "scelerisqu": 146, "vel": 146, "augu": 146, "nec": 146, "ullamcorp": 146, "nam": 146, "rutrum": 146, "pretium": 146, "placerat": 146, "aliquam": 146, "tristiqu": 146, "lorem": 146, "cursus": 146, "interdum": 146, "laoreet": 146, "ultric": 146, "purus": 146, "pulvinar": 146, "gravida": 146, "euismod": 146, "magna": 146, "varius": 146, "justo": 146, "tincidunt": 146, "feugiat": 146, "pharetra": 146, "lacus": 146, "risus": 146, "vehicula": 146, "maecena": 146, "feli": 146, "pellentesqu": 146, "semper": 146, "nunc": 146, "nibh": 146, "ac": [146, 156, 257, 421, 451, 460, 478], "elementum": 146, "dolor": 146, "luctus": 146, "curabitur": 146, "lacinia": 146, "ornar": 146, "consectetur": 146, "vestibulum": 146, "513595166163142": 146, "gen_data": 146, "chunksiz": [146, 162, 279, 299, 473, 478], "nonrandom": 146, "myfil": [146, 254, 289, 383, 417, 435, 438, 447], "european": [147, 154, 464], "gregorian": [147, 179], "indefinit": [147, 173, 179, 241, 257, 261, 265, 267, 329, 354, 464, 472, 473, 478], "prolept": [147, 179], "dershowitz": [147, 179], "reingold": [147, 179], "calendr": [147, 179], "prescrib": 147, "8601": [147, 179, 186, 262, 336, 414, 468, 474, 478], "theyear": 147, "themonth": 147, "withyear": 147, "css": [147, 236, 470, 475, 478], "cascad": [147, 478], "tue": [147, 179], "wed": [147, 179, 361], "fri": [147, 205, 470, 471, 478], "formatmonthnam": [147, 478], "singular": [147, 226, 478], "customhtmlc": 147, "nowrap": 147, "formatweekday": [147, 478], "y1": [147, 425, 436, 467, 469, 478], "y2": [147, 221, 436, 467, 469, 478], "centuri": [147, 179, 361, 470, 478], "epoch": [147, 205, 239, 244, 267, 284, 336, 337, 353, 361, 414, 458, 478], "multipart": [148, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 478], "isindex": 148, "goodi": 148, "h1": [148, 231, 236, 238, 264, 415], "logdir": [148, 149], "keep_blank_valu": [148, 389], "minifieldstorag": [148, 478], "fileitem": 148, "userfil": 148, "linecount": 148, "strict_pars": [148, 389], "pdict": 148, "megabyt": 148, "rfcs": [148, 154, 190, 192, 197, 198, 199, 201, 204, 205, 301, 337, 460, 473, 478], "hole": [148, 289, 327, 464, 467, 478], "hacker": [148, 314], "exploit": [148, 266, 289, 353, 404, 423, 450, 472, 478], "gullibl": 148, "trust": [148, 264, 279, 295, 298, 301, 337, 344, 353, 389, 455, 456, 463, 464, 472, 476, 478], "dash": [148, 154, 173, 192, 201, 315, 327, 402], "0o755": 148, "0755": [148, 478], "0o644": 148, "0o666": [148, 180, 289, 292, 392], "privileg": [148, 284, 289, 333, 335, 338, 361, 400, 471, 474, 478], "everybodi": [148, 240], "cryptic": [148, 478], "yourhostnam": 148, "suspect": [148, 457, 478], "userid": [148, 265, 381, 474], "suexec": 148, "liabil": [148, 421], "excerpt": [149, 182, 476], "ea": 150, "rmff": 150, "bigendian": 150, "inclhead": 150, "jerri": 150, "morrison": [150, 472], "electron": [150, 337, 421], "art": [150, 151, 156, 189], "1985": [150, 336], "kahan": 151, "elementari": [151, 173, 379], "annex": [151, 271, 382, 430, 463], "lie": [151, 179, 238, 246, 265, 279, 340, 371, 381, 423, 431, 459, 460], "4142135623730951j": 151, "cartesian": [151, 257, 336, 463, 466, 473], "modulus": [151, 285, 340, 348, 463, 470, 476], "phi": [151, 271], "counterclockwis": [151, 379], "141592653589793": [151, 439, 470], "arc": [151, 271, 379, 463, 464, 466, 470, 478], "cosin": [151, 182, 271], "sine": [151, 182, 271], "tangent": [151, 271, 379], "rel_tol": [151, 271, 473], "1e": [151, 221, 271, 341, 343, 425, 473, 478], "abs_tol": [151, 271, 473], "curv": [151, 337, 379, 471, 478], "enlighten": 151, "ado": 151, "iserl": 151, "powel": [151, 478], "eds": 151, "clarendon": 151, "1987": [151, 154, 179, 403], "pp165": 151, "211": [151, 284, 471], "completekey": [152, 293], "banner": [152, 153, 478], "do_help": [152, 478], "do_shel": 152, "complete_foo": 152, "begidx": 152, "endidx": 152, "help_bar": 152, "help_": 152, "undocu": [152, 222, 263, 293, 357, 383, 417, 469, 471, 472, 473, 474, 475, 477, 478], "nonempti": [152, 187, 315, 340, 379, 398, 423], "complete_": 152, "displaywidth": 152, "solicit": 152, "drawn": [152, 173, 263, 289, 379, 478], "do_forward": 152, "playback": [152, 291], "do_playback": 152, "turtleshel": 152, "do_right": 152, "do_left": 152, "do_goto": 152, "do_hom": 152, "do_circl": 152, "do_posit": 152, "do_color": 152, "do_undo": 152, "do_reset": 152, "do_by": 152, "do_record": 152, "rose": [152, 257, 474, 478], "spiral": 152, "180": [152, 231, 339, 379, 470], "__console__": 153, "readfunc": 153, "exitmsg": 153, "stuf": 153, "data_encod": 154, "file_encod": 154, "transcod": [154, 402, 470], "base64_codec": 154, "rot_13": 154, "xdf": [154, 231, 300], "u266c": 154, "223": 154, "9836": 154, "xhh": [154, 430, 478], "uxxxx": [154, 430], "uxxxxxxxx": [154, 430], "d800": 154, "dfff": 154, "error_handl": [154, 409], "utf_8": [154, 478], "rescan": [154, 298], "recov": [154, 186, 209, 217, 348, 392, 410, 464, 469, 470], "firstlin": [154, 184], "huge": [154, 254, 457, 472, 478], "reposit": [154, 254], "resp": [154, 262, 284, 303, 473], "frontend": 154, "backend": [154, 173, 336, 348, 357, 385, 451], "adher": [154, 163, 241, 258, 265, 279, 429], "0x0": 154, "00ff": [154, 470, 471, 478], "charmap": 154, "fffe": 154, "ligatur": 154, "2060": [154, 244], "joiner": [154, 473, 478], "role": [154, 337, 408, 465, 470, 476, 478], "payload": [154, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 238, 247, 464, 478], "00000000": 154, "0000007f": 154, "0xxxxxxx": 154, "00000080": 154, "000007ff": 154, "110xxxxx": 154, "10xxxxxx": 154, "00000800": 154, "0000ffff": 154, "1110xxxx": 154, "00010000": 154, "0010ffff": 154, "11110xxx": 154, "invent": [154, 267, 360, 429, 460, 464], "notepad": [154, 430], "0xef": 154, "0xbb": 154, "0xbf": 154, "improb": 154, "diaeresi": 154, "quotat": [154, 344, 463, 478], "iso8859": 154, "utf16": 154, "utf32": 154, "euro": [154, 464, 465], "ebcdic": [154, 472], "pc": [154, 173, 270, 401, 417, 430, 451, 456, 463, 468, 478], "big5": [154, 461], "csbig5": 154, "big5hksc": [154, 461], "hkscs": 154, "cp037": 154, "ibm037": 154, "ibm039": 154, "cp273": [154, 472], "ibm273": 154, "csibm273": 154, "cp424": 154, "he": [154, 293, 315, 360, 430, 457, 474], "ibm424": 154, "cp437": [154, 417], "437": 154, "ibm437": 154, "cp500": 154, "ibm500": 154, "western": [154, 361], "europ": [154, 162, 361, 420, 464], "cp720": [154, 464, 470], "cp737": 154, "cp775": 154, "ibm775": 154, "baltic": 154, "cp850": 154, "850": [154, 464], "ibm850": 154, "cp852": 154, "852": 154, "ibm852": 154, "central": [154, 179, 190, 201, 283, 339, 457, 458, 459, 460, 462, 470, 478], "eastern": [154, 179, 361, 474], "cp855": 154, "855": [154, 217], "ibm855": 154, "bulgarian": 154, "byelorussian": 154, "macedonian": 154, "serbian": 154, "cp856": 154, "cp857": 154, "857": 154, "ibm857": 154, "cp858": [154, 464], "858": 154, "ibm858": 154, "cp860": 154, "860": 154, "ibm860": 154, "portugues": [154, 478], "cp861": 154, "861": [154, 292], "ibm861": 154, "iceland": [154, 462], "cp862": 154, "862": 154, "ibm862": 154, "cp863": 154, "863": 154, "ibm863": 154, "cp864": 154, "ibm864": 154, "cp865": 154, "865": 154, "ibm865": 154, "danish": 154, "cp866": 154, "866": [154, 186, 476], "ibm866": 154, "cp869": 154, "869": 154, "gr": [154, 462, 467, 468, 476, 478], "ibm869": 154, "cp874": 154, "cp875": 154, "cp932": [154, 461], "932": 154, "ms932": 154, "mskanji": 154, "kanji": 154, "cp949": [154, 461], "949": 154, "ms949": 154, "uhc": 154, "cp950": [154, 461], "950": 154, "ms950": 154, "cp1006": 154, "urdu": 154, "cp1026": 154, "ibm1026": 154, "cp1125": [154, 472], "1125": 154, "ibm1125": 154, "cp866u": 154, "ruscii": 154, "cp1140": 154, "ibm1140": 154, "cp1250": [154, 163], "1250": 154, "cp1251": 154, "1251": 154, "1252": [154, 443, 447], "cp1253": 154, "1253": 154, "cp1254": 154, "1254": [154, 315], "cp1255": 154, "1255": 154, "cp1256": 154, "1256": 154, "cp1257": 154, "1257": 154, "cp1258": 154, "1258": 154, "euc_jp": 154, "eucjp": 154, "uji": 154, "jis": [154, 461], "euc_jis_2004": 154, "jisx0213": [154, 461], "eucjis2004": 154, "euc_jisx0213": 154, "eucjisx0213": 154, "euc_kr": 154, "euckr": 154, "korean": [154, 461, 475, 478], "ksc5601": 154, "ks_c": 154, "5601": 154, "ksx1001": 154, "ks_x": 154, "gb2312": [154, 382, 461, 471], "chines": [154, 461, 478], "csiso58gb231280": 154, "euc": [154, 191, 461], "cn": 154, "euccn": 154, "eucgb2312": 154, "1980": [154, 186, 417, 478], "ir": 154, "gbk": [154, 461], "936": 154, "cp936": 154, "ms936": 154, "gb18030": [154, 461, 478], "hz": [154, 461, 471, 478], "hzgb": 154, "gb": [154, 337, 478], "2312": 154, "iso2022_jp": 154, "csiso2022jp": 154, "iso2022jp": 154, "2022": [154, 179, 191, 231, 443, 446, 461, 468, 478], "jp": [154, 191, 421, 461], "iso2022_jp_1": 154, "iso2022_jp_2": 154, "iso2022_jp_2004": 154, "2004": [154, 179, 371, 421, 461], "iso2022_jp_3": 154, "iso2022_jp_ext": 154, "iso2022_kr": 154, "csiso2022kr": 154, "iso2022kr": 154, "kr": [154, 461], "latin_1": [154, 191, 478], "cp819": 154, "iso8859_2": 154, "latin2": 154, "iso8859_3": 154, "latin3": 154, "l3": 154, "esperanto": 154, "maltes": 154, "iso8859_4": 154, "latin4": 154, "l4": 154, "iso8859_5": 154, "cyril": 154, "iso8859_6": 154, "iso8859_7": 154, "greek8": 154, "iso8859_8": 154, "iso8859_9": 154, "latin5": 154, "l5": 154, "iso8859_10": 154, "latin6": 154, "l6": [154, 471], "nordic": 154, "iso8859_11": 154, "iso8859_13": 154, "latin7": 154, "l7": 154, "iso8859_14": 154, "latin8": 154, "l8": 154, "celtic": 154, "iso8859_15": 154, "latin9": 154, "l9": 154, "iso8859_16": 154, "latin10": 154, "l10": 154, "johab": [154, 461], "cp1361": 154, "ms1361": 154, "koi8_r": 154, "koi8_t": [154, 473, 478], "tajik": [154, 473], "koi8_u": 154, "kz1048": [154, 473, 478], "kz_1048": 154, "strk1048_2002": 154, "rk1048": 154, "kazakh": [154, 473], "mac_cyril": 154, "maccyril": 154, "mac_greek": 154, "macgreek": 154, "mac_iceland": 154, "maciceland": 154, "mac_latin2": [154, 478], "maclatin2": 154, "maccentraleurop": 154, "mac_centeuro": [154, 478], "mac_roman": 154, "macroman": 154, "mac_turkish": 154, "macturkish": 154, "ptcp154": 154, "csptcp154": 154, "pt154": 154, "cp154": 154, "asian": [154, 382, 461], "shift_ji": 154, "csshiftji": 154, "shiftji": 154, "sjis": 154, "s_jis": 154, "shift_jis_2004": 154, "shiftjis2004": 154, "sjis_2004": 154, "sjis2004": 154, "shift_jisx0213": 154, "shiftjisx0213": 154, "sjisx0213": 154, "s_jisx0213": 154, "utf_32": 154, "u32": 154, "utf_32_b": 154, "32be": 154, "utf_32_l": 154, "32le": 154, "utf_16": 154, "u16": 154, "utf_16_b": 154, "16be": 154, "utf_16_l": 154, "16le": 154, "utf_7": 154, "u7": 154, "u8": 154, "cp65001": [154, 471, 478], "asymmetr": 154, "3490": [154, 460], "oem": [154, 474, 478], "cp_oemcp": [154, 474], "palmo": 154, "3492": [154, 460], "raw_unicode_escap": 154, "bewar": [154, 209, 217, 258, 279, 326, 336, 337, 427, 446, 465], "unicode_intern": [154, 471, 476, 478], "base_64": 154, "bz2_codec": [154, 472], "hex_codec": [154, 472], "quopri_codec": 154, "quotedprint": 154, "quoted_print": 154, "uu_codec": [154, 478], "zlib_codec": 154, "rot13": [154, 472, 478], "caesar": 154, "cypher": 154, "encrypt": [154, 169, 229, 244, 264, 284, 301, 331, 335, 337, 417, 457, 459, 460, 464, 470, 471, 472, 478], "idn": [154, 337, 475, 478], "5891": 154, "5895": 154, "alliancefran": [154, 460], "ais": [154, 460], "nu": [154, 460], "ace": [154, 314, 315, 460], "xn": [154, 337, 460, 475], "alliancefranais": [154, 460], "npb": [154, 460], "allowunassign": 154, "usestd3asciirul": 154, "outcom": [155, 163, 381, 383, 384, 422, 478], "subcontext": 156, "baselin": [156, 362, 367], "bach": 156, "rembrandt": 156, "gogh": 156, "opera": [156, 398, 462, 478], "carmen": 156, "584": [156, 289, 380, 397, 477, 478], "enthought": [156, 456], "codetool": 156, "multicontext": 156, "pylookup": 156, "guest": [156, 333, 478], "command_line_arg": 156, "deepchainmap": 156, "inner": [156, 165, 187, 231, 233, 251, 315, 336, 340, 379, 381, 408, 422, 424, 461, 464, 470, 471, 478], "eleph": 156, "lion": 156, "topmost": [156, 348, 462, 478], "talli": [156, 464, 470, 471], "cnt": 156, "hamlet": [156, 457], "1143": 156, "966": 156, "762": 156, "631": 156, "546": [156, 377], "514": [156, 265, 456, 460, 468, 478], "bag": [156, 196, 422, 435], "multiset": [156, 470], "gallahad": [156, 437, 466], "sausag": [156, 221, 340], "list_of_pair": 156, "knuth": [156, 182], "donald": [156, 337, 464, 472], "cc": [156, 199, 205, 257, 267, 331, 356, 451, 460, 469, 471, 478], "deck": [156, 314], "ghi": [156, 172, 263, 327, 461], "jkl": 156, "pyshel": [156, 182, 243, 315, 474, 475, 476, 478], "moving_averag": 156, "39": [156, 179, 189, 279, 289, 361, 451, 461, 467, 471, 476, 477, 478], "roundrobin": [156, 257], "delete_nth": 156, "rot": [156, 459, 478], "roll": [156, 179, 265, 336, 357, 383, 435, 462, 463, 478], "mississippi": [156, 340], "constant_factori": 156, "ran": [156, 189, 209, 344, 383, 463, 464, 469, 478], "typenam": [156, 303, 336, 463, 478], "field_nam": [156, 341], "_1": [156, 464, 466], "_3": 156, "_sourc": [156, 475, 478], "employeerecord": 156, "depart": [156, 221, 340], "paygrad": 156, "emp": 156, "employe": [156, 381, 435, 478], "companydata": 156, "partnum": 156, "inventori": [156, 177, 287], "newpric": 156, "pixel": [156, 364, 367, 371, 379, 478], "premium": 156, "000": [156, 172, 179, 182, 231, 257, 278, 304, 456, 469, 470, 471], "714": 156, "018": 156, "hardcov": 156, "isbn": [156, 364, 449], "part_numb": 156, "lru": [156, 222, 478], "k1": [156, 397], "k2": [156, 397], "od": [156, 464, 467, 470, 478], "acdeb": 156, "bacd": 156, "od1": [156, 464], "od2": [156, 464], "lastupdatedordereddict": 156, "timeboundedlru": 156, "maxag": 156, "multihitlrucach": 156, "maxrequest": 156, "cache_aft": 156, "uncached_key": 156, "request_count": 156, "cached_key": 156, "function_result": 156, "uncach": [156, 289, 470, 478], "initialdata": 156, "_collections_abc": 157, "gencoro": 157, "myvar": 157, "listbasedset": 157, "lst": [157, 293], "abcdef": [157, 172, 254, 257, 315, 464, 472], "defghi": [157, 257], "_from_iter": 157, "_hash": [157, 478], "orderedset": 157, "yiq": [158, 472], "hls": 158, "hsv": 158, "poynton": 158, "colorfaq": 158, "cambridgeincolour": 158, "htm": [158, 179, 241, 459, 460, 461, 462, 463, 464, 465], "qq": 159, "destdir": [159, 478], "strip_prefix": 159, "prepend_prefix": 159, "coexist": 159, "uncheck": [159, 427, 450, 475, 478], "source_date_epoch": [159, 307, 475, 478], "hardlink": [159, 353, 477, 478], "dupe": [159, 477], "consolid": [159, 280, 460, 471, 474, 478], "multilevel": [159, 478], "ddir": [159, 478], "rx": [159, 315], "invalidation_mod": [159, 307, 475, 478], "stripdir": [159, 477, 478], "prependdir": [159, 477, 478], "limit_sl_dest": [159, 477, 478], "hardlink_dup": [159, 477], "fullnam": [159, 246, 248, 249, 298, 418, 460], "skip_curdir": 159, "323": [162, 474], "1235": 162, "cancel_futur": [162, 477, 478], "src1": [162, 470], "dest1": [162, 470], "src2": [162, 470], "dest2": [162, 470], "src3": [162, 470], "dest3": [162, 470], "src4": 162, "dest4": [162, 470], "wait_on_b": 162, "wait_on_a": 162, "wait_on_futur": 162, "thread_name_prefix": [162, 474, 478], "initarg": [162, 279, 475], "grace": [162, 315, 329, 360, 425, 464, 470, 475, 478], "foxnew": 162, "cnn": [162, 180], "wsj": 162, "nonexist": [162, 402, 478], "subdomain": 162, "load_url": 162, "future_to_url": 162, "mp_context": [162, 279, 475, 478], "max_tasks_per_child": [162, 478], "61": [162, 340, 361, 461, 478], "start_method": 162, "112272535095293": 162, "112582705942171": 162, "115280095190773": 162, "115797848077099": 162, "1099726899285419": 162, "is_prim": 162, "sqrt_n": 162, "not_don": 162, "serveraliveinterv": 163, "compressionlevel": 163, "forwardx11": 163, "forg": 163, "hg": [163, 292, 337, 460, 464, 470, 478], "topsecret": 163, "50022": 163, "configfil": 163, "another_config": 163, "nport": 163, "48484": 163, "21212": 163, "3des": [163, 337, 474, 478], "cbc": [163, 333], "monster": [163, 359], "batchmod": 163, "14159265359": [163, 439, 441], "chorus": 163, "lumberjack": [163, 303, 376], "night": 163, "key_without_valu": 163, "harm": [163, 222, 288, 416, 470, 478], "can_values_be_as_wel": 163, "does_that_mean_anything_speci": 163, "multiline_valu": 163, "home_dir": 163, "my_dir": 163, "my_pictur": 163, "zc": 163, "buildout": [163, 470], "library_dir": 163, "system_dir": 163, "macports_dir": 163, "arthur": [163, 340, 476, 478], "nicknam": 163, "shed": 163, "last_nam": [163, 171, 315], "jackson": [163, 472], "twosh": 163, "python_dir": 163, "defaultsect": 163, "section_nam": 163, "section_proxi": 163, "dict_typ": [163, 300], "section1": 163, "key1": [163, 422, 477], "key2": [163, 422, 477], "key3": [163, 477], "value3": [163, 477], "section2": 163, "keya": 163, "valuea": 163, "keyb": 163, "valueb": 163, "keyc": 163, "valuec": 163, "section3": 163, "allow_no_valu": [163, 464], "sample_config": [163, 464], "mysqld": [163, 464], "mysql": [163, 219, 464], "old_password": 163, "acid": [163, 459, 469], "innodb": 163, "space_around_delimit": 163, "comment_prefix": 163, "inline_comment_prefix": 163, "enabled_extens": 163, "another_extens": 163, "disabled_by_com": 163, "yet_another_extens": 163, "empty_lines_in_valu": 163, "gotcha": 163, "she": 163, "default_sect": 163, "parser_inst": 163, "getdecim": 163, "unsuit": [163, 323, 408, 458, 464, 478], "anotherkey": 163, "larch": 163, "optcr": 163, "downright": 163, "counterintuit": 163, "an_int": 163, "a_bool": 163, "a_float": 163, "1415": [163, 182, 463], "evil": [163, 464, 478], "intrins": [163, 187, 295, 423, 466, 478], "fileobject": [163, 467], "cfgparser": 163, "footnot": 163, "managed_resourc": 165, "acquire_resourc": 165, "release_resourc": 165, "trap": [165, 182, 362, 459, 461, 471, 478], "get_connect": 165, "acquire_db_connect": 165, "release_db_connect": 165, "get_all_us": 165, "my_gener": 165, "enter_result": 165, "ignore_except": 165, "process_fil": 165, "file_or_path": 165, "send_http": 165, "aiohttp": 165, "clientsess": 165, "somefil": [165, 200, 226, 289, 327, 375], "someotherfil": 165, "new_target": [165, 366], "relinquish": [165, 280, 289, 360, 361], "mycontext": 165, "contextbaseclass": 165, "onto": [165, 171, 173, 187, 209, 244, 295, 303, 327, 342, 379, 381, 383, 385, 427, 439, 457, 463, 469, 478], "close_fil": 165, "need_special_resourc": 165, "acquire_special_resourc": 165, "release_special_resourc": 165, "acquisit": [165, 211, 263, 360, 470, 478], "resourcemanag": 165, "check_resource_ok": 165, "_cleanup_on_error": 165, "exc_detail": 165, "cleanup_need": 165, "perform_oper": 165, "cleanup_resourc": 165, "cb": [165, 257], "track_entry_and_exit": [165, 470], "exc_tb": [165, 329, 340], "load_widget": [165, 470], "singleus": 165, "write_to_stream": 165, "innermost": [165, 189, 310, 348, 381, 425, 472, 478], "outer_stack": 165, "inner_stack": 165, "bleed": 166, "client_addr_var": 166, "client_addr": 166, "render_goodby": 166, "8081": 166, "memo": [167, 295, 296, 426, 474, 478], "copied_list": 167, "original_list": 167, "__copy__": [167, 469, 478], "__deepcopy__": [167, 478], "constructor_ob": 168, "pickle_c": 168, "passlib": 169, "des": [169, 306], "crack": [169, 186], "salt": [169, 231, 322, 423, 450, 470, 471, 478], "sha": [169, 231, 393, 462, 463, 467, 470, 471, 474, 478], "strongest": [169, 464], "blowfish": [169, 475, 478], "weakest": 169, "method_": 169, "perturb": 169, "999_999_999": 169, "5000": [169, 182], "2_147_483_648": 169, "exposur": [169, 471], "compare_hash": 169, "cryptedpasswd": 169, "cleartext": [169, 265], "plaintext": [169, 244, 471], "4180": [171, 478], "csvfile": 171, "fmtparam": 171, "spamread": 171, "bake": [171, 315], "bean": [171, 315], "stringifi": [171, 376, 468, 478], "spamwrit": 171, "new_limit": [171, 462], "restkey": 171, "restval": 171, "first_nam": [171, 315], "clees": [171, 408, 436, 476], "extrasact": [171, 478], "putat": 171, "heurist": [171, 186, 193, 199, 221, 466, 470, 478], "recognis": [171, 209, 264, 298, 327, 336, 384, 423, 478], "quote_": 171, "passwd": [171, 219, 292, 306, 356, 383, 390, 461, 462, 463], "someiter": 171, "unixpwd": 171, "linend": 171, "cdecl": 172, "stdcall": 172, "kernel32": [172, 348, 478], "libc": [172, 253, 299, 344, 451, 462, 478], "getmodulehandlea": 172, "myownfunct": 172, "239": 172, "_stdcallfuncptr": 172, "user32": 172, "getmodulehandl": 172, "hmodul": 172, "lpcstr": 172, "lpmodulenam": 172, "getmodulehandlew": 172, "lpcwstr": 172, "yapaxi": 172, "310": 172, "rand": [172, 337], "1804289383": 172, "0x1d000000": 172, "erron": [172, 288, 379, 404, 420, 457, 472, 473, 475, 477, 478], "_bool": [172, 343, 463], "__int64": 172, "time_t": [172, 478], "140018365411392": 172, "65533": 172, "c_s": 172, "139966785747344": 172, "139966783348904": 172, "x00lo": 172, "c_buffer": 172, "beer": [172, 478], "1234": [172, 182, 255, 309, 325, 340, 373, 393, 437, 463, 467, 473, 478], "140000": [172, 341], "arm64": [172, 477, 478], "inhibit": [172, 246, 310], "_as_parameter_": 172, "200000": [172, 362], "37": [172, 241, 314, 340, 341, 377, 401, 446, 461, 464, 466, 467, 468, 475, 476, 477, 478], "000000": [172, 179, 459], "typecheck": [172, 381, 478], "1150640792": 172, "strchr": 172, "8059983": 172, "validhandl": 172, "486539264": 172, "silli": [172, 288, 385], "126": [172, 255, 377, 476], "sscanf": 172, "1400001049": 172, "upperleft": 172, "lowerright": 172, "ofs": 172, "pragma": [172, 478], "first_16": 172, "second_16": 172, "tenpointsarraytyp": 172, "artifici": [172, 408, 423, 469, 472, 478], "mystruct": [172, 279], "point_array": 172, "arr": [172, 279, 439], "pt": 172, "teninteg": 172, "c_long_array_10": 172, "oor": 172, "scene": [172, 379, 456], "lp_c_long": 172, "null_ptr": 172, "dereferenc": [172, 397, 471, 478], "c_byte_array_4": 172, "c1": [172, 340], "c2": 172, "qsort": 172, "intarray5": 172, "ia": 172, "cmpfunc": 172, "py_cmp_func": 172, "cmp_func": 172, "pythonapi": [172, 462], "0x30c00a0": 172, "struct_frozen": 172, "frozent": 172, "_pyimport_frozenbootstrap": 172, "_frozen_importlib": [172, 279, 478], "31764": [172, 478], "_frozen_importlib_extern": [172, 478], "41499": 172, "__hello__": [172, 478], "p1": [172, 257, 280, 344, 422, 461, 468, 473], "hm": 172, "temp0": 172, "temp1": 172, "short_array": 172, "dylib": [172, 478], "ldconfig": [172, 478], "objdump": 172, "ld_library_path": [172, 474, 478], "libm": [172, 451, 478], "libbz2": 172, "agl": 172, "default_mod": 172, "use_errno": [172, 463], "use_last_error": [172, 463], "winmod": [172, 476], "dumpbin": 172, "manpag": [172, 289, 333, 474, 478], "setlasterror": 172, "hijack": 172, "prefabr": 172, "dlltype": 172, "func_spec": 172, "paramflag": 172, "name_or_ordin": 172, "vtbl_index": 172, "iid": [172, 371, 478], "messageboxw": 172, "winuserapi": 172, "winapi": [172, 328, 344, 478], "hwnd": 172, "lptext": 172, "lpcaption": 172, "uint": 172, "utyp": 172, "wintyp": [172, 478], "caption": 172, "getwindowrect": 172, "lprect": 172, "obj_or_typ": 172, "init_or_s": 172, "_ctype": [172, 421, 464, 475, 478], "lasterror": [172, 463], "enlarg": [172, 478], "writeabl": [172, 221, 254, 337, 344, 478], "wparam": 172, "dword": 172, "pnext": 172, "_u": 172, "lptdesc": 172, "typedesc": 172, "lpadesc": 172, "arraydesc": 172, "hreftyp": 172, "vartyp": 172, "td": [172, 179], "vt_ptr": 172, "some_typ": 172, "facto": [173, 239, 248, 353, 389, 414], "driver": [173, 189, 208, 226, 289, 291, 333, 357, 400, 401, 411, 460, 478], "color_numb": 173, "a_": 173, "ground": 173, "cup": 173, "cud": 173, "cud1": 173, "cuu1": 173, "cuu": 173, "vpa": 173, "confin": [173, 189], "bell": [173, 174, 364, 430, 462, 478], "bstate": 173, "button5_": [173, 467, 478], "256color": [173, 478], "region": [173, 243, 274, 278, 280, 289, 315, 364, 371, 379, 435, 463, 466, 478], "fg": [173, 257, 340, 364, 371], "bg": [173, 364, 371, 379, 478], "nline": [173, 184], "ncol": 173, "deiniti": 173, "terminfo": 173, "elaps": [173, 265, 279, 289, 304, 325, 333, 360, 361, 383, 470, 478], "availmask": 173, "oldmask": 173, "pminrow": 173, "pmincol": 173, "sminrow": 173, "smincol": 173, "smaxrow": 173, "smaxcol": 173, "vertic": [173, 174, 293, 340, 341, 359, 364, 367, 369, 370, 371, 379, 422, 429, 430], "intr": 173, "susp": 173, "tput": 173, "putchar": 173, "capnam": 173, "4h": [173, 343], "breakout": 173, "newterm": 173, "subwindow": 173, "20190511": 173, "stuck": 173, "tl": 173, "bl": 173, "vertch": 173, "horch": 173, "repaint": 173, "degrad": [173, 470, 478], "wrefresh": 173, "movement": [173, 379, 463, 470, 478], "new_i": 173, "new_x": 173, "destwin": 173, "dminrow": 173, "dmincol": 173, "dmaxrow": 173, "dmaxcol": 173, "beg": 173, "rendit": 173, "dim": 173, "key_": 173, "keycap": 173, "arrow": [173, 243, 293, 370, 371, 379], "redo": [173, 243, 478], "key_f1": 173, "key_f2": 173, "key_f3": 173, "key_f4": 173, "twelv": [173, 371], "vt100": 173, "crude": 173, "acs": 173, "solid": [173, 471, 472], "bullet": [173, 295], "stippl": 173, "lantern": 173, "crossov": 173, "pound": [173, 186], "sterl": 173, "greenish": 173, "purplish": 173, "bbedit": [173, 454], "framemak": 173, "uli": 173, "ulx": 173, "lri": 173, "lrx": 173, "land": [173, 478], "enquiri": 174, "xon": 174, "xoff": 174, "mnemon": [174, 264, 337, 371, 459], "teleprint": 174, "0x1f": [174, 467, 469], "0x7f": [174, 340], "thirti": [174, 312], "557": [177, 377, 475, 478], "inventoryitem": 177, "unit_pric": 177, "quantity_on_hand": 177, "total_cost": 177, "unsafe_hash": [177, 381, 478], "match_arg": [177, 381, 478], "weakref_slot": [177, 478], "dunder": [177, 430, 476, 478], "nonetheless": [177, 244], "__weakref__": [177, 397, 423, 478], "contribut": [177, 226, 231, 304, 315, 392, 421, 427, 457, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "class_or_inst": 177, "initvar": [177, 478], "dict_factori": [177, 336, 478], "tuple_factori": 177, "cls_name": [177, 207], "add_on": 177, "forewarn": 177, "is_dataclass_inst": 177, "databasetyp": 177, "my_databas": 177, "intconversiondescriptor": 177, "_default": 177, "zone": [179, 205, 255, 333, 361, 420, 421, 451, 460, 462, 464, 477, 478], "categor": [179, 288, 315, 395, 425], "polit": [179, 457], "metr": 179, "mile": 179, "est": [179, 361, 470, 474], "edt": [179, 361, 471, 474], "customiz": [179, 364, 464, 478], "29000": [179, 478], "29156": 179, "tiebreak": 179, "t1": [179, 182, 257, 381, 394], "t2": [179, 182, 257, 381, 394], "t3": [179, 182, 288, 381], "quotient": [179, 182, 271, 304, 340, 425, 444], "uuuuuu": 179, "68400": 179, "delta1": 179, "delta2": 179, "270": [179, 379], "accuraci": [179, 221, 257, 271, 304, 362, 439, 461, 469, 478], "another_year": 179, "84": [179, 339, 474, 476, 478], "31536000": 179, "ten_year": 179, "3650": 179, "nine_year": 179, "3285": 179, "three_year": 179, "1095": [179, 284], "2038": [179, 361, 478], "date_str": 179, "yyyi": [179, 244], "ddd": 179, "2019": [179, 339, 450, 476, 478], "20191204": 179, "2021": [179, 463, 467, 478], "w01": 179, "dd": [179, 244, 257, 288], "date2": 179, "date1": 179, "comparand": 179, "yday": 179, "isocalendard": 179, "2007": [179, 364, 421, 463, 478], "my_birthday": 179, "time_to_birthday": 179, "730920": 179, "730920th": 179, "70th": 179, "ic": [179, 343, 463], "tz": [179, 357, 361, 420, 469, 478], "gettimeofday": [179, 361, 478], "formula": [179, 226, 340, 478], "2011": [179, 199, 337, 408, 421, 423, 450, 470], "20111104": 179, "04t00": 179, "23z": 179, "20111104t000523": 179, "2t00": 179, "283000": 179, "14400": 179, "datetime2": 179, "datetime1": 179, "astz": 179, "dt": [179, 205, 414, 420, 477], "magnitud": [179, 182, 258, 271, 340, 341, 404, 439, 457, 471], "tm_isdst": [179, 361], "spill": 179, "timespec": [179, 474, 478], "ddthh": 179, "ffffff": [179, 379], "hh": [179, 244, 361, 430], "132263": 179, "18t15": 179, "27t00": 179, "000100": 179, "25t00": 179, "01t12": 179, "79043": 179, "79060": 179, "tt": 179, "325": [179, 182, 462], "30pm": 179, "kabul": 179, "afghanistan": 179, "1945": 179, "thereaft": [179, 243, 262, 390], "kabultz": 179, "utc_move_d": 179, "1944": 179, "pep495": 179, "tz1": 179, "dt1": 179, "dt2": 179, "dt3": 179, "midnight": [179, 265, 463, 470, 473], "obscur": [179, 189, 384, 463, 472, 473, 475, 478], "13936": [179, 473, 478], "time_str": 179, "t04": 179, "t042301": 179, "000384": 179, "01z": 179, "123456": 179, "geograph": 179, "dston": 179, "dstoff": 179, "america": [179, 420, 421, 464, 477], "york": 179, "repli": [179, 199, 241, 267, 279, 284, 331, 390, 478], "straddl": 179, "dtoff": 179, "dtdst": 179, "tzinfo_exampl": 179, "_time": 179, "stdoffset": 179, "dstoffset": 179, "dstdiff": 179, "localtimezon": 179, "dst_diff": 179, "_isdst": 179, "first_sunday_on_or_aft": 179, "days_to_go": 179, "olson": [179, 478], "pytz": 179, "twinsun": 179, "2am": 179, "dststart_2007": 179, "dstend_2007": 179, "dststart_1987_2006": 179, "dstend_1987_2006": 179, "1967": [179, 379, 464], "dststart_1967_1986": 179, "dstend_1967_1986": 179, "us_dst_rang": 179, "dststart": 179, "dstend": 179, "1966": 179, "ustimezon": 179, "reprnam": 179, "stdname": [179, 304], "dstname": [179, 328], "gap": [179, 265, 267, 470, 478], "std_time": 179, "dst_time": 179, "cst": 179, "cdt": 179, "mountain": 179, "mst": 179, "mdt": 179, "pacif": [179, 420], "pst": [179, 420, 477], "pdt": [179, 420, 477], "0500": [179, 205], "u0": [179, 474], "mimic": [179, 251, 263, 343, 376, 379, 464, 466, 478], "bring": [179, 243, 257, 341, 370, 384, 472, 473, 476, 477, 478], "tzdata": [179, 420, 477, 478], "globe": 179, "civil": 179, "59pm": 179, "en_us": [179, 473, 478], "mo": [179, 226, 315, 340, 460, 474, 476, 478], "de_d": [179, 262, 473], "sonntag": 179, "montag": 179, "samstag": 179, "dez": 179, "januar": 179, "februar": 179, "dezemb": 179, "0002": 179, "2014": [179, 233, 337, 463, 464, 472, 478], "9998": [179, 474, 478], "000001": 179, "hhmm": [179, 244, 361], "0400": [179, 471], "1030": 179, "063415": 179, "030712": 179, "345216": 179, "002": [179, 304, 340], "1988": [179, 186, 353, 463], "di": [179, 462], "c89": [179, 463], "01t00": 179, "0330": 179, "japan": [179, 262], "jst": 179, "gent": 179, "oracl": [180, 336, 462, 471, 478], "unread": [180, 295, 390, 466, 473, 478], "prevail": [180, 425, 478], "cabl": 180, "open_flag": 180, "unwritten": [180, 478], "pag": 180, "heavili": [180, 246, 331, 422, 458, 474, 475], "bottleneck": [181, 222, 466], "paramount": 182, "school": [182, 343, 460], "3000000000000003": 182, "5511151231257827e": 182, "017": 182, "customari": [182, 359, 421, 450], "monetari": [182, 262, 462, 475, 478], "schoolbook": 182, "multiplicand": 182, "5600": 182, "prec": [182, 447, 461, 462, 463], "142857": [182, 189], "1428571428571428571428571429": [182, 461], "modest": [182, 478], "prejudic": 182, "unround": 182, "coeffici": [182, 257, 271, 339, 340, 341, 460, 472, 478], "differenti": [182, 316, 390, 470, 471, 474, 477, 478], "sticki": [182, 338, 353, 371], "emin": [182, 471], "emax": [182, 471], "140000000000000124344978758017532527446746826171875": 182, "4142135623730951": 182, "414213562373095048801688724": 182, "1415926535": 182, "7182818285": 182, "85987": 182, "85988": 182, "1e9999999999999999999": 182, "circus": [182, 221, 434], "87": [182, 244, 339, 344], "5058": 182, "718281828459045235360287471": [182, 463], "302585092994045684017991455": 182, "myothercontext": 182, "142857142857142857142857142857142857142857142857142857142857": 182, "142857143": [182, 461], "143": [182, 244, 377, 379, 459], "355": [182, 217], "113": [182, 217, 444], "14159292": 182, "112": [182, 339, 377, 467, 476, 477, 478], "snan": [182, 464], "devan": 182, "gar": [182, 292], "fullwidth": 182, "uff10": 182, "uff19": 182, "100000000000000088817841970012523233890533447265625": [182, 466, 470], "00000": 182, "321e": 182, "157": [182, 474], "decimaltupl": 182, "unequ": [182, 340, 423, 425, 461, 462, 465, 471, 478], "unaffect": [182, 328, 361, 423, 431, 450, 460, 463, 474, 478], "compli": [182, 258, 267, 310, 421, 463, 478], "561702493119680037517373933e": 182, "139": [182, 377, 459], "0x1": [182, 340, 439, 463, 466, 467, 469], "999999999999ap": 182, "1000000000000000055511151231257827021181583404541015625": [182, 439, 464], "fuse": 182, "closest": [182, 217, 221, 271, 422, 463, 464, 469, 478], "321000e": 182, "41421356": 182, "123e": 182, "23e": 182, "calculate_someth": 182, "halt": [182, 208, 288, 292, 383, 472], "02e": 182, "weaker": [182, 458], "999": [182, 280], "23e999": 182, "23000e": 182, "4445": 182, "0023": 182, "recount": 182, "qnan": 182, "msd": 182, "scientif": [182, 341, 449, 456, 463], "425000000": [182, 471], "999999999999999999": [182, 471], "849999999": 182, "1999999999999999997": 182, "inward": 182, "outward": 182, "stricter": [182, 384, 457, 458, 462, 471, 473, 475, 478], "amplifi": 182, "breakdown": 182, "seminumer": 182, "11111113": 182, "11111111": [182, 340], "51111111": 182, "5111111": 182, "20000": [182, 362], "0000003": 182, "0060000": 182, "affin": [182, 478], "indetermin": [182, 348, 371, 395, 403], "854": [182, 354], "0e": 182, "1000026": 182, "interf": [182, 279, 362, 425, 472], "applicationwid": 182, "moneyfmt": 182, "curr": 182, "dp": [182, 478], "trailneg": 182, "money": [182, 344, 421], "1234567": [182, 217, 447, 466], "8901": [182, 477, 478], "568": 182, "123456789": 182, "141592653589793238462643383": 182, "na": [182, 322, 458, 467, 468, 469, 476, 477, 478], "da": [182, 257, 315], "389056098930650227230427461": 182, "38905609893": 182, "0j": [182, 221, 340, 414, 478], "taylor": [182, 463, 478], "8775825618903727161162815826": 182, "87758256189": 182, "4794255386042030002732879352": 182, "479425538604": 182, "twoplac": 182, "214": [182, 304], "72": [182, 243, 257, 339, 379, 461, 462, 478], "105": [182, 339], "4314": 182, "2e2": 182, "2e": [182, 478], "philosophi": [182, 192, 465], "1416": [182, 437], "00005": 182, "remove_expon": 182, "5e": [182, 343], "141592653589793115997963468544185161590576171875": 182, "spurious": [182, 329, 466, 478], "anomali": 182, "ill": [182, 300, 470, 475, 478], "104": [182, 339, 470, 476, 477], "23456789": 182, "2345678": 182, "2345": 182, "pypy3": 182, "karatsuba": [182, 460], "bignum": [182, 340, 471], "904625697166532776746648320380374280103671755200316906558262375061821325312": 182, "overalloc": [182, 340, 476, 478], "8gb": 182, "500mb": 182, "maxdigit": [182, 348], "524288112": 182, "tighter": [182, 422, 461, 471], "readm": [184, 219, 243, 254, 292, 451, 455, 456, 457, 470, 474, 475, 478], "269": [184, 478], "unclos": [184, 243, 336, 470, 474, 478], "rst": [184, 292, 451, 455, 475, 478], "18748": [184, 476, 478], "modal": [185, 365, 368], "initialdir": 185, "initialfil": 185, "defaultextens": 185, "mustexist": 185, "dir_or_fil": 185, "ratcliff": 186, "obershelp": 186, "gestalt": 186, "longest": [186, 255, 257, 430, 459, 462, 473], "cubic": 186, "autojunk": 186, "intralin": 186, "intra": 186, "wrapcolumn": 186, "linejunk": 186, "charjunk": 186, "fromlin": 186, "tolin": 186, "fromdesc": 186, "todesc": 186, "numlin": 186, "hyperlink": [186, 478], "fromfiled": 186, "tofiled": 186, "lineterm": 186, "eggi": 186, "hamster": 186, "cutoff": [186, 478], "appel": 186, "ape": 186, "peach": 186, "puppi": 186, "pineappl": 186, "constitut": [186, 255, 327, 389, 421, 478], "nois": [186, 288, 289, 339, 478], "ntwo": 186, "nthree": 186, "ntree": 186, "nemu": 186, "emu": 186, "dfunc": 186, "metzen": 186, "dr": [186, 219, 359, 470], "dobb": 186, "journal": 186, "isjunk": 186, "synch": 186, "bjunk": [186, 472], "bpopular": [186, 472], "b2j": 186, "alo": 186, "ahi": 186, "blo": 186, "bhi": 186, "abxcd": 186, "j1": [186, 455, 478], "j2": 186, "qabxcd": 186, "abycdf": 186, "cluster": [186, 221, 333, 450, 463], "tide": [186, 370], "diet": 186, "bcde": [186, 257, 464], "volatil": [186, 280, 478], "text1": 186, "text2": 186, "flat": [186, 197, 200, 364, 371, 407], "interlin": 186, "file_mtim": 186, "fromdat": 186, "todat": 186, "tf": [186, 470], "file1": [186, 464], "file2": [186, 464], "r1": [186, 238, 379, 389], "r2": [186, 238, 379, 389], "ndiff_output": 186, "file1_or_file2": 186, "sed": [186, 478], "gripe": 186, "spray": 186, "fcompar": 186, "f1name": 186, "f2name": 186, "qr": 186, "noisi": [186, 288, 478], "qseen": 186, "rseen": 186, "whichfil": 186, "vms": [187, 288, 471, 472], "accompani": [187, 267, 331, 333, 423, 458, 470, 478], "show_cach": [187, 478], "alist": [187, 300, 423], "load_glob": [187, 476, 478], "load_fast": [187, 472, 478], "current_offset": [187, 472], "analys": 187, "lasti": [187, 478], "co_lin": [187, 467, 478], "co_firstlineno": [187, 251, 423, 478], "co_lnotab": [187, 251, 423, 467, 469, 474, 478], "oparg": [187, 469, 478], "nop": [187, 354, 436, 478], "pop_top": [187, 478], "end_for": 187, "quicken": [187, 478], "unary_neg": 187, "unary_not": 187, "unary_invert": 187, "get_it": 187, "get_yield_from_it": [187, 478], "binary_op": [187, 468, 478], "rhs": [187, 471], "lhs": 187, "binary_subscr": [187, 478], "store_subscr": [187, 478], "delete_subscr": 187, "binary_slic": [187, 478], "store_slic": [187, 478], "get_await": [187, 478], "get_ait": 187, "get_anext": 187, "end_async_for": [187, 476, 478], "cleanup_throw": 187, "before_async_with": 187, "set_add": 187, "list_append": [187, 461], "map_add": [187, 476], "return_const": [187, 478], "consti": 187, "co_const": [187, 251, 423, 478], "yield_valu": [187, 478], "setup_annot": [187, 474], "pop_except": 187, "push_exc_info": [187, 468], "check_exc_match": [187, 468, 478], "check_eg_match": [187, 468, 478], "with_except_start": [187, 478], "context_manag": 187, "load_assertion_error": [187, 477], "load_build_class": 187, "__build_class__": [187, 445, 478], "before_with": [187, 468], "get_len": 187, "match_map": 187, "match_sequ": 187, "match_key": [187, 468], "store_nam": [187, 337], "namei": 187, "co_nam": [187, 251, 423, 473, 478], "store_fast": [187, 478], "store_glob": 187, "delete_nam": 187, "unpack_sequ": [187, 478], "unpack_ex": 187, "leftov": [187, 288], "extended_arg": [187, 478], "store_attr": [187, 478], "delete_attr": 187, "delete_glob": 187, "load_const": [187, 470, 472, 478], "load_nam": [187, 470], "load_loc": [187, 469, 478], "load_from_dict_or_deref": [187, 469], "load_from_dict_or_glob": [187, 469], "build_tupl": [187, 478], "build_list": [187, 478], "build_set": [187, 478], "build_map": [187, 478], "build_const_key_map": [187, 474, 478], "build_str": [187, 474, 478], "list_extend": [187, 478], "set_upd": [187, 478], "dict_upd": [187, 478], "dict_merg": [187, 478], "load_attr": [187, 467, 469, 478], "load_super_attr": [187, 469, 478], "compare_op": [187, 470, 477, 478], "is_op": [187, 477, 478], "contains_op": [187, 477, 478], "import_nam": [187, 426], "import_from": [187, 426], "jump_forward": [187, 478], "jump_backward": [187, 468, 478], "jump_backward_no_interrupt": [187, 468, 478], "pop_jump_if_tru": [187, 468, 478], "pop_jump_if_fals": [187, 468, 470, 478], "pop_jump_if_not_non": [187, 478], "pop_jump_if_non": [187, 478], "for_it": [187, 478], "var_num": 187, "load_fast_check": [187, 478], "load_fast_and_clear": [187, 469], "delete_fast": 187, "make_cel": [187, 468, 478], "load_closur": [187, 478], "co_fastlocalnam": [187, 478], "load_deref": 187, "load_classderef": [187, 469, 472], "store_deref": [187, 478], "delete_deref": 187, "copy_free_var": [187, 468, 478], "raise_vararg": 187, "kw_name": [187, 468, 478], "ascend": [187, 304, 340], "call_function_ex": [187, 474, 478], "push_nul": [187, 468, 478], "load_method": [187, 469, 475, 478], "make_funct": [187, 467, 474, 478], "0x02": [187, 474], "0x08": [187, 423], "build_slic": 187, "format_valu": [187, 474, 478], "fmt_spec": 187, "match_class": [187, 468], "return_gener": [187, 468, 478], "have_argu": [187, 469], "call_intrinsic_1": 187, "intrinsic_1_invalid": 187, "intrinsic_print": 187, "intrinsic_import_star": 187, "intrinsic_stopiteration_error": 187, "intrinsic_async_gen_wrap": 187, "aync": 187, "intrinsic_unary_posit": 187, "intrinsic_list_to_tupl": 187, "intrinsic_typevar": 187, "intrinsic_paramspec": 187, "intrinsic_typevartupl": 187, "intrinsic_subscript_gener": 187, "intrinsic_typealia": 187, "call_intrinsic_2": [187, 478], "intrinsic_2_invalid": 187, "intrinsic_prep_reraise_star": 187, "intrinsic_typevar_with_bound": 187, "intrinsic_typevar_with_constraint": 187, "intrinsic_set_function_type_param": 187, "setup_fin": [187, 468, 478], "setup_cleanup": 187, "setup_with": [187, 468], "pop_block": [187, 468], "jump_no_interrupt": [187, 478], "undirect": 187, "min_pseudo_opcod": 187, "expositori": 189, "265252859812191058636308480000000": 189, "ridicul": 189, "1e100": [189, 271, 425, 430], "1e300": 189, "test_doctest": [189, 478], "giant": 189, "720": [189, 470, 476], "__test__": 189, "blanklin": [189, 461], "trial": [189, 314, 339, 362, 460], "crumb": 189, "your_dict": 189, "rapid": [189, 304, 476, 478], "verbatim": [189, 344, 404], "ndetail": 189, "transcript": 189, "oop": [189, 438], "my_flag": 189, "directive_opt": 189, "on_or_off": 189, "directive_option_nam": 189, "hermion": 189, "harri": [189, 462], "7948648": 189, "0x00ac18f0": 189, "14285714285714285": [189, 441], "142857142857": 189, "contriv": [189, 478], "utter": [189, 465], "module_rel": 189, "optionflag": [189, 357], "extraglob": 189, "raise_on_error": 189, "failure_count": [189, 357], "test_count": [189, 357], "slate": [189, 353, 427, 472, 473, 478], "mortem": [189, 293, 348, 435, 469], "exclude_empti": 189, "nonam": [189, 417], "compileflag": 189, "systemat": [189, 478], "my_module_with_doctest": 189, "tear": [189, 383], "test_find": 189, "doctestcas": 189, "docfilecas": 189, "runtest": [189, 383], "revolv": 189, "testrunn": [189, 383], "clear_glob": 189, "report_": 189, "cont": 189, "sketch": [189, 239, 436, 462, 463], "grown": [189, 324], "invalu": [189, 315], "amaz": [189, 459], "skimp": 189, "prose": 189, "attitud": 189, "coher": [189, 222], "narrat": 189, "blur": [189, 257], "_regrtest_top": 189, "2821": 190, "5322": [190, 192, 195, 197, 199, 201, 203, 204, 331], "6532": [190, 201, 203, 204, 473, 475, 478], "2046": [190, 193, 198], "2047": [190, 198, 199, 204, 205, 231, 470], "2183": [190, 192, 201, 478], "2231": [190, 192, 198, 201, 205], "subcompon": 190, "forego": [190, 421], "promot": [190, 421, 463, 478], "offic": [190, 421], "default_charset": 191, "outright": 191, "qp": 191, "7bit": [191, 193, 194, 197, 199, 204, 267, 470, 471, 478], "maxlength": [191, 279], "header_enc": 191, "body_enc": 191, "codecnam": 191, "rfc822": [192, 193, 200, 201, 202, 203, 244, 459, 461], "envelop": [192, 197, 201, 203, 244, 267, 331, 478], "from_": [192, 267, 371, 478], "unixfrom": [192, 197, 201, 472, 478], "maxheaderlen": [192, 197, 201, 472], "invalidbase64paddingdefect": [192, 195], "invalidbase64charactersdefect": [192, 195], "8bit": [192, 193, 194, 197, 198, 199, 203, 204, 470, 471], "2822": [192, 198, 205, 238, 241, 267, 361, 446, 459], "contravent": 192, "mymessag": [192, 201], "extant": [192, 201, 478], "roolz": [192, 201], "failobj": [192, 201], "_param": [192, 201, 202, 402], "disposit": [192, 193, 199, 201, 244, 289, 329, 395, 402, 473], "bud": [192, 201, 402], "gif": [192, 201, 202, 227, 245, 364, 379, 402, 462, 478], "fu": [192, 201], "baller": [192, 201], "ppt": [192, 201], "dfballer": 192, "subpart": [192, 194, 195, 197, 200, 201, 202, 203], "rawparam": 192, "requot": [192, 201], "make_": 192, "add_": [192, 193], "deliveri": [192, 196, 201, 203, 267, 289, 329, 333, 478], "armor": [192, 201], "typ": [193, 244, 381, 469, 478], "typekey": 193, "cid": [193, 196, 333], "headernam": 193, "headervalu": 193, "_subtyp": [194, 202], "_charset": [194, 202, 226, 478], "unprint": [194, 478], "drawback": [194, 248, 288, 475], "add_payload": 195, "messagedefect": 195, "noboundaryinmultipartdefect": 195, "startboundarynotfounddefect": 195, "closeboundarynotfounddefect": 195, "firstheaderlineiscontinuationdefect": 195, "misplacedenvelopeheaderdefect": 195, "missingheaderbodyseparatordefect": 195, "malformedheaderdefect": 195, "multipartinvariantviolationdefect": [195, 203, 478], "invalidbase64lengthdefect": 195, "invaliddatedefect": 195, "textfil": 196, "messagefil": 196, "uncommon": [196, 246, 439, 462, 478], "someone_els": 196, "reunion": 196, "pngfile": 196, "img_data": 196, "png": [196, 202, 236, 245, 364], "msgfile": 196, "sanit": [196, 451, 478], "03d": [196, 263, 340], "ayon": 196, "asperg": 196, "pour": 196, "jeuner": 196, "pew": 196, "pepe": 196, "penelop": 196, "pussycat": 196, "fabrett": 196, "salut": 196, "cela": 196, "ressembl": 196, "yumm": 196, "roast": 196, "asparagus": 196, "epicuri": 196, "203718": 196, "asparagus_cid": 196, "href": [196, 234, 236, 238, 408, 464], "img": [196, 236], "peel": 196, "jpg": [196, 254, 290, 414, 447, 462], "jpeg": [196, 202, 245, 364, 441, 463, 478], "magic_html_pars": 196, "html_text": 196, "partfil": 196, "preview": [196, 253, 478], "useless": [196, 384, 406, 476, 478], "preferencelist": [196, 201], "ans": 196, "richest": 196, "matthew": [196, 468, 472, 478], "dixon": 196, "cowl": 196, "necess": [197, 478], "smime": 197, "outfp": 197, "refold": [197, 204, 471], "rewrap": [197, 222], "manheaderlen": 197, "craft": [197, 295, 427, 470, 478], "amessag": 197, "transfer_encod": 197, "part_info": 197, "_mangle_from_": 197, "worldwid": [198, 231, 421], "slew": 198, "xf6stal": 198, "f6stal": 198, "maxlinelen": 198, "header_nam": [198, 390, 402], "continuation_w": 198, "straight": [198, 202, 221, 279, 348, 383, 397, 406, 439, 457, 465, 476, 478], "splitchar": 198, "decoded_str": 198, "decoded_seq": 198, "headerdefect": 199, "_myattr": 199, "myattr": 199, "unstructur": 199, "wild": [199, 431, 457, 478], "uniqueunstructuredhead": 199, "supplement": [199, 209, 289, 456, 463, 472, 478], "base_class": 199, "default_class": 199, "use_default_map": 199, "uniquedatehead": 199, "resent": [199, 205, 267, 331], "uniquesingleaddresshead": 199, "uniqueaddresshead": 199, "bcc": [199, 331], "contenttransferencodinghead": 199, "messageidhead": 199, "5321": [199, 471], "include_default": 200, "6531": [201, 204, 331, 473, 478], "ordinarili": [202, 327], "dice": 202, "_maintyp": 202, "nonmultipart": [202, 478], "_subpart": 202, "_data": [202, 222], "_encod": 202, "_audiodata": 202, "_imagedata": 202, "tiff": [202, 245, 364, 462], "pbm": [202, 245], "pgm": [202, 245, 364], "ppm": [202, 245, 364, 370], "rast": [202, 245], "xbm": [202, 245, 364, 370], "bmp": [202, 243, 245, 364, 471, 472, 475, 476, 478], "webp": [202, 245, 364, 473, 478], "exr": [202, 245], "_msg": 202, "_text": 202, "cloth": 203, "conduc": 203, "_factori": 203, "stitch": 203, "fed": [203, 231, 279, 310, 408, 462], "_class": 203, "headerson": [203, 478], "mybyt": 203, "edness": 203, "dispar": 204, "settabl": [204, 243, 395, 457, 459, 478], "mymsg": [204, 472], "compat_smtp": 204, "compat_strict": 204, "compat_strict_smtp": 204, "commut": 204, "policy100": 204, "policy80": 204, "apolici": 204, "78": [204, 280, 471, 478], "disciplin": 204, "sourcelin": 204, "unfold": 204, "stype": 204, "rejoin": 204, "refold_head": 204, "traffic": [204, 333, 337, 459, 470, 478], "somepolici": 204, "isdst": [205, 469, 478], "idstr": 205, "strengthen": [205, 478], "constitu": [205, 247, 405], "realnam": [205, 478], "email_address": 205, "fieldvalu": 205, "tos": [205, 467, 478], "ccs": [205, 337], "resent_to": 205, "resent_cc": 205, "all_recipi": 205, "mailer": 205, "greenwich": [205, 361], "timev": [205, 478], "usegmt": 205, "fallback_charset": 205, "uninstal": [206, 210, 277, 377, 448, 456, 472, 478], "rational": [206, 209, 231, 289, 324, 325, 329, 333, 353, 361, 397, 423, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 472, 473, 474, 476, 478], "pipx": [206, 464, 472], "altinstal": [206, 451, 455, 464, 470, 472], "default_pip": 206, "nomenclatur": [207, 348], "some_var": 207, "powersofthre": 207, "otherstyl": 207, "something_els": 207, "crimson": 207, "neon": 207, "0x18": 207, "strictflag": 207, "0b0": 207, "10100": 207, "00111": 207, "conformflag": 207, "ejectflag": 207, "keepflag": 207, "myintenum": 207, "typewrit": 208, "csi": 208, "anod": 208, "advertis": [208, 284, 331, 337, 421, 463, 472, 473, 476, 478], "srmount": 208, "multihop": 208, "rfs": 208, "stale": [208, 246, 472, 478], "nfs": [208, 289, 478], "xenix": 208, "inappropri": [209, 334, 342, 423, 478], "new_exc": 209, "original_exc": 209, "3134": [209, 465, 478], "someexcept": [209, 383, 465], "rescu": 209, "unqualifi": [209, 344, 435, 472, 478], "perror": 209, "abandon": [209, 364, 410, 470], "upcom": [209, 222, 321, 478], "dubious": [209, 395, 478], "mygroup": [209, 337], "eg": [209, 239, 244, 289, 337, 422, 478], "apport": 210, "sigaltstack": [210, 478], "catastroph": [210, 470, 478], "all_thread": 210, "watchdog": 210, "0x00007fb899f39700": [210, 471], "f_add_seal": 211, "f_get_seal": 211, "f_seal_": 211, "f_getpath": [211, 478], "f_ofd_getlk": [211, 477, 478], "f_ofd_setlk": [211, 477, 478], "f_ofd_setlkw": [211, 477, 478], "f_getpipe_sz": [211, 478], "f_setpipe_sz": [211, 478], "f_dup2fd": [211, 468, 478], "f_dup2fd_cloexec": [211, 468, 478], "fd_cloexec": [211, 468], "ficlon": [211, 478], "ficlonerang": [211, 478], "reflink": [211, 289], "btrfs": [211, 289], "ocfs2": 211, "xfs": [211, 289], "mutate_flag": 211, "simplif": [211, 478], "13341": 211, "tiocgpgrp": 211, "lock_un": 211, "lock_sh": 211, "lock_ex": 211, "lock_nb": 211, "svr4": 211, "f_setfl": 211, "lockdata": 211, "hhllhh": 211, "f_wrlck": 211, "f_setlkw": 211, "trade": [212, 288, 340, 421], "dir1": 212, "dir2": 212, "mydircmp": 212, "print_diff_fil": 212, "dcmp": 212, "sub_dcmp": 212, "openhook": [214, 462, 478], "inplac": [214, 478], "bak": 214, "fi": [214, 221], "reobj": 216, "other_fract": 217, "414213": 217, "1414213": 217, "125": [217, 257, 441, 444, 463], "7e": 217, "2476979795053773": [217, 470], "2251799813685248": [217, 470], "flt": 217, "max_denomin": 217, "1415926535897932": 217, "4503599627370497": 217, "9007199254740992": 217, "greatest": [217, 271, 340], "ndigit": [217, 221, 423, 439, 478], "40g": 217, "1428571428571428571428571428571428571429": 217, "1_234_567": 217, "141593e": 217, "old_pric": 217, "new_pric": 217, "499": [217, 219, 237, 284], "tower": [217, 379, 463, 465, 478], "959": 219, "2640": [219, 477, 478], "1176": 219, "1063": 219, "sr": 219, "226": [219, 237], "221": 219, "acct": 219, "source_address": [219, 238, 331, 333, 464, 470, 471], "ftp1": [219, 470], "proftpd": [219, 470], "154": [219, 280, 377, 461, 470], "cento": [219, 468, 470, 475, 478], "fedora": [219, 348, 451, 455, 467, 470, 477, 478], "4217": 219, "keyfil": [219, 244, 265, 277, 301, 331, 337, 457, 469, 474, 478], "certfil": [219, 244, 301, 331, 337, 457, 469, 474, 478], "ftps": 219, "pureftpd": 219, "6jack": 219, "antilink": 219, "blogbench": 219, "bsdcam": 219, "clockspe": 219, "djbdns": 219, "jedi": 219, "eacceler": 219, "favicon": 219, "ico": [219, 478], "francoton": 219, "fugu": 219, "libpuzzl": 219, "metalog": 219, "minidentd": 219, "udf": [219, 478], "php": [219, 414, 457, 459], "jenkin": [219, 383], "skein": [219, 231], "webdav": [219, 237], "phpaudit": 219, "phpbench": 219, "pincast": 219, "ping": [219, 457, 458, 459, 462], "posto": 219, "public_key": 219, "ftpd": 219, "qscan": 219, "qtc": 219, "shared": 219, "skycach": 219, "ucarp": 219, "stor": 219, "eprt": 219, "passiv": [219, 251, 456, 458], "epsv": 219, "pasv": [219, 478], "3659": 219, "fromnam": 219, "tonam": 219, "nat": [219, 333, 471], "async_iter": 221, "0b11": 221, "0b1010": [221, 465], "0b1110": 221, "1110": 221, "pythonbreakpoint": [221, 348, 450, 475], "dont_inherit": [221, 472], "pycf_": 221, "__initializing__": 221, "_clearcach": 221, "perimet": 221, "season": 221, "summer": [221, 361, 462, 463], "floatvalu": 221, "digitpart": [221, 430], "floatnumb": [221, 425, 430], "003": [221, 423, 441, 450], "1e6": 221, "0x2a": [221, 341], "010": [221, 257, 357], "classinfo": 221, "mydata": [221, 360, 406, 447, 470], "process_block": 221, "iterat": 221, "keyfunc": [221, 257], "0o70": 221, "0o12": 221, "nnn": [221, 236, 390], "untransl": [221, 254], "somedir": 221, "spamspam": 221, "3j": [221, 285, 464], "inv_bas": 221, "forcibl": [221, 471, 472], "_x": [221, 255, 463, 474], "_voltag": 221, "salari": [221, 340, 435], "argn": 221, "regular_funct": 221, "summat": [221, 271, 439, 469, 478], "object_or_typ": 221, "type2": [221, 381], "spice": 221, "transpos": [221, 257, 437, 461], "fo": [221, 224, 459], "manifest": [221, 357, 464, 478], "x2": [221, 425, 436, 467, 469, 478], "attain": 221, "till": [221, 279, 304, 337, 354, 477, 478], "saus": 221, "_temp": 221, "pythoncaseok": [221, 450, 458, 477, 478], "user_funct": 222, "evict": 222, "3628800": 222, "479001600": 222, "sequence_of_numb": [222, 476], "unaccept": [222, 295, 333, 408, 431], "count_vowel": 222, "vowel": 222, "aeiouaeiou": 222, "cache_paramet": [222, 478], "cache_info": [222, 470], "currsiz": [222, 470], "cache_clear": [222, 470], "predictor": 222, "impur": 222, "get_pep": 222, "290": 222, "320": [222, 383], "9991": 222, "cacheinfo": [222, 470], "fib": [222, 436, 445], "377": [222, 436, 444, 445], "610": [222, 436, 444, 445], "_is_valid_operand": 222, "lastnam": [222, 336, 470, 476], "firstnam": [222, 336, 470], "unrecognis": [222, 264, 471], "farg": 222, "fkeyword": 222, "newkeyword": 222, "basetwo": 222, "10010": 222, "_aliv": 222, "set_stat": 222, "set_dead": 222, "strength": [222, 468], "eh": [222, 468], "fun_num": 222, "615": [222, 420, 477, 478], "0x1035a2840": 222, "0x103fe0000": 222, "dict_key": [222, 464, 478], "wrapper_assign": 222, "wrapper_upd": 222, "17482": 222, "my_decor": [222, 462], "uncollect": [223, 470, 478], "threshold0": 223, "threshold1": 223, "threshold2": 223, "count0": 223, "count1": 223, "count2": 223, "lazarus": 223, "gc_ref": 223, "unfamiliar": [224, 263, 288, 462, 463], "shortopt": 224, "longopt": 224, "frob": [224, 385], "posixly_correct": 224, "cfoo": 224, "optlist": 224, "ho": [224, 478], "lname": 225, "i18n": [226, 341, 457, 464, 478], "l10n": [226, 457], "monolingu": 226, "localedir": 226, "unimpl": [226, 239], "myapplic": 226, "class_": 226, "lgettext": [226, 468, 476, 478], "lngettext": [226, 468, 476], "_info": 226, "_fallback": 226, "albeit": [226, 381], "gnome": [226, 339, 461, 471, 478], "jame": [226, 418, 421, 457, 460, 462, 464, 468, 469, 475, 478], "henstridg": [226, 457, 464], "habit": [226, 267], "mylog": [226, 466, 470], "xgettext": [226, 478], "fran": [226, 471, 472, 473], "ois": [226, 471, 472, 473], "pinard": 226, "xpot": 226, "pygettext": [226, 473, 478], "msgfmt": [226, 464], "lang1": 226, "lang2": 226, "fr": [226, 267, 314, 430, 460, 475], "lang3": 226, "language1": 226, "mollusk": 226, "albatross": 226, "rat": 226, "penguin": [226, 422], "n_": 226, "markthisstringfortransl": 226, "funk": [226, 457], "juan": [226, 464], "ib": 226, "ez": 226, "palomar": 226, "barri": [226, 457, 458, 459, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 478], "warsaw": [226, 457, 458, 459, 461, 462, 463, 469, 470, 471, 472, 473, 475, 476, 478], "gustavo": [226, 459, 460, 461, 462, 478], "niemey": [226, 459, 460, 461, 462], "redhat": [226, 478], "subshel": [227, 289], "include_hidden": [227, 478], "unc": [227, 289, 290, 292, 417, 478], "sharepoint": [227, 417], "quo": 227, "vadi": 227, "card": [227, 291, 314, 315, 431], "topolog": [228, 460, 477, 478], "vertex": [228, 379], "acycl": 228, "predecessor": [228, 460, 470], "topological_sort": 228, "task_queu": [228, 279], "finalized_tasks_queu": 228, "node_group": 228, "ts2": 228, "gr_name": [229, 460], "gr_passwd": 229, "gr_gid": [229, 344, 460], "gr_mem": 229, "yp": 229, "gunzip": 230, "discern": 230, "slowest": [230, 357, 379, 383, 469, 478], "unseek": [230, 396, 417, 470, 472, 473, 478], "wbit": [230, 419, 478], "file_cont": [230, 266], "s_in": 230, "s_out": 230, "fip": [231, 337, 478], "rsa": [231, 337, 467, 478], "1321": 231, "seealso": 231, "sha3": [231, 451, 468, 477, 478], "keccak": [231, 468, 474, 478], "usedforsecur": [231, 323, 478], "insecur": [231, 323, 326, 336, 337, 462, 469, 470, 478], "sha2": [231, 337, 477, 478], "hacl": [231, 478], "spammish": 231, "x03": [231, 280, 333, 340, 343, 393], "x1e": [231, 340], "xdd": 231, "ae": 231, "x15": [231, 343], "x93": 231, "xc5": 231, "xfe": 231, "x00o": 231, "xa5u": 231, "xfd": 231, "xf7": 231, "xbcn": 231, "x84": [231, 463], "xa6": 231, "xaf": [231, 463], "x0c": [231, 340, 393], "x95": 231, "x0fk": 231, "x06": [231, 393], "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 231, "condens": [231, 264, 462, 478], "upstream": [231, 336, 476, 478], "incept": 231, "length_in_bit": 231, "44709d6fcb83d92a76dcb0b668c98e1b1d3dafe7": 231, "socketio": 231, "mac1": 231, "digestmod": [231, 233, 472, 476, 478], "mac2": 231, "stretch": [231, 243, 371, 379, 405, 475], "brute": 231, "tunabl": [231, 289, 470], "hash_nam": 231, "dklen": 231, "pkcs": [231, 337, 472, 478], "pseudorandom": [231, 314, 337], "appendix": [231, 421], "nist": [231, 460], "132": 231, "stackexchang": 231, "pbkdf2": [231, 467], "our_app_it": 231, "500_000": [231, 340], "dk": 231, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 231, "maxmem": 231, "7914": 231, "mib": [231, 266, 279, 328, 468, 476, 478], "7693": 231, "fanout": 231, "leaf_siz": [231, 478], "node_offset": [231, 478], "node_depth": 231, "inner_s": 231, "last_nod": 231, "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 231, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 231, "6fa1d8fcfd719046d762": 231, "eb6ec15daf9546254f0809": 231, "1bf21a98c78a1c376ae9": 231, "567004bf96e4a25773ebf4": 231, "indifferenti": 231, "3d363ff7401e02026f4a4687d4863c": 231, "symmetr": [231, 280, 337, 340, 423, 425, 457, 459, 460, 461, 471, 478], "tamper": [231, 295], "secret_key": 231, "auth_siz": 231, "good_sig": 231, "alic": 231, "43b3c982cf697e0c5ab22172d1ca7421": 231, "bob": [231, 279, 381, 454, 462, 463, 464, 466, 471], "0102030405060708090a0b0c0d0e0f00": 231, "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 231, "signer": 231, "likelihood": [231, 339, 476], "106": [231, 257, 339, 456, 459], "salt1": 231, "salt2": 231, "h2": [231, 238, 264, 406], "summarili": 231, "files_hash_person": 231, "block_hash_person": 231, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 231, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 231, "orig_key": 231, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 231, "khy6h21km": 231, "enc_key": 231, "kencrypt": 231, "mac_key": 231, "kmac": 231, "rbpb15s": 231, "z9t": 231, "agffno5wuhb77vbri6f9iv2qixu7whw": 231, "g9gthfe1yluxy1zwplyk1": 231, "nwfu0wseb0krcjhdep": 231, "h00": 231, "h01": 231, "h10": 231, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 231, "jean": [231, 421, 463, 464, 471], "philipp": [231, 421, 462, 467, 478], "aumasson": [231, 421], "samuel": [231, 333, 421, 460, 462, 474, 477, 478], "neve": [231, 421, 474], "zooko": [231, 421], "wilcox": 231, "hearn": 231, "christian": [231, 421, 457, 461, 463, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478], "winnerlein": 231, "finalist": 231, "henzen": 231, "willi": 231, "meier": 231, "raphael": 231, "phan": 231, "chacha": 231, "daniel": [231, 460, 463, 464, 467, 468, 470, 472, 473, 474, 478], "bernstein": [231, 421, 463, 478], "pyblake2": 231, "dmitri": [231, 461, 473, 474, 478], "chestnykh": [231, 474], "heim": [231, 421, 463, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478], "neighbor": [231, 408, 459, 460], "warranti": [231, 421, 476], "cc0": 231, "creativecommon": 231, "publicdomain": 231, "alexandr": [231, 463, 464, 466, 470, 472, 478], "sokolovskiy": 231, "nvlpub": 231, "gov": [231, 239, 460], "nistpub": 231, "csrc": 231, "cryptographic_hash_funct": 231, "rfc8018": 231, "cryptographi": [231, 333], "nistspecialpublication800": 231, "heapsort": 232, "prioritizeditem": [232, 312], "pq": [232, 315], "entry_find": 232, "add_task": 232, "remove_task": 232, "pop_task": 232, "midi": 232, "digest_con": [233, 478], "crypto_memcmp": [233, 478], "x3e": [234, 236], "lenient": 234, "html4": [235, 236, 478], "whatwg": [235, 389, 478], "multipag": 235, "convert_charref": [236, 472, 473, 478], "myhtmlpars": 236, "xnnn": 236, "condcom": 236, "ie9": 236, "decl": 236, "sgml": [236, 269, 412, 463], "ent": 236, "logo": [236, 379, 421], "buff": 236, "ere": 236, "pan": [236, 478], "soup": 236, "switching_protocol": 237, "7231": 237, "2518": 237, "103": [237, 257, 339, 340, 377, 456, 464, 470, 477, 478], "early_hint": [237, 477, 478], "8297": [237, 478], "non_authoritative_inform": 237, "no_cont": 237, "reset_cont": 237, "partial_cont": 237, "7233": 237, "multi_status": 237, "4918": 237, "already_report": 237, "5842": 237, "im_us": 237, "3229": 237, "multiple_choic": 237, "moved_perman": [237, 461], "see_oth": 237, "not_modifi": 237, "7232": [237, 464], "use_proxi": 237, "temporary_redirect": 237, "permanent_redirect": 237, "7238": 237, "bad_request": 237, "7235": 237, "payment_requir": 237, "not_found": [237, 238, 478], "method_not_allow": 237, "not_accept": 237, "proxy_authentication_requir": 237, "request_timeout": 237, "length_requir": 237, "precondition_fail": 237, "request_entity_too_larg": 237, "request_uri_too_long": 237, "unsupported_media_typ": 237, "requested_range_not_satisfi": 237, "expectation_fail": 237, "418": [237, 436, 467, 471, 477, 478], "im_a_teapot": [237, 477], "htcpcp": 237, "2324": 237, "misdirected_request": 237, "7540": 237, "422": 237, "unprocessable_ent": 237, "423": 237, "424": [237, 472], "failed_depend": 237, "too_ear": [237, 477, 478], "8470": 237, "upgrade_requir": 237, "428": [237, 292, 472], "precondition_requir": 237, "6585": 237, "429": [237, 472], "too_many_request": 237, "431": 237, "request_header_fields_too_larg": 237, "unavailable_for_legal_reason": [237, 478], "obstacl": [237, 478], "7725": 237, "internal_server_error": 237, "not_impl": 237, "bad_gateway": 237, "service_unavail": 237, "gateway_timeout": 237, "http_version_not_support": 237, "506": [237, 322, 474, 478], "variant_also_negoti": 237, "2295": 237, "507": 237, "insufficient_storag": 237, "508": 237, "loop_detect": 237, "510": 237, "not_extend": 237, "2774": 237, "511": [237, 417, 474], "network_authentication_requir": 237, "is_inform": 237, "199": 237, "is_success": [237, 478], "is_redirect": 237, "399": [237, 478], "is_client_error": 237, "is_server_error": 237, "5789": 237, "h3": 238, "h4": 238, "_create_unverified_context": [238, 464, 472], "cert_fil": [238, 390, 469, 478], "alpn": [238, 337, 390, 467, 473, 478], "key_fil": [238, 390, 469, 478], "encode_chunk": 238, "reconnect": [238, 473, 478], "tunnel": [238, 470, 478], "skip_host": 238, "skip_accept_encod": 238, "message_bodi": 238, "7230": [238, 390], "amt": 238, "data1": 238, "data2": 238, "12524": 238, "issue12524": 238, "filecont": 238, "2965": [239, 390, 478], "2109": [239, 240], "cookie2": 239, "secure_protocol": [239, 478], "wss": [239, 389, 478], "websocket": [239, 253, 478], "downgrad": 239, "curl": [239, 455, 456, 478], "cookie_spec": 239, "kristol": 239, "errata": [239, 258], "unfinish": [239, 279, 478], "2964": 239, "get_origin_req_host": [239, 390, 472], "approv": [239, 284, 303, 456, 457, 464, 478], "ignore_discard": 239, "ignore_expir": 239, "wipe": 239, "lynx": [239, 398, 461], "clobber": [239, 288, 478], "libwww": [239, 461], "cookie3": 239, "mycookiepolici": 239, "i_dont_want_to_store_this_cooki": 239, "tighten": [239, 457, 464, 470], "loos": [239, 360, 478], "benign": 239, "blocklist": 239, "allowlist": [239, 389], "coyot": 239, "193": [239, 379, 465], "nz": 239, "acm": [239, 314], "rocket_launch": 239, "expiri": [239, 478], "began": [239, 246, 263, 357, 457, 458, 478], "cj": 239, "ads": 239, "serializ": [240, 258], "2068": [240, 361], "real_valu": 240, "rawdata": 240, "http_cooki": 240, "httpon": [240, 463, 478], "samesit": [240, 478], "csrf": 240, "lax": [240, 462, 478], "fig": 240, "newton": [240, 315], "wafer": 240, "rocki": [240, 463], "chip": [240, 421, 464], "ahoy": 240, "vienna": 240, "finger": [240, 465], "keebler": 240, "fudg": 240, "012": [240, 257, 340, 458], "oreo": 240, "doublestuff": 240, "twix": 240, "server_class": [241, 402], "handler_class": [241, 402], "8000": [241, 291, 329, 402, 414, 415, 462, 476, 478], "httpd": [241, 272, 329, 402, 462], "server_nam": [241, 402, 415], "server_port": [241, 402], "do_spam": 241, "3986": [241, 389, 464, 473, 475, 478], "hier": 241, "basehttp": 241, "1xx": 241, "1994": [241, 421], "simplehttp": 241, "list_directori": 241, "webserv": 241, "index_pag": [241, 478], "9000": [241, 381, 425], "empt": 241, "htbin": 241, "scrub": 241, "nefari": 241, "smart": [243, 459, 478], "namag": 243, "aqua": [243, 454, 478], "unsav": 243, "undon": [243, 379, 384, 385], "clipboard": [243, 364, 474, 475, 476, 478], "reformat": [243, 267, 288, 460, 478], "tabifi": 243, "untabifi": 243, "toggl": [243, 333, 371, 476, 477, 478], "chitespac": 243, "autosav": 243, "wake": [243, 324, 329, 360, 463, 478], "pane": [243, 370, 371, 478], "zoom": [243, 478], "momentarili": [243, 267, 478], "deiconifi": 243, "idlerc": [243, 478], "squeez": [243, 474, 475, 476, 478], "leftarrow": 243, "rightarrow": 243, "expres": 243, "pageup": 243, "pagedown": 243, "popup": [243, 357, 478], "100000000": 243, "uncolor": 243, "idlestartup": [243, 478], "pythonstartup": [243, 316, 330, 348, 433, 450, 472, 478], "masquerad": [243, 384, 478], "tcpconnect": 243, "irv": [243, 437], "6543": 243, "tcplisten": 243, "antivirus": [243, 357], "taught": 243, "mis": [243, 478], "admin": 243, "zombi": [243, 279, 334, 357, 462, 471, 478], "pythonw": [243, 279, 330, 348, 454, 456, 459, 474, 475, 478], "dismiss": [243, 379], "glitch": 243, "pyw": [243, 433, 456, 459, 478], "plane": [243, 271, 467, 478], "x02": [243, 255, 280, 333, 343, 393], "x07": [243, 280, 393], "x08c": 243, "loopback": [243, 255, 357], "transient": [243, 264, 336, 478], "f5": [243, 457], "mousewheel": [243, 478], "scrollbar": [243, 364, 369, 371, 379, 478], "toc": [243, 478], "dock": [243, 478], "zzdummi": [243, 478], "imap4rev1": 244, "1730": 244, "imap4_port": 244, "d25if65hy903weo": 244, "imap4_ssl_port": 244, "ssl_context": [244, 284, 469, 478], "993": 244, "datestr": 244, "flagstr": 244, "uw": 244, "message_set": 244, "authobject": [244, 331], "checkpoint": [244, 348], "new_mailbox": 244, "acl": [244, 328], "5161": [244, 473, 478], "6855": [244, 473, 478], "message_part": 244, "cyrus": [244, 478], "rfc2087": 244, "folder": [244, 267, 394, 456, 478], "cram": [244, 331], "2342": [244, 459], "message_num": 244, "authoris": 244, "oldmailbox": 244, "newmailbox": 244, "criterion": [244, 295, 423, 457], "msgnum": 244, "ldj": 244, "inbox": [244, 267], "sort_criteria": 244, "search_criterion": 244, "flag_list": 244, "3501": 244, "gmail": [244, 478], "threading_algorithm": 244, "sgi": 245, "imglib": 245, "87a": 245, "89a": 245, "graymap": 245, "pixmap": [245, 370], "raster": 245, "jfif": [245, 478], "exif": [245, 478], "openexr": [245, 473, 478], "bass": [245, 332], "comprehend": 246, "3120": [246, 430, 465], "subpkg": 246, "rebound": [246, 424, 431], "redefinit": [246, 423, 478], "educ": [246, 257, 379], "get_resource_read": [246, 248, 249, 475, 478], "sourceless": [246, 471, 473], "allevi": [246, 457], "loader_detail": 246, "namespaceload": [246, 472, 478], "path_find": 246, "my_namespac": 246, "debug_overrid": [246, 473], "get_tag": [246, 469, 470], "source_byt": 246, "implic": [246, 279, 295, 389, 404, 425, 478], "disable_check": [246, 478], "mulitpl": 246, "lazy_load": 246, "file_path": 246, "lazy_import": 246, "lazy_typ": 246, "spammetapathfind": 246, "spampathentryfind": 246, "absolute_nam": 246, "parent_nam": 246, "child_nam": 246, "parent_modul": 246, "pkg_resourc": [247, 248, 469, 478], "discover": [247, 308, 456, 472, 478], "package_distribut": 247, "importlib_metadata": [247, 467, 477, 478], "entrypoint": [247, 336, 467, 469, 478], "console_script": 247, "entry_point": [247, 478], "eps": 247, "setup_keyword": [247, 460], "egg_info": 247, "0x103528488": 247, "entry_points_select": 247, "wheel_metadata": 247, "packagemetadata": [247, 478], "566": [247, 478], "requires_python": [247, 303], "quickest": 247, "packagepath": [247, 476], "859": 247, "_hook": 247, "pathdistribut": [247, 478], "0x101e0cef0": 247, "filehash": 247, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 247, "text_typ": 247, "gustav": 247, "always_iter": 247, "pytest": [247, 383], "cov": 247, "packages_distribut": [247, 467, 478], "pyyaml": [247, 464, 466], "jaraco": 247, "find_distribut": 247, "distributionfind": 247, "artifact": [248, 249, 291, 471, 478], "pycach": [248, 348], "akin": [248, 340, 427], "importlib_resourc": [248, 475, 477, 478], "priori": 249, "__code__": [251, 340, 423, 465, 476, 478], "__defaults__": [251, 423, 465, 478], "__kwdefaults__": [251, 423, 472], "tb_frame": [251, 380, 423, 478], "tb_lasti": [251, 380, 423], "tb_lineno": [251, 376, 380, 423], "tb_next": [251, 376, 380, 423, 475, 478], "f_back": [251, 376, 423, 468, 478], "f_code": [251, 423, 460, 468, 478], "f_lineno": [251, 423, 460, 467, 468, 474, 478], "f_trace": [251, 348, 423, 468, 478], "co_argcount": [251, 423, 478], "co_flag": [251, 423, 478], "co_": [251, 478], "co_posonlyargcount": [251, 423, 476, 478], "co_kwonlyargcount": [251, 423], "co_nloc": [251, 423], "co_stacks": [251, 423], "gi_fram": [251, 462], "gi_run": 251, "gi_cod": [251, 463, 473, 478], "gi_yieldfrom": [251, 473, 478], "cr_await": [251, 478], "cr_frame": [251, 478], "cr_run": 251, "cr_code": 251, "cr_origin": [251, 348, 478], "gen_coro": 251, "follow_wrap": [251, 473, 478], "eval_str": 251, "omiss": [251, 310, 333, 478], "new_sig": 251, "anno": 251, "globaln": [251, 381, 478], "localn": [251, 381, 478], "mysignatur": 251, "implicit0": [251, 474, 478], "keyword_on": 251, "positional_on": 251, "var_posit": 251, "var_keyword": 251, "fullargspec": 251, "varkw": 251, "kwonlydefault": 251, "getargspec": [251, 468, 472, 473, 474, 478], "arginfo": 251, "formatarg": 251, "formatvararg": 251, "formatvarkw": 251, "formatvalu": 251, "closurevar": 251, "__signature__": [251, 472, 478], "conting": 251, "lifespan": 251, "handle_stackframe_without_leak": 251, "_foo": 251, "slot_descriptor": 251, "getset_descriptor": 251, "wrapper_descriptor": [251, 461], "descriptor_typ": 251, "gen_creat": [251, 470], "gen_run": 251, "gen_suspend": [251, 470], "gen_clos": [251, 470], "coro_cr": 251, "coro_run": 251, "coro_suspend": 251, "coro_clos": 251, "ag_run": [251, 477, 478], "ag_fram": 251, "agen_cr": 251, "agen_run": 251, "agen_suspend": 251, "agen_clos": 251, "glibc": [253, 255, 289, 318, 468, 472, 476, 477, 478], "sandbox": [253, 320, 348, 478], "sdk": [253, 451, 477, 478], "wasm": [253, 451, 478], "nodej": 253, "wasmtim": [253, 478], "pyodid": [253, 468, 478], "pyscript": 253, "xmlhttprequest": 253, "markdown": [254, 467], "md": 254, "long_descript": 254, "686": [254, 289], "597": [254, 467, 478], "pythonwarndefaultencod": [254, 450, 467, 478], "blksize": [254, 402], "stacklevel": [254, 263, 395, 462, 478], "unoptim": [254, 473], "seek_": 254, "immin": 254, "latenc": [254, 265, 289, 436, 464, 467, 474], "initial_byt": 254, "ab56ef": 254, "nsecond": [254, 444], "reconstruct": [254, 295, 303, 373, 402, 478], "downsid": [255, 456, 471, 475], "3232235521": [255, 341], "xc0": [255, 459], "xa8": 255, "arpa": [255, 354, 473], "ip6": [255, 473], "multicast": [255, 333, 357, 393, 478], "3171": 255, "2373": 255, "5735": 255, "3330": 255, "3927": 255, "0b11000000101010000000000000000001": 255, "2001_0db8_0000_0000_0000_0000_0000_1000": 255, "_n": 255, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 255, "longhand": 255, "4291": [255, 478], "0abc": 255, "0007": 255, "0def": 255, "4007": 255, "fe80": 255, "ff02": 255, "5678": [255, 393], "3879": 255, "4193": 255, "6to4": 255, "3056": 255, "4380": 255, "nbit": 255, "ff00": 255, "cisco": [255, 478], "wholli": [255, 408], "n1": 255, "n2": 255, "prefixlen_diff": 255, "new_prefix": 255, "db00": 255, "anycast": 255, "ipaddr": 255, "sortabl": [255, 265], "apl": [257, 466, 470], "sml": 257, "recast": [257, 470], "algebra": [257, 463, 478], "tabul": [257, 340, 406], "vector": [257, 271, 344, 362, 379, 381, 404, 469, 478], "vec1": 257, "vec2": [257, 381], "p0": 257, "plast": 257, "p_n": 257, "abcdefg": [257, 287, 468, 478], "q0": 257, "q1": 257, "pred": [257, 394], "it1": 257, "it2": 257, "itn": [257, 478], "ax": 257, "ad": [257, 421, 460], "bd": 257, "addabl": 257, "110": [257, 301, 339, 341, 436], "amort": 257, "1296": 257, "loan": 257, "annual": [257, 477], "account_upd": 257, "bal": 257, "pmt": 257, "1_000": [257, 478], "960": [257, 478], "918": 257, "874": 257, "828": 257, "779": [257, 377], "728": [257, 300], "674": 257, "559": 257, "497": 257, "flattened_data": 257, "violet": [257, 379], "unflatten": 257, "013": 257, "023": 257, "uniq": [257, 461], "uniquekey": 257, "aaaabbbccdaabbb": 257, "aaaabbbccd": 257, "aaaa": [257, 315, 464], "bbb": 257, "tgtkey": 257, "currkey": 257, "currvalu": 257, "_grouper": 257, "nexti": 257, "021": 257, "210": 257, "odomet": 257, "ay": 257, "bx": 257, "cy": 257, "dx": [257, 339], "dy": 257, "011": 257, "mydequ": 257, "newval": 257, "uneven": 257, "num_act": 257, "incub": 257, "sliding_window": 257, "iter_index": 257, "superior": 257, "repeatfunc": 257, "list_of_list": 257, "ncycl": 257, "all_equ": 257, "first_tru": 257, "aabcadeaf": 257, "seq_index": 257, "iter_except": 257, "grouper": 257, "gxx": 257, "cdef": 257, "defg": 257, "sakki": [257, 464], "is_odd": 257, "subslic": 257, "before_and_aft": 257, "abcdefghi": 257, "all_upp": 257, "true_iter": 257, "remainder_iter": 257, "unique_everseen": 257, "abbccad": 257, "dedupl": [257, 478], "unique_justseen": 257, "powerset": 257, "siev": 257, "1_000_000_000_000_007": 257, "360620266859": 257, "1_000_000_000_000_403": 257, "1000000000000403": 257, "sum_of_squar": 257, "1400": 257, "m2": [257, 459, 464, 468, 471], "matric": [257, 284, 458], "convolv": 257, "convolut": 257, "betterexplain": 257, "kuxjwb4lzsa": 257, "padded_sign": 257, "windowed_sign": 257, "polynomial_from_root": 257, "4x": [257, 288, 469, 471, 472, 474, 478], "17x": [257, 467, 478], "polynomial_ev": 257, "horner": 257, "polynomial_deriv": 257, "3x": [257, 472, 478], "8x": [257, 478], "nth_combin": 257, "7159": [258, 473, 478], "4627": [258, 478], "ecma": 258, "sort_key": [258, 300, 470], "x08ar": 258, "as_complex": 258, "dct": 258, "object_hook": [258, 478], "parse_float": [258, 374], "complexencod": 258, "unord": [258, 279, 340, 423], "skipkey": [258, 300, 478], "ensure_ascii": [258, 473, 478], "check_circular": 258, "allow_nan": [258, 478], "chech_circular": 258, "item_separ": 258, "key_separ": 258, "parse_int": 258, "parse_const": 258, "object_pairs_hook": [258, 464, 466], "num_str": [258, 374], "extran": [258, 304, 364, 478], "bigobject": 258, "forbid": [258, 295, 337, 340, 404, 464, 478], "unpair": 258, "weird_json": 258, "object_parts_hook": 258, "voluntarili": [258, 289], "mp_film": 258, "1971": [258, 336, 339], "holi": [258, 336, 341, 437], "grail": [258, 336, 398, 437, 469, 478], "2028": 258, "2029": 258, "ecmascript": [258, 405], "module_glob": [261, 395, 478], "_local": [262, 477, 478], "decimal_point": [262, 340, 478], "thousands_sep": [262, 340, 478], "int_curr_symbol": 262, "currency_symbol": [262, 447], "p_cs_preced": 262, "n_cs_preced": 262, "p_sep_by_spac": 262, "n_sep_by_spac": 262, "mon_decimal_point": 262, "frac_digit": [262, 447], "int_frac_digit": 262, "mon_thousands_sep": 262, "mon_group": 262, "positive_sign": 262, "negative_sign": 262, "p_sign_posn": 262, "n_sign_posn": 262, "day_7": 262, "abday_1": 262, "abday_7": 262, "mon_1": 262, "mon_12": 262, "abmon_1": 262, "abmon_12": 262, "emperor": 262, "reign": 262, "envvar": [262, 357], "1766": 262, "lc_": 262, "do_setlocal": [262, 289], "localenam": 262, "string1": [262, 336, 437], "string2": [262, 336, 437], "loc": 262, "xe4n": 262, "umlaut": 262, "bind_textdomain_codeset": [262, 461, 468, 476], "grip": [263, 371], "stack_info": [263, 478], "clientip": 263, "fblogg": 263, "hdlr": 263, "lno": 263, "sinfo": 263, "tidi": [263, 383, 460, 462, 463, 478], "emiss": [263, 357, 478], "preparatori": 263, "uuu": 263, "default_time_format": 263, "default_msec_format": 263, "linefmt": 263, "footer": [263, 337, 478], "pertin": [263, 321], "msec": [263, 362, 473], "004": 263, "896": [263, 339], "la": [263, 462, 468], "tasknam": [263, 478], "entrant": [263, 478], "throttl": 263, "28524": 263, "reinstat": [263, 478], "attrdict": [263, 478], "reconstitut": [263, 295], "klass": 263, "inabl": [264, 289, 421], "dictconfigur": 264, "dictconfigclass": 264, "uncustom": 264, "default_logging_config_port": 264, "decrypt": [264, 337, 417], "victim": 264, "customis": [264, 379], "allow_foo": 264, "logconfig": 264, "compel": [264, 464], "customformatterfactori": 264, "_after_": 264, "my_app": 264, "tld": 264, "support_team": 264, "dev_team": 264, "houston": 264, "mykey": 264, "config_dict": 264, "baseconfigur": 264, "qhand": 264, "queue_factori": 264, "customlisten": 264, "hand_name_1": 264, "hand_name_2": 264, "log01": 264, "logger_log01": 264, "hand01": 264, "handler_hand01": 264, "form01": 264, "formatter_form01": 264, "log02": 264, "log03": 264, "log04": 264, "log05": 264, "log06": 264, "log07": 264, "hand02": 264, "hand03": 264, "hand04": 264, "hand05": 264, "hand06": 264, "hand07": 264, "hand08": 264, "hand09": 264, "form02": 264, "form03": 264, "form04": 264, "form05": 264, "form06": 264, "form07": 264, "form08": 264, "form09": 264, "logger_pars": 264, "_defaultformatt": 264, "handler_hand02": 264, "handler_hand03": 264, "handler_hand04": 264, "default_udp_logging_port": 264, "handler_hand05": 264, "syslog_udp_port": [264, 265], "log_us": [264, 265, 351], "handler_hand06": 264, "handler_hand07": 264, "user1": [264, 468], "user2": [264, 468], "handler_hand08": 264, "handler_hand09": 264, "9022": 264, "typifi": 264, "customfield": 264, "42378": [265, 478], "newsyslog": 265, "logrot": 265, "precursor": 265, "rollov": [265, 355, 472, 478], "default_nam": [265, 423], "predetermin": 265, "attim": [265, 472], "w0": 265, "w6": 265, "w1": [265, 435], "d_": 265, "record_attr_dict": 265, "datalen": 265, "retrystart": 265, "retryfactor": 265, "retrymax": 265, "rsyslog": 265, "monterey": [265, 478], "gh": [265, 280, 315, 344, 381, 451, 467, 468, 469, 478], "91070": 265, "12168": 265, "append_nul": [265, 471], "12419": 265, "log_": 265, "log_alert": [265, 351], "crit": 265, "log_crit": [265, 351], "log_debug": [265, 351], "emerg": [265, 457], "panic": [265, 460], "log_emerg": [265, 351], "log_err": [265, 351], "log_info": [265, 351], "log_notic": [265, 351], "log_warn": [265, 351], "log_auth": [265, 351], "authpriv": 265, "log_authpriv": [265, 351], "cron": 265, "log_cron": [265, 351], "log_daemon": [265, 351], "log_ftp": 265, "kern": 265, "log_kern": [265, 351], "lpr": 265, "log_lpr": [265, 351], "log_mail": [265, 351], "log_new": [265, 351], "log_syslog": [265, 351], "uucp": [265, 421], "log_uucp": [265, 351], "local0": 265, "log_local0": [265, 351], "local1": 265, "log_local1": 265, "local2": 265, "log_local2": 265, "local3": 265, "log_local3": 265, "local4": 265, "log_local4": 265, "local5": 265, "log_local5": 265, "local6": 265, "log_local6": 265, "local7": 265, "log_local7": [265, 351], "hammond": [265, 456, 457, 459, 460, 471, 478], "dllname": [265, 476], "logtyp": 265, "win32servic": 265, "slimmer": 265, "credenti": [265, 284, 333, 390, 456, 473, 478], "flushonclos": [265, 478], "format_xz": 266, "format_alon": [266, 478], "format_raw": 266, "format_auto": 266, "check_non": 266, "check_crc32": 266, "check_crc64": 266, "check_sha256": 266, "preset_extrem": 266, "preset_default": 266, "memlimit": 266, "check_unknown": 266, "liblzma": [266, 468], "filter_lzma1": 266, "filter_lzma2": 266, "filter_delta": 266, "bcj": 266, "filter_x86": 266, "filter_ia64": 266, "filter_arm": 266, "filter_armthumb": 266, "filter_powerpc": 266, "filter_sparc": 266, "dict_siz": 266, "lc": 266, "mode_fast": 266, "mode_norm": 266, "nice_len": 266, "mf": 266, "mf_hc3": 266, "mf_hc4": 266, "mf_bt2": 266, "mf_bt3": 266, "mf_bt4": 266, "start_offset": 266, "data_in": 266, "data_out": 266, "lzc": 266, "out1": 266, "out2": 266, "out3": 266, "out4": 266, "lzf": 266, "my_filt": 266, "noteworthi": [267, 457, 458], "advisori": [267, 423, 450, 457, 478], "qmail": 267, "courier": [267, 364, 367, 478], "deserv": [267, 457], "remark": [267, 379, 385, 457, 461, 478], "inventor": 267, "perceiv": 267, "shortcom": [267, 460], "mboxo": 267, "mh_sequenc": 267, "mh_profil": 267, "nmh": 267, "gpl": [267, 421, 459], "rmail": 267, "037": 267, "014": 267, "abridg": 267, "attract": [267, 463, 465], "multichannel": 267, "memorandum": 267, "newsread": 267, "insofar": [267, 431], "composit": [267, 348, 371, 382, 427, 478], "bounc": [267, 457], "unseen": 267, "mua": [267, 337, 475], "time_": 267, "list_nam": 267, "list_id": 267, "mpeg": 268, "xmpeg": 268, "1524": 268, "multimedia": [268, 291], "cap": [268, 478], "showparti": 268, "tmp1223": 268, "unmarsh": [270, 468], "mantissa": [271, 314, 461, 463], "halfway": [271, 465], "denorm": [271, 348, 478], "cube": [271, 339, 444, 478], "718281": 271, "0000050000069649e": 271, "0000050000166668e": 271, "quadrant": 271, "euclidean": [271, 476, 478], "qx": 271, "norm": [271, 478], "hypotenus": 271, "triangl": [271, 379], "pythagorean": 271, "theorem": [271, 339, 340], "hyperbola": 271, "complementari": [271, 314, 403, 464, 470], "141592": 271, "283185": 271, "circumfer": 271, "vi": [271, 316], "hart": 271, "celebr": 271, "pie": [271, 336], "rebuilt": [272, 471, 473, 478], "recognit": 272, "tgz": [272, 455], "access_read": 274, "access_writ": 274, "access_copi": 274, "access_default": [274, 478], "prot": 274, "allocationgranular": 274, "prot_writ": 274, "prot_read": 274, "lieu": [274, 421], "pages": 274, "advic": [274, 289, 456, 469, 478], "pagefil": 274, "pkg_name": [275, 357, 377], "oldnam": 275, "newnam": [275, 447], "replace_path": 275, "oldpath": 275, "newpath": 275, "baconhamegg": 275, "globalnam": 275, "badmodul": 275, "_type": 275, "_inverted_registri": 275, "_slotnam": [275, 478], "_compil": [275, 304], "isstr": 275, "_sre": [275, 473, 478], "_optimize_unicod": 275, "_constant": [275, 340, 478], "repeat_on": 275, "makedict": 275, "at_end_lin": 275, "_expand": 275, "_parser": [275, 304], "_patternend": 275, "sre_flag_unicod": 275, "inttyp": [275, 478], "typetyp": 275, "msi": [277, 456, 462, 473, 475, 478], "cabinet": [277, 478], "cabnam": 277, "mszip": 277, "uuidtostr": 277, "msiopendatabas": 277, "msidbopen_createdirect": 277, "msidbopen_cr": 277, "msidbopen_direct": 277, "msidbopen_readon": 277, "msidbopen_transact": 277, "msidbopen_patchfil": 277, "msicreaterecord": 277, "productnam": 277, "productcod": 277, "productvers": 277, "manufactur": 277, "_validation_record": 277, "_stream": 277, "msidatabaseopenview": 277, "msidatabasecommit": 277, "msigetsummaryinform": 277, "msiclosehandl": 277, "msiviewexecut": 277, "msiviewgetcolumninfo": 277, "msicolinfo_nam": 277, "msicolinfo_typ": 277, "msiviewfetch": 277, "msiviewmodifi": 277, "msimodify_seek": 277, "msimodify_refresh": 277, "msimodify_insert": 277, "msimodify_upd": 277, "msimodify_assign": 277, "msimodify_replac": 277, "msimodify_merg": 277, "msimodify_delet": 277, "msimodify_insert_temporari": 277, "msimodify_valid": 277, "msimodify_validate_new": 277, "msimodify_validate_field": 277, "msimodify_validate_delet": 277, "msiviewclos": 277, "msisummaryinfogetproperti": 277, "pid_codepag": 277, "pid_titl": 277, "pid_subject": 277, "pid_author": 277, "pid_keyword": 277, "pid_com": 277, "pid_templ": 277, "pid_lastauthor": 277, "pid_revnumb": 277, "pid_lastprint": 277, "pid_create_dtm": 277, "pid_lastsave_dtm": 277, "pid_pagecount": 277, "pid_wordcount": 277, "pid_charcount": 277, "pid_appnam": 277, "pid_secur": 277, "msisummaryinfogetpropertycount": 277, "msisummaryinfosetproperti": 277, "msisummaryinfopersist": 277, "msirecordgetfieldcount": 277, "msirecordsetstr": 277, "msirecordsetstream": 277, "msirecordsetinteg": 277, "msirecordcleardata": 277, "msierror": [277, 478], "basedir": 277, "componentflag": 277, "defaultdir": 277, "keypath": 277, "featurecompon": 277, "dlg": 277, "controlev": 277, "eventmap": 277, "controlcondit": 277, "radio": [277, 370, 478], "control_next": 277, "next_control": 277, "radiobutton": [277, 370, 371, 478], "adminexecutesequ": 277, "adminuisequ": 277, "advtexecutesequ": 277, "installexecutesequ": 277, "installuisequ": 277, "uitext": 277, "actiontext": 277, "lk_": 278, "xe0": 278, "keycod": [278, 364], "unicode_char": 278, "33725": [279, 476, 478], "reboot": [279, 292, 472], "mp": [279, 460], "duplex": [279, 291], "parent_conn": 279, "child_conn": 279, "liabl": [279, 397, 421], "1415927": 279, "offload": 279, "multiple_result": 279, "patienc": 279, "poolwork": 279, "orphan": [279, 478], "waitforsingleobject": 279, "waitformultipleobject": [279, 478], "infinitesim": 279, "conn1": 279, "conn2": 279, "feeder": [279, 381, 478], "sem_getvalu": [279, 478], "allow_exit_without_flush": 279, "3770": 279, "cpus": [279, 289, 343, 472, 473, 478], "allow_non": [279, 414, 415, 460], "arr1": 279, "arr2": 279, "solitari": 279, "indistinguish": [279, 304], "unown": [279, 478], "sem_timedwait": [279, 478], "typecode_or_typ": 279, "get_lock": 279, "size_or_initi": 279, "get_obj": 279, "875": 279, "375": [279, 339], "1111111111111111": 279, "515625": 279, "0625": [279, 444], "640625": 279, "shutdown_timeout": [279, 478], "xmlrpclib": [279, 459, 460, 461, 462, 463, 464, 465, 478], "50000": [279, 362], "typeid": [279, 476], "method_to_typeid": 279, "create_method": 279, "_exposed_": 279, "_method_to_typeid_": 279, "_z": 279, "mathsclass": 279, "mymanag": 279, "queuemanag": 279, "get_queu": 279, "listproxi": [279, 478], "l_outer": 279, "d_first_inn": 279, "lproxi": 279, "remoteerror": 279, "deregist": 279, "maxtasksperchild": [279, 464, 478], "apach": [279, 337, 414, 421, 448, 457, 474, 478], "mod_wsgi": [279, 344], "error_callback": 279, "chop": [279, 457, 461, 465], "lazier": 279, "outstand": [279, 421], "af_pip": 279, "object_list": 279, "waitabl": [279, 289, 324, 361, 468, 478], "1729": 279, "pipenam": 279, "servernam": 279, "doom": [279, 462], "mainprocess": 279, "pymp": 279, "_bootstrap": [279, 377, 478], "_pid": 279, "5155": 279, "5313": 279, "5331": 279, "_h": 279, "generatorproxi": 279, "get_operator_modul": 279, "foo1": [279, 315], "foo2": [279, 315], "94": [279, 314, 464], "calculatestar": 279, "pow3": 279, "imap_it": 279, "imap_unordered_it": 279, "tgot": 279, "imapiter": 279, "applyresult": 279, "number_of_process": 279, "tasks1": 279, "tasks2": 279, "done_queu": 279, "multicor": 280, "smp": 280, "novel": [280, 459, 460, 462], "shm_a": 280, "shm_b": 280, "howdi": 280, "ndarray": 280, "np": [280, 471], "dtype": [280, 381], "psm_21467_46075": 280, "existing_shm": 280, "int64": 280, "888": 280, "smm": 280, "psm_6572_7512": 280, "raw_shm": 280, "another_sl": 280, "psm_6572_12221": 280, "depict": 280, "do_work": [280, 289], "total_result": 280, "storabl": 280, "10m": 280, "106939": 280, "nul_bug_demo": 280, "deserialized_sl": 280, "mapnam": 283, "default_domain": 283, "joy": [283, 379], "nntlib": 284, "poster": 284, "3977": 284, "2980": 284, "gmane": [284, 471, 478], "committ": [284, 471], "1096": 284, "1087": 284, "1088": 284, "1089": 284, "1090": 284, "1091": 284, "1092": 284, "ssh": [284, 327, 328, 389, 478], "1093": 284, "1094": 284, "fellow": 284, "240": [284, 379], "119": [284, 339, 377, 476], "readermod": 284, "usenetrc": 284, "authinfo": 284, "1755": [284, 471], "nntps": 284, "4642": 284, "disclaim": [284, 345, 396, 421], "groupinfo": 284, "tor": 284, "group_pattern": [284, 422, 426], "offlin": [284, 377, 456], "grouppattern": 284, "wildmat": 284, "295": [284, 469, 478], "biopython": 284, "elid": 284, "message_spec": 284, "article_numb": 284, "art_num": 284, "117216": 284, "xref": 284, "ik1hcnrpbib2libmw7z3axmi": 284, "loewi": 284, "message_id": 284, "9099": 284, "20030112190404": 284, "ge29873": 284, "metaslash": 284, "neal": [284, 460, 462, 463], "norwitz": [284, 460, 462, 463], "hdr": 284, "header_str": 284, "e9buter_en_python": 284, "buter": 284, "chjvymzdqg1ligrlig1hdhjpy2u": 284, "probl": 284, "myfoo": 285, "myintegr": 285, "do_my_adding_stuff": 285, "othertypeiknowabout": 285, "do_my_other_adding_stuff": 285, "_operator_fallback": 285, "monomorphic_oper": 285, "fallback_oper": 285, "__r": 285, "_add": 285, "66": [287, 384, 437, 458, 463], "tuppl": 287, "resolve_attr": 287, "cdefg": 287, "soldier": 287, "rank": [287, 339, 408, 469], "captain": [287, 474], "dotterbart": 287, "banana": [287, 340, 437, 446], "pear": [287, 437, 446], "yourscript": 288, "foutfil": 288, "qfoutfil": 288, "acquaint": 288, "xf": [288, 435], "pf": [288, 371], "ffoo": 288, "controversi": [288, 459], "contradictori": 288, "whatsoev": [288, 321, 421], "mutant": 288, "oddbal": 288, "humbl": 288, "mission": 288, "overwhelm": 288, "opt_str": 288, "jam": 288, "n42": 288, "vewwi": 288, "wabbit": 288, "novic": 288, "bland": [288, 462, 463], "clue": 288, "optioncontain": 288, "add_option_group": 288, "suppress_usag": 288, "option_list": 288, "standard_option_list": 288, "option_class": 288, "indentedhelpformatt": 288, "titledhelpformatt": 288, "add_help_opt": 288, "make_opt": 288, "irrelev": [288, 464, 478], "suppress_help": 288, "fbar": 288, "mypkg": [288, 383], "check_choic": 288, "poke": 288, "set_conflict_handl": 288, "intellig": [288, 291, 293], "whittl": 288, "overkil": 288, "rarg": 288, "optionvalu": 288, "record_foo_seen": 288, "saw_foo": 288, "check_ord": 288, "moon": 288, "check_moon": 288, "is_moon_ful": 288, "store_valu": 288, "hairi": 288, "intricaci": 288, "stab": 288, "vararg_callback": 288, "floatabl": 288, "vararg_attr": 288, "check_mytyp": 288, "wind": 288, "sillier": 288, "check_complex": 288, "myoption": 288, "take_act": 288, "ding": [288, 477, 478], "dong": [288, 467, 468, 469, 476, 477, 478], "ensure_valu": 288, "optparse_pars": 288, "valv": 288, "threat": 289, "inaccess": [289, 390, 423, 457, 460, 472, 478], "dcxx": 289, "nonsens": [289, 472], "macosx_deployment_target": [289, 478], "ruid": 289, "euid": 289, "suid": 289, "rgid": 289, "egid": 289, "sgid": 289, "superus": 289, "nstype": 289, "reassoci": 289, "clone_new": 289, "pgrp": 289, "sysnam": [289, 299], "disassoci": 289, "clone_": 289, "decept": [289, 460], "fd_low": [289, 478], "fd_high": [289, 478], "offset_src": 289, "offset_dst": 289, "procf": [289, 478], "sysf": 289, "fd2": 289, "filedescriptor": 289, "95": [289, 310, 314, 339, 377, 460, 463], "98": [289, 333, 340, 400, 463, 464, 470], "_commit": 289, "leader": [289, 327, 478], "0o777": [289, 292], "sc_iov_max": [289, 333], "out_fd": [289, 478], "in_fd": [289, 478], "pg": 289, "stdout_fileno": 289, "close_fd": [289, 344, 461, 470, 475, 476, 478], "faccessat": 289, "effective_id": [289, 471], "xxxxxxxx": [289, 430], "xxxx": [289, 430, 478], "xxxxxxxxxxxx": 289, "vista": [289, 371, 478], "repars": [289, 476, 478], "junction": [289, 290, 292, 328, 469, 476, 478], "exist_ok": [289, 292, 473, 478], "21082": [289, 478], "rendezv": [289, 470], "0o600": 289, "prune": [289, 292, 478], "opendir": [289, 478], "readdir": [289, 473], "findfirstfilew": [289, 478], "findnextfilew": 289, "scandir_path": 289, "dirent": 289, "d_type": 289, "dt_unknown": 289, "statinfo": 289, "33188": 289, "7876932": 289, "234881026": 289, "264": [289, 343, 459], "1297230295": 289, "1297230027": 289, "fat32": [289, 478], "dwfileattribut": [289, 473], "by_handle_file_inform": [289, 473], "getfileinformationbyhandl": [289, 473], "file_attribute_": 289, "io_reparse_tag_": 289, "f_bsize": 289, "f_frsize": 289, "f_block": 289, "f_bfree": 289, "f_bavail": 289, "f_file": 289, "f_ffree": 289, "f_favail": 289, "f_flag": 289, "f_namemax": 289, "f_fsid": [289, 478], "st_rdon": 289, "st_nosuid": 289, "st_nodev": 289, "st_noexec": 289, "st_synchron": 289, "st_mandlock": 289, "st_write": 289, "st_append": 289, "st_immut": 289, "st_noatim": 289, "st_nodiratim": 289, "st_relatim": 289, "atim": 289, "target_is_directori": [289, 292, 471], "morph": 289, "unprivileg": 289, "secreatesymboliclinkprivileg": 289, "unelev": 289, "atime_n": 289, "mtime_n": 289, "dirpath": [289, 292], "resumpt": [289, 474, 478], "cvs": [289, 457, 458, 459, 460, 461, 462, 478], "dirfd": 289, "rootfd": 289, "mfd_": 289, "memfd": [289, 478], "mfd_huge": 289, "initv": 289, "efc_cloexec": 289, "adddlldirectori": 289, "exit_success": 289, "retryabl": 289, "cygwin": [289, 348, 355, 456, 458, 460, 476, 478], "file_act": [289, 478], "setpgroup": [289, 478], "resetid": [289, 478], "setsigmask": [289, 478], "setsigdef": [289, 478], "new_fd": 289, "posix_spawn_file_actions_addopen": 289, "posix_spawn_file_actions_addclos": 289, "posix_spawn_file_actions_adddup2": 289, "posix_spawn_setpgroup": 289, "posix_spawn_resetid": 289, "posix_spawn_setsid": 289, "posix_spawn_setsid_np": 289, "posix_spawn_setsigmask": 289, "sigdef": 289, "posix_spawn_setsigdef": 289, "posix_spawn_setschedparam": 289, "posix_spawn_setschedul": 289, "after_in_par": 289, "after_in_child": 289, "shellexecut": [289, 478], "comspec": [289, 344, 471, 472], "children_us": 289, "children_system": 289, "getprocesstim": 289, "idtyp": 289, "siginfo_t": [289, 329, 478], "si_pid": [289, 329], "si_uid": [289, 329], "si_signo": [289, 329], "si_status": [289, 329], "si_cod": [289, 329, 477, 478], "ptrace": [289, 478], "robin": [289, 408, 437, 476, 478], "quantum": 289, "undetermin": 289, "unobtain": 289, "sc_minsigstksz": [289, 478], "entropi": [289, 337, 474, 478], "environment": [289, 390, 450, 478], "unnecessarili": [289, 478], "524": [289, 474, 478], "bcryptgenrandom": [289, 468, 478], "getentropi": [289, 473, 478], "cryptgenrandom": [289, 468, 478], "ntpath": [290, 475, 478], "userprofil": [290, 476, 478], "homepath": 290, "homedr": 290, "getvolumepathnam": 290, "std": [290, 348, 361, 462, 478], "1003": 290, "path1": 290, "path2": 290, "fp1": 290, "fp2": 290, "stat1": 290, "stat2": 290, "cshrc": [290, 454], "soundcard": 291, "audiodev": [291, 463], "dsp": 291, "player": [291, 315, 341, 379], "linuxaudiodev": [291, 457, 460, 463], "mixerdev": 291, "sndctl_dsp_setfmt": 291, "sndctl_dsp_sync": 291, "afmt_mu_law": 291, "afmt_a_law": 291, "afmt_ima_adpcm": 291, "afmt_u8": 291, "afmt_s16_l": 291, "afmt_s16_b": 291, "68k": 291, "powerpc": [291, 461, 462, 463, 478], "afmt_s8": 291, "afmt_u16_l": 291, "afmt_u16_b": 291, "afmt_queri": 291, "monophon": 291, "stereophon": 291, "sampler": 291, "11025": 291, "22050": 291, "96000": 291, "dvd": 291, "mixabl": 291, "sound_mixer_pcm": 291, "sound_mixer_synth": 291, "sound_mixer_": 291, "pcm": [291, 396], "sound_mixer_volum": 291, "gravi": 291, "ultrasound": 291, "left_volum": 291, "right_volum": 291, "microphon": 291, "setrecsrc": 291, "sound_mixer_m": 291, "test_pathlib": [292, 478], "pathseg": 292, "lib64": [292, 348, 349, 451, 477, 478], "apache2": 292, "an_absolute_path": 292, "regroup": 292, "case_sensit": [292, 469, 478], "walk_up": [292, 469, 478], "941": 292, "error_messag": 292, "subpath": [292, 418], "antoin": [292, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "751": 292, "851": 292, "mypath": 292, "session_id": 292, "798": 292, "unrepresent": [292, 476, 478], "956": 292, "1327883547": 292, "852554": 292, "33277": 292, "0o444": 292, "33060": 292, "nonexistentfil": 292, "film": [292, 381], "inordin": 292, "_templat": 292, "_build": 292, "_static": [292, 478], "top_down": 292, "on_error": [292, 381], "mimick": 292, "my_binary_fil": 292, "my_text_fil": 292, "mylink": 292, "other_path": 292, "missing_ok": [292, 478], "abnorm": [293, 348, 389, 470], "pdbrc": [293, 468, 470, 474, 477, 478], "nosigint": [293, 470], "readrc": [293, 474, 478], "elp": 293, "hel": 293, "_frame": [293, 478], "_retval": 293, "_except": 293, "reak": 293, "tbreak": 293, "ear": 293, "bpnumber": 293, "some_vari": 293, "tep": 293, "unt": 293, "il": [293, 337, 429], "eturn": 293, "ont": 293, "inu": 293, "ump": 293, "ist": 293, "longlist": 293, "rgs": 293, "whati": [293, 478], "undisplay": [293, 470], "classinst": 293, "ps": [293, 304, 344, 394], "unalia": 293, "list_opt": 293, "uit": 293, "retval": [293, 458], "tackl": [295, 457], "3154": [295, 472, 478], "574": [295, 377, 476, 478], "buffer_callback": 295, "therein": 295, "superflu": [295, 333, 336, 478], "referenti": 295, "elig": [295, 425, 470], "picklestr": [295, 296], "worthwhil": [295, 462, 471], "list_of_item": 295, "sixth": [295, 459, 476], "memorecord": 295, "dbpickler": 295, "dbunpickl": 295, "type_tag": 295, "key_id": 295, "fight": [295, 470], "italian": [295, 379], "disturb": [295, 478], "reduce_someclass": 295, "mypickl": 295, "textread": 295, "new_read": 295, "myclass": [295, 423, 435], "my_attribut": 295, "unpickled_class": 295, "massiv": [295, 461, 462, 473, 478], "eschew": 295, "reconstructor": 295, "zerocopybytearray": 295, "_reconstruct": 295, "unseri": [295, 470], "new_b": 295, "nsystem": 295, "ntr": 295, "inoffens": 295, "safe_builtin": 295, "restrictedunpickl": 295, "restricted_load": 295, "cbuiltin": [295, 466], "neval": 295, "4j": [295, 422, 430, 437, 463], "intim": 296, "binint1": 296, "tuple2": 296, "binput": [296, 478], "indentlevel": 296, "opcodeinfo": 296, "pipefil": 297, "module_find": 298, "ispkg": 298, "pth": [298, 330, 348, 349, 450, 457, 474, 478], "path_item": 298, "module_or_nam": 298, "12915": [298, 478], "pyramid": 298, "is_64bit": 299, "amdk6": 299, "buildno": 299, "builddat": [299, 478], "scm": 299, "dega": 299, "vminfo": 299, "osinfo": 299, "vm_name": 299, "vm_releas": 299, "vm_vendor": 299, "os_nam": 299, "os_vers": 299, "os_arch": 299, "csd": 299, "uniprocessor": 299, "enterpris": [299, 478], "iotuap": 299, "serverstandard": 299, "nanoserv": 299, "iot": [299, 478], "versioninfo": 299, "dev_stag": 299, "non_release_vers": 299, "16384": 299, "freedesktop": [299, 467, 471, 478], "pretty_nam": 299, "id_lik": 299, "version_id": 299, "variant_id": 299, "get_like_distro": 299, "ios": 300, "nskeyedarchiv": [300, 476], "nskeyedunarchiv": 300, "invalidfileexcept": [300, 478], "pl": 300, "astr": 300, "doodah": 300, "afloat": 300, "anint": 300, "adict": 300, "anotherstr": 300, "athirdstr": 300, "xe4ssig": 300, "ma": [300, 467, 468, 478], "atruevalu": 300, "afalsevalu": 300, "gunk": 300, "somemoredata": 300, "adat": 300, "1939": 301, "2595": 301, "obsolesc": 301, "mailserv": 301, "pop3_port": 301, "pop3_ssl_port": 301, "995": [301, 474], "fetchmail": 301, "noncompli": 301, "2449": 301, "mesg_num": 301, "eudora": 301, "qpop": 301, "disconnect": [301, 331, 336, 400, 476, 478], "signoff": 301, "howmuch": 301, "mesgnum": 301, "6856": [301, 464, 470, 473, 478], "nummessag": 301, "off_t": 302, "getconf": 302, "lfs_cflag": 302, "d_largefile64_sourc": 302, "d_file_offset_bit": 302, "sort_dict": [303, 476, 478], "underscore_numb": [303, 467, 478], "tup": [303, 379, 381], "dead": [303, 397, 435, 436, 451, 460, 465, 470, 478], "sampleproject": 303, "project_info": 303, "author_email": [303, 478], "pypa": [303, 394], "googlegroup": 303, "bugtrack_url": 303, "osi": 303, "webpag": 303, "description_content_typ": 303, "docs_url": 303, "download_url": [303, 462], "last_day": 303, "last_month": 303, "last_week": 303, "home_pag": 303, "maintainer_email": [303, 478], "package_url": 303, "project_url": 303, "homepag": 303, "release_url": 303, "requires_dist": 303, "pstat": [304, 446, 458, 462, 478], "lsprof": 304, "rosen": 304, "ted": 304, "czotter": 304, "imit": [304, 463], "ncall": [304, 478], "tottim": 304, "percal": 304, "cumtim": [304, 478], "759": 304, "937": 304, "598": 304, "_code": 304, "435": [304, 472], "_parse_sub": 304, "induc": [304, 420], "subfunct": [304, 471], "restat": 304, "output_fil": 304, "sort_ord": 304, "sortkey": 304, "cull": 304, "timeunit": 304, "subcal": 304, "pr": [304, 457, 478], "sortbi": 304, "coalesc": 304, "printout": [304, 478], "pcall": 304, "nfl": 304, "percentag": [304, 341, 441, 463, 478], "statsprofil": [304, 478], "functionprofil": [304, 478], "tick": [304, 318, 361], "lag": 304, "calibr": 304, "probabilist": 304, "god": 304, "8ghz": 304, "i5": 304, "04e": 304, "your_computed_bia": 304, "your_time_func": 304, "lone": [304, 331, 425, 478], "cleanest": 304, "your_integer_time_func": 304, "_lsprof": [304, 478], "thorough": [305, 315, 333, 340, 470, 478], "master_read": 305, "stdin_read": 305, "baffl": 305, "pseudotermin": 305, "typescript": 305, "use_python": 305, "pw_name": 306, "pw_passwd": 306, "pw_uid": [306, 344], "pw_gid": 306, "pw_geco": 306, "pw_dir": 306, "pw_shell": 306, "dfile": 307, "dorais": 307, "filen": 307, "pagin": 309, "pager": [309, 478], "pythondoc": [309, 478], "pyexpat": [310, 404, 421, 451, 457, 460, 462, 463, 464, 478], "unauthent": [310, 337, 404, 406, 407, 408, 409, 414, 415, 478], "namespace_separ": 310, "repertoir": [310, 331, 370, 463], "xmlns": [310, 390, 408, 464, 478], "elem1": [310, 462], "elem2": [310, 462], "isfin": 310, "xml_param_entity_parsing_nev": 310, "xml_param_entity_parsing_unless_standalon": 310, "xml_param_entity_parsing_alway": 310, "handlernam": 310, "doctypenam": 310, "has_internal_subset": 310, "elnam": 310, "attnam": 310, "idref": 310, "entitynam": 310, "notationnam": 310, "ndata": [310, 410], "is_parameter_ent": 310, "some_xml_docu": 310, "start_el": [310, 407], "end_el": [310, 407], "char_data": 310, "child1": [310, 384], "child2": [310, 384], "xml_ctype_ani": 310, "xml_ctype_choic": 310, "xml_ctype_empti": 310, "xml_ctype_mix": 310, "xml_ctype_nam": 310, "xml_ctype_seq": 310, "xml_cquant_non": 310, "xml_cquant_opt": 310, "xml_cquant_plus": 310, "xml_cquant_rep": 310, "xml_error_": 310, "constant_nam": 310, "undeclar": 310, "amplif": 310, "breach": [310, 421], "rec": [310, 406, 408], "xml11": [310, 406, 408], "20060816": [310, 406, 408], "encodingdecl": [310, 406, 408], "mise": 314, "19937": 314, "matsumoto": [314, 421], "nishimura": [314, 421], "equidistribut": 314, "vol": 314, "cum_weight": 314, "2080": 314, "10000000": 314, "lambd": [314, 478], "mu": [314, 339, 476, 478], "sigma": [314, 339, 476], "kappa": 314, "pareto": 314, "weibul": 314, "seeder": 314, "37444887175646646": 314, "1800146073117523": 314, "148957571865031": 314, "roulett": 314, "spin": [314, 478], "jack": [314, 315, 340, 392, 421, 437, 441, 459, 460, 462, 466, 478], "king": [314, 315, 457, 476, 478], "coin": 314, "settl": [314, 463], "10_000": [314, 339], "4169": 314, "quartil": [314, 339, 476], "2_500": 314, "7_500": 314, "7958": 314, "thoughtco": 314, "3126155": 314, "73": [314, 377, 447, 461, 476, 477], "denni": [314, 467, 468, 477, 478], "shasha": 314, "manda": 314, "wilson": [314, 460, 461, 473, 477, 478], "drug": 314, "placebo": 314, "observed_diff": 314, "new_diff": 314, "reshuffl": 314, "4f": 314, "hypothesi": [314, 478], "average_arrival_interv": 314, "average_service_tim": 314, "stdev_service_tim": 314, "num_serv": 314, "arrival_tim": 314, "1_000_000": [314, 474, 478], "next_server_avail": 314, "service_dur": 314, "service_complet": 314, "jake": [314, 464, 466, 476, 478], "vanderpla": 314, "econom": 314, "norvig": 314, "random_product": 314, "random_permut": 314, "random_combin": 314, "random_combination_with_replac": 314, "05954861408025609": 314, "fullrandom": 314, "0x10_0000_0000_0000": 314, "87925541791544": 314, "allen": [314, 337, 470, 478], "downey": 314, "frie09": 315, "gentler": 315, "nfoo2": 315, "possess": [315, 340, 400, 468, 478], "aaaab": 315, "aaab": 315, "aaaaaa": 315, "ailmsux": 315, "imsx": 315, "x7f": 315, "isaac": 315, "asimov": 315, "lookbehind": [315, 473, 478], "theth": 315, "bfoo": 315, "foo3": 315, "py2": [315, 448, 470, 478], "typographi": 315, "nicer": [315, 385, 478], "0a3b9": 315, "foot": [315, 339, 446], "fell": [315, 436, 446, 458, 459, 460], "z_": [315, 430], "z_0": 315, "npy_": 315, "npy_myfunc": 315, "dashrepl": 315, "matchobj": 315, "pro": 315, "gram": [315, 426], "sand": 315, "unmatch": [315, 341, 389, 473, 478], "new_str": 315, "number_of_subs_mad": 315, "legal_char": 315, "abcdefghijklmnopqrstuvwxyz0123456789": 315, "digits_r": 315, "ogr": 315, "doggi": 315, "og": [315, 357, 478], "groupn": 315, "physicist": 315, "reynold": 315, "a1b2c3": 315, "c3": [315, 389, 423, 460, 471], "1632": 315, "cba": 315, "remove_thi": 315, "toni": [315, 463, 478], "tiremove_thisg": 315, "tiger": 315, "displaymatch": 315, "poker": [315, 379], "9tjqk": 315, "akt5q": 315, "akt5": 315, "akt": 315, "727ak": 315, "717ak": 315, "7s": 315, "717": 315, "718ak": 315, "354aa": 315, "5c": 315, "ee": [315, 340, 466], "nb": [315, 465], "nx": 315, "ross": [315, 464, 466, 471, 477, 478], "mcfluff": 315, "834": 315, "345": [315, 461, 466], "155": 315, "elm": 315, "ronald": [315, 462, 463, 464, 470, 472, 477], "heathmor": 315, "892": 315, "3428": 315, "finley": 315, "avenu": [315, 421, 459], "frank": [315, 478], "burger": 315, "925": 315, "541": 315, "7625": 315, "662": 315, "dogwood": 315, "heather": 315, "albrecht": 315, "548": 315, "326": 315, "4584": 315, "919": 315, "park": 315, "telephon": 315, "hous": [315, 474], "inner_word": 315, "professor": 315, "abdolmalek": 315, "poefsrosr": 315, "aealmlobdk": 315, "pslaee": 315, "reorpt": 315, "abnsec": 315, "plmrptoy": 315, "pofsros": 315, "aodlambelk": 315, "plase": 315, "reoprt": 315, "yuor": 315, "asnebc": 315, "potlmrpi": 315, "disguis": [315, 423], "polic": 315, "ly": 315, "02d": 315, "scanner": [315, 352, 373, 472, 478], "gosub": 315, "token_specif": 315, "tok_regex": 315, "line_start": 315, "inputrc": [316, 478], "libedit": [316, 478], "editlin": [316, 451, 478], "editrc": [316, 478], "rl_complet": 316, "rl_parse_and_bind": 316, "rl_read_init_fil": 316, "rl_line_buff": 316, "rl_insert_text": 316, "rl_redisplay": 316, "read_histori": 316, "write_histori": [316, 478], "nelement": 316, "append_histori": 316, "history_truncate_fil": 316, "history_get": 316, "remove_histori": 316, "replace_history_entri": 316, "rl_startup_hook": 316, "rl_pre_input_hook": 316, "entry_func": 316, "rl_completion_match": 316, "rl_attempted_completion_funct": 316, "rl_completion_typ": 316, "libreadlin": [316, 478], "rl_completer_word_break_charact": 316, "rl_completion_display_matches_hook": 316, "longest_match_length": 316, "python_histori": [316, 330, 442], "histfil": 316, "unruli": 316, "h_len": 316, "prev_h_len": 316, "new_h_len": 316, "historyconsol": 316, "init_histori": 316, "save_histori": 316, "repr_typ": 317, "subobj": 317, "myrepr": 317, "repr_textiowrapp": 317, "cap_sys_resourc": 318, "sigxcpu": 318, "rlim_cur": 318, "mbuf": 318, "overcommit": 318, "sysctl": 318, "rusage_": 318, "ru_utim": 318, "ru_stim": 318, "ru_maxrss": 318, "ru_ixrss": 318, "ru_idrss": 318, "ru_isrss": 318, "ru_minflt": 318, "ru_majflt": 318, "ru_nswap": 318, "ru_inblock": 318, "ru_oublock": 318, "ru_msgsnd": 318, "ru_msgrcv": 318, "ru_nsign": 318, "ru_nvcsw": 318, "voluntari": 318, "ru_nivcsw": 318, "involuntari": 318, "mod_nam": 320, "init_glob": 320, "run_nam": 320, "alter_si": 320, "path_nam": 320, "snow": [320, 468, 469, 471, 472, 473, 474, 475, 476], "timefunc": [321, 471], "delayfunc": 321, "print_tim": 321, "print_some_tim": 321, "1_650_000_000": 321, "1652342830": 321, "3640375": 321, "3642538": 321, "3643398": 321, "1652342835": 321, "3694863": 321, "3696074": 321, "1652342840": 321, "369612": 321, "3697174": 321, "soonest": [321, 471], "xebr": 322, "x17d": 322, "xae": 322, "xd4": 322, "xe3": [322, 463], "xb6": 322, "xe2": [322, 463], "xebp1": 322, "x8b": 322, "f9bf78b9a18ce6d46a0cd2b0b86df9da": 322, "drmhze6epcv0fn_81bj": 322, "token_": 322, "xkcd": 322, "passphras": 322, "epoll_create1": 324, "epoll_cloexec": 324, "kq_filter_read": 324, "kq_ev_add": 324, "rlist": 324, "wlist": 324, "xlist": 324, "parameterless": 324, "winsock": [324, 333, 478], "eventmask": [324, 463], "pollin": 324, "pollpri": 324, "pollout": 324, "epollin": 324, "epollout": 324, "epollpri": 324, "urgent": 324, "epollerr": 324, "assoc": 324, "epollhup": 324, "epollet": 324, "epolloneshot": 324, "epollexclus": [324, 478], "epollrdhup": [324, 478], "epollrdnorm": 324, "epollrdband": 324, "epollwrnorm": 324, "epollwrband": 324, "epollmsg": 324, "maxev": 324, "scalabl": [324, 457], "fds": [324, 333, 478], "pollerr": 324, "pollhup": 324, "hung": 324, "pollrdhup": [324, 478], "pollnval": 324, "changelist": 324, "max_ev": 324, "eventlist": 324, "sektion": 324, "kq_filter_writ": 324, "kq_filter_aio": 324, "aio": 324, "kq_filter_vnod": 324, "kq_filter_proc": 324, "kq_filter_netdev": 324, "kq_filter_sign": 324, "kq_filter_tim": 324, "kq_ev_delet": 324, "kq_ev_en": 324, "permitscontrol": 324, "kq_ev_dis": 324, "disablesev": 324, "kq_ev_oneshot": 324, "kq_ev_clear": 324, "kq_ev_sysflag": 324, "kq_ev_flag1": 324, "kq_ev_eof": 324, "kq_ev_error": 324, "kq_note_lowat": 324, "kq_note_delet": 324, "kq_note_writ": 324, "kq_note_extend": 324, "kq_note_attrib": 324, "kq_note_link": 324, "kq_note_renam": 324, "kq_note_revok": 324, "revok": 324, "kq_note_exit": 324, "kq_note_fork": 324, "kq_note_exec": 324, "kq_note_pctrlmask": 324, "kq_note_pdatamask": 324, "kq_note_track": 324, "kq_note_child": 324, "note_track": 324, "kq_note_trackerr": 324, "kq_note_linkup": 324, "kq_note_linkdown": 324, "kq_note_linkinv": 324, "sel": [325, 329], "writeback": 326, "handier": 326, "keyencod": 326, "set_loc": 326, "bsddb": [326, 460, 463, 464], "pybsddb": [326, 460, 463, 464, 465], "hashopen": 326, "btopen": 326, "rnopen": 326, "klist": 326, "minilanguag": 327, "split_command": 327, "boom": [327, 384, 385], "plug": [327, 478], "remote_command": 327, "pushback": 327, "newstream": 327, "newfil": 327, "lexer": 327, "beginn": 327, "donotsepar": 327, "fsrc": 328, "fdst": 328, "uncontrol": 328, "copy_funct": [328, 470, 473, 478], "ignore_dangling_symlink": [328, 470, 478], "dirs_exist_ok": [328, 476, 478], "onexc": [328, 469, 478], "suscept": [328, 456, 478], "excinfo": 328, "mv": [328, 471], "needcurrentdirectoryforexepathw": [328, 469], "nodefaultcurrentdirectoryinexepath": 328, "python33": 328, "srcname": 328, "33671": [328, 476, 478], "userspac": [328, 471, 476], "outfd": [328, 476], "infd": [328, 476], "fcopyfil": [328, 478], "_logpath": 328, "reattempt": 328, "remove_readon": 328, "xztar": [328, 473, 478], "dry_run": [328, 357, 478], "gztar": [328, 470, 474, 478], "bztar": [328, 470], "pax": [328, 353, 463, 476, 478], "extra_arg": [328, 470], "supports_root_dir": 328, "archive_nam": 328, "myarchiv": [328, 447, 470], "tarek": [328, 350, 463, 464, 470, 473, 478], "tzvf": 328, "drwx": 328, "609": 328, "authorized_key": 328, "id_dsa": 328, "1675": 328, "id_rsa": 328, "37192": 328, "known_host": 328, "please_add": 328, "do_not_add": 328, "my_arch": 328, "uninterrupt": 329, "air": 329, "ctrl_": 329, "sigprocmask": 329, "sigquit": [329, 344], "bus": [329, 400], "hangup": 329, "death": [329, 471], "coprocessor": 329, "sigvtalrm": 329, "sigprof": 329, "siginfo": 329, "sigstop": 329, "warn_on_full_buff": [329, 475, 478], "wakeup": [329, 471, 475, 478], "sigset": [329, 478], "si_errno": 329, "si_band": [329, 478], "ttys0": 329, "spamcontext": 329, "exc_val": [329, 340], "interrupt_read": 329, "interrupt_writ": 329, "subsubdirectori": 330, "bletch": 330, "sitecustom": [330, 349, 433, 464, 472, 478], "usercustom": [330, 349, 433, 472, 478], "appdata": [330, 456, 463], "pythonuserbas": [330, 450, 463], "sitedir": 330, "known_path": 330, "esmtp": 331, "821": 331, "1869": 331, "local_hostnam": 331, "fqdn": 331, "lmtp_port": 331, "smtp_code": 331, "smtp_error": 331, "helo_resp": 331, "ehlo_resp": 331, "does_esmtp": 331, "esmtp_featur": 331, "vrfi": 331, "foil": 331, "spammer": 331, "initial_response_ok": [331, 478], "4954": [331, 478], "auth_cram_md5": 331, "auth_plain": 331, "auth_login": [331, 478], "from_addr": [331, 470], "to_addr": [331, 470], "mail_opt": [331, 473, 478], "rcpt_option": 331, "8bitmim": [331, 473, 478], "dsn": 331, "rcpt": 331, "smtpnotsupport": 331, "hcom": 332, "sndr": 332, "sndt": 332, "voc": 332, "8svx": 332, "sb": [332, 354], "ub": 332, "ul": [332, 406, 459], "sampling_r": 332, "bits_per_sampl": 332, "sndtool": 332, "lab": [332, 421, 435, 457, 459, 460], "waveform": [332, 396, 401], "transliter": 333, "dare": 333, "inaddr_ani": 333, "inaddr_broadcast": 333, "flowinfo": 333, "sin6_flowinfo": 333, "sin6_scope_id": 333, "sockaddr_in6": 333, "af_netlink": [333, 462], "tipc": [333, 463], "af_tipc": 333, "addr_typ": 333, "v2": [333, 343, 421, 462, 463, 478], "tipc_addr_nameseq": 333, "tipc_addr_nam": 333, "tipc_addr_id": 333, "tipc_zone_scop": 333, "tipc_cluster_scop": 333, "tipc_node_scop": 333, "can0": 333, "rx_addr": 333, "tx_addr": 333, "pgn": 333, "ecu": 333, "sysproto_control": 333, "pf_system": [333, 471], "af_bluetooth": [333, 478], "btproto_l2cap": 333, "bdaddr": 333, "psm": 333, "bluetooth": [333, 478], "btproto_rfcomm": 333, "btproto_hci": 333, "device_id": 333, "btproto_sco": 333, "feat": 333, "aead": [333, 337], "skcipher": 333, "rng": 333, "aes": [333, 337, 460], "drbg_nopr_ctr_aes256": 333, "32bit": [333, 459, 478], "vsock": 333, "ifnam": 333, "pkttype": 333, "hatyp": 333, "ethernet": 333, "ethertype_": [333, 478], "packet_host": 333, "packet_broadcast": 333, "packet_multicast": 333, "packet_otherhost": 333, "promiscu": 333, "packet_outgo": 333, "arp": [333, 478], "qualcomm": [333, 478], "ipproto_udplit": [333, 478], "udplite_send_cscov": [333, 478], "udplite_recv_cscov": [333, 478], "hyper": [333, 478], "vm_id": 333, "service_id": 333, "vmid": 333, "v6": 333, "nondeterminist": 333, "h_errno": 333, "hstrerror": 333, "gai_strerror": 333, "eai_": 333, "af_": [333, 472], "sock_": [333, 472, 478], "addressfamili": 333, "socketkind": 333, "so_": 333, "msg_": 333, "sol_": 333, "scm_": 333, "ipproto_": 333, "ipport_": 333, "inaddr_": 333, "ip_": [333, 478], "ipv6_": 333, "ai_": 333, "ni_": 333, "tcp_": [333, 478], "so_domain": [333, 474], "so_protocol": [333, 474], "so_peersec": [333, 474], "so_passsec": [333, 474], "tcp_user_timeout": [333, 474, 475, 478], "tcp_congest": [333, 474, 475, 478], "tcp_fastopen": [333, 478], "tcp_keepcnt": [333, 478], "tcp_notsent_lowat": [333, 475, 478], "tcp_keepidl": [333, 478], "tcp_keepintvl": [333, 478], "ip_recvto": [333, 467, 478], "tcp_keepal": [333, 478], "tcp_connection_info": [333, 478], "tcp_info": 333, "so_rtabl": [333, 478], "so_user_cooki": [333, 478], "so_mark": 333, "tcp_md5sig": [333, 478], "tcp_thin_linear_timeout": [333, 478], "tcp_thin_dupack": [333, 478], "tcp_repair": [333, 478], "tcp_repair_queu": [333, 478], "tcp_queue_seq": [333, 478], "tcp_repair_opt": [333, 478], "tcp_timestamp": [333, 478], "tcp_cc_info": [333, 478], "tcp_save_syn": [333, 478], "tcp_saved_syn": [333, 478], "tcp_repair_window": [333, 478], "tcp_fastopen_connect": [333, 478], "tcp_ulp": [333, 478], "tcp_md5sig_ext": [333, 478], "tcp_fastopen_key": [333, 478], "tcp_fastopen_no_cooki": [333, 478], "tcp_zerocopy_rec": [333, 478], "tcp_inq": [333, 478], "tcp_tx_delay": [333, 478], "ip_pktinfo": [333, 478], "ip_unblock_sourc": 333, "ip_block_sourc": 333, "ip_add_source_membership": 333, "ip_drop_source_membership": 333, "sol_can_": 333, "can_": 333, "can_bcm_": 333, "bcm": [333, 478], "can_bcm_can_fd_fram": 333, "can_raw": 333, "15765": 333, "sae": 333, "j1939": [333, 478], "divert": [333, 478], "packet_": 333, "rds_": 333, "rcvall_": 333, "wsaioctl": [333, 463], "tipc_": 333, "alg_": [333, 474], "vmaddr": 333, "so_vm": 333, "so_passcr": 333, "802": 333, "overrul": 333, "ipproto_mptcp": [333, 467, 478], "global_default": 333, "dualstack_ipv6": 333, "ai_numerichost": 333, "canonnam": 333, "ai_canonnam": 333, "ipproto_tcp": 333, "2606": 333, "2800": 333, "220": [333, 337, 436], "248": 333, "1893": 333, "25c8": 333, "1946": 333, "93": [333, 476, 477], "184": 333, "216": [333, 441, 444], "aliaslist": 333, "ipaddrlist": 333, "icmp": 333, "ip_str": 333, "quad": [333, 459, 478], "in_addr": 333, "packed_ip": 333, "in6_addr": 333, "5aef": 333, "2b": [333, 474], "ancillari": [333, 471, 478], "3542": [333, 478], "fb605b73": 333, "aac2": 333, "49a6": 333, "9a2f": 333, "25416aea0573": 333, "ethernet_32770": 333, "vethernet": 333, "if_nam": 333, "if_index": 333, "scm_right": 333, "maxfd": 333, "optnam": [333, 474], "ancbufs": 333, "ancdata": 333, "msg_flag": 333, "cmsg_level": 333, "cmsg_type": 333, "cmsg_data": 333, "unconnect": [333, 463], "sol_socket": 333, "scatter": [333, 459, 460, 464], "b1": [333, 379], "b2": [333, 379], "0123456789": [333, 340, 341], "b3": 333, "lamb": [333, 436, 469], "iv": 333, "assoclen": 333, "optlen": [333, 474], "optval": 333, "halv": [333, 461, 464], "shut_rd": 333, "shut_wr": 333, "shut_rdwr": [333, 337, 478], "50007": 333, "af": 333, "ipproto_ip": 333, "ip_hdrincl": 333, "rcvall_on": 333, "65565": 333, "rcvall_off": 333, "can_fram": 333, "can_frame_fmt": 333, "ib3x8": 333, "can_frame_s": 333, "build_can_fram": 333, "can_id": 333, "can_dlc": 333, "dissect_can_fram": 333, "vcan0": 333, "3bsd": 333, "stuart": 333, "sechrest": 333, "leffler": 333, "supplementari": 333, "3493": 333, "bind_and_activ": [334, 415, 463], "infrequ": [334, 478], "abrupt": [334, 337, 355, 360, 478], "daemon_thread": 334, "autonom": [334, 421], "block_on_clos": [334, 475, 478], "deaf": [334, 470], "poll_interv": 334, "mytcphandl": 334, "tcpclient": 334, "myudphandl": 334, "threadedtcprequesthandl": 334, "cur_thread": 334, "threadedtcpserv": 334, "server_thread": 334, "sp_namp": 335, "sp_pwdp": 335, "sp_lstchg": 335, "sp_min": 335, "sp_max": 335, "sp_warn": 335, "sp_inact": 335, "sp_expir": 335, "sp_flag": 335, "nonstandard": [336, 451, 462], "postgresql": [336, 462], "gerhard": [336, 459, 462, 463, 464], "ring": [336, 459, 462, 463, 464], "249": [336, 462, 469, 478], "w3school": 336, "sqlite_mast": 336, "hollywood": 336, "bowl": 336, "1982": [336, 339, 361], "1983": [336, 339], "brian": [336, 429, 457, 460, 461, 463, 464, 470, 471, 472, 475, 478], "1979": [336, 339], "new_con": 336, "new_cur": 336, "detect_typ": 336, "check_same_thread": 336, "cached_stat": 336, "evil_trac": 336, "authorizer_callback": 336, "qmark": 336, "sqlite_threadsaf": 336, "pysqlit": [336, 462, 464, 470], "c3ref": 336, "c_dbconfig_defens": 336, "rowid": 336, "zeroblob": 336, "sql_script": 336, "md5sum": [336, 478], "acbd18db4cc2f85cedef654fccc4a4d8": 336, "n_arg": 336, "aggregate_class": 336, "mysum": 336, "num_param": 336, "windowfunct": 336, "udfwinfunc": 336, "windowsumint": 336, "sumint": 336, "sum_i": 336, "collate_revers": 336, "4th": 336, "5th": 336, "progress_handl": 336, "trace_callback": 336, "fulltext": [336, 470], "fts3": 336, "ingredi": 336, "broccoli": 336, "stew": 336, "pepper": 336, "chees": [336, 436, 449], "pumpkin": 336, "onion": 336, "garlic": 336, "celeri": 336, "flour": 336, "butter": 336, "1000000000": 336, "sqlite_limit_sql_length": [336, 478], "sqlite_limit_attach": 336, "sqlite_dbconfig": 336, "uncommit": [336, 470], "austria": [336, 408], "sterreich": 336, "barfoo": 336, "dml": [336, 478], "statment": 336, "row1": 336, "row2": 336, "blob_col": 336, "246": [336, 463, 478], "stock": [336, 462, 470, 478], "first_appear": 336, "1957": 336, "__conform__": [336, 478], "adapt_point": 336, "convert_point": 336, "adapt_date_iso": 336, "adapt_datetime_iso": 336, "adapt_datetime_epoch": 336, "convert_d": 336, "convert_datetim": 336, "convert_timestamp": 336, "1984": 336, "varchar": 336, "nosuchdb": 336, "mem1": 336, "con1": 336, "con2": 336, "6378": 336, "namedtuple_factori": 336, "ddl": [336, 474, 478], "644": [337, 467, 469, 478], "ssock": 337, "cert": [337, 455, 464, 472, 478], "cabundl": 337, "pem": [337, 455, 472, 478], "certchain": 337, "8443": 337, "cafil": [337, 390, 464, 472], "capath": [337, 390, 472], "cadata": [337, 472, 478], "rc4": [337, 478], "sslkeylogfil": [337, 478], "ssl3": 337, "chacha20": [337, 474, 478], "poly1305": [337, 474, 478], "superimpos": 337, "x509": [337, 390], "certificate_verify_fail": 337, "prng": 337, "csprng": [337, 478], "rand_egd": [337, 467, 478], "1750": 337, "cert_tim": 337, "notbefor": 337, "notaft": 337, "2018": [337, 468, 475, 478], "1515144883": 337, "5280": [337, 473, 478], "ca_cert": 337, "der_cert_byt": 337, "der": [337, 393, 463, 472, 478], "pem_cert_str": 337, "defaultverifypath": 337, "openssl_cafile_env": 337, "openssl_cafil": 337, "openssl_capath_env": 337, "openssl_capath": 337, "cert_byt": 337, "encoding_typ": 337, "x509_asn": 337, "509": [337, 463, 472, 478], "asn": 337, "pkcs_7_asn": 337, "oid": [337, 393, 397, 478], "trustworthi": 337, "crls": [337, 472], "cert_": 337, "revoc": [337, 472, 478], "crl": [337, 472, 478], "issuer": 337, "cas": 337, "verify_": 337, "ssl_op_al": 337, "sslv2": [337, 470], "renegoti": [337, 464], "hellorequest": 337, "clienthello": 337, "0h": [337, 478], "dh": [337, 467, 478], "secreci": [337, 478], "ecdh": [337, 478], "op_": 337, "ticket": [337, 478], "unpatch": [337, 384, 417, 478], "7301": [337, 464, 470, 473], "ellipt": [337, 471, 478], "diffi": [337, 471], "hellman": [337, 471], "distributor": [337, 420, 474, 478], "6066": 337, "2k": [337, 478], "268443839": 337, "0x100020bf": 337, "alert_description_": 337, "5246": 337, "ssl_error_": 337, "atop": [337, 462, 463], "diverg": [337, 459], "ssl_read_ex": [337, 478], "ssl_write_ex": [337, 478], "unencrypt": [337, 478], "match_hostnam": [337, 467, 469, 470, 472, 473, 475, 478], "binary_form": 337, "amongst": 337, "3280": 337, "subjectaltnam": 337, "rdns": 337, "rdn": 337, "countrynam": 337, "organizationnam": 337, "startcom": 337, "organizationalunitnam": 337, "commonnam": 337, "serialnumb": 337, "95f0": 337, "571208": 337, "sle257ohy9fvq07z": 337, "stateorprovincenam": 337, "california": [337, 421], "localitynam": 337, "san": [337, 391], "francisco": [337, 391, 478], "frontier": 337, "eff": 337, "emailaddress": 337, "hostmast": 337, "x509v3": [337, 472], "crldistributionpoint": [337, 472], "caissuer": 337, "ocsp": [337, 472], "cb_type": 337, "5929": 337, "npn": [337, 467, 478], "pha": 337, "certificaterequest": 337, "pythn": [337, 475], "pyth": [337, 475], "protocol_": 337, "sslv23": 337, "ecc": [337, 467, 478], "224": [337, 462, 478], "x509_ca": 337, "aesgcm": 337, "ecdsa": [337, 470, 478], "alg_bit": 337, "aes256": [337, 478], "gcm": 337, "kx": 337, "50380848": 337, "kea": 337, "strength_bit": 337, "aes128": 337, "50380847": 337, "spdi": 337, "agre": [337, 343, 421, 478], "openssl_no_tlsext": 337, "server_name_callback": 337, "dhfile": 337, "curve_nam": 337, "prime256v1": [337, 478], "vincent": [337, 468, 473, 474, 478], "bernat": 337, "do_handshake_on_connect": 337, "suppress_ragged_eof": [337, 478], "sni": [337, 469, 472, 475, 478], "ssl_sock": 337, "verisign": 337, "keylog": [337, 478], "nss": 337, "wireshark": 337, "2197947391": 337, "op_no_ssl": [337, 478], "op_no_tl": 337, "1k": [337, 478], "satisfact": 337, "1422": 337, "agenc": [337, 421], "buy": [337, 462], "keyout": 337, "dn": [337, 393, 478], "provinc": 337, "mystat": 337, "compani": [337, 456, 462, 463, 468, 478], "widgit": 337, "myserv": 337, "myorgan": 337, "digicert": 337, "cacert": 337, "digicertsha2extendedvalidationserverca": 337, "crl3": 337, "g1": [337, 379], "crl4": 337, "01bb6f00122b177f36cab49cea8b6b26": 337, "businesscategori": 337, "311": 337, "delawar": 337, "3359300": 337, "streetaddress": 337, "postalcod": 337, "03894": 337, "4801": 337, "nh": 337, "wolfeboro": 337, "testpypi": 337, "pythonhost": 337, "nhost": 337, "linuxfr": 337, "nginx": 337, "sameorigin": 337, "45679": [337, 478], "varnish": 337, "2188": 337, "lcy1134": 337, "lci": 337, "63072000": 337, "includesubdomain": 337, "mycertfil": 337, "mykeyfil": 337, "bindsocket": 337, "myaddr": 337, "10023": 337, "newsocket": 337, "connstream": 337, "deal_with_cli": 337, "client_context": 337, "disjunct": [337, 426], "rekey": 337, "steve": [337, 458, 463, 469, 473, 474, 475, 476, 477, 478], "4086": 337, "schiller": 337, "dierk": 337, "eastlak": 337, "7525": [337, 478], "dtls": 337, "whiteout": 338, "s_is": 338, "walktre": 338, "visitfil": 338, "rwxrwxrwx": [338, 471], "v7": [338, 353], "scipi": [339, 439, 446, 449, 456], "minitab": 339, "sas": 339, "matlab": 339, "input_data": 339, "nomial": 339, "pearson": [339, 467, 478], "spearman": [339, 469, 478], "625": [339, 439, 476], "5625": [339, 444], "outlier": 339, "tendenc": 339, "unbias": 339, "92": [339, 476, 477], "83": [339, 377, 446, 472], "reciproc": 339, "frederick": 339, "gravett": 339, "wallnau": 339, "8th": 339, "gnumer": 339, "ssmedian": 339, "aabbbbccddddeeffffgg": 339, "986893273527251": 339, "815": 339, "xbar": [339, 478], "0810874155219827": 339, "3720238095238095": [339, 446], "01875": 339, "108": [339, 377, 456], "bessel": 339, "percentil": [339, 476], "decil": [339, 476], "empir": 339, "129": 339, "109": [339, 377, 456], "121": [339, 464], "107": [339, 456], "joint": [339, 421], "kepler": 339, "orbital_period": 339, "225": [339, 379, 457], "687": [339, 478], "4331": [339, 472], "10_756": 339, "30_687": 339, "60_190": 339, "dist_from_sun": 339, "150": [339, 379, 383, 460, 464], "228": 339, "778": 339, "1_400": 339, "2_900": 339, "4_500": 339, "imperfect": [339, 359], "9882": 339, "orbit": 339, "period_squar": 339, "dist_cub": 339, "slope": 339, "films_tot": 339, "temperature_februari": 339, "celsius": 339, "fahrenheit": [339, 476], "birth_weight": 339, "drug_effect": 339, "1060": [339, 476, 478], "195": [339, 474], "1100": [339, 466], "1200": [339, 451], "928": 339, "1192": 339, "810": 339, "958": 339, "1011": [339, 341], "1109": 339, "1162": 339, "1224": 339, "1310": 339, "3652260728": 339, "4582495471": 339, "6582483453": 339, "4591308524824727": 339, "8035946855390597": 339, "175091447274739": 339, "750": 339, "8402": [339, 472], "8675309": 339, "8398": 339, "height_mal": 339, "height_femal": 339, "weight_mal": 339, "170": [339, 379], "weight_femal": 339, "foot_size_mal": 339, "foot_size_femal": 339, "posterior": 339, "prior_mal": 339, "prior_femal": 339, "posterior_mal": 339, "posterior_femal": 339, "posteriori": 339, "male": 339, "smooth": 339, "kde_norm": 339, "contin": 339, "kernel_h": 339, "x_i": 339, "f_hat": 339, "xarr": 339, "yarr": 339, "unadorn": 340, "widen": [340, 478], "0b100101": [340, 464, 466], "100101": 340, "0b10011": 340, "x04": [340, 393, 459], "xff": [340, 471], "xfc": 340, "xe8": 340, "x10": [340, 459], "64512": 340, "16711680": 340, "little_ord": 340, "tohexstr": 340, "0x3": 340, "a7p10": 340, "3740": 340, "d380000000000p": 340, "invmod": 340, "hash_fract": 340, "coprim": 340, "hash_valu": 340, "fermat": 340, "hash_float": 340, "hash_complex": 340, "breadth": [340, 379, 447], "gg": 340, "haunt": 340, "economi": 340, "subrang": 340, "linspac": 340, "zoot": 340, "digraph": 340, "fillchar": 340, "t012": 340, "t0123": 340, "t01234": 340, "0123": 340, "01234": 340, "ideograph": 340, "007f": [340, 430], "0660": [340, 457], "superscript": 340, "kharosthi": 340, "numeric_typ": 340, "2155": 340, "vulgar": 340, "zs": 340, "ws": [340, 389, 414], "uncas": 340, "justifi": [340, 364, 371, 463], "spacious": 340, "cmowz": 340, "testhook": 340, "basetestcas": 340, "misctest": 340, "tmpdirmixin": 340, "ipz": 340, "mississ": 340, "x1c": 340, "x1d": 340, "x85": 340, "u2028": 340, "u2029": 340, "nde": [340, 470], "rkl": 340, "kl": 340, "comment_str": 340, "apostroph": [340, 466], "bill": [340, 441, 457, 463], "00042": 340, "0042": 340, "sprintf": [340, 457, 459], "parenthesis": [340, 478], "somenam": 340, "1e50": 340, "ieee754": 340, "emphasis": 340, "2ef0": 340, "f1f2": 340, "xf0": 340, "xf1": 340, "xf2": 340, "f0f1f2": 340, "f0": 340, "f0_f1f2": 340, "uuddlrlrab": 340, "55554444": 340, "4c524c52": 340, "4142": 340, "aeiou": 340, "ths": 340, "shrt": 340, "fillbyt": 340, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [340, 464], "abcabc1": 340, "abc1": 340, "abcabc": 340, "abcdefghijklmnopqrstuvwxyz": [340, 341, 464], "subview": 340, "abcefg": 340, "0x7f3ddc9f4350": 340, "bce": 340, "22222222": 340, "33333333": 340, "44444444": 340, "zbcefg": 340, "z123fg": 340, "rvalu": 340, "z1spam": 340, "ce": [340, 456, 457, 478], "bepoint": 340, "616263": 340, "byte_length": 340, "new_items": 340, "1d": [340, 478], "zyz": 340, "ayz": 340, "3d": [340, 441], "2d": [340, 441, 478], "32000": 340, "32001": 340, "32002": [340, 478], "sjoerd": [340, 441, 457, 463], "cardin": 340, "disjoint": 340, "cbs": 340, "4098": [340, 437, 441], "4127": [340, 437, 441], "salad": 340, "juic": 340, "mappingproxi": 340, "synchronis": [340, 471], "send_post_request": 340, "union_object": 340, "whoami": 340, "_namedintconst": 340, "2020": [340, 420, 421, 464, 468, 477, 478], "10735": [340, 468], "5432": 340, "i_squar": 340, "7144": 340, "578966293710682886880994035146873798396722250538762761564": 340, "9252925514383915483333812743580549779436104706260696366600": 340, "571186405732": 340, "upper_bound": [340, 425], "68000": 340, "lower_bound": [340, 425], "4004": 340, "current_limit": 340, "0123456789abcdefabcdef": 341, "01234567": 341, "formfe": [341, 359, 430], "repack": 341, "literal_text": 341, "used_key": 341, "used_arg": 341, "arg_nam": 341, "attribute_nam": 341, "element_index": 341, "index_str": 341, "thou": [341, 470], "shalt": [341, 470], "quest": [341, 437], "ton": 341, "grouping_opt": 341, "000000120": 341, "682": [341, 468], "insignific": [341, 478], "significand": [341, 348], "abra": 341, "cad": 341, "24n": 341, "81w": 341, "coord": [341, 469, 478], "5j": [341, 444], "test1": [341, 422], "test2": [341, 422], "2a": [341, 478], "101010": 341, "0o52": [341, 463], "0b101010": 341, "1234567890": [341, 463], "890": 341, "02x": 341, "c0a80001": 341, "dxob": 341, "1010": [341, 476], "flufl": 341, "noun": [341, 478], "ific": 341, "kung": 341, "pao": 341, "idpattern": [341, 478], "_a": 341, "braceidpattern": [341, 478], "unbrac": 341, "3454": [342, 460, 478], "mkstringprep": [342, 460], "tablea": 342, "tableb": 342, "tablec": 342, "1700": 343, "10c": 343, "cccccccccc": 343, "0s": 343, "0c": 343, "hhhh": [343, 457], "bhl": 343, "99999": 343, "3s": 343, "x32": 343, "x12": [343, 393], "serialnum": 343, "gradelevel": 343, "10shhb": 343, "4658": 343, "ci": [343, 456, 475, 476, 478], "0x12131415": 343, "x14": 343, "x13": 343, "llh0l": 343, "lhl": 343, "llh": 343, "revisit": [343, 478], "qh6xq": 343, "qqh": 343, "qqh6x": 343, "capture_output": [344, 475, 478], "other_popen_kwarg": 344, "crw": [344, 473], "systemroot": 344, "system32": [344, 456], "symmetri": [344, 457], "preexec_fn": [344, 461, 476, 478], "restore_sign": 344, "start_new_sess": [344, 476, 478], "pass_fd": [344, 476, 478], "extra_group": [344, 478], "pipes": [344, 478], "process_group": [344, 478], "lpapplicationnam": 344, "lpcommandlin": 344, "vike": 344, "seldom": 344, "handle_list": 344, "sigxfz": 344, "sigxfsz": 344, "ifconfig": [344, 478], "qemu": [344, 476, 478], "hadn": [344, 478], "ncmdshow": 344, "showwindow": 344, "sw_showdefault": 344, "startupinfoex": 344, "updateprocthreadattribut": 344, "error_invalid_paramet": 344, "conin": 344, "conout": 344, "realtim": 344, "non_existent_fil": 344, "mycmd": 344, "myarg": 344, "dmesg": 344, "hda": 344, "retcod": 344, "child_stdin": 344, "child_stdout": 344, "child_stderr": 344, "child_stdout_and_stderr": 344, "popen4": 344, "somestr": 344, "capturestderr": 344, "_use_vfork": 344, "nnnnnn": 344, "_use_posix_spawn": 344, "knob": 344, "snd": 345, "711": 345, "compile_typ": 347, "some_func": 347, "unobserv": 348, "__cantrace__": 348, "emscripten_vers": 348, "js": [348, 451], "v14": 348, "dynload": [348, 349, 451, 478], "underdevelop": 348, "no_user_sit": [348, 470], "ignore_environ": [348, 470, 478], "hash_random": [348, 478], "division_warn": [348, 470, 471], "1999": [348, 361, 390, 421], "iec": 348, "dbl_epsilon": 348, "dbl_dig": 348, "dbl_mant_dig": 348, "dbl_max_exp": 348, "dbl_max_10_exp": 348, "dbl_min_exp": 348, "dbl_min_10_exp": 348, "flt_radix": 348, "flt_round": 348, "character": 348, "14159265358979": 348, "15g": 348, "9876543211234567": 348, "16g": 348, "9876543211234568": 348, "rtld_xxx": 348, "unidentifi": 348, "service_pack": [348, 464], "service_pack_minor": [348, 464], "service_pack_major": [348, 464], "suite_mask": [348, 464], "product_typ": [348, 464], "platform_vers": [348, 474, 478], "ver_platform_win32_nt": 348, "ver_nt_workst": 348, "workstat": 348, "ver_nt_domain_control": 348, "ver_nt_serv": 348, "getversionex": [348, 478], "osversioninfoex": 348, "asyncgen_hook": 348, "firstit": 348, "hash_bit": 348, "seed_bit": 348, "0x010502f0": 348, "bits_per_digit": [348, 451, 464, 466], "sizeof_digit": [348, 464, 466], "engag": 348, "0xffff": [348, 471, 478], "find_modul": [348, 418, 427, 460, 467, 468, 469, 471, 472, 475, 478], "freebsd8": 348, "linux2": [348, 471], "linux3": [348, 471], "aix5": 348, "aix7": [348, 476, 478], "coarser": 348, "suse": [348, 451, 477, 478], "profilefunc": 348, "timeslic": 348, "tracefunc": 348, "lnotab_not": [348, 474], "releaselevel": [348, 464, 466], "xa": 348, "2a3": 348, "9899": 348, "jtc1": 348, "sc22": 348, "wg14": 348, "n1256": 348, "nuanc": 349, "landmark": [349, 456, 474, 478], "majorvers": 349, "minorvers": 349, "python311": 349, "alongsid": [349, 370, 416, 421, 430, 456], "py_enable_shar": 350, "libdir": [350, 455], "ar": [350, 451, 478], "posix_prefix": [350, 470, 478], "posix_hom": [350, 470], "posix_us": [350, 470, 478], "posix_venv": [350, 468, 478], "nt_user": [350, 470], "nt_venv": [350, 468, 478], "osx_framework_us": 350, "platstdlib": [350, 470], "platlib": [350, 470, 478], "purelib": [350, 394, 470], "platinclud": [350, 470], "_get_default_schem": 350, "redistributor": [350, 464], "_install_schem": 350, "i586": [350, 470], "sun4u": 350, "64bit": [350, 469, 478], "intel64": [350, 478], "em64t": 350, "macosx": [350, 398, 454, 468, 469, 470, 478], "ppc": [350, 454, 463, 470], "ppc64": [350, 478], "i386": [350, 455, 456, 473], "fat": [350, 400], "ac_apple_universal_build": 350, "aix_genuine_cplusplus": 350, "arflag": 350, "log_mask": 351, "pri": 351, "log_upto": 351, "log_pid": 351, "log_con": 351, "log_ndelay": 351, "log_odelay": 351, "log_nowait": 351, "log_perror": 351, "file_or_dir": 352, "ustar": [353, 463, 478], "longlink": 353, "10240": 353, "tape": 353, "ignore_zero": [353, 478], "numeric_own": [353, 473, 478], "set_attr": 353, "fully_trust": 353, "arcnam": [353, 417], "regtyp": 353, "aregtyp": 353, "lnktype": 353, "symtyp": 353, "dirtyp": 353, "fifotyp": 353, "conttyp": 353, "chrtype": 353, "blktype": 353, "gnutype_spars": 353, "new_tarinfo": 353, "old_tarinfo": 353, "706": [353, 469], "crucial": [353, 427, 457], "abus": [353, 404, 431, 470, 478], "tinker": 353, "my_tarfil": 353, "warn_the_us": 353, "statefulfilt": 353, "filter_func": 353, "file_count": 353, "brian_1979": [353, 417], "source1": [353, 417], "sourcen": [353, 417], "output_dir": [353, 417], "filternam": 353, "py_fil": 353, "quux": 353, "bsdtar": 353, "libarch": 353, "unmaintain": [353, 370, 470, 472, 474], "ancient": [353, 462, 478], "seventh": 353, "miscalcul": [353, 478], "nowaday": 353, "telopt_": 354, "iac": 354, "dont": 354, "wont": 354, "subnegoti": 354, "dm": 354, "brk": 354, "ao": 354, "ayt": 354, "ec": [354, 478], "ga": 354, "read_": 354, "tn": 354, "midst": 354, "subopt": 354, "uncompil": 354, "delete_on_clos": [355, 469, 478], "max_siz": [355, 381], "spool": 355, "_file": 355, "ignore_cleanup_error": [355, 478], "tmpdir": [355, 478], "tmpdirnam": [355, 470], "tmptjujjt": 355, "iflag": 356, "oflag": 356, "lflag": 356, "ispe": 356, "ospe": 356, "vmin": 356, "vtime": 356, "tcsanow": 356, "tcsadrain": 356, "tcsaflush": [356, 378], "tciflush": 356, "tcoflush": 356, "tcioflush": 356, "tcooff": 356, "tcoon": 356, "tcioff": 356, "tcion": 356, "ws_row": 356, "ws_col": 356, "tiocgwinsz": 356, "tiocgsiz": 356, "winsiz": [356, 478], "tiocswinsz": 356, "tiocssiz": 356, "regrtest": [357, 377, 460, 464, 478], "test_": [357, 417, 478], "pyunit": [357, 458], "mytestcase1": 357, "test_feature_on": 357, "test_feature_two": 357, "mytestcase2": 357, "whitebox": 357, "blackbox": 357, "improp": [357, 389, 423, 457, 469, 472, 478], "crop": 357, "anomal": 357, "testfuncacceptssequencesmixin": 357, "mysuperwhammyfunct": 357, "test_func": 357, "acceptlist": 357, "acceptstr": 357, "accepttupl": 357, "beck": [357, 383, 458], "test_main": [357, 478], "test_spam": 357, "uall": [357, 460], "largefil": [357, 478], "pcbuild": [357, 456, 463, 478], "buildbot": [357, 383, 451, 478], "with_doc_str": [357, 451], "init_delay": 357, "max_delay": 357, "backoff": [357, 478], "o0": [357, 478], "_testcapi": [357, 451, 478], "accept_pattern": 357, "new_val": 357, "catstr": 357, "min_vers": 357, "memus": 357, "bigmem": 357, "_4g": 357, "errtext": 357, "hog": 357, "refleak": [357, 469, 478], "pkg_dir": 357, "standard_test": [357, 383], "ref_api": 357, "other_api": 357, "test_inst": 357, "object_to_patch": 357, "cmd_name": 357, "test_cas": [357, 383], "name_of_modul": 357, "not_export": [357, 478], "_csv": [357, 478], "misctestcas": 357, "test__all__": 357, "othertestcas": 357, "bar_const": 357, "foo_const": 357, "_bar": 357, "max_digit": 357, "seterrormod": 357, "coredump": [357, 478], "elicit": 357, "ephemer": [357, 397], "s_server": 357, "so_exclusiveaddrus": 357, "resource_nam": 357, "assert_python": 357, "pythonusersit": 357, "env_var": 357, "__isol": 357, "__cleanenv": 357, "__cwd": 357, "script_dir": 357, "script_basenam": 357, "omit_suffix": 357, "zip_dir": 357, "zip_basenam": 357, "script_nam": [357, 402], "name_in_zip": 357, "init_sourc": 357, "_unspecifi": 357, "original_valu": 357, "xattr": [357, 478], "tempcwd": 357, "reinsert": [357, 371, 464, 466], "py_warn": 357, "_warn": [357, 467, 478], "c_warn": 357, "required_on": 357, "oldmodul": 357, "warning_help": 357, "test_suppress_warn": 357, "regexp": [357, 470, 478], "warningcategori": 357, "warningrecord": 357, "hey": 357, "thello": 359, "nworld": 359, "frankenstein": 359, "insec": 359, "camelcas": 360, "overcom": [360, 470, 478], "activecount": [360, 463, 467, 478], "_threading_loc": 360, "threadgroup": 360, "tid": [360, 478], "awaken": 360, "cv": [360, 379], "an_item_is_avail": 360, "get_an_available_item": 360, "make_an_item_avail": 360, "notifyal": [360, 467, 478], "dutch": [360, 430], "scientist": 360, "edsger": 360, "dijkstra": 360, "awoken": 360, "maxconnect": 360, "pool_sema": 360, "connectdb": 360, "isset": [360, 467, 478], "accept_connect": 360, "process_server_connect": 360, "make_connect": [360, 414], "process_client_connect": 360, "awri": 360, "some_lock": 360, "1969": 361, "acronym": 361, "compromis": 361, "wisdom": 361, "tm_gmtoff": [361, 474, 478], "tm_zone": [361, 474, 478], "tm": [361, 370], "1993": [361, 478], "clk_id": 361, "ntp": 361, "suspens": [361, 423, 425], "clock_nanosleep": [361, 468, 478], "nanosleep": [361, 468, 478], "tm_year": [361, 459], "tm_mon": 361, "tm_mday": 361, "tm_hour": 361, "tm_min": 361, "tm_sec": 361, "tm_wday": 361, "tm_yday": 361, "335": 361, "meridian": 361, "julian": [361, 472, 473, 478], "05edt": 361, "m4": [361, 478], "m10": 361, "aest": 361, "10aedt": 361, "tzfile": 361, "datafil": [361, 460], "australia": 361, "melbourn": 361, "egypt": 361, "eet": 361, "eest": 361, "discontinu": [361, 478], "settimeofday": 361, "nonadjust": 361, "ptp": 361, "uptim": [361, 475, 478], "asleep": 361, "1123": [361, 466], "usec": [362, 473], "3018611848820001": 362, "2727368790656328": 362, "23702679807320237": 362, "19665591977536678": 362, "time_taken": 362, "wallclock": 362, "nsec": 362, "5000000": 362, "0877": 362, "41440500499993504": 362, "7246671520006203": 362, "3955516149999312": 362, "40183617287970225": 362, "37027556854118704": 362, "38344867356679524": 362, "3712595970846668": 362, "37866875250654886": 362, "9138244460009446": 362, "5829014980008651": 362, "04215312199994514": 362, "08588060699912603": 362, "stupid": 362, "woefulli": 364, "tkdoc": [364, 478], "roseman": [364, 467, 477, 478], "978": 364, "1999149567": 364, "alan": [364, 462, 463, 469, 475, 478], "moor": [364, 459, 460, 463, 472, 473, 475, 478], "1788835886": 364, "lutz": 364, "0596158101": 364, "ousterhout": 364, "jone": [364, 460, 462, 472, 473], "0321336330": 364, "multitask": 364, "bridg": [364, 470], "xlib": 364, "cocoa": [364, 454, 470, 478], "gdi": 364, "screennam": [364, 370], "usetk": 364, "argv0": 364, "winfo_id": 364, "winfo_par": 364, "loadtk": 364, "frm": 364, "grid": [364, 369, 371], "applicaton": 364, "lbl": 364, "btn": [364, 371, 379], "winfo_x": 364, "winfo_height": 364, "winfo_view": 364, "winfo": 364, "reenter": 364, "idiosyncrat": 364, "relief": [364, 371], "groov": 364, "placer": 364, "qualit": 364, "183": 364, "parcel": [364, 371], "ipadx": 364, "ipadi": 364, "padx": 364, "padi": 364, "textvari": [364, 371], "onvalu": 364, "offvalu": 364, "stringvar": [364, 371], "intvar": [364, 478], "doublevar": 364, "booleanvar": [364, 478], "entrythingi": 364, "print_cont": 364, "wm": 364, "icon": [364, 456, 459, 460, 478], "_root": 364, "compass": 364, "sw": 364, "nw": 364, "gray25": 364, "gray50": 364, "hourglass": 364, "questhead": 364, "contrib": 364, "gumbi": 364, "print_it": 364, "rrggbb": 364, "rrrgggbbb": 364, "rrrrggggbbbb": 364, "160": [364, 377, 379, 421], "cursorfont": 364, "xc_": 364, "xc_hand2": 364, "hand2": 364, "179": 364, "centimetr": 364, "millimetr": 364, "5i": 364, "widthxheight": 364, "200x100": 364, "3i": 364, "2i": 364, "4c": 364, "43c": 364, "sunken": 364, "ridg": 364, "scrollcommand": [364, 371], "3tk": 364, "turn_r": 364, "activeforeground": 364, "send_ev": 364, "keysym": 364, "keysym_num": 364, "x_root": 364, "y_root": 364, "entryconfig": 364, "bitmapimag": 364, "photoimag": [364, 476, 478], "pillow": [364, 445], "maxbytecount": 364, "picker": 365, "buttonpress": 366, "dnd_accept": 366, "old_target": 366, "dnd_leav": 366, "dnd_enter": 366, "dnd_commit": 366, "dnd_end": 366, "buttonreleas": 366, "slant": [367, 457], "emphasi": 367, "overstrik": 367, "strikeout": 367, "displayof": 367, "ascent": 367, "descent": 367, "linespac": 367, "tixinspect": 370, "inspector": 370, "combo": [370, 371], "subwidget": 370, "mega": 370, "tk_popup": 370, "motif": 370, "tixexfileselectdialog": 370, "checkbutton": [370, 371, 478], "tixnotebook": 370, "xpm": 370, "cnf": [370, 455], "tix_librari": 370, "dlgclass": 370, "fileselectdialog": 370, "monochrom": 370, "newschem": 370, "newfontset": 370, "newscmprio": 370, "fontset": 370, "resetopt": 370, "tix_config": 370, "anti": [371, 379, 385, 478], "menubutton": 371, "tile": [371, 379, 464], "monograph": 371, "bw": 371, "tlabel": 371, "ttkstyle": 371, "bindtag": 371, "viewabl": 371, "xscrollcommand": 371, "yscrollcommand": 371, "statespec": 371, "inquir": [371, 473], "icursor": 371, "exportselect": 371, "selection_get": 371, "postcommand": 371, "dropdown": 371, "comboboxselect": 371, "newindex": 371, "tab_id": 371, "notebooktabchang": 371, "unmanag": 371, "autoincr": [371, 478], "recur": 371, "southeast": 371, "displaycolumn": 371, "selectmod": 371, "treeviewselect": 371, "treeviewopen": 371, "treeviewclos": 371, "offscreen": 371, "newchildren": 371, "minwidth": 371, "imagenam": 371, "winfo_class": 371, "somewidget": 371, "confer": [371, 458, 462], "query_opt": 371, "tbutton": 371, "colored_btn": 371, "layoutspec": 371, "tmenubutton": 371, "mbtn": 371, "elementnam": 371, "etyp": [371, 376, 467], "vsapi": 371, "6a": 371, "imagespec": 371, "interior": [371, 379, 458, 459], "themenam": 371, "tcombobox": 371, "green2": 371, "green4": 371, "fieldbackground": 371, "green3": 371, "olivedrab1": 371, "olivedrab2": 371, "themechang": [371, 478], "caviti": 371, "whichsid": 371, "nswe": 371, "sublayout": 371, "exact_typ": 373, "srow": 373, "scol": 373, "erow": 373, "ecol": 373, "decistmt": 373, "3e": 373, "007": 373, "13th": 373, "21716034272e": 373, "217160342717258261933904529e": 373, "toknum": 373, "tokval": 373, "say_hello": 373, "pyproject": [374, 478], "toml_str": 374, "listfunc": 375, "coverdir": 375, "trackcal": 375, "countfunc": 375, "countcal": 375, "ignoremod": 375, "ignoredir": 375, "show_miss": 375, "extracted_list": 376, "lookup_lin": 376, "capture_loc": [376, 478], "max_group_width": [376, 478], "max_group_depth": [376, 478], "frame_gen": 376, "frame_summari": 376, "run_user_cod": 376, "envdir": 376, "bright_side_of_lif": 376, "formatted_lin": 376, "another_funct": 376, "lumberstack": 376, "an_error": 376, "top_stat": 377, "716": 377, "4855": 377, "39328": 377, "284": 377, "521": 377, "3199": 377, "167": 377, "368": 377, "244": 377, "2315": 377, "381": 377, "185": [377, 466], "243": [377, 458], "133": 377, "347": [377, 462], "262": 377, "1446": 377, "911": 377, "1454": 377, "2131": 377, "148": 377, "344": 377, "snapshot1": 377, "snapshot2": 377, "8173": 377, "4428": 377, "71332": 377, "39369": [377, 478], "117": [377, 458], "940": 377, "8106": 377, "571": 377, "298": 377, "589": [377, 381, 476, 478], "1005": 377, "166": 377, "7423": 377, "1526": 377, "1334": 377, "848": 377, "1465": 377, "784": 377, "491": 377, "969": 377, "903": 377, "870": 377, "1036": 377, "934": 377, "1068": 377, "619": 377, "1581": 377, "1614": 377, "938": 377, "1728": 377, "test_pickletool": 377, "1276": 377, "test_runn": 377, "976": 377, "display_failur": 377, "761": 377, "1563": 377, "main_in_temp_cwd": 377, "run_glob": 377, "display_top": 377, "key_typ": 377, "419": [377, 466], "_b85chars2": 377, "_b85char": 377, "306": 377, "_a85chars2": 377, "_a85char": 377, "class_definit": 377, "testmethod": 377, "_hexdig": 377, "_weakrefset": 377, "142": [377, 437, 441], "_b32tab2": 377, "_b32tab": 377, "6220": 377, "3602": 377, "5303": 377, "large_sum": 377, "first_siz": 377, "first_peak": 377, "small_sum": 377, "second_s": 377, "second_peak": 377, "664": 377, "3592984": 377, "804": 377, "29704": [377, 478], "optimis": [377, 423, 478], "old_snapshot": 377, "most_recent_first": [377, 475, 478], "geometr": [379, 468], "walli": 379, "feurzeig": 379, "seymour": 379, "papert": 379, "cynthia": 379, "solomon": [379, 478], "learner": 379, "classroom": [379, 478], "clockwis": 379, "anew": [379, 427, 477, 478], "whom": [379, 421], "360": 379, "337": 379, "fill_gap": 379, "polygon": 379, "travel": 379, "to_angl": 379, "inscrib": 379, "semicircl": 379, "colorstr": 379, "diamet": 379, "canva": [379, 463, 469, 476, 478], "stamp_id": 379, "stampid": 379, "astamp": 379, "unused_stamp_id": 379, "undobuff": 379, "speedstr": 379, "speedvalu": 379, "440": 379, "27876": 379, "60254": 379, "fullcircl": 379, "grad": 379, "gon": [379, 471], "gradian": 379, "5707963267948966": 379, "thick": 379, "turtleshap": 379, "pendict": 379, "nores": 379, "stretchfactor": 379, "penstat": 379, "33cc8c": 379, "brown": [379, 463, 478], "5490196078431373": 379, "140": [379, 464, 478], "32c18f": 379, "colorstring1": 379, "colorstring2": 379, "g2": 379, "285078": 379, "a0c8f0": 379, "fillstat": 379, "arial": 379, "fontnam": 379, "fontsiz": 379, "fonttyp": 379, "shapenam": 379, "rmode": 379, "outlinewidth": 379, "stretch_wid": 379, "stretch_len": 379, "perpendicular": 379, "shear": 379, "t11": 379, "t12": 379, "t21": 379, "t22": 379, "myturtl": 379, "glow": 379, "unglow": 379, "handdraw": 379, "myfavouriteshap": 379, "mick": [379, 457, 460, 462], "pet": 379, "_screen": 379, "poly1": 379, "poly2": 379, "shapelist": 379, "myshap": 379, "800080": 379, "picnam": 379, "nopic": 379, "backgroundimag": 379, "landscap": [379, 463], "canvwidth": 379, "canvheight": 379, "canvaswidth": 379, "canvasheight": 379, "1500": [379, 478], "llx": 379, "urx": 379, "distort": 379, "octagon": 379, "acceler": [379, 457, 458, 462, 465, 471, 472, 478], "xdummi": 379, "ydummi": 379, "nim": 379, "minval": 379, "maxval": 379, "stake": 379, "cmode": 379, "turtlegraphicserror": 379, "thusli": 379, "480": 379, "turtlegraph": 379, "using_idl": 379, "_cfg": 379, "startx": 379, "leftright": 379, "starti": 379, "topbottom": 379, "200x200": 379, "titlebar": 379, "zoo": [379, 422], "playground": 379, "type_": 379, "poli": [379, 457], "tooltip": [379, 478], "backgroundcolor": 379, "turtle_docstringdict": 379, "turtle_docstringdict_german": 379, "glingl": 379, "aon": 379, "undobuffers": 379, "exampleturtl": 379, "examplescreen": 379, "docstringdict": 379, "turtle_docstringdict_italian": 379, "bytedesign": 379, "sourcecod": 379, "chao": 379, "verhulst": 379, "colormix": 379, "forest": 379, "fractalcurv": 379, "hilbert": 379, "koch": 379, "lindenmay": 379, "ethnomathemat": 379, "indian": 379, "kolam": 379, "minimal_hanoi": 379, "hanoi": 379, "disc": 379, "nimstick": 379, "minimalist": 379, "peac": 379, "penros": [379, 478], "aperiod": 379, "kite": 379, "dart": 379, "planet_and_moon": 379, "rosett": [379, 478], "round_danc": 379, "danc": [379, 437], "sorting_anim": 379, "two_canvas": 379, "canvas": 379, "yinyang": 379, "tdemo_nim": 379, "tdemo_round_d": 379, "exec_bodi": 380, "__prepare__": [380, 384, 423, 472, 474, 478], "laid": 380, "__orig_bases__": [380, 469, 478], "listiter": 380, "t_origin": 380, "t_arg": 380, "gen_func": [380, 478], "typing_extens": 381, "standardis": 381, "544": [381, 476, 478], "586": [381, 467, 476, 477, 478], "591": [381, 476, 478], "593": [381, 477, 478], "new_vector": 381, "connectionopt": 381, "broadcast_messag": 381, "some_id": [381, 474], "524313": [381, 474], "get_user_nam": 381, "user_id": 381, "user_a": 381, "42351": 381, "user_b": 381, "23413": 381, "54341": 381, "some_valu": 381, "adminuserid": 381, "prouserid": 381, "get_next_item": 381, "async_queri": 381, "on_success": 381, "on_upd": 381, "batch_proc": 381, "cb_result": 381, "good_cb": 381, "bad_cb": 381, "maxitem": 381, "paramspecvari": 381, "returntyp": 381, "arg1typ": 381, "arg2typ": 381, "notify_by_email": 381, "prouser": 381, "teamus": 381, "make_new_us": 381, "user_class": 381, "new_non_team_us": 381, "basicus": 381, "loggedvar": 381, "zero_all_var": 381, "weirdtrio": 381, "oldt": 381, "contravari": 381, "oldb": 381, "oldweirdtrio": 381, "linkedlist": 381, "vec": [381, 437], "inproduct": 381, "type1": 381, "aesthet": 381, "legacy_pars": 381, "hatch": [381, 464], "hash_a": 381, "hash_b": 381, "typesaf": 381, "unpython": 381, "bucket": [381, 423], "enjoy": [381, 408], "unconstrain": 381, "greet_bad": 381, "greet_prop": 381, "run_queri": [381, 468], "arbitrary_str": [381, 468], "literal_str": 381, "never_call_m": 381, "int_or_str": 381, "return_self": 381, "subclassoffoo": 381, "returns_egg": 381, "boxofstr": 381, "make_box_of_str": 381, "with_lock": 381, "my_lock": 381, "sum_threadsaf": 381, "validate_simpl": 381, "open_help": 381, "starship": [381, 462, 474], "enterprise_d": 381, "fastconnector": 381, "__metadata__": 381, "valuerang": 381, "ann1": 381, "include_extra": [381, 477, 478], "is_str": 381, "is_str_list": 381, "typea": 381, "typeb": 381, "kt": 381, "lookup_nam": 381, "infer_vari": 381, "strsequenc": 381, "strorbytessequ": 381, "print_capit": 381, "stringsubclass": 381, "print_ab": 381, "move_first_element_to_last": 381, "get_shap": 381, "happili": 381, "array2": 381, "float_array_1d": 381, "int_array_2d": 381, "yup": 381, "intfunc": [381, 469], "add_log": 381, "add_two": 381, "listorset": [381, 422], "notgener": 381, "_field_typ": [381, 476, 477, 478], "first_us": 381, "genproto": 381, "poni": 381, "closabl": 381, "checkabl": [381, 469, 478], "complex_funct": 381, "eq_default": 381, "order_default": 381, "kw_only_default": 381, "frozen_default": [381, 469, 478], "field_specifi": 381, "create_model": [381, 468], "customermodel": [381, 468], "modelbas": 381, "modelmeta": 381, "__dataclass_transform__": 381, "meanwhil": 381, "__final__": [381, 468, 478], "log_status": 381, "__override__": 381, "fetch_respons": 381, "unsubscript": 381, "expensive_mod": 381, "sometyp": [381, 473], "local_var": 381, "anothertyp": 381, "other_fun": 381, "count_word": 381, "keep_posit": 381, "t_co": 381, "ct_co": 381, "add_unicode_checkmark": 381, "u2713": 381, "kt_co": 381, "vt_co": 381, "get_position_in_index": 381, "word_list": 381, "_vt_co": 381, "yieldtyp": 381, "sendtyp": 381, "echo_round": 381, "infinite_stream": 381, "38291": [381, 467, 478], "undecid": 381, "91896": [381, 469, 478], "92332": [381, 468, 469, 478], "94309": [381, 469, 478], "ucd": [382, 430, 471, 472, 478], "unistr": [382, 457], "00c7": [382, 425], "cedilla": [382, 425], "0043": [382, 425], "0327": [382, 425], "2160": 382, "0049": 382, "kd": 382, "kc": 382, "solidus": 382, "etter": 382, "ppercas": 382, "u0660": [382, 457], "rabic": 382, "umber": 382, "namealias": [382, 430], "namedsequ": 382, "junit": [383, 458, 478], "taxonomi": 383, "unittestgui": 383, "appveyor": 383, "teststringmethod": 383, "test_upp": 383, "test_isupp": 383, "test_split": 383, "000s": 383, "001s": 383, "test_module1": 383, "test_module2": 383, "test_modul": [383, 385], "testclass": 383, "test_method": 383, "test_someth": [383, 384, 385, 475], "foo_test": [383, 475], "sometest": [383, 475], "bar_test": [383, 475], "test_foo": [383, 385, 475], "footest": [383, 475], "project_directori": 383, "_test": [383, 470], "proj": [383, 478], "test_mypkg": 383, "defaultwidgetsizetestcas": 383, "test_default_widget_s": 383, "widgettestcas": 383, "test_widget_res": 383, "suffer": [383, 384, 458, 459, 460], "test_widget": [383, 478], "testsometh": 383, "makesometh": 383, "makesomethingdb": 383, "deletesomethingdb": 383, "mytestcas": 383, "test_noth": 383, "test_format": 383, "test_windows_support": 383, "test_maybe_skip": 383, "external_resource_avail": 383, "005s": 383, "myskippedtestcas": 383, "test_not_run": 383, "expectedfailuretestcas": 383, "test_fail": 383, "skipunlesshasattr": 383, "numberstest": [383, 472], "test_even": [383, 472], "the_except": 383, "error_cod": 383, "assertraisesregexp": [383, 464, 466, 468, 469], "somewarn": 383, "legacy_funct": [383, 470], "frobnic": [383, 397], "assertregexpmatch": [383, 464, 468, 469, 470], "seq_typ": 383, "assertxyy": 383, "_async_connect": 383, "asyncconnect": [383, 476], "test_respons": 383, "status_cod": [383, 476], "on_cleanup": 383, "testfunc": 383, "_removetestatindex": [383, 472], "synthet": [383, 469, 478], "testcaseclass": 383, "unoffici": [383, 473], "use_load_test": [383, 469, 473, 478], "sampletest": 383, "sampletestcas": 383, "test_on": [383, 385], "test_two": [383, 385], "test_thre": 383, "start_dir": [383, 478], "top_level_dir": 383, "loadtestsfrom": 383, "formatted_err": 383, "resultclass": 383, "wd": [383, 395, 462, 464, 472, 474], "wa": 383, "defaulttest": [383, 472], "catchbreak": 383, "testprogram": [383, 469], "testcase1": 383, "testcase2": 383, "testcase3": 383, "test_class": 383, "this_dir": 383, "package_test": 383, "basetestsuit": 383, "_errorhold": 383, "_connect": [383, 414], "createexpensiveconnectionobject": 383, "createconnect": 383, "closeconnect": 383, "test_signal_handl": 383, "replay": 384, "productionclass": [384, 385], "classname2": [384, 385], "classname1": [384, 385], "mockclass1": [384, 385], "mockclass2": [384, 385], "mock_method": [384, 385], "newkey": [384, 385], "newvalu": [384, 385], "foobarbaz": 384, "wheeeeee": 384, "specc": [384, 385], "autospec": [384, 385, 478], "mock_funct": 384, "fishi": 384, "new_cal": 384, "spec_set": [384, 385], "assret": [384, 478], "asert": [384, 478], "aseert": [384, 478], "assrt": [384, 478], "wow": 384, "any_ord": [384, 385], "some_mock": 384, "w00t": 384, "140161580456576": [384, 385], "mock_foo": [384, 385], "mockiti": 384, "this_foo": 384, "async_func": 384, "asyncmockmixin": 384, "_mock_cal": 384, "exampleclass": 384, "sync_foo": 384, "async_foo": 384, "a_mock": 384, "coroutine_mock": 384, "bang": 384, "not_a_child": 384, "thing1": 384, "thing2": 384, "normal_argu": 384, "mock_class": 384, "mockclass": 384, "mock_th": 384, "mock_stdout": 384, "non_existing_attribut": 384, "honour": [384, 478], "class_method": 384, "in_dict": 384, "testsampl": 384, "test_sampl": 384, "patched_foo": 384, "first_patch": 384, "second_patch": 384, "test_funct": 384, "mock_exit": 384, "new_mock": [384, 385], "mytest": [384, 385], "patcher1": 384, "patcher2": 384, "fiddlier": [384, 385], "bonus": [384, 458], "mock_ord": 384, "foo_on": 384, "foo_two": 384, "static_method": [384, 385], "mock1": 384, "mock2": 384, "foobl": [384, 385], "__getinitargs__": 384, "__getformat__": [384, 478], "kall": [384, 461, 478], "abstracthttphandl": [384, 474, 478], "_noncallablemock__get_return_valu": 384, "_noncallablemock__get_side_effect": 384, "_noncallablemock__return_value_doc": 384, "_noncallablemock__set_return_valu": 384, "_noncallablemock__set_side_effect": 384, "my_mock": 384, "irrespect": 384, "read_data": [384, 441, 478], "deplet": 384, "rewound": 384, "fidd": 384, "bibbl": 384, "assret_called_once_with": 384, "dandi": 384, "assret_called_with": 384, "has_data": [384, 390, 472], "mock_request": 384, "somethingfortest": 384, "submock": 384, "attribute1": 384, "not_submock": 384, "sample_nam": 384, "new_attribut": 384, "attribute2": 384, "mock_inst": 385, "some_method": [385, 414], "old_method": 385, "smarter": [385, 466, 470, 478], "file_handl": 385, "testabl": 385, "backendprovid": 385, "get_endpoint": 385, "create_cal": 385, "start_cal": 385, "mock_backend": 385, "mock_respons": 385, "mock_dat": 385, "mocksomeclass": 385, "not_a_test": 385, "whilst": [385, 478], "nuisanc": 385, "grob": 385, "mock_frob": 385, "copy_call_arg": 385, "copyingmock": 385, "mock_bar": 385, "mock_spam": 385, "create_patch": 385, "my_dict": 385, "mymock": 385, "has_been_cal": 385, "adaptor": 385, "blip": 385, "expected_cal": 385, "fifti": [385, 421], "some_obj": 385, "match_foo": 385, "match_wrong": 385, "pyhamcrest": 385, "hamcrest": 385, "match_equ": 385, "gopher": 389, "hdl": [389, 421], "mailto": [389, 421], "mms": 389, "prospero": 389, "rsync": 389, "rtsp": 389, "rtsps": [389, 478], "rtspu": 389, "sftp": 389, "shttp": 389, "snew": 389, "wai": 389, "urlstr": 389, "allow_frag": 389, "netloc": [389, 464, 470], "1808": [389, 473, 478], "7eguido": 389, "max_num_field": [389, 478], "doseq": 389, "2396": [389, 464, 473, 475, 478], "c0": [389, 478], "defens": [389, 478], "unreserv": 389, "20ni": 389, "b1o": 389, "2fel": 389, "quote_via": [389, 473, 478], "std66": 389, "2732": [389, 464, 470], "2368": 389, "1738": 389, "cadefault": 390, "_proxi": [390, 478], "handler_ord": 390, "firefox": [390, 398, 462, 469, 478], "i686": 390, "gecko": 390, "20071127": 390, "camel": [390, 463, 470], "request_host": 390, "no_proxi": [390, 478], "cern": 390, "ncsa": 390, "uiuc": 390, "basicauth": 390, "passwd_mgr": 390, "40x": 390, "unredirect": 390, "header_valu": 390, "get_host": [390, 472], "get_selector": [390, 472], "is_unverifi": [390, 472], "http_error_404": 390, "_open": [390, 478], "http_error_": 390, "_error": 390, "_request": 390, "_respons": 390, "adopt": [390, 427, 458, 459, 460, 463, 477, 478], "newurl": 390, "http_error_30": 390, "authuri": 390, "authreq": 390, "2397": 390, "equiv": 390, "xhtm": 390, "ngot": 390, "auth_handl": 390, "pdq": 390, "mahler": 390, "8092": 390, "klem": 390, "kadidd": 390, "ehopp": 390, "proxy_handl": 390, "3128": 390, "proxy_auth_handl": 390, "contact": [390, 402, 478], "addhead": 390, "musi": [390, 391], "requestb": 390, "xrbl82xr": 390, "reporthook": 390, "local_filenam": 390, "30x": [390, 471], "maxtri": 390, "550": 390, "_urlopen": 390, "robotstxt": 391, "userag": 391, "crawl": [391, 474, 478], "requestr": 391, "sitemap": 391, "rp": 391, "rrate": 391, "lanc": [392, 421], "ellinghous": [392, 421], "jansen": [392, 421, 459, 460, 473, 478], "in_fil": 392, "out_fil": [392, 408, 478], "time_low": 393, "time_mid": 393, "time_hi_vers": 393, "clock_seq_hi_vari": 393, "clock_seq_low": 393, "12345678": 393, "567812345678": 393, "12345678123456781234567812345678": 393, "x34": 393, "x56": [393, 457], "x78": 393, "0x12345678": 393, "0x1234": 393, "0x5678": 393, "0x12": 393, "0x34": 393, "0x567812345678": 393, "0x12345678123456781234567812345678": 393, "clock_seq": 393, "administ": [393, 457, 463, 475, 478], "ncs": 393, "x500": 393, "a8098c1a": [393, 462], "f86e": [393, 462], "11da": [393, 462], "bd1a": [393, 462], "00112444be1e": [393, 462], "6fa459ea": [393, 462], "ee8a": [393, 462], "3ca4": [393, 462], "894e": [393, 462], "db77e160355": [393, 462], "16fd2706": [393, 462], "8baf": [393, 462], "433b": [393, 462], "82eb": [393, 462], "8c7fada847da": [393, 462], "886313e1": [393, 462], "3b8a": [393, 462], "5372": [393, 462], "9b90": [393, 462], "0c9aee199e5d": [393, 462], "00010203": 393, "0405": 393, "0607": 393, "0809": 393, "0a0b0c0d0e0f": 393, "x05": 393, "x0e": 393, "x0f": 393, "python35": [394, 448], "myenv": 394, "dep": [394, 478], "env_dir": 394, "powershel": [394, 456, 476, 478], "executionpolici": 394, "remotesign": 394, "currentus": 394, "zsh": 394, "csh": [394, 448, 472], "tcsh": [394, 461], "virtual_env": [394, 473], "system_site_packag": 394, "with_pip": [394, 472], "upgrade_dep": 394, "builder": [394, 405, 406, 408], "__venv_dir__": 394, "env_nam": 394, "__venv_name__": [394, 477], "__venv_prompt__": [394, 477, 478], "inc_path": 394, "lib_path": 394, "bin_path": 394, "bin_nam": 394, "__venv_bin_name__": 394, "env_ex": 394, "__venv_python__": 394, "env_exec_cmd": 394, "redirector": [394, 475, 478], "extendedenvbuild": 394, "easy_instal": [394, 469], "nodist": 394, "nopip": 394, "install_setuptool": 394, "install_pip": 394, "binpath": 394, "distpath": 394, "ez_setup": 394, "system_sit": 394, "use_symlink": 394, "warrant": [395, 465], "user_n": 395, "fxn": 395, "skip_file_prefix": [395, 478], "deprecated_api": 395, "_warn_skip": 395, "one_way": 395, "r_luxury_yacht": 395, "t_wobbler_mangrov": 395, "another_way": 395, "__warningregistry__": [395, 478], "wave_format_extens": [396, 478], "ksdataformat_subtype_pcm": 396, "defici": 396, "0x7fc859830220": 397, "lifecycl": [397, 464, 472], "do_something_us": 397, "extendedref": 397, "__counter": 397, "_id2obj_dict": 397, "id2obj": 397, "kenni": [397, 472], "newobj": [397, 478], "_final": 397, "unloading_modul": 397, "autorais": [398, 462], "epiphani": 398, "kfmclient": 398, "konqueror": [398, 462, 478], "kfm": 398, "genericbrows": 398, "elink": [398, 462], "w3m": 398, "windowsdefault": 398, "macosxosascript": [398, 478], "safari": 398, "chrome": [398, 471, 478], "chromium": [398, 471], "kde": 398, "kdedir": 398, "mosaic": [398, 469, 478], "galeon": [398, 469, 478], "skipston": [398, 469, 478], "iceap": [398, 469, 478], "neglect": 400, "hkey": 400, "computernam": 400, "subkey": [400, 456], "wow64": 400, "windir": 400, "flusher": 400, "se_restore_privileg": 400, "regloadkey": 400, "1601": 400, "querykey": 400, "sebackupprivileg": 400, "security_attribut": 400, "dsiablereflectionkey": 400, "subordin": [400, 464], "standard_rights_requir": 400, "standard_rights_writ": 400, "standard_rights_read": 400, "speaker": 401, "systemasterisk": 401, "systemexclam": 401, "systemhand": 401, "systemquest": 401, "systemdefault": 401, "url_schem": 402, "fastcgi": 402, "include_queri": 402, "path_info": 402, "query_str": [402, 468], "http_host": 402, "simple_app": 402, "start_respons": [402, 470, 478], "ret": 402, "hop": 402, "filelik": 402, "base_environ": 402, "middlewar": 402, "nonconform": 402, "validator_app": 402, "run_onc": 402, "allowpathinfo": 402, "metabas": 402, "allowpathinfoforscriptmap": 402, "path_transl": 402, "vhost": 402, "iis7": 402, "scgi": 402, "retarget": 402, "spit": 402, "file_wrapp": [402, 478], "hello_world_app": 402, "mime_typ": 402, "1014": 403, "microsystem": 403, "1832": 403, "pack_typ": 403, "pack_uint": 403, "pack_int": 403, "pack_enum": 403, "pack_bool": 403, "pack_uhyp": 403, "pack_hyp": 403, "pack_item": 403, "unpack_typ": 403, "unpack_item": 403, "billion": [404, 478], "laugh": [404, 471, 478], "blowup": 404, "bomb": [404, 417, 478], "relianc": [404, 478], "expat_vers": 404, "unexpand": 404, "countermeasur": 404, "omg": [405, 406], "python_dom": 405, "qualifiednam": 405, "element_nod": 405, "attribute_nod": 405, "text_nod": [405, 406], "cdata_section_nod": 405, "entity_nod": 405, "processing_instruction_nod": [405, 406], "comment_nod": 405, "document_nod": 405, "document_type_nod": 405, "notation_nod": 405, "uncontroversi": 405, "newchild": 405, "refchild": 405, "oldchild": 405, "oldattr": 405, "newattr": [405, 459], "removenameditem": 405, "domstring_size_err": 405, "hierarchy_request_err": 405, "index_size_err": 405, "inuse_attribute_err": 405, "invalid_access_err": 405, "invalid_character_err": 405, "invalid_modification_err": 405, "invalid_state_err": 405, "namespace_err": 405, "not_found_err": 405, "not_supported_err": 405, "no_data_allowed_err": 405, "no_modification_allowed_err": 405, "syntax_err": 405, "wrong_document_err": 405, "domstr": [405, 406], "somevalu": 405, "anothervalu": 405, "_get_somevalu": 405, "_get_anothervalu": 405, "_set_anothervalu": 405, "corba": 405, "profici": 406, "dom1": 406, "datasourc": 406, "dom2": 406, "dom3": 406, "myxml": 406, "filename_or_fil": 406, "grasp": 406, "newdoc": 406, "some_tag": 406, "top_el": 406, "addind": 406, "newl": 406, "subnod": 406, "prologu": 406, "slideshow": 406, "handleslideshow": 406, "handleslideshowtitl": 406, "handletoc": 406, "handleslid": 406, "handleslidetitl": 406, "handlepoint": 406, "_get_foo": 406, "_set_foo": 406, "domtimestamp": 406, "entityrefer": 406, "sales_item": 407, "start_docu": 407, "end_docu": 407, "processing_instruct": 407, "ignorable_whitespac": 407, "documentfactori": 407, "stream_or_str": 407, "celementtre": [408, 462, 470, 471, 478], "liechtenstein": 408, "gdppc": 408, "141100": 408, "switzerland": 408, "singapor": 408, "59900": 408, "malaysia": 408, "panama": 408, "13600": 408, "costa": 408, "rica": 408, "colombia": 408, "country_data": 408, "country_data_as_str": 408, "mytag": 408, "sometext": 408, "0x7fa66db2be58": 408, "new_rank": 408, "sometag": 408, "fiction": 408, "actor": [408, 436, 476], "lancelot": [408, 437], "archi": 408, "leach": 408, "sir": [408, 436, 466, 476], "gunther": 408, "clement": [408, 474, 478], "xml_text": 408, "real_person": 408, "countrydata": 408, "grand": 408, "dublin": 408, "purl": 408, "grandchildren": [408, 478], "xml_data": 408, "normalis": [408, 478], "freedom": [408, 431], "c14n_output": 408, "inputfil": 408, "with_com": 408, "strip_text": 408, "rewrite_prefix": 408, "qname_aware_tag": 408, "qname_aware_attr": 408, "exclude_attr": 408, "exclude_tag": 408, "xml_declar": [408, 464, 478], "default_namespac": [408, 464, 478], "short_empty_el": [408, 412, 472], "xi": 408, "xpointer": 408, "para": 408, "base_url": 408, "max_depth": 408, "unprefix": [408, 478], "convey": 408, "perceptu": 408, "reorder_attribut": 408, "0xb77e6fac": 408, "0xb77ec26c": 408, "0xb77ec2ac": 408, "0xb77ec1cc": 408, "text_or_uri": 408, "element_factori": 408, "comment_factori": 408, "pi_factori": 408, "insert_com": 408, "insert_pi": 408, "pis": 408, "pubid": 408, "attrs_dict": 408, "maxdepth": 408, "examplexml": 408, "parser_list": [409, 478], "create_pars": [409, 411], "filename_or_stream": 409, "confront": [409, 460], "focal": 409, "sax2lib": 410, "declhandl": 410, "documenthandl": [410, 411], "unrecover": [410, 478], "recover": 410, "public_id": 410, "system_id": [410, 411], "propertynam": 411, "formed": 411, "bytefil": 411, "charfil": 411, "amp": [412, 470], "use_datetim": [414, 462], "use_builtin_typ": [414, 415, 477], "safetransport": [414, 478], "ontosi": 414, "i4": 414, "i8": [414, 463], "biginteg": 414, "2147483648": 414, "2147483647": [414, 430, 462], "nil": [414, 460], "bigdecim": 414, "python_logo": 414, "fetched_python_logo": 414, "boxcar": 414, "methodrespons": 414, "betti": 414, "userland": 414, "getstatenam": 414, "proxiedtransport": 414, "proxy_head": 414, "requesthandl": 415, "logrequest": 415, "allow_dotted_nam": 415, "_dispatch": 415, "intrud": 415, "rpc2": [415, 462], "adder_funct": 415, "exampleservic": 415, "getdata": 415, "currenttim": 415, "getcurrenttim": 415, "nkeyboard": 415, "request_text": 415, "server_titl": 415, "server_document": 415, "pyz": [416, 473, 478], "mainfn": 416, "deflat": [416, 419, 478], "old_arch": 416, "new_arch": 416, "virtu": [416, 478], "pyzw": [416, 478], "pkzip": [417, 418, 457], "zip64": [417, 462, 478], "phil": [417, 418, 463, 478], "katz": [417, 418], "allowzip64": [417, 472, 478], "strict_timestamp": [417, 478], "metadata_encod": [417, 478], "2107": [417, 478], "myzip": 417, "force_zip64": [417, 478], "zipextfil": [417, 470, 478], "appreci": [417, 421], "zinfo_or_arcnam": 417, "zinfo_or_directori": 417, "grandchild": 417, "zipp": [417, 478], "filterfunc": [417, 472], "zf": 417, "myprog": 417, "notest": 417, "testal": [417, 463], "bogus": [417, 464, 478], "ahlstrom": [418, 457, 460], "archivepath": 418, "8467": [418, 460], "jwzthread": [418, 460], "adler": [419, 421], "max_wbit": 419, "z_best_spe": 419, "z_best_compress": 419, "z_no_compress": 419, "z_default_compress": 419, "memlevel": 419, "def_mem_level": 419, "z_default_strategi": 419, "zdict": [419, 478], "z_filter": 419, "z_huffman_on": 419, "z_rle": 419, "z_fix": 419, "def_buf_s": 419, "z_no_flush": 419, "z_partial_flush": 419, "z_sync_flush": 419, "z_full_flush": 419, "z_block": 419, "z_finish": 419, "los_angel": [420, 477], "dt_add": 420, "dt_utc": 420, "pythontzpath": 420, "fobj": [420, 433], "only_key": 420, "new_york": 420, "asia": 420, "tokyo": 420, "cldr": 420, "kwajalein": 420, "01t03": 420, "europe_berlin_pkl": 420, "berlin": 420, "europe_berlin_pkl_nc": 420, "posixrul": 420, "cautionari": [420, 461], "1990": 421, "reston": 421, "pythonlab": [421, 457, 459], "opensourc": 421, "agreement": [421, 457, 476], "license": 421, "herebi": 421, "nonexclus": 421, "royalti": 421, "herein": 421, "merchant": 421, "infring": 421, "consequenti": 421, "partnership": 421, "ventur": 421, "trademark": 421, "endors": [421, 478], "saratoga": 421, "santa": 421, "clara": 421, "95051": 421, "1895": 421, "preston": [421, 475], "20191": [421, 478], "1013": 421, "feder": 421, "intellectu": 421, "commonwealth": 421, "virginia": 421, "notwithstand": [421, 457], "netherland": 421, "profit": 421, "tortious": 421, "_random": [421, 478], "sci": 421, "hiroshima": 421, "mat": [421, 464, 477, 478], "mt": 421, "mt2002": 421, "emt19937ar": 421, "mt19937": 421, "takuji": 421, "makoto": [421, 478], "init_genrand": 421, "init_by_array": 421, "init_key": 421, "key_length": 421, "redistribut": [421, 478], "holder": [421, 464, 478], "exemplari": 421, "procur": 421, "tort": 421, "emt": 421, "1996": 421, "rush": [421, 457], "timothi": 421, "malley": [421, 460], "timo": [421, 478], "alum": 421, "industri": 421, "whielacronx": 421, "mojam": 421, "montanaro": [421, 457, 460, 461, 462, 463], "bioreason": 421, "automatrix": 421, "cathedr": 421, "republ": 421, "laboratori": 421, "sublicens": 421, "sell": [421, 462], "furnish": 421, "noninfring": 421, "doug": [421, 478], "pyhash": [421, 451, 478], "marek": 421, "majkowski": 421, "dan": [421, 461, 462, 470, 471, 472, 473, 477, 478], "popcount": 421, "majek": 421, "csiphash": 421, "supercop": 421, "crypto_auth": 421, "djb": 421, "little2": 421, "131002": 421, "siphash": [421, 472, 478], "gay": [421, 464, 466, 467, 472, 474, 475, 478], "20220517033456": 421, "netlib": 421, "lucent": 421, "reproduct": 421, "licensor": 421, "authorship": 421, "editori": [421, 457], "verbal": 421, "conspicu": 421, "perpetu": [421, 472], "irrevoc": 421, "patent": 421, "institut": 421, "litig": 421, "counterclaim": 421, "lawsuit": 421, "alleg": 421, "contributori": 421, "promin": [421, 465, 478], "addendum": 421, "constru": 421, "grossli": 421, "goodwil": 421, "stoppag": 421, "malfunct": 421, "indemn": 421, "oblig": [421, 457], "indemnifi": 421, "defend": [421, 478], "clark": [421, 471, 478], "loup": 421, "gailli": 421, "misrepres": 421, "jloup": 421, "madler": 421, "alumni": 421, "caltech": 421, "owen": 421, "_decim": [421, 451, 471, 478], "stefan": [421, 464, 468, 471, 472, 473, 474, 475, 476, 477, 478], "krah": [421, 464, 471, 474, 478], "xmltestdata": 421, "c14n2": 421, "ercim": 421, "keio": 421, "beihang": 421, "g771": 421, "sox": 421, "adlib": 421, "blaster": 421, "fm": [421, 463], "1992": 421, "jlee": 421, "smylex": 421, "consent": 421, "incarn": 422, "if_stmt": [422, 426], "while_stmt": [422, 426], "for_stmt": [422, 426], "try_stmt": [422, 426], "with_stmt": [422, 426], "match_stmt": [422, 426], "funcdef": 422, "async_with_stmt": 422, "async_for_stmt": 422, "async_funcdef": 422, "stmt_list": [422, 432], "compound_stmt": [422, 426, 432], "simple_stmt": [422, 426], "assignment_express": [422, 425, 426], "target_list": [422, 425, 431], "starred_list": [422, 425], "try1_stmt": 422, "try2_stmt": 422, "try3_stmt": 422, "with_stmt_cont": 422, "with_item": [422, 426], "hit_except": 422, "subject_expr": [422, 426], "case_block": [422, 426], "star_named_express": [422, 426], "named_express": [422, 426], "prerequisit": [422, 465, 478], "636": [422, 436, 467], "ebnf": [422, 426], "open_sequence_pattern": [422, 426], "as_pattern": [422, 426], "or_pattern": [422, 426], "literal_pattern": [422, 426], "capture_pattern": [422, 426], "wildcard_pattern": [422, 426], "value_pattern": [422, 426], "sequence_pattern": [422, 426], "mapping_pattern": [422, 426], "class_pattern": [422, 426], "closed_pattern": [422, 426], "signed_numb": [422, 426], "name_or_attr": [422, 426], "name1": [422, 462], "name2": [422, 462], "maybe_sequence_pattern": [422, 426], "maybe_star_pattern": [422, 426], "star_pattern": [422, 426], "p3": 422, "items_pattern": [422, 426], "key_value_pattern": [422, 426], "double_star_pattern": [422, 426], "pattern_argu": 422, "positional_pattern": [422, 426], "keyword_pattern": [422, 426], "parameter_list": [422, 425], "defparamet": 422, "parameter_list_no_poson": 422, "parameter_list_stararg": 422, "614": [422, 477, 478], "whats_on_the_telli": 422, "570": [422, 476, 478], "3107": [422, 436, 465, 473, 475], "param1": 422, "param2": 422, "do_stuff": 422, "some_coroutin": 422, "suite2": 422, "aenter": 422, "aexit": 422, "amax": 422, "overly_gener": 422, "simpletypevar": 422, "typevarwithbound": 422, "typevarwithconstraint": 422, "simpletypevartupl": 422, "simpleparamspec": 422, "type_params_of_func": 422, "liberti": 422, "some_default": 422, "default_of_arg": 422, "bound_of_t": 422, "type_params_of_bag": 422, "type_params_of_listorset": 422, "value_of_listorset": 422, "neumann": 423, "illus": [423, 470], "affix": [423, 478], "cell_cont": 423, "0x2000": 423, "0x10": 423, "0x1000": 423, "precari": 423, "parentclass": 423, "ocert": [423, 450], "asymmetri": 423, "verbosemodul": 423, "__objclass__": 423, "unlist": 423, "philosoph": 423, "australianphilosoph": 423, "bruce": [423, 478], "mysubclass": 423, "__classcell__": [423, 474, 476, 478], "3135": [423, 464, 465], "boundless": 423, "class_of_obj": 423, "breakfast": 423, "enummeta": [423, 468, 469, 478], "a_tupl": 423, "unbind": [424, 478], "simpleexpr": 424, "repair": [424, 456, 478], "offend": [424, 458], "bnf": [425, 429, 458], "othernam": [425, 457], "enclosur": 425, "parenth_form": 425, "list_display": 425, "dict_display": 425, "set_display": 425, "generator_express": 425, "yield_atom": 425, "__spam": [425, 435], "_ham__spam": 425, "stringliter": 425, "bytesliter": 425, "imagnumb": 425, "starred_express": [425, 426, 431], "unparenthes": [425, 477, 478], "comp_for": 425, "or_test": 425, "comp_it": 425, "comp_if": 425, "dict_item_list": 425, "dict_comprehens": 425, "dict_item": 425, "or_expr": [425, 430], "yield_express": [425, 430, 431], "expression_list": [425, 431, 432], "subiter": [425, 471], "yield_from": [425, 468, 478], "attributeref": [425, 431], "slice_list": 425, "slice_item": 425, "proper_slic": 425, "positional_argu": 425, "starred_and_keyword": 425, "keywords_argu": 425, "positional_item": 425, "keyword_item": 425, "x1": [425, 436, 467, 469, 478], "x3": 425, "x4": 425, "ym": 425, "await_expr": 425, "u_expr": 425, "m_expr": 425, "a_expr": 425, "shift_expr": [425, 426], "and_expr": 425, "xor_expr": 425, "comp_oper": 425, "op1": 425, "op2": 425, "opn": 425, "reflex": 425, "and_test": 425, "not_test": 425, "conditional_express": [425, 430], "lambda_expr": 425, "starred_item": 425, "expr4": 425, "expr5": 425, "roundoff": 425, "0041": 425, "precompos": 425, "u00c7": 425, "u0043": 425, "u0327": 425, "_pypegen_pars": 426, "reserved_keyword": 426, "n_keyword_list": 426, "start_rul": 426, "file_rul": 426, "interactive_rul": 426, "eval_rul": 426, "py_func_type_input": 426, "func_type_rul": 426, "py_fstring_input": 426, "fstring_rul": 426, "grammat": [426, 478], "invalid_": 426, "rule_nam": 426, "e1": [426, 470], "e2": 426, "first_alt": 426, "second_alt": 426, "mod_ti": [426, 467, 478], "_pypegen_make_modul": 426, "statement_newlin": 426, "_pyast_interact": 426, "_pyast_express": 426, "type_express": 426, "_pyast_functiontyp": 426, "fstring": [426, 478], "expr_ti": 426, "star_express": 426, "asdl_stmt_seq": 426, "_pypegen_seq_flatten": 426, "_pypegen_singleton_seq": 426, "stmt_ti": 426, "_pyast_pass": 426, "_pypegen_interactive_exit": 426, "type_alia": 426, "_pyast_expr": 426, "return_stmt": [426, 431], "import_stmt": [426, 431], "raise_stmt": [426, 431], "del_stmt": [426, 431], "yield_stmt": [426, 431], "assert_stmt": [426, 431], "_pyast_break": 426, "_pyast_continu": 426, "global_stmt": [426, 431], "nonlocal_stmt": [426, 431], "function_def": 426, "class_def": 426, "annotated_rh": 426, "yield_expr": 426, "check_vers": 426, "_pyast_annassign": 426, "_pypegen_set_expr_context": 426, "single_target": 426, "single_subscript_attribute_target": 426, "asdl_expr_seq": 426, "star_target": 426, "tc": 426, "_pyast_assign": 426, "new_type_com": 426, "_pyast_augassign": 426, "invalid_assign": 426, "augoper": 426, "_pypegen_augoper": 426, "_pyast_return": 426, "_pyast_rais": 426, "_pyast_glob": 426, "asdl_identifier_seq": 426, "_pypegen_map_names_to_id": 426, "_pyast_nonloc": 426, "del_target": 426, "_pyast_delet": 426, "invalid_del_stmt": 426, "_pyast_assert": 426, "invalid_import": 426, "dotted_as_nam": 426, "_pyast_import": 426, "dotted_nam": 426, "import_from_target": 426, "_pyast_importfrom": 426, "_pypegen_seq_count_dot": 426, "asdl_alias_seq": 426, "import_from_as_nam": 426, "alias_ti": 426, "_pypegen_alias_for_star": 426, "invalid_import_from_target": 426, "_pyast_alia": 426, "_pypegen_join_names_with_dot": 426, "invalid_block": 426, "class_def_raw": 426, "_pypegen_class_def_decor": 426, "invalid_class_def_raw": 426, "_pyast_classdef": 426, "function_def_raw": 426, "_pypegen_function_def_decor": 426, "invalid_def_raw": 426, "func_type_com": 426, "_pyast_functiondef": 426, "arguments_ti": 426, "_pypegen_empty_argu": 426, "_pyast_asyncfunctiondef": 426, "invalid_paramet": 426, "slash_no_default": 426, "asdl_arg_seq": 426, "param_no_default": 426, "param_with_default": 426, "star_etc": 426, "_pypegen_make_argu": 426, "slash_with_default": 426, "slashwithdefault": 426, "_pypegen_slash_with_default": 426, "staretc": 426, "invalid_star_etc": 426, "param_maybe_default": 426, "_pypegen_star_etc": 426, "param_no_default_star_annot": 426, "arg_ti": 426, "invalid_kwd": 426, "_pypegen_add_type_comment_to_arg": 426, "param_star_annot": 426, "namedefaultpair": 426, "_pypegen_name_default_pair": 426, "_pyast_arg": 426, "star_annot": 426, "invalid_default": 426, "invalid_if_stmt": 426, "elif_stmt": 426, "_pyast_if": 426, "else_block": 426, "invalid_elif_stmt": 426, "invalid_else_stmt": 426, "invalid_while_stmt": 426, "_pyast_whil": 426, "invalid_for_stmt": 426, "_pyast_for": 426, "_pyast_asyncfor": 426, "invalid_for_target": 426, "invalid_with_stmt_ind": 426, "asdl_withitem_seq": 426, "_pyast_with": 426, "_pyast_asyncwith": 426, "invalid_with_stmt": 426, "withitem_ti": 426, "_pyast_withitem": 426, "invalid_with_item": 426, "invalid_try_stmt": 426, "finally_block": 426, "_pyast_tri": 426, "asdl_excepthandler_seq": 426, "except_block": 426, "except_star_block": 426, "_pyast_trystar": 426, "excepthandler_ti": 426, "invalid_except_stmt_ind": 426, "_pyast_excepthandl": 426, "invalid_except_stmt": 426, "invalid_except_star_stmt_ind": 426, "invalid_finally_stmt": 426, "asdl_match_case_seq": 426, "_pyast_match": 426, "invalid_match_stmt": 426, "_pyast_tupl": 426, "_pypegen_seq_insert_in_front": 426, "match_case_ti": 426, "invalid_case_block": 426, "_pyast_match_cas": 426, "pattern_ti": 426, "asdl_pattern_seq": 426, "_pyast_matchsequ": 426, "pattern_capture_target": 426, "_pyast_matcha": 426, "invalid_as_pattern": 426, "asdl_seq_len": 426, "asdl_seq_get": 426, "_pyast_matchor": 426, "_pyast_matchvalu": 426, "complex_numb": 426, "_pyast_matchsingleton": 426, "literal_expr": 426, "_pyast_const": 426, "signed_real_numb": 426, "imaginary_numb": 426, "_pyast_binop": 426, "_pyast_unaryop": 426, "real_numb": 426, "_pypegen_ensure_r": 426, "_pypegen_ensure_imaginari": 426, "_pyast_attribut": 426, "asdl_seq": 426, "_pyast_matchstar": 426, "_pyast_matchmap": 426, "_pypegen_get_pattern_key": 426, "_pypegen_get_pattern": 426, "keypatternpair": 426, "_pypegen_key_pattern_pair": 426, "_pyast_matchclass": 426, "invalid_class_pattern": 426, "_pyast_typealia": 426, "asdl_type_param_seq": 426, "type_param_seq": 426, "type_param_ti": 426, "type_param_bound": 426, "_pyast_typevar": 426, "raise_syntax_error_starting_from": 426, "tuple_kind": 426, "_pyast_typevartupl": 426, "_pyast_paramspec": 426, "invalid_express": 426, "invalid_legacy_express": 426, "_pyast_ifexp": 426, "lambdef": 426, "_pyast_yieldfrom": 426, "_pyast_yield": 426, "bitwise_or": 426, "_pyast_star": 426, "_pyast_namedexpr": 426, "invalid_named_express": 426, "_pyast_boolop": 426, "compare_op_bitwise_or_pair": 426, "_pyast_compar": 426, "asdl_int_seq": 426, "_pypegen_get_cmpop": 426, "_pypegen_get_expr": 426, "cmpopexprpair": 426, "eq_bitwise_or": 426, "noteq_bitwise_or": 426, "lte_bitwise_or": 426, "lt_bitwise_or": 426, "gte_bitwise_or": 426, "gt_bitwise_or": 426, "notin_bitwise_or": 426, "in_bitwise_or": 426, "isnot_bitwise_or": 426, "is_bitwise_or": 426, "_pypegen_cmpop_expr_pair": 426, "tok": 426, "_pypegen_check_barry_as_flufl": 426, "bitwise_xor": 426, "bitwise_and": 426, "await_primari": 426, "_pyast_await": 426, "_pyast_cal": 426, "_pyast_subscript": 426, "_pyast_slic": 426, "invalid_group": 426, "lambda_param": 426, "_pyast_lambda": 426, "invalid_lambda_paramet": 426, "lambda_paramet": 426, "lambda_slash_no_default": 426, "lambda_param_no_default": 426, "lambda_param_with_default": 426, "lambda_star_etc": 426, "lambda_slash_with_default": 426, "invalid_lambda_star_etc": 426, "lambda_param_maybe_default": 426, "lambda_kwd": 426, "invalid_lambda_kwd": 426, "fstring_replacement_field": 426, "_pypegen_constant_from_token": 426, "debug_expr": 426, "fstring_convers": 426, "fstring_full_format_spec": 426, "_pypegen_formatted_valu": 426, "invalid_replacement_field": 426, "resulttokenwithmetadata": 426, "conv_token": 426, "conv": [426, 447, 473], "_pypegen_check_fstring_convers": 426, "fstring_format_spec": 426, "_pypegen_setup_full_format_spec": 426, "_pypegen_decoded_constant_from_token": 426, "_pypegen_joined_str": 426, "_pypegen_constant_from_str": 426, "_pypegen_concatenate_str": 426, "_pyast_list": 426, "_pyast_set": 426, "double_starred_kvpair": 426, "_pyast_dict": 426, "_pypegen_get_key": 426, "_pypegen_get_valu": 426, "invalid_double_starred_kvpair": 426, "keyvaluepair": 426, "_pypegen_key_value_pair": 426, "kvpair": 426, "for_if_claus": 426, "asdl_comprehension_seq": 426, "comprehension_ti": 426, "_pyast_comprehens": 426, "_pyast_listcomp": 426, "invalid_comprehens": 426, "_pyast_setcomp": 426, "_pyast_generatorexp": 426, "_pyast_dictcomp": 426, "invalid_dict_comprehens": 426, "invalid_argu": 426, "_pypegen_collect_call_seq": 426, "_pypegen_dummy_nam": 426, "check_null_allow": 426, "_pypegen_seq_extract_starred_expr": 426, "asdl_keyword_seq": 426, "_pypegen_seq_delete_starred_expr": 426, "kwarg_or_star": 426, "kwarg_or_double_star": 426, "_pypegen_join_sequ": 426, "invalid_starred_express": 426, "keywordorstar": 426, "invalid_kwarg": 426, "_pypegen_keyword_or_star": 426, "keyword_ti": 426, "_pyast_keyword": 426, "star_targets_list_seq": 426, "star_targets_tuple_seq": 426, "target_with_star_atom": 426, "t_primari": 426, "t_lookahead": 426, "star_atom": 426, "del_t_atom": 426, "_pypegen_seq_append_to_end": 426, "invalid_double_type_com": 426, "raise_syntax_error_known_loc": 426, "raise_syntax_error_known_rang": 426, "_pypegen_get_last_comprehension_item": 426, "pypegen_last_item": 426, "_pypegen_nonparen_genexp_in_cal": 426, "_pypegen_arguments_parsing_error": 426, "_without_invalid": 426, "expression_without_invalid": 426, "_pypegen_check_legacy_stmt": 426, "kf": 426, "dsfsdf": 426, "forgot": [426, 467, 469], "_pypegen_get_expr_nam": 426, "invalid_ann_assign_target": 426, "raise_syntax_error_invalid_target": 426, "raise_indentation_error": 426, "invalid_parameters_help": 426, "raise_syntax_error": 426, "invalid_lambda_parameters_help": 426, "for_target": 426, "invalid_class_argument_pattern": 426, "pypegen_first_item": 426, "invalid_kvpair": 426, "raise_error_known_loc": 426, "raise_syntax_error_on_next_token": 426, "invalid_conversion_charact": 426, "immateri": 427, "reinitialis": 427, "mpf": 427, "_init_module_attr": 427, "atyp": 427, "module_repr": [427, 467, 468, 469, 472, 478], "searchabl": [427, 478], "subpackage1": 427, "modulex": 427, "moduley": 427, "subpackage2": 427, "modulez": 427, "modulea": 427, "volunt": [429, 463], "lloyd": 429, "hugunin": 429, "lc_letter": 429, "vim": [430, 454, 472], "fileencod": 430, "bram": [430, 459], "moolenaar": 430, "2100": 430, "maart": 430, "mei": 430, "juni": 430, "augustus": 430, "oktob": 430, "unwis": 430, "uax": 430, "3131": [430, 465, 478], "xid_start": 430, "xid_continu": 430, "other_id_start": 430, "id_start": 430, "mc": [430, 478], "other_id_continu": 430, "id_continu": 430, "connector": 430, "proplist": 430, "normat": 430, "derivedcoreproperti": 430, "breakag": [430, 457, 458, 460, 469, 475, 478], "stringprefix": 430, "shortstr": 430, "longstr": 430, "shortstringitem": 430, "longstringitem": 430, "shortstringchar": 430, "stringescapeseq": 430, "longstringchar": 430, "bytesprefix": 430, "shortbyt": 430, "longbyt": 430, "shortbytesitem": 430, "longbytesitem": 430, "shortbyteschar": 430, "bytesescapeseq": 430, "longbyteschar": 430, "ur": [430, 465, 478], "reintroduc": [430, 478], "codebas": [430, 472, 473, 478], "ooo": 430, "0o377": [430, 468, 469, 478], "mistyp": 430, "literal_char": 430, "replacement_field": 430, "f_express": 430, "abc5": 430, "34567": [430, 474], "0x400": 430, "mill": 430, "decinteg": 430, "bininteg": 430, "octinteg": 430, "hexinteg": 430, "nonzerodigit": 430, "bindigit": 430, "0o177": 430, "0b100110111": 430, "79228162514264337593543950336": 430, "0xdeadbeef": 430, "100_000_000_000": 430, "0b_1110_0101": 430, "pointfloat": 430, "exponentfloat": 430, "077e010": 430, "77e10": 430, "14e": 430, "0e0": 430, "14_15_93": 430, "14j": 430, "10j": 430, "001j": 430, "1e100j": 430, "14_15_93j": 430, "expression_stmt": 431, "assignment_stmt": 431, "augmented_assignment_stmt": 431, "annotated_assignment_stmt": 431, "pass_stmt": 431, "break_stmt": 431, "continue_stmt": 431, "future_stmt": 431, "type_stmt": 431, "3132": [431, 465], "augtarget": 431, "augop": 431, "expression1": 431, "expression2": 431, "tracebackobj": 431, "relative_modul": 431, "fbb": 431, "subpkg2": 431, "subpkg1": 431, "3104": [431, 465], "value_of_point": 431, "pythonrc": 433, "startup_fil": 433, "awk": [434, 457], "smalltak": 435, "pyhon": [435, 445], "the_answ": 435, "scope_test": 435, "do_loc": 435, "do_nonloc": 435, "do_glob": 435, "realpart": 435, "imagpart": 435, "canin": 435, "fido": 435, "buddi": 435, "add_trick": 435, "warehous": [435, 470], "w2": 435, "addtwic": 435, "derivedclassnam": 435, "baseclassnam": 435, "base3": 435, "_spam": 435, "items_list": 435, "__updat": 435, "mappingsubclass": 435, "_mapping__upd": 435, "_mappingsubclass__upd": 435, "str_iter": 435, "0x10c90e650": 435, "rev": 435, "0x00a1db50": 435, "golf": 435, "xvec": 435, "yvec": 435, "260": [435, 456, 464, 474], "unique_word": 435, "valedictorian": 435, "gpa": 435, "graduat": [435, 473, 476], "defenestr": 436, "han": [436, 460, 467, 478], "onor": 436, "active_us": 436, "myemptyclass": 436, "initlog": 436, "rust": 436, "http_error": [436, 467], "teapot": [436, 467, 478], "where_i": 436, "grass": [436, 467], "987": [436, 444, 445], "1597": 436, "10042ed0": 436, "fib2": [436, 445], "f100": 436, "ask_ok": 436, "ye": [436, 468, 478], "vooooom": 436, "bereft": 436, "daisi": 436, "cheeseshop": 436, "limburg": 436, "runni": 436, "shopkeep": 436, "palin": 436, "shop": [436, 449], "pos1": 436, "pos2": 436, "pos_or_kwd": 436, "kwd1": 436, "kwd2": 436, "standard_arg": 436, "pos_only_arg": 436, "kwd_only_arg": 436, "combined_exampl": 436, "pos_on": 436, "kwd_on": 436, "write_multiple_item": 436, "bleedin": 436, "demis": 436, "make_incrementor": 436, "uppercamelcas": 436, "lowercase_with_underscor": 436, "kiwi": 437, "tangerin": 437, "grape": 437, "7j": 437, "freshfruit": 437, "loganberri": 437, "passion": 437, "weapon": 437, "14159": [437, 439], "comprehes": 437, "3x4": 437, "transposed_row": 437, "88888": 437, "basket": 437, "crabgrass": 437, "alacazam": [437, 461], "tel": 437, "sape": 437, "4139": 437, "brave": 437, "tic": 437, "tac": 437, "toe": 437, "raw_data": 437, "filtered_data": 437, "string3": 437, "trondheim": 437, "hammer": [437, 457], "non_nul": 437, "this_fail": 438, "hither": 438, "flew": 438, "bool_return": 438, "0001100110011001100110011001100110011001100110011": 439, "3602879701896397": 439, "10000000000000001": 439, "12g": [439, 457], "peril": 439, "3537115888337719": 439, "1125899906842624": 439, "921f9f01b866ep": 439, "10430216751806065": 439, "266310978": 439, "67179024": 439, "143401161448607": 439, "143401161400469": 439, "266262841": 439, "31058735": 439, "003244936839808227": 439, "042173697819788e": 439, "042178034628478e": 439, "0051575902860057365": 439, "7205759403792794": 439, "17f": 439, "36028797018963968": 439, "referendum": 441, "yes_vot": 441, "42_572_654": 441, "no_vot": 441, "43_132_495": 441, "vote": [441, 457, 462, 470], "42572654": 441, "40000": [441, 478], "dcab": 441, "7678": 441, "phone": [441, 470], "10d": 441, "eel": 441, "hovercraft": 441, "roach": [441, 474, 476, 478], "horribl": 441, "manfr": 441, "8637678": 441, "4d": 441, "729": 441, "00012": 441, "workfil": 441, "0123456789abcdef": 441, "6th": [441, 478], "korn": 442, "ipython": [442, 463, 467], "bpython": 442, "the_world_is_flat": 443, "666666666666667": 444, "rabbit": 444, "ame": [444, 474], "thingi": 444, "ium": 444, "unununium": 444, "tho": 444, "supercalifragilisticexpialidoci": [444, 447], "fibo": 445, "itemnam": 445, "yuck": 445, "ufs": 445, "_framework": 445, "_git": [445, 478], "_home": 445, "callstat": [445, 475, 477, 478], "wavread": 445, "wavwrit": 445, "aiffread": 445, "aiffwrit": 445, "auread": 445, "auwrit": 445, "vocod": 445, "karaok": 445, "echofilt": 445, "atten": 445, "subitem": 445, "subsubitem": 445, "specific_submodul": 445, "python312": [446, 447], "accesslog": 446, "installdir": [446, 451], "tea": 446, "70710678118654757": 446, "17970987693706186": 446, "6071428571428572": 446, "worldtimeapi": 446, "01t01": 446, "689215": 446, "soothsay": 446, "jcaesar": 446, "1964": 446, "14368": 446, "witch": 446, "wrist": 446, "226805979": 446, "57535828626024577": 446, "54962537085770791": 446, "teststatisticalfunct": 446, "test_averag": 446, "batteri": 446, "sqllite3": 446, "english_unit": 447, "villag": 447, "folk": 447, "nottingham": 447, "ditch": 447, "fund": [447, 457, 462], "nottinghamfolk": 447, "unladen": [447, 470], "photofil": 447, "img_1074": 447, "img_1076": 447, "img_1077": 447, "batchrenam": 447, "seqnum": 447, "ashley_": 447, "ashley_0": 447, "ashley_1": 447, "ashley_2": 447, "iiihh": 447, "comp_siz": 447, "uncomp_s": 447, "filenames": 447, "decoupl": [447, 473, 475], "asynczip": 447, "4000": 447, "700": 447, "22222": 447, "26932": [447, 478], "task3": 447, "task4": 447, "unsearch": 447, "starting_nod": 447, "breadth_first_search": 447, "gen_mov": 447, "is_goal": 447, "lua": 447, "09999999999999995": 447, "142857142857142857142857142857142857": 447, "nova": 448, "136kb": 448, "whl": 448, "kenneth": 448, "reitz": 448, "kennethreitz": 448, "akuchl": 448, "596": [449, 477], "00797": 449, "pyvideo": 449, "bbdehiioqssuvvwx": 450, "0b2": [450, 478], "0c076caaa8": 450, "20161005": 450, "wdefault": [450, 464, 470, 478], "walway": [450, 460], "wmodul": 450, "wonc": 450, "wignor": 450, "wi": 450, "frozen_modul": [450, 478], "importlib_bootstrap": 450, "importlib_bootstrap_extern": 450, "showalloccount": [450, 474, 477, 478], "oldpars": [450, 477, 478], "qualif": [450, 472], "selftest": 450, "4294967295": [450, 474], "encodingnam": 450, "pythondumprefsfil": [450, 478], "c11": [451, 468, 471, 478], "stdint": [451, 478], "_sqlite": [451, 478], "pylong_bits_in_digit": [451, 468, 478], "dbmlibord": [451, 464], "py_coerce_c_local": 451, "freelist": [451, 468, 478], "_bundl": [451, 467, 478], "pystat": [451, 478], "py_stat": 451, "summarize_stat": 451, "memf": 451, "noderawf": 451, "retriv": 451, "eprefix": 451, "bolt": [451, 469, 478], "profile_task": [451, 477, 478], "clang": [451, 469, 472, 474, 478], "llvm": [451, 474, 478], "profdata": [451, 478], "interposit": [451, 467, 478], "testtimeout": [451, 478], "gold": 451, "thinlto": [451, 468, 469, 478], "fdata": 451, "bolt_instrument_flag": [451, 478], "bolt_apply_flag": [451, 478], "gprof": [451, 461], "fstrict": 451, "gettotalrefcount": [451, 478], "__lltrace__": [451, 478], "_pyobject_assert": 451, "ndebug": 451, "py_safe_downcast": 451, "valgrind": [451, 464, 470, 474, 478], "addresssanit": [451, 478], "asan": 451, "memorysanit": 451, "msan": 451, "undefinedbehaviorsanit": 451, "ubsan": [451, 478], "libpythonmajor": [451, 467, 478], "lib1": 451, "mpdec": 451, "with_editlin": 451, "have_libreadlin": 451, "rpath": [451, 455, 467, 478], "fnv": [451, 472], "siphash13": [451, 468, 478], "universalsdk": [451, 462, 477, 478], "sdkdir": 451, "arch": [451, 463, 478], "universal2": [451, 477, 478], "config_sit": [451, 478], "aarch64": [451, 478], "ac_cv_buggy_getaddrinfo": 451, "ac_cv_file__dev_ptmx": 451, "ac_cv_file__dev_ptc": 451, "makesetup": [451, 468, 478], "buildbottest": 451, "autoconf": [451, 469, 478], "distclean": [451, 478], "py_build_core_builtin": 451, "_asyncio": [451, 478], "py_build_core_modul": [451, 478], "pyapi_data": [451, 460, 478], "pyport": [451, 457, 478], "py_exported_symbol": 451, "py_imported_symbol": 451, "pyinit_xxx": [451, 478], "configure_cppflag": 451, "cppflag": [451, 460, 478], "basecppflag": 451, "py_cppflag": 451, "cflags_nodist": [451, 478], "65320": 451, "harden": [451, 478], "heighten": 451, "compileall_opt": [451, 469, 478], "j0": [451, 469, 478], "extra_cflag": 451, "configure_cflag": 451, "configure_cflags_nodist": 451, "basecflag": 451, "cflags_alias": 451, "ccshare": 451, "fpic": [451, 478], "cflagsforshar": 451, "py_cflag": [451, 478], "py_cflags_nodist": [451, 478], "py_stdmodule_cflag": [451, 478], "py_core_cflag": 451, "dpy_build_cor": [451, 478], "py_builtin_module_cflag": 451, "dpy_build_core_builtin": 451, "_testemb": [451, 478], "configure_ldflag": 451, "stomp": 451, "ldflags_nodist": 451, "configure_ldflags_nodist": 451, "lrt": 451, "ldshare": 451, "py_ldflag": 451, "bldshare": 451, "py_core_ldflag": 451, "py_ldflags_nodist": 451, "savag": 454, "bobsavag": 454, "pythonlaunch": 454, "textwrangl": 454, "barebon": 454, "textmat": [454, 472], "macrom": 454, "gvim": 454, "macvim": 454, "aquamac": 454, "qa1067": 454, "hashcollis": 454, "hkn": 454, "idle_intro": 454, "pyobjc": 454, "wxpython": 454, "riverbankcomput": 454, "pythonmac": 454, "maint": 455, "opensus": 455, "portal": 455, "fedoraproject": 455, "fedora_draft_document": 455, "rpm_guid": 455, "rpms": 455, "slackbook": 455, "slackwar": 455, "pkg_add": 455, "1p2": 455, "pki": 455, "install_sw": 455, "xzf": 455, "pushd": 455, "openssldir": 455, "j8": 455, "popd": 455, "team": [456, 457, 458, 459, 464, 472, 477, 478], "longpathsen": 456, "currentcontrolset": 456, "installallus": 456, "targetdir": [456, 478], "defaultalluserstargetdir": 456, "programfil": 456, "defaultjustformetargetdir": 456, "localappdata": 456, "defaultcustomtargetdir": 456, "associatefil": 456, "prependpath": [456, 468], "appendpath": [456, 468], "include_doc": 456, "include_debug": 456, "include_dev": 456, "include_ex": 456, "include_launch": 456, "installlauncherallus": 456, "include_lib": 456, "include_pip": 456, "include_symbol": 456, "include_tcltk": 456, "include_test": 456, "include_tool": 456, "launcheron": 456, "simpleinstal": 456, "simpleinstalldescript": 456, "elev": [456, 478], "unattend": [456, 478], "pythonsoftwarefound": 456, "8_qbz5n2kfra8p0": 456, "localcach": 456, "windowsapp": 456, "package_nam": 456, "vfs": 456, "systemx86": 456, "test_fil": 456, "hklm": 456, "msix": 456, "uwp": 456, "nugetclidl": 456, "excludevers": 456, "outputdirectori": 456, "pythonx86": 456, "msbuild": [456, 478], "python37": 456, "ucrtbas": [456, 478], "profession": [456, 466], "anaconda": 456, "panda": 456, "conda": 456, "canopi": 456, "winpython": 456, "prebuilt": 456, "my_python_lib": 456, "procthread": 456, "set_1": 456, "wsl": [456, 478], "pythoncor": [456, 468, 478], "insenit": 456, "oneith": 456, "pylauncher_no_search_path": 456, "xpython": 456, "py_python": 456, "py_python3": 456, "pylauncher_debug": 456, "pylauncher_dryrun": 456, "pylauncher_allow_instal": [456, 478], "pylauncher_always_instal": 456, "rc_bad_venv_cfg": 456, "rc_create_process": 456, "rc_instal": 456, "rc_internal_error": 456, "rc_no_commandlin": 456, "rc_no_python": 456, "rc_no_venv_cfg": 456, "hive": 456, "hkcu": 456, "apploc": 456, "pythonxx": 456, "mfc": 456, "golden": [456, 472], "ongo": [456, 475], "mosh": [457, 458, 459, 461], "zadka": [457, 458, 459, 461], "steadi": 457, "paid": 457, "contractu": 457, "evolut": [457, 458], "6final": 457, "0beta1": 457, "fourfold": 457, "schneider": [457, 478], "kamp": 457, "checkin": 457, "submitt": 457, "ka": [457, 458, 459, 462], "yee": [457, 458, 459, 462], "scraper": 457, "indiffer": 457, "him": 457, "consensus": 457, "dissent": 457, "lockstep": 457, "elementwis": [457, 458], "objectwis": 457, "536": 457, "countless": 457, "stormi": 457, "uhhhh": 457, "xhhhh": 457, "01ff": 457, "777": [457, 473], "setdefaultencod": 457, "unichr": [457, 459, 462], "encode_func": 457, "decode_func": 457, "stream_read": 457, "stream_writ": 457, "ustr": 457, "u2000ab": 457, "utf8_encod": 457, "utf8_decod": 457, "utf8_streamread": 457, "utf8_streamwrit": 457, "sre": [457, 459], "workhors": 457, "ewe": [457, 471], "argu": [457, 459, 464], "lengthier": [457, 458], "thoma": [457, 458, 461, 462, 463, 464, 467, 468, 469, 472, 473, 474, 475, 478], "wouter": [457, 458, 461, 462, 463, 464, 473, 476, 478], "strop": 457, "hlinuxtnam": 457, "joke": [457, 478], "jpython": 457, "realis": 457, "myself": 457, "afford": 457, "tobi": [457, 478], "kelsey": 457, "tiedemann": 457, "neil": [457, 458, 459, 460, 462, 464, 470, 473, 474, 475, 476, 478], "schemenau": [457, 458, 459, 460, 462, 464, 473, 476], "overrod": [457, 478], "tismer": [457, 472], "rewrot": [457, 460, 478], "jeremi": [457, 458, 459, 460, 461, 462, 463, 464, 478], "hylton": [457, 458, 459, 460, 461, 462, 463, 464], "isomorph": 457, "trashcan": [457, 468, 477, 478], "__cmp__": [457, 458, 460, 463, 464, 465], "itanium": [457, 473], "trent": [457, 460, 462, 472], "pythonc": 457, "dyld": [457, 478], "wart": [457, 465], "291": 457, "1beta1": 457, "runaway": 457, "gpf": 457, "find_recursionlimit": 457, "listobject": 457, "no_strict_list_append": 457, "0alpha1": 457, "gvr": [457, 459, 460, 461, 464, 474], "reaction": [457, 458], "x123456": 457, "3l": 457, "abcabcabc": 457, "4l": 457, "18446744073709551616": [457, 464], "subtlest": 457, "longval": 457, "17g": [457, 466], "0999999999999996": 457, "fulton": [457, 461, 474, 478], "extensionclass": 457, "myextensionclass": 457, "importdl": 457, "reorganis": 457, "dynload_": 457, "vladimir": [457, 458, 460, 467, 469, 476, 478], "marangozov": [457, 458, 460], "pymem": [457, 462], "objimpl": 457, "gusi": 457, "unthread": 457, "yakov": 457, "markovitch": 457, "charl": [457, 464, 469, 471, 472, 473, 474, 475, 478], "waldman": 457, "affair": 457, "arduous": 457, "ritual": 457, "shepherd": [457, 460], "ward": [457, 459, 460, 461, 462, 473, 478], "tarbal": [457, 478], "py_modul": 457, "module1": 457, "module2": 457, "expat_extens": 457, "define_macro": 457, "xml_ns": 457, "include_dir": 457, "xmltok": 457, "xmlpars": 457, "xmlrole": 457, "sdist": [457, 458, 462, 464, 474, 475, 478], "bdist_rpm": [457, 478], "bdist_wininst": [457, 467, 476, 477, 478], "xmllib": 457, "mullend": [457, 463], "tag1": 457, "perslist": 457, "persona": 457, "claudius": 457, "denmark": 457, "son": 457, "nephew": 457, "20th": 457, "4dom": 457, "fourthought": 457, "xmlproc": 457, "lar": [457, 460, 461, 462, 463, 464, 470, 471], "garshol": 457, "sgmlop": 457, "gallew": 457, "httplib": [457, 460, 461, 463, 464, 465, 478], "create_lin": 457, "create_polygon": 457, "oliv": [457, 478], "andrich": 457, "hewlett": 457, "packard": 457, "cmpcach": 457, "macmillan": 457, "twin": 457, "sunaudiodev": [457, 463], "bosch": 457, "prescod": [457, 458, 459, 462], "spider": 457, "fetchabl": 457, "browsercontrol": 457, "_winreg": [457, 463, 464, 465], "tutt": 457, "imputil": [457, 460, 464], "ihook": [457, 460, 463, 464], "vanilla": 457, "stdwin": 457, "packmail": 457, "whatsound": 457, "zmod": 457, "bolen": [457, 459], "gregg": 457, "hauser": 457, "detlef": [457, 460], "lannert": [457, 460], "aahz": [457, 461, 462], "maruch": 457, "tobia": 457, "polzin": 457, "russ": 457, "schmidt": 457, "sizabl": [458, 459], "pace": [458, 463], "clumsier": [458, 459], "list_attribut": [458, 459], "unknow": [458, 459], "gradual": [458, 459], "compulsori": [458, 459, 460], "crunch": 458, "tp_richcmp": 458, "ascher": 458, "spare": 458, "toolbox": [458, 459, 460], "aycock": 458, "spark": [458, 478], "135143996": 458, "py_tpflags_checktyp": 458, "middleton": 458, "vault": 458, "parnassus": 458, "retir": [458, 478], "wayback": 458, "catalogu": 458, "bdist_": 458, "sean": [458, 460, 461, 462, 464, 478], "reifschneid": [458, 460, 461, 462, 464], "addict": 458, "purcel": 458, "gellekum": 458, "ninth": 458, "edward": [458, 459, 461, 462], "136": 458, "underestim": [458, 459, 460, 461, 462, 463], "afoul": [458, 460], "getc": 458, "jeff": [458, 460, 472, 474, 478], "epler": 458, "fuller": 458, "preliminari": [458, 475, 478], "ben": [458, 462, 468, 473, 478], "wolfson": 458, "vestigi": [458, 478], "ancestri": 458, "shrunk": [458, 478], "340k": 458, "majewski": 458, "jason": [458, 460, 463, 469, 472, 476, 477, 478], "tishler": [458, 460, 478], "risco": [458, 465], "dietmar": 458, "schwertberg": 458, "unixwar": 458, "billi": 458, "alli": 458, "graem": 458, "goodger": [458, 459, 461], "grave": 458, "hudson": [458, 459, 460, 462, 478], "irregular": 459, "dark": [459, 478], "safeguard": 459, "esoter": [459, 462], "lockablefil": 459, "posixfil": [459, 463], "__methods__": [459, 465, 478], "inaccur": [459, 461, 478], "defstat": 459, "eiffel": 459, "postcondit": 459, "eiffelmethod": 459, "pre_f": 459, "post_f": 459, "zodb": 459, "get_par": 459, "__coerce__": [459, 464], "get_siz": 459, "set_siz": 459, "new_attr": 459, "whet": 459, "appetit": 459, "corp": 459, "0x8116870": 459, "crew": [459, 460, 462], "0x8117f90": [459, 460], "www2": [459, 460], "cs": [459, 460], "arizona": [459, 460], "ipd266": [459, 460], "harbor": [459, 460], "magnus": [459, 460], "hetland": [459, 460], "1234567890123": 459, "1234567890123l": 459, "18446744073709551616l": 459, "herald": 459, "erupt": 459, "storm": 459, "sarcast": 459, "110000": 459, "261": [459, 478], "x9c": 459, "xc9": 459, "xc1": 459, "nand": 459, "666": 459, "5r92": 459, "qe": 459, "ee8v4": 459, "v8": 459, "f5d": 459, "6yd86yt": 459, "f5r": 459, "f5r8f": 459, "s92p": 459, "86yd": 459, "5t": 459, "71i": 459, "5x": [459, 469, 474, 475, 478], "sheesh": 459, "furrfu": 459, "__unicode__": [459, 464], "headlin": 459, "oreillynet": 459, "meerkat": 459, "getchannel": 459, "freshmeat": 459, "4549": 459, "3dgamer": 459, "52719": 459, "xsl": 459, "html2fo": 459, "2104": 459, "memberst_mtim": 459, "mathewson": 459, "ichiro": 459, "itojun": 459, "hagino": 459, "bigcharset": 459, "2487": 459, "pier": [459, 460], "lauder": [459, 460], "anthoni": [459, 461, 462, 475, 476, 477, 478], "baxter": [459, 461, 462], "michel": [459, 460, 471, 472, 473, 474, 475, 476, 477, 478], "pelleti": 459, "rfc2822": [459, 478], "grunt": 459, "generator": 459, "itamar": [459, 469], "shtull": 459, "traur": 459, "implementor": [459, 464, 474], "py_tpflags_gc": 459, "pytpflags_have_gc": 459, "pyobject_gc_init": 459, "pyobject_gc_fini": 459, "pygc_head_s": 459, "pyobject_as_gc": 459, "pyobject_from_gc": 459, "untyp": 459, "vsprintf": 459, "overrun": [459, 464, 478], "527": 459, "683": [459, 469, 478], "82": 459, "blown": 459, "osa": 459, "quicktim": 459, "cleanfutur": 459, "gpled": 459, "ftpmirror": 459, "romberg": 459, "pyrange_new": [459, 462], "sneakili": 459, "rhythm": 459, "borland": [459, 478], "stephen": [459, 468, 478], "hansen": [459, 477, 478], "generous": 459, "installermast": 459, "0a": 459, "stolk": 459, "bremmer": 459, "keith": 459, "brigg": 459, "carel": [459, 478], "felling": 459, "mclay": 459, "donnel": 459, "joona": 459, "paalasma": 459, "jen": [459, 478], "reinhardt": 459, "welbourn": 459, "polish": [460, 478], "berkeleydb": [460, 463, 464, 478], "immutableset": [460, 461], "union_upd": 460, "ungain": 460, "martelli": [460, 463], "suzuki": 460, "hisao": 460, "nyman": 460, "inadequ": 460, "hodgson": 460, "irrit": 460, "__builtin__": [460, 465, 466], "walter": [460, 461, 462, 463, 476], "rwald": [460, 461, 462, 476], "heart": [460, 469], "quixot": 460, "richard": [460, 462, 463, 471, 472, 478], "toss": 460, "sundri": 460, "kevin": [460, 461, 463, 464, 469, 470, 478], "alti": 460, "cole": [460, 461, 470, 478], "mcnamara": [460, 462], "cliff": [460, 464], "cpickl": [460, 462, 464, 465], "fanciest": 460, "__safe_for_unpickling__": 460, "rip": 460, "dcba": 460, "innocu": 460, "welter": 460, "fakeseq": 460, "calc_item": 460, "underw": [460, 461, 462, 463], "dylan": 460, "simionato": 460, "029035": 460, "pedroni": [460, 462], "setcheckinterv": [460, 477, 478], "getcheckinterv": [460, 477, 478], "_socket": [460, 478], "u4000": 460, "u4001abc": 460, "simon": [460, 478], "brun": 460, "0045": 460, "goofi": 460, "0goofi": 460, "oren": [460, 471, 475, 478], "tirosh": [460, 471], "christoph": [460, 473, 478], "craig": [460, 478], "set_lineno": 460, "idiosyncrasi": [460, 478], "hotspot": 460, "pyston": [460, 461, 462, 465, 478], "orendorff": [460, 463], "bsddb185": 460, "db2pickl": 460, "pickle2db": 460, "bsddb3": [460, 465], "sampmodul": 460, "samp": 460, "cpp": [460, 478], "robert": [460, 462, 463, 464, 473, 475, 478], "weber": [460, 473, 478], "strand": [460, 461], "lg": 460, "xlinux": 460, "dad": 460, "priorityqu": 460, "connor": [460, 472, 474, 478], "idlefork": 460, "tino": 460, "deg": 460, "loadavg": 460, "geert": [460, 473, 478], "otkidach": 460, "stat_float_tim": [460, 462, 471, 475, 478], "1034791200": 460, "6335014": 460, "fitzroy": 460, "dale": [460, 471], "tu": 460, "sn": 460, "nos": 460, "3407": 460, "3805": 460, "1505": 460, "7023": 460, "2401": 460, "2267": 460, "9733": 460, "8083": 460, "9195": 460, "rexec": 460, "bastion": 460, "rotor": [460, 461], "gilfix": 460, "collabor": 460, "exc_clear": [460, 465], "gust": [460, 461, 462, 463, 464, 470, 471], "whit": 460, "defi": 460, "auguri": 460, "sparrow": 460, "tis": [460, 461, 478], "companion": 460, "dummy_thread": [460, 475, 477, 478], "timer1": 460, "timer2": 460, "laptop": 460, "36831796169281006": 460, "37441694736480713": 460, "35304892063140869": 460, "17574405670166016": 460, "18193507194519043": 460, "17565798759460449": 460, "031107": 460, "tcl_obj": [460, 478], "wantobject": [460, 478], "tkapp": [460, 478], "dictmixin": 460, "seqdict": 460, "lookalik": 460, "keylist": [460, 461], "valuelist": 460, "quinlan": [460, 461, 464, 470], "3491": [460, 478], "30t21": 460, "994956": 460, "827738": 460, "optik": [460, 461, 462], "0x400cad4c": 460, "0x400cad2c": 460, "iinput": 460, "llength": 460, "undistinguish": 460, "pymemcompat": 460, "libpython2": 460, "ondrej": 460, "palkovski": 460, "dl_export": 460, "dl_import": 460, "pyarg_noarg": 460, "pystring_new": 460, "test_bufio": 460, "emx": 460, "macintyr": [460, 462], "weaklink": [460, 477, 478], "atheo": [460, 478], "hurd": [460, 478], "openvm": 460, "mist": 460, "nifti": 460, "richi": 460, "hindl": 460, "0xffffffff": [460, 474, 478], "0xffffffffl": 460, "get_distutil_opt": 460, "bauer": 460, "chermsid": 460, "fraser": 460, "kelli": [460, 471, 472], "gerber": 460, "chris": [460, 462, 463, 471, 473, 474, 478], "lambert": [460, 472], "lalo": 460, "netzer": 460, "nowak": 460, "francesco": 460, "ricciardi": 460, "suzi": 460, "radic": 461, "481": 461, "arbcd": 461, "wxi": 461, "unif": 461, "8589934592": 461, "svensson": 461, "get_all_link": 461, "jiwon": [461, 471], "seo": [461, 471], "hye": [461, 462], "shik": [461, 462], "untrain": 461, "deco": 461, "0x402ef0d4": 461, "require_int": 461, "_deco": 461, "brain": 461, "bend": 461, "func_nam": [461, 465], "smith": [461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "979728": 461, "russel": 461, "pythondecoratorlibrari": 461, "dpkg": 461, "deb": 461, "unawar": 461, "0001100110011": 461, "inaccuraci": [461, 464], "1000000000000001": [461, 466], "magnifi": 461, "dodg": 461, "12f": 461, "100000000000": 461, "7956": 461, "64739884393063583815028902": 461, "1275": 461, "9184": 461, "123456789012": 461, "351364": 461, "18288201344": 461, "18288201344j": 461, "1828820134592177245001": 461, "facundo": [461, 463], "batista": [461, 463], "lahey": 461, "speleotrov": 461, "cowlishaw": 461, "rexx": 461, "resolve_dotted_attribut": 461, "dima": 461, "dorfman": 461, "gtk": [461, 463], "pyos_ascii_strtod": [461, 464, 466], "pyos_ascii_atof": [461, 464, 466], "pyos_ascii_formatd": 461, "buf_len": 461, "glib": 461, "relicens": 461, "donat": 461, "rei": 461, "carneiro": 461, "colormap": 461, "overflowwarn": 461, "method_descriptor": 461, "armin": [461, 462, 463, 464, 466, 470, 471, 472, 478], "rigo": [461, 462, 463, 478], "vasiliev": 461, "cjkcodec": [461, 478], "prc": 461, "roc": 461, "roman8": [461, 478], "iso_8859": 461, "pctp": 461, "belmont": [461, 467, 468, 478], "rg": 461, "lehmann": 461, "gass": 461, "tenfold": 461, "eland": 461, "yves": [461, 468], "dionn": 461, "arnaud": [461, 471], "mazin": 461, "key_val": 461, "0x402c2080": 461, "0x402c2090": 461, "bookmark": 461, "rgen": [461, 478], "erhard": 461, "extractor": 461, "cryptoapi": 461, "trevor": 461, "perrin": [461, 467], "beni": 461, "cherniavski": 461, "raynor": 461, "hector": 461, "urtubia": 461, "30000": 461, "sidestep": 461, "unlucki": [461, 478], "mpz": 461, "jar": 461, "loper": 461, "ambiti": 461, "objn": 461, "py_is_nan": 461, "tsc": 461, "pentium": 461, "misnam": [461, 470], "tracebackobject": 461, "pytracebackobject": 461, "dircach": [461, 463], "koray": 461, "dyck": 461, "hurt": 461, "hamish": 461, "lawson": 461, "sadruddin": 461, "rejeb": 461, "356": 462, "458": 462, "true_valu": 462, "false_valu": 462, "voter": 462, "true_v": 462, "false_v": 462, "rarer": 462, "pygtk": 462, "open_item": 462, "open_func": 462, "item_path": 462, "popup_menu": 462, "pypackag": 462, "numarray": 462, "oldpackag": 462, "gpg": 462, "unclean": [462, 478], "holger": 462, "krekel": 462, "tidier": 462, "pylib": 462, "pycheck": 462, "exception1": 462, "exception2": 462, "hackish": 462, "trivia": 462, "phillip": [462, 463, 466, 470, 474, 478], "ebi": [462, 463, 466, 470], "288": 462, "20160321211320": 462, "sidh": 462, "000178": 462, "sugalski": 462, "db_connect": [462, 463], "databaseconnect": [462, 463], "flawless": [462, 463], "db_transact": [462, 463], "mgr1": [462, 463], "mgr2": [462, 463], "version2": 462, "whatsnew": [462, 478], "lp64_wp": 462, "travi": [462, 463, 464, 478], "oliph": [462, 463, 464], "zerodict": 462, "is_image_fil": 462, "lynn": 462, "bethard": [462, 464, 470, 473, 478], "puzzl": 462, "newbi": [462, 464], "needforspe": 462, "sprint": [462, 463], "reykjavik": 462, "ewt": 462, "llc": 462, "ccp": 462, "mcintyr": [462, 463], "ippolito": [462, 463, 464, 466], "diederich": [462, 466], "immisch": 462, "nel": 462, "mezzo": 462, "cammin": 462, "nostra": 462, "vita": 462, "ritrovai": 462, "una": 462, "selva": 462, "oscura": 462, "che": 462, "diritta": 462, "smarrita": 462, "init_lett": 462, "hotshot": 462, "josh": [462, 463, 473, 474, 476, 477, 478], "spoerri": 462, "bjorn": [462, 478], "tillenius": 462, "sweep": 462, "gregori": [462, 463, 464, 466, 467, 468, 469, 472, 474, 475, 476, 478], "schroeder": [462, 478], "antti": 462, "louko": 462, "diego": [462, 476], "petten": 462, "goir": 462, "pybench": [462, 478], "regsub": 462, "statcach": 462, "tzpars": 462, "whrandom": 462, "kiendl": 462, "biondi": 462, "netlink": 462, "linuxjourn": 462, "7356": 462, "group_mask": 462, "getfamili": 462, "getproto": 462, "ih3": 462, "187": 462, "blai": 462, "subvers": [462, 463, 464, 470, 475, 478], "45313": 462, "45315": 462, "45355": 462, "45356m": 462, "iterkeyref": 462, "itervalueref": 462, "oleg": [462, 469, 478], "broytmann": 462, "oussoren": [462, 463, 464, 470, 472, 477], "atle": [462, 478], "heller": [462, 463, 464], "dl": [462, 463, 478], "strfri": 462, "71828": 462, "1783957616": 462, "20180410025338": 462, "theller": 462, "elementpath": [462, 475], "20201124024954": 462, "effbot": [462, 464], "textnod": 462, "rss10": 462, "svg": 462, "10px": 462, "320px": 462, "tran": 462, "qti": 462, "rhat": 462, "msoft": 462, "140000000000001": 462, "wsgi_app": 462, "20160331090247": 462, "supervis": 462, "market": 462, "for_loop": 462, "339": 462, "pyparser_astfromstr": [462, 467, 478], "pyparser_astfromfil": [462, 467, 478], "pyast_compil": [462, 467, 478], "ehresman": [462, 478], "kurt": 462, "kaiser": [462, 478], "evan": [462, 477, 478], "256k": 462, "py_loc": 462, "py_local_inlin": 462, "py_local_aggress": 462, "pyerr_warn": 462, "lll": [462, 478], "2573": 462, "pymem_": 462, "_malloc": 462, "_free": 462, "ralf": [462, 463], "gross": [462, 478], "kunstlev": 462, "iain": 462, "pryor": 462, "rovner": 462, "weikart": 462, "361": 463, "redesign": [463, 464, 472], "259": [463, 478], "py3kwarn": 463, "py_py3kwarningflag": 463, "3xxx": 463, "3100": 463, "committe": 463, "jira": 463, "launchpad": 463, "trac": 463, "upfront": 463, "stellenbosch": 463, "africa": 463, "1980s": 463, "1990s": [463, 478], "ream": 463, "toolchain": [463, 474, 478], "dozen": [463, 470, 478], "python26": 463, "39916800": 463, "51090942171709440000": 463, "8222838654177922817725562880000000": 463, "33452526613163807108170062053440751665152000000000": 463, "mgr": 463, "15511187532873822802242430164693032110632597200169861120000": 463, "jess": [463, 466, 473, 474, 475, 478], "noller": [463, 466], "oudkerk": [463, 471, 472, 478], "last_login": 463, "npython": 463, "6a1": 463, "61261m": 463, "5367": 463, "mp4": 463, "banquet": 463, "invoic": 463, "750000e": 463, "6564": 463, "talin": 463, "u751f": 463, "u3080": 463, "u304": 463, "u3000": 463, "u3054": 463, "u3081": 463, "u305f": 463, "u307": 463, "pystringobject": 463, "u21ef": 463, "u3244": 463, "x87": 463, "x89": 463, "u31ef": 463, "ttys": 463, "cstringio": [463, 465], "stutzbach": [463, 464, 470], "verdon": 463, "doerwald": 463, "lownd": 463, "pybuf_lock": 463, "carl": [463, 464, 469, 470, 471, 476, 477, 478], "bank": 463, "vagu": 463, "printabletyp": 463, "drawabl": 463, "draw_doubl": 463, "aranguren": 463, "0o21": 463, "0b101111": 463, "052": 463, "173": 463, "0b10101101": 463, "1101": 463, "0b1101": 463, "patrick": [463, 467, 478], "maupin": 463, "undergo": 463, "yasskin": [463, 464, 470], "guil": 463, "r5rs": 463, "66666666666666663": 463, "40000000000000002": 463, "7074029114692207l": 463, "2251799813685248l": 463, "6004799503160661l": 463, "18014398509481984l": 463, "andi": [463, 466, 478], "chu": [463, 466], "1739468": [463, 466, 473], "2196": 463, "ud": 463, "1686487": 463, "amauri": [463, 464, 466, 470, 478], "forgeot": [463, 464, 466, 470, 478], "3473": 463, "2719": 463, "abc123": 463, "cdf246": 463, "1635": 463, "1640": 463, "3008": 463, "e000000000000p": 463, "5555555555555p": 463, "niceti": 463, "dickinson": [463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "2235": 463, "austin": 463, "1537": 463, "1473257": 463, "1444529": 463, "cplx": 463, "1491866": 463, "bengt": 463, "richter": 463, "1193128": 463, "1591665": 463, "im_self": 463, "1631171": 463, "jacob": [463, 468, 469, 478], "1700288": 463, "py_tpflags_have_version_tag": [463, 478], "1878": 463, "pitrou": [463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "1819": 463, "jvm": 463, "josiah": [463, 471], "carlson": [463, 471], "1736190": 463, "jes": [463, 464, 471, 474, 475, 478], "cea": [463, 464, 471, 474, 475, 478], "avi": [463, 464, 471, 474, 475, 478], "jcea": [463, 464, 465], "programacion": [463, 465], "dbshelv": 463, "barn": [463, 475, 478], "fiori": 463, "nubi": 463, "1817": 463, "600362": 463, "1381": 463, "var_typ": 463, "amplitud": 463, "dq": 463, "arvin": 463, "schnell": 463, "1638033": 463, "fabian": 463, "kreutz": 463, "insert_mod": 463, "1158": 463, "7182818": 463, "9999999895305022877376682436": 463, "1221598": 463, "1739906": 463, "1001604": 463, "iter1": 463, "iter2": 463, "getmoduleinfo": [463, 474, 478], "getarg": [463, 478], "izip_longest": 463, "2n": [463, 478], "2138": 463, "brouwer": 463, "2819": 463, "711019": 463, "lenton": 463, "wine": [463, 478], "petrosyan": 463, "inst_nam": 463, "_helper": 463, "levinson": 463, "1663329": 463, "horcicka": 463, "1181": 463, "1273829": 463, "1115886": 463, "barran": 463, "1339796": 463, "957650": 463, "1393667": 463, "1106316": 463, "exception_hierarchi": 463, "2439": 463, "achim": 463, "gaedk": 463, "1137": 463, "shawn": 463, "ligocki": 463, "1727780": 463, "wladmir": 463, "laan": 463, "1681432": 463, "hoyt": [463, 473, 478], "schmitt": 463, "846388": 463, "3487": 463, "lorenz": [463, 478], "2250": 463, "1861": 463, "pollobj": 463, "1657": 463, "ziad": [463, 464, 470, 473, 478], "2663": 463, "woken": 463, "1583": 463, "guilherm": [463, 464, 466, 472, 474, 475, 478], "polo": [463, 464, 466, 472, 474, 475, 478], "2240": 463, "2033": 463, "leif": 463, "hedstrom": 463, "957003": 463, "3207": 463, "fenner": 463, "829951": 463, "alberto": [463, 471], "bertog": 463, "1646": 463, "pomran": 463, "pedro": 463, "werneck": 463, "742598": 463, "1193577": 463, "remahl": 463, "1534": 463, "schuppeni": 463, "2898": 463, "1648": 463, "damien": [463, 472], "miller": [463, 472], "1537850": 463, "dustin": [463, 478], "mitchel": [463, 468, 478], "test_support": [463, 465], "transientresourc": 463, "sf": 463, "3781": 463, "wrec": 463, "dwayn": 463, "bailey": 463, "1581073": 463, "2871": 463, "erik": [463, 468, 469, 475, 478], "demain": 463, "1533909": 463, "2906": 463, "gregor": 463, "lingl": 463, "1513695": 463, "ftpwrapper": [463, 478], "3811": 463, "1599845": 463, "_send_traceback_head": 463, "1330538": 463, "riku": 463, "lindblad": 463, "2985": 463, "251": 463, "sysmodul": 463, "467924": 463, "horler": 463, "1775025": 463, "alexey": [463, 472, 473, 478], "borzenkov": 463, "1734346": 463, "ronach": [463, 464, 466, 470, 471, 472], "abcdefghijklm": 463, "stararg": [463, 478], "iterable1": 463, "__hex__": [463, 465], "__oct__": [463, 465], "in_json": 463, "simplejson": [463, 464], "data_struct": 463, "lastaccess": 463, "plist_str": 463, "writeplisttostr": 463, "new_struct": 463, "readplistfromstr": 463, "writeplist": [463, 472], "readplist": [463, 472, 475, 478], "1649190": 463, "outset": 463, "1798": 463, "janssen": 463, "bgenloc": 463, "buildtool": 463, "bundlebuild": [463, 478], "fpformat": 463, "gensuitemodul": 463, "imageop": 463, "imgfil": 463, "mhlib": 463, "mimetool": 463, "multifil": 463, "toaiff": 463, "gopherlib": [463, 465], "mimewrit": 463, "mimifi": 463, "rgbimg": 463, "duncan": 463, "grisbi": 463, "pyfile_incusecount": 463, "pyfile_decusecount": 463, "1675423": 463, "1629": 463, "1530959": 463, "free_list": [463, 478], "numfre": 463, "_maxfreelist": 463, "patchcheck": [463, 478], "nt4": 463, "sp4": 463, "1753245": 463, "flori": 463, "bruynoogh": 463, "2125": 463, "macf": 463, "macostool": 463, "1490190": 463, "_builtinsuit": 463, "aepack": 463, "aetool": 463, "aetyp": 463, "applesingl": 463, "appletrawmain": 463, "appletrunn": 463, "argvemul": 463, "audio_mac": 463, "autogil": 463, "carbon": [463, 470], "cfmfile": 463, "codewarrior": 463, "colorpick": 463, "easydialog": 463, "findertool": 463, "icglu": 463, "icopen": 463, "macerror": 463, "macresourc": 463, "miniaefram": 463, "nav": [463, 478], "osaterminolog": 463, "pimp": 463, "pixmapwrapp": 463, "stdsuit": 463, "systemev": 463, "terminalcommand": 463, "cddb": 463, "cdplayer": 463, "fl": 463, "flp": 463, "glws": 463, "gl": 463, "panelpars": 463, "readcd": 463, "sv": 463, "torgb": 463, "videoread": 463, "1683368": 463, "conversionsyntax": 463, "1706815": 463, "dict1": 463, "dict2": 463, "ralph": 463, "corderoy": 463, "lambach": 463, "michlmayr": 463, "warner": 463, "373": 464, "7319": 464, "reenabl": 464, "qwarn": 464, "744": 464, "073": [464, 478], "551": 464, "616": [464, 477, 478], "is_verbos": 464, "bore": 464, "1mb": 464, "configdict": 464, "netlog": 464, "netlogg": 464, "vk": 464, "revamp": [464, 470], "vassalotti": [464, 466, 470, 472, 478], "0x37f850": 464, "0x37f080": 464, "122": [464, 474], "mb": [464, 478], "2335": 464, "aaa": 464, "aaaaa": 464, "2333": 464, "codereview": 464, "appspot": [464, 466, 470], "53094": [464, 466, 470], "icc": [464, 466, 478], "suncc": 464, "7117": 464, "295147905179352891391": 464, "9514790517935283e": 464, "65535l": 464, "9514790517935289e": 464, "3166": 464, "1811": 464, "meador": [464, 471, 478], "5211": 464, "5237": [464, 466], "1588": 464, "7988": 464, "3382": 464, "7994": [464, 472], "124": [464, 466, 470, 472], "johansson": [464, 466], "victor": [464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "stinner": [464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "3439": [464, 466], "7902": 464, "1583863": 464, "4759": 464, "5982": 464, "7604": 464, "belchenko": 464, "1616979": [464, 470], "8016": 464, "kaliszewski": 464, "4764": 464, "5677": 464, "lingard": 464, "7362": 464, "8268": 464, "7140": 464, "curtin": [464, 470, 471, 472, 475], "survivor": 464, "4074": 464, "4688": [464, 466], "long_info": 464, "4258": [464, 466, 476], "5260": 464, "5512": 464, "1087418": 464, "5176": 464, "4715": 464, "gawain": [464, 470], "bolton": [464, 470], "6713": [464, 470], "florent": [464, 470], "xicluna": [464, 470], "7462": [464, 470], "7622": [464, 470], "mcguir": [464, 466], "5084": [464, 466], "5670": 464, "maru": 464, "senthil": [464, 467, 470, 472, 473, 474, 475, 476, 477, 478], "kumaran": [464, 467, 470, 472, 473, 474, 475, 476, 477, 478], "5142": 464, "7703": 464, "2devel9": 464, "8156": 464, "hagen": [464, 478], "rstenau": [464, 478], "3860": 464, "1696199": [464, 466], "field1": 464, "field2": 464, "_2": [464, 466], "1818": [464, 466], "8729": 464, "kindahl": 464, "7005": 464, "3924": 464, "1515": 464, "4606": 464, "klose": [464, 471, 474], "8142": 464, "5788": 464, "strive": 464, "4796": 464, "2531": [464, 470], "8257": [464, 470], "6595": 464, "jos": [464, 478], "conti": 464, "7633": 464, "6857": 464, "7279": 464, "anatoli": [464, 478], "techtonik": [464, 478], "7585": 464, "8688": 464, "lennart": [464, 478], "regebro": [464, 478], "7490": 464, "murray": [464, 470, 472, 473, 474, 478], "1368247": 464, "5812": 464, "8294": [464, 470], "oversight": [464, 471, 473, 475, 478], "giampaolo": [464, 469, 470, 471, 473, 475, 476, 478], "rodola": [464, 469, 470, 473, 475, 478], "2054": 464, "mouzo": 464, "6845": 464, "5479": 464, "nir": [464, 470, 471, 475, 478], "7471": [464, 470], "jacqu": 464, "frechet": 464, "4272": 464, "tadek": 464, "pietraszek": 464, "2846": [464, 470], "chenet": [464, 470], "7418": [464, 470], "kristj": [464, 470, 472], "valur": [464, 470, 472], "nsson": [464, 470, 472], "4879": 464, "eldon": 464, "ziegler": 464, "derek": [464, 466], "morr": [464, 466], "1655": [464, 466], "_pyio": [464, 466, 469, 478], "4991": 464, "chambon": 464, "6939": 464, "5032": 464, "4816": 464, "4136": [464, 466], "5381": 464, "1607951": 464, "6896": 464, "nirina": 464, "raseliarison": 464, "3366": 464, "lekma": 464, "5585": 464, "cazabon": 464, "6963": 464, "1664": [464, 466], "6508": 464, "calderon": [464, 471], "7333": 464, "zsolt": [464, 478], "cserna": [464, 478], "7242": 464, "matt": [464, 472, 473, 478], "giuca": 464, "5827": 464, "3426": [464, 478], "laban": [464, 466], "4739": [464, 466], "6816": 464, "3002": 464, "francoi": 464, "natali": [464, 471, 472, 473], "8354": 464, "6693": [464, 470], "8104": 464, "nagl": [464, 478], "disable_nagle_algorithm": 464, "6192": 464, "6267": 464, "7133": 464, "ssl_mode_auto_retri": 464, "8222": 464, "8322": [464, 470], "beda": 464, "kosata": 464, "8484": [464, 470], "8321": [464, 470], "bbhhiillqq": 464, "1523": 464, "8300": 464, "disk0s2": 464, "52g": 464, "49g": 464, "0g": [464, 478], "1068268": 464, "8451": 464, "4285": [464, 466], "7766": 464, "unnot": 464, "7357": 464, "lesher": [464, 478], "1674032": 464, "unihan": 464, "ander": [464, 467, 475, 478], "chrigstr": 464, "1571184": 464, "8024": 464, "2987": [464, 470], "1080": 464, "200c": 464, "417a": 464, "ampersand": 464, "stylesheet": [464, 478], "style1": 464, "muller": 464, "2746": 464, "encode_threshold": 464, "5511": 464, "kuba": 464, "wieczorek": 464, "4710": 464, "7610": [464, 470], "gabriel": [464, 468, 478], "genellina": 464, "4756": 464, "6003": 464, "anydbm": [464, 465], "file_util": [464, 478], "distutils2": 464, "tck": 464, "tcl8": 464, "tkcmd": 464, "ttk_intro": 464, "screenshot": 464, "2983": [464, 466], "franklin": 464, "walzer": [464, 470, 478], "2618": 464, "unittest2": 464, "nose": 464, "6001": 464, "impati": 464, "dyer": 464, "8074": 464, "1034053": 464, "5663": 464, "4444": 464, "5679": 464, "2578": 464, "7031": 464, "assertnotregexpmatch": [464, 468, 469], "8038": 464, "assertitemsequ": 464, "assertdictcontainssubset": [464, 466, 469, 470, 478], "roddi": 464, "6866": 464, "fern": 464, "ndez": 464, "3379": 464, "5728": 464, "awkward": [464, 476], "20210619163128": 464, "shtml": 464, "getiter": [464, 470, 476, 477, 478], "childless": 464, "20200703234532": 464, "6472": [464, 470], "bt": [464, 478], "8032": 464, "3632": 464, "4293": 464, "7033": [464, 470], "horsen": 464, "7528": 464, "7767": [464, 470], "trojan": 464, "hors": 464, "5753": [464, 470], "py_isalnum": 464, "py_isalpha": 464, "py_isdigit": 464, "py_islow": 464, "py_isspac": 464, "py_isupp": 464, "py_isxdigit": 464, "py_tolow": 464, "py_toupp": 464, "5793": 464, "pyeval_callobject": [464, 470, 477, 478], "8276": [464, 470], "pyformat_fromstr": 464, "pyformat_fromstringv": 464, "7228": 464, "1590864": 464, "_shutdown": [464, 478], "1722344": 464, "t_string_inplac": 464, "3102": [464, 465], "arfrev": [464, 470, 478], "freht": [464, 470, 478], "taifersar": [464, 470, 478], "arahesi": [464, 470, 478], "7609": 464, "2422": [464, 470], "6491": 464, "x87_double_round": 464, "2937": 464, "ldcxxshare": 464, "1222585": 464, "clinton": 464, "roy": [464, 478], "3585": 464, "6094": 464, "ucnhash_capi": [464, 467, 478], "pycobject": [464, 466, 470], "vtabl": 464, "pycobject_asvoidptr": 464, "5630": [464, 466], "crtassem": 464, "crt_assembly_vers": 464, "vc_assembly_publickeytoken": 464, "libraries_assembly_name_prefix": 464, "cournapeau": 464, "4365": 464, "7347": 464, "_beginthreadex": 464, "3582": 464, "miki": [464, 470], "tebeka": [464, 470], "1220212": 464, "hirokazu": [464, 471, 478], "yamamoto": [464, 471, 475, 478], "5913": 464, "mimelib": 464, "4969": 464, "4865": 464, "28440": [464, 478], "so_setfib": 464, "kyle": [464, 467, 474, 475, 476, 477, 478], "vanderbeek": 464, "8235": 464, "iobench": 464, "ccbench": 464, "throughput": [464, 475, 478], "5464": 464, "ziga": 464, "seilnacht": 464, "1180193": 464, "randse": 464, "6152": [464, 473], "7312": 464, "piotr": 464, "arowski": 464, "8233": 464, "1533": 464, "5920": 464, "6101": 464, "7853": 464, "leander": 464, "anand": [464, 470], "pillai": [464, 470], "7150": 464, "7348": 464, "5080": 464, "exempt": 464, "pythonshowrefcount": 464, "31733": 464, "count_alloc": [464, 474, 477, 478], "pythonshowalloccount": 464, "31692": 464, "gaynor": [464, 467, 473, 478], "21306": 464, "1g": [464, 478], "zachari": [464, 472, 473, 475, 478], "ware": [464, 472, 473, 475, 478], "21462": 464, "21304": 464, "21671": 464, "0224": 464, "tls1": 464, "reid": [464, 470], "21308": 464, "21305": 464, "21307": 464, "stufft": [464, 472], "deili": [464, 470, 472, 477], "pythonhttpsverifi": 464, "_https_verify_certif": 464, "autotool": [464, 473, 474], "pregener": [464, 473, 474, 478], "23404": [464, 473, 474, 478], "philip": [464, 469, 470, 474, 478], "jenvey": [464, 470], "ryan": [464, 471, 472, 474, 475, 478], "lovett": 464, "hugh": 464, "secker": 464, "walker": 464, "cruft": 465, "wealth": 465, "softspac": [465, 478], "retrain": 465, "corollari": 465, "incompar": 465, "0720": 465, "0o720": 465, "loud": 465, "unixi": 465, "3138": 465, "some_sequ": 465, "274": 465, "vindic": 465, "3109": 465, "crutch": 465, "item1": 465, "item2": 465, "3113": 465, "b_c": 465, "3108": 465, "beo": 465, "instabl": 465, "disobey": 465, "copy_reg": 465, "markupbas": 465, "_markupbas": [465, 467, 478], "dbhash": 465, "htmlentitydef": 465, "basehttpserv": 465, "cgihttpserv": [465, 478], "simplehttpserv": [465, 478], "acquire_lock": [465, 469], "release_lock": [465, 469], "jumpahead": 465, "tmpnam": 465, "tempnam": 465, "tmpfile": 465, "scoop": 465, "secondaryexcept": 465, "primary_except": 465, "__getslice__": 465, "__setslice__": 465, "__delslice__": 465, "3114": 465, "func_x": 465, "__x__": 465, "wit": [465, 478], "func_cod": 465, "func_default": 465, "func_dict": 465, "func_doc": 465, "func_glob": 465, "3111": 465, "tru64": 465, "3123": 465, "pynumber_coerc": 465, "pynumber_coerceex": 465, "pymember_get": 465, "pymember_set": 465, "nb_nonzero": 465, "with_cycle_gc": 465, "contort": 465, "8901234": 466, "12j": 466, "600000": 466, "901": 466, "120000j": 466, "underway": 466, "camelot": 466, "5675": [466, 470], "mattia": [466, 470], "ndstr": [466, 470], "4707": 466, "199999999999ap": 466, "1580": 466, "dickinso": 466, "grew": [466, 470], "namesak": 466, "lv": 466, "ov": 466, "oe": 466, "_0": 466, "query_field": 466, "userqueri": 466, "sale": [466, 470], "4384": 466, "vajda": 466, "4195": 466, "4201": 466, "5228": 466, "testgizmo": 466, "test_gizmo_on_window": 466, "test_gimzo_without_required_librari": 466, "builtout": 466, "test_division_by_zero": 466, "confound": 466, "remap": 466, "c__builtin__": 466, "nset": 466, "np0": 466, "lp1": 466, "nl1l": 466, "nal2l": 466, "nal3l": 466, "natp2": 466, "nrp3": 466, "6137": 466, "sunpro": 466, "4753": 466, "4868": 466, "roger": [466, 477, 478], "serwi": [466, 478], "5150": [466, 470], "lisandro": 466, "dalcrin": 466, "5175": 466, "pynumber_int": 466, "4910": 466, "5914": 466, "7182818284590451": 466, "718281828459045": 466, "salgado": [467, 468, 473, 476, 477, 478], "635": 467, "12782": 467, "632": [467, 469, 478], "wstr": [467, 469], "624": [467, 468, 478], "ctxmanag": 467, "ctxmanager1": 467, "ctxmanager2": 467, "example1": 467, "example2": 467, "ctxmanager3": 467, "example3": 467, "lysandro": [467, 469, 477, 478], "nikolaou": [467, 469, 477, 478], "40334": [467, 477, 478], "some_other_cod": 467, "eol": [467, 478], "42864": [467, 478], "batuhan": [467, 468, 469, 477, 478], "taskaya": [467, 468, 469, 477, 478], "40176": [467, 478], "43914": [467, 478], "rocket": 467, "event_horizon": 467, "42997": [467, 478], "43017": [467, 478], "43822": [467, 478], "build_dyson_spher": 467, "notenoughscienceerror": 467, "notenoughresourceserror": 467, "43149": [467, 478], "43823": [467, 478], "44305": [467, 478], "43797": [467, 478], "all_black_hol": 467, "revel": 467, "41064": [467, 478], "lel": 467, "namedtoplo": 467, "38530": [467, 478], "schwarzschild_black_hol": 467, "schwarschild_black_hol": 467, "pattern_1": 467, "action_1": 467, "pattern_2": 467, "action_2": 467, "pattern_3": 467, "action_3": 467, "action_wildcard": 467, "scala": 467, "elixir": 467, "imper": 467, "test_vari": 467, "maggi": [467, 476], "moss": 467, "prado": 467, "41428": [467, 478], "yurii": [467, 468, 477, 478], "karaba": [467, 468, 477, 478], "44490": [467, 478], "jin": [467, 468, 469, 474, 475, 476, 477, 478], "41559": [467, 478], "jell": [467, 468, 469, 474, 475, 478], "zijlstra": [467, 468, 469, 474, 475, 478], "43783": 467, "mendoza": [467, 468], "unannot": 467, "strcach": 467, "log_prefix": 467, "mikhail": 467, "golubev": 467, "41923": [467, 478], "43766": [467, 478], "traut": [467, 468, 469, 478], "nikla": [467, 468, 478], "fieka": [467, 478], "29882": [467, 478], "sweeney": [467, 468, 477, 478], "40890": [467, 478], "37999": [467, 478], "shkop": [467, 478], "38302": [467, 478], "shannon": [467, 468, 469, 471, 475, 476, 477, 478], "42990": [467, 478], "joshua": [467, 473, 478], "bronson": [467, 476, 478], "pope": [467, 478], "justin": [467, 471, 478], "wang": [467, 475, 478], "31861": [467, 478], "43682": [467, 478], "42737": [467, 478], "43901": [467, 478], "42725": [467, 478], "43475": [467, 478], "hee": [467, 468, 469, 476, 477, 478], "45000": [467, 478], "nholm": [467, 468, 476], "41332": [467, 478], "9694": [467, 478], "lorentsen": [467, 475, 478], "zackeri": [467, 468, 476, 477, 478], "spytz": [467, 468, 476, 477, 478], "31956": [467, 478], "clearbreakpoint": 467, "irit": [467, 468, 469, 478], "katriel": [467, 468, 469, 478], "24160": [467, 478], "4356": [467, 478], "hai": [467, 468], "shi": [467, 468], "41842": [467, 478], "42195": [467, 477, 478], "joongi": [467, 478], "kim": [467, 478], "41229": [467, 478], "gringauz": 467, "41543": [467, 478], "kintscher": [467, 478], "petter": [467, 476, 478], "jansson": 467, "36982": [467, 478], "39273": [467, 478], "42269": [467, 478], "43532": [467, 478], "bdist_wheel": [467, 468, 476, 477, 478], "42802": [467, 478], "42133": [467, 478], "normalize_encod": [467, 477, 478], "39337": [467, 478], "enum_nam": 467, "ethan": [467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "furman": [467, 469, 471, 472, 473, 474, 475, 478], "40066": [467, 478], "41816": [467, 478], "inada": [467, 468, 469, 473, 474, 475, 476, 477, 478], "naoki": [467, 468, 469, 473, 474, 475, 476, 477, 478], "43712": [467, 478], "5758": 467, "44466": [467, 478], "43439": [467, 478], "38144": [467, 478], "43669": [467, 478], "38820": [467, 478], "43880": [467, 478], "40645": [467, 478], "hilton": [467, 468, 469, 477, 478], "43008": [467, 477, 478], "40468": [467, 477, 478], "33962": [467, 477, 478], "tal": [467, 473, 474, 475, 476, 478], "einat": [467, 473, 474, 475, 476, 478], "37903": [467, 478], "37892": [467, 478], "44010": [467, 478], "pyi": [467, 468, 477, 478], "waygood": [467, 468, 469, 477, 478], "45447": [467, 468, 477, 478], "95191": [467, 468, 478], "from_funct": [467, 468, 473, 478], "43817": [467, 478], "38200": [467, 478], "rtos": [467, 478], "peix": [467, 478], "xin": [467, 478], "41440": [467, 478], "eventfd2": 467, "41001": [467, 478], "41625": [467, 478], "43106": [467, 478], "barney": [467, 469, 478], "gale": [467, 469, 478], "43757": 467, "35498": [467, 478], "yaroslav": [467, 478], "pankovych": [467, 478], "21041": [467, 478], "link_to": [467, 468, 476, 478], "39950": [467, 478], "39906": [467, 478], "28468": [467, 478], "sblondon": 467, "42914": [467, 478], "lewi": [467, 478], "gaul": [467, 478], "43080": [467, 478], "schevchenko": [467, 478], "38731": [467, 478], "readline_ex": 467, "avir": [467, 478], "srivastava": [467, 478], "38307": [467, 478], "34204": [467, 478], "tymoteusz": [467, 478], "wo": [467, 478], "ko": [467, 474, 475, 478], "38490": [467, 478], "42413": [467, 478], "mptcp": [467, 478], "rui": 467, "cunha": 467, "43571": [467, 478], "dscp": [467, 478], "ecn": [467, 478], "sauthoff": 467, "44077": [467, 478], "43794": [467, 478], "43788": [467, 478], "43791": [467, 478], "43799": [467, 478], "43920": [467, 478], "43789": [467, 478], "43811": [467, 478], "hynek": [467, 471, 472, 478], "schlawack": [467, 471, 472, 478], "43998": [467, 478], "31870": [467, 478], "42333": [467, 478], "l0x": 467, "40849": [467, 478], "erlend": [467, 468, 469, 478], "aasland": [467, 468, 469, 478], "43762": [467, 478], "23427": [467, 478], "42955": [467, 478], "43356": [467, 478], "mario": [467, 475, 478], "corchero": [467, 475, 478], "42251": [467, 478], "42308": [467, 478], "bussonni": [467, 475, 476, 478], "26389": [467, 478], "bas": 467, "beek": 467, "41810": [467, 478], "42345": [467, 477, 478], "41792": [467, 478], "38908": [467, 478], "sebastian": [467, 468, 478], "rittau": [467, 468], "kit": [467, 478], "yan": [467, 478], "choi": [467, 478], "39385": [467, 478], "goldschmidt": [467, 474, 475, 476, 477, 478], "42967": [467, 474, 475, 476, 477, 478], "jonathan": [467, 471, 473, 476, 478], "gossag": 467, "35018": [467, 478], "42131": [467, 478], "desmond": [467, 478], "cheong": [467, 478], "14678": [467, 478], "41334": [467, 478], "41006": [467, 478], "41718": 467, "yuri": [467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478], "selivanov": [467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478], "42093": [467, 478], "42927": [467, 478], "micropython": [467, 478], "38980": [467, 478], "_compress": [467, 478], "decompressread": [467, 478], "09x": 467, "20x": [467, 469], "32x": 467, "11x": 467, "18x": 467, "lin": [467, 468, 478], "41486": [467, 478], "42202": [467, 478], "str1": [467, 478], "str2": [467, 478], "crochemor": 467, "41972": [467, 478], "dino": [467, 474, 477, 478], "viehland": [467, 474, 477, 478], "43452": [467, 478], "jeroen": [467, 474, 476, 477, 478], "demey": [467, 474, 476, 477, 478], "43575": [467, 478], "43287": [467, 478], "41922": [467, 478], "41873": [467, 478], "41870": [467, 478], "43785": [467, 478], "0in": [467, 469], "1or": [467, 469], "0if": [467, 469], "1els": [467, 469], "0x1for": [467, 469], "43833": [467, 478], "concert": [467, 470], "37319": 467, "26131": [467, 478], "zimport": 467, "42134": [467, 478], "43672": [467, 478], "42135": [467, 478], "set_package_wrapp": [467, 468], "set_loader_wrapp": [467, 468], "module_for_load": [467, 468, 472, 478], "impimport": [467, 468, 469, 478], "impload": [467, 468, 469, 478], "43720": [467, 478], "42137": [467, 478], "frozenload": [467, 468], "builtinload": [467, 468], "42136": [467, 478], "optimizedunicod": [467, 468, 469, 478], "42264": [467, 478], "enable_shared_cach": [467, 468, 469, 478], "24464": [467, 478], "87889": 467, "41139": [467, 478], "sslsslcontext": 467, "protocol_sslv2": 467, "rand_pseudo_byt": [467, 469, 471, 478], "pythonthreaddebug": [467, 468, 478], "44584": [467, 478], "41974": [467, 478], "parserbas": [467, 478], "berker": [467, 472, 473, 474, 475, 476, 478], "peksag": [467, 472, 473, 474, 475, 476, 478], "31844": [467, 478], "_pyunicode_name_capi": [467, 478], "42157": [467, 478], "graminit": 467, "pyparser_simpleparsestringflag": [467, 477], "pyparser_simpleparsestringflagsfilenam": [467, 477], "pyparser_simpleparsefileflag": [467, 477], "pynode_compil": [467, 477], "42299": [467, 478], "pymodule_getwarningsmodul": 467, "42599": 467, "37324": [467, 478], "svetlov": [467, 468, 472, 475, 476, 477, 478], "stanley": [467, 474, 475, 476, 477, 478], "42392": [467, 478], "42639": [467, 478], "42393": [467, 478], "_node": [467, 478], "io_modul": 467, "import_importmodul": 467, "source_bytes_object": 467, "source_buf": 467, "wordcod": [467, 474, 478], "36020": [467, 478], "sergey": [467, 468, 477, 478], "fedoseev": [467, 477, 478], "40744": [467, 478], "40810": [467, 478], "xavier": [467, 472, 474, 475, 478], "petazzoni": [467, 478], "27640": [467, 478], "42856": [467, 478], "43103": [467, 478], "tcltk": [467, 468, 470, 477, 478], "manoli": 467, "stamatogiannaki": 467, "42603": [467, 478], "43466": [467, 478], "petr": [467, 468, 469, 473, 475, 476, 477, 478], "viktorin": [467, 468, 469, 473, 476, 477, 478], "43795": [467, 478], "40792": [467, 478], "30155": [467, 478], "matveev": [467, 469, 476, 478], "41756": [467, 478], "41784": [467, 478], "1635741": [467, 478], "42262": [467, 478], "42423": [467, 478], "41832": [467, 478], "41073": [467, 478], "43277": [467, 478], "36465": [467, 476, 478], "43688": [467, 478], "43753": [467, 478], "43916": [467, 478], "43908": [467, 468, 478], "40943": [467, 478], "new_refcnt": 467, "0x030900a4": [467, 468], "39573": [467, 468, 478], "40839": [467, 478], "pyunicode_fromunicod": [467, 468, 469, 471, 477, 478], "36346": [467, 477, 478], "42260": [467, 478], "30459": [467, 478], "odictobject": [467, 478], "parser_interfac": [467, 478], "picklebufobject": [467, 478], "pyarena": [467, 478], "pyctyp": [467, 478], "pyfp": [467, 477, 478], "pytim": [467, 478], "sim": 467, "35134": [467, 468, 476, 478], "py_frozenmain": [467, 478], "26241": 467, "pyunicode_internimmort": [467, 468, 469, 478], "41692": [467, 478], "py_unicode_str": [467, 478], "41123": [467, 468, 478], "py_unicode_strlen": [467, 471], "py_unicode_strcat": [467, 471], "py_unicode_strcpi": [467, 471], "py_unicode_strncpi": [467, 471], "py_unicode_strcmp": [467, 471], "py_unicode_strncmp": [467, 471], "py_unicode_strchr": [467, 471], "py_unicode_strrchr": [467, 471], "pyunicode_getmax": [467, 471, 478], "41103": [467, 478], "pylong_fromunicod": [467, 478], "pyunicode_asunicodecopi": [467, 471, 478], "_py_checkrecursionlimit": [467, 477, 478], "ceval": [467, 478], "recursion_limit": [467, 468, 478], "41834": [467, 478], "py_allow_recurs": [467, 478], "py_end_allow_recurs": [467, 478], "recursion_rit": 467, "41936": [467, 478], "pyos_initinterrupt": [467, 478], "41713": [467, 478], "pyast_valid": [467, 478], "43244": [467, 478], "pyst_getscop": [467, 478], "pysymtable_build": [467, 478], "pysymtable_buildobject": [467, 478], "pysymtable_fre": [467, 478], "py_symtablestr": [467, 478], "py_symtablestringobject": [467, 478], "43868": [467, 478], "winbas": [467, 478], "_mod": [467, 478], "pyast_compileex": [467, 478], "pyast_compileobject": [467, 478], "pyfuture_fromast": [467, 478], "pyfuture_fromastobject": [467, 478], "pyparser_astfromfileobject": [467, 478], "pyparser_astfromfilenam": [467, 478], "pyparser_astfromstringobject": [467, 478], "pyarena_new": [467, 478], "pyarena_fre": [467, 478], "pyarena_malloc": [467, 478], "pyarena_addpyobject": [467, 478], "use_trac": [467, 468], "43760": [467, 468, 478], "25x": 468, "680": [468, 478], "manhattan_dist": 468, "point_1": 468, "point_2": 468, "magic_arithmet": 468, "add_count": 468, "query_us": 468, "query_count": 468, "ammar": [468, 474, 475, 476, 478], "askar": [468, 474, 475, 476, 478], "43950": [468, 478], "45292": [468, 478], "45607": [468, 478], "zac": [468, 478], "hatfield": [468, 478], "dodd": [468, 478], "otherpython": 468, "tensorflow": 468, "rahtz": 468, "43224": [468, 478], "pradeep": 468, "kumar": [468, 469, 478], "srinivasan": 468, "sile": 468, "panther": 468, "foster": [468, 478], "47087": [468, 478], "mylock": 468, "myint": 468, "balf": [468, 469, 478], "46534": [468, 478], "table_nam": 468, "47088": [468, 478], "bleaney": 468, "91860": [468, 478], "bont": [468, 469], "counsil": 468, "46725": 468, "33346": [468, 478], "12022": [468, 478], "44471": [468, 478], "26579": [468, 478], "57684": [468, 478], "90153": 468, "grainger": [468, 478], "91181": 468, "24234": [468, 478], "29410": [468, 478], "45711": [468, 478], "_pyerr_stackitem": [468, 478], "bastian": 468, "neuburg": 468, "44934": [468, 478], "46142": [468, 478], "tane": 468, "hukkinen": 468, "40059": [468, 478], "42012": [468, 478], "90908": 468, "90927": 468, "91218": 468, "duprat": 468, "87518": 468, "34975": [468, 478], "46805": [468, 478], "filip": [468, 471, 472, 476, 478], "25625": [468, 478], "44674": [468, 478], "kabir": [468, 478], "kwatra": [468, 478], "91973": 468, "ganssl": [468, 469, 475, 476, 477, 478], "80010": [468, 478], "aflag": 468, "kirpichev": [468, 478], "44258": [468, 478], "some_fract": 468, "44547": [468, 478], "46014": [468, 478], "libb2": [468, 478], "47095": [468, 478], "_sha3": [468, 478], "tiny_sha3": [468, 478], "47098": [468, 478], "89313": 468, "weipeng": [468, 476, 478], "hong": [468, 476, 478], "30533": [468, 478], "hakan": [468, 478], "elik": [468, 478], "29418": [468, 478], "88116": [468, 478], "andrei": 468, "kulakovin": 468, "88024": 468, "kiril": 468, "pinchuk": 468, "88457": 468, "gideon": 468, "45917": [468, 478], "ajith": 468, "ramachandran": 468, "44357": [468, 478], "44339": [468, 478], "46917": [468, 478], "antoni": [468, 478], "44019": [468, 478], "44611": [468, 478], "eisuk": [468, 478], "kawasima": 468, "22276": [468, 478], "33392": 468, "433030": [468, 478], "46245": [468, 478], "klausner": 468, "30512": [468, 478], "29980": 468, "44491": [468, 478], "44688": [468, 478], "aviv": [468, 474, 476, 478], "palivoda": [468, 474, 476, 478], "shahaf": [468, 473, 478], "16379": [468, 478], "24139": [468, 478], "45243": [468, 478], "45613": [468, 478], "45828": [468, 478], "44092": [468, 478], "41930": [468, 478], "34916": 468, "24905": [468, 478], "keho": 468, "90465": 468, "46328": [468, 478], "miro": [468, 478], "hron": [468, 478], "45413": [468, 478], "carey": [468, 478], "metcalf": [468, 478], "70363": 468, "sem_clockwait": [468, 478], "41710": [468, 478], "sz": [468, 478], "ke": [468, 478], "21302": [468, 478], "45429": [468, 478], "info_patchlevel": [468, 478], "91827": [468, 478], "44569": [468, 478], "33809": [468, 478], "90633": [468, 478], "90572": 468, "90638": 468, "samodya": 468, "abeysiriwardan": 468, "89026": 468, "43923": 468, "shantanu": [468, 469, 478], "jain": [468, 469, 478], "91154": 468, "90500": 468, "89263": 468, "adrian": [468, 469, 475, 478], "garcia": [468, 469, 478], "badarasco": 468, "88970": 468, "91137": 468, "_type_check": 468, "beauregard": [468, 478], "90802": 468, "rosenstein": 468, "85542": 468, "nikita": [468, 469, 478], "sobolev": [468, 469, 478], "90353": 468, "90711": 468, "90729": 468, "45190": [468, 478], "45046": [468, 478], "47074": 468, "turnbul": [468, 478], "28080": [468, 478], "ezeh": 468, "49083": 468, "miguel": [468, 478], "brito": [468, 478], "88261": 468, "28307": [468, 478], "90564": 468, "behnel": [468, 472, 473, 475, 476, 478], "68264": 468, "91165": 468, "272": [468, 478], "46845": [468, 478], "msoxzw": 468, "91487": [468, 478], "37295": [468, 478], "90415": 468, "44987": [468, 478], "pyperform": [468, 478], "ubuntu": [468, 475, 478], "aditya": [468, 469, 478], "44590": [468, 478], "45256": [468, 478], "superinstruct": [468, 478], "brunthal": 468, "brandt": [468, 477, 478], "bucher": [468, 477, 478], "45947": [468, 478], "45340": [468, 478], "40116": [468, 478], "40222": [468, 478], "91404": [468, 478], "bloomberg": 468, "async_gen_wrap": [468, 478], "prep_reraise_star": [468, 478], "binary_": [468, 478], "inplace_": [468, 478], "call_function_kw": [468, 474, 478], "call_method": [468, 475, 478], "precal": [468, 478], "dup_top": [468, 478], "dup_top_two": [468, 478], "rot_two": [468, 478], "rot_thre": [468, 478], "rot_four": [468, 476, 478], "rot_n": [468, 478], "jump_if_not_exc_match": [468, 477, 478], "jump_absolut": [468, 478], "pop_jump_backward_if_": 468, "pop_jump_forward_if_": 468, "not_non": 468, "setup_async_with": 468, "jump_if_true_or_pop": [468, 469, 478], "jump_if_false_or_pop": [468, 469, 478], "89874": [468, 469], "copy_dict_without_key": 468, "gen_start": [468, 478], "19072": [468, 478], "89519": [468, 469, 478], "81548": [468, 478], "44977": [468, 478], "47061": [468, 478], "68966": [468, 478], "hugo": [468, 469, 472, 477, 478], "kemenad": [468, 469, 477, 478], "47022": [468, 478], "40360": [468, 477, 478], "sre_compil": [468, 478], "sre_const": [468, 473, 478], "sre_pars": [468, 478], "47152": [468, 478], "safeconfigpars": [468, 469, 470, 478], "45173": [468, 478], "legacyinterpol": [468, 469, 478], "46607": [468, 478], "90817": [468, 469, 478], "91760": [468, 469, 478], "92728": [468, 478], "45837": [468, 478], "jingchen": [468, 478], "90224": 468, "42255": [468, 478], "findtestcas": [468, 469, 478], "makesuit": [468, 469, 478], "5846": [468, 478], "usageexit": [468, 469, 478], "dam": 468, "zio": 468, "67048": [468, 469], "illia": [468, 478], "volochii": [468, 478], "43216": [468, 478], "corowrapp": [468, 478], "45129": [468, 478], "binhex": [468, 477, 478], "a2b_hqx": [468, 477, 478], "b2a_hqx": [468, 477, 478], "rlecode_hqx": [468, 477, 478], "rldecode_hqx": 468, "45085": [468, 478], "bdist_msi": [468, 477, 478], "45124": [468, 478], "45132": [468, 478], "ldgettext": [468, 476], "ldngettext": [468, 476], "set_output_charset": [468, 476], "44235": [468, 478], "formatargspec": [468, 473, 478], "from_builtin": [468, 473, 478], "45320": [468, 478], "46483": [468, 478], "mailmanproxi": [468, 477, 478], "35800": [468, 477, 478], "tkapptyp": [468, 477, 478], "38371": [468, 477, 478], "23882": [468, 478], "__set_format__": [468, 478], "__setformat__": [468, 478], "46852": [468, 478], "experimental_isolated_subinterpret": [468, 478], "pynch": [468, 478], "37330": [468, 478], "93351": [468, 478], "43234": [468, 478], "46659": [468, 478], "sriniva": [468, 475, 478], "reddi": [468, 475, 478], "thatiparthi": [468, 475, 478], "41137": [468, 478], "40465": [468, 477, 478], "47066": [468, 478], "35859": [468, 478], "84461": [468, 478], "90473": [468, 478], "95085": [468, 478], "46656": [468, 478], "45440": [468, 478], "46640": [468, 478], "py_no_nan": [468, 478], "46996": [468, 478], "libnsl": [468, 478], "libsqlite3": 468, "libcrypt": [468, 478], "egeberg": 468, "45847": [468, 478], "45747": [468, 478], "45763": [468, 478], "gilbert": 468, "45433": [468, 478], "holman": [468, 478], "44340": [468, 478], "45522": [468, 478], "45548": [468, 478], "45570": [468, 478], "45571": [468, 478], "43974": [468, 478], "tcltk_cflag": 468, "tcltk_lib": 468, "rhel": [468, 475, 478], "ltk8": 468, "ltkstub8": 468, "ltcl8": 468, "rhel7": 468, "sizeof_void_p": 468, "45569": [468, 478], "42035": [468, 478], "tornetta": [468, 478], "43931": [468, 478], "pybuffer_copydata": 468, "45459": [468, 478], "46613": [468, 478], "46906": [468, 478], "46343": [468, 478], "89653": 468, "46608": [468, 478], "exception_t": 468, "46841": [468, 478], "92154": [468, 478], "94936": [468, 478], "py_trashcan_safe_begin": [468, 477, 478], "py_trashcan_safe_end": [468, 477, 478], "py_trashcan_begin": [468, 477, 478], "py_trashcan_end": [468, 477, 478], "mytype_dealloc": 468, "0x03080000": [468, 476], "cpy_trashcan_begin": 468, "cpy_trashcan_end": 468, "44263": [468, 478], "new_typ": 468, "_py_set_typ": 468, "_py_set_s": 468, "0x030b0000": [468, 478], "45434": [468, 478], "cellobject": [468, 478], "genobject": [468, 478], "longintrepr": [468, 478], "pyunicode_check_intern": [468, 478], "46007": [468, 478], "93937": [468, 478], "f_blockstack": 468, "f_gen": 468, "f_iblock": 468, "f_stackdepth": 468, "f_state": [468, 478], "f_frame": 468, "f_localsplus": 468, "localsplus": 468, "f_valuestack": 468, "pyframe_fasttolocalswitherror": [468, 478], "pyframe_localstofast": [468, 478], "0x030900b1": 468, "pythoncap_compat": 468, "40429": [468, 478], "recursion_depth": [468, 477, 478], "recursion_remain": 468, "stackcheck_count": 468, "0x030b00a2": 468, "0x030a00a1": 468, "cframe": 468, "c_tracefunc": 468, "c_profilefunc": 468, "pythoncap": 468, "_py_setprogramfullpath": [468, 478], "88279": [468, 478], "ob_shash": [468, 478], "46864": [468, 478], "pyunicode_as_data": [468, 469, 471, 478], "pyunicode_as_unicod": [468, 469, 471, 478], "pyunicode_asunicodeands": [468, 469, 471, 477, 478], "pyunicode_asunicod": [468, 469, 471, 477, 478], "pyunicode_get_data_s": [468, 469, 471, 478], "pyunicode_get_s": [468, 469, 471, 478], "pyunicode_gets": [468, 469, 471], "pyunicode_is_compact": 468, "pyunicode_is_readi": 468, "py_unicode_wstr_length": 468, "_pyunicode_asunicod": [468, 477], "pyframe_blocksetup": 468, "pyframe_blockpop": 468, "py_adjust_erange1": [468, 478], "py_adjust_erange2": [468, 478], "py_overflow": [468, 478], "py_set_erange_if_overflow": [468, 478], "py_set_errno_on_math_error": [468, 478], "45412": [468, 478], "py_unicode_copi": [468, 471, 477, 478], "py_unicode_fil": [468, 471, 477, 478], "pystrhex": [468, 478], "py_force_doubl": [468, 478], "py_is_infin": [468, 478], "45474": [468, 478], "pyheaptype_get_memb": [468, 478], "40170": [468, 477, 478], "have_py_set_53bit_precis": [468, 478], "pyunicode_encod": [468, 471, 478], "pyunicode_encodeascii": [468, 471], "pyunicode_encodelatin1": [468, 471, 478], "pyunicode_encodeutf7": [468, 471, 478], "pyunicode_encodeutf8": [468, 471, 478], "pyunicode_encodeutf16": [468, 471, 478], "pyunicode_encodeutf32": [468, 471, 478], "pyunicode_encodeunicodeescap": [468, 471, 478], "pyunicode_encoderawunicodeescap": [468, 471, 478], "pyunicode_encodecharmap": [468, 471, 478], "pyunicode_translatecharmap": [468, 471, 478], "pyunicode_encodedecim": [468, 471, 478], "pyunicode_transformdecimaltoascii": [468, 471, 478], "44029": [468, 478], "98254": [469, 478], "99139": [469, 478], "blech": 469, "somethin": 469, "98931": [469, 478], "91058": [469, 478], "eden": 469, "alkalin": 469, "ascension": 469, "playlist": 469, "sky": 469, "cristi": 469, "maureira": 469, "frede": 469, "marta": [469, 478], "mez": [469, 478], "102856": [469, 478], "2x": [469, 471, 474, 478], "meyer": [469, 471, 476, 477, 478], "102500": [469, 478], "interpet": 469, "_xxsubinterpretersmodul": 469, "anticip": [469, 474, 478], "104210": 469, "franek": 469, "magiera": 469, "103629": [469, 478], "get_color": 469, "goodchild": 469, "badchild": 469, "get_colour": 469, "troxler": [469, 478], "101561": [469, 478], "labeledtupl": 469, "hashablesequ": 469, "intorstrsequ": 469, "103764": 469, "96123": 469, "87995": [469, 478], "90751": [469, 478], "96670": [469, 478], "breaker": [469, 478], "97922": [469, 478], "98401": [469, 478], "60203": 469, "some_it": [469, 478], "100581": 469, "bradshaw": [469, 478], "furkan": [469, 478], "onder": [469, 478], "101264": 469, "neumaier": 469, "100425": [469, 478], "77757": [469, 478], "103590": [469, 478], "98658": [469, 478], "91166": [469, 478], "bower": [469, 478], "102853": 469, "104140": 469, "104138": 469, "98024": 469, "94597": [469, 478], "99388": [469, 478], "6x": [469, 478], "ostrich": 469, "pranav": 469, "thulasiram": 469, "bhat": 469, "100344": [469, 478], "102748": [469, 478], "78530": [469, 478], "princ": 469, "roshan": 469, "103636": [469, 478], "94216": [469, 478], "100161": 469, "carlton": 469, "gibson": 469, "99247": 469, "krennwalln": [469, 478], "35759": 469, "103193": [469, 478], "98363": [469, 478], "100485": [469, 478], "goergen": 469, "94906": [469, 478], "93312": [469, 478], "machalow": 469, "99547": [469, 478], "dower": [469, 473, 474, 475, 476, 477], "102519": [469, 478], "99726": [469, 478], "triad": 469, "101000": [469, 478], "stanislav": 469, "zmiev": 469, "90385": [469, 478], "domenico": 469, "ragusa": 469, "40358": [469, 478], "tian": [469, 478], "gao": [469, 478], "103693": [469, 478], "81620": [469, 478], "100234": [469, 478], "74696": [469, 478], "triplet": [469, 478], "102828": [469, 478], "103179": 469, "77617": [469, 478], "83638": [469, 478], "103015": [469, 478], "103489": [469, 478], "95861": [469, 478], "102778": [469, 478], "103176": [469, 478], "evgeni": [469, 477, 478], "zorin": 469, "58451": 469, "93503": [469, 478], "create_": 469, "94473": [469, 478], "101827": 469, "102433": [469, 478], "hasx": 469, "fourteen": 469, "74690": [469, 478], "badaracco": [469, 478], "103699": [469, 478], "99957": [469, 478], "96734": [469, 478], "test_thread": [469, 478], "210s": 469, "test_timeout": 469, "barriertest": 469, "003s": 469, "test_default_timeout": 469, "518s": 469, "eventtest": 469, "158": 469, "869s": 469, "4080": 469, "chhina": 469, "88597": [469, 478], "wstr_length": 469, "92536": [469, 478], "modzelewski": 469, "90536": [469, 478], "101525": 469, "91524": [469, 478], "103793": [469, 478], "103497": 469, "93429": [469, 478], "102859": [469, 478], "101441": 469, "97681": [469, 478], "97669": [469, 478], "100160": [469, 478], "103857": [469, 478], "90016": [469, 478], "101698": 469, "ofey": [469, 478], "chan": [469, 478], "65961": [469, 478], "699": [469, 478], "ma_version_tag": [469, 478], "ramvikram": 469, "101193": 469, "hoffmann": [469, 478], "103487": 469, "90765": 469, "50096": 469, "86421": 469, "92248": [469, 478], "90953": 469, "william": [469, 472, 478], "72346": [469, 478], "coomb": [469, 472, 476, 477], "93963": [469, 478], "101588": [469, 478], "bsds": 469, "84559": 469, "97850": [469, 478], "master_open": [469, 478], "slave_open": [469, 478], "ceas": [469, 478], "97879": 469, "101866": 469, "87999": [469, 478], "96580": 469, "89336": [469, 478], "92584": [469, 478], "pradyun": 469, "gedam": 469, "95299": [469, 478], "95083": 469, "94172": [469, 478], "94196": [469, 478], "94199": [469, 478], "set_packag": [469, 472, 478], "98040": [469, 478], "nullimport": [469, 471], "get_mag": [469, 472], "get_suffix": 469, "new_modul": 469, "load_sourc": 469, "init_builtin": 469, "load_compil": 469, "load_dynam": [469, 478], "load_packag": [469, 478], "lock_held": 469, "search_error": 469, "py_sourc": 469, "c_extens": 469, "py_resourc": 469, "pkg_directori": 469, "c_builtin": 469, "py_frozen": 469, "py_coderesourc": 469, "imp_hook": 469, "openwrapp": [469, 478], "94169": [469, 478], "94226": [469, 478], "aiosmtpd": [469, 478], "iarygin": [469, 478], "93243": [469, 478], "92548": 469, "cwe": [469, 478], "isident": 469, "teyit": 469, "modernis": 469, "_texttestresult": [469, 478], "45162": [469, 478], "firebird": [469, 478], "102871": [469, 478], "94383": [469, 478], "94379": [469, 478], "suspici": [469, 478], "rstlint": [469, 478], "julien": [469, 475], "palard": [469, 475], "98179": 469, "1e25": 469, "86388": [469, 478], "94352": [469, 478], "98393": [469, 478], "99127": [469, 478], "fsring_middl": 469, "93939": [469, 478], "va_start": [469, 478], "93207": [469, 478], "89536": 469, "99289": [469, 478], "loongarch": [469, 478], "loongarch64": [469, 478], "gnusf": [469, 478], "gnuf32": [469, 478], "zhang": [469, 474, 475, 476, 478], "90656": [469, 478], "python_for_regen": [469, 478], "acloc": [469, 478], "89886": [469, 478], "pyunstable_": 469, "101101": 469, "103509": [469, 478], "wenzel": 469, "jakob": 469, "93012": [469, 478], "93274": [469, 478], "98586": [469, 478], "frost": 469, "92257": 469, "91052": [469, 478], "91051": [469, 478], "91054": [469, 478], "91248": [469, 478], "101578": [469, 478], "_pyerr_chainexceptions1": [469, 478], "_pyerr_chainexcept": [469, 478], "102755": [469, 478], "_py_immortal_refcnt": 469, "_py_isimmort": 469, "py_build_cor": [469, 478], "sstate_interned_immort": [469, 478], "sstate_interned_immortal_stat": 469, "eddi": [469, 476], "elizondo": [469, 476], "84436": [469, 478], "104110": 469, "105387": [469, 478], "98836": [469, 478], "95781": [469, 478], "georgi": [469, 478], "95504": [469, 478], "95589": [469, 478], "_pyobject_visitmanageddict": [469, 478], "_pyobject_clearmanageddict": [469, 478], "98724": [469, 478], "_py_reftot": 469, "_py_getglobalreftot": 469, "104668": [469, 478], "pylong_": 469, "ericsnowcurr": 469, "77782": [469, 478], "t_doubl": 469, "quirki": 469, "47146": [469, 478], "braun": [469, 478], "102192": [469, 478], "92651": [469, 478], "85858": [469, 478], "99482": [469, 478], "_use_broken_old_ctypes_structure_semantics_": [469, 478], "99285": 469, "392": 470, "sneezi": 470, "sleepi": 470, "skycaptain": 470, "manage_cloud": 470, "helm": 470, "parser_l": 470, "missil": 470, "torpedo": 470, "parser_m": 470, "vessel": 470, "console_prior": 470, "694": 470, "compet": 470, "unladen10": 470, "py32": 470, "pyload": [470, 472], "pypycload": [470, 472], "pyshar": 470, "32m": 470, "33md": 470, "soabi": [470, 478], "32mu": 470, "ext_suffix": [470, 472, 478], "salient": 470, "pathway": [470, 478], "0o24": 470, "0f": [470, 478], "7094": 470, "shl": 470, "project_nam": 470, "lowercaseddict": 470, "lcd": 470, "placeholderdict": 470, "6081": 470, "marcin": 470, "wojdyr": 470, "1772833": 470, "9666": 470, "9337": 470, "abcdefgh": [470, 472], "9757": 470, "4617": 470, "8413": 470, "10093": 470, "477863": 470, "9213": 470, "2690": 470, "10889": 470, "10518": 470, "aggrav": 470, "9425": 470, "undergon": 470, "4661": 470, "10321": 470, "get_phone_numb": 470, "phonenumb": 470, "phonelist": 470, "user_request": 470, "4805": 470, "980": 470, "baker": 470, "498245": 470, "577479": 470, "10586": 470, "10593": 470, "terrenc": 470, "9567": 470, "3445": 470, "8814": 470, "prob_dist": 470, "satur": 470, "renew": 470, "resequenc": 470, "simsalabim": 470, "get_vot": 470, "ballot": 470, "conduct_elect": 470, "all_polls_clos": 470, "lockbox": 470, "seal_ballot": 470, "elect": 470, "deposit": 470, "8777": 470, "923754": 470, "accept2dyear": [470, 471], "guesswork": 470, "1289118": 470, "5094": 470, "6641": 470, "2706": 470, "1777412": 470, "8013": 470, "10827": 470, "013671875": 470, "013765762467652909": 470, "gaussian": 470, "682689492137086": 470, "31731050786291404": 470, "gamma_funct": 470, "801": 470, "4551": 470, "950730698041": 470, "temperatur": 470, "from_fahrenheit": 470, "from_celsius": 470, "urban": [470, 472, 478], "5867": 470, "rec_len": 470, "loc_start": 470, "loc_len": 470, "change_loc": 470, "record_numb": 470, "byte_stream": 470, "g3805": 470, "storeroom": 470, "chassi": 470, "x7899": 470, "cog": 470, "l6988": 470, "sprocket": 470, "showroom": 470, "5506": 470, "9826": 470, "9840": 470, "susan": [470, 478], "salesl": 470, "talbot": 470, "5975": 470, "abraham": [470, 478], "1537721": 470, "duti": 470, "9110": 470, "8188": 470, "2305843009213693951": 470, "314159": 470, "1000003": 470, "8540": [470, 471], "log1": 470, "rodol": [470, 471, 476], "4972": [470, 473], "8046": 470, "1286": 470, "8806": 470, "7461": 470, "10554": 470, "bastien": [470, 472], "sabl": 470, "9862": 470, "3488": 470, "9962": 470, "1675951": 470, "redact": 470, "902": 470, "general_quest": 470, "3514": 470, "prion": 470, "py_todo": 470, "1399": 470, "semaphore_not": 470, "md2": 470, "dsawithsha": 470, "mdc2": 470, "md4": 470, "ripemd160": 470, "dsa": 470, "dsaencrypt": 470, "0x101739a10": 470, "sehensw": 470, "rdigkeiten": 470, "xc3": 470, "xbcrdigkeiten": 470, "bzip": 470, "in_transit": 470, "shashwat": 470, "8845": 470, "8524": 470, "9794": 470, "2818": 470, "8850": 470, "1589": 470, "5639": 470, "4870": 470, "dysfunct": 470, "9360": 470, "vant": 470, "1926": 470, "9003": 470, "lorenzo": [470, 472], "catucci": [470, 472], "4471": 470, "10980": 470, "10620": 470, "my_proj_dir": 470, "9754": 470, "test_anagram": 470, "volumin": 470, "ups": [470, 478], "9424": 470, "misimpl": 470, "optic": 470, "9025": 470, "8807": 470, "handle_accept": 470, "6706": 470, "schedulenau": 470, "5178": 470, "rodolfo": 470, "eckhardt": 470, "10220": 470, "0x1022bd788": 470, "pydoc3": 470, "ron": 470, "newloc": 470, "nofre": 470, "_randbelow": 470, "binary_modulo": 470, "binary_multipli": [470, 478], "binary_add": [470, 472, 478], "binary_floor_divid": 470, "9147": 470, "ray": [470, 472, 478], "9523": 470, "raymondhetting": 470, "os2": 470, "os2_hom": 470, "python32": 470, "bindir": 470, "binlibdest": 470, "includepi": 470, "libdest": 470, "platbas": 470, "projectbas": 470, "py_version_nodot": 470, "py_version_short": 470, "userbas": 470, "antonio": 470, "cuni": 470, "ilya": [470, 475, 478], "sandler": 470, "pluggabl": [470, 472, 474], "ambv": 470, "zope9": 470, "plone": 470, "zope9instal": 470, "zope9inst": 470, "beef": 470, "cafe": 470, "5417": 470, "aff": 470, "8fa3": 470, "telenovela": 470, "elisa": 470, "bfd": 470, "f3nde": 470, "mahn": 470, "5468": 470, "9873": 470, "steffen": 470, "daod": 470, "nurpmeso": 470, "9124": 470, "10199": 470, "7316": 470, "torsten": [470, 471, 478], "landschoff": [470, 471, 478], "850728": 470, "kleckner": 470, "8844": 470, "6690": 470, "9410": 470, "3873": 470, "9915": 470, "7451": 470, "10314": 470, "10x": [470, 471, 472, 475, 478], "15x": [470, 477, 478], "3001": 470, "stringlib": 470, "differenc": [470, 478], "andress": 470, "bennett": 470, "8685": 470, "1569291": 470, "3709": [470, 471], "schaaf": [470, 471], "sped": [470, 473, 476, 477, 478], "10160": 470, "christo": 470, "georgiou": 470, "7113": 470, "mobil": 470, "kannada": 470, "0cf1": 470, "0cf2": 470, "tai": 470, "lue": 470, "19da": 470, "disqualifi": 470, "cheatsheet": 470, "jog": 470, "adjunct": 470, "9528": 470, "7962": 470, "aquatk": 470, "6075": 470, "changeset": [470, 472, 478], "385": 470, "workflow": [470, 478], "10679": 470, "bupjo": 470, "5127": 470, "9203": 470, "wctype": 470, "9210": 470, "9778": 470, "py_va_copi": 470, "va_copi": 470, "2443": 470, "8837": 470, "buildscript": [470, 478], "8990": 470, "setfilesystemencod": 470, "6shhbbb": 470, "gif87a": 470, "10783": 470, "10711": 470, "10272": 470, "398": 471, "segreg": 471, "13411": 471, "10181": 471, "u0010ffff": 471, "udbff": 471, "udfff": 471, "13054": 471, "becker": 471, "3561": 471, "gather_t": 471, "acc": [471, 478], "renaud": [471, 478], "blanch": [471, 478], "zbigniew": [471, 478], "drzejewski": [471, 478], "szmek": [471, 478], "_extra_attribut": 471, "0x7f46b9fe31e0": 471, "amend": [471, 478], "2377": 471, "13959": 471, "14605": 471, "14646": 471, "growth": [471, 478], "delin": 471, "12753": 471, "13201": 471, "petri": [471, 478], "lehtinen": 471, "12170": 471, "12380": 471, "10516": 471, "11388": 471, "13748": 471, "gruszczi": [471, 472, 476, 478], "ski": [471, 472, 476, 478], "13521": 471, "clumsi": 471, "9260": 471, "4966": 471, "3144": 471, "nadeem": [471, 472], "vawda": [471, 472], "yvind": 471, "karlsen": [471, 478], "6715": 471, "darren": 471, "11610": 471, "10868": 471, "1172711": 471, "ywjj": 471, "catalin": [471, 478], "iacob": [471, 478], "13641": 471, "13637": 471, "5863": 471, "pbzip2": 471, "1625": 471, "13216": 471, "65001": [471, 478], "cp_utf8": [471, 478], "chcp": [471, 478], "cjk": [471, 478], "12016": 471, "u52ff": 471, "u65bd": 471, "u65bc": 471, "u4eba": 471, "u3002": 471, "npj": 471, "l6hk": 471, "hk": 471, "12100": 471, "11089": 471, "11297": 471, "11085": 471, "13121": 471, "13585": 471, "10924": 471, "ncursesw": [471, 478], "waddwstr": 471, "igo": 471, "serna": 471, "6755": 471, "15006": 471, "7652": 471, "100x": 471, "bytereef": 471, "mpdecim": [471, 478], "quickstart": 471, "02s": 471, "345s": 471, "120x": 471, "telco": 471, "19s": 471, "68s": 471, "psycopg": 471, "57s": 471, "29s": 471, "12x": 471, "watchexp": [471, 478], "465484": 471, "72000": 471, "89ric": 471, "pal": 471, "salli": 471, "bonzo": 471, "bonz": 471, "ought": 471, "8594": 471, "12139": 471, "11072": 471, "13227": 471, "15061": 471, "13295": 471, "kuhn": 471, "13464": 471, "htmlparseerror": 471, "15114": [471, 472, 473, 478], "14538": 471, "13993": 471, "13960": 471, "13358": 471, "1745761": 471, "755670": 471, "13357": 471, "12629": 471, "1200313": 471, "670664": 471, "13273": 471, "12888": 471, "7311": 471, "11113": 471, "15156": 471, "sijin": 471, "joseph": [471, 474, 478], "8808": 471, "13062": 471, "15153": 471, "townshend": 471, "12760": 471, "11888": 471, "12021": 471, "12328": 471, "4892": 471, "6064": 471, "12708": 471, "9795": 471, "lagerwal": 471, "10882": 471, "4761": 471, "10755": 471, "14626": 471, "supports_follows_symlink": 471, "10784": 471, "8828": 471, "14127": 471, "13609": 471, "12720": 471, "9344": 471, "dlfcn": [471, 474, 478], "13226": 471, "14210": 471, "14166": 471, "3665": 471, "13449": 471, "8684": 471, "delayfunct": 471, "13245": 471, "6397": 471, "12442": 471, "sandro": 471, "tosi": 471, "12191": 471, "15238": 471, "12715": 471, "niehof": 471, "9993": 471, "4489": 471, "8407": 471, "1870": 471, "elho": 471, "trevino": 471, "juhana": 471, "jauhiainen": 471, "orr": [471, 472, 476, 477, 478], "boswel": 471, "8739": 471, "paulo": [471, 478], "scardin": 471, "11281": 471, "11289": 471, "kasun": 471, "herath": 471, "8809": 471, "watson": 471, "6560": 471, "heiko": 471, "wundram": 471, "socketcan": [471, 478], "lwn": 471, "253425": 471, "10141": 471, "fuch": [471, 476, 478], "tiago": 471, "alv": 471, "reliable_datagram_socket": 471, "rds": [471, 478], "goderbau": 471, "13777": 471, "10866": 471, "warkentin": 471, "11109": 471, "11688": 471, "12049": 471, "11183": 471, "simpkin": 471, "12803": 471, "13626": 471, "13627": 471, "scram": 471, "jacek": [471, 474, 478], "konieczni": 471, "12551": 471, "13634": 471, "colin": [471, 478], "14204": 471, "14837": 471, "11811": 471, "13635": 471, "14807": 471, "3163": 471, "8513": 471, "5870": 471, "11223": 471, "5689": 471, "9957": 471, "13857": 471, "10968": 471, "clock_xxx": 471, "10278": 471, "14386": 471, "14588": 471, "winston": 471, "ewert": 471, "10775": 471, "1673007": 471, "xdg": [471, 478], "gvfs": [471, 478], "calmett": 471, "13620": 471, "14493": 471, "12646": 471, "12306": 471, "14624": 471, "14738": 471, "15026": 471, "osf": 471, "9856": 471, "11377": 471, "13374": 471, "13988": 471, "py_unicode_match": [471, 477, 478], "pyunicode_encodembc": [471, 478], "12326": 471, "13847": 471, "14180": 471, "longstand": [471, 478], "1079": 471, "1690608": 471, "11291": 471, "assertsameel": 471, "_clamp": 471, "sslfakefil": 471, "13550": 471, "smalltabl": 471, "pymemoryviewobject": [471, 473], "memoryobject": [471, 473], "xxxmodul": 471, "14040": 471, "10998": 471, "11591": 471, "rdmurray": 472, "bitdanc": 472, "16499": 472, "16475": 472, "3156": 472, "450": 472, "454": 472, "8713": 472, "18891": 472, "18214": 472, "unvers": 472, "pip3": 472, "hex_decod": 472, "bz2_encod": 472, "68656c6c6f": 472, "7475": 472, "17827": 472, "17828": 472, "19619": 472, "stone": 472, "everyon": 472, "berman": 472, "18111": 472, "18416": 472, "kang": [472, 478], "hao": 472, "12892": 472, "bierenfeld": 472, "1097797": 472, "ukrainian": [472, 475], "19668": 472, "15958": 472, "16772": 472, "17934": 472, "claudiu": [472, 473, 478], "popa": [472, 473, 478], "18690": 472, "19078": 472, "16148": 472, "declin": 472, "eli": [472, 474, 478], "benderski": 472, "aprano": [472, 474, 476], "16832": 472, "bruno": [472, 473, 478], "dupui": 472, "16049": 472, "17818": 472, "storchacha": 472, "16486": 472, "8311": 472, "maystr": 472, "11175": 472, "12866": 472, "19641": 472, "16685": 472, "17839": 472, "a85": 472, "17618": 472, "16613": 472, "fcc": 472, "ntsc": 472, "lander": [472, 475], "14323": 472, "15806": 472, "piraeus": 472, "19266": 472, "inflex": [472, 473], "15805": 472, "19282": 472, "kluyver": [472, 473, 474, 478], "11816": 472, "17916": 472, "19722": 472, "16522": 472, "11390": 472, "3158": 472, "18600": 472, "email6": 472, "levitt": 472, "18149": 472, "15442": 472, "horev": 472, "kati": [472, 478], "10042": 472, "thorn": 472, "12428": 472, "16351": 472, "18582": 472, "18532": 472, "jona": [472, 475, 478], "borgstr": 472, "18240": 472, "17276": 472, "247": 472, "18775": 472, "2927": 472, "invit": 472, "13633": 472, "karl": [472, 477, 478], "cow": 472, "12921": 472, "malt": 472, "swart": 472, "17764": 472, "15627": 472, "18072": 472, "18193": 472, "18192": 472, "18194": 472, "18058": 472, "19152": 472, "18626": 472, "unravel": 472, "aaron": [472, 478], "ile": 472, "13266": 472, "18929": 472, "19030": 472, "broader": 472, "17481": 472, "17159": 472, "routeabl": 472, "17400": 472, "9556": 472, "ce46195b56a9": 472, "16110": 472, "15452": 472, "bump": [472, 478], "19219": 472, "valeri": 472, "4885": 472, "18999": 472, "19946": 472, "16694": 472, "nelson": 472, "yogesh": 472, "chaudhari": 472, "17914": 472, "11939": 472, "9035": 472, "uapi": 472, "18673": 472, "16596": 472, "osborn": 472, "18764": 472, "14455": 472, "4473": 472, "19132": 472, "17150": 472, "19674": 472, "20710": 472, "barnett": [472, 478], "16203": 472, "lope": 472, "tavar": 472, "13592": 472, "17087": 472, "16595": 472, "19324": 472, "19343": 472, "16488": 472, "18794": 472, "13896": 472, "atsuo": 472, "ishimoto": 472, "1492704": 472, "smtpserver": [472, 473, 474, 478], "smtpchannel": [472, 473, 474, 478], "async_chat": [472, 478], "11959": 472, "2118": 472, "15359": 472, "7171": 472, "poq": 472, "13773": 472, "16692": 472, "19689": 472, "18138": 472, "18143": 472, "18147": 472, "christien": 472, "8813": 472, "19292": 472, "17134": 472, "8109": 472, "calissu": 472, "18379": 472, "_stat": [472, 478], "11016": 472, "hiem": 472, "17804": 472, "zack": 472, "weinberg": 472, "16624": 472, "getstatus": 472, "10197": 472, "18901": 472, "18878": 472, "19261": 472, "13390": 472, "5845": 472, "13477": 472, "18585": 472, "18725": 472, "18882": 472, "1565525": 472, "mathia": 472, "panzenb": 472, "ck": 472, "16423": 472, "18978": 472, "kachayev": [472, 473, 478], "16464": 472, "wozniak": 472, "17485": 472, "brecht": [472, 473, 474, 478], "17272": 472, "15701": 472, "16997": 472, "jyrki": 472, "pulliainen": 472, "15132": 472, "zach": [472, 478], "16935": 472, "melin": 472, "ramnani": 472, "16709": 472, "wardil": 472, "mcclure": 472, "11798": 472, "18937": 472, "17457": 472, "17015": 472, "toshio": 472, "kuratomi": 472, "17467": 472, "15417": 472, "19552": 472, "17487": 472, "17616": 472, "5202": 472, "14631": 472, "15528": 472, "17643": 472, "17741": 472, "ariel": 472, "poliak": 472, "14377": 472, "19274": 472, "mallard": 472, "17201": 472, "14621": 472, "dsl": [472, 478], "17162": 472, "montagn": 472, "16129": 472, "1772673": 472, "ysj": [472, 478], "7330": 472, "dhiru": 472, "kholia": 472, "18596": 472, "16632": 472, "18338": 472, "18920": 472, "18922": 472, "18569": 472, "gcov": 472, "lcov": 472, "clav": 472, "milauer": 472, "16421": 472, "17853": 472, "pyfailmalloc": 472, "18408": 472, "18520": 472, "18807": [472, 478], "18818": 472, "heaney": [472, 473], "vajraski": [472, 473, 478], "kok": [472, 473, 478], "19201": 472, "19222": [472, 473], "19223": 472, "14625": 472, "linear_prob": 472, "18771": 472, "19218": 472, "19209": 472, "19205": 472, "9548": 472, "16034": 472, "16674": 472, "15596": 472, "15758": 472, "bryant": 472, "18020": 472, "18756": 472, "xxxloader": 472, "set_load": [472, 478], "endtim": [472, 478], "readplistfrombyt": [472, 475, 478], "writeplisttobyt": 472, "18823": 472, "19375": 472, "16135": 472, "e52df05b496a": 472, "14470": 472, "16136": 472, "shlib_suffix": 472, "16754": 472, "tick_count": 472, "19199": 472, "tara": 472, "lyapun": 472, "15641": 472, "type_int64": [472, 478], "riti": 472, "15480": 472, "isbjunk": 472, "isbpopular": 472, "sm": 472, "13248": [472, 474, 478], "_gestalt": 472, "_mac_ver_lookup": 472, "_mac_ver_gstalt": 472, "_bcd2str": 472, "18393": 472, "17323": 472, "17115": 472, "module_to_load": 472, "19413": 472, "18065": 472, "is_frozen": 472, "felt": [472, 476, 478], "interstiti": 472, "17434": 472, "b32": 472, "18011": 472, "9177": 472, "14794": 472, "16290": 472, "16967": 472, "17094": 472, "20625": 472, "19555": 472, "15204": 472, "16333": 472, "20784": 472, "16742": 472, "f_tstate": 472, "14432": 472, "elvi": [473, 474, 475, 476, 477, 478], "pranskevichus": [473, 474, 475, 476, 477, 478], "478": 473, "441": [473, 478], "arnon": [473, 478], "yaari": [473, 478], "9951": [473, 478], "23632": [473, 478], "benno": [473, 478], "lesli": [473, 478], "24450": [473, 478], "19235": [473, 478], "lc_type": [473, 478], "19977": [473, 478], "streamlin": [473, 478], "22638": [473, 478], "22796": [473, 478], "rudimentari": 473, "http_get": 473, "nathaniel": [473, 475, 478], "landau": 473, "girdhar": [473, 474, 478], "detract": 473, "500000": 473, "evid": 473, "lehtosalo": 473, "intermitt": [473, 478], "conceal": 473, "unguard": 473, "pernici": 473, "angelico": [473, 474, 478], "99998": 473, "00003": 473, "00001": 473, "barker": [473, 478], "19676": [473, 478], "22286": [473, 478], "23681": [473, 478], "22682": [473, 478], "22681": [473, 478], "24064": [473, 478], "17636": [473, 478], "23491": [473, 478], "paugh": [473, 478], "j3": [473, 475, 478], "eriksson": [473, 478], "14910": [473, 478], "proactor": [473, 478], "22560": 473, "21326": [473, 478], "yann": [473, 474, 478], "sionneau": [473, 474], "uvloop": [473, 474, 478], "korenberg": [473, 474], "jiryu": [473, 474, 478], "davi": [473, 474, 478], "nikolaus": [473, 478], "rath": [473, 478], "15955": [473, 478], "20289": [473, 478], "24270": [473, 478], "17442": [473, 478], "16991": [473, 478], "19505": [473, 478], "23704": [473, 478], "coodin": 473, "abscissa": 473, "jevnik": [473, 476, 478], "22189": [473, 478], "devin": [473, 478], "jeanpierr": [473, 478], "23086": [473, 478], "24018": [473, 478], "24184": [473, 478], "16104": 473, "19628": [473, 478], "21338": [473, 478], "11271": [473, 478], "21527": [473, 478], "18159": 473, "22389": [473, 478], "23171": [473, 478], "4254": [473, 478], "18039": [473, 478], "2052": [473, 478], "17445": [473, 478], "build_ext": [473, 478], "5309": [473, 478], "bdist": 473, "16314": [473, 478], "glenn": 473, "15916": [473, 478], "milan": [473, 475, 478], "oberkirch": [473, 475, 478], "20098": [473, 478], "abhilash": [473, 478], "raj": [473, 478], "21083": 473, "24211": [473, 478], "claud": [473, 478], "paroz": [473, 478], "16324": [473, 478], "21706": 473, "wei": [473, 478], "wu": [473, 478], "23566": [473, 478], "14373": [473, 478], "13968": [473, 478], "55555": 473, "6666": 473, "13742": [473, 478], "demian": [473, 474, 478], "21793": [473, 478], "panter": [473, 474, 478], "3566": 473, "maciej": [473, 478], "szulik": 473, "21800": [473, 478], "vignali": 473, "20295": [473, 478], "fabric": [473, 478], "anech": [473, 478], "20197": [473, 478], "17621": [473, 478], "21156": [473, 478], "20383": [473, 478], "20726": [473, 478], "20334": [473, 478], "24190": [473, 478], "17373": [473, 478], "20691": [473, 478], "24017": [473, 478], "24400": [473, 478], "16808": [473, 478], "20578": 473, "16531": [473, 478], "leon": [473, 478], "20480": [473, 478], "21650": [473, 478], "19361": [473, 478], "17911": [473, 478], "dric": [473, 476, 478], "krier": [473, 476, 478], "13918": [473, 478], "20537": [473, 478], "22788": [473, 478], "23185": [473, 478], "22486": [473, 477, 478], "21565": 473, "rosenberg": [473, 477, 478], "22955": [473, 478], "21176": [473, 478], "22524": [473, 478], "21719": [473, 478], "22181": [473, 478], "22054": [473, 478], "23668": [473, 478], "rafik": [473, 478], "draoui": [473, 478], "10395": [473, 478], "19775": [473, 478], "21539": [473, 478], "19776": [473, 478], "mayank": [473, 478], "tripathi": [473, 478], "19777": [473, 478], "spam42": 473, "welborn": 473, "20218": [473, 478], "23611": [473, 478], "21804": [473, 478], "aac": [473, 478], "sre_match": 473, "9179": [473, 478], "22437": [473, 478], "1519638": [473, 478], "22578": [473, 478], "cauet": [473, 478], "22940": [473, 478], "18931": [473, 478], "19840": 473, "5411": [473, 478], "22018": [473, 478], "21076": [473, 478], "decode_data": [473, 474, 478], "process_messag": [473, 474], "19662": 473, "21795": [473, 478], "21725": [473, 478], "14758": 473, "15014": [473, 478], "gavin": 473, "chappel": 473, "16914": [473, 478], "22027": [473, 478], "18615": [473, 478], "22043": [473, 478], "17552": [473, 478], "23853": [473, 478], "21455": [473, 478], "21965": [473, 478], "suboptim": 473, "20188": [473, 478], "20421": [473, 478], "20951": [473, 478], "akira": [473, 478], "19940": [473, 478], "23186": [473, 478], "23239": [473, 478], "10203": [473, 478], "sinclair": 473, "jessica": [473, 478], "mckellar": 473, "13583": [473, 478], "23342": [473, 478], "set_coroutine_wrapp": [473, 475, 476, 478], "get_coroutine_wrapp": [473, 475, 476, 478], "22696": [473, 478], "23437": [473, 478], "21717": [473, 478], "vogt": [473, 478], "23193": [473, 478], "21549": [473, 478], "gindi": [473, 478], "18983": [473, 478], "2527": [473, 478], "_fix": [473, 478], "20035": [473, 478], "kazakov": [473, 478], "22619": [473, 478], "16662": [473, 478], "19746": [473, 478], "22936": [473, 478], "kushal": [473, 474, 478], "das": [473, 474, 478], "21238": [473, 478], "21262": [473, 478], "johann": [473, 478], "baiter": [473, 478], "20968": [473, 478], "kan": [473, 478], "vdahl": [473, 478], "23581": [473, 478], "23568": [473, 478], "17660": 473, "matej": [473, 478], "cepl": [473, 477, 478], "19494": [473, 478], "akshit": 473, "khurana": [473, 475, 478], "samwys": 473, "13866": [473, 478], "22366": [473, 478], "22118": [473, 478], "torr": [473, 478], "navarret": [473, 478], "silentghost": [473, 474, 478], "5800": [473, 478], "20627": [473, 478], "22960": [473, 478], "2175": [473, 478], "10590": [473, 478], "23252": [473, 478], "23001": [473, 478], "findfirstfil": 473, "findnextfil": 473, "23605": [473, 478], "21233": [473, 478], "albert": [473, 475, 478], "markus": [473, 478], "21486": [473, 478], "21487": [473, 478], "20826": [473, 478], "23266": [473, 478], "23133": [473, 478], "15381": [473, 478], "22003": [473, 478], "20416": [473, 478], "23344": [473, 478], "15027": [473, 478], "19380": [473, 478], "23206": [473, 478], "22540": [473, 478], "22847": [473, 478], "23488": [473, 478], "23910": [473, 478], "22464": 473, "23573": [473, 478], "_py_char2wchar": [473, 478], "_py_wchar2char": [473, 478], "18395": [473, 478], "18711": [473, 478], "24268": [473, 478], "amd": [473, 474], "gnu32": 473, "win_amd64": [473, 478], "win_ia64": 473, "win_arm": 473, "_d": 473, "legalchar": 473, "23671": [473, 478], "linux_distribut": [473, 478], "1322": [473, 478], "24248": [473, 478], "20438": 473, "22407": [473, 478], "23622": [473, 478], "chaput": [473, 478], "6623": [473, 478], "23464": [473, 478], "21205": [473, 478], "htmlparsererror": [473, 478], "21047": [473, 478], "16518": [473, 478], "22834": [473, 478], "23014": 473, "22818": [473, 478], "2211": [473, 478], "nnnn": [473, 478], "pot": [473, 478], "24284": [473, 478], "15582": [473, 478], "7830": [473, 478], "22453": [473, 478], "20204": [473, 478], "python36": 474, "gonzalez": [474, 475], "ivan": [474, 475, 476, 478], "levkivskyi": [474, 475, 476, 478], "lisa": [474, 476, 478], "1_000_000_000_000_000": 474, "1000000000000000": 474, "0x_ff_ff_ff_ff": 474, "ffff_ffff": 474, "ticker": 474, "pluginbas": 474, "plugin1": 474, "plugin2": 474, "teichmann": [474, 478], "intfield": 474, "int_field": 474, "some_fil": 474, "dusti": [474, 478], "koo": 474, "zevenhoven": 474, "27350": [474, 478], "0x7fbcd41666f8": 474, "forbiddenbyt": [474, 478], "0x7fbcd41666fc": 474, "ouch": 474, "1233329": 474, "1a": 474, "test_byt": 474, "648": 474, "0x00007fbcdbd32700": 474, "test_hex": 474, "26516": [474, 478], "26564": [474, 478], "21590": [474, 478], "nikhil": 474, "benesch": 474, "barnert": [474, 478], "25958": [474, 478], "emanuel": [474, 478], "26823": [474, 478], "15767": 474, "23722": [474, 476, 478], "26492": [474, 478], "26146": [474, 478], "28613": [474, 478], "27041": [474, 478], "27040": [474, 478], "28370": [474, 478], "25593": [474, 478], "26221": 474, "27392": [474, 478], "27456": [474, 475, 478], "28003": [474, 478], "26081": [474, 478], "28544": [474, 478], "25357": [474, 478], "628": [474, 478], "23229": [474, 478], "27598": [474, 478], "25987": 474, "28720": [474, 478], "17941": [474, 478], "25628": [474, 478], "26482": [474, 478], "27664": [474, 478], "25609": [474, 478], "24773": [474, 478], "ashley": 474, "anderson": 474, "12006": 474, "alessandro": 474, "cucci": 474, "19475": [474, 478], "27661": [474, 478], "25928": [474, 478], "27819": [474, 478], "24277": [474, 478], "27331": [474, 478], "20476": 474, "27959": [474, 478], "23591": [474, 478], "23848": [474, 478], "hackman": [474, 478], "25788": [474, 478], "26470": [474, 478], "26798": [474, 478], "16113": [474, 478], "bertoni": 474, "joan": 474, "daemen": 474, "micha": [474, 478], "peeter": 474, "gill": 474, "assch": 474, "ronni": 474, "keer": 474, "27928": [474, 478], "rolf": [474, 478], "krahl": 474, "12319": [474, 478], "tkfont": 474, "swiegart": 474, "24225": [474, 478], "autocomplet": [474, 475, 478], "louie": [474, 475, 478], "15786": [474, 475, 478], "cheryl": [474, 475, 476, 478], "sabella": [474, 475, 476, 478], "1612262": [474, 475, 478], "wohlgang": [474, 475, 478], "27099": [474, 475, 478], "13802": [474, 475, 478], "31860": [474, 475, 478], "maxlin": [474, 475, 478], "33642": [474, 475, 478], "33768": [474, 475, 478], "33679": [474, 475, 478], "dpi": [474, 475, 478], "sharper": [474, 475, 478], "33656": [474, 475, 478], "1529353": [474, 475, 476, 478], "19611": [474, 478], "churn": 474, "richer": 474, "27172": [474, 478], "17909": [474, 478], "marian": [474, 478], "horban": 474, "24884": 474, "davin": [474, 476, 478], "pott": [474, 476, 478], "6766": [474, 478], "25994": [474, 478], "27186": [474, 478], "24164": [474, 478], "25382": [474, 478], "8637": [474, 478], "24879": [474, 478], "18844": [474, 478], "ython": 474, "433028": [474, 478], "24454": [474, 478], "xiang": [474, 475, 476, 478], "27177": [474, 478], "tyler": [474, 478], "crompton": [474, 478], "26870": [474, 478], "25011": [474, 478], "25209": [474, 478], "1521950": 474, "wolfgang": [474, 478], "langner": 474, "26587": [474, 478], "lordthorsen": [474, 478], "16864": [474, 478], "stoke": [474, 478], "26536": [474, 478], "26907": 474, "27744": [474, 478], "crypto": [474, 478], "omar": [474, 475, 478], "sandov": [474, 475, 478], "26273": [474, 475, 478], "26404": [474, 478], "26721": [474, 478], "27850": [474, 478], "27766": [474, 478], "28043": [474, 478], "19500": [474, 478], "warhawk": 474, "28025": [474, 478], "28085": 474, "27181": [474, 476, 478], "11734": [474, 478], "26741": [474, 478], "6135": [474, 478], "27781": [474, 478], "27932": [474, 478], "phane": [474, 475, 478], "wirtel": [474, 475, 478], "25485": [474, 478], "6422": [474, 478], "23552": [474, 478], "trace_add": [474, 478], "trace_remov": [474, 478], "trace_info": [474, 478], "trace_vari": [474, 478], "trace_vdelet": [474, 478], "trace_vinfo": [474, 478], "22115": [474, 478], "26588": [474, 478], "280": 474, "189": 474, "amit": [474, 478], "saha": [474, 478], "26323": [474, 478], "21271": [474, 478], "nikolay": [474, 478], "bogoychev": [474, 478], "16099": [474, 478], "balcerzak": 474, "22829": 474, "26568": 474, "26567": [474, 478], "rouault": [474, 478], "23026": [474, 478], "27982": [474, 478], "26885": [474, 478], "26039": [474, 478], "26243": [474, 478], "16764": [474, 478], "demur": [474, 478], "rume": [474, 478], "26647": [474, 478], "28050": 474, "24870": 474, "25227": [474, 478], "25267": [474, 478], "25301": [474, 478], "25349": [474, 478], "25399": [474, 478], "25401": [474, 478], "snider": [474, 478], "26574": [474, 478], "26249": [474, 478], "27056": [474, 478], "27574": [474, 478], "25596": [474, 478], "26032": [474, 478], "25638": [474, 478], "25873": [474, 478], "25869": [474, 478], "25971": [474, 478], "py_long_long": 474, "17884": [474, 478], "ndk": [474, 478], "lollipop": 474, "26865": 474, "alecsandru": [474, 478], "patrascu": [474, 478], "26359": [474, 478], "5319": [474, 478], "26282": [474, 478], "0b4": [474, 478], "223967b49e49": 474, "27243": [474, 478], "27364": [474, 478], "25791": [474, 478], "mariatta": [474, 478], "25002": 474, "21708": [474, 478], "extra_path": [474, 478], "27919": [474, 478], "26129": [474, 478], "26754": [474, 478], "22493": [474, 478], "28022": [474, 478], "25154": [474, 478], "ffi": [474, 478], "fullmodnam": 474, "find_lines_from_cod": 474, "find_lin": 474, "find_str": 474, "find_executable_lin": 474, "tk_menubar": [474, 478], "tk_bindfortravers": [474, 478], "cdrom": [474, 478], "cdio": [474, 478], "stropt": [474, 478], "chronic": 474, "h2pi": [474, 478], "show_track_count": [474, 478], "23034": [474, 478], "balogh": [474, 478], "2091": [474, 478], "25768": [474, 478], "20059": [474, 478], "taddei": [474, 478], "odziej": [474, 478], "23883": [474, 478], "18018": [474, 478], "23430": [474, 478], "26685": [474, 478], "18726": [474, 478], "holden": [474, 478], "27842": [474, 478], "25287": [474, 478], "lita": [474, 478], "cho": [474, 478], "21815": [474, 478], "jakub": [474, 478], "stasiak": [474, 478], "26335": [474, 478], "ramchandra": [474, 478], "17211": 474, "25953": [474, 478], "plugin": 474, "25483": 474, "27078": [474, 478], "27140": [474, 478], "build_map_unpack_with_cal": [474, 478], "build_tuple_unpack_with_cal": [474, 478], "call_function_var": 474, "call_function_var_kw": 474, "make_closur": [474, 478], "27095": [474, 478], "27213": [474, 478], "28257": [474, 478], "store_annot": [474, 475, 478], "27985": [474, 478], "pyexc_recursionerrorinst": [474, 475, 478], "22898": [474, 475, 478], "30697": [474, 475, 478], "31900": [474, 475, 478], "33899": [474, 475, 476, 478], "37228": [474, 475, 476, 477, 478], "advent": 475, "uncov": [475, 478], "glare": 475, "advers": 475, "from_str": 475, "validate_b": 475, "bray": [475, 478], "masayuki": [475, 478], "coars": 475, "ja": 475, "12844": [475, 478], "18896": [475, 478], "xiao": [475, 478], "28927": [475, 478], "32677": [475, 478], "29546": [475, 478], "30024": [475, 478], "28974": [475, 478], "30579": [475, 478], "33053": [475, 478], "31415": [475, 478], "32248": [475, 478], "14191": [475, 478], "32314": [475, 476, 478], "32436": [475, 478], "32311": [475, 478], "23749": [475, 478], "31819": [475, 478], "32250": [475, 478], "32251": [475, 478], "32269": [475, 478], "32391": [475, 478], "32410": [475, 478], "32415": [475, 478], "32418": [475, 478], "32662": [475, 478], "32741": [475, 478], "quentin": [475, 478], "dawan": 475, "31245": [475, 478], "create_accepted_socket": 475, "aspinal": 475, "29970": [475, 478], "marat": [475, 478], "sharafutdinov": [475, 478], "31943": [475, 478], "32193": [475, 478], "32356": [475, 478], "32066": [475, 478], "30508": [475, 478], "33792": [475, 478], "30103": [475, 478], "oz": 475, "tiram": 475, "30095": 475, "32320": [475, 478], "31650": [475, 478], "21423": [475, 478], "moreau": 475, "31540": [475, 478], "bakker": [475, 478], "10049": [475, 478], "29679": 475, "30241": [475, 478], "mohr": [475, 478], "kulakov": [475, 478], "29302": [475, 478], "sanyam": [475, 478], "21862": [475, 478], "31664": [475, 478], "31702": [475, 478], "15873": [475, 478], "5288": [475, 478], "32630": [475, 478], "11822": [475, 478], "11913": [475, 478], "31801": [475, 478], "33217": [475, 478], "32227": [475, 478], "zekun": 475, "31558": [475, 478], "32433": [475, 478], "soffer": [475, 478], "31945": [475, 478], "pierr": [475, 476, 478], "quentel": [475, 478], "29654": [475, 478], "28707": 475, "31639": [475, 478], "5680": [475, 476, 478], "37627": [475, 476, 478], "saimadhav": [475, 476, 478], "heblikar": [475, 476, 478], "17535": [475, 476, 478], "garvit": [475, 478], "khatri": [475, 478], "29851": [475, 478], "30436": [475, 478], "30526": [475, 478], "15216": [475, 478], "20825": [475, 478], "30537": [475, 478], "10379": [475, 478], "30520": [475, 478], "30522": [475, 478], "31080": [475, 478], "29962": [475, 478], "nitish": [475, 478], "chandra": [475, 478], "22589": [475, 478], "20486": [475, 478], "30596": [475, 478], "vitor": [475, 478], "pereira": [475, 478], "30794": [475, 478], "18966": [475, 478], "28682": [475, 478], "25996": [475, 478], "16500": [475, 478], "31368": [475, 478], "19930": [475, 478], "32441": [475, 478], "32659": [475, 478], "ry": [475, 478], "30897": [475, 478], "31389": [475, 478], "32206": [475, 478], "bernhard": 475, "wiedemann": 475, "29708": [475, 478], "feanil": 475, "patel": 475, "31128": [475, 478], "14976": [475, 478], "31690": [475, 478], "25054": [475, 478], "30215": [475, 478], "30349": [475, 478], "10076": [475, 478], "30050": [475, 478], "32373": [475, 478], "32454": [475, 478], "29728": [475, 478], "cathi": 475, "averi": 475, "27584": [475, 478], "28134": [475, 478], "lele": [475, 478], "gaifax": [475, 478], "27645": [475, 478], "31843": [475, 478], "31399": [475, 478], "libssl": 475, "libressl": [475, 478], "32185": [475, 478], "mandeep": [475, 478], "singh": [475, 478], "23033": [475, 478], "blacklist": [475, 478], "whitelist": [475, 478], "31429": [475, 478], "28414": [475, 478], "32947": [475, 478], "20995": [475, 478], "29136": [475, 478], "30622": [475, 478], "33618": [475, 478], "32951": [475, 478], "32609": 475, "1198569": [475, 478], "bo": [475, 476, 478], "bayl": [475, 476, 478], "32102": [475, 476, 478], "clegg": [475, 478], "31756": [475, 478], "segev": [475, 478], "19764": [475, 478], "25942": [475, 478], "31353": [475, 478], "28740": [475, 478], "32591": [475, 478], "32025": [475, 478], "32585": [475, 478], "32121": [475, 478], "manuel": [475, 478], "krebber": [475, 478], "29377": [475, 478], "32265": [475, 478], "32717": 475, "haag": 475, "32071": [475, 478], "20804": [475, 478], "30541": [475, 478], "theun": [475, 478], "ratnadeep": [475, 478], "debnath": [475, 478], "16285": [475, 478], "relay": [475, 478], "22807": [475, 478], "32107": [475, 478], "20361": [475, 478], "32043": [475, 478], "32230": [475, 478], "31975": [475, 478], "31648": [475, 478], "simplexmlrpcdispatch": [475, 478], "7769": [475, 478], "irmen": 475, "jong": 475, "31072": [475, 478], "zhime": 475, "31638": [475, 478], "21417": [475, 478], "30693": [475, 478], "25658": [475, 478], "28411": [475, 478], "victorin": 475, "23699": [475, 478], "31338": [475, 478], "30054": 475, "31574": [475, 478], "28761": [475, 478], "28769": [475, 478], "milman": [475, 478], "28280": [475, 478], "27867": [475, 478], "10381": [475, 478], "30708": [475, 478], "abid": 475, "29102": [475, 478], "29240": [475, 478], "28822": [475, 478], "31370": [475, 478], "27979": [475, 478], "30450": [475, 478], "29300": 475, "29507": 475, "29452": 475, "29286": 475, "29585": [475, 478], "31333": [475, 478], "26110": [475, 478], "32296": [475, 478], "32348": [475, 478], "32355": [475, 478], "32351": [475, 478], "31970": [475, 478], "32226": [475, 478], "elliot": [475, 478], "gorokhovski": [475, 478], "28685": [475, 478], "31179": [475, 478], "32544": [475, 478], "24821": [475, 478], "28638": [475, 478], "32403": [475, 478], "28564": [475, 478], "30285": [475, 478], "31671": [475, 478], "30014": [475, 478], "eugen": [475, 478], "toder": [475, 478], "29469": [475, 478], "11549": 475, "70x": [475, 478], "wielgosik": [475, 478], "24700": [475, 478], "26121": [475, 478], "31344": [475, 478], "32305": [475, 478], "32303": [475, 478], "32690": [475, 478], "32304": [475, 478], "10544": [475, 476, 478], "28894": 475, "openfp": [475, 477, 478], "31985": [475, 478], "32253": [475, 478], "25988": [475, 478], "28847": [475, 478], "28692": [475, 478], "29576": [475, 478], "chi": [475, 478], "hsuan": [475, 478], "yen": [475, 478], "9850": [475, 478], "_dummy_thread": [475, 477, 478], "28332": [475, 478], "28124": [475, 478], "28799": [475, 478], "nix": 475, "jessi": 475, "trusti": 475, "lts": 475, "xenial": 475, "sles": 475, "sp3": 475, "splitunc": [475, 478], "_internaldict": [475, 478], "_overlap": [475, 478], "install_misc": [475, 478], "vander": [475, 478], "weel": [475, 478], "29218": [475, 478], "fpectl": [475, 478], "29137": [475, 478], "30291": [475, 478], "0p": [475, 478], "30362": [475, 478], "30406": [475, 478], "32670": [475, 478], "31709": [475, 478], "32012": [475, 478], "32023": [475, 478], "31233": [475, 478], "33540": [475, 478], "31151": [475, 478], "24744": [475, 478], "29193": [475, 478], "29192": [475, 478], "21071": [475, 478], "29979": [475, 478], "30399": [475, 478], "utkarsh": 475, "upadhyay": 475, "30302": [475, 478], "32308": [475, 478], "29995": [475, 478], "32331": [475, 478], "33169": [475, 478], "32327": [475, 478], "sottil": [475, 476, 477, 478], "26510": [475, 478], "31778": [475, 478], "28292": [475, 478], "32792": [475, 478], "nemec": 475, "33097": [475, 478], "tocknel": [475, 478], "23835": [475, 478], "32550": [475, 478], "28137": [475, 478], "latent": 475, "22257": [475, 478], "25612": [475, 478], "34247": 475, "affection": 476, "tusk": 476, "discount": 476, "clean_nam": 476, "allowed_nam": 476, "emili": [476, 478], "morehous": [476, 478], "35224": [476, 478], "impair": 476, "36540": [476, 478], "33499": [476, 478], "21536": [476, 478], "36722": [476, 478], "36721": [476, 478], "eric_idl": 476, "member_sinc": 476, "075": 476, "theta": 476, "36817": [476, 478], "_pyruntimest": [476, 478], "36763": [476, 478], "36974": [476, 477, 478], "36785": [476, 478], "32489": [476, 478], "33073": [476, 478], "37819": [476, 478], "20092": [476, 478], "copyright_year_pattern": 476, "eunic": [476, 478], "30688": [476, 478], "lapeyr": [476, 477, 478], "33462": [476, 478], "34641": [476, 478], "simpson": 476, "homer": 476, "marg": 476, "bart": 476, "cuthbert": [476, 478], "jordan": [476, 478], "32117": [476, 478], "15248": [476, 478], "32417": [476, 478], "1054041": [476, 478], "37032": [476, 478], "137": 476, "diophantin": 476, "equat": 476, "369": 476, "36027": [476, 478], "rn": 476, "heissler": 476, "glaser": [476, 478], "olivi": [476, 478], "grisel": [476, 478], "35900": [476, 478], "chardet": 476, "34632": [476, 478], "33416": [476, 478], "35766": [476, 478], "37028": [476, 478], "32528": [476, 478], "34687": [476, 478], "meili": [476, 478], "29883": [476, 478], "23057": [476, 478], "36999": [476, 478], "34270": [476, 478], "twisteroid": 476, "ambassador": 476, "33530": [476, 478], "34616": [476, 478], "remedi": 476, "35864": [476, 478], "sanderson": [476, 478], "29235": [476, 478], "selik": [476, 478], "34003": [476, 478], "31680": [476, 478], "36085": [476, 478], "36004": [476, 478], "36772": [476, 478], "21145": [476, 478], "taskmanag": 476, "32380": [476, 478], "36016": [476, 478], "franz": [476, 478], "glasner": 476, "2504": [476, 478], "guo": [476, 478], "teo": [476, 478], "34898": [476, 478], "6584": [476, 478], "13153": [476, 478], "4603": [476, 477], "johnni": [476, 477, 478], "najera": [476, 477, 478], "38944": [476, 477, 478], "37765": [476, 477, 478], "audioclip": 476, "bit_rat": 476, "kilohertz": 476, "36326": [476, 478], "1015": 476, "1045": 476, "34659": [476, 478], "31553": [476, 478], "jupyt": 476, "33897": [476, 478], "33089": [476, 478], "35606": [476, 478], "yash": [476, 478], "aggarw": [476, 478], "keller": [476, 478], "37128": [476, 478], "37178": [476, 478], "35431": [476, 478], "650320427": 476, "650320426": 476, "36887": [476, 478], "33083": [476, 478], "32941": [476, 478], "35813": [476, 478], "26836": [476, 478], "37834": [476, 478], "33721": [476, 478], "36264": [476, 478], "joannah": [476, 477, 478], "nanjeky": [476, 477, 478], "26978": [476, 478], "jon": [476, 477, 478], "janzen": [476, 477], "26707": [476, 478], "30670": [476, 478], "22640": [476, 478], "20849": [476, 478], "gerlach": [476, 478], "30661": 476, "17561": [476, 478], "37007": [476, 478], "34670": [476, 478], "35904": [476, 478], "35892": 476, "equiprob": 476, "36546": [476, 478], "36018": [476, 478], "temperature_feb": 476, "356099432828281": 476, "3184678262814532": 476, "2039930378537762": 476, "el_ni": 476, "climat": 476, "830080526611674": 476, "294144947901014": 476, "672102882379219": 476, "000027119750287": 476, "647488369766392": 476, "36829": [476, 478], "36268": [476, 478], "1230540": [476, 478], "tesler": 476, "36084": [476, 478], "selection_from": [476, 478], "selection_pres": [476, 478], "selection_rang": [476, 478], "selection_to": [476, 478], "juliett": [476, 478], "monsel": [476, 478], "34829": [476, 478], "moveto": [476, 478], "23831": [476, 478], "transparency_get": 476, "transparency_set": 476, "25451": [476, 478], "35702": [476, 478], "lat_long": 476, "grid_squar": 476, "xy_coordin": 476, "get_status": 476, "1415926536": 476, "belang": 476, "euresti": 476, "32285": [476, 478], "37966": [476, 478], "26467": [476, 478], "24412": [476, 478], "strandmark": [476, 478], "35047": [476, 478], "32972": [476, 478], "testrequest": 476, "test_get": 476, "32718": [476, 478], "36669": [476, 478], "17239": [476, 478], "28238": [476, 478], "13611": [476, 478], "36676": [476, 478], "36673": [476, 478], "35153": [476, 478], "35537": [476, 478], "smb": [476, 478], "33695": [476, 478], "pygc_head": [476, 477, 478], "33597": [476, 478], "bolsterle": [476, 478], "30977": [476, 478], "35664": [476, 478], "32492": [476, 478], "33234": [476, 478], "36012": [476, 478], "23867": 476, "35582": 476, "36127": 476, "26219": [476, 478], "36707": [476, 478], "8m": 476, "37m": 476, "35081": [476, 478], "pyobject_init_var": [476, 477, 478], "_py_dealloc": 476, "35059": [476, 478], "pybytearray_init": [476, 478], "pybytearray_fini": [476, 478], "35713": [476, 478], "33818": [476, 478], "dualiti": 476, "32430": [476, 478], "36048": [476, 478], "35810": [476, 477, 478], "37221": [476, 478], "38234": [476, 478], "37481": [476, 478], "29209": [476, 478], "34075": [476, 478], "9372": [476, 478], "36320": [476, 478], "32892": [476, 478], "36917": [476, 478], "36921": [476, 478], "34790": [476, 477, 478], "33710": [476, 478], "isal": [476, 477, 478], "35283": [476, 478], "sharedmemoryserv": 476, "36492": [476, 478], "36952": [476, 478], "35471": [476, 478], "35345": [476, 478], "36895": [476, 478], "25427": [476, 478], "36297": [476, 478], "30262": [476, 478], "36933": [476, 478], "34850": [476, 478], "35459": 476, "36793": [476, 478], "aix3": [476, 478], "36588": [476, 478], "36475": [476, 478], "37412": [476, 478], "34651": [476, 478], "37951": [476, 478], "36348": [476, 478], "31508": [476, 478], "roja": 476, "34160": [476, 478], "32749": [476, 478], "pycore_pyst": [476, 478], "35886": [476, 478], "2122": [476, 478], "33106": [476, 478], "32751": [476, 477, 478], "37027": [476, 478], "kb2533623": 476, "pgen": [476, 478], "36623": [476, 478], "pyeval_reinitthread": [476, 478], "36728": [476, 478], "36381": [476, 478], "foo_struct": [476, 477], "foo_new": 476, "33407": [476, 478], "32388": [476, 478], "pynode_addchild": 476, "pyparser_addtoken": 476, "libpython38": [476, 478], "mingw": [476, 478], "python38": 476, "gendef": 476, "dlltool": 476, "binutil": 476, "37351": [476, 478], "unrol": [476, 478], "break_loop": [476, 478], "continue_loop": [476, 478], "setup_loop": [476, 478], "setup_except": [476, 478], "begin_fin": [476, 478], "call_fin": [476, 478], "pop_fin": [476, 478], "end_fin": [476, 478], "with_cleanup_start": [476, 478], "17611": [476, 478], "33041": [476, 478], "var_access_benchmark": [476, 477, 478], "35884": [476, 478], "read_loc": [476, 477], "read_nonloc": [476, 477], "read_glob": [476, 477], "read_builtin": [476, 477], "read_classvar_from_class": [476, 477], "read_classvar_from_inst": [476, 477], "read_instancevar": [476, 477], "read_instancevar_slot": [476, 477], "read_namedtupl": [476, 477], "read_boundmethod": [476, 477], "write_loc": [476, 477], "write_nonloc": [476, 477], "write_glob": [476, 477], "write_classvar": [476, 477], "write_instancevar": [476, 477], "write_instancevar_slot": [476, 477], "read_list": [476, 477], "read_dequ": [476, 477], "read_strdict": [476, 477], "write_list": [476, 477], "write_dequ": [476, 477], "write_dict": [476, 477], "write_strdict": [476, 477], "list_append_pop": [476, 477], "deque_append_pop": [476, 477], "deque_append_popleft": [476, 477], "loop_overhead": [476, 477], "i7": [476, 477], "4960hq": [476, 477], "36384": [476, 477, 478], "achraf": 476, "merzouki": 476, "_abc": [477, 478], "_bz2": [477, 478], "_codec": [477, 478], "_contextvar": [477, 478], "_crypt": [477, 478], "_functool": [477, 478], "_json": [477, 478], "multiphas": [477, 478], "_hashlib": [477, 478], "_posixsubprocess": [477, 478], "36144": [477, 478], "39939": [477, 478], "greet_al": 477, "ta": [477, 478], "kaya": [477, 478], "39481": [477, 478], "pythonoldpars": [477, 478], "ngalim": [477, 478], "siregar": [477, 478], "37444": [477, 478], "20443": [477, 478], "37388": [477, 478], "28029": [477, 478], "39702": [477, 478], "40257": [477, 478], "30773": [477, 478], "40824": [477, 478], "41848": 477, "43755": [477, 478], "17005": [477, 478], "37995": [477, 478], "38870": [477, 478], "39638": [477, 478], "34037": [477, 478], "38692": [477, 478], "32309": [477, 478], "typererror": [477, 478], "ido": [477, 478], "37404": [477, 478], "lum": 477, "frenzi": 477, "balhar": 477, "40495": [477, 478], "38112": [477, 478], "39349": [477, 478], "39812": [477, 478], "39207": [477, 478], "38312": [477, 478], "24416": [477, 478], "40698": [477, 478], "38602": [477, 478], "39259": [477, 478], "38379": [477, 478], "39322": [477, 478], "xof": [477, 478], "37630": [477, 478], "40479": [477, 478], "39509": [477, 478], "rhode": [477, 478], "39507": [477, 478], "38615": [477, 478], "40375": [477, 478], "39336": [477, 478], "39791": [477, 478], "36350": [477, 478], "39775": [477, 478], "oleksandr": [477, 478], "pavliuk": [477, 478], "34788": [477, 478], "39648": [477, 478], "ananthakrishnan": 477, "39479": [477, 478], "39288": [477, 478], "39310": [477, 478], "30966": [477, 478], "38493": [477, 478], "38713": [477, 478], "39413": [477, 478], "39395": [477, 478], "40094": [477, 478], "girt": [477, 478], "folkmani": [477, 478], "30618": [477, 478], "hopper": [477, 478], "lidral": [477, 478], "porter": [477, 478], "20523": [477, 478], "bordum": [477, 478], "37376": [477, 478], "40286": [477, 478], "38712": [477, 478], "39329": [477, 478], "tatschner": 477, "25780": [477, 478], "40291": [477, 478], "shinya": [477, 478], "okano": [477, 478], "28724": [477, 478], "thread_cputim": [477, 478], "40192": [477, 478], "jek": [477, 478], "charalampo": [477, 478], "strataki": [477, 478], "1294959": [477, 478], "jendrik": [477, 478], "seipp": [477, 478], "13601": [477, 478], "huon": 477, "40630": 477, "varoquaux": [477, 478], "konstantin": [477, 478], "kashin": [477, 478], "39926": [477, 478], "37663": [477, 478], "eoln": 477, "mefistot": 477, "39011": [477, 478], "32856": [477, 478], "40010": [477, 478], "closefrom": [477, 478], "mast": [477, 478], "conrad": [477, 478], "kubilay": [477, 478], "kocak": [477, 478], "38061": [477, 478], "87x": 477, "37986": [477, 478], "37207": [477, 478], "kapun": [477, 478], "8425": [477, 478], "thrash": [477, 478], "37257": [477, 478], "39434": [477, 478], "37348": [477, 478], "39586": [477, 478], "37315": [477, 478], "35712": [477, 478], "28286": [477, 478], "splitlist": [477, 478], "hexbin4": [477, 478], "rledecode_hqx": [477, 478], "39353": [477, 478], "34822": [477, 478], "augload": [477, 478], "augstor": [477, 478], "39639": [477, 478], "39969": [477, 478], "39988": [477, 478], "39877": [477, 478], "33262": [477, 478], "colvin": [477, 478], "xgtitl": [477, 478], "39366": [477, 478], "38916": [477, 478], "call_profil": [477, 478], "37414": [477, 478], "37392": [477, 478], "pyimport_cleanup": 477, "36710": 477, "37312": [477, 478], "37320": [477, 478], "37804": [477, 478], "36543": [477, 478], "36409": [477, 478], "pygen_needsfin": [477, 478], "15088": [477, 478], "39351": [477, 478], "39350": [477, 478], "39357": [477, 478], "39377": [477, 478], "34793": [477, 478], "39489": [477, 478], "40182": [477, 478], "has_exec": [477, 478], "40208": [477, 478], "40967": [477, 478], "39239": [477, 478], "39562": [477, 478], "34538": 477, "37742": [477, 478], "aiudi": [477, 478], "34775": [477, 478], "latex_latin1": 477, "jordon": 477, "xu": [477, 478], "37751": [477, 478], "foo_travers": 477, "0x03090000": 477, "29548": [477, 478], "34880": [477, 478], "39156": [477, 478], "setenv": [477, 478], "10945": [477, 478], "isysroot": [477, 478], "34956": [477, 478], "33125": [477, 478], "36044": [477, 478], "37707": [477, 478], "marcel": [477, 478], "plch": [477, 478], "38787": [477, 478], "40421": [477, 478], "39947": [477, 478], "37194": [477, 478], "38644": [477, 478], "39542": [477, 478], "40024": [477, 478], "40241": [477, 478], "_pyobject_functionstr": [477, 478], "37645": [477, 478], "37483": [477, 478], "38500": [477, 478], "39984": [477, 478], "38650": [477, 478], "pycore_gc": 477, "pyunicode_wstr_length": [477, 478], "39882": [477, 478], "37540": [477, 478], "pyobject_new_var": [477, 478], "pyobject_get_weakrefs_listptr": [477, 478], "pyfpe_start_protect": [477, 478], "pyfpe_end_protect": [477, 478], "38835": [477, 478], "37878": [477, 478], "_py_newrefer": [477, 478], "_py_forgetrefer": [477, 478], "_pytracemalloc_newrefer": [477, 478], "_py_getreftot": [477, 478], "pytrash_unwind_level": [477, 478], "py_trashcan_begin_condit": [477, 478], "_pydebug_printtotalref": 477, "_py_printrefer": 477, "_py_printreferenceaddress": 477, "_py_tracemalloc_config": 477, "_py_addtoallobject": 477, "getfram": [477, 478], "_pythreadstate_getfram": [477, 478], "pythreadframegett": [477, 478], "39946": [477, 478], "37340": [477, 478], "38896": [477, 478], "40428": [477, 478], "pyasyncgen_clearfreelist": [477, 478], "pycontext_clearfreelist": [477, 478], "pydict_clearfreelist": [477, 478], "pyfloat_clearfreelist": [477, 478], "pyframe_clearfreelist": [477, 478], "pylist_clearfreelist": [477, 478], "pymethod_clearfreelist": [477, 478], "pycfunction_clearfreelist": [477, 478], "pyset_clearfreelist": [477, 478], "pytuple_clearfreelist": [477, 478], "pyunicode_clearfreelist": [477, 478], "_pyunicode_clearstaticstr": [477, 478], "39465": [477, 478], "_pybytes_insertthousandsgroupinglocal": [477, 478], "_pybytes_insertthousandsgroup": [477, 478], "_py_initializefromarg": [477, 478], "_py_initializefromwidearg": [477, 478], "_pyfloat_repr": [477, 478], "_pyfloat_digit": [477, 478], "_pyfloat_digitsinit": [477, 478], "pyframe_extendstack": [477, 478], "_pyaiterwrapper_typ": [477, 478], "pynullimporter_typ": [477, 478], "pycmpwrapper_typ": [477, 478], "pysortwrapper_typ": [477, 478], "pynoargsfunct": [477, 478], "39372": [477, 478], "lawrenc": [477, 478], "anna": 477, "41100": [477, 478], "107774": 478, "register_callback": 478, "107724": 478, "rc1": 478, "py_throw": 478, "107080": 478, "108083": 478, "107963": 478, "106242": 478, "107715": 478, "gertjan": 478, "zwieten": 478, "100814": 478, "tclerror": 478, "106684": 478, "106052": 478, "100061": 478, "99203": 478, "107178": 478, "107814": 478, "find_python": 478, "106844": 478, "lcmapstringex": 478, "107565": 478, "multissltest": 478, "1v": 478, "95065": 478, "text_signatur": 478, "107810": 478, "102988": 478, "12beta4": 478, "106669": 478, "102509": 478, "ob_digit": 478, "107263": 478, "104432": 478, "unalign": 478, "fsanizit": 478, "chavez": 478, "106898": 478, "py_unind": 478, "py_unwind": 478, "hanld": 478, "106895": 478, "funtion": 478, "106897": 478, "104621": 478, "106917": 478, "105699": 478, "initialz": 478, "106092": 478, "frame_dealloc": 478, "106719": 478, "106723": 478, "105235": 478, "107077": 478, "ssl_error_syscal": 478, "ssl_error_ssl": 478, "err_lib_ssl": 478, "ssl_r_certificate_verify_fail": 478, "appropi": 478, "107576": 478, "46376": 478, "62519": 478, "83006": 478, "106186": 478, "105002": 478, "106831": 478, "d2i_ssl_sess": 478, "_ssl": 478, "106774": 478, "106752": 478, "106602": 478, "106530": 478, "106403": 478, "106350": 478, "libtommath": 478, "mp_init": 478, "106263": 478, "signaldict": 478, "charli": 478, "zhao": 478, "105626": 478, "18319": 478, "107305": 478, "nearbi": 478, "107008": 478, "106948": 478, "nitpick_ignor": 478, "54738": 478, "107237": 478, "test_log": 478, "test_udp_reconnect": 478, "106714": 478, "test_capi": 478, "test_no_fatalerror_infinite_loop": 478, "104090": 478, "test_zipfil": 478, "_path": 478, "106881": 478, "106962": 478, "mpi": 478, "101538": 478, "takashi": 478, "99079": 478, "106970": 478, "103186": 478, "config_arg": 478, "ijtaba": 478, "hussain": 478, "107226": 478, "27043": 478, "_parseaddr": 478, "addresslist": 478, "106396": 478, "106145": 478, "105979": 478, "_imp": 478, "get_frozen_object": 478, "105908": 478, "99111": 478, "barry_as_flufl": 478, "105340": 478, "105486": 478, "101006": 478, "106524": 478, "106510": 478, "106503": 478, "_selectorsockettransport": 478, "_write_readi": 478, "105497": 478, "90876": 478, "106292": 478, "106330": 478, "102541": 478, "106152": 478, "106075": 478, "105987": 478, "105974": 478, "96145": 478, "104554": 478, "94777": 478, "106232": 478, "101634": 478, "jn": 478, "testn": 478, "106118": 478, "12b1": 478, "103295": 478, "104692": 478, "commoninstal": 478, "bininstal": 478, "106359": 478, "splat": 478, "105227": 478, "105840": 478, "105831": 478, "105800": 478, "105587": 478, "_pystaticobject_checkrefcnt": 478, "105564": 478, "artificil": 478, "105549": 478, "105588": 478, "105375": 478, "105435": 478, "105390": 478, "104812": 478, "ergo": 478, "105808": 478, "101251": 478, "zip_mod": 478, "104799": 478, "105745": 478, "_unpickler_setinputstream": 478, "105605": 478, "_datetim": 478, "_elementtre": 478, "105332": 478, "104310": 478, "allowing_all_extens": 478, "104996": 478, "105084": 478, "wheel_pkg_dir": 478, "105436": 478, "105603": 478, "own_gil": 478, "103968": 478, "103142": 478, "1u": 478, "cves": 478, "99108": 478, "105259": 478, "105324": 478, "98963": 478, "12beta1": 478, "105194": 478, "105162": 478, "105164": 478, "105035": 478, "105017": 478, "105013": 478, "104976": 478, "tokeninfo": 478, "104972": 478, "104955": 478, "104690": 478, "104879": 478, "104825": 478, "105280": 478, "105239": 478, "105080": 478, "105144": 478, "105113": 478, "103631": 478, "104947": 478, "104935": 478, "104874": 478, "104797": 478, "104372": 478, "104399": 478, "mp_to_unsigned_bin_n": 478, "mp_unsigned_bin_s": 478, "102024": 478, "_idle_semaphor": 478, "_worker": 478, "89455": 478, "89412": 478, "104943": 478, "90005": 478, "libbsd": 478, "105146": 478, "103646": 478, "unwrit": 478, "88745": 478, "copyfile2": 478, "104820": 478, "exfat": 478, "104803": 478, "104719": 478, "105115": 478, "beta1": 478, "105071": 478, "99889": 478, "104049": 478, "102153": 478, "24329": 478, "104615": 478, "104572": 478, "104482": 478, "102818": 478, "104405": 478, "103082": 478, "104263": 478, "mip": 478, "py_infin": 478, "berg": 478, "99113": 478, "104108": 478, "104142": 478, "104078": 478, "104066": 478, "104028": 478, "104018": 478, "102213": 478, "103895": 478, "103907": 478, "103899": 478, "103845": 478, "103763": 478, "load_classdict_or_glob": 478, "load_classdict_or_deref": 478, "103801": 478, "ruff": 478, "102310": 478, "103650": 478, "sunmy2019": 478, "100530": 478, "101517": 478, "103492": 478, "87729": 478, "103488": 478, "82012": 478, "103333": 478, "103242": 478, "103323": 478, "tstate_curr": 478, "102700": 478, "88691": 478, "97933": 478, "99184": 478, "98003": 478, "39610": 478, "mem_0d": 478, "31821": 478, "104600": 478, "104340": 478, "104555": 478, "104484": 478, "75367": 478, "104536": 478, "stracktrac": 478, "101520": 478, "104392": 478, "_paramspec_tvar": 478, "102613": 478, "103000": 478, "elli": 478, "104301": 478, "104139": 478, "unsplit": 478, "itm": 478, "104307": 478, "87695": 478, "104265": 478, "0a4": 478, "23224": 478, "14935": 478, "radislav": 478, "chugunov": 478, "65772": 478, "90208": 478, "104144": 478, "fututr": 478, "104114": 478, "104104": 478, "104102": 478, "103822": 478, "103963": 478, "call_intrinsic_": 478, "104035": 478, "103987": 478, "103977": 478, "88773": 478, "liam": 478, "gersten": 478, "103935": 478, "68968": 478, "100370": 478, "102628": 478, "103583": 478, "_multibytecodec": 478, "103848": 478, "ipvfutur": 478, "103872": 478, "99944": 478, "74940": 478, "103861": 478, "103839": 478, "tommath": 478, "103791": 478, "90750": 478, "103685": 478, "81403": 478, "endtransf": 478, "voidresp": 478, "89415": 478, "rees": 478, "hyde": 478, "103673": 478, "berri": 478, "84976": 478, "_pydatetim": 478, "103596": 478, "103584": 478, "stipul": 478, "typesh": 478, "9620": 478, "103578": 478, "103556": 478, "103559": 478, "103548": 478, "103538": 478, "tk_aqua": 478, "103533": 478, "103525": 478, "103365": 478, "103472": 478, "103462": 478, "103449": 478, "103092": 478, "_collect": 478, "103357": 478, "harel": 478, "_protocolmeta": 478, "_is_callable_members_on": 478, "_get_protocol_attr": 478, "103256": 478, "103285": 478, "103225": 478, "93910": 478, "memmber": 478, "102978": 478, "100479": 478, "103220": 478, "103204": 478, "75586": 478, "103143": 478, "102953": 478, "97696": 478, "81079": 478, "101819": 478, "101362": 478, "102114": 478, "62432": 478, "78079": 478, "85984": 478, "101688": 478, "101640": 478, "83861": 478, "89550": 478, "99353": 478, "96522": 478, "96534": 478, "87474": 478, "gorgen": 478, "51574": 478, "94518": 478, "fork_exec": 478, "92184": 478, "46797": 478, "44844": 478, "45606": 478, "23041": 478, "24964": 478, "17258": 478, "39744": 478, "22708": 478, "67056": 478, "48241": 478, "86094": 478, "yeojin": 478, "andrea": 478, "giudiceandrea": 478, "99202": 478, "104494": 478, "test_pack_configure_in": 478, "test_place_configure_in": 478, "104461": 478, "test_configure_screen": 478, "86275": 478, "103329": 478, "102795": 478, "test_control_and_wait": 478, "75729": 478, "101282": 478, "99017": 478, "104490": 478, "phoni": 478, "104106": 478, "mkfifoat": 478, "mknodat": 478, "103532": 478, "tkinter_protect_loadtk": 478, "91152": 478, "99069": 478, "static_assert": 478, "100220": 478, "104623": 478, "82814": 478, "103088": 478, "102997": 478, "88013": 478, "99834": 478, "103545": 478, "104180": 478, "schott": 478, "60436": 478, "104499": 478, "104496": 478, "someday": 478, "88496": 478, "104389": 478, "101291": 478, "104109": 478, "103743": 478, "103091": 478, "101408": 478, "prehead": 478, "96803": 478, "89987": 478, "101975": 478, "stacktop": 478, "100982": 478, "compare_and_branch": 478, "102701": 478, "102594": 478, "90997": 478, "102491": 478, "ironlanguag": 478, "ironpython3": 478, "1667": 478, "rearrag": 478, "2s": 478, "102397": 478, "102406": 478, "102281": 478, "nullptr": 478, "fileutil": 478, "bachmann": 478, "102300": 478, "102255": 478, "xbox": 478, "102027": 478, "sse2": 478, "sse3": 478, "_blake2": 478, "101865": 478, "moham": 478, "koubaa": 478, "103085": 478, "103068": 478, "102549": 478, "103056": 478, "103046": 478, "103023": 478, "102947": 478, "102780": 478, "102839": 478, "88965": 478, "76846": 478, "102670": 478, "102615": 478, "100112": 478, "102578": 478, "74468": 478, "102378": 478, "_signature_strip_non_python_syntax": 478, "79940": 478, "102103": 478, "102069": 478, "102038": 478, "98886": 478, "101673": 478, "101313": 478, "100372": 478, "89727": 478, "100131": 478, "48330": 478, "98169": 478, "96931": 478, "95495": 478, "close_notifi": 478, "94684": 478, "94440": 478, "36305": 478, "103112": 478, "102980": 478, "102537": 478, "test_zoneinfo": 478, "tzpathtest": 478, "python_tzpath_context": 478, "101377": 478, "test_locale_calendar_formatweekday": 478, "102973": 478, "dockerfil": 478, "102711": 478, "wstrict": 478, "102690": 478, "102809": 478, "102013": 478, "pyunstable_visitobject": 478, "101727": 478, "1t": 478, "0286": 478, "4303": 478, "libtomcrypt": 478, "101283": 478, "102493": 478, "102416": 478, "102356": 478, "102336": 478, "102250": 478, "102126": 478, "getcurrentprocessid": 478, "102056": 478, "for_iter_rang": 478, "101967": 478, "positional_only_passed_as_keyword": 478, "101952": 478, "74895": 478, "sai_servic": 478, "101799": 478, "101857": 478, "musl": 478, "84783": 478, "87849": 478, "101765": 478, "101430": 478, "presiz": 478, "101696": 478, "_pystatictype_dealloc": 478, "101632": 478, "100719": 478, "98627": 478, "102302": 478, "101979": 478, "91038": 478, "81652": 478, "102179": 478, "101961": 478, "hookcompress": 478, "gihwan": 478, "101936": 478, "vo": 478, "101566": 478, "97930": 478, "multiplexedpath": 478, "265": 478, "101997": 478, "_sha2": 478, "_sha256": 478, "_sha512": 478, "101892": 478, "87634": 478, "97786": 478, "101773": 478, "_normal": 478, "101693": 478, "101446": 478, "63301": 478, "101360": 478, "101277": 478, "100809": 478, "99138": 478, "96764": 478, "88233": 478, "leakag": 478, "85417": 478, "97725": 478, "102019": 478, "test_current_": 478, "89792": 478, "test_tool": 478, "99942": 478, "100221": 478, "sharedinstal": 478, "96821": 478, "102344": 478, "101881": 478, "101849": 478, "101763": 478, "101759": 478, "101614": 478, "python3_d": 478, "101196": 478, "101907": 478, "99293": 478, "91744": 478, "689": 478, "92173": 478, "59956": 478, "101400": 478, "101372": 478, "101266": 478, "pylongvalu": 478, "101046": 478, "101037": 478, "underalloc": 478, "100762": 478, "100942": 478, "100923": 478, "100892": 478, "91351": 478, "100726": 478, "100712": 478, "enable_speci": 478, "32780": 478, "pep3118": 478, "101541": 478, "psuedo": 478, "101570": 478, "101323": 478, "_zlibdecompressor": 478, "101317": 478, "101326": 478, "futureit": 478, "92123": 478, "100795": 478, "freeaddrinfo": 478, "brester": 478, "101143": 478, "_add_callback": 478, "101144": 478, "stress": 478, "supplimentari": 478, "101015": 478, "100573": 478, "39615": 478, "100750": 478, "96290": 478, "99952": 478, "undercount": 478, "67790": 478, "99266": 478, "86682": 478, "60580": 478, "38941": 478, "40077": 478, "29847": 478, "77772": 478, "hoelzl": 478, "88324": 478, "reword": 478, "101334": 478, "test_tarfil": 478, "configr": 478, "depreact": 478, "101522": 478, "77532": 478, "platformtoolset": 478, "clangcl": 478, "101152": 478, "100340": 478, "wno": 478, "101060": 478, "98705": 478, "98636": 478, "gdbm_compat": 478, "_gdbm": 478, "96305": 478, "_aix_support": 478, "_bootsubprocess": 478, "101543": 478, "101467": 478, "101135": 478, "82052": 478, "32k": 478, "mojibak": 478, "100320": 478, "100247": 478, "100776": 478, "99005": 478, "unary_posit": 478, "list_to_tupl": 478, "call_instrinsic_1": 478, "import_star": 478, "print_expr": 478, "stopiteration_error": 478, "100288": 478, "load_attr_method_with_dict": 478, "100720": 478, "_pyframe_numslotsforcodeobject": 478, "co_nplaincellvar": 478, "100637": 478, "100649": 478, "native_thread_id": 478, "100126": 478, "torn": 478, "87447": 478, "100268": 478, "100374": 478, "socular": 478, "100357": 478, "100117": 478, "90043": 478, "100222": 478, "_py_codeunit": 478, "pun": 478, "99955": 478, "100188": 478, "binary_subscr_list_int": 478, "binary_subscr_tuple_int": 478, "99110": 478, "pyframe_new": 478, "94155": 478, "99540": 478, "100143": 478, "xpystat": 478, "100146": 478, "_pylist_fromarrayst": 478, "100110": 478, "100050": 478, "92216": 478, "99582": 478, "_bootstrap_python": 478, "99554": 478, "98522": 478, "94603": 478, "89051": 478, "32782": 478, "100833": 478, "100805": 478, "100813": 478, "100792": 478, "91851": 478, "microoptim": 478, "90104": 478, "100689": 478, "pyexpat_capi": 478, "100740": 478, "91219": 478, "100690": 478, "called_onc": 478, "86508": 478, "shim": 478, "100585": 478, "100562": 478, "100519": 478, "eff_request_host": 478, "100287": 478, "100488": 478, "100474": 478, "100363": 478, "78878": 478, "cfield": 478, "100348": 478, "_read_ready_cb": 478, "100272": 478, "83076": 478, "100228": 478, "100039": 478, "100133": 478, "44592": 478, "100098": 478, "85432": 478, "98778": 478, "99925": 478, "94943": 478, "83035": 478, "99576": 478, "94912": 478, "99509": 478, "99433": 478, "85267": 478, "__text_signatur": 478, "98030": 478, "88500": 478, "96127": 478, "95882": 478, "78707": 478, "92122": 478, "24132": 478, "40447": 478, "36880": 478, "100616": 478, "100472": 478, "25377": 478, "100454": 478, "100086": 478, "libregrtest": 478, "93018": 478, "libexpat": 478, "100540": 478, "dusing_apple_os_libffi": 478, "88267": 478, "41916": 478, "ac_cv_cxx_thread": 478, "100180": 478, "99191": 478, "_msvc_lang": 478, "202002l": 478, "_msc_ver": 478, "1929": 478, "_wmimodul": 478, "79218": 478, "ms_win64": 478, "w64": 478, "99941": 478, "43984": 478, "34816": 478, "100342": 478, "99947": 478, "99240": 478, "100001": 478, "87604": 478, "99891": 478, "99729": 478, "99708": 478, "99578": 478, "create_builtin": 478, "99581": 478, "caract": 478, "99553": 478, "99370": 478, "99377": 478, "98686": 478, "binary_op_gener": 478, "compare_op_gener": 478, "99298": 478, "91053": 478, "90994": 478, "45026": 478, "31718": 478, "38031": 478, "ambigui": 478, "79033": 478, "51524": 478, "99645": 478, "99508": 478, "_bootstrap_extern": 478, "66285": 478, "wakeupfd": 478, "97001": 478, "92647": 478, "99341": 478, "99382": 478, "99379": 478, "99344": 478, "99284": 478, "untest": 478, "99201": 478, "have_dynamic_load": 478, "str_convert": 478, "post_pars": 478, "64490": 478, "99029": 478, "nake": 478, "98253": 478, "resili": 478, "exacerb": 478, "98458": 478, "93453": 478, "basedefaulteventlooppolici": 478, "97966": 478, "uname_result": 478, "98248": 478, "98108": 478, "98098": 478, "82836": 478, "96828": 478, "ktls": 478, "88863": 478, "91078": 478, "47220": 478, "ogam": 478, "44817": 478, "error_bad_netpath": 478, "error_network_access_deni": 478, "161": 478, "error_bad_pathnam": 478, "41260": 478, "15999": 478, "99931": 478, "sphinxext": 478, "opengraph": 478, "89682": 478, "88330": 478, "92892": 478, "41825": 478, "99892": 478, "test_norm": 478, "test_unicodedata": 478, "normalizationtest": 478, "pythontest": 478, "99934": 478, "test_marsh": 478, "test_determinist": 478, "99741": 478, "630": 478, "_xxsubinterpret": 478, "99659": 478, "test_sqlite3": 478, "99593": 478, "96002": 478, "99086": 478, "wimplicit": 478, "99337": 478, "98872": 478, "88226": 478, "target_": 478, "use_computed_goto": 478, "99345": 478, "98629": 478, "99442": 478, "40882": 478, "87235": 478, "98940": 478, "_pyarg_unpackkeywordswithvararg": 478, "noptarg": 478, "98680": 478, "pybuf_": 478, "99612": 478, "98433": 478, "3xx": 478, "5894": 478, "98739": 478, "81057": 478, "99254": 478, "99205": 478, "99181": 478, "99204": 478, "96055": 478, "99153": 478, "unquicken": 478, "extended_arg_quick": 478, "warmup": 478, "99103": 478, "96793": 478, "98852": 478, "98925": 478, "98783": 478, "98811": 478, "imped": 478, "98762": 478, "unbox": 478, "99257": 478, "93143": 478, "96421": 478, "frame_owned_by_cstack": 478, "98415": 478, "chaim": 478, "sander": 478, "92119": 478, "90716": 478, "_pylong": 478, "asymptot": 478, "longobject": 478, "95389": 478, "noam": 478, "cohen": 478, "93696": 478, "99418": 478, "99305": 478, "74044": 478, "99275": 478, "__initsubclass__": 478, "99277": 478, "_sslprotocoltransport": 478, "sslproto": 478, "99248": 478, "99155": 478, "93464": 478, "99134": 478, "98999": 478, "83004": 478, "_zoneinfo": 478, "98897": 478, "98878": 478, "98139": 478, "90352": 478, "_selectordatagramtransport": 478, "98793": 478, "wsaconnect": 478, "wsasendto": 478, "98744": 478, "98740": 478, "98703": 478, "98624": 478, "98284": 478, "96151": 478, "98086": 478, "72719": 478, "96192": 478, "92452": 478, "91803": 478, "38523": 478, "36267": 478, "98832": 478, "98903": 478, "98713": 478, "87390": 478, "96853": 478, "34272": 478, "pthread_scope_system": 478, "99016": 478, "97731": 478, "docclean": 478, "98949": 478, "98989": 478, "98831": 478, "cases_gener": 478, "generated_cas": 478, "98817": 478, "pyproj": 478, "98776": 478, "levenshtein": 478, "98707": 478, "98689": 478, "37434": 478, "inflategethead": 478, "98790": 478, "98745": 478, "98692": 478, "94328": 478, "98978": 478, "benedikt": 478, "reinartz": 478, "98410": 478, "98610": 478, "_py_newinterpreterfromconfig": 478, "98608": 478, "_pyinterpreterconfig": 478, "_py_newinterpret": 478, "isolated_subinterpret": 478, "97616": 478, "limor": 478, "97514": 478, "escal": 478, "42919": 478, "87389": 478, "hamza": 478, "avvan": 478, "79096": 478, "92888": 478, "98374": 478, "98461": 478, "98354": 478, "98398": 478, "98390": 478, "97997": 478, "97973": 478, "96078": 478, "97955": 478, "97912": 478, "97002": 478, "97943": 478, "erad": 478, "86298": 478, "97779": 478, "97752": 478, "97591": 478, "97670": 478, "getdxp": 478, "analyze_dxp": 478, "dxp": 478, "dynamic_execution_profil": 478, "dxpair": 478, "94526": 478, "96975": 478, "96848": 478, "95921": 478, "_testcapimodul": 478, "95778": 478, "96387": 478, "mingliang": 478, "96864": 478, "96678": 478, "96754": 478, "backtrac": 478, "96751": 478, "64373": 478, "96641": 478, "keywrapp": 478, "96636": 478, "setrac": 478, "96572": 478, "96611": 478, "96612": 478, "90230": 478, "96587": 478, "96569": 478, "behavoir": 478, "96582": 478, "_pythread_currentfram": 478, "91079": 478, "93911": 478, "96348": 478, "95196": 478, "96364": 478, "96352": 478, "93554": 478, "fallthrough": 478, "backward_target": 478, "next_block": 478, "pop_jump_forward_if_tru": 478, "pop_jump_backward_if_tru": 478, "pop_jump_forward_if_fals": 478, "pop_jump_backward_if_fals": 478, "pop_jump_forward_if_non": 478, "pop_jump_backward_if_non": 478, "pop_jump_forward_if_not_non": 478, "pop_jump_backward_if_not_non": 478, "96268": 478, "96237": 478, "f_func": 478, "f_funcobj": 478, "96187": 478, "96143": 478, "96071": 478, "96046": 478, "ht_cached_key": 478, "96005": 478, "pyenv": 478, "93678": 478, "_testinternalcapi": 478, "optimize_cfg": 478, "cfgoptimizationtestcas": 478, "95245": 478, "weakreflist": 478, "95977": 478, "91210": 478, "95922": 478, "eliminate_empty_basic_block": 478, "95818": 478, "95876": 478, "_pypegen_raise_error_known_loc": 478, "95605": 478, "95150": 478, "91146": 478, "87092": 478, "codegen": 478, "95355": 478, "_pypegen_parser_new": 478, "honglin": 478, "zhu": 478, "90081": 478, "slowdown": 478, "95324": 478, "cfg_builder": 478, "95185": 478, "absurd": 478, "94438": 478, "95060": 478, "addrq": 478, "95113": 478, "91409": 478, "95023": 478, "94036": 478, "94938": 478, "94996": 478, "94739": 478, "94949": 478, "94947": 478, "91256": 478, "94869": 478, "94893": 478, "94822": 478, "91153": 478, "90699": 478, "94694": 478, "93252": 478, "94215": 478, "92228": 478, "94485": 478, "91719": 478, "94329": 478, "1000s": 478, "94360": 478, "int_min": 478, "94262": 478, "94192": 478, "93883": 478, "94163": 478, "94021": 478, "93955": 478, "93841": 478, "_stats_on": 478, "_stats_off": 478, "_stats_clear": 478, "_stats_dump": 478, "93516": 478, "traceabl": 478, "89828": 478, "93671": 478, "93662": 478, "93461": 478, "93621": 478, "93533": 478, "93444": 478, "basicblock": 478, "b_nofallthrough": 478, "b_exit": 478, "b_return": 478, "93418": 478, "93382": 478, "93359": 478, "93356": 478, "93354": 478, "93283": 478, "93345": 478, "93223": 478, "84694": 478, "91924": 478, "93040": 478, "93061": 478, "93065": 478, "hamt": 478, "libman": 478, "magicstack": 478, "93021": 478, "89914": 478, "92955": 478, "92930": 478, "90690": 478, "92914": 478, "92858": 478, "92804": 478, "92777": 478, "92658": 478, "92236": 478, "91102": 478, "92619": 478, "88750": 478, "92261": 478, "91432": 478, "91399": 478, "unicodetype_db": 478, "91578": 478, "47091": 478, "42316": 478, "89237": 478, "97928": 478, "98331": 478, "98307": 478, "96035": 478, "98257": 478, "98251": 478, "98178": 478, "44098": 478, "87730": 478, "98023": 478, "90985": 478, "harsh": 478, "undeprec": 478, "97646": 478, "9239": 478, "97837": 478, "97825": 478, "97008": 478, "82711": 478, "friedrich": 478, "bolz": 478, "tereick": 478, "97799": 478, "97781": 478, "mutablil": 478, "96827": 478, "95534": 478, "97592": 478, "97639": 478, "97545": 478, "73588": 478, "96865": 478, "97005": 478, "85760": 478, "96704": 478, "96819": 478, "resource_track": 478, "95865": 478, "96741": 478, "96735": 478, "46412": 478, "ndb": 478, "96652": 478, "68163": 478, "96538": 478, "96465": 478, "96079": 478, "_annotatedalia": 478, "96415": 478, "_cell_factori": 478, "95987": 478, "96388": 478, "96385": 478, "__typing_prepare_subst__": 478, "96142": 478, "_dataclassparam": 478, "96073": 478, "overeag": 478, "89258": 478, "96346": 478, "96349": 478, "90467": 478, "streamreaderprotocol": 478, "96172": 478, "96159": 478, "96175": 478, "96052": 478, "96125": 478, "96019": 478, "makeunicodedata": 478, "95463": 478, "69142": 478, "tzoffset": 478, "95899": 478, "95736": 478, "95804": 478, "95704": 478, "95149": 478, "95609": 478, "95289": 478, "manger": 478, "94909": 478, "95385": 478, "83901": 478, "95339": 478, "95045": 478, "95231": 478, "95097": 478, "95087": 478, "95199": 478, "95194": 478, "93899": 478, "95166": 478, "95132": 478, "11a1": 478, "24421": 478, "85128": 478, "93157": 478, "91212": 478, "shin": 478, "myoung": 478, "serp": 478, "95077": 478, "95109": 478, "95105": 478, "95066": 478, "95005": 478, "_pyaccu": 478, "_pyunicodewrit": 478, "90085": 478, "94857": 478, "94821": 478, "94736": 478, "_multiprocess": 478, "semlock": 478, "74116": 478, "87822": 478, "priorit": 478, "88050": 478, "94637": 478, "ssl_ctx_set_default_verify_path": 478, "92546": 478, "94607": 478, "94619": 478, "93896": 478, "94343": 478, "94382": 478, "78724": 478, "94510": 478, "92336": 478, "94398": 478, "94318": 478, "89988": 478, "94254": 478, "93259": 478, "from_nam": 478, "93096": 478, "test_codec": 478, "encodedfiletest": 478, "94207": 478, "_struct": 478, "test_base64": 478, "legacybase64testcas": 478, "test_encodebyt": 478, "94214": 478, "94182": 478, "91742": 478, "94101": 478, "84753": 478, "mehdi": 478, "abaakouk": 478, "94028": 478, "27884": 478, "93973": 478, "93858": 478, "93820": 478, "93847": 478, "83499": 478, "79512": 478, "91389": 478, "93626": 478, "90494": 478, "90549": 478, "93521": 478, "79579": 478, "93421": 478, "93475": 478, "93370": 478, "91810": 478, "91162": 478, "93353": 478, "83658": 478, "88123": 478, "93297": 478, "gced": 478, "85308": 478, "93156": 478, "93162": 478, "92886": 478, "90155": 478, "91513": 478, "93033": 478, "0x0100": 478, "0x00010000": 478, "89973": 478, "93044": 478, "93010": 478, "invalidheadererror": 478, "invalidheaderdefect": 478, "92986": 478, "92932": 478, "92675": 478, "87901": 478, "11b1": 478, "91922": 478, "92869": 478, "92839": 478, "89325": 478, "92734": 478, "92671": 478, "91581": 478, "92550": 478, "92591": 478, "92445": 478, "92547": 478, "92530": 478, "92531": 478, "84131": 478, "92391": 478, "mueller": 478, "91968": 478, "81790": 478, "90622": 478, "91577": 478, "91539": 478, "getproxies_environ": 478, "91447": 478, "91456": 478, "47231": 478, "39064": 478, "41287": 478, "32547": 478, "35540": 478, "47063": 478, "47025": 478, "46951": 478, "42777": 478, "46755": 478, "45393": 478, "46642": 478, "46364": 478, "28249": 478, "46197": 478, "45924": 478, "44173": 478, "42627": 478, "42047": 478, "dragonfli": 478, "carlier": 478, "14243": 478, "41246": 478, "iocpproactor": 478, "39264": 478, "38693": 478, "38267": 478, "34828": 478, "32990": 478, "26253": 478, "85525": 478, "86404": 478, "spinx": 478, "97741": 478, "96432": 478, "96098": 478, "95957": 478, "95588": 478, "unfix": 478, "91207": 478, "chm": 478, "htmlhelp": 478, "95454": 478, "documenti": 478, "shea": 478, "95451": 478, "95415": 478, "94321": 478, "86128": 478, "61162": 478, "87260": 478, "86986": 478, "88831": 478, "86438": 478, "93031": 478, "92240": 478, "47161": 478, "40838": 478, "43689": 478, "38056": 478, "overhaul": 478, "13553": 478, "95027": 478, "96624": 478, "test_unittest": 478, "test_dotted_but_module_not_load": 478, "95243": 478, "testsocknam": 478, "burton": 478, "95573": 478, "test_asyncio": 478, "test_ssl": 478, "fb11063974": 478, "fantix": 478, "95280": 478, "test_get_ciph": 478, "pfs": 478, "95212": 478, "test_shared_memory_recr": 478, "95218": 478, "test_importlib": 478, "94675": 478, "exponent": 478, "rjsmin": 478, "91330": 478, "94208": 478, "94315": 478, "dac": 478, "54781": 478, "test_tk": 478, "test_tkint": 478, "test_ttk_guion": 478, "test_ttk": 478, "93839": 478, "test_ctyp": 478, "93951": 478, "test_bdb": 478, "statetestcas": 478, "test_skip": 478, "93957": 478, "test_venv": 478, "ensurepiptest": 478, "test_with_pip": 478, "93884": 478, "93852": 478, "test_socket": 478, "test_socketserv": 478, "run_test": 478, "hostrunn": 478, "93616": 478, "test_modulefind": 478, "modulefindertest": 478, "93575": 478, "test_unicod": 478, "test_raisememerror": 478, "57539": 478, "openat2": 478, "resolve_beneath": 478, "89858": 478, "test_emb": 478, "test_imaplib": 478, "test_zipimport": 478, "test_py_compil": 478, "test_sys_settrac": 478, "_test_multiprocess": 478, "92670": 478, "test_shutil": 478, "testcopi": 478, "test_copyfile_nonexistent_dir": 478, "92514": 478, "basictestrunn": 478, "47016": 478, "turner": 478, "96761": 478, "96883": 478, "85936": 478, "96729": 478, "buildreleas": 478, "96269": 478, "module_dep": 478, "exportsym": 478, "95973": 478, "dsymutil": 478, "93744": 478, "maincc": 478, "94801": 478, "94802": 478, "95145": 478, "wasix": 478, "95174": 478, "netdb": 478, "94847": 478, "94841": 478, "1932": 478, "zlib_cflag": 478, "zlib_lib": 478, "94773": 478, "deepfreez": 478, "unsort": 478, "94682": 478, "1q": 478, "termcap": 478, "tinfo": 478, "_dbm": 478, "94404": 478, "94280": 478, "pegen": 478, "93584": 478, "93491": 478, "69093": 478, "_sqlite3": 478, "93202": 478, "34449": 478, "ux": 478, "osipov": 478, "98360": 478, "98414": 478, "97728": 478, "90989": 478, "97649": 478, "96965": 478, "96577": 478, "96559": 478, "94781": 478, "89545": 478, "wmi": 478, "95733": 478, "95656": 478, "95587": 478, "94399": 478, "95445": 478, "95359": 478, "95285": 478, "90844": 478, "94772": 478, "94018": 478, "93824": 478, "43414": 478, "92817": 478, "92984": 478, "92841": 478, "46907": 478, "91061": 478, "42658": 478, "38704": 478, "97897": 478, "97527": 478, "2288": 478, "65802": 478, "95511": 478, "95471": 478, "95411": 478, "89610": 478, "68686": 478, "ptag": 478, "eptag": 478, "95853": 478, "wasm_build": 478, "emsdk": 478, "95731": 478, "check_modul": 478, "94538": 478, "94430": 478, "86087": 478, "parseent": 478, "95756": 478, "96512": 478, "92678": 478, "95388": 478, "94930": 478, "94731": 478, "wold": 478, "wzero": 478, "91321": 478, "91731": 478, "89546": 478, "93442": 478, "_py_cast_impl": 478, "_py_cast": 478, "93466": 478, "92898": 478, "serg": 478, "guelton": 478, "93103": 478, "92913": 478, "92781": 478, "c90": 478, "92193": 478, "59121": 478, "45383": 478, "92345": 478, "43857": 478, "92245": 478, "11a7": 478, "92203": 478, "91173": 478, "92114": 478, "92112": 478, "92063": 478, "precall_method_descriptor_fast_with_keyword": 478, "92031": 478, "deoptim": 478, "_pycode_quicken": 478, "92036": 478, "92032": 478, "91869": 478, "91603": 478, "89373": 478, "91632": 478, "generic_alias_iter": 478, "encodingmap": 478, "91636": 478, "91625": 478, "78607": 478, "lltrace": 478, "__ltrace__": 478, "91576": 478, "89279": 478, "91502": 478, "_pyframe_isentryfram": 478, "91266": 478, "91479": 478, "__note__": 478, "46055": 478, "xinhang": 478, "91462": 478, "91421": 478, "_py_decodeutf8ex": 478, "91428": 478, "_pyopcode_opnam": 478, "47120": 478, "45317": 478, "47197": 478, "mishandl": 478, "47177": 478, "prev_instr": 478, "46961": 478, "46962": 478, "testcapi": 478, "recursinginfinitelyerror": 478, "46942": 478, "46764": 478, "43464": 478, "46721": 478, "46509": 478, "chase": 478, "46045": 478, "36819": 478, "34093": 478, "flag_ref": 478, "92356": 478, "92301": 478, "close_rang": 478, "67248": 478, "92210": 478, "cinder": 478, "92118": 478, "90887": 478, "copyfile_stat": 478, "copyfile_acl": 478, "copyfile_xattr": 478, "91215": 478, "92128": 478, "92049": 478, "92062": 478, "88089": 478, "91996": 478, "91984": 478, "test_argpars": 478, "91952": 478, "91954": 478, "47029": 478, "91928": 478, "91401": 478, "64783": 478, "sigrtmin": 478, "sigrtmax": 478, "91910": 478, "91832": 478, "91821": 478, "test_from_tupl": 478, "test_decim": 478, "91217": 478, "90623": 478, "91734": 478, "91700": 478, "91231": 478, "91621": 478, "90568": 478, "91670": 478, "91616": 478, "47256": 478, "823": 478, "91595": 478, "write_repr": 478, "yu": 478, "liu": 478, "74166": 478, "91575": 478, "89022": 478, "sqlite_misus": 478, "91526": 478, "91276": 478, "47000": 478, "91230": 478, "47260": 478, "seccomp": 478, "47227": 478, "47211": 478, "47135": 478, "43323": 478, "46681": 478, "45100": 478, "44807": 478, "46787": 478, "46720": 478, "par": 478, "46696": 478, "46053": 478, "45639": 478, "avif": 478, "46285": 478, "44791": 478, "46547": 478, "46415": 478, "46075": 478, "45995": 478, "26175": 478, "45138": 478, "40318": 478, "44863": 478, "44587": 478, "43827": 478, "43218": 478, "rodrigu": 478, "38435": 478, "42066": 478, "iman": 478, "kermani": 478, "40617": 478, "40676": 478, "39716": 478, "36073": 478, "kawashima": 478, "91888": 478, "91783": 478, "91547": 478, "91298": 478, "44347": 478, "36329": 478, "htmlview": 478, "47189": 478, "38668": 478, "47115": 478, "26792": 478, "brezovski": 478, "92169": 478, "import_deprec": 478, "91904": 478, "pythonregrtest_unicode_guard": 478, "91752": 478, "test_freez": 478, "testfreez": 478, "91607": 478, "test_concurrent_futur": 478, "40280": 478, "47109": 478, "macholib": 478, "29890": 478, "louisom": 478, "89452": 478, "47103": 478, "pginstrument": 478, "47239": 478, "46785": 478, "win32_xstat_impl": 478, "40859": 478, "91583": 478, "generate_re_casefix": 478, "91551": 478, "gitlab": 478, "91320": 478, "reinterpret_cast": 478, "static_cast": 478, "80527": 478, "91768": 478, "91020": 478, "47169": 478, "47212": 478, "matthieu": 478, "dartiailh": 478, "47186": 478, "jump_if_not_eg_match": 478, "47176": 478, "py_emscriptensignalbuff": 478, "sharedarraybuff": 478, "py_emscripten_signal_handl": 478, "47182": 478, "47162": 478, "py_call_trampolin": 478, "46775": 478, "47129": 478, "47117": 478, "47127": 478, "42197": 478, "47070": 478, "array_inplace_repeat": 478, "unicodeobject": 478, "_pybytes_repeat": 478, "47053": 478, "binary_op_inplace_add_unicod": 478, "47045": 478, "46968": 478, "auxv": 478, "46329": 478, "47012": 478, "47009": 478, "47005": 478, "bytearray_repeat": 478, "bytearray_irepeat": 478, "46829": 478, "46993": 478, "39829": 478, "jeremiah": 478, "pascual": 478, "46944": 478, "46881": 478, "46838": 478, "43721": 478, "47208": 478, "ctypes_max_argcount": 478, "23689": 478, "47167": 478, "47151": 478, "4833": 478, "27929": 478, "14265": 478, "39622": 478, "47101": 478, "ossl": 478, "47099": 478, "open_ftp": 478, "42885": 478, "23691": 478, "47067": 478, "42369": 478, "_sharedfil": 478, "38256": 478, "4gib": 478, "odditi": 478, "39394": 478, "47062": 478, "46382": 478, "ari": 478, "bovenberg": 478, "47057": 478, "fastcal": 478, "47039": 478, "2604": 478, "45150": 478, "34861": 478, "45997": 478, "aquir": 478, "43253": 478, "fdset": 478, "47004": 478, "46998": 478, "46995": 478, "46994": 478, "46981": 478, "46985": 478, "getauxv": 478, "at_minsigstksz": 478, "amx_til": 478, "sapphir": 478, "xeon": 478, "isa": 478, "46955": 478, "zabka": 478, "23325": 478, "46932": 478, "46933": 478, "464471": 478, "tvrtkovi": 478, "46644": 478, "typeform": 478, "46581": 478, "46557": 478, "41370": 478, "26120": 478, "46480": 478, "46421": 478, "22859": 478, "46170": 478, "40296": 478, "20392": 478, "46030": 478, "44439": 478, "45171": 478, "24959": 478, "44859": 478, "44493": 478, "sockaddr_un": 478, "33178": 478, "43352": 478, "45099": 478, "47126": 478, "676": 478, "47040": 478, "compatibl": 478, "46033": 478, "45790": 478, "42340": 478, "41233": 478, "yyyyyyyan": 478, "orest": 478, "47205": 478, "46126": 478, "47104": 478, "47037": 478, "4y": 478, "46587": 478, "47015": 478, "main_modul": 478, "side_modul": 478, "46023": 478, "wasm64": 478, "47032": 478, "47024": 478, "1n": 478, "46973": 478, "quay": 478, "tiran": 478, "cpython_autoconf": 478, "45774": 478, "47194": 478, "25032": 478, "47171": 478, "46566": 478, "47086": 478, "44549": 478, "3189": 478, "12900": 478, "46948": 478, "26488": 478, "46890": 478, "46850": 478, "_pyeval_calltrac": 478, "_pyeval_getcoroutineorigintrackingdepth": 478, "_pyeval_getasyncgenfirstit": 478, "_pyeval_getasyncgenfin": 478, "_pyeval_setasyncgenfirstit": 478, "_pyeval_setasyncgenfin": 478, "46987": 478, "_pysys_getobjectid": 478, "_pysys_setobjectid": 478, "46940": 478, "46927": 478, "46921": 478, "46903": 478, "11alpha": 478, "46891": 478, "test_float": 478, "46712": 478, "46430": 478, "45107": 478, "44337": 478, "46729": 478, "45885": 478, "46794": 478, "46823": 478, "load_fast__load_attr_instance_valu": 478, "46820": 478, "1not": 478, "46808": 478, "precall_funct": 478, "precall_method": 478, "46762": 478, "46730": 478, "46724": 478, "46732": 478, "46072": 478, "46707": 478, "46323": 478, "45923": 478, "46702": 478, "46675": 478, "va_end": 478, "_hashopenssl": 478, "46615": 478, "setobject": 478, "30496": 478, "25707": 478, "46877": 478, "46848": 478, "46736": 478, "44886": 478, "46827": 478, "46811": 478, "46252": 478, "46784": 478, "46786": 478, "wbr": 478, "39327": 478, "virtualbox": 478, "45390": 478, "46756": 478, "46737": 478, "46752": 478, "trio": 478, "nurseri": 478, "46333": 478, "46643": 478, "45863": 478, "unarchiv": 478, "46066": 478, "46676": 478, "_argtypes_": 478, "46672": 478, "46655": 478, "45948": 478, "discrep": 478, "46626": 478, "ip_bind_address_no_port": 478, "46521": 478, "46571": 478, "46400": 478, "46556": 478, "46522": 478, "46475": 478, "46246": 478, "deprecatedlist": 478, "46232": 478, "46195": 478, "31369": 478, "45898": 478, "ffi_type_": 478, "decad": 478, "44953": 478, "44289": 478, "44011": 478, "41086": 478, "methodwrapp": 478, "14156": 478, "42238": 478, "46913": 478, "test_faulthandl": 478, "test_sigfp": 478, "faulthandler_sigfp": 478, "46760": 478, "test_di": 478, "46708": 478, "46678": 478, "46623": 478, "test_pair": 478, "test_speech128": 478, "test_zlib": 478, "s390x": 478, "46860": 478, "__builtin_nan": 478, "kb": 478, "setr": 478, "gu": 478, "cound": 478, "46744": 478, "46567": 478, "46638": 478, "46630": 478, "46748": 478, "stdbool": 478, "46836": 478, "pycore_fram": 478, "pybuff": 478, "conflit": 478, "accesss": 478, "45773": 478, "46564": 478, "46458": 478, "46527": 478, "46528": 478, "precall_funt": 478, "46503": 478, "46431": 478, "46476": 478, "46481": 478, "46417": 478, "add_subclass": 478, "43683": 478, "46407": 478, "vivian": 478, "46409": 478, "46406": 478, "46383": 478, "module_fre": 478, "46361": 478, "46161": 478, "46028": 478, "46091": 478, "44024": 478, "46624": 478, "46591": 478, "clickabl": 478, "46565": 478, "46553": 478, "46544": 478, "uspac": 478, "46487": 478, "46539": 478, "46510": 478, "46491": 478, "46436": 478, "41403": 478, "46474": 478, "46470": 478, "_remove_dups_flatten": 478, "46469": 478, "41906": 478, "46422": 478, "46434": 478, "43869": 478, "46414": 478, "46316": 478, "29688": 478, "43012": 478, "_accessor": 478, "terrain": 478, "46258": 478, "46242": 478, "_member_names_": 478, "43118": 478, "26552": 478, "21987": 478, "46124": 478, "46103": 478, "46080": 478, "felix": 478, "fontein": 478, "46463": 478, "escape4chm": 478, "43478": 478, "46616": 478, "test_window": 478, "44359": 478, "test_ftplib": 478, "46600": 478, "test_gdb": 478, "test_pycfunct": 478, "46542": 478, "test_lib2to3": 478, "46576": 478, "test_peg_gener": 478, "test_json": 478, "infinite_recurs": 478, "13886": 478, "test_builtin": 478, "requires_fork": 478, "requires_subprocess": 478, "46602": 478, "conftest": 478, "38472": 478, "46513": 478, "ac_c_char_unsign": 478, "__char_unsigned__": 478, "46471": 478, "46443": 478, "46429": 478, "45925": 478, "43112": 478, "46362": 478, "com1": 478, "lpt1": 478, "45296": 478, "_py_getallocatedblock": 478, "_pyobject_debugmallocstat": 478, "46433": 478, "_pytype_getmodulebydef": 478, "14916": 478, "46070": 478, "46347": 478, "46339": 478, "46331": 478, "46314": 478, "11a4": 478, "46289": 478, "46297": 478, "bootup": 478, "derzsi": 478, "niel": 478, "46237": 478, "46263": 478, "use_frozen_modul": 478, "46006": 478, "_pyunicode_equaltoasciiid": 478, "update_slot": 478, "46208": 478, "46240": 478, "46009": 478, "46235": 478, "46221": 478, "46202": 478, "pop_except_and_rerais": 478, "46085": 478, "pylong_bas": 478, "46110": 478, "46107": 478, "44525": 478, "call_method_kw": 478, "call_no_kw": 478, "call_kw": 478, "46039": 478, "45635": 478, "_pyerr_display": 478, "46054": 478, "46042": 478, "46049": 478, "46048": 478, "37971": 478, "46031": 478, "45654": 478, "46025": 478, "46000": 478, "42918": 478, "45953": 478, "43413": 478, "46342": 478, "46307": 478, "46306": 478, "46244": 478, "46278": 478, "call_": 478, "46269": 478, "46266": 478, "46257": 478, "41011": 478, "46239": 478, "46238": 478, "46222": 478, "46176": 478, "43424": 478, "45321": 478, "46125": 478, "46118": 478, "37578": 478, "20369": 478, "46105": 478, "44893": 478, "22815": 478, "22047": 478, "26952": 478, "45615": 478, "16594": 478, "allow_reuse_port": 478, "27718": 478, "46032": 478, "27062": 478, "46018": 478, "46016": 478, "45755": 478, "45874": 478, "25066": 478, "45643": 478, "46196": 478, "46120": 478, "46109": 478, "19737": 478, "46296": 478, "_use_args_": 478, "_member_type_": 478, "46205": 478, "runtest_mp": 478, "jemalloc": 478, "46262": 478, "46150": 478, "fakenam": 478, "posixpathtest": 478, "test_expandus": 478, "46129": 478, "23819": 478, "46114": 478, "0xmnn00pp0l": 478, "44133": 478, "46315": 478, "have_featur": 478, "45723": 478, "multiarch": 478, "46106": 478, "1m": 478, "46088": 478, "asset": 478, "45949": 478, "freeze_modul": 478, "46217": 478, "40477": 478, "46236": 478, "46140": 478, "45855": 478, "46004": 478, "_pyerr_chainstackitem": 478, "45915": 478, "is_valid_fd": 478, "f_getfd": 478, "44530": 478, "42268": 478, "45727": 478, "45786": 478, "45614": 478, "45813": 478, "45811": 478, "45848": 478, "45709": 478, "45829": 478, "45826": 478, "45822": 478, "45820": 478, "45636": 478, "42540": 478, "45738": 478, "45753": 478, "45764": 478, "45609": 478, "45582": 478, "45450": 478, "27946": 478, "13236": 478, "37658": 478, "45876": 478, "44649": 478, "45803": 478, "45831": 478, "41735": 478, "45235": 478, "45754": 478, "11a2": 478, "sqlite_limit_length": 478, "45766": 478, "45765": 478, "45757": 478, "45644": 478, "wessel": 478, "45703": 478, "45535": 478, "45664": 478, "45663": 478, "45662": 478, "43137": 478, "gio": 478, "45514": 478, "45507": 478, "45359": 478, "44733": 478, "28806": 478, "43498": 478, "42158": 478, "notation3": 478, "trig": 478, "45840": 478, "45640": 478, "milchior": 478, "45788": 478, "45772": 478, "45392": 478, "45250": 478, "25381": 478, "43905": 478, "45695": 478, "19460": 478, "45835": 478, "test_queu": 478, "45783": 478, "45745": 478, "findleak": 478, "45701": 478, "test_functool": 478, "44035": 478, "45950": 478, "45881": 478, "sys_shutdown": 478, "ac_cv_func_shutdown": 478, "fork1": 478, "33393": 478, "45866": 478, "pygen": 478, "41498": 478, "sigset_t": 478, "yurchak": 478, "45886": 478, "45873": 478, "py_stdlib_mod": 478, "addext": 478, "save_env": 478, "restore_env": 478, "with_save_env": 478, "45573": 478, "45816": 478, "v143": 478, "45800": 478, "45798": 478, "45743": 478, "search_paths_first": 478, "xcode": 478, "stdc_header": 478, "ac_header_tim": 478, "45731": 478, "py_sqlite_enable_load_extens": 478, "ac_cache_check": 478, "45696": 478, "45561": 478, "smelli": 478, "45901": 478, "45616": 478, "45850": 478, "45732": 478, "45720": 478, "shlwapi": 478, "39026": 478, "45716": 478, "45688": 478, "_scproxi": 478, "45379": 478, "keyowrd": 478, "45530": 478, "45526": 478, "address_bit": 478, "30570": 478, "45521": 478, "45494": 478, "45445": 478, "45408": 478, "45385": 478, "descr_check": 478, "45367": 478, "binary_multiply_int": 478, "binary_multiply_float": 478, "21736": 478, "unfrozen": 478, "45020": 478, "orignam": 478, "45324": 478, "44050": 478, "call_function_builtin_o": 478, "call_function_builtin_fast": 478, "call_function_len": 478, "call_function_isinst": 478, "44511": 478, "43706": 478, "42064": 478, "45438": 478, "45574": 478, "print_escap": 478, "45581": 478, "45557": 478, "kreusada": 478, "42174": 478, "35673": 478, "_namespaceload": 478, "45515": 478, "45475": 478, "43787": 478, "45489": 478, "42222": 478, "45428": 478, "45467": 478, "45461": 478, "45239": 478, "45417": 478, "45249": 478, "45416": 478, "20028": 478, "44904": 478, "45406": 478, "getabsfil": 478, "45411": 478, "subtitl": 478, "srt": 478, "vtt": 478, "10716": 478, "serverhtmldoc": 478, "27580": 478, "45262": 478, "45386": 478, "45343": 478, "45328": 478, "45192": 478, "_infer_return_typ": 478, "kyungmin": 478, "45160": 478, "24444": 478, "40321": 478, "7538": 478, "jochem": 478, "schulenklopp": 478, "41374": 478, "35970": 478, "kuska": 478, "45726": 478, "45680": 478, "45618": 478, "olko": 478, "45655": 478, "45604": 478, "45516": 478, "45464": 478, "45449": 478, "20692": 478, "45678": 478, "45578": 478, "45668": 478, "45577": 478, "45566": 478, "test_frozen_pickl": 478, "test_dataclass": 478, "43592": 478, "39679": 478, "45410": 478, "45402": 478, "test_sundri": 478, "45403": 478, "test_si": 478, "test_stdlib_dir": 478, "45400": 478, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 478, "test_except": 478, "10572": 478, "test_sqlit": 478, "43158": 478, "_uuid": 478, "libuuid": 478, "45666": 478, "swprintf": 478, "45595": 478, "have_expat_config_h": 478, "use_pyexpat_capi": 478, "xml_poor_entropi": 478, "expat_config": 478, "45532": 478, "jeong": 478, "yunwon": 478, "45536": 478, "45221": 478, "45405": 478, "bohman": 478, "43652": 478, "45337": 478, "43851": 478, "sqlite_omit_autoinit": 478, "44828": 478, "culler": 478, "45495": 478, "29103": 478, "interpreteridobject": 478, "45395": 478, "44220": 478, "42278": 478, "44600": 478, "burkland": 478, "41180": 478, "44394": 478, "0340": 478, "43124": 478, "putcmd": 478, "44022": 478, "45061": 478, "24076": 478, "45167": 478, "45155": 478, "44219": 478, "44959": 478, "45121": 478, "44348": 478, "45123": 478, "1514420": 478, "41031": 478, "45083": 478, "34561": 478, "munro": 478, "powersort": 478, "45056": 478, "45012": 478, "fstatat": 478, "stani": 478, "skonieczni": 478, "45018": 478, "44963": 478, "anext_await": 478, "44962": 478, "44954": 478, "8p": 478, "1074": 478, "44947": 478, "44945": 478, "binary_add_adapt": 478, "binary_add_float": 478, "binary_add_int": 478, "binary_add_unicod": 478, "binary_add_unicode_inplace_fast": 478, "44929": 478, "44914": 478, "44698": 478, "44895": 478, "44900": 478, "44889": 478, "load_method_cach": 478, "load_method_modul": 478, "load_method_class": 478, "44890": 478, "44885": 478, "44878": 478, "44874": 478, "44872": 478, "33930": 478, "augusto": 478, "goulart": 478, "25782": 478, "44856": 478, "update_bas": 478, "44826": 478, "store_attr_slot": 478, "store_attr_split_key": 478, "store_attr_with_hint": 478, "44838": 478, "44821": 478, "44792": 478, "34013": 478, "44732": 478, "44725": 478, "_opcod": 478, "get_specialization_stat": 478, "44717": 478, "44653": 478, "44676": 478, "44633": 478, "44661": 478, "property_descr_set": 478, "44662": 478, "44655": 478, "44646": 478, "44636": 478, "44635": 478, "26280": 478, "binary_subscr_dict": 478, "44589": 478, "44606": 478, "42073": 478, "fastsearch": 478, "43895": 478, "ish": 478, "dynload_shlib": 478, "levarag": 478, "44562": 478, "44553": 478, "44523": 478, "44483": 478, "44486": 478, "44472": 478, "ltrace": 478, "44297": 478, "44456": 478, "44409": 478, "44396": 478, "44376": 478, "44313": 478, "44338": 478, "load_global_modul": 478, "load_global_builtin": 478, "44368": 478, "44349": 478, "load_attr_slot": 478, "load_attr_split_key": 478, "load_attr_with_hint": 478, "load_attr_modul": 478, "44335": 478, "43693": 478, "44317": 478, "44304": 478, "43667": 478, "44232": 478, "winner": 478, "44201": 478, "co_fastlocalkind": 478, "44184": 478, "44187": 478, "44180": 478, "44168": 478, "44156": 478, "44143": 478, "44032": 478, "datastack": 478, "44114": 478, "dictkeys_revers": 478, "dictitems_revers": 478, "broke": 478, "44110": 478, "branchless": 478, "43918": 478, "43879": 478, "17792": 478, "28146": 478, "11105": 478, "39091": 478, "noah": 478, "oxer": 478, "45371": 478, "unixccompil": 478, "45329": 478, "1596321": 478, "45274": 478, "45238": 478, "36674": 478, "45183": 478, "45234": 478, "45228": 478, "45225": 478, "genexpr": 478, "25169": 478, "20524": 478, "45168": 478, "35474": 478, "45166": 478, "20499": 478, "30856": 478, "45034": 478, "25894": 478, "45081": 478, "45075": 478, "format_fram": 478, "31299": 478, "41620": 478, "45021": 478, "43913": 478, "lesser": 478, "45030": 478, "45001": 478, "45010": 478, "__div__": 478, "39218": 478, "43613": 478, "37596": 478, "44955": 478, "39039": 478, "44935": 478, "44911": 478, "41322": 478, "44524": 478, "38956": 478, "44860": 478, "unicodencodeerror": 478, "44581": 478, "44849": 478, "44605": 478, "wherein": 478, "specialform": 478, "44839": 478, "44822": 478, "44801": 478, "44806": 478, "27275": 478, "44793": 478, "44784": 478, "44667": 478, "44771": 478, "44752": 478, "rcomplet": 478, "44747": 478, "44720": 478, "44704": 478, "44666": 478, "lzl": 478, "44690": 478, "binacii": 478, "42854": 478, "_sslsocket": 478, "44686": 478, "_import": 478, "44353": 478, "44682": 478, "44678": 478, "40897": 478, "44638": 478, "44648": 478, "44608": 478, "_flatten": 478, "44594": 478, "flight": 478, "42799": 478, "41928": 478, "44566": 478, "44558": 478, "41249": 478, "44554": 478, "34798": 478, "44539": 478, "44461": 478, "43625": 478, "44516": 478, "42892": 478, "44468": 478, "43977": 478, "44482": 478, "44404": 478, "41546": 478, "44458": 478, "buffer_block_s": 478, "lmza": 478, "44464": 478, "flake8": 478, "44446": 478, "44434": 478, "pthread_exit": 478, "libgcc_": 478, "42972": 478, "44422": 478, "37880": 478, "44389": 478, "27827": 478, "44395": 478, "34266": 478, "44362": 478, "44342": 478, "44356": 478, "44351": 478, "parse_makefil": 478, "44242": 478, "44246": 478, "43858": 478, "44260": 478, "44254": 478, "33693": 478, "44241": 478, "simplepath": 478, "44210": 478, "_meta": 478, "43643": 478, "27334": 478, "4928": 478, "44154": 478, "33433": 478, "44150": 478, "44142": 478, "44145": 478, "hmac_upd": 478, "44095": 478, "ds": 478, "congest": 478, "37788": 478, "44089": 478, "44081": 478, "44061": 478, "44059": 478, "serenityo": 478, "36515": 478, "44018": 478, "38352": 478, "44002": 478, "90s": 478, "43972": 478, "28528": 478, "checklin": 478, "43853": 478, "43666": 478, "wpar": 478, "fileset": 478, "bos": 478, "rte": 478, "mp64": 478, "odm": 478, "9988": 478, "43650": 478, "_unpack_zipfil": 478, "igor": 478, "bolshakov": 478, "43612": 478, "43392": 478, "_find_and_load": 478, "43318": 478, "43232": 478, "30077": 478, "sowt": 478, "42971": 478, "43086": 478, "scrict_mod": 478, "43024": 478, "42862": 478, "41818": 478, "soumendra": 478, "ganguli": 478, "40497": 478, "37449": 478, "40956": 478, "41730": 478, "20684": 478, "_signature_get_bound_param": 478, "41402": 478, "32695": 478, "24391": 478, "40563": 478, "henri": 478, "aud": 478, "oud": 478, "34990": 478, "y2k38": 478, "39549": 478, "37022": 478, "38840": 478, "test___all__": 478, "39359": 478, "38741": 478, "38415": 478, "30256": 478, "manager_own": 478, "autoproxi": 478, "27513": 478, "26228": 478, "33349": 478, "29298": 478, "45216": 478, "45024": 478, "44957": 478, "16580": 478, "44903": 478, "othergui": 478, "33479": 478, "36700": 478, "44740": 478, "44693": 478, "35183": 478, "30511": 478, "44561": 478, "44651": 478, "42958": 478, "44631": 478, "_environ": 478, "44613": 478, "44544": 478, "38062": 478, "40620": 478, "controlflow": 478, "43066": 478, "39452": 478, "broaden": 478, "13814": 478, "27752": 478, "44453": 478, "44392": 478, "44322": 478, "44195": 478, "traversableread": 478, "41963": 478, "44072": 478, "43558": 478, "44025": 478, "41706": 478, "41621": 478, "41576": 478, "21760": 478, "39498": 478, "40173": 478, "45280": 478, "45269": 478, "c_make_encod": 478, "45128": 478, "test_multiprocessing_fork": 478, "45209": 478, "_testsharedmemori": 478, "test_shared_memory_cleaned_after_process_termin": 478, "45185": 478, "testenumer": 478, "45195": 478, "test_readlin": 478, "test_nonascii": 478, "45156": 478, "45125": 478, "sharablelist": 478, "test_sysconfig": 478, "test_user_similar": 478, "45052": 478, "withprocessestestsharedmemori": 478, "test_shared_memory_bas": 478, "sms": 478, "sms2": 478, "unskip": 478, "45042": 478, "hashlib_help": 478, "requires_hashdigest": 478, "25130": 478, "45011": 478, "44949": 478, "44891": 478, "44852": 478, "wholesal": 478, "40928": 478, "spew": 478, "44734": 478, "44708": 478, "42095": 478, "interop": 478, "plutil": 478, "44647": 478, "44515": 478, "44287": 478, "test_popen": 478, "test_windows_util": 478, "militari": 478, "battl": 478, "44451": 478, "test_metadata_api": 478, "apitest": 478, "test_entry_points_by_index": 478, "44363": 478, "44364": 478, "43921": 478, "test_wrong_cert_tls13": 478, "test_pha_required_nocert": 478, "44131": 478, "test_frozenmain": 478, "31904": 478, "test_file_not_exist": 478, "42083": 478, "35753": 478, "unwrapp": 478, "dictproxi": 478, "45220": 478, "defaultwindowssdkvers": 478, "commandlin": 478, "45188": 478, "45163": 478, "haiku": 478, "45067": 478, "extended_color_cont": 478, "island": 478, "t20170401": 478, "20170401": 478, "45019": 478, "44535": 478, "43298": 478, "44381": 478, "enablecontrolflowguard": 478, "41282": 478, "45375": 478, "unnormalis": 478, "45022": 478, "45007": 478, "44848": 478, "44572": 478, "44582": 478, "41299": 478, "jitter": 478, "42686": 478, "40263": 478, "issue26903": 478, "34602": 478, "quadrupl": 478, "44689": 478, "43109": 478, "34932": 478, "shane": 478, "harvey": 478, "45193": 478, "40128": 478, "update_idletask": 478, "41611": 478, "autocompletewindow": 478, "winconfig_ev": 478, "44026": 478, "44786": 478, "44967": 478, "44978": 478, "43425": 478, "test2to3": 478, "44074": 478, "20291": 478, "44687": 478, "45116": 478, "45094": 478, "44751": 478, "42747": 478, "py_tpflags_have_am_send": 478, "44441": 478, "_pytrash_deposit_object": 478, "_pytrash_destroy_chain": 478, "_pytrash_thread_deposit_object": 478, "_pytrash_thread_destroy_chain": 478, "_tstate": 478, "trash_delete_nest": 478, "40939": 478, "pyparser_": 478, "44378": 478, "44113": 478, "44094": 478, "pyerr_setfromerrnowithunicodefilenam": 478, "pyerr_setfromwindowserrwithunicodefilenam": 478, "pyerr_setexcfromwindowserrwithunicodefilenam": 478, "pyunicodeencodeerror_cr": 478, "pyunicodetranslateerror_cr": 478, "43434": 478, "43882": 478, "43472": 478, "43362": 478, "43756": 478, "43075": 478, "42800": 478, "37363": 478, "43892": 478, "43933": 478, "kweyword": 478, "43963": 478, "_signal": 478, "42739": 478, "pylinetable_initaddressrang": 478, "43754": 478, "consistut": 478, "38605": 478, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 478, "pile": 478, "43859": 478, "41323": 478, "43846": 478, "43798": 478, "43751": 478, "ait": 478, "42128": 478, "43105": 478, "42609": 478, "44015": 478, "25478": 478, "43733": 478, "43979": 478, "zwerschk": 478, "43993": 478, "43957": 478, "42904": 478, "43945": 478, "43937": 478, "43930": 478, "43907": 478, "43926": 478, "43607": 478, "43284": 478, "_syscmd_ver": 478, "43867": 478, "serve_cli": 478, "40443": 478, "43820": 478, "43680": 478, "41515": 478, "43776": 478, "42248": 478, "_missing__": 478, "43744": 478, "43772": 478, "43764": 478, "openssl_api_compat": 478, "make_ssl_data": 478, "25264": 478, "43780": 478, "43731": 478, "38659": 478, "simple_enum": 478, "test_simple_enum": 478, "43752": 478, "24723": 478, "43655": 478, "43723": 478, "2135": 478, "43534": 478, "43522": 478, "hostflag": 478, "ssl_ctx": 478, "8978": 478, "43296": 478, "sqlite3_value_blob": 478, "sqlite_nomem": 478, "43312": 478, "43265": 478, "43176": 478, "39529": 478, "18369": 478, "privatekey": 478, "36470": 478, "x509_v_flag_partial_chain": 478, "35114": 478, "39899": 478, "36076": 478, "33731": 478, "32745": 478, "43987": 478, "43959": 478, "43938": 478, "43778": 478, "glossary_search": 478, "43739": 478, "43961": 478, "test_namer_rotator_inherit": 478, "43842": 478, "43843": 478, "env_chang": 478, "ccach": 478, "tlsv1_alert_internal_error": 478, "43567": 478, "35306": 478, "43538": 478, "38822": 478, "26227": 478, "40432": 478, "43745": 478, "mislabel": 478, "1i": 478, "43492": 478, "30555": 478, "windowsconsoleio": 478, "42119": 478, "sdks": 478, "iossupport": 478, "43568": 478, "44009": 478, "rosetta": 478, "42235": 478, "sidebar": 478, "43981": 478, "test_sidebar": 478, "test_squeez": 478, "43774": 478, "43962": 478, "_pyinterpreterstate_idincref": 478, "_pyinterpreterstate_idinitref": 478, "id_refcount": 478, "get_curr": 478, "interpreterid": 478, "28254": 478, "42988": 478, "schw": 478, "rer": 478, "43285": 478, "trust_server_pasv_ipv4_address": 478, "27129": 478, "43660": 478, "43555": 478, "43517": 478, "misdetect": 478, "43497": 478, "39316": 478, "35883": 478, "43410": 478, "43406": 478, "43390": 478, "sa_onstack": 478, "friendlier": 478, "golang": 478, "cgo": 478, "37448": 478, "address_in_rang": 478, "ultra": 478, "unsanitari": 478, "_py_no_sanitize_address": 478, "_py_no_sanitize_thread": 478, "_py_no_sanitize_memori": 478, "dwith_pymalloc_radix_tre": 478, "29988": 478, "43433": 478, "35930": 478, "41369": 478, "43422": 478, "41324": 478, "43577": 478, "43542": 478, "heic": 478, "heif": 478, "43510": 478, "43521": 478, "41361": 478, "43423": 478, "27820": 478, "_always_": 478, "43445": 478, "43245": 478, "29982": 478, "43428": 478, "43332": 478, "43420": 478, "43399": 478, "43369": 478, "sqlite3_column_text": 478, "sqlite3_column_blob": 478, "43368": 478, "24562": 478, "mariusz": 478, "felisiak": 478, "42129": 478, "43295": 478, "43125": 478, "base64mim": 478, "43084": 478, "42994": 478, "opus": 478, "3gpp": 478, "3gpp2": 478, "42782": 478, "membernam": 478, "26053": 478, "40701": 478, "39342": 478, "x509_v_flag_allow_proxy_cert": 478, "man1": 478, "man7": 478, "jab": 478, "lordmauv": 478, "justin39": 478, "43199": 478, "43407": 478, "43354": 478, "41933": 478, "37945": 478, "test_getsetlocale_issue1813": 478, "test_local": 478, "41561": 478, "43179": 478, "alignof_x": 478, "sizeof_x": 478, "43631": 478, "43617": 478, "43372": 478, "_freeze_importlib": 478, "42246": 478, "877df851": 478, "test_frozent": 478, "43440": 478, "42225": 478, "43541": 478, "poison": 478, "43321": 478, "43121": 478, "42819": 478, "x1b": 478, "2004h": 478, "42808": 478, "42217": 478, "co_linet": 478, "40692": 478, "43316": 478, "43317": 478, "43146": 478, "43260": 478, "43258": 478, "needless": 478, "43251": 478, "sqlite3_column_nam": 478, "23838": 478, "43172": 478, "irreconcil": 478, "43163": 478, "43162": 478, "43102": 478, "42960": 478, "42151": 478, "_elementre": 478, "29753": 478, "shrank": 478, "27646": 478, "43288": 478, "43174": 478, "13501": 478, "39448": 478, "43155": 478, "41837": 478, "43283": 478, "43278": 478, "43270": 478, "_pyerr_occur": 478, "43239": 478, "fvisibl": 478, "43181": 478, "42938": 478, "pyeval_": 478, "_pyeval_evalcodewithnam": 478, "38631": 478, "42986": 478, "42924": 478, "42882": 478, "_pyunicode_fromid": 478, "_py_identifi": 478, "unicode_id": 478, "next_index": 478, "42827": 478, "42823": 478, "41994": 478, "27772": 478, "43108": 478, "43077": 478, "43014": 478, "42323": 478, "42944": 478, "42934": 478, "42931": 478, "38250": 478, "42877": 478, "42923": 478, "42848": 478, "42901": 478, "_proto_memb": 478, "42780": 478, "42866": 478, "getcodec": 478, "42846": 478, "_codecs_cn": 478, "_codecs_hk": 478, "_codecs_iso2022": 478, "_codecs_jp": 478, "_codecs_kr": 478, "_codecs_tw": 478, "42851": 478, "42834": 478, "41748": 478, "dubost": 478, "42384": 478, "42383": 478, "42005": 478, "41604": 478, "user_ptr": 478, "set_panel_userptr": 478, "41149": 478, "stratford": 478, "33289": 478, "40304": 478, "bori": 478, "verkhovskiy": 478, "42811": 478, "yair": 478, "frid": 478, "40823": 478, "checktracecallbackcont": 478, "43031": 478, "36143": 478, "42874": 478, "add_cross_compiling_path": 478, "42584": 478, "42504": 478, "33065": 478, "23544": 478, "32631": 478, "42979": 478, "43030": 478, "42814": 478, "genericaliasobject": 478, "42806": 478, "40631": 478, "27794": 478, "42745": 478, "32381": 478, "30858": 478, "42615": 478, "resulttyp": 478, "40137": 478, "42008": 478, "40521": 478, "42257": 478, "42772": 478, "42759": 478, "42756": 478, "23328": 478, "envar": 478, "42740": 478, "42655": 478, "42727": 478, "38308": 478, "42721": 478, "nodefaultroot": 478, "tempor": 478, "25246": 478, "35728": 478, "15303": 478, "42681": 478, "42685": 478, "37961": 478, "42630": 478, "_run_exitfunc": 478, "42644": 478, "loge": 478, "36541": 478, "pgen2": 478, "42382": 478, "41877": 478, "autospect": 478, "auto_spec": 478, "set_spec": 478, "39717": 478, "42385": 478, "thread_stack_s": 478, "34750": 478, "_enumdict": 478, "42517": 478, "42678": 478, "28964": 478, "42470": 478, "42388": 478, "34463": 478, "harmon": 478, "42163": 478, "42090": 478, "42059": 478, "41960": 478, "41907": 478, "41891": 478, "24792": 478, "41462": 478, "40219": 478, "labeledscal": 478, "37193": 478, "39068": 478, "brandon": 478, "stansburi": 478, "17140": 478, "34398": 478, "42794": 478, "test_nntplib": 478, "aioe": 478, "42641": 478, "test_select": 478, "_test_all_chown_common": 478, "42199": 478, "41443": 478, "test_posix": 478, "41439": 478, "test_uuid": 478, "42692": 478, "__builtin_avail": 478, "42604": 478, "310d": 478, "42598": 478, "29076": 478, "42361": 478, "rc2": 478, "42726": 478, "42613": 478, "prope": 478, "42591": 478, "_py_fopen": 478, "_py_wfopen": 478, "_py_fopen_obj": 478, "42111": 478, "40052": 478, "40791": 478, "42576": 478, "42536": 478, "42500": 478, "42435": 478, "bytarray": 478, "41686": 478, "_pyos_sigintev": 478, "42381": 478, "42374": 478, "42349": 478, "42296": 478, "42332": 478, "42282": 478, "42266": 478, "42233": 478, "5054": 478, "run_cgi": 478, "http_accept": 478, "getallmatchinghead": 478, "42562": 478, "17735": 478, "findsourc": 478, "co_lineno": 478, "42116": 478, "42532": 478, "spec_arg": 478, "test_master_read": 478, "42487": 478, "42482": 478, "test_openpti": 478, "test_bas": 478, "15450": 478, "42406": 478, "whichmodul": 478, "42403": 478, "42375": 478, "37205": 478, "42328": 478, "42318": 478, "42350": 478, "42014": 478, "42237": 478, "illumo": 478, "42249": 478, "42236": 478, "41754": 478, "42183": 478, "42140": 478, "39825": 478, "platform_tag": 478, "cp38": 478, "41889": 478, "41861": 478, "40624": 478, "28850": 478, "_safe_repr": 478, "34215": 478, "12800": 478, "40968": 478, "40816": 478, "40550": 478, "39411": 478, "tentat": 478, "42153": 478, "41028": 478, "switcher": 478, "docsbuild": 478, "41473": 478, "bugzilla": 478, "show_bug": 478, "1866884": 478, "42553": 478, "test_call_lat": 478, "test_netrc": 478, "test_getaddrinfo_ipv6_scopeid_symbol": 478, "test_getnameinfo_ipv6_scopeid_symbol": 478, "test_test": 478, "test_mailcap": 478, "test_pip": 478, "40754": 478, "test_min_max_version_mismatch": 478, "libnet": 478, "detect_socket": 478, "42398": 478, "moveov": 478, "41617": 478, "pycore_bitutil": 478, "__builtin_bswap16": 478, "38823": 478, "ctypes_unicod": 478, "42087": 478, "40680": 478, "40998": 478, "42120": 478, "_copysign": 478, "38506": 478, "41116": 478, "unixxcompil": 478, "find_library_fil": 478, "42232": 478, "38443": 478, "42508": 478, "42426": 478, "searchengin": 478, "42415": 478, "42212": 478, "36310": 478, "_posixshmem": 478, "_queue": 478, "_pytrash_cond": 478, "42171": 478, "42085": 478, "42103": 478, "42051": 478, "42218": 478, "42214": 478, "42206": 478, "41796": 478, "42143": 478, "yonatan": 478, "41659": 478, "42150": 478, "42123": 478, "42030": 478, "41984": 478, "41993": 478, "41979": 478, "41902": 478, "41894": 478, "41435": 478, "35455": 478, "gethrvtim": 478, "kulik": 478, "26789": 478, "42146": 478, "uid_t": 478, "gid_t": 478, "41490": 478, "certifi": 478, "41052": 478, "42089": 478, "packagenotfounderror": 478, "41491": 478, "42065": 478, "charmap_decod": 478, "41966": 478, "dean": 478, "inwood": 478, "19270": 478, "28660": 478, "35823": 478, "42043": 478, "42021": 478, "39101": 478, "41976": 478, "triy": 478, "41943": 478, "41905": 478, "23706": 478, "41876": 478, "41831": 478, "41747": 478, "30681": 478, "toth": 478, "41586": 478, "16396": 478, "40592": 478, "40492": 478, "27321": 478, "38976": 478, "42061": 478, "41910": 478, "42010": 478, "41805": 478, "39693": 478, "39416": 478, "41739": 478, "test_race_between_set_target_and_flush": 478, "41970": 478, "41944": 478, "41306": 478, "scaletest": 478, "38439": 478, "38252": 478, "39107": 478, "41557": 478, "38324": 478, "41471": 478, "33987": 478, "40511": 478, "clover": 478, "42015": 478, "40423": 478, "41845": 478, "40422": 478, "_py_closerang": 478, "41986": 478, "41304": 478, "python3x": 478, "29778": 478, "15801": 478, "41162": 478, "15523": 478, "41004": 478, "39603": 478, "41909": 478, "_bisect": 478, "39934": 478, "41780": 478, "41690": 478, "_curses_panel": 478, "41681": 478, "41675": 478, "41670": 478, "41654": 478, "41631": 478, "_oper": 478, "1653741": 478, "41533": 478, "va_build_stack": 478, "do_mkstack": 478, "small_stack": 478, "41531": 478, "41525": 478, "_sha1": 478, "_md5": 478, "41431": 478, "41340": 478, "strdup": 478, "38156": 478, "pyos_stdioreadlin": 478, "41342": 478, "41295": 478, "41247": 478, "set_running_loop": 478, "41252": 478, "_servername_callback": 478, "41215": 478, "xlc": 478, "41218": 478, "41175": 478, "bytearrayobject": 478, "41094": 478, "39960": 478, "hackcheck": 478, "sneak": 478, "41084": 478, "41076": 478, "41056": 478, "41061": 478, "hashtabl": 478, "pypegen": 478, "pypars": 478, "35975": 478, "40636": 478, "40985": 478, "40958": 478, "40957": 478, "40950": 478, "40947": 478, "40847": 478, "threw": 478, "40889": 478, "40904": 478, "40903": 478, "40880": 478, "40883": 478, "40870": 478, "40854": 478, "40826": 478, "pyos_readlin": 478, "19468": 478, "nder": 478, "40780": 478, "38964": 478, "40750": 478, "40696": 478, "40679": 478, "29590": 478, "4022": 478, "_lzma": 478, "19569": 478, "_py_comp_diag_push": 478, "_py_comp_diag_ignore_depr_decl": 478, "_py_comp_diag_pop": 478, "26680": 478, "41900": 478, "41887": 478, "41773": 478, "41840": 478, "40564": 478, "40670": 478, "misindent": 478, "41833": 478, "41817": 478, "eventtyp": 478, "41815": 478, "mccormick": 478, "41517": 478, "39587": 478, "41789": 478, "32218": 478, "39651": 478, "mashal": 478, "_string": 478, "41732": 478, "41720": 478, "41696": 478, "41687": 478, "41662": 478, "39010": 478, "41638": 478, "41513": 478, "41609": 478, "39994": 478, "40782": 478, "41520": 478, "41528": 478, "41503": 478, "41497": 478, "41467": 478, "41425": 478, "41421": 478, "41316": 478, "41384": 478, "41317": 478, "41364": 478, "35328": 478, "virtual_env_prompt": 478, "41341": 478, "41344": 478, "41333": 478, "41288": 478, "newobj_ex": 478, "39017": 478, "20907": 478, "41273": 478, "_proactorreadpipetransport": 478, "41235": 478, "41207": 478, "distutilsexecerror": 478, "29727": 478, "39168": 478, "41194": 478, "41195": 478, "41193": 478, "41182": 478, "41161": 478, "40874": 478, "41138": 478, "31082": 478, "31938": 478, "41068": 478, "41058": 478, "find_funct": 478, "41048": 478, "41043": 478, "41025": 478, "41002": 478, "merri": 478, "40448": 478, "krzysztof": 478, "konopko": 478, "40924": 478, "devis": 478, "40955": 478, "40855": 478, "33689": 478, "40884": 478, "asaf": 478, "40876": 478, "40807": 478, "_maybe_compil": 478, "32604": 478, "39314": 478, "40834": 478, "with_xxsubinterpret": 478, "channel_send": 478, "40755": 478, "26407": 478, "39384": 478, "40777": 478, "pydatetime_isocalendardatetyp": 478, "38488": 478, "40767": 478, "wayland": 478, "wayland_display": 478, "attali": 478, "40795": 478, "16995": 478, "30008": 478, "30064": 478, "40759": 478, "40756": 478, "37129": 478, "40737": 478, "40726": 478, "40695": 478, "9216": 478, "evp": 478, "test_hashlib": 478, "test_smtplib": 478, "40614": 478, "40626": 478, "h5": 478, "hdf5": 478, "hdf": 478, "schwab": 478, "25920": 478, "201311": 478, "40671": 478, "40611": 478, "39881": 478, "13097": 478, "23082": 478, "40105": 478, "mazur": 478, "40084": 478, "31122": 478, "39728": 478, "39244": 478, "39040": 478, "35714": 478, "26543": 478, "12178": 478, "itay": 478, "elbirt": 478, "36290": 478, "33944": 478, "35078": 478, "29620": 478, "runtimeexcept": 478, "kernc": 478, "34226": 478, "content_length": 478, "duran": 478, "33660": 478, "28557": 478, "rawio": 478, "41774": 478, "35293": 478, "removedinsphinx40warn": 478, "37149": 478, "shipman": 478, "nmt": 478, "41726": 478, "41624": 478, "40204": 478, "c_allow_pre_v3": 478, "c_warn_on_allowed_pre_v3": 478, "41045": 478, "41314": 478, "40979": 478, "40552": 478, "39883": 478, "bsd0": 478, "37703": 478, "41939": 478, "test_sit": 478, "test_license_exists_at_url": 478, "41731": 478, "test_cmd_line_script": 478, "41602": 478, "41521": 478, "41477": 478, "test_genericalia": 478, "41085": 478, "41069": 478, "38377": 478, "41009": 478, "require_": 478, "_version": 478, "41003": 478, "test_copyreg": 478, "pickletest": 478, "40964": 478, "cmu": 478, "40927": 478, "test_binhex": 478, "38169": 478, "34401": 478, "38249": 478, "pin": 478, "40684": 478, "40683": 478, "41744": 478, "41627": 478, "41526": 478, "41492": 478, "uac": 478, "40948": 478, "41412": 478, "ucrt": 478, "40741": 478, "41142": 478, "41074": 478, "41039": 478, "40164": 478, "39631": 478, "40677": 478, "37556": 478, "39580": 478, "rick": 478, "heil": 478, "41005": 478, "41775": 478, "35764": 478, "40181": 478, "41468": 478, "41373": 478, "41300": 478, "41152": 478, "41144": 478, "39885": 478, "40723": 478, "test_idl": 478, "recursion_crit": 478, "41689": 478, "41524": 478, "40989": 478, "pyerror": 478, "40910": 478, "40724": 478, "_pyeval_evalcod": 478, "40703": 478, "py_tp_getset": 478, "39583": 478, "40501": 478, "rpcrt4": 478, "40663": 478, "40596": 478, "40593": 478, "40585": 478, "40566": 478, "40502": 478, "n_col_offset": 478, "40527": 478, "40523": 478, "40246": 478, "d00": 478, "fca": 478, "40417": 478, "rouhani": 478, "40408": 478, "29587": 478, "40328": 478, "40228": 478, "38880": 478, "40662": 478, "40665": 478, "40536": 478, "40637": 478, "blake1": 478, "alpha2": 478, "40607": 478, "skurikhin": 478, "40612": 478, "40597": 478, "40571": 478, "40503": 478, "40397": 478, "40549": 478, "31033": 478, "40541": 478, "40515": 478, "40504": 478, "40559": 478, "40480": 478, "futil": 478, "40457": 478, "40355": 478, "curti": 478, "40459": 478, "39435": 478, "39305": 478, "_nntpbase": 478, "32494": 478, "gdbm_count": 478, "40453": 478, "40394": 478, "39995": 478, "_threadwakeup": 478, "39966": 478, "25597": 478, "40389": 478, "40273": 478, "39075": 478, "40025": 478, "onstott": 478, "39058": 478, "40561": 478, "40499": 478, "39705": 478, "40055": 478, "40436": 478, "pythoninfo": 478, "40653": 478, "_dirnamew": 478, "have_symlink": 478, "40514": 478, "40650": 478, "winsock2": 478, "40458": 478, "39148": 478, "35569": 478, "40431": 478, "40163": 478, "pycfunction_checkexact": 478, "pycmethod_checkexact": 478, "pycmethod_check": 478, "40545": 478, "_pyerr_gettopmostexcept": 478, "40412": 478, "nullifi": 478, "inittab_copi": 478, "szorc": 478, "40121": 478, "39073": 478, "39503": 478, "8492": 478, "schwager": 478, "40313": 478, "40267": 478, "39522": 478, "40082": 478, "pyscannerobject": 478, "40141": 478, "40067": 478, "henriqu": 478, "silva": 478, "20526": 478, "40020": 478, "parsetok": 478, "codepath": 478, "32894": 478, "40398": 478, "40396": 478, "_sc_open_max": 478, "fdescf": 478, "emast": 478, "cem": 478, "kevan": 478, "koob": 478, "242274": 478, "40138": 478, "39942": 478, "40275": 478, "40330": 478, "40148": 478, "40325": 478, "40287": 478, "40290": 478, "40282": 478, "40277": 478, "40270": 478, "json_object": 478, "29255": 478, "40260": 478, "40234": 478, "40091": 478, "_at_fork_reinit": 478, "40149": 478, "_abc_data": 478, "40196": 478, "40190": 478, "_sc_aix_realmem": 478, "36517": 478, "40126": 478, "40108": 478, "incorr": 478, "40089": 478, "_after_fork": 478, "_mainthread": 478, "_main_thread": 478, "_dummythread": 478, "_reset_internal_lock": 478, "_register_atexit": 478, "40050": 478, "40014": 478, "ngroup": 478, "40017": 478, "40016": 478, "39953": 478, "38891": 478, "39682": 478, "38410": 478, "35967": 478, "35113": 478, "karthikeyan": 478, "singaravelan": 478, "31758": 478, "27635": 478, "39879": 478, "sami": 478, "lahfa": 478, "38387": 478, "13743": 478, "test_c_locale_coercion": 478, "40162": 478, "40146": 478, "azur": 478, "40003": 478, "bisect_cmd": 478, "verbose2": 478, "39380": 478, "39793": 478, "1812": 478, "doni": 478, "38360": 478, "40158": 478, "38527": 478, "38329": 478, "icn": 478, "38689": 478, "40385": 478, "checkpyc": 478, "40179": 478, "38576": 478, "18348": 478, "_heapq": 478, "tracing_poss": 478, "_statist": 478, "39968": 478, "get_module_st": 478, "39965": 478, "38373": 478, "19466": 478, "38894": 478, "wozniski": 478, "39871": 478, "39776": 478, "39778": 478, "38091": 478, "39087": 478, "39520": 478, "39220": 478, "22490": 478, "39830": 478, "39999": 478, "39991": 478, "39656": 478, "39360": 478, "experienc": 478, "35370": 478, "39936": 478, "aix_platform": 478, "39652": 478, "39915": 478, "38662": 478, "38075": 478, "39916": 478, "39850": 478, "36287": 478, "39889": 478, "39828": 478, "13487": 478, "39674": 478, "28577": 478, "39826": 478, "getconnect": 478, "39763": 478, "39794": 478, "39517": 478, "39678": 478, "queue_manag": 478, "39764": 478, "pyasyncgenobject": 478, "39769": 478, "38691": 478, "39719": 478, "39667": 478, "39609": 478, "39548": 478, "qop": 478, "39495": 478, "38971": 478, "38641": 478, "vlad": 478, "emelianov": 478, "37534": 478, "prolog": 478, "39868": 478, "13790": 478, "17422": 478, "39530": 478, "39718": 478, "39677": 478, "40019": 478, "27807": 478, "test_startup_import": 478, "26067": 478, "test_chown": 478, "39855": 478, "test_subprocess": 478, "test_us": 478, "39761": 478, "dflag": 478, "39930": 478, "vcruntime140": 478, "39847": 478, "hibern": 478, "38597": 478, "38380": 478, "39789": 478, "34803": 478, "27115": 478, "39852": 478, "39781": 478, "36184": 478, "take_gil": 478, "pthread_cond_timedwait": 478, "38080": 478, "fix_urllib": 478, "roberto": 478, "meza": 478, "cabrera": 478, "_pyarg_nokwnam": 478, "_pytrash_begin": 478, "_pytrash_end": 478, "39884": 478, "38643": 478, "39824": 478, "38913": 478, "whwn": 478, "39184": 478, "39401": 478, "39382": 478, "39619": 478, "39606": 478, "39386": 478, "39579": 478, "ast_for_dotted_nam": 478, "39510": 478, "39502": 478, "1902": 478, "39492": 478, "39453": 478, "39320": 478, "build_map_unpack": 478, "39219": 478, "36051": 478, "38960": 478, "30566": 478, "39649": 478, "39681": 478, "35950": 478, "39104": 478, "processpoolexcutor": 478, "39627": 478, "39474": 478, "21016": 478, "39590": 478, "39595": 478, "39567": 478, "39559": 478, "38149": 478, "39546": 478, "39450": 478, "stripe": 478, "39493": 478, "39491": 478, "39485": 478, "38932": 478, "vegard": 478, "stikbakk": 478, "39082": 478, "39432": 478, "18819": 478, "devmajor": 478, "devminor": 478, "39274": 478, "35727": 478, "32173": 478, "39572": 478, "39654": 478, "39153": 478, "39392": 478, "impress": 478, "9056": 478, "38325": 478, "test_winconsoleio": 478, "test_add_file_after_2107": 478, "39553": 478, "sxs": 478, "39439": 478, "39393": 478, "unresolv": 478, "38883": 478, "39185": 478, "39663": 478, "find_good_parse_start": 478, "39600": 478, "30780": 478, "configdialog": 478, "39388": 478, "38792": 478, "bytes_method": 478, "pycore_bytes_method": 478, "pydoc_strvar_shar": 478, "pycore_dtoa": 478, "39500": 478, "39511": 478, "38076": 478, "39245": 478, "pyobject_fastcalldict": 478, "39427": 478, "39421": 478, "build_list_unpack": 478, "build_tuple_unpack": 478, "build_set_unpack": 478, "39048": 478, "39235": 478, "39209": 478, "39216": 478, "39215": 478, "39200": 478, "39166": 478, "39114": 478, "38588": 478, "38610": 478, "32021": 478, "brot": 478, "39430": 478, "39390": 478, "39406": 478, "39396": 478, "29435": 478, "woodruff": 478, "39389": 478, "39313": 478, "exec_funct": 478, "refactoringtool": 478, "39297": 478, "38901": 478, "39242": 478, "35292": 478, "38907": 478, "39152": 478, "giovanni": 478, "lombardo": 478, "39198": 478, "stopit": 478, "39191": 478, "38871": 478, "39142": 478, "convertingtupl": 478, "39158": 478, "39129": 478, "39057": 478, "proxy_bypass_environ": 478, "39056": 478, "39055": 478, "21600": 478, "39019": 478, "38914": 478, "juergen": 478, "gmach": 478, "38878": 478, "35182": 478, "andriy": 478, "maletski": 478, "38630": 478, "38536": 478, "eur": 478, "38473": 478, "38361": 478, "38293": 478, "37958": 478, "get_profile_dict": 478, "28367": 478, "b500000": 478, "b576000": 478, "b921600": 478, "b1000000": 478, "b1152000": 478, "b1500000": 478, "b2000000": 478, "b2500000": 478, "b3000000": 478, "b3500000": 478, "b4000000": 478, "andrey": 478, "smirnov": 478, "39381": 478, "38918": 478, "3530": 478, "39160": 478, "39144": 478, "ctag": 478, "etag": 478, "39050": 478, "34118": 478, "etcetera": 478, "32989": 478, "newline_and_indent_ev": 478, "39164": 478, "_pyerr_getexcinfo": 478, "38945": 478, "38804": 478, "39028": 478, "39080": 478, "39031": 478, "39008": 478, "38673": 478, "38922": 478, "38920": 478, "38892": 478, "38852": 478, "38858": 478, "nsmallnegint": 478, "nsmallposint": 478, "36854": 478, "38328": 478, "38707": 478, "38629": 478, "27145": 478, "hongweipeng": 478, "38021": 478, "pep425": 478, "35409": 478, "33387": 478, "with_cleanup_finish": 478, "39033": 478, "39022": 478, "39006": 478, "38708": 478, "38698": 478, "invalidmessageid": 478, "38994": 478, "38979": 478, "38978": 478, "38986": 478, "taskwakeupmethwrapp": 478, "38982": 478, "38529": 478, "27413": 478, "38634": 478, "33684": 478, "parse_message_id": 478, "38927": 478, "26730": 478, "38881": 478, "38876": 478, "binget": 478, "long_binget": 478, "38688": 478, "kinoshita": 478, "38863": 478, "is_cgi": 478, "37838": 478, "38859": 478, "38857": 478, "38834": 478, "38821": 478, "federico": 478, "bond": 478, "38811": 478, "toke": 478, "iland": 478, "rgensen": 478, "38686": 478, "38348": 478, "37523": 478, "38045": 478, "_decompos": 478, "36820": 478, "36406": 478, "34776": 478, "20928": 478, "29636": 478, "38928": 478, "38899": 478, "fishshel": 478, "cmds": 478, "22377": 478, "38546": 478, "test_ressources_gced_in_work": 478, "38614": 478, "38547": 478, "test_pti": 478, "38992": 478, "38991": 478, "strip_python_stderr": 478, "38965": 478, "_stack_overflow": 478, "38875": 478, "38841": 478, "test_create_datagram_endpoint_existing_sock_unix": 478, "test_pidfd_open": 478, "38839": 478, "38669": 478, "37957": 478, "36500": 478, "39007": 478, "37931": 478, "beno": 478, "38943": 478, "38862": 478, "38636": 478, "38722": 478, "killen": 478, "38622": 478, "38418": 478, "38243": 478, "38174": 478, "15903": 478, "37764": 478, "_header_value_pars": 478, "get_unstructur": 478, "ashwin": 478, "ramaswami": 478, "37461": 478, "37463": 478, "37364": 478, "34631": 478, "1c": 478, "34155": 478, "maxk": 478, "jpic": 478, "38639": 478, "38640": 478, "38613": 478, "38535": 478, "38525": 478, "38465": 478, "38469": 478, "38437": 478, "gc_debug": 478, "38392": 478, "38210": 478, "38402": 478, "crypt_r": 478, "37474": 478, "fedisableexcept": 478, "38006": 478, "38317": 478, "38310": 478, "36871": 478, "11410": 478, "minimis": 478, "38219": 478, "38236": 478, "38013": 478, "async_generator_athrow": 478, "38124": 478, "38116": 478, "38113": 478, "38074": 478, "38073": 478, "38072": 478, "38069": 478, "38071": 478, "38005": 478, "channelid": 478, "36946": 478, "37994": 478, "37947": 478, "37812": 478, "check_small_int": 478, "37830": 478, "20490": 478, "37840": 478, "37802": 478, "37409": 478, "32912": 478, "37757": 478, "targetscopeerror": 478, "36279": 478, "36311": 478, "2gib": 478, "37648": 478, "needl": 478, "37619": 478, "37593": 478, "37543": 478, "37537": 478, "_pyobject_fre": 478, "37467": 478, "37433": 478, "37417": 478, "check_interv": 478, "24214": 478, "37316": 478, "37300": 478, "37269": 478, "37231": 478, "37213": 478, "37219": 478, "15913": 478, "36922": 478, "37160": 478, "37077": 478, "36781": 478, "34556": 478, "35551": 478, "tis260": 478, "tacti": 478, "dumpleton": 478, "27575": 478, "su": 478, "ag": 478, "36589": 478, "38807": 478, "38724": 478, "doroschenko": 478, "38786": 478, "python273": 478, "38785": 478, "38723": 478, "27805": 478, "38438": 478, "38761": 478, "38716": 478, "rotatinghandl": 478, "eponym": 478, "38334": 478, "38586": 478, "38565": 478, "34679": 478, "asynci": 478, "31202": 478, "36321": 478, "38521": 478, "38478": 478, "33604": 478, "38378": 478, "38417": 478, "38449": 478, "15522": 478, "38431": 478, "38109": 478, "38422": 478, "38405": 478, "38332": 478, "_encoded_word": 478, "38341": 478, "38319": 478, "38242": 478, "38019": 478, "38163": 478, "38161": 478, "_awaitev": 478, "38216": 478, "30458": 478, "38108": 478, "38265": 478, "38248": 478, "38237": 478, "34002": 478, "38191": 478, "_typenam": 478, "38155": 478, "tahia": 478, "khan": 478, "38185": 478, "38136": 478, "37828": 478, "toriz": 478, "cruz": 478, "38175": 478, "33936": 478, "34706": 478, "38153": 478, "blake2b512": 478, "38115": 478, "38148": 478, "38142": 478, "36991": 478, "38134": 478, "pbkdf2_hmac_fast": 478, "38132": 478, "38008": 478, "37405": 478, "38121": 478, "38110": 478, "closewalk": 478, "fdwalk": 478, "38093": 478, "37488": 478, "35640": 478, "38086": 478, "37251": 478, "38037": 478, "38066": 478, "feed_data": 478, "set_transport": 478, "38059": 478, "38049": 478, "37953": 478, "forwardrefer": 478, "38026": 478, "35923": 478, "_origin": 478, "38010": 478, "34410": 478, "37140": 478, "37587": 478, "scanstr": 478, "10978": 478, "37972": 478, "blhsing": 478, "37965": 478, "ccompil": 478, "has_funct": 478, "37964": 478, "37960": 478, "36205": 478, "rusag": 478, "37950": 478, "methodi": 478, "37798": 478, "test_statist": 478, "26589": 478, "37915": 478, "32554": 478, "9938": 478, "37851": 478, "32793": 478, "37885": 478, "37868": 478, "__dataclass_fields__": 478, "37811": 478, "37863": 478, "21131": 478, "sigstksz": 478, "fastpath": 478, "14465": 478, "37810": 478, "37772": 478, "ancestr": 478, "18578": 478, "37785": 478, "34488": 478, "18049": 478, "thread_pthread": 478, "37738": 478, "setcchar": 478, "37723": 478, "vaginay": 478, "35943": 478, "32178": 478, "37268": 478, "11953": 478, "wsa": 478, "37685": 478, "37697": 478, "37695": 478, "37689": 478, "29553": 478, "nester": 478, "37691": 478, "37354": 478, "37664": 478, "37642": 478, "36161": 478, "ttyname_r": 478, "36324": 478, "37555": 478, "_call_match": 478, "_call": 478, "_spec_signatur": 478, "elizabeth": 478, "uselton": 478, "29446": 478, "16970": 478, "leender": 478, "34443": 478, "__qualnam": 478, "37491": 478, "marco": 478, "paolini": 478, "18378": 478, "_parse_localenam": 478, "37579": 478, "21478": 478, "37531": 478, "37482": 478, "36993": 478, "hillier": 478, "37502": 478, "37520": 478, "18374": 478, "37424": 478, "37421": 478, "get_temp_dir": 478, "37479": 478, "37440": 478, "37437": 478, "37428": 478, "ssl_verify_post_handshak": 478, "37420": 478, "37406": 478, "29412": 478, "37394": 478, "26967": 478, "37212": 478, "37372": 478, "blanchard": 478, "37345": 478, "udplit": 478, "gabe": 478, "appleton": 478, "37358": 478, "37347": 478, "aleksandr": 478, "balezin": 478, "37163": 478, "37085": 478, "37328": 478, "37305": 478, "webmanifest": 478, "33972": 478, "37280": 478, "37279": 478, "19865": 478, "37266": 478, "37210": 478, "21872": 478, "35922": 478, "36607": 478, "36402": 478, "37206": 478, "37111": 478, "12144": 478, "34886": 478, "37173": 478, "37165": 478, "_count_el": 478, "34767": 478, "37158": 478, "34282": 478, "37150": 478, "_actionscontain": 478, "35621": 478, "36520": 478, "30835": 478, "donnellan": 478, "31163": 478, "25068": 478, "26185": 478, "micka": 478, "schoentgen": 478, "21315": 478, "rfc2047": 478, "test_datetim": 478, "35805": 478, "35070": 478, "ngroups_max": 478, "31783": 478, "36582": 478, "32424": 478, "hemsley": 478, "36564": 478, "36302": 478, "36250": 478, "36046": 478, "mclean": 478, "32627": 478, "35168": 478, "8538": 478, "20504": 478, "11122": 478, "rpmbuild": 478, "34749": 478, "34519": 478, "28009": 478, "32498": 478, "33348": 478, "32689": 478, "maxwel": 478, "13b": 478, "mckinnon": 478, "32820": 478, "27657": 478, "4963": 478, "21767": 478, "38816": 478, "38351": 478, "38778": 478, "38592": 478, "brazilian": 478, "38294": 478, "38053": 478, "26868": 478, "36797": 478, "37977": 478, "37979": 478, "isopars": 478, "12707": 478, "37937": 478, "37759": 478, "37726": 478, "32910": 478, "37256": 478, "37284": 478, "30088": 478, "sviatoslav": 478, "sydorenko": 478, "37521": 478, "mintz": 478, "37456": 478, "37487": 478, "mexico": 478, "tech": 478, "37478": 478, "34903": 478, "gleen": 478, "36260": 478, "37004": 478, "36960": 478, "brad": 478, "36487": 478, "23460": 478, "tuoma": 478, "suutari": 478, "35803": 478, "34293": 478, "25237": 478, "test_commun": 478, "38502": 478, "35998": 478, "test_start_tls_server_1": 478, "serverproto": 478, "38470": 478, "test_compileal": 478, "test_compile_dir_maxlevel": 478, "38239": 478, "38275": 478, "38271": 478, "38270": 478, "37123": 478, "test_mymanag": 478, "_finalize_manag": 478, "38212": 478, "test_queue_feeder_donot_stop_onexc": 478, "38117": 478, "38018": 478, "37805": 478, "37876": 478, "36833": 478, "pydatetime_xxx_get_xxx": 478, "37558": 478, "37526": 478, "test_distutil": 478, "test_build_ext": 478, "_run_fin": 478, "37472": 478, "outstanding_bug": 478, "37199": 478, "19696": 478, "test_pkg_import": 478, "37335": 478, "37411": 478, "test_wsgiref": 478, "testenviron": 478, "37400": 478, "test_o": 478, "test_chown_gid": 478, "37359": 478, "test_python_": 478, "cleantest": 478, "37362": 478, "37278": 478, "proactorloopctrlc": 478, "37261": 478, "37069": 478, "37252": 478, "test_clos": 478, "test_events_mask_overflow": 478, "37169": 478, "_pyobject_isfre": 478, "37153": 478, "test_multiprocess": 478, "34001": 478, "36919": 478, "test_source_encod": 478, "test_issue2301": 478, "30202": 478, "test_abc": 478, "macaddr": 478, "34596": 478, "uncal": 478, "naitre": 478, "38809": 478, "38684": 478, "38468": 478, "getvar": 478, "37415": 478, "stdatom": 478, "atomic_uintptr_t": 478, "38301": 478, "d_reentrant": 478, "36002": 478, "ac_path_tool": 478, "ac_path_target_tool": 478, "37936": 478, "gitignor": 478, "repo": 478, "37760": 478, "37725": 478, "37468": 478, "wininst": 478, "37189": 478, "pyrun_xxx": 478, "25361": 478, "36210": 478, "asi": 478, "libcurs": 478, "38589": 478, "38453": 478, "38519": 478, "38492": 478, "38344": 478, "38359": 478, "38355": 478, "38092": 478, "38133": 478, "38114": 478, "32592": 478, "36634": 478, "38081": 478, "38087": 478, "test_ntpath": 478, "38088": 478, "v142": 478, "37283": 478, "38030": 478, "38020": 478, "37705": 478, "winerror_to_errno": 478, "37549": 478, "1311": 478, "9949": 478, "36266": 478, "_pyimport_findsharedfuncptrwindow": 478, "nyayapati": 478, "25172": 478, "37778": 478, "37734": 478, "37702": 478, "37672": 478, "pip_us": 478, "37445": 478, "format_message_ignore_insert": 478, "formatmessagew": 478, "37369": 478, "37380": 478, "_activ": 478, "ruslan": 478, "kuprieiev": 478, "35360": 478, "37267": 478, "36779": 478, "cp_utf7": 478, "32587": 478, "28269": 478, "strcasecmp": 478, "_stricmp": 478, "minmin": 478, "gong": 478, "36590": 478, "rfcomm": 478, "38089": 478, "5mb": 478, "16mb": 478, "26353": 478, "4630": 478, "38598": 478, "36698": 478, "35379": 478, "editorwindow": 478, "38183": 478, "38077": 478, "38041": 478, "35771": 478, "hover_delay": 478, "test_tooltip": 478, "37824": 478, "37929": 478, "37902": 478, "37849": 478, "36419": 478, "37748": 478, "37692": 478, "37628": 478, "33610": 478, "37530": 478, "27452": 478, "removefil": 478, "createconfighandl": 478, "37325": 478, "37321": 478, "26806": 478, "37177": 478, "37039": 478, "35763": 478, "obtrus": 478, "36390": 478, "38118": 478, "38347": 478, "pathfix": 478, "37803": 478, "37942": 478, "argumentclin": 478, "37704": 478, "37675": 478, "37034": 478, "37064": 478, "pathscript": 478, "37633": 478, "38540": 478, "38395": 478, "36389": 478, "_pyobject_checkconsist": 478, "visit_decref": 478, "38266": 478, "38303": 478, "kieft": 478, "38205": 478, "38140": 478, "37926": 478, "37879": 478, "subtype_dealloc": 478, "37151": 478, "21120": 478, "37337": 478, "28805": 478, "positon": 478, "37215": 478, "36842": 478, "37170": 478, "35381": 478, "direntrytyp": 478, "scandiriteratortyp": 478, "34331": 478, "35907": 478, "9948": 478, "local_fil": 478, "33529": 478, "33164": 478, "35814": 478, "37126": 478, "37122": 478, "37087": 478, "37072": 478, "pyast_fromnodeobject": 478, "37029": 478, "26423": 478, "wrap_lenfunc": 478, "37050": 478, "expr_text": 478, "22385": 478, "36878": 478, "e1000": 478, "2180": 478, "36907": 478, "36826": 478, "namedexpress": 478, "ast_unpars": 478, "1875": 478, "36861": 478, "28866": 478, "36851": 478, "27639": 478, "blahay": 478, "erick": 478, "cervant": 478, "vaultah": 478, "36737": 478, "pyruntimest": 478, "24048": 478, "remove_modul": 478, "27987": 478, "36601": 478, "main_pid": 478, "36594": 478, "36045": 478, "36035": 478, "35983": 478, "20602": 478, "26826": 478, "31862": 478, "37120": 478, "12202": 478, "26835": 478, "29262": 478, "12639": 478, "35246": 478, "35279": 478, "37076": 478, "37054": 478, "_buffer": 478, "37058": 478, "37047": 478, "37049": 478, "37046": 478, "37045": 478, "37035": 478, "pollut": 478, "37001": 478, "36996": 478, "37008": 478, "27737": 478, "36969": 478, "36983": 478, "36972": 478, "36949": 478, "36948": 478, "33524": 478, "licht": 478, "takeuchi": 478, "24564": 478, "ying": 478, "36888": 478, "25652": 478, "36916": 478, "36889": 478, "writeon": 478, "readwrit": 478, "connect_unix": 478, "streamserv": 478, "flowcontrolmix": 478, "36845": 478, "23378": 478, "36867": 478, "23896": 478, "pygram": 478, "35545": 478, "36778": 478, "semaphore_track": 478, "24538": 478, "36832": 478, "36814": 478, "33110": 478, "26903": 478, "36813": 478, "36806": 478, "36802": 478, "36801": 478, "36748": 478, "8138": 478, "simpleserv": 478, "29183": 478, "36548": 478, "36542": 478, "36533": 478, "35252": 478, "36368": 478, "27497": 478, "ashish": 478, "nitin": 478, "patil": 478, "36239": 478, "keyedarch": 478, "35125": 478, "35721": 478, "31855": 478, "26660": 478, "34271": 478, "33569": 478, "34424": 478, "troeger": 478, "34303": 478, "33361": 478, "22454": 478, "31922": 478, "24882": 478, "31961": 478, "33123": 478, "buchholz": 478, "22102": 478, "facioni": 478, "32515": 478, "32299": 478, "vadim": 478, "tsander": 478, "27141": 478, "31829": 478, "x1a": 478, "23395": 478, "36896": 478, "36686": 478, "36984": 478, "36868": 478, "host_flag": 478, "35924": 478, "36783": 478, "time_fromtimeandfold": 478, "edison": 478, "abahurir": 478, "22865": 478, "35397": 478, "32995": 478, "33519": 478, "33482": 478, "25735": 478, "20285": 478, "test_coroutin": 478, "test_cprofil": 478, "test_rais": 478, "test_yield_from": 478, "37098": 478, "test_memfd_cr": 478, "37081": 478, "36915": 478, "36719": 478, "child_error": 478, "36816": 478, "selfsigned_pythontestdotnet": 478, "35925": 478, "distro": 478, "36782": 478, "36342": 478, "sem_open": 478, "36786": 478, "36965": 478, "status_control_c_exit": 478, "35926": 478, "1b": 478, "36231": 478, "35610": 478, "context_use_ps1": 478, "prompt_last_lin": 478, "31858": 478, "37038": 478, "36958": 478, "36807": 478, "usb": 478, "32411": 478, "37053": 478, "chih": 478, "36379": 478, "37107": 478, "_pyobject_callmethodidobjarg": 478, "_pyobject_getmethod": 478, "sullivan": 478, "36742": 478, "9740": 478, "35755": 478, "cs_path": 478, "32849": 478, "20180": 478, "36611": 478, "serialno": 478, "36549": 478, "36504": 478, "pycarraytype_new": 478, "20844": 478, "36452": 478, "36459": 478, "tok_nextc": 478, "36433": 478, "classmethoddescr_cal": 478, "36430": 478, "36440": 478, "parsererror": 478, "skrobov": 478, "18372": 478, "35952": 478, "1613500": 478, "36734": 478, "stack_t": 478, "current_stack": 478, "36650": 478, "28552": 478, "project_bas": 478, "find_execut": 478, "25430": 478, "ipnetwork": 478, "30485": 478, "36613": 478, "36598": 478, "36575": 478, "33461": 478, "36559": 478, "lean": 478, "34373": 478, "36232": 478, "rougeth": 478, "36050": 478, "36522": 478, "houglum": 478, "30427": 478, "maier": 478, "36385": 478, "36434": 478, "36407": 478, "surjaninov": 478, "36366": 478, "unstart": 478, "test_tim": 478, "faiur": 478, "36227": 478, "35936": 478, "35376": 478, "17396": 478, "35934": 478, "23078": 478, "felip": 478, "ochoa": 478, "35416": 478, "35082": 478, "34547": 478, "31658": 478, "34139": 478, "33291": 478, "31310": 478, "31292": 478, "36625": 478, "30840": 478, "36523": 478, "36425": 478, "36345": 478, "literalinclud": 478, "36157": 478, "33043": 478, "35581": 478, "33832": 478, "32913": 478, "36725": 478, "36454": 478, "test_monoton": 478, "test_cyclic_gc": 478, "36635": 478, "36629": 478, "test_imap4_host_default_valu": 478, "test_getallocatedblock": 478, "36560": 478, "36565": 478, "test_resourc": 478, "test_tabnanni": 478, "36436": 478, "pymem_buffer_overflow": 478, "test_utf8_mod": 478, "36341": 478, "36747": 478, "scriptsinstal": 478, "36618": 478, "fmax": 478, "movap": 478, "movup": 478, "36605": 478, "36577": 478, "36544": 478, "36146": 478, "36508": 478, "36503": 478, "aix4": 478, "35920": 478, "arm32": 478, "36649": 478, "34144": 478, "mend": 478, "36509": 478, "35941": 478, "36441": 478, "36010": 478, "29515": 478, "ipproto_ah": 478, "ipproto_cbt": 478, "ipproto_dstopt": 478, "ipproto_egp": 478, "ipproto_esp": 478, "ipproto_frag": 478, "ipproto_ggp": 478, "ipproto_hopopt": 478, "ipproto_iclfxbm": 478, "ipproto_icmpv6": 478, "ipproto_idp": 478, "ipproto_igmp": 478, "ipproto_igp": 478, "ipproto_ipv4": 478, "ipproto_ipv6": 478, "ipproto_l2tp": 478, "ipproto_max": 478, "ipproto_nd": 478, "ipproto_non": 478, "ipproto_pgm": 478, "ipproto_pim": 478, "ipproto_pup": 478, "ipproto_rdp": 478, "ipproto_rout": 478, "ipproto_sctp": 478, "ipproto_st": 478, "35947": 478, "34060": 478, "kloth": 478, "31512": 478, "18075": 478, "36429": 478, "14546": 478, "36641": 478, "pydoc_var": 478, "cleanbyt": 478, "deaddyt": 478, "36443": 478, "_py_preiniti": 478, "_pypreconfig": 478, "36025": 478, "36216": 478, "35121": 478, "36421": 478, "36412": 478, "36398": 478, "structseq_repr": 478, "36256": 478, "parsermodul": 478, "dfa": 478, "36365": 478, "36374": 478, "merge_consts_recurs": 478, "36236": 478, "36352": 478, "36301": 478, "36333": 478, "_pyruntimestate_fini": 478, "36332": 478, "36282": 478, "30040": 478, "36262": 478, "_py_dg_strtod": 478, "36252": 478, "36218": 478, "36188": 478, "vestig": 478, "martijn": 478, "pieter": 478, "36124": 478, "35808": 478, "36401": 478, "34745": 478, "_fields_default": 478, "36298": 478, "mental": 478, "36285": 478, "stephan": 478, "hohe": 478, "36272": 478, "36280": 478, "35931": 478, "36251": 478, "stderrprint": 478, "36235": 478, "customize_compil": 478, "35807": 478, "36139": 478, "36179": 478, "36169": 478, "36103": 478, "36130": 478, "35652": 478, "35178": 478, "tashrif": 478, "billah": 478, "36106": 478, "sinpi": 478, "dmitrii": 478, "pasechnik": 478, "36091": 478, "chen": 478, "36043": 478, "35899": 478, "21269": 478, "akshay": 478, "35843": 478, "_namespacepath": 478, "35802": 478, "35715": 478, "librat": 478, "_process_work": 478, "35493": 478, "35661": 478, "35198": 478, "36138": 478, "21314": 478, "36234": 478, "posixuidgidtest": 478, "test_r": 478, "test_locale_flag": 478, "36123": 478, "36356": 478, "test_extens": 478, "36312": 478, "50220": 478, "50221": 478, "50222": 478, "50225": 478, "50227": 478, "50229": 478, "57002": 478, "57011": 478, "65000": 478, "24643": 478, "_timezon": 478, "36405": 478, "36396": 478, "fgbg": 478, "gethighlight": 478, "36176": 478, "darken": 478, "23205": 478, "23216": 478, "36152": 478, "colordeleg": 478, "close_when_don": 478, "32129": 478, "blurri": 478, "36096": 478, "30348": 478, "35132": 478, "gdb7": 478, "32217": 478, "36142": 478, "coreconfig": 478, "pycore_coreconfig": 478, "36052": 478, "35942": 478, "35992": 478, "35993": 478, "35991": 478, "_randommodul": 478, "35961": 478, "slice_richcompar": 478, "35911": 478, "12822": 478, "pthread_condattr_setclock": 478, "31506": 478, "35724": 478, "33608": 478, "_py_addpendingcal": 478, "33989": 478, "35512": 478, "35918": 478, "18283": 478, "35960": 478, "35500": 478, "24209": 478, "35321": 478, "nina": 478, "zakharenko": 478, "35378": 478, "34294": 478, "35615": 478, "34572": 478, "burgess": 478, "36083": 478, "36007": 478, "22062": 478, "27313": 478, "comboboxtest": 478, "36019": 478, "36037": 478, "rhel8": 478, "35798": 478, "35505": 478, "35917": 478, "shareabl": 478, "35704": 478, "test_unpack_archive_xztar": 478, "maxdata": 478, "0x20000000": 478, "aixtool": 478, "34720": 478, "m_state": 478, "35976": 478, "35692": 478, "35872": 478, "35873": 478, "35299": 478, "24310": 478, "35833": 478, "35689": 478, "35746": 478, "5010": 478, "deref": 478, "talo": 478, "0758": 478, "nicola": 478, "edet": 478, "34812": 478, "34791": 478, "domreg": 478, "34623": 478, "14647": 478, "_py_hashsecret": 478, "34405": 478, "0i": 478, "33871": 478, "32533": 478, "33136": 478, "8970": 478, "x509_verify_param_set1_host": 478, "namelen": 478, "33001": 478, "32981": 478, "1061": 478, "jami": 478, "35877": 478, "typed_ast": 478, "35720": 478, "pymain_parse_cmdline_impl": 478, "35634": 478, "35623": 478, "35214": 478, "test_io": 478, "35560": 478, "35552": 478, "35504": 478, "35494": 478, "unbalanc": 478, "35444": 478, "35436": 478, "35423": 478, "35357": 478, "magicproxi": 478, "from_kal": 478, "_mock_": 478, "35372": 478, "35336": 478, "31241": 478, "33954": 478, "35269": 478, "35193": 478, "35169": 478, "34022": 478, "28401": 478, "stefano": 478, "rivera": 478, "29341": 478, "35050": 478, "29743": 478, "16806": 478, "35029": 478, "34983": 478, "34974": 478, "34939": 478, "34973": 478, "34876": 478, "34879": 478, "bytesobject": 478, "34784": 478, "structsequ": 478, "34854": 478, "34824": 478, "30156": 478, "property_descr_get": 478, "34751": 478, "xxhash": 478, "34735": 478, "timemodul": 478, "34683": 478, "34653": 478, "pyparser_simpleparsestringfilenam": 478, "32236": 478, "34637": 478, "1621": 478, "34588": 478, "34485": 478, "_bootlocal": 478, "34527": 478, "34403": 478, "34523": 478, "12458": 478, "34408": 478, "34400": 478, "34377": 478, "_pyobject_realloc": 478, "34353": 478, "34320": 478, "34113": 478, "constantin": 478, "petrisor": 478, "34100": 478, "34151": 478, "34170": 478, "33237": 478, "34149": 478, "34125": 478, "34141": 478, "34126": 478, "24618": 478, "34068": 478, "34087": 478, "34080": 478, "34066": 478, "34042": 478, "33418": 478, "33985": 478, "33956": 478, "24596": 478, "33451": 478, "1617161": 478, "33824": 478, "33803": 478, "33738": 478, "33786": 478, "30167": 478, "33706": 478, "gohlk": 478, "30654": 478, "kerl": 478, "33622": 478, "25711": 478, "33509": 478, "31849": 478, "33475": 478, "20104": 478, "33391": 478, "set_symmetric_differ": 478, "33363": 478, "28055": 478, "eik": 478, "33128": 478, "33331": 478, "33312": 478, "_dictkeysobject": 478, "33305": 478, "33306": 478, "33270": 478, "30455": 478, "33176": 478, "33231": 478, "normalizestr": 478, "33205": 478, "round_up_to_power_2": 478, "hashtable_s": 478, "29922": 478, "33199": 478, "33138": 478, "copyabl": 478, "33018": 478, "25750": 478, "33026": 478, "33005": 478, "_pygilstate_reinit": 478, "_pyinterpreterstate_en": 478, "32911": 478, "29463": 478, "7a1": 478, "17288": 478, "32946": 478, "32932": 478, "32925": 478, "32889": 478, "py_address_in_rang": 478, "32836": 478, "31356": 478, "ensure_dis": 478, "32711": 478, "32583": 478, "31902": 478, "25862": 478, "21983": 478, "31577": 478, "29832": 478, "getsockaddrarg": 478, "35845": 478, "35847": 478, "ctypes_pass_by_ref_hack": 478, "test_pass_by_valu": 478, "35780": 478, "misord": 478, "23846": 478, "34323": 478, "35674": 478, "35733": 478, "35726": 478, "35719": 478, "35717": 478, "35699": 478, "32710": 478, "readfil": 478, "wsasend": 478, "35682": 478, "35643": 478, "35619": 478, "28503": 478, "35614": 478, "35568": 478, "35588": 478, "35585": 478, "30561": 478, "35526": 478, "35523": 478, "selinux": 478, "31784": 478, "1e9": 478, "35513": 478, "35502": 478, "35348": 478, "35491": 478, "baseprocess": 478, "35477": 478, "31446": 478, "createprocessw": 478, "35052": 478, "20239": 478, "17185": 478, "35445": 478, "35415": 478, "35424": 478, "35330": 478, "35346": 478, "rhapsodi": 478, "10496": 478, "check_environ": 478, "35389": 478, "cs_gnu_libc_vers": 478, "35394": 478, "35310": 478, "oran": 478, "avraham": 478, "35380": 478, "35341": 478, "ismo": 478, "toijala": 478, "35371": 478, "ver": 478, "35066": 478, "35344": 478, "35312": 478, "35308": 478, "24746": 478, "jairo": 478, "trad": 478, "28604": 478, "35277": 478, "35226": 478, "35189": 478, "fnctl": 478, "calcel": 478, "35186": 478, "bdist_dumb": 478, "35152": 478, "35062": 478, "35065": 478, "_untrack_read": 478, "35079": 478, "sequencemanag": 478, "35017": 478, "35024": 478, "agren": 478, "31047": 478, "35053": 478, "34794": 478, "34909": 478, "35022": 478, "35008": 478, "23420": 478, "33947": 478, "34890": 478, "34521": 478, "recvfd": 478, "31522": 478, "34970": 478, "34969": 478, "16965": 478, "34966": 478, "34926": 478, "asthana": 478, "34941": 478, "32680": 478, "34769": 478, "34936": 478, "selection_el": 478, "34911": 478, "34922": 478, "34925": 478, "34900": 478, "oliveira": 478, "34844": 478, "strformatstyl": 478, "percentstyl": 478, "stringtemplatestyl": 478, "34897": 478, "34871": 478, "28441": 478, "34866": 478, "34711": 478, "34872": 478, "34849": 478, "34819": 478, "34758": 478, "34789": 478, "delfino": 478, "34334": 478, "5950": 478, "34728": 478, "34738": 478, "29577": 478, "31177": 478, "34672": 478, "34666": 478, "awrit": 478, "6721": 478, "34658": 478, "after_par": 478, "34652": 478, "34638": 478, "34536": 478, "34636": 478, "34630": 478, "32490": 478, "34363": 478, "34625": 478, "32270": 478, "34622": 478, "34610": 478, "34421": 478, "34604": 478, "grzybowski": 478, "34574": 478, "8110": 478, "34530": 478, "34563": 478, "peeknamedpip": 478, "34558": 478, "_aix": 478, "22872": 478, "34515": 478, "13312": 478, "34472": 478, "sila": 478, "sewel": 478, "34454": 478, "izbyshev": 478, "6700": 478, "34171": 478, "34441": 478, "34427": 478, "34412": 478, "31715": 478, "mjs": 478, "34384": 478, "22602": 478, "2152": 478, "34341": 478, "34333": 478, "18540": 478, "26502": 478, "34318": 478, "33613": 478, "34248": 478, "34246": 478, "blum": 478, "aguiar": 478, "woellert": 478, "32321": 478, "wright": 478, "34263": 478, "34035": 478, "32215": 478, "34251": 478, "19891": 478, "homedir": 478, "34228": 478, "13041": 478, "zbyszek": 478, "34213": 478, "34052": 478, "34197": 478, "32788": 478, "__adapt__": 478, "21446": 478, "940286": 478, "showtop": 478, "34164": 478, "33729": 478, "34097": 478, "34108": 478, "34070": 478, "27494": 478, "33967": 478, "34041": 478, "34056": 478, "34054": 478, "34043": 478, "34044": 478, "34010": 478, "34019": 478, "bumsik": 478, "33978": 478, "14117": 478, "33974": 478, "27500": 478, "24567": 478, "25007": 478, "33929": 478, "popen_spawn_win32": 478, "33916": 478, "32568": 478, "33833": 478, "proactorsockettransport": 478, "33663": 478, "26544": 478, "33843": 478, "33842": 478, "33805": 478, "33687": 478, "furrer": 478, "33812": 478, "32108": 478, "27397": 478, "33578": 478, "30805": 478, "33476": 478, "enriqu": 478, "perez": 478, "terron": 478, "33694": 478, "32493": 478, "uuid_enc_b": 478, "33274": 478, "33778": 478, "33165": 478, "33770": 478, "33769": 478, "ssltransport": 478, "33767": 478, "33734": 478, "31014": 478, "33197": 478, "_parameterkind": 478, "32684": 478, "33654": 478, "33674": 478, "512mib": 478, "sslprotocol": 478, "31647": 478, "32610": 478, "33469": 478, "33672": 478, "33652": 478, "33238": 478, "haydaman": 478, "33625": 478, "33623": 478, "sigsgv": 478, "11874": 478, "wrappabl": 478, "30877": 478, "fos": 478, "7062": 478, "33582": 478, "33570": 478, "pre6": 478, "28556": 478, "12486": 478, "33548": 478, "_candidate_tempdir_list": 478, "33109": 478, "33541": 478, "_strptime": 478, "localetim": 478, "__pad": 478, "_localetime__pad": 478, "33536": 478, "33542": 478, "get_nod": 478, "duid": 478, "zvi": 478, "effron": 478, "26819": 478, "33516": 478, "28612": 478, "ladi": 478, "wirtz": 478, "28167": 478, "33504": 478, "33505": 478, "33497": 478, "amber": 478, "33495": 478, "26103": 478, "hall": 478, "33453": 478, "prs": 478, "paulius": 478, "arka": 478, "dombrova": 478, "33365": 478, "strigl": 478, "20087": 478, "33422": 478, "33281": 478, "33311": 478, "blondon": 478, "27300": 478, "32933": 478, "fluri": 478, "33383": 478, "33375": 478, "33336": 478, "6851": 478, "32455": 478, "27485": 478, "33332": 478, "sigfillset": 478, "33251": 478, "33329": 478, "33334": 478, "991266": 478, "33131": 478, "33308": 478, "line_info": 478, "col_info": 478, "23403": 478, "33266": 478, "11594": 478, "33254": 478, "33265": 478, "33263": 478, "starostin": 478, "33256": 478, "33144": 478, "33185": 478, "0b3": 478, "29613": 478, "33203": 478, "33224": 478, "mdiff": 478, "33209": 478, "32861": 478, "lazar": 478, "33175": 478, "33141": 478, "33096": 478, "32873": 478, "33134": 478, "33127": 478, "32505": 478, "33078": 478, "33116": 478, "32896": 478, "33100": 478, "32953": 478, "32968": 478, "33061": 478, "33064": 478, "33056": 478, "33021": 478, "31804": 478, "33034": 478, "eaton": 478, "30249": 478, "33037": 478, "27683": 478, "22674": 478, "32999": 478, "33009": 478, "32969": 478, "32056": 478, "32970": 478, "32844": 478, "32960": 478, "32713": 478, "joffrey": 478, "fuhrer": 478, "32257": 478, "32929": 478, "32146": 478, "32922": 478, "32759": 478, "32859": 478, "dup3": 478, "32556": 478, "_getfinalpathnam": 478, "_getvolumepathnam": 478, "_getdiskusag": 478, "21060": 478, "32857": 478, "after_cancel": 478, "32852": 478, "_abc_registri": 478, "_abc_cach": 478, "_abc_negative_cach": 478, "_dump_registri": 478, "_abc_registry_clear": 478, "_abc_caches_clear": 478, "32841": 478, "32819": 478, "19675": 478, "32394": 478, "31787": 478, "30157": 478, "32775": 478, "32622": 478, "32777": 478, "32647": 478, "libdl": 478, "32691": 478, "mod_spec": 478, "32734": 478, "32727": 478, "31453": 478, "20180309043602": 478, "ssl_ctx_set_min_proto_vers": 478, "24334": 478, "31848": 478, "aifc_read": 478, "initfp": 478, "ssnd": 478, "32512": 478, "8525": 478, "29877": 478, "32221": 478, "scopeid": 478, "32147": 478, "31908": 478, "31608": 478, "31425": 478, "gps": 478, "andersson": 478, "22005": 478, "16865": 478, "29456": 478, "hangul": 478, "u1176": 478, "u11a7": 478, "u11c3": 478, "21257": 478, "34764": 478, "35564": 478, "master_doc": 478, "35511": 478, "10536": 478, "35089": 478, "35038": 478, "unexist": 478, "f_restrict": 478, "35042": 478, "35044": 478, "35035": 478, "34967": 478, "add_object_typ": 478, "description_unit": 478, "34913": 478, "32174": 478, "charat": 478, "11233": 478, "34552": 478, "28617": 478, "stdtype": 478, "20177": 478, "34065": 478, "33460": 478, "33847": 478, "33409": 478, "versionad": 478, "parameterkind": 478, "17045": 478, "33736": 478, "23859": 478, "33594": 478, "33503": 478, "33421": 478, "33487": 478, "33378": 478, "33276": 478, "33201": 478, "33195": 478, "33126": 478, "27212": 478, "28247": 478, "18802": 478, "27428": 478, "himanshu": 478, "lakhara": 478, "17232": 478, "32800": 478, "11015": 478, "32613": 478, "8722": 478, "32614": 478, "20709": 478, "gehrck": 478, "32722": 478, "31972": 478, "30607": 478, "8243": 478, "32337": 478, "25041": 478, "31432": 478, "35772": 478, "tmpfs": 478, "ppc64le": 478, "punch": 478, "35045": 478, "unbreak": 478, "test_min_max_vers": 478, "test_sendfil": 478, "33717": 478, "35488": 478, "31731": 478, "check_interrupted_writ": 478, "test_multiprocessing_main_handl": 478, "35519": 478, "test_xmlrpc": 478, "34279": 478, "testdidnotrun": 478, "35412": 478, "test_future4": 478, "26704": 478, "35352": 478, "35317": 478, "test_email": 478, "test_localtime_daylight_true_dst_tru": 478, "test_localtime_daylight_false_dst_tru": 478, "21263": 478, "34962": 478, "docstest": 478, "23596": 478, "34537": 478, "test_str": 478, "34587": 478, "rdstest": 478, "testcongest": 478, "34661": 478, "34200": 478, "flaki": 478, "test_pkg": 478, "scari": 478, "module_cleanup": 478, "34569": 478, "34594": 478, "34579": 478, "34542": 478, "3072": 478, "11193": 478, "test_undecodable_env": 478, "34347": 478, "test_cmd_lin": 478, "34490": 478, "34391": 478, "11192": 478, "inet_pton6_zon": 478, "34399": 478, "test_mktim": 478, "test_pthread_getcpuclickid": 478, "_pytime_localtim": 478, "11191": 478, "test_search_cpp": 478, "33746": 478, "33901": 478, "test_dbm_gnu": 478, "33873": 478, "huntrleak": 478, "33562": 478, "33655": 478, "test_posix_falloc": 478, "zfs": 478, "32962": 478, "mcet": 478, "fcf": 478, "33358": 478, "test_pre_initialization_sys_opt": 478, "32872": 478, "32517": 478, "32663": 478, "smtputf8simtest": 478, "27643": 478, "test_c": 478, "19417": 478, "31809": 478, "secp": 478, "34691": 478, "35683": 478, "35642": 478, "asynciomodul": 478, "vcxproj": 478, "35550": 478, "__sun": 478, "__svr4": 478, "35499": 478, "35257": 478, "35351": 478, "35139": 478, "inlinefunctionexpans": 478, "onlyexplicitinlin": 478, "ob1": 478, "35011": 478, "pyexpatn": 478, "28015": 478, "34765": 478, "automak": 478, "34585": 478, "34710": 478, "pedant": 478, "34582": 478, "devop": 478, "34081": 478, "34555": 478, "have_linux_vm_sockets_h": 478, "have_sockaddr_alg": 478, "33015": 478, "34245": 478, "34121": 478, "30345": 478, "5755": 478, "33614": 478, "33648": 478, "33522": 478, "visualstudio": 478, "33512": 478, "33483": 478, "33394": 478, "33377": 478, "r6": 478, "riscv": 478, "32232": 478, "33182": 478, "33163": 478, "v39": 478, "33012": 478, "32898": 478, "29442": 478, "35890": 478, "wcstok": 478, "32560": 478, "35854": 478, "35811": 478, "35797": 478, "35758": 478, "29734": 478, "35596": 478, "35402": 478, "35401": 478, "34977": 478, "35067": 478, "_distutils_findv": 478, "vswhere": 478, "32557": 478, "34770": 478, "pyshellext": 478, "34603": 478, "34581": 478, "socketmodul": 478, "34532": 478, "34062": 478, "34225": 478, "34011": 478, "34006": 478, "31546": 478, "matplotlib": 478, "30237": 478, "readconsol": 478, "cancelsynchronousio": 478, "33895": 478, "29097": 478, "86400": 478, "33316": 478, "33184": 478, "32890": 478, "33016": 478, "32903": 478, "32901": 478, "31966": 478, "32409": 478, "32457": 478, "32370": 478, "ipconfig": 478, "29248": 478, "printnameoffset": 478, "holmquist": 478, "sse4": 478, "1104": 478, "summaryinfo": 478, "35025": 478, "24658": 478, "33635": 478, "_recursivewildcardselector": 478, "_iterate_directori": 478, "13631": 478, "32726": 478, "activetcl": 478, "31903": 478, "systemconfigur": 478, "35770": 478, "35769": 478, "untitl": 478, "35660": 478, "35641": 478, "34055": 478, "35591": 478, "35196": 478, "squeezer": 478, "35598": 478, "config_key": 478, "28097": 478, "35208": 478, "35555": 478, "gray": 478, "35521": 478, "22703": 478, "35213": 478, "34864": 478, "35202": 478, "33000": 478, "overfil": 478, "23220": 478, "35099": 478, "stdxxx": 478, "35097": 478, "35093": 478, "35088": 478, "copy_str": 478, "35087": 478, "34548": 478, "unsqueez": 478, "34047": 478, "34275": 478, "34120": 478, "unrespons": 478, "33975": 478, "htest": 478, "33905": 478, "stackview": 478, "stackbrows": 478, "33924": 478, "mainmenu": 478, "menudef": 478, "33906": 478, "33917": 478, "idle_test": 478, "33904": 478, "rstripextens": 478, "33907": 478, "calltip_w": 478, "calltipwindow": 478, "33856": 478, "33839": 478, "33855": 478, "33763": 478, "33664": 478, "slider": 478, "33628": 478, "codecontext": 478, "33564": 478, "21474": 478, "33204": 478, "32984": 478, "32940": 478, "stringtranslatepseudomap": 478, "32916": 478, "32905": 478, "32874": 478, "32837": 478, "32826": 478, "test_help_about": 478, "test_file_button": 478, "32831": 478, "32765": 478, "34989": 478, "20260": 478, "read_var": 478, "33189": 478, "31920": 478, "krasnikov": 478, "29673": 478, "pystackv": 478, "pystack": 478, "32885": 478, "32222": 478, "harradin": 478, "31583": 478, "33817": 478, "35322": 478, "35296": 478, "pycore_": 478, "35259": 478, "neufeld": 478, "34725": 478, "34910": 478, "34193": 478, "34127": 478, "23927": 478, "pycompile_opcodestackeffectwithjump": 478, "34008": 478, "32500": 478, "33042": 478, "32374": 478, "30863": 478, "33851": 478, "33932": 478, "7b1": 478, "threadedhttpserv": 478, "32703": 478, "32650": 478, "32685": 478, "32697": 478, "26163": 478, "24340": 478, "18533": 478, "20891": 478, "32028": 478, "31113": 478, "30306": 478, "32513": 478, "32660": 478, "fionread": 478, "fionclex": 478, "fioclex": 478, "fioasync": 478, "fionbio": 478, "27931": 478, "32643": 478, "_step": 478, "_wakeup": 478, "_schedule_callback": 478, "32502": 478, "32596": 478, "32576": 478, "32574": 478, "melero": 478, "32521": 478, "32467": 478, "32473": 478, "libtirpc": 478, "32503": 478, "29237": 478, "32404": 478, "32228": 478, "22908": 478, "31853": 478, "x509_verify_param_set1_ip": 478, "32724": 478, "32649": 478, "17799": 478, "32721": 478, "32602": 478, "32549": 478, "32635": 478, "libxcrypt": 478, "32598": 478, "ax_check_openssl": 478, "32593": 478, "32588": 478, "29911": 478, "32507": 478, "32681": 478, "timzon": 478, "32399": 478, "rfc4122": 478, "uuid_creat": 478, "32390": 478, "32143": 478, "32379": 478, "32259": 478, "27169": 478, "22091": 478, "32329": 478, "30416": 478, "32282": 478, "versionhelp": 478, "32260": 478, "32225": 478, "31901": 478, "32506": 478, "32279": 478, "32278": 478, "32499": 478, "32468": 478, "32422": 478, "31721": 478, "_log_traceback": 478, "26133": 478, "32363": 478, "32357": 478, "python_coroutin": 478, "cython_coroutin": 478, "32323": 478, "32302": 478, "v140": 478, "29711": 478, "stop_serv": 478, "17852": 478, "misunderstand": 478, "_py_pyatexit": 478, "_get_running_loop": 478, "32255": 478, "32277": 478, "32273": 478, "test_util": 478, "32272": 478, "classify_class_attr": 478, "ouput": 478, "32199": 478, "26439": 478, "31993": 478, "31802": 478, "31699": 478, "abstractserv": 478, "32252": 478, "faulthandler_suppress_crash_report": 478, "24960": 478, "32030": 478, "29084": 478, "32264": 478, "pygetopt": 478, "32241": 478, "wchar": 478, "32176": 478, "co_nofre": 478, "32137": 478, "32096": 478, "_pyruntime_initi": 478, "28180": 478, "_py_setlocalefromenv": 478, "31949": 478, "30696": 478, "20047": 478, "21720": 478, "31845": 478, "28936": 478, "31825": 478, "escape_decod": 478, "31618": 478, "28603": 478, "zane": 478, "bitter": 478, "31786": 478, "31781": 478, "31626": 478, "30817": 478, "32214": 478, "27240": 478, "30788": 478, "31831": 478, "32182": 478, "rfc2231": 478, "32186": 478, "32101": 478, "32154": 478, "32089": 478, "preferenti": 478, "12239": 478, "vt_empti": 478, "mahon": 478, "28334": 478, "dimitri": 478, "merejkowski": 478, "31325": 478, "wellner": 478, "12382": 478, "ter": 478, "19610": 478, "28684": 478, "32110": 478, "27535": 478, "32088": 478, "1647489": 478, "32072": 478, "32069": 478, "32046": 478, "32018": 478, "32037": 478, "32034": 478, "32015": 478, "32011": 478, "28369": 478, "31976": 478, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 478, "9678": 478, "takayuki": 478, "shimizukawa": 478, "30057": 478, "31933": 478, "poolexecutor": 478, "31927": 478, "27666": 478, "chtype": 478, "mmask_t": 478, "fink": 478, "31917": 478, "31897": 478, "25720": 478, "31893": 478, "kqueue_ev": 478, "31891": 478, "31884": 478, "28281": 478, "gollahon": 478, "30639": 478, "30768": 478, "intr_flag": 478, "31854": 478, "31834": 478, "ssse3": 478, "28416": 478, "31653": 478, "28326": 478, "superset_of": 478, "31827": 478, "31457": 478, "31806": 478, "31803": 478, "31800": 478, "30143": 478, "31770": 478, "31752": 478, "31620": 478, "poller": 478, "31632": 478, "15037": 478, "31307": 478, "31334": 478, "riccardo": 478, "coccioli": 478, "31308": 478, "immun": 478, "30553": 478, "misdirect": 478, "32105": 478, "31380": 478, "test_httpserv": 478, "test_undecodable_fil": 478, "apf": 478, "31705": 478, "test_sha256": 478, "enokey": 478, "32138": 478, "requires_android_level": 478, "32136": 478, "28668": 478, "requires_multiprocessing_queu": 478, "32126": 478, "test_get_event_loop_new_process": 478, "test_ev": 478, "31174": 478, "test_unpars": 478, "directorytestcas": 478, "28538": 478, "28762": 478, "29040": 478, "r14": 478, "32059": 478, "detect_modul": 478, "sysroot": 478, "31957": 478, "31609": 478, "31934": 478, "31926": 478, "28791": 478, "28643": 478, "31866": 478, "1102": 478, "error_no_more_item": 478, "tuininga": 478, "31944": 478, "31857": 478, "31392": 478, "2m": 478, "32207": 478, "32164": 478, "tabbedpag": 478, "tabbedpageset": 478, "32100": 478, "pathbrows": 478, "31836": 478, "test_code_modul": 478, "ditto": 478, "32159": 478, "svneol": 478, "treesync": 478, "30722": 478, "redemo": 478, "sarnowski": 478, "32125": 478, "py_useclassexceptionsflag": 478, "31642": 478, "31708": 478, "30404": 478, "31619": 478, "31602": 478, "31592": 478, "31588": 478, "31566": 478, "31505": 478, "make_encod": 478, "31492": 478, "31478": 478, "31336": 478, "31410": 478, "31315": 478, "create_dynam": 478, "31311": 478, "31293": 478, "31285": 478, "30058": 478, "31672": 478, "31701": 478, "31728": 478, "bm_regex_compil": 478, "30397": 478, "31675": 478, "31673": 478, "adderrorinfo": 478, "30806": 478, "25351": 478, "20519": 478, "28293": 478, "31596": 478, "30347": 478, "30346": 478, "31556": 478, "31516": 478, "31525": 478, "sqlite3_prepare_v2": 478, "27541": 478, "31351": 478, "31537": 478, "30085": 478, "31696": 478, "31625": 478, "ranlib": 478, "31624": 478, "22140": 478, "31569": 478, "31536": 478, "31460": 478, "flist": 478, "31649": 478, "_htest": 478, "_utest": 478, "31559": 478, "test_brows": 478, "31459": 478, "yesterday": 478, "31500": 478, "hidpi": 478, "31532": 478, "29781": 478, "29505": 478, "fuzz": 478, "30947": 478, "30730": 478, "30694": 478, "9233": 478, "9063": 478, "0718": 478, "0876": 478, "flood": 478, "5300": 478, "xml_sethashsalt": 478, "30500": 478, "splithost": 478, "29591": 478, "4472": 478, "537": 478, "31490": 478, "31471": 478, "31418": 478, "31416": 478, "defaultact": 478, "31411": 478, "onceregistri": 478, "31373": 478, "demot": 478, "30465": 478, "30860": 478, "31347": 478, "_pyobject_fastcall_prepend": 478, "31343": 478, "sysmacro": 478, "libray": 478, "31291": 478, "31271": 478, "31243": 478, "30721": 478, "31070": 478, "_get_module_lock": 478, "30747": 478, "_py_atomic_stor": 478, "_py_atomic_load": 478, "31095": 478, "31071": 478, "30978": 478, "30808": 478, "_py_atom": 478, "30876": 478, "reimport": 478, "30703": 478, "30765": 478, "pthread_mutex_lock": 478, "31161": 478, "30814": 478, "30736": 478, "30604": 478, "co_extra_freefunc": 478, "30597": 478, "30682": 478, "30501": 478, "30486": 478, "25324": 478, "29104": 478, "27945": 478, "duan": 478, "griffin": 478, "25794": 478, "30039": 478, "12414": 478, "29839": 478, "29914": 478, "29949": 478, "29935": 478, "29816": 478, "29894": 478, "29859": 478, "pthread_": 478, "29849": 478, "28856": 478, "29723": 478, "29139": 478, "29714": 478, "29695": 478, "28893": 478, "28876": 478, "29683": 478, "coleman": 478, "29684": 478, "segv": 478, "28598": 478, "29607": 478, "29602": 478, "29347": 478, "29438": 478, "29478": 478, "mircea": 478, "cosbuc": 478, "29319": 478, "runmainfromimport": 478, "29337": 478, "29327": 478, "29034": 478, "path_convert": 478, "29159": 478, "29049": 478, "28932": 478, "25677": 478, "layzel": 478, "28596": 478, "26919": 478, "28991": 478, "28147": 478, "28739": 478, "28512": 478, "28918": 478, "28797": 478, "pyeval_getcallstat": 478, "28782": 478, "28774": 478, "28731": 478, "_pydict_newpres": 478, "28532": 478, "27100": 478, "ellington": 478, "28746": 478, "26920": 478, "langinfo": 478, "28648": 478, "astral": 478, "28665": 478, "19398": 478, "28621": 478, "28580": 478, "28583": 478, "28128": 478, "28509": 478, "28426": 478, "28517": 478, "28214": 478, "23782": 478, "_pytraceback_add": 478, "28183": 478, "28379": 478, "28376": 478, "range_iter": 478, "26906": 478, "18287": 478, "koep": 478, "24098": 478, "28201": 478, "28350": 478, "26617": 478, "27942": 478, "28289": 478, "21578": 478, "28203": 478, "soumya": 478, "sharma": 478, "28086": 478, "unscath": 478, "27955": 478, "28192": 478, "27441": 478, "27222": 478, "long_rshift": 478, "28131": 478, "compile_sourc": 478, "28126": 478, "py_memcpi": 478, "28120": 478, "26182": 478, "28721": 478, "31499": 478, "31482": 478, "mitar": 478, "31544": 478, "31234": 478, "31431": 478, "approx": 478, "31400": 478, "27629": 478, "28958": 478, "28182": 478, "27340": 478, "31178": 478, "31350": 478, "31170": 478, "31326": 478, "27144": 478, "31281": 478, "10746": 478, "22536": 478, "29741": 478, "31249": 478, "workitem": 478, "31247": 478, "31238": 478, "serverthread": 478, "docserv": 478, "serve_until_quit": 478, "5001": 478, "31109": 478, "30102": 478, "openssl_add_all_algorithms_noconf": 478, "power8": 478, "serra": 478, "scalet": 478, "31183": 478, "diagnosi": 478, "luciano": 478, "ramalho": 478, "uninform": 478, "convert_to_error": 478, "31169": 478, "drallensmith": 478, "31185": 478, "include_fil": 478, "31135": 478, "31107": 478, "31061": 478, "30987": 478, "30502": 478, "30919": 478, "26732": 478, "29403": 478, "gallagh": 478, "30961": 478, "19896": 478, "30946": 478, "25684": 478, "30886": 478, "29854": 478, "30319": 478, "30828": 478, "cfutur": 478, "30807": 478, "30441": 478, "29293": 478, "sleeper": 478, "30532": 478, "9146": 478, "29169": 478, "30119": 478, "30879": 478, "30746": 478, "30664": 478, "29212": 478, "y_n": 478, "29755": 478, "30616": 478, "30038": 478, "23894": 478, "24484": 478, "30589": 478, "28994": 478, "30645": 478, "alexandru": 478, "ardelean": 478, "30624": 478, "30595": 478, "30605": 478, "29870": 478, "sgha": 478, "er": 478, "27585": 478, "mathieu": 478, "sornay": 478, "30418": 478, "30463": 478, "30557": 478, "30245": 478, "yuan": 478, "30378": 478, "30470": 478, "wijaya": 478, "30414": 478, "_feed": 478, "30003": 478, "30149": 478, "30301": 478, "30375": 478, "30329": 478, "wsaeinval": 478, "10022": 478, "29196": 478, "30299": 478, "30048": 478, "30266": 478, "30340": 478, "30298": 478, "weaken": 478, "subsequenti": 478, "29990": 478, "30243": 478, "30185": 478, "fasaraki": 478, "hilliard": 478, "30205": 478, "30228": 478, "30190": 478, "30101": 478, "29822": 478, "nate": 478, "soar": 478, "29960": 478, "bryan": 478, "30070": 478, "22352": 478, "30061": 478, "sizeabl": 478, "30218": 478, "30068": 478, "_iobas": 478, "29694": 478, "29692": 478, "unchain": 478, "siddharth": 478, "velankar": 478, "26187": 478, "9303": 478, "30017": 478, "29998": 478, "29649": 478, "29931": 478, "sanjay": 478, "sundaresan": 478, "29953": 478, "29942": 478, "10030": 478, "29204": 478, "27863": 478, "28699": 478, "23890": 478, "29901": 478, "25803": 478, "29861": 478, "29884": 478, "zeitouni": 478, "25455": 478, "29800": 478, "seifert": 478, "8256": 478, "29619": 478, "28298": 478, "intabl": 478, "29645": 478, "28231": 478, "26915": 478, "29623": 478, "_v2": 478, "28963": 478, "subprocessstreamprotocol": 478, "29271": 478, "29703": 478, "29615": 478, "motejlek": 478, "29376": 478, "28624": 478, "sayan": 478, "chowdhuri": 478, "28518": 478, "29742": 478, "29532": 478, "29110": 478, "29534": 478, "_pydecim": 478, "29100": 478, "29416": 478, "29444": 478, "wgh": 478, "29368": 478, "29338": 478, "29335": 478, "29290": 478, "28735": 478, "magickmock": 478, "29197": 478, "29210": 478, "29219": 478, "29195": 478, "28969": 478, "29142": 478, "28961": 478, "jiajun": 478, "huang": 478, "15812": 478, "brees": 478, "28985": 478, "dingyuan": 478, "29079": 478, "13051": 478, "tycho": 478, "andersen": 478, "9770": 478, "28427": 478, "28923": 478, "28871": 478, "19542": 478, "16255": 478, "28779": 478, "26937": 478, "27030": 478, "28835": 478, "28752": 478, "28727": 478, "sre_pattern": 478, "18383": 478, "20572": 478, "25659": 478, "28548": 478, "19717": 478, "28563": 478, "28387": 478, "cufr": 478, "27517": 478, "fogl": 478, "28549": 478, "ncurses6": 478, "28449": 478, "23262": 478, "broytman": 478, "24241": 478, "27939": 478, "28255": 478, "prweek": 478, "20491": 478, "kaarl": 478, "ritvanen": 478, "28353": 478, "28430": 478, "27025": 478, "25464": 478, "header_exist": 478, "addin": 478, "28488": 478, "28469": 478, "28115": 478, "18219": 478, "28448": 478, "23214": 478, "28480": 478, "28240": 478, "24452": 478, "20766": 478, "27998": 478, "28317": 478, "28380": 478, "28229": 478, "28321": 478, "28225": 478, "28227": 478, "27358": 478, "28322": 478, "leitch": 478, "28228": 478, "28226": 478, "28314": 478, "28148": 478, "localtime_r": 478, "schouten": 478, "28253": 478, "28275": 478, "27897": 478, "18893": 478, "madison": 478, "27611": 478, "displaystyl": 478, "27348": 478, "5a2": 478, "25651": 478, "27778": 478, "28200": 478, "25400": 478, "_sendfile_use_sendfil": 478, "28075": 478, "error_access_deni": 478, "25270": 478, "escape_encod": 478, "28181": 478, "antigrav": 478, "kaartic": 478, "sivaraam": 478, "25895": 478, "gerg": 478, "imreh": 478, "holtermann": 478, "28114": 478, "parse_envlist": 478, "27599": 478, "27906": 478, "conway": 478, "28174": 478, "larson": 478, "26654": 478, "iceboy": 478, "26909": 478, "28176": 478, "selectorloop": 478, "27759": 478, "28325": 478, "macurl2path": 478, "28368": 478, "28371": 478, "28372": 478, "28399": 478, "27972": 478, "24142": 478, "florian": 478, "29581": 478, "25532": 478, "30177": 478, "pietri": 478, "31294": 478, "21649": 478, "30803": 478, "thomassen": 478, "30176": 478, "30052": 478, "26985": 478, "19824": 478, "20314": 478, "12518": 478, "28929": 478, "25008": 478, "26355": 478, "29349": 478, "28513": 478, "29639": 478, "hostv4": 478, "hostv6": 478, "31320": 478, "31346": 478, "25674": 478, "tbs": 478, "30715": 478, "30822": 478, "extralargefil": 478, "test_zipfile64": 478, "30695": 478, "set_nomemori": 478, "remove_mem_hook": 478, "30357": 478, "grzegorz": 478, "grzywacz": 478, "30197": 478, "24932": 478, "28950": 478, "28683": 478, "26936": 478, "28666": 478, "23839": 478, "26944": 478, "28409": 478, "28217": 478, "_testconsol": 478, "26939": 478, "armv7": 478, "31354": 478, "21st": 478, "31341": 478, "30854": 478, "30687": 478, "vcvarsal": 478, "20210": 478, "29941": 478, "28787": 478, "29243": 478, "29643": 478, "27593": 478, "29572": 478, "27659": 478, "29384": 478, "26851": 478, "28768": 478, "_setmod": 478, "29080": 478, "23903": 478, "r13": 478, "20211": 478, "28849": 478, "_multiarch": 478, "10656": 478, "tristan": 478, "haubenwalln": 478, "optimi": 478, "28444": 478, "28208": 478, "28248": 478, "21124": 478, "13756": 478, "roumen": 478, "petrov": 478, "21085": 478, "rebas": 478, "28258": 478, "estonian": 478, "26661": 478, "15819": 478, "28676": 478, "gareth": 478, "ree": 478, "30389": 478, "31358": 478, "31340": 478, "v141": 478, "30581": 478, "30916": 478, "30731": 478, "gadget": 478, "23451": 478, "29579": 478, "25778": 478, "28896": 478, "28522": 478, "getpathp": 478, "28402": 478, "28333": 478, "28251": 478, "28110": 478, "28161": 478, "28162": 478, "28163": 478, "_open_osfhandl": 478, "28164": 478, "_pyio_get_console_typ": 478, "28138": 478, "31493": 478, "31488": 478, "parenmatch": 478, "31477": 478, "31480": 478, "31421": 478, "31414": 478, "31051": 478, "genpag": 478, "30617": 478, "outwin": 478, "31287": 478, "test_configdialog": 478, "keyset": 478, "31206": 478, "highpag": 478, "31001": 478, "31205": 478, "keyspag": 478, "31130": 478, "31002": 478, "19903": 478, "31083": 478, "tabpag": 478, "31050": 478, "31004": 478, "fontpag": 478, "30781": 478, "31060": 478, "30853": 478, "vartrac": 478, "31003": 478, "30993": 478, "causal": 478, "create_font_tab": 478, "set_sampl": 478, "var_changed_font": 478, "test_font_set": 478, "test_indent_scal": 478, "30981": 478, "28523": 478, "30917": 478, "idleconf": 478, "30934": 478, "30913": 478, "30899": 478, "30881": 478, "30851": 478, "30870": 478, "8231": 478, "getusercfgdir": 478, "30779": 478, "configchang": 478, "changes_class_v4": 478, "test_config": 478, "changestest": 478, "configdialog_tests_v1": 478, "msg297804": 478, "30777": 478, "30495": 478, "textview": 478, "pep8": 478, "30723": 478, "30674": 478, "21519": 478, "29910": 478, "30728": 478, "6739": 478, "25514": 478, "subsubsect": 478, "30642": 478, "30290": 478, "30303": 478, "29071": 478, "28572": 478, "30983": 478, "polaco": 478, "penteado": 478, "29748": 478, "24037": 478, "29367": 478, "wrapperobject": 478, "28023": 478, "15369": 478, "microbenchmark": 478, "28102": 478, "30832": 478, "py_have_native_tl": 478, "29083": 478, "29058": 478, "28808": 478, "28748": 478, "_py_packagecontext": 478, "2o": 478, "29706": 478, "30353": 478, "32555": 478, "31518": 478, "sslv23_method": 478, "4rc1": 478, "31852": 478, "31641": 478, "3rc1": 478, "31662": 478, "uploadreleas": 478, "31423": 478, "29600": 478, "2159": 478, "26293": 478, "29094": 478, "29519": 478, "29316": 478, "29011": 478, "29203": 478, "29085": 478, "29061": 478, "brendan": 478, "donegan": 478, "29119": 478, "andra": 478, "bogildea": 478, "29055": 478, "neaten": 478, "29326": 478, "29409": 478, "29392": 478, "28087": 478, "test_asyncor": 478, "test_eintr": 478, "28990": 478, "hoho": 478, "28770": 478, "28898": 478, "have_long_long": 478, "28843": 478, "28600": 478, "28634": 478, "28639": 478, "mayfield": 478, "28652": 478, "28653": 478, "28703": 478, "28704": 478, "28471": 478, "28492": 478, "28500": 478, "26923": 478, "ebk": 478, "26796": 478, "lawrenz": 478, "25221": 478, "27080": 478, "27199": 478, "27948": 478, "x7b": 478, "x7d": 478, "28046": 478, "28071": 478, "25758": 478, "25856": 478, "26331": 478, "27999": 478, "26058": 478, "27911": 478, "exec_builtin_or_dynam": 478, "27961": 478, "27355": 478, "27870": 478, "25402": 478, "27214": 478, "long_invert": 478, "long_add": 478, "27506": 478, "27812": 478, "27811": 478, "27587": 478, "pvs": 478, "_pystate_addmodul": 478, "27792": 478, "26984": 478, "25604": 478, "24254": 478, "27662": 478, "list_new": 478, "py_size_max": 478, "27782": 478, "py_create_mod": 478, "27936": 478, "27487": 478, "27157": 478, "27558": 478, "28008": 478, "28732": 478, "28485": 478, "28037": 478, "sqlite3_get_autocommit": 478, "intransact": 478, "25283": 478, "10740": 478, "28070": 478, "24693": 478, "27137": 478, "1703178": 478, "28019": 478, "18401": 478, "matusiak": 478, "kimbrel": 478, "25969": 478, "14977": 478, "1542": 478, "28082": 478, "24594": 478, "17582": 478, "28047": 478, "27576": 478, "28027": 478, "27445": 478, "22450": 478, "pgen3": 478, "load_grammar": 478, "28005": 478, "26667": 478, "27570": 478, "22233": 478, "27988": 478, "tautolog": 478, "27776": 478, "27691": 478, "gen_rid": 478, "25761": 478, "sweet32": 478, "25387": 478, "27866": 478, "11620": 478, "12885": 478, "27881": 478, "27861": 478, "19884": 478, "27706": 478, "nofar": 478, "schnider": 478, "10513": 478, "_get_type_var": 478, "_eval_typ": 478, "27832": 478, "27539": 478, "21718": 478, "ctes": 478, "2466": 478, "27573": 478, "27930": 478, "andrad": 478, "21201": 478, "wojciech": 478, "walczak": 478, "15308": 478, "bayard": 478, "randel": 478, "27922": 478, "27891": 478, "17642": 478, "25564": 478, "27821": 478, "26900": 478, "26027": 478, "27427": 478, "couzo": 478, "27953": 478, "26040": 478, "test_math": 478, "test_cmath": 478, "rigour": 478, "27787": 478, "27566": 478, "27705": 478, "validate_ucrtbas": 478, "27976": 478, "27983": 478, "26307": 478, "27917": 478, "25825": 478, "libpl": 478, "2a4": 478, "21122": 478, "17128": 478, "27952": 478, "fixcid": 478, "28065": 478, "25144": 478, "1602": 478, "27731": 478, "aliasmbc": 478, "20366": 478, "27756": 478, "cherri": 478, "27883": 478, "27704": 478, "22557": 478, "17596": 478, "wincrypt": 478, "gw": 478, "17599": 478, "reparse_data_buff": 478, "27507": 478, "27581": 478, "27419": 478, "27083": 478, "27514": 478, "27366": 478, "27524": 478, "27736": 478, "27038": 478, "27773": 478, "26750": 478, "descriptortyp": 478, "26800": 478, "26981": 478, "27783": 478, "27774": 478, "27760": 478, "27758": 478, "27568": 478, "httpoxi": 478, "1000110": 478, "7063": 478, "chuck": 478, "27656": 478, "sched_": 478, "27130": 478, "27567": 478, "27533": 478, "_isdir": 478, "17711": 478, "27522": 478, "27512": 478, "27714": 478, "text_textview": 478, "test_autocomplet": 478, "27621": 478, "27620": 478, "27609": 478, "25507": 478, "27173": 478, "confighandl": 478, "25805": 478, "test_pkgutil": 478, "27472": 478, "27369": 478, "test_pyexpat": 478, "27594": 478, "test_ast": 478, "27647": 478, "27610": 478, "27469": 478, "27309": 478, "27713": 478, "27453": 478, "27641": 478, "26662": 478, "python_for_gen": 478, "10910": 478, "freedbsd": 478, "27278": 478, "22636": 478, "27473": 478, "27443": 478, "27007": 478, "26844": 478, "lev": 478, "maximov": 478, "23804": 478, "27466": 478, "time2netscap": 478, "27319": 478, "27079": 478, "27294": 478, "27048": 478, "27330": 478, "27238": 478, "27122": 478, "issue25782": 478, "26386": 478, "16182": 478, "27477": 478, "test_help": 478, "27380": 478, "sectionnam": 478, "helpsourc": 478, "itw": 478, "27372": 478, "27365": 478, "27245": 478, "24137": 478, "27310": 478, "28066": 478, "27442": 478, "android_api_level": 478, "27434": 478, "26930": 478, "2h": 478, "23968": 478, "machdep": 478, "platform_triplet": 478, "ldversion": 478, "_sysconfigdata": 478, "27332": 478, "27418": 478, "importbench": 478, "19489": 478, "27285": 478, "pierci": 478, "27027": 478, "26556": 478, "1283": 478, "0772": 478, "oststrom": 478, "26839": 478, "colm": 478, "buckley": 478, "27190": 478, "sawyer": 478, "27286": 478, "27066": 478, "26983": 478, "27097": 478, "23275": 478, "20508": 478, "21386": 478, "07a5610bae9d": 478, "luethi": 478, "27029": 478, "20900": 478, "ingrid": 478, "25738": 478, "susumu": 478, "koshiba": 478, "21313": 478, "27164": 478, "24291": 478, "serverhandl": 478, "21272": 478, "26809": 478, "26373": 478, "flip": 478, "sigiot": 478, "27167": 478, "25931": 478, "21776": 478, "26526": 478, "27114": 478, "_load_windows_store_cert": 478, "5124": 478, "24750": 478, "24759": 478, "27239": 478, "isxyztk": 478, "27262": 478, "27196": 478, "20567": 478, "27156": 478, "27117": 478, "26673": 478, "21939": 478, "percol": 478, "21676": 478, "18410": 478, "westley": 478, "mart": 478, "nez": 478, "21703": 478, "27044": 478, "remove_var_callback": 478, "23977": 478, "test_deleg": 478, "16484": 478, "rodman": 478, "kaushik": 478, "nadikud": 478, "24136": 478, "22558": 478, "yoni": 478, "lavi": 478, "25285": 478, "27064": 478, "17500": 478, "pythondotorg": 478, "945": 478, "27229": 478, "26657": 478, "hagemeist": 478, "26313": 478, "baji": 478, "25939": 478, "20041": 478, "26168": 478, "26991": 478, "27039": 478, "23640": 478, "27005": 478, "18531": 478, "26811": 478, "20120": 478, "pypirc": 478, "26802": 478, "26659": 478, "26718": 478, "27138": 478, "27147": 478, "25339": 478, "26494": 478, "26581": 478, "19711": 478, "21099": 478, "26563": 478, "26558": 478, "26464": 478, "22836": 478, "26302": 478, "26136": 478, "anish": 478, "shah": 478, "26204": 478, "4806": 478, "23601": 478, "25843": 478, "26107": 478, "26154": 478, "_pythreadstate_uncheckedget": 478, "_pythreadstate_curr": 478, "22995": 478, "_pyobject_getst": 478, "25961": 478, "25973": 478, "20440": 478, "25766": 478, "25421": 478, "25709": 478, "24097": 478, "24731": 478, "25630": 478, "23564": 478, "fds_to_pass": 478, "25388": 478, "25462": 478, "24802": 478, "overread": 478, "25555": 478, "24726": 478, "25449": 478, "25395": 478, "_pybyteswrit": 478, "25274": 478, "24402": 478, "24806": 478, "24848": 478, "misform": 478, "25280": 478, "25003": 478, "9232": 478, "24965": 478, "26478": 478, "26171": 478, "25660": 478, "26288": 478, "26289": 478, "26315": 478, "25887": 478, "27057": 478, "eaccess": 478, "bednarski": 478, "27014": 478, "tuur": 478, "27031": 478, "14132": 478, "janech": 478, "17214": 478, "27033": 478, "27034": 478, "26892": 478, "22274": 478, "26807": 478, "yolanda": 478, "robla": 478, "25745": 478, "26977": 478, "26002": 478, "upendra": 478, "kuma": 478, "25974": 478, "26996": 478, "26881": 478, "23815": 478, "17765": 478, "26873": 478, "responseerror": 478, "26711": 478, "24114": 478, "crle": 478, "kee": 478, "26864": 478, "24902": 478, "26634": 478, "26804": 478, "lower_cas": 478, "mixed_cas": 478, "26837": 478, "26041": 478, "kumaripaba": 478, "miyurusara": 478, "athukorala": 478, "26822": 478, "26733": 478, "26801": 478, "24838": 478, "26717": 478, "ize": 478, "26782": 478, "26735": 478, "024": 478, "26585": 478, "_quote_html": 478, "16329": 478, "webm": 478, "13952": 478, "26709": 478, "y2038": 478, "23735": 478, "25951": 478, "26586": 478, "26676": 478, "22854": 478, "26641": 478, "docfiletest": 478, "25195": 478, "3603bae63c13": 478, "plummer": 478, "26644": 478, "26616": 478, "26637": 478, "21925": 478, "26530": 478, "_pytracemalloc_track": 478, "_pytracemalloc_untrack": 478, "_pytracemalloc_gettraceback": 478, "_tracemalloc": 478, "24266": 478, "26590": 478, "18787": 478, "26560": 478, "inglesbi": 478, "_showwarnmsg": 478, "26569": 478, "26499": 478, "ghost": 478, "25320": 478, "den": 478, "elzen": 478, "16181": 478, "http2time": 478, "26513": 478, "23718": 478, "tam": 478, "benc": 478, "gedai": 478, "20589": 478, "26177": 478, "15068": 478, "2202": 478, "get_algorithm_impl": 478, "dupuy": 478, "26167": 478, "25718": 478, "26475": 478, "26457": 478, "26385": 478, "26402": 478, "25913": 478, "swati": 478, "jaiswal": 478, "26186": 478, "26367": 478, "26309": 478, "25995": 478, "23992": 478, "mapresult": 478, "26117": 478, "25949": 478, "25911": 478, "26045": 478, "12923": 478, "brazil": 478, "rocco": 478, "25945": 478, "26202": 478, "23076": 478, "nyberg": 478, "19883": 478, "26099": 478, "26147": 478, "25935": 478, "16620": 478, "26013": 478, "25850": 478, "25822": 478, "22642": 478, "24705": 478, "_parse_makefil": 478, "26069": 478, "22138": 478, "mcculli": 478, "25672": 478, "ssl_mode_release_buff": 478, "26012": 478, "24120": 478, "ulrich": 478, "25447": 478, "25802": 478, "24103": 478, "25860": 478, "samson": 478, "25914": 478, "25902": 478, "22227": 478, "25717": 478, "5a1": 478, "24903": 478, "25764": 478, "25771": 478, "6478": 478, "14285": 478, "19771": 478, "25177": 478, "10131": 478, "ganisin": 478, "7990": 478, "santoso": 478, "25725": 478, "25663": 478, "25688": 478, "23914": 478, "25691": 478, "25624": 478, "25626": 478, "uint_max": 478, "25583": 478, "6973": 478, "mauro": 478, "25590": 478, "25498": 478, "eryksun": 478, "25584": 478, "25446": 478, "18010": 478, "25554": 478, "18973": 478, "25510": 478, "ryosuk": 478, "ito": 478, "25503": 478, "vandenberg": 478, "25515": 478, "21827": 478, "25390": 478, "25441": 478, "25410": 478, "25411": 478, "simon04": 478, "25407": 478, "25406": 478, "25364": 478, "25328": 478, "enable_smtputf8": 478, "25316": 478, "distutilsplatformerror": 478, "25380": 478, "stack_glob": 478, "23972": 478, "reuseport": 478, "reuseaddr": 478, "25304": 478, "25232": 478, "cgirequesthandl": 478, "24657": 478, "23600": 478, "25203": 478, "22241": 478, "23517": 478, "24633": 478, "24874": 478, "24360": 478, "23426": 478, "run_setup": 478, "13938": 478, "stringtyp": 478, "8585": 478, "zipimporter2": 478, "18622": 478, "palumbo": 478, "laurent": 478, "buyst": 478, "24426": 478, "23661": 478, "ignacio": 478, "rossi": 478, "25578": 478, "getpeerc": 478, "25530": 478, "25569": 478, "25471": 478, "25319": 478, "26050": 478, "25924": 478, "26406": 478, "26848": 478, "20640": 478, "confighelpsourceedit": 478, "iobind": 478, "25905": 478, "15348": 478, "24455": 478, "15347": 478, "vwait": 478, "25313": 478, "currentthem": 478, "24782": 478, "22726": 478, "24820": 478, "cobalt": 478, "25224": 478, "24972": 478, "24570": 478, "24988": 478, "scrolledlist": 478, "24801": 478, "25173": 478, "25198": 478, "pitch": 478, "blueish": 478, "25225": 478, "21995": 478, "22820": 478, "25219": 478, "24861": 478, "idleib": 478, "25199": 478, "16893": 478, "helpdialog": 478, "helt": 478, "24199": 478, "idlev": 478, "24790": 478, "26736": 478, "6953": 478, "23606": 478, "24952": 478, "mattip": 478, "26014": 478, "21916": 478, "loys": 478, "26295": 478, "testdir": 478, "26523": 478, "26015": 478, "26325": 478, "25940": 478, "25616": 478, "test_collect": 478, "test_ordered_dict": 478, "25188": 478, "22806": 478, "18174": 478, "25260": 478, "26583": 478, "test_timestamp_overflow": 478, "test_import": 478, "21277": 478, "ffi_conveni": 478, "26884": 478, "rtld_": 478, "22359": 478, "21668": 478, "_ctypes_test": 478, "25702": 478, "26624": 478, "17603": 478, "fileblock": 478, "26079": 478, "bjoern": 478, "thiel": 478, "26465": 478, "2g": 478, "25348": 478, "build_pgo": 478, "25827": 478, "25696": 478, "j9": 478, "24986": 478, "_math": 478, "26268": 478, "25136": 478, "24324": 478, "27053": 478, "make_zip": 478, "prepare_ssl": 478, "26071": 478, "26073": 478, "26065": 478, "25022": 478, "example_nt": 478, "26799": 478, "ilsch": 478, "26271": 478, "shaulov": 478, "26489": 478, "26316": 478, "25440": 478, "26312": 478, "26198": 478, "32551": 478, "6rc1": 478, "30657": 478, "1000158": 478, "bosamiya": 478, "29537": 478, "30383": 478, "30523": 478, "matchfil": 478, "30540": 478, "warm": 478, "30675": 478, "29073": 478, "28189": 478, "dictitems_contain": 478, "26020": 478, "19003": 478, "26664": 478, "ld_so_aix": 478, "26867": 478, "26194": 478, "17633": 478, "27223": 478, "_read_readi": 478, "_conn_lost": 478, "22970": 478, "25500": 478, "25715": 478, "25182": 478, "stdprinter": 478, "25131": 478, "25150": 478, "_py_atomic_xxx": 478, "openmp": 478, "24483": 478, "22958": 478, "22609": 478, "25111": 478, "25262": 478, "binbytes8": 478, "binunicode8": 478, "25034": 478, "anthon": 478, "neut": 478, "25233": 478, "23329": 478, "_unpickler_read": 478, "25047": 478, "25135": 478, "deque_clear": 478, "19143": 478, "25092": 478, "25155": 478, "25108": 478, "25118": 478, "24684": 478, "25060": 478, "24857": 478, "kaptur": 478, "23144": 478, "24982": 478, "25019": 478, "16180": 478, "24891": 478, "24992": 478, "24881": 478, "21112": 478, "24764": 478, "read_multi": 478, "landri": 478, "24913": 478, "bryce": 478, "darl": 478, "24774": 478, "chiu": 478, "hsiang": 478, "hsu": 478, "21159": 478, "20362": 478, "ilia": 478, "kurenkov": 478, "23572": 478, "12067": 478, "23725": 478, "24808": 478, "weston": 478, "22812": 478, "mca": 478, "nulti": 478, "25099": 478, "23919": 478, "24915": 478, "24910": 478, "msis": 478, "25450": 478, "25164": 478, "25143": 478, "25163": 478, "25089": 478, "25165": 478, "25112": 478, "25102": 478, "25081": 478, "25091": 478, "25126": 478, "25213": 478, "requestedexecutionlevel": 478, "25071": 478, "25029": 478, "test_strptim": 478, "25027": 478, "24305": 478, "24912": 478, "24975": 478, "24917": 478, "time_strftim": 478, "24748": 478, "24635": 478, "24989": 478, "24769": 478, "21167": 478, "24492": 478, "24847": 478, "24839": 478, "24867": 478, "24667": 478, "odict": 478, "24824": 478, "24634": 478, "24798": 478, "_msvccompil": 478, "4395": 478, "23973": 478, "23004": 478, "hill": 478, "23888": 478, "23652": 478, "22932": 478, "shachnev": 478, "23779": 478, "23319": 478, "gautier": 478, "23254": 478, "19450": 478, "17527": 478, "sbardella": 478, "24791": 478, "23672": 478, "mohd": 478, "sanad": 478, "zaki": 478, "rizvi": 478, "24745": 478, "tkfixedfont": 478, "fontxxx": 478, "21192": 478, "adnan": 478, "umer": 478, "13884": 478, "tearoff": 478, "24129": 478, "20769": 478, "dorian": 478, "pula": 478, "23589": 478, "yongzhi": 478, "24729": 478, "24751": 478, "24569": 478, "24583": 478, "24407": 478, "24619": 478, "24687": 478, "15944": 478, "23441": 478, "sekera": 478, "24683": 478, "21697": 478, "eduardo": 478, "seabra": 478, "24695": 478, "24620": 478, "22485": 478, "22153": 478, "evilzero": 478, "24580": 478, "24206": 478, "24631": 478, "24608": 478, "18684": 478, "24259": 478, "24669": 478, "kai": 478, "groner": 478, "24688": 478, "24603": 478, "24467": 478, "24345": 478, "py_tp_fin": 478, "21750": 478, "24552": 478, "24514": 478, "19176": 478, "20387": 478, "24456": 478, "24336": 478, "24522": 478, "24489": 478, "24408": 478, "24347": 478, "24348": 478, "24359": 478, "24368": 478, "24362": 478, "24377": 478, "24369": 478, "24373": 478, "_testmultiphas": 478, "16690": 478, "24458": 478, "24351": 478, "24432": 478, "24115": 478, "_pydict_contain": 478, "24328": 478, "11205": 478, "24285": 478, "23247": 478, "5633": 478, "24326": 478, "23934": 478, "24276": 478, "23955": 478, "24257": 478, "22939": 478, "23985": 478, "24102": 478, "7x": 478, "23290": 478, "set_merg": 478, "2292": 478, "24096": 478, "23996": 478, "23911": 478, "24192": 478, "24022": 478, "22906": 478, "24230": 478, "24244": 478, "15836": 478, "wagner": 478, "9858": 478, "laura": 478, "rupprecht": 478, "22107": 478, "23780": 478, "6598": 478, "24091": 478, "21931": 478, "fci": 478, "armstrong": 478, "mangle_from": 478, "18682": 478, "23796": 478, "hergenroed": 478, "24155": 478, "20274": 478, "24134": 478, "23880": 478, "getdoubl": 478, "24094": 478, "9246": 478, "1025": 478, "23917": 478, "23008": 478, "23908": 478, "23728": 478, "23887": 478, "24178": 478, "24179": 478, "22547": 478, "23898": 478, "bayer": 478, "24298": 478, "23184": 478, "sweigart": 478, "21520": 478, "9517": 478, "christi": 478, "22155": 478, "24029": 478, "24077": 478, "24000": 478, "24001": 478, "23330": 478, "24031": 478, "22980": 478, "kfreebsd": 478, "22631": 478, "courtesi": 478, "23731": 478, "23726": 478, "23309": 478, "22977": 478, "23466": 478, "24044": 478, "21354": 478, "23840": 478, "23703": 478, "901e4e52b20a": 478, "_curs": 478, "19933": 478, "calledprocess": 478, "21217": 478, "balling": 478, "allison": 478, "24521": 478, "22931": 478, "23811": 478, "21116": 478, "boquien": 478, "22982": 478, "23529": 478, "21859": 478, "23865": 478, "23400": 478, "10838": 478, "23411": 478, "23881": 478, "22721": 478, "15133": 478, "23338": 478, "kato": 478, "16840": 478, "23834": 478, "23618": 478, "21526": 478, "23836": 478, "18473": 478, "3to2": 478, "23485": 478, "23752": 478, "23745": 478, "22117": 478, "23310": 478, "kasia": 478, "jachim": 478, "23817": 478, "sovers": 478, "23501": 478, "23799": 478, "22390": 478, "18128": 478, "23935": 478, "23944": 478, "20586": 478, "23492": 478, "23500": 478, "23998": 478, "pyimport_reinitlock": 478, "23753": 478, "23192": 478, "23629": 478, "14260": 478, "23792": 478, "pipepag": 478, "23775": 478, "23765": 478, "isbadstringptr": 478, "22364": 478, "23742": 478, "21802": 478, "23502": 478, "17530": 478, "22687": 478, "tetxtwrap": 478, "4727": 478, "23657": 478, "23688": 478, "23647": 478, "23539": 478, "22351": 478, "23715": 478, "23646": 478, "23136": 478, "carrol": 478, "23700": 478, "bohuslav": 478, "kabrda": 478, "22903": 478, "23631": 478, "rdivmod": 478, "23138": 478, "23051": 478, "diamant": 478, "22928": 478, "23615": 478, "23585": 478, "23583": 478, "22289": 478, "test_urllib2net": 478, "22826": 478, "bkfile": 478, "23571": 478, "23103": 478, "23476": 478, "x509_v_flag_trusted_first": 478, "23576": 478, "stall": 478, "23504": 478, "23563": 478, "19980": 478, "23521": 478, "21619": 478, "6639": 478, "814253": 478, "23215": 478, "aleksi": 478, "torhamo": 478, "5700": 478, "23374": 478, "23481": 478, "21548": 478, "apropo": 478, "22885": 478, "23146": 478, "23096": 478, "19105": 478, "23421": 478, "wdv4758h": 478, "23367": 478, "23361": 478, "19705": 478, "yeo": 478, "23801": 478, "23445": 478, "23686": 478, "23465": 478, "23285": 478, "22735": 478, "22896": 478, "21295": 478, "16795": 478, "22986": 478, "15859": 478, "campbel": 478, "barton": 478, "21408": 478, "23321": 478, "23253": 478, "22038": 478, "pyatom": 478, "lima": 478, "templ": 478, "20284": 478, "23048": 478, "20335": 478, "22869": 478, "pylifecycl": 478, "22335": 478, "0x7fffffff": 478, "22653": 478, "22643": 478, "22604": 478, "21052": 478, "22470": 478, "22520": 478, "22519": 478, "22518": 478, "1764286": 478, "18554": 478, "21391": 478, "11471": 478, "22215": 478, "22258": 478, "f_setfd": 478, "21389": 478, "22206": 478, "20184": 478, "22116": 478, "builtin_function_or_method": 478, "22077": 478, "20179": 478, "22082": 478, "slotdef": 478, "21897": 478, "21669": 478, "21642": 478, "42els": 478, "21523": 478, "pessimist": 478, "21418": 478, "21425": 478, "21435": 478, "21377": 478, "20355": 478, "21274": 478, "path_max": 478, "20904": 478, "fpu": 478, "m68k": 478, "21209": 478, "21193": 478, "21134": 478, "19537": 478, "20929": 478, "20731": 478, "20637": 478, "ingebretson": 478, "19995": 478, "19655": 478, "12546": 478, "13598": 478, "elson": 478, "8931": 478, "23165": 478, "23399": 478, "13128": 478, "23099": 478, "23326": 478, "23363": 478, "23364": 478, "23366": 478, "23369": 478, "encode_basestring_ascii": 478, "23353": 478, "why_yield": 478, "why_return": 478, "14099": 478, "tellabl": 478, "18518": 478, "23094": 478, "23268": 478, "19996": 478, "23248": 478, "23098": 478, "dev_t": 478, "21817": 478, "23250": 478, "23063": 478, "23209": 478, "23225": 478, "23143": 478, "23132": 478, "23112": 478, "23093": 478, "23111": 478, "22585": 478, "19104": 478, "23071": 478, "22783": 478, "15513": 478, "19858": 478, "22095": 478, "23016": 478, "21775": 478, "vfat": 478, "1218234": 478, "21740": 478, "23009": 478, "22959": 478, "16043": 478, "gzip_decod": 478, "1753": 478, "22966": 478, "pyc_compil": 478, "21971": 478, "21032": 478, "22902": 478, "pach": 478, "21356": 478, "bernard": 478, "spil": 478, "22915": 478, "22921": 478, "22894": 478, "22370": 478, "22841": 478, "ludov": 478, "gasc": 478, "httpbasicpriorauthhandl": 478, "22849": 478, "12728": 478, "22821": 478, "22824": 478, "22406": 478, "17293": 478, "netstat": 478, "aivar": 478, "kalv": 478, "22769": 478, "22417": 478, "22775": 478, "22776": 478, "22665": 478, "17381": 478, "22410": 478, "22759": 478, "8876": 478, "22217": 478, "22457": 478, "18216": 478, "22676": 478, "18853": 478, "__nain__": 478, "9351": 478, "7559": 478, "21991": 478, "22641": 478, "17401": 478, "compile_": 478, "20152": 478, "18643": 478, "22435": 478, "13096": 478, "11694": 478, "22462": 478, "21173": 478, "11866": 478, "21905": 478, "21883": 478, "22219": 478, "22449": 478, "ssl_cert_dir": 478, "ssl_cert_fil": 478, "22508": 478, "20076": 478, "20079": 478, "22396": 478, "22517": 478, "23392": 478, "10510": 478, "oshmyan": 478, "22448": 478, "oliva": 478, "22427": 478, "22362": 478, "20912": 478, "21866": 478, "22278": 478, "issue22118": 478, "22415": 478, "groupref_exist": 478, "22423": 478, "21332": 478, "21091": 478, "21079": 478, "22247": 478, "22419": 478, "bobrov": 478, "22384": 478, "22168": 478, "21147": 478, "21951": 478, "22338": 478, "12410": 478, "21270": 478, "22226": 478, "19524": 478, "19546": 478, "22051": 478, "21933": 478, "21597": 478, "kani": 478, "18132": 478, "22216": 478, "22098": 478, "22185": 478, "zongker": 478, "22287": 478, "_pytime_gettimeofday": 478, "librt": 478, "22182": 478, "move_fil": 478, "22042": 478, "22236": 478, "15696": 478, "22068": 478, "22165": 478, "8797": 478, "bull": 478, "20729": 478, "21448": 478, "22184": 478, "17923": 478, "delhallt": 478, "22176": 478, "elf": 478, "abiv2": 478, "21121": 478, "21975": 478, "20170": 478, "exists_ok": 478, "22127": 478, "22085": 478, "21580": 478, "17172": 478, "21704": 478, "20173": 478, "22033": 478, "21947": 478, "16133": 478, "handle_read": 478, "22044": 478, "call_tzinfo_method": 478, "flanagan": 478, "1034h": 478, "4350": 478, "6167": 478, "15275": 478, "21888": 478, "22032": 478, "22031": 478, "21044": 478, "21966": 478, "19076": 478, "16382": 478, "21932": 478, "21942": 478, "11259": 478, "set_termin": 478, "12523": 478, "21707": 478, "replace_paths_in_cod": 478, "20639": 478, "tikhonov": 478, "21714": 478, "21151": 478, "21090": 478, "21781": 478, "21679": 478, "21863": 478, "11453": 478, "21858": 478, "21476": 478, "21729": 478, "21491": 478, "21832": 478, "21722": 478, "dengler": 478, "21723": 478, "21711": 478, "21766": 478, "21310": 478, "21256": 478, "21677": 478, "nonnorm": 478, "11709": 478, "21515": 478, "13223": 478, "writedoc": 478, "21463": 478, "21618": 478, "21552": 478, "14315": 478, "sapin": 478, "21402": 478, "3015": 478, "21513": 478, "21137": 478, "21538": 478, "21525": 478, "22166": 478, "_forget_codec": 478, "10744": 478, "nontrivi": 478, "13916": 478, "20998": 478, "21075": 478, "21226": 478, "21398": 478, "21424": 478, "heaqp": 478, "nmsmallest": 478, "21396": 478, "18314": 478, "sman": 478, "21088": 478, "21407": 478, "10650": 478, "21469": 478, "19414": 478, "21421": 478, "21101": 478, "21321": 478, "anton": 478, "afanasyev": 478, "21057": 478, "9815": 478, "13204": 478, "19385": 478, "21207": 478, "21291": 478, "21127": 478, "str_": 478, "15002": 478, "_temporaryfilewrapp": 478, "_temporaryfileclos": 478, "12220": 478, "mindom": 478, "21068": 478, "21276": 478, "use_xattr": 478, "incas": 478, "20896": 478, "21239": 478, "21203": 478, "jure": 478, "koren": 478, "21222": 478, "21197": 478, "17498": 478, "17826": 478, "7776": 478, "21529": 478, "vranken": 478, "4616": 478, "21169": 478, "21171": 478, "20539": 478, "21172": 478, "21155": 478, "21136": 478, "20636": 478, "21149": 478, "21058": 478, "21200": 478, "21013": 478, "20145": 478, "20633": 478, "20980": 478, "20990": 478, "21015": 478, "21000": 478, "20884": 478, "21499": 478, "test_api": 478, "19165": 478, "20574": 478, "20879": 478, "19157": 478, "usuabl": 478, "11599": 478, "distutils_debug": 478, "4931": 478, "grok_environment_error": 478, "20875": 478, "11558": 478, "20283": 478, "20778": 478, "20791": 478, "otten": 478, "19748": 478, "outsiz": 478, "2037": 478, "19573": 478, "20378": 478, "20816": 478, "lowin": 478, "20817": 478, "6676": 478, "gutteridg": 478, "21117": 478, "gi_": 478, "163": 478, "21311": 478, "_osx_support": 478, "szakmeist": 478, "11571": 478, "21801": 478, "21923": 478, "_config_var": 478, "21323": 478, "19435": 478, "byrn": 478, "22733": 478, "ffi_prep_arg": 478, "23302": 478, "mss": 478, "20577": 478, "formatparagraph": 478, "3068": 478, "16233": 478, "4832": 478, "21986": 478, "17390": 478, "14105": 478, "21765": 478, "hyperpars": 478, "21940": 478, "widgetredirector": 478, "18592": 478, "searchdialogbas": 478, "webster": 478, "21694": 478, "21686": 478, "12387": 478, "21695": 478, "18910": 478, "18292": 478, "autoexpand": 478, "saihadhav": 478, "18409": 478, "21477": 478, "18104": 478, "21139": 478, "21284": 478, "17654": 478, "23180": 478, "15506": 478, "pkg_prog_pkg_config": 478, "22935": 478, "22592": 478, "22591": 478, "djgpp": 478, "16537": 478, "hosmer": 478, "21958": 478, "have_round": 478, "18093": 478, "15759": 478, "linkcheck": 478, "21141": 478, "build_ssl": 478, "21037": 478, "19962": 478, "21285": 478, "15234": 478, "17861": 478, "generate_opcode_h": 478, "20644": 478, "20022": 478, "15968": 478, "17095": 478, "21811": 478, "21166": 478, "18096": 478, "17219": 478, "22919": 478, "21236": 478, "_msi": 478, "14203": 478, "bytearray_getbuff": 478, "bytesiobuf_getbuff": 478, "array_buffer_getbuf": 478, "22445": 478, "npy_relaxed_strides_check": 478, "22079": 478, "_pyobject_gc_calloc": 478, "20942": 478, "init_frozen": 478, "19548": 478, "22394": 478, "21514": 478, "21777": 478, "6916": 478, "17386": 478, "21312": 478, "thread_foobar": 478, "mccracken": 478, "21043": 478, "20765": 478, "19407": 478, "19697": 478, "18982": 478, "22838": 478, "22173": 478, "16000": 478, "test_curs": 478, "21456": 478, "remi": 478, "pointel": 478, "20746": 478, "test_pdb": 478, "22060": 478, "22104": 478, "22111": 478, "22002": 478, "21976": 478, "21918": 478, "9554": 478, "coneybear": 478, "radu": 478, "voicila": 478, "20155": 478, "19493": 478, "18492": 478, "21634": 478, "21605": 478, "21493": 478, "19925": 478, "21522": 478, "itemconfigur": 478, "paneconfigur": 478, "entryconfigur": 478, "17756": 478, "test_cod": 478, "17752": 478, "18604": 478, "21275": 478, "21223": 478, "20635": 478, "20743": 478, "test_tcl": 478, "21097": 478, "test_namespace_pkg": 478, "21503": 478, "test_both": 478, "20939": 478, "20668": 478, "21093": 478, "test_macholib": 478, "libz": 478, "22770": 478, "23211": 478, "23345": 478, "8zc": 478, "22314": 478, "22615": 478, "makelocalealia": 478, "22201": 478, "22120": 478, "18974": 478, "21906": 478, "21629": 478, "16047": 478, "11824": 478, "20535": 478, "23260": 478, "17896": 478, "17717": 478, "nasm": 478, "21907": 478, "22644": 478, "10747": 478, "kilburn": 478, "cp35": 478}, "objects": {"": [[65, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [57, 1, 1, "c.METH_CLASS", "METH_CLASS"], [57, 1, 1, "c.METH_COEXIST", "METH_COEXIST"], [57, 1, 1, "c.METH_FASTCALL", "METH_FASTCALL"], [57, 1, 1, "c.METH_KEYWORDS", "METH_KEYWORDS"], [57, 1, 1, "c.METH_METHOD", "METH_METHOD"], [57, 1, 1, "c.METH_NOARGS", "METH_NOARGS"], [57, 1, 1, "c.METH_O", "METH_O"], [57, 1, 1, "c.METH_STATIC", "METH_STATIC"], [57, 1, 1, "c.METH_VARARGS", "METH_VARARGS"], [41, 1, 1, "c.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [41, 1, 1, "c.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [41, 1, 1, "c.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [35, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [63, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [54, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [54, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [62, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_MAX_NDIM", "PyBUF_MAX_NDIM"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [6, 0, 1, "c.PyBool_Type", "PyBool_Type"], [62, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [57, 4, 1, "c.PyCFunction", "PyCFunction"], [57, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [57, 4, 1, "c.PyCMethod", "PyCMethod"], [36, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [36, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [36, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeEvent", "PyCodeEvent"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_AddWatcher", "PyCode_AddWatcher"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Addr2Location", "PyCode_Addr2Location"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_ClearWatcher", "PyCode_ClearWatcher"], [13, 2, 1, "c.PyCode_GetCellvars", "PyCode_GetCellvars"], [13, 2, 1, "c.PyCode_GetCode", "PyCode_GetCode"], [13, 2, 1, "c.PyCode_GetFreevars", "PyCode_GetFreevars"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_GetVarnames", "PyCode_GetVarnames"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [13, 4, 1, "c.PyCode_WatchCallback", "PyCode_WatchCallback"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [63, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [65, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [33, 4, 1, "c.PyConfig", "PyConfig"], [33, 2, 1, "c.PyConfig_Clear", "PyConfig_Clear"], [33, 2, 1, "c.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [33, 2, 1, "c.PyConfig_Read", "PyConfig_Read"], [33, 2, 1, "c.PyConfig_SetArgv", "PyConfig_SetArgv"], [33, 2, 1, "c.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [33, 2, 1, "c.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [33, 2, 1, "c.PyConfig_SetString", "PyConfig_SetString"], [33, 2, 1, "c.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_AddWatcher", "PyDict_AddWatcher"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_ClearWatcher", "PyDict_ClearWatcher"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Unwatch", "PyDict_Unwatch"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [22, 2, 1, "c.PyDict_Watch", "PyDict_Watch"], [22, 4, 1, "c.PyDict_WatchCallback", "PyDict_WatchCallback"], [22, 4, 1, "c.PyDict_WatchEvent", "PyDict_WatchEvent"], [34, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [34, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_DisplayException", "PyErr_DisplayException"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GetHandledException", "PyErr_GetHandledException"], [23, 2, 1, "c.PyErr_GetRaisedException", "PyErr_GetRaisedException"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetHandledException", "PyErr_SetHandledException"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetRaisedException", "PyErr_SetRaisedException"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [32, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [32, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [65, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [65, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [65, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [65, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [52, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [52, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [52, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [52, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [52, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [52, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [32, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [65, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [32, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [32, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [32, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [32, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [32, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [32, 2, 1, "c.PyEval_SetProfileAllThreads", "PyEval_SetProfileAllThreads"], [32, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [32, 2, 1, "c.PyEval_SetTraceAllThreads", "PyEval_SetTraceAllThreads"], [32, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetArgs", "PyException_GetArgs"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetArgs", "PyException_SetArgs"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 2, 1, "c.PyFloat_Pack2", "PyFloat_Pack2"], [25, 2, 1, "c.PyFloat_Pack4", "PyFloat_Pack4"], [25, 2, 1, "c.PyFloat_Pack8", "PyFloat_Pack8"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [25, 2, 1, "c.PyFloat_Unpack2", "PyFloat_Unpack2"], [25, 2, 1, "c.PyFloat_Unpack4", "PyFloat_Unpack4"], [25, 2, 1, "c.PyFloat_Unpack8", "PyFloat_Unpack8"], [26, 4, 1, "c.PyFrameObject", "PyFrameObject"], [26, 2, 1, "c.PyFrame_Check", "PyFrame_Check"], [26, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [26, 2, 1, "c.PyFrame_GetBuiltins", "PyFrame_GetBuiltins"], [26, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [26, 2, 1, "c.PyFrame_GetGenerator", "PyFrame_GetGenerator"], [26, 2, 1, "c.PyFrame_GetGlobals", "PyFrame_GetGlobals"], [26, 2, 1, "c.PyFrame_GetLasti", "PyFrame_GetLasti"], [26, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [26, 2, 1, "c.PyFrame_GetLocals", "PyFrame_GetLocals"], [26, 2, 1, "c.PyFrame_GetVar", "PyFrame_GetVar"], [26, 2, 1, "c.PyFrame_GetVarString", "PyFrame_GetVarString"], [26, 0, 1, "c.PyFrame_Type", "PyFrame_Type"], [54, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [54, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [54, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [54, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [27, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [27, 2, 1, "c.PyFunction_AddWatcher", "PyFunction_AddWatcher"], [27, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [27, 2, 1, "c.PyFunction_ClearWatcher", "PyFunction_ClearWatcher"], [27, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [27, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [27, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [27, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [27, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [27, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [27, 2, 1, "c.PyFunction_New", "PyFunction_New"], [27, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [27, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [27, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [27, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [27, 2, 1, "c.PyFunction_SetVectorcall", "PyFunction_SetVectorcall"], [27, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [27, 4, 1, "c.PyFunction_WatchCallback", "PyFunction_WatchCallback"], [27, 4, 1, "c.PyFunction_WatchEvent", "PyFunction_WatchEvent"], [28, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [28, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [28, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [28, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [32, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [32, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [32, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [32, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [29, 4, 1, "c.PyGenObject", "PyGenObject"], [29, 2, 1, "c.PyGen_Check", "PyGen_Check"], [29, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [29, 2, 1, "c.PyGen_New", "PyGen_New"], [29, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [29, 0, 1, "c.PyGen_Type", "PyGen_Type"], [57, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [30, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [30, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [30, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [30, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [30, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [30, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [30, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [30, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [30, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [30, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [30, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [30, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [30, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [30, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [30, 2, 1, "c.PyImport_Import", "PyImport_Import"], [30, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [30, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [30, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [30, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [30, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [30, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [30, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [30, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [46, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [70, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [43, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [43, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [43, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [43, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [43, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [32, 4, 1, "c.PyInterpreterConfig", "PyInterpreterConfig"], [32, 1, 1, "c.PyInterpreterConfig_DEFAULT_GIL", "PyInterpreterConfig_DEFAULT_GIL"], [32, 1, 1, "c.PyInterpreterConfig_OWN_GIL", "PyInterpreterConfig_OWN_GIL"], [32, 1, 1, "c.PyInterpreterConfig_SHARED_GIL", "PyInterpreterConfig_SHARED_GIL"], [32, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [32, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [32, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [32, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [32, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [32, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [32, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [32, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [32, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [32, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [32, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [35, 2, 1, "c.PyIter_Check", "PyIter_Check"], [35, 2, 1, "c.PyIter_Next", "PyIter_Next"], [35, 2, 1, "c.PyIter_Send", "PyIter_Send"], [37, 4, 1, "c.PyListObject", "PyListObject"], [37, 2, 1, "c.PyList_Append", "PyList_Append"], [37, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [37, 2, 1, "c.PyList_Check", "PyList_Check"], [37, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [37, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [37, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [37, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [37, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [37, 2, 1, "c.PyList_Insert", "PyList_Insert"], [37, 2, 1, "c.PyList_New", "PyList_New"], [37, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [37, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [37, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [37, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [37, 2, 1, "c.PyList_Size", "PyList_Size"], [37, 2, 1, "c.PyList_Sort", "PyList_Sort"], [37, 0, 1, "c.PyList_Type", "PyList_Type"], [38, 4, 1, "c.PyLongObject", "PyLongObject"], [38, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [38, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [38, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [38, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [38, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [38, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [38, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [38, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [38, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [38, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [38, 2, 1, "c.PyLong_Check", "PyLong_Check"], [38, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [38, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [38, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [38, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [38, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [38, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [38, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [38, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [38, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [38, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [38, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [38, 0, 1, "c.PyLong_Type", "PyLong_Type"], [62, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [39, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [39, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [39, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [39, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [39, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [39, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [39, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [39, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [39, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [39, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [39, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [39, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [40, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [40, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [40, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [41, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [41, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [41, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [41, 2, 1, "c.PyMem_Del", "PyMem_Del"], [41, 2, 1, "c.PyMem_Free", "PyMem_Free"], [41, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [41, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [41, 1, 1, "c.PyMem_New", "PyMem_New"], [41, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [41, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [41, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [41, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [41, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [41, 1, 1, "c.PyMem_Resize", "PyMem_Resize"], [41, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [41, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [57, 4, 1, "c.PyMemberDef", "PyMemberDef"], [57, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [57, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [42, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [42, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [42, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [42, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [42, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [42, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [42, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [57, 4, 1, "c.PyMethodDef", "PyMethodDef"], [43, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [43, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [43, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [43, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [43, 2, 1, "c.PyMethod_New", "PyMethod_New"], [43, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [43, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [44, 4, 1, "c.PyModuleDef", "PyModuleDef"], [44, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [44, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [44, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [44, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [44, 1, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [44, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [44, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [44, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [44, 1, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [44, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [44, 2, 1, "c.PyModule_Check", "PyModule_Check"], [44, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [44, 2, 1, "c.PyModule_Create", "PyModule_Create"], [44, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [44, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [44, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [44, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [44, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [44, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [44, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [44, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [44, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [44, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [44, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [44, 2, 1, "c.PyModule_New", "PyModule_New"], [44, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [44, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [44, 0, 1, "c.PyModule_Type", "PyModule_Type"], [62, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [46, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [46, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [46, 2, 1, "c.PyNumber_And", "PyNumber_And"], [46, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [46, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [46, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [46, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [46, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [46, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [46, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [46, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [46, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [46, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [46, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [46, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [46, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [46, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [46, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [46, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [46, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [46, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [46, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [46, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [46, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [46, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [46, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [46, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [46, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [46, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [46, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [46, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [46, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [46, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [46, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [46, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [58, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [58, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [58, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [58, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [58, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [58, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [65, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [65, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [58, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [58, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [57, 4, 1, "c.PyObject", "PyObject"], [41, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [48, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [47, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [47, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [47, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [48, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [41, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [47, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [66, 2, 1, "c.PyObject_ClearWeakRefs", "PyObject_ClearWeakRefs"], [7, 2, 1, "c.PyObject_CopyData", "PyObject_CopyData"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [48, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [48, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [48, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [48, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [48, 2, 1, "c.PyObject_Format", "PyObject_Format"], [41, 2, 1, "c.PyObject_Free", "PyObject_Free"], [28, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [28, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [28, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [28, 1, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [28, 1, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [28, 2, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [28, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [28, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [48, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [48, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [48, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [48, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [48, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [41, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [48, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [48, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [48, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [48, 2, 1, "c.PyObject_GetItemData", "PyObject_GetItemData"], [48, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [48, 2, 1, "c.PyObject_GetTypeData", "PyObject_GetTypeData"], [57, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [57, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [48, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [48, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [48, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [48, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [28, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [48, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [48, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [48, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [48, 2, 1, "c.PyObject_Length", "PyObject_Length"], [48, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [41, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 1, 1, "c.PyObject_New", "PyObject_New"], [3, 1, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [48, 2, 1, "c.PyObject_Not", "PyObject_Not"], [48, 2, 1, "c.PyObject_Print", "PyObject_Print"], [41, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [48, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [48, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [48, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [41, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [48, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [48, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [48, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [48, 2, 1, "c.PyObject_Size", "PyObject_Size"], [48, 2, 1, "c.PyObject_Str", "PyObject_Str"], [48, 2, 1, "c.PyObject_Type", "PyObject_Type"], [48, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [57, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [33, 4, 1, "c.PyPreConfig", "PyPreConfig"], [33, 2, 1, "c.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [65, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [65, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [65, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [65, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [65, 2, 1, "c.PyRun_File", "PyRun_File"], [65, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [65, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [65, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [65, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [65, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [65, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [65, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [65, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [65, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [65, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [65, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [65, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [65, 2, 1, "c.PyRun_String", "PyRun_String"], [65, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [35, 4, 1, "c.PySendResult", "PySendResult"], [36, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [36, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [36, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [62, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [53, 2, 1, "c.PySequence_Check", "PySequence_Check"], [53, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [53, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [53, 2, 1, "c.PySequence_Count", "PySequence_Count"], [53, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [53, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [53, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [53, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [53, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [53, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [53, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [53, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [53, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [53, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [53, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [53, 2, 1, "c.PySequence_Index", "PySequence_Index"], [53, 2, 1, "c.PySequence_Length", "PySequence_Length"], [53, 2, 1, "c.PySequence_List", "PySequence_List"], [53, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [53, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [53, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [53, 2, 1, "c.PySequence_Size", "PySequence_Size"], [53, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [54, 4, 1, "c.PySetObject", "PySetObject"], [54, 2, 1, "c.PySet_Add", "PySet_Add"], [54, 2, 1, "c.PySet_Check", "PySet_Check"], [54, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [54, 2, 1, "c.PySet_Clear", "PySet_Clear"], [54, 2, 1, "c.PySet_Contains", "PySet_Contains"], [54, 2, 1, "c.PySet_Discard", "PySet_Discard"], [54, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [54, 2, 1, "c.PySet_New", "PySet_New"], [54, 2, 1, "c.PySet_Pop", "PySet_Pop"], [54, 2, 1, "c.PySet_Size", "PySet_Size"], [54, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [55, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [55, 2, 1, "c.PySlice_Check", "PySlice_Check"], [55, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [55, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [55, 2, 1, "c.PySlice_New", "PySlice_New"], [55, 0, 1, "c.PySlice_Type", "PySlice_Type"], [55, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [44, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [44, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [44, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [33, 4, 1, "c.PyStatus", "PyStatus"], [33, 2, 1, "c.PyStatus_Error", "PyStatus_Error"], [33, 2, 1, "c.PyStatus_Exception", "PyStatus_Exception"], [33, 2, 1, "c.PyStatus_Exit", "PyStatus_Exit"], [33, 2, 1, "c.PyStatus_IsError", "PyStatus_IsError"], [33, 2, 1, "c.PyStatus_IsExit", "PyStatus_IsExit"], [33, 2, 1, "c.PyStatus_NoMemory", "PyStatus_NoMemory"], [33, 2, 1, "c.PyStatus_Ok", "PyStatus_Ok"], [59, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [59, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [59, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [59, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [59, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [59, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [59, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [59, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [59, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [59, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [59, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [58, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [58, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [58, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [58, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [58, 2, 1, "c.PySys_Audit", "PySys_Audit"], [58, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [58, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [58, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [58, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [58, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [32, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [32, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [58, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [58, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [58, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [58, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [32, 4, 1, "c.PyThreadState", "PyThreadState"], [32, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [32, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [32, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [32, 2, 1, "c.PyThreadState_EnterTracing", "PyThreadState_EnterTracing"], [32, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [32, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [32, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [32, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [32, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [32, 2, 1, "c.PyThreadState_LeaveTracing", "PyThreadState_LeaveTracing"], [32, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [32, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [32, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [32, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [32, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [32, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [32, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [32, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [32, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [32, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [32, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [32, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [32, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [32, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [32, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [32, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [32, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [41, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [41, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [32, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [32, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [32, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [32, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [32, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [32, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [32, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [32, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [59, 4, 1, "c.PyTupleObject", "PyTupleObject"], [59, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [59, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [59, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [59, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [59, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [59, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [59, 2, 1, "c.PyTuple_New", "PyTuple_New"], [59, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [59, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [59, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [59, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [59, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [60, 4, 1, "c.PyTypeObject", "PyTypeObject"], [60, 2, 1, "c.PyType_AddWatcher", "PyType_AddWatcher"], [60, 2, 1, "c.PyType_Check", "PyType_Check"], [60, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [60, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [60, 2, 1, "c.PyType_ClearWatcher", "PyType_ClearWatcher"], [60, 2, 1, "c.PyType_FromMetaclass", "PyType_FromMetaclass"], [60, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [60, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [60, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [60, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [60, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [60, 2, 1, "c.PyType_GetDict", "PyType_GetDict"], [60, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [60, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [60, 2, 1, "c.PyType_GetModuleByDef", "PyType_GetModuleByDef"], [60, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [60, 2, 1, "c.PyType_GetName", "PyType_GetName"], [60, 2, 1, "c.PyType_GetQualName", "PyType_GetQualName"], [60, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [48, 2, 1, "c.PyType_GetTypeDataSize", "PyType_GetTypeDataSize"], [60, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [60, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [60, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [60, 2, 1, "c.PyType_Modified", "PyType_Modified"], [60, 2, 1, "c.PyType_Ready", "PyType_Ready"], [60, 4, 1, "c.PyType_Slot", "PyType_Slot"], [60, 4, 1, "c.PyType_Spec", "PyType_Spec"], [60, 0, 1, "c.PyType_Type", "PyType_Type"], [60, 2, 1, "c.PyType_Watch", "PyType_Watch"], [60, 4, 1, "c.PyType_WatchCallback", "PyType_WatchCallback"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [63, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [63, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [63, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [63, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [63, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [63, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [63, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [63, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [63, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [63, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [63, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [63, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [63, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [63, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [63, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [63, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [63, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [63, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [63, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [63, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [63, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [63, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [63, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [63, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [63, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [63, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [63, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [63, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [63, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [63, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [63, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [63, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [63, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [63, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [63, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [63, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [63, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [63, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [63, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [63, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [63, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [63, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [63, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [63, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [63, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [63, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [63, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [63, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [63, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [63, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [63, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [63, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [63, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [63, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [63, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [63, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [63, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [63, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [63, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [63, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [63, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [63, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [63, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [63, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [63, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [63, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [63, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [63, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [63, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [63, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [63, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [63, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [63, 2, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [63, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [63, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [63, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [63, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [63, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [63, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [63, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [63, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [63, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [63, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [63, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [63, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [63, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [63, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [63, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [13, 2, 1, "c.PyUnstable_Code_GetExtra", "PyUnstable_Code_GetExtra"], [13, 2, 1, "c.PyUnstable_Code_New", "PyUnstable_Code_New"], [13, 2, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "PyUnstable_Code_NewWithPosOnlyArgs"], [13, 2, 1, "c.PyUnstable_Code_SetExtra", "PyUnstable_Code_SetExtra"], [13, 2, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "PyUnstable_Eval_RequestCodeExtraIndex"], [23, 2, 1, "c.PyUnstable_Exc_PrepReraiseStar", "PyUnstable_Exc_PrepReraiseStar"], [28, 2, 1, "c.PyUnstable_GC_VisitObjects", "PyUnstable_GC_VisitObjects"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetCode", "PyUnstable_InterpreterFrame_GetCode"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "PyUnstable_InterpreterFrame_GetLasti"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLine", "PyUnstable_InterpreterFrame_GetLine"], [38, 2, 1, "c.PyUnstable_Long_CompactValue", "PyUnstable_Long_CompactValue"], [38, 2, 1, "c.PyUnstable_Long_IsCompact", "PyUnstable_Long_IsCompact"], [28, 2, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "PyUnstable_Object_GC_NewWithExtraData"], [50, 2, 1, "c.PyUnstable_PerfMapState_Fini", "PyUnstable_PerfMapState_Fini"], [50, 2, 1, "c.PyUnstable_PerfMapState_Init", "PyUnstable_PerfMapState_Init"], [60, 2, 1, "c.PyUnstable_Type_AssignVersionTag", "PyUnstable_Type_AssignVersionTag"], [50, 2, 1, "c.PyUnstable_WritePerfMapEntry", "PyUnstable_WritePerfMapEntry"], [57, 4, 1, "c.PyVarObject", "PyVarObject"], [57, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [66, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [66, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [66, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [66, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [66, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [66, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [66, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [33, 4, 1, "c.PyWideStringList", "PyWideStringList"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [34, 1, 1, "c.Py_ABS", "Py_ABS"], [34, 1, 1, "c.Py_ALWAYS_INLINE", "Py_ALWAYS_INLINE"], [57, 1, 1, "c.Py_AUDIT_READ", "Py_AUDIT_READ"], [32, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [58, 2, 1, "c.Py_AtExit", "Py_AtExit"], [32, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [32, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [65, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [32, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [34, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [51, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [65, 2, 1, "c.Py_CompileString", "Py_CompileString"], [65, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [65, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [65, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [51, 2, 1, "c.Py_DECREF", "Py_DECREF"], [34, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [32, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [51, 2, 1, "c.Py_DecRef", "Py_DecRef"], [58, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [32, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [32, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [62, 1, 1, "c.Py_EQ", "Py_EQ"], [55, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [58, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [32, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [58, 2, 1, "c.Py_Exit", "Py_Exit"], [33, 2, 1, "c.Py_ExitStatusException", "Py_ExitStatusException"], [6, 0, 1, "c.Py_False", "Py_False"], [58, 2, 1, "c.Py_FatalError", "Py_FatalError"], [58, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [32, 2, 1, "c.Py_Finalize", "Py_Finalize"], [32, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [32, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [62, 1, 1, "c.Py_GE", "Py_GE"], [34, 1, 1, "c.Py_GETENV", "Py_GETENV"], [62, 1, 1, "c.Py_GT", "Py_GT"], [61, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [61, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [33, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [32, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [32, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [32, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [32, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [32, 2, 1, "c.Py_GetPath", "Py_GetPath"], [32, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [32, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [32, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [32, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [32, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [32, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [32, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [51, 2, 1, "c.Py_INCREF", "Py_INCREF"], [57, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [32, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [51, 2, 1, "c.Py_IncRef", "Py_IncRef"], [32, 2, 1, "c.Py_Initialize", "Py_Initialize"], [32, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [33, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [32, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [32, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [57, 2, 1, "c.Py_Is", "Py_Is"], [57, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [32, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [57, 2, 1, "c.Py_IsNone", "Py_IsNone"], [57, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [32, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [62, 1, 1, "c.Py_LE", "Py_LE"], [56, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [62, 1, 1, "c.Py_LT", "Py_LT"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [32, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [32, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [34, 1, 1, "c.Py_MAX", "Py_MAX"], [34, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [34, 1, 1, "c.Py_MIN", "Py_MIN"], [65, 2, 1, "c.Py_Main", "Py_Main"], [62, 1, 1, "c.Py_NE", "Py_NE"], [34, 1, 1, "c.Py_NO_INLINE", "Py_NO_INLINE"], [32, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [32, 2, 1, "c.Py_NewInterpreterFromConfig", "Py_NewInterpreterFromConfig"], [51, 2, 1, "c.Py_NewRef", "Py_NewRef"], [32, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [32, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [45, 0, 1, "c.Py_None", "Py_None"], [48, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [32, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [33, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [33, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [33, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [32, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [57, 1, 1, "c.Py_READONLY", "Py_READONLY"], [51, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [57, 1, 1, "c.Py_RELATIVE_OFFSET", "Py_RELATIVE_OFFSET"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [45, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [48, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [62, 1, 1, "c.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [33, 2, 1, "c.Py_RunMain", "Py_RunMain"], [51, 1, 1, "c.Py_SETREF", "Py_SETREF"], [51, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [57, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [57, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [57, 2, 1, "c.Py_SIZE", "Py_SIZE"], [34, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [32, 2, 1, "c.Py_SetPath", "Py_SetPath"], [32, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [32, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [32, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [62, 1, 1, "c.Py_TPFLAGS_BASETYPE", "Py_TPFLAGS_BASETYPE"], [62, 1, 1, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_BYTES_SUBCLASS", "Py_TPFLAGS_BYTES_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_DEFAULT", "Py_TPFLAGS_DEFAULT"], [62, 1, 1, "c.Py_TPFLAGS_DICT_SUBCLASS", "Py_TPFLAGS_DICT_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_FINALIZE", "Py_TPFLAGS_HAVE_FINALIZE"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_GC", "Py_TPFLAGS_HAVE_GC"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_VECTORCALL", "Py_TPFLAGS_HAVE_VECTORCALL"], [62, 1, 1, "c.Py_TPFLAGS_HEAPTYPE", "Py_TPFLAGS_HEAPTYPE"], [62, 1, 1, "c.Py_TPFLAGS_IMMUTABLETYPE", "Py_TPFLAGS_IMMUTABLETYPE"], [62, 1, 1, "c.Py_TPFLAGS_ITEMS_AT_END", "Py_TPFLAGS_ITEMS_AT_END"], [62, 1, 1, "c.Py_TPFLAGS_LIST_SUBCLASS", "Py_TPFLAGS_LIST_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_LONG_SUBCLASS", "Py_TPFLAGS_LONG_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_MANAGED_DICT", "Py_TPFLAGS_MANAGED_DICT"], [62, 1, 1, "c.Py_TPFLAGS_MANAGED_WEAKREF", "Py_TPFLAGS_MANAGED_WEAKREF"], [62, 1, 1, "c.Py_TPFLAGS_MAPPING", "Py_TPFLAGS_MAPPING"], [62, 1, 1, "c.Py_TPFLAGS_METHOD_DESCRIPTOR", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [62, 1, 1, "c.Py_TPFLAGS_READY", "Py_TPFLAGS_READY"], [62, 1, 1, "c.Py_TPFLAGS_READYING", "Py_TPFLAGS_READYING"], [62, 1, 1, "c.Py_TPFLAGS_SEQUENCE", "Py_TPFLAGS_SEQUENCE"], [62, 1, 1, "c.Py_TPFLAGS_TUPLE_SUBCLASS", "Py_TPFLAGS_TUPLE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_TYPE_SUBCLASS", "Py_TPFLAGS_TYPE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_UNICODE_SUBCLASS", "Py_TPFLAGS_UNICODE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_VALID_VERSION_TAG", "Py_TPFLAGS_VALID_VERSION_TAG"], [57, 2, 1, "c.Py_TYPE", "Py_TYPE"], [57, 1, 1, "c.Py_T_BOOL", "Py_T_BOOL"], [57, 1, 1, "c.Py_T_BYTE", "Py_T_BYTE"], [57, 1, 1, "c.Py_T_CHAR", "Py_T_CHAR"], [57, 1, 1, "c.Py_T_DOUBLE", "Py_T_DOUBLE"], [57, 1, 1, "c.Py_T_FLOAT", "Py_T_FLOAT"], [57, 1, 1, "c.Py_T_INT", "Py_T_INT"], [57, 1, 1, "c.Py_T_LONG", "Py_T_LONG"], [57, 1, 1, "c.Py_T_LONGLONG", "Py_T_LONGLONG"], [57, 1, 1, "c.Py_T_OBJECT_EX", "Py_T_OBJECT_EX"], [57, 1, 1, "c.Py_T_PYSSIZET", "Py_T_PYSSIZET"], [57, 1, 1, "c.Py_T_SHORT", "Py_T_SHORT"], [57, 1, 1, "c.Py_T_STRING", "Py_T_STRING"], [57, 1, 1, "c.Py_T_STRING_INPLACE", "Py_T_STRING_INPLACE"], [57, 1, 1, "c.Py_T_UBYTE", "Py_T_UBYTE"], [57, 1, 1, "c.Py_T_UINT", "Py_T_UINT"], [57, 1, 1, "c.Py_T_ULONG", "Py_T_ULONG"], [57, 1, 1, "c.Py_T_ULONGLONG", "Py_T_ULONGLONG"], [57, 1, 1, "c.Py_T_USHORT", "Py_T_USHORT"], [6, 0, 1, "c.Py_True", "Py_True"], [63, 4, 1, "c.Py_UCS1", "Py_UCS1"], [63, 4, 1, "c.Py_UCS2", "Py_UCS2"], [63, 4, 1, "c.Py_UCS4", "Py_UCS4"], [32, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [63, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [63, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [63, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [63, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [63, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [63, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [63, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [63, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [63, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [63, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [63, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [63, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [63, 2, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [63, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [63, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [63, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [63, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [63, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [63, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [34, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [34, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [32, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [28, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [32, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [4, 0, 1, "c.Py_Version", "Py_Version"], [51, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [51, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [51, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [51, 1, 1, "c.Py_XSETREF", "Py_XSETREF"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [65, 0, 1, "c.Py_eval_input", "Py_eval_input"], [65, 0, 1, "c.Py_file_input", "Py_file_input"], [44, 1, 1, "c.Py_mod_create", "Py_mod_create"], [44, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [44, 1, 1, "c.Py_mod_multiple_interpreters", "Py_mod_multiple_interpreters"], [65, 0, 1, "c.Py_single_input", "Py_single_input"], [34, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [32, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [32, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [32, 4, 1, "c.Py_tss_t", "Py_tss_t"], [57, 1, 1, "c.T_NONE", "T_NONE"], [57, 1, 1, "c.T_OBJECT", "T_OBJECT"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [57, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [57, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [32, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [26, 5, 1, "c._PyInterpreterFrame", "_PyInterpreterFrame"], [32, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [32, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [48, 2, 1, "c._PyObject_GetDictPtr", "_PyObject_GetDictPtr"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [59, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [33, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [30, 5, 1, "c._frozen", "_frozen"], [30, 5, 1, "c._inittab", "_inittab"], [62, 4, 1, "c.allocfunc", "allocfunc"], [62, 4, 1, "c.binaryfunc", "binaryfunc"], [62, 4, 1, "c.descrgetfunc", "descrgetfunc"], [62, 4, 1, "c.descrsetfunc", "descrsetfunc"], [62, 4, 1, "c.destructor", "destructor"], [62, 4, 1, "c.freefunc", "freefunc"], [28, 4, 1, "c.gcvisitobjects_t", "gcvisitobjects_t"], [62, 4, 1, "c.getattrfunc", "getattrfunc"], [62, 4, 1, "c.getattrofunc", "getattrofunc"], [62, 4, 1, "c.getbufferproc", "getbufferproc"], [62, 4, 1, "c.getiterfunc", "getiterfunc"], [62, 4, 1, "c.hashfunc", "hashfunc"], [62, 4, 1, "c.initproc", "initproc"], [28, 4, 1, "c.inquiry", "inquiry"], [62, 4, 1, "c.iternextfunc", "iternextfunc"], [62, 4, 1, "c.lenfunc", "lenfunc"], [62, 4, 1, "c.newfunc", "newfunc"], [62, 4, 1, "c.objobjargproc", "objobjargproc"], [62, 4, 1, "c.objobjproc", "objobjproc"], [62, 4, 1, "c.releasebufferproc", "releasebufferproc"], [62, 4, 1, "c.reprfunc", "reprfunc"], [62, 4, 1, "c.richcmpfunc", "richcmpfunc"], [62, 4, 1, "c.sendfunc", "sendfunc"], [62, 4, 1, "c.setattrfunc", "setattrfunc"], [62, 4, 1, "c.setattrofunc", "setattrofunc"], [62, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [62, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [62, 4, 1, "c.ternaryfunc", "ternaryfunc"], [28, 4, 1, "c.traverseproc", "traverseproc"], [62, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [28, 4, 1, "c.visitproc", "visitproc"], [209, 6, 1, "", "ArithmeticError"], [209, 6, 1, "", "AssertionError"], [209, 6, 1, "", "AttributeError"], [209, 6, 1, "", "BaseException"], [209, 6, 1, "", "BaseExceptionGroup"], [209, 6, 1, "", "BlockingIOError"], [209, 6, 1, "", "BrokenPipeError"], [209, 6, 1, "", "BufferError"], [209, 6, 1, "", "BytesWarning"], [209, 6, 1, "", "ChildProcessError"], [209, 6, 1, "", "ConnectionAbortedError"], [209, 6, 1, "", "ConnectionError"], [209, 6, 1, "", "ConnectionRefusedError"], [209, 6, 1, "", "ConnectionResetError"], [209, 6, 1, "", "DeprecationWarning"], [209, 6, 1, "", "EOFError"], [164, 9, 1, "", "Ellipsis"], [209, 6, 1, "", "EncodingWarning"], [209, 6, 1, "", "EnvironmentError"], [209, 6, 1, "", "Exception"], [209, 6, 1, "", "ExceptionGroup"], [164, 9, 1, "", "False"], [209, 6, 1, "", "FileExistsError"], [209, 6, 1, "", "FileNotFoundError"], [209, 6, 1, "", "FloatingPointError"], [209, 6, 1, "", "FutureWarning"], [209, 6, 1, "", "GeneratorExit"], [209, 6, 1, "", "IOError"], [209, 6, 1, "", "ImportError"], [209, 6, 1, "", "ImportWarning"], [209, 6, 1, "", "IndentationError"], [209, 6, 1, "", "IndexError"], [209, 6, 1, "", "InterruptedError"], [209, 6, 1, "", "IsADirectoryError"], [209, 6, 1, "", "KeyError"], [209, 6, 1, "", "KeyboardInterrupt"], [209, 6, 1, "", "LookupError"], [209, 6, 1, "", "MemoryError"], [209, 6, 1, "", "ModuleNotFoundError"], [209, 6, 1, "", "NameError"], [164, 9, 1, "", "None"], [209, 6, 1, "", "NotADirectoryError"], [164, 9, 1, "", "NotImplemented"], [209, 6, 1, "", "NotImplementedError"], [209, 6, 1, "", "OSError"], [209, 6, 1, "", "OverflowError"], [209, 6, 1, "", "PendingDeprecationWarning"], [209, 6, 1, "", "PermissionError"], [209, 6, 1, "", "ProcessLookupError"], [209, 6, 1, "", "RecursionError"], [209, 6, 1, "", "ReferenceError"], [209, 6, 1, "", "ResourceWarning"], [209, 6, 1, "", "RuntimeError"], [209, 6, 1, "", "RuntimeWarning"], [209, 6, 1, "", "StopAsyncIteration"], [209, 6, 1, "", "StopIteration"], [209, 6, 1, "", "SyntaxError"], [209, 6, 1, "", "SyntaxWarning"], [209, 6, 1, "", "SystemError"], [209, 6, 1, "", "SystemExit"], [209, 6, 1, "", "TabError"], [209, 6, 1, "", "TimeoutError"], [164, 9, 1, "", "True"], [209, 6, 1, "", "TypeError"], [209, 6, 1, "", "UnboundLocalError"], [209, 6, 1, "", "UnicodeDecodeError"], [209, 6, 1, "", "UnicodeEncodeError"], [209, 6, 1, "", "UnicodeError"], [209, 6, 1, "", "UnicodeTranslateError"], [209, 6, 1, "", "UnicodeWarning"], [209, 6, 1, "", "UserWarning"], [209, 6, 1, "", "ValueError"], [209, 6, 1, "", "Warning"], [209, 6, 1, "", "WindowsError"], [209, 6, 1, "", "ZeroDivisionError"], [427, 7, 1, "cached__", "__cached__"], [164, 9, 1, "debug__", "__debug__"], [427, 7, 1, "file__", "__file__"], [110, 10, 0, "-", "__future__"], [221, 11, 1, "import__", "__import__"], [427, 7, 1, "loader__", "__loader__"], [111, 10, 0, "-", "__main__"], [427, 7, 1, "name__", "__name__"], [427, 7, 1, "package__", "__package__"], [427, 7, 1, "path__", "__path__"], [427, 7, 1, "spec__", "__spec__"], [112, 10, 0, "-", "_thread"], [113, 10, 0, "-", "abc"], [221, 11, 1, "", "abs"], [114, 10, 0, "-", "aifc"], [221, 11, 1, "", "aiter"], [221, 11, 1, "", "all"], [221, 11, 1, "", "anext"], [221, 11, 1, "", "any"], [117, 10, 0, "-", "argparse"], [118, 10, 0, "-", "array"], [221, 11, 1, "", "ascii"], [119, 10, 0, "-", "ast"], [120, 10, 0, "-", "asyncio"], [137, 10, 0, "-", "atexit"], [138, 10, 0, "-", "audioop"], [140, 10, 0, "-", "base64"], [141, 10, 0, "-", "bdb"], [221, 11, 1, "", "bin"], [143, 10, 0, "-", "binascii"], [144, 10, 0, "-", "bisect"], [221, 12, 1, "", "bool"], [221, 11, 1, "", "breakpoint"], [145, 10, 0, "-", "builtins"], [340, 12, 1, "", "bytearray"], [340, 12, 1, "", "bytes"], [146, 10, 0, "-", "bz2"], [304, 10, 0, "-", "cProfile"], [147, 10, 0, "-", "calendar"], [221, 11, 1, "", "callable"], [148, 10, 0, "-", "cgi"], [149, 10, 0, "-", "cgitb"], [221, 11, 1, "", "chr"], [150, 10, 0, "-", "chunk"], [221, 11, 1, "", "classmethod"], [89, 10, 0, "-", "clinic"], [151, 10, 0, "-", "cmath"], [152, 10, 0, "-", "cmd"], [153, 10, 0, "-", "code"], [154, 10, 0, "-", "codecs"], [155, 10, 0, "-", "codeop"], [156, 10, 0, "-", "collections"], [158, 10, 0, "-", "colorsys"], [221, 11, 1, "", "compile"], [159, 10, 0, "-", "compileall"], [221, 12, 1, "", "complex"], [163, 10, 0, "-", "configparser"], [165, 10, 0, "-", "contextlib"], [166, 10, 0, "-", "contextvars"], [167, 10, 0, "-", "copy"], [168, 10, 0, "-", "copyreg"], [164, 9, 1, "", "copyright"], [164, 9, 1, "", "credits"], [169, 10, 0, "-", "crypt"], [171, 10, 0, "-", "csv"], [172, 10, 0, "-", "ctypes"], [173, 10, 0, "-", "curses"], [177, 10, 0, "-", "dataclasses"], [179, 10, 0, "-", "datetime"], [180, 10, 0, "-", "dbm"], [182, 10, 0, "-", "decimal"], [221, 11, 1, "", "delattr"], [340, 12, 1, "", "dict"], [186, 10, 0, "-", "difflib"], [221, 11, 1, "", "dir"], [187, 10, 0, "-", "dis"], [221, 11, 1, "", "divmod"], [189, 10, 0, "-", "doctest"], [190, 10, 0, "-", "email"], [206, 10, 0, "-", "ensurepip"], [207, 10, 0, "-", "enum"], [221, 11, 1, "", "enumerate"], [208, 10, 0, "-", "errno"], [221, 11, 1, "", "eval"], [221, 11, 1, "", "exec"], [164, 9, 1, "", "exit"], [210, 10, 0, "-", "faulthandler"], [211, 10, 0, "-", "fcntl"], [212, 10, 0, "-", "filecmp"], [214, 10, 0, "-", "fileinput"], [221, 11, 1, "", "filter"], [221, 12, 1, "", "float"], [216, 10, 0, "-", "fnmatch"], [221, 11, 1, "", "format"], [217, 10, 0, "-", "fractions"], [340, 12, 1, "", "frozenset"], [219, 10, 0, "-", "ftplib"], [222, 10, 0, "-", "functools"], [223, 10, 0, "-", "gc"], [221, 11, 1, "", "getattr"], [224, 10, 0, "-", "getopt"], [225, 10, 0, "-", "getpass"], [226, 10, 0, "-", "gettext"], [227, 10, 0, "-", "glob"], [221, 11, 1, "", "globals"], [228, 10, 0, "-", "graphlib"], [229, 10, 0, "-", "grp"], [230, 10, 0, "-", "gzip"], [221, 11, 1, "", "hasattr"], [221, 11, 1, "", "hash"], [231, 10, 0, "-", "hashlib"], [232, 10, 0, "-", "heapq"], [221, 11, 1, "", "help"], [221, 11, 1, "", "hex"], [233, 10, 0, "-", "hmac"], [234, 10, 0, "-", "html"], [237, 10, 0, "-", "http"], [221, 11, 1, "", "id"], [243, 10, 0, "-", "idlelib"], [244, 10, 0, "-", "imaplib"], [245, 10, 0, "-", "imghdr"], [246, 10, 0, "-", "importlib"], [221, 11, 1, "", "input"], [251, 10, 0, "-", "inspect"], [221, 12, 1, "", "int"], [254, 10, 0, "-", "io"], [255, 10, 0, "-", "ipaddress"], [221, 11, 1, "", "isinstance"], [221, 11, 1, "", "issubclass"], [221, 11, 1, "", "iter"], [257, 10, 0, "-", "itertools"], [258, 10, 0, "-", "json"], [259, 10, 0, "-", "keyword"], [221, 11, 1, "", "len"], [109, 10, 0, "-", "lib2to3"], [164, 9, 1, "", "license"], [261, 10, 0, "-", "linecache"], [340, 12, 1, "", "list"], [262, 10, 0, "-", "locale"], [221, 11, 1, "", "locals"], [263, 10, 0, "-", "logging"], [266, 10, 0, "-", "lzma"], [267, 10, 0, "-", "mailbox"], [268, 10, 0, "-", "mailcap"], [221, 11, 1, "", "map"], [270, 10, 0, "-", "marshal"], [271, 10, 0, "-", "math"], [221, 11, 1, "", "max"], [340, 12, 1, "", "memoryview"], [272, 10, 0, "-", "mimetypes"], [221, 11, 1, "", "min"], [274, 10, 0, "-", "mmap"], [275, 10, 0, "-", "modulefinder"], [277, 10, 0, "-", "msilib"], [278, 10, 0, "-", "msvcrt"], [279, 10, 0, "-", "multiprocessing"], [282, 10, 0, "-", "netrc"], [221, 11, 1, "", "next"], [283, 10, 0, "-", "nis"], [284, 10, 0, "-", "nntplib"], [285, 10, 0, "-", "numbers"], [221, 12, 1, "", "object"], [221, 11, 1, "", "oct"], [221, 11, 1, "", "open"], [287, 10, 0, "-", "operator"], [288, 10, 0, "-", "optparse"], [221, 11, 1, "", "ord"], [289, 10, 0, "-", "os"], [291, 10, 0, "-", "ossaudiodev"], [292, 10, 0, "-", "pathlib"], [293, 10, 0, "-", "pdb"], [295, 10, 0, "-", "pickle"], [296, 10, 0, "-", "pickletools"], [297, 10, 0, "-", "pipes"], [298, 10, 0, "-", "pkgutil"], [299, 10, 0, "-", "platform"], [300, 10, 0, "-", "plistlib"], [301, 10, 0, "-", "poplib"], [302, 10, 0, "-", "posix"], [221, 11, 1, "", "pow"], [303, 10, 0, "-", "pprint"], [221, 11, 1, "", "print"], [304, 10, 0, "-", "profile"], [221, 12, 1, "", "property"], [304, 10, 0, "-", "pstats"], [305, 10, 0, "-", "pty"], [306, 10, 0, "-", "pwd"], [307, 10, 0, "-", "py_compile"], [308, 10, 0, "-", "pyclbr"], [309, 10, 0, "-", "pydoc"], [312, 10, 0, "-", "queue"], [164, 9, 1, "", "quit"], [313, 10, 0, "-", "quopri"], [314, 10, 0, "-", "random"], [340, 12, 1, "", "range"], [315, 10, 0, "-", "re"], [316, 10, 0, "-", "readline"], [221, 11, 1, "", "repr"], [317, 10, 0, "-", "reprlib"], [318, 10, 0, "-", "resource"], [221, 11, 1, "", "reversed"], [319, 10, 0, "-", "rlcompleter"], [221, 11, 1, "", "round"], [320, 10, 0, "-", "runpy"], [321, 10, 0, "-", "sched"], [322, 10, 0, "-", "secrets"], [324, 10, 0, "-", "select"], [325, 10, 0, "-", "selectors"], [340, 12, 1, "", "set"], [221, 11, 1, "", "setattr"], [326, 10, 0, "-", "shelve"], [327, 10, 0, "-", "shlex"], [328, 10, 0, "-", "shutil"], [329, 10, 0, "-", "signal"], [330, 10, 0, "-", "site"], [221, 12, 1, "", "slice"], [331, 10, 0, "-", "smtplib"], [332, 10, 0, "-", "sndhdr"], [333, 10, 0, "-", "socket"], [334, 10, 0, "-", "socketserver"], [221, 11, 1, "", "sorted"], [335, 10, 0, "-", "spwd"], [336, 10, 0, "-", "sqlite3"], [337, 10, 0, "-", "ssl"], [338, 10, 0, "-", "stat"], [221, 11, 1, "", "staticmethod"], [339, 10, 0, "-", "statistics"], [340, 12, 1, "", "str"], [341, 10, 0, "-", "string"], [342, 10, 0, "-", "stringprep"], [343, 10, 0, "-", "struct"], [344, 10, 0, "-", "subprocess"], [221, 11, 1, "", "sum"], [345, 10, 0, "-", "sunau"], [221, 12, 1, "", "super"], [347, 10, 0, "-", "symtable"], [348, 10, 0, "-", "sys"], [350, 10, 0, "-", "sysconfig"], [351, 10, 0, "-", "syslog"], [352, 10, 0, "-", "tabnanny"], [353, 10, 0, "-", "tarfile"], [354, 10, 0, "-", "telnetlib"], [355, 10, 0, "-", "tempfile"], [356, 10, 0, "-", "termios"], [357, 10, 0, "-", "test"], [359, 10, 0, "-", "textwrap"], [360, 10, 0, "-", "threading"], [361, 10, 0, "-", "time"], [362, 10, 0, "-", "timeit"], [364, 10, 0, "-", "tkinter"], [372, 10, 0, "-", "token"], [373, 10, 0, "-", "tokenize"], [374, 10, 0, "-", "tomllib"], [375, 10, 0, "-", "trace"], [376, 10, 0, "-", "traceback"], [377, 10, 0, "-", "tracemalloc"], [378, 10, 0, "-", "tty"], [340, 12, 1, "", "tuple"], [379, 10, 0, "-", "turtle"], [379, 10, 0, "-", "turtledemo"], [221, 12, 1, "", "type"], [380, 10, 0, "-", "types"], [381, 10, 0, "-", "typing"], [382, 10, 0, "-", "unicodedata"], [383, 10, 0, "-", "unittest"], [387, 10, 0, "-", "urllib"], [392, 10, 0, "-", "uu"], [393, 10, 0, "-", "uuid"], [221, 11, 1, "", "vars"], [394, 10, 0, "-", "venv"], [395, 10, 0, "-", "warnings"], [396, 10, 0, "-", "wave"], [397, 10, 0, "-", "weakref"], [398, 10, 0, "-", "webbrowser"], [400, 10, 0, "-", "winreg"], [401, 10, 0, "-", "winsound"], [402, 10, 0, "-", "wsgiref"], [403, 10, 0, "-", "xdrlib"], [404, 10, 0, "-", "xml"], [221, 11, 1, "", "zip"], [416, 10, 0, "-", "zipapp"], [417, 10, 0, "-", "zipfile"], [418, 10, 0, "-", "zipimport"], [419, 10, 0, "-", "zlib"], [420, 10, 0, "-", "zoneinfo"], [293, 13, 1, "pdbcommand-0", "!"], [451, 14, 1, "cmdoption-build", "--build"], [450, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [451, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [451, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [451, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [451, 14, 1, "cmdoption-enable-bolt", "--enable-bolt"], [451, 14, 1, "cmdoption-enable-framework", "--enable-framework"], [451, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [451, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [451, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [451, 14, 1, "cmdoption-enable-pystats", "--enable-pystats"], [451, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [451, 14, 1, "cmdoption-enable-universalsdk", "--enable-universalsdk"], [451, 14, 1, "cmdoption-enable-wasm-dynamic-linking", "--enable-wasm-dynamic-linking"], [451, 14, 1, "cmdoption-enable-wasm-pthreads", "--enable-wasm-pthreads"], [451, 14, 1, "cmdoption-exec-prefix", "--exec-prefix"], [450, 14, 1, "cmdoption-help", "--help"], [450, 14, 1, "cmdoption-help-all", "--help-all"], [450, 14, 1, "cmdoption-help-env", "--help-env"], [450, 14, 1, "cmdoption-help-xoptions", "--help-xoptions"], [451, 14, 1, "cmdoption-host", "--host"], [451, 14, 1, "cmdoption-prefix", "--prefix"], [450, 14, 1, "cmdoption-version", "--version"], [451, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [451, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [451, 14, 1, "cmdoption-with-build-python", "--with-build-python"], [451, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [451, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [451, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [451, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [451, 14, 1, "cmdoption-with-emscripten-target", "--with-emscripten-target"], [451, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [451, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [451, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [451, 14, 1, "cmdoption-with-libc", "--with-libc"], [451, 14, 1, "cmdoption-with-libm", "--with-libm"], [451, 14, 1, "cmdoption-with-libs", "--with-libs"], [451, 14, 1, "cmdoption-with-lto", "--with-lto"], [451, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [451, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [451, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [451, 14, 1, "cmdoption-with-pkg-config", "--with-pkg-config"], [451, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [451, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [451, 14, 1, "cmdoption-with-readline", "--with-readline"], [451, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [451, 14, 1, "cmdoption-with-strict-overflow", "--with-strict-overflow"], [451, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [451, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [451, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [451, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [451, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [451, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [451, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [451, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [451, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [451, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [451, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [451, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [451, 14, 1, "cmdoption-without-freelists", "--without-freelists"], [451, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [451, 14, 1, "cmdoption-without-readline", "--without-readline"], [451, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [450, 14, 1, "cmdoption-0", "-?"], [450, 14, 1, "cmdoption-B", "-B"], [450, 14, 1, "cmdoption-E", "-E"], [450, 14, 1, "cmdoption-I", "-I"], [450, 14, 1, "cmdoption-J", "-J"], [450, 14, 1, "cmdoption-O", "-O"], [450, 14, 1, "cmdoption-OO", "-OO"], [450, 14, 1, "cmdoption-P", "-P"], [450, 14, 1, "cmdoption-R", "-R"], [450, 14, 1, "cmdoption-S", "-S"], [450, 14, 1, "cmdoption-V", "-V"], [450, 14, 1, "cmdoption-W", "-W"], [450, 14, 1, "cmdoption-X", "-X"], [450, 14, 1, "cmdoption-b", "-b"], [450, 14, 1, "cmdoption-c", "-c"], [450, 14, 1, "cmdoption-d", "-d"], [450, 14, 1, "cmdoption-h", "-h"], [450, 14, 1, "cmdoption-i", "-i"], [450, 14, 1, "cmdoption-m", "-m"], [450, 14, 1, "cmdoption-q", "-q"], [450, 14, 1, "cmdoption-s", "-s"], [450, 14, 1, "cmdoption-u", "-u"], [450, 14, 1, "cmdoption-v", "-v"], [450, 14, 1, "cmdoption-x", "-x"], [451, 15, 1, "-", "BASECFLAGS"], [451, 15, 1, "-", "BASECPPFLAGS"], [187, 16, 1, "-", "BEFORE_ASYNC_WITH"], [187, 16, 1, "-", "BEFORE_WITH"], [187, 16, 1, "-", "BINARY_OP"], [187, 16, 1, "-", "BINARY_SLICE"], [187, 16, 1, "-", "BINARY_SUBSCR"], [451, 15, 1, "-", "BLDSHARED"], [187, 16, 1, "-", "BUILD_CONST_KEY_MAP"], [187, 16, 1, "-", "BUILD_LIST"], [187, 16, 1, "-", "BUILD_MAP"], [187, 16, 1, "-", "BUILD_SET"], [187, 16, 1, "-", "BUILD_SLICE"], [187, 16, 1, "-", "BUILD_STRING"], [187, 16, 1, "-", "BUILD_TUPLE"], [187, 16, 1, "-", "CACHE"], [187, 16, 1, "-", "CALL"], [187, 16, 1, "-", "CALL_FUNCTION_EX"], [187, 16, 1, "-", "CALL_INTRINSIC_1"], [187, 16, 1, "-", "CALL_INTRINSIC_2"], [451, 15, 1, "-", "CC"], [451, 15, 1, "-", "CCSHARED"], [451, 15, 1, "-", "CFLAGS"], [451, 15, 1, "-", "CFLAGSFORSHARED"], [451, 15, 1, "-", "CFLAGS_ALIASING"], [451, 15, 1, "-", "CFLAGS_NODIST"], [187, 16, 1, "-", "CHECK_EG_MATCH"], [187, 16, 1, "-", "CHECK_EXC_MATCH"], [187, 16, 1, "-", "CLEANUP_THROW"], [187, 16, 1, "-", "COMPARE_OP"], [451, 15, 1, "-", "COMPILEALL_OPTS"], [451, 15, 1, "-", "CONFIGURE_CFLAGS"], [451, 15, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [451, 15, 1, "-", "CONFIGURE_CPPFLAGS"], [451, 15, 1, "-", "CONFIGURE_LDFLAGS"], [451, 15, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [451, 14, 1, "cmdoption-arg-CONFIG_SITE", "CONFIG_SITE"], [187, 16, 1, "-", "CONTAINS_OP"], [187, 16, 1, "-", "COPY"], [187, 16, 1, "-", "COPY_FREE_VARS"], [451, 15, 1, "-", "CPPFLAGS"], [451, 15, 1, "-", "CXX"], [187, 16, 1, "-", "DELETE_ATTR"], [187, 16, 1, "-", "DELETE_DEREF"], [187, 16, 1, "-", "DELETE_FAST"], [187, 16, 1, "-", "DELETE_GLOBAL"], [187, 16, 1, "-", "DELETE_NAME"], [187, 16, 1, "-", "DELETE_SUBSCR"], [187, 16, 1, "-", "DICT_MERGE"], [187, 16, 1, "-", "DICT_UPDATE"], [187, 16, 1, "-", "END_ASYNC_FOR"], [187, 16, 1, "-", "END_FOR"], [187, 16, 1, "-", "EXTENDED_ARG"], [451, 15, 1, "-", "EXTRA_CFLAGS"], [187, 16, 1, "-", "FORMAT_VALUE"], [187, 16, 1, "-", "FOR_ITER"], [187, 16, 1, "-", "GET_AITER"], [187, 16, 1, "-", "GET_ANEXT"], [187, 16, 1, "-", "GET_AWAITABLE"], [187, 16, 1, "-", "GET_ITER"], [187, 16, 1, "-", "GET_LEN"], [187, 16, 1, "-", "GET_YIELD_FROM_ITER"], [187, 16, 1, "-", "HAVE_ARGUMENT"], [187, 16, 1, "-", "IMPORT_FROM"], [187, 16, 1, "-", "IMPORT_NAME"], [187, 16, 1, "-", "IS_OP"], [187, 16, 1, "-", "JUMP"], [187, 16, 1, "-", "JUMP_BACKWARD"], [187, 16, 1, "-", "JUMP_BACKWARD_NO_INTERRUPT"], [187, 16, 1, "-", "JUMP_FORWARD"], [187, 16, 1, "-", "JUMP_NO_INTERRUPT"], [187, 16, 1, "-", "KW_NAMES"], [451, 15, 1, "-", "LDFLAGS"], [451, 15, 1, "-", "LDFLAGS_NODIST"], [451, 15, 1, "-", "LDSHARED"], [451, 15, 1, "-", "LIBS"], [451, 15, 1, "-", "LINKCC"], [187, 16, 1, "-", "LIST_APPEND"], [187, 16, 1, "-", "LIST_EXTEND"], [187, 16, 1, "-", "LOAD_ASSERTION_ERROR"], [187, 16, 1, "-", "LOAD_ATTR"], [187, 16, 1, "-", "LOAD_BUILD_CLASS"], [187, 16, 1, "-", "LOAD_CLOSURE"], [187, 16, 1, "-", "LOAD_CONST"], [187, 16, 1, "-", "LOAD_DEREF"], [187, 16, 1, "-", "LOAD_FAST"], [187, 16, 1, "-", "LOAD_FAST_AND_CLEAR"], [187, 16, 1, "-", "LOAD_FAST_CHECK"], [187, 16, 1, "-", "LOAD_FROM_DICT_OR_DEREF"], [187, 16, 1, "-", "LOAD_FROM_DICT_OR_GLOBALS"], [187, 16, 1, "-", "LOAD_GLOBAL"], [187, 16, 1, "-", "LOAD_LOCALS"], [187, 16, 1, "-", "LOAD_METHOD"], [187, 16, 1, "-", "LOAD_NAME"], [187, 16, 1, "-", "LOAD_SUPER_ATTR"], [187, 16, 1, "-", "MAKE_CELL"], [187, 16, 1, "-", "MAKE_FUNCTION"], [187, 16, 1, "-", "MAP_ADD"], [187, 16, 1, "-", "MATCH_CLASS"], [187, 16, 1, "-", "MATCH_KEYS"], [187, 16, 1, "-", "MATCH_MAPPING"], [187, 16, 1, "-", "MATCH_SEQUENCE"], [187, 16, 1, "-", "NOP"], [451, 15, 1, "-", "OPT"], [187, 16, 1, "-", "POP_BLOCK"], [187, 16, 1, "-", "POP_EXCEPT"], [187, 16, 1, "-", "POP_JUMP_IF_FALSE"], [187, 16, 1, "-", "POP_JUMP_IF_NONE"], [187, 16, 1, "-", "POP_JUMP_IF_NOT_NONE"], [187, 16, 1, "-", "POP_JUMP_IF_TRUE"], [187, 16, 1, "-", "POP_TOP"], [451, 15, 1, "-", "PROFILE_TASK"], [451, 15, 1, "-", "PURIFY"], [187, 16, 1, "-", "PUSH_EXC_INFO"], [187, 16, 1, "-", "PUSH_NULL"], [450, 15, 1, "-", "PYTHONASYNCIODEBUG"], [450, 15, 1, "-", "PYTHONBREAKPOINT"], [450, 15, 1, "-", "PYTHONCASEOK"], [450, 15, 1, "-", "PYTHONCOERCECLOCALE"], [450, 15, 1, "-", "PYTHONDEBUG"], [450, 15, 1, "-", "PYTHONDEVMODE"], [450, 15, 1, "-", "PYTHONDONTWRITEBYTECODE"], [450, 15, 1, "-", "PYTHONDUMPREFS"], [450, 15, 1, "envvar-PYTHONDUMPREFSFILE-FILENAME", "PYTHONDUMPREFSFILE=FILENAME"], [450, 15, 1, "-", "PYTHONEXECUTABLE"], [450, 15, 1, "-", "PYTHONFAULTHANDLER"], [450, 15, 1, "-", "PYTHONHASHSEED"], [450, 15, 1, "-", "PYTHONHOME"], [450, 15, 1, "-", "PYTHONINSPECT"], [450, 15, 1, "-", "PYTHONINTMAXSTRDIGITS"], [450, 15, 1, "-", "PYTHONIOENCODING"], [450, 15, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [450, 15, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [450, 15, 1, "-", "PYTHONMALLOC"], [450, 15, 1, "-", "PYTHONMALLOCSTATS"], [450, 15, 1, "-", "PYTHONNODEBUGRANGES"], [450, 15, 1, "-", "PYTHONNOUSERSITE"], [450, 15, 1, "-", "PYTHONOPTIMIZE"], [450, 15, 1, "-", "PYTHONPATH"], [450, 15, 1, "-", "PYTHONPERFSUPPORT"], [450, 15, 1, "-", "PYTHONPLATLIBDIR"], [450, 15, 1, "-", "PYTHONPROFILEIMPORTTIME"], [450, 15, 1, "-", "PYTHONPYCACHEPREFIX"], [450, 15, 1, "-", "PYTHONSAFEPATH"], [450, 15, 1, "-", "PYTHONSTARTUP"], [450, 15, 1, "-", "PYTHONTRACEMALLOC"], [420, 15, 1, "-", "PYTHONTZPATH"], [450, 15, 1, "-", "PYTHONUNBUFFERED"], [450, 15, 1, "-", "PYTHONUSERBASE"], [450, 15, 1, "-", "PYTHONUTF8"], [450, 15, 1, "-", "PYTHONVERBOSE"], [450, 15, 1, "-", "PYTHONWARNDEFAULTENCODING"], [450, 15, 1, "-", "PYTHONWARNINGS"], [451, 15, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [451, 15, 1, "-", "PY_CFLAGS"], [451, 15, 1, "-", "PY_CFLAGS_NODIST"], [451, 15, 1, "-", "PY_CORE_CFLAGS"], [451, 15, 1, "-", "PY_CORE_LDFLAGS"], [451, 15, 1, "-", "PY_CPPFLAGS"], [451, 15, 1, "-", "PY_LDFLAGS"], [451, 15, 1, "-", "PY_LDFLAGS_NODIST"], [451, 15, 1, "-", "PY_STDMODULE_CFLAGS"], [187, 16, 1, "-", "RAISE_VARARGS"], [187, 16, 1, "-", "RERAISE"], [187, 16, 1, "-", "RESUME"], [187, 16, 1, "-", "RETURN_CONST"], [187, 16, 1, "-", "RETURN_GENERATOR"], [187, 16, 1, "-", "RETURN_VALUE"], [187, 16, 1, "-", "SEND"], [187, 16, 1, "-", "SETUP_ANNOTATIONS"], [187, 16, 1, "-", "SETUP_CLEANUP"], [187, 16, 1, "-", "SETUP_FINALLY"], [187, 16, 1, "-", "SETUP_WITH"], [187, 16, 1, "-", "SET_ADD"], [187, 16, 1, "-", "SET_UPDATE"], [187, 16, 1, "-", "STORE_ATTR"], [187, 16, 1, "-", "STORE_DEREF"], [187, 16, 1, "-", "STORE_FAST"], [187, 16, 1, "-", "STORE_GLOBAL"], [187, 16, 1, "-", "STORE_NAME"], [187, 16, 1, "-", "STORE_SLICE"], [187, 16, 1, "-", "STORE_SUBSCR"], [187, 16, 1, "-", "SWAP"], [187, 16, 1, "-", "UNARY_INVERT"], [187, 16, 1, "-", "UNARY_NEGATIVE"], [187, 16, 1, "-", "UNARY_NOT"], [187, 16, 1, "-", "UNPACK_EX"], [187, 16, 1, "-", "UNPACK_SEQUENCE"], [187, 16, 1, "-", "WITH_EXCEPT_START"], [187, 16, 1, "-", "YIELD_VALUE"], [293, 13, 1, "-", "alias"], [109, 17, 1, "to3fixer-apply", "apply"], [293, 13, 1, "-", "args"], [109, 17, 1, "to3fixer-asserts", "asserts"], [109, 17, 1, "to3fixer-basestring", "basestring"], [293, 13, 1, "-", "break"], [109, 17, 1, "to3fixer-buffer", "buffer"], [293, 13, 1, "-", "clear"], [293, 13, 1, "-", "commands"], [293, 13, 1, "-", "condition"], [293, 13, 1, "-", "continue"], [293, 13, 1, "-", "debug"], [109, 17, 1, "to3fixer-dict", "dict"], [293, 13, 1, "-", "disable"], [293, 13, 1, "-", "display"], [293, 13, 1, "-", "down"], [293, 13, 1, "-", "enable"], [109, 17, 1, "to3fixer-except", "except"], [109, 17, 1, "to3fixer-exec", "exec"], [109, 17, 1, "to3fixer-execfile", "execfile"], [109, 17, 1, "to3fixer-exitfunc", "exitfunc"], [109, 17, 1, "to3fixer-filter", "filter"], [109, 17, 1, "to3fixer-funcattrs", "funcattrs"], [109, 17, 1, "to3fixer-future", "future"], [109, 17, 1, "to3fixer-getcwdu", "getcwdu"], [109, 17, 1, "to3fixer-has_key", "has_key"], [293, 13, 1, "-", "help"], [109, 17, 1, "to3fixer-idioms", "idioms"], [293, 13, 1, "-", "ignore"], [109, 17, 1, "to3fixer-import", "import"], [109, 17, 1, "to3fixer-imports", "imports"], [109, 17, 1, "to3fixer-imports2", "imports2"], [109, 17, 1, "to3fixer-input", "input"], [293, 13, 1, "-", "interact"], [109, 17, 1, "to3fixer-intern", "intern"], [109, 17, 1, "to3fixer-isinstance", "isinstance"], [109, 17, 1, "to3fixer-itertools", "itertools"], [109, 17, 1, "to3fixer-itertools_imports", "itertools_imports"], [293, 13, 1, "-", "jump"], [293, 13, 1, "-", "list"], [293, 13, 1, "-", "ll"], [109, 17, 1, "to3fixer-long", "long"], [109, 17, 1, "to3fixer-map", "map"], [109, 17, 1, "to3fixer-metaclass", "metaclass"], [109, 17, 1, "to3fixer-methodattrs", "methodattrs"], [109, 17, 1, "to3fixer-ne", "ne"], [109, 17, 1, "to3fixer-next", "next"], [293, 13, 1, "-", "next"], [109, 17, 1, "to3fixer-nonzero", "nonzero"], [109, 17, 1, "to3fixer-numliterals", "numliterals"], [109, 17, 1, "to3fixer-operator", "operator"], [293, 13, 1, "-", "p"], [109, 17, 1, "to3fixer-paren", "paren"], [293, 13, 1, "-", "pp"], [109, 17, 1, "to3fixer-print", "print"], [293, 13, 1, "-", "quit"], [109, 17, 1, "to3fixer-raise", "raise"], [109, 17, 1, "to3fixer-raw_input", "raw_input"], [109, 17, 1, "to3fixer-reduce", "reduce"], [109, 17, 1, "to3fixer-reload", "reload"], [109, 17, 1, "to3fixer-renames", "renames"], [109, 17, 1, "to3fixer-repr", "repr"], [293, 13, 1, "-", "restart"], [293, 13, 1, "-", "return"], [293, 13, 1, "-", "retval"], [293, 13, 1, "-", "run"], [109, 17, 1, "to3fixer-set_literal", "set_literal"], [293, 13, 1, "-", "source"], [109, 17, 1, "to3fixer-standarderror", "standarderror"], [293, 13, 1, "-", "step"], [109, 17, 1, "to3fixer-sys_exc", "sys_exc"], [293, 13, 1, "-", "tbreak"], [109, 17, 1, "to3fixer-throw", "throw"], [109, 17, 1, "to3fixer-tuple_params", "tuple_params"], [109, 17, 1, "to3fixer-types", "types"], [293, 13, 1, "-", "unalias"], [293, 13, 1, "-", "undisplay"], [109, 17, 1, "to3fixer-unicode", "unicode"], [293, 13, 1, "-", "until"], [293, 13, 1, "-", "up"], [109, 17, 1, "to3fixer-urllib", "urllib"], [293, 13, 1, "-", "whatis"], [293, 13, 1, "-", "where"], [109, 17, 1, "to3fixer-ws_comma", "ws_comma"], [109, 17, 1, "to3fixer-xrange", "xrange"], [109, 17, 1, "to3fixer-xreadlines", "xreadlines"], [109, 17, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[35, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[54, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[54, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[62, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [62, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [62, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [62, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[62, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [62, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCallIter_Check": [[36, 3, 1, "c.PyCallIter_Check", "op"]], "PyCallIter_New": [[36, 3, 1, "c.PyCallIter_New", "callable"], [36, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_Check": [[12, 3, 1, "c.PyCell_Check", "ob"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_AddWatcher": [[13, 3, 1, "c.PyCode_AddWatcher", "callback"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Addr2Location": [[13, 3, 1, "c.PyCode_Addr2Location", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Location", "co"], [13, 3, 1, "c.PyCode_Addr2Location", "end_column"], [13, 3, 1, "c.PyCode_Addr2Location", "end_line"], [13, 3, 1, "c.PyCode_Addr2Location", "start_column"], [13, 3, 1, "c.PyCode_Addr2Location", "start_line"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_ClearWatcher": [[13, 3, 1, "c.PyCode_ClearWatcher", "watcher_id"]], "PyCode_GetCellvars": [[13, 3, 1, "c.PyCode_GetCellvars", "co"]], "PyCode_GetCode": [[13, 3, 1, "c.PyCode_GetCode", "co"]], "PyCode_GetFreevars": [[13, 3, 1, "c.PyCode_GetFreevars", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_GetVarnames": [[13, 3, 1, "c.PyCode_GetVarnames", "co"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[65, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [65, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[33, 0, 1, "c.PyConfig.argv", "argv"], [33, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [33, 0, 1, "c.PyConfig.base_executable", "base_executable"], [33, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [33, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [33, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [33, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [33, 0, 1, "c.PyConfig.code_debug_ranges", "code_debug_ranges"], [33, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [33, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [33, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [33, 0, 1, "c.PyConfig.executable", "executable"], [33, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [33, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [33, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [33, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [33, 0, 1, "c.PyConfig.home", "home"], [33, 0, 1, "c.PyConfig.import_time", "import_time"], [33, 0, 1, "c.PyConfig.inspect", "inspect"], [33, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [33, 0, 1, "c.PyConfig.int_max_str_digits", "int_max_str_digits"], [33, 0, 1, "c.PyConfig.interactive", "interactive"], [33, 0, 1, "c.PyConfig.isolated", "isolated"], [33, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [33, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [33, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [33, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [33, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [33, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [33, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [33, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [33, 0, 1, "c.PyConfig.perf_profiling", "perf_profiling"], [33, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [33, 0, 1, "c.PyConfig.prefix", "prefix"], [33, 0, 1, "c.PyConfig.program_name", "program_name"], [33, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [33, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [33, 0, 1, "c.PyConfig.quiet", "quiet"], [33, 0, 1, "c.PyConfig.run_command", "run_command"], [33, 0, 1, "c.PyConfig.run_filename", "run_filename"], [33, 0, 1, "c.PyConfig.run_module", "run_module"], [33, 0, 1, "c.PyConfig.safe_path", "safe_path"], [33, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [33, 0, 1, "c.PyConfig.site_import", "site_import"], [33, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [33, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [33, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [33, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [33, 0, 1, "c.PyConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [33, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [33, 0, 1, "c.PyConfig.verbose", "verbose"], [33, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [33, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [33, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [33, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig_Clear": [[33, 3, 1, "c.PyConfig_Clear", "config"]], "PyConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyConfig_InitIsolatedConfig", "config"]], "PyConfig_InitPythonConfig": [[33, 3, 1, "c.PyConfig_InitPythonConfig", "config"]], "PyConfig_Read": [[33, 3, 1, "c.PyConfig_Read", "config"]], "PyConfig_SetArgv": [[33, 3, 1, "c.PyConfig_SetArgv", "argc"], [33, 3, 1, "c.PyConfig_SetArgv", "argv"], [33, 3, 1, "c.PyConfig_SetArgv", "config"]], "PyConfig_SetBytesArgv": [[33, 3, 1, "c.PyConfig_SetBytesArgv", "argc"], [33, 3, 1, "c.PyConfig_SetBytesArgv", "argv"], [33, 3, 1, "c.PyConfig_SetBytesArgv", "config"]], "PyConfig_SetBytesString": [[33, 3, 1, "c.PyConfig_SetBytesString", "config"], [33, 3, 1, "c.PyConfig_SetBytesString", "config_str"], [33, 3, 1, "c.PyConfig_SetBytesString", "str"]], "PyConfig_SetString": [[33, 3, 1, "c.PyConfig_SetString", "config"], [33, 3, 1, "c.PyConfig_SetString", "config_str"], [33, 3, 1, "c.PyConfig_SetString", "str"]], "PyConfig_SetWideStringList": [[33, 3, 1, "c.PyConfig_SetWideStringList", "config"], [33, 3, 1, "c.PyConfig_SetWideStringList", "items"], [33, 3, 1, "c.PyConfig_SetWideStringList", "length"], [33, 3, 1, "c.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_AddWatcher": [[22, 3, 1, "c.PyDict_AddWatcher", "callback"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_ClearWatcher": [[22, 3, 1, "c.PyDict_ClearWatcher", "watcher_id"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Unwatch": [[22, 3, 1, "c.PyDict_Unwatch", "dict"], [22, 3, 1, "c.PyDict_Unwatch", "watcher_id"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyDict_Watch": [[22, 3, 1, "c.PyDict_Watch", "dict"], [22, 3, 1, "c.PyDict_Watch", "watcher_id"]], "PyErr_DisplayException": [[23, 3, 1, "c.PyErr_DisplayException", "exc"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetHandledException": [[23, 3, 1, "c.PyErr_SetHandledException", "exc"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetRaisedException": [[23, 3, 1, "c.PyErr_SetRaisedException", "exc"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[32, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[65, 3, 1, "c.PyEval_EvalCode", "co"], [65, 3, 1, "c.PyEval_EvalCode", "globals"], [65, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[65, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "args"], [65, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [65, 3, 1, "c.PyEval_EvalCodeEx", "co"], [65, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [65, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [65, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[65, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[65, 3, 1, "c.PyEval_EvalFrameEx", "f"], [65, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[52, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[52, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[65, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[32, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[32, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[32, 3, 1, "c.PyEval_SetProfile", "func"], [32, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetProfileAllThreads": [[32, 3, 1, "c.PyEval_SetProfileAllThreads", "func"], [32, 3, 1, "c.PyEval_SetProfileAllThreads", "obj"]], "PyEval_SetTrace": [[32, 3, 1, "c.PyEval_SetTrace", "func"], [32, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyEval_SetTraceAllThreads": [[32, 3, 1, "c.PyEval_SetTraceAllThreads", "func"], [32, 3, 1, "c.PyEval_SetTraceAllThreads", "obj"]], "PyException_GetArgs": [[23, 3, 1, "c.PyException_GetArgs", "ex"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetArgs": [[23, 3, 1, "c.PyException_SetArgs", "args"], [23, 3, 1, "c.PyException_SetArgs", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFloat_Pack2": [[25, 3, 1, "c.PyFloat_Pack2", "le"], [25, 3, 1, "c.PyFloat_Pack2", "p"], [25, 3, 1, "c.PyFloat_Pack2", "x"]], "PyFloat_Pack4": [[25, 3, 1, "c.PyFloat_Pack4", "le"], [25, 3, 1, "c.PyFloat_Pack4", "p"], [25, 3, 1, "c.PyFloat_Pack4", "x"]], "PyFloat_Pack8": [[25, 3, 1, "c.PyFloat_Pack8", "le"], [25, 3, 1, "c.PyFloat_Pack8", "p"], [25, 3, 1, "c.PyFloat_Pack8", "x"]], "PyFloat_Unpack2": [[25, 3, 1, "c.PyFloat_Unpack2", "le"], [25, 3, 1, "c.PyFloat_Unpack2", "p"]], "PyFloat_Unpack4": [[25, 3, 1, "c.PyFloat_Unpack4", "le"], [25, 3, 1, "c.PyFloat_Unpack4", "p"]], "PyFloat_Unpack8": [[25, 3, 1, "c.PyFloat_Unpack8", "le"], [25, 3, 1, "c.PyFloat_Unpack8", "p"]], "PyFrame_Check": [[26, 3, 1, "c.PyFrame_Check", "obj"]], "PyFrame_GetBack": [[26, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetBuiltins": [[26, 3, 1, "c.PyFrame_GetBuiltins", "frame"]], "PyFrame_GetCode": [[26, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetGenerator": [[26, 3, 1, "c.PyFrame_GetGenerator", "frame"]], "PyFrame_GetGlobals": [[26, 3, 1, "c.PyFrame_GetGlobals", "frame"]], "PyFrame_GetLasti": [[26, 3, 1, "c.PyFrame_GetLasti", "frame"]], "PyFrame_GetLineNumber": [[26, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrame_GetLocals": [[26, 3, 1, "c.PyFrame_GetLocals", "frame"]], "PyFrame_GetVar": [[26, 3, 1, "c.PyFrame_GetVar", "frame"], [26, 3, 1, "c.PyFrame_GetVar", "name"]], "PyFrame_GetVarString": [[26, 3, 1, "c.PyFrame_GetVarString", "frame"], [26, 3, 1, "c.PyFrame_GetVarString", "name"]], "PyFrozenSet_Check": [[54, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[54, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[54, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_AddWatcher": [[27, 3, 1, "c.PyFunction_AddWatcher", "callback"]], "PyFunction_Check": [[27, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_ClearWatcher": [[27, 3, 1, "c.PyFunction_ClearWatcher", "watcher_id"]], "PyFunction_GetAnnotations": [[27, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[27, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[27, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[27, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[27, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[27, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[27, 3, 1, "c.PyFunction_New", "code"], [27, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[27, 3, 1, "c.PyFunction_NewWithQualName", "code"], [27, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [27, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[27, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [27, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[27, 3, 1, "c.PyFunction_SetClosure", "closure"], [27, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[27, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [27, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyFunction_SetVectorcall": [[27, 3, 1, "c.PyFunction_SetVectorcall", "func"], [27, 3, 1, "c.PyFunction_SetVectorcall", "vectorcall"]], "PyGen_Check": [[29, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[29, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[29, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[29, 3, 1, "c.PyGen_NewWithQualName", "frame"], [29, 3, 1, "c.PyGen_NewWithQualName", "name"], [29, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyGetSetDef": [[57, 0, 1, "c.PyGetSetDef.closure", "closure"], [57, 0, 1, "c.PyGetSetDef.doc", "doc"], [57, 0, 1, "c.PyGetSetDef.get", "get"], [57, 0, 1, "c.PyGetSetDef.name", "name"], [57, 0, 1, "c.PyGetSetDef.set", "set"]], "PyImport_AddModule": [[30, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[30, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[30, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [30, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[30, 3, 1, "c.PyImport_ExecCodeModule", "co"], [30, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[30, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[30, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[30, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[30, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[30, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[30, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[30, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[30, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[30, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[30, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[30, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[30, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[30, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[30, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[46, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[43, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[43, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[43, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[43, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterConfig": [[32, 0, 1, "c.PyInterpreterConfig.allow_daemon_threads", "allow_daemon_threads"], [32, 0, 1, "c.PyInterpreterConfig.allow_exec", "allow_exec"], [32, 0, 1, "c.PyInterpreterConfig.allow_fork", "allow_fork"], [32, 0, 1, "c.PyInterpreterConfig.allow_threads", "allow_threads"], [32, 0, 1, "c.PyInterpreterConfig.check_multi_interp_extensions", "check_multi_interp_extensions"], [32, 0, 1, "c.PyInterpreterConfig.gil", "gil"], [32, 0, 1, "c.PyInterpreterConfig.use_main_obmalloc", "use_main_obmalloc"]], "PyInterpreterState_Clear": [[32, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[32, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[32, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[32, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[32, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[32, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[35, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[35, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[35, 3, 1, "c.PyIter_Send", "arg"], [35, 3, 1, "c.PyIter_Send", "iter"], [35, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[37, 3, 1, "c.PyList_Append", "item"], [37, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[37, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[37, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[37, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[37, 3, 1, "c.PyList_GET_ITEM", "i"], [37, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[37, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[37, 3, 1, "c.PyList_GetItem", "index"], [37, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[37, 3, 1, "c.PyList_GetSlice", "high"], [37, 3, 1, "c.PyList_GetSlice", "list"], [37, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[37, 3, 1, "c.PyList_Insert", "index"], [37, 3, 1, "c.PyList_Insert", "item"], [37, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[37, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[37, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[37, 3, 1, "c.PyList_SET_ITEM", "i"], [37, 3, 1, "c.PyList_SET_ITEM", "list"], [37, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[37, 3, 1, "c.PyList_SetItem", "index"], [37, 3, 1, "c.PyList_SetItem", "item"], [37, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[37, 3, 1, "c.PyList_SetSlice", "high"], [37, 3, 1, "c.PyList_SetSlice", "itemlist"], [37, 3, 1, "c.PyList_SetSlice", "list"], [37, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[37, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[37, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[38, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[38, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[38, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[38, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[38, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[38, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[38, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[38, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[38, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[38, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[38, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[38, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[38, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[38, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[38, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[38, 3, 1, "c.PyLong_FromString", "base"], [38, 3, 1, "c.PyLong_FromString", "pend"], [38, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[38, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [38, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[38, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[38, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[38, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[62, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [62, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [62, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[39, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[39, 3, 1, "c.PyMapping_DelItem", "key"], [39, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[39, 3, 1, "c.PyMapping_DelItemString", "key"], [39, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[39, 3, 1, "c.PyMapping_GetItemString", "key"], [39, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[39, 3, 1, "c.PyMapping_HasKey", "key"], [39, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[39, 3, 1, "c.PyMapping_HasKeyString", "key"], [39, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[39, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[39, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[39, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[39, 3, 1, "c.PyMapping_SetItemString", "key"], [39, 3, 1, "c.PyMapping_SetItemString", "o"], [39, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[39, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[39, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[40, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[40, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [40, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[40, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[40, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[40, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[40, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMem_Calloc": [[41, 3, 1, "c.PyMem_Calloc", "elsize"], [41, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[41, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[41, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[41, 3, 1, "c.PyMem_GetAllocator", "allocator"], [41, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[41, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_RawCalloc": [[41, 3, 1, "c.PyMem_RawCalloc", "elsize"], [41, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[41, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[41, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[41, 3, 1, "c.PyMem_RawRealloc", "n"], [41, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[41, 3, 1, "c.PyMem_Realloc", "n"], [41, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_SetAllocator": [[41, 3, 1, "c.PyMem_SetAllocator", "allocator"], [41, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMemberDef": [[57, 0, 1, "c.PyMemberDef.doc", "doc"], [57, 0, 1, "c.PyMemberDef.flags", "flags"], [57, 0, 1, "c.PyMemberDef.name", "name"], [57, 0, 1, "c.PyMemberDef.offset", "offset"], [57, 0, 1, "c.PyMemberDef.type", "type"]], "PyMember_GetOne": [[57, 3, 1, "c.PyMember_GetOne", "m"], [57, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[57, 3, 1, "c.PyMember_SetOne", "m"], [57, 3, 1, "c.PyMember_SetOne", "o"], [57, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[42, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[42, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[42, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [42, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [42, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[42, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[42, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[42, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[42, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethodDef": [[57, 0, 1, "c.PyMethodDef.ml_doc", "ml_doc"], [57, 0, 1, "c.PyMethodDef.ml_flags", "ml_flags"], [57, 0, 1, "c.PyMethodDef.ml_meth", "ml_meth"], [57, 0, 1, "c.PyMethodDef.ml_name", "ml_name"]], "PyMethod_Check": [[43, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[43, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[43, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[43, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[43, 3, 1, "c.PyMethod_New", "func"], [43, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[43, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[44, 0, 1, "c.PyModuleDef.m_base", "m_base"], [44, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [44, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [44, 0, 1, "c.PyModuleDef.m_free", "m_free"], [44, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [44, 0, 1, "c.PyModuleDef.m_name", "m_name"], [44, 0, 1, "c.PyModuleDef.m_size", "m_size"], [44, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [44, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[44, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[44, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[44, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [44, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[44, 3, 1, "c.PyModule_AddFunctions", "functions"], [44, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[44, 3, 1, "c.PyModule_AddIntConstant", "module"], [44, 3, 1, "c.PyModule_AddIntConstant", "name"], [44, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddObject": [[44, 3, 1, "c.PyModule_AddObject", "module"], [44, 3, 1, "c.PyModule_AddObject", "name"], [44, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[44, 3, 1, "c.PyModule_AddObjectRef", "module"], [44, 3, 1, "c.PyModule_AddObjectRef", "name"], [44, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[44, 3, 1, "c.PyModule_AddStringConstant", "module"], [44, 3, 1, "c.PyModule_AddStringConstant", "name"], [44, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddType": [[44, 3, 1, "c.PyModule_AddType", "module"], [44, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[44, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[44, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[44, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[44, 3, 1, "c.PyModule_Create2", "def"], [44, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[44, 3, 1, "c.PyModule_ExecDef", "def"], [44, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[44, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[44, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[44, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[44, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[44, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[44, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[44, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[44, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[44, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[44, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[44, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[44, 3, 1, "c.PyModule_SetDocString", "docstring"], [44, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[62, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [62, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [62, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [62, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [62, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [62, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [62, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [62, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [62, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [62, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [62, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [62, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [62, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [62, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [62, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [62, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [62, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [62, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [62, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [62, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [62, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[46, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[46, 3, 1, "c.PyNumber_Add", "o1"], [46, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[46, 3, 1, "c.PyNumber_And", "o1"], [46, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[46, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [46, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[46, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[46, 3, 1, "c.PyNumber_Divmod", "o1"], [46, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[46, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[46, 3, 1, "c.PyNumber_FloorDivide", "o1"], [46, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[46, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[46, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[46, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[46, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [46, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[46, 3, 1, "c.PyNumber_InPlacePower", "o1"], [46, 3, 1, "c.PyNumber_InPlacePower", "o2"], [46, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[46, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[46, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[46, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [46, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[46, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [46, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[46, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[46, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[46, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[46, 3, 1, "c.PyNumber_Lshift", "o1"], [46, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[46, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[46, 3, 1, "c.PyNumber_Multiply", "o1"], [46, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[46, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[46, 3, 1, "c.PyNumber_Or", "o1"], [46, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[46, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[46, 3, 1, "c.PyNumber_Power", "o1"], [46, 3, 1, "c.PyNumber_Power", "o2"], [46, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[46, 3, 1, "c.PyNumber_Remainder", "o1"], [46, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[46, 3, 1, "c.PyNumber_Rshift", "o1"], [46, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[46, 3, 1, "c.PyNumber_Subtract", "o1"], [46, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[46, 3, 1, "c.PyNumber_ToBase", "base"], [46, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[46, 3, 1, "c.PyNumber_TrueDivide", "o1"], [46, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[46, 3, 1, "c.PyNumber_Xor", "o1"], [46, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[58, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[58, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[58, 3, 1, "c.PyOS_setsig", "h"], [58, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[62, 0, 1, "c.PyObject._ob_next", "_ob_next"], [62, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [62, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [62, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[48, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[47, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[47, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[48, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[41, 3, 1, "c.PyObject_Calloc", "elsize"], [41, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[47, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_ClearWeakRefs": [[66, 3, 1, "c.PyObject_ClearWeakRefs", "object"]], "PyObject_CopyData": [[7, 3, 1, "c.PyObject_CopyData", "dest"], [7, 3, 1, "c.PyObject_CopyData", "src"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[48, 3, 1, "c.PyObject_DelAttr", "attr_name"], [48, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[48, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [48, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[48, 3, 1, "c.PyObject_DelItem", "key"], [48, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[48, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Format": [[48, 3, 1, "c.PyObject_Format", "format_spec"], [48, 3, 1, "c.PyObject_Format", "obj"]], "PyObject_Free": [[41, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[28, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[28, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[28, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_Resize": [[28, 3, 1, "c.PyObject_GC_Resize", "newsize"], [28, 3, 1, "c.PyObject_GC_Resize", "op"]], "PyObject_GC_Track": [[28, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[28, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[48, 3, 1, "c.PyObject_GenericGetAttr", "name"], [48, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[48, 3, 1, "c.PyObject_GenericGetDict", "context"], [48, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[48, 3, 1, "c.PyObject_GenericSetAttr", "name"], [48, 3, 1, "c.PyObject_GenericSetAttr", "o"], [48, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[48, 3, 1, "c.PyObject_GenericSetDict", "context"], [48, 3, 1, "c.PyObject_GenericSetDict", "o"], [48, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[48, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[41, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[48, 3, 1, "c.PyObject_GetAttr", "attr_name"], [48, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[48, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[48, 3, 1, "c.PyObject_GetItem", "key"], [48, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetItemData": [[48, 3, 1, "c.PyObject_GetItemData", "o"]], "PyObject_GetIter": [[48, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_GetTypeData": [[48, 3, 1, "c.PyObject_GetTypeData", "cls"], [48, 3, 1, "c.PyObject_GetTypeData", "o"]], "PyObject_HasAttr": [[48, 3, 1, "c.PyObject_HasAttr", "attr_name"], [48, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[48, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [48, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[48, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[48, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[28, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[48, 3, 1, "c.PyObject_IsInstance", "cls"], [48, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[48, 3, 1, "c.PyObject_IsSubclass", "cls"], [48, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[48, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[48, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[48, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [48, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[41, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_Not": [[48, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[48, 3, 1, "c.PyObject_Print", "flags"], [48, 3, 1, "c.PyObject_Print", "fp"], [48, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[41, 3, 1, "c.PyObject_Realloc", "n"], [41, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[48, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[48, 3, 1, "c.PyObject_RichCompare", "o1"], [48, 3, 1, "c.PyObject_RichCompare", "o2"], [48, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[48, 3, 1, "c.PyObject_RichCompareBool", "o1"], [48, 3, 1, "c.PyObject_RichCompareBool", "o2"], [48, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[41, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[48, 3, 1, "c.PyObject_SetAttr", "attr_name"], [48, 3, 1, "c.PyObject_SetAttr", "o"], [48, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[48, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_SetAttrString", "o"], [48, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[48, 3, 1, "c.PyObject_SetItem", "key"], [48, 3, 1, "c.PyObject_SetItem", "o"], [48, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[48, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[48, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[48, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[48, 3, 1, "c.PyObject_TypeCheck", "o"], [48, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[33, 0, 1, "c.PyPreConfig.allocator", "allocator"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [33, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [33, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyPreConfig.isolated", "isolated"], [33, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [33, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig_InitPythonConfig": [[33, 3, 1, "c.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[65, 3, 1, "c.PyRun_AnyFile", "filename"], [65, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[65, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [65, 3, 1, "c.PyRun_AnyFileEx", "filename"], [65, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[65, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[65, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [65, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [65, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[65, 3, 1, "c.PyRun_File", "filename"], [65, 3, 1, "c.PyRun_File", "fp"], [65, 3, 1, "c.PyRun_File", "globals"], [65, 3, 1, "c.PyRun_File", "locals"], [65, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[65, 3, 1, "c.PyRun_FileEx", "closeit"], [65, 3, 1, "c.PyRun_FileEx", "filename"], [65, 3, 1, "c.PyRun_FileEx", "fp"], [65, 3, 1, "c.PyRun_FileEx", "globals"], [65, 3, 1, "c.PyRun_FileEx", "locals"], [65, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[65, 3, 1, "c.PyRun_FileExFlags", "closeit"], [65, 3, 1, "c.PyRun_FileExFlags", "filename"], [65, 3, 1, "c.PyRun_FileExFlags", "flags"], [65, 3, 1, "c.PyRun_FileExFlags", "fp"], [65, 3, 1, "c.PyRun_FileExFlags", "globals"], [65, 3, 1, "c.PyRun_FileExFlags", "locals"], [65, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[65, 3, 1, "c.PyRun_FileFlags", "filename"], [65, 3, 1, "c.PyRun_FileFlags", "flags"], [65, 3, 1, "c.PyRun_FileFlags", "fp"], [65, 3, 1, "c.PyRun_FileFlags", "globals"], [65, 3, 1, "c.PyRun_FileFlags", "locals"], [65, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[65, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [65, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[65, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [65, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [65, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[65, 3, 1, "c.PyRun_InteractiveOne", "filename"], [65, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[65, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [65, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [65, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[65, 3, 1, "c.PyRun_SimpleFile", "filename"], [65, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[65, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [65, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [65, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[65, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[65, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[65, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [65, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[65, 3, 1, "c.PyRun_String", "globals"], [65, 3, 1, "c.PyRun_String", "locals"], [65, 3, 1, "c.PyRun_String", "start"], [65, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[65, 3, 1, "c.PyRun_StringFlags", "flags"], [65, 3, 1, "c.PyRun_StringFlags", "globals"], [65, 3, 1, "c.PyRun_StringFlags", "locals"], [65, 3, 1, "c.PyRun_StringFlags", "start"], [65, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_Check": [[36, 3, 1, "c.PySeqIter_Check", "op"]], "PySeqIter_New": [[36, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[62, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [62, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [62, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [62, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [62, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [62, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [62, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [62, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[53, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[53, 3, 1, "c.PySequence_Concat", "o1"], [53, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[53, 3, 1, "c.PySequence_Contains", "o"], [53, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[53, 3, 1, "c.PySequence_Count", "o"], [53, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[53, 3, 1, "c.PySequence_DelItem", "i"], [53, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[53, 3, 1, "c.PySequence_DelSlice", "i1"], [53, 3, 1, "c.PySequence_DelSlice", "i2"], [53, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[53, 3, 1, "c.PySequence_Fast", "m"], [53, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[53, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [53, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[53, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[53, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[53, 3, 1, "c.PySequence_GetItem", "i"], [53, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[53, 3, 1, "c.PySequence_GetSlice", "i1"], [53, 3, 1, "c.PySequence_GetSlice", "i2"], [53, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[53, 3, 1, "c.PySequence_ITEM", "i"], [53, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[53, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [53, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[53, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [53, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[53, 3, 1, "c.PySequence_Index", "o"], [53, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[53, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[53, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[53, 3, 1, "c.PySequence_Repeat", "count"], [53, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[53, 3, 1, "c.PySequence_SetItem", "i"], [53, 3, 1, "c.PySequence_SetItem", "o"], [53, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[53, 3, 1, "c.PySequence_SetSlice", "i1"], [53, 3, 1, "c.PySequence_SetSlice", "i2"], [53, 3, 1, "c.PySequence_SetSlice", "o"], [53, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[53, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[53, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[54, 3, 1, "c.PySet_Add", "key"], [54, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[54, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[54, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[54, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[54, 3, 1, "c.PySet_Contains", "anyset"], [54, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[54, 3, 1, "c.PySet_Discard", "key"], [54, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[54, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[54, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[54, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[54, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[55, 3, 1, "c.PySlice_AdjustIndices", "length"], [55, 3, 1, "c.PySlice_AdjustIndices", "start"], [55, 3, 1, "c.PySlice_AdjustIndices", "step"], [55, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[55, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[55, 3, 1, "c.PySlice_GetIndices", "length"], [55, 3, 1, "c.PySlice_GetIndices", "slice"], [55, 3, 1, "c.PySlice_GetIndices", "start"], [55, 3, 1, "c.PySlice_GetIndices", "step"], [55, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[55, 3, 1, "c.PySlice_GetIndicesEx", "length"], [55, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [55, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [55, 3, 1, "c.PySlice_GetIndicesEx", "start"], [55, 3, 1, "c.PySlice_GetIndicesEx", "step"], [55, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[55, 3, 1, "c.PySlice_New", "start"], [55, 3, 1, "c.PySlice_New", "step"], [55, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[55, 3, 1, "c.PySlice_Unpack", "slice"], [55, 3, 1, "c.PySlice_Unpack", "start"], [55, 3, 1, "c.PySlice_Unpack", "step"], [55, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[44, 3, 1, "c.PyState_AddModule", "def"], [44, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[44, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[44, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[33, 0, 1, "c.PyStatus.err_msg", "err_msg"], [33, 0, 1, "c.PyStatus.exitcode", "exitcode"], [33, 0, 1, "c.PyStatus.func", "func"]], "PyStatus_Error": [[33, 3, 1, "c.PyStatus_Error", "err_msg"]], "PyStatus_Exception": [[33, 3, 1, "c.PyStatus_Exception", "status"]], "PyStatus_Exit": [[33, 3, 1, "c.PyStatus_Exit", "exitcode"]], "PyStatus_IsError": [[33, 3, 1, "c.PyStatus_IsError", "status"]], "PyStatus_IsExit": [[33, 3, 1, "c.PyStatus_IsExit", "status"]], "PyStructSequence_Desc": [[59, 0, 1, "c.PyStructSequence_Desc.doc", "doc"], [59, 0, 1, "c.PyStructSequence_Desc.fields", "fields"], [59, 0, 1, "c.PyStructSequence_Desc.n_in_sequence", "n_in_sequence"], [59, 0, 1, "c.PyStructSequence_Desc.name", "name"]], "PyStructSequence_Field": [[59, 0, 1, "c.PyStructSequence_Field.doc", "doc"], [59, 0, 1, "c.PyStructSequence_Field.name", "name"]], "PyStructSequence_GET_ITEM": [[59, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [59, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[59, 3, 1, "c.PyStructSequence_GetItem", "p"], [59, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[59, 3, 1, "c.PyStructSequence_InitType", "desc"], [59, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[59, 3, 1, "c.PyStructSequence_InitType2", "desc"], [59, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[59, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[59, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[59, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [59, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [59, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[59, 3, 1, "c.PyStructSequence_SetItem", "o"], [59, 3, 1, "c.PyStructSequence_SetItem", "p"], [59, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[58, 3, 1, "c.PySys_AddAuditHook", "hook"], [58, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[58, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[58, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[58, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[58, 3, 1, "c.PySys_Audit", "event"], [58, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[58, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[58, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[58, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[32, 3, 1, "c.PySys_SetArgv", "argc"], [32, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[32, 3, 1, "c.PySys_SetArgvEx", "argc"], [32, 3, 1, "c.PySys_SetArgvEx", "argv"], [32, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[58, 3, 1, "c.PySys_SetObject", "name"], [58, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[58, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[58, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[58, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState": [[32, 0, 1, "c.PyThreadState.interp", "interp"]], "PyThreadState_Clear": [[32, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[32, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_EnterTracing": [[32, 3, 1, "c.PyThreadState_EnterTracing", "tstate"]], "PyThreadState_GetFrame": [[32, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[32, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[32, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_LeaveTracing": [[32, 3, 1, "c.PyThreadState_LeaveTracing", "tstate"]], "PyThreadState_New": [[32, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[32, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[32, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [32, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[32, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[32, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[32, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[32, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[32, 3, 1, "c.PyThread_set_key_value", "key"], [32, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[32, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[32, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[32, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[32, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[32, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[32, 3, 1, "c.PyThread_tss_set", "key"], [32, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[41, 3, 1, "c.PyTraceMalloc_Track", "domain"], [41, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [41, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[41, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [41, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[59, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[59, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[59, 3, 1, "c.PyTuple_GET_ITEM", "p"], [59, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[59, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[59, 3, 1, "c.PyTuple_GetItem", "p"], [59, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[59, 3, 1, "c.PyTuple_GetSlice", "high"], [59, 3, 1, "c.PyTuple_GetSlice", "low"], [59, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[59, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[59, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[59, 3, 1, "c.PyTuple_SET_ITEM", "o"], [59, 3, 1, "c.PyTuple_SET_ITEM", "p"], [59, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[59, 3, 1, "c.PyTuple_SetItem", "o"], [59, 3, 1, "c.PyTuple_SetItem", "p"], [59, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[59, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[62, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [62, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [62, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [62, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [62, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [62, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [62, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [62, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [62, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [62, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [62, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [62, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [62, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [62, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [62, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [62, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [62, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [62, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [62, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [62, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [62, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [62, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [62, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [62, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [62, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [62, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [62, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [62, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [62, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [62, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [62, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [62, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [62, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [62, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [62, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [62, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [62, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [62, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [62, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [62, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [62, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [62, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [62, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [62, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [62, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [62, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [62, 0, 1, "c.PyTypeObject.tp_watched", "tp_watched"], [62, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [62, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyType_AddWatcher": [[60, 3, 1, "c.PyType_AddWatcher", "callback"]], "PyType_Check": [[60, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[60, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_ClearWatcher": [[60, 3, 1, "c.PyType_ClearWatcher", "watcher_id"]], "PyType_FromMetaclass": [[60, 3, 1, "c.PyType_FromMetaclass", "bases"], [60, 3, 1, "c.PyType_FromMetaclass", "metaclass"], [60, 3, 1, "c.PyType_FromMetaclass", "module"], [60, 3, 1, "c.PyType_FromMetaclass", "spec"]], "PyType_FromModuleAndSpec": [[60, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [60, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [60, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[60, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[60, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [60, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[60, 3, 1, "c.PyType_GenericAlloc", "nitems"], [60, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[60, 3, 1, "c.PyType_GenericNew", "args"], [60, 3, 1, "c.PyType_GenericNew", "kwds"], [60, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetDict": [[60, 3, 1, "c.PyType_GetDict", "type"]], "PyType_GetFlags": [[60, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[60, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleByDef": [[60, 3, 1, "c.PyType_GetModuleByDef", "def"], [60, 3, 1, "c.PyType_GetModuleByDef", "type"]], "PyType_GetModuleState": [[60, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetName": [[60, 3, 1, "c.PyType_GetName", "type"]], "PyType_GetQualName": [[60, 3, 1, "c.PyType_GetQualName", "type"]], "PyType_GetSlot": [[60, 3, 1, "c.PyType_GetSlot", "slot"], [60, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_GetTypeDataSize": [[48, 3, 1, "c.PyType_GetTypeDataSize", "cls"]], "PyType_HasFeature": [[60, 3, 1, "c.PyType_HasFeature", "feature"], [60, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[60, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[60, 3, 1, "c.PyType_IsSubtype", "a"], [60, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[60, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[60, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot": [[60, 0, 1, "c.PyType_Slot.pfunc", "pfunc"], [60, 0, 1, "c.PyType_Slot.slot", "slot"]], "PyType_Spec": [[60, 0, 1, "c.PyType_Spec.basicsize", "basicsize"], [60, 0, 1, "c.PyType_Spec.flags", "flags"], [60, 0, 1, "c.PyType_Spec.itemsize", "itemsize"], [60, 0, 1, "c.PyType_Spec.name", "name"], [60, 0, 1, "c.PyType_Spec.slots", "slots"]], "PyType_Watch": [[60, 3, 1, "c.PyType_Watch", "type"], [60, 3, 1, "c.PyType_Watch", "watcher_id"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[63, 3, 1, "c.PyUnicode_1BYTE_DATA", "o"]], "PyUnicode_2BYTE_DATA": [[63, 3, 1, "c.PyUnicode_2BYTE_DATA", "o"]], "PyUnicode_4BYTE_DATA": [[63, 3, 1, "c.PyUnicode_4BYTE_DATA", "o"]], "PyUnicode_AsASCIIString": [[63, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[63, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [63, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[63, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [63, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [63, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[63, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[63, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[63, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[63, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [63, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [63, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [63, 3, 1, "c.PyUnicode_AsUCS4", "u"]], "PyUnicode_AsUCS4Copy": [[63, 3, 1, "c.PyUnicode_AsUCS4Copy", "u"]], "PyUnicode_AsUTF16String": [[63, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[63, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[63, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[63, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [63, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[63, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[63, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[63, 3, 1, "c.PyUnicode_AsWideChar", "size"], [63, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [63, 3, 1, "c.PyUnicode_AsWideChar", "w"]], "PyUnicode_AsWideCharString": [[63, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [63, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[63, 3, 1, "c.PyUnicode_Check", "o"]], "PyUnicode_CheckExact": [[63, 3, 1, "c.PyUnicode_CheckExact", "o"]], "PyUnicode_Compare": [[63, 3, 1, "c.PyUnicode_Compare", "left"], [63, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[63, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [63, 3, 1, "c.PyUnicode_CompareWithASCIIString", "uni"]], "PyUnicode_Concat": [[63, 3, 1, "c.PyUnicode_Concat", "left"], [63, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[63, 3, 1, "c.PyUnicode_Contains", "container"], [63, 3, 1, "c.PyUnicode_Contains", "element"]], "PyUnicode_CopyCharacters": [[63, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[63, 3, 1, "c.PyUnicode_Count", "end"], [63, 3, 1, "c.PyUnicode_Count", "start"], [63, 3, 1, "c.PyUnicode_Count", "str"], [63, 3, 1, "c.PyUnicode_Count", "substr"]], "PyUnicode_DATA": [[63, 3, 1, "c.PyUnicode_DATA", "o"]], "PyUnicode_Decode": [[63, 3, 1, "c.PyUnicode_Decode", "encoding"], [63, 3, 1, "c.PyUnicode_Decode", "errors"], [63, 3, 1, "c.PyUnicode_Decode", "s"], [63, 3, 1, "c.PyUnicode_Decode", "size"]], "PyUnicode_DecodeASCII": [[63, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [63, 3, 1, "c.PyUnicode_DecodeASCII", "s"], [63, 3, 1, "c.PyUnicode_DecodeASCII", "size"]], "PyUnicode_DecodeCharmap": [[63, 3, 1, "c.PyUnicode_DecodeCharmap", "data"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "size"]], "PyUnicode_DecodeFSDefault": [[63, 3, 1, "c.PyUnicode_DecodeFSDefault", "s"]], "PyUnicode_DecodeFSDefaultAndSize": [[63, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "s"], [63, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"]], "PyUnicode_DecodeLatin1": [[63, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLatin1", "s"], [63, 3, 1, "c.PyUnicode_DecodeLatin1", "size"]], "PyUnicode_DecodeLocale": [[63, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "len"], [63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[63, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [63, 3, 1, "c.PyUnicode_DecodeMBCS", "s"], [63, 3, 1, "c.PyUnicode_DecodeMBCS", "size"]], "PyUnicode_DecodeMBCSStateful": [[63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"]], "PyUnicode_DecodeRawUnicodeEscape": [[63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "s"], [63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"]], "PyUnicode_DecodeUTF16": [[63, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "size"]], "PyUnicode_DecodeUTF16Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"]], "PyUnicode_DecodeUTF32": [[63, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "size"]], "PyUnicode_DecodeUTF32Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"]], "PyUnicode_DecodeUTF7": [[63, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF7", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF7", "size"]], "PyUnicode_DecodeUTF7Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"]], "PyUnicode_DecodeUTF8": [[63, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF8", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF8", "size"]], "PyUnicode_DecodeUTF8Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"]], "PyUnicode_DecodeUnicodeEscape": [[63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "s"], [63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"]], "PyUnicode_EncodeCodePage": [[63, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [63, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [63, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[63, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLocale": [[63, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [63, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_FSConverter": [[63, 3, 1, "c.PyUnicode_FSConverter", "obj"], [63, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[63, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [63, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[63, 3, 1, "c.PyUnicode_Fill", "fill_char"], [63, 3, 1, "c.PyUnicode_Fill", "length"], [63, 3, 1, "c.PyUnicode_Fill", "start"], [63, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[63, 3, 1, "c.PyUnicode_Find", "direction"], [63, 3, 1, "c.PyUnicode_Find", "end"], [63, 3, 1, "c.PyUnicode_Find", "start"], [63, 3, 1, "c.PyUnicode_Find", "str"], [63, 3, 1, "c.PyUnicode_Find", "substr"]], "PyUnicode_FindChar": [[63, 3, 1, "c.PyUnicode_FindChar", "ch"], [63, 3, 1, "c.PyUnicode_FindChar", "direction"], [63, 3, 1, "c.PyUnicode_FindChar", "end"], [63, 3, 1, "c.PyUnicode_FindChar", "start"], [63, 3, 1, "c.PyUnicode_FindChar", "str"]], "PyUnicode_Format": [[63, 3, 1, "c.PyUnicode_Format", "args"], [63, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[63, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [63, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [63, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[63, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[63, 3, 1, "c.PyUnicode_FromFormatV", "format"], [63, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[63, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [63, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [63, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[63, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[63, 3, 1, "c.PyUnicode_FromString", "u"]], "PyUnicode_FromStringAndSize": [[63, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [63, 3, 1, "c.PyUnicode_FromStringAndSize", "u"]], "PyUnicode_FromWideChar": [[63, 3, 1, "c.PyUnicode_FromWideChar", "size"], [63, 3, 1, "c.PyUnicode_FromWideChar", "w"]], "PyUnicode_GET_LENGTH": [[63, 3, 1, "c.PyUnicode_GET_LENGTH", "o"]], "PyUnicode_GetLength": [[63, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_InternFromString": [[63, 3, 1, "c.PyUnicode_InternFromString", "v"]], "PyUnicode_InternInPlace": [[63, 3, 1, "c.PyUnicode_InternInPlace", "string"]], "PyUnicode_IsIdentifier": [[63, 3, 1, "c.PyUnicode_IsIdentifier", "o"]], "PyUnicode_Join": [[63, 3, 1, "c.PyUnicode_Join", "separator"], [63, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[63, 3, 1, "c.PyUnicode_KIND", "o"]], "PyUnicode_MAX_CHAR_VALUE": [[63, 3, 1, "c.PyUnicode_MAX_CHAR_VALUE", "o"]], "PyUnicode_New": [[63, 3, 1, "c.PyUnicode_New", "maxchar"], [63, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[63, 3, 1, "c.PyUnicode_READ", "data"], [63, 3, 1, "c.PyUnicode_READ", "index"], [63, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[63, 3, 1, "c.PyUnicode_READY", "o"]], "PyUnicode_READ_CHAR": [[63, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [63, 3, 1, "c.PyUnicode_READ_CHAR", "o"]], "PyUnicode_ReadChar": [[63, 3, 1, "c.PyUnicode_ReadChar", "index"], [63, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[63, 3, 1, "c.PyUnicode_Replace", "maxcount"], [63, 3, 1, "c.PyUnicode_Replace", "replstr"], [63, 3, 1, "c.PyUnicode_Replace", "str"], [63, 3, 1, "c.PyUnicode_Replace", "substr"]], "PyUnicode_RichCompare": [[63, 3, 1, "c.PyUnicode_RichCompare", "left"], [63, 3, 1, "c.PyUnicode_RichCompare", "op"], [63, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[63, 3, 1, "c.PyUnicode_Split", "maxsplit"], [63, 3, 1, "c.PyUnicode_Split", "s"], [63, 3, 1, "c.PyUnicode_Split", "sep"]], "PyUnicode_Splitlines": [[63, 3, 1, "c.PyUnicode_Splitlines", "keepend"], [63, 3, 1, "c.PyUnicode_Splitlines", "s"]], "PyUnicode_Substring": [[63, 3, 1, "c.PyUnicode_Substring", "end"], [63, 3, 1, "c.PyUnicode_Substring", "start"], [63, 3, 1, "c.PyUnicode_Substring", "str"]], "PyUnicode_Tailmatch": [[63, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [63, 3, 1, "c.PyUnicode_Tailmatch", "end"], [63, 3, 1, "c.PyUnicode_Tailmatch", "start"], [63, 3, 1, "c.PyUnicode_Tailmatch", "str"], [63, 3, 1, "c.PyUnicode_Tailmatch", "substr"]], "PyUnicode_Translate": [[63, 3, 1, "c.PyUnicode_Translate", "errors"], [63, 3, 1, "c.PyUnicode_Translate", "str"], [63, 3, 1, "c.PyUnicode_Translate", "table"]], "PyUnicode_WRITE": [[63, 3, 1, "c.PyUnicode_WRITE", "data"], [63, 3, 1, "c.PyUnicode_WRITE", "index"], [63, 3, 1, "c.PyUnicode_WRITE", "kind"], [63, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[63, 3, 1, "c.PyUnicode_WriteChar", "character"], [63, 3, 1, "c.PyUnicode_WriteChar", "index"], [63, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyUnstable_Code_GetExtra": [[13, 3, 1, "c.PyUnstable_Code_GetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "index"]], "PyUnstable_Code_New": [[13, 3, 1, "c.PyUnstable_Code_New", "argcount"], [13, 3, 1, "c.PyUnstable_Code_New", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_New", "code"], [13, 3, 1, "c.PyUnstable_Code_New", "consts"], [13, 3, 1, "c.PyUnstable_Code_New", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_New", "filename"], [13, 3, 1, "c.PyUnstable_Code_New", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_New", "flags"], [13, 3, 1, "c.PyUnstable_Code_New", "freevars"], [13, 3, 1, "c.PyUnstable_Code_New", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_New", "linetable"], [13, 3, 1, "c.PyUnstable_Code_New", "name"], [13, 3, 1, "c.PyUnstable_Code_New", "names"], [13, 3, 1, "c.PyUnstable_Code_New", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_New", "qualname"], [13, 3, 1, "c.PyUnstable_Code_New", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_New", "varnames"]], "PyUnstable_Code_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "linetable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "qualname"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "varnames"]], "PyUnstable_Code_SetExtra": [[13, 3, 1, "c.PyUnstable_Code_SetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "index"]], "PyUnstable_Eval_RequestCodeExtraIndex": [[13, 3, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "free"]], "PyUnstable_Exc_PrepReraiseStar": [[23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "excs"], [23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "orig"]], "PyUnstable_GC_VisitObjects": [[28, 3, 1, "c.PyUnstable_GC_VisitObjects", "arg"], [28, 3, 1, "c.PyUnstable_GC_VisitObjects", "callback"]], "PyUnstable_InterpreterFrame_GetCode": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetCode", "frame"]], "PyUnstable_InterpreterFrame_GetLasti": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "frame"]], "PyUnstable_InterpreterFrame_GetLine": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLine", "frame"]], "PyUnstable_Long_CompactValue": [[38, 3, 1, "c.PyUnstable_Long_CompactValue", "op"]], "PyUnstable_Long_IsCompact": [[38, 3, 1, "c.PyUnstable_Long_IsCompact", "op"]], "PyUnstable_Object_GC_NewWithExtraData": [[28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "extra_size"], [28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "type"]], "PyUnstable_Type_AssignVersionTag": [[60, 3, 1, "c.PyUnstable_Type_AssignVersionTag", "type"]], "PyUnstable_WritePerfMapEntry": [[50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_addr"], [50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_size"], [50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "entry_name"]], "PyVarObject": [[62, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_Check": [[66, 3, 1, "c.PyWeakref_Check", "ob"]], "PyWeakref_CheckProxy": [[66, 3, 1, "c.PyWeakref_CheckProxy", "ob"]], "PyWeakref_CheckRef": [[66, 3, 1, "c.PyWeakref_CheckRef", "ob"]], "PyWeakref_GET_OBJECT": [[66, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[66, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[66, 3, 1, "c.PyWeakref_NewProxy", "callback"], [66, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[66, 3, 1, "c.PyWeakref_NewRef", "callback"], [66, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[33, 2, 1, "c.PyWideStringList.PyWideStringList_Append", "PyWideStringList_Append"], [33, 2, 1, "c.PyWideStringList.PyWideStringList_Insert", "PyWideStringList_Insert"], [33, 0, 1, "c.PyWideStringList.items", "items"], [33, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList.PyWideStringList_Append": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "list"]], "PyWideStringList.PyWideStringList_Insert": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "index"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[32, 3, 1, "c.Py_AddPendingCall", "arg"], [32, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[58, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[65, 3, 1, "c.Py_BytesMain", "argc"], [65, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[51, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[65, 3, 1, "c.Py_CompileString", "filename"], [65, 3, 1, "c.Py_CompileString", "start"], [65, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[65, 3, 1, "c.Py_CompileStringExFlags", "filename"], [65, 3, 1, "c.Py_CompileStringExFlags", "flags"], [65, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [65, 3, 1, "c.Py_CompileStringExFlags", "start"], [65, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[65, 3, 1, "c.Py_CompileStringFlags", "filename"], [65, 3, 1, "c.Py_CompileStringFlags", "flags"], [65, 3, 1, "c.Py_CompileStringFlags", "start"], [65, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[65, 3, 1, "c.Py_CompileStringObject", "filename"], [65, 3, 1, "c.Py_CompileStringObject", "flags"], [65, 3, 1, "c.Py_CompileStringObject", "optimize"], [65, 3, 1, "c.Py_CompileStringObject", "start"], [65, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[51, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[51, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[58, 3, 1, "c.Py_DecodeLocale", "arg"], [58, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[58, 3, 1, "c.Py_EncodeLocale", "error_pos"], [58, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[32, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[58, 3, 1, "c.Py_Exit", "status"]], "Py_ExitStatusException": [[33, 3, 1, "c.Py_ExitStatusException", "status"]], "Py_FatalError": [[58, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[58, 3, 1, "c.Py_FdIsInteractive", "filename"], [58, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[61, 3, 1, "c.Py_GenericAlias", "args"], [61, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[33, 3, 1, "c.Py_GetArgcArgv", "argc"], [33, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[51, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[57, 3, 1, "c.Py_IS_TYPE", "o"], [57, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[51, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[32, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[33, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[57, 3, 1, "c.Py_Is", "x"], [57, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[57, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[57, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[57, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[65, 3, 1, "c.Py_Main", "argc"], [65, 3, 1, "c.Py_Main", "argv"]], "Py_NewInterpreterFromConfig": [[32, 3, 1, "c.Py_NewInterpreterFromConfig", "config"], [32, 3, 1, "c.Py_NewInterpreterFromConfig", "tstate_p"]], "Py_NewRef": [[51, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[33, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[33, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[51, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[51, 3, 1, "c.Py_SET_REFCNT", "o"], [51, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[57, 3, 1, "c.Py_SET_SIZE", "o"], [57, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[57, 3, 1, "c.Py_SET_TYPE", "o"], [57, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[57, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[32, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[32, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[32, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [32, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[57, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[63, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[63, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[63, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[63, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[63, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[63, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[63, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[63, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[63, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[63, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[63, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_IS_HIGH_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "ch"]], "Py_UNICODE_IS_LOW_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "ch"]], "Py_UNICODE_IS_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_SURROGATE", "ch"]], "Py_UNICODE_JOIN_SURROGATES": [[63, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "high"], [63, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "low"]], "Py_UNICODE_TODECIMAL": [[63, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[63, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[63, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[63, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[63, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[63, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[28, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[51, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[51, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[51, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[44, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[44, 3, 1, "c.Py_mod_create.create_module", "def"], [44, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[44, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[44, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "Py_mod_multiple_interpreters": [[44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"], [44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"], [44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED", "Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_GetDictPtr": [[48, 3, 1, "c._PyObject_GetDictPtr", "obj"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[59, 3, 1, "c._PyTuple_Resize", "newsize"], [59, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "_inittab": [[30, 0, 1, "c._inittab.name", "name"]], "BaseException": [[209, 7, 1, "", "__notes__"], [209, 8, 1, "", "add_note"], [209, 7, 1, "", "args"], [209, 8, 1, "", "with_traceback"]], "BaseExceptionGroup": [[209, 8, 1, "", "derive"], [209, 7, 1, "", "exceptions"], [209, 7, 1, "", "message"], [209, 8, 1, "", "split"], [209, 8, 1, "", "subgroup"]], "BlockingIOError": [[209, 7, 1, "", "characters_written"]], "OSError": [[209, 7, 1, "", "errno"], [209, 7, 1, "", "filename"], [209, 7, 1, "", "filename2"], [209, 7, 1, "", "strerror"], [209, 7, 1, "", "winerror"]], "SyntaxError": [[209, 7, 1, "", "end_lineno"], [209, 7, 1, "", "end_offset"], [209, 7, 1, "", "filename"], [209, 7, 1, "", "lineno"], [209, 7, 1, "", "offset"], [209, 7, 1, "", "text"]], "SystemExit": [[209, 7, 1, "", "code"]], "UnicodeError": [[209, 7, 1, "", "encoding"], [209, 7, 1, "", "end"], [209, 7, 1, "", "object"], [209, 7, 1, "", "reason"], [209, 7, 1, "", "start"]], "_thread": [[112, 9, 1, "thread.LockType", "LockType"], [112, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [112, 11, 1, "thread.allocate_lock", "allocate_lock"], [112, 6, 1, "thread.error", "error"], [112, 11, 1, "thread.exit", "exit"], [112, 11, 1, "thread.get_ident", "get_ident"], [112, 11, 1, "thread.get_native_id", "get_native_id"], [112, 11, 1, "thread.interrupt_main", "interrupt_main"], [112, 11, 1, "thread.stack_size", "stack_size"], [112, 11, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[112, 8, 1, "thread.lock.acquire", "acquire"], [112, 8, 1, "thread.lock.locked", "locked"], [112, 8, 1, "thread.lock.release", "release"]], "abc": [[113, 12, 1, "", "ABC"], [113, 12, 1, "", "ABCMeta"], [113, 11, 1, "", "abstractclassmethod"], [113, 11, 1, "", "abstractmethod"], [113, 11, 1, "", "abstractproperty"], [113, 11, 1, "", "abstractstaticmethod"], [113, 11, 1, "", "get_cache_token"], [113, 11, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[113, 8, 1, "", "__subclasshook__"], [113, 8, 1, "", "register"]], "agen": [[425, 8, 1, "", "__anext__"], [425, 8, 1, "", "aclose"], [425, 8, 1, "", "asend"], [425, 8, 1, "", "athrow"]], "aifc.aifc": [[114, 8, 1, "", "aifc"], [114, 8, 1, "", "aiff"], [114, 8, 1, "", "close"], [114, 8, 1, "", "getcompname"], [114, 8, 1, "", "getcomptype"], [114, 8, 1, "", "getframerate"], [114, 8, 1, "", "getmark"], [114, 8, 1, "", "getmarkers"], [114, 8, 1, "", "getnchannels"], [114, 8, 1, "", "getnframes"], [114, 8, 1, "", "getparams"], [114, 8, 1, "", "getsampwidth"], [114, 8, 1, "", "readframes"], [114, 8, 1, "", "rewind"], [114, 8, 1, "", "setcomptype"], [114, 8, 1, "", "setframerate"], [114, 8, 1, "", "setmark"], [114, 8, 1, "", "setnchannels"], [114, 8, 1, "", "setnframes"], [114, 8, 1, "", "setparams"], [114, 8, 1, "", "setpos"], [114, 8, 1, "", "setsampwidth"], [114, 8, 1, "", "tell"], [114, 8, 1, "", "writeframes"], [114, 8, 1, "", "writeframesraw"]], "aifc": [[114, 11, 1, "", "open"]], "argparse": [[117, 12, 1, "", "Action"], [117, 12, 1, "", "ArgumentDefaultsHelpFormatter"], [117, 6, 1, "", "ArgumentError"], [117, 12, 1, "", "ArgumentParser"], [117, 6, 1, "", "ArgumentTypeError"], [117, 12, 1, "", "FileType"], [117, 12, 1, "", "MetavarTypeHelpFormatter"], [117, 12, 1, "", "Namespace"], [117, 12, 1, "", "RawDescriptionHelpFormatter"], [117, 12, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[117, 8, 1, "", "add_argument"], [117, 8, 1, "", "add_argument_group"], [117, 8, 1, "", "add_mutually_exclusive_group"], [117, 8, 1, "", "add_subparsers"], [117, 8, 1, "", "convert_arg_line_to_args"], [117, 8, 1, "", "error"], [117, 8, 1, "", "exit"], [117, 8, 1, "", "format_help"], [117, 8, 1, "", "format_usage"], [117, 8, 1, "", "get_default"], [117, 8, 1, "", "parse_args"], [117, 8, 1, "", "parse_intermixed_args"], [117, 8, 1, "", "parse_known_args"], [117, 8, 1, "", "parse_known_intermixed_args"], [117, 8, 1, "", "print_help"], [117, 8, 1, "", "print_usage"], [117, 8, 1, "", "set_defaults"]], "array": [[118, 12, 1, "", "array"], [118, 9, 1, "", "typecodes"]], "array.array": [[118, 8, 1, "", "append"], [118, 8, 1, "", "buffer_info"], [118, 8, 1, "", "byteswap"], [118, 8, 1, "", "count"], [118, 8, 1, "", "extend"], [118, 8, 1, "", "frombytes"], [118, 8, 1, "", "fromfile"], [118, 8, 1, "", "fromlist"], [118, 8, 1, "", "fromunicode"], [118, 8, 1, "", "index"], [118, 8, 1, "", "insert"], [118, 7, 1, "", "itemsize"], [118, 8, 1, "", "pop"], [118, 8, 1, "", "remove"], [118, 8, 1, "", "reverse"], [118, 8, 1, "", "tobytes"], [118, 8, 1, "", "tofile"], [118, 8, 1, "", "tolist"], [118, 8, 1, "", "tounicode"], [118, 7, 1, "", "typecode"]], "ast": [[119, 12, 1, "", "AST"], [119, 12, 1, "", "Add"], [119, 12, 1, "", "And"], [119, 12, 1, "", "AnnAssign"], [119, 12, 1, "", "Assert"], [119, 12, 1, "", "Assign"], [119, 12, 1, "", "AsyncFor"], [119, 12, 1, "", "AsyncFunctionDef"], [119, 12, 1, "", "AsyncWith"], [119, 12, 1, "", "Attribute"], [119, 12, 1, "", "AugAssign"], [119, 12, 1, "", "Await"], [119, 12, 1, "", "BinOp"], [119, 12, 1, "", "BitAnd"], [119, 12, 1, "", "BitOr"], [119, 12, 1, "", "BitXor"], [119, 12, 1, "", "BoolOp"], [119, 12, 1, "", "Break"], [119, 12, 1, "", "Call"], [119, 12, 1, "", "ClassDef"], [119, 12, 1, "", "Compare"], [119, 12, 1, "", "Constant"], [119, 12, 1, "", "Continue"], [119, 12, 1, "", "Del"], [119, 12, 1, "", "Delete"], [119, 12, 1, "", "Dict"], [119, 12, 1, "", "DictComp"], [119, 12, 1, "", "Div"], [119, 12, 1, "", "Eq"], [119, 12, 1, "", "ExceptHandler"], [119, 12, 1, "", "Expr"], [119, 12, 1, "", "Expression"], [119, 12, 1, "", "FloorDiv"], [119, 12, 1, "", "For"], [119, 12, 1, "", "FormattedValue"], [119, 12, 1, "", "FunctionDef"], [119, 12, 1, "", "FunctionType"], [119, 12, 1, "", "GeneratorExp"], [119, 12, 1, "", "Global"], [119, 12, 1, "", "Gt"], [119, 12, 1, "", "GtE"], [119, 12, 1, "", "If"], [119, 12, 1, "", "IfExp"], [119, 12, 1, "", "Import"], [119, 12, 1, "", "ImportFrom"], [119, 12, 1, "", "In"], [119, 12, 1, "", "Interactive"], [119, 12, 1, "", "Invert"], [119, 12, 1, "", "Is"], [119, 12, 1, "", "IsNot"], [119, 12, 1, "", "JoinedStr"], [119, 12, 1, "", "LShift"], [119, 12, 1, "", "Lambda"], [119, 12, 1, "", "List"], [119, 12, 1, "", "ListComp"], [119, 12, 1, "", "Load"], [119, 12, 1, "", "Lt"], [119, 12, 1, "", "LtE"], [119, 12, 1, "", "MatMult"], [119, 12, 1, "", "Match"], [119, 12, 1, "", "MatchAs"], [119, 12, 1, "", "MatchClass"], [119, 12, 1, "", "MatchMapping"], [119, 12, 1, "", "MatchOr"], [119, 12, 1, "", "MatchSequence"], [119, 12, 1, "", "MatchSingleton"], [119, 12, 1, "", "MatchStar"], [119, 12, 1, "", "MatchValue"], [119, 12, 1, "", "Mod"], [119, 12, 1, "", "Module"], [119, 12, 1, "", "Mult"], [119, 12, 1, "", "Name"], [119, 12, 1, "", "NamedExpr"], [119, 12, 1, "", "NodeTransformer"], [119, 12, 1, "", "NodeVisitor"], [119, 12, 1, "", "Nonlocal"], [119, 12, 1, "", "Not"], [119, 12, 1, "", "NotEq"], [119, 12, 1, "", "NotIn"], [119, 12, 1, "", "Or"], [119, 12, 1, "", "ParamSpec"], [119, 12, 1, "", "Pass"], [119, 12, 1, "", "Pow"], [119, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [119, 9, 1, "", "PyCF_ONLY_AST"], [119, 9, 1, "", "PyCF_TYPE_COMMENTS"], [119, 12, 1, "", "RShift"], [119, 12, 1, "", "Raise"], [119, 12, 1, "", "Return"], [119, 12, 1, "", "Set"], [119, 12, 1, "", "SetComp"], [119, 12, 1, "", "Slice"], [119, 12, 1, "", "Starred"], [119, 12, 1, "", "Store"], [119, 12, 1, "", "Sub"], [119, 12, 1, "", "Subscript"], [119, 12, 1, "", "Try"], [119, 12, 1, "", "TryStar"], [119, 12, 1, "", "Tuple"], [119, 12, 1, "", "TypeAlias"], [119, 12, 1, "", "TypeVar"], [119, 12, 1, "", "TypeVarTuple"], [119, 12, 1, "", "UAdd"], [119, 12, 1, "", "USub"], [119, 12, 1, "", "UnaryOp"], [119, 12, 1, "", "While"], [119, 12, 1, "", "With"], [119, 12, 1, "", "Yield"], [119, 12, 1, "", "YieldFrom"], [119, 12, 1, "", "alias"], [119, 12, 1, "", "arg"], [119, 12, 1, "", "arguments"], [119, 12, 1, "", "comprehension"], [119, 11, 1, "", "copy_location"], [119, 11, 1, "", "dump"], [119, 11, 1, "", "fix_missing_locations"], [119, 11, 1, "", "get_docstring"], [119, 11, 1, "", "get_source_segment"], [119, 11, 1, "", "increment_lineno"], [119, 11, 1, "", "iter_child_nodes"], [119, 11, 1, "", "iter_fields"], [119, 12, 1, "", "keyword"], [119, 11, 1, "", "literal_eval"], [119, 12, 1, "", "match_case"], [119, 11, 1, "", "parse"], [119, 11, 1, "", "unparse"], [119, 11, 1, "", "walk"], [119, 12, 1, "", "withitem"], [119, 14, 1, "cmdoption-ast-h", "--help"], [119, 14, 1, "cmdoption-ast-a", "--include-attributes"], [119, 14, 1, "cmdoption-ast-indent", "--indent"], [119, 14, 1, "cmdoption-ast-mode", "--mode"], [119, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [119, 14, 1, "cmdoption-ast-a", "-a"], [119, 14, 1, "cmdoption-ast-h", "-h"], [119, 14, 1, "cmdoption-ast-i", "-i"], [119, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[119, 7, 1, "", "_fields"], [119, 7, 1, "", "col_offset"], [119, 7, 1, "", "end_col_offset"], [119, 7, 1, "", "end_lineno"], [119, 7, 1, "", "lineno"]], "ast.Assign": [[119, 7, 1, "", "type_comment"]], "ast.For": [[119, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[119, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[119, 8, 1, "", "generic_visit"], [119, 8, 1, "", "visit"]], "ast.With": [[119, 7, 1, "", "type_comment"]], "ast.arg": [[119, 7, 1, "", "type_comment"]], "asyncio": [[129, 12, 1, "", "AbstractChildWatcher"], [123, 12, 1, "", "AbstractEventLoop"], [129, 12, 1, "", "AbstractEventLoopPolicy"], [135, 12, 1, "", "Barrier"], [130, 12, 1, "", "BaseProtocol"], [130, 12, 1, "", "BaseTransport"], [135, 12, 1, "", "BoundedSemaphore"], [135, 6, 1, "", "BrokenBarrierError"], [130, 12, 1, "", "BufferedProtocol"], [124, 6, 1, "", "CancelledError"], [135, 12, 1, "", "Condition"], [130, 12, 1, "", "DatagramProtocol"], [130, 12, 1, "", "DatagramTransport"], [129, 12, 1, "", "DefaultEventLoopPolicy"], [135, 12, 1, "", "Event"], [129, 12, 1, "", "FastChildWatcher"], [126, 12, 1, "", "Future"], [123, 12, 1, "", "Handle"], [124, 6, 1, "", "IncompleteReadError"], [124, 6, 1, "", "InvalidStateError"], [131, 12, 1, "", "LifoQueue"], [124, 6, 1, "", "LimitOverrunError"], [135, 12, 1, "", "Lock"], [129, 12, 1, "", "MultiLoopChildWatcher"], [129, 12, 1, "", "PidfdChildWatcher"], [131, 12, 1, "", "PriorityQueue"], [123, 12, 1, "", "ProactorEventLoop"], [130, 12, 1, "", "Protocol"], [131, 12, 1, "", "Queue"], [131, 6, 1, "", "QueueEmpty"], [131, 6, 1, "", "QueueFull"], [130, 12, 1, "", "ReadTransport"], [132, 12, 1, "", "Runner"], [129, 12, 1, "", "SafeChildWatcher"], [123, 12, 1, "", "SelectorEventLoop"], [135, 12, 1, "", "Semaphore"], [124, 6, 1, "", "SendfileNotAvailableError"], [123, 12, 1, "", "Server"], [133, 12, 1, "", "StreamReader"], [133, 12, 1, "", "StreamWriter"], [130, 12, 1, "", "SubprocessProtocol"], [130, 12, 1, "", "SubprocessTransport"], [136, 12, 1, "", "Task"], [136, 12, 1, "", "TaskGroup"], [129, 12, 1, "", "ThreadedChildWatcher"], [136, 12, 1, "", "Timeout"], [124, 6, 1, "", "TimeoutError"], [123, 12, 1, "", "TimerHandle"], [130, 12, 1, "", "Transport"], [129, 12, 1, "", "WindowsProactorEventLoopPolicy"], [129, 12, 1, "", "WindowsSelectorEventLoopPolicy"], [130, 12, 1, "", "WriteTransport"], [125, 11, 1, "", "_enter_task"], [125, 11, 1, "", "_leave_task"], [125, 11, 1, "", "_register_task"], [125, 11, 1, "", "_unregister_task"], [136, 11, 1, "", "all_tasks"], [136, 11, 1, "", "as_completed"], [136, 11, 1, "", "create_eager_task_factory"], [134, 11, 1, "", "create_subprocess_exec"], [134, 11, 1, "", "create_subprocess_shell"], [136, 11, 1, "", "create_task"], [136, 11, 1, "", "current_task"], [136, 11, 1, "", "eager_task_factory"], [126, 11, 1, "", "ensure_future"], [136, 11, 1, "", "gather"], [129, 11, 1, "", "get_child_watcher"], [123, 11, 1, "", "get_event_loop"], [129, 11, 1, "", "get_event_loop_policy"], [123, 11, 1, "", "get_running_loop"], [136, 11, 1, "", "iscoroutine"], [126, 11, 1, "", "isfuture"], [123, 11, 1, "", "new_event_loop"], [133, 11, 1, "", "open_connection"], [133, 11, 1, "", "open_unix_connection"], [132, 11, 1, "", "run"], [136, 11, 1, "", "run_coroutine_threadsafe"], [129, 11, 1, "", "set_child_watcher"], [123, 11, 1, "", "set_event_loop"], [129, 11, 1, "", "set_event_loop_policy"], [136, 11, 1, "", "shield"], [136, 11, 1, "", "sleep"], [133, 11, 1, "", "start_server"], [133, 11, 1, "", "start_unix_server"], [136, 11, 1, "", "timeout"], [136, 11, 1, "", "timeout_at"], [136, 11, 1, "", "to_thread"], [136, 11, 1, "", "wait"], [136, 11, 1, "", "wait_for"], [126, 11, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[129, 8, 1, "", "add_child_handler"], [129, 8, 1, "", "attach_loop"], [129, 8, 1, "", "close"], [129, 8, 1, "", "is_active"], [129, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[129, 8, 1, "", "get_child_watcher"], [129, 8, 1, "", "get_event_loop"], [129, 8, 1, "", "new_event_loop"], [129, 8, 1, "", "set_child_watcher"], [129, 8, 1, "", "set_event_loop"]], "asyncio.Barrier": [[135, 8, 1, "", "abort"], [135, 7, 1, "", "broken"], [135, 7, 1, "", "n_waiting"], [135, 7, 1, "", "parties"], [135, 8, 1, "", "reset"], [135, 8, 1, "", "wait"]], "asyncio.BaseProtocol": [[130, 8, 1, "", "connection_lost"], [130, 8, 1, "", "connection_made"], [130, 8, 1, "", "pause_writing"], [130, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[130, 8, 1, "", "close"], [130, 8, 1, "", "get_extra_info"], [130, 8, 1, "", "get_protocol"], [130, 8, 1, "", "is_closing"], [130, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[130, 8, 1, "", "buffer_updated"], [130, 8, 1, "", "eof_received"], [130, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[135, 8, 1, "", "acquire"], [135, 8, 1, "", "locked"], [135, 8, 1, "", "notify"], [135, 8, 1, "", "notify_all"], [135, 8, 1, "", "release"], [135, 8, 1, "", "wait"], [135, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[130, 8, 1, "", "datagram_received"], [130, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[130, 8, 1, "", "abort"], [130, 8, 1, "", "sendto"]], "asyncio.Event": [[135, 8, 1, "", "clear"], [135, 8, 1, "", "is_set"], [135, 8, 1, "", "set"], [135, 8, 1, "", "wait"]], "asyncio.Future": [[125, 8, 1, "", "__init__"], [126, 8, 1, "", "add_done_callback"], [126, 8, 1, "", "cancel"], [126, 8, 1, "", "cancelled"], [126, 8, 1, "", "done"], [126, 8, 1, "", "exception"], [126, 8, 1, "", "get_loop"], [126, 8, 1, "", "remove_done_callback"], [126, 8, 1, "", "result"], [126, 8, 1, "", "set_exception"], [126, 8, 1, "", "set_result"]], "asyncio.Handle": [[123, 8, 1, "", "cancel"], [123, 8, 1, "", "cancelled"], [123, 8, 1, "", "get_context"]], "asyncio.IncompleteReadError": [[124, 7, 1, "", "expected"], [124, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[124, 7, 1, "", "consumed"]], "asyncio.Lock": [[135, 8, 1, "", "acquire"], [135, 8, 1, "", "locked"], [135, 8, 1, "", "release"]], "asyncio.Protocol": [[130, 8, 1, "", "data_received"], [130, 8, 1, "", "eof_received"]], "asyncio.Queue": [[131, 8, 1, "", "empty"], [131, 8, 1, "", "full"], [131, 8, 1, "", "get"], [131, 8, 1, "", "get_nowait"], [131, 8, 1, "", "join"], [131, 7, 1, "", "maxsize"], [131, 8, 1, "", "put"], [131, 8, 1, "", "put_nowait"], [131, 8, 1, "", "qsize"], [131, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[130, 8, 1, "", "is_reading"], [130, 8, 1, "", "pause_reading"], [130, 8, 1, "", "resume_reading"]], "asyncio.Runner": [[132, 8, 1, "", "close"], [132, 8, 1, "", "get_loop"], [132, 8, 1, "", "run"]], "asyncio.Semaphore": [[135, 8, 1, "", "acquire"], [135, 8, 1, "", "locked"], [135, 8, 1, "", "release"]], "asyncio.Server": [[123, 8, 1, "", "close"], [123, 8, 1, "", "get_loop"], [123, 8, 1, "", "is_serving"], [123, 8, 1, "", "serve_forever"], [123, 7, 1, "", "sockets"], [123, 8, 1, "", "start_serving"], [123, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[133, 8, 1, "", "at_eof"], [133, 8, 1, "", "read"], [133, 8, 1, "", "readexactly"], [133, 8, 1, "", "readline"], [133, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[133, 8, 1, "", "can_write_eof"], [133, 8, 1, "", "close"], [133, 8, 1, "", "drain"], [133, 8, 1, "", "get_extra_info"], [133, 8, 1, "", "is_closing"], [133, 8, 1, "", "start_tls"], [133, 7, 1, "", "transport"], [133, 8, 1, "", "wait_closed"], [133, 8, 1, "", "write"], [133, 8, 1, "", "write_eof"], [133, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[130, 8, 1, "", "pipe_connection_lost"], [130, 8, 1, "", "pipe_data_received"], [130, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[130, 8, 1, "", "close"], [130, 8, 1, "", "get_pid"], [130, 8, 1, "", "get_pipe_transport"], [130, 8, 1, "", "get_returncode"], [130, 8, 1, "", "kill"], [130, 8, 1, "", "send_signal"], [130, 8, 1, "", "terminate"]], "asyncio.Task": [[125, 8, 1, "", "__init__"], [136, 8, 1, "", "add_done_callback"], [136, 8, 1, "", "cancel"], [136, 8, 1, "", "cancelled"], [136, 8, 1, "", "cancelling"], [136, 8, 1, "", "done"], [136, 8, 1, "", "exception"], [136, 8, 1, "", "get_context"], [136, 8, 1, "", "get_coro"], [136, 8, 1, "", "get_name"], [136, 8, 1, "", "get_stack"], [136, 8, 1, "", "print_stack"], [136, 8, 1, "", "remove_done_callback"], [136, 8, 1, "", "result"], [136, 8, 1, "", "set_name"], [136, 8, 1, "", "uncancel"]], "asyncio.TaskGroup": [[136, 8, 1, "", "create_task"]], "asyncio.Timeout": [[136, 8, 1, "", "expired"], [136, 8, 1, "", "reschedule"], [136, 8, 1, "", "when"]], "asyncio.TimerHandle": [[123, 8, 1, "", "when"]], "asyncio.WriteTransport": [[130, 8, 1, "", "abort"], [130, 8, 1, "", "can_write_eof"], [130, 8, 1, "", "get_write_buffer_limits"], [130, 8, 1, "", "get_write_buffer_size"], [130, 8, 1, "", "set_write_buffer_limits"], [130, 8, 1, "", "write"], [130, 8, 1, "", "write_eof"], [130, 8, 1, "", "writelines"]], "asyncio.loop": [[123, 8, 1, "", "add_reader"], [123, 8, 1, "", "add_signal_handler"], [123, 8, 1, "", "add_writer"], [123, 8, 1, "", "call_at"], [123, 8, 1, "", "call_exception_handler"], [123, 8, 1, "", "call_later"], [123, 8, 1, "", "call_soon"], [123, 8, 1, "", "call_soon_threadsafe"], [123, 8, 1, "", "close"], [123, 8, 1, "", "connect_accepted_socket"], [123, 8, 1, "", "connect_read_pipe"], [123, 8, 1, "", "connect_write_pipe"], [123, 8, 1, "", "create_connection"], [123, 8, 1, "", "create_datagram_endpoint"], [123, 8, 1, "", "create_future"], [123, 8, 1, "", "create_server"], [123, 8, 1, "", "create_task"], [123, 8, 1, "", "create_unix_connection"], [123, 8, 1, "", "create_unix_server"], [123, 8, 1, "", "default_exception_handler"], [123, 8, 1, "", "get_debug"], [123, 8, 1, "", "get_exception_handler"], [123, 8, 1, "", "get_task_factory"], [123, 8, 1, "", "getaddrinfo"], [123, 8, 1, "", "getnameinfo"], [123, 8, 1, "", "is_closed"], [123, 8, 1, "", "is_running"], [123, 8, 1, "", "remove_reader"], [123, 8, 1, "", "remove_signal_handler"], [123, 8, 1, "", "remove_writer"], [123, 8, 1, "", "run_forever"], [123, 8, 1, "", "run_in_executor"], [123, 8, 1, "", "run_until_complete"], [123, 8, 1, "", "sendfile"], [123, 8, 1, "", "set_debug"], [123, 8, 1, "", "set_default_executor"], [123, 8, 1, "", "set_exception_handler"], [123, 8, 1, "", "set_task_factory"], [123, 8, 1, "", "shutdown_asyncgens"], [123, 8, 1, "", "shutdown_default_executor"], [123, 8, 1, "", "sock_accept"], [123, 8, 1, "", "sock_connect"], [123, 8, 1, "", "sock_recv"], [123, 8, 1, "", "sock_recv_into"], [123, 8, 1, "", "sock_recvfrom"], [123, 8, 1, "", "sock_recvfrom_into"], [123, 8, 1, "", "sock_sendall"], [123, 8, 1, "", "sock_sendfile"], [123, 8, 1, "", "sock_sendto"], [123, 8, 1, "", "start_tls"], [123, 8, 1, "", "stop"], [123, 8, 1, "", "subprocess_exec"], [123, 8, 1, "", "subprocess_shell"], [123, 8, 1, "", "time"]], "asyncio.subprocess": [[134, 9, 1, "", "DEVNULL"], [134, 9, 1, "", "PIPE"], [134, 12, 1, "", "Process"], [134, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[134, 8, 1, "", "communicate"], [134, 8, 1, "", "kill"], [134, 7, 1, "", "pid"], [134, 7, 1, "", "returncode"], [134, 8, 1, "", "send_signal"], [134, 7, 1, "", "stderr"], [134, 7, 1, "", "stdin"], [134, 7, 1, "", "stdout"], [134, 8, 1, "", "terminate"], [134, 8, 1, "", "wait"]], "atexit": [[137, 11, 1, "", "register"], [137, 11, 1, "", "unregister"]], "audioop": [[138, 11, 1, "", "add"], [138, 11, 1, "", "adpcm2lin"], [138, 11, 1, "", "alaw2lin"], [138, 11, 1, "", "avg"], [138, 11, 1, "", "avgpp"], [138, 11, 1, "", "bias"], [138, 11, 1, "", "byteswap"], [138, 11, 1, "", "cross"], [138, 6, 1, "", "error"], [138, 11, 1, "", "findfactor"], [138, 11, 1, "", "findfit"], [138, 11, 1, "", "findmax"], [138, 11, 1, "", "getsample"], [138, 11, 1, "", "lin2adpcm"], [138, 11, 1, "", "lin2alaw"], [138, 11, 1, "", "lin2lin"], [138, 11, 1, "", "lin2ulaw"], [138, 11, 1, "", "max"], [138, 11, 1, "", "maxpp"], [138, 11, 1, "", "minmax"], [138, 11, 1, "", "mul"], [138, 11, 1, "", "ratecv"], [138, 11, 1, "", "reverse"], [138, 11, 1, "", "rms"], [138, 11, 1, "", "tomono"], [138, 11, 1, "", "tostereo"], [138, 11, 1, "", "ulaw2lin"]], "base64": [[140, 11, 1, "", "a85decode"], [140, 11, 1, "", "a85encode"], [140, 11, 1, "", "b16decode"], [140, 11, 1, "", "b16encode"], [140, 11, 1, "", "b32decode"], [140, 11, 1, "", "b32encode"], [140, 11, 1, "", "b32hexdecode"], [140, 11, 1, "", "b32hexencode"], [140, 11, 1, "", "b64decode"], [140, 11, 1, "", "b64encode"], [140, 11, 1, "", "b85decode"], [140, 11, 1, "", "b85encode"], [140, 11, 1, "", "decode"], [140, 11, 1, "", "decodebytes"], [140, 11, 1, "", "encode"], [140, 11, 1, "", "encodebytes"], [140, 11, 1, "", "standard_b64decode"], [140, 11, 1, "", "standard_b64encode"], [140, 11, 1, "", "urlsafe_b64decode"], [140, 11, 1, "", "urlsafe_b64encode"]], "bdb": [[141, 12, 1, "", "Bdb"], [141, 6, 1, "", "BdbQuit"], [141, 12, 1, "", "Breakpoint"], [141, 11, 1, "", "checkfuncname"], [141, 11, 1, "", "effective"], [141, 11, 1, "", "set_trace"]], "bdb.Bdb": [[141, 8, 1, "", "break_anywhere"], [141, 8, 1, "", "break_here"], [141, 8, 1, "", "canonic"], [141, 8, 1, "", "clear_all_breaks"], [141, 8, 1, "", "clear_all_file_breaks"], [141, 8, 1, "", "clear_bpbynumber"], [141, 8, 1, "", "clear_break"], [141, 8, 1, "", "dispatch_call"], [141, 8, 1, "", "dispatch_exception"], [141, 8, 1, "", "dispatch_line"], [141, 8, 1, "", "dispatch_return"], [141, 8, 1, "", "do_clear"], [141, 8, 1, "", "format_stack_entry"], [141, 8, 1, "", "get_all_breaks"], [141, 8, 1, "", "get_bpbynumber"], [141, 8, 1, "", "get_break"], [141, 8, 1, "", "get_breaks"], [141, 8, 1, "", "get_file_breaks"], [141, 8, 1, "", "get_stack"], [141, 8, 1, "", "is_skipped_line"], [141, 8, 1, "", "reset"], [141, 8, 1, "", "run"], [141, 8, 1, "", "runcall"], [141, 8, 1, "", "runctx"], [141, 8, 1, "", "runeval"], [141, 8, 1, "", "set_break"], [141, 8, 1, "", "set_continue"], [141, 8, 1, "", "set_next"], [141, 8, 1, "", "set_quit"], [141, 8, 1, "", "set_return"], [141, 8, 1, "", "set_step"], [141, 8, 1, "", "set_trace"], [141, 8, 1, "", "set_until"], [141, 8, 1, "", "stop_here"], [141, 8, 1, "", "trace_dispatch"], [141, 8, 1, "", "user_call"], [141, 8, 1, "", "user_exception"], [141, 8, 1, "", "user_line"], [141, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[141, 7, 1, "", "bpbynumber"], [141, 8, 1, "", "bpformat"], [141, 7, 1, "", "bplist"], [141, 8, 1, "", "bpprint"], [141, 7, 1, "", "cond"], [141, 8, 1, "", "deleteMe"], [141, 8, 1, "", "disable"], [141, 8, 1, "", "enable"], [141, 7, 1, "", "enabled"], [141, 7, 1, "", "file"], [141, 7, 1, "", "funcname"], [141, 7, 1, "", "hits"], [141, 7, 1, "", "ignore"], [141, 7, 1, "", "line"], [141, 7, 1, "", "temporary"]], "binascii": [[143, 6, 1, "", "Error"], [143, 6, 1, "", "Incomplete"], [143, 11, 1, "", "a2b_base64"], [143, 11, 1, "", "a2b_hex"], [143, 11, 1, "", "a2b_qp"], [143, 11, 1, "", "a2b_uu"], [143, 11, 1, "", "b2a_base64"], [143, 11, 1, "", "b2a_hex"], [143, 11, 1, "", "b2a_qp"], [143, 11, 1, "", "b2a_uu"], [143, 11, 1, "", "crc32"], [143, 11, 1, "", "crc_hqx"], [143, 11, 1, "", "hexlify"], [143, 11, 1, "", "unhexlify"]], "bisect": [[144, 11, 1, "", "bisect"], [144, 11, 1, "", "bisect_left"], [144, 11, 1, "", "bisect_right"], [144, 11, 1, "", "insort"], [144, 11, 1, "", "insort_left"], [144, 11, 1, "", "insort_right"]], "bytearray": [[340, 8, 1, "", "capitalize"], [340, 8, 1, "", "center"], [340, 8, 1, "", "count"], [340, 8, 1, "", "decode"], [340, 8, 1, "", "endswith"], [340, 8, 1, "", "expandtabs"], [340, 8, 1, "", "find"], [340, 8, 1, "", "fromhex"], [340, 8, 1, "", "hex"], [340, 8, 1, "", "index"], [340, 8, 1, "", "isalnum"], [340, 8, 1, "", "isalpha"], [340, 8, 1, "", "isascii"], [340, 8, 1, "", "isdigit"], [340, 8, 1, "", "islower"], [340, 8, 1, "", "isspace"], [340, 8, 1, "", "istitle"], [340, 8, 1, "", "isupper"], [340, 8, 1, "", "join"], [340, 8, 1, "", "ljust"], [340, 8, 1, "", "lower"], [340, 8, 1, "", "lstrip"], [340, 8, 1, "", "maketrans"], [340, 8, 1, "", "partition"], [340, 8, 1, "", "removeprefix"], [340, 8, 1, "", "removesuffix"], [340, 8, 1, "", "replace"], [340, 8, 1, "", "rfind"], [340, 8, 1, "", "rindex"], [340, 8, 1, "", "rjust"], [340, 8, 1, "", "rpartition"], [340, 8, 1, "", "rsplit"], [340, 8, 1, "", "rstrip"], [340, 8, 1, "", "split"], [340, 8, 1, "", "splitlines"], [340, 8, 1, "", "startswith"], [340, 8, 1, "", "strip"], [340, 8, 1, "", "swapcase"], [340, 8, 1, "", "title"], [340, 8, 1, "", "translate"], [340, 8, 1, "", "upper"], [340, 8, 1, "", "zfill"]], "bytes": [[340, 8, 1, "", "capitalize"], [340, 8, 1, "", "center"], [340, 8, 1, "", "count"], [340, 8, 1, "", "decode"], [340, 8, 1, "", "endswith"], [340, 8, 1, "", "expandtabs"], [340, 8, 1, "", "find"], [340, 8, 1, "", "fromhex"], [340, 8, 1, "", "hex"], [340, 8, 1, "", "index"], [340, 8, 1, "", "isalnum"], [340, 8, 1, "", "isalpha"], [340, 8, 1, "", "isascii"], [340, 8, 1, "", "isdigit"], [340, 8, 1, "", "islower"], [340, 8, 1, "", "isspace"], [340, 8, 1, "", "istitle"], [340, 8, 1, "", "isupper"], [340, 8, 1, "", "join"], [340, 8, 1, "", "ljust"], [340, 8, 1, "", "lower"], [340, 8, 1, "", "lstrip"], [340, 8, 1, "", "maketrans"], [340, 8, 1, "", "partition"], [340, 8, 1, "", "removeprefix"], [340, 8, 1, "", "removesuffix"], [340, 8, 1, "", "replace"], [340, 8, 1, "", "rfind"], [340, 8, 1, "", "rindex"], [340, 8, 1, "", "rjust"], [340, 8, 1, "", "rpartition"], [340, 8, 1, "", "rsplit"], [340, 8, 1, "", "rstrip"], [340, 8, 1, "", "split"], [340, 8, 1, "", "splitlines"], [340, 8, 1, "", "startswith"], [340, 8, 1, "", "strip"], [340, 8, 1, "", "swapcase"], [340, 8, 1, "", "title"], [340, 8, 1, "", "translate"], [340, 8, 1, "", "upper"], [340, 8, 1, "", "zfill"]], "bz2": [[146, 12, 1, "", "BZ2Compressor"], [146, 12, 1, "", "BZ2Decompressor"], [146, 12, 1, "", "BZ2File"], [146, 11, 1, "", "compress"], [146, 11, 1, "", "decompress"], [146, 11, 1, "", "open"]], "bz2.BZ2Compressor": [[146, 8, 1, "", "compress"], [146, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[146, 8, 1, "", "decompress"], [146, 7, 1, "", "eof"], [146, 7, 1, "", "needs_input"], [146, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[146, 8, 1, "", "peek"]], "calendar": [[147, 12, 1, "", "Calendar"], [147, 12, 1, "", "Day"], [147, 9, 1, "", "FRIDAY"], [147, 12, 1, "", "HTMLCalendar"], [147, 12, 1, "", "LocaleHTMLCalendar"], [147, 12, 1, "", "LocaleTextCalendar"], [147, 9, 1, "", "MONDAY"], [147, 12, 1, "", "Month"], [147, 9, 1, "", "SATURDAY"], [147, 9, 1, "", "SUNDAY"], [147, 9, 1, "", "THURSDAY"], [147, 9, 1, "", "TUESDAY"], [147, 12, 1, "", "TextCalendar"], [147, 9, 1, "", "WEDNESDAY"], [147, 11, 1, "", "calendar"], [147, 9, 1, "", "day_abbr"], [147, 9, 1, "", "day_name"], [147, 11, 1, "", "firstweekday"], [147, 11, 1, "", "isleap"], [147, 11, 1, "", "leapdays"], [147, 11, 1, "", "month"], [147, 9, 1, "", "month_abbr"], [147, 9, 1, "", "month_name"], [147, 11, 1, "", "monthcalendar"], [147, 11, 1, "", "monthrange"], [147, 11, 1, "", "prcal"], [147, 11, 1, "", "prmonth"], [147, 11, 1, "", "setfirstweekday"], [147, 11, 1, "", "timegm"], [147, 11, 1, "", "weekday"], [147, 11, 1, "", "weekheader"]], "calendar.Calendar": [[147, 8, 1, "", "itermonthdates"], [147, 8, 1, "", "itermonthdays"], [147, 8, 1, "", "itermonthdays2"], [147, 8, 1, "", "itermonthdays3"], [147, 8, 1, "", "itermonthdays4"], [147, 8, 1, "", "iterweekdays"], [147, 8, 1, "", "monthdatescalendar"], [147, 8, 1, "", "monthdays2calendar"], [147, 8, 1, "", "monthdayscalendar"], [147, 8, 1, "", "yeardatescalendar"], [147, 8, 1, "", "yeardays2calendar"], [147, 8, 1, "", "yeardayscalendar"]], "calendar.Day": [[147, 7, 1, "", "FRIDAY"], [147, 7, 1, "", "MONDAY"], [147, 7, 1, "", "SATURDAY"], [147, 7, 1, "", "SUNDAY"], [147, 7, 1, "", "THURSDAY"], [147, 7, 1, "", "TUESDAY"], [147, 7, 1, "", "WEDNESDAY"]], "calendar.HTMLCalendar": [[147, 7, 1, "", "cssclass_month"], [147, 7, 1, "", "cssclass_month_head"], [147, 7, 1, "", "cssclass_noday"], [147, 7, 1, "", "cssclass_year"], [147, 7, 1, "", "cssclass_year_head"], [147, 7, 1, "", "cssclasses"], [147, 7, 1, "", "cssclasses_weekday_head"], [147, 8, 1, "", "formatmonth"], [147, 8, 1, "", "formatyear"], [147, 8, 1, "", "formatyearpage"]], "calendar.Month": [[147, 7, 1, "", "APRIL"], [147, 7, 1, "", "AUGUST"], [147, 7, 1, "", "DECEMBER"], [147, 7, 1, "", "FEBRUARY"], [147, 7, 1, "", "JANUARY"], [147, 7, 1, "", "JULY"], [147, 7, 1, "", "JUNE"], [147, 7, 1, "", "MARCH"], [147, 7, 1, "", "MAY"], [147, 7, 1, "", "NOVEMBER"], [147, 7, 1, "", "OCTOBER"], [147, 7, 1, "", "SEPTEMBER"]], "calendar.TextCalendar": [[147, 8, 1, "", "formatmonth"], [147, 8, 1, "", "formatyear"], [147, 8, 1, "", "prmonth"], [147, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[148, 8, 1, "", "getfirst"], [148, 8, 1, "", "getlist"]], "cgi": [[148, 11, 1, "", "parse"], [148, 11, 1, "", "parse_header"], [148, 11, 1, "", "parse_multipart"], [148, 11, 1, "", "print_directory"], [148, 11, 1, "", "print_environ"], [148, 11, 1, "", "print_environ_usage"], [148, 11, 1, "", "print_form"], [148, 11, 1, "", "test"]], "cgitb": [[149, 11, 1, "", "enable"], [149, 11, 1, "", "handler"], [149, 11, 1, "", "html"], [149, 11, 1, "", "text"]], "chunk": [[150, 12, 1, "", "Chunk"]], "chunk.Chunk": [[150, 8, 1, "", "close"], [150, 8, 1, "", "getname"], [150, 8, 1, "", "getsize"], [150, 8, 1, "", "isatty"], [150, 8, 1, "", "read"], [150, 8, 1, "", "seek"], [150, 8, 1, "", "skip"], [150, 8, 1, "", "tell"]], "class": [[340, 7, 1, "", "__bases__"], [423, 8, 1, "", "__instancecheck__"], [340, 7, 1, "", "__mro__"], [423, 8, 1, "", "__subclasscheck__"], [340, 8, 1, "", "__subclasses__"], [340, 8, 1, "", "mro"]], "clinic": [[89, 12, 1, "", "CConverter"]], "clinic.CConverter": [[89, 7, 1, "", "c_default"], [89, 7, 1, "", "c_ignored_default"], [89, 7, 1, "", "converter"], [89, 7, 1, "", "default"], [89, 7, 1, "", "impl_by_reference"], [89, 7, 1, "", "parse_by_reference"], [89, 7, 1, "", "py_default"], [89, 7, 1, "", "type"]], "cmath": [[151, 11, 1, "", "acos"], [151, 11, 1, "", "acosh"], [151, 11, 1, "", "asin"], [151, 11, 1, "", "asinh"], [151, 11, 1, "", "atan"], [151, 11, 1, "", "atanh"], [151, 11, 1, "", "cos"], [151, 11, 1, "", "cosh"], [151, 9, 1, "", "e"], [151, 11, 1, "", "exp"], [151, 9, 1, "", "inf"], [151, 9, 1, "", "infj"], [151, 11, 1, "", "isclose"], [151, 11, 1, "", "isfinite"], [151, 11, 1, "", "isinf"], [151, 11, 1, "", "isnan"], [151, 11, 1, "", "log"], [151, 11, 1, "", "log10"], [151, 9, 1, "", "nan"], [151, 9, 1, "", "nanj"], [151, 11, 1, "", "phase"], [151, 9, 1, "", "pi"], [151, 11, 1, "", "polar"], [151, 11, 1, "", "rect"], [151, 11, 1, "", "sin"], [151, 11, 1, "", "sinh"], [151, 11, 1, "", "sqrt"], [151, 11, 1, "", "tan"], [151, 11, 1, "", "tanh"], [151, 9, 1, "", "tau"]], "cmd": [[152, 12, 1, "", "Cmd"]], "cmd.Cmd": [[152, 8, 1, "", "cmdloop"], [152, 7, 1, "", "cmdqueue"], [152, 8, 1, "", "columnize"], [152, 8, 1, "", "completedefault"], [152, 8, 1, "", "default"], [152, 7, 1, "", "doc_header"], [152, 8, 1, "", "emptyline"], [152, 7, 1, "", "identchars"], [152, 7, 1, "", "intro"], [152, 7, 1, "", "lastcmd"], [152, 7, 1, "", "misc_header"], [152, 8, 1, "", "onecmd"], [152, 8, 1, "", "postcmd"], [152, 8, 1, "", "postloop"], [152, 8, 1, "", "precmd"], [152, 8, 1, "", "preloop"], [152, 7, 1, "", "prompt"], [152, 7, 1, "", "ruler"], [152, 7, 1, "", "undoc_header"], [152, 7, 1, "", "use_rawinput"]], "code": [[153, 12, 1, "", "InteractiveConsole"], [153, 12, 1, "", "InteractiveInterpreter"], [153, 11, 1, "", "compile_command"], [153, 11, 1, "", "interact"]], "code.InteractiveConsole": [[153, 8, 1, "", "interact"], [153, 8, 1, "", "push"], [153, 8, 1, "", "raw_input"], [153, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[153, 8, 1, "", "runcode"], [153, 8, 1, "", "runsource"], [153, 8, 1, "", "showsyntaxerror"], [153, 8, 1, "", "showtraceback"], [153, 8, 1, "", "write"]], "codecs": [[154, 9, 1, "", "BOM"], [154, 9, 1, "", "BOM_BE"], [154, 9, 1, "", "BOM_LE"], [154, 9, 1, "", "BOM_UTF16"], [154, 9, 1, "", "BOM_UTF16_BE"], [154, 9, 1, "", "BOM_UTF16_LE"], [154, 9, 1, "", "BOM_UTF32"], [154, 9, 1, "", "BOM_UTF32_BE"], [154, 9, 1, "", "BOM_UTF32_LE"], [154, 9, 1, "", "BOM_UTF8"], [154, 12, 1, "", "CodecInfo"], [154, 11, 1, "", "EncodedFile"], [154, 12, 1, "", "IncrementalDecoder"], [154, 12, 1, "", "IncrementalEncoder"], [154, 12, 1, "", "StreamReader"], [154, 12, 1, "", "StreamReaderWriter"], [154, 12, 1, "", "StreamRecoder"], [154, 12, 1, "", "StreamWriter"], [154, 11, 1, "", "backslashreplace_errors"], [154, 11, 1, "", "decode"], [154, 11, 1, "", "encode"], [154, 11, 1, "", "getdecoder"], [154, 11, 1, "", "getencoder"], [154, 11, 1, "", "getincrementaldecoder"], [154, 11, 1, "", "getincrementalencoder"], [154, 11, 1, "", "getreader"], [154, 11, 1, "", "getwriter"], [154, 11, 1, "", "ignore_errors"], [154, 11, 1, "", "iterdecode"], [154, 11, 1, "", "iterencode"], [154, 11, 1, "", "lookup"], [154, 11, 1, "", "lookup_error"], [154, 11, 1, "", "namereplace_errors"], [154, 11, 1, "", "open"], [154, 11, 1, "", "register"], [154, 11, 1, "", "register_error"], [154, 11, 1, "", "replace_errors"], [154, 11, 1, "", "strict_errors"], [154, 11, 1, "", "unregister"], [154, 11, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[154, 8, 1, "", "decode"], [154, 8, 1, "", "encode"]], "codecs.CodecInfo": [[154, 7, 1, "", "decode"], [154, 7, 1, "", "encode"], [154, 7, 1, "", "incrementaldecoder"], [154, 7, 1, "", "incrementalencoder"], [154, 7, 1, "", "name"], [154, 7, 1, "", "streamreader"], [154, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[154, 8, 1, "", "decode"], [154, 8, 1, "", "getstate"], [154, 8, 1, "", "reset"], [154, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[154, 8, 1, "", "encode"], [154, 8, 1, "", "getstate"], [154, 8, 1, "", "reset"], [154, 8, 1, "", "setstate"]], "codecs.StreamReader": [[154, 8, 1, "", "read"], [154, 8, 1, "", "readline"], [154, 8, 1, "", "readlines"], [154, 8, 1, "", "reset"]], "codecs.StreamWriter": [[154, 8, 1, "", "reset"], [154, 8, 1, "", "write"], [154, 8, 1, "", "writelines"]], "codeobject": [[423, 8, 1, "", "co_positions"]], "codeop": [[155, 12, 1, "", "CommandCompiler"], [155, 12, 1, "", "Compile"], [155, 11, 1, "", "compile_command"]], "collections": [[156, 12, 1, "", "ChainMap"], [156, 12, 1, "", "Counter"], [156, 12, 1, "", "OrderedDict"], [156, 12, 1, "", "UserDict"], [156, 12, 1, "", "UserList"], [156, 12, 1, "", "UserString"], [157, 10, 0, "-", "abc"], [156, 12, 1, "", "defaultdict"], [156, 12, 1, "", "deque"], [156, 11, 1, "", "namedtuple"]], "collections.ChainMap": [[156, 7, 1, "", "maps"], [156, 8, 1, "", "new_child"], [156, 7, 1, "", "parents"]], "collections.Counter": [[156, 8, 1, "", "elements"], [156, 8, 1, "", "fromkeys"], [156, 8, 1, "", "most_common"], [156, 8, 1, "", "subtract"], [156, 8, 1, "", "total"], [156, 8, 1, "", "update"]], "collections.OrderedDict": [[156, 8, 1, "", "move_to_end"], [156, 8, 1, "", "popitem"]], "collections.UserDict": [[156, 7, 1, "", "data"]], "collections.UserList": [[156, 7, 1, "", "data"]], "collections.UserString": [[156, 7, 1, "", "data"]], "collections.abc": [[157, 12, 1, "", "AsyncGenerator"], [157, 12, 1, "", "AsyncIterable"], [157, 12, 1, "", "AsyncIterator"], [157, 12, 1, "", "Awaitable"], [157, 12, 1, "", "Buffer"], [157, 12, 1, "", "ByteString"], [157, 12, 1, "", "Callable"], [157, 12, 1, "", "Collection"], [157, 12, 1, "", "Container"], [157, 12, 1, "", "Coroutine"], [157, 12, 1, "", "Generator"], [157, 12, 1, "", "Hashable"], [157, 12, 1, "", "ItemsView"], [157, 12, 1, "", "Iterable"], [157, 12, 1, "", "Iterator"], [157, 12, 1, "", "KeysView"], [157, 12, 1, "", "Mapping"], [157, 12, 1, "", "MappingView"], [157, 12, 1, "", "MutableMapping"], [157, 12, 1, "", "MutableSequence"], [157, 12, 1, "", "MutableSet"], [157, 12, 1, "", "Reversible"], [157, 12, 1, "", "Sequence"], [157, 12, 1, "", "Set"], [157, 12, 1, "", "Sized"], [157, 12, 1, "", "ValuesView"]], "collections.defaultdict": [[156, 8, 1, "", "__missing__"], [156, 7, 1, "", "default_factory"]], "collections.deque": [[156, 8, 1, "", "append"], [156, 8, 1, "", "appendleft"], [156, 8, 1, "", "clear"], [156, 8, 1, "", "copy"], [156, 8, 1, "", "count"], [156, 8, 1, "", "extend"], [156, 8, 1, "", "extendleft"], [156, 8, 1, "", "index"], [156, 8, 1, "", "insert"], [156, 7, 1, "", "maxlen"], [156, 8, 1, "", "pop"], [156, 8, 1, "", "popleft"], [156, 8, 1, "", "remove"], [156, 8, 1, "", "reverse"], [156, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[156, 8, 1, "", "_asdict"], [156, 7, 1, "", "_field_defaults"], [156, 7, 1, "", "_fields"], [156, 8, 1, "", "_make"], [156, 8, 1, "", "_replace"]], "colorsys": [[158, 11, 1, "", "hls_to_rgb"], [158, 11, 1, "", "hsv_to_rgb"], [158, 11, 1, "", "rgb_to_hls"], [158, 11, 1, "", "rgb_to_hsv"], [158, 11, 1, "", "rgb_to_yiq"], [158, 11, 1, "", "yiq_to_rgb"]], "compileall": [[159, 11, 1, "", "compile_dir"], [159, 11, 1, "", "compile_file"], [159, 11, 1, "", "compile_path"], [159, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [159, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [159, 14, 1, "cmdoption-compileall-b", "-b"], [159, 14, 1, "cmdoption-compileall-d", "-d"], [159, 14, 1, "cmdoption-compileall-e", "-e"], [159, 14, 1, "cmdoption-compileall-f", "-f"], [159, 14, 1, "cmdoption-compileall-i", "-i"], [159, 14, 1, "cmdoption-compileall-j", "-j"], [159, 14, 1, "cmdoption-compileall-l", "-l"], [159, 14, 1, "cmdoption-compileall-o", "-o"], [159, 14, 1, "cmdoption-compileall-p", "-p"], [159, 14, 1, "cmdoption-compileall-q", "-q"], [159, 14, 1, "cmdoption-compileall-r", "-r"], [159, 14, 1, "cmdoption-compileall-s", "-s"], [159, 14, 1, "cmdoption-compileall-x", "-x"], [159, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [159, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[162, 10, 0, "-", "futures"]], "concurrent.futures": [[162, 6, 1, "", "BrokenExecutor"], [162, 6, 1, "", "CancelledError"], [162, 12, 1, "", "Executor"], [162, 12, 1, "", "Future"], [162, 6, 1, "", "InvalidStateError"], [162, 12, 1, "", "ProcessPoolExecutor"], [162, 12, 1, "", "ThreadPoolExecutor"], [162, 6, 1, "", "TimeoutError"], [162, 11, 1, "", "as_completed"], [162, 11, 1, "", "wait"]], "concurrent.futures.Executor": [[162, 8, 1, "", "map"], [162, 8, 1, "", "shutdown"], [162, 8, 1, "", "submit"]], "concurrent.futures.Future": [[162, 8, 1, "", "add_done_callback"], [162, 8, 1, "", "cancel"], [162, 8, 1, "", "cancelled"], [162, 8, 1, "", "done"], [162, 8, 1, "", "exception"], [162, 8, 1, "", "result"], [162, 8, 1, "", "running"], [162, 8, 1, "", "set_exception"], [162, 8, 1, "", "set_result"], [162, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[162, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[162, 6, 1, "", "BrokenThreadPool"]], "configparser": [[163, 12, 1, "", "BasicInterpolation"], [163, 12, 1, "", "ConfigParser"], [163, 6, 1, "", "DuplicateOptionError"], [163, 6, 1, "", "DuplicateSectionError"], [163, 6, 1, "", "Error"], [163, 12, 1, "", "ExtendedInterpolation"], [163, 6, 1, "", "InterpolationDepthError"], [163, 6, 1, "", "InterpolationError"], [163, 6, 1, "", "InterpolationMissingOptionError"], [163, 6, 1, "", "InterpolationSyntaxError"], [163, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [163, 6, 1, "", "MissingSectionHeaderError"], [163, 6, 1, "", "NoOptionError"], [163, 6, 1, "", "NoSectionError"], [163, 6, 1, "", "ParsingError"], [163, 12, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[163, 7, 1, "", "BOOLEAN_STATES"], [163, 7, 1, "", "SECTCRE"], [163, 8, 1, "", "add_section"], [163, 8, 1, "", "defaults"], [163, 8, 1, "", "get"], [163, 8, 1, "", "getboolean"], [163, 8, 1, "", "getfloat"], [163, 8, 1, "", "getint"], [163, 8, 1, "", "has_option"], [163, 8, 1, "", "has_section"], [163, 8, 1, "", "items"], [163, 8, 1, "", "options"], [163, 8, 1, "", "optionxform"], [163, 8, 1, "", "read"], [163, 8, 1, "", "read_dict"], [163, 8, 1, "", "read_file"], [163, 8, 1, "", "read_string"], [163, 8, 1, "", "remove_option"], [163, 8, 1, "", "remove_section"], [163, 8, 1, "", "sections"], [163, 8, 1, "", "set"], [163, 8, 1, "", "write"]], "configparser.RawConfigParser": [[163, 8, 1, "", "add_section"], [163, 8, 1, "", "set"]], "container": [[340, 8, 1, "", "__iter__"]], "contextlib": [[165, 12, 1, "", "AbstractAsyncContextManager"], [165, 12, 1, "", "AbstractContextManager"], [165, 12, 1, "", "AsyncContextDecorator"], [165, 12, 1, "", "AsyncExitStack"], [165, 12, 1, "", "ContextDecorator"], [165, 12, 1, "", "ExitStack"], [165, 11, 1, "", "aclosing"], [165, 11, 1, "", "asynccontextmanager"], [165, 11, 1, "", "chdir"], [165, 11, 1, "", "closing"], [165, 11, 1, "", "contextmanager"], [165, 11, 1, "", "nullcontext"], [165, 11, 1, "", "redirect_stderr"], [165, 11, 1, "", "redirect_stdout"], [165, 11, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[165, 8, 1, "", "aclose"], [165, 8, 1, "", "enter_async_context"], [165, 8, 1, "", "push_async_callback"], [165, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[165, 8, 1, "", "callback"], [165, 8, 1, "", "close"], [165, 8, 1, "", "enter_context"], [165, 8, 1, "", "pop_all"], [165, 8, 1, "", "push"]], "contextmanager": [[340, 8, 1, "", "__enter__"], [340, 8, 1, "", "__exit__"]], "contextvars": [[166, 12, 1, "", "Context"], [166, 12, 1, "", "ContextVar"], [166, 12, 1, "", "Token"], [166, 11, 1, "", "copy_context"]], "contextvars.Context": [[166, 8, 1, "", "copy"], [166, 8, 1, "", "get"], [166, 8, 1, "", "items"], [166, 8, 1, "", "keys"], [166, 8, 1, "", "run"], [166, 8, 1, "", "values"]], "contextvars.ContextVar": [[166, 8, 1, "", "get"], [166, 7, 1, "", "name"], [166, 8, 1, "", "reset"], [166, 8, 1, "", "set"]], "contextvars.Token": [[166, 7, 1, "", "MISSING"], [166, 7, 1, "", "old_value"], [166, 7, 1, "", "var"]], "copy": [[167, 6, 1, "", "Error"], [167, 11, 1, "", "copy"], [167, 11, 1, "", "deepcopy"]], "copyreg": [[168, 11, 1, "", "constructor"], [168, 11, 1, "", "pickle"]], "coroutine": [[423, 8, 1, "", "close"], [423, 8, 1, "", "send"], [423, 8, 1, "", "throw"]], "crypt": [[169, 9, 1, "", "METHOD_BLOWFISH"], [169, 9, 1, "", "METHOD_CRYPT"], [169, 9, 1, "", "METHOD_MD5"], [169, 9, 1, "", "METHOD_SHA256"], [169, 9, 1, "", "METHOD_SHA512"], [169, 11, 1, "", "crypt"], [169, 7, 1, "", "methods"], [169, 11, 1, "", "mksalt"]], "csv": [[171, 12, 1, "", "Dialect"], [171, 12, 1, "", "DictReader"], [171, 12, 1, "", "DictWriter"], [171, 6, 1, "", "Error"], [171, 9, 1, "", "QUOTE_ALL"], [171, 9, 1, "", "QUOTE_MINIMAL"], [171, 9, 1, "", "QUOTE_NONE"], [171, 9, 1, "", "QUOTE_NONNUMERIC"], [171, 9, 1, "", "QUOTE_NOTNULL"], [171, 9, 1, "", "QUOTE_STRINGS"], [171, 12, 1, "", "Sniffer"], [171, 12, 1, "", "excel"], [171, 12, 1, "", "excel_tab"], [171, 11, 1, "", "field_size_limit"], [171, 11, 1, "", "get_dialect"], [171, 11, 1, "", "list_dialects"], [171, 11, 1, "", "reader"], [171, 11, 1, "", "register_dialect"], [171, 12, 1, "", "unix_dialect"], [171, 11, 1, "", "unregister_dialect"], [171, 11, 1, "", "writer"]], "csv.Dialect": [[171, 7, 1, "", "delimiter"], [171, 7, 1, "", "doublequote"], [171, 7, 1, "", "escapechar"], [171, 7, 1, "", "lineterminator"], [171, 7, 1, "", "quotechar"], [171, 7, 1, "", "quoting"], [171, 7, 1, "", "skipinitialspace"], [171, 7, 1, "", "strict"]], "csv.DictReader": [[171, 7, 1, "", "fieldnames"]], "csv.DictWriter": [[171, 8, 1, "", "writeheader"]], "csv.Sniffer": [[171, 8, 1, "", "has_header"], [171, 8, 1, "", "sniff"]], "csv.csvreader": [[171, 8, 1, "", "__next__"], [171, 7, 1, "", "dialect"], [171, 7, 1, "", "line_num"]], "csv.csvwriter": [[171, 7, 1, "", "dialect"], [171, 8, 1, "", "writerow"], [171, 8, 1, "", "writerows"]], "ctypes": [[172, 6, 1, "", "ArgumentError"], [172, 12, 1, "", "Array"], [172, 12, 1, "", "BigEndianStructure"], [172, 12, 1, "", "BigEndianUnion"], [172, 12, 1, "", "CDLL"], [172, 11, 1, "", "CFUNCTYPE"], [172, 11, 1, "", "DllCanUnloadNow"], [172, 11, 1, "", "DllGetClassObject"], [172, 11, 1, "", "FormatError"], [172, 11, 1, "", "GetLastError"], [172, 12, 1, "", "HRESULT"], [172, 12, 1, "", "LibraryLoader"], [172, 12, 1, "", "LittleEndianStructure"], [172, 12, 1, "", "LittleEndianUnion"], [172, 12, 1, "", "OleDLL"], [172, 11, 1, "", "POINTER"], [172, 11, 1, "", "PYFUNCTYPE"], [172, 12, 1, "", "PyDLL"], [172, 12, 1, "", "Structure"], [172, 12, 1, "", "Union"], [172, 11, 1, "", "WINFUNCTYPE"], [172, 12, 1, "", "WinDLL"], [172, 11, 1, "", "WinError"], [172, 12, 1, "", "_CData"], [172, 12, 1, "", "_FuncPtr"], [172, 12, 1, "", "_Pointer"], [172, 12, 1, "", "_SimpleCData"], [172, 11, 1, "", "addressof"], [172, 11, 1, "", "alignment"], [172, 11, 1, "", "byref"], [172, 12, 1, "", "c_bool"], [172, 12, 1, "", "c_byte"], [172, 12, 1, "", "c_char"], [172, 12, 1, "", "c_char_p"], [172, 12, 1, "", "c_double"], [172, 12, 1, "", "c_float"], [172, 12, 1, "", "c_int"], [172, 12, 1, "", "c_int16"], [172, 12, 1, "", "c_int32"], [172, 12, 1, "", "c_int64"], [172, 12, 1, "", "c_int8"], [172, 12, 1, "", "c_long"], [172, 12, 1, "", "c_longdouble"], [172, 12, 1, "", "c_longlong"], [172, 12, 1, "", "c_short"], [172, 12, 1, "", "c_size_t"], [172, 12, 1, "", "c_ssize_t"], [172, 12, 1, "", "c_time_t"], [172, 12, 1, "", "c_ubyte"], [172, 12, 1, "", "c_uint"], [172, 12, 1, "", "c_uint16"], [172, 12, 1, "", "c_uint32"], [172, 12, 1, "", "c_uint64"], [172, 12, 1, "", "c_uint8"], [172, 12, 1, "", "c_ulong"], [172, 12, 1, "", "c_ulonglong"], [172, 12, 1, "", "c_ushort"], [172, 12, 1, "", "c_void_p"], [172, 12, 1, "", "c_wchar"], [172, 12, 1, "", "c_wchar_p"], [172, 11, 1, "", "cast"], [172, 11, 1, "", "create_string_buffer"], [172, 11, 1, "", "create_unicode_buffer"], [172, 11, 1, "", "get_errno"], [172, 11, 1, "", "get_last_error"], [172, 11, 1, "", "memmove"], [172, 11, 1, "", "memset"], [172, 11, 1, "", "pointer"], [172, 12, 1, "", "py_object"], [172, 11, 1, "", "resize"], [172, 11, 1, "", "set_errno"], [172, 11, 1, "", "set_last_error"], [172, 11, 1, "", "sizeof"], [172, 11, 1, "", "string_at"], [172, 11, 1, "", "wstring_at"]], "ctypes.Array": [[172, 7, 1, "", "_length_"], [172, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[172, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[172, 7, 1, "", "_handle"], [172, 7, 1, "", "_name"]], "ctypes.Structure": [[172, 7, 1, "", "_anonymous_"], [172, 7, 1, "", "_fields_"], [172, 7, 1, "", "_pack_"]], "ctypes._CData": [[172, 7, 1, "", "_b_base_"], [172, 7, 1, "", "_b_needsfree_"], [172, 7, 1, "", "_objects"], [172, 8, 1, "", "from_address"], [172, 8, 1, "", "from_buffer"], [172, 8, 1, "", "from_buffer_copy"], [172, 8, 1, "", "from_param"], [172, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[172, 7, 1, "", "argtypes"], [172, 7, 1, "", "errcheck"], [172, 7, 1, "", "restype"]], "ctypes._Pointer": [[172, 7, 1, "", "_type_"], [172, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[172, 7, 1, "", "value"]], "ctypes.util": [[172, 11, 1, "", "find_library"], [172, 11, 1, "", "find_msvcrt"]], "curses": [[173, 9, 1, "", "ACS_BBSS"], [173, 9, 1, "", "ACS_BLOCK"], [173, 9, 1, "", "ACS_BOARD"], [173, 9, 1, "", "ACS_BSBS"], [173, 9, 1, "", "ACS_BSSB"], [173, 9, 1, "", "ACS_BSSS"], [173, 9, 1, "", "ACS_BTEE"], [173, 9, 1, "", "ACS_BULLET"], [173, 9, 1, "", "ACS_CKBOARD"], [173, 9, 1, "", "ACS_DARROW"], [173, 9, 1, "", "ACS_DEGREE"], [173, 9, 1, "", "ACS_DIAMOND"], [173, 9, 1, "", "ACS_GEQUAL"], [173, 9, 1, "", "ACS_HLINE"], [173, 9, 1, "", "ACS_LANTERN"], [173, 9, 1, "", "ACS_LARROW"], [173, 9, 1, "", "ACS_LEQUAL"], [173, 9, 1, "", "ACS_LLCORNER"], [173, 9, 1, "", "ACS_LRCORNER"], [173, 9, 1, "", "ACS_LTEE"], [173, 9, 1, "", "ACS_NEQUAL"], [173, 9, 1, "", "ACS_PI"], [173, 9, 1, "", "ACS_PLMINUS"], [173, 9, 1, "", "ACS_PLUS"], [173, 9, 1, "", "ACS_RARROW"], [173, 9, 1, "", "ACS_RTEE"], [173, 9, 1, "", "ACS_S1"], [173, 9, 1, "", "ACS_S3"], [173, 9, 1, "", "ACS_S7"], [173, 9, 1, "", "ACS_S9"], [173, 9, 1, "", "ACS_SBBS"], [173, 9, 1, "", "ACS_SBSB"], [173, 9, 1, "", "ACS_SBSS"], [173, 9, 1, "", "ACS_SSBB"], [173, 9, 1, "", "ACS_SSBS"], [173, 9, 1, "", "ACS_SSSB"], [173, 9, 1, "", "ACS_SSSS"], [173, 9, 1, "", "ACS_STERLING"], [173, 9, 1, "", "ACS_TTEE"], [173, 9, 1, "", "ACS_UARROW"], [173, 9, 1, "", "ACS_ULCORNER"], [173, 9, 1, "", "ACS_URCORNER"], [173, 9, 1, "", "ACS_VLINE"], [173, 9, 1, "", "A_ALTCHARSET"], [173, 9, 1, "", "A_ATTRIBUTES"], [173, 9, 1, "", "A_BLINK"], [173, 9, 1, "", "A_BOLD"], [173, 9, 1, "", "A_CHARTEXT"], [173, 9, 1, "", "A_COLOR"], [173, 9, 1, "", "A_DIM"], [173, 9, 1, "", "A_HORIZONTAL"], [173, 9, 1, "", "A_INVIS"], [173, 9, 1, "", "A_ITALIC"], [173, 9, 1, "", "A_LEFT"], [173, 9, 1, "", "A_LOW"], [173, 9, 1, "", "A_NORMAL"], [173, 9, 1, "", "A_PROTECT"], [173, 9, 1, "", "A_REVERSE"], [173, 9, 1, "", "A_RIGHT"], [173, 9, 1, "", "A_STANDOUT"], [173, 9, 1, "", "A_TOP"], [173, 9, 1, "", "A_UNDERLINE"], [173, 9, 1, "", "A_VERTICAL"], [173, 9, 1, "", "BUTTON_ALT"], [173, 9, 1, "", "BUTTON_CTRL"], [173, 9, 1, "", "BUTTON_SHIFT"], [173, 9, 1, "", "BUTTONn_CLICKED"], [173, 9, 1, "", "BUTTONn_DOUBLE_CLICKED"], [173, 9, 1, "", "BUTTONn_PRESSED"], [173, 9, 1, "", "BUTTONn_RELEASED"], [173, 9, 1, "", "BUTTONn_TRIPLE_CLICKED"], [173, 9, 1, "", "COLORS"], [173, 9, 1, "", "COLOR_BLACK"], [173, 9, 1, "", "COLOR_BLUE"], [173, 9, 1, "", "COLOR_CYAN"], [173, 9, 1, "", "COLOR_GREEN"], [173, 9, 1, "", "COLOR_MAGENTA"], [173, 9, 1, "", "COLOR_PAIRS"], [173, 9, 1, "", "COLOR_RED"], [173, 9, 1, "", "COLOR_WHITE"], [173, 9, 1, "", "COLOR_YELLOW"], [173, 9, 1, "", "COLS"], [173, 9, 1, "", "ERR"], [173, 9, 1, "", "KEY_A1"], [173, 9, 1, "", "KEY_A3"], [173, 9, 1, "", "KEY_B2"], [173, 9, 1, "", "KEY_BACKSPACE"], [173, 9, 1, "", "KEY_BEG"], [173, 9, 1, "", "KEY_BREAK"], [173, 9, 1, "", "KEY_BTAB"], [173, 9, 1, "", "KEY_C1"], [173, 9, 1, "", "KEY_C3"], [173, 9, 1, "", "KEY_CANCEL"], [173, 9, 1, "", "KEY_CATAB"], [173, 9, 1, "", "KEY_CLEAR"], [173, 9, 1, "", "KEY_CLOSE"], [173, 9, 1, "", "KEY_COMMAND"], [173, 9, 1, "", "KEY_COPY"], [173, 9, 1, "", "KEY_CREATE"], [173, 9, 1, "", "KEY_CTAB"], [173, 9, 1, "", "KEY_DC"], [173, 9, 1, "", "KEY_DL"], [173, 9, 1, "", "KEY_DOWN"], [173, 9, 1, "", "KEY_EIC"], [173, 9, 1, "", "KEY_END"], [173, 9, 1, "", "KEY_ENTER"], [173, 9, 1, "", "KEY_EOL"], [173, 9, 1, "", "KEY_EOS"], [173, 9, 1, "", "KEY_EXIT"], [173, 9, 1, "", "KEY_F0"], [173, 9, 1, "", "KEY_FIND"], [173, 9, 1, "", "KEY_Fn"], [173, 9, 1, "", "KEY_HELP"], [173, 9, 1, "", "KEY_HOME"], [173, 9, 1, "", "KEY_IC"], [173, 9, 1, "", "KEY_IL"], [173, 9, 1, "", "KEY_LEFT"], [173, 9, 1, "", "KEY_LL"], [173, 9, 1, "", "KEY_MARK"], [173, 9, 1, "", "KEY_MAX"], [173, 9, 1, "", "KEY_MESSAGE"], [173, 9, 1, "", "KEY_MIN"], [173, 9, 1, "", "KEY_MOUSE"], [173, 9, 1, "", "KEY_MOVE"], [173, 9, 1, "", "KEY_NEXT"], [173, 9, 1, "", "KEY_NPAGE"], [173, 9, 1, "", "KEY_OPEN"], [173, 9, 1, "", "KEY_OPTIONS"], [173, 9, 1, "", "KEY_PPAGE"], [173, 9, 1, "", "KEY_PREVIOUS"], [173, 9, 1, "", "KEY_PRINT"], [173, 9, 1, "", "KEY_REDO"], [173, 9, 1, "", "KEY_REFERENCE"], [173, 9, 1, "", "KEY_REFRESH"], [173, 9, 1, "", "KEY_REPLACE"], [173, 9, 1, "", "KEY_RESET"], [173, 9, 1, "", "KEY_RESIZE"], [173, 9, 1, "", "KEY_RESTART"], [173, 9, 1, "", "KEY_RESUME"], [173, 9, 1, "", "KEY_RIGHT"], [173, 9, 1, "", "KEY_SAVE"], [173, 9, 1, "", "KEY_SBEG"], [173, 9, 1, "", "KEY_SCANCEL"], [173, 9, 1, "", "KEY_SCOMMAND"], [173, 9, 1, "", "KEY_SCOPY"], [173, 9, 1, "", "KEY_SCREATE"], [173, 9, 1, "", "KEY_SDC"], [173, 9, 1, "", "KEY_SDL"], [173, 9, 1, "", "KEY_SELECT"], [173, 9, 1, "", "KEY_SEND"], [173, 9, 1, "", "KEY_SEOL"], [173, 9, 1, "", "KEY_SEXIT"], [173, 9, 1, "", "KEY_SF"], [173, 9, 1, "", "KEY_SFIND"], [173, 9, 1, "", "KEY_SHELP"], [173, 9, 1, "", "KEY_SHOME"], [173, 9, 1, "", "KEY_SIC"], [173, 9, 1, "", "KEY_SLEFT"], [173, 9, 1, "", "KEY_SMESSAGE"], [173, 9, 1, "", "KEY_SMOVE"], [173, 9, 1, "", "KEY_SNEXT"], [173, 9, 1, "", "KEY_SOPTIONS"], [173, 9, 1, "", "KEY_SPREVIOUS"], [173, 9, 1, "", "KEY_SPRINT"], [173, 9, 1, "", "KEY_SR"], [173, 9, 1, "", "KEY_SREDO"], [173, 9, 1, "", "KEY_SREPLACE"], [173, 9, 1, "", "KEY_SRESET"], [173, 9, 1, "", "KEY_SRIGHT"], [173, 9, 1, "", "KEY_SRSUME"], [173, 9, 1, "", "KEY_SSAVE"], [173, 9, 1, "", "KEY_SSUSPEND"], [173, 9, 1, "", "KEY_STAB"], [173, 9, 1, "", "KEY_SUNDO"], [173, 9, 1, "", "KEY_SUSPEND"], [173, 9, 1, "", "KEY_UNDO"], [173, 9, 1, "", "KEY_UP"], [173, 9, 1, "", "LINES"], [173, 9, 1, "", "OK"], [173, 9, 1, "", "__version__"], [174, 10, 0, "-", "ascii"], [173, 11, 1, "", "baudrate"], [173, 11, 1, "", "beep"], [173, 11, 1, "", "can_change_color"], [173, 11, 1, "", "cbreak"], [173, 11, 1, "", "color_content"], [173, 11, 1, "", "color_pair"], [173, 11, 1, "", "curs_set"], [173, 11, 1, "", "def_prog_mode"], [173, 11, 1, "", "def_shell_mode"], [173, 11, 1, "", "delay_output"], [173, 11, 1, "", "doupdate"], [173, 11, 1, "", "echo"], [173, 11, 1, "", "endwin"], [173, 11, 1, "", "erasechar"], [173, 6, 1, "", "error"], [173, 11, 1, "", "filter"], [173, 11, 1, "", "flash"], [173, 11, 1, "", "flushinp"], [173, 11, 1, "", "get_escdelay"], [173, 11, 1, "", "get_tabsize"], [173, 11, 1, "", "getmouse"], [173, 11, 1, "", "getsyx"], [173, 11, 1, "", "getwin"], [173, 11, 1, "", "halfdelay"], [173, 11, 1, "", "has_colors"], [173, 11, 1, "", "has_extended_color_support"], [173, 11, 1, "", "has_ic"], [173, 11, 1, "", "has_il"], [173, 11, 1, "", "has_key"], [173, 11, 1, "", "init_color"], [173, 11, 1, "", "init_pair"], [173, 11, 1, "", "initscr"], [173, 11, 1, "", "is_term_resized"], [173, 11, 1, "", "isendwin"], [173, 11, 1, "", "keyname"], [173, 11, 1, "", "killchar"], [173, 11, 1, "", "longname"], [173, 11, 1, "", "meta"], [173, 11, 1, "", "mouseinterval"], [173, 11, 1, "", "mousemask"], [173, 11, 1, "", "napms"], [173, 9, 1, "", "ncurses_version"], [173, 11, 1, "", "newpad"], [173, 11, 1, "", "newwin"], [173, 11, 1, "", "nl"], [173, 11, 1, "", "nocbreak"], [173, 11, 1, "", "noecho"], [173, 11, 1, "", "nonl"], [173, 11, 1, "", "noqiflush"], [173, 11, 1, "", "noraw"], [173, 11, 1, "", "pair_content"], [173, 11, 1, "", "pair_number"], [175, 10, 0, "-", "panel"], [173, 11, 1, "", "putp"], [173, 11, 1, "", "qiflush"], [173, 11, 1, "", "raw"], [173, 11, 1, "", "reset_prog_mode"], [173, 11, 1, "", "reset_shell_mode"], [173, 11, 1, "", "resetty"], [173, 11, 1, "", "resize_term"], [173, 11, 1, "", "resizeterm"], [173, 11, 1, "", "savetty"], [173, 11, 1, "", "set_escdelay"], [173, 11, 1, "", "set_tabsize"], [173, 11, 1, "", "setsyx"], [173, 11, 1, "", "setupterm"], [173, 11, 1, "", "start_color"], [173, 11, 1, "", "termattrs"], [173, 11, 1, "", "termname"], [173, 10, 0, "-", "textpad"], [173, 11, 1, "", "tigetflag"], [173, 11, 1, "", "tigetnum"], [173, 11, 1, "", "tigetstr"], [173, 11, 1, "", "tparm"], [173, 11, 1, "", "typeahead"], [173, 11, 1, "", "unctrl"], [173, 11, 1, "", "unget_wch"], [173, 11, 1, "", "ungetch"], [173, 11, 1, "", "ungetmouse"], [173, 11, 1, "", "update_lines_cols"], [173, 11, 1, "", "use_default_colors"], [173, 11, 1, "", "use_env"], [173, 9, 1, "", "version"], [173, 11, 1, "", "wrapper"]], "curses.ascii": [[174, 9, 1, "", "ACK"], [174, 9, 1, "", "BEL"], [174, 9, 1, "", "BS"], [174, 9, 1, "", "CAN"], [174, 9, 1, "", "CR"], [174, 9, 1, "", "DC1"], [174, 9, 1, "", "DC2"], [174, 9, 1, "", "DC3"], [174, 9, 1, "", "DC4"], [174, 9, 1, "", "DEL"], [174, 9, 1, "", "DLE"], [174, 9, 1, "", "EM"], [174, 9, 1, "", "ENQ"], [174, 9, 1, "", "EOT"], [174, 9, 1, "", "ESC"], [174, 9, 1, "", "ETB"], [174, 9, 1, "", "ETX"], [174, 9, 1, "", "FF"], [174, 9, 1, "", "FS"], [174, 9, 1, "", "GS"], [174, 9, 1, "", "HT"], [174, 9, 1, "", "LF"], [174, 9, 1, "", "NAK"], [174, 9, 1, "", "NL"], [174, 9, 1, "", "NUL"], [174, 9, 1, "", "RS"], [174, 9, 1, "", "SI"], [174, 9, 1, "", "SO"], [174, 9, 1, "", "SOH"], [174, 9, 1, "", "SP"], [174, 9, 1, "", "STX"], [174, 9, 1, "", "SUB"], [174, 9, 1, "", "SYN"], [174, 9, 1, "", "TAB"], [174, 9, 1, "", "US"], [174, 9, 1, "", "VT"], [174, 11, 1, "", "alt"], [174, 11, 1, "", "ascii"], [174, 9, 1, "", "controlnames"], [174, 11, 1, "", "ctrl"], [174, 11, 1, "", "isalnum"], [174, 11, 1, "", "isalpha"], [174, 11, 1, "", "isascii"], [174, 11, 1, "", "isblank"], [174, 11, 1, "", "iscntrl"], [174, 11, 1, "", "isctrl"], [174, 11, 1, "", "isdigit"], [174, 11, 1, "", "isgraph"], [174, 11, 1, "", "islower"], [174, 11, 1, "", "ismeta"], [174, 11, 1, "", "isprint"], [174, 11, 1, "", "ispunct"], [174, 11, 1, "", "isspace"], [174, 11, 1, "", "isupper"], [174, 11, 1, "", "isxdigit"], [174, 11, 1, "", "unctrl"]], "curses.panel.Panel": [[175, 8, 1, "", "above"], [175, 8, 1, "", "below"], [175, 8, 1, "", "bottom"], [175, 8, 1, "", "hidden"], [175, 8, 1, "", "hide"], [175, 8, 1, "", "move"], [175, 8, 1, "", "replace"], [175, 8, 1, "", "set_userptr"], [175, 8, 1, "", "show"], [175, 8, 1, "", "top"], [175, 8, 1, "", "userptr"], [175, 8, 1, "", "window"]], "curses.panel": [[175, 11, 1, "", "bottom_panel"], [175, 11, 1, "", "new_panel"], [175, 11, 1, "", "top_panel"], [175, 11, 1, "", "update_panels"]], "curses.textpad": [[173, 12, 1, "", "Textbox"], [173, 11, 1, "", "rectangle"]], "curses.textpad.Textbox": [[173, 8, 1, "", "do_command"], [173, 8, 1, "", "edit"], [173, 8, 1, "", "gather"], [173, 7, 1, "", "stripspaces"]], "curses.window": [[173, 8, 1, "", "addch"], [173, 8, 1, "", "addnstr"], [173, 8, 1, "", "addstr"], [173, 8, 1, "", "attroff"], [173, 8, 1, "", "attron"], [173, 8, 1, "", "attrset"], [173, 8, 1, "", "bkgd"], [173, 8, 1, "", "bkgdset"], [173, 8, 1, "", "border"], [173, 8, 1, "", "box"], [173, 8, 1, "", "chgat"], [173, 8, 1, "", "clear"], [173, 8, 1, "", "clearok"], [173, 8, 1, "", "clrtobot"], [173, 8, 1, "", "clrtoeol"], [173, 8, 1, "", "cursyncup"], [173, 8, 1, "", "delch"], [173, 8, 1, "", "deleteln"], [173, 8, 1, "", "derwin"], [173, 8, 1, "", "echochar"], [173, 8, 1, "", "enclose"], [173, 7, 1, "", "encoding"], [173, 8, 1, "", "erase"], [173, 8, 1, "", "get_wch"], [173, 8, 1, "", "getbegyx"], [173, 8, 1, "", "getbkgd"], [173, 8, 1, "", "getch"], [173, 8, 1, "", "getkey"], [173, 8, 1, "", "getmaxyx"], [173, 8, 1, "", "getparyx"], [173, 8, 1, "", "getstr"], [173, 8, 1, "", "getyx"], [173, 8, 1, "", "hline"], [173, 8, 1, "", "idcok"], [173, 8, 1, "", "idlok"], [173, 8, 1, "", "immedok"], [173, 8, 1, "", "inch"], [173, 8, 1, "", "insch"], [173, 8, 1, "", "insdelln"], [173, 8, 1, "", "insertln"], [173, 8, 1, "", "insnstr"], [173, 8, 1, "", "insstr"], [173, 8, 1, "", "instr"], [173, 8, 1, "", "is_linetouched"], [173, 8, 1, "", "is_wintouched"], [173, 8, 1, "", "keypad"], [173, 8, 1, "", "leaveok"], [173, 8, 1, "", "move"], [173, 8, 1, "", "mvderwin"], [173, 8, 1, "", "mvwin"], [173, 8, 1, "", "nodelay"], [173, 8, 1, "", "notimeout"], [173, 8, 1, "", "noutrefresh"], [173, 8, 1, "", "overlay"], [173, 8, 1, "", "overwrite"], [173, 8, 1, "", "putwin"], [173, 8, 1, "", "redrawln"], [173, 8, 1, "", "redrawwin"], [173, 8, 1, "", "refresh"], [173, 8, 1, "", "resize"], [173, 8, 1, "", "scroll"], [173, 8, 1, "", "scrollok"], [173, 8, 1, "", "setscrreg"], [173, 8, 1, "", "standend"], [173, 8, 1, "", "standout"], [173, 8, 1, "", "subpad"], [173, 8, 1, "", "subwin"], [173, 8, 1, "", "syncdown"], [173, 8, 1, "", "syncok"], [173, 8, 1, "", "syncup"], [173, 8, 1, "", "timeout"], [173, 8, 1, "", "touchline"], [173, 8, 1, "", "touchwin"], [173, 8, 1, "", "untouchwin"], [173, 8, 1, "", "vline"]], "dataclasses": [[177, 12, 1, "", "Field"], [177, 6, 1, "", "FrozenInstanceError"], [177, 9, 1, "", "KW_ONLY"], [177, 9, 1, "", "MISSING"], [177, 11, 1, "", "__post_init__"], [177, 11, 1, "", "asdict"], [177, 11, 1, "", "astuple"], [177, 11, 1, "", "dataclass"], [177, 11, 1, "", "field"], [177, 11, 1, "", "fields"], [177, 11, 1, "", "is_dataclass"], [177, 11, 1, "", "make_dataclass"], [177, 11, 1, "", "replace"]], "datetime": [[179, 9, 1, "", "MAXYEAR"], [179, 9, 1, "", "MINYEAR"], [179, 7, 1, "", "UTC"], [179, 12, 1, "", "date"], [179, 12, 1, "", "datetime"], [179, 12, 1, "", "time"], [179, 12, 1, "", "timedelta"], [179, 12, 1, "", "timezone"], [179, 12, 1, "", "tzinfo"]], "datetime.date": [[179, 8, 1, "", "__format__"], [179, 8, 1, "", "__str__"], [179, 8, 1, "", "ctime"], [179, 7, 1, "", "day"], [179, 8, 1, "", "fromisocalendar"], [179, 8, 1, "", "fromisoformat"], [179, 8, 1, "", "fromordinal"], [179, 8, 1, "", "fromtimestamp"], [179, 8, 1, "", "isocalendar"], [179, 8, 1, "", "isoformat"], [179, 8, 1, "", "isoweekday"], [179, 7, 1, "", "max"], [179, 7, 1, "", "min"], [179, 7, 1, "", "month"], [179, 8, 1, "", "replace"], [179, 7, 1, "", "resolution"], [179, 8, 1, "", "strftime"], [179, 8, 1, "", "timetuple"], [179, 8, 1, "", "today"], [179, 8, 1, "", "toordinal"], [179, 8, 1, "", "weekday"], [179, 7, 1, "", "year"]], "datetime.datetime": [[179, 8, 1, "", "__format__"], [179, 8, 1, "", "__str__"], [179, 8, 1, "", "astimezone"], [179, 8, 1, "", "combine"], [179, 8, 1, "", "ctime"], [179, 8, 1, "", "date"], [179, 7, 1, "", "day"], [179, 8, 1, "", "dst"], [179, 7, 1, "", "fold"], [179, 8, 1, "", "fromisocalendar"], [179, 8, 1, "", "fromisoformat"], [179, 8, 1, "", "fromordinal"], [179, 8, 1, "", "fromtimestamp"], [179, 7, 1, "", "hour"], [179, 8, 1, "", "isocalendar"], [179, 8, 1, "", "isoformat"], [179, 8, 1, "", "isoweekday"], [179, 7, 1, "", "max"], [179, 7, 1, "", "microsecond"], [179, 7, 1, "", "min"], [179, 7, 1, "", "minute"], [179, 7, 1, "", "month"], [179, 8, 1, "", "now"], [179, 8, 1, "", "replace"], [179, 7, 1, "", "resolution"], [179, 7, 1, "", "second"], [179, 8, 1, "", "strftime"], [179, 8, 1, "", "strptime"], [179, 8, 1, "", "time"], [179, 8, 1, "", "timestamp"], [179, 8, 1, "", "timetuple"], [179, 8, 1, "", "timetz"], [179, 8, 1, "", "today"], [179, 8, 1, "", "toordinal"], [179, 7, 1, "", "tzinfo"], [179, 8, 1, "", "tzname"], [179, 8, 1, "", "utcfromtimestamp"], [179, 8, 1, "", "utcnow"], [179, 8, 1, "", "utcoffset"], [179, 8, 1, "", "utctimetuple"], [179, 8, 1, "", "weekday"], [179, 7, 1, "", "year"]], "datetime.time": [[179, 8, 1, "", "__format__"], [179, 8, 1, "", "__str__"], [179, 8, 1, "", "dst"], [179, 7, 1, "", "fold"], [179, 8, 1, "", "fromisoformat"], [179, 7, 1, "", "hour"], [179, 8, 1, "", "isoformat"], [179, 7, 1, "", "max"], [179, 7, 1, "", "microsecond"], [179, 7, 1, "", "min"], [179, 7, 1, "", "minute"], [179, 8, 1, "", "replace"], [179, 7, 1, "", "resolution"], [179, 7, 1, "", "second"], [179, 8, 1, "", "strftime"], [179, 7, 1, "", "tzinfo"], [179, 8, 1, "", "tzname"], [179, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[179, 7, 1, "", "max"], [179, 7, 1, "", "min"], [179, 7, 1, "", "resolution"], [179, 8, 1, "", "total_seconds"]], "datetime.timezone": [[179, 8, 1, "", "dst"], [179, 8, 1, "", "fromutc"], [179, 8, 1, "", "tzname"], [179, 7, 1, "", "utc"], [179, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[179, 8, 1, "", "dst"], [179, 8, 1, "", "fromutc"], [179, 8, 1, "", "tzname"], [179, 8, 1, "", "utcoffset"]], "dbm": [[180, 10, 0, "-", "dumb"], [180, 6, 1, "", "error"], [180, 10, 0, "-", "gnu"], [180, 10, 0, "-", "ndbm"], [180, 11, 1, "", "open"], [180, 11, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[180, 8, 1, "", "close"], [180, 8, 1, "", "sync"]], "dbm.dumb": [[180, 6, 1, "", "error"], [180, 11, 1, "", "open"]], "dbm.gnu": [[180, 6, 1, "", "error"], [180, 11, 1, "", "open"]], "dbm.gnu.gdbm": [[180, 8, 1, "", "close"], [180, 8, 1, "", "firstkey"], [180, 8, 1, "", "nextkey"], [180, 8, 1, "", "reorganize"], [180, 8, 1, "", "sync"]], "dbm.ndbm": [[180, 6, 1, "", "error"], [180, 9, 1, "", "library"], [180, 11, 1, "", "open"]], "dbm.ndbm.ndbm": [[180, 8, 1, "", "close"]], "decimal": [[182, 12, 1, "", "BasicContext"], [182, 12, 1, "", "Clamped"], [182, 12, 1, "", "Context"], [182, 12, 1, "", "Decimal"], [182, 12, 1, "", "DecimalException"], [182, 12, 1, "", "DefaultContext"], [182, 12, 1, "", "DivisionByZero"], [182, 12, 1, "", "ExtendedContext"], [182, 12, 1, "", "FloatOperation"], [182, 9, 1, "", "HAVE_CONTEXTVAR"], [182, 9, 1, "", "HAVE_THREADS"], [182, 12, 1, "", "Inexact"], [182, 12, 1, "", "InvalidOperation"], [182, 9, 1, "", "MAX_EMAX"], [182, 9, 1, "", "MAX_PREC"], [182, 9, 1, "", "MIN_EMIN"], [182, 9, 1, "", "MIN_ETINY"], [182, 12, 1, "", "Overflow"], [182, 9, 1, "", "ROUND_05UP"], [182, 9, 1, "", "ROUND_CEILING"], [182, 9, 1, "", "ROUND_DOWN"], [182, 9, 1, "", "ROUND_FLOOR"], [182, 9, 1, "", "ROUND_HALF_DOWN"], [182, 9, 1, "", "ROUND_HALF_EVEN"], [182, 9, 1, "", "ROUND_HALF_UP"], [182, 9, 1, "", "ROUND_UP"], [182, 12, 1, "", "Rounded"], [182, 12, 1, "", "Subnormal"], [182, 12, 1, "", "Underflow"], [182, 11, 1, "", "getcontext"], [182, 11, 1, "", "localcontext"], [182, 11, 1, "", "setcontext"]], "decimal.Context": [[182, 8, 1, "", "Etiny"], [182, 8, 1, "", "Etop"], [182, 8, 1, "", "abs"], [182, 8, 1, "", "add"], [182, 8, 1, "", "canonical"], [182, 8, 1, "", "clear_flags"], [182, 8, 1, "", "clear_traps"], [182, 8, 1, "", "compare"], [182, 8, 1, "", "compare_signal"], [182, 8, 1, "", "compare_total"], [182, 8, 1, "", "compare_total_mag"], [182, 8, 1, "", "copy"], [182, 8, 1, "", "copy_abs"], [182, 8, 1, "", "copy_decimal"], [182, 8, 1, "", "copy_negate"], [182, 8, 1, "", "copy_sign"], [182, 8, 1, "", "create_decimal"], [182, 8, 1, "", "create_decimal_from_float"], [182, 8, 1, "", "divide"], [182, 8, 1, "", "divide_int"], [182, 8, 1, "", "divmod"], [182, 8, 1, "", "exp"], [182, 8, 1, "", "fma"], [182, 8, 1, "", "is_canonical"], [182, 8, 1, "", "is_finite"], [182, 8, 1, "", "is_infinite"], [182, 8, 1, "", "is_nan"], [182, 8, 1, "", "is_normal"], [182, 8, 1, "", "is_qnan"], [182, 8, 1, "", "is_signed"], [182, 8, 1, "", "is_snan"], [182, 8, 1, "", "is_subnormal"], [182, 8, 1, "", "is_zero"], [182, 8, 1, "", "ln"], [182, 8, 1, "", "log10"], [182, 8, 1, "", "logb"], [182, 8, 1, "", "logical_and"], [182, 8, 1, "", "logical_invert"], [182, 8, 1, "", "logical_or"], [182, 8, 1, "", "logical_xor"], [182, 8, 1, "", "max"], [182, 8, 1, "", "max_mag"], [182, 8, 1, "", "min"], [182, 8, 1, "", "min_mag"], [182, 8, 1, "", "minus"], [182, 8, 1, "", "multiply"], [182, 8, 1, "", "next_minus"], [182, 8, 1, "", "next_plus"], [182, 8, 1, "", "next_toward"], [182, 8, 1, "", "normalize"], [182, 8, 1, "", "number_class"], [182, 8, 1, "", "plus"], [182, 8, 1, "", "power"], [182, 8, 1, "", "quantize"], [182, 8, 1, "", "radix"], [182, 8, 1, "", "remainder"], [182, 8, 1, "", "remainder_near"], [182, 8, 1, "", "rotate"], [182, 8, 1, "", "same_quantum"], [182, 8, 1, "", "scaleb"], [182, 8, 1, "", "shift"], [182, 8, 1, "", "sqrt"], [182, 8, 1, "", "subtract"], [182, 8, 1, "", "to_eng_string"], [182, 8, 1, "", "to_integral_exact"], [182, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[182, 8, 1, "", "adjusted"], [182, 8, 1, "", "as_integer_ratio"], [182, 8, 1, "", "as_tuple"], [182, 8, 1, "", "canonical"], [182, 8, 1, "", "compare"], [182, 8, 1, "", "compare_signal"], [182, 8, 1, "", "compare_total"], [182, 8, 1, "", "compare_total_mag"], [182, 8, 1, "", "conjugate"], [182, 8, 1, "", "copy_abs"], [182, 8, 1, "", "copy_negate"], [182, 8, 1, "", "copy_sign"], [182, 8, 1, "", "exp"], [182, 8, 1, "", "fma"], [182, 8, 1, "", "from_float"], [182, 8, 1, "", "is_canonical"], [182, 8, 1, "", "is_finite"], [182, 8, 1, "", "is_infinite"], [182, 8, 1, "", "is_nan"], [182, 8, 1, "", "is_normal"], [182, 8, 1, "", "is_qnan"], [182, 8, 1, "", "is_signed"], [182, 8, 1, "", "is_snan"], [182, 8, 1, "", "is_subnormal"], [182, 8, 1, "", "is_zero"], [182, 8, 1, "", "ln"], [182, 8, 1, "", "log10"], [182, 8, 1, "", "logb"], [182, 8, 1, "", "logical_and"], [182, 8, 1, "", "logical_invert"], [182, 8, 1, "", "logical_or"], [182, 8, 1, "", "logical_xor"], [182, 8, 1, "", "max"], [182, 8, 1, "", "max_mag"], [182, 8, 1, "", "min"], [182, 8, 1, "", "min_mag"], [182, 8, 1, "", "next_minus"], [182, 8, 1, "", "next_plus"], [182, 8, 1, "", "next_toward"], [182, 8, 1, "", "normalize"], [182, 8, 1, "", "number_class"], [182, 8, 1, "", "quantize"], [182, 8, 1, "", "radix"], [182, 8, 1, "", "remainder_near"], [182, 8, 1, "", "rotate"], [182, 8, 1, "", "same_quantum"], [182, 8, 1, "", "scaleb"], [182, 8, 1, "", "shift"], [182, 8, 1, "", "sqrt"], [182, 8, 1, "", "to_eng_string"], [182, 8, 1, "", "to_integral"], [182, 8, 1, "", "to_integral_exact"], [182, 8, 1, "", "to_integral_value"]], "definition": [[340, 7, 1, "", "__name__"], [340, 7, 1, "", "__qualname__"], [340, 7, 1, "", "__type_params__"]], "dict": [[340, 8, 1, "", "clear"], [340, 8, 1, "", "copy"], [340, 8, 1, "", "fromkeys"], [340, 8, 1, "", "get"], [340, 8, 1, "", "items"], [340, 8, 1, "", "keys"], [340, 8, 1, "", "pop"], [340, 8, 1, "", "popitem"], [340, 8, 1, "", "setdefault"], [340, 8, 1, "", "update"], [340, 8, 1, "", "values"]], "difflib": [[186, 12, 1, "", "Differ"], [186, 12, 1, "", "HtmlDiff"], [186, 11, 1, "", "IS_CHARACTER_JUNK"], [186, 11, 1, "", "IS_LINE_JUNK"], [186, 12, 1, "", "SequenceMatcher"], [186, 11, 1, "", "context_diff"], [186, 11, 1, "", "diff_bytes"], [186, 11, 1, "", "get_close_matches"], [186, 11, 1, "", "ndiff"], [186, 11, 1, "", "restore"], [186, 11, 1, "", "unified_diff"]], "difflib.Differ": [[186, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[186, 8, 1, "", "__init__"], [186, 8, 1, "", "make_file"], [186, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[186, 8, 1, "", "find_longest_match"], [186, 8, 1, "", "get_grouped_opcodes"], [186, 8, 1, "", "get_matching_blocks"], [186, 8, 1, "", "get_opcodes"], [186, 8, 1, "", "quick_ratio"], [186, 8, 1, "", "ratio"], [186, 8, 1, "", "real_quick_ratio"], [186, 8, 1, "", "set_seq1"], [186, 8, 1, "", "set_seq2"], [186, 8, 1, "", "set_seqs"]], "dis": [[187, 12, 1, "", "Bytecode"], [187, 12, 1, "", "Instruction"], [187, 12, 1, "", "Positions"], [187, 9, 1, "", "cmp_op"], [187, 11, 1, "", "code_info"], [187, 11, 1, "", "dis"], [187, 11, 1, "", "disassemble"], [187, 11, 1, "", "disco"], [187, 11, 1, "", "distb"], [187, 11, 1, "", "findlabels"], [187, 11, 1, "", "findlinestarts"], [187, 11, 1, "", "get_instructions"], [187, 9, 1, "", "hasarg"], [187, 9, 1, "", "hascompare"], [187, 9, 1, "", "hasconst"], [187, 9, 1, "", "hasexc"], [187, 9, 1, "", "hasfree"], [187, 9, 1, "", "hasjabs"], [187, 9, 1, "", "hasjrel"], [187, 9, 1, "", "haslocal"], [187, 9, 1, "", "hasname"], [187, 9, 1, "", "opmap"], [187, 9, 1, "", "opname"], [187, 11, 1, "", "show_code"], [187, 11, 1, "", "stack_effect"]], "dis.Bytecode": [[187, 9, 1, "", "codeobj"], [187, 8, 1, "", "dis"], [187, 9, 1, "", "first_line"], [187, 8, 1, "", "from_traceback"], [187, 8, 1, "", "info"]], "dis.Instruction": [[187, 9, 1, "", "arg"], [187, 9, 1, "", "argrepr"], [187, 9, 1, "", "argval"], [187, 9, 1, "", "is_jump_target"], [187, 9, 1, "", "offset"], [187, 9, 1, "", "opcode"], [187, 9, 1, "", "opname"], [187, 9, 1, "", "positions"], [187, 9, 1, "", "starts_line"]], "dis.Positions": [[187, 9, 1, "", "col_offset"], [187, 9, 1, "", "end_col_offset"], [187, 9, 1, "", "end_lineno"], [187, 9, 1, "", "lineno"]], "doctest": [[189, 9, 1, "", "COMPARISON_FLAGS"], [189, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [189, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [189, 12, 1, "", "DebugRunner"], [189, 11, 1, "", "DocFileSuite"], [189, 12, 1, "", "DocTest"], [189, 6, 1, "", "DocTestFailure"], [189, 12, 1, "", "DocTestFinder"], [189, 12, 1, "", "DocTestParser"], [189, 12, 1, "", "DocTestRunner"], [189, 11, 1, "", "DocTestSuite"], [189, 9, 1, "", "ELLIPSIS"], [189, 12, 1, "", "Example"], [189, 9, 1, "", "FAIL_FAST"], [189, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [189, 9, 1, "", "NORMALIZE_WHITESPACE"], [189, 12, 1, "", "OutputChecker"], [189, 9, 1, "", "REPORTING_FLAGS"], [189, 9, 1, "", "REPORT_CDIFF"], [189, 9, 1, "", "REPORT_NDIFF"], [189, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [189, 9, 1, "", "REPORT_UDIFF"], [189, 9, 1, "", "SKIP"], [189, 6, 1, "", "UnexpectedException"], [189, 11, 1, "", "debug"], [189, 11, 1, "", "debug_src"], [189, 11, 1, "", "register_optionflag"], [189, 11, 1, "", "run_docstring_examples"], [189, 11, 1, "", "script_from_examples"], [189, 11, 1, "", "set_unittest_reportflags"], [189, 11, 1, "", "testfile"], [189, 11, 1, "", "testmod"], [189, 11, 1, "", "testsource"]], "doctest.DocTest": [[189, 7, 1, "", "docstring"], [189, 7, 1, "", "examples"], [189, 7, 1, "", "filename"], [189, 7, 1, "", "globs"], [189, 7, 1, "", "lineno"], [189, 7, 1, "", "name"]], "doctest.DocTestFailure": [[189, 7, 1, "", "example"], [189, 7, 1, "", "got"], [189, 7, 1, "", "test"]], "doctest.DocTestFinder": [[189, 8, 1, "", "find"]], "doctest.DocTestParser": [[189, 8, 1, "", "get_doctest"], [189, 8, 1, "", "get_examples"], [189, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[189, 8, 1, "", "report_failure"], [189, 8, 1, "", "report_start"], [189, 8, 1, "", "report_success"], [189, 8, 1, "", "report_unexpected_exception"], [189, 8, 1, "", "run"], [189, 8, 1, "", "summarize"]], "doctest.Example": [[189, 7, 1, "", "exc_msg"], [189, 7, 1, "", "indent"], [189, 7, 1, "", "lineno"], [189, 7, 1, "", "options"], [189, 7, 1, "", "source"], [189, 7, 1, "", "want"]], "doctest.OutputChecker": [[189, 8, 1, "", "check_output"], [189, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[189, 7, 1, "", "example"], [189, 7, 1, "", "exc_info"], [189, 7, 1, "", "test"]], "email": [[191, 10, 0, "-", "charset"], [193, 10, 0, "-", "contentmanager"], [194, 10, 0, "-", "encoders"], [195, 10, 0, "-", "errors"], [197, 10, 0, "-", "generator"], [198, 10, 0, "-", "header"], [199, 10, 0, "-", "headerregistry"], [200, 10, 0, "-", "iterators"], [201, 10, 0, "-", "message"], [203, 11, 1, "", "message_from_binary_file"], [203, 11, 1, "", "message_from_bytes"], [203, 11, 1, "", "message_from_file"], [203, 11, 1, "", "message_from_string"], [202, 10, 0, "-", "mime"], [203, 10, 0, "-", "parser"], [204, 10, 0, "-", "policy"], [205, 10, 0, "-", "utils"]], "email.charset": [[191, 12, 1, "", "Charset"], [191, 11, 1, "", "add_alias"], [191, 11, 1, "", "add_charset"], [191, 11, 1, "", "add_codec"]], "email.charset.Charset": [[191, 8, 1, "", "__eq__"], [191, 8, 1, "", "__ne__"], [191, 8, 1, "", "__str__"], [191, 8, 1, "", "body_encode"], [191, 7, 1, "", "body_encoding"], [191, 8, 1, "", "get_body_encoding"], [191, 8, 1, "", "get_output_charset"], [191, 8, 1, "", "header_encode"], [191, 8, 1, "", "header_encode_lines"], [191, 7, 1, "", "header_encoding"], [191, 7, 1, "", "input_charset"], [191, 7, 1, "", "input_codec"], [191, 7, 1, "", "output_charset"], [191, 7, 1, "", "output_codec"]], "email.contentmanager": [[193, 12, 1, "", "ContentManager"], [193, 8, 1, "", "get_content"], [193, 9, 1, "", "raw_data_manager"], [193, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[193, 8, 1, "", "add_get_handler"], [193, 8, 1, "", "add_set_handler"], [193, 8, 1, "", "get_content"], [193, 8, 1, "", "set_content"]], "email.encoders": [[194, 11, 1, "", "encode_7or8bit"], [194, 11, 1, "", "encode_base64"], [194, 11, 1, "", "encode_noop"], [194, 11, 1, "", "encode_quopri"]], "email.errors": [[195, 6, 1, "", "BoundaryError"], [195, 6, 1, "", "HeaderParseError"], [195, 6, 1, "", "MessageError"], [195, 6, 1, "", "MessageParseError"], [195, 6, 1, "", "MultipartConversionError"]], "email.generator": [[197, 12, 1, "", "BytesGenerator"], [197, 12, 1, "", "DecodedGenerator"], [197, 12, 1, "", "Generator"]], "email.generator.BytesGenerator": [[197, 8, 1, "", "clone"], [197, 8, 1, "", "flatten"], [197, 8, 1, "", "write"]], "email.generator.Generator": [[197, 8, 1, "", "clone"], [197, 8, 1, "", "flatten"], [197, 8, 1, "", "write"]], "email.header": [[198, 12, 1, "", "Header"], [198, 11, 1, "", "decode_header"], [198, 11, 1, "", "make_header"]], "email.header.Header": [[198, 8, 1, "", "__eq__"], [198, 8, 1, "", "__ne__"], [198, 8, 1, "", "__str__"], [198, 8, 1, "", "append"], [198, 8, 1, "", "encode"]], "email.headerregistry": [[199, 12, 1, "", "Address"], [199, 12, 1, "", "AddressHeader"], [199, 12, 1, "", "BaseHeader"], [199, 12, 1, "", "ContentDispositionHeader"], [199, 12, 1, "", "ContentTransferEncoding"], [199, 12, 1, "", "ContentTypeHeader"], [199, 12, 1, "", "DateHeader"], [199, 12, 1, "", "Group"], [199, 12, 1, "", "HeaderRegistry"], [199, 12, 1, "", "MIMEVersionHeader"], [199, 12, 1, "", "ParameterizedMIMEHeader"], [199, 12, 1, "", "SingleAddressHeader"], [199, 12, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[199, 8, 1, "", "__str__"], [199, 7, 1, "", "addr_spec"], [199, 7, 1, "", "display_name"], [199, 7, 1, "", "domain"], [199, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[199, 7, 1, "", "addresses"], [199, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[199, 7, 1, "", "defects"], [199, 8, 1, "", "fold"], [199, 7, 1, "", "max_count"], [199, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[199, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[199, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[199, 7, 1, "", "content_type"], [199, 7, 1, "", "maintype"], [199, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[199, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[199, 8, 1, "", "__str__"], [199, 7, 1, "", "addresses"], [199, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[199, 8, 1, "", "__call__"], [199, 8, 1, "", "__getitem__"], [199, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[199, 7, 1, "", "major"], [199, 7, 1, "", "minor"], [199, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[199, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[199, 7, 1, "", "address"]], "email.iterators": [[200, 11, 1, "", "_structure"], [200, 11, 1, "", "body_line_iterator"], [200, 11, 1, "", "typed_subpart_iterator"]], "email.message": [[201, 12, 1, "", "EmailMessage"], [201, 12, 1, "", "MIMEPart"], [192, 12, 1, "", "Message"]], "email.message.EmailMessage": [[201, 8, 1, "", "__bytes__"], [201, 8, 1, "", "__contains__"], [201, 8, 1, "", "__delitem__"], [201, 8, 1, "", "__getitem__"], [201, 8, 1, "", "__len__"], [201, 8, 1, "", "__setitem__"], [201, 8, 1, "", "__str__"], [201, 8, 1, "", "add_alternative"], [201, 8, 1, "", "add_attachment"], [201, 8, 1, "", "add_header"], [201, 8, 1, "", "add_related"], [201, 8, 1, "", "as_bytes"], [201, 8, 1, "", "as_string"], [201, 8, 1, "", "clear"], [201, 8, 1, "", "clear_content"], [201, 7, 1, "", "defects"], [201, 8, 1, "", "del_param"], [201, 7, 1, "", "epilogue"], [201, 8, 1, "", "get"], [201, 8, 1, "", "get_all"], [201, 8, 1, "", "get_body"], [201, 8, 1, "", "get_boundary"], [201, 8, 1, "", "get_charsets"], [201, 8, 1, "", "get_content"], [201, 8, 1, "", "get_content_charset"], [201, 8, 1, "", "get_content_disposition"], [201, 8, 1, "", "get_content_maintype"], [201, 8, 1, "", "get_content_subtype"], [201, 8, 1, "", "get_content_type"], [201, 8, 1, "", "get_default_type"], [201, 8, 1, "", "get_filename"], [201, 8, 1, "", "get_unixfrom"], [201, 8, 1, "", "is_attachment"], [201, 8, 1, "", "is_multipart"], [201, 8, 1, "", "items"], [201, 8, 1, "", "iter_attachments"], [201, 8, 1, "", "iter_parts"], [201, 8, 1, "", "keys"], [201, 8, 1, "", "make_alternative"], [201, 8, 1, "", "make_mixed"], [201, 8, 1, "", "make_related"], [201, 7, 1, "", "preamble"], [201, 8, 1, "", "replace_header"], [201, 8, 1, "", "set_boundary"], [201, 8, 1, "", "set_content"], [201, 8, 1, "", "set_default_type"], [201, 8, 1, "", "set_param"], [201, 8, 1, "", "set_unixfrom"], [201, 8, 1, "", "values"], [201, 8, 1, "", "walk"]], "email.message.Message": [[192, 8, 1, "", "__bytes__"], [192, 8, 1, "", "__contains__"], [192, 8, 1, "", "__delitem__"], [192, 8, 1, "", "__getitem__"], [192, 8, 1, "", "__len__"], [192, 8, 1, "", "__setitem__"], [192, 8, 1, "", "__str__"], [192, 8, 1, "", "add_header"], [192, 8, 1, "", "as_bytes"], [192, 8, 1, "", "as_string"], [192, 8, 1, "", "attach"], [192, 7, 1, "", "defects"], [192, 8, 1, "", "del_param"], [192, 7, 1, "", "epilogue"], [192, 8, 1, "", "get"], [192, 8, 1, "", "get_all"], [192, 8, 1, "", "get_boundary"], [192, 8, 1, "", "get_charset"], [192, 8, 1, "", "get_charsets"], [192, 8, 1, "", "get_content_charset"], [192, 8, 1, "", "get_content_disposition"], [192, 8, 1, "", "get_content_maintype"], [192, 8, 1, "", "get_content_subtype"], [192, 8, 1, "", "get_content_type"], [192, 8, 1, "", "get_default_type"], [192, 8, 1, "", "get_filename"], [192, 8, 1, "", "get_param"], [192, 8, 1, "", "get_params"], [192, 8, 1, "", "get_payload"], [192, 8, 1, "", "get_unixfrom"], [192, 8, 1, "", "is_multipart"], [192, 8, 1, "", "items"], [192, 8, 1, "", "keys"], [192, 7, 1, "", "preamble"], [192, 8, 1, "", "replace_header"], [192, 8, 1, "", "set_boundary"], [192, 8, 1, "", "set_charset"], [192, 8, 1, "", "set_default_type"], [192, 8, 1, "", "set_param"], [192, 8, 1, "", "set_payload"], [192, 8, 1, "", "set_type"], [192, 8, 1, "", "set_unixfrom"], [192, 8, 1, "", "values"], [192, 8, 1, "", "walk"]], "email.mime.application": [[202, 12, 1, "", "MIMEApplication"]], "email.mime.audio": [[202, 12, 1, "", "MIMEAudio"]], "email.mime.base": [[202, 12, 1, "", "MIMEBase"]], "email.mime.image": [[202, 12, 1, "", "MIMEImage"]], "email.mime.message": [[202, 12, 1, "", "MIMEMessage"]], "email.mime.multipart": [[202, 12, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[202, 12, 1, "", "MIMENonMultipart"]], "email.mime.text": [[202, 12, 1, "", "MIMEText"]], "email.parser": [[203, 12, 1, "", "BytesFeedParser"], [203, 12, 1, "", "BytesHeaderParser"], [203, 12, 1, "", "BytesParser"], [203, 12, 1, "", "FeedParser"], [203, 12, 1, "", "HeaderParser"], [203, 12, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[203, 8, 1, "", "close"], [203, 8, 1, "", "feed"]], "email.parser.BytesParser": [[203, 8, 1, "", "parse"], [203, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[203, 8, 1, "", "parse"], [203, 8, 1, "", "parsestr"]], "email.policy": [[204, 12, 1, "", "Compat32"], [204, 12, 1, "", "EmailPolicy"], [204, 9, 1, "", "HTTP"], [204, 12, 1, "", "Policy"], [204, 9, 1, "", "SMTP"], [204, 9, 1, "", "SMTPUTF8"], [204, 9, 1, "", "compat32"], [204, 9, 1, "", "default"], [204, 9, 1, "", "strict"]], "email.policy.Compat32": [[204, 8, 1, "", "fold"], [204, 8, 1, "", "fold_binary"], [204, 8, 1, "", "header_fetch_parse"], [204, 8, 1, "", "header_source_parse"], [204, 8, 1, "", "header_store_parse"], [204, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[204, 7, 1, "", "content_manager"], [204, 8, 1, "", "fold"], [204, 8, 1, "", "fold_binary"], [204, 7, 1, "", "header_factory"], [204, 8, 1, "", "header_fetch_parse"], [204, 8, 1, "", "header_max_count"], [204, 8, 1, "", "header_source_parse"], [204, 8, 1, "", "header_store_parse"], [204, 7, 1, "", "refold_source"], [204, 7, 1, "", "utf8"]], "email.policy.Policy": [[204, 8, 1, "", "clone"], [204, 7, 1, "", "cte_type"], [204, 8, 1, "", "fold"], [204, 8, 1, "", "fold_binary"], [204, 8, 1, "", "handle_defect"], [204, 8, 1, "", "header_fetch_parse"], [204, 8, 1, "", "header_max_count"], [204, 8, 1, "", "header_source_parse"], [204, 8, 1, "", "header_store_parse"], [204, 7, 1, "", "linesep"], [204, 7, 1, "", "mangle_from_"], [204, 7, 1, "", "max_line_length"], [204, 7, 1, "", "message_factory"], [204, 7, 1, "", "raise_on_defect"], [204, 8, 1, "", "register_defect"]], "email.utils": [[205, 11, 1, "", "collapse_rfc2231_value"], [205, 11, 1, "", "decode_params"], [205, 11, 1, "", "decode_rfc2231"], [205, 11, 1, "", "encode_rfc2231"], [205, 11, 1, "", "format_datetime"], [205, 11, 1, "", "formataddr"], [205, 11, 1, "", "formatdate"], [205, 11, 1, "", "getaddresses"], [205, 11, 1, "", "localtime"], [205, 11, 1, "", "make_msgid"], [205, 11, 1, "", "mktime_tz"], [205, 11, 1, "", "parseaddr"], [205, 11, 1, "", "parsedate"], [205, 11, 1, "", "parsedate_to_datetime"], [205, 11, 1, "", "parsedate_tz"], [205, 11, 1, "", "quote"], [205, 11, 1, "", "unquote"]], "encodings": [[154, 10, 0, "-", "idna"], [154, 10, 0, "-", "mbcs"], [154, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[154, 11, 1, "", "ToASCII"], [154, 11, 1, "", "ToUnicode"], [154, 11, 1, "", "nameprep"]], "ensurepip": [[206, 11, 1, "", "bootstrap"], [206, 11, 1, "", "version"]], "enum": [[207, 12, 1, "", "Enum"], [207, 12, 1, "", "EnumCheck"], [207, 12, 1, "", "EnumType"], [207, 12, 1, "", "Flag"], [207, 12, 1, "", "FlagBoundary"], [207, 12, 1, "", "IntEnum"], [207, 12, 1, "", "IntFlag"], [207, 12, 1, "", "ReprEnum"], [207, 12, 1, "", "StrEnum"], [207, 12, 1, "", "auto"], [207, 11, 1, "", "global_enum"], [207, 11, 1, "", "member"], [207, 11, 1, "", "nonmember"], [207, 11, 1, "", "property"], [207, 11, 1, "", "show_flag_values"], [207, 11, 1, "", "unique"], [207, 11, 1, "", "verify"]], "enum.Enum": [[207, 8, 1, "", "__dir__"], [207, 8, 1, "", "__format__"], [207, 8, 1, "", "__init_subclass__"], [207, 8, 1, "", "__repr__"], [207, 8, 1, "", "__str__"], [207, 8, 1, "", "_generate_next_value_"], [207, 7, 1, "", "_ignore_"], [207, 8, 1, "", "_missing_"], [207, 7, 1, "", "name"], [207, 7, 1, "", "value"]], "enum.EnumCheck": [[207, 7, 1, "", "CONTINUOUS"], [207, 7, 1, "", "NAMED_FLAGS"], [207, 7, 1, "", "UNIQUE"]], "enum.EnumType": [[207, 8, 1, "", "__call__"], [207, 8, 1, "", "__contains__"], [207, 8, 1, "", "__dir__"], [207, 8, 1, "", "__getitem__"], [207, 8, 1, "", "__iter__"], [207, 8, 1, "", "__len__"], [207, 8, 1, "", "__reversed__"]], "enum.Flag": [[207, 8, 1, "", "__and__"], [207, 8, 1, "", "__contains__"], [207, 8, 1, "", "__or__"], [207, 8, 1, "", "__xor__"], [207, 8, 1, "", "_numeric_repr_"]], "enum.FlagBoundary": [[207, 7, 1, "", "CONFORM"], [207, 7, 1, "", "EJECT"], [207, 7, 1, "", "KEEP"], [207, 7, 1, "", "STRICT"]], "errno": [[208, 9, 1, "", "E2BIG"], [208, 9, 1, "", "EACCES"], [208, 9, 1, "", "EADDRINUSE"], [208, 9, 1, "", "EADDRNOTAVAIL"], [208, 9, 1, "", "EADV"], [208, 9, 1, "", "EAFNOSUPPORT"], [208, 9, 1, "", "EAGAIN"], [208, 9, 1, "", "EALREADY"], [208, 9, 1, "", "EBADE"], [208, 9, 1, "", "EBADF"], [208, 9, 1, "", "EBADFD"], [208, 9, 1, "", "EBADMSG"], [208, 9, 1, "", "EBADR"], [208, 9, 1, "", "EBADRQC"], [208, 9, 1, "", "EBADSLT"], [208, 9, 1, "", "EBFONT"], [208, 9, 1, "", "EBUSY"], [208, 9, 1, "", "ECHILD"], [208, 9, 1, "", "ECHRNG"], [208, 9, 1, "", "ECOMM"], [208, 9, 1, "", "ECONNABORTED"], [208, 9, 1, "", "ECONNREFUSED"], [208, 9, 1, "", "ECONNRESET"], [208, 9, 1, "", "EDEADLK"], [208, 9, 1, "", "EDEADLOCK"], [208, 9, 1, "", "EDESTADDRREQ"], [208, 9, 1, "", "EDOM"], [208, 9, 1, "", "EDOTDOT"], [208, 9, 1, "", "EDQUOT"], [208, 9, 1, "", "EEXIST"], [208, 9, 1, "", "EFAULT"], [208, 9, 1, "", "EFBIG"], [208, 9, 1, "", "EHOSTDOWN"], [208, 9, 1, "", "EHOSTUNREACH"], [208, 9, 1, "", "EIDRM"], [208, 9, 1, "", "EILSEQ"], [208, 9, 1, "", "EINPROGRESS"], [208, 9, 1, "", "EINTR"], [208, 9, 1, "", "EINVAL"], [208, 9, 1, "", "EIO"], [208, 9, 1, "", "EISCONN"], [208, 9, 1, "", "EISDIR"], [208, 9, 1, "", "EISNAM"], [208, 9, 1, "", "EL2HLT"], [208, 9, 1, "", "EL2NSYNC"], [208, 9, 1, "", "EL3HLT"], [208, 9, 1, "", "EL3RST"], [208, 9, 1, "", "ELIBACC"], [208, 9, 1, "", "ELIBBAD"], [208, 9, 1, "", "ELIBEXEC"], [208, 9, 1, "", "ELIBMAX"], [208, 9, 1, "", "ELIBSCN"], [208, 9, 1, "", "ELNRNG"], [208, 9, 1, "", "ELOOP"], [208, 9, 1, "", "EMFILE"], [208, 9, 1, "", "EMLINK"], [208, 9, 1, "", "EMSGSIZE"], [208, 9, 1, "", "EMULTIHOP"], [208, 9, 1, "", "ENAMETOOLONG"], [208, 9, 1, "", "ENAVAIL"], [208, 9, 1, "", "ENETDOWN"], [208, 9, 1, "", "ENETRESET"], [208, 9, 1, "", "ENETUNREACH"], [208, 9, 1, "", "ENFILE"], [208, 9, 1, "", "ENOANO"], [208, 9, 1, "", "ENOBUFS"], [208, 9, 1, "", "ENOCSI"], [208, 9, 1, "", "ENODATA"], [208, 9, 1, "", "ENODEV"], [208, 9, 1, "", "ENOENT"], [208, 9, 1, "", "ENOEXEC"], [208, 9, 1, "", "ENOLCK"], [208, 9, 1, "", "ENOLINK"], [208, 9, 1, "", "ENOMEM"], [208, 9, 1, "", "ENOMSG"], [208, 9, 1, "", "ENONET"], [208, 9, 1, "", "ENOPKG"], [208, 9, 1, "", "ENOPROTOOPT"], [208, 9, 1, "", "ENOSPC"], [208, 9, 1, "", "ENOSR"], [208, 9, 1, "", "ENOSTR"], [208, 9, 1, "", "ENOSYS"], [208, 9, 1, "", "ENOTBLK"], [208, 9, 1, "", "ENOTCAPABLE"], [208, 9, 1, "", "ENOTCONN"], [208, 9, 1, "", "ENOTDIR"], [208, 9, 1, "", "ENOTEMPTY"], [208, 9, 1, "", "ENOTNAM"], [208, 9, 1, "", "ENOTSOCK"], [208, 9, 1, "", "ENOTTY"], [208, 9, 1, "", "ENOTUNIQ"], [208, 9, 1, "", "ENXIO"], [208, 9, 1, "", "EOPNOTSUPP"], [208, 9, 1, "", "EOVERFLOW"], [208, 9, 1, "", "EPERM"], [208, 9, 1, "", "EPFNOSUPPORT"], [208, 9, 1, "", "EPIPE"], [208, 9, 1, "", "EPROTO"], [208, 9, 1, "", "EPROTONOSUPPORT"], [208, 9, 1, "", "EPROTOTYPE"], [208, 9, 1, "", "EQFULL"], [208, 9, 1, "", "ERANGE"], [208, 9, 1, "", "EREMCHG"], [208, 9, 1, "", "EREMOTE"], [208, 9, 1, "", "EREMOTEIO"], [208, 9, 1, "", "ERESTART"], [208, 9, 1, "", "EROFS"], [208, 9, 1, "", "ESHUTDOWN"], [208, 9, 1, "", "ESOCKTNOSUPPORT"], [208, 9, 1, "", "ESPIPE"], [208, 9, 1, "", "ESRCH"], [208, 9, 1, "", "ESRMNT"], [208, 9, 1, "", "ESTALE"], [208, 9, 1, "", "ESTRPIPE"], [208, 9, 1, "", "ETIME"], [208, 9, 1, "", "ETIMEDOUT"], [208, 9, 1, "", "ETOOMANYREFS"], [208, 9, 1, "", "ETXTBSY"], [208, 9, 1, "", "EUCLEAN"], [208, 9, 1, "", "EUNATCH"], [208, 9, 1, "", "EUSERS"], [208, 9, 1, "", "EWOULDBLOCK"], [208, 9, 1, "", "EXDEV"], [208, 9, 1, "", "EXFULL"], [208, 9, 1, "", "errorcode"]], "faulthandler": [[210, 11, 1, "", "cancel_dump_traceback_later"], [210, 11, 1, "", "disable"], [210, 11, 1, "", "dump_traceback"], [210, 11, 1, "", "dump_traceback_later"], [210, 11, 1, "", "enable"], [210, 11, 1, "", "is_enabled"], [210, 11, 1, "", "register"], [210, 11, 1, "", "unregister"]], "fcntl": [[211, 11, 1, "", "fcntl"], [211, 11, 1, "", "flock"], [211, 11, 1, "", "ioctl"], [211, 11, 1, "", "lockf"]], "filecmp": [[212, 7, 1, "", "DEFAULT_IGNORES"], [212, 11, 1, "", "clear_cache"], [212, 11, 1, "", "cmp"], [212, 11, 1, "", "cmpfiles"], [212, 12, 1, "", "dircmp"]], "filecmp.dircmp": [[212, 7, 1, "", "common"], [212, 7, 1, "", "common_dirs"], [212, 7, 1, "", "common_files"], [212, 7, 1, "", "common_funny"], [212, 7, 1, "", "diff_files"], [212, 7, 1, "", "funny_files"], [212, 7, 1, "", "left"], [212, 7, 1, "", "left_list"], [212, 7, 1, "", "left_only"], [212, 8, 1, "", "report"], [212, 8, 1, "", "report_full_closure"], [212, 8, 1, "", "report_partial_closure"], [212, 7, 1, "", "right"], [212, 7, 1, "", "right_list"], [212, 7, 1, "", "right_only"], [212, 7, 1, "", "same_files"], [212, 7, 1, "", "subdirs"]], "fileinput": [[214, 12, 1, "", "FileInput"], [214, 11, 1, "", "close"], [214, 11, 1, "", "filelineno"], [214, 11, 1, "", "filename"], [214, 11, 1, "", "fileno"], [214, 11, 1, "", "hook_compressed"], [214, 11, 1, "", "hook_encoded"], [214, 11, 1, "", "input"], [214, 11, 1, "", "isfirstline"], [214, 11, 1, "", "isstdin"], [214, 11, 1, "", "lineno"], [214, 11, 1, "", "nextfile"]], "float": [[340, 8, 1, "", "as_integer_ratio"], [340, 8, 1, "", "fromhex"], [340, 8, 1, "", "hex"], [340, 8, 1, "", "is_integer"]], "fnmatch": [[216, 11, 1, "", "filter"], [216, 11, 1, "", "fnmatch"], [216, 11, 1, "", "fnmatchcase"], [216, 11, 1, "", "translate"]], "fractions": [[217, 12, 1, "", "Fraction"]], "fractions.Fraction": [[217, 8, 1, "", "__ceil__"], [217, 8, 1, "", "__floor__"], [217, 8, 1, "", "__format__"], [217, 8, 1, "", "__round__"], [217, 8, 1, "", "as_integer_ratio"], [217, 7, 1, "", "denominator"], [217, 8, 1, "", "from_decimal"], [217, 8, 1, "", "from_float"], [217, 8, 1, "", "is_integer"], [217, 8, 1, "", "limit_denominator"], [217, 7, 1, "", "numerator"]], "frame": [[423, 8, 1, "", "clear"]], "frozenset": [[340, 8, 1, "", "add"], [340, 8, 1, "", "clear"], [340, 8, 1, "", "copy"], [340, 8, 1, "", "difference"], [340, 8, 1, "", "difference_update"], [340, 8, 1, "", "discard"], [340, 8, 1, "", "intersection"], [340, 8, 1, "", "intersection_update"], [340, 8, 1, "", "isdisjoint"], [340, 8, 1, "", "issubset"], [340, 8, 1, "", "issuperset"], [340, 8, 1, "", "pop"], [340, 8, 1, "", "remove"], [340, 8, 1, "", "symmetric_difference"], [340, 8, 1, "", "symmetric_difference_update"], [340, 8, 1, "", "union"], [340, 8, 1, "", "update"]], "ftplib": [[219, 12, 1, "", "FTP"], [219, 9, 1, "", "all_errors"], [219, 6, 1, "", "error_perm"], [219, 6, 1, "", "error_proto"], [219, 6, 1, "", "error_reply"], [219, 6, 1, "", "error_temp"]], "ftplib.FTP": [[219, 8, 1, "", "abort"], [219, 8, 1, "", "close"], [219, 8, 1, "", "connect"], [219, 8, 1, "", "cwd"], [219, 8, 1, "", "delete"], [219, 8, 1, "", "dir"], [219, 8, 1, "", "getwelcome"], [219, 8, 1, "", "login"], [219, 8, 1, "", "mkd"], [219, 8, 1, "", "mlsd"], [219, 8, 1, "", "nlst"], [219, 8, 1, "", "ntransfercmd"], [219, 8, 1, "", "pwd"], [219, 8, 1, "", "quit"], [219, 8, 1, "", "rename"], [219, 8, 1, "", "retrbinary"], [219, 8, 1, "", "retrlines"], [219, 8, 1, "", "rmd"], [219, 8, 1, "", "sendcmd"], [219, 8, 1, "", "set_debuglevel"], [219, 8, 1, "", "set_pasv"], [219, 8, 1, "", "size"], [219, 8, 1, "", "storbinary"], [219, 8, 1, "", "storlines"], [219, 8, 1, "", "transfercmd"], [219, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[219, 8, 1, "", "auth"], [219, 8, 1, "", "ccc"], [219, 8, 1, "", "prot_c"], [219, 8, 1, "", "prot_p"], [219, 7, 1, "", "ssl_version"]], "functools": [[222, 11, 1, "", "cache"], [222, 11, 1, "", "cached_property"], [222, 11, 1, "", "cmp_to_key"], [222, 11, 1, "", "lru_cache"], [222, 11, 1, "", "partial"], [222, 12, 1, "", "partialmethod"], [222, 11, 1, "", "reduce"], [222, 11, 1, "", "singledispatch"], [222, 12, 1, "", "singledispatchmethod"], [222, 11, 1, "", "total_ordering"], [222, 11, 1, "", "update_wrapper"], [222, 11, 1, "", "wraps"]], "functools.partial": [[222, 7, 1, "", "args"], [222, 7, 1, "", "func"], [222, 7, 1, "", "keywords"]], "gc": [[223, 9, 1, "", "DEBUG_COLLECTABLE"], [223, 9, 1, "", "DEBUG_LEAK"], [223, 9, 1, "", "DEBUG_SAVEALL"], [223, 9, 1, "", "DEBUG_STATS"], [223, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [223, 9, 1, "", "callbacks"], [223, 11, 1, "", "collect"], [223, 11, 1, "", "disable"], [223, 11, 1, "", "enable"], [223, 11, 1, "", "freeze"], [223, 9, 1, "", "garbage"], [223, 11, 1, "", "get_count"], [223, 11, 1, "", "get_debug"], [223, 11, 1, "", "get_freeze_count"], [223, 11, 1, "", "get_objects"], [223, 11, 1, "", "get_referents"], [223, 11, 1, "", "get_referrers"], [223, 11, 1, "", "get_stats"], [223, 11, 1, "", "get_threshold"], [223, 11, 1, "", "is_finalized"], [223, 11, 1, "", "is_tracked"], [223, 11, 1, "", "isenabled"], [223, 11, 1, "", "set_debug"], [223, 11, 1, "", "set_threshold"], [223, 11, 1, "", "unfreeze"]], "generator": [[425, 8, 1, "", "__next__"], [425, 8, 1, "", "close"], [425, 8, 1, "", "send"], [425, 8, 1, "", "throw"]], "genericalias": [[340, 7, 1, "", "__args__"], [340, 7, 1, "", "__origin__"], [340, 7, 1, "", "__parameters__"], [340, 7, 1, "", "__unpacked__"]], "getopt": [[224, 6, 1, "", "GetoptError"], [224, 6, 1, "", "error"], [224, 11, 1, "", "getopt"], [224, 11, 1, "", "gnu_getopt"]], "getpass": [[225, 6, 1, "", "GetPassWarning"], [225, 11, 1, "", "getpass"], [225, 11, 1, "", "getuser"]], "gettext": [[226, 12, 1, "", "GNUTranslations"], [226, 12, 1, "", "NullTranslations"], [226, 11, 1, "", "bindtextdomain"], [226, 11, 1, "", "dgettext"], [226, 11, 1, "", "dngettext"], [226, 11, 1, "", "dnpgettext"], [226, 11, 1, "", "dpgettext"], [226, 11, 1, "", "find"], [226, 11, 1, "", "gettext"], [226, 11, 1, "", "install"], [226, 11, 1, "", "ngettext"], [226, 11, 1, "", "npgettext"], [226, 11, 1, "", "pgettext"], [226, 11, 1, "", "textdomain"], [226, 11, 1, "", "translation"]], "gettext.GNUTranslations": [[226, 8, 1, "", "gettext"], [226, 8, 1, "", "ngettext"], [226, 8, 1, "", "npgettext"], [226, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[226, 8, 1, "", "_parse"], [226, 8, 1, "", "add_fallback"], [226, 8, 1, "", "charset"], [226, 8, 1, "", "gettext"], [226, 8, 1, "", "info"], [226, 8, 1, "", "install"], [226, 8, 1, "", "ngettext"], [226, 8, 1, "", "npgettext"], [226, 8, 1, "", "pgettext"]], "glob": [[227, 11, 1, "", "escape"], [227, 11, 1, "", "glob"], [227, 11, 1, "", "iglob"]], "graphlib": [[228, 6, 1, "", "CycleError"], [228, 12, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[228, 8, 1, "", "add"], [228, 8, 1, "", "done"], [228, 8, 1, "", "get_ready"], [228, 8, 1, "", "is_active"], [228, 8, 1, "", "prepare"], [228, 8, 1, "", "static_order"]], "grp": [[229, 11, 1, "", "getgrall"], [229, 11, 1, "", "getgrgid"], [229, 11, 1, "", "getgrnam"]], "gzip": [[230, 6, 1, "", "BadGzipFile"], [230, 12, 1, "", "GzipFile"], [230, 11, 1, "", "compress"], [230, 11, 1, "", "decompress"], [230, 11, 1, "", "open"], [230, 14, 1, "cmdoption-gzip-best", "--best"], [230, 14, 1, "cmdoption-gzip-d", "--decompress"], [230, 14, 1, "cmdoption-gzip-fast", "--fast"], [230, 14, 1, "cmdoption-gzip-h", "--help"], [230, 14, 1, "cmdoption-gzip-d", "-d"], [230, 14, 1, "cmdoption-gzip-h", "-h"], [230, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[230, 7, 1, "", "mtime"], [230, 7, 1, "", "name"], [230, 8, 1, "", "peek"]], "hashlib": [[231, 9, 1, "", "algorithms_available"], [231, 9, 1, "", "algorithms_guaranteed"], [231, 11, 1, "", "blake2b"], [231, 11, 1, "", "blake2s"], [231, 11, 1, "", "file_digest"], [231, 11, 1, "", "md5"], [231, 11, 1, "", "new"], [231, 11, 1, "", "pbkdf2_hmac"], [231, 11, 1, "", "scrypt"], [231, 11, 1, "", "sha1"], [231, 11, 1, "", "sha224"], [231, 11, 1, "", "sha256"], [231, 11, 1, "", "sha384"], [231, 11, 1, "", "sha3_224"], [231, 11, 1, "", "sha3_256"], [231, 11, 1, "", "sha3_384"], [231, 11, 1, "", "sha3_512"], [231, 11, 1, "", "sha512"], [231, 11, 1, "", "shake_128"], [231, 11, 1, "", "shake_256"]], "hashlib.blake2b": [[231, 9, 1, "", "MAX_DIGEST_SIZE"], [231, 9, 1, "", "MAX_KEY_SIZE"], [231, 9, 1, "", "PERSON_SIZE"], [231, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[231, 9, 1, "", "MAX_DIGEST_SIZE"], [231, 9, 1, "", "MAX_KEY_SIZE"], [231, 9, 1, "", "PERSON_SIZE"], [231, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[231, 9, 1, "", "block_size"], [231, 8, 1, "", "copy"], [231, 8, 1, "", "digest"], [231, 9, 1, "", "digest_size"], [231, 8, 1, "", "hexdigest"], [231, 7, 1, "", "name"], [231, 8, 1, "", "update"]], "hashlib.shake": [[231, 8, 1, "", "digest"], [231, 8, 1, "", "hexdigest"]], "heapq": [[232, 11, 1, "", "heapify"], [232, 11, 1, "", "heappop"], [232, 11, 1, "", "heappush"], [232, 11, 1, "", "heappushpop"], [232, 11, 1, "", "heapreplace"], [232, 11, 1, "", "merge"], [232, 11, 1, "", "nlargest"], [232, 11, 1, "", "nsmallest"]], "hmac.HMAC": [[233, 7, 1, "", "block_size"], [233, 8, 1, "", "copy"], [233, 8, 1, "", "digest"], [233, 7, 1, "", "digest_size"], [233, 8, 1, "", "hexdigest"], [233, 7, 1, "", "name"], [233, 8, 1, "", "update"]], "hmac": [[233, 11, 1, "", "compare_digest"], [233, 11, 1, "", "digest"], [233, 11, 1, "", "new"]], "html": [[235, 10, 0, "-", "entities"], [234, 11, 1, "", "escape"], [236, 10, 0, "-", "parser"], [234, 11, 1, "", "unescape"]], "html.entities": [[235, 9, 1, "", "codepoint2name"], [235, 9, 1, "", "entitydefs"], [235, 9, 1, "", "html5"], [235, 9, 1, "", "name2codepoint"]], "html.parser": [[236, 12, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[236, 8, 1, "", "close"], [236, 8, 1, "", "feed"], [236, 8, 1, "", "get_starttag_text"], [236, 8, 1, "", "getpos"], [236, 8, 1, "", "handle_charref"], [236, 8, 1, "", "handle_comment"], [236, 8, 1, "", "handle_data"], [236, 8, 1, "", "handle_decl"], [236, 8, 1, "", "handle_endtag"], [236, 8, 1, "", "handle_entityref"], [236, 8, 1, "", "handle_pi"], [236, 8, 1, "", "handle_startendtag"], [236, 8, 1, "", "handle_starttag"], [236, 8, 1, "", "reset"], [236, 8, 1, "", "unknown_decl"]], "http": [[237, 12, 1, "", "HTTPMethod"], [237, 12, 1, "", "HTTPStatus"], [238, 10, 0, "-", "client"], [239, 10, 0, "-", "cookiejar"], [240, 10, 0, "-", "cookies"], [241, 10, 0, "-", "server"]], "http.client": [[238, 6, 1, "", "BadStatusLine"], [238, 6, 1, "", "CannotSendHeader"], [238, 6, 1, "", "CannotSendRequest"], [238, 12, 1, "", "HTTPConnection"], [238, 6, 1, "", "HTTPException"], [238, 12, 1, "", "HTTPResponse"], [238, 12, 1, "", "HTTPSConnection"], [238, 9, 1, "", "HTTPS_PORT"], [238, 9, 1, "", "HTTP_PORT"], [238, 6, 1, "", "ImproperConnectionState"], [238, 6, 1, "", "IncompleteRead"], [238, 6, 1, "", "InvalidURL"], [238, 6, 1, "", "LineTooLong"], [238, 6, 1, "", "NotConnected"], [238, 6, 1, "", "RemoteDisconnected"], [238, 6, 1, "", "ResponseNotReady"], [238, 6, 1, "", "UnimplementedFileMode"], [238, 6, 1, "", "UnknownProtocol"], [238, 6, 1, "", "UnknownTransferEncoding"], [238, 11, 1, "", "parse_headers"], [238, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[238, 7, 1, "", "blocksize"], [238, 8, 1, "", "close"], [238, 8, 1, "", "connect"], [238, 8, 1, "", "endheaders"], [238, 8, 1, "", "get_proxy_response_headers"], [238, 8, 1, "", "getresponse"], [238, 8, 1, "", "putheader"], [238, 8, 1, "", "putrequest"], [238, 8, 1, "", "request"], [238, 8, 1, "", "send"], [238, 8, 1, "", "set_debuglevel"], [238, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[238, 7, 1, "", "closed"], [238, 7, 1, "", "debuglevel"], [238, 8, 1, "", "fileno"], [238, 8, 1, "", "getcode"], [238, 8, 1, "", "getheader"], [238, 8, 1, "", "getheaders"], [238, 8, 1, "", "geturl"], [238, 7, 1, "", "headers"], [238, 8, 1, "", "info"], [238, 7, 1, "", "msg"], [238, 8, 1, "", "read"], [238, 8, 1, "", "readinto"], [238, 7, 1, "", "reason"], [238, 7, 1, "", "status"], [238, 7, 1, "", "url"], [238, 7, 1, "", "version"]], "http.cookiejar": [[239, 12, 1, "", "Cookie"], [239, 12, 1, "", "CookieJar"], [239, 12, 1, "", "CookiePolicy"], [239, 12, 1, "", "DefaultCookiePolicy"], [239, 12, 1, "", "FileCookieJar"], [239, 12, 1, "", "LWPCookieJar"], [239, 6, 1, "", "LoadError"], [239, 12, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[239, 7, 1, "", "comment"], [239, 7, 1, "", "comment_url"], [239, 7, 1, "", "discard"], [239, 7, 1, "", "domain_initial_dot"], [239, 7, 1, "", "domain_specified"], [239, 7, 1, "", "expires"], [239, 8, 1, "", "get_nonstandard_attr"], [239, 8, 1, "", "has_nonstandard_attr"], [239, 8, 1, "", "is_expired"], [239, 7, 1, "", "name"], [239, 7, 1, "", "path"], [239, 7, 1, "", "port"], [239, 7, 1, "", "port_specified"], [239, 7, 1, "", "rfc2109"], [239, 7, 1, "", "secure"], [239, 8, 1, "", "set_nonstandard_attr"], [239, 7, 1, "", "value"], [239, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[239, 8, 1, "", "add_cookie_header"], [239, 8, 1, "", "clear"], [239, 8, 1, "", "clear_session_cookies"], [239, 8, 1, "", "extract_cookies"], [239, 8, 1, "", "make_cookies"], [239, 8, 1, "", "set_cookie"], [239, 8, 1, "", "set_cookie_if_ok"], [239, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[239, 8, 1, "", "domain_return_ok"], [239, 7, 1, "", "hide_cookie2"], [239, 7, 1, "", "netscape"], [239, 8, 1, "", "path_return_ok"], [239, 8, 1, "", "return_ok"], [239, 7, 1, "", "rfc2965"], [239, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[239, 7, 1, "", "DomainLiberal"], [239, 7, 1, "", "DomainRFC2965Match"], [239, 7, 1, "", "DomainStrict"], [239, 7, 1, "", "DomainStrictNoDots"], [239, 7, 1, "", "DomainStrictNonDomain"], [239, 8, 1, "", "allowed_domains"], [239, 8, 1, "", "blocked_domains"], [239, 8, 1, "", "is_blocked"], [239, 8, 1, "", "is_not_allowed"], [239, 7, 1, "", "rfc2109_as_netscape"], [239, 8, 1, "", "set_allowed_domains"], [239, 8, 1, "", "set_blocked_domains"], [239, 7, 1, "", "strict_domain"], [239, 7, 1, "", "strict_ns_domain"], [239, 7, 1, "", "strict_ns_set_initial_dollar"], [239, 7, 1, "", "strict_ns_set_path"], [239, 7, 1, "", "strict_ns_unverifiable"], [239, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[239, 7, 1, "", "delayload"], [239, 7, 1, "", "filename"], [239, 8, 1, "", "load"], [239, 8, 1, "", "revert"], [239, 8, 1, "", "save"]], "http.cookies": [[240, 12, 1, "", "BaseCookie"], [240, 6, 1, "", "CookieError"], [240, 12, 1, "", "Morsel"], [240, 12, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[240, 8, 1, "", "js_output"], [240, 8, 1, "", "load"], [240, 8, 1, "", "output"], [240, 8, 1, "", "value_decode"], [240, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[240, 8, 1, "", "OutputString"], [240, 7, 1, "", "coded_value"], [240, 8, 1, "", "copy"], [240, 8, 1, "", "isReservedKey"], [240, 8, 1, "", "js_output"], [240, 7, 1, "", "key"], [240, 8, 1, "", "output"], [240, 8, 1, "", "set"], [240, 8, 1, "", "setdefault"], [240, 8, 1, "", "update"], [240, 7, 1, "", "value"]], "http.server": [[241, 12, 1, "", "BaseHTTPRequestHandler"], [241, 12, 1, "", "CGIHTTPRequestHandler"], [241, 12, 1, "", "HTTPServer"], [241, 12, 1, "", "SimpleHTTPRequestHandler"], [241, 12, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[241, 7, 1, "", "MessageClass"], [241, 8, 1, "", "address_string"], [241, 7, 1, "", "client_address"], [241, 7, 1, "", "close_connection"], [241, 7, 1, "", "command"], [241, 8, 1, "", "date_time_string"], [241, 8, 1, "", "end_headers"], [241, 7, 1, "", "error_content_type"], [241, 7, 1, "", "error_message_format"], [241, 8, 1, "", "flush_headers"], [241, 8, 1, "", "handle"], [241, 8, 1, "", "handle_expect_100"], [241, 8, 1, "", "handle_one_request"], [241, 7, 1, "", "headers"], [241, 8, 1, "", "log_date_time_string"], [241, 8, 1, "", "log_error"], [241, 8, 1, "", "log_message"], [241, 8, 1, "", "log_request"], [241, 7, 1, "", "path"], [241, 7, 1, "", "protocol_version"], [241, 7, 1, "", "request_version"], [241, 7, 1, "", "requestline"], [241, 7, 1, "", "responses"], [241, 7, 1, "", "rfile"], [241, 8, 1, "", "send_error"], [241, 8, 1, "", "send_header"], [241, 8, 1, "", "send_response"], [241, 8, 1, "", "send_response_only"], [241, 7, 1, "", "server"], [241, 7, 1, "", "server_version"], [241, 7, 1, "", "sys_version"], [241, 8, 1, "", "version_string"], [241, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[241, 7, 1, "", "cgi_directories"], [241, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[241, 8, 1, "", "do_GET"], [241, 8, 1, "", "do_HEAD"], [241, 7, 1, "", "extensions_map"], [241, 7, 1, "", "server_version"]], "imaplib": [[244, 12, 1, "", "IMAP4"], [244, 12, 1, "", "IMAP4_SSL"], [244, 12, 1, "", "IMAP4_stream"], [244, 11, 1, "", "Int2AP"], [244, 11, 1, "", "Internaldate2tuple"], [244, 11, 1, "", "ParseFlags"], [244, 11, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[244, 7, 1, "", "PROTOCOL_VERSION"], [244, 6, 1, "", "abort"], [244, 8, 1, "", "append"], [244, 8, 1, "", "authenticate"], [244, 8, 1, "", "check"], [244, 8, 1, "", "close"], [244, 8, 1, "", "copy"], [244, 8, 1, "", "create"], [244, 7, 1, "", "debug"], [244, 8, 1, "", "delete"], [244, 8, 1, "", "deleteacl"], [244, 8, 1, "", "enable"], [244, 6, 1, "", "error"], [244, 8, 1, "", "expunge"], [244, 8, 1, "", "fetch"], [244, 8, 1, "", "getacl"], [244, 8, 1, "", "getannotation"], [244, 8, 1, "", "getquota"], [244, 8, 1, "", "getquotaroot"], [244, 8, 1, "", "list"], [244, 8, 1, "", "login"], [244, 8, 1, "", "login_cram_md5"], [244, 8, 1, "", "logout"], [244, 8, 1, "", "lsub"], [244, 8, 1, "", "myrights"], [244, 8, 1, "", "namespace"], [244, 8, 1, "", "noop"], [244, 8, 1, "", "open"], [244, 8, 1, "", "partial"], [244, 8, 1, "", "proxyauth"], [244, 8, 1, "", "read"], [244, 8, 1, "", "readline"], [244, 6, 1, "", "readonly"], [244, 8, 1, "", "recent"], [244, 8, 1, "", "rename"], [244, 8, 1, "", "response"], [244, 8, 1, "", "search"], [244, 8, 1, "", "select"], [244, 8, 1, "", "send"], [244, 8, 1, "", "setacl"], [244, 8, 1, "", "setannotation"], [244, 8, 1, "", "setquota"], [244, 8, 1, "", "shutdown"], [244, 8, 1, "", "socket"], [244, 8, 1, "", "sort"], [244, 8, 1, "", "starttls"], [244, 8, 1, "", "status"], [244, 8, 1, "", "store"], [244, 8, 1, "", "subscribe"], [244, 8, 1, "", "thread"], [244, 8, 1, "", "uid"], [244, 8, 1, "", "unselect"], [244, 8, 1, "", "unsubscribe"], [244, 7, 1, "", "utf8_enabled"], [244, 8, 1, "", "xatom"]], "imghdr": [[245, 9, 1, "", "tests"], [245, 11, 1, "", "what"]], "importlib": [[246, 11, 1, "", "__import__"], [246, 10, 0, "-", "abc"], [246, 11, 1, "", "import_module"], [246, 11, 1, "", "invalidate_caches"], [246, 10, 0, "-", "machinery"], [247, 10, 0, "-", "metadata"], [246, 11, 1, "", "reload"], [248, 10, 0, "-", "resources"], [246, 10, 0, "-", "util"]], "importlib.abc": [[246, 12, 1, "", "ExecutionLoader"], [246, 12, 1, "", "FileLoader"], [246, 12, 1, "", "InspectLoader"], [246, 12, 1, "", "Loader"], [246, 12, 1, "", "MetaPathFinder"], [246, 12, 1, "", "PathEntryFinder"], [246, 12, 1, "", "ResourceLoader"], [246, 12, 1, "", "SourceLoader"]], "importlib.abc.ExecutionLoader": [[246, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[246, 8, 1, "", "get_data"], [246, 8, 1, "", "get_filename"], [246, 8, 1, "", "load_module"], [246, 7, 1, "", "name"], [246, 7, 1, "", "path"]], "importlib.abc.InspectLoader": [[246, 8, 1, "", "exec_module"], [246, 8, 1, "", "get_code"], [246, 8, 1, "", "get_source"], [246, 8, 1, "", "is_package"], [246, 8, 1, "", "load_module"], [246, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[246, 8, 1, "", "create_module"], [246, 8, 1, "", "exec_module"], [246, 8, 1, "", "load_module"]], "importlib.abc.MetaPathFinder": [[246, 8, 1, "", "find_spec"], [246, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[246, 8, 1, "", "find_spec"], [246, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[246, 8, 1, "", "get_data"]], "importlib.abc.SourceLoader": [[246, 8, 1, "", "exec_module"], [246, 8, 1, "", "get_code"], [246, 8, 1, "", "get_source"], [246, 8, 1, "", "is_package"], [246, 8, 1, "", "load_module"], [246, 8, 1, "", "path_mtime"], [246, 8, 1, "", "path_stats"], [246, 8, 1, "", "set_data"]], "importlib.machinery": [[246, 7, 1, "", "BYTECODE_SUFFIXES"], [246, 12, 1, "", "BuiltinImporter"], [246, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [246, 7, 1, "", "EXTENSION_SUFFIXES"], [246, 12, 1, "", "ExtensionFileLoader"], [246, 12, 1, "", "FileFinder"], [246, 12, 1, "", "FrozenImporter"], [246, 12, 1, "", "ModuleSpec"], [246, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [246, 12, 1, "", "PathFinder"], [246, 7, 1, "", "SOURCE_SUFFIXES"], [246, 12, 1, "", "SourceFileLoader"], [246, 12, 1, "", "SourcelessFileLoader"], [246, 12, 1, "", "WindowsRegistryFinder"], [246, 11, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[246, 8, 1, "", "create_module"], [246, 8, 1, "", "exec_module"], [246, 8, 1, "", "get_code"], [246, 8, 1, "", "get_filename"], [246, 8, 1, "", "get_source"], [246, 8, 1, "", "is_package"], [246, 7, 1, "", "name"], [246, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[246, 8, 1, "", "find_spec"], [246, 8, 1, "", "invalidate_caches"], [246, 7, 1, "", "path"], [246, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[246, 7, 1, "", "cached"], [246, 7, 1, "", "has_location"], [246, 7, 1, "", "loader"], [246, 7, 1, "", "loader_state"], [246, 7, 1, "", "name"], [246, 7, 1, "", "origin"], [246, 7, 1, "", "parent"], [246, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[246, 8, 1, "", "find_spec"], [246, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[246, 8, 1, "", "is_package"], [246, 8, 1, "", "load_module"], [246, 7, 1, "", "name"], [246, 7, 1, "", "path"], [246, 8, 1, "", "path_stats"], [246, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[246, 8, 1, "", "get_code"], [246, 8, 1, "", "get_source"], [246, 8, 1, "", "is_package"], [246, 8, 1, "", "load_module"], [246, 7, 1, "", "name"], [246, 7, 1, "", "path"]], "importlib.resources": [[248, 9, 1, "", "Anchor"], [248, 9, 1, "", "Package"], [248, 9, 1, "", "Resource"], [249, 10, 0, "-", "abc"], [248, 11, 1, "", "as_file"], [248, 11, 1, "", "contents"], [248, 11, 1, "", "files"], [248, 11, 1, "", "is_resource"], [248, 11, 1, "", "open_binary"], [248, 11, 1, "", "open_text"], [248, 11, 1, "", "path"], [248, 11, 1, "", "read_binary"], [248, 11, 1, "", "read_text"]], "importlib.resources.abc": [[249, 12, 1, "", "ResourceReader"], [249, 12, 1, "", "Traversable"], [249, 12, 1, "", "TraversableResources"]], "importlib.resources.abc.ResourceReader": [[249, 8, 1, "", "contents"], [249, 8, 1, "", "is_resource"], [249, 8, 1, "", "open_resource"], [249, 8, 1, "", "resource_path"]], "importlib.resources.abc.Traversable": [[249, 8, 1, "", "__truediv__"], [249, 8, 1, "", "is_dir"], [249, 8, 1, "", "is_file"], [249, 8, 1, "", "iterdir"], [249, 8, 1, "", "joinpath"], [249, 7, 1, "", "name"], [249, 8, 1, "", "open"], [249, 8, 1, "", "read_bytes"], [249, 8, 1, "", "read_text"]], "importlib.resources.abc.TraversableResources": [[249, 8, 1, "", "files"]], "importlib.util": [[246, 12, 1, "", "LazyLoader"], [246, 7, 1, "", "MAGIC_NUMBER"], [246, 11, 1, "", "_incompatible_extension_module_restrictions"], [246, 11, 1, "", "cache_from_source"], [246, 11, 1, "", "decode_source"], [246, 11, 1, "", "find_spec"], [246, 11, 1, "", "module_from_spec"], [246, 11, 1, "", "resolve_name"], [246, 11, 1, "", "source_from_cache"], [246, 11, 1, "", "source_hash"], [246, 11, 1, "", "spec_from_file_location"], [246, 11, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[246, 8, 1, "", "factory"]], "inspect": [[251, 12, 1, "", "BoundArguments"], [251, 12, 1, "", "BufferFlags"], [251, 9, 1, "", "CO_ASYNC_GENERATOR"], [251, 9, 1, "", "CO_COROUTINE"], [251, 9, 1, "", "CO_GENERATOR"], [251, 9, 1, "", "CO_ITERABLE_COROUTINE"], [251, 9, 1, "", "CO_NESTED"], [251, 9, 1, "", "CO_NEWLOCALS"], [251, 9, 1, "", "CO_OPTIMIZED"], [251, 9, 1, "", "CO_VARARGS"], [251, 9, 1, "", "CO_VARKEYWORDS"], [251, 12, 1, "", "FrameInfo"], [251, 12, 1, "", "Parameter"], [251, 12, 1, "", "Signature"], [251, 12, 1, "", "Traceback"], [251, 11, 1, "", "cleandoc"], [251, 11, 1, "", "currentframe"], [251, 11, 1, "", "formatargvalues"], [251, 11, 1, "", "get_annotations"], [251, 11, 1, "", "getargvalues"], [251, 11, 1, "", "getasyncgenlocals"], [251, 11, 1, "", "getasyncgenstate"], [251, 11, 1, "", "getattr_static"], [251, 11, 1, "", "getcallargs"], [251, 11, 1, "", "getclasstree"], [251, 11, 1, "", "getclosurevars"], [251, 11, 1, "", "getcomments"], [251, 11, 1, "", "getcoroutinelocals"], [251, 11, 1, "", "getcoroutinestate"], [251, 11, 1, "", "getdoc"], [251, 11, 1, "", "getfile"], [251, 11, 1, "", "getframeinfo"], [251, 11, 1, "", "getfullargspec"], [251, 11, 1, "", "getgeneratorlocals"], [251, 11, 1, "", "getgeneratorstate"], [251, 11, 1, "", "getinnerframes"], [251, 11, 1, "", "getmembers"], [251, 11, 1, "", "getmembers_static"], [251, 11, 1, "", "getmodule"], [251, 11, 1, "", "getmodulename"], [251, 11, 1, "", "getmro"], [251, 11, 1, "", "getouterframes"], [251, 11, 1, "", "getsource"], [251, 11, 1, "", "getsourcefile"], [251, 11, 1, "", "getsourcelines"], [251, 11, 1, "", "isabstract"], [251, 11, 1, "", "isasyncgen"], [251, 11, 1, "", "isasyncgenfunction"], [251, 11, 1, "", "isawaitable"], [251, 11, 1, "", "isbuiltin"], [251, 11, 1, "", "isclass"], [251, 11, 1, "", "iscode"], [251, 11, 1, "", "iscoroutine"], [251, 11, 1, "", "iscoroutinefunction"], [251, 11, 1, "", "isdatadescriptor"], [251, 11, 1, "", "isframe"], [251, 11, 1, "", "isfunction"], [251, 11, 1, "", "isgenerator"], [251, 11, 1, "", "isgeneratorfunction"], [251, 11, 1, "", "isgetsetdescriptor"], [251, 11, 1, "", "ismemberdescriptor"], [251, 11, 1, "", "ismethod"], [251, 11, 1, "", "ismethoddescriptor"], [251, 11, 1, "", "ismethodwrapper"], [251, 11, 1, "", "ismodule"], [251, 11, 1, "", "isroutine"], [251, 11, 1, "", "istraceback"], [251, 11, 1, "", "markcoroutinefunction"], [251, 11, 1, "", "signature"], [251, 11, 1, "", "stack"], [251, 11, 1, "", "trace"], [251, 11, 1, "", "unwrap"], [251, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[251, 8, 1, "", "apply_defaults"], [251, 7, 1, "", "args"], [251, 7, 1, "", "arguments"], [251, 7, 1, "", "kwargs"], [251, 7, 1, "", "signature"]], "inspect.BufferFlags": [[251, 7, 1, "", "ANY_CONTIGUOUS"], [251, 7, 1, "", "CONTIG"], [251, 7, 1, "", "CONTIG_RO"], [251, 7, 1, "", "C_CONTIGUOUS"], [251, 7, 1, "", "FORMAT"], [251, 7, 1, "", "FULL"], [251, 7, 1, "", "FULL_RO"], [251, 7, 1, "", "F_CONTIGUOUS"], [251, 7, 1, "", "INDIRECT"], [251, 7, 1, "", "ND"], [251, 7, 1, "", "READ"], [251, 7, 1, "", "RECORDS"], [251, 7, 1, "", "RECORDS_RO"], [251, 7, 1, "", "SIMPLE"], [251, 7, 1, "", "STRIDED"], [251, 7, 1, "", "STRIDED_RO"], [251, 7, 1, "", "STRIDES"], [251, 7, 1, "", "WRITABLE"], [251, 7, 1, "", "WRITE"]], "inspect.FrameInfo": [[251, 7, 1, "", "code_context"], [251, 7, 1, "", "filename"], [251, 7, 1, "", "frame"], [251, 7, 1, "", "function"], [251, 7, 1, "", "index"], [251, 7, 1, "", "lineno"], [251, 7, 1, "", "positions"]], "inspect.Parameter": [[251, 7, 1, "", "annotation"], [251, 7, 1, "", "default"], [251, 7, 1, "", "empty"], [251, 7, 1, "", "kind"], [251, 7, 1, "", "name"], [251, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[251, 7, 1, "", "description"]], "inspect.Signature": [[251, 8, 1, "", "bind"], [251, 8, 1, "", "bind_partial"], [251, 7, 1, "", "empty"], [251, 8, 1, "", "from_callable"], [251, 7, 1, "", "parameters"], [251, 8, 1, "", "replace"], [251, 7, 1, "", "return_annotation"]], "inspect.Traceback": [[251, 7, 1, "", "code_context"], [251, 7, 1, "", "filename"], [251, 7, 1, "", "function"], [251, 7, 1, "", "index"], [251, 7, 1, "", "lineno"], [251, 7, 1, "", "positions"]], "instance": [[340, 7, 1, "", "__class__"]], "int": [[340, 8, 1, "", "as_integer_ratio"], [340, 8, 1, "", "bit_count"], [340, 8, 1, "", "bit_length"], [340, 8, 1, "", "from_bytes"], [340, 8, 1, "", "is_integer"], [340, 8, 1, "", "to_bytes"]], "io": [[254, 6, 1, "", "BlockingIOError"], [254, 12, 1, "", "BufferedIOBase"], [254, 12, 1, "", "BufferedRWPair"], [254, 12, 1, "", "BufferedRandom"], [254, 12, 1, "", "BufferedReader"], [254, 12, 1, "", "BufferedWriter"], [254, 12, 1, "", "BytesIO"], [254, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [254, 12, 1, "", "FileIO"], [254, 12, 1, "", "IOBase"], [254, 12, 1, "", "IncrementalNewlineDecoder"], [254, 12, 1, "", "RawIOBase"], [254, 12, 1, "", "StringIO"], [254, 12, 1, "", "TextIOBase"], [254, 12, 1, "", "TextIOWrapper"], [254, 6, 1, "", "UnsupportedOperation"], [254, 11, 1, "", "open"], [254, 11, 1, "", "open_code"], [254, 11, 1, "", "text_encoding"]], "io.BufferedIOBase": [[254, 8, 1, "", "detach"], [254, 7, 1, "", "raw"], [254, 8, 1, "", "read"], [254, 8, 1, "", "read1"], [254, 8, 1, "", "readinto"], [254, 8, 1, "", "readinto1"], [254, 8, 1, "", "write"]], "io.BufferedReader": [[254, 8, 1, "", "peek"], [254, 8, 1, "", "read"], [254, 8, 1, "", "read1"]], "io.BufferedWriter": [[254, 8, 1, "", "flush"], [254, 8, 1, "", "write"]], "io.BytesIO": [[254, 8, 1, "", "getbuffer"], [254, 8, 1, "", "getvalue"], [254, 8, 1, "", "read1"], [254, 8, 1, "", "readinto1"]], "io.FileIO": [[254, 7, 1, "", "mode"], [254, 7, 1, "", "name"]], "io.IOBase": [[254, 8, 1, "", "__del__"], [254, 8, 1, "", "close"], [254, 7, 1, "", "closed"], [254, 8, 1, "", "fileno"], [254, 8, 1, "", "flush"], [254, 8, 1, "", "isatty"], [254, 8, 1, "", "readable"], [254, 8, 1, "", "readline"], [254, 8, 1, "", "readlines"], [254, 8, 1, "", "seek"], [254, 8, 1, "", "seekable"], [254, 8, 1, "", "tell"], [254, 8, 1, "", "truncate"], [254, 8, 1, "", "writable"], [254, 8, 1, "", "writelines"]], "io.RawIOBase": [[254, 8, 1, "", "read"], [254, 8, 1, "", "readall"], [254, 8, 1, "", "readinto"], [254, 8, 1, "", "write"]], "io.StringIO": [[254, 8, 1, "", "getvalue"]], "io.TextIOBase": [[254, 7, 1, "", "buffer"], [254, 8, 1, "", "detach"], [254, 7, 1, "", "encoding"], [254, 7, 1, "", "errors"], [254, 7, 1, "", "newlines"], [254, 8, 1, "", "read"], [254, 8, 1, "", "readline"], [254, 8, 1, "", "seek"], [254, 8, 1, "", "tell"], [254, 8, 1, "", "write"]], "io.TextIOWrapper": [[254, 7, 1, "", "line_buffering"], [254, 8, 1, "", "reconfigure"], [254, 7, 1, "", "write_through"]], "ipaddress": [[255, 6, 1, "", "AddressValueError"], [255, 12, 1, "", "IPv4Address"], [255, 12, 1, "", "IPv4Interface"], [255, 12, 1, "", "IPv4Network"], [255, 12, 1, "", "IPv6Address"], [255, 12, 1, "", "IPv6Interface"], [255, 12, 1, "", "IPv6Network"], [255, 6, 1, "", "NetmaskValueError"], [255, 11, 1, "", "collapse_addresses"], [255, 11, 1, "", "get_mixed_type_key"], [255, 11, 1, "", "ip_address"], [255, 11, 1, "", "ip_interface"], [255, 11, 1, "", "ip_network"], [255, 11, 1, "", "summarize_address_range"], [255, 11, 1, "", "v4_int_to_packed"], [255, 11, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[255, 8, 1, "", "__format__"], [255, 7, 1, "", "compressed"], [255, 7, 1, "", "exploded"], [255, 7, 1, "", "is_global"], [255, 7, 1, "", "is_link_local"], [255, 7, 1, "", "is_loopback"], [255, 7, 1, "", "is_multicast"], [255, 7, 1, "", "is_private"], [255, 7, 1, "", "is_reserved"], [255, 7, 1, "", "is_unspecified"], [255, 7, 1, "", "max_prefixlen"], [255, 7, 1, "", "packed"], [255, 7, 1, "", "reverse_pointer"], [255, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[255, 7, 1, "", "ip"], [255, 7, 1, "", "network"], [255, 7, 1, "", "with_hostmask"], [255, 7, 1, "", "with_netmask"], [255, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[255, 8, 1, "", "address_exclude"], [255, 7, 1, "", "broadcast_address"], [255, 8, 1, "", "compare_networks"], [255, 7, 1, "", "compressed"], [255, 7, 1, "", "exploded"], [255, 7, 1, "", "hostmask"], [255, 8, 1, "", "hosts"], [255, 7, 1, "", "is_link_local"], [255, 7, 1, "", "is_loopback"], [255, 7, 1, "", "is_multicast"], [255, 7, 1, "", "is_private"], [255, 7, 1, "", "is_reserved"], [255, 7, 1, "", "is_unspecified"], [255, 7, 1, "", "max_prefixlen"], [255, 7, 1, "", "netmask"], [255, 7, 1, "", "network_address"], [255, 7, 1, "", "num_addresses"], [255, 8, 1, "", "overlaps"], [255, 7, 1, "", "prefixlen"], [255, 8, 1, "", "subnet_of"], [255, 8, 1, "", "subnets"], [255, 8, 1, "", "supernet"], [255, 8, 1, "", "supernet_of"], [255, 7, 1, "", "version"], [255, 7, 1, "", "with_hostmask"], [255, 7, 1, "", "with_netmask"], [255, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[255, 8, 1, "", "__format__"], [255, 7, 1, "", "compressed"], [255, 7, 1, "", "exploded"], [255, 7, 1, "", "ipv4_mapped"], [255, 7, 1, "", "is_global"], [255, 7, 1, "", "is_link_local"], [255, 7, 1, "", "is_loopback"], [255, 7, 1, "", "is_multicast"], [255, 7, 1, "", "is_private"], [255, 7, 1, "", "is_reserved"], [255, 7, 1, "", "is_site_local"], [255, 7, 1, "", "is_unspecified"], [255, 7, 1, "", "max_prefixlen"], [255, 7, 1, "", "packed"], [255, 7, 1, "", "reverse_pointer"], [255, 7, 1, "", "scope_id"], [255, 7, 1, "", "sixtofour"], [255, 7, 1, "", "teredo"], [255, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[255, 7, 1, "", "ip"], [255, 7, 1, "", "network"], [255, 7, 1, "", "with_hostmask"], [255, 7, 1, "", "with_netmask"], [255, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[255, 8, 1, "", "address_exclude"], [255, 7, 1, "", "broadcast_address"], [255, 8, 1, "", "compare_networks"], [255, 7, 1, "", "compressed"], [255, 7, 1, "", "exploded"], [255, 7, 1, "", "hostmask"], [255, 8, 1, "", "hosts"], [255, 7, 1, "", "is_link_local"], [255, 7, 1, "", "is_loopback"], [255, 7, 1, "", "is_multicast"], [255, 7, 1, "", "is_private"], [255, 7, 1, "", "is_reserved"], [255, 7, 1, "", "is_site_local"], [255, 7, 1, "", "is_unspecified"], [255, 7, 1, "", "max_prefixlen"], [255, 7, 1, "", "netmask"], [255, 7, 1, "", "network_address"], [255, 7, 1, "", "num_addresses"], [255, 8, 1, "", "overlaps"], [255, 7, 1, "", "prefixlen"], [255, 8, 1, "", "subnet_of"], [255, 8, 1, "", "subnets"], [255, 8, 1, "", "supernet"], [255, 8, 1, "", "supernet_of"], [255, 7, 1, "", "version"], [255, 7, 1, "", "with_hostmask"], [255, 7, 1, "", "with_netmask"], [255, 7, 1, "", "with_prefixlen"]], "iterator": [[340, 8, 1, "", "__iter__"], [340, 8, 1, "", "__next__"]], "itertools": [[257, 11, 1, "", "accumulate"], [257, 11, 1, "", "batched"], [257, 11, 1, "", "chain"], [257, 11, 1, "", "combinations"], [257, 11, 1, "", "combinations_with_replacement"], [257, 11, 1, "", "compress"], [257, 11, 1, "", "count"], [257, 11, 1, "", "cycle"], [257, 11, 1, "", "dropwhile"], [257, 11, 1, "", "filterfalse"], [257, 11, 1, "", "groupby"], [257, 11, 1, "", "islice"], [257, 11, 1, "", "pairwise"], [257, 11, 1, "", "permutations"], [257, 11, 1, "", "product"], [257, 11, 1, "", "repeat"], [257, 11, 1, "", "starmap"], [257, 11, 1, "", "takewhile"], [257, 11, 1, "", "tee"], [257, 11, 1, "", "zip_longest"]], "itertools.chain": [[257, 8, 1, "", "from_iterable"]], "json": [[258, 6, 1, "", "JSONDecodeError"], [258, 12, 1, "", "JSONDecoder"], [258, 12, 1, "", "JSONEncoder"], [258, 11, 1, "", "dump"], [258, 11, 1, "", "dumps"], [258, 11, 1, "", "load"], [258, 11, 1, "", "loads"], [258, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[258, 7, 1, "", "colno"], [258, 7, 1, "", "doc"], [258, 7, 1, "", "lineno"], [258, 7, 1, "", "msg"], [258, 7, 1, "", "pos"]], "json.JSONDecoder": [[258, 8, 1, "", "decode"], [258, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[258, 8, 1, "", "default"], [258, 8, 1, "", "encode"], [258, 8, 1, "", "iterencode"]], "keyword": [[259, 11, 1, "", "iskeyword"], [259, 11, 1, "", "issoftkeyword"], [259, 9, 1, "", "kwlist"], [259, 9, 1, "", "softkwlist"]], "linecache": [[261, 11, 1, "", "checkcache"], [261, 11, 1, "", "clearcache"], [261, 11, 1, "", "getline"], [261, 11, 1, "", "lazycache"]], "list": [[340, 8, 1, "", "sort"]], "locale": [[262, 9, 1, "", "ALT_DIGITS"], [262, 9, 1, "", "CHAR_MAX"], [262, 9, 1, "", "CODESET"], [262, 9, 1, "", "CRNCYSTR"], [262, 9, 1, "", "D_FMT"], [262, 9, 1, "", "D_T_FMT"], [262, 9, 1, "", "ERA"], [262, 9, 1, "", "ERA_D_FMT"], [262, 9, 1, "", "ERA_D_T_FMT"], [262, 9, 1, "", "ERA_T_FMT"], [262, 6, 1, "", "Error"], [262, 9, 1, "", "LC_ALL"], [262, 9, 1, "", "LC_COLLATE"], [262, 9, 1, "", "LC_CTYPE"], [262, 9, 1, "", "LC_MESSAGES"], [262, 9, 1, "", "LC_MONETARY"], [262, 9, 1, "", "LC_NUMERIC"], [262, 9, 1, "", "LC_TIME"], [262, 9, 1, "", "NOEXPR"], [262, 9, 1, "", "RADIXCHAR"], [262, 9, 1, "", "THOUSEP"], [262, 9, 1, "", "T_FMT"], [262, 9, 1, "", "T_FMT_AMPM"], [262, 9, 1, "", "YESEXPR"], [262, 11, 1, "", "atof"], [262, 11, 1, "", "atoi"], [262, 11, 1, "", "bindtextdomain"], [262, 11, 1, "", "currency"], [262, 11, 1, "", "dcgettext"], [262, 11, 1, "", "delocalize"], [262, 11, 1, "", "dgettext"], [262, 11, 1, "", "format_string"], [262, 11, 1, "", "getdefaultlocale"], [262, 11, 1, "", "getencoding"], [262, 11, 1, "", "getlocale"], [262, 11, 1, "", "getpreferredencoding"], [262, 11, 1, "", "gettext"], [262, 11, 1, "", "localeconv"], [262, 11, 1, "", "localize"], [262, 11, 1, "", "nl_langinfo"], [262, 11, 1, "", "normalize"], [262, 11, 1, "", "resetlocale"], [262, 11, 1, "", "setlocale"], [262, 11, 1, "", "str"], [262, 11, 1, "", "strcoll"], [262, 11, 1, "", "strxfrm"], [262, 11, 1, "", "textdomain"]], "logging": [[263, 12, 1, "", "BufferingFormatter"], [263, 9, 1, "", "CRITICAL"], [263, 9, 1, "", "DEBUG"], [263, 9, 1, "", "ERROR"], [265, 12, 1, "", "FileHandler"], [263, 12, 1, "", "Filter"], [263, 12, 1, "", "Formatter"], [263, 12, 1, "", "Handler"], [263, 9, 1, "", "INFO"], [263, 12, 1, "", "LogRecord"], [263, 12, 1, "", "Logger"], [263, 12, 1, "", "LoggerAdapter"], [263, 9, 1, "", "NOTSET"], [265, 12, 1, "", "NullHandler"], [265, 12, 1, "", "StreamHandler"], [263, 9, 1, "", "WARNING"], [263, 11, 1, "", "addLevelName"], [263, 11, 1, "", "basicConfig"], [263, 11, 1, "", "captureWarnings"], [264, 10, 0, "-", "config"], [263, 11, 1, "", "critical"], [263, 11, 1, "", "debug"], [263, 11, 1, "", "disable"], [263, 11, 1, "", "error"], [263, 11, 1, "", "exception"], [263, 11, 1, "", "getHandlerByName"], [263, 11, 1, "", "getHandlerNames"], [263, 11, 1, "", "getLevelName"], [263, 11, 1, "", "getLevelNamesMapping"], [263, 11, 1, "", "getLogRecordFactory"], [263, 11, 1, "", "getLogger"], [263, 11, 1, "", "getLoggerClass"], [265, 10, 0, "-", "handlers"], [263, 11, 1, "", "info"], [263, 7, 1, "", "lastResort"], [263, 11, 1, "", "log"], [263, 11, 1, "", "makeLogRecord"], [263, 11, 1, "", "setLogRecordFactory"], [263, 11, 1, "", "setLoggerClass"], [263, 11, 1, "", "shutdown"], [263, 11, 1, "", "warning"]], "logging.BufferingFormatter": [[263, 8, 1, "", "format"], [263, 8, 1, "", "formatFooter"], [263, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[265, 8, 1, "", "close"], [265, 8, 1, "", "emit"]], "logging.Filter": [[263, 8, 1, "", "filter"]], "logging.Formatter": [[263, 8, 1, "", "format"], [263, 8, 1, "", "formatException"], [263, 8, 1, "", "formatStack"], [263, 8, 1, "", "formatTime"]], "logging.Handler": [[263, 8, 1, "", "__init__"], [263, 8, 1, "", "acquire"], [263, 8, 1, "", "addFilter"], [263, 8, 1, "", "close"], [263, 8, 1, "", "createLock"], [263, 8, 1, "", "emit"], [263, 8, 1, "", "filter"], [263, 8, 1, "", "flush"], [263, 8, 1, "", "format"], [263, 8, 1, "", "handle"], [263, 8, 1, "", "handleError"], [263, 8, 1, "", "release"], [263, 8, 1, "", "removeFilter"], [263, 8, 1, "", "setFormatter"], [263, 8, 1, "", "setLevel"]], "logging.LogRecord": [[263, 8, 1, "", "getMessage"]], "logging.Logger": [[263, 8, 1, "", "addFilter"], [263, 8, 1, "", "addHandler"], [263, 8, 1, "", "critical"], [263, 8, 1, "", "debug"], [263, 8, 1, "", "error"], [263, 8, 1, "", "exception"], [263, 8, 1, "", "filter"], [263, 8, 1, "", "findCaller"], [263, 8, 1, "", "getChild"], [263, 8, 1, "", "getChildren"], [263, 8, 1, "", "getEffectiveLevel"], [263, 8, 1, "", "handle"], [263, 8, 1, "", "hasHandlers"], [263, 8, 1, "", "info"], [263, 8, 1, "", "isEnabledFor"], [263, 8, 1, "", "log"], [263, 8, 1, "", "makeRecord"], [263, 7, 1, "", "propagate"], [263, 8, 1, "", "removeFilter"], [263, 8, 1, "", "removeHandler"], [263, 8, 1, "", "setLevel"], [263, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[263, 8, 1, "", "process"]], "logging.NullHandler": [[265, 8, 1, "", "createLock"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "handle"]], "logging.StreamHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "flush"], [265, 8, 1, "", "setStream"], [265, 7, 1, "", "terminator"]], "logging.config": [[264, 11, 1, "", "dictConfig"], [264, 11, 1, "", "fileConfig"], [264, 11, 1, "", "listen"], [264, 11, 1, "", "stopListening"]], "logging.handlers": [[265, 12, 1, "", "BaseRotatingHandler"], [265, 12, 1, "", "BufferingHandler"], [265, 12, 1, "", "DatagramHandler"], [265, 12, 1, "", "HTTPHandler"], [265, 12, 1, "", "MemoryHandler"], [265, 12, 1, "", "NTEventLogHandler"], [265, 12, 1, "", "QueueHandler"], [265, 12, 1, "", "QueueListener"], [265, 12, 1, "", "RotatingFileHandler"], [265, 12, 1, "", "SMTPHandler"], [265, 12, 1, "", "SocketHandler"], [265, 12, 1, "", "SysLogHandler"], [265, 12, 1, "", "TimedRotatingFileHandler"], [265, 12, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[265, 7, 1, "", "namer"], [265, 8, 1, "", "rotate"], [265, 8, 1, "", "rotation_filename"], [265, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "flush"], [265, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "makeSocket"], [265, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[265, 8, 1, "", "close"], [265, 8, 1, "", "flush"], [265, 8, 1, "", "setTarget"], [265, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[265, 8, 1, "", "close"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "getEventCategory"], [265, 8, 1, "", "getEventType"], [265, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "enqueue"], [265, 7, 1, "", "listener"], [265, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[265, 8, 1, "", "dequeue"], [265, 8, 1, "", "enqueue_sentinel"], [265, 8, 1, "", "handle"], [265, 8, 1, "", "prepare"], [265, 8, 1, "", "start"], [265, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[265, 8, 1, "", "doRollover"], [265, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[265, 8, 1, "", "close"], [265, 8, 1, "", "createSocket"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "handleError"], [265, 8, 1, "", "makePickle"], [265, 8, 1, "", "makeSocket"], [265, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[265, 8, 1, "", "close"], [265, 8, 1, "", "createSocket"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "encodePriority"], [265, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[265, 8, 1, "", "doRollover"], [265, 8, 1, "", "emit"], [265, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[265, 8, 1, "", "emit"], [265, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[99, 8, 1, "", "__init__"]], "lzma": [[266, 12, 1, "", "LZMACompressor"], [266, 12, 1, "", "LZMADecompressor"], [266, 6, 1, "", "LZMAError"], [266, 12, 1, "", "LZMAFile"], [266, 11, 1, "", "compress"], [266, 11, 1, "", "decompress"], [266, 11, 1, "", "is_check_supported"], [266, 11, 1, "", "open"]], "lzma.LZMACompressor": [[266, 8, 1, "", "compress"], [266, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[266, 7, 1, "", "check"], [266, 8, 1, "", "decompress"], [266, 7, 1, "", "eof"], [266, 7, 1, "", "needs_input"], [266, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[266, 8, 1, "", "peek"]], "mailbox": [[267, 12, 1, "", "Babyl"], [267, 12, 1, "", "BabylMessage"], [267, 6, 1, "", "Error"], [267, 6, 1, "", "ExternalClashError"], [267, 6, 1, "", "FormatError"], [267, 12, 1, "", "MH"], [267, 12, 1, "", "MHMessage"], [267, 12, 1, "", "MMDF"], [267, 12, 1, "", "MMDFMessage"], [267, 12, 1, "", "Mailbox"], [267, 12, 1, "", "Maildir"], [267, 12, 1, "", "MaildirMessage"], [267, 12, 1, "", "Message"], [267, 6, 1, "", "NoSuchMailboxError"], [267, 6, 1, "", "NotEmptyError"], [267, 12, 1, "", "mbox"], [267, 12, 1, "", "mboxMessage"]], "mailbox.Babyl": [[267, 8, 1, "", "get_file"], [267, 8, 1, "", "get_labels"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[267, 8, 1, "", "add_label"], [267, 8, 1, "", "get_labels"], [267, 8, 1, "", "get_visible"], [267, 8, 1, "", "remove_label"], [267, 8, 1, "", "set_labels"], [267, 8, 1, "", "set_visible"], [267, 8, 1, "", "update_visible"]], "mailbox.MH": [[267, 8, 1, "", "__delitem__"], [267, 8, 1, "", "add_folder"], [267, 8, 1, "", "close"], [267, 8, 1, "", "discard"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "get_file"], [267, 8, 1, "", "get_folder"], [267, 8, 1, "", "get_sequences"], [267, 8, 1, "", "list_folders"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "pack"], [267, 8, 1, "", "remove"], [267, 8, 1, "", "remove_folder"], [267, 8, 1, "", "set_sequences"], [267, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[267, 8, 1, "", "add_sequence"], [267, 8, 1, "", "get_sequences"], [267, 8, 1, "", "remove_sequence"], [267, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[267, 8, 1, "", "get_file"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[267, 8, 1, "", "add_flag"], [267, 8, 1, "", "get_flags"], [267, 8, 1, "", "get_from"], [267, 8, 1, "", "remove_flag"], [267, 8, 1, "", "set_flags"], [267, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[267, 8, 1, "", "__contains__"], [267, 8, 1, "", "__delitem__"], [267, 8, 1, "", "__getitem__"], [267, 8, 1, "", "__iter__"], [267, 8, 1, "", "__len__"], [267, 8, 1, "", "__setitem__"], [267, 8, 1, "", "add"], [267, 8, 1, "", "clear"], [267, 8, 1, "", "close"], [267, 8, 1, "", "discard"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "get"], [267, 8, 1, "", "get_bytes"], [267, 8, 1, "", "get_file"], [267, 8, 1, "", "get_message"], [267, 8, 1, "", "get_string"], [267, 8, 1, "", "items"], [267, 8, 1, "", "iteritems"], [267, 8, 1, "", "iterkeys"], [267, 8, 1, "", "itervalues"], [267, 8, 1, "", "keys"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "pop"], [267, 8, 1, "", "popitem"], [267, 8, 1, "", "remove"], [267, 8, 1, "", "unlock"], [267, 8, 1, "", "update"], [267, 8, 1, "", "values"]], "mailbox.Maildir": [[267, 8, 1, "", "__setitem__"], [267, 8, 1, "", "add"], [267, 8, 1, "", "add_folder"], [267, 8, 1, "", "clean"], [267, 8, 1, "", "close"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "get_file"], [267, 8, 1, "", "get_folder"], [267, 8, 1, "", "list_folders"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "remove_folder"], [267, 8, 1, "", "unlock"], [267, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[267, 8, 1, "", "add_flag"], [267, 8, 1, "", "get_date"], [267, 8, 1, "", "get_flags"], [267, 8, 1, "", "get_info"], [267, 8, 1, "", "get_subdir"], [267, 8, 1, "", "remove_flag"], [267, 8, 1, "", "set_date"], [267, 8, 1, "", "set_flags"], [267, 8, 1, "", "set_info"], [267, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[267, 8, 1, "", "get_file"], [267, 8, 1, "", "lock"], [267, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[267, 8, 1, "", "add_flag"], [267, 8, 1, "", "get_flags"], [267, 8, 1, "", "get_from"], [267, 8, 1, "", "remove_flag"], [267, 8, 1, "", "set_flags"], [267, 8, 1, "", "set_from"]], "mailcap": [[268, 11, 1, "", "findmatch"], [268, 11, 1, "", "getcaps"]], "marshal": [[270, 11, 1, "", "dump"], [270, 11, 1, "", "dumps"], [270, 11, 1, "", "load"], [270, 11, 1, "", "loads"], [270, 9, 1, "", "version"]], "math": [[271, 11, 1, "", "acos"], [271, 11, 1, "", "acosh"], [271, 11, 1, "", "asin"], [271, 11, 1, "", "asinh"], [271, 11, 1, "", "atan"], [271, 11, 1, "", "atan2"], [271, 11, 1, "", "atanh"], [271, 11, 1, "", "cbrt"], [271, 11, 1, "", "ceil"], [271, 11, 1, "", "comb"], [271, 11, 1, "", "copysign"], [271, 11, 1, "", "cos"], [271, 11, 1, "", "cosh"], [271, 11, 1, "", "degrees"], [271, 11, 1, "", "dist"], [271, 9, 1, "", "e"], [271, 11, 1, "", "erf"], [271, 11, 1, "", "erfc"], [271, 11, 1, "", "exp"], [271, 11, 1, "", "exp2"], [271, 11, 1, "", "expm1"], [271, 11, 1, "", "fabs"], [271, 11, 1, "", "factorial"], [271, 11, 1, "", "floor"], [271, 11, 1, "", "fmod"], [271, 11, 1, "", "frexp"], [271, 11, 1, "", "fsum"], [271, 11, 1, "", "gamma"], [271, 11, 1, "", "gcd"], [271, 11, 1, "", "hypot"], [271, 9, 1, "", "inf"], [271, 11, 1, "", "isclose"], [271, 11, 1, "", "isfinite"], [271, 11, 1, "", "isinf"], [271, 11, 1, "", "isnan"], [271, 11, 1, "", "isqrt"], [271, 11, 1, "", "lcm"], [271, 11, 1, "", "ldexp"], [271, 11, 1, "", "lgamma"], [271, 11, 1, "", "log"], [271, 11, 1, "", "log10"], [271, 11, 1, "", "log1p"], [271, 11, 1, "", "log2"], [271, 11, 1, "", "modf"], [271, 9, 1, "", "nan"], [271, 11, 1, "", "nextafter"], [271, 11, 1, "", "perm"], [271, 9, 1, "", "pi"], [271, 11, 1, "", "pow"], [271, 11, 1, "", "prod"], [271, 11, 1, "", "radians"], [271, 11, 1, "", "remainder"], [271, 11, 1, "", "sin"], [271, 11, 1, "", "sinh"], [271, 11, 1, "", "sqrt"], [271, 11, 1, "", "sumprod"], [271, 11, 1, "", "tan"], [271, 11, 1, "", "tanh"], [271, 9, 1, "", "tau"], [271, 11, 1, "", "trunc"], [271, 11, 1, "", "ulp"]], "memoryview": [[340, 8, 1, "", "__eq__"], [340, 7, 1, "", "c_contiguous"], [340, 8, 1, "", "cast"], [340, 7, 1, "", "contiguous"], [340, 7, 1, "", "f_contiguous"], [340, 7, 1, "", "format"], [340, 8, 1, "", "hex"], [340, 7, 1, "", "itemsize"], [340, 7, 1, "", "nbytes"], [340, 7, 1, "", "ndim"], [340, 7, 1, "", "obj"], [340, 7, 1, "", "readonly"], [340, 8, 1, "", "release"], [340, 7, 1, "", "shape"], [340, 7, 1, "", "strides"], [340, 7, 1, "", "suboffsets"], [340, 8, 1, "", "tobytes"], [340, 8, 1, "", "tolist"], [340, 8, 1, "", "toreadonly"]], "mimetypes": [[272, 12, 1, "", "MimeTypes"], [272, 11, 1, "", "add_type"], [272, 9, 1, "", "common_types"], [272, 9, 1, "", "encodings_map"], [272, 11, 1, "", "guess_all_extensions"], [272, 11, 1, "", "guess_extension"], [272, 11, 1, "", "guess_type"], [272, 11, 1, "", "init"], [272, 9, 1, "", "inited"], [272, 9, 1, "", "knownfiles"], [272, 11, 1, "", "read_mime_types"], [272, 9, 1, "", "suffix_map"], [272, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[272, 7, 1, "", "encodings_map"], [272, 8, 1, "", "guess_all_extensions"], [272, 8, 1, "", "guess_extension"], [272, 8, 1, "", "guess_type"], [272, 8, 1, "", "read"], [272, 8, 1, "", "read_windows_registry"], [272, 8, 1, "", "readfp"], [272, 7, 1, "", "suffix_map"], [272, 7, 1, "", "types_map"], [272, 7, 1, "", "types_map_inv"]], "mmap": [[274, 9, 1, "", "MADV_AUTOSYNC"], [274, 9, 1, "", "MADV_CORE"], [274, 9, 1, "", "MADV_DODUMP"], [274, 9, 1, "", "MADV_DOFORK"], [274, 9, 1, "", "MADV_DONTDUMP"], [274, 9, 1, "", "MADV_DONTFORK"], [274, 9, 1, "", "MADV_DONTNEED"], [274, 9, 1, "", "MADV_FREE"], [274, 9, 1, "", "MADV_FREE_REUSABLE"], [274, 9, 1, "", "MADV_FREE_REUSE"], [274, 9, 1, "", "MADV_HUGEPAGE"], [274, 9, 1, "", "MADV_HWPOISON"], [274, 9, 1, "", "MADV_MERGEABLE"], [274, 9, 1, "", "MADV_NOCORE"], [274, 9, 1, "", "MADV_NOHUGEPAGE"], [274, 9, 1, "", "MADV_NORMAL"], [274, 9, 1, "", "MADV_NOSYNC"], [274, 9, 1, "", "MADV_PROTECT"], [274, 9, 1, "", "MADV_RANDOM"], [274, 9, 1, "", "MADV_REMOVE"], [274, 9, 1, "", "MADV_SEQUENTIAL"], [274, 9, 1, "", "MADV_SOFT_OFFLINE"], [274, 9, 1, "", "MADV_UNMERGEABLE"], [274, 9, 1, "", "MADV_WILLNEED"], [274, 9, 1, "", "MAP_ALIGNED_SUPER"], [274, 9, 1, "", "MAP_ANON"], [274, 9, 1, "", "MAP_ANONYMOUS"], [274, 9, 1, "", "MAP_CONCEAL"], [274, 9, 1, "", "MAP_DENYWRITE"], [274, 9, 1, "", "MAP_EXECUTABLE"], [274, 9, 1, "", "MAP_POPULATE"], [274, 9, 1, "", "MAP_PRIVATE"], [274, 9, 1, "", "MAP_SHARED"], [274, 9, 1, "", "MAP_STACK"], [274, 12, 1, "", "mmap"]], "mmap.mmap": [[274, 8, 1, "", "close"], [274, 7, 1, "", "closed"], [274, 8, 1, "", "find"], [274, 8, 1, "", "flush"], [274, 8, 1, "", "madvise"], [274, 8, 1, "", "move"], [274, 8, 1, "", "read"], [274, 8, 1, "", "read_byte"], [274, 8, 1, "", "readline"], [274, 8, 1, "", "resize"], [274, 8, 1, "", "rfind"], [274, 8, 1, "", "seek"], [274, 8, 1, "", "size"], [274, 8, 1, "", "tell"], [274, 8, 1, "", "write"], [274, 8, 1, "", "write_byte"]], "modulefinder": [[275, 11, 1, "", "AddPackagePath"], [275, 12, 1, "", "ModuleFinder"], [275, 11, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[275, 7, 1, "", "modules"], [275, 8, 1, "", "report"], [275, 8, 1, "", "run_script"]], "msilib": [[277, 12, 1, "", "Binary"], [277, 12, 1, "", "CAB"], [277, 12, 1, "", "Control"], [277, 11, 1, "", "CreateRecord"], [277, 12, 1, "", "Dialog"], [277, 12, 1, "", "Directory"], [277, 11, 1, "", "FCICreate"], [277, 12, 1, "", "Feature"], [277, 11, 1, "", "OpenDatabase"], [277, 12, 1, "", "RadioButtonGroup"], [277, 11, 1, "", "UuidCreate"], [277, 11, 1, "", "add_data"], [277, 11, 1, "", "add_stream"], [277, 11, 1, "", "add_tables"], [277, 11, 1, "", "gen_uuid"], [277, 11, 1, "", "init_database"], [277, 9, 1, "", "schema"], [277, 9, 1, "", "sequence"], [277, 9, 1, "", "text"]], "msilib.CAB": [[277, 8, 1, "", "append"], [277, 8, 1, "", "commit"]], "msilib.Control": [[277, 8, 1, "", "condition"], [277, 8, 1, "", "event"], [277, 8, 1, "", "mapping"]], "msilib.Database": [[277, 8, 1, "", "Close"], [277, 8, 1, "", "Commit"], [277, 8, 1, "", "GetSummaryInformation"], [277, 8, 1, "", "OpenView"]], "msilib.Dialog": [[277, 8, 1, "", "bitmap"], [277, 8, 1, "", "checkbox"], [277, 8, 1, "", "control"], [277, 8, 1, "", "line"], [277, 8, 1, "", "pushbutton"], [277, 8, 1, "", "radiogroup"], [277, 8, 1, "", "text"]], "msilib.Directory": [[277, 8, 1, "", "add_file"], [277, 8, 1, "", "glob"], [277, 8, 1, "", "remove_pyc"], [277, 8, 1, "", "start_component"]], "msilib.Feature": [[277, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[277, 8, 1, "", "add"]], "msilib.Record": [[277, 8, 1, "", "ClearData"], [277, 8, 1, "", "GetFieldCount"], [277, 8, 1, "", "GetInteger"], [277, 8, 1, "", "GetString"], [277, 8, 1, "", "SetInteger"], [277, 8, 1, "", "SetStream"], [277, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[277, 8, 1, "", "GetProperty"], [277, 8, 1, "", "GetPropertyCount"], [277, 8, 1, "", "Persist"], [277, 8, 1, "", "SetProperty"]], "msilib.View": [[277, 8, 1, "", "Close"], [277, 8, 1, "", "Execute"], [277, 8, 1, "", "Fetch"], [277, 8, 1, "", "GetColumnInfo"], [277, 8, 1, "", "Modify"]], "msvcrt": [[278, 9, 1, "", "LK_LOCK"], [278, 9, 1, "", "LK_NBLCK"], [278, 9, 1, "", "LK_NBRLCK"], [278, 9, 1, "", "LK_RLCK"], [278, 9, 1, "", "LK_UNLCK"], [278, 11, 1, "", "get_osfhandle"], [278, 11, 1, "", "getch"], [278, 11, 1, "", "getche"], [278, 11, 1, "", "getwch"], [278, 11, 1, "", "getwche"], [278, 11, 1, "", "heapmin"], [278, 11, 1, "", "kbhit"], [278, 11, 1, "", "locking"], [278, 11, 1, "", "open_osfhandle"], [278, 11, 1, "", "putch"], [278, 11, 1, "", "putwch"], [278, 11, 1, "", "setmode"], [278, 11, 1, "", "ungetch"], [278, 11, 1, "", "ungetwch"]], "multiprocessing": [[279, 11, 1, "", "Array"], [279, 6, 1, "", "AuthenticationError"], [279, 12, 1, "", "Barrier"], [279, 12, 1, "", "BoundedSemaphore"], [279, 6, 1, "", "BufferTooShort"], [279, 12, 1, "", "Condition"], [279, 12, 1, "", "Event"], [279, 12, 1, "", "JoinableQueue"], [279, 12, 1, "", "Lock"], [279, 11, 1, "", "Manager"], [279, 11, 1, "", "Pipe"], [279, 12, 1, "", "Process"], [279, 6, 1, "", "ProcessError"], [279, 12, 1, "", "Queue"], [279, 12, 1, "", "RLock"], [279, 12, 1, "", "Semaphore"], [279, 12, 1, "", "SimpleQueue"], [279, 6, 1, "", "TimeoutError"], [279, 11, 1, "", "Value"], [279, 11, 1, "", "active_children"], [279, 10, 0, "-", "connection"], [279, 11, 1, "", "cpu_count"], [279, 11, 1, "", "current_process"], [279, 10, 0, "-", "dummy"], [279, 11, 1, "", "freeze_support"], [279, 11, 1, "", "get_all_start_methods"], [279, 11, 1, "", "get_context"], [279, 11, 1, "", "get_logger"], [279, 11, 1, "", "get_start_method"], [279, 11, 1, "", "log_to_stderr"], [279, 10, 0, "-", "managers"], [279, 11, 1, "", "parent_process"], [279, 10, 0, "-", "pool"], [279, 11, 1, "", "set_executable"], [279, 11, 1, "", "set_forkserver_preload"], [279, 11, 1, "", "set_start_method"], [280, 10, 0, "-", "shared_memory"], [279, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[279, 8, 1, "", "join"], [279, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[279, 8, 1, "", "acquire"], [279, 8, 1, "", "release"]], "multiprocessing.Process": [[279, 7, 1, "", "authkey"], [279, 8, 1, "", "close"], [279, 7, 1, "", "daemon"], [279, 7, 1, "", "exitcode"], [279, 8, 1, "", "is_alive"], [279, 8, 1, "", "join"], [279, 8, 1, "", "kill"], [279, 7, 1, "", "name"], [279, 7, 1, "", "pid"], [279, 8, 1, "", "run"], [279, 7, 1, "", "sentinel"], [279, 8, 1, "", "start"], [279, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[279, 8, 1, "", "cancel_join_thread"], [279, 8, 1, "", "close"], [279, 8, 1, "", "empty"], [279, 8, 1, "", "full"], [279, 8, 1, "", "get"], [279, 8, 1, "", "get_nowait"], [279, 8, 1, "", "join_thread"], [279, 8, 1, "", "put"], [279, 8, 1, "", "put_nowait"], [279, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[279, 8, 1, "", "acquire"], [279, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[279, 8, 1, "", "close"], [279, 8, 1, "", "empty"], [279, 8, 1, "", "get"], [279, 8, 1, "", "put"]], "multiprocessing.connection": [[279, 11, 1, "", "Client"], [279, 12, 1, "", "Connection"], [279, 12, 1, "", "Listener"], [279, 11, 1, "", "answer_challenge"], [279, 11, 1, "", "deliver_challenge"], [279, 11, 1, "", "wait"]], "multiprocessing.connection.Connection": [[279, 8, 1, "", "close"], [279, 8, 1, "", "fileno"], [279, 8, 1, "", "poll"], [279, 8, 1, "", "recv"], [279, 8, 1, "", "recv_bytes"], [279, 8, 1, "", "recv_bytes_into"], [279, 8, 1, "", "send"], [279, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[279, 8, 1, "", "accept"], [279, 7, 1, "", "address"], [279, 8, 1, "", "close"], [279, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[279, 12, 1, "", "BaseManager"], [279, 12, 1, "", "BaseProxy"], [279, 12, 1, "", "Namespace"], [280, 12, 1, "", "SharedMemoryManager"], [279, 12, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[279, 7, 1, "", "address"], [279, 8, 1, "", "connect"], [279, 8, 1, "", "get_server"], [279, 8, 1, "", "register"], [279, 8, 1, "", "shutdown"], [279, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[279, 8, 1, "", "__repr__"], [279, 8, 1, "", "__str__"], [279, 8, 1, "", "_callmethod"], [279, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[280, 8, 1, "", "ShareableList"], [280, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[279, 8, 1, "", "Array"], [279, 8, 1, "", "Barrier"], [279, 8, 1, "", "BoundedSemaphore"], [279, 8, 1, "", "Condition"], [279, 8, 1, "", "Event"], [279, 8, 1, "", "Lock"], [279, 8, 1, "", "Namespace"], [279, 8, 1, "", "Queue"], [279, 8, 1, "", "RLock"], [279, 8, 1, "", "Semaphore"], [279, 8, 1, "", "Value"], [279, 8, 1, "", "dict"], [279, 8, 1, "", "list"]], "multiprocessing.pool": [[279, 12, 1, "", "AsyncResult"], [279, 12, 1, "", "Pool"], [279, 12, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[279, 8, 1, "", "get"], [279, 8, 1, "", "ready"], [279, 8, 1, "", "successful"], [279, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[279, 8, 1, "", "apply"], [279, 8, 1, "", "apply_async"], [279, 8, 1, "", "close"], [279, 8, 1, "", "imap"], [279, 8, 1, "", "imap_unordered"], [279, 8, 1, "", "join"], [279, 8, 1, "", "map"], [279, 8, 1, "", "map_async"], [279, 8, 1, "", "starmap"], [279, 8, 1, "", "starmap_async"], [279, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[280, 12, 1, "", "ShareableList"], [280, 12, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[280, 8, 1, "", "count"], [280, 7, 1, "", "format"], [280, 8, 1, "", "index"], [280, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[280, 7, 1, "", "buf"], [280, 8, 1, "", "close"], [280, 7, 1, "", "name"], [280, 7, 1, "", "size"], [280, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[279, 11, 1, "", "Array"], [279, 11, 1, "", "RawArray"], [279, 11, 1, "", "RawValue"], [279, 11, 1, "", "Value"], [279, 11, 1, "", "copy"], [279, 11, 1, "", "synchronized"]], "netrc": [[282, 6, 1, "", "NetrcParseError"], [282, 12, 1, "", "netrc"]], "netrc.NetrcParseError": [[282, 7, 1, "", "filename"], [282, 7, 1, "", "lineno"], [282, 7, 1, "", "msg"]], "netrc.netrc": [[282, 8, 1, "", "__repr__"], [282, 8, 1, "", "authenticators"], [282, 7, 1, "", "hosts"], [282, 7, 1, "", "macros"]], "nis": [[283, 11, 1, "", "cat"], [283, 6, 1, "", "error"], [283, 11, 1, "", "get_default_domain"], [283, 11, 1, "", "maps"], [283, 11, 1, "", "match"]], "nntplib": [[284, 12, 1, "", "NNTP"], [284, 6, 1, "", "NNTPDataError"], [284, 6, 1, "", "NNTPError"], [284, 6, 1, "", "NNTPPermanentError"], [284, 6, 1, "", "NNTPProtocolError"], [284, 6, 1, "", "NNTPReplyError"], [284, 6, 1, "", "NNTPTemporaryError"], [284, 12, 1, "", "NNTP_SSL"], [284, 11, 1, "", "decode_header"]], "nntplib.NNTP": [[284, 8, 1, "", "article"], [284, 8, 1, "", "body"], [284, 8, 1, "", "date"], [284, 8, 1, "", "description"], [284, 8, 1, "", "descriptions"], [284, 8, 1, "", "getcapabilities"], [284, 8, 1, "", "getwelcome"], [284, 8, 1, "", "group"], [284, 8, 1, "", "head"], [284, 8, 1, "", "help"], [284, 8, 1, "", "ihave"], [284, 8, 1, "", "last"], [284, 8, 1, "", "list"], [284, 8, 1, "", "login"], [284, 8, 1, "", "newgroups"], [284, 8, 1, "", "newnews"], [284, 8, 1, "", "next"], [284, 7, 1, "", "nntp_implementation"], [284, 7, 1, "", "nntp_version"], [284, 8, 1, "", "over"], [284, 8, 1, "", "post"], [284, 8, 1, "", "quit"], [284, 8, 1, "", "set_debuglevel"], [284, 8, 1, "", "slave"], [284, 8, 1, "", "starttls"], [284, 8, 1, "", "stat"], [284, 8, 1, "", "xhdr"], [284, 8, 1, "", "xover"]], "nntplib.NNTPError": [[284, 7, 1, "", "response"]], "numbers": [[285, 12, 1, "", "Complex"], [285, 12, 1, "", "Integral"], [285, 12, 1, "", "Number"], [285, 12, 1, "", "Rational"], [285, 12, 1, "", "Real"]], "numbers.Complex": [[285, 8, 1, "", "conjugate"], [285, 7, 1, "", "imag"], [285, 7, 1, "", "real"]], "numbers.Rational": [[285, 7, 1, "", "denominator"], [285, 7, 1, "", "numerator"]], "object": [[423, 8, 1, "", "__abs__"], [423, 8, 1, "", "__add__"], [423, 8, 1, "", "__aenter__"], [423, 8, 1, "", "__aexit__"], [423, 8, 1, "", "__aiter__"], [423, 8, 1, "", "__and__"], [423, 8, 1, "", "__anext__"], [423, 8, 1, "", "__await__"], [423, 8, 1, "", "__bool__"], [423, 8, 1, "", "__buffer__"], [423, 8, 1, "", "__bytes__"], [423, 8, 1, "", "__call__"], [423, 8, 1, "", "__ceil__"], [423, 8, 1, "", "__class_getitem__"], [423, 8, 1, "", "__complex__"], [423, 8, 1, "", "__contains__"], [423, 8, 1, "", "__del__"], [423, 8, 1, "", "__delattr__"], [423, 8, 1, "", "__delete__"], [423, 8, 1, "", "__delitem__"], [340, 7, 1, "", "__dict__"], [423, 8, 1, "", "__dir__"], [423, 8, 1, "", "__divmod__"], [423, 8, 1, "", "__enter__"], [423, 8, 1, "", "__eq__"], [423, 8, 1, "", "__exit__"], [423, 8, 1, "", "__float__"], [423, 8, 1, "", "__floor__"], [423, 8, 1, "", "__floordiv__"], [423, 8, 1, "", "__format__"], [423, 8, 1, "", "__ge__"], [423, 8, 1, "", "__get__"], [423, 8, 1, "", "__getattr__"], [423, 8, 1, "", "__getattribute__"], [423, 8, 1, "", "__getitem__"], [295, 8, 1, "", "__getnewargs__"], [295, 8, 1, "", "__getnewargs_ex__"], [295, 8, 1, "", "__getstate__"], [423, 8, 1, "", "__gt__"], [423, 8, 1, "", "__hash__"], [423, 8, 1, "", "__iadd__"], [423, 8, 1, "", "__iand__"], [423, 8, 1, "", "__ifloordiv__"], [423, 8, 1, "", "__ilshift__"], [423, 8, 1, "", "__imatmul__"], [423, 8, 1, "", "__imod__"], [423, 8, 1, "", "__imul__"], [423, 8, 1, "", "__index__"], [423, 8, 1, "", "__init__"], [423, 8, 1, "", "__init_subclass__"], [423, 8, 1, "", "__int__"], [423, 8, 1, "", "__invert__"], [423, 8, 1, "", "__ior__"], [423, 8, 1, "", "__ipow__"], [423, 8, 1, "", "__irshift__"], [423, 8, 1, "", "__isub__"], [423, 8, 1, "", "__iter__"], [423, 8, 1, "", "__itruediv__"], [423, 8, 1, "", "__ixor__"], [423, 8, 1, "", "__le__"], [423, 8, 1, "", "__len__"], [423, 8, 1, "", "__length_hint__"], [423, 8, 1, "", "__lshift__"], [423, 8, 1, "", "__lt__"], [423, 9, 1, "", "__match_args__"], [423, 8, 1, "", "__matmul__"], [423, 8, 1, "", "__missing__"], [423, 8, 1, "", "__mod__"], [423, 8, 1, "", "__mro_entries__"], [423, 8, 1, "", "__mul__"], [423, 8, 1, "", "__ne__"], [423, 8, 1, "", "__neg__"], [423, 8, 1, "", "__new__"], [423, 8, 1, "", "__or__"], [423, 8, 1, "", "__pos__"], [423, 8, 1, "", "__pow__"], [423, 8, 1, "", "__radd__"], [423, 8, 1, "", "__rand__"], [423, 8, 1, "", "__rdivmod__"], [295, 8, 1, "", "__reduce__"], [295, 8, 1, "", "__reduce_ex__"], [423, 8, 1, "", "__release_buffer__"], [423, 8, 1, "", "__repr__"], [423, 8, 1, "", "__reversed__"], [423, 8, 1, "", "__rfloordiv__"], [423, 8, 1, "", "__rlshift__"], [423, 8, 1, "", "__rmatmul__"], [423, 8, 1, "", "__rmod__"], [423, 8, 1, "", "__rmul__"], [423, 8, 1, "", "__ror__"], [423, 8, 1, "", "__round__"], [423, 8, 1, "", "__rpow__"], [423, 8, 1, "", "__rrshift__"], [423, 8, 1, "", "__rshift__"], [423, 8, 1, "", "__rsub__"], [423, 8, 1, "", "__rtruediv__"], [423, 8, 1, "", "__rxor__"], [423, 8, 1, "", "__set__"], [423, 8, 1, "", "__set_name__"], [423, 8, 1, "", "__setattr__"], [423, 8, 1, "", "__setitem__"], [295, 8, 1, "", "__setstate__"], [423, 9, 1, "", "__slots__"], [423, 8, 1, "", "__str__"], [423, 8, 1, "", "__sub__"], [423, 8, 1, "", "__truediv__"], [423, 8, 1, "", "__trunc__"], [423, 8, 1, "", "__xor__"]], "operator": [[287, 11, 1, "", "__abs__"], [287, 11, 1, "", "__add__"], [287, 11, 1, "", "__and__"], [287, 11, 1, "", "__call__"], [287, 11, 1, "", "__concat__"], [287, 11, 1, "", "__contains__"], [287, 11, 1, "", "__delitem__"], [287, 11, 1, "", "__eq__"], [287, 11, 1, "", "__floordiv__"], [287, 11, 1, "", "__ge__"], [287, 11, 1, "", "__getitem__"], [287, 11, 1, "", "__gt__"], [287, 11, 1, "", "__iadd__"], [287, 11, 1, "", "__iand__"], [287, 11, 1, "", "__iconcat__"], [287, 11, 1, "", "__ifloordiv__"], [287, 11, 1, "", "__ilshift__"], [287, 11, 1, "", "__imatmul__"], [287, 11, 1, "", "__imod__"], [287, 11, 1, "", "__imul__"], [287, 11, 1, "", "__index__"], [287, 11, 1, "", "__inv__"], [287, 11, 1, "", "__invert__"], [287, 11, 1, "", "__ior__"], [287, 11, 1, "", "__ipow__"], [287, 11, 1, "", "__irshift__"], [287, 11, 1, "", "__isub__"], [287, 11, 1, "", "__itruediv__"], [287, 11, 1, "", "__ixor__"], [287, 11, 1, "", "__le__"], [287, 11, 1, "", "__lshift__"], [287, 11, 1, "", "__lt__"], [287, 11, 1, "", "__matmul__"], [287, 11, 1, "", "__mod__"], [287, 11, 1, "", "__mul__"], [287, 11, 1, "", "__ne__"], [287, 11, 1, "", "__neg__"], [287, 11, 1, "", "__not__"], [287, 11, 1, "", "__or__"], [287, 11, 1, "", "__pos__"], [287, 11, 1, "", "__pow__"], [287, 11, 1, "", "__rshift__"], [287, 11, 1, "", "__setitem__"], [287, 11, 1, "", "__sub__"], [287, 11, 1, "", "__truediv__"], [287, 11, 1, "", "__xor__"], [287, 11, 1, "", "abs"], [287, 11, 1, "", "add"], [287, 11, 1, "", "and_"], [287, 11, 1, "", "attrgetter"], [287, 11, 1, "", "call"], [287, 11, 1, "", "concat"], [287, 11, 1, "", "contains"], [287, 11, 1, "", "countOf"], [287, 11, 1, "", "delitem"], [287, 11, 1, "", "eq"], [287, 11, 1, "", "floordiv"], [287, 11, 1, "", "ge"], [287, 11, 1, "", "getitem"], [287, 11, 1, "", "gt"], [287, 11, 1, "", "iadd"], [287, 11, 1, "", "iand"], [287, 11, 1, "", "iconcat"], [287, 11, 1, "", "ifloordiv"], [287, 11, 1, "", "ilshift"], [287, 11, 1, "", "imatmul"], [287, 11, 1, "", "imod"], [287, 11, 1, "", "imul"], [287, 11, 1, "", "index"], [287, 11, 1, "", "indexOf"], [287, 11, 1, "", "inv"], [287, 11, 1, "", "invert"], [287, 11, 1, "", "ior"], [287, 11, 1, "", "ipow"], [287, 11, 1, "", "irshift"], [287, 11, 1, "", "is_"], [287, 11, 1, "", "is_not"], [287, 11, 1, "", "isub"], [287, 11, 1, "", "itemgetter"], [287, 11, 1, "", "itruediv"], [287, 11, 1, "", "ixor"], [287, 11, 1, "", "le"], [287, 11, 1, "", "length_hint"], [287, 11, 1, "", "lshift"], [287, 11, 1, "", "lt"], [287, 11, 1, "", "matmul"], [287, 11, 1, "", "methodcaller"], [287, 11, 1, "", "mod"], [287, 11, 1, "", "mul"], [287, 11, 1, "", "ne"], [287, 11, 1, "", "neg"], [287, 11, 1, "", "not_"], [287, 11, 1, "", "or_"], [287, 11, 1, "", "pos"], [287, 11, 1, "", "pow"], [287, 11, 1, "", "rshift"], [287, 11, 1, "", "setitem"], [287, 11, 1, "", "sub"], [287, 11, 1, "", "truediv"], [287, 11, 1, "", "truth"], [287, 11, 1, "", "xor"]], "optparse": [[288, 6, 1, "", "AmbiguousOptionError"], [288, 6, 1, "", "BadOptionError"], [288, 12, 1, "", "Option"], [288, 6, 1, "", "OptionConflictError"], [288, 6, 1, "", "OptionError"], [288, 12, 1, "", "OptionGroup"], [288, 12, 1, "", "OptionParser"], [288, 6, 1, "", "OptionValueError"], [288, 12, 1, "", "Values"]], "optparse.Option": [[288, 7, 1, "", "ACTIONS"], [288, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [288, 7, 1, "", "STORE_ACTIONS"], [288, 7, 1, "", "TYPED_ACTIONS"], [288, 7, 1, "", "TYPES"], [288, 7, 1, "", "TYPE_CHECKER"], [288, 7, 1, "", "action"], [288, 7, 1, "", "callback"], [288, 7, 1, "", "callback_args"], [288, 7, 1, "", "callback_kwargs"], [288, 7, 1, "", "choices"], [288, 7, 1, "", "const"], [288, 7, 1, "", "default"], [288, 7, 1, "", "dest"], [288, 7, 1, "", "help"], [288, 7, 1, "", "metavar"], [288, 7, 1, "", "nargs"], [288, 7, 1, "", "type"]], "optparse.OptionParser": [[288, 8, 1, "", "add_option"], [288, 8, 1, "", "disable_interspersed_args"], [288, 8, 1, "", "enable_interspersed_args"], [288, 8, 1, "", "get_option"], [288, 8, 1, "", "get_option_group"], [288, 8, 1, "", "get_usage"], [288, 8, 1, "", "get_version"], [288, 8, 1, "", "has_option"], [288, 8, 1, "", "parse_args"], [288, 8, 1, "", "print_usage"], [288, 8, 1, "", "print_version"], [288, 8, 1, "", "remove_option"], [288, 8, 1, "", "set_defaults"], [288, 8, 1, "", "set_usage"]], "os": [[289, 9, 1, "", "CLD_CONTINUED"], [289, 9, 1, "", "CLD_DUMPED"], [289, 9, 1, "", "CLD_EXITED"], [289, 9, 1, "", "CLD_KILLED"], [289, 9, 1, "", "CLD_STOPPED"], [289, 9, 1, "", "CLD_TRAPPED"], [289, 9, 1, "", "CLONE_FILES"], [289, 9, 1, "", "CLONE_FS"], [289, 9, 1, "", "CLONE_NEWCGROUP"], [289, 9, 1, "", "CLONE_NEWIPC"], [289, 9, 1, "", "CLONE_NEWNET"], [289, 9, 1, "", "CLONE_NEWNS"], [289, 9, 1, "", "CLONE_NEWPID"], [289, 9, 1, "", "CLONE_NEWTIME"], [289, 9, 1, "", "CLONE_NEWUSER"], [289, 9, 1, "", "CLONE_NEWUTS"], [289, 9, 1, "", "CLONE_SIGHAND"], [289, 9, 1, "", "CLONE_SYSVSEM"], [289, 9, 1, "", "CLONE_THREAD"], [289, 9, 1, "", "CLONE_VM"], [289, 12, 1, "", "DirEntry"], [289, 9, 1, "", "EFD_CLOEXEC"], [289, 9, 1, "", "EFD_NONBLOCK"], [289, 9, 1, "", "EFD_SEMAPHORE"], [289, 9, 1, "", "EX_CANTCREAT"], [289, 9, 1, "", "EX_CONFIG"], [289, 9, 1, "", "EX_DATAERR"], [289, 9, 1, "", "EX_IOERR"], [289, 9, 1, "", "EX_NOHOST"], [289, 9, 1, "", "EX_NOINPUT"], [289, 9, 1, "", "EX_NOPERM"], [289, 9, 1, "", "EX_NOTFOUND"], [289, 9, 1, "", "EX_NOUSER"], [289, 9, 1, "", "EX_OK"], [289, 9, 1, "", "EX_OSERR"], [289, 9, 1, "", "EX_OSFILE"], [289, 9, 1, "", "EX_PROTOCOL"], [289, 9, 1, "", "EX_SOFTWARE"], [289, 9, 1, "", "EX_TEMPFAIL"], [289, 9, 1, "", "EX_UNAVAILABLE"], [289, 9, 1, "", "EX_USAGE"], [289, 9, 1, "", "F_LOCK"], [289, 9, 1, "", "F_OK"], [289, 9, 1, "", "F_TEST"], [289, 9, 1, "", "F_TLOCK"], [289, 9, 1, "", "F_ULOCK"], [289, 9, 1, "", "GRND_NONBLOCK"], [289, 9, 1, "", "GRND_RANDOM"], [289, 9, 1, "", "MFD_ALLOW_SEALING"], [289, 9, 1, "", "MFD_CLOEXEC"], [289, 9, 1, "", "MFD_HUGETLB"], [289, 9, 1, "", "MFD_HUGE_16GB"], [289, 9, 1, "", "MFD_HUGE_16MB"], [289, 9, 1, "", "MFD_HUGE_1GB"], [289, 9, 1, "", "MFD_HUGE_1MB"], [289, 9, 1, "", "MFD_HUGE_256MB"], [289, 9, 1, "", "MFD_HUGE_2GB"], [289, 9, 1, "", "MFD_HUGE_2MB"], [289, 9, 1, "", "MFD_HUGE_32MB"], [289, 9, 1, "", "MFD_HUGE_512KB"], [289, 9, 1, "", "MFD_HUGE_512MB"], [289, 9, 1, "", "MFD_HUGE_64KB"], [289, 9, 1, "", "MFD_HUGE_8MB"], [289, 9, 1, "", "MFD_HUGE_MASK"], [289, 9, 1, "", "MFD_HUGE_SHIFT"], [289, 9, 1, "", "O_APPEND"], [289, 9, 1, "", "O_ASYNC"], [289, 9, 1, "", "O_BINARY"], [289, 9, 1, "", "O_CLOEXEC"], [289, 9, 1, "", "O_CREAT"], [289, 9, 1, "", "O_DIRECT"], [289, 9, 1, "", "O_DIRECTORY"], [289, 9, 1, "", "O_DSYNC"], [289, 9, 1, "", "O_EVTONLY"], [289, 9, 1, "", "O_EXCL"], [289, 9, 1, "", "O_EXLOCK"], [289, 9, 1, "", "O_FSYNC"], [289, 9, 1, "", "O_NDELAY"], [289, 9, 1, "", "O_NOATIME"], [289, 9, 1, "", "O_NOCTTY"], [289, 9, 1, "", "O_NOFOLLOW"], [289, 9, 1, "", "O_NOFOLLOW_ANY"], [289, 9, 1, "", "O_NOINHERIT"], [289, 9, 1, "", "O_NONBLOCK"], [289, 9, 1, "", "O_PATH"], [289, 9, 1, "", "O_RANDOM"], [289, 9, 1, "", "O_RDONLY"], [289, 9, 1, "", "O_RDWR"], [289, 9, 1, "", "O_RSYNC"], [289, 9, 1, "", "O_SEQUENTIAL"], [289, 9, 1, "", "O_SHLOCK"], [289, 9, 1, "", "O_SHORT_LIVED"], [289, 9, 1, "", "O_SYMLINK"], [289, 9, 1, "", "O_SYNC"], [289, 9, 1, "", "O_TEMPORARY"], [289, 9, 1, "", "O_TEXT"], [289, 9, 1, "", "O_TMPFILE"], [289, 9, 1, "", "O_TRUNC"], [289, 9, 1, "", "O_WRONLY"], [289, 9, 1, "", "PIDFD_NONBLOCK"], [289, 9, 1, "", "POSIX_FADV_DONTNEED"], [289, 9, 1, "", "POSIX_FADV_NOREUSE"], [289, 9, 1, "", "POSIX_FADV_NORMAL"], [289, 9, 1, "", "POSIX_FADV_RANDOM"], [289, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [289, 9, 1, "", "POSIX_FADV_WILLNEED"], [289, 9, 1, "", "POSIX_SPAWN_CLOSE"], [289, 9, 1, "", "POSIX_SPAWN_DUP2"], [289, 9, 1, "", "POSIX_SPAWN_OPEN"], [289, 9, 1, "", "PRIO_DARWIN_BG"], [289, 9, 1, "", "PRIO_DARWIN_NONUI"], [289, 9, 1, "", "PRIO_DARWIN_PROCESS"], [289, 9, 1, "", "PRIO_DARWIN_THREAD"], [289, 9, 1, "", "PRIO_PGRP"], [289, 9, 1, "", "PRIO_PROCESS"], [289, 9, 1, "", "PRIO_USER"], [289, 9, 1, "", "P_ALL"], [289, 9, 1, "", "P_DETACH"], [289, 9, 1, "", "P_NOWAIT"], [289, 9, 1, "", "P_NOWAITO"], [289, 9, 1, "", "P_OVERLAY"], [289, 9, 1, "", "P_PGID"], [289, 9, 1, "", "P_PID"], [289, 9, 1, "", "P_PIDFD"], [289, 9, 1, "", "P_WAIT"], [289, 12, 1, "", "PathLike"], [289, 9, 1, "", "RTLD_DEEPBIND"], [289, 9, 1, "", "RTLD_GLOBAL"], [289, 9, 1, "", "RTLD_LAZY"], [289, 9, 1, "", "RTLD_LOCAL"], [289, 9, 1, "", "RTLD_NODELETE"], [289, 9, 1, "", "RTLD_NOLOAD"], [289, 9, 1, "", "RTLD_NOW"], [289, 9, 1, "", "RWF_APPEND"], [289, 9, 1, "", "RWF_DSYNC"], [289, 9, 1, "", "RWF_HIPRI"], [289, 9, 1, "", "RWF_NOWAIT"], [289, 9, 1, "", "RWF_SYNC"], [289, 9, 1, "", "R_OK"], [289, 9, 1, "", "SCHED_BATCH"], [289, 9, 1, "", "SCHED_FIFO"], [289, 9, 1, "", "SCHED_IDLE"], [289, 9, 1, "", "SCHED_OTHER"], [289, 9, 1, "", "SCHED_RESET_ON_FORK"], [289, 9, 1, "", "SCHED_RR"], [289, 9, 1, "", "SCHED_SPORADIC"], [289, 9, 1, "", "SEEK_CUR"], [289, 9, 1, "", "SEEK_DATA"], [289, 9, 1, "", "SEEK_END"], [289, 9, 1, "", "SEEK_HOLE"], [289, 9, 1, "", "SEEK_SET"], [289, 9, 1, "", "SF_MNOWAIT"], [289, 9, 1, "", "SF_NOCACHE"], [289, 9, 1, "", "SF_NODISKIO"], [289, 9, 1, "", "SF_SYNC"], [289, 9, 1, "", "SPLICE_F_MORE"], [289, 9, 1, "", "SPLICE_F_MOVE"], [289, 9, 1, "", "SPLICE_F_NONBLOCK"], [289, 9, 1, "", "WCONTINUED"], [289, 11, 1, "", "WCOREDUMP"], [289, 9, 1, "", "WEXITED"], [289, 11, 1, "", "WEXITSTATUS"], [289, 11, 1, "", "WIFCONTINUED"], [289, 11, 1, "", "WIFEXITED"], [289, 11, 1, "", "WIFSIGNALED"], [289, 11, 1, "", "WIFSTOPPED"], [289, 9, 1, "", "WNOHANG"], [289, 9, 1, "", "WNOWAIT"], [289, 9, 1, "", "WSTOPPED"], [289, 11, 1, "", "WSTOPSIG"], [289, 11, 1, "", "WTERMSIG"], [289, 9, 1, "", "WUNTRACED"], [289, 9, 1, "", "W_OK"], [289, 9, 1, "", "XATTR_CREATE"], [289, 9, 1, "", "XATTR_REPLACE"], [289, 9, 1, "", "XATTR_SIZE_MAX"], [289, 9, 1, "", "X_OK"], [289, 11, 1, "", "_exit"], [289, 11, 1, "", "abort"], [289, 11, 1, "", "access"], [289, 11, 1, "", "add_dll_directory"], [289, 9, 1, "", "altsep"], [289, 11, 1, "", "chdir"], [289, 11, 1, "", "chflags"], [289, 11, 1, "", "chmod"], [289, 11, 1, "", "chown"], [289, 11, 1, "", "chroot"], [289, 11, 1, "", "close"], [289, 11, 1, "", "closerange"], [289, 11, 1, "", "confstr"], [289, 9, 1, "", "confstr_names"], [289, 11, 1, "", "copy_file_range"], [289, 11, 1, "", "cpu_count"], [289, 11, 1, "", "ctermid"], [289, 9, 1, "", "curdir"], [289, 9, 1, "", "defpath"], [289, 11, 1, "", "device_encoding"], [289, 9, 1, "", "devnull"], [289, 11, 1, "", "dup"], [289, 11, 1, "", "dup2"], [289, 9, 1, "", "environ"], [289, 9, 1, "", "environb"], [289, 6, 1, "", "error"], [289, 11, 1, "", "eventfd"], [289, 11, 1, "", "eventfd_read"], [289, 11, 1, "", "eventfd_write"], [289, 11, 1, "", "execl"], [289, 11, 1, "", "execle"], [289, 11, 1, "", "execlp"], [289, 11, 1, "", "execlpe"], [289, 11, 1, "", "execv"], [289, 11, 1, "", "execve"], [289, 11, 1, "", "execvp"], [289, 11, 1, "", "execvpe"], [289, 9, 1, "", "extsep"], [289, 11, 1, "", "fchdir"], [289, 11, 1, "", "fchmod"], [289, 11, 1, "", "fchown"], [289, 11, 1, "", "fdatasync"], [289, 11, 1, "", "fdopen"], [289, 11, 1, "", "fork"], [289, 11, 1, "", "forkpty"], [289, 11, 1, "", "fpathconf"], [289, 11, 1, "", "fsdecode"], [289, 11, 1, "", "fsencode"], [289, 11, 1, "", "fspath"], [289, 11, 1, "", "fstat"], [289, 11, 1, "", "fstatvfs"], [289, 11, 1, "", "fsync"], [289, 11, 1, "", "ftruncate"], [289, 11, 1, "", "fwalk"], [289, 11, 1, "", "get_blocking"], [289, 11, 1, "", "get_exec_path"], [289, 11, 1, "", "get_handle_inheritable"], [289, 11, 1, "", "get_inheritable"], [289, 11, 1, "", "get_terminal_size"], [289, 11, 1, "", "getcwd"], [289, 11, 1, "", "getcwdb"], [289, 11, 1, "", "getegid"], [289, 11, 1, "", "getenv"], [289, 11, 1, "", "getenvb"], [289, 11, 1, "", "geteuid"], [289, 11, 1, "", "getgid"], [289, 11, 1, "", "getgrouplist"], [289, 11, 1, "", "getgroups"], [289, 11, 1, "", "getloadavg"], [289, 11, 1, "", "getlogin"], [289, 11, 1, "", "getpgid"], [289, 11, 1, "", "getpgrp"], [289, 11, 1, "", "getpid"], [289, 11, 1, "", "getppid"], [289, 11, 1, "", "getpriority"], [289, 11, 1, "", "getrandom"], [289, 11, 1, "", "getresgid"], [289, 11, 1, "", "getresuid"], [289, 11, 1, "", "getsid"], [289, 11, 1, "", "getuid"], [289, 11, 1, "", "getxattr"], [289, 11, 1, "", "initgroups"], [289, 11, 1, "", "isatty"], [289, 11, 1, "", "kill"], [289, 11, 1, "", "killpg"], [289, 11, 1, "", "lchflags"], [289, 11, 1, "", "lchmod"], [289, 11, 1, "", "lchown"], [289, 9, 1, "", "linesep"], [289, 11, 1, "", "link"], [289, 11, 1, "", "listdir"], [289, 11, 1, "", "listdrives"], [289, 11, 1, "", "listmounts"], [289, 11, 1, "", "listvolumes"], [289, 11, 1, "", "listxattr"], [289, 11, 1, "", "lockf"], [289, 11, 1, "", "login_tty"], [289, 11, 1, "", "lseek"], [289, 11, 1, "", "lstat"], [289, 11, 1, "", "major"], [289, 11, 1, "", "makedev"], [289, 11, 1, "", "makedirs"], [289, 11, 1, "", "memfd_create"], [289, 11, 1, "", "minor"], [289, 11, 1, "", "mkdir"], [289, 11, 1, "", "mkfifo"], [289, 11, 1, "", "mknod"], [289, 9, 1, "", "name"], [289, 11, 1, "", "nice"], [289, 11, 1, "", "open"], [289, 11, 1, "", "openpty"], [289, 9, 1, "", "pardir"], [290, 10, 0, "-", "path"], [289, 11, 1, "", "pathconf"], [289, 9, 1, "", "pathconf_names"], [289, 9, 1, "", "pathsep"], [289, 11, 1, "", "pidfd_open"], [289, 11, 1, "", "pipe"], [289, 11, 1, "", "pipe2"], [289, 11, 1, "", "plock"], [289, 11, 1, "", "popen"], [289, 11, 1, "", "posix_fadvise"], [289, 11, 1, "", "posix_fallocate"], [289, 11, 1, "", "posix_spawn"], [289, 11, 1, "", "posix_spawnp"], [289, 11, 1, "", "pread"], [289, 11, 1, "", "preadv"], [289, 11, 1, "", "putenv"], [289, 11, 1, "", "pwrite"], [289, 11, 1, "", "pwritev"], [289, 11, 1, "", "read"], [289, 11, 1, "", "readlink"], [289, 11, 1, "", "readv"], [289, 11, 1, "", "register_at_fork"], [289, 11, 1, "", "remove"], [289, 11, 1, "", "removedirs"], [289, 11, 1, "", "removexattr"], [289, 11, 1, "", "rename"], [289, 11, 1, "", "renames"], [289, 11, 1, "", "replace"], [289, 11, 1, "", "rmdir"], [289, 11, 1, "", "scandir"], [289, 11, 1, "", "sched_get_priority_max"], [289, 11, 1, "", "sched_get_priority_min"], [289, 11, 1, "", "sched_getaffinity"], [289, 11, 1, "", "sched_getparam"], [289, 11, 1, "", "sched_getscheduler"], [289, 12, 1, "", "sched_param"], [289, 11, 1, "", "sched_rr_get_interval"], [289, 11, 1, "", "sched_setaffinity"], [289, 11, 1, "", "sched_setparam"], [289, 11, 1, "", "sched_setscheduler"], [289, 11, 1, "", "sched_yield"], [289, 11, 1, "", "sendfile"], [289, 9, 1, "", "sep"], [289, 11, 1, "", "set_blocking"], [289, 11, 1, "", "set_handle_inheritable"], [289, 11, 1, "", "set_inheritable"], [289, 11, 1, "", "setegid"], [289, 11, 1, "", "seteuid"], [289, 11, 1, "", "setgid"], [289, 11, 1, "", "setgroups"], [289, 11, 1, "", "setns"], [289, 11, 1, "", "setpgid"], [289, 11, 1, "", "setpgrp"], [289, 11, 1, "", "setpriority"], [289, 11, 1, "", "setregid"], [289, 11, 1, "", "setresgid"], [289, 11, 1, "", "setresuid"], [289, 11, 1, "", "setreuid"], [289, 11, 1, "", "setsid"], [289, 11, 1, "", "setuid"], [289, 11, 1, "", "setxattr"], [289, 11, 1, "", "spawnl"], [289, 11, 1, "", "spawnle"], [289, 11, 1, "", "spawnlp"], [289, 11, 1, "", "spawnlpe"], [289, 11, 1, "", "spawnv"], [289, 11, 1, "", "spawnve"], [289, 11, 1, "", "spawnvp"], [289, 11, 1, "", "spawnvpe"], [289, 11, 1, "", "splice"], [289, 11, 1, "", "startfile"], [289, 11, 1, "", "stat"], [289, 12, 1, "", "stat_result"], [289, 11, 1, "", "statvfs"], [289, 11, 1, "", "strerror"], [289, 9, 1, "", "supports_bytes_environ"], [289, 9, 1, "", "supports_dir_fd"], [289, 9, 1, "", "supports_effective_ids"], [289, 9, 1, "", "supports_fd"], [289, 9, 1, "", "supports_follow_symlinks"], [289, 11, 1, "", "symlink"], [289, 11, 1, "", "sync"], [289, 11, 1, "", "sysconf"], [289, 9, 1, "", "sysconf_names"], [289, 11, 1, "", "system"], [289, 11, 1, "", "tcgetpgrp"], [289, 11, 1, "", "tcsetpgrp"], [289, 12, 1, "", "terminal_size"], [289, 11, 1, "", "times"], [289, 11, 1, "", "truncate"], [289, 11, 1, "", "ttyname"], [289, 11, 1, "", "umask"], [289, 11, 1, "", "uname"], [289, 11, 1, "", "unlink"], [289, 11, 1, "", "unsetenv"], [289, 11, 1, "", "unshare"], [289, 11, 1, "", "urandom"], [289, 11, 1, "", "utime"], [289, 11, 1, "", "wait"], [289, 11, 1, "", "wait3"], [289, 11, 1, "", "wait4"], [289, 11, 1, "", "waitid"], [289, 11, 1, "", "waitpid"], [289, 11, 1, "", "waitstatus_to_exitcode"], [289, 11, 1, "", "walk"], [289, 11, 1, "", "write"], [289, 11, 1, "", "writev"]], "os.DirEntry": [[289, 8, 1, "", "inode"], [289, 8, 1, "", "is_dir"], [289, 8, 1, "", "is_file"], [289, 8, 1, "", "is_junction"], [289, 8, 1, "", "is_symlink"], [289, 7, 1, "", "name"], [289, 7, 1, "", "path"], [289, 8, 1, "", "stat"]], "os.PathLike": [[289, 8, 1, "", "__fspath__"]], "os.path": [[290, 11, 1, "", "abspath"], [290, 11, 1, "", "basename"], [290, 11, 1, "", "commonpath"], [290, 11, 1, "", "commonprefix"], [290, 11, 1, "", "dirname"], [290, 11, 1, "", "exists"], [290, 11, 1, "", "expanduser"], [290, 11, 1, "", "expandvars"], [290, 11, 1, "", "getatime"], [290, 11, 1, "", "getctime"], [290, 11, 1, "", "getmtime"], [290, 11, 1, "", "getsize"], [290, 11, 1, "", "isabs"], [290, 11, 1, "", "isdevdrive"], [290, 11, 1, "", "isdir"], [290, 11, 1, "", "isfile"], [290, 11, 1, "", "isjunction"], [290, 11, 1, "", "islink"], [290, 11, 1, "", "ismount"], [290, 11, 1, "", "join"], [290, 11, 1, "", "lexists"], [290, 11, 1, "", "normcase"], [290, 11, 1, "", "normpath"], [290, 11, 1, "", "realpath"], [290, 11, 1, "", "relpath"], [290, 11, 1, "", "samefile"], [290, 11, 1, "", "sameopenfile"], [290, 11, 1, "", "samestat"], [290, 11, 1, "", "split"], [290, 11, 1, "", "splitdrive"], [290, 11, 1, "", "splitext"], [290, 11, 1, "", "splitroot"], [290, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[289, 8, 1, "", "close"]], "os.sched_param": [[289, 7, 1, "", "sched_priority"]], "os.stat_result": [[289, 7, 1, "", "st_atime"], [289, 7, 1, "", "st_atime_ns"], [289, 7, 1, "", "st_birthtime"], [289, 7, 1, "", "st_birthtime_ns"], [289, 7, 1, "", "st_blksize"], [289, 7, 1, "", "st_blocks"], [289, 7, 1, "", "st_creator"], [289, 7, 1, "", "st_ctime"], [289, 7, 1, "", "st_ctime_ns"], [289, 7, 1, "", "st_dev"], [289, 7, 1, "", "st_file_attributes"], [289, 7, 1, "", "st_flags"], [289, 7, 1, "", "st_fstype"], [289, 7, 1, "", "st_gen"], [289, 7, 1, "", "st_gid"], [289, 7, 1, "", "st_ino"], [289, 7, 1, "", "st_mode"], [289, 7, 1, "", "st_mtime"], [289, 7, 1, "", "st_mtime_ns"], [289, 7, 1, "", "st_nlink"], [289, 7, 1, "", "st_rdev"], [289, 7, 1, "", "st_reparse_tag"], [289, 7, 1, "", "st_rsize"], [289, 7, 1, "", "st_size"], [289, 7, 1, "", "st_type"], [289, 7, 1, "", "st_uid"]], "os.terminal_size": [[289, 7, 1, "", "columns"], [289, 7, 1, "", "lines"]], "ossaudiodev": [[291, 6, 1, "", "OSSAudioError"], [291, 11, 1, "", "open"], [291, 11, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[291, 8, 1, "", "bufsize"], [291, 8, 1, "", "channels"], [291, 8, 1, "", "close"], [291, 7, 1, "", "closed"], [291, 8, 1, "", "fileno"], [291, 8, 1, "", "getfmts"], [291, 7, 1, "", "mode"], [291, 7, 1, "", "name"], [291, 8, 1, "", "nonblock"], [291, 8, 1, "", "obufcount"], [291, 8, 1, "", "obuffree"], [291, 8, 1, "", "post"], [291, 8, 1, "", "read"], [291, 8, 1, "", "reset"], [291, 8, 1, "", "setfmt"], [291, 8, 1, "", "setparameters"], [291, 8, 1, "", "speed"], [291, 8, 1, "", "sync"], [291, 8, 1, "", "write"], [291, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[291, 8, 1, "", "close"], [291, 8, 1, "", "controls"], [291, 8, 1, "", "fileno"], [291, 8, 1, "", "get"], [291, 8, 1, "", "get_recsrc"], [291, 8, 1, "", "reccontrols"], [291, 8, 1, "", "set"], [291, 8, 1, "", "set_recsrc"], [291, 8, 1, "", "stereocontrols"]], "pathlib": [[292, 12, 1, "", "Path"], [292, 12, 1, "", "PosixPath"], [292, 12, 1, "", "PurePath"], [292, 12, 1, "", "PurePosixPath"], [292, 12, 1, "", "PureWindowsPath"], [292, 12, 1, "", "WindowsPath"]], "pathlib.Path": [[292, 8, 1, "", "absolute"], [292, 8, 1, "", "chmod"], [292, 8, 1, "", "cwd"], [292, 8, 1, "", "exists"], [292, 8, 1, "", "expanduser"], [292, 8, 1, "", "glob"], [292, 8, 1, "", "group"], [292, 8, 1, "", "hardlink_to"], [292, 8, 1, "", "home"], [292, 8, 1, "", "is_block_device"], [292, 8, 1, "", "is_char_device"], [292, 8, 1, "", "is_dir"], [292, 8, 1, "", "is_fifo"], [292, 8, 1, "", "is_file"], [292, 8, 1, "", "is_junction"], [292, 8, 1, "", "is_mount"], [292, 8, 1, "", "is_socket"], [292, 8, 1, "", "is_symlink"], [292, 8, 1, "", "iterdir"], [292, 8, 1, "", "lchmod"], [292, 8, 1, "", "lstat"], [292, 8, 1, "", "mkdir"], [292, 8, 1, "", "open"], [292, 8, 1, "", "owner"], [292, 8, 1, "", "read_bytes"], [292, 8, 1, "", "read_text"], [292, 8, 1, "", "readlink"], [292, 8, 1, "", "rename"], [292, 8, 1, "", "replace"], [292, 8, 1, "", "resolve"], [292, 8, 1, "", "rglob"], [292, 8, 1, "", "rmdir"], [292, 8, 1, "", "samefile"], [292, 8, 1, "", "stat"], [292, 8, 1, "", "symlink_to"], [292, 8, 1, "", "touch"], [292, 8, 1, "", "unlink"], [292, 8, 1, "", "walk"], [292, 8, 1, "", "write_bytes"], [292, 8, 1, "", "write_text"]], "pathlib.PurePath": [[292, 7, 1, "", "anchor"], [292, 8, 1, "", "as_posix"], [292, 8, 1, "", "as_uri"], [292, 7, 1, "", "drive"], [292, 8, 1, "", "is_absolute"], [292, 8, 1, "", "is_relative_to"], [292, 8, 1, "", "is_reserved"], [292, 8, 1, "", "joinpath"], [292, 8, 1, "", "match"], [292, 7, 1, "", "name"], [292, 7, 1, "", "parent"], [292, 7, 1, "", "parents"], [292, 7, 1, "", "parts"], [292, 8, 1, "", "relative_to"], [292, 7, 1, "", "root"], [292, 7, 1, "", "stem"], [292, 7, 1, "", "suffix"], [292, 7, 1, "", "suffixes"], [292, 8, 1, "", "with_name"], [292, 8, 1, "", "with_segments"], [292, 8, 1, "", "with_stem"], [292, 8, 1, "", "with_suffix"]], "pdb": [[293, 12, 1, "", "Pdb"], [293, 11, 1, "", "pm"], [293, 11, 1, "", "post_mortem"], [293, 11, 1, "", "run"], [293, 11, 1, "", "runcall"], [293, 11, 1, "", "runeval"], [293, 11, 1, "", "set_trace"]], "pdb.Pdb": [[293, 8, 1, "", "run"], [293, 8, 1, "", "runcall"], [293, 8, 1, "", "runeval"], [293, 8, 1, "", "set_trace"]], "pickle": [[295, 9, 1, "", "DEFAULT_PROTOCOL"], [295, 9, 1, "", "HIGHEST_PROTOCOL"], [295, 12, 1, "", "PickleBuffer"], [295, 6, 1, "", "PickleError"], [295, 12, 1, "", "Pickler"], [295, 6, 1, "", "PicklingError"], [295, 12, 1, "", "Unpickler"], [295, 6, 1, "", "UnpicklingError"], [295, 11, 1, "", "dump"], [295, 11, 1, "", "dumps"], [295, 11, 1, "", "load"], [295, 11, 1, "", "loads"]], "pickle.PickleBuffer": [[295, 8, 1, "", "raw"], [295, 8, 1, "", "release"]], "pickle.Pickler": [[295, 7, 1, "", "dispatch_table"], [295, 8, 1, "", "dump"], [295, 7, 1, "", "fast"], [295, 8, 1, "", "persistent_id"], [295, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[295, 8, 1, "", "find_class"], [295, 8, 1, "", "load"], [295, 8, 1, "", "persistent_load"]], "pickletools": [[296, 11, 1, "", "dis"], [296, 11, 1, "", "genops"], [296, 11, 1, "", "optimize"], [296, 14, 1, "cmdoption-pickletools-a", "--annotate"], [296, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [296, 14, 1, "cmdoption-pickletools-m", "--memo"], [296, 14, 1, "cmdoption-pickletools-o", "--output"], [296, 14, 1, "cmdoption-pickletools-p", "--preamble"], [296, 14, 1, "cmdoption-pickletools-a", "-a"], [296, 14, 1, "cmdoption-pickletools-l", "-l"], [296, 14, 1, "cmdoption-pickletools-m", "-m"], [296, 14, 1, "cmdoption-pickletools-o", "-o"], [296, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[297, 12, 1, "", "Template"]], "pipes.Template": [[297, 8, 1, "", "append"], [297, 8, 1, "", "clone"], [297, 8, 1, "", "copy"], [297, 8, 1, "", "debug"], [297, 8, 1, "", "open"], [297, 8, 1, "", "prepend"], [297, 8, 1, "", "reset"]], "pkgutil": [[298, 12, 1, "", "ModuleInfo"], [298, 11, 1, "", "extend_path"], [298, 11, 1, "", "find_loader"], [298, 11, 1, "", "get_data"], [298, 11, 1, "", "get_importer"], [298, 11, 1, "", "get_loader"], [298, 11, 1, "", "iter_importers"], [298, 11, 1, "", "iter_modules"], [298, 11, 1, "", "resolve_name"], [298, 11, 1, "", "walk_packages"]], "platform": [[299, 11, 1, "", "architecture"], [299, 11, 1, "", "freedesktop_os_release"], [299, 11, 1, "", "java_ver"], [299, 11, 1, "", "libc_ver"], [299, 11, 1, "", "mac_ver"], [299, 11, 1, "", "machine"], [299, 11, 1, "", "node"], [299, 11, 1, "", "platform"], [299, 11, 1, "", "processor"], [299, 11, 1, "", "python_branch"], [299, 11, 1, "", "python_build"], [299, 11, 1, "", "python_compiler"], [299, 11, 1, "", "python_implementation"], [299, 11, 1, "", "python_revision"], [299, 11, 1, "", "python_version"], [299, 11, 1, "", "python_version_tuple"], [299, 11, 1, "", "release"], [299, 11, 1, "", "system"], [299, 11, 1, "", "system_alias"], [299, 11, 1, "", "uname"], [299, 11, 1, "", "version"], [299, 11, 1, "", "win32_edition"], [299, 11, 1, "", "win32_is_iot"], [299, 11, 1, "", "win32_ver"]], "plistlib": [[300, 9, 1, "", "FMT_BINARY"], [300, 9, 1, "", "FMT_XML"], [300, 12, 1, "", "UID"], [300, 11, 1, "", "dump"], [300, 11, 1, "", "dumps"], [300, 11, 1, "", "load"], [300, 11, 1, "", "loads"]], "poplib": [[301, 12, 1, "", "POP3"], [301, 12, 1, "", "POP3_SSL"], [301, 6, 1, "", "error_proto"]], "poplib.POP3": [[301, 8, 1, "", "apop"], [301, 8, 1, "", "capa"], [301, 8, 1, "", "dele"], [301, 8, 1, "", "getwelcome"], [301, 8, 1, "", "list"], [301, 8, 1, "", "noop"], [301, 8, 1, "", "pass_"], [301, 8, 1, "", "quit"], [301, 8, 1, "", "retr"], [301, 8, 1, "", "rpop"], [301, 8, 1, "", "rset"], [301, 8, 1, "", "set_debuglevel"], [301, 8, 1, "", "stat"], [301, 8, 1, "", "stls"], [301, 8, 1, "", "top"], [301, 8, 1, "", "uidl"], [301, 8, 1, "", "user"], [301, 8, 1, "", "utf8"]], "posix": [[302, 9, 1, "", "environ"]], "pprint": [[303, 12, 1, "", "PrettyPrinter"], [303, 11, 1, "", "isreadable"], [303, 11, 1, "", "isrecursive"], [303, 11, 1, "", "pformat"], [303, 11, 1, "", "pp"], [303, 11, 1, "", "pprint"], [303, 11, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[303, 8, 1, "", "format"], [303, 8, 1, "", "isreadable"], [303, 8, 1, "", "isrecursive"], [303, 8, 1, "", "pformat"], [303, 8, 1, "", "pprint"]], "profile": [[304, 12, 1, "", "Profile"], [304, 11, 1, "", "run"], [304, 11, 1, "", "runctx"]], "profile.Profile": [[304, 8, 1, "", "create_stats"], [304, 8, 1, "", "disable"], [304, 8, 1, "", "dump_stats"], [304, 8, 1, "", "enable"], [304, 8, 1, "", "print_stats"], [304, 8, 1, "", "run"], [304, 8, 1, "", "runcall"], [304, 8, 1, "", "runctx"]], "pstats": [[304, 12, 1, "", "Stats"]], "pstats.Stats": [[304, 8, 1, "", "add"], [304, 8, 1, "", "dump_stats"], [304, 8, 1, "", "get_stats_profile"], [304, 8, 1, "", "print_callees"], [304, 8, 1, "", "print_callers"], [304, 8, 1, "", "print_stats"], [304, 8, 1, "", "reverse_order"], [304, 8, 1, "", "sort_stats"], [304, 8, 1, "", "strip_dirs"]], "pty": [[305, 11, 1, "", "fork"], [305, 11, 1, "", "openpty"], [305, 11, 1, "", "spawn"]], "pwd": [[306, 11, 1, "", "getpwall"], [306, 11, 1, "", "getpwnam"], [306, 11, 1, "", "getpwuid"]], "py_compile": [[307, 6, 1, "", "PyCompileError"], [307, 12, 1, "", "PycInvalidationMode"], [307, 11, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[307, 7, 1, "", "CHECKED_HASH"], [307, 7, 1, "", "TIMESTAMP"], [307, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr.Class": [[308, 7, 1, "", "children"], [308, 7, 1, "", "file"], [308, 7, 1, "", "lineno"], [308, 7, 1, "", "methods"], [308, 7, 1, "", "module"], [308, 7, 1, "", "name"], [308, 7, 1, "", "parent"], [308, 7, 1, "", "super"]], "pyclbr.Function": [[308, 7, 1, "", "children"], [308, 7, 1, "", "file"], [308, 7, 1, "", "is_async"], [308, 7, 1, "", "lineno"], [308, 7, 1, "", "module"], [308, 7, 1, "", "name"], [308, 7, 1, "", "parent"]], "pyclbr": [[308, 11, 1, "", "readmodule"], [308, 11, 1, "", "readmodule_ex"]], "queue": [[312, 6, 1, "", "Empty"], [312, 6, 1, "", "Full"], [312, 12, 1, "", "LifoQueue"], [312, 12, 1, "", "PriorityQueue"], [312, 12, 1, "", "Queue"], [312, 12, 1, "", "SimpleQueue"]], "queue.Queue": [[312, 8, 1, "", "empty"], [312, 8, 1, "", "full"], [312, 8, 1, "", "get"], [312, 8, 1, "", "get_nowait"], [312, 8, 1, "", "join"], [312, 8, 1, "", "put"], [312, 8, 1, "", "put_nowait"], [312, 8, 1, "", "qsize"], [312, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[312, 8, 1, "", "empty"], [312, 8, 1, "", "get"], [312, 8, 1, "", "get_nowait"], [312, 8, 1, "", "put"], [312, 8, 1, "", "put_nowait"], [312, 8, 1, "", "qsize"]], "quopri": [[313, 11, 1, "", "decode"], [313, 11, 1, "", "decodestring"], [313, 11, 1, "", "encode"], [313, 11, 1, "", "encodestring"]], "random": [[314, 12, 1, "", "Random"], [314, 12, 1, "", "SystemRandom"], [314, 11, 1, "", "betavariate"], [314, 11, 1, "", "binomialvariate"], [314, 11, 1, "", "choice"], [314, 11, 1, "", "choices"], [314, 11, 1, "", "expovariate"], [314, 11, 1, "", "gammavariate"], [314, 11, 1, "", "gauss"], [314, 11, 1, "", "getrandbits"], [314, 11, 1, "", "getstate"], [314, 11, 1, "", "lognormvariate"], [314, 11, 1, "", "normalvariate"], [314, 11, 1, "", "paretovariate"], [314, 11, 1, "", "randbytes"], [314, 11, 1, "", "randint"], [314, 11, 1, "", "random"], [314, 11, 1, "", "randrange"], [314, 11, 1, "", "sample"], [314, 11, 1, "", "seed"], [314, 11, 1, "", "setstate"], [314, 11, 1, "", "shuffle"], [314, 11, 1, "", "triangular"], [314, 11, 1, "", "uniform"], [314, 11, 1, "", "vonmisesvariate"], [314, 11, 1, "", "weibullvariate"]], "range": [[340, 7, 1, "", "start"], [340, 7, 1, "", "step"], [340, 7, 1, "", "stop"]], "re": [[315, 9, 1, "", "A"], [315, 9, 1, "", "ASCII"], [315, 9, 1, "", "DEBUG"], [315, 9, 1, "", "DOTALL"], [315, 9, 1, "", "I"], [315, 9, 1, "", "IGNORECASE"], [315, 9, 1, "", "L"], [315, 9, 1, "", "LOCALE"], [315, 9, 1, "", "M"], [315, 9, 1, "", "MULTILINE"], [315, 9, 1, "", "NOFLAG"], [315, 12, 1, "", "RegexFlag"], [315, 9, 1, "", "S"], [315, 9, 1, "", "U"], [315, 9, 1, "", "UNICODE"], [315, 9, 1, "", "VERBOSE"], [315, 9, 1, "", "X"], [315, 11, 1, "", "compile"], [315, 6, 1, "", "error"], [315, 11, 1, "", "escape"], [315, 11, 1, "", "findall"], [315, 11, 1, "", "finditer"], [315, 11, 1, "", "fullmatch"], [315, 11, 1, "", "match"], [315, 11, 1, "", "purge"], [315, 11, 1, "", "search"], [315, 11, 1, "", "split"], [315, 11, 1, "", "sub"], [315, 11, 1, "", "subn"]], "re.Match": [[315, 8, 1, "", "__getitem__"], [315, 8, 1, "", "end"], [315, 7, 1, "", "endpos"], [315, 8, 1, "", "expand"], [315, 8, 1, "", "group"], [315, 8, 1, "", "groupdict"], [315, 8, 1, "", "groups"], [315, 7, 1, "", "lastgroup"], [315, 7, 1, "", "lastindex"], [315, 7, 1, "", "pos"], [315, 7, 1, "", "re"], [315, 8, 1, "", "span"], [315, 8, 1, "", "start"], [315, 7, 1, "", "string"]], "re.Pattern": [[315, 8, 1, "", "findall"], [315, 8, 1, "", "finditer"], [315, 7, 1, "", "flags"], [315, 8, 1, "", "fullmatch"], [315, 7, 1, "", "groupindex"], [315, 7, 1, "", "groups"], [315, 8, 1, "", "match"], [315, 7, 1, "", "pattern"], [315, 8, 1, "", "search"], [315, 8, 1, "", "split"], [315, 8, 1, "", "sub"], [315, 8, 1, "", "subn"]], "re.error": [[315, 7, 1, "", "colno"], [315, 7, 1, "", "lineno"], [315, 7, 1, "", "msg"], [315, 7, 1, "", "pattern"], [315, 7, 1, "", "pos"]], "readline": [[316, 11, 1, "", "add_history"], [316, 11, 1, "", "append_history_file"], [316, 11, 1, "", "clear_history"], [316, 11, 1, "", "get_begidx"], [316, 11, 1, "", "get_completer"], [316, 11, 1, "", "get_completer_delims"], [316, 11, 1, "", "get_completion_type"], [316, 11, 1, "", "get_current_history_length"], [316, 11, 1, "", "get_endidx"], [316, 11, 1, "", "get_history_item"], [316, 11, 1, "", "get_history_length"], [316, 11, 1, "", "get_line_buffer"], [316, 11, 1, "", "insert_text"], [316, 11, 1, "", "parse_and_bind"], [316, 11, 1, "", "read_history_file"], [316, 11, 1, "", "read_init_file"], [316, 11, 1, "", "redisplay"], [316, 11, 1, "", "remove_history_item"], [316, 11, 1, "", "replace_history_item"], [316, 11, 1, "", "set_auto_history"], [316, 11, 1, "", "set_completer"], [316, 11, 1, "", "set_completer_delims"], [316, 11, 1, "", "set_completion_display_matches_hook"], [316, 11, 1, "", "set_history_length"], [316, 11, 1, "", "set_pre_input_hook"], [316, 11, 1, "", "set_startup_hook"], [316, 11, 1, "", "write_history_file"]], "reprlib": [[317, 12, 1, "", "Repr"], [317, 9, 1, "", "aRepr"], [317, 11, 1, "", "recursive_repr"], [317, 11, 1, "", "repr"]], "reprlib.Repr": [[317, 7, 1, "", "fillvalue"], [317, 7, 1, "", "indent"], [317, 7, 1, "", "maxarray"], [317, 7, 1, "", "maxdeque"], [317, 7, 1, "", "maxdict"], [317, 7, 1, "", "maxfrozenset"], [317, 7, 1, "", "maxlevel"], [317, 7, 1, "", "maxlist"], [317, 7, 1, "", "maxlong"], [317, 7, 1, "", "maxother"], [317, 7, 1, "", "maxset"], [317, 7, 1, "", "maxstring"], [317, 7, 1, "", "maxtuple"], [317, 8, 1, "", "repr"], [317, 8, 1, "", "repr1"]], "resource": [[318, 9, 1, "", "RLIMIT_AS"], [318, 9, 1, "", "RLIMIT_CORE"], [318, 9, 1, "", "RLIMIT_CPU"], [318, 9, 1, "", "RLIMIT_DATA"], [318, 9, 1, "", "RLIMIT_FSIZE"], [318, 9, 1, "", "RLIMIT_KQUEUES"], [318, 9, 1, "", "RLIMIT_MEMLOCK"], [318, 9, 1, "", "RLIMIT_MSGQUEUE"], [318, 9, 1, "", "RLIMIT_NICE"], [318, 9, 1, "", "RLIMIT_NOFILE"], [318, 9, 1, "", "RLIMIT_NPROC"], [318, 9, 1, "", "RLIMIT_NPTS"], [318, 9, 1, "", "RLIMIT_OFILE"], [318, 9, 1, "", "RLIMIT_RSS"], [318, 9, 1, "", "RLIMIT_RTPRIO"], [318, 9, 1, "", "RLIMIT_RTTIME"], [318, 9, 1, "", "RLIMIT_SBSIZE"], [318, 9, 1, "", "RLIMIT_SIGPENDING"], [318, 9, 1, "", "RLIMIT_STACK"], [318, 9, 1, "", "RLIMIT_SWAP"], [318, 9, 1, "", "RLIMIT_VMEM"], [318, 9, 1, "", "RLIM_INFINITY"], [318, 9, 1, "", "RUSAGE_BOTH"], [318, 9, 1, "", "RUSAGE_CHILDREN"], [318, 9, 1, "", "RUSAGE_SELF"], [318, 9, 1, "", "RUSAGE_THREAD"], [318, 6, 1, "", "error"], [318, 11, 1, "", "getpagesize"], [318, 11, 1, "", "getrlimit"], [318, 11, 1, "", "getrusage"], [318, 11, 1, "", "prlimit"], [318, 11, 1, "", "setrlimit"]], "rlcompleter.Completer": [[319, 8, 1, "", "complete"]], "runpy": [[320, 11, 1, "", "run_module"], [320, 11, 1, "", "run_path"]], "sched": [[321, 12, 1, "", "scheduler"]], "sched.scheduler": [[321, 8, 1, "", "cancel"], [321, 8, 1, "", "empty"], [321, 8, 1, "", "enter"], [321, 8, 1, "", "enterabs"], [321, 7, 1, "", "queue"], [321, 8, 1, "", "run"]], "secrets": [[322, 12, 1, "", "SystemRandom"], [322, 11, 1, "", "choice"], [322, 11, 1, "", "compare_digest"], [322, 11, 1, "", "randbelow"], [322, 11, 1, "", "randbits"], [322, 11, 1, "", "token_bytes"], [322, 11, 1, "", "token_hex"], [322, 11, 1, "", "token_urlsafe"]], "select": [[324, 7, 1, "", "PIPE_BUF"], [324, 11, 1, "", "devpoll"], [324, 11, 1, "", "epoll"], [324, 6, 1, "", "error"], [324, 11, 1, "", "kevent"], [324, 11, 1, "", "kqueue"], [324, 11, 1, "", "poll"], [324, 11, 1, "", "select"]], "select.devpoll": [[324, 8, 1, "", "close"], [324, 7, 1, "", "closed"], [324, 8, 1, "", "fileno"], [324, 8, 1, "", "modify"], [324, 8, 1, "", "poll"], [324, 8, 1, "", "register"], [324, 8, 1, "", "unregister"]], "select.epoll": [[324, 8, 1, "", "close"], [324, 7, 1, "", "closed"], [324, 8, 1, "", "fileno"], [324, 8, 1, "", "fromfd"], [324, 8, 1, "", "modify"], [324, 8, 1, "", "poll"], [324, 8, 1, "", "register"], [324, 8, 1, "", "unregister"]], "select.kevent": [[324, 7, 1, "", "data"], [324, 7, 1, "", "fflags"], [324, 7, 1, "", "filter"], [324, 7, 1, "", "flags"], [324, 7, 1, "", "ident"], [324, 7, 1, "", "udata"]], "select.kqueue": [[324, 8, 1, "", "close"], [324, 7, 1, "", "closed"], [324, 8, 1, "", "control"], [324, 8, 1, "", "fileno"], [324, 8, 1, "", "fromfd"]], "select.poll": [[324, 8, 1, "", "modify"], [324, 8, 1, "", "poll"], [324, 8, 1, "", "register"], [324, 8, 1, "", "unregister"]], "selectors": [[325, 12, 1, "", "BaseSelector"], [325, 12, 1, "", "DefaultSelector"], [325, 12, 1, "", "DevpollSelector"], [325, 9, 1, "", "EVENT_READ"], [325, 9, 1, "", "EVENT_WRITE"], [325, 12, 1, "", "EpollSelector"], [325, 12, 1, "", "KqueueSelector"], [325, 12, 1, "", "PollSelector"], [325, 12, 1, "", "SelectSelector"], [325, 12, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[325, 8, 1, "", "close"], [325, 8, 1, "", "get_key"], [325, 8, 1, "", "get_map"], [325, 8, 1, "", "modify"], [325, 8, 1, "", "register"], [325, 8, 1, "", "select"], [325, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[325, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[325, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[325, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[325, 7, 1, "", "data"], [325, 7, 1, "", "events"], [325, 7, 1, "", "fd"], [325, 7, 1, "", "fileobj"]], "shelve": [[326, 12, 1, "", "BsdDbShelf"], [326, 12, 1, "", "DbfilenameShelf"], [326, 12, 1, "", "Shelf"], [326, 11, 1, "", "open"]], "shelve.Shelf": [[326, 8, 1, "", "close"], [326, 8, 1, "", "sync"]], "shlex": [[327, 11, 1, "", "join"], [327, 11, 1, "", "quote"], [327, 12, 1, "", "shlex"], [327, 11, 1, "", "split"]], "shlex.shlex": [[327, 7, 1, "", "commenters"], [327, 7, 1, "", "debug"], [327, 7, 1, "", "eof"], [327, 8, 1, "", "error_leader"], [327, 7, 1, "", "escape"], [327, 7, 1, "", "escapedquotes"], [327, 8, 1, "", "get_token"], [327, 7, 1, "", "infile"], [327, 7, 1, "", "instream"], [327, 7, 1, "", "lineno"], [327, 8, 1, "", "pop_source"], [327, 7, 1, "", "punctuation_chars"], [327, 8, 1, "", "push_source"], [327, 8, 1, "", "push_token"], [327, 7, 1, "", "quotes"], [327, 8, 1, "", "read_token"], [327, 7, 1, "", "source"], [327, 8, 1, "", "sourcehook"], [327, 7, 1, "", "token"], [327, 7, 1, "", "whitespace"], [327, 7, 1, "", "whitespace_split"], [327, 7, 1, "", "wordchars"]], "shutil": [[328, 6, 1, "", "Error"], [328, 6, 1, "", "SameFileError"], [328, 11, 1, "", "chown"], [328, 11, 1, "", "copy"], [328, 11, 1, "", "copy2"], [328, 11, 1, "", "copyfile"], [328, 11, 1, "", "copyfileobj"], [328, 11, 1, "", "copymode"], [328, 11, 1, "", "copystat"], [328, 11, 1, "", "copytree"], [328, 11, 1, "", "disk_usage"], [328, 11, 1, "", "get_archive_formats"], [328, 11, 1, "", "get_terminal_size"], [328, 11, 1, "", "get_unpack_formats"], [328, 11, 1, "", "ignore_patterns"], [328, 11, 1, "", "make_archive"], [328, 11, 1, "", "move"], [328, 11, 1, "", "register_archive_format"], [328, 11, 1, "", "register_unpack_format"], [328, 11, 1, "", "rmtree"], [328, 11, 1, "", "unpack_archive"], [328, 11, 1, "", "unregister_archive_format"], [328, 11, 1, "", "unregister_unpack_format"], [328, 11, 1, "", "which"]], "shutil.rmtree": [[328, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[329, 9, 1, "", "CTRL_BREAK_EVENT"], [329, 9, 1, "", "CTRL_C_EVENT"], [329, 12, 1, "", "Handlers"], [329, 9, 1, "", "ITIMER_PROF"], [329, 9, 1, "", "ITIMER_REAL"], [329, 9, 1, "", "ITIMER_VIRTUAL"], [329, 6, 1, "", "ItimerError"], [329, 9, 1, "", "NSIG"], [329, 9, 1, "", "SIGABRT"], [329, 9, 1, "", "SIGALRM"], [329, 9, 1, "", "SIGBREAK"], [329, 9, 1, "", "SIGBUS"], [329, 9, 1, "", "SIGCHLD"], [329, 9, 1, "", "SIGCLD"], [329, 9, 1, "", "SIGCONT"], [329, 9, 1, "", "SIGFPE"], [329, 9, 1, "", "SIGHUP"], [329, 9, 1, "", "SIGILL"], [329, 9, 1, "", "SIGINT"], [329, 9, 1, "", "SIGKILL"], [329, 9, 1, "", "SIGPIPE"], [329, 9, 1, "", "SIGSEGV"], [329, 9, 1, "", "SIGSTKFLT"], [329, 9, 1, "", "SIGTERM"], [329, 9, 1, "", "SIGUSR1"], [329, 9, 1, "", "SIGUSR2"], [329, 9, 1, "", "SIGWINCH"], [329, 9, 1, "", "SIG_BLOCK"], [329, 9, 1, "", "SIG_DFL"], [329, 9, 1, "", "SIG_IGN"], [329, 9, 1, "", "SIG_SETMASK"], [329, 9, 1, "", "SIG_UNBLOCK"], [329, 12, 1, "", "Sigmasks"], [329, 12, 1, "", "Signals"], [329, 11, 1, "", "alarm"], [329, 11, 1, "", "getitimer"], [329, 11, 1, "", "getsignal"], [329, 11, 1, "", "pause"], [329, 11, 1, "", "pidfd_send_signal"], [329, 11, 1, "", "pthread_kill"], [329, 11, 1, "", "pthread_sigmask"], [329, 11, 1, "", "raise_signal"], [329, 11, 1, "", "set_wakeup_fd"], [329, 11, 1, "", "setitimer"], [329, 11, 1, "", "siginterrupt"], [329, 11, 1, "", "signal"], [329, 11, 1, "", "sigpending"], [329, 11, 1, "", "sigtimedwait"], [329, 11, 1, "", "sigwait"], [329, 11, 1, "", "sigwaitinfo"], [329, 11, 1, "", "strsignal"], [329, 11, 1, "", "valid_signals"]], "site": [[330, 9, 1, "", "ENABLE_USER_SITE"], [330, 9, 1, "", "PREFIXES"], [330, 9, 1, "", "USER_BASE"], [330, 9, 1, "", "USER_SITE"], [330, 11, 1, "", "addsitedir"], [330, 11, 1, "", "getsitepackages"], [330, 11, 1, "", "getuserbase"], [330, 11, 1, "", "getusersitepackages"], [330, 11, 1, "", "main"], [330, 14, 1, "cmdoption-site-user-base", "--user-base"], [330, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[423, 8, 1, "", "indices"]], "smtplib": [[331, 12, 1, "", "LMTP"], [331, 12, 1, "", "SMTP"], [331, 6, 1, "", "SMTPAuthenticationError"], [331, 6, 1, "", "SMTPConnectError"], [331, 6, 1, "", "SMTPDataError"], [331, 6, 1, "", "SMTPException"], [331, 6, 1, "", "SMTPHeloError"], [331, 6, 1, "", "SMTPNotSupportedError"], [331, 6, 1, "", "SMTPRecipientsRefused"], [331, 6, 1, "", "SMTPResponseException"], [331, 6, 1, "", "SMTPSenderRefused"], [331, 6, 1, "", "SMTPServerDisconnected"], [331, 12, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[331, 8, 1, "", "auth"], [331, 8, 1, "", "connect"], [331, 8, 1, "", "docmd"], [331, 8, 1, "", "ehlo"], [331, 8, 1, "", "ehlo_or_helo_if_needed"], [331, 8, 1, "", "has_extn"], [331, 8, 1, "", "helo"], [331, 8, 1, "", "login"], [331, 8, 1, "", "quit"], [331, 8, 1, "", "send_message"], [331, 8, 1, "", "sendmail"], [331, 8, 1, "", "set_debuglevel"], [331, 8, 1, "", "starttls"], [331, 8, 1, "", "verify"]], "sndhdr": [[332, 9, 1, "", "tests"], [332, 11, 1, "", "what"], [332, 11, 1, "", "whathdr"]], "socket": [[333, 9, 1, "", "AF_ALG"], [333, 9, 1, "", "AF_CAN"], [333, 9, 1, "", "AF_DIVERT"], [333, 9, 1, "", "AF_HYPERV"], [333, 9, 1, "", "AF_INET"], [333, 9, 1, "", "AF_INET6"], [333, 9, 1, "", "AF_LINK"], [333, 9, 1, "", "AF_PACKET"], [333, 9, 1, "", "AF_QIPCRTR"], [333, 9, 1, "", "AF_RDS"], [333, 9, 1, "", "AF_UNIX"], [333, 9, 1, "", "AF_VSOCK"], [333, 9, 1, "", "BDADDR_ANY"], [333, 9, 1, "", "BDADDR_LOCAL"], [333, 9, 1, "", "CAN_BCM"], [333, 9, 1, "", "CAN_ISOTP"], [333, 9, 1, "", "CAN_J1939"], [333, 9, 1, "", "CAN_RAW_FD_FRAMES"], [333, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [333, 11, 1, "", "CMSG_LEN"], [333, 11, 1, "", "CMSG_SPACE"], [333, 9, 1, "", "ETHERTYPE_ARP"], [333, 9, 1, "", "ETHERTYPE_IP"], [333, 9, 1, "", "ETHERTYPE_IPV6"], [333, 9, 1, "", "ETHERTYPE_VLAN"], [333, 9, 1, "", "ETH_P_ALL"], [333, 9, 1, "", "HCI_DATA_DIR"], [333, 9, 1, "", "HCI_FILTER"], [333, 9, 1, "", "HCI_TIME_STAMP"], [333, 9, 1, "", "HVSOCKET_ADDRESS_FLAG_PASSTHRU"], [333, 9, 1, "", "HVSOCKET_CONNECTED_SUSPEND"], [333, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT"], [333, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT_MAX"], [333, 9, 1, "", "HV_GUID_BROADCAST"], [333, 9, 1, "", "HV_GUID_CHILDREN"], [333, 9, 1, "", "HV_GUID_LOOPBACK"], [333, 9, 1, "", "HV_GUID_PARENT"], [333, 9, 1, "", "HV_GUID_WILDCARD"], [333, 9, 1, "", "HV_GUID_ZERO"], [333, 9, 1, "", "HV_PROTOCOL_RAW"], [333, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [333, 9, 1, "", "LOCAL_CREDS"], [333, 9, 1, "", "LOCAL_CREDS_PERSISTENT"], [333, 9, 1, "", "PF_CAN"], [333, 9, 1, "", "PF_DIVERT"], [333, 9, 1, "", "PF_PACKET"], [333, 9, 1, "", "PF_RDS"], [333, 9, 1, "", "SCM_CREDS2"], [333, 9, 1, "", "SIO_KEEPALIVE_VALS"], [333, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [333, 9, 1, "", "SIO_RCVALL"], [333, 9, 1, "", "SOCK_CLOEXEC"], [333, 9, 1, "", "SOCK_DGRAM"], [333, 9, 1, "", "SOCK_NONBLOCK"], [333, 9, 1, "", "SOCK_RAW"], [333, 9, 1, "", "SOCK_RDM"], [333, 9, 1, "", "SOCK_SEQPACKET"], [333, 9, 1, "", "SOCK_STREAM"], [333, 9, 1, "", "SOL_ALG"], [333, 9, 1, "", "SOL_RDS"], [333, 9, 1, "", "SOMAXCONN"], [333, 9, 1, "", "SO_INCOMING_CPU"], [333, 9, 1, "", "SocketType"], [333, 11, 1, "", "close"], [333, 11, 1, "", "create_connection"], [333, 11, 1, "", "create_server"], [333, 6, 1, "", "error"], [333, 11, 1, "", "fromfd"], [333, 11, 1, "", "fromshare"], [333, 6, 1, "", "gaierror"], [333, 11, 1, "", "getaddrinfo"], [333, 11, 1, "", "getdefaulttimeout"], [333, 11, 1, "", "getfqdn"], [333, 11, 1, "", "gethostbyaddr"], [333, 11, 1, "", "gethostbyname"], [333, 11, 1, "", "gethostbyname_ex"], [333, 11, 1, "", "gethostname"], [333, 11, 1, "", "getnameinfo"], [333, 11, 1, "", "getprotobyname"], [333, 11, 1, "", "getservbyname"], [333, 11, 1, "", "getservbyport"], [333, 11, 1, "", "has_dualstack_ipv6"], [333, 9, 1, "", "has_ipv6"], [333, 6, 1, "", "herror"], [333, 11, 1, "", "htonl"], [333, 11, 1, "", "htons"], [333, 11, 1, "", "if_indextoname"], [333, 11, 1, "", "if_nameindex"], [333, 11, 1, "", "if_nametoindex"], [333, 11, 1, "", "inet_aton"], [333, 11, 1, "", "inet_ntoa"], [333, 11, 1, "", "inet_ntop"], [333, 11, 1, "", "inet_pton"], [333, 11, 1, "", "ntohl"], [333, 11, 1, "", "ntohs"], [333, 11, 1, "", "recv_fds"], [333, 11, 1, "", "send_fds"], [333, 11, 1, "", "setdefaulttimeout"], [333, 11, 1, "", "sethostname"], [333, 12, 1, "", "socket"], [333, 11, 1, "", "socketpair"], [333, 6, 1, "", "timeout"]], "socket.socket": [[333, 8, 1, "", "accept"], [333, 8, 1, "", "bind"], [333, 8, 1, "", "close"], [333, 8, 1, "", "connect"], [333, 8, 1, "", "connect_ex"], [333, 8, 1, "", "detach"], [333, 8, 1, "", "dup"], [333, 7, 1, "", "family"], [333, 8, 1, "", "fileno"], [333, 8, 1, "", "get_inheritable"], [333, 8, 1, "", "getblocking"], [333, 8, 1, "", "getpeername"], [333, 8, 1, "", "getsockname"], [333, 8, 1, "", "getsockopt"], [333, 8, 1, "", "gettimeout"], [333, 8, 1, "", "ioctl"], [333, 8, 1, "", "listen"], [333, 8, 1, "", "makefile"], [333, 7, 1, "", "proto"], [333, 8, 1, "", "recv"], [333, 8, 1, "", "recv_into"], [333, 8, 1, "", "recvfrom"], [333, 8, 1, "", "recvfrom_into"], [333, 8, 1, "", "recvmsg"], [333, 8, 1, "", "recvmsg_into"], [333, 8, 1, "", "send"], [333, 8, 1, "", "sendall"], [333, 8, 1, "", "sendfile"], [333, 8, 1, "", "sendmsg"], [333, 8, 1, "", "sendmsg_afalg"], [333, 8, 1, "", "sendto"], [333, 8, 1, "", "set_inheritable"], [333, 8, 1, "", "setblocking"], [333, 8, 1, "", "setsockopt"], [333, 8, 1, "", "settimeout"], [333, 8, 1, "", "share"], [333, 8, 1, "", "shutdown"], [333, 7, 1, "", "type"]], "socketserver": [[334, 12, 1, "", "BaseRequestHandler"], [334, 12, 1, "", "BaseServer"], [334, 12, 1, "", "DatagramRequestHandler"], [334, 12, 1, "", "ForkingMixIn"], [334, 12, 1, "", "ForkingTCPServer"], [334, 12, 1, "", "ForkingUDPServer"], [334, 12, 1, "", "ForkingUnixDatagramServer"], [334, 12, 1, "", "ForkingUnixStreamServer"], [334, 12, 1, "", "StreamRequestHandler"], [334, 12, 1, "", "TCPServer"], [334, 12, 1, "", "ThreadingMixIn"], [334, 12, 1, "", "ThreadingTCPServer"], [334, 12, 1, "", "ThreadingUDPServer"], [334, 12, 1, "", "ThreadingUnixDatagramServer"], [334, 12, 1, "", "ThreadingUnixStreamServer"], [334, 12, 1, "", "UDPServer"], [334, 12, 1, "", "UnixDatagramServer"], [334, 12, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[334, 8, 1, "", "finish"], [334, 8, 1, "", "handle"], [334, 8, 1, "", "setup"]], "socketserver.BaseServer": [[334, 7, 1, "", "RequestHandlerClass"], [334, 7, 1, "", "address_family"], [334, 7, 1, "", "allow_reuse_address"], [334, 8, 1, "", "fileno"], [334, 8, 1, "", "finish_request"], [334, 8, 1, "", "get_request"], [334, 8, 1, "", "handle_error"], [334, 8, 1, "", "handle_request"], [334, 8, 1, "", "handle_timeout"], [334, 8, 1, "", "process_request"], [334, 7, 1, "", "request_queue_size"], [334, 8, 1, "", "serve_forever"], [334, 8, 1, "", "server_activate"], [334, 7, 1, "", "server_address"], [334, 8, 1, "", "server_bind"], [334, 8, 1, "", "server_close"], [334, 8, 1, "", "service_actions"], [334, 8, 1, "", "shutdown"], [334, 7, 1, "", "socket"], [334, 7, 1, "", "socket_type"], [334, 7, 1, "", "timeout"], [334, 8, 1, "", "verify_request"]], "spwd": [[335, 11, 1, "", "getspall"], [335, 11, 1, "", "getspnam"]], "sqlite3": [[336, 12, 1, "", "Blob"], [336, 12, 1, "", "Connection"], [336, 12, 1, "", "Cursor"], [336, 6, 1, "", "DataError"], [336, 6, 1, "", "DatabaseError"], [336, 6, 1, "", "Error"], [336, 6, 1, "", "IntegrityError"], [336, 6, 1, "", "InterfaceError"], [336, 6, 1, "", "InternalError"], [336, 9, 1, "", "LEGACY_TRANSACTION_CONTROL"], [336, 6, 1, "", "NotSupportedError"], [336, 6, 1, "", "OperationalError"], [336, 9, 1, "", "PARSE_COLNAMES"], [336, 9, 1, "", "PARSE_DECLTYPES"], [336, 12, 1, "", "PrepareProtocol"], [336, 6, 1, "", "ProgrammingError"], [336, 12, 1, "", "Row"], [336, 9, 1, "", "SQLITE_DBCONFIG_DEFENSIVE"], [336, 9, 1, "", "SQLITE_DBCONFIG_DQS_DDL"], [336, 9, 1, "", "SQLITE_DBCONFIG_DQS_DML"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FKEY"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_QPSG"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_TRIGGER"], [336, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_VIEW"], [336, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"], [336, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"], [336, 9, 1, "", "SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"], [336, 9, 1, "", "SQLITE_DBCONFIG_RESET_DATABASE"], [336, 9, 1, "", "SQLITE_DBCONFIG_TRIGGER_EQP"], [336, 9, 1, "", "SQLITE_DBCONFIG_TRUSTED_SCHEMA"], [336, 9, 1, "", "SQLITE_DBCONFIG_WRITABLE_SCHEMA"], [336, 9, 1, "", "SQLITE_DENY"], [336, 9, 1, "", "SQLITE_IGNORE"], [336, 9, 1, "", "SQLITE_OK"], [336, 6, 1, "", "Warning"], [336, 9, 1, "", "apilevel"], [336, 11, 1, "", "complete_statement"], [336, 11, 1, "", "connect"], [336, 11, 1, "", "enable_callback_tracebacks"], [336, 9, 1, "", "paramstyle"], [336, 11, 1, "", "register_adapter"], [336, 11, 1, "", "register_converter"], [336, 9, 1, "", "sqlite_version"], [336, 9, 1, "", "sqlite_version_info"], [336, 9, 1, "", "threadsafety"], [336, 9, 1, "", "version"], [336, 9, 1, "", "version_info"]], "sqlite3.Blob": [[336, 8, 1, "", "close"], [336, 8, 1, "", "read"], [336, 8, 1, "", "seek"], [336, 8, 1, "", "tell"], [336, 8, 1, "", "write"]], "sqlite3.Connection": [[336, 7, 1, "", "autocommit"], [336, 8, 1, "", "backup"], [336, 8, 1, "", "blobopen"], [336, 8, 1, "", "close"], [336, 8, 1, "", "commit"], [336, 8, 1, "", "create_aggregate"], [336, 8, 1, "", "create_collation"], [336, 8, 1, "", "create_function"], [336, 8, 1, "", "create_window_function"], [336, 8, 1, "", "cursor"], [336, 8, 1, "", "deserialize"], [336, 8, 1, "", "enable_load_extension"], [336, 8, 1, "", "execute"], [336, 8, 1, "", "executemany"], [336, 8, 1, "", "executescript"], [336, 8, 1, "", "getconfig"], [336, 8, 1, "", "getlimit"], [336, 7, 1, "", "in_transaction"], [336, 8, 1, "", "interrupt"], [336, 7, 1, "", "isolation_level"], [336, 8, 1, "", "iterdump"], [336, 8, 1, "", "load_extension"], [336, 8, 1, "", "rollback"], [336, 7, 1, "", "row_factory"], [336, 8, 1, "", "serialize"], [336, 8, 1, "", "set_authorizer"], [336, 8, 1, "", "set_progress_handler"], [336, 8, 1, "", "set_trace_callback"], [336, 8, 1, "", "setconfig"], [336, 8, 1, "", "setlimit"], [336, 7, 1, "", "text_factory"], [336, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[336, 7, 1, "", "arraysize"], [336, 8, 1, "", "close"], [336, 7, 1, "", "connection"], [336, 7, 1, "", "description"], [336, 8, 1, "", "execute"], [336, 8, 1, "", "executemany"], [336, 8, 1, "", "executescript"], [336, 8, 1, "", "fetchall"], [336, 8, 1, "", "fetchmany"], [336, 8, 1, "", "fetchone"], [336, 7, 1, "", "lastrowid"], [336, 7, 1, "", "row_factory"], [336, 7, 1, "", "rowcount"], [336, 8, 1, "", "setinputsizes"], [336, 8, 1, "", "setoutputsize"]], "sqlite3.Error": [[336, 7, 1, "", "sqlite_errorcode"], [336, 7, 1, "", "sqlite_errorname"]], "sqlite3.Row": [[336, 8, 1, "", "keys"]], "ssl": [[337, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [337, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [337, 12, 1, "", "AlertDescription"], [337, 9, 1, "", "CERT_NONE"], [337, 9, 1, "", "CERT_OPTIONAL"], [337, 9, 1, "", "CERT_REQUIRED"], [337, 9, 1, "", "CHANNEL_BINDING_TYPES"], [337, 6, 1, "", "CertificateError"], [337, 11, 1, "", "DER_cert_to_PEM_cert"], [337, 9, 1, "", "HAS_ALPN"], [337, 9, 1, "", "HAS_ECDH"], [337, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [337, 9, 1, "", "HAS_NPN"], [337, 9, 1, "", "HAS_SNI"], [337, 9, 1, "", "HAS_SSLv2"], [337, 9, 1, "", "HAS_SSLv3"], [337, 9, 1, "", "HAS_TLSv1"], [337, 9, 1, "", "HAS_TLSv1_1"], [337, 9, 1, "", "HAS_TLSv1_2"], [337, 9, 1, "", "HAS_TLSv1_3"], [337, 12, 1, "", "MemoryBIO"], [337, 9, 1, "", "OPENSSL_VERSION"], [337, 9, 1, "", "OPENSSL_VERSION_INFO"], [337, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [337, 9, 1, "", "OP_ALL"], [337, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [337, 9, 1, "", "OP_ENABLE_KTLS"], [337, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [337, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [337, 9, 1, "", "OP_LEGACY_SERVER_CONNECT"], [337, 9, 1, "", "OP_NO_COMPRESSION"], [337, 9, 1, "", "OP_NO_RENEGOTIATION"], [337, 9, 1, "", "OP_NO_SSLv2"], [337, 9, 1, "", "OP_NO_SSLv3"], [337, 9, 1, "", "OP_NO_TICKET"], [337, 9, 1, "", "OP_NO_TLSv1"], [337, 9, 1, "", "OP_NO_TLSv1_1"], [337, 9, 1, "", "OP_NO_TLSv1_2"], [337, 9, 1, "", "OP_NO_TLSv1_3"], [337, 9, 1, "", "OP_SINGLE_DH_USE"], [337, 9, 1, "", "OP_SINGLE_ECDH_USE"], [337, 12, 1, "", "Options"], [337, 11, 1, "", "PEM_cert_to_DER_cert"], [337, 9, 1, "", "PROTOCOL_SSLv23"], [337, 9, 1, "", "PROTOCOL_SSLv3"], [337, 9, 1, "", "PROTOCOL_TLS"], [337, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [337, 9, 1, "", "PROTOCOL_TLS_SERVER"], [337, 9, 1, "", "PROTOCOL_TLSv1"], [337, 9, 1, "", "PROTOCOL_TLSv1_1"], [337, 9, 1, "", "PROTOCOL_TLSv1_2"], [337, 11, 1, "", "RAND_add"], [337, 11, 1, "", "RAND_bytes"], [337, 11, 1, "", "RAND_status"], [337, 6, 1, "", "SSLCertVerificationError"], [337, 12, 1, "", "SSLContext"], [337, 6, 1, "", "SSLEOFError"], [337, 6, 1, "", "SSLError"], [337, 12, 1, "", "SSLErrorNumber"], [337, 12, 1, "", "SSLObject"], [337, 12, 1, "", "SSLSession"], [337, 12, 1, "", "SSLSocket"], [337, 6, 1, "", "SSLSyscallError"], [337, 6, 1, "", "SSLWantReadError"], [337, 6, 1, "", "SSLWantWriteError"], [337, 6, 1, "", "SSLZeroReturnError"], [337, 12, 1, "", "TLSVersion"], [337, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [337, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [337, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [337, 9, 1, "", "VERIFY_DEFAULT"], [337, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [337, 9, 1, "", "VERIFY_X509_STRICT"], [337, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [337, 12, 1, "", "VerifyFlags"], [337, 12, 1, "", "VerifyMode"], [337, 11, 1, "", "cert_time_to_seconds"], [337, 11, 1, "", "create_default_context"], [337, 11, 1, "", "enum_certificates"], [337, 11, 1, "", "enum_crls"], [337, 11, 1, "", "get_default_verify_paths"], [337, 11, 1, "", "get_server_certificate"]], "ssl.MemoryBIO": [[337, 7, 1, "", "eof"], [337, 7, 1, "", "pending"], [337, 8, 1, "", "read"], [337, 8, 1, "", "write"], [337, 8, 1, "", "write_eof"]], "ssl.Purpose": [[337, 9, 1, "", "CLIENT_AUTH"], [337, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[337, 7, 1, "", "verify_code"], [337, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[337, 8, 1, "", "cert_store_stats"], [337, 7, 1, "", "check_hostname"], [337, 8, 1, "", "get_ca_certs"], [337, 8, 1, "", "get_ciphers"], [337, 7, 1, "", "hostname_checks_common_name"], [337, 7, 1, "", "keylog_filename"], [337, 8, 1, "", "load_cert_chain"], [337, 8, 1, "", "load_default_certs"], [337, 8, 1, "", "load_dh_params"], [337, 8, 1, "", "load_verify_locations"], [337, 7, 1, "", "maximum_version"], [337, 7, 1, "", "minimum_version"], [337, 7, 1, "", "num_tickets"], [337, 7, 1, "", "options"], [337, 7, 1, "", "post_handshake_auth"], [337, 7, 1, "", "protocol"], [337, 7, 1, "", "security_level"], [337, 8, 1, "", "session_stats"], [337, 8, 1, "", "set_alpn_protocols"], [337, 8, 1, "", "set_ciphers"], [337, 8, 1, "", "set_default_verify_paths"], [337, 8, 1, "", "set_ecdh_curve"], [337, 8, 1, "", "set_npn_protocols"], [337, 7, 1, "", "set_servername_callback"], [337, 7, 1, "", "sni_callback"], [337, 7, 1, "", "sslobject_class"], [337, 7, 1, "", "sslsocket_class"], [337, 7, 1, "", "verify_flags"], [337, 7, 1, "", "verify_mode"], [337, 8, 1, "", "wrap_bio"], [337, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[337, 7, 1, "", "library"], [337, 7, 1, "", "reason"]], "ssl.SSLSession": [[337, 7, 1, "", "has_ticket"], [337, 7, 1, "", "id"], [337, 7, 1, "", "ticket_lifetime_hint"], [337, 7, 1, "", "time"], [337, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[337, 8, 1, "", "cipher"], [337, 8, 1, "", "compression"], [337, 7, 1, "", "context"], [337, 8, 1, "", "do_handshake"], [337, 8, 1, "", "get_channel_binding"], [337, 8, 1, "", "getpeercert"], [337, 8, 1, "", "pending"], [337, 8, 1, "", "read"], [337, 8, 1, "", "selected_alpn_protocol"], [337, 8, 1, "", "selected_npn_protocol"], [337, 7, 1, "", "server_hostname"], [337, 7, 1, "", "server_side"], [337, 7, 1, "", "session"], [337, 7, 1, "", "session_reused"], [337, 8, 1, "", "shared_ciphers"], [337, 8, 1, "", "unwrap"], [337, 8, 1, "", "verify_client_post_handshake"], [337, 8, 1, "", "version"], [337, 8, 1, "", "write"]], "ssl.TLSVersion": [[337, 7, 1, "", "MAXIMUM_SUPPORTED"], [337, 7, 1, "", "MINIMUM_SUPPORTED"], [337, 7, 1, "", "SSLv3"], [337, 7, 1, "", "TLSv1"], [337, 7, 1, "", "TLSv1_1"], [337, 7, 1, "", "TLSv1_2"], [337, 7, 1, "", "TLSv1_3"]], "stat": [[338, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [338, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [338, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [338, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [338, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [338, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [338, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [338, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [338, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [338, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [338, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [338, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [338, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [338, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [338, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [338, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [338, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [338, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [338, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [338, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [338, 9, 1, "", "SF_APPEND"], [338, 9, 1, "", "SF_ARCHIVED"], [338, 9, 1, "", "SF_IMMUTABLE"], [338, 9, 1, "", "SF_NOUNLINK"], [338, 9, 1, "", "SF_SNAPSHOT"], [338, 9, 1, "", "ST_ATIME"], [338, 9, 1, "", "ST_CTIME"], [338, 9, 1, "", "ST_DEV"], [338, 9, 1, "", "ST_GID"], [338, 9, 1, "", "ST_INO"], [338, 9, 1, "", "ST_MODE"], [338, 9, 1, "", "ST_MTIME"], [338, 9, 1, "", "ST_NLINK"], [338, 9, 1, "", "ST_SIZE"], [338, 9, 1, "", "ST_UID"], [338, 9, 1, "", "S_ENFMT"], [338, 9, 1, "", "S_IEXEC"], [338, 9, 1, "", "S_IFBLK"], [338, 9, 1, "", "S_IFCHR"], [338, 9, 1, "", "S_IFDIR"], [338, 9, 1, "", "S_IFDOOR"], [338, 9, 1, "", "S_IFIFO"], [338, 9, 1, "", "S_IFLNK"], [338, 11, 1, "", "S_IFMT"], [338, 9, 1, "", "S_IFPORT"], [338, 9, 1, "", "S_IFREG"], [338, 9, 1, "", "S_IFSOCK"], [338, 9, 1, "", "S_IFWHT"], [338, 11, 1, "", "S_IMODE"], [338, 9, 1, "", "S_IREAD"], [338, 9, 1, "", "S_IRGRP"], [338, 9, 1, "", "S_IROTH"], [338, 9, 1, "", "S_IRUSR"], [338, 9, 1, "", "S_IRWXG"], [338, 9, 1, "", "S_IRWXO"], [338, 9, 1, "", "S_IRWXU"], [338, 11, 1, "", "S_ISBLK"], [338, 11, 1, "", "S_ISCHR"], [338, 11, 1, "", "S_ISDIR"], [338, 11, 1, "", "S_ISDOOR"], [338, 11, 1, "", "S_ISFIFO"], [338, 9, 1, "", "S_ISGID"], [338, 11, 1, "", "S_ISLNK"], [338, 11, 1, "", "S_ISPORT"], [338, 11, 1, "", "S_ISREG"], [338, 11, 1, "", "S_ISSOCK"], [338, 9, 1, "", "S_ISUID"], [338, 9, 1, "", "S_ISVTX"], [338, 11, 1, "", "S_ISWHT"], [338, 9, 1, "", "S_IWGRP"], [338, 9, 1, "", "S_IWOTH"], [338, 9, 1, "", "S_IWRITE"], [338, 9, 1, "", "S_IWUSR"], [338, 9, 1, "", "S_IXGRP"], [338, 9, 1, "", "S_IXOTH"], [338, 9, 1, "", "S_IXUSR"], [338, 9, 1, "", "UF_APPEND"], [338, 9, 1, "", "UF_COMPRESSED"], [338, 9, 1, "", "UF_HIDDEN"], [338, 9, 1, "", "UF_IMMUTABLE"], [338, 9, 1, "", "UF_NODUMP"], [338, 9, 1, "", "UF_NOUNLINK"], [338, 9, 1, "", "UF_OPAQUE"], [338, 11, 1, "", "filemode"]], "statistics": [[339, 12, 1, "", "NormalDist"], [339, 6, 1, "", "StatisticsError"], [339, 11, 1, "", "correlation"], [339, 11, 1, "", "covariance"], [339, 11, 1, "", "fmean"], [339, 11, 1, "", "geometric_mean"], [339, 11, 1, "", "harmonic_mean"], [339, 11, 1, "", "linear_regression"], [339, 11, 1, "", "mean"], [339, 11, 1, "", "median"], [339, 11, 1, "", "median_grouped"], [339, 11, 1, "", "median_high"], [339, 11, 1, "", "median_low"], [339, 11, 1, "", "mode"], [339, 11, 1, "", "multimode"], [339, 11, 1, "", "pstdev"], [339, 11, 1, "", "pvariance"], [339, 11, 1, "", "quantiles"], [339, 11, 1, "", "stdev"], [339, 11, 1, "", "variance"]], "statistics.NormalDist": [[339, 8, 1, "", "cdf"], [339, 8, 1, "", "from_samples"], [339, 8, 1, "", "inv_cdf"], [339, 7, 1, "", "mean"], [339, 7, 1, "", "median"], [339, 7, 1, "", "mode"], [339, 8, 1, "", "overlap"], [339, 8, 1, "", "pdf"], [339, 8, 1, "", "quantiles"], [339, 8, 1, "", "samples"], [339, 7, 1, "", "stdev"], [339, 7, 1, "", "variance"], [339, 8, 1, "", "zscore"]], "str": [[340, 8, 1, "", "capitalize"], [340, 8, 1, "", "casefold"], [340, 8, 1, "", "center"], [340, 8, 1, "", "count"], [340, 8, 1, "", "encode"], [340, 8, 1, "", "endswith"], [340, 8, 1, "", "expandtabs"], [340, 8, 1, "", "find"], [340, 8, 1, "", "format"], [340, 8, 1, "", "format_map"], [340, 8, 1, "", "index"], [340, 8, 1, "", "isalnum"], [340, 8, 1, "", "isalpha"], [340, 8, 1, "", "isascii"], [340, 8, 1, "", "isdecimal"], [340, 8, 1, "", "isdigit"], [340, 8, 1, "", "isidentifier"], [340, 8, 1, "", "islower"], [340, 8, 1, "", "isnumeric"], [340, 8, 1, "", "isprintable"], [340, 8, 1, "", "isspace"], [340, 8, 1, "", "istitle"], [340, 8, 1, "", "isupper"], [340, 8, 1, "", "join"], [340, 8, 1, "", "ljust"], [340, 8, 1, "", "lower"], [340, 8, 1, "", "lstrip"], [340, 8, 1, "", "maketrans"], [340, 8, 1, "", "partition"], [340, 8, 1, "", "removeprefix"], [340, 8, 1, "", "removesuffix"], [340, 8, 1, "", "replace"], [340, 8, 1, "", "rfind"], [340, 8, 1, "", "rindex"], [340, 8, 1, "", "rjust"], [340, 8, 1, "", "rpartition"], [340, 8, 1, "", "rsplit"], [340, 8, 1, "", "rstrip"], [340, 8, 1, "", "split"], [340, 8, 1, "", "splitlines"], [340, 8, 1, "", "startswith"], [340, 8, 1, "", "strip"], [340, 8, 1, "", "swapcase"], [340, 8, 1, "", "title"], [340, 8, 1, "", "translate"], [340, 8, 1, "", "upper"], [340, 8, 1, "", "zfill"]], "string": [[341, 12, 1, "", "Formatter"], [341, 12, 1, "", "Template"], [341, 9, 1, "", "ascii_letters"], [341, 9, 1, "", "ascii_lowercase"], [341, 9, 1, "", "ascii_uppercase"], [341, 11, 1, "", "capwords"], [341, 9, 1, "", "digits"], [341, 9, 1, "", "hexdigits"], [341, 9, 1, "", "octdigits"], [341, 9, 1, "", "printable"], [341, 9, 1, "", "punctuation"], [341, 9, 1, "", "whitespace"]], "string.Formatter": [[341, 8, 1, "", "check_unused_args"], [341, 8, 1, "", "convert_field"], [341, 8, 1, "", "format"], [341, 8, 1, "", "format_field"], [341, 8, 1, "", "get_field"], [341, 8, 1, "", "get_value"], [341, 8, 1, "", "parse"], [341, 8, 1, "", "vformat"]], "string.Template": [[341, 8, 1, "", "get_identifiers"], [341, 8, 1, "", "is_valid"], [341, 8, 1, "", "safe_substitute"], [341, 8, 1, "", "substitute"], [341, 7, 1, "", "template"]], "stringprep": [[342, 11, 1, "", "in_table_a1"], [342, 11, 1, "", "in_table_b1"], [342, 11, 1, "", "in_table_c11"], [342, 11, 1, "", "in_table_c11_c12"], [342, 11, 1, "", "in_table_c12"], [342, 11, 1, "", "in_table_c21"], [342, 11, 1, "", "in_table_c21_c22"], [342, 11, 1, "", "in_table_c22"], [342, 11, 1, "", "in_table_c3"], [342, 11, 1, "", "in_table_c4"], [342, 11, 1, "", "in_table_c5"], [342, 11, 1, "", "in_table_c6"], [342, 11, 1, "", "in_table_c7"], [342, 11, 1, "", "in_table_c8"], [342, 11, 1, "", "in_table_c9"], [342, 11, 1, "", "in_table_d1"], [342, 11, 1, "", "in_table_d2"], [342, 11, 1, "", "map_table_b2"], [342, 11, 1, "", "map_table_b3"]], "struct": [[343, 12, 1, "", "Struct"], [343, 11, 1, "", "calcsize"], [343, 6, 1, "", "error"], [343, 11, 1, "", "iter_unpack"], [343, 11, 1, "", "pack"], [343, 11, 1, "", "pack_into"], [343, 11, 1, "", "unpack"], [343, 11, 1, "", "unpack_from"]], "struct.Struct": [[343, 7, 1, "", "format"], [343, 8, 1, "", "iter_unpack"], [343, 8, 1, "", "pack"], [343, 8, 1, "", "pack_into"], [343, 7, 1, "", "size"], [343, 8, 1, "", "unpack"], [343, 8, 1, "", "unpack_from"]], "subprocess": [[344, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [344, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [344, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [344, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [344, 9, 1, "", "CREATE_NEW_CONSOLE"], [344, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [344, 9, 1, "", "CREATE_NO_WINDOW"], [344, 6, 1, "", "CalledProcessError"], [344, 12, 1, "", "CompletedProcess"], [344, 9, 1, "", "DETACHED_PROCESS"], [344, 9, 1, "", "DEVNULL"], [344, 9, 1, "", "HIGH_PRIORITY_CLASS"], [344, 9, 1, "", "IDLE_PRIORITY_CLASS"], [344, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [344, 9, 1, "", "PIPE"], [344, 12, 1, "", "Popen"], [344, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [344, 9, 1, "", "STARTF_USESHOWWINDOW"], [344, 9, 1, "", "STARTF_USESTDHANDLES"], [344, 12, 1, "", "STARTUPINFO"], [344, 9, 1, "", "STDOUT"], [344, 9, 1, "", "STD_ERROR_HANDLE"], [344, 9, 1, "", "STD_INPUT_HANDLE"], [344, 9, 1, "", "STD_OUTPUT_HANDLE"], [344, 9, 1, "", "SW_HIDE"], [344, 6, 1, "", "SubprocessError"], [344, 6, 1, "", "TimeoutExpired"], [344, 11, 1, "", "call"], [344, 11, 1, "", "check_call"], [344, 11, 1, "", "check_output"], [344, 11, 1, "", "getoutput"], [344, 11, 1, "", "getstatusoutput"], [344, 11, 1, "", "run"]], "subprocess.CalledProcessError": [[344, 7, 1, "", "cmd"], [344, 7, 1, "", "output"], [344, 7, 1, "", "returncode"], [344, 7, 1, "", "stderr"], [344, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[344, 7, 1, "", "args"], [344, 8, 1, "", "check_returncode"], [344, 7, 1, "", "returncode"], [344, 7, 1, "", "stderr"], [344, 7, 1, "", "stdout"]], "subprocess.Popen": [[344, 7, 1, "", "args"], [344, 8, 1, "", "communicate"], [344, 8, 1, "", "kill"], [344, 7, 1, "", "pid"], [344, 8, 1, "", "poll"], [344, 7, 1, "", "returncode"], [344, 8, 1, "", "send_signal"], [344, 7, 1, "", "stderr"], [344, 7, 1, "", "stdin"], [344, 7, 1, "", "stdout"], [344, 8, 1, "", "terminate"], [344, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[344, 7, 1, "", "dwFlags"], [344, 7, 1, "", "hStdError"], [344, 7, 1, "", "hStdInput"], [344, 7, 1, "", "hStdOutput"], [344, 7, 1, "", "lpAttributeList"], [344, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[344, 7, 1, "", "cmd"], [344, 7, 1, "", "output"], [344, 7, 1, "", "stderr"], [344, 7, 1, "", "stdout"], [344, 7, 1, "", "timeout"]], "sunau": [[345, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [345, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [345, 9, 1, "", "AUDIO_FILE_MAGIC"], [345, 6, 1, "", "Error"], [345, 11, 1, "", "open"]], "sunau.AU_read": [[345, 8, 1, "", "close"], [345, 8, 1, "", "getcompname"], [345, 8, 1, "", "getcomptype"], [345, 8, 1, "", "getframerate"], [345, 8, 1, "", "getmark"], [345, 8, 1, "", "getmarkers"], [345, 8, 1, "", "getnchannels"], [345, 8, 1, "", "getnframes"], [345, 8, 1, "", "getparams"], [345, 8, 1, "", "getsampwidth"], [345, 8, 1, "", "readframes"], [345, 8, 1, "", "rewind"], [345, 8, 1, "", "setpos"], [345, 8, 1, "", "tell"]], "sunau.AU_write": [[345, 8, 1, "", "close"], [345, 8, 1, "", "setcomptype"], [345, 8, 1, "", "setframerate"], [345, 8, 1, "", "setnchannels"], [345, 8, 1, "", "setnframes"], [345, 8, 1, "", "setparams"], [345, 8, 1, "", "setsampwidth"], [345, 8, 1, "", "tell"], [345, 8, 1, "", "writeframes"], [345, 8, 1, "", "writeframesraw"]], "symtable": [[347, 12, 1, "", "Class"], [347, 12, 1, "", "Function"], [347, 12, 1, "", "Symbol"], [347, 12, 1, "", "SymbolTable"], [347, 11, 1, "", "symtable"]], "symtable.Class": [[347, 8, 1, "", "get_methods"]], "symtable.Function": [[347, 8, 1, "", "get_frees"], [347, 8, 1, "", "get_globals"], [347, 8, 1, "", "get_locals"], [347, 8, 1, "", "get_nonlocals"], [347, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[347, 8, 1, "", "get_name"], [347, 8, 1, "", "get_namespace"], [347, 8, 1, "", "get_namespaces"], [347, 8, 1, "", "is_annotated"], [347, 8, 1, "", "is_assigned"], [347, 8, 1, "", "is_declared_global"], [347, 8, 1, "", "is_free"], [347, 8, 1, "", "is_global"], [347, 8, 1, "", "is_imported"], [347, 8, 1, "", "is_local"], [347, 8, 1, "", "is_namespace"], [347, 8, 1, "", "is_nonlocal"], [347, 8, 1, "", "is_parameter"], [347, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[347, 8, 1, "", "get_children"], [347, 8, 1, "", "get_id"], [347, 8, 1, "", "get_identifiers"], [347, 8, 1, "", "get_lineno"], [347, 8, 1, "", "get_name"], [347, 8, 1, "", "get_symbols"], [347, 8, 1, "", "get_type"], [347, 8, 1, "", "has_children"], [347, 8, 1, "", "is_nested"], [347, 8, 1, "", "is_optimized"], [347, 8, 1, "", "lookup"]], "sys": [[348, 9, 1, "", "__breakpointhook__"], [348, 9, 1, "", "__displayhook__"], [348, 9, 1, "", "__excepthook__"], [348, 9, 1, "", "__interactivehook__"], [348, 9, 1, "", "__stderr__"], [348, 9, 1, "", "__stdin__"], [348, 9, 1, "", "__stdout__"], [348, 9, 1, "", "__unraisablehook__"], [348, 11, 1, "", "_clear_type_cache"], [348, 11, 1, "", "_current_exceptions"], [348, 11, 1, "", "_current_frames"], [348, 11, 1, "", "_debugmallocstats"], [348, 9, 1, "", "_emscripten_info"], [348, 11, 1, "", "_enablelegacywindowsfsencoding"], [348, 11, 1, "", "_getframe"], [348, 11, 1, "", "_getframemodulename"], [348, 9, 1, "", "_xoptions"], [348, 9, 1, "", "abiflags"], [348, 11, 1, "", "activate_stack_trampoline"], [348, 11, 1, "", "addaudithook"], [348, 9, 1, "", "api_version"], [348, 9, 1, "", "argv"], [348, 11, 1, "", "audit"], [348, 9, 1, "", "base_exec_prefix"], [348, 9, 1, "", "base_prefix"], [348, 11, 1, "", "breakpointhook"], [348, 9, 1, "", "builtin_module_names"], [348, 9, 1, "", "byteorder"], [348, 11, 1, "", "call_tracing"], [348, 9, 1, "", "copyright"], [348, 11, 1, "", "deactivate_stack_trampoline"], [348, 11, 1, "", "displayhook"], [348, 9, 1, "", "dllhandle"], [348, 9, 1, "", "dont_write_bytecode"], [348, 11, 1, "", "exc_info"], [348, 11, 1, "", "excepthook"], [348, 11, 1, "", "exception"], [348, 9, 1, "", "exec_prefix"], [348, 9, 1, "", "executable"], [348, 11, 1, "", "exit"], [348, 9, 1, "", "flags"], [348, 9, 1, "", "float_info"], [348, 9, 1, "", "float_repr_style"], [348, 11, 1, "", "get_asyncgen_hooks"], [348, 11, 1, "", "get_coroutine_origin_tracking_depth"], [348, 11, 1, "", "get_int_max_str_digits"], [348, 11, 1, "", "getallocatedblocks"], [348, 11, 1, "", "getandroidapilevel"], [348, 11, 1, "", "getdefaultencoding"], [348, 11, 1, "", "getdlopenflags"], [348, 11, 1, "", "getfilesystemencodeerrors"], [348, 11, 1, "", "getfilesystemencoding"], [348, 11, 1, "", "getprofile"], [348, 11, 1, "", "getrecursionlimit"], [348, 11, 1, "", "getrefcount"], [348, 11, 1, "", "getsizeof"], [348, 11, 1, "", "getswitchinterval"], [348, 11, 1, "", "gettrace"], [348, 11, 1, "", "getunicodeinternedsize"], [348, 11, 1, "", "getwindowsversion"], [348, 9, 1, "", "hash_info"], [348, 9, 1, "", "hexversion"], [348, 9, 1, "", "implementation"], [348, 9, 1, "", "int_info"], [348, 11, 1, "", "intern"], [348, 11, 1, "", "is_finalizing"], [348, 11, 1, "", "is_stack_trampoline_active"], [348, 9, 1, "", "last_exc"], [348, 9, 1, "", "last_traceback"], [348, 9, 1, "", "last_type"], [348, 9, 1, "", "last_value"], [348, 9, 1, "", "maxsize"], [348, 9, 1, "", "maxunicode"], [348, 9, 1, "", "meta_path"], [348, 9, 1, "", "modules"], [348, 9, 1, "", "orig_argv"], [348, 9, 1, "", "path"], [348, 9, 1, "", "path_hooks"], [348, 9, 1, "", "path_importer_cache"], [348, 9, 1, "", "platform"], [348, 9, 1, "", "platlibdir"], [348, 9, 1, "", "prefix"], [348, 9, 1, "", "ps1"], [348, 9, 1, "", "ps2"], [348, 9, 1, "", "pycache_prefix"], [348, 11, 1, "", "set_asyncgen_hooks"], [348, 11, 1, "", "set_coroutine_origin_tracking_depth"], [348, 11, 1, "", "set_int_max_str_digits"], [348, 11, 1, "", "setdlopenflags"], [348, 11, 1, "", "setprofile"], [348, 11, 1, "", "setrecursionlimit"], [348, 11, 1, "", "setswitchinterval"], [348, 11, 1, "", "settrace"], [348, 9, 1, "", "stderr"], [348, 9, 1, "", "stdin"], [348, 9, 1, "", "stdlib_module_names"], [348, 9, 1, "", "stdout"], [348, 9, 1, "", "thread_info"], [348, 9, 1, "", "tracebacklimit"], [348, 11, 1, "", "unraisablehook"], [348, 9, 1, "", "version"], [348, 9, 1, "", "version_info"], [348, 9, 1, "", "warnoptions"], [348, 9, 1, "", "winver"]], "sys.float_info": [[348, 7, 1, "", "dig"], [348, 7, 1, "", "epsilon"], [348, 7, 1, "", "mant_dig"], [348, 7, 1, "", "max"], [348, 7, 1, "", "max_10_exp"], [348, 7, 1, "", "max_exp"], [348, 7, 1, "", "min"], [348, 7, 1, "", "min_10_exp"], [348, 7, 1, "", "min_exp"], [348, 7, 1, "", "radix"], [348, 7, 1, "", "rounds"]], "sysconfig": [[350, 11, 1, "", "_get_preferred_schemes"], [350, 11, 1, "", "get_config_h_filename"], [350, 11, 1, "", "get_config_var"], [350, 11, 1, "", "get_config_vars"], [350, 11, 1, "", "get_default_scheme"], [350, 11, 1, "", "get_makefile_filename"], [350, 11, 1, "", "get_path"], [350, 11, 1, "", "get_path_names"], [350, 11, 1, "", "get_paths"], [350, 11, 1, "", "get_platform"], [350, 11, 1, "", "get_preferred_scheme"], [350, 11, 1, "", "get_python_version"], [350, 11, 1, "", "get_scheme_names"], [350, 11, 1, "", "is_python_build"], [350, 11, 1, "", "parse_config_h"]], "syslog": [[351, 11, 1, "", "closelog"], [351, 11, 1, "", "openlog"], [351, 11, 1, "", "setlogmask"], [351, 11, 1, "", "syslog"]], "tabnanny": [[352, 6, 1, "", "NannyNag"], [352, 11, 1, "", "check"], [352, 9, 1, "", "filename_only"], [352, 11, 1, "", "process_tokens"], [352, 9, 1, "", "verbose"]], "tarfile": [[353, 6, 1, "", "AbsoluteLinkError"], [353, 6, 1, "", "AbsolutePathError"], [353, 6, 1, "", "CompressionError"], [353, 9, 1, "", "DEFAULT_FORMAT"], [353, 9, 1, "", "ENCODING"], [353, 6, 1, "", "ExtractError"], [353, 6, 1, "", "FilterError"], [353, 9, 1, "", "GNU_FORMAT"], [353, 6, 1, "", "HeaderError"], [353, 6, 1, "", "LinkOutsideDestinationError"], [353, 6, 1, "", "OutsideDestinationError"], [353, 9, 1, "", "PAX_FORMAT"], [353, 6, 1, "", "ReadError"], [353, 6, 1, "", "SpecialFileError"], [353, 6, 1, "", "StreamError"], [353, 6, 1, "", "TarError"], [353, 12, 1, "", "TarFile"], [353, 12, 1, "", "TarInfo"], [353, 9, 1, "", "USTAR_FORMAT"], [353, 11, 1, "", "data_filter"], [353, 11, 1, "", "fully_trusted_filter"], [353, 11, 1, "", "is_tarfile"], [353, 11, 1, "", "open"], [353, 11, 1, "", "tar_filter"], [353, 14, 1, "cmdoption-tarfile-create", "--create"], [353, 14, 1, "cmdoption-tarfile-extract", "--extract"], [353, 14, 1, "cmdoption-tarfile-filter", "--filter"], [353, 14, 1, "cmdoption-tarfile-list", "--list"], [353, 14, 1, "cmdoption-tarfile-test", "--test"], [353, 14, 1, "cmdoption-tarfile-v", "--verbose"], [353, 14, 1, "cmdoption-tarfile-c", "-c"], [353, 14, 1, "cmdoption-tarfile-e", "-e"], [353, 14, 1, "cmdoption-tarfile-l", "-l"], [353, 14, 1, "cmdoption-tarfile-t", "-t"], [353, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.FilterError": [[353, 7, 1, "", "tarinfo"]], "tarfile.TarFile": [[353, 8, 1, "", "add"], [353, 8, 1, "", "addfile"], [353, 8, 1, "", "close"], [353, 7, 1, "", "errorlevel"], [353, 8, 1, "", "extract"], [353, 8, 1, "", "extractall"], [353, 8, 1, "", "extractfile"], [353, 7, 1, "", "extraction_filter"], [353, 8, 1, "", "getmember"], [353, 8, 1, "", "getmembers"], [353, 8, 1, "", "getnames"], [353, 8, 1, "", "gettarinfo"], [353, 8, 1, "", "list"], [353, 8, 1, "", "next"], [353, 8, 1, "", "open"], [353, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[353, 8, 1, "", "frombuf"], [353, 8, 1, "", "fromtarfile"], [353, 7, 1, "", "gid"], [353, 7, 1, "", "gname"], [353, 8, 1, "", "isblk"], [353, 8, 1, "", "ischr"], [353, 8, 1, "", "isdev"], [353, 8, 1, "", "isdir"], [353, 8, 1, "", "isfifo"], [353, 8, 1, "", "isfile"], [353, 8, 1, "", "islnk"], [353, 8, 1, "", "isreg"], [353, 8, 1, "", "issym"], [353, 7, 1, "", "linkname"], [353, 7, 1, "", "mode"], [353, 7, 1, "", "mtime"], [353, 7, 1, "", "name"], [353, 7, 1, "", "pax_headers"], [353, 7, 1, "", "size"], [353, 8, 1, "", "tobuf"], [353, 7, 1, "", "type"], [353, 7, 1, "", "uid"], [353, 7, 1, "", "uname"]], "telnetlib": [[354, 12, 1, "", "Telnet"]], "telnetlib.Telnet": [[354, 8, 1, "", "close"], [354, 8, 1, "", "expect"], [354, 8, 1, "", "fileno"], [354, 8, 1, "", "get_socket"], [354, 8, 1, "", "interact"], [354, 8, 1, "", "msg"], [354, 8, 1, "", "mt_interact"], [354, 8, 1, "", "open"], [354, 8, 1, "", "read_all"], [354, 8, 1, "", "read_eager"], [354, 8, 1, "", "read_lazy"], [354, 8, 1, "", "read_sb_data"], [354, 8, 1, "", "read_some"], [354, 8, 1, "", "read_until"], [354, 8, 1, "", "read_very_eager"], [354, 8, 1, "", "read_very_lazy"], [354, 8, 1, "", "set_debuglevel"], [354, 8, 1, "", "set_option_negotiation_callback"], [354, 8, 1, "", "write"]], "tempfile": [[355, 11, 1, "", "NamedTemporaryFile"], [355, 12, 1, "", "SpooledTemporaryFile"], [355, 12, 1, "", "TemporaryDirectory"], [355, 11, 1, "", "TemporaryFile"], [355, 11, 1, "", "gettempdir"], [355, 11, 1, "", "gettempdirb"], [355, 11, 1, "", "gettempprefix"], [355, 11, 1, "", "gettempprefixb"], [355, 11, 1, "", "mkdtemp"], [355, 11, 1, "", "mkstemp"], [355, 11, 1, "", "mktemp"], [355, 9, 1, "", "tempdir"]], "termios": [[356, 11, 1, "", "tcdrain"], [356, 11, 1, "", "tcflow"], [356, 11, 1, "", "tcflush"], [356, 11, 1, "", "tcgetattr"], [356, 11, 1, "", "tcgetwinsize"], [356, 11, 1, "", "tcsendbreak"], [356, 11, 1, "", "tcsetattr"], [356, 11, 1, "", "tcsetwinsize"]], "test": [[357, 10, 0, "-", "support"]], "test.support": [[357, 9, 1, "", "ALWAYS_EQ"], [357, 9, 1, "", "HAVE_DOCSTRINGS"], [357, 9, 1, "", "INTERNET_TIMEOUT"], [357, 9, 1, "", "LARGEST"], [357, 9, 1, "", "LONG_TIMEOUT"], [357, 9, 1, "", "LOOPBACK_TIMEOUT"], [357, 9, 1, "", "MAX_Py_ssize_t"], [357, 9, 1, "", "MISSING_C_DOCSTRINGS"], [357, 12, 1, "", "Matcher"], [357, 9, 1, "", "NEVER_EQ"], [357, 9, 1, "", "PGO"], [357, 9, 1, "", "PIPE_MAX_SIZE"], [357, 9, 1, "", "Py_DEBUG"], [357, 6, 1, "", "ResourceDenied"], [357, 9, 1, "", "SHORT_TIMEOUT"], [357, 9, 1, "", "SMALLEST"], [357, 9, 1, "", "SOCK_MAX_SIZE"], [357, 12, 1, "", "SaveSignals"], [357, 12, 1, "", "SuppressCrashReport"], [357, 9, 1, "", "TEST_DATA_DIR"], [357, 9, 1, "", "TEST_HOME_DIR"], [357, 9, 1, "", "TEST_HTTP_URL"], [357, 9, 1, "", "TEST_SUPPORT_DIR"], [357, 6, 1, "", "TestFailed"], [357, 11, 1, "", "adjust_int_max_str_digits"], [357, 11, 1, "", "anticipate_failure"], [357, 11, 1, "", "args_from_interpreter_flags"], [357, 11, 1, "", "bigaddrspacetest"], [357, 11, 1, "", "bigmemtest"], [357, 11, 1, "", "busy_retry"], [357, 10, 0, "-", "bytecode_helper"], [357, 11, 1, "", "calcobjsize"], [357, 11, 1, "", "calcvobjsize"], [357, 11, 1, "", "captured_stderr"], [357, 11, 1, "", "captured_stdin"], [357, 11, 1, "", "captured_stdout"], [357, 11, 1, "", "catch_unraisable_exception"], [357, 11, 1, "", "check__all__"], [357, 11, 1, "", "check_disallow_instantiation"], [357, 11, 1, "", "check_free_after_iterating"], [357, 11, 1, "", "check_impl_detail"], [357, 11, 1, "", "check_syntax_error"], [357, 11, 1, "", "checksizeof"], [357, 11, 1, "", "cpython_only"], [357, 11, 1, "", "detect_api_mismatch"], [357, 11, 1, "", "disable_faulthandler"], [357, 11, 1, "", "disable_gc"], [357, 11, 1, "", "findfile"], [357, 11, 1, "", "flush_std_streams"], [357, 11, 1, "", "gc_collect"], [357, 11, 1, "", "get_attribute"], [357, 11, 1, "", "get_original_stdout"], [357, 11, 1, "", "get_pagesize"], [357, 11, 1, "", "impl_detail"], [357, 10, 0, "-", "import_helper"], [357, 9, 1, "", "is_android"], [357, 9, 1, "", "is_jython"], [357, 11, 1, "", "is_resource_enabled"], [357, 11, 1, "", "load_package_tests"], [357, 11, 1, "", "match_test"], [357, 9, 1, "", "max_memuse"], [357, 11, 1, "", "missing_compiler_executable"], [357, 11, 1, "", "no_tracing"], [357, 11, 1, "", "open_urlresource"], [357, 11, 1, "", "optim_args_from_interpreter_flags"], [357, 10, 0, "-", "os_helper"], [357, 11, 1, "", "patch"], [357, 11, 1, "", "print_warning"], [357, 11, 1, "", "python_is_optimized"], [357, 9, 1, "", "real_max_memuse"], [357, 11, 1, "", "reap_children"], [357, 11, 1, "", "record_original_stdout"], [357, 11, 1, "", "refcount_test"], [357, 11, 1, "", "requires"], [357, 11, 1, "", "requires_IEEE_754"], [357, 11, 1, "", "requires_bz2"], [357, 11, 1, "", "requires_docstrings"], [357, 11, 1, "", "requires_freebsd_version"], [357, 11, 1, "", "requires_gzip"], [357, 11, 1, "", "requires_limited_api"], [357, 11, 1, "", "requires_linux_version"], [357, 11, 1, "", "requires_lzma"], [357, 11, 1, "", "requires_mac_version"], [357, 11, 1, "", "requires_resource"], [357, 11, 1, "", "requires_zlib"], [357, 11, 1, "", "run_doctest"], [357, 11, 1, "", "run_in_subinterp"], [357, 11, 1, "", "run_unittest"], [357, 11, 1, "", "run_with_locale"], [357, 11, 1, "", "run_with_tz"], [357, 10, 0, "-", "script_helper"], [357, 11, 1, "", "set_match_tests"], [357, 11, 1, "", "set_memlimit"], [357, 11, 1, "", "setswitchinterval"], [357, 11, 1, "", "skip_if_broken_multiprocessing_synchronize"], [357, 11, 1, "", "sleeping_retry"], [357, 10, 0, "-", "socket_helper"], [357, 11, 1, "", "sortdict"], [357, 11, 1, "", "swap_attr"], [357, 11, 1, "", "swap_item"], [357, 11, 1, "", "system_must_validate_cert"], [357, 10, 0, "-", "threading_helper"], [357, 9, 1, "", "unix_shell"], [357, 9, 1, "", "verbose"], [357, 11, 1, "", "wait_process"], [357, 10, 0, "-", "warnings_helper"], [357, 11, 1, "", "with_pymalloc"]], "test.support.Matcher": [[357, 8, 1, "", "match_value"], [357, 8, 1, "", "matches"]], "test.support.SaveSignals": [[357, 8, 1, "", "restore"], [357, 8, 1, "", "save"]], "test.support.bytecode_helper": [[357, 12, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[357, 8, 1, "", "assertInBytecode"], [357, 8, 1, "", "assertNotInBytecode"], [357, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[357, 12, 1, "", "CleanImport"], [357, 12, 1, "", "DirsOnSysPath"], [357, 11, 1, "", "forget"], [357, 11, 1, "", "import_fresh_module"], [357, 11, 1, "", "import_module"], [357, 11, 1, "", "make_legacy_pyc"], [357, 11, 1, "", "modules_cleanup"], [357, 11, 1, "", "modules_setup"], [357, 11, 1, "", "unload"]], "test.support.os_helper": [[357, 12, 1, "", "EnvironmentVarGuard"], [357, 9, 1, "", "FS_NONASCII"], [357, 12, 1, "", "FakePath"], [357, 9, 1, "", "SAVEDCWD"], [357, 9, 1, "", "TESTFN"], [357, 9, 1, "", "TESTFN_NONASCII"], [357, 9, 1, "", "TESTFN_UNDECODABLE"], [357, 9, 1, "", "TESTFN_UNENCODABLE"], [357, 9, 1, "", "TESTFN_UNICODE"], [357, 11, 1, "", "can_symlink"], [357, 11, 1, "", "can_xattr"], [357, 11, 1, "", "change_cwd"], [357, 11, 1, "", "create_empty_file"], [357, 11, 1, "", "fd_count"], [357, 11, 1, "", "fs_is_case_insensitive"], [357, 11, 1, "", "make_bad_fd"], [357, 11, 1, "", "rmdir"], [357, 11, 1, "", "rmtree"], [357, 11, 1, "", "skip_unless_symlink"], [357, 11, 1, "", "skip_unless_xattr"], [357, 11, 1, "", "temp_cwd"], [357, 11, 1, "", "temp_dir"], [357, 11, 1, "", "temp_umask"], [357, 11, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[357, 8, 1, "", "set"], [357, 8, 1, "", "unset"]], "test.support.script_helper": [[357, 11, 1, "", "assert_python_failure"], [357, 11, 1, "", "assert_python_ok"], [357, 11, 1, "", "interpreter_requires_environment"], [357, 11, 1, "", "kill_python"], [357, 11, 1, "", "make_pkg"], [357, 11, 1, "", "make_script"], [357, 11, 1, "", "make_zip_pkg"], [357, 11, 1, "", "make_zip_script"], [357, 11, 1, "", "run_python_until_end"], [357, 11, 1, "", "spawn_python"]], "test.support.socket_helper": [[357, 9, 1, "", "IPV6_ENABLED"], [357, 11, 1, "", "bind_port"], [357, 11, 1, "", "bind_unix_socket"], [357, 11, 1, "", "find_unused_port"], [357, 11, 1, "", "skip_unless_bind_unix_socket"], [357, 11, 1, "", "transient_internet"]], "test.support.threading_helper": [[357, 11, 1, "", "catch_threading_exception"], [357, 11, 1, "", "join_thread"], [357, 11, 1, "", "reap_threads"], [357, 11, 1, "", "start_threads"], [357, 11, 1, "", "threading_cleanup"], [357, 11, 1, "", "threading_setup"], [357, 11, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[357, 12, 1, "", "WarningsRecorder"], [357, 11, 1, "", "check_no_resource_warning"], [357, 11, 1, "", "check_syntax_warning"], [357, 11, 1, "", "check_warnings"], [357, 11, 1, "", "ignore_warnings"]], "textwrap": [[359, 12, 1, "", "TextWrapper"], [359, 11, 1, "", "dedent"], [359, 11, 1, "", "fill"], [359, 11, 1, "", "indent"], [359, 11, 1, "", "shorten"], [359, 11, 1, "", "wrap"]], "textwrap.TextWrapper": [[359, 7, 1, "", "break_long_words"], [359, 7, 1, "", "break_on_hyphens"], [359, 7, 1, "", "drop_whitespace"], [359, 7, 1, "", "expand_tabs"], [359, 8, 1, "", "fill"], [359, 7, 1, "", "fix_sentence_endings"], [359, 7, 1, "", "initial_indent"], [359, 7, 1, "", "max_lines"], [359, 7, 1, "", "placeholder"], [359, 7, 1, "", "replace_whitespace"], [359, 7, 1, "", "subsequent_indent"], [359, 7, 1, "", "tabsize"], [359, 7, 1, "", "width"], [359, 8, 1, "", "wrap"]], "threading": [[360, 12, 1, "", "Barrier"], [360, 12, 1, "", "BoundedSemaphore"], [360, 6, 1, "", "BrokenBarrierError"], [360, 12, 1, "", "Condition"], [360, 12, 1, "", "Event"], [360, 12, 1, "", "Lock"], [360, 12, 1, "", "RLock"], [360, 12, 1, "", "Semaphore"], [360, 9, 1, "", "TIMEOUT_MAX"], [360, 12, 1, "", "Thread"], [360, 12, 1, "", "Timer"], [360, 9, 1, "", "__excepthook__"], [360, 11, 1, "", "active_count"], [360, 11, 1, "", "current_thread"], [360, 11, 1, "", "enumerate"], [360, 11, 1, "", "excepthook"], [360, 11, 1, "", "get_ident"], [360, 11, 1, "", "get_native_id"], [360, 11, 1, "", "getprofile"], [360, 11, 1, "", "gettrace"], [360, 12, 1, "", "local"], [360, 11, 1, "", "main_thread"], [360, 11, 1, "", "setprofile"], [360, 11, 1, "", "setprofile_all_threads"], [360, 11, 1, "", "settrace"], [360, 11, 1, "", "settrace_all_threads"], [360, 11, 1, "", "stack_size"]], "threading.Barrier": [[360, 8, 1, "", "abort"], [360, 7, 1, "", "broken"], [360, 7, 1, "", "n_waiting"], [360, 7, 1, "", "parties"], [360, 8, 1, "", "reset"], [360, 8, 1, "", "wait"]], "threading.Condition": [[360, 8, 1, "", "acquire"], [360, 8, 1, "", "notify"], [360, 8, 1, "", "notify_all"], [360, 8, 1, "", "release"], [360, 8, 1, "", "wait"], [360, 8, 1, "", "wait_for"]], "threading.Event": [[360, 8, 1, "", "clear"], [360, 8, 1, "", "is_set"], [360, 8, 1, "", "set"], [360, 8, 1, "", "wait"]], "threading.Lock": [[360, 8, 1, "", "acquire"], [360, 8, 1, "", "locked"], [360, 8, 1, "", "release"]], "threading.RLock": [[360, 8, 1, "", "acquire"], [360, 8, 1, "", "release"]], "threading.Semaphore": [[360, 8, 1, "", "acquire"], [360, 8, 1, "", "release"]], "threading.Thread": [[360, 7, 1, "", "daemon"], [360, 8, 1, "", "getName"], [360, 7, 1, "", "ident"], [360, 8, 1, "", "isDaemon"], [360, 8, 1, "", "is_alive"], [360, 8, 1, "", "join"], [360, 7, 1, "", "name"], [360, 7, 1, "", "native_id"], [360, 8, 1, "", "run"], [360, 8, 1, "", "setDaemon"], [360, 8, 1, "", "setName"], [360, 8, 1, "", "start"]], "threading.Timer": [[360, 8, 1, "", "cancel"]], "time": [[361, 9, 1, "", "CLOCK_BOOTTIME"], [361, 9, 1, "", "CLOCK_HIGHRES"], [361, 9, 1, "", "CLOCK_MONOTONIC"], [361, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [361, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [361, 9, 1, "", "CLOCK_PROF"], [361, 9, 1, "", "CLOCK_REALTIME"], [361, 9, 1, "", "CLOCK_TAI"], [361, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [361, 9, 1, "", "CLOCK_UPTIME"], [361, 9, 1, "", "CLOCK_UPTIME_RAW"], [361, 9, 1, "", "altzone"], [361, 11, 1, "", "asctime"], [361, 11, 1, "", "clock_getres"], [361, 11, 1, "", "clock_gettime"], [361, 11, 1, "", "clock_gettime_ns"], [361, 11, 1, "", "clock_settime"], [361, 11, 1, "", "clock_settime_ns"], [361, 11, 1, "", "ctime"], [361, 9, 1, "", "daylight"], [361, 11, 1, "", "get_clock_info"], [361, 11, 1, "", "gmtime"], [361, 11, 1, "", "localtime"], [361, 11, 1, "", "mktime"], [361, 11, 1, "", "monotonic"], [361, 11, 1, "", "monotonic_ns"], [361, 11, 1, "", "perf_counter"], [361, 11, 1, "", "perf_counter_ns"], [361, 11, 1, "", "process_time"], [361, 11, 1, "", "process_time_ns"], [361, 11, 1, "", "pthread_getcpuclockid"], [361, 11, 1, "", "sleep"], [361, 11, 1, "", "strftime"], [361, 11, 1, "", "strptime"], [361, 12, 1, "", "struct_time"], [361, 11, 1, "", "thread_time"], [361, 11, 1, "", "thread_time_ns"], [361, 11, 1, "", "time"], [361, 11, 1, "", "time_ns"], [361, 9, 1, "", "timezone"], [361, 9, 1, "", "tzname"], [361, 11, 1, "", "tzset"]], "timeit": [[362, 12, 1, "", "Timer"], [362, 11, 1, "", "default_timer"], [362, 11, 1, "", "repeat"], [362, 11, 1, "", "timeit"], [362, 14, 1, "cmdoption-timeit-h", "--help"], [362, 14, 1, "cmdoption-timeit-n", "--number"], [362, 14, 1, "cmdoption-timeit-p", "--process"], [362, 14, 1, "cmdoption-timeit-r", "--repeat"], [362, 14, 1, "cmdoption-timeit-s", "--setup"], [362, 14, 1, "cmdoption-timeit-u", "--unit"], [362, 14, 1, "cmdoption-timeit-v", "--verbose"], [362, 14, 1, "cmdoption-timeit-h", "-h"], [362, 14, 1, "cmdoption-timeit-n", "-n"], [362, 14, 1, "cmdoption-timeit-p", "-p"], [362, 14, 1, "cmdoption-timeit-r", "-r"], [362, 14, 1, "cmdoption-timeit-s", "-s"], [362, 14, 1, "cmdoption-timeit-u", "-u"], [362, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[362, 8, 1, "", "autorange"], [362, 8, 1, "", "print_exc"], [362, 8, 1, "", "repeat"], [362, 8, 1, "", "timeit"]], "tkinter": [[364, 9, 1, "", "EXCEPTION"], [364, 9, 1, "", "READABLE"], [364, 11, 1, "", "Tcl"], [364, 12, 1, "", "Tk"], [364, 9, 1, "", "WRITABLE"], [365, 10, 0, "-", "colorchooser"], [185, 10, 0, "-", "commondialog"], [366, 10, 0, "-", "dnd"], [185, 10, 0, "-", "filedialog"], [367, 10, 0, "-", "font"], [368, 10, 0, "-", "messagebox"], [369, 10, 0, "-", "scrolledtext"], [185, 10, 0, "-", "simpledialog"], [370, 10, 0, "-", "tix"], [371, 10, 0, "-", "ttk"]], "tkinter.Tk": [[364, 7, 1, "", "children"], [364, 7, 1, "", "master"], [364, 7, 1, "", "tk"]], "tkinter.Widget.tk": [[364, 8, 1, "", "createfilehandler"], [364, 8, 1, "", "deletefilehandler"]], "tkinter.colorchooser": [[365, 12, 1, "", "Chooser"], [365, 11, 1, "", "askcolor"]], "tkinter.commondialog": [[185, 12, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[185, 8, 1, "", "show"]], "tkinter.dnd": [[366, 12, 1, "", "DndHandler"], [366, 11, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[366, 8, 1, "", "cancel"], [366, 8, 1, "", "finish"], [366, 8, 1, "", "on_motion"], [366, 8, 1, "", "on_release"]], "tkinter.filedialog": [[185, 12, 1, "", "Directory"], [185, 12, 1, "", "FileDialog"], [185, 12, 1, "", "LoadFileDialog"], [185, 12, 1, "", "Open"], [185, 12, 1, "", "SaveAs"], [185, 12, 1, "", "SaveFileDialog"], [185, 11, 1, "", "askdirectory"], [185, 11, 1, "", "askopenfile"], [185, 11, 1, "", "askopenfilename"], [185, 11, 1, "", "askopenfilenames"], [185, 11, 1, "", "askopenfiles"], [185, 11, 1, "", "asksaveasfile"], [185, 11, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[185, 8, 1, "", "cancel_command"], [185, 8, 1, "", "dirs_double_event"], [185, 8, 1, "", "dirs_select_event"], [185, 8, 1, "", "files_double_event"], [185, 8, 1, "", "files_select_event"], [185, 8, 1, "", "filter_command"], [185, 8, 1, "", "get_filter"], [185, 8, 1, "", "get_selection"], [185, 8, 1, "", "go"], [185, 8, 1, "", "ok_event"], [185, 8, 1, "", "quit"], [185, 8, 1, "", "set_filter"], [185, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[185, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[185, 8, 1, "", "ok_command"]], "tkinter.font": [[367, 9, 1, "", "BOLD"], [367, 12, 1, "", "Font"], [367, 9, 1, "", "ITALIC"], [367, 9, 1, "", "NORMAL"], [367, 9, 1, "", "ROMAN"], [367, 11, 1, "", "families"], [367, 11, 1, "", "names"], [367, 11, 1, "", "nametofont"]], "tkinter.font.Font": [[367, 8, 1, "", "actual"], [367, 8, 1, "", "cget"], [367, 8, 1, "", "config"], [367, 8, 1, "", "copy"], [367, 8, 1, "", "measure"], [367, 8, 1, "", "metrics"]], "tkinter.messagebox": [[368, 12, 1, "", "Message"], [368, 8, 1, "", "askokcancel"], [368, 8, 1, "", "askquestion"], [368, 8, 1, "", "askretrycancel"], [368, 8, 1, "", "askyesno"], [368, 8, 1, "", "askyesnocancel"], [368, 8, 1, "", "showerror"], [368, 8, 1, "", "showinfo"], [368, 8, 1, "", "showwarning"]], "tkinter.scrolledtext": [[369, 12, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[369, 7, 1, "", "frame"], [369, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[185, 12, 1, "", "Dialog"], [185, 11, 1, "", "askfloat"], [185, 11, 1, "", "askinteger"], [185, 11, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[185, 8, 1, "", "body"], [185, 8, 1, "", "buttonbox"]], "tkinter.tix": [[370, 12, 1, "", "Balloon"], [370, 12, 1, "", "ButtonBox"], [370, 12, 1, "", "CheckList"], [370, 12, 1, "", "ComboBox"], [370, 12, 1, "", "Control"], [370, 12, 1, "", "DirList"], [370, 12, 1, "", "DirSelectBox"], [370, 12, 1, "", "DirSelectDialog"], [370, 12, 1, "", "DirTree"], [370, 12, 1, "", "ExFileSelectBox"], [370, 12, 1, "", "FileEntry"], [370, 12, 1, "", "FileSelectBox"], [370, 12, 1, "", "Form"], [370, 12, 1, "", "HList"], [370, 12, 1, "", "InputOnly"], [370, 12, 1, "", "LabelEntry"], [370, 12, 1, "", "LabelFrame"], [370, 12, 1, "", "ListNoteBook"], [370, 12, 1, "", "Meter"], [370, 12, 1, "", "NoteBook"], [370, 12, 1, "", "OptionMenu"], [370, 12, 1, "", "PanedWindow"], [370, 12, 1, "", "PopupMenu"], [370, 12, 1, "", "Select"], [370, 12, 1, "", "StdButtonBox"], [370, 12, 1, "", "TList"], [370, 12, 1, "", "Tk"], [370, 12, 1, "", "Tree"], [370, 12, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[370, 8, 1, "", "tix_addbitmapdir"], [370, 8, 1, "", "tix_cget"], [370, 8, 1, "", "tix_configure"], [370, 8, 1, "", "tix_filedialog"], [370, 8, 1, "", "tix_getbitmap"], [370, 8, 1, "", "tix_getimage"], [370, 8, 1, "", "tix_option_get"], [370, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[371, 12, 1, "", "Combobox"], [371, 12, 1, "", "Notebook"], [371, 12, 1, "", "Progressbar"], [371, 12, 1, "", "Spinbox"], [371, 12, 1, "", "Style"], [371, 12, 1, "", "Treeview"], [371, 12, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[371, 8, 1, "", "current"], [371, 8, 1, "", "get"], [371, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[371, 8, 1, "", "add"], [371, 8, 1, "", "enable_traversal"], [371, 8, 1, "", "forget"], [371, 8, 1, "", "hide"], [371, 8, 1, "", "identify"], [371, 8, 1, "", "index"], [371, 8, 1, "", "insert"], [371, 8, 1, "", "select"], [371, 8, 1, "", "tab"], [371, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[371, 8, 1, "", "start"], [371, 8, 1, "", "step"], [371, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[371, 8, 1, "", "get"], [371, 8, 1, "", "set"]], "tkinter.ttk.Style": [[371, 8, 1, "", "configure"], [371, 8, 1, "", "element_create"], [371, 8, 1, "", "element_names"], [371, 8, 1, "", "element_options"], [371, 8, 1, "", "layout"], [371, 8, 1, "", "lookup"], [371, 8, 1, "", "map"], [371, 8, 1, "", "theme_create"], [371, 8, 1, "", "theme_names"], [371, 8, 1, "", "theme_settings"], [371, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[371, 8, 1, "", "bbox"], [371, 8, 1, "", "column"], [371, 8, 1, "", "delete"], [371, 8, 1, "", "detach"], [371, 8, 1, "", "exists"], [371, 8, 1, "", "focus"], [371, 8, 1, "", "get_children"], [371, 8, 1, "", "heading"], [371, 8, 1, "", "identify"], [371, 8, 1, "", "identify_column"], [371, 8, 1, "", "identify_element"], [371, 8, 1, "", "identify_region"], [371, 8, 1, "", "identify_row"], [371, 8, 1, "", "index"], [371, 8, 1, "", "insert"], [371, 8, 1, "", "item"], [371, 8, 1, "", "move"], [371, 8, 1, "", "next"], [371, 8, 1, "", "parent"], [371, 8, 1, "", "prev"], [371, 8, 1, "", "reattach"], [371, 8, 1, "", "see"], [371, 8, 1, "", "selection"], [371, 8, 1, "", "selection_add"], [371, 8, 1, "", "selection_remove"], [371, 8, 1, "", "selection_set"], [371, 8, 1, "", "selection_toggle"], [371, 8, 1, "", "set"], [371, 8, 1, "", "set_children"], [371, 8, 1, "", "tag_bind"], [371, 8, 1, "", "tag_configure"], [371, 8, 1, "", "tag_has"], [371, 8, 1, "", "xview"], [371, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[371, 8, 1, "", "identify"], [371, 8, 1, "", "instate"], [371, 8, 1, "", "state"]], "token": [[372, 9, 1, "", "AMPER"], [372, 9, 1, "", "AMPEREQUAL"], [372, 9, 1, "", "ASYNC"], [372, 9, 1, "", "AT"], [372, 9, 1, "", "ATEQUAL"], [372, 9, 1, "", "AWAIT"], [372, 9, 1, "", "CIRCUMFLEX"], [372, 9, 1, "", "CIRCUMFLEXEQUAL"], [372, 9, 1, "", "COLON"], [372, 9, 1, "", "COLONEQUAL"], [372, 9, 1, "", "COMMA"], [372, 9, 1, "", "COMMENT"], [372, 9, 1, "", "DEDENT"], [372, 9, 1, "", "DOT"], [372, 9, 1, "", "DOUBLESLASH"], [372, 9, 1, "", "DOUBLESLASHEQUAL"], [372, 9, 1, "", "DOUBLESTAR"], [372, 9, 1, "", "DOUBLESTAREQUAL"], [372, 9, 1, "", "ELLIPSIS"], [372, 9, 1, "", "ENCODING"], [372, 9, 1, "", "ENDMARKER"], [372, 9, 1, "", "EQEQUAL"], [372, 9, 1, "", "EQUAL"], [372, 9, 1, "", "ERRORTOKEN"], [372, 9, 1, "", "EXCLAMATION"], [372, 9, 1, "", "FSTRING_END"], [372, 9, 1, "", "FSTRING_MIDDLE"], [372, 9, 1, "", "FSTRING_START"], [372, 9, 1, "", "GREATER"], [372, 9, 1, "", "GREATEREQUAL"], [372, 9, 1, "", "INDENT"], [372, 11, 1, "", "ISEOF"], [372, 11, 1, "", "ISNONTERMINAL"], [372, 11, 1, "", "ISTERMINAL"], [372, 9, 1, "", "LBRACE"], [372, 9, 1, "", "LEFTSHIFT"], [372, 9, 1, "", "LEFTSHIFTEQUAL"], [372, 9, 1, "", "LESS"], [372, 9, 1, "", "LESSEQUAL"], [372, 9, 1, "", "LPAR"], [372, 9, 1, "", "LSQB"], [372, 9, 1, "", "MINEQUAL"], [372, 9, 1, "", "MINUS"], [372, 9, 1, "", "NAME"], [372, 9, 1, "", "NEWLINE"], [372, 9, 1, "", "NL"], [372, 9, 1, "", "NOTEQUAL"], [372, 9, 1, "", "NT_OFFSET"], [372, 9, 1, "", "NUMBER"], [372, 9, 1, "", "N_TOKENS"], [372, 9, 1, "", "OP"], [372, 9, 1, "", "PERCENT"], [372, 9, 1, "", "PERCENTEQUAL"], [372, 9, 1, "", "PLUS"], [372, 9, 1, "", "PLUSEQUAL"], [372, 9, 1, "", "RARROW"], [372, 9, 1, "", "RBRACE"], [372, 9, 1, "", "RIGHTSHIFT"], [372, 9, 1, "", "RIGHTSHIFTEQUAL"], [372, 9, 1, "", "RPAR"], [372, 9, 1, "", "RSQB"], [372, 9, 1, "", "SEMI"], [372, 9, 1, "", "SLASH"], [372, 9, 1, "", "SLASHEQUAL"], [372, 9, 1, "", "SOFT_KEYWORD"], [372, 9, 1, "", "STAR"], [372, 9, 1, "", "STAREQUAL"], [372, 9, 1, "", "STRING"], [372, 9, 1, "", "TILDE"], [372, 9, 1, "", "TYPE_COMMENT"], [372, 9, 1, "", "TYPE_IGNORE"], [372, 9, 1, "", "VBAR"], [372, 9, 1, "", "VBAREQUAL"], [372, 9, 1, "", "tok_name"]], "tokenize": [[373, 6, 1, "", "TokenError"], [373, 11, 1, "", "detect_encoding"], [373, 11, 1, "", "generate_tokens"], [373, 11, 1, "", "open"], [373, 11, 1, "", "tokenize"], [373, 11, 1, "", "untokenize"], [373, 14, 1, "cmdoption-tokenize-e", "--exact"], [373, 14, 1, "cmdoption-tokenize-h", "--help"], [373, 14, 1, "cmdoption-tokenize-e", "-e"], [373, 14, 1, "cmdoption-tokenize-h", "-h"]], "tomllib": [[374, 6, 1, "", "TOMLDecodeError"], [374, 11, 1, "", "load"], [374, 11, 1, "", "loads"]], "trace": [[375, 12, 1, "", "CoverageResults"], [375, 12, 1, "", "Trace"], [375, 14, 1, "cmdoption-trace-c", "--count"], [375, 14, 1, "cmdoption-trace-C", "--coverdir"], [375, 14, 1, "cmdoption-trace-f", "--file"], [375, 14, 1, "cmdoption-trace-help", "--help"], [375, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [375, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [375, 14, 1, "cmdoption-trace-l", "--listfuncs"], [375, 14, 1, "cmdoption-trace-m", "--missing"], [375, 14, 1, "cmdoption-trace-R", "--no-report"], [375, 14, 1, "cmdoption-trace-r", "--report"], [375, 14, 1, "cmdoption-trace-s", "--summary"], [375, 14, 1, "cmdoption-trace-g", "--timing"], [375, 14, 1, "cmdoption-trace-t", "--trace"], [375, 14, 1, "cmdoption-trace-T", "--trackcalls"], [375, 14, 1, "cmdoption-trace-version", "--version"], [375, 14, 1, "cmdoption-trace-C", "-C"], [375, 14, 1, "cmdoption-trace-R", "-R"], [375, 14, 1, "cmdoption-trace-T", "-T"], [375, 14, 1, "cmdoption-trace-c", "-c"], [375, 14, 1, "cmdoption-trace-f", "-f"], [375, 14, 1, "cmdoption-trace-g", "-g"], [375, 14, 1, "cmdoption-trace-l", "-l"], [375, 14, 1, "cmdoption-trace-m", "-m"], [375, 14, 1, "cmdoption-trace-r", "-r"], [375, 14, 1, "cmdoption-trace-s", "-s"], [375, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[375, 8, 1, "", "update"], [375, 8, 1, "", "write_results"]], "trace.Trace": [[375, 8, 1, "", "results"], [375, 8, 1, "", "run"], [375, 8, 1, "", "runctx"], [375, 8, 1, "", "runfunc"]], "traceback": [[376, 12, 1, "", "FrameSummary"], [376, 12, 1, "", "StackSummary"], [376, 12, 1, "", "TracebackException"], [376, 11, 1, "", "clear_frames"], [376, 11, 1, "", "extract_stack"], [376, 11, 1, "", "extract_tb"], [376, 11, 1, "", "format_exc"], [376, 11, 1, "", "format_exception"], [376, 11, 1, "", "format_exception_only"], [376, 11, 1, "", "format_list"], [376, 11, 1, "", "format_stack"], [376, 11, 1, "", "format_tb"], [376, 11, 1, "", "print_exc"], [376, 11, 1, "", "print_exception"], [376, 11, 1, "", "print_last"], [376, 11, 1, "", "print_stack"], [376, 11, 1, "", "print_tb"], [376, 11, 1, "", "walk_stack"], [376, 11, 1, "", "walk_tb"]], "traceback.StackSummary": [[376, 8, 1, "", "extract"], [376, 8, 1, "", "format"], [376, 8, 1, "", "format_frame_summary"], [376, 8, 1, "", "from_list"]], "traceback.TracebackException": [[376, 7, 1, "", "__cause__"], [376, 7, 1, "", "__context__"], [376, 7, 1, "", "__notes__"], [376, 7, 1, "", "__suppress_context__"], [376, 7, 1, "", "end_lineno"], [376, 7, 1, "", "end_offset"], [376, 7, 1, "", "exc_type"], [376, 7, 1, "", "exceptions"], [376, 7, 1, "", "filename"], [376, 8, 1, "", "format"], [376, 8, 1, "", "format_exception_only"], [376, 8, 1, "", "from_exception"], [376, 7, 1, "", "lineno"], [376, 7, 1, "", "msg"], [376, 7, 1, "", "offset"], [376, 8, 1, "", "print"], [376, 7, 1, "", "stack"], [376, 7, 1, "", "text"]], "tracemalloc": [[377, 12, 1, "", "DomainFilter"], [377, 12, 1, "", "Filter"], [377, 12, 1, "", "Frame"], [377, 12, 1, "", "Snapshot"], [377, 12, 1, "", "Statistic"], [377, 12, 1, "", "StatisticDiff"], [377, 12, 1, "", "Trace"], [377, 12, 1, "", "Traceback"], [377, 11, 1, "", "clear_traces"], [377, 11, 1, "", "get_object_traceback"], [377, 11, 1, "", "get_traceback_limit"], [377, 11, 1, "", "get_traced_memory"], [377, 11, 1, "", "get_tracemalloc_memory"], [377, 11, 1, "", "is_tracing"], [377, 11, 1, "", "reset_peak"], [377, 11, 1, "", "start"], [377, 11, 1, "", "stop"], [377, 11, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[377, 7, 1, "", "domain"], [377, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[377, 7, 1, "", "all_frames"], [377, 7, 1, "", "domain"], [377, 7, 1, "", "filename_pattern"], [377, 7, 1, "", "inclusive"], [377, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[377, 7, 1, "", "filename"], [377, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[377, 8, 1, "", "compare_to"], [377, 8, 1, "", "dump"], [377, 8, 1, "", "filter_traces"], [377, 8, 1, "", "load"], [377, 8, 1, "", "statistics"], [377, 7, 1, "", "traceback_limit"], [377, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[377, 7, 1, "", "count"], [377, 7, 1, "", "size"], [377, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[377, 7, 1, "", "count"], [377, 7, 1, "", "count_diff"], [377, 7, 1, "", "size"], [377, 7, 1, "", "size_diff"], [377, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[377, 7, 1, "", "domain"], [377, 7, 1, "", "size"], [377, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[377, 8, 1, "", "format"], [377, 7, 1, "", "total_nframe"]], "tty": [[378, 11, 1, "", "cfmakecbreak"], [378, 11, 1, "", "cfmakeraw"], [378, 11, 1, "", "setcbreak"], [378, 11, 1, "", "setraw"]], "turtle": [[379, 12, 1, "", "RawPen"], [379, 12, 1, "", "RawTurtle"], [379, 12, 1, "", "Screen"], [379, 12, 1, "", "ScrolledCanvas"], [379, 12, 1, "", "Shape"], [379, 12, 1, "", "Turtle"], [379, 12, 1, "", "TurtleScreen"], [379, 12, 1, "", "Vec2D"], [379, 11, 1, "", "addshape"], [379, 11, 1, "", "back"], [379, 11, 1, "", "backward"], [379, 11, 1, "", "begin_fill"], [379, 11, 1, "", "begin_poly"], [379, 11, 1, "", "bgcolor"], [379, 11, 1, "", "bgpic"], [379, 11, 1, "", "bk"], [379, 11, 1, "", "bye"], [379, 11, 1, "", "circle"], [379, 11, 1, "", "clear"], [379, 11, 1, "", "clearscreen"], [379, 11, 1, "", "clearstamp"], [379, 11, 1, "", "clearstamps"], [379, 11, 1, "", "clone"], [379, 11, 1, "", "color"], [379, 11, 1, "", "colormode"], [379, 11, 1, "", "degrees"], [379, 11, 1, "", "delay"], [379, 11, 1, "", "distance"], [379, 11, 1, "", "done"], [379, 11, 1, "", "dot"], [379, 11, 1, "", "down"], [379, 11, 1, "", "end_fill"], [379, 11, 1, "", "end_poly"], [379, 11, 1, "", "exitonclick"], [379, 11, 1, "", "fd"], [379, 11, 1, "", "fillcolor"], [379, 11, 1, "", "filling"], [379, 11, 1, "", "forward"], [379, 11, 1, "", "get_poly"], [379, 11, 1, "", "get_shapepoly"], [379, 11, 1, "", "getcanvas"], [379, 11, 1, "", "getpen"], [379, 11, 1, "", "getscreen"], [379, 11, 1, "", "getshapes"], [379, 11, 1, "", "getturtle"], [379, 11, 1, "", "goto"], [379, 11, 1, "", "heading"], [379, 11, 1, "", "hideturtle"], [379, 11, 1, "", "home"], [379, 11, 1, "", "ht"], [379, 11, 1, "", "isdown"], [379, 11, 1, "", "isvisible"], [379, 11, 1, "", "left"], [379, 11, 1, "", "listen"], [379, 11, 1, "", "lt"], [379, 11, 1, "", "mainloop"], [379, 11, 1, "", "mode"], [379, 11, 1, "", "numinput"], [379, 11, 1, "", "onclick"], [379, 11, 1, "", "ondrag"], [379, 11, 1, "", "onkey"], [379, 11, 1, "", "onkeypress"], [379, 11, 1, "", "onkeyrelease"], [379, 11, 1, "", "onrelease"], [379, 11, 1, "", "onscreenclick"], [379, 11, 1, "", "ontimer"], [379, 11, 1, "", "pd"], [379, 11, 1, "", "pen"], [379, 11, 1, "", "pencolor"], [379, 11, 1, "", "pendown"], [379, 11, 1, "", "pensize"], [379, 11, 1, "", "penup"], [379, 11, 1, "", "pos"], [379, 11, 1, "", "position"], [379, 11, 1, "", "pu"], [379, 11, 1, "", "radians"], [379, 11, 1, "", "register_shape"], [379, 11, 1, "", "reset"], [379, 11, 1, "", "resetscreen"], [379, 11, 1, "", "resizemode"], [379, 11, 1, "", "right"], [379, 11, 1, "", "rt"], [379, 11, 1, "", "screensize"], [379, 11, 1, "", "seth"], [379, 11, 1, "", "setheading"], [379, 11, 1, "", "setpos"], [379, 11, 1, "", "setposition"], [379, 11, 1, "", "settiltangle"], [379, 11, 1, "", "setundobuffer"], [379, 11, 1, "", "setup"], [379, 11, 1, "", "setworldcoordinates"], [379, 11, 1, "", "setx"], [379, 11, 1, "", "sety"], [379, 11, 1, "", "shape"], [379, 11, 1, "", "shapesize"], [379, 11, 1, "", "shapetransform"], [379, 11, 1, "", "shearfactor"], [379, 11, 1, "", "showturtle"], [379, 11, 1, "", "speed"], [379, 11, 1, "", "st"], [379, 11, 1, "", "stamp"], [379, 11, 1, "", "teleport"], [379, 11, 1, "", "textinput"], [379, 11, 1, "", "tilt"], [379, 11, 1, "", "tiltangle"], [379, 11, 1, "", "title"], [379, 11, 1, "", "towards"], [379, 11, 1, "", "tracer"], [379, 11, 1, "", "turtles"], [379, 11, 1, "", "turtlesize"], [379, 11, 1, "", "undo"], [379, 11, 1, "", "undobufferentries"], [379, 11, 1, "", "up"], [379, 11, 1, "", "update"], [379, 11, 1, "", "width"], [379, 11, 1, "", "window_height"], [379, 11, 1, "", "window_width"], [379, 11, 1, "", "write"], [379, 11, 1, "", "write_docstringdict"], [379, 11, 1, "", "xcor"], [379, 11, 1, "", "ycor"]], "turtle.Shape": [[379, 8, 1, "", "addcomponent"]], "types": [[380, 9, 1, "", "AsyncGeneratorType"], [380, 9, 1, "", "BuiltinFunctionType"], [380, 9, 1, "", "BuiltinMethodType"], [380, 9, 1, "", "CellType"], [380, 9, 1, "", "ClassMethodDescriptorType"], [380, 12, 1, "", "CodeType"], [380, 9, 1, "", "CoroutineType"], [380, 11, 1, "", "DynamicClassAttribute"], [380, 9, 1, "", "EllipsisType"], [380, 9, 1, "", "FrameType"], [380, 9, 1, "", "FunctionType"], [380, 9, 1, "", "GeneratorType"], [380, 12, 1, "", "GenericAlias"], [380, 9, 1, "", "GetSetDescriptorType"], [380, 9, 1, "", "LambdaType"], [380, 12, 1, "", "MappingProxyType"], [380, 9, 1, "", "MemberDescriptorType"], [380, 9, 1, "", "MethodDescriptorType"], [380, 9, 1, "", "MethodType"], [380, 9, 1, "", "MethodWrapperType"], [380, 12, 1, "", "ModuleType"], [380, 9, 1, "", "NoneType"], [380, 9, 1, "", "NotImplementedType"], [380, 12, 1, "", "SimpleNamespace"], [380, 12, 1, "", "TracebackType"], [380, 12, 1, "", "UnionType"], [380, 9, 1, "", "WrapperDescriptorType"], [380, 11, 1, "", "coroutine"], [380, 11, 1, "", "get_original_bases"], [380, 11, 1, "", "new_class"], [380, 11, 1, "", "prepare_class"], [380, 11, 1, "", "resolve_bases"]], "types.CodeType": [[380, 8, 1, "", "replace"]], "types.MappingProxyType": [[380, 8, 1, "", "copy"], [380, 8, 1, "", "get"], [380, 8, 1, "", "items"], [380, 8, 1, "", "keys"], [380, 8, 1, "", "values"]], "types.ModuleType": [[380, 7, 1, "", "__doc__"], [380, 7, 1, "", "__loader__"], [380, 7, 1, "", "__name__"], [380, 7, 1, "", "__package__"], [380, 7, 1, "", "__spec__"]], "typing": [[381, 12, 1, "", "AbstractSet"], [381, 9, 1, "", "Annotated"], [381, 9, 1, "", "Any"], [381, 9, 1, "", "AnyStr"], [381, 12, 1, "", "AsyncContextManager"], [381, 12, 1, "", "AsyncGenerator"], [381, 12, 1, "", "AsyncIterable"], [381, 12, 1, "", "AsyncIterator"], [381, 12, 1, "", "Awaitable"], [381, 12, 1, "", "BinaryIO"], [381, 12, 1, "", "ByteString"], [381, 9, 1, "", "Callable"], [381, 12, 1, "", "ChainMap"], [381, 9, 1, "", "ClassVar"], [381, 12, 1, "", "Collection"], [381, 9, 1, "", "Concatenate"], [381, 12, 1, "", "Container"], [381, 12, 1, "", "ContextManager"], [381, 12, 1, "", "Coroutine"], [381, 12, 1, "", "Counter"], [381, 12, 1, "", "DefaultDict"], [381, 12, 1, "", "Deque"], [381, 12, 1, "", "Dict"], [381, 9, 1, "", "Final"], [381, 12, 1, "", "ForwardRef"], [381, 12, 1, "", "FrozenSet"], [381, 12, 1, "", "Generator"], [381, 12, 1, "", "Generic"], [381, 12, 1, "", "Hashable"], [381, 12, 1, "", "IO"], [381, 12, 1, "", "ItemsView"], [381, 12, 1, "", "Iterable"], [381, 12, 1, "", "Iterator"], [381, 12, 1, "", "KeysView"], [381, 12, 1, "", "List"], [381, 9, 1, "", "Literal"], [381, 9, 1, "", "LiteralString"], [381, 12, 1, "", "Mapping"], [381, 12, 1, "", "MappingView"], [381, 12, 1, "", "Match"], [381, 12, 1, "", "MutableMapping"], [381, 12, 1, "", "MutableSequence"], [381, 12, 1, "", "MutableSet"], [381, 12, 1, "", "NamedTuple"], [381, 9, 1, "", "Never"], [381, 12, 1, "", "NewType"], [381, 9, 1, "", "NoReturn"], [381, 9, 1, "", "NotRequired"], [381, 9, 1, "", "Optional"], [381, 12, 1, "", "OrderedDict"], [381, 12, 1, "", "ParamSpec"], [381, 9, 1, "", "ParamSpecArgs"], [381, 9, 1, "", "ParamSpecKwargs"], [381, 12, 1, "", "Pattern"], [381, 12, 1, "", "Protocol"], [381, 9, 1, "", "Required"], [381, 12, 1, "", "Reversible"], [381, 9, 1, "", "Self"], [381, 12, 1, "", "Sequence"], [381, 12, 1, "", "Set"], [381, 12, 1, "", "Sized"], [381, 12, 1, "", "SupportsAbs"], [381, 12, 1, "", "SupportsBytes"], [381, 12, 1, "", "SupportsComplex"], [381, 12, 1, "", "SupportsFloat"], [381, 12, 1, "", "SupportsIndex"], [381, 12, 1, "", "SupportsInt"], [381, 12, 1, "", "SupportsRound"], [381, 9, 1, "", "TYPE_CHECKING"], [381, 12, 1, "", "Text"], [381, 12, 1, "", "TextIO"], [381, 9, 1, "", "Tuple"], [381, 12, 1, "", "Type"], [381, 9, 1, "", "TypeAlias"], [381, 12, 1, "", "TypeAliasType"], [381, 9, 1, "", "TypeGuard"], [381, 12, 1, "", "TypeVar"], [381, 12, 1, "", "TypeVarTuple"], [381, 12, 1, "", "TypedDict"], [381, 9, 1, "", "Union"], [381, 9, 1, "", "Unpack"], [381, 12, 1, "", "ValuesView"], [381, 11, 1, "", "assert_never"], [381, 11, 1, "", "assert_type"], [381, 11, 1, "", "cast"], [381, 11, 1, "", "clear_overloads"], [381, 11, 1, "", "dataclass_transform"], [381, 11, 1, "", "final"], [381, 11, 1, "", "get_args"], [381, 11, 1, "", "get_origin"], [381, 11, 1, "", "get_overloads"], [381, 11, 1, "", "get_type_hints"], [381, 11, 1, "", "is_typeddict"], [381, 11, 1, "", "no_type_check"], [381, 11, 1, "", "no_type_check_decorator"], [381, 11, 1, "", "overload"], [381, 11, 1, "", "override"], [381, 11, 1, "", "reveal_type"], [381, 11, 1, "", "runtime_checkable"], [381, 11, 1, "", "type_check_only"]], "typing.NewType": [[381, 7, 1, "", "__module__"], [381, 7, 1, "", "__name__"], [381, 7, 1, "", "__supertype__"]], "typing.ParamSpec": [[381, 7, 1, "", "__name__"], [381, 7, 1, "", "args"], [381, 7, 1, "", "kwargs"]], "typing.TypeAliasType": [[381, 7, 1, "", "__module__"], [381, 7, 1, "", "__name__"], [381, 7, 1, "", "__type_params__"], [381, 7, 1, "", "__value__"]], "typing.TypeVar": [[381, 7, 1, "", "__bound__"], [381, 7, 1, "", "__constraints__"], [381, 7, 1, "", "__contravariant__"], [381, 7, 1, "", "__covariant__"], [381, 7, 1, "", "__infer_variance__"], [381, 7, 1, "", "__name__"]], "typing.TypeVarTuple": [[381, 7, 1, "", "__name__"]], "typing.TypedDict": [[381, 7, 1, "", "__optional_keys__"], [381, 7, 1, "", "__required_keys__"], [381, 7, 1, "", "__total__"]], "unicodedata": [[382, 11, 1, "", "bidirectional"], [382, 11, 1, "", "category"], [382, 11, 1, "", "combining"], [382, 11, 1, "", "decimal"], [382, 11, 1, "", "decomposition"], [382, 11, 1, "", "digit"], [382, 11, 1, "", "east_asian_width"], [382, 11, 1, "", "is_normalized"], [382, 11, 1, "", "lookup"], [382, 11, 1, "", "mirrored"], [382, 11, 1, "", "name"], [382, 11, 1, "", "normalize"], [382, 11, 1, "", "numeric"], [382, 9, 1, "", "ucd_3_2_0"], [382, 9, 1, "", "unidata_version"]], "unittest": [[383, 12, 1, "", "FunctionTestCase"], [383, 12, 1, "", "IsolatedAsyncioTestCase"], [383, 6, 1, "", "SkipTest"], [383, 12, 1, "", "TestCase"], [383, 12, 1, "", "TestLoader"], [383, 12, 1, "", "TestResult"], [383, 12, 1, "", "TestSuite"], [383, 12, 1, "", "TextTestResult"], [383, 12, 1, "", "TextTestRunner"], [383, 11, 1, "", "addModuleCleanup"], [383, 9, 1, "", "defaultTestLoader"], [383, 11, 1, "", "doModuleCleanups"], [383, 8, 1, "", "enterModuleContext"], [383, 11, 1, "", "expectedFailure"], [383, 11, 1, "", "installHandler"], [383, 11, 1, "", "main"], [384, 10, 0, "-", "mock"], [383, 11, 1, "", "registerResult"], [383, 11, 1, "", "removeHandler"], [383, 11, 1, "", "removeResult"], [383, 11, 1, "", "skip"], [383, 11, 1, "", "skipIf"], [383, 11, 1, "", "skipUnless"], [383, 14, 1, "cmdoption-unittest-b", "--buffer"], [383, 14, 1, "cmdoption-unittest-c", "--catch"], [383, 14, 1, "cmdoption-unittest-durations", "--durations"], [383, 14, 1, "cmdoption-unittest-f", "--failfast"], [383, 14, 1, "cmdoption-unittest-locals", "--locals"], [383, 14, 1, "cmdoption-unittest-b", "-b"], [383, 14, 1, "cmdoption-unittest-c", "-c"], [383, 14, 1, "cmdoption-unittest-f", "-f"], [383, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[383, 8, 1, "", "addAsyncCleanup"], [383, 8, 1, "", "asyncSetUp"], [383, 8, 1, "", "asyncTearDown"], [383, 8, 1, "", "enterAsyncContext"], [383, 8, 1, "", "run"]], "unittest.TestCase": [[383, 8, 1, "", "addClassCleanup"], [383, 8, 1, "", "addCleanup"], [383, 8, 1, "", "addTypeEqualityFunc"], [383, 8, 1, "", "assertAlmostEqual"], [383, 8, 1, "", "assertCountEqual"], [383, 8, 1, "", "assertDictEqual"], [383, 8, 1, "", "assertEqual"], [383, 8, 1, "", "assertFalse"], [383, 8, 1, "", "assertGreater"], [383, 8, 1, "", "assertGreaterEqual"], [383, 8, 1, "", "assertIn"], [383, 8, 1, "", "assertIs"], [383, 8, 1, "", "assertIsInstance"], [383, 8, 1, "", "assertIsNone"], [383, 8, 1, "", "assertIsNot"], [383, 8, 1, "", "assertIsNotNone"], [383, 8, 1, "", "assertLess"], [383, 8, 1, "", "assertLessEqual"], [383, 8, 1, "", "assertListEqual"], [383, 8, 1, "", "assertLogs"], [383, 8, 1, "", "assertMultiLineEqual"], [383, 8, 1, "", "assertNoLogs"], [383, 8, 1, "", "assertNotAlmostEqual"], [383, 8, 1, "", "assertNotEqual"], [383, 8, 1, "", "assertNotIn"], [383, 8, 1, "", "assertNotIsInstance"], [383, 8, 1, "", "assertNotRegex"], [383, 8, 1, "", "assertRaises"], [383, 8, 1, "", "assertRaisesRegex"], [383, 8, 1, "", "assertRegex"], [383, 8, 1, "", "assertSequenceEqual"], [383, 8, 1, "", "assertSetEqual"], [383, 8, 1, "", "assertTrue"], [383, 8, 1, "", "assertTupleEqual"], [383, 8, 1, "", "assertWarns"], [383, 8, 1, "", "assertWarnsRegex"], [383, 8, 1, "", "countTestCases"], [383, 8, 1, "", "debug"], [383, 8, 1, "", "defaultTestResult"], [383, 8, 1, "", "doClassCleanups"], [383, 8, 1, "", "doCleanups"], [383, 8, 1, "", "enterClassContext"], [383, 8, 1, "", "enterContext"], [383, 8, 1, "", "fail"], [383, 7, 1, "", "failureException"], [383, 8, 1, "", "id"], [383, 7, 1, "", "longMessage"], [383, 7, 1, "", "maxDiff"], [383, 7, 1, "", "output"], [383, 7, 1, "", "records"], [383, 8, 1, "", "run"], [383, 8, 1, "", "setUp"], [383, 8, 1, "", "setUpClass"], [383, 8, 1, "", "shortDescription"], [383, 8, 1, "", "skipTest"], [383, 8, 1, "", "subTest"], [383, 8, 1, "", "tearDown"], [383, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[383, 8, 1, "", "discover"], [383, 7, 1, "", "errors"], [383, 8, 1, "", "getTestCaseNames"], [383, 8, 1, "", "loadTestsFromModule"], [383, 8, 1, "", "loadTestsFromName"], [383, 8, 1, "", "loadTestsFromNames"], [383, 8, 1, "", "loadTestsFromTestCase"], [383, 7, 1, "", "sortTestMethodsUsing"], [383, 7, 1, "", "suiteClass"], [383, 7, 1, "", "testMethodPrefix"], [383, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[383, 8, 1, "", "addDuration"], [383, 8, 1, "", "addError"], [383, 8, 1, "", "addExpectedFailure"], [383, 8, 1, "", "addFailure"], [383, 8, 1, "", "addSkip"], [383, 8, 1, "", "addSubTest"], [383, 8, 1, "", "addSuccess"], [383, 8, 1, "", "addUnexpectedSuccess"], [383, 7, 1, "", "buffer"], [383, 7, 1, "", "collectedDurations"], [383, 7, 1, "", "errors"], [383, 7, 1, "", "expectedFailures"], [383, 7, 1, "", "failfast"], [383, 7, 1, "", "failures"], [383, 7, 1, "", "shouldStop"], [383, 7, 1, "", "skipped"], [383, 8, 1, "", "startTest"], [383, 8, 1, "", "startTestRun"], [383, 8, 1, "", "stop"], [383, 8, 1, "", "stopTest"], [383, 8, 1, "", "stopTestRun"], [383, 7, 1, "", "tb_locals"], [383, 7, 1, "", "testsRun"], [383, 7, 1, "", "unexpectedSuccesses"], [383, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[383, 8, 1, "", "__iter__"], [383, 8, 1, "", "addTest"], [383, 8, 1, "", "addTests"], [383, 8, 1, "", "countTestCases"], [383, 8, 1, "", "debug"], [383, 8, 1, "", "run"]], "unittest.TextTestRunner": [[383, 8, 1, "", "_makeResult"], [383, 8, 1, "", "run"]], "unittest.mock": [[384, 9, 1, "", "ANY"], [384, 12, 1, "", "AsyncMock"], [384, 9, 1, "", "DEFAULT"], [384, 9, 1, "", "FILTER_DIR"], [384, 12, 1, "", "MagicMock"], [384, 12, 1, "", "Mock"], [384, 12, 1, "", "NonCallableMagicMock"], [384, 12, 1, "", "NonCallableMock"], [384, 12, 1, "", "PropertyMock"], [384, 11, 1, "", "call"], [384, 11, 1, "", "create_autospec"], [384, 11, 1, "", "mock_open"], [384, 11, 1, "", "patch"], [384, 11, 1, "", "seal"], [384, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[384, 8, 1, "", "assert_any_await"], [384, 8, 1, "", "assert_awaited"], [384, 8, 1, "", "assert_awaited_once"], [384, 8, 1, "", "assert_awaited_once_with"], [384, 8, 1, "", "assert_awaited_with"], [384, 8, 1, "", "assert_has_awaits"], [384, 8, 1, "", "assert_not_awaited"], [384, 7, 1, "", "await_args"], [384, 7, 1, "", "await_args_list"], [384, 7, 1, "", "await_count"], [384, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[384, 7, 1, "", "__class__"], [384, 8, 1, "", "__dir__"], [384, 8, 1, "", "_get_child_mock"], [384, 8, 1, "", "assert_any_call"], [384, 8, 1, "", "assert_called"], [384, 8, 1, "", "assert_called_once"], [384, 8, 1, "", "assert_called_once_with"], [384, 8, 1, "", "assert_called_with"], [384, 8, 1, "", "assert_has_calls"], [384, 8, 1, "", "assert_not_called"], [384, 8, 1, "", "attach_mock"], [384, 7, 1, "", "call_args"], [384, 7, 1, "", "call_args_list"], [384, 7, 1, "", "call_count"], [384, 7, 1, "", "called"], [384, 8, 1, "", "configure_mock"], [384, 7, 1, "", "method_calls"], [384, 8, 1, "", "mock_add_spec"], [384, 7, 1, "", "mock_calls"], [384, 8, 1, "", "reset_mock"], [384, 7, 1, "", "return_value"], [384, 7, 1, "", "side_effect"]], "unittest.mock.call": [[384, 8, 1, "", "call_list"]], "unittest.mock.patch": [[384, 11, 1, "", "dict"], [384, 11, 1, "", "multiple"], [384, 11, 1, "", "object"], [384, 11, 1, "", "stopall"]], "urllib": [[388, 10, 0, "-", "error"], [389, 10, 0, "-", "parse"], [390, 10, 0, "-", "request"], [390, 10, 0, "-", "response"], [391, 10, 0, "-", "robotparser"]], "urllib.error": [[388, 6, 1, "", "ContentTooShortError"], [388, 6, 1, "", "HTTPError"], [388, 6, 1, "", "URLError"]], "urllib.error.ContentTooShortError": [[388, 7, 1, "", "content"]], "urllib.error.HTTPError": [[388, 7, 1, "", "code"], [388, 7, 1, "", "fp"], [388, 7, 1, "", "headers"], [388, 7, 1, "", "reason"], [388, 7, 1, "", "url"]], "urllib.error.URLError": [[388, 7, 1, "", "reason"]], "urllib.parse": [[389, 12, 1, "", "DefragResult"], [389, 12, 1, "", "DefragResultBytes"], [389, 12, 1, "", "ParseResult"], [389, 12, 1, "", "ParseResultBytes"], [389, 12, 1, "", "SplitResult"], [389, 12, 1, "", "SplitResultBytes"], [389, 11, 1, "", "parse_qs"], [389, 11, 1, "", "parse_qsl"], [389, 11, 1, "", "quote"], [389, 11, 1, "", "quote_from_bytes"], [389, 11, 1, "", "quote_plus"], [389, 11, 1, "", "unquote"], [389, 11, 1, "", "unquote_plus"], [389, 11, 1, "", "unquote_to_bytes"], [389, 11, 1, "", "unwrap"], [389, 11, 1, "", "urldefrag"], [389, 11, 1, "", "urlencode"], [389, 11, 1, "", "urljoin"], [389, 11, 1, "", "urlparse"], [389, 11, 1, "", "urlsplit"], [389, 11, 1, "", "urlunparse"], [389, 11, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[389, 8, 1, "", "geturl"]], "urllib.request": [[390, 12, 1, "", "AbstractBasicAuthHandler"], [390, 12, 1, "", "AbstractDigestAuthHandler"], [390, 12, 1, "", "BaseHandler"], [390, 12, 1, "", "CacheFTPHandler"], [390, 12, 1, "", "DataHandler"], [390, 12, 1, "", "FTPHandler"], [390, 12, 1, "", "FancyURLopener"], [390, 12, 1, "", "FileHandler"], [390, 12, 1, "", "HTTPBasicAuthHandler"], [390, 12, 1, "", "HTTPCookieProcessor"], [390, 12, 1, "", "HTTPDefaultErrorHandler"], [390, 12, 1, "", "HTTPDigestAuthHandler"], [390, 12, 1, "", "HTTPErrorProcessor"], [390, 12, 1, "", "HTTPHandler"], [390, 12, 1, "", "HTTPPasswordMgr"], [390, 12, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [390, 12, 1, "", "HTTPPasswordMgrWithPriorAuth"], [390, 12, 1, "", "HTTPRedirectHandler"], [390, 12, 1, "", "HTTPSHandler"], [390, 12, 1, "", "OpenerDirector"], [390, 12, 1, "", "ProxyBasicAuthHandler"], [390, 12, 1, "", "ProxyDigestAuthHandler"], [390, 12, 1, "", "ProxyHandler"], [390, 12, 1, "", "Request"], [390, 12, 1, "", "URLopener"], [390, 12, 1, "", "UnknownHandler"], [390, 11, 1, "", "build_opener"], [390, 11, 1, "", "getproxies"], [390, 11, 1, "", "install_opener"], [390, 11, 1, "", "pathname2url"], [390, 11, 1, "", "url2pathname"], [390, 11, 1, "", "urlcleanup"], [390, 11, 1, "", "urlopen"], [390, 11, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[390, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[390, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[390, 8, 1, "", "add_parent"], [390, 8, 1, "", "close"], [390, 8, 1, "", "default_open"], [390, 8, 1, "", "http_error_default"], [390, 7, 1, "", "parent"], [390, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[390, 8, 1, "", "setMaxConns"], [390, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[390, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[390, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[390, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[390, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[390, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[390, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[390, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[390, 8, 1, "", "http_response"], [390, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[390, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[390, 8, 1, "", "add_password"], [390, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[390, 8, 1, "", "add_password"], [390, 8, 1, "", "find_user_password"], [390, 8, 1, "", "is_authenticated"], [390, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[390, 8, 1, "", "http_error_301"], [390, 8, 1, "", "http_error_302"], [390, 8, 1, "", "http_error_303"], [390, 8, 1, "", "http_error_307"], [390, 8, 1, "", "http_error_308"], [390, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[390, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[390, 8, 1, "", "add_handler"], [390, 8, 1, "", "error"], [390, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[390, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[390, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[390, 8, 1, "", "add_header"], [390, 8, 1, "", "add_unredirected_header"], [390, 7, 1, "", "data"], [390, 7, 1, "", "full_url"], [390, 8, 1, "", "get_full_url"], [390, 8, 1, "", "get_header"], [390, 8, 1, "", "get_method"], [390, 8, 1, "", "has_header"], [390, 8, 1, "", "header_items"], [390, 7, 1, "", "host"], [390, 7, 1, "", "method"], [390, 7, 1, "", "origin_req_host"], [390, 8, 1, "", "remove_header"], [390, 7, 1, "", "selector"], [390, 8, 1, "", "set_proxy"], [390, 7, 1, "", "type"], [390, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[390, 8, 1, "", "open"], [390, 8, 1, "", "open_unknown"], [390, 8, 1, "", "retrieve"], [390, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[390, 8, 1, "", "unknown_open"]], "urllib.response": [[390, 12, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[390, 7, 1, "", "code"], [390, 8, 1, "", "getcode"], [390, 8, 1, "", "geturl"], [390, 7, 1, "", "headers"], [390, 8, 1, "", "info"], [390, 7, 1, "", "status"], [390, 7, 1, "", "url"]], "urllib.robotparser": [[391, 12, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[391, 8, 1, "", "can_fetch"], [391, 8, 1, "", "crawl_delay"], [391, 8, 1, "", "modified"], [391, 8, 1, "", "mtime"], [391, 8, 1, "", "parse"], [391, 8, 1, "", "read"], [391, 8, 1, "", "request_rate"], [391, 8, 1, "", "set_url"], [391, 8, 1, "", "site_maps"]], "uu": [[392, 6, 1, "", "Error"], [392, 11, 1, "", "decode"], [392, 11, 1, "", "encode"]], "uuid": [[393, 9, 1, "", "NAMESPACE_DNS"], [393, 9, 1, "", "NAMESPACE_OID"], [393, 9, 1, "", "NAMESPACE_URL"], [393, 9, 1, "", "NAMESPACE_X500"], [393, 9, 1, "", "RESERVED_FUTURE"], [393, 9, 1, "", "RESERVED_MICROSOFT"], [393, 9, 1, "", "RESERVED_NCS"], [393, 9, 1, "", "RFC_4122"], [393, 12, 1, "", "SafeUUID"], [393, 12, 1, "", "UUID"], [393, 11, 1, "", "getnode"], [393, 11, 1, "", "uuid1"], [393, 11, 1, "", "uuid3"], [393, 11, 1, "", "uuid4"], [393, 11, 1, "", "uuid5"], [393, 14, 1, "cmdoption-uuid-h", "--help"], [393, 14, 1, "cmdoption-uuid-name", "--name"], [393, 14, 1, "cmdoption-uuid-namespace", "--namespace"], [393, 14, 1, "cmdoption-uuid-uuid", "--uuid"], [393, 14, 1, "cmdoption-uuid-N", "-N"], [393, 14, 1, "cmdoption-uuid-h", "-h"], [393, 14, 1, "cmdoption-uuid-n", "-n"], [393, 14, 1, "cmdoption-uuid-u", "-u"]], "uuid.SafeUUID": [[393, 7, 1, "", "safe"], [393, 7, 1, "", "unknown"], [393, 7, 1, "", "unsafe"]], "uuid.UUID": [[393, 7, 1, "", "bytes"], [393, 7, 1, "", "bytes_le"], [393, 7, 1, "", "fields"], [393, 7, 1, "", "hex"], [393, 7, 1, "", "int"], [393, 7, 1, "", "is_safe"], [393, 7, 1, "", "urn"], [393, 7, 1, "", "variant"], [393, 7, 1, "", "version"]], "venv": [[394, 12, 1, "", "EnvBuilder"], [394, 11, 1, "", "create"]], "venv.EnvBuilder": [[394, 8, 1, "", "create"], [394, 8, 1, "", "create_configuration"], [394, 8, 1, "", "ensure_directories"], [394, 8, 1, "", "install_scripts"], [394, 8, 1, "", "post_setup"], [394, 8, 1, "", "setup_python"], [394, 8, 1, "", "setup_scripts"], [394, 8, 1, "", "upgrade_dependencies"]], "warnings": [[395, 12, 1, "", "catch_warnings"], [395, 11, 1, "", "filterwarnings"], [395, 11, 1, "", "formatwarning"], [395, 11, 1, "", "resetwarnings"], [395, 11, 1, "", "showwarning"], [395, 11, 1, "", "simplefilter"], [395, 11, 1, "", "warn"], [395, 11, 1, "", "warn_explicit"]], "wave": [[396, 6, 1, "", "Error"], [396, 12, 1, "", "Wave_read"], [396, 12, 1, "", "Wave_write"], [396, 11, 1, "", "open"]], "wave.Wave_read": [[396, 8, 1, "", "close"], [396, 8, 1, "", "getcompname"], [396, 8, 1, "", "getcomptype"], [396, 8, 1, "", "getframerate"], [396, 8, 1, "", "getmark"], [396, 8, 1, "", "getmarkers"], [396, 8, 1, "", "getnchannels"], [396, 8, 1, "", "getnframes"], [396, 8, 1, "", "getparams"], [396, 8, 1, "", "getsampwidth"], [396, 8, 1, "", "readframes"], [396, 8, 1, "", "rewind"], [396, 8, 1, "", "setpos"], [396, 8, 1, "", "tell"]], "wave.Wave_write": [[396, 8, 1, "", "close"], [396, 8, 1, "", "setcomptype"], [396, 8, 1, "", "setframerate"], [396, 8, 1, "", "setnchannels"], [396, 8, 1, "", "setnframes"], [396, 8, 1, "", "setparams"], [396, 8, 1, "", "setsampwidth"], [396, 8, 1, "", "tell"], [396, 8, 1, "", "writeframes"], [396, 8, 1, "", "writeframesraw"]], "weakref": [[397, 9, 1, "", "CallableProxyType"], [397, 9, 1, "", "ProxyType"], [397, 9, 1, "", "ProxyTypes"], [397, 9, 1, "", "ReferenceType"], [397, 12, 1, "", "WeakKeyDictionary"], [397, 12, 1, "", "WeakMethod"], [397, 12, 1, "", "WeakSet"], [397, 12, 1, "", "WeakValueDictionary"], [397, 12, 1, "", "finalize"], [397, 11, 1, "", "getweakrefcount"], [397, 11, 1, "", "getweakrefs"], [397, 11, 1, "", "proxy"], [397, 12, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[397, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[397, 8, 1, "", "valuerefs"]], "weakref.finalize": [[397, 8, 1, "", "__call__"], [397, 7, 1, "", "alive"], [397, 7, 1, "", "atexit"], [397, 8, 1, "", "detach"], [397, 8, 1, "", "peek"]], "weakref.ref": [[397, 7, 1, "", "__callback__"]], "webbrowser": [[398, 6, 1, "", "Error"], [398, 11, 1, "", "get"], [398, 7, 1, "", "name"], [398, 11, 1, "", "open"], [398, 11, 1, "", "open_new"], [398, 11, 1, "", "open_new_tab"], [398, 11, 1, "", "register"]], "webbrowser.controller": [[398, 8, 1, "", "open"], [398, 8, 1, "", "open_new"], [398, 8, 1, "", "open_new_tab"]], "winreg": [[400, 11, 1, "", "CloseKey"], [400, 11, 1, "", "ConnectRegistry"], [400, 11, 1, "", "CreateKey"], [400, 11, 1, "", "CreateKeyEx"], [400, 11, 1, "", "DeleteKey"], [400, 11, 1, "", "DeleteKeyEx"], [400, 11, 1, "", "DeleteValue"], [400, 11, 1, "", "DisableReflectionKey"], [400, 11, 1, "", "EnableReflectionKey"], [400, 11, 1, "", "EnumKey"], [400, 11, 1, "", "EnumValue"], [400, 11, 1, "", "ExpandEnvironmentStrings"], [400, 11, 1, "", "FlushKey"], [400, 9, 1, "", "HKEY_CLASSES_ROOT"], [400, 9, 1, "", "HKEY_CURRENT_CONFIG"], [400, 9, 1, "", "HKEY_CURRENT_USER"], [400, 9, 1, "", "HKEY_DYN_DATA"], [400, 9, 1, "", "HKEY_LOCAL_MACHINE"], [400, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [400, 9, 1, "", "HKEY_USERS"], [400, 9, 1, "", "KEY_ALL_ACCESS"], [400, 9, 1, "", "KEY_CREATE_LINK"], [400, 9, 1, "", "KEY_CREATE_SUB_KEY"], [400, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [400, 9, 1, "", "KEY_EXECUTE"], [400, 9, 1, "", "KEY_NOTIFY"], [400, 9, 1, "", "KEY_QUERY_VALUE"], [400, 9, 1, "", "KEY_READ"], [400, 9, 1, "", "KEY_SET_VALUE"], [400, 9, 1, "", "KEY_WOW64_32KEY"], [400, 9, 1, "", "KEY_WOW64_64KEY"], [400, 9, 1, "", "KEY_WRITE"], [400, 11, 1, "", "LoadKey"], [400, 11, 1, "", "OpenKey"], [400, 11, 1, "", "OpenKeyEx"], [400, 11, 1, "", "QueryInfoKey"], [400, 11, 1, "", "QueryReflectionKey"], [400, 11, 1, "", "QueryValue"], [400, 11, 1, "", "QueryValueEx"], [400, 9, 1, "", "REG_BINARY"], [400, 9, 1, "", "REG_DWORD"], [400, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [400, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [400, 9, 1, "", "REG_EXPAND_SZ"], [400, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [400, 9, 1, "", "REG_LINK"], [400, 9, 1, "", "REG_MULTI_SZ"], [400, 9, 1, "", "REG_NONE"], [400, 9, 1, "", "REG_QWORD"], [400, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [400, 9, 1, "", "REG_RESOURCE_LIST"], [400, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [400, 9, 1, "", "REG_SZ"], [400, 11, 1, "", "SaveKey"], [400, 11, 1, "", "SetValue"], [400, 11, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[400, 8, 1, "", "Close"], [400, 8, 1, "", "Detach"], [400, 8, 1, "", "__enter__"], [400, 8, 1, "", "__exit__"]], "winsound": [[401, 11, 1, "", "Beep"], [401, 9, 1, "", "MB_ICONASTERISK"], [401, 9, 1, "", "MB_ICONEXCLAMATION"], [401, 9, 1, "", "MB_ICONHAND"], [401, 9, 1, "", "MB_ICONQUESTION"], [401, 9, 1, "", "MB_OK"], [401, 11, 1, "", "MessageBeep"], [401, 11, 1, "", "PlaySound"], [401, 9, 1, "", "SND_ALIAS"], [401, 9, 1, "", "SND_ASYNC"], [401, 9, 1, "", "SND_FILENAME"], [401, 9, 1, "", "SND_LOOP"], [401, 9, 1, "", "SND_MEMORY"], [401, 9, 1, "", "SND_NODEFAULT"], [401, 9, 1, "", "SND_NOSTOP"], [401, 9, 1, "", "SND_NOWAIT"], [401, 9, 1, "", "SND_PURGE"]], "wsgiref": [[402, 10, 0, "-", "handlers"], [402, 10, 0, "-", "headers"], [402, 10, 0, "-", "simple_server"], [402, 10, 0, "-", "types"], [402, 10, 0, "-", "util"], [402, 10, 0, "-", "validate"]], "wsgiref.handlers": [[402, 12, 1, "", "BaseCGIHandler"], [402, 12, 1, "", "BaseHandler"], [402, 12, 1, "", "CGIHandler"], [402, 12, 1, "", "IISCGIHandler"], [402, 12, 1, "", "SimpleHandler"], [402, 11, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[402, 8, 1, "", "_flush"], [402, 8, 1, "", "_write"], [402, 8, 1, "", "add_cgi_vars"], [402, 7, 1, "", "error_body"], [402, 7, 1, "", "error_headers"], [402, 8, 1, "", "error_output"], [402, 7, 1, "", "error_status"], [402, 8, 1, "", "get_scheme"], [402, 8, 1, "", "get_stderr"], [402, 8, 1, "", "get_stdin"], [402, 7, 1, "", "http_version"], [402, 8, 1, "", "log_exception"], [402, 7, 1, "", "origin_server"], [402, 7, 1, "", "os_environ"], [402, 8, 1, "", "run"], [402, 8, 1, "", "sendfile"], [402, 7, 1, "", "server_software"], [402, 8, 1, "", "setup_environ"], [402, 7, 1, "", "traceback_limit"], [402, 7, 1, "", "wsgi_file_wrapper"], [402, 7, 1, "", "wsgi_multiprocess"], [402, 7, 1, "", "wsgi_multithread"], [402, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[402, 12, 1, "", "Headers"]], "wsgiref.headers.Headers": [[402, 8, 1, "", "add_header"], [402, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[402, 12, 1, "", "WSGIRequestHandler"], [402, 12, 1, "", "WSGIServer"], [402, 11, 1, "", "demo_app"], [402, 11, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[402, 8, 1, "", "get_environ"], [402, 8, 1, "", "get_stderr"], [402, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[402, 8, 1, "", "get_app"], [402, 8, 1, "", "set_app"]], "wsgiref.types": [[402, 12, 1, "", "ErrorStream"], [402, 12, 1, "", "FileWrapper"], [402, 12, 1, "", "InputStream"], [402, 12, 1, "", "StartResponse"], [402, 9, 1, "", "WSGIApplication"], [402, 9, 1, "", "WSGIEnvironment"]], "wsgiref.util": [[402, 12, 1, "", "FileWrapper"], [402, 11, 1, "", "application_uri"], [402, 11, 1, "", "guess_scheme"], [402, 11, 1, "", "is_hop_by_hop"], [402, 11, 1, "", "request_uri"], [402, 11, 1, "", "setup_testing_defaults"], [402, 11, 1, "", "shift_path_info"]], "wsgiref.validate": [[402, 11, 1, "", "validator"]], "xdrlib": [[403, 6, 1, "", "ConversionError"], [403, 6, 1, "", "Error"], [403, 12, 1, "", "Packer"], [403, 12, 1, "", "Unpacker"]], "xdrlib.Packer": [[403, 8, 1, "", "get_buffer"], [403, 8, 1, "", "pack_array"], [403, 8, 1, "", "pack_bytes"], [403, 8, 1, "", "pack_double"], [403, 8, 1, "", "pack_farray"], [403, 8, 1, "", "pack_float"], [403, 8, 1, "", "pack_fopaque"], [403, 8, 1, "", "pack_fstring"], [403, 8, 1, "", "pack_list"], [403, 8, 1, "", "pack_opaque"], [403, 8, 1, "", "pack_string"], [403, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[403, 8, 1, "", "done"], [403, 8, 1, "", "get_buffer"], [403, 8, 1, "", "get_position"], [403, 8, 1, "", "reset"], [403, 8, 1, "", "set_position"], [403, 8, 1, "", "unpack_array"], [403, 8, 1, "", "unpack_bytes"], [403, 8, 1, "", "unpack_double"], [403, 8, 1, "", "unpack_farray"], [403, 8, 1, "", "unpack_float"], [403, 8, 1, "", "unpack_fopaque"], [403, 8, 1, "", "unpack_fstring"], [403, 8, 1, "", "unpack_list"], [403, 8, 1, "", "unpack_opaque"], [403, 8, 1, "", "unpack_string"]], "xml": [[405, 10, 0, "-", "dom"], [409, 10, 0, "-", "sax"]], "xml.dom.Attr": [[405, 7, 1, "", "localName"], [405, 7, 1, "", "name"], [405, 7, 1, "", "prefix"], [405, 7, 1, "", "value"]], "xml.dom.Comment": [[405, 7, 1, "", "data"]], "xml.dom": [[405, 6, 1, "", "DOMException"], [405, 6, 1, "", "DomstringSizeErr"], [405, 9, 1, "", "EMPTY_NAMESPACE"], [405, 6, 1, "", "HierarchyRequestErr"], [405, 6, 1, "", "IndexSizeErr"], [405, 6, 1, "", "InuseAttributeErr"], [405, 6, 1, "", "InvalidAccessErr"], [405, 6, 1, "", "InvalidCharacterErr"], [405, 6, 1, "", "InvalidModificationErr"], [405, 6, 1, "", "InvalidStateErr"], [405, 6, 1, "", "NamespaceErr"], [405, 6, 1, "", "NoDataAllowedErr"], [405, 6, 1, "", "NoModificationAllowedErr"], [405, 6, 1, "", "NotFoundErr"], [405, 6, 1, "", "NotSupportedErr"], [405, 6, 1, "", "SyntaxErr"], [405, 6, 1, "", "WrongDocumentErr"], [405, 9, 1, "", "XHTML_NAMESPACE"], [405, 9, 1, "", "XMLNS_NAMESPACE"], [405, 9, 1, "", "XML_NAMESPACE"], [405, 11, 1, "", "getDOMImplementation"], [406, 10, 0, "-", "minidom"], [407, 10, 0, "-", "pulldom"], [405, 11, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[405, 8, 1, "", "createDocument"], [405, 8, 1, "", "createDocumentType"], [405, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[405, 8, 1, "", "createAttribute"], [405, 8, 1, "", "createAttributeNS"], [405, 8, 1, "", "createComment"], [405, 8, 1, "", "createElement"], [405, 8, 1, "", "createElementNS"], [405, 8, 1, "", "createProcessingInstruction"], [405, 8, 1, "", "createTextNode"], [405, 7, 1, "", "documentElement"], [405, 8, 1, "", "getElementsByTagName"], [405, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[405, 7, 1, "", "entities"], [405, 7, 1, "", "internalSubset"], [405, 7, 1, "", "name"], [405, 7, 1, "", "notations"], [405, 7, 1, "", "publicId"], [405, 7, 1, "", "systemId"]], "xml.dom.Element": [[405, 8, 1, "", "getAttribute"], [405, 8, 1, "", "getAttributeNS"], [405, 8, 1, "", "getAttributeNode"], [405, 8, 1, "", "getAttributeNodeNS"], [405, 8, 1, "", "getElementsByTagName"], [405, 8, 1, "", "getElementsByTagNameNS"], [405, 8, 1, "", "hasAttribute"], [405, 8, 1, "", "hasAttributeNS"], [405, 8, 1, "", "removeAttribute"], [405, 8, 1, "", "removeAttributeNS"], [405, 8, 1, "", "removeAttributeNode"], [405, 8, 1, "", "setAttribute"], [405, 8, 1, "", "setAttributeNS"], [405, 8, 1, "", "setAttributeNode"], [405, 8, 1, "", "setAttributeNodeNS"], [405, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[405, 8, 1, "", "item"], [405, 7, 1, "", "length"]], "xml.dom.Node": [[405, 8, 1, "", "appendChild"], [405, 7, 1, "", "attributes"], [405, 7, 1, "", "childNodes"], [405, 8, 1, "", "cloneNode"], [405, 7, 1, "", "firstChild"], [405, 8, 1, "", "hasAttributes"], [405, 8, 1, "", "hasChildNodes"], [405, 8, 1, "", "insertBefore"], [405, 8, 1, "", "isSameNode"], [405, 7, 1, "", "lastChild"], [405, 7, 1, "", "localName"], [405, 7, 1, "", "namespaceURI"], [405, 7, 1, "", "nextSibling"], [405, 7, 1, "", "nodeName"], [405, 7, 1, "", "nodeType"], [405, 7, 1, "", "nodeValue"], [405, 8, 1, "", "normalize"], [405, 7, 1, "", "parentNode"], [405, 7, 1, "", "prefix"], [405, 7, 1, "", "previousSibling"], [405, 8, 1, "", "removeChild"], [405, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[405, 8, 1, "", "item"], [405, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[405, 7, 1, "", "data"], [405, 7, 1, "", "target"]], "xml.dom.Text": [[405, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[406, 8, 1, "", "toprettyxml"], [406, 8, 1, "", "toxml"], [406, 8, 1, "", "unlink"], [406, 8, 1, "", "writexml"]], "xml.dom.minidom": [[406, 11, 1, "", "parse"], [406, 11, 1, "", "parseString"]], "xml.dom.pulldom": [[407, 12, 1, "", "DOMEventStream"], [407, 12, 1, "", "PullDom"], [407, 12, 1, "", "SAX2DOM"], [407, 9, 1, "", "default_bufsize"], [407, 11, 1, "", "parse"], [407, 11, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[407, 8, 1, "", "expandNode"], [407, 8, 1, "", "getEvent"], [407, 8, 1, "", "reset"]], "xml.etree.ElementInclude": [[408, 11, 1, "", "default_loader"], [408, 11, 1, "", "include"]], "xml.etree": [[408, 10, 0, "-", "ElementTree"]], "xml.etree.ElementTree": [[408, 12, 1, "", "C14NWriterTarget"], [408, 11, 1, "", "Comment"], [408, 12, 1, "", "Element"], [408, 12, 1, "", "ElementTree"], [408, 12, 1, "", "ParseError"], [408, 11, 1, "", "ProcessingInstruction"], [408, 12, 1, "", "QName"], [408, 11, 1, "", "SubElement"], [408, 12, 1, "", "TreeBuilder"], [408, 11, 1, "", "XML"], [408, 11, 1, "", "XMLID"], [408, 12, 1, "", "XMLParser"], [408, 12, 1, "", "XMLPullParser"], [408, 11, 1, "", "canonicalize"], [408, 11, 1, "", "dump"], [408, 11, 1, "", "fromstring"], [408, 11, 1, "", "fromstringlist"], [408, 11, 1, "", "indent"], [408, 11, 1, "", "iselement"], [408, 11, 1, "", "iterparse"], [408, 11, 1, "", "parse"], [408, 11, 1, "", "register_namespace"], [408, 11, 1, "", "tostring"], [408, 11, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[408, 8, 1, "", "append"], [408, 7, 1, "", "attrib"], [408, 8, 1, "", "clear"], [408, 8, 1, "", "extend"], [408, 8, 1, "", "find"], [408, 8, 1, "", "findall"], [408, 8, 1, "", "findtext"], [408, 8, 1, "", "get"], [408, 8, 1, "", "insert"], [408, 8, 1, "", "items"], [408, 8, 1, "", "iter"], [408, 8, 1, "", "iterfind"], [408, 8, 1, "", "itertext"], [408, 8, 1, "", "keys"], [408, 8, 1, "", "makeelement"], [408, 8, 1, "", "remove"], [408, 8, 1, "", "set"], [408, 7, 1, "", "tag"], [408, 7, 1, "", "tail"], [408, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[408, 8, 1, "", "_setroot"], [408, 8, 1, "", "find"], [408, 8, 1, "", "findall"], [408, 8, 1, "", "findtext"], [408, 8, 1, "", "getroot"], [408, 8, 1, "", "iter"], [408, 8, 1, "", "iterfind"], [408, 8, 1, "", "parse"], [408, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[408, 7, 1, "", "code"], [408, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[408, 8, 1, "", "close"], [408, 8, 1, "", "comment"], [408, 8, 1, "", "data"], [408, 8, 1, "", "doctype"], [408, 8, 1, "", "end"], [408, 8, 1, "", "end_ns"], [408, 8, 1, "", "pi"], [408, 8, 1, "", "start"], [408, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[408, 8, 1, "", "close"], [408, 8, 1, "", "feed"]], "xml.etree.ElementTree.XMLPullParser": [[408, 8, 1, "", "close"], [408, 8, 1, "", "feed"], [408, 8, 1, "", "read_events"]], "xml.parsers": [[310, 10, 0, "-", "expat"]], "xml.parsers.expat": [[310, 11, 1, "", "ErrorString"], [310, 6, 1, "", "ExpatError"], [310, 11, 1, "", "ParserCreate"], [310, 9, 1, "", "XMLParserType"], [310, 6, 1, "", "error"], [310, 10, 0, "-", "errors"], [310, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[310, 7, 1, "", "code"], [310, 7, 1, "", "lineno"], [310, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[310, 9, 1, "", "XML_ERROR_ABORTED"], [310, 9, 1, "", "XML_ERROR_AMPLIFICATION_LIMIT_BREACH"], [310, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [310, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [310, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [310, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [310, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [310, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [310, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [310, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [310, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [310, 9, 1, "", "XML_ERROR_FINISHED"], [310, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [310, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [310, 9, 1, "", "XML_ERROR_INVALID_ARGUMENT"], [310, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [310, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [310, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [310, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [310, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [310, 9, 1, "", "XML_ERROR_NO_BUFFER"], [310, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [310, 9, 1, "", "XML_ERROR_NO_MEMORY"], [310, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [310, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [310, 9, 1, "", "XML_ERROR_PUBLICID"], [310, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [310, 9, 1, "", "XML_ERROR_RESERVED_NAMESPACE_URI"], [310, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XML"], [310, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XMLNS"], [310, 9, 1, "", "XML_ERROR_SUSPENDED"], [310, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [310, 9, 1, "", "XML_ERROR_SYNTAX"], [310, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [310, 9, 1, "", "XML_ERROR_TEXT_DECL"], [310, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [310, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [310, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [310, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [310, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [310, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [310, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [310, 9, 1, "", "XML_ERROR_XML_DECL"], [310, 9, 1, "", "codes"], [310, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[310, 8, 1, "", "AttlistDeclHandler"], [310, 8, 1, "", "CharacterDataHandler"], [310, 8, 1, "", "CommentHandler"], [310, 7, 1, "", "CurrentByteIndex"], [310, 7, 1, "", "CurrentColumnNumber"], [310, 7, 1, "", "CurrentLineNumber"], [310, 8, 1, "", "DefaultHandler"], [310, 8, 1, "", "DefaultHandlerExpand"], [310, 8, 1, "", "ElementDeclHandler"], [310, 8, 1, "", "EndCdataSectionHandler"], [310, 8, 1, "", "EndDoctypeDeclHandler"], [310, 8, 1, "", "EndElementHandler"], [310, 8, 1, "", "EndNamespaceDeclHandler"], [310, 8, 1, "", "EntityDeclHandler"], [310, 7, 1, "", "ErrorByteIndex"], [310, 7, 1, "", "ErrorCode"], [310, 7, 1, "", "ErrorColumnNumber"], [310, 7, 1, "", "ErrorLineNumber"], [310, 8, 1, "", "ExternalEntityParserCreate"], [310, 8, 1, "", "ExternalEntityRefHandler"], [310, 8, 1, "", "GetBase"], [310, 8, 1, "", "GetInputContext"], [310, 8, 1, "", "NotStandaloneHandler"], [310, 8, 1, "", "NotationDeclHandler"], [310, 8, 1, "", "Parse"], [310, 8, 1, "", "ParseFile"], [310, 8, 1, "", "ProcessingInstructionHandler"], [310, 8, 1, "", "SetBase"], [310, 8, 1, "", "SetParamEntityParsing"], [310, 8, 1, "", "StartCdataSectionHandler"], [310, 8, 1, "", "StartDoctypeDeclHandler"], [310, 8, 1, "", "StartElementHandler"], [310, 8, 1, "", "StartNamespaceDeclHandler"], [310, 8, 1, "", "UnparsedEntityDeclHandler"], [310, 8, 1, "", "UseForeignDTD"], [310, 8, 1, "", "XmlDeclHandler"], [310, 7, 1, "", "buffer_size"], [310, 7, 1, "", "buffer_text"], [310, 7, 1, "", "buffer_used"], [310, 7, 1, "", "ordered_attributes"], [310, 7, 1, "", "specified_attributes"]], "xml.sax": [[409, 6, 1, "", "SAXException"], [409, 6, 1, "", "SAXNotRecognizedException"], [409, 6, 1, "", "SAXNotSupportedException"], [409, 6, 1, "", "SAXParseException"], [410, 10, 0, "-", "handler"], [409, 11, 1, "", "make_parser"], [409, 11, 1, "", "parse"], [409, 11, 1, "", "parseString"], [412, 10, 0, "-", "saxutils"], [411, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[409, 8, 1, "", "getException"], [409, 8, 1, "", "getMessage"]], "xml.sax.handler": [[410, 12, 1, "", "ContentHandler"], [410, 12, 1, "", "DTDHandler"], [410, 12, 1, "", "EntityResolver"], [410, 12, 1, "", "ErrorHandler"], [410, 12, 1, "", "LexicalHandler"], [410, 9, 1, "", "all_features"], [410, 9, 1, "", "all_properties"], [410, 9, 1, "", "feature_external_ges"], [410, 9, 1, "", "feature_external_pes"], [410, 9, 1, "", "feature_namespace_prefixes"], [410, 9, 1, "", "feature_namespaces"], [410, 9, 1, "", "feature_string_interning"], [410, 9, 1, "", "feature_validation"], [410, 9, 1, "", "property_declaration_handler"], [410, 9, 1, "", "property_dom_node"], [410, 9, 1, "", "property_lexical_handler"], [410, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[410, 8, 1, "", "characters"], [410, 8, 1, "", "endDocument"], [410, 8, 1, "", "endElement"], [410, 8, 1, "", "endElementNS"], [410, 8, 1, "", "endPrefixMapping"], [410, 8, 1, "", "ignorableWhitespace"], [410, 8, 1, "", "processingInstruction"], [410, 8, 1, "", "setDocumentLocator"], [410, 8, 1, "", "skippedEntity"], [410, 8, 1, "", "startDocument"], [410, 8, 1, "", "startElement"], [410, 8, 1, "", "startElementNS"], [410, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[410, 8, 1, "", "notationDecl"], [410, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[410, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[410, 8, 1, "", "error"], [410, 8, 1, "", "fatalError"], [410, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[410, 8, 1, "", "comment"], [410, 8, 1, "", "endCDATA"], [410, 8, 1, "", "endDTD"], [410, 8, 1, "", "startCDATA"], [410, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[412, 12, 1, "", "XMLFilterBase"], [412, 12, 1, "", "XMLGenerator"], [412, 11, 1, "", "escape"], [412, 11, 1, "", "prepare_input_source"], [412, 11, 1, "", "quoteattr"], [412, 11, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[411, 8, 1, "", "getLength"], [411, 8, 1, "", "getNames"], [411, 8, 1, "", "getType"], [411, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[411, 12, 1, "", "AttributesImpl"], [411, 12, 1, "", "AttributesNSImpl"], [411, 12, 1, "", "IncrementalParser"], [411, 12, 1, "", "InputSource"], [411, 12, 1, "", "Locator"], [411, 12, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[411, 8, 1, "", "getNameByQName"], [411, 8, 1, "", "getQNameByName"], [411, 8, 1, "", "getQNames"], [411, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[411, 8, 1, "", "close"], [411, 8, 1, "", "feed"], [411, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[411, 8, 1, "", "getByteStream"], [411, 8, 1, "", "getCharacterStream"], [411, 8, 1, "", "getEncoding"], [411, 8, 1, "", "getPublicId"], [411, 8, 1, "", "getSystemId"], [411, 8, 1, "", "setByteStream"], [411, 8, 1, "", "setCharacterStream"], [411, 8, 1, "", "setEncoding"], [411, 8, 1, "", "setPublicId"], [411, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[411, 8, 1, "", "getColumnNumber"], [411, 8, 1, "", "getLineNumber"], [411, 8, 1, "", "getPublicId"], [411, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[411, 8, 1, "", "getContentHandler"], [411, 8, 1, "", "getDTDHandler"], [411, 8, 1, "", "getEntityResolver"], [411, 8, 1, "", "getErrorHandler"], [411, 8, 1, "", "getFeature"], [411, 8, 1, "", "getProperty"], [411, 8, 1, "", "parse"], [411, 8, 1, "", "setContentHandler"], [411, 8, 1, "", "setDTDHandler"], [411, 8, 1, "", "setEntityResolver"], [411, 8, 1, "", "setErrorHandler"], [411, 8, 1, "", "setFeature"], [411, 8, 1, "", "setLocale"], [411, 8, 1, "", "setProperty"]], "xmlrpc": [[414, 10, 0, "-", "client"], [415, 10, 0, "-", "server"]], "xmlrpc.client": [[414, 12, 1, "", "Binary"], [414, 12, 1, "", "DateTime"], [414, 12, 1, "", "Fault"], [414, 12, 1, "", "MultiCall"], [414, 12, 1, "", "ProtocolError"], [414, 12, 1, "", "ServerProxy"], [414, 11, 1, "", "dumps"], [414, 11, 1, "", "loads"]], "xmlrpc.client.Binary": [[414, 7, 1, "", "data"], [414, 8, 1, "", "decode"], [414, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[414, 8, 1, "", "decode"], [414, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[414, 7, 1, "", "faultCode"], [414, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[414, 7, 1, "", "errcode"], [414, 7, 1, "", "errmsg"], [414, 7, 1, "", "headers"], [414, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[414, 8, 1, "", "listMethods"], [414, 8, 1, "", "methodHelp"], [414, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[415, 12, 1, "", "CGIXMLRPCRequestHandler"], [415, 12, 1, "", "DocCGIXMLRPCRequestHandler"], [415, 12, 1, "", "DocXMLRPCRequestHandler"], [415, 12, 1, "", "DocXMLRPCServer"], [415, 12, 1, "", "SimpleXMLRPCRequestHandler"], [415, 12, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[415, 8, 1, "", "handle_request"], [415, 8, 1, "", "register_function"], [415, 8, 1, "", "register_instance"], [415, 8, 1, "", "register_introspection_functions"], [415, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[415, 8, 1, "", "set_server_documentation"], [415, 8, 1, "", "set_server_name"], [415, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[415, 8, 1, "", "set_server_documentation"], [415, 8, 1, "", "set_server_name"], [415, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[415, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[415, 8, 1, "", "register_function"], [415, 8, 1, "", "register_instance"], [415, 8, 1, "", "register_introspection_functions"], [415, 8, 1, "", "register_multicall_functions"]], "zipapp": [[416, 11, 1, "", "create_archive"], [416, 11, 1, "", "get_interpreter"], [416, 14, 1, "cmdoption-zipapp-c", "--compress"], [416, 14, 1, "cmdoption-zipapp-h", "--help"], [416, 14, 1, "cmdoption-zipapp-info", "--info"], [416, 14, 1, "cmdoption-zipapp-m", "--main"], [416, 14, 1, "cmdoption-zipapp-o", "--output"], [416, 14, 1, "cmdoption-zipapp-p", "--python"], [416, 14, 1, "cmdoption-zipapp-c", "-c"], [416, 14, 1, "cmdoption-zipapp-h", "-h"], [416, 14, 1, "cmdoption-zipapp-m", "-m"], [416, 14, 1, "cmdoption-zipapp-o", "-o"], [416, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[417, 6, 1, "", "BadZipFile"], [417, 6, 1, "", "BadZipfile"], [417, 6, 1, "", "LargeZipFile"], [417, 12, 1, "", "Path"], [417, 12, 1, "", "PyZipFile"], [417, 9, 1, "", "ZIP_BZIP2"], [417, 9, 1, "", "ZIP_DEFLATED"], [417, 9, 1, "", "ZIP_LZMA"], [417, 9, 1, "", "ZIP_STORED"], [417, 12, 1, "", "ZipFile"], [417, 12, 1, "", "ZipInfo"], [417, 11, 1, "", "is_zipfile"], [417, 14, 1, "cmdoption-zipfile-create", "--create"], [417, 14, 1, "cmdoption-zipfile-extract", "--extract"], [417, 14, 1, "cmdoption-zipfile-list", "--list"], [417, 14, 1, "cmdoption-zipfile-metadata-encoding", "--metadata-encoding"], [417, 14, 1, "cmdoption-zipfile-test", "--test"], [417, 14, 1, "cmdoption-zipfile-c", "-c"], [417, 14, 1, "cmdoption-zipfile-e", "-e"], [417, 14, 1, "cmdoption-zipfile-l", "-l"], [417, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[417, 8, 1, "", "exists"], [417, 8, 1, "", "is_dir"], [417, 8, 1, "", "is_file"], [417, 8, 1, "", "iterdir"], [417, 8, 1, "", "joinpath"], [417, 7, 1, "", "name"], [417, 8, 1, "", "open"], [417, 8, 1, "", "read_bytes"], [417, 8, 1, "", "read_text"], [417, 9, 1, "", "stem"], [417, 9, 1, "", "suffix"], [417, 9, 1, "", "suffixes"]], "zipfile.PyZipFile": [[417, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[417, 8, 1, "", "close"], [417, 7, 1, "", "comment"], [417, 7, 1, "", "debug"], [417, 8, 1, "", "extract"], [417, 8, 1, "", "extractall"], [417, 7, 1, "", "filename"], [417, 8, 1, "", "getinfo"], [417, 8, 1, "", "infolist"], [417, 8, 1, "", "mkdir"], [417, 8, 1, "", "namelist"], [417, 8, 1, "", "open"], [417, 8, 1, "", "printdir"], [417, 8, 1, "", "read"], [417, 8, 1, "", "setpassword"], [417, 8, 1, "", "testzip"], [417, 8, 1, "", "write"], [417, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[417, 7, 1, "", "CRC"], [417, 7, 1, "", "comment"], [417, 7, 1, "", "compress_size"], [417, 7, 1, "", "compress_type"], [417, 7, 1, "", "create_system"], [417, 7, 1, "", "create_version"], [417, 7, 1, "", "date_time"], [417, 7, 1, "", "external_attr"], [417, 7, 1, "", "extra"], [417, 7, 1, "", "extract_version"], [417, 7, 1, "", "file_size"], [417, 7, 1, "", "filename"], [417, 7, 1, "", "flag_bits"], [417, 8, 1, "", "from_file"], [417, 7, 1, "", "header_offset"], [417, 7, 1, "", "internal_attr"], [417, 8, 1, "", "is_dir"], [417, 7, 1, "", "reserved"], [417, 7, 1, "", "volume"]], "zipimport": [[418, 6, 1, "", "ZipImportError"], [418, 12, 1, "", "zipimporter"]], "zipimport.zipimporter": [[418, 7, 1, "", "archive"], [418, 8, 1, "", "create_module"], [418, 8, 1, "", "exec_module"], [418, 8, 1, "", "find_spec"], [418, 8, 1, "", "get_code"], [418, 8, 1, "", "get_data"], [418, 8, 1, "", "get_filename"], [418, 8, 1, "", "get_source"], [418, 8, 1, "", "invalidate_caches"], [418, 8, 1, "", "is_package"], [418, 8, 1, "", "load_module"], [418, 7, 1, "", "prefix"]], "zlib.Compress": [[419, 8, 1, "", "compress"], [419, 8, 1, "", "copy"], [419, 8, 1, "", "flush"]], "zlib.Decompress": [[419, 8, 1, "", "copy"], [419, 8, 1, "", "decompress"], [419, 7, 1, "", "eof"], [419, 8, 1, "", "flush"], [419, 7, 1, "", "unconsumed_tail"], [419, 7, 1, "", "unused_data"]], "zlib": [[419, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [419, 9, 1, "", "ZLIB_VERSION"], [419, 11, 1, "", "adler32"], [419, 11, 1, "", "compress"], [419, 11, 1, "", "compressobj"], [419, 11, 1, "", "crc32"], [419, 11, 1, "", "decompress"], [419, 11, 1, "", "decompressobj"], [419, 6, 1, "", "error"]], "zoneinfo": [[420, 6, 1, "", "InvalidTZPathWarning"], [420, 9, 1, "", "TZPATH"], [420, 12, 1, "", "ZoneInfo"], [420, 6, 1, "", "ZoneInfoNotFoundError"], [420, 11, 1, "", "available_timezones"], [420, 11, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[420, 8, 1, "", "clear_cache"], [420, 8, 1, "", "from_file"], [420, 7, 1, "", "key"], [420, 8, 1, "", "no_cache"]], "./Tools/clinic/clinic.py-[-h]-[-f]-[-o-OUTPUT]-[-v]-\\-[--converters]-[--make]-[--srcdir-SRCDIR]-[FILE-...]": [[89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters", "--converters"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f", "--force"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h", "--help"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make", "--make"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o", "--output"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir", "--srcdir"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v", "--verbose"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f", "-f"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h", "-h"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o", "-o"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v", "-v"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE", "FILE"]], "json.tool": [[258, 14, 1, "cmdoption-json.tool-indent", "--compact"], [258, 14, 1, "cmdoption-json.tool-h", "--help"], [258, 14, 1, "cmdoption-json.tool-indent", "--indent"], [258, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [258, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [258, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [258, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [258, 14, 1, "cmdoption-json.tool-indent", "--tab"], [258, 14, 1, "cmdoption-json.tool-h", "-h"], [258, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [258, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[307, 14, 1, "cmdoption-python-m-py_compile", "-"], [307, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [307, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [307, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql]": [[336, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "--help"], [336, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "--version"], [336, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "-h"], [336, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "-v"]], "unittest-discover": [[383, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [383, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [383, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [383, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [383, 14, 1, "cmdoption-unittest-discover-p", "-p"], [383, 14, 1, "cmdoption-unittest-discover-s", "-s"], [383, 14, 1, "cmdoption-unittest-discover-t", "-t"], [383, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:function", "12": "py:class", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:envvar", "16": "std:opcode", "17": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "function", "Python \u51fd\u5f0f"], "12": ["py", "class", "Python \u985e\u5225"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "16": ["std", "opcode", "opcode"], "17": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 31, 32, 33, 34, 41, 67, 69, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 94, 95, 101, 102, 106, 108, 109, 111, 154, 155, 159, 172, 176, 184, 187, 189, 210, 250, 259, 260, 262, 263, 270, 289, 293, 295, 304, 307, 308, 311, 320, 326, 329, 336, 349, 350, 353, 357, 362, 364, 372, 373, 375, 379, 416, 421, 428, 432, 433, 435, 440, 443, 444, 445, 446, 447, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "bug": [1, 32, 84, 371], "abstract": [2, 74, 98, 119, 157, 246, 249, 463], "object": [2, 8, 9, 17, 23, 24, 26, 27, 41, 43, 48, 49, 54, 55, 57, 59, 60, 62, 63, 74, 78, 83, 84, 87, 92, 93, 97, 98, 99, 100, 117, 123, 129, 136, 153, 171, 173, 175, 179, 182, 186, 199, 202, 204, 222, 231, 251, 255, 258, 263, 264, 277, 279, 289, 291, 292, 295, 297, 308, 315, 317, 319, 321, 324, 326, 334, 336, 337, 340, 344, 354, 360, 379, 381, 384, 385, 390, 397, 398, 400, 403, 405, 408, 411, 414, 417, 423, 460, 461, 463, 464, 468, 471, 472], "layer": [2, 65, 107, 473], "heap": [3, 60, 62, 98, 232], "api": [4, 5, 8, 10, 14, 31, 32, 33, 41, 56, 72, 85, 93, 112, 120, 121, 123, 127, 163, 189, 192, 203, 206, 226, 247, 295, 336, 340, 344, 377, 394, 405, 408, 416, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "abi": [4, 56, 467, 470, 476], "pars": [5, 117, 203, 288, 300, 310, 327, 372, 389, 408, 464, 467, 470, 475, 477], "argument": [5, 84, 88, 89, 117, 172, 288, 289, 344, 385, 423, 436, 456, 472, 474], "string": [5, 63, 77, 83, 84, 93, 103, 106, 255, 288, 315, 340, 341, 342, 343, 344, 420, 430, 436, 441, 457, 460, 461, 463, 465, 468, 469, 471, 474, 475, 476, 477], "and": [5, 7, 23, 25, 32, 57, 63, 70, 71, 72, 74, 75, 76, 78, 84, 87, 89, 91, 92, 93, 94, 96, 98, 100, 103, 106, 107, 117, 119, 122, 123, 125, 129, 130, 136, 143, 148, 151, 154, 157, 165, 171, 172, 179, 182, 190, 195, 202, 207, 211, 212, 222, 226, 231, 239, 243, 246, 248, 251, 255, 256, 258, 262, 264, 266, 271, 279, 288, 289, 292, 295, 300, 304, 309, 315, 320, 324, 328, 329, 333, 336, 337, 340, 343, 353, 359, 360, 361, 364, 366, 377, 379, 380, 381, 383, 384, 385, 396, 402, 405, 406, 408, 414, 420, 423, 424, 425, 427, 430, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "buffer": [5, 7, 47, 62, 100, 130, 251, 254, 295, 316, 423, 469, 471, 476], "build": [5, 70, 72, 76, 381, 407, 408, 451, 458, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "valu": [5, 72, 83, 84, 89, 93, 94, 117, 163, 172, 177, 182, 258, 288, 336, 385, 400, 422, 423, 425], "boolean": [6, 93, 288, 340, 425, 460], "protocol": [7, 10, 39, 46, 47, 48, 53, 74, 92, 98, 130, 163, 238, 244, 252, 301, 331, 337, 383, 427, 469, 471, 473, 474, 476], "structur": [7, 62, 100, 163, 172, 269, 381, 389, 424, 430], "request": [7, 334, 388, 390, 474], "type": [7, 57, 60, 62, 63, 74, 75, 93, 94, 98, 102, 106, 117, 119, 172, 177, 179, 207, 251, 272, 288, 295, 336, 340, 364, 370, 380, 381, 400, 402, 405, 422, 423, 431, 459, 460, 461, 462, 463, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477], "independ": [7, 461], "field": [7, 172, 177, 381, 467], "readon": 7, "format": [7, 99, 100, 171, 179, 243, 264, 267, 279, 295, 340, 341, 343, 353, 416, 430, 441, 447, 463, 464, 465, 466, 473, 474], "shape": [7, 379], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 379, 422], "complex": [7, 151, 340, 385], "array": [7, 8, 84, 118, 144, 172, 258, 467, 469, 471, 474], "numpi": 7, "style": [7, 84, 100, 224, 340, 356, 371, 436, 462], "pil": 7, "relat": [7, 107, 147, 246, 427, 459, 462, 463, 469], "function": [7, 25, 27, 44, 57, 63, 72, 84, 89, 92, 93, 94, 98, 103, 105, 117, 119, 147, 151, 159, 165, 168, 172, 177, 187, 222, 247, 251, 255, 257, 263, 264, 271, 278, 284, 295, 314, 315, 319, 336, 341, 344, 379, 380, 383, 385, 395, 414, 422, 425, 436, 457, 458, 461, 462, 463, 465, 471, 473, 474, 475], "byte": [8, 9, 106, 159, 172, 340, 343, 389, 430, 463, 473], "call": [10, 72, 84, 89, 94, 172, 211, 288, 384, 385, 425, 473, 476], "tp_call": 10, "vectorcal": [10, 476], "capsul": [11, 464], "cell": [12, 173], "extra": 13, "inform": [13, 91, 100, 277, 289, 318, 350], "unicod": [14, 23, 63, 106, 154, 353, 382, 457, 459, 460, 465, 470, 471], "context": [17, 100, 132, 165, 166, 182, 189, 209, 243, 279, 336, 337, 340, 385, 395, 423, 461, 462, 463, 471], "variabl": [17, 32, 84, 89, 99, 119, 165, 166, 172, 177, 231, 288, 289, 350, 364, 456, 464, 474], "coroutin": [19, 136, 251, 380, 422, 423, 473], "datetim": [20, 179, 468, 470, 471, 474, 475, 476, 477], "descriptor": [21, 92, 123, 177, 184, 210, 289, 384, 423, 459, 472, 474], "print": [23, 117, 288, 376, 463, 465], "clear": 23, "rais": [23, 84, 99, 288, 385, 431], "except": [23, 72, 84, 99, 100, 107, 117, 165, 189, 195, 209, 255, 288, 315, 329, 385, 420, 422, 438, 462, 463, 464, 465, 468, 471], "issu": [23, 98, 210, 353, 456, 463], "warn": [23, 189, 263, 357, 395, 420, 458, 464, 468, 474, 475], "queri": [23, 28, 288, 289, 328, 336], "the": [23, 28, 32, 41, 65, 72, 75, 83, 84, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 103, 106, 111, 117, 123, 129, 148, 172, 184, 189, 192, 206, 210, 211, 212, 226, 229, 247, 251, 263, 266, 278, 279, 288, 289, 292, 293, 304, 328, 333, 336, 340, 344, 347, 348, 349, 357, 360, 364, 377, 379, 381, 384, 385, 395, 405, 406, 408, 411, 416, 420, 422, 423, 425, 427, 431, 451, 456, 459, 460, 462, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477], "error": [23, 72, 84, 107, 123, 154, 182, 184, 195, 277, 288, 310, 353, 388, 438, 439, 460, 469], "indic": 23, "signal": [23, 83, 123, 182, 210, 329, 383, 471, 473, 475, 477], "handl": [23, 100, 107, 123, 132, 173, 190, 239, 268, 288, 295, 337, 383, 400, 460, 463, 464, 472, 473], "recurs": 23, "control": [23, 28, 75, 119, 336, 356, 379, 395, 398], "standard": [23, 84, 154, 185, 208, 250, 258, 288, 340, 343, 371, 380, 406, 427, 460, 477], "categori": [23, 395], "file": [24, 34, 63, 84, 89, 99, 100, 102, 106, 117, 123, 146, 163, 184, 185, 189, 210, 212, 230, 231, 243, 246, 247, 254, 264, 266, 268, 274, 278, 289, 300, 302, 307, 316, 328, 349, 353, 364, 370, 396, 408, 417, 446, 451, 456, 460, 470, 472, 473, 474, 475, 476], "float": [25, 182, 340, 430, 461], "point": [25, 93, 182, 247, 430], "pack": [25, 343], "unpack": [25, 403, 436, 473], "frame": [26, 377, 468, 474], "intern": [26, 264, 340], "support": [28, 32, 40, 44, 49, 50, 63, 74, 75, 93, 94, 100, 101, 102, 106, 125, 146, 152, 163, 165, 166, 168, 207, 226, 230, 234, 274, 308, 337, 353, 357, 366, 381, 384, 407, 408, 409, 457, 460, 463, 472, 473, 474, 475, 476, 477], "cyclic": [28, 75], "garbag": [28, 75, 98, 223, 457], "collect": [28, 75, 98, 156, 157, 187, 381, 457, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477], "collector": [28, 223], "state": [28, 32, 98, 210, 240, 251, 279, 295, 353, 371, 379], "generat": [29, 77, 89, 94, 197, 251, 288, 300, 309, 337, 340, 347, 357, 385, 425, 435, 459, 460, 461, 462, 473, 474], "initi": [32, 33, 44, 72, 349, 473, 476], "final": [32, 74, 165, 397, 422, 462, 472, 478], "thread": [32, 83, 100, 112, 123, 136, 182, 254, 263, 329, 357, 360, 364, 447, 467, 468, 469, 470, 471, 472, 473, 475, 476], "befor": 32, "global": [32, 83, 84, 98, 295, 420, 431], "configur": [32, 33, 99, 100, 163, 264, 330, 340, 350, 379, 420, 451, 464, 470, 476], "interpret": [32, 98, 152, 153, 176, 251, 338, 343, 380, 416, 459, 462, 463, 464, 469], "process": [32, 58, 98, 100, 123, 129, 177, 269, 279, 280, 289, 337, 358, 457, 463], "wide": 32, "paramet": [32, 72, 84, 89, 100, 119, 171, 172, 177, 289, 364, 381, 422, 436, 469, 476], "lock": [32, 135, 360, 471], "releas": [32, 464, 471, 472, 473, 474, 475, 476, 477, 478], "gil": [32, 469], "from": [32, 72, 78, 83, 84, 92, 98, 99, 100, 136, 151, 165, 172, 202, 214, 278, 344, 379, 385, 417, 418, 456, 460, 463], "extens": [32, 57, 70, 72, 74, 75, 76, 98, 108, 175, 243, 262, 298, 451, 471, 473], "code": [32, 84, 89, 106, 107, 111, 117, 123, 153, 155, 179, 243, 246, 251, 340, 383, 395, 436, 456, 460, 468, 470, 471, 473, 477], "non": [32, 103, 258, 337, 408, 472], "creat": [32, 60, 63, 78, 83, 84, 93, 94, 97, 100, 123, 136, 202, 231, 257, 288, 336, 385, 416, 423, 472], "caution": 32, "about": [32, 84, 148, 189, 457], "fork": 32, "sub": [32, 62, 117], "per": [32, 98, 463, 469], "caveat": [32, 262, 416], "asynchron": [32, 251, 329, 334, 381, 385, 423, 425, 474], "notif": [32, 92], "profil": [32, 101, 304], "trace": [32, 375, 377], "advanc": [32, 88, 89, 99, 189, 463], "debugg": [32, 141, 293], "local": [32, 63, 226, 262, 360, 456, 461, 467, 468, 473, 474, 475], "storag": [32, 475], "specif": [32, 74, 94, 154, 330, 341, 371, 379, 400, 460, 461, 462, 463, 464], "tss": 32, "dynam": [32, 92, 172, 380, 424], "alloc": [32, 41, 60, 74, 377, 460, 472], "tls": [32, 123, 337], "pywidestringlist": 33, "pystatus": 33, "pypreconfig": 33, "preiniti": 33, "with": [33, 70, 77, 78, 83, 84, 91, 93, 96, 97, 98, 100, 123, 134, 154, 165, 172, 182, 210, 239, 251, 263, 295, 327, 328, 336, 344, 360, 372, 381, 385, 397, 408, 416, 417, 422, 423, 424, 462, 463, 471, 473, 475, 476], "pyconfig": 33, "isol": [33, 98], "path": [33, 246, 290, 292, 349, 350, 417, 427, 456, 467, 469, 474, 476], "py_runmain": 33, "py_getargcargv": 33, "multi": [33, 44, 254, 337, 447, 461, 470, 473], "phase": [33, 44, 473], "privat": [33, 125], "provision": [33, 471], "includ": 34, "iter": [36, 84, 93, 94, 200, 214, 255, 257, 340, 383, 385, 423, 425, 435, 459, 461, 465, 473], "list": [37, 77, 84, 94, 97, 144, 316, 340, 422, 425, 436, 437, 444, 447, 457, 463, 465], "map": [39, 50, 62, 63, 163, 247, 272, 274, 340, 405, 422], "data": [40, 75, 84, 93, 94, 99, 102, 106, 107, 142, 172, 177, 207, 266, 294, 295, 303, 343, 360, 364, 420, 423, 447, 456, 461, 465, 468, 476], "marshal": [40, 270, 295, 472], "domain": [41, 154], "raw": [41, 63, 84, 254, 315], "memori": [41, 266, 274, 280, 337, 340, 377, 472, 473], "interfac": [41, 77, 78, 89, 97, 148, 180, 186, 206, 223, 230, 251, 255, 258, 289, 296, 307, 316, 330, 333, 336, 353, 357, 362, 363, 364, 375, 383, 390, 401, 411, 417, 470], "default": [41, 84, 89, 117, 177, 288, 336, 337, 353, 384, 395, 417, 456, 464, 472], "custom": [41, 89, 92, 93, 99, 100, 117, 125, 129, 163, 172, 176, 199, 255, 264, 266, 279, 295, 304, 336, 341, 423, 456, 472, 474, 475], "debug": [41, 94, 123, 148, 189, 243, 451, 464, 476], "hook": [41, 246, 316, 330, 427, 458, 460, 476], "on": [41, 76, 83, 84, 94, 97, 148, 180, 210, 222, 226, 243, 329, 333, 337, 340, 344, 385, 423, 458], "pymalloc": [41, 460], "arena": 41, "tracemalloc": [41, 377, 472, 474, 475, 477], "memoryview": [42, 340, 464, 471], "instanc": [43, 84, 92, 93, 97, 177, 193, 295, 340, 423], "method": [43, 57, 63, 72, 75, 77, 78, 83, 84, 92, 93, 98, 103, 117, 123, 165, 169, 279, 284, 288, 292, 333, 336, 340, 379, 384, 385, 397, 405, 423, 425, 435, 441, 457, 461, 462, 465, 471, 473, 474, 475, 477], "modul": [44, 72, 83, 84, 91, 94, 97, 98, 99, 100, 103, 148, 164, 177, 226, 246, 255, 263, 275, 279, 292, 295, 304, 308, 320, 336, 344, 349, 364, 379, 383, 418, 423, 427, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "singl": [44, 83, 100, 165], "low": [44, 112, 333], "level": [44, 65, 71, 99, 100, 103, 111, 112, 148, 255, 258, 263, 324, 325, 328, 333, 344, 473], "creation": [44, 97, 289, 334, 337, 380, 394, 423, 474], "lookup": [44, 92, 423], "none": 45, "number": [46, 62, 84, 107, 151, 165, 217, 258, 271, 285, 289, 444, 463], "implement": [49, 57, 78, 83, 100, 123, 165, 180, 246, 258, 317, 402, 406, 423, 429, 471, 474, 475], "for": [50, 63, 72, 84, 87, 89, 91, 99, 100, 101, 106, 117, 123, 146, 151, 152, 157, 165, 172, 173, 175, 186, 207, 224, 230, 239, 246, 249, 257, 262, 263, 280, 288, 295, 296, 315, 319, 324, 329, 334, 337, 339, 353, 357, 373, 379, 380, 381, 385, 395, 401, 402, 407, 408, 409, 410, 411, 422, 423, 425, 427, 436, 456, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "perf": [50, 101], "reflect": 52, "sequenc": [53, 59, 62, 84, 340, 344, 422, 437], "set": [54, 123, 129, 243, 246, 329, 337, 340, 364, 379, 385, 425, 437, 456, 460, 461], "ellipsi": [55, 340], "base": [57, 84, 100, 130, 153, 154, 157, 180, 209, 226, 246, 249, 254, 279, 360, 402, 410, 427, 463, 464, 470, 475], "macro": 57, "access": [57, 63, 87, 93, 98, 163, 172, 247, 248, 261, 262, 264, 280, 292, 347, 350, 361, 400, 414, 423, 459, 469, 475], "attribut": [57, 74, 75, 84, 91, 92, 93, 100, 231, 251, 263, 288, 289, 336, 340, 348, 384, 385, 411, 423, 425, 427, 458, 459, 474, 475], "of": [57, 83, 84, 87, 89, 92, 93, 94, 97, 98, 99, 100, 102, 146, 163, 165, 177, 179, 180, 184, 251, 255, 275, 279, 289, 295, 328, 329, 340, 344, 348, 349, 377, 379, 381, 385, 394, 395, 414, 417, 423, 424, 430, 451, 456, 457, 464, 465, 469, 471, 472, 473, 474, 475, 476], "member": [57, 92, 93, 251], "flag": [57, 93, 103, 117, 119, 165, 189, 251, 288, 315, 451], "defin": [57, 74, 75, 84, 89, 97, 98, 264, 288, 381, 470], "getter": [57, 98], "setter": [57, 98], "tupl": [59, 77, 84, 156, 340, 348, 381, 437], "struct": [59, 343, 471, 472, 474], "quick": [62, 117, 163, 182, 379, 384], "refer": [62, 72, 74, 84, 89, 94, 106, 172, 279, 288, 304, 336, 364, 379, 397, 402, 408, 425, 427, 447, 458], "tp": 62, "slot": [62, 63, 98], "typedef": 62, "pytypeobject": 62, "definit": [62, 92, 119, 255, 422, 435, 474], "pyobject": 62, "pyvarobject": 62, "static": [62, 84, 92, 96, 98, 102, 251, 402, 468, 469], "async": [62, 119, 422, 473], "charact": [63, 103, 173, 258, 343], "properti": [63, 92, 106, 292, 463], "encod": [63, 106, 154, 194, 258, 389, 430, 443, 460, 467, 474], "system": [63, 71, 148, 208, 211, 289, 309, 344, 417, 427, 451, 458, 471, 472, 473, 474], "wchar_t": 63, "built": [63, 94, 340, 380, 381, 457, 461, 475], "in": [63, 71, 72, 76, 78, 83, 84, 87, 89, 94, 99, 100, 102, 106, 111, 123, 136, 154, 165, 172, 177, 189, 243, 266, 267, 287, 288, 292, 336, 340, 360, 379, 380, 381, 405, 423, 456, 457, 458, 461, 465, 469, 472, 473, 474, 475, 476, 477], "codec": [63, 154, 460, 467, 470, 471, 472], "generic": [63, 74, 340, 381, 422, 423, 450, 468, 475, 477], "utf": [63, 154, 289, 456, 474, 475], "32": 63, "16": 63, "escap": 63, "latin": 63, "ascii": [63, 143, 174, 389], "mbcs": [63, 154], "window": [63, 76, 85, 91, 128, 154, 173, 185, 243, 299, 344, 364, 379, 399, 400, 401, 456, 460, 463, 464, 468, 471, 474, 475, 478], "veri": [65, 71], "high": [65, 71, 325, 328, 344], "setuptool": 70, "app": 71, "embed": [71, 349, 457], "beyond": [71, 117], "an": [71, 72, 78, 83, 84, 87, 92, 100, 106, 132, 165, 179, 190, 192, 201, 246, 258, 344, 385, 394, 408, 456, 464], "overview": [71, 92, 247, 422, 465], "pure": [71, 92], "extend": [71, 84, 89, 125, 247, 288, 289, 394, 457, 460], "compil": [71, 72, 103, 119, 155, 159, 307, 347, 420, 451, 476], "link": [71, 117, 172, 459], "under": 71, "unix": [71, 76, 83, 123, 148, 169, 180, 216, 227, 299, 351, 386, 455], "like": [71, 100, 228], "intermezzo": 72, "tabl": [72, 277, 295, 347], "linkag": 72, "extract": [72, 353, 417], "keyword": [72, 84, 177, 259, 430, 436, 467, 473, 474], "arbitrari": [72, 78, 99, 288, 436, 468], "count": 72, "ownership": 72, "rule": [72, 327, 329, 459], "thin": 72, "ice": 72, "null": [72, 89, 340], "pointer": [72, 172], "write": [72, 84, 89, 106, 125, 130, 266, 315, 336, 353, 357, 396, 462, 463], "provid": [72, 75, 99, 295, 350], "cpython": [73, 77, 96, 467, 468, 469, 472, 474, 475, 476, 477], "runtim": [73, 85, 278, 311, 420, 475, 476], "assort": 74, "topic": 74, "de": [74, 146], "present": [74, 465], "manag": [74, 92, 98, 100, 132, 165, 166, 193, 240, 279, 289, 336, 340, 344, 364, 370, 385, 395, 416, 423, 462, 463], "comparison": [74, 93, 97, 105, 212, 255, 295, 340, 425, 458, 465], "weak": [74, 397, 447, 458], "more": [74, 88, 91, 97, 100, 103, 379, 385, 469], "suggest": 74, "tutori": [75, 89, 92, 99, 172, 182, 288, 336, 379, 408], "basic": [75, 89, 107, 189, 292, 370, 379, 415, 423], "adding": [75, 100, 288, 464, 471, 474], "to": [75, 78, 83, 84, 88, 89, 93, 98, 99, 100, 101, 102, 106, 151, 180, 186, 246, 247, 255, 261, 262, 264, 272, 289, 292, 295, 304, 336, 344, 347, 350, 364, 379, 381, 384, 385, 457, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "exampl": [75, 92, 100, 152, 157, 163, 165, 179, 184, 186, 189, 196, 275, 288, 315, 328, 341, 353, 376, 385, 390, 394, 414], "finer": [75, 93, 471], "over": [75, 84, 214], "subclass": [75, 84, 93, 100, 239, 317, 385, 423], "other": [75, 78, 84, 93, 97, 99, 100, 117, 136, 255, 278, 288, 295, 340, 381, 430, 457, 458, 459, 460, 464, 465, 471, 472, 473, 474, 475], "cookbook": [76, 93, 100], "approach": [76, 465, 467], "differ": [76, 84, 93, 186, 231, 377, 379], "between": [76, 84, 106, 143, 279, 288, 430], "use": [76, 83, 84, 89, 93, 97, 99, 100, 102, 103, 148, 159, 165, 192, 231, 266, 275, 278, 279, 292, 304, 310, 336, 344, 350, 357, 360, 370, 371, 372, 379, 383, 385, 390, 420, 423, 462, 463, 469, 471, 476], "dlls": [76, 172], "practic": [76, 84, 87, 92, 322], "self": [77, 84, 89, 337, 468, 476], "express": [77, 78, 89, 94, 103, 106, 119, 315, 425, 431, 461, 462, 476], "index": [77, 84, 364, 460, 462], "len": 77, "join": [77, 430], "switch": [77, 471], "case": [77, 98, 383, 422, 458], "lambda": [77, 84, 94, 425, 436], "dictionari": [77, 100, 264, 385, 425, 437, 464, 466, 470, 471, 477], "sort": [77, 84, 105], "spec": [77, 427], "goto": 77, "if": [77, 84, 99, 179, 246, 422, 436], "while": [77, 422], "def": 77, "class": [77, 78, 84, 89, 92, 93, 98, 100, 117, 119, 153, 154, 157, 177, 195, 209, 212, 226, 246, 249, 251, 254, 277, 279, 295, 304, 308, 312, 325, 340, 343, 379, 380, 381, 383, 384, 385, 390, 402, 410, 420, 422, 423, 430, 435, 459, 462, 463, 468, 471, 474], "how": [78, 83, 84, 88, 89, 93, 100, 101, 189, 288, 336, 364, 379], "can": [78, 83, 84, 246, 295], "evalu": [78, 424, 425, 474, 475], "py_buildvalu": 78, "pyerr_print": 78, "stdout": [78, 83], "stderr": [78, 83], "do": [78, 83, 84, 364], "make": [78, 84, 98, 102, 315, 379, 457, 464, 469, 473, 474], "linux": [78, 101, 108, 289, 299, 455], "__builtin_new": 78, "__pure_virtu": 78, "some": 78, "through": 78, "inherit": [78, 177, 289, 379, 435, 459, 472], "beta": [79, 478], "www": [79, 83], "org": [79, 456], "monti": 79, "gui": [80, 100, 277, 454], "tkinter": [80, 185, 243, 364, 365, 366, 367, 368, 369, 370, 371, 468, 469, 473, 474, 475, 476], "tk": [80, 363, 364, 370, 371, 464], "key": [80, 105, 231, 243, 279, 337, 471], "bind": [80, 243, 336, 364, 424], "find": [83, 84, 172, 275, 315, 408, 456], "or": [83, 84, 100, 117, 123, 172, 179, 340, 344, 375, 376, 422, 436], "applic": [83, 91, 92, 100, 154, 226, 243, 343, 416, 456, 462, 473], "perform": [83, 84, 103, 254, 295, 451, 465, 471], "task": [83, 121, 123, 125, 136], "math": [83, 271, 468, 469, 470, 471, 473, 474, 475, 476, 477], "py": [83, 102, 111, 468], "socket": [83, 100, 104, 107, 123, 130, 133, 333, 337, 357, 421, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477], "regex": 83, "script": [83, 84, 148, 275, 350, 379, 456, 462], "curs": [83, 91, 173, 174, 175, 467, 471, 473, 476, 477], "termcap": 83, "is": [83, 84, 91, 99, 111, 179, 304, 461, 465], "there": [83, 84], "equival": [83, 84, 92], "onexit": 83, "whi": [83, 84, 461], "don": [83, 84], "my": [83, 84], "handler": [83, 99, 100, 107, 123, 137, 154, 210, 263, 264, 265, 329, 334, 364, 402, 410], "work": [83, 84, 123, 182, 189, 336, 381, 417], "document": [83, 197, 309, 405, 408, 415, 436, 463, 464, 471, 472, 476, 478], "doc": 83, "get": [83, 84, 88, 97, 129, 377, 379, 385], "keypress": [83, 85], "at": 83, "time": [83, 99, 100, 179, 361, 420, 460, 468, 470, 471, 473, 474, 475, 476, 477], "parcel": 83, "out": [83, 98, 295, 476], "among": 83, "bunch": 83, "worker": [83, 279], "what": [83, 84, 91, 99, 111, 189, 288, 295, 304, 364, 457], "kind": [83, 92], "mutat": 83, "are": [83, 84, 93, 189, 288, 472], "safe": [83, 98, 472], "seem": 83, "os": [83, 209, 289, 290, 292, 344, 357, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "read": [83, 98, 106, 123, 130, 248, 266, 353, 396], "pipe": [83, 123, 279, 297], "popen": [83, 344, 470], "rs232": 83, "doesn": 83, "close": [83, 92], "sys": [83, 117, 348, 349, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477], "stdin": 83, "realli": 83, "it": [83, 84, 107, 189, 288], "network": [83, 97, 100, 123, 255, 256, 333, 334, 464], "internet": [83, 252, 342], "cgi": [83, 148, 149, 473], "submiss": 83, "post": [83, 177], "html": [83, 234, 235, 236, 470, 471, 472], "avoid": [83, 100], "block": [83, 100, 102, 337, 377, 408, 422, 465], "connect": [83, 123, 130, 264, 279, 333, 336], "you": [83, 84, 102, 477], "persist": [83, 294, 295, 326], "stand": 84, "alon": 84, "binari": [84, 102, 108, 142, 143, 154, 254, 340, 343, 414, 425, 447], "guid": [84, 89, 288, 336, 384], "program": [84, 91, 106, 132, 173, 226, 262, 279, 364, 424], "core": [84, 117, 457, 475, 478], "languag": [84, 226, 234, 260, 341, 379, 457], "am": 84, "unboundlocalerror": 84, "when": [84, 93, 97], "has": 84, "loop": [84, 123, 125, 130, 257], "all": [84, 279, 288, 315, 377, 385, 464, 473, 474], "return": [84, 89, 92, 172, 385, 431, 456], "same": [84, 100, 385, 476], "result": [84, 101, 338, 389], "share": [84, 172, 279, 280, 471], "across": [84, 100, 280], "best": [84, 87, 101, 322, 337], "import": [84, 111, 119, 207, 246, 247, 263, 264, 265, 357, 364, 385, 418, 427, 431, 445, 458, 460, 461, 462, 463, 468, 471, 472], "pass": [84, 94, 100, 172, 431, 436], "option": [84, 88, 89, 102, 117, 189, 224, 230, 243, 258, 288, 296, 353, 364, 371, 375, 417, 450, 451, 474], "one": [84, 98, 146], "anoth": 84, "output": [84, 88, 89, 100, 243, 328, 447], "by": [84, 89, 172, 275, 390, 464, 472], "higher": [84, 148, 222], "order": [84, 172, 177, 222, 264, 288, 343, 385, 425, 464, 465, 466, 474], "up": [84, 107, 165, 246], "comma": [84, 460], "oper": [84, 94, 105, 222, 239, 255, 278, 287, 289, 328, 337, 340, 341, 425, 430, 459, 465, 468, 471, 472, 473, 477], "preced": [84, 425], "possibl": [84, 379], "obfusc": 84, "liner": 84, "doe": [84, 364], "slash": 84, "mean": 84, "22": 84, "10": [84, 87, 377, 467, 474, 475, 478], "int": [84, 340], "liter": [84, 106, 119, 422, 425, 430, 441, 463, 468, 471, 474], "instead": [84, 89, 102, 465], "syntaxerror": [84, 467], "modifi": [84, 103, 375, 408, 456], "place": [84, 287], "perl": 84, "chomp": 84, "remov": [84, 456, 462, 463, 464, 469, 472, 473, 474, 475, 476, 477], "trail": 84, "newlin": [84, 460], "scanf": [84, 315], "sscanf": 84, "unicodedecodeerror": 84, "unicodeencodeerro": 84, "end": [84, 91], "odd": 84, "backslash": [84, 103], "too": 84, "slow": 84, "speed": 84, "most": 84, "effici": [84, 257, 328], "way": 84, "concaten": [84, 430], "mani": 84, "togeth": [84, 288], "convert": [84, 89, 106, 143, 336, 344], "negat": 84, "revers": [84, 461], "duplic": [84, 93], "multipl": [84, 98, 99, 100, 214, 384, 385, 459, 473], "item": [84, 371], "multidimension": 84, "appli": [84, 385], "a_tupl": 84, "addit": [84, 203, 340, 380, 456, 473], "want": 84, "complic": 84, "schwartzian": 84, "transform": [84, 154, 468], "check": [84, 102, 189, 246, 288, 315, 385, 402, 423, 477], "given": 84, "deleg": [84, 471], "deriv": [84, 93, 231], "that": [84, 92, 93, 94, 100, 262], "organ": [84, 383], "easier": 84, "chang": [84, 89, 98, 99, 226, 379, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "overload": 84, "constructor": [84, 125, 226, 344], "tri": [84, 165, 422, 462], "__spam": 84, "_someclassname__spam": 84, "__del__": [84, 397], "but": 84, "not": [84, 340, 379], "delet": [84, 384, 457], "id": [84, 361], "appear": [84, 379], "be": [84, 246, 295], "uniqu": [84, 93], "reli": 84, "ident": [84, 425], "test": [84, 94, 148, 189, 337, 357, 383, 385, 395, 425, 473, 478], "cach": [84, 427, 476], "pyc": [84, 470, 475], "current": [84, 123, 251, 377], "name": [84, 92, 93, 103, 117, 154, 207, 258, 289, 348, 353, 380, 384, 385, 423, 424, 425, 460, 471], "have": 84, "mutual": [84, 117], "each": 84, "__import__": 84, "edit": [84, 243, 442], "reimport": 84, "show": [84, 475], "this": [84, 98], "happen": [84, 99], "pyd": 85, "dll": 85, "tab": [85, 371, 442], "ms": [85, 278, 399], "win": 85, "crt": 85, "l1": 85, "annot": [87, 340, 381, 424, 431, 436, 474, 475], "dict": [87, 100, 340, 384, 385, 474], "newer": 87, "older": [87, 344, 353], "manual": [87, 166, 304, 337, 364], "un": 87, "stringiz": 87, "__annotations__": 87, "ani": [87, 165, 381, 384], "version": [87, 97, 102, 247, 288, 337, 353, 395, 456, 469, 470], "quirk": 87, "argpars": [88, 117, 464, 467, 470, 472, 473, 475], "short": 88, "littl": 88, "specifi": [88, 102, 172, 266, 381, 416, 464, 466], "ambigu": 88, "conflict": [88, 288], "translat": [88, 226, 379], "clinic": [89, 472], "background": [89, 98, 262, 288], "concept": [89, 364], "terminolog": [89, 288], "command": [89, 117, 119, 152, 159, 186, 206, 224, 230, 243, 251, 258, 288, 289, 293, 296, 307, 330, 336, 344, 353, 357, 373, 375, 383, 417, 456, 464, 470, 471, 472, 474], "line": [89, 117, 119, 152, 159, 186, 206, 214, 224, 230, 243, 251, 258, 261, 288, 289, 296, 307, 316, 330, 336, 353, 357, 373, 375, 383, 417, 430, 456, 461, 464, 470, 471], "renam": 89, "pyarg_unpacktupl": 89, "group": [89, 94, 103, 117, 136, 209, 229, 288, 383, 422], "real": 89, "legaci": [89, 163, 344, 390, 475], "py_buff": 89, "assign": [89, 425, 431, 457, 476], "symbol": [89, 208, 347], "as": [89, 97, 99, 100, 165, 255, 343, 350, 379, 384, 422, 462, 463, 471, 476], "clone": 89, "exist": [89, 130, 385], "meth_o": 89, "meth_noarg": 89, "tp_new": 89, "tp_init": 89, "redirect": [89, 456], "ifdef": 89, "trick": 89, "start": [91, 163, 182, 279, 379, 384, 385], "pad": 91, "display": [91, 99, 123, 173, 377, 425, 458], "text": [91, 102, 154, 173, 189, 243, 261, 315, 340, 358, 359, 369, 405, 465], "color": [91, 243, 365, 379], "user": [91, 210, 243, 264, 304, 363, 381, 463], "input": [91, 173, 185, 214, 339, 373, 379], "howto": [92, 93, 94, 106], "primer": 92, "simpl": [92, 103, 189, 231, 327, 402, 431, 459, 460], "constant": [92, 173, 274, 310, 336, 341, 344, 361, 372, 400], "thought": 92, "complet": [92, 243, 316, 319, 324, 442], "valid": [92, 402], "technic": 92, "introduct": [92, 106, 304], "invoc": [92, 344], "super": 92, "summari": [92, 277, 471, 472, 473, 474, 475, 476, 477], "logic": [92, 182, 255, 430], "automat": [92, 93, 243], "orm": 92, "__slots__": [92, 423, 467], "enum": [93, 207, 467, 468, 472, 473, 474, 475], "programmat": [93, 246, 296, 375], "enumer": [93, 207, 460], "their": [93, 315, 385], "ensur": 93, "allow": 93, "restrict": [93, 295, 326, 390, 424], "dataclass": [93, 177, 467, 468, 475], "pickl": [93, 168, 295, 296, 420, 460, 471, 472, 473, 474, 476], "intenum": 93, "strenum": 93, "intflag": 93, "__new__": 93, "vs": [93, 315, 381, 465], "__init__": [93, 177], "__dunder__": [93, 207], "_sunder_": [93, 207], "_private__nam": 93, "mix": 93, "combin": [93, 337], "minutia": 93, "aka": 93, "omit": 93, "auto": 93, "descript": [93, 157, 310], "orderedenum": 93, "duplicatefreeenum": 93, "planet": 93, "timeperiod": 93, "enumtyp": 93, "formal": [94, 469], "provabl": 94, "modular": 94, "eas": 94, "compos": 94, "comprehens": [94, 119, 437, 457, 469, 474], "into": [94, 100, 379, 389], "itertool": [94, 257, 467, 469, 470, 471, 475, 476], "new": [94, 288, 395, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "element": [94, 405, 408], "select": [94, 100, 185, 324, 337, 421, 470, 471, 472], "combinator": 94, "functool": [94, 222, 468, 470, 471, 472, 473, 475, 476], "small": 94, "revis": 94, "histori": [94, 316, 442], "acknowledg": 94, "general": [94, 147, 288, 329, 451, 473], "instrument": 96, "dtrace": [96, 474], "systemtap": [96, 474], "enabl": [96, 101, 123, 464, 472], "marker": 96, "probe": [96, 474], "avail": [96, 179, 395], "tapset": 96, "ipaddress": [97, 255, 471, 472, 473, 475, 477], "address": [97, 255, 279], "note": [97, 182, 203, 207, 329, 333, 334, 337, 371, 423], "ip": [97, 255], "host": [97, 255], "inspect": [97, 251, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477], "detail": [97, 157, 262, 264], "fail": [97, 473], "who": 98, "should": [98, 477], "enter": 98, "surpris": [98, 172], "edg": [98, 324], "opt": 98, "limit": [98, 258, 318, 340, 417, 456], "regular": [98, 103, 106, 315, 427], "lifetim": [98, 125], "open": [98, 100, 107, 123, 248], "scope": [98, 424, 435, 458, 459], "lossless": 98, "convers": [98, 151, 172, 255, 271, 340, 361, 425, 461], "log": [99, 100, 263, 264, 265, 279, 447, 460, 464, 468, 470, 471, 472, 473, 474, 475, 476], "messag": [99, 100, 192, 201, 203, 226, 231, 262, 267, 368, 469], "date": [99, 123, 179, 460], "next": [99, 478], "step": [99, 451], "flow": [99, 119], "logger": [99, 100, 263], "formatt": [99, 100, 263], "no": [99, 472], "librari": [99, 100, 109, 159, 172, 250, 255, 351, 384, 451, 463, 478], "dure": 99, "optim": [99, 460, 461, 462, 463, 464, 469, 470, 471, 473, 474, 475, 476, 477], "resourc": [99, 100, 248, 249, 318, 417, 471, 472, 475], "destin": 100, "server": [100, 123, 130, 241, 334, 337, 402, 414, 415, 470, 475], "deal": 100, "send": 100, "receiv": 100, "event": [100, 123, 125, 135, 321, 329, 360, 364, 371, 379], "run": [100, 123, 132, 136, 243, 357, 383, 456], "listen": [100, 279], "product": 100, "contextu": 100, "your": [100, 102, 148, 172, 226, 288, 385, 477], "loggeradapt": [100, 263], "impart": 100, "than": 100, "filter": [100, 263, 266, 353, 375, 377, 395], "contextvar": [100, 166, 475], "concurr": [100, 122, 136, 160, 161, 162, 470, 473, 474, 475, 477], "futur": [100, 110, 123, 125, 126, 162, 431, 464, 469, 470, 473, 474, 475, 477], "processpoolexecutor": [100, 162], "deploy": 100, "web": [100, 239, 398, 470], "gunicorn": 100, "uwsgi": 100, "rotat": 100, "altern": [100, 317, 429, 456], "logrecord": [100, 263], "queuehandl": [100, 264, 265], "zeromq": 100, "queuelisten": [100, 264, 265], "namer": 100, "elabor": 100, "multiprocess": [100, 279, 280, 463, 471, 472, 473, 474, 475, 476, 477], "insert": 100, "bom": [100, 154], "sent": 100, "sysloghandl": [100, 265], "dictconfig": 100, "particular": 100, "throughout": 100, "factori": [100, 136, 177, 255, 336], "speak": 100, "them": 100, "condit": [100, 135, 288, 360, 425, 437, 462], "email": [100, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 470, 471, 472, 473, 474], "utc": 100, "gmt": 100, "via": [100, 336, 456], "cli": 100, "starter": 100, "templat": [100, 185, 297, 341, 447], "qt": 100, "syslog": [100, 351], "rfc5424": 100, "treat": 100, "stream": [100, 121, 130, 154, 214, 254, 295], "pattern": [100, 103, 119, 216, 379, 422, 423], "nullhandl": [100, 265], "lot": 100, "obtain": 101, "sure": 102, "proper": 102, "setup": 102, "divis": [102, 459], "versus": [102, 103, 423], "featur": [102, 277, 381, 424, 462, 464, 469, 471, 472, 473, 474, 475, 476, 477], "detect": 102, "prevent": 102, "compat": [102, 327, 371], "regress": [102, 357], "which": [102, 189], "depend": [102, 328, 395], "transit": 102, "updat": [102, 395, 464, 477], "denot": 102, "continu": [102, 172, 431, 436], "integr": [102, 263], "stay": 102, "consid": 102, "match": [103, 117, 119, 216, 315, 385, 422, 423, 436], "repeat": [103, 258], "thing": 103, "plagu": 103, "power": [103, 151, 271, 425], "metacharact": 103, "captur": [103, 422], "lookahead": 103, "assert": [103, 385, 431], "split": 103, "search": [103, 243, 247, 315, 349, 427], "replac": [103, 165, 243, 344, 427], "common": [103, 148, 340, 341, 465], "problem": [103, 148, 339], "greedi": 103, "re": [103, 177, 315, 383, 468, 471, 472, 473, 474, 475], "verbos": [103, 385], "feedback": 103, "ipc": 104, "decor": [105, 165, 207, 384, 385, 461, 463, 469], "undecor": 105, "sourc": [106, 243, 246, 251, 307, 373, 420, 460], "compar": [106, 397], "filenam": [106, 216, 272], "tip": [106, 262], "awar": [106, 179, 473], "unknown": 106, "urllib": [107, 387, 388, 389, 390, 391, 467, 470, 471, 472, 473, 474, 475, 477], "articl": 107, "url": [107, 387, 389, 390], "header": [107, 198, 199, 402, 471], "urlerror": 107, "httperror": 107, "wrap": [107, 359, 364], "info": 107, "geturl": 107, "authent": [107, 279], "proxi": [107, 279, 384], "pip": [108, 206, 448, 464, 472], "2to3": 109, "fixer": 109, "lib2to3": 109, "__future__": [110, 458], "__main__": [111, 427, 475], "top": [111, 258, 377], "environ": [111, 289, 349, 379, 394, 402, 420, 456, 464, 471, 473, 474], "__name__": 111, "idiomat": 111, "usag": [111, 117, 119, 179, 189, 243, 275, 296, 318, 373, 375, 414, 471], "packag": [111, 190, 247, 248, 298, 357, 427, 445, 456, 458, 460, 462, 463, 471], "consider": [111, 140, 241, 264, 323, 337, 344, 427], "_thread": [112, 467], "abc": [113, 157, 246, 249, 285, 381, 467, 470, 471, 472, 473, 477], "aifc": [114, 472, 475], "aiff": 114, "parser": [117, 163, 203, 224, 236, 288, 310, 409, 411, 463, 477], "add_argu": 117, "argumentpars": 117, "prog": 117, "epilog": 117, "parent": 117, "formatter_class": 117, "prefix_char": 117, "fromfile_prefix_char": 117, "argument_default": 117, "allow_abbrev": 117, "conflict_handl": 117, "add_help": 117, "exit_on_error": 117, "action": [117, 288], "narg": 117, "const": 117, "choic": 117, "requir": [117, 172, 247, 451], "metavar": 117, "dest": 117, "parse_arg": 117, "syntax": [117, 119, 315, 341, 408, 438, 463, 465, 469, 471, 473, 474], "invalid": [117, 427], "contain": [117, 157, 255, 381, 423], "abbrevi": 117, "prefix": [117, 255, 477], "argv": 117, "namespac": [117, 379, 408, 423, 427, 435, 471], "util": [117, 165, 172, 205, 207, 246, 284, 298, 305, 357, 380, 402, 412], "filetyp": 117, "exclus": 117, "help": [117, 243, 288, 309, 379], "partial": [117, 222, 385, 407, 462], "exit": [117, 137], "intermix": 117, "upgrad": [117, 123], "optpars": [117, 288, 460], "ast": [119, 463, 470, 474, 476, 477], "tree": [119, 231, 372, 407, 408], "grammar": 119, "node": [119, 405], "root": 119, "subscript": [119, 425], "statement": [119, 165, 360, 375, 422, 423, 431, 462, 463], "await": [119, 122, 136, 423, 425, 473], "helper": [119, 186, 341, 344, 381, 384], "asyncio": [120, 122, 132, 166, 467, 468, 469, 472, 473, 474, 475, 476, 477], "hello": [120, 123, 364], "world": [120, 123, 364], "queue": [121, 131, 232, 279, 312, 437, 475], "subprocess": [121, 123, 130, 134, 243, 344, 461, 471, 472, 473, 474, 475], "synchron": [121, 135, 279], "multithread": 122, "never": 122, "retriev": [122, 251, 376], "stop": [123, 384], "schedul": [123, 136, 289, 321], "callback": [123, 172, 288, 460], "delay": 123, "transfer": 123, "watch": 123, "direct": [123, 189, 246, 280, 381, 458], "dns": 123, "execut": [123, 160, 189, 243, 320, 329, 357, 375, 416, 423, 424, 456, 462], "pool": [123, 279], "mode": [123, 182, 184, 231, 289, 464, 475], "call_soon": 123, "call_lat": 123, "sigint": 123, "sigterm": 123, "polici": [127, 129, 204, 471], "maco": [128, 243, 299, 451, 477, 478], "watcher": 129, "transport": 130, "hierarchi": [130, 209, 463, 471], "onli": [130, 177, 243, 436, 467, 475, 476], "datagram": 130, "tcp": [130, 133], "echo": [130, 133], "client": [130, 238, 239, 244, 279, 301, 331, 337, 414, 464, 470, 472, 473, 474, 475], "udp": 130, "subprocess_exec": 130, "subprocessprotocol": 130, "prioriti": 131, "lifo": 131, "runner": 132, "keyboard": 132, "interrupt": [132, 417], "streamread": [133, 154], "streamwrit": [133, 154], "http": [133, 237, 238, 239, 240, 241, 402, 464, 470, 471, 472, 473, 474, 475, 477], "interact": [134, 153, 189, 424, 458, 462], "primit": [135, 136, 279, 381], "semaphor": [135, 360], "boundedsemaphor": 135, "barrier": [135, 360], "cancel": 136, "sleep": 136, "eager": 136, "shield": 136, "timeout": [136, 210, 333], "wait": [136, 324], "introspect": [136, 251, 381], "atexit": 137, "audioop": [138, 421, 472], "base64": [140, 467, 471, 472], "base16": 140, "base32": 140, "base85": 140, "secur": [140, 148, 231, 241, 264, 323, 337, 344, 389, 451, 464, 472, 478], "bdb": [141, 467], "framework": [141, 334, 458, 471], "servic": [142, 226, 260, 262, 311], "binascii": [143, 471, 474, 475], "bisect": [144, 467], "algorithm": [144, 247, 266, 379, 472], "builtin": [145, 384, 424, 465, 471, 476, 478], "bz2": [146, 471, 473], "bzip2": 146, "compress": [146, 266], "increment": [146, 154, 264], "shot": 146, "calendar": [147, 469, 475], "care": 148, "instal": [148, 206, 277, 350, 451, 456, 457, 472], "solut": 148, "cgitb": 149, "traceback": [149, 210, 376, 377, 467, 468, 472, 473, 474], "chunk": 150, "iff": 150, "cmath": [151, 473, 474], "mathemat": 151, "polar": 151, "coordin": 151, "logarithm": [151, 271], "trigonometr": [151, 271], "hyperbol": [151, 271], "classif": 151, "cmd": 152, "orient": [152, 292, 379], "consol": [153, 278, 474], "registri": [154, 400, 456], "stateless": 154, "decod": [154, 258], "incrementalencod": 154, "incrementaldecod": 154, "streamreaderwrit": 154, "streamrecod": 154, "idna": 154, "internation": [154, 198, 226, 262], "ansi": 154, "codepag": 154, "utf_8_sig": 154, "signatur": [154, 251, 471], "codeop": 155, "chainmap": 156, "counter": 156, "dequ": 156, "defaultdict": 156, "namedtupl": 156, "ordereddict": 156, "userdict": 156, "userlist": 156, "userstr": 156, "recip": [157, 165, 182, 257, 336], "colorsi": [158, 472], "compileal": [159, 473, 475, 477], "public": [159, 379], "executor": 162, "threadpoolexecutor": 162, "configpars": [163, 470, 473], "datatyp": [163, 460], "fallback": 163, "ini": [163, 456], "interpol": 163, "behaviour": 163, "rawconfigpars": 163, "site": [164, 330, 463, 467, 470, 474], "contextlib": [165, 381, 462, 463, 467, 468, 470, 471, 472, 473, 474, 475], "catch": 165, "__enter__": 165, "clean": 165, "reusabl": 165, "reentrant": 165, "copi": [167, 328], "shallow": 167, "deep": 167, "copyreg": 168, "regist": [168, 336], "crypt": [169, 471, 475], "hash": [169, 231, 340, 472, 475], "csv": [171, 469, 470, 473, 476], "dialect": 171, "reader": 171, "writer": [171, 262], "ctype": [172, 279, 462, 463, 470, 476], "foreign": 172, "load": [172, 185, 383, 427], "fundament": 172, "variad": [172, 468], "own": 172, "prototyp": 172, "union": [172, 340], "align": [172, 343], "bit": [172, 251, 400, 465], "incomplet": 172, "export": 172, "size": [172, 231, 289, 328, 343, 377], "termin": [173, 289, 305, 328], "textpad": 173, "widget": [173, 364, 369, 370, 371, 464], "textbox": 173, "panel": 175, "stack": [175, 251, 376, 437], "content": [177, 193, 310], "init": [177, 316], "frozen": [177, 468], "mutabl": [177, 340, 385], "naiv": [179, 339], "determin": [179, 423], "timedelta": 179, "tzinfo": 179, "timezon": [179, 361], "strftime": 179, "strptime": 179, "dbm": [180, 470, 472, 473, 474, 475], "databas": [180, 229, 277, 382], "gnu": [180, 226, 316, 319], "reinterpret": 180, "ndbm": 180, "dumb": 180, "portabl": 180, "decim": [182, 447, 461, 470, 471, 474, 475], "fix": [182, 288, 458, 459, 460, 464], "arithmet": [182, 255, 425], "operand": 182, "round": 182, "mitig": 182, "off": 182, "increas": 182, "precis": [182, 469], "special": [182, 271, 340, 379, 381, 423, 427, 460, 465], "faq": [182, 468], "develop": [184, 243, 296, 457, 463, 475], "effect": [184, 385], "resourcewarn": 184, "bad": 184, "dialog": [185, 365], "simpledialog": 185, "filedialog": 185, "nativ": [185, 343], "save": 185, "commondialog": 185, "difflib": [186, 473], "comput": [186, 377], "delta": 186, "sequencematch": 186, "ndiff": 186, "dis": [187, 469, 470, 472, 475], "bytecod": [187, 357, 427, 468, 469, 474, 475, 476, 477], "analysi": [187, 327, 430], "instruct": 187, "opcod": [187, 468], "doctest": [189, 461, 467, 472, 473], "docstr": [189, 379], "examin": [189, 347], "recogn": 189, "unittest": [189, 383, 384, 385, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476], "doctestfind": 189, "doctestpars": 189, "doctestrunn": 189, "outputcheck": 189, "soapbox": 189, "mime": [190, 193, 197, 202, 272, 313], "charset": 191, "repres": [192, 201], "compat32": 192, "contentmanag": 193, "defect": 195, "headerregistri": 199, "scratch": 202, "feedpars": 203, "miscellan": [205, 266, 279, 289, 370, 450, 465], "ensurepip": [206, 464, 472], "bootstrap": [206, 464, 472], "errno": 208, "concret": [209, 292, 381], "faulthandl": [210, 467, 471, 473, 474], "dump": 210, "fault": [210, 414], "after": 210, "fcntl": [211, 468, 477], "ioctl": 211, "filecmp": [212, 472], "directori": [212, 277, 289, 328, 463, 470, 473], "dircmp": 212, "fileinput": [214, 467, 474], "fnmatch": 216, "fraction": [217, 463, 468, 469, 470], "ration": 217, "ftplib": [219, 471, 477], "ftp": [219, 470], "ftp_tls": 219, "callabl": [222, 251, 336, 381, 423], "gc": [223, 467, 471, 472, 475, 476, 477], "getopt": 224, "getpass": 225, "gettext": [226, 475, 476], "multilingu": 226, "nulltransl": 226, "gnutransl": 226, "solari": 226, "catalog": [226, 262], "fli": 226, "defer": 226, "glob": [227, 467, 472, 473], "graphlib": [228, 477], "graph": 228, "grp": [229, 474], "gzip": [230, 419, 470, 473, 476], "hashlib": [231, 462, 467, 468, 470, 472, 474, 477], "digest": 231, "shake": 231, "length": [231, 340], "blake2": 231, "random": [231, 261, 289, 314, 337, 469, 470, 474, 477], "person": 231, "credit": 231, "heapq": [232, 473], "hmac": [233, 467, 471, 472, 475], "hypertext": 234, "markup": [234, 269], "entiti": 235, "xhtml": 236, "htmlparser": 236, "httpconnect": 238, "httprespons": 238, "httpmessag": 238, "cookiejar": 239, "cooki": [239, 240, 421], "filecookiejar": 239, "co": 239, "browser": [239, 308, 398], "cookiepolici": 239, "defaultcookiepolici": 239, "morsel": 240, "idl": [243, 457, 464, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478], "menu": 243, "shell": [243, 297, 327, 344], "editor": 243, "menus": 243, "navig": [243, 364], "indent": [243, 430], "calltip": 243, "startup": [243, 316], "failur": [243, 383], "without": 243, "prefer": 243, "idlelib": [243, 467, 468, 472, 473, 474, 475, 476, 477], "imaplib": [244, 470, 471, 473, 477], "imap4": 244, "imghdr": [245, 473], "importlib": [246, 247, 248, 249, 427, 464, 467, 471, 472, 473, 474, 475, 477], "machineri": 246, "lazi": [246, 424, 468], "approxim": [246, 339, 473], "import_modul": 246, "metadata": [247, 458, 460, 462, 467], "entri": [247, 423, 427], "distribut": [247, 339], "discoveri": [247, 383], "live": 251, "fetch": 251, "webassembl": [253, 451], "io": [254, 381, 470, 471, 473, 475, 476], "reentranc": 254, "ipv4": 255, "ipv6": 255, "manipul": [255, 267, 288], "conveni": [255, 398, 414], "integ": [255, 340, 430, 459, 461, 463], "net": 255, "mask": 255, "interprocess": 256, "communic": 256, "json": [258, 295, 441, 463, 473, 474, 476], "complianc": 258, "interoper": 258, "infinit": 258, "nan": 258, "within": 258, "linecach": [261, 467, 473], "hint": [262, 353, 381, 469, 473, 477], "emb": 262, "facil": 263, "safeti": 263, "config": 264, "schema": 264, "extern": [264, 295], "resolut": [264, 424, 475], "streamhandl": 265, "filehandl": [265, 390], "watchedfilehandl": 265, "baserotatinghandl": 265, "rotatingfilehandl": 265, "timedrotatingfilehandl": 265, "sockethandl": 265, "datagramhandl": 265, "nteventloghandl": 265, "smtphandler": 265, "memoryhandl": 265, "httphandler": [265, 390], "lzma": [266, 471, 473], "decompress": [266, 417], "chain": [266, 337, 385, 438], "mailbox": [267, 470], "various": 267, "maildir": 267, "mbox": 267, "mh": 267, "babyl": 267, "mmdf": 267, "maildirmessag": 267, "mboxmessag": 267, "mhmessag": 267, "babylmessag": 267, "mmdfmessag": 267, "mailcap": 268, "tool": [269, 292, 296, 357, 402, 464, 469, 476, 478], "theoret": 271, "represent": [271, 420, 439, 471], "angular": 271, "mimetyp": [272, 475], "mmap": [274, 471, 472, 476], "madv_": 274, "map_": 274, "modulefind": 275, "msilib": [277, 475], "microsoft": [277, 456], "view": [277, 340, 464, 465], "record": [277, 377, 447], "cab": 277, "precomput": 277, "msvcrt": 278, "routin": [278, 351], "vc": 278, "parallel": [279, 360, 476], "exchang": 279, "sharedctyp": 279, "remot": 279, "cleanup": [279, 288], "dummi": 279, "guidelin": 279, "spawn": [279, 344], "forkserv": 279, "shared_memori": 280, "netrc": 282, "nis": 283, "sun": [283, 345], "yellow": 283, "page": 283, "nntplib": [284, 471, 477], "nntp": [284, 470], "posit": [288, 315, 379, 423, 436, 476], "understand": [288, 364], "store": [288, 456], "put": 288, "popul": 288, "trivial": 288, "ossaudiodev": 291, "oss": 291, "audio": 291, "devic": 291, "mixer": 291, "pathlib": [292, 467, 468, 469, 472, 473, 474, 475, 476, 477], "filesystem": [292, 474, 476], "individu": 292, "part": 292, "correspond": [292, 379], "pdb": [293, 469, 470, 471, 472, 474, 475, 477], "serial": [295, 420], "relationship": [295, 457], "unpickl": 295, "dispatch": 295, "reduct": 295, "band": [295, 476], "consum": 295, "pickletool": [296, 474], "pipelin": [297, 344], "pkgutil": 298, "platform": [299, 328, 371, 458, 467, 475], "java": 299, "plistlib": [300, 463, 472, 476], "appl": [300, 477], "plist": 300, "poplib": [301, 470, 472, 473, 477], "pop3": 301, "posix": [302, 356], "larg": 302, "pprint": [303, 467, 472, 476, 477], "pretti": [303, 377], "printer": 303, "prettyprint": 303, "instant": 304, "cprofil": [304, 475, 476], "stat": [304, 338, 471, 472], "determinist": 304, "timer": [304, 360], "pti": [305, 472], "pseudo": 305, "pwd": 306, "py_compil": [307, 467, 475, 476], "pyclbr": [308, 467], "pydoc": [309, 470, 471, 472, 474, 475, 477], "onlin": 309, "xml": [310, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 421, 457, 467, 471, 472, 473, 475, 476, 477], "expat": [310, 421], "fast": [310, 476], "xmlparser": [310, 408], "expaterror": 310, "model": [310, 364, 405, 423, 424, 458], "simplequeu": 312, "quopri": 313, "bookkeep": 314, "reproduc": 314, "pair": 315, "simul": [315, 339], "phonebook": 315, "mung": 315, "adverb": 315, "notat": [315, 429, 463], "token": [315, 322, 372, 373, 430, 469, 476], "readlin": [316, 319, 330, 473, 474], "reprlib": [317, 470], "repr": [317, 427], "rlcomplet": [319, 474], "runpi": 320, "locat": [320, 411], "sched": [321, 471], "secret": [322, 474], "dev": [324, 475], "poll": 324, "trigger": 324, "epol": 324, "kqueue": [324, 421], "kevent": 324, "selector": [325, 370, 472, 473], "multiplex": 325, "shelv": [326, 467, 472], "shlex": [327, 471, 474, 476], "lexic": [327, 430], "improv": [327, 457, 458, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "shutil": [328, 468, 469, 470, 471, 472, 473, 476], "copytre": 328, "rmtree": 328, "archiv": [328, 353, 416, 417, 418, 460], "base_dir": 328, "sigpip": 329, "smtplib": [331, 471, 472, 473, 477], "smtp": 331, "sndhdr": [332, 473], "accept": 333, "socketserv": [334, 471, 474, 475], "tcpserver": 334, "udpserv": 334, "mixin": 334, "spwd": 335, "shadow": 335, "sqlite3": [336, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475], "sqlite": 336, "db": 336, "cursor": 336, "row": 336, "blob": 336, "prepareprotocol": 336, "adapt": 336, "deprec": [336, 381, 457, 460, 461, 463, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "placehold": 336, "sql": 336, "shortcut": 336, "uri": 336, "transact": 336, "autocommit": 336, "isolation_level": 336, "ssl": [337, 463, 467, 470, 471, 472, 473, 474, 475, 476], "wrapper": [337, 367], "certif": [337, 464, 470, 472], "ca": 337, "sign": 337, "side": [337, 385], "bio": [337, 473], "session": 337, "verifi": 337, "cipher": 337, "statist": [339, 377, 467, 469, 472, 474, 476], "spread": 339, "normaldist": 339, "classic": 339, "probabl": 339, "mont": 339, "carlo": 339, "binomi": 339, "bayesian": 339, "classifi": 339, "kernel": 339, "densiti": 339, "estim": 339, "numer": [340, 423, 430, 474], "bitwis": [340, 425], "bool": 340, "rang": [340, 436], "immut": 340, "str": 340, "printf": 340, "bytearray": [340, 473], "frozenset": 340, "alia": 340, "genericalia": 340, "notimpl": 340, "affect": 340, "recommend": 340, "mini": 341, "stringprep": 342, "prepar": [342, 423], "frequent": 344, "bin": 344, "sh": 344, "substitut": [344, 461], "famili": 344, "popen2": 344, "popen3": 344, "disabl": 344, "vfork": 344, "posix_spawn": 344, "sunau": [345, 472, 475], "au": 345, "au_read": 345, "au_writ": 345, "symtabl": 347, "float_info": 348, "virtual": [349, 371, 394, 456, 471, 473], "_pth": 349, "sysconfig": [350, 464, 468, 470, 473], "tabnanni": 352, "tarfil": [353, 470, 471, 472, 473, 476], "tar": 353, "tarinfo": 353, "further": [353, 385], "verif": [353, 464, 472], "telnetlib": [354, 474], "telnet": 354, "tempfil": [355, 468, 469, 470, 471], "termio": 356, "tti": [356, 378], "unit": 357, "suit": 357, "socket_help": 357, "script_help": 357, "bytecode_help": 357, "correct": 357, "threading_help": 357, "os_help": 357, "import_help": 357, "warnings_help": 357, "textwrap": [359, 471, 472], "fill": [359, 379], "rlock": 360, "clock": 361, "timeit": [362, 473, 474], "graphic": [363, 379], "tcl": 364, "architectur": 364, "life": 364, "preserv": [364, 474], "handi": 364, "packer": [364, 403], "coupl": 364, "imag": [364, 370], "colorchoos": 365, "choos": 365, "dnd": 366, "drag": 366, "drop": 366, "font": 367, "messagebox": 368, "prompt": 368, "scrolledtext": 369, "scroll": 369, "tix": 370, "hierarch": 370, "listbox": 370, "tabular": 370, "form": [370, 381, 425], "geometri": 370, "ttk": [371, 464], "theme": [371, 464], "scrollabl": 371, "label": 371, "combobox": 371, "spinbox": 371, "notebook": 371, "identifi": [371, 425, 430], "progressbar": 371, "separ": [371, 460, 464, 466], "sizegrip": 371, "treeview": 371, "tag": [371, 470], "column": 371, "layout": [371, 447], "tomllib": 374, "toml": 374, "track": [375, 385], "main": [375, 451, 463], "tracebackexcept": 376, "stacksummari": 376, "framesummari": 376, "peak": 377, "domainfilt": 377, "snapshot": 377, "statisticdiff": 377, "turtl": 379, "star": 379, "draw": 379, "pen": 379, "turtlescreen": 379, "screen": 379, "rawturtl": 379, "motion": 379, "tell": 379, "measur": 379, "visibl": [379, 471], "anim": 379, "explan": 379, "turtledemo": [379, 470], "demo": [379, 469, 476, 478], "sinc": 379, "relev": 381, "pep": [381, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476], "alias": [381, 422], "newtyp": 381, "nomin": 381, "subtyp": 381, "recognis": 381, "timelin": 381, "major": 381, "unicodedata": [382, 468, 469, 473, 474, 475, 476, 477], "old": [383, 459], "skip": 383, "expect": 383, "distinguish": 383, "subtest": 383, "load_test": 383, "fixtur": 383, "setupclass": 383, "teardownclass": 383, "setupmodul": 383, "teardownmodul": 383, "mock": [384, 385, 473, 474, 475], "attach": 384, "patcher": 384, "patch": [384, 385], "test_prefix": 384, "nest": [384, 385, 458, 459], "where": 384, "magicmock": [384, 385], "magic": 384, "sentinel": 384, "create_autospec": 384, "filter_dir": 384, "mock_open": 384, "autospecc": 384, "seal": 384, "everi": 385, "unbound": 385, "cope": 385, "less": 385, "compon": 389, "quot": 389, "openerdirector": 390, "basehandl": 390, "httpredirecthandl": 390, "httpcookieprocessor": 390, "proxyhandl": 390, "httppasswordmgr": 390, "httppasswordmgrwithpriorauth": 390, "abstractbasicauthhandl": 390, "httpbasicauthhandl": 390, "proxybasicauthhandl": 390, "abstractdigestauthhandl": 390, "httpdigestauthhandl": 390, "proxydigestauthhandl": 390, "httpshandler": 390, "datahandl": 390, "ftphandler": 390, "cacheftphandl": 390, "unknownhandl": 390, "httperrorprocessor": 390, "respons": [390, 402], "robotpars": [391, 474], "robot": 391, "txt": 391, "xdrlib": [392, 403], "uuencod": [392, 421], "uuid": [393, 469, 475], "rfc": 393, "4122": 393, "venv": [394, 468, 472, 474, 476, 477], "envbuild": 394, "describ": 395, "overrid": [395, 469], "temporarili": 395, "suppress": [395, 471], "wave": [396, 472, 475], "wav": 396, "wave_read": 396, "wave_writ": 396, "weakref": [397, 472, 476], "webbrows": [398, 471], "winreg": [400, 474], "hkey_": 400, "right": 400, "64": 400, "winsound": [401, 474], "sound": 401, "play": 401, "wsgiref": [402, 462, 473], "wsgi": 402, "simple_serv": 402, "conform": [402, 405], "checker": 402, "gateway": [402, 470], "xdr": 403, "vulner": 404, "defusedxml": 404, "dom": [405, 406, 407, 457], "domimplement": 405, "nodelist": 405, "documenttyp": 405, "attr": 405, "namednodemap": 405, "comment": [405, 430], "cdatasect": 405, "processinginstruct": 405, "accessor": 405, "minidom": 406, "minim": 406, "pulldom": 407, "domeventstream": 407, "etre": [408, 471, 472, 475], "elementtre": [408, 462, 464, 470, 471], "pull": 408, "interest": 408, "xpath": 408, "xinclud": 408, "qname": 408, "treebuild": 408, "xmlpullpars": 408, "sax": [409, 410, 411, 412, 473], "sax2": [409, 457], "saxexcept": 409, "contenthandl": 410, "dtdhandler": 410, "entityresolv": 410, "errorhandl": 410, "lexicalhandl": 410, "xmlreader": 411, "incrementalpars": 411, "inputsourc": 411, "attributesn": 411, "saxutil": 412, "xmlrpc": [413, 414, 415, 473, 474, 475, 476], "rpc": [414, 415], "serverproxi": 414, "protocolerror": 414, "multical": 414, "simplexmlrpcserv": 415, "cgixmlrpcrequesthandl": 415, "docxmlrpcserv": 415, "doccgixmlrpcrequesthandl": 415, "zipapp": [416, 473, 475], "zip": [416, 417, 418, 460], "standalon": 416, "zipfil": [417, 468, 470, 472, 473, 474, 475], "pyzipfil": 417, "zipinfo": 417, "pitfal": 417, "itself": 417, "behavior": [417, 472, 473, 474, 475, 476], "zipimport": [418, 467], "zlib": [419, 421, 471, 474], "zoneinfo": [420, 477], "iana": 420, "12": [421, 468, 469, 476, 478], "0rc1": 421, "psf": 421, "beopen": 421, "com": 421, "cnri": 421, "cwi": 421, "zero": 421, "claus": [421, 422], "bsd": 421, "mersenn": 421, "twister": 421, "uudecod": 421, "test_epol": 421, "siphash24": 421, "strtod": 421, "dtoa": 421, "openssl": [421, 455], "libffi": 421, "cfuhash": 421, "libmpdec": 421, "w3c": 421, "c14n": 421, "els": [422, 436], "guard": [422, 467], "irrefut": 422, "wildcard": [422, 446, 467], "invok": 423, "metaclass": 423, "resolv": 423, "mro": 423, "appropri": 423, "bodi": 423, "emul": 423, "purpos": 423, "__class_getitem__": 423, "__getitem__": 423, "atom": 425, "parenthes": 425, "yield": [425, 431], "primari": 425, "slice": [425, 460], "unari": 425, "shift": 425, "membership": 425, "finder": 427, "loader": 427, "meta": 427, "submodul": 427, "__path__": 427, "__spec__": 427, "physic": 430, "declar": [430, 467], "explicit": [430, 463, 471, 472], "implicit": [430, 471], "blank": 430, "whitespac": 430, "soft": 430, "reserv": 430, "imaginari": 430, "delimit": 430, "augment": [431, 457], "del": [431, 437], "break": [431, 436], "nonloc": 431, "dir": 445, "linker": 451, "cross": 451, "makefil": 451, "target": [451, 464, 473, 474], "preprocessor": 451, "ide": [452, 454], "mac": [454, 463, 464, 477], "macpython": 454, "freebsd": [455, 464], "openbsd": 455, "full": 456, "max_path": 456, "known": 456, "temporari": 456, "nuget": 456, "embedd": 456, "bundl": 456, "excursus": 456, "launcher": [456, 468, 471, 473], "shebang": 456, "diagnost": 456, "dri": 456, "pywin32": 456, "cx_freez": 456, "cycl": 457, "minor": 457, "port": [457, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477], "distutil": [457, 460, 467, 473, 474, 475, 477], "easi": 457, "pyxml": 457, "227": [458, 459], "236": 458, "207": 458, "rich": 458, "230": 458, "229": 458, "205": 458, "232": 458, "235": 458, "insensit": 458, "217": 458, "208": 458, "coercion": [458, 475], "241": 458, "252": 459, "253": 459, "diamond": 459, "234": 459, "255": [459, 460], "237": [459, 461], "unifi": [459, 461, 462], "long": [459, 461], "238": 459, "218": [460, 461], "263": 460, "273": 460, "277": 460, "nt": 460, "278": 460, "univers": 460, "279": 460, "282": 460, "285": 460, "293": 460, "301": 460, "302": 460, "305": 460, "307": 460, "enhanc": [460, 463, 464, 474], "289": 461, "292": 461, "simpler": [461, 474], "318": 461, "322": 461, "324": 461, "327": 461, "need": 461, "328": [461, 462], "331": 461, "cookielib": 461, "308": 462, "309": 462, "314": 462, "softwar": 462, "v1": [462, 470], "absolut": 462, "338": 462, "341": 462, "342": 462, "343": [462, 463], "352": 462, "353": 462, "ssize_t": 462, "357": 462, "__index__": 462, "tracker": 463, "roundup": 463, "restructuredtext": 463, "sphinx": 463, "366": 463, "370": 463, "371": 463, "3101": [463, 465], "3105": 463, "3110": 463, "3112": 463, "3116": 463, "3118": [463, 471], "3119": 463, "3127": 463, "3129": 463, "3141": 463, "future_builtin": 463, "javascript": 463, "irix": 463, "372": [464, 466], "378": [464, 466], "thousand": [464, 466], "389": [464, 470], "391": [464, 470], "3106": 464, "3137": 464, "added": 464, "mainten": 464, "two": 464, "434": 464, "branch": 464, "466": 464, "477": 464, "backport": 464, "453": [464, 472], "476": [464, 472], "stdlib": [464, 472], "493": 464, "https": 464, "migrat": 464, "regen": [464, 473, 474], "touch": [464, 473, 474], "stumbl": 465, "alreadi": 465, "indentationerror": 467, "attributeerror": 467, "nameerror": 467, "626": 467, "634": 467, "encodingwarn": 467, "604": 467, "612": 467, "613": 467, "typealia": 467, "647": 467, "asynchat": [467, 474], "asyncor": [467, 470, 474], "smtpd": [467, 471, 472, 473], "652": 467, "11": [468, 477, 478], "657": 468, "654": 468, "678": 468, "exe": 468, "646": 468, "655": 468, "typeddict": [468, 469], "673": 468, "675": 468, "681": 468, "563": [468, 475], "cheaper": 468, "659": 468, "jit": 468, "701": 469, "syntact": 469, "709": 469, "inlin": 469, "688": 469, "684": 469, "692": 469, "kwarg": 469, "698": 469, "695": 469, "pend": 469, "13": [469, 474], "14": 469, "384": 470, "stabl": 470, "3148": 470, "3147": 470, "repositori": 470, "3149": 470, "so": 470, "3333": 470, "highlight": [471, 472, 473, 474, 475, 476, 477], "405": 471, "420": 471, "393": 471, "flexibl": 471, "397": 471, "3151": 471, "rework": 471, "380": 471, "subgener": 471, "409": 471, "414": 471, "3155": 471, "qualifi": 471, "412": 471, "362": 471, "421": 471, "simplenamespac": 471, "grain": 471, "unsupport": [471, 473], "446": 472, "newli": 472, "451": 472, "modulespec": 472, "445": 472, "442": 472, "456": 472, "interchang": 472, "436": 472, "longer": 472, "492": 473, "465": 473, "dedic": 473, "infix": 473, "matrix": 473, "448": 473, "461": 473, "percent": 473, "484": 473, "471": 473, "scandir": 473, "better": 473, "faster": 473, "475": 473, "retri": 473, "eintr": 473, "479": 473, "stopiter": 473, "insid": 473, "485": 473, "equal": 473, "486": 473, "488": 473, "elimin": 473, "pyo": 473, "489": 473, "negoti": 473, "notabl": [473, 474, 475, 476, 477], "498": 474, "526": 474, "515": 474, "underscor": 474, "525": 474, "530": 474, "487": 474, "519": 474, "495": 474, "disambigu": 474, "529": 474, "528": 474, "520": 474, "468": 474, "523": 474, "pythonmalloc": 474, "postpon": 475, "538": 475, "540": 475, "forc": 475, "553": 475, "breakpoint": 475, "539": 475, "562": 475, "564": 475, "nanosecond": 475, "565": 475, "deprecationwarn": [475, 477], "560": 475, "552": 475, "545": 475, "uu": 475, "macpath": 475, "578": 476, "audit": 476, "587": 476, "590": 476, "merg": 477, "suffix": 477, "big": 477, "sur": 477, "silicon": 477, "changelog": 478, "candid": 478, "alpha": 478}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[94, "functional-programming-howto"]], "\u7c21\u4ecb": [[94, "introduction"], [107, "introduction"], [103, "introduction"], [34, "introduction"], [429, "introduction"], [458, "introduction"], [459, "introduction"], [448, "introduction"], [457, "introduction"], [325, "introduction"], [279, "introduction"], [246, "introduction"], [253, "introduction"], [148, "introduction"]], "Formal provability": [[94, "formal-provability"]], "Modularity": [[94, "modularity"]], "Ease of debugging and testing": [[94, "ease-of-debugging-and-testing"]], "Composability": [[94, "composability"]], "Iterators": [[94, "iterators"]], "Data Types That Support Iterators": [[94, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[94, "generator-expressions-and-list-comprehensions"]], "Generators": [[94, "generators"]], "Passing values into a generator": [[94, "passing-values-into-a-generator"]], "Built-in functions": [[94, "built-in-functions"]], "The itertools module": [[94, "the-itertools-module"]], "Creating new iterators": [[94, "creating-new-iterators"]], "Calling functions on elements": [[94, "calling-functions-on-elements"]], "Selecting elements": [[94, "selecting-elements"]], "Combinatoric functions": [[94, "combinatoric-functions"]], "Grouping elements": [[94, "grouping-elements"]], "The functools module": [[94, "the-functools-module"]], "The operator module": [[94, "the-operator-module"]], "Small functions and the lambda expression": [[94, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[94, "revision-history-and-acknowledgements"]], "References": [[94, "references"], [106, "references"], [106, "id2"], [106, "id3"], [427, "references"]], "General": [[94, "general"]], "Python-specific": [[94, "python-specific"]], "Python \u8aaa\u660e\u6587\u4ef6": [[94, "python-documentation"]], "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6": [[78, "extending-embedding-faq"]], "\u76ee\u9304": [[78, "id1"], [85, "id1"], [79, "id1"], [80, "id1"], [83, "id1"], [77, "id1"], [84, "id1"], [92, "id1"], [243, "menus"]], "\u6211\u53ef\u4ee5\u5728 C \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[78, "can-i-create-my-own-functions-in-c"]], "\u6211\u53ef\u4ee5\u5728 C++ \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[78, "id2"]], "\u5beb C \u5f88\u96e3\uff1b\u9084\u6709\u5176\u4ed6\u9078\u64c7\u55ce\uff1f": [[78, "writing-c-is-hard-are-there-any-alternatives"]], "\u5982\u4f55\u5f9e C \u57f7\u884c\u4efb\u610f Python \u9673\u8ff0\u5f0f\uff1f": [[78, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[78, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "\u5982\u4f55\u5f9e Python \u7269\u4ef6\u4e2d\u63d0\u53d6 C \u503c\uff1f": [[78, "how-do-i-extract-c-values-from-a-python-object"]], "\u5982\u4f55\u4f7f\u7528 Py_BuildValue() \u5efa\u7acb\u4efb\u610f\u9577\u5ea6\u7684\u5143\u7d44\uff1f": [[78, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "\u5982\u4f55\u5f9e C \u547c\u53eb\u7269\u4ef6\u7684\u65b9\u6cd5\uff1f": [[78, "how-do-i-call-an-object-s-method-from-c"]], "\u6211\u5982\u4f55\u6355\u6349 PyErr_Print() \u7684\u8f38\u51fa\uff08\u6216\u4efb\u4f55\u5370\u51fa\u5230 stdout/stderr \u7684\u6771\u897f\uff09\uff1f": [[78, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "\u5982\u4f55\u5f9e C \u5b58\u53d6\u7528 Python \u7de8\u5beb\u7684\u6a21\u7d44\uff1f": [[78, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[78, "how-do-i-interface-to-c-objects-from-python"]], "\u6211\u4f7f\u7528\u5b89\u88dd\u6a94\u6848\u65b0\u589e\u4e86\u4e00\u500b\u6a21\u7d44\uff0c\u4f46 make \u5931\u6557\u4e86\uff1b\u70ba\u4ec0\u9ebc\uff1f": [[78, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "\u5982\u4f55\u70ba\u64f4\u5145\u5957\u4ef6\u9664\u932f\uff1f": [[78, "how-do-i-debug-an-extension"]], "\u6211\u60f3\u5728\u6211\u7684 Linux \u7cfb\u7d71\u4e0a\u7de8\u8b6f\u4e00\u500b Python \u6a21\u7d44\uff0c\u4f46\u662f\u7f3a\u5c11\u4e00\u4e9b\u6a94\u6848\u3002\u70ba\u4ec0\u9ebc\uff1f": [[78, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "\u5982\u4f55\u5f9e\u300c\u7121\u6548\u8f38\u5165\u300d\u5340\u5206\u51fa\u300c\u4e0d\u5b8c\u6574\u8f38\u5165\u300d\uff1f": [[78, "how-do-i-tell-incomplete-input-from-invalid-input"]], "\u5982\u4f55\u627e\u5230\u672a\u5b9a\u7fa9\u7684 g++ \u7b26\u865f __builtin_new \u6216 __pure_virtual\uff1f": [[78, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[78, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "Logging Cookbook": [[100, "logging-cookbook"]], "Using logging in multiple modules": [[100, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[100, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[100, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[100, "logging-to-multiple-destinations"]], "Custom handling of levels": [[100, "custom-handling-of-levels"]], "Configuration server example": [[100, "configuration-server-example"]], "Dealing with handlers that block": [[100, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[100, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[100, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[100, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[100, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[100, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[100, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[100, "use-of-contextvars"]], "Imparting contextual information in handlers": [[100, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[100, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[100, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[100, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[100, "using-file-rotation"]], "Use of alternative formatting styles": [[100, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[100, "customizing-logrecord"]], "Subclassing QueueHandler - a ZeroMQ example": [[100, "subclassing-queuehandler-a-zeromq-example"]], "Subclassing QueueListener - a ZeroMQ example": [[100, "subclassing-queuelistener-a-zeromq-example"]], "An example dictionary-based configuration": [[100, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[100, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[100, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[100, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[100, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[100, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[100, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[100, "using-logrecord-factories"]], "Using custom message objects": [[100, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[100, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[100, "customized-exception-formatting"]], "Speaking logging messages": [[100, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[100, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[100, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[100, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[100, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[100, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[100, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[100, "logging-to-syslog-with-rfc5424-support"]], "How to treat a logger like an output stream": [[100, "how-to-treat-a-logger-like-an-output-stream"]], "Patterns to avoid": [[100, "patterns-to-avoid"]], "Opening the same log file multiple times": [[100, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[100, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[100, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[100, "creating-a-lot-of-loggers"]], "Other resources": [[100, "other-resources"], [99, "other-resources"]], "\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6": [[70, "building-c-and-c-extensions"]], "Building C and C++ Extensions with setuptools": [[70, "building-c-and-c-extensions-with-setuptools"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[99, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[99, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[99, "when-to-use-logging"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[99, "a-simple-example"], [72, "a-simple-example"]], "Logging to a file": [[99, "logging-to-a-file"]], "Logging from multiple modules": [[99, "logging-from-multiple-modules"]], "Logging variable data": [[99, "logging-variable-data"]], "Changing the format of displayed messages": [[99, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[99, "displaying-the-date-time-in-messages"]], "Next Steps": [[99, "next-steps"]], "Advanced Logging Tutorial": [[99, "advanced-logging-tutorial"]], "Logging Flow": [[99, "logging-flow"]], "Loggers": [[99, "loggers"]], "Handlers": [[99, "handlers"]], "Formatters": [[99, "formatters"]], "Configuring Logging": [[99, "configuring-logging"]], "What happens if no configuration is provided": [[99, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[99, "configuring-logging-for-a-library"]], "Logging Levels": [[99, "logging-levels"], [263, "logging-levels"]], "Custom Levels": [[99, "custom-levels"]], "Useful Handlers": [[99, "useful-handlers"]], "Exceptions raised during logging": [[99, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[99, "using-arbitrary-objects-as-messages"]], "Optimization": [[99, "optimization"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[85, "python-on-windows-faq"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[85, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[85, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[85, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[85, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[85, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[85, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[85, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[85, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[85, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "\u767c\u5e03 Python \u6a21\u7d44": [[69, "distributing-python-modules"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[95, "python-howtos"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[79, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[79, "general-information"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[79, "what-is-python"], [82, "what-is-python"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[79, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[79, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[79, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[79, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[79, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[79, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[79, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[79, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[79, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[79, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[79, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[79, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[79, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[79, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[79, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[79, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[79, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[79, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[79, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[79, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[79, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[79, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[79, "is-python-a-good-language-for-beginning-programmers"]], "Defining Extension Types: Tutorial": [[75, "defining-extension-types-tutorial"]], "The Basics": [[75, "the-basics"]], "Adding data and methods to the Basic example": [[75, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[75, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[75, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[75, "subclassing-other-types"]], "\u7248\u6b0a\u5ba3\u544a": [[68, "copyright"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[73, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[73, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[73, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[73, "embedding-the-cpython-runtime-in-a-larger-application"]], "Argument Clinic How-To": [[89, "argument-clinic-how-to"]], "\u6458\u8981": [[89, null], [87, null], [91, null], [92, "abstract"], [104, null], [102, null], [103, null]], "Background": [[89, "background"], [98, "background"], [288, "background"]], "Basic concepts": [[89, "basic-concepts"]], "Reference": [[89, "reference"], [408, "reference"], [408, "id4"], [336, "reference"], [279, "reference"]], "Terminology": [[89, "terminology"], [288, "terminology"]], "Command-line interface": [[89, "command-line-interface"], [336, "command-line-interface"]], "Classes for extending Argument Clinic": [[89, "classes-for-extending-argument-clinic"]], "Tutorial": [[89, "tutorial"], [408, "tutorial"], [379, "tutorial"], [336, "tutorial"], [288, "tutorial"]], "How-to guides": [[89, "how-to-guides"], [336, "how-to-guides"]], "How to rename C functions and variables generated by Argument Clinic": [[89, "how-to-rename-c-functions-and-variables-generated-by-argument-clinic"]], "How to convert functions using PyArg_UnpackTuple": [[89, "how-to-convert-functions-using-pyarg-unpacktuple"]], "How to use optional groups": [[89, "how-to-use-optional-groups"]], "How to use real Argument Clinic converters, instead of \"legacy converters\"": [[89, "how-to-use-real-argument-clinic-converters-instead-of-legacy-converters"]], "How to use the Py_buffer converter": [[89, "how-to-use-the-py-buffer-converter"]], "How to use advanced converters": [[89, "how-to-use-advanced-converters"]], "How to assign default values to parameter": [[89, "how-to-assign-default-values-to-parameter"]], "The NULL default value": [[89, "the-null-default-value"]], "Symbolic default values": [[89, "symbolic-default-values"]], "Expressions as default values": [[89, "expressions-as-default-values"]], "How to use return converters": [[89, "how-to-use-return-converters"]], "How to clone existing functions": [[89, "how-to-clone-existing-functions"]], "How to call Python code": [[89, "how-to-call-python-code"]], "How to use the \"self converter\"": [[89, "how-to-use-the-self-converter"]], "How to use the \"defining class\" converter": [[89, "how-to-use-the-defining-class-converter"]], "How to write a custom converter": [[89, "how-to-write-a-custom-converter"]], "How to write a custom return converter": [[89, "how-to-write-a-custom-return-converter"]], "How to convert METH_O and METH_NOARGS functions": [[89, "how-to-convert-meth-o-and-meth-noargs-functions"]], "How to convert tp_new and tp_init functions": [[89, "how-to-convert-tp-new-and-tp-init-functions"]], "How to change and redirect Clinic's output": [[89, "how-to-change-and-redirect-clinic-s-output"]], "How to use the #ifdef trick": [[89, "how-to-use-the-ifdef-trick"]], "How to use Argument Clinic in Python files": [[89, "how-to-use-argument-clinic-in-python-files"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[80, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[80, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[80, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[80, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[80, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[80, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[80, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "Annotations Best Practices": [[87, "annotations-best-practices"]], "Accessing The Annotations Dict Of An Object In Python 3.10 And Newer": [[87, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "Accessing The Annotations Dict Of An Object In Python 3.9 And Older": [[87, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "Manually Un-Stringizing Stringized Annotations": [[87, "manually-un-stringizing-stringized-annotations"]], "Best Practices For __annotations__ In Any Python Version": [[87, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ Quirks": [[87, "annotations-quirks"]], "Instrumenting CPython with DTrace and SystemTap": [[96, "instrumenting-cpython-with-dtrace-and-systemtap"]], "Enabling the static markers": [[96, "enabling-the-static-markers"]], "Static DTrace probes": [[96, "static-dtrace-probes"]], "Static SystemTap markers": [[96, "static-systemtap-markers"]], "Available static markers": [[96, "available-static-markers"]], "SystemTap Tapsets": [[96, "systemtap-tapsets"]], "\u7bc4\u4f8b": [[96, "examples"], [117, "example"], [123, "examples"], [134, "examples"], [131, "examples"], [130, "examples"], [133, "examples"], [33, "example"], [62, "examples"], [41, "examples"], [418, "examples"], [408, "example"], [408, "id3"], [416, "examples"], [393, "example"], [377, "examples"], [402, "examples"], [397, "example"], [374, "examples"], [356, "example"], [353, "examples"], [351, "examples"], [355, "examples"], [343, "examples"], [362, "examples"], [373, "examples"], [325, "examples"], [326, "example"], [333, "example"], [316, "example"], [337, "examples"], [329, "examples"], [310, "example"], [334, "examples"], [314, "examples"], [279, "examples"], [295, "example"], [295, "examples"], [300, "examples"], [305, "example"], [303, "example"], [239, "examples"], [246, "examples"], [267, "examples"], [238, "examples"], [266, "examples"], [240, "example"], [231, "examples"], [210, "example"], [236, "examples"], [171, "examples"], [144, "examples"], [169, "examples"], [168, "example"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[90, "porting-extension-modules-to-python-3"]], "Enum HOWTO": [[93, "enum-howto"]], "Programmatic access to enumeration members and their attributes": [[93, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[93, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[93, "ensuring-unique-enumeration-values"]], "Using automatic values": [[93, "using-automatic-values"]], "Iteration": [[93, "iteration"], [255, "iteration"]], "Comparisons": [[93, "comparisons"], [97, "comparisons"], [425, "comparisons"], [340, "comparisons"]], "Allowed members and attributes of enumerations": [[93, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[93, "restricted-enum-subclassing"]], "Dataclass support": [[93, "dataclass-support"]], "Pickling": [[93, "pickling"]], "Functional API": [[93, "functional-api"], [247, "functional-api"]], "Derived Enumerations": [[93, "derived-enumerations"]], "IntEnum": [[93, "intenum"]], "StrEnum": [[93, "strenum"]], "IntFlag": [[93, "intflag"]], "Flag": [[93, "flag"]], "Others": [[93, "others"]], "When to use __new__() vs. __init__()": [[93, "when-to-use-new-vs-init"]], "Finer Points": [[93, "finer-points"]], "Supported __dunder__ names": [[93, "supported-dunder-names"], [207, "supported-dunder-names"]], "Supported _sunder_ names": [[93, "supported-sunder-names"], [207, "supported-sunder-names"]], "_Private__names": [[93, "private-names"]], "Enum member type": [[93, "enum-member-type"]], "Creating members that are mixed with other data types": [[93, "creating-members-that-are-mixed-with-other-data-types"]], "Boolean value of Enum classes and members": [[93, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[93, "enum-classes-with-methods"]], "Combining members of Flag": [[93, "combining-members-of-flag"]], "Flag and IntFlag minutia": [[93, "flag-and-intflag-minutia"]], "How are Enums and Flags different?": [[93, "how-are-enums-and-flags-different"]], "Enum Classes": [[93, "enum-classes"]], "Flag Classes": [[93, "flag-classes"]], "Enum Members (aka instances)": [[93, "enum-members-aka-instances"]], "Flag Members": [[93, "flag-members"]], "Enum Cookbook": [[93, "enum-cookbook"]], "Omitting values": [[93, "omitting-values"]], "Using auto": [[93, "using-auto"]], "Using object": [[93, "using-object"]], "Using a descriptive string": [[93, "using-a-descriptive-string"]], "Using a custom __new__()": [[93, "using-a-custom-new"]], "OrderedEnum": [[93, "orderedenum"]], "DuplicateFreeEnum": [[93, "duplicatefreeenum"]], "Planet": [[93, "planet"]], "TimePeriod": [[93, "timeperiod"]], "Subclassing EnumType": [[93, "subclassing-enumtype"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[83, "library-and-extension-faq"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[83, "general-library-questions"]], "How do I find a module or application to perform task X?": [[83, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u4f86\u6e90\u6a94\u6848\uff1f": [[83, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[83, "how-do-i-make-a-python-script-executable-on-unix"]], "\u662f\u5426\u6709\u9069\u7528\u65bc Python \u7684 curses/termcap \u5957\u4ef6\uff1f": [[83, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[83, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[83, "why-don-t-my-signal-handlers-work"]], "\u5e38\u898b\u8ab2\u984c": [[83, "common-tasks"]], "\u5982\u4f55\u6e2c\u8a66 Python \u7a0b\u5f0f\u6216\u5143\u4ef6\uff1f": [[83, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[83, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[83, "how-do-i-get-a-single-keypress-at-a-time"]], "\u57f7\u884c\u7dd2": [[83, "threads"]], "\u5982\u4f55\u4f7f\u7528\u57f7\u884c\u7dd2\u7de8\u5beb\u7a0b\u5f0f\uff1f": [[83, "how-do-i-program-using-threads"]], "\u6211\u7684\u57f7\u884c\u7dd2\u4f3c\u4e4e\u90fd\u6c92\u6709\u904b\u884c\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[83, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[83, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[83, "what-kinds-of-global-value-mutation-are-thread-safe"]], "\u4e0d\u80fd\u64fa\u812b\u5168\u5c40\u76f4\u8b6f\u5668\u9396\u55ce\uff1f": [[83, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "\u8f38\u5165\u8207\u8f38\u51fa": [[83, "input-and-output"]], "\u5982\u4f55\u522a\u9664\u6a94\u6848\uff1f\uff08\u4ee5\u53ca\u5176\u4ed6\u6a94\u6848\u554f\u984c...\uff09": [[83, "how-do-i-delete-a-file-and-other-file-questions"]], "\u5982\u4f55\u8907\u88fd\u6a94\u6848\uff1f": [[83, "how-do-i-copy-a-file"]], "\u5982\u4f55\u8b80\u53d6\uff08\u6216\u5beb\u5165\uff09\u4e8c\u9032\u4f4d\u5236\u8cc7\u6599\uff1f": [[83, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[83, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "\u5982\u4f55\u5b58\u53d6\u5e8f\u5217 (RS232) \u9023\u63a5\u57e0\uff1f": [[83, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[83, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "\u7db2\u8def (Network)/\u7db2\u969b\u7db2\u8def (Internet) \u7a0b\u5f0f": [[83, "network-internet-programming"]], "Python \u6709\u54ea\u4e9b WWW \u5de5\u5177\uff1f": [[83, "what-www-tools-are-there-for-python"]], "\u5982\u4f55\u6a21\u64ec CGI \u8868\u55ae\u9001\u51fa (submission) (METHOD=POST)\uff1f": [[83, "how-can-i-mimic-cgi-form-submission-method-post"]], "\u6211\u61c9\u8a72\u4f7f\u7528\u4ec0\u9ebc\u6a21\u7d44\u4f86\u8f14\u52a9\u7522\u751f HTML\uff1f": [[83, "what-module-should-i-use-to-help-with-generating-html"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u767c\u9001\u90f5\u4ef6\uff1f": [[83, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[83, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "\u8cc7\u6599\u5eab": [[83, "databases"]], "Python \u4e2d\u662f\u5426\u6709\u4efb\u4f55\u8cc7\u6599\u5eab\u5957\u4ef6\u7684\u4ecb\u9762\uff1f": [[83, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[83, "how-do-you-implement-persistent-objects-in-python"]], "\u6578\u5b78\u548c\u6578\u503c": [[83, "mathematics-and-numerics"]], "\u5982\u4f55\u5728 Python \u4e2d\u751f\u6210\u96a8\u6a5f\u6578\uff1f": [[83, "how-do-i-generate-random-numbers-in-python"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[71, "embedding-python-in-another-application"]], "Very High Level Embedding": [[71, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[71, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[71, "pure-embedding"]], "Extending Embedded Python": [[71, "extending-embedded-python"]], "Embedding Python in C++": [[71, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[71, "compiling-and-linking-under-unix-like-systems"]], "Building C and C++ Extensions on Windows": [[76, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[76, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[76, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[76, "using-dlls-in-practice"]], "Python support for the Linux perf profiler": [[101, "python-support-for-the-linux-perf-profiler"]], "How to enable perf profiling support": [[101, "how-to-enable-perf-profiling-support"]], "How to obtain the best results": [[101, "how-to-obtain-the-best-results"]], "Python \u5e38\u898b\u554f\u984c": [[81, "python-frequently-asked-questions"]], "Defining Extension Types: Assorted Topics": [[74, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[74, "finalization-and-de-allocation"]], "Object Presentation": [[74, "object-presentation"]], "Attribute Management": [[74, "attribute-management"]], "Generic Attribute Management": [[74, "generic-attribute-management"]], "Type-specific Attribute Management": [[74, "type-specific-attribute-management"]], "Object Comparison": [[74, "object-comparison"]], "Abstract Protocol Support": [[74, "abstract-protocol-support"]], "Weak Reference Support": [[74, "weak-reference-support"]], "More Suggestions": [[74, "more-suggestions"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[77, "design-and-history-faq"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[77, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[77, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[77, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[77, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[77, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[77, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[77, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[77, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[77, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[77, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[77, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[77, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[77, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[77, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[77, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[77, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[77, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[77, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[77, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[77, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[77, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[77, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[77, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[77, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[77, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[77, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[77, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[77, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "Curses Programming with Python": [[91, "curses-programming-with-python"]], "What is curses?": [[91, "what-is-curses"]], "The Python curses module": [[91, "the-python-curses-module"]], "Starting and ending a curses application": [[91, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[91, "windows-and-pads"]], "Displaying Text": [[91, "displaying-text"]], "Attributes and Color": [[91, "attributes-and-color"]], "User Input": [[91, "user-input"]], "For More Information": [[91, "for-more-information"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[72, "extending-python-with-c-or-c"]], "Intermezzo: Errors and Exceptions": [[72, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[72, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[72, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[72, "compilation-and-linkage"]], "Calling Python Functions from C": [[72, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[72, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[72, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[72, "building-arbitrary-values"]], "Reference Counts": [[72, "reference-counts"]], "Reference Counting in Python": [[72, "reference-counting-in-python"]], "Ownership Rules": [[72, "ownership-rules"]], "Thin Ice": [[72, "thin-ice"]], "NULL Pointers": [[72, "null-pointers"]], "Writing Extensions in C++": [[72, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[72, "providing-a-c-api-for-an-extension-module"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[82, "why-is-python-installed-on-my-computer-faq"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[82, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[82, "can-i-delete-python"]], "Isolating Extension Modules": [[98, "isolating-extension-modules"]], "Abstract": [[98, null]], "Who should read this": [[98, "who-should-read-this"]], "Enter Per-Module State": [[98, "enter-per-module-state"]], "Isolated Module Objects": [[98, "isolated-module-objects"]], "Surprising Edge Cases": [[98, "surprising-edge-cases"]], "Making Modules Safe with Multiple Interpreters": [[98, "making-modules-safe-with-multiple-interpreters"]], "Managing Global State": [[98, "managing-global-state"]], "Managing Per-Module State": [[98, "managing-per-module-state"]], "Opt-Out: Limiting to One Module Object per Process": [[98, "opt-out-limiting-to-one-module-object-per-process"]], "Module State Access from Functions": [[98, "module-state-access-from-functions"]], "Heap Types": [[98, "heap-types"], [62, "heap-types"]], "Changing Static Types to Heap Types": [[98, "changing-static-types-to-heap-types"]], "Defining Heap Types": [[98, "defining-heap-types"]], "Garbage-Collection Protocol": [[98, "garbage-collection-protocol"]], "Module State Access from Classes": [[98, "module-state-access-from-classes"]], "Module State Access from Regular Methods": [[98, "module-state-access-from-regular-methods"]], "Module State Access from Slot Methods, Getters and Setters": [[98, "module-state-access-from-slot-methods-getters-and-setters"]], "Lifetime of the Module State": [[98, "lifetime-of-the-module-state"]], "Open Issues": [[98, "open-issues"]], "Per-Class Scope": [[98, "per-class-scope"]], "Lossless Conversion to Heap Types": [[98, "lossless-conversion-to-heap-types"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[84, "programming-faq"]], "\u5e38\u898b\u554f\u984c": [[84, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[84, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[84, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "How can I create a stand-alone binary from a Python script?": [[84, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Are there coding standards or a style guide for Python programs?": [[84, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "Core Language": [[84, "core-language"]], "Why am I getting an UnboundLocalError when the variable has a value?": [[84, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[84, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[84, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "How do I share global variables across modules?": [[84, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[84, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[84, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[84, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "\u5f15\u6578 (arguments) \u548c\u53c3\u6578 (parameters) \u6709\u4ec0\u9ebc\u5340\u5225\uff1f": [[84, "what-is-the-difference-between-arguments-and-parameters"]], "\u70ba\u4ec0\u9ebc\u66f4\u6539 list 'y' \u4e5f\u6703\u66f4\u6539 list 'x'\uff1f": [[84, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[84, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[84, "how-do-you-make-a-higher-order-function-in-python"]], "\u5982\u4f55\u5728 Python \u4e2d\u8907\u88fd\u7269\u4ef6\uff1f": [[84, "how-do-i-copy-an-object-in-python"]], "\u5982\u4f55\u627e\u5230\u7269\u4ef6\u7684\u65b9\u6cd5\u6216\u5c6c\u6027\uff1f": [[84, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "\u6211\u7684\u7a0b\u5f0f\u78bc\u5982\u4f55\u767c\u73fe\u7269\u4ef6\u7684\u540d\u7a31\uff1f": [[84, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[84, "what-s-up-with-the-comma-operator-s-precedence"]], "\u662f\u5426\u6709\u7b49\u6548\u65bc C \u7684 \"?:\" \u4e09\u5143\u904b\u7b97\u5b50\uff1f": [[84, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[84, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[84, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "\u6578\u5b57\u548c\u5b57\u4e32": [[84, "numbers-and-strings"]], "\u5982\u4f55\u6307\u5b9a\u5341\u516d\u9032\u4f4d\u548c\u516b\u9032\u4f4d\u6574\u6578\uff1f": [[84, "how-do-i-specify-hexadecimal-and-octal-integers"]], "\u70ba\u4ec0\u9ebc -22 // 10 \u56de\u50b3 -3\uff1f": [[84, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[84, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "\u5982\u4f55\u5c07\u5b57\u4e32\u8f49\u63db\u70ba\u6578\u5b57\uff1f": [[84, "how-do-i-convert-a-string-to-a-number"]], "\u5982\u4f55\u5c07\u6578\u5b57\u8f49\u63db\u70ba\u5b57\u4e32\uff1f": [[84, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[84, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[84, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[84, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[84, "is-there-a-scanf-or-sscanf-equivalent"]], "'UnicodeDecodeError' \u6216 'UnicodeEncodeErro' \u932f\u8aa4\u662f\u4ec0\u9ebc\u610f\u601d\uff1f": [[84, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Can I end a raw string with an odd number of backslashes?": [[84, "can-i-end-a-raw-string-with-an-odd-number-of-backslashes"]], "Performance": [[84, "performance"], [465, "performance"], [295, "performance"], [254, "performance"]], "My program is too slow. How do I speed it up?": [[84, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[84, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[84, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[84, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[84, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[84, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[84, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[84, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[84, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[84, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method or function to a sequence of objects?": [[84, "how-do-i-apply-a-method-or-function-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[84, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[84, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[84, "how-can-i-sort-one-list-by-values-from-another-list"]], "\u7269\u4ef6": [[84, "objects"]], "\u4ec0\u9ebc\u662f\u985e\u5225 (class)\uff1f": [[84, "what-is-a-class"]], "\u4ec0\u9ebc\u662f\u65b9\u6cd5 (method)\uff1f": [[84, "what-is-a-method"]], "What is self?": [[84, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[84, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[84, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[84, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[84, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[84, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[84, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[84, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[84, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[84, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[84, "why-does-the-result-of-id-appear-to-be-not-unique"]], "When can I rely on identity tests with the is operator?": [[84, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "\u5b50\u985e\u5225\u5982\u4f55\u63a7\u5236\u4e0d\u53ef\u8b8a\u5be6\u4f8b\u4e2d\u5b58\u5132\u7684\u8cc7\u6599\uff1f": [[84, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[84, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[84, "modules"], [425, "examples"], [468, "modules"], [340, "modules"]], "How do I create a .pyc file?": [[84, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[84, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[84, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') \u56de\u50b3 <module 'x'>\uff0c\u90a3\u6211\u600e\u9ebc\u5f97\u5230 z\uff1f": [[84, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "When I edit an imported module and reimport it, the changes don't show up.  Why does this happen?": [[84, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "Argparse \u6559\u5b78": [[88, "argparse-tutorial"]], "\u6982\u5ff5": [[88, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[88, "the-basics"], [108, "basic-usage"], [258, "basic-usage"]], "\u4ecb\u7d39\u4f4d\u7f6e\u53c3\u6578": [[88, "introducing-positional-arguments"]], "\u4ecb\u7d39\u9078\u9805\u53c3\u6578": [[88, "introducing-optional-arguments"]], "Short options": [[88, "short-options"]], "\u73fe\u5728\u7d50\u5408\u4f4d\u7f6e\u8207\u9078\u9805\u53c3\u6578": [[88, "combining-positional-and-optional-arguments"]], "Getting a little more advanced": [[88, "getting-a-little-more-advanced"]], "Specifying ambiguous arguments": [[88, "specifying-ambiguous-arguments"]], "Conflicting options": [[88, "conflicting-options"]], "How to translate the argparse output": [[88, "how-to-translate-the-argparse-output"]], "\u7d50\u8ad6": [[88, "conclusion"]], "\u8853\u8a9e\u8868": [[86, "glossary"]], "\u4fee\u98fe\u5668 HowTo \u6307\u5357": [[92, "descriptor-howto-guide"]], "Primer": [[92, "primer"]], "Simple example: A descriptor that returns a constant": [[92, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[92, "dynamic-lookups"]], "Managed attributes": [[92, "managed-attributes"]], "Customized names": [[92, "customized-names"]], "Closing thoughts": [[92, "closing-thoughts"]], "Complete Practical Example": [[92, "complete-practical-example"]], "Validator class": [[92, "validator-class"]], "Custom validators": [[92, "custom-validators"]], "Practical application": [[92, "practical-application"]], "Technical Tutorial": [[92, "technical-tutorial"]], "Definition and introduction": [[92, "definition-and-introduction"]], "Descriptor protocol": [[92, "descriptor-protocol"]], "Overview of descriptor invocation": [[92, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[92, "invocation-from-an-instance"]], "Invocation from a class": [[92, "invocation-from-a-class"]], "Invocation from super": [[92, "invocation-from-super"]], "Summary of invocation logic": [[92, "summary-of-invocation-logic"]], "Automatic name notification": [[92, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[92, "orm-example"]], "Pure Python Equivalents": [[92, "pure-python-equivalents"]], "Properties": [[92, "properties"]], "Functions and methods": [[92, "functions-and-methods"]], "Kinds of methods": [[92, "kinds-of-methods"]], "Static methods": [[92, "static-methods"]], "Class methods": [[92, "class-methods"]], "Member objects and __slots__": [[92, "member-objects-and-slots"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[97, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[97, null]], "Creating Address/Network/Interface objects": [[97, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[97, "a-note-on-ip-versions"]], "IP Host Addresses": [[97, "ip-host-addresses"]], "Defining Networks": [[97, "defining-networks"]], "Host Interfaces": [[97, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[97, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[97, "networks-as-lists-of-addresses"]], "Using IP Addresses with other modules": [[97, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[97, "getting-more-detail-when-instance-creation-fails"]], "\u9ad8\u968e API \u7d22\u5f15": [[121, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[121, "tasks"]], "\u4f47\u5217 (Queues)": [[121, "queues"], [131, "queues"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[121, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[121, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[121, "synchronization"]], "\u4f8b\u5916": [[121, "exceptions"], [124, "exceptions"], [131, "exceptions"], [34, "exceptions"], [424, "exceptions"], [408, "exceptions"], [403, "exceptions"], [405, "exceptions"], [344, "exceptions"], [333, "exceptions"], [336, "exceptions"], [339, "exceptions"], [337, "exceptions"], [258, "exceptions"], [267, "exceptions"], [228, "exceptions"], [163, "exceptions"]], "\u5982\u4f55\u6392\u5e8f": [[105, "sorting-how-to"]], "\u57fa\u790e\u6392\u5e8f": [[105, "sorting-basics"]], "\u9375\u51fd\u5f0f (key functions)": [[105, "key-functions"]], "Operator \u6a21\u7d44\u7684\u51fd\u5f0f": [[105, "operator-module-functions"]], "\u5347\u51aa\u8207\u964d\u51aa": [[105, "ascending-and-descending"]], "\u6392\u5e8f\u7a69\u5b9a\u6027\u8207\u8907\u5408\u6392\u5e8f": [[105, "sort-stability-and-complex-sorts"]], "\u88dd\u98fe-\u6392\u5e8f-\u79fb\u9664\u88dd\u98fe (decorate-sort-undecorate)": [[105, "decorate-sort-undecorate"]], "\u6bd4\u8f03\u51fd\u5f0f (comparison functions)": [[105, "comparison-functions"]], "\u96dc\u9805\u8aaa\u660e": [[105, "odds-and-ends"]], "Runners": [[132, "runners"]], "Running an asyncio Program": [[132, "running-an-asyncio-program"]], "Runner context manager": [[132, "runner-context-manager"]], "Handling Keyboard Interruption": [[132, "handling-keyboard-interruption"]], "Unicode HOWTO": [[106, "unicode-howto"]], "Introduction to Unicode": [[106, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[106, "definitions"]], "Encodings": [[106, "encodings"]], "Python's Unicode Support": [[106, "python-s-unicode-support"]], "The String Type": [[106, "the-string-type"]], "Converting to Bytes": [[106, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[106, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[106, "unicode-properties"]], "Comparing Strings": [[106, "comparing-strings"]], "Unicode Regular Expressions": [[106, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[106, "reading-and-writing-unicode-data"]], "Unicode filenames": [[106, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[106, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[106, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[106, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[106, "acknowledgements"], [463, "acknowledgements"], [458, "acknowledgements"], [459, "acknowledgements"], [460, "acknowledgements"], [461, "acknowledgements"], [464, "acknowledgements"], [462, "acknowledgements"], [457, "acknowledgements"], [226, "acknowledgements"]], "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357": [[104, "socket-programming-howto"]], "Sockets": [[104, "sockets"], [421, "sockets"]], "\u6b77\u53f2": [[104, "history"]], "\u5efa\u7acb\u4e00\u500b Socket": [[104, "creating-a-socket"]], "IPC": [[104, "ipc"]], "\u4f7f\u7528\u4e00\u500b Socket": [[104, "using-a-socket"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599": [[104, "binary-data"]], "\u7d50\u675f\u9023\u7dda": [[104, "disconnecting"]], "Sockets \u4f55\u6642\u92b7\u6bc0": [[104, "when-sockets-die"]], "\u975e\u963b\u585e\u7684 Sockets": [[104, "non-blocking-sockets"]], "\u5b89\u88dd Python \u6a21\u7d44": [[108, "installing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[108, "key-terms"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[108, "how-do-i"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[108, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[108, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[108, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[108, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[108, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[108, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[108, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[108, "installing-binary-extensions"]], "\u4f4e\u968e API \u7d22\u5f15": [[127, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[127, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[127, "event-loop-methods"]], "\u50b3\u8f38": [[127, "transports"]], "\u5354\u5b9a": [[127, "protocols"], [381, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[127, "event-loop-policies"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[117, "argparse-parser-for-command-line-options-arguments-and-sub-commands"]], "\u6559\u5b78": [[117, null]], "Core Functionality": [[117, "core-functionality"]], "Quick Links for add_argument()": [[117, "quick-links-for-add-argument"]], "\u5efa\u7acb\u4e00\u500b\u5256\u6790\u5668": [[117, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[117, "adding-arguments"]], "\u5256\u6790\u5f15\u6578": [[117, "parsing-arguments"]], "ArgumentParser \u7269\u4ef6": [[117, "argumentparser-objects"]], "prog": [[117, "prog"]], "usage": [[117, "usage"]], "\u63cf\u8ff0": [[117, "description"]], "epilog": [[117, "epilog"]], "parents": [[117, "parents"]], "formatter_class": [[117, "formatter-class"]], "prefix_chars": [[117, "prefix-chars"]], "fromfile_prefix_chars": [[117, "fromfile-prefix-chars"]], "argument_default": [[117, "argument-default"]], "allow_abbrev": [[117, "allow-abbrev"]], "conflict_handler": [[117, "conflict-handler"]], "add_help": [[117, "add-help"]], "exit_on_error": [[117, "exit-on-error"]], "The add_argument() method": [[117, "the-add-argument-method"]], "name or flags": [[117, "name-or-flags"]], "action": [[117, "action"]], "nargs": [[117, "nargs"]], "const": [[117, "const"]], "default": [[117, "default"]], "type": [[117, "type"]], "choices": [[117, "choices"]], "required": [[117, "required"]], "\u5e6b\u52a9": [[117, "help"]], "metavar": [[117, "metavar"]], "dest": [[117, "dest"]], "Action classes": [[117, "action-classes"]], "The parse_args() method": [[117, "the-parse-args-method"]], "Option value syntax": [[117, "option-value-syntax"]], "Invalid arguments": [[117, "invalid-arguments"]], "Arguments containing -": [[117, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[117, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[117, "beyond-sys-argv"]], "The Namespace object": [[117, "the-namespace-object"]], "Other utilities": [[117, "other-utilities"]], "Sub-commands": [[117, "sub-commands"]], "FileType \u7269\u4ef6": [[117, "filetype-objects"]], "Argument groups": [[117, "argument-groups"]], "Mutual exclusion": [[117, "mutual-exclusion"]], "Parser defaults": [[117, "parser-defaults"]], "Printing help": [[117, "printing-help"]], "Partial parsing": [[117, "partial-parsing"]], "Customizing file parsing": [[117, "customizing-file-parsing"]], "Exiting methods": [[117, "exiting-methods"]], "Intermixed parsing": [[117, "intermixed-parsing"]], "Upgrading optparse code": [[117, "upgrading-optparse-code"]], "Exceptions": [[117, "exceptions"], [315, "exceptions"], [288, "exceptions"]], "abc --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[113, "abc-abstract-base-classes"]], "ast --- Abstract Syntax Trees": [[119, "ast-abstract-syntax-trees"]], "Abstract Grammar": [[119, "abstract-grammar"]], "Node classes": [[119, "node-classes"]], "Root nodes": [[119, "root-nodes"]], "Literals": [[119, "literals"], [430, "literals"], [425, "literals"]], "Variables": [[119, "variables"]], "Expressions": [[119, "expressions"], [425, "expressions"]], "Subscripting": [[119, "subscripting"]], "Comprehensions": [[119, "comprehensions"]], "Statements": [[119, "statements"]], "Imports": [[119, "imports"]], "Control flow": [[119, "control-flow"]], "Pattern matching": [[119, "pattern-matching"]], "Type parameters": [[119, "type-parameters"]], "Function and class definitions": [[119, "function-and-class-definitions"]], "Async and await": [[119, "async-and-await"]], "ast Helpers": [[119, "ast-helpers"]], "Compiler Flags": [[119, "compiler-flags"]], "Command-Line Usage": [[119, "command-line-usage"], [375, "command-line-usage"], [373, "command-line-usage"]], "Event Loop": [[123, "event-loop"]], "Event Loop Methods": [[123, "event-loop-methods"]], "Running and stopping the loop": [[123, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[123, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[123, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[123, "creating-futures-and-tasks"]], "Opening network connections": [[123, "opening-network-connections"]], "Creating network servers": [[123, "creating-network-servers"]], "Transferring files": [[123, "transferring-files"]], "TLS Upgrade": [[123, "tls-upgrade"]], "Watching file descriptors": [[123, "watching-file-descriptors"]], "Working with socket objects directly": [[123, "working-with-socket-objects-directly"]], "DNS": [[123, "dns"]], "Working with pipes": [[123, "working-with-pipes"]], "Unix signals": [[123, "unix-signals"]], "Executing code in thread or process pools": [[123, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[123, "error-handling-api"]], "Enabling debug mode": [[123, "enabling-debug-mode"]], "Running Subprocesses": [[123, "running-subprocesses"]], "Callback Handles": [[123, "callback-handles"]], "Server Objects": [[123, "server-objects"], [334, "server-objects"]], "Event Loop Implementations": [[123, "event-loop-implementations"]], "Hello World with call_soon()": [[123, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[123, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[123, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[123, "set-signal-handlers-for-sigint-and-sigterm"]], "__future__ --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9": [[110, "future-future-statement-definitions"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[118, "array-efficient-arrays-of-numeric-values"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[116, "data-compression-and-archiving"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[115, "generic-operating-system-services"]], "Futures": [[126, "futures"]], "Future \u51fd\u5f0f": [[126, "future-functions"]], "Future \u7269\u4ef6": [[126, "future-object"], [162, "future-objects"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[120, "asyncio-asynchronous-i-o"]], "Hello World!": [[120, null]], "\u9ad8\u968e API": [[120, null], [32, "high-level-api"]], "\u4f4e\u968e API": [[120, null], [32, "low-level-api"]], "\u6307\u5357\u8207\u6559\u5b78": [[120, null]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[135, "synchronization-primitives"]], "Lock": [[135, "lock"]], "Event": [[135, "event"]], "Condition": [[135, "condition"]], "Semaphore": [[135, "semaphore"]], "BoundedSemaphore": [[135, "boundedsemaphore"]], "Barrier": [[135, "barrier"]], "\u5b50\u884c\u7a0b": [[134, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[134, "creating-subprocesses"]], "\u5e38\u6578": [[134, "constants"], [381, "constant"], [400, "constants"], [333, "constants"], [337, "constants"], [271, "constants"], [231, "constants"], [182, "constants"], [179, "constants"], [151, "constants"]], "Interacting with Subprocesses": [[134, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[134, "subprocess-and-threads"]], "__main__ --- Top-level code environment": [[111, "main-top-level-code-environment"]], "__name__ == '__main__'": [[111, "name-main"]], "What is the \"top-level code environment\"?": [[111, "what-is-the-top-level-code-environment"]], "Idiomatic Usage": [[111, "idiomatic-usage"], [111, "id1"]], "Packaging Considerations": [[111, "packaging-considerations"]], "__main__.py in Python Packages": [[111, "main-py-in-python-packages"]], "import __main__": [[111, "import-main"]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[114, "aifc-read-and-write-aiff-and-aifc-files"]], "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3": [[102, "porting-python-2-code-to-python-3"]], "\u7c21\u77ed\u7684\u8aaa\u660e": [[102, "the-short-explanation"]], "\u8a73\u7d30\u7684": [[102, "details"]], "\u5411\u4e0b\u652f\u63f4Python 2.6\u548c\u66f4\u820a\u7684\u7248\u672c": [[102, "drop-support-for-python-2-6-and-older"]], "Make sure you specify the proper version support in your setup.py file": [[102, "make-sure-you-specify-the-proper-version-support-in-your-setup-py-file"]], "\u6709\u597d\u7684\u6e2c\u8a66\u8986\u84cb\u7387": [[102, "have-good-test-coverage"]], "\u77ad\u89e3Python 2 & 3\u7684\u5dee\u7570": [[102, "learn-the-differences-between-python-2-3"]], "\u66f4\u65b0\u4f60\u7684\u7a0b\u5f0f\u78bc": [[102, "update-your-code"]], "Division": [[102, "division"]], "Text versus binary data": [[102, "text-versus-binary-data"]], "Use feature detection instead of version detection": [[102, "use-feature-detection-instead-of-version-detection"]], "Prevent compatibility regressions": [[102, "prevent-compatibility-regressions"]], "Check which dependencies block your transition": [[102, "check-which-dependencies-block-your-transition"]], "Update your setup.py file to denote Python 3 compatibility": [[102, "update-your-setup-py-file-to-denote-python-3-compatibility"]], "Use continuous integration to stay compatible": [[102, "use-continuous-integration-to-stay-compatible"]], "Consider using optional static type checking": [[102, "consider-using-optional-static-type-checking"]], "_thread --- Low-level threading API": [[112, "thread-low-level-threading-api"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[122, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[122, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[122, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[122, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[122, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[122, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[122, "detect-never-retrieved-exceptions"]], "Queue": [[131, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[131, "priority-queue"]], "LIFO Queue": [[131, "lifo-queue"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[109, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[109, "using-2to3"]], "Fixers": [[109, "fixers"]], "lib2to3 --- 2to3's library": [[109, "lib2to3-2to3-s-library"]], "Transports and Protocols": [[130, "transports-and-protocols"]], "Transports": [[130, "transports"]], "Transports Hierarchy": [[130, "transports-hierarchy"]], "Base Transport": [[130, "base-transport"]], "Read-only Transports": [[130, "read-only-transports"]], "Write-only Transports": [[130, "write-only-transports"]], "Datagram Transports": [[130, "datagram-transports"]], "Subprocess Transports": [[130, "subprocess-transports"]], "Protocols": [[130, "protocols"]], "Base Protocols": [[130, "base-protocols"]], "Base Protocol": [[130, "base-protocol"]], "Streaming Protocols": [[130, "streaming-protocols"]], "Buffered Streaming Protocols": [[130, "buffered-streaming-protocols"]], "Datagram Protocols": [[130, "datagram-protocols"]], "Subprocess Protocols": [[130, "subprocess-protocols"]], "TCP Echo Server": [[130, "tcp-echo-server"]], "TCP Echo Client": [[130, "tcp-echo-client"]], "UDP Echo Server": [[130, "udp-echo-server"]], "UDP Echo Client": [[130, "udp-echo-client"]], "Connecting Existing Sockets": [[130, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[130, "loop-subprocess-exec-and-subprocessprotocol"]], "\u5e73\u81fa\u652f\u63f4": [[128, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[128, "all-platforms"]], "Windows": [[128, "windows"], [478, "windows"], [478, "id7"], [478, "id22"], [478, "id29"], [478, "id38"], [478, "id48"], [478, "id57"], [478, "id67"], [478, "id73"], [478, "id83"], [478, "id93"], [478, "id102"], [478, "id114"], [478, "id123"], [478, "id132"], [478, "id140"], [478, "id149"], [478, "id157"], [478, "id165"], [478, "id175"], [478, "id186"], [478, "id196"], [478, "id205"], [478, "id215"], [478, "id233"], [478, "id244"], [478, "id254"], [478, "id264"], [478, "id274"], [478, "id285"], [478, "id296"], [478, "id311"], [478, "id321"], [478, "id332"], [478, "id343"], [478, "id354"], [478, "id362"], [478, "id370"], [478, "id381"], [478, "id395"], [478, "id405"], [478, "id416"], [478, "id425"], [478, "id432"], [478, "id440"], [478, "id457"], [478, "id466"], [478, "id479"], [478, "id489"], [478, "id502"], [478, "id515"], [478, "id521"], [478, "id528"], [478, "id542"], [478, "id547"], [478, "id558"], [478, "id563"], [478, "id580"], [478, "id591"], [478, "id604"], [478, "id614"], [478, "id626"], [478, "id629"], [478, "id636"], [478, "id681"], [478, "id690"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[128, "subprocess-support-on-windows"]], "macOS": [[128, "macos"], [478, "macos"], [478, "id8"], [478, "id30"], [478, "id39"], [478, "id58"], [478, "id74"], [478, "id84"], [478, "id94"], [478, "id103"], [478, "id115"], [478, "id124"], [478, "id141"], [478, "id150"], [478, "id158"], [478, "id166"], [478, "id176"], [478, "id187"], [478, "id206"], [478, "id216"], [478, "id224"], [478, "id234"], [478, "id245"], [478, "id255"], [478, "id265"], [478, "id275"], [478, "id286"], [478, "id312"], [478, "id322"], [478, "id333"], [478, "id344"], [478, "id371"], [478, "id388"], [478, "id396"], [478, "id406"], [478, "id417"], [478, "id426"], [478, "id441"], [478, "id467"], [478, "id480"], [478, "id490"]], "Policies": [[129, "policies"]], "Getting and Setting the Policy": [[129, "getting-and-setting-the-policy"]], "Policy Objects": [[129, "policy-objects"]], "Process Watchers": [[129, "process-watchers"]], "Custom Policies": [[129, "custom-policies"]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[107, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[107, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[107, "fetching-urls"]], "Data": [[107, "data"]], "Headers": [[107, "headers"]], "Handling Exceptions": [[107, "handling-exceptions"]], "URLError": [[107, "urlerror"]], "HTTPError": [[107, "httperror"]], "Error Codes": [[107, "error-codes"]], "Wrapping it Up": [[107, "wrapping-it-up"]], "Number 1": [[107, "number-1"]], "Number 2": [[107, "number-2"]], "info and geturl": [[107, "info-and-geturl"]], "Openers and Handlers": [[107, "openers-and-handlers"]], "Basic Authentication": [[107, "id5"]], "Proxies": [[107, "proxies"]], "Sockets and Layers": [[107, "sockets-and-layers"]], "\u8a3b\u89e3": [[107, "footnotes"], [344, "notes"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[103, "regular-expression-howto"]], "Simple Patterns": [[103, "simple-patterns"]], "Matching Characters": [[103, "matching-characters"]], "Repeating Things": [[103, "repeating-things"]], "Using Regular Expressions": [[103, "using-regular-expressions"]], "Compiling Regular Expressions": [[103, "compiling-regular-expressions"]], "The Backslash Plague": [[103, "the-backslash-plague"]], "Performing Matches": [[103, "performing-matches"]], "Module-Level Functions": [[103, "module-level-functions"], [263, "module-level-functions"]], "Compilation Flags": [[103, "compilation-flags"]], "More Pattern Power": [[103, "more-pattern-power"]], "More Metacharacters": [[103, "more-metacharacters"]], "Grouping": [[103, "grouping"]], "Non-capturing and Named Groups": [[103, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[103, "lookahead-assertions"]], "Modifying Strings": [[103, "modifying-strings"]], "Splitting Strings": [[103, "splitting-strings"]], "Search and Replace": [[103, "search-and-replace"], [243, "search-and-replace"]], "Common Problems": [[103, "common-problems"]], "Use String Methods": [[103, "use-string-methods"]], "match() versus search()": [[103, "match-versus-search"]], "Greedy versus Non-Greedy": [[103, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[103, "using-re-verbose"]], "Feedback": [[103, "feedback"]], "Extending": [[125, "extending"]], "Writing a Custom Event Loop": [[125, "writing-a-custom-event-loop"]], "Future and Task private constructors": [[125, "future-and-task-private-constructors"]], "Task lifetime support": [[125, "task-lifetime-support"]], "\u4e32\u6d41": [[133, "streams"]], "StreamReader": [[133, "streamreader"]], "StreamWriter": [[133, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[133, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[133, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[133, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[133, "register-an-open-socket-to-wait-for-data-using-streams"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "Python Initialization Configuration": [[33, "python-initialization-configuration"]], "PyWideStringList": [[33, "pywidestringlist"]], "PyStatus": [[33, "pystatus"]], "PyPreConfig": [[33, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[33, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[33, "pyconfig"]], "Initialization with PyConfig": [[33, "initialization-with-pyconfig"]], "Isolated Configuration": [[33, "isolated-configuration"]], "Python Configuration": [[33, "python-configuration"]], "Python Path Configuration": [[33, "python-path-configuration"]], "Py_RunMain()": [[33, "py-runmain"]], "Py_GetArgcArgv()": [[33, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[33, "multi-phase-initialization-private-provisional-api"]], "\u5177\u9ad4\u7269\u4ef6\u5c64": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [308, "function-objects"]], "\u5176\u4ed6\u7269\u4ef6": [[16, "other-objects"], [5, "other-objects"]], "Frame Objects": [[26, "frame-objects"]], "Internal Frames": [[26, "internal-frames"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6": [[3, "allocating-objects-on-the-heap"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Pack and Unpack functions": [[25, "pack-and-unpack-functions"]], "Pack functions": [[25, "pack-functions"]], "Unpack functions": [[25, "unpack-functions"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)": [[8, "byte-array-objects"]], "\u578b\u5225\u6aa2\u67e5\u5de8\u96c6": [[8, "type-check-macros"]], "\u76f4\u63a5 API \u51fd\u5f0f": [[8, "direct-api-functions"]], "\u5de8\u96c6": [[8, "macros"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)": [[27, "function-objects"]], "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f": [[14, "codec-registry-and-support-functions"]], "\u7de8\u89e3\u78bc\u5668\u67e5\u627e API": [[14, "codec-lookup-api"]], "\u7528\u65bc Unicode \u7de8\u78bc\u932f\u8aa4\u8655\u7406\u7a0b\u5f0f\u7684\u8a3b\u518a API": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "\u6a94\u6848\u7269\u4ef6 (File Objects)": [[24, "file-objects"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "Initialization, Finalization, and Threads": [[32, "initialization-finalization-and-threads"]], "Before Python Initialization": [[32, "before-python-initialization"]], "Global configuration variables": [[32, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[32, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[32, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[32, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[32, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[32, "non-python-created-threads"]], "Cautions about fork()": [[32, "cautions-about-fork"]], "Sub-interpreter support": [[32, "sub-interpreter-support"]], "A Per-Interpreter GIL": [[32, "a-per-interpreter-gil"]], "Bugs and caveats": [[32, "bugs-and-caveats"]], "Asynchronous Notifications": [[32, "asynchronous-notifications"]], "Profiling and Tracing": [[32, "profiling-and-tracing"]], "Advanced Debugger Support": [[32, "advanced-debugger-support"]], "Thread Local Storage Support": [[32, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[32, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[32, "dynamic-allocation"]], "\u65b9\u6cd5": [[32, "methods"]], "Thread Local Storage (TLS) API": [[32, "thread-local-storage-tls-api"]], "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [288, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)": [[9, "bytes-objects"]], "Capsules": [[11, "capsules"], [464, "capsules"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "Supporting Cyclic Garbage Collection": [[28, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[28, "controlling-the-garbage-collector-state"]], "Querying Garbage Collector State": [[28, "querying-garbage-collector-state"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [383, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"], [162, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "Python/C API \u53c3\u8003\u624b\u518a": [[31, "python-c-api-reference-manual"]], "\u8907\u6578\u7269\u4ef6": [[15, "complex-number-objects"]], "\u4f5c\u70ba C \u7d50\u69cb\u7684\u8907\u6578": [[15, "complex-numbers-as-c-structures"]], "\u4f5c\u70ba Python \u7269\u4ef6\u7684\u8907\u6578": [[15, "complex-numbers-as-python-objects"]], "\u7a0b\u5f0f\u78bc\u7269\u4ef6": [[13, "code-objects"]], "Extra information": [[13, "extra-information"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "\u7522\u751f\u5668 (Generator) \u7269\u4ef6": [[29, "generator-objects"]], "API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "Context Variables Objects": [[17, "context-variables-objects"]], "\u5f15\u5165\u6a21\u7d44": [[30, "importing-modules"], [276, "importing-modules"]], "Sequence Protocol": [[53, "sequence-protocol"]], "\u578b\u5225\u63d0\u793a\u7269\u4ef6": [[61, "objects-for-type-hinting"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[66, "weak-reference-objects"]], "\u6574\u6578\u7269\u4ef6": [[38, "integer-objects"]], "C API \u7a69\u5b9a\u6027": [[56, "c-api-stability"]], "\u4e0d\u7a69\u5b9a\u7684 C API": [[56, "unstable-c-api"]], "\u7a69\u5b9a\u7684\u61c9\u7528\u7a0b\u5f0f\u4e8c\u9032\u4f4d\u4ecb\u9762": [[56, "stable-application-binary-interface"]], "\u53d7\u9650 C API": [[56, "limited-c-api"]], "\u7a69\u5b9a ABI": [[56, "stable-abi"]], "\u53d7\u9650 API \u7bc4\u570d\u548c\u6027\u80fd": [[56, "limited-api-scope-and-performance"]], "\u53d7\u9650 API \u6ce8\u610f\u4e8b\u9805": [[56, "limited-api-caveats"]], "\u5e73\u53f0\u6ce8\u610f\u4e8b\u9805": [[56, "platform-considerations"]], "\u53d7\u9650 API \u7684\u5167\u5bb9": [[56, "contents-of-limited-api"]], "The Very High Level Layer": [[65, "the-very-high-level-layer"]], "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668": [[63, "unicode-objects-and-codecs"]], "Unicode Objects": [[63, "unicode-objects"]], "Unicode Type": [[63, "unicode-type"]], "Unicode Character Properties": [[63, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[63, "creating-and-accessing-unicode-strings"]], "Locale Encoding": [[63, "locale-encoding"]], "File System Encoding": [[63, "file-system-encoding"]], "wchar_t Support": [[63, "wchar-t-support"]], "Built-in Codecs": [[63, "built-in-codecs"]], "Generic Codecs": [[63, "generic-codecs"]], "UTF-8 \u7de8\u89e3\u78bc\u5668": [[63, "utf-8-codecs"]], "UTF-32 \u7de8\u89e3\u78bc\u5668": [[63, "utf-32-codecs"]], "UTF-16 \u7de8\u89e3\u78bc\u5668": [[63, "utf-16-codecs"]], "UTF-7 \u7de8\u89e3\u78bc\u5668": [[63, "utf-7-codecs"]], "Unicode-Escape Codecs": [[63, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[63, "raw-unicode-escape-codecs"]], "Latin-1 \u7de8\u89e3\u78bc\u5668": [[63, "latin-1-codecs"]], "ASCII \u7de8\u89e3\u78bc\u5668": [[63, "ascii-codecs"]], "Character Map Codecs": [[63, "character-map-codecs"]], "MBCS codecs for Windows": [[63, "mbcs-codecs-for-windows"]], "Methods & Slots": [[63, "methods-slots"]], "Methods and Slot Functions": [[63, "methods-and-slot-functions"]], "\u758a\u4ee3\u5668\u5354\u8b70": [[35, "iterator-protocol"]], "\u5207\u7247\u7269\u4ef6": [[55, "slice-objects"]], "Ellipsis Object": [[55, "ellipsis-object"]], "\u53c3\u7167\u8a08\u6578": [[51, "reference-counting"], [34, "reference-counts"]], "Object Protocol": [[48, "object-protocol"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[57, "common-object-structures"]], "Base object types and macros": [[57, "base-object-types-and-macros"]], "Implementing functions and methods": [[57, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[57, "accessing-attributes-of-extension-types"]], "Member flags": [[57, "member-flags"]], "Member types": [[57, "member-types"]], "Defining Getters and Setters": [[57, "defining-getters-and-setters"]], "None \u7269\u4ef6": [[45, "the-none-object"]], "Reflection": [[52, "reflection"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[37, "list-objects"]], "MemoryView \u7269\u4ef6": [[42, "index-0"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[43, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[43, "method-objects"]], "Mapping Protocol": [[39, "mapping-protocol"]], "Support for Perf Maps": [[50, "support-for-perf-maps"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[67, "python-documentation-contents"]], "Set Objects": [[54, "set-objects"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[44, "module-objects"]], "Initializing C modules": [[44, "initializing-c-modules"]], "Single-phase initialization": [[44, "single-phase-initialization"]], "Multi-phase initialization": [[44, "multi-phase-initialization"]], "Low-level module creation functions": [[44, "low-level-module-creation-functions"]], "Support functions": [[44, "support-functions"]], "Module lookup": [[44, "module-lookup"]], "Type Objects": [[60, "type-objects"], [340, "type-objects"]], "Creating Heap-Allocated Types": [[60, "creating-heap-allocated-types"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[36, "iterator-objects"]], "Data marshalling support": [[40, "data-marshalling-support"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[47, "old-buffer-protocol"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[58, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[58, "system-functions"]], "\u884c\u7a0b\uff08Process\uff09\u63a7\u5236": [[58, "process-control"]], "\u578b\u5225\u7269\u4ef6": [[62, "type-objects"]], "Quick Reference": [[62, "quick-reference"]], "\"tp slots\"": [[62, "tp-slots"]], "sub-slots": [[62, "sub-slots"]], "slot typedefs": [[62, "slot-typedefs"]], "PyTypeObject Definition": [[62, "pytypeobject-definition"]], "PyObject Slots": [[62, "pyobject-slots"]], "PyVarObject Slots": [[62, "pyvarobject-slots"]], "PyTypeObject Slots": [[62, "pytypeobject-slots"]], "Static Types": [[62, "static-types"]], "Number Object Structures": [[62, "number-object-structures"]], "Mapping Object Structures": [[62, "mapping-object-structures"]], "Sequence Object Structures": [[62, "sequence-object-structures"]], "Buffer Object Structures": [[62, "buffer-object-structures"]], "Async Object Structures": [[62, "async-object-structures"]], "Slot Type typedefs": [[62, "slot-type-typedefs"]], "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6": [[59, "tuple-objects"]], "Struct Sequence Objects": [[59, "struct-sequence-objects"]], "\u7de8\u5beb\u6a19\u6e96": [[34, "coding-standards"]], "\u5f15\u5165\u6a94\u6848 (include files)": [[34, "include-files"]], "\u6709\u7528\u7684\u5de8\u96c6": [[34, "useful-macros"]], "\u7269\u4ef6\u3001\u578b\u5225\u548c\u53c3\u7167\u8a08\u6578": [[34, "objects-types-and-reference-counts"]], "\u53c3\u7167\u8a08\u6578\u8a73\u7d30\u8cc7\u8a0a": [[34, "reference-count-details"]], "\u578b\u5225": [[34, "types"]], "\u5d4c\u5165\u5f0fPython": [[34, "embedding-python"]], "\u9664\u932f\u5efa\u7f6e": [[34, "debugging-builds"]], "Number Protocol": [[46, "number-protocol"]], "Object Implementation Support": [[49, "object-implementation-support"]], "\u5de5\u5177": [[64, "utilities"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[41, "memory-management"]], "\u7e3d\u89bd": [[41, "overview"], [254, "overview"]], "Allocator Domains": [[41, "allocator-domains"]], "Raw Memory Interface": [[41, "raw-memory-interface"]], "Memory Interface": [[41, "memory-interface"]], "Object allocators": [[41, "object-allocators"]], "Default Memory Allocators": [[41, "default-memory-allocators"]], "Customize Memory Allocators": [[41, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[41, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[41, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[41, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[41, "tracemalloc-c-api"]], "zipfile --- Work with ZIP archives": [[417, "zipfile-work-with-zip-archives"]], "ZipFile \u7269\u4ef6": [[417, "zipfile-objects"]], "Path Objects": [[417, "path-objects"]], "PyZipFile \u7269\u4ef6": [[417, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[417, "zipinfo-objects"]], "Command-Line Interface": [[417, "command-line-interface"], [353, "command-line-interface"], [307, "command-line-interface"]], "Command-line options": [[417, "command-line-options"], [353, "command-line-options"]], "Decompression pitfalls": [[417, "decompression-pitfalls"]], "From file itself": [[417, "from-file-itself"]], "File System limitations": [[417, "file-system-limitations"]], "Resources limitations": [[417, "resources-limitations"]], "Interruption": [[417, "interruption"]], "Default behaviors of extraction": [[417, "default-behaviors-of-extraction"]], "\u8cc7\u6599\u7d50\u69cb": [[437, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[437, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[437, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[437, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[437, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[437, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[437, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[437, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[437, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[437, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[437, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[437, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[437, "comparing-sequences-and-other-types"]], "xmlrpc.server --- Basic XML-RPC servers": [[415, "xmlrpc-server-basic-xml-rpc-servers"]], "SimpleXMLRPCServer \u7269\u4ef6": [[415, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[415, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[415, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[415, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[415, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[415, "doccgixmlrpcrequesthandler"]], "Execution model": [[424, "execution-model"]], "Structure of a program": [[424, "structure-of-a-program"]], "Naming and binding": [[424, "naming-and-binding"]], "Binding of names": [[424, "binding-of-names"]], "Resolution of names": [[424, "resolution-of-names"]], "Annotation scopes": [[424, "annotation-scopes"]], "Lazy evaluation": [[424, "lazy-evaluation"]], "Builtins and restricted execution": [[424, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[424, "interaction-with-dynamic-features"]], "Data model": [[423, "data-model"]], "Objects, values and types": [[423, "objects-values-and-types"]], "\u6a19\u6e96\u578b\u5225\u968e\u5c64": [[423, "the-standard-type-hierarchy"]], "Special method names": [[423, "special-method-names"]], "Basic customization": [[423, "basic-customization"]], "Customizing attribute access": [[423, "customizing-attribute-access"]], "Customizing module attribute access": [[423, "customizing-module-attribute-access"]], "Implementing Descriptors": [[423, "implementing-descriptors"]], "Invoking Descriptors": [[423, "invoking-descriptors"]], "__slots__": [[423, "slots"], [467, "slots"]], "Notes on using __slots__": [[423, "notes-on-using-slots"]], "Customizing class creation": [[423, "customizing-class-creation"]], "Metaclasses": [[423, "metaclasses"]], "Resolving MRO entries": [[423, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[423, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[423, "preparing-the-class-namespace"]], "Executing the class body": [[423, "executing-the-class-body"]], "Creating the class object": [[423, "creating-the-class-object"]], "Uses for metaclasses": [[423, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[423, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[423, "emulating-generic-types"]], "The purpose of __class_getitem__": [[423, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[423, "class-getitem-versus-getitem"]], "Emulating callable objects": [[423, "emulating-callable-objects"]], "Emulating container types": [[423, "emulating-container-types"]], "Emulating numeric types": [[423, "emulating-numeric-types"]], "With Statement Context Managers": [[423, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[423, "customizing-positional-arguments-in-class-pattern-matching"]], "Emulating buffer types": [[423, "emulating-buffer-types"]], "Special method lookup": [[423, "special-method-lookup"]], "\u5354\u7a0b": [[423, "coroutines"], [422, "coroutines"], [136, "coroutines"]], "Awaitable Objects": [[423, "awaitable-objects"]], "Coroutine Objects": [[423, "coroutine-objects"]], "Asynchronous Iterators": [[423, "asynchronous-iterators"]], "Asynchronous Context Managers": [[423, "asynchronous-context-managers"]], "zoneinfo --- IANA \u6642\u5340\u652f\u63f4": [[420, "zoneinfo-iana-time-zone-support"]], "Using ZoneInfo": [[420, "using-zoneinfo"]], "Data sources": [[420, "data-sources"]], "Configuring the data sources": [[420, "configuring-the-data-sources"]], "Compile-time configuration": [[420, "compile-time-configuration"]], "Environment configuration": [[420, "environment-configuration"]], "Runtime configuration": [[420, "runtime-configuration"]], "The ZoneInfo class": [[420, "the-zoneinfo-class"]], "String representations": [[420, "string-representations"]], "Pickle serialization": [[420, "pickle-serialization"]], "\u51fd\u5f0f": [[420, "functions"], [408, "functions"], [408, "elementinclude-functions"], [377, "functions"], [400, "functions"], [340, "functions"], [361, "functions"], [333, "functions"], [246, "functions"], [175, "functions"], [173, "functions"], [148, "functions"]], "Globals": [[420, "globals"]], "Exceptions and warnings": [[420, "exceptions-and-warnings"]], "xmlrpc --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44": [[413, "xmlrpc-xmlrpc-server-and-client-modules"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[436, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[436, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[436, "for-statements"]], "range() \u51fd\u5f0f": [[436, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[436, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[436, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[436, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[436, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[436, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[436, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[436, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[436, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[436, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[436, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[436, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[436, "function-examples"]], "\u56de\u9867": [[436, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[436, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[436, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[436, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[436, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[436, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[436, "intermezzo-coding-style"]], "xml.sax.saxutils --- SAX Utilities": [[412, "xml-sax-saxutils-sax-utilities"]], "xml.sax.xmlreader --- Interface for XML parsers": [[411, "xml-sax-xmlreader-interface-for-xml-parsers"]], "XMLReader \u7269\u4ef6": [[411, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[411, "incrementalparser-objects"]], "Locator Objects": [[411, "locator-objects"]], "InputSource \u7269\u4ef6": [[411, "inputsource-objects"]], "The Attributes Interface": [[411, "the-attributes-interface"]], "The AttributesNS Interface": [[411, "the-attributesns-interface"]], "xml.sax --- Support for SAX2 parsers": [[409, "xml-sax-support-for-sax2-parsers"]], "SAXException \u7269\u4ef6": [[409, "saxexception-objects"]], "Compound statements": [[422, "compound-statements"]], "The if statement": [[422, "the-if-statement"]], "The while statement": [[422, "the-while-statement"]], "The for statement": [[422, "the-for-statement"]], "The try statement": [[422, "the-try-statement"]], "except clause": [[422, "except-clause"]], "except* clause": [[422, "except-star"]], "else clause": [[422, "else-clause"]], "finally clause": [[422, "finally-clause"]], "The with statement": [[422, "the-with-statement"]], "The match statement": [[422, "the-match-statement"]], "Overview": [[422, "overview"], [247, "overview"]], "Guards": [[422, "guards"]], "Irrefutable Case Blocks": [[422, "irrefutable-case-blocks"]], "Patterns": [[422, "patterns"]], "OR Patterns": [[422, "or-patterns"]], "AS Patterns": [[422, "as-patterns"]], "Literal Patterns": [[422, "literal-patterns"]], "Capture Patterns": [[422, "capture-patterns"]], "Wildcard Patterns": [[422, "wildcard-patterns"]], "Value Patterns": [[422, "value-patterns"]], "Group Patterns": [[422, "group-patterns"]], "Sequence Patterns": [[422, "sequence-patterns"]], "Mapping Patterns": [[422, "mapping-patterns"]], "Class Patterns": [[422, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[422, "function-definitions"]], "Class definitions": [[422, "class-definitions"]], "Coroutine function definition": [[422, "coroutine-function-definition"]], "The async for statement": [[422, "the-async-for-statement"]], "The async with statement": [[422, "the-async-with-statement"]], "Type parameter lists": [[422, "type-parameter-lists"]], "Generic functions": [[422, "generic-functions"]], "Generic classes": [[422, "generic-classes"]], "Generic type aliases": [[422, "generic-type-aliases"]], "zlib --- \u76f8\u5bb9\u65bc gzip \u7684\u58d3\u7e2e": [[419, "zlib-compression-compatible-with-gzip"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[421, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[421, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[421, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.12.0rc1 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[421, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[421, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[421, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[421, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.12.0rc1 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[421, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[421, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[421, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[421, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[421, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[421, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[421, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[421, "xml-remote-procedure-calls"]], "test_epoll": [[421, "test-epoll"]], "Select kqueue": [[421, "select-kqueue"]], "SipHash24": [[421, "siphash24"]], "strtod \u8207 dtoa": [[421, "strtod-and-dtoa"]], "OpenSSL": [[421, "openssl"]], "expat": [[421, "expat"]], "libffi": [[421, "libffi"]], "zlib": [[421, "zlib"], [474, "zlib"], [471, "zlib"]], "cfuhash": [[421, "cfuhash"]], "libmpdec": [[421, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[421, "w3c-c14n-test-suite"]], "Audioop": [[421, "audioop"]], "Lexical analysis": [[430, "lexical-analysis"]], "Line structure": [[430, "line-structure"]], "Logical lines": [[430, "logical-lines"]], "Physical lines": [[430, "physical-lines"]], "Comments": [[430, "comments"]], "Encoding declarations": [[430, "encoding-declarations"]], "Explicit line joining": [[430, "explicit-line-joining"]], "Implicit line joining": [[430, "implicit-line-joining"]], "Blank lines": [[430, "blank-lines"]], "Indentation": [[430, "indentation"]], "Whitespace between tokens": [[430, "whitespace-between-tokens"]], "Other tokens": [[430, "other-tokens"]], "Identifiers and keywords": [[430, "identifiers"]], "Keywords": [[430, "keywords"]], "Soft Keywords": [[430, "soft-keywords"]], "Reserved classes of identifiers": [[430, "reserved-classes-of-identifiers"]], "String and Bytes literals": [[430, "string-and-bytes-literals"]], "\u8df3\u812b\u5e8f\u5217": [[430, "escape-sequences"]], "String literal concatenation": [[430, "string-literal-concatenation"]], "Formatted string literals": [[430, "formatted-string-literals"]], "Numeric literals": [[430, "numeric-literals"]], "Integer literals": [[430, "integer-literals"]], "Floating point literals": [[430, "floating-point-literals"]], "Imaginary literals": [[430, "imaginary-literals"]], "Operators": [[430, "operators"], [255, "operators"], [255, "id1"], [255, "id2"]], "Delimiters": [[430, "delimiters"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[426, "full-grammar-specification"]], "\u9644\u9304": [[433, "appendix"]], "\u4e92\u52d5\u6a21\u5f0f": [[433, "interactive-mode"], [443, "interactive-mode"]], "\u932f\u8aa4\u8655\u7406": [[433, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[433, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[433, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[433, "the-customization-modules"]], "Arithmetic conversions": [[425, "arithmetic-conversions"]], "Atoms": [[425, "atoms"]], "Identifiers (Names)": [[425, "atom-identifiers"]], "Parenthesized forms": [[425, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[425, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[425, "list-displays"]], "Set displays": [[425, "set-displays"]], "Dictionary displays": [[425, "dictionary-displays"]], "Generator expressions": [[425, "generator-expressions"]], "Yield expressions": [[425, "yield-expressions"]], "Generator-iterator methods": [[425, "generator-iterator-methods"]], "Asynchronous generator functions": [[425, "asynchronous-generator-functions"]], "Asynchronous generator-iterator methods": [[425, "asynchronous-generator-iterator-methods"]], "Primaries": [[425, "primaries"]], "Attribute references": [[425, "attribute-references"]], "Subscriptions": [[425, "subscriptions"]], "Slicings": [[425, "slicings"]], "Calls": [[425, "calls"]], "Await expression": [[425, "await-expression"]], "The power operator": [[425, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[425, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[425, "binary-arithmetic-operations"]], "Shifting operations": [[425, "shifting-operations"]], "Binary bitwise operations": [[425, "binary-bitwise-operations"]], "Value comparisons": [[425, "value-comparisons"]], "Membership test operations": [[425, "membership-test-operations"]], "Identity comparisons": [[425, "is-not"]], "Boolean operations": [[425, "boolean-operations"]], "Assignment expressions": [[425, "assignment-expressions"], [476, "assignment-expressions"]], "Conditional expressions": [[425, "conditional-expressions"]], "Lambdas": [[425, "lambda"]], "Expression lists": [[425, "expression-lists"]], "Evaluation order": [[425, "evaluation-order"]], "Operator precedence": [[425, "operator-precedence"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[438, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[438, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[438, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[438, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[438, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[438, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[438, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[438, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[438, "predefined-clean-up-actions"]], "\u5f15\u767c\u53ca\u8655\u7406\u591a\u500b\u7121\u95dc\u7684\u4f8b\u5916": [[438, "raising-and-handling-multiple-unrelated-exceptions"]], "\u7528\u8a3b\u89e3\u4f7f\u4f8b\u5916\u66f4\u8a73\u7d30": [[438, "enriching-exceptions-with-notes"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[428, "the-python-language-reference"]], "\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6": [[432, "top-level-components"]], "\u5b8c\u6574\u7684 Python \u7a0b\u5f0f": [[432, "complete-python-programs"]], "\u6a94\u6848\u8f38\u5165": [[432, "file-input"]], "\u4e92\u52d5\u5f0f\u8f38\u5165": [[432, "interactive-input"]], "\u904b\u7b97\u5f0f\u8f38\u5165": [[432, "expression-input"]], "Class\uff08\u985e\u5225\uff09": [[435, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[435, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[435, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[435, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[435, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[435, "class-definition-syntax"]], "Class \u7269\u4ef6": [[435, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[435, "instance-objects"]], "Method \u7269\u4ef6": [[435, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[435, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[435, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[435, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[435, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[435, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[435, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[435, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[435, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[435, "generator-expressions"]], "xmlrpc.client --- XML-RPC client access": [[414, "xmlrpc-client-xml-rpc-client-access"]], "ServerProxy \u7269\u4ef6": [[414, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[414, "datetime-objects"]], "Binary Objects": [[414, "binary-objects"]], "Fault Objects": [[414, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[414, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[414, "multicall-objects"]], "Convenience Functions": [[414, "convenience-functions"]], "Example of Client Usage": [[414, "example-of-client-usage"]], "Example of Client and Server Usage": [[414, "example-of-client-and-server-usage"]], "zipimport --- Import modules from Zip archives": [[418, "zipimport-import-modules-from-zip-archives"]], "zipimporter \u7269\u4ef6": [[418, "zipimporter-objects"]], "xml.etree.ElementTree --- The ElementTree XML API": [[408, "xml-etree-elementtree-the-elementtree-xml-api"]], "XML tree and elements": [[408, "xml-tree-and-elements"]], "Parsing XML": [[408, "parsing-xml"]], "Pull API for non-blocking parsing": [[408, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[408, "finding-interesting-elements"]], "Modifying an XML File": [[408, "modifying-an-xml-file"]], "Building XML documents": [[408, "building-xml-documents"]], "Parsing XML with Namespaces": [[408, "parsing-xml-with-namespaces"]], "XPath support": [[408, "xpath-support"]], "Supported XPath syntax": [[408, "supported-xpath-syntax"]], "XInclude support": [[408, "xinclude-support"]], "Element Objects": [[408, "element-objects"], [405, "element-objects"]], "ElementTree \u7269\u4ef6": [[408, "elementtree-objects"]], "QName \u7269\u4ef6": [[408, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[408, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[408, "xmlparser-objects"], [310, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[408, "xmlpullparser-objects"]], "zipapp --- Manage executable Python zip archives": [[416, "zipapp-manage-executable-python-zip-archives"]], "\u57fa\u672c\u7bc4\u4f8b": [[416, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[416, "command-line-interface"], [362, "command-line-interface"]], "Python API": [[416, "python-api"]], "Specifying the Interpreter": [[416, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[416, "creating-standalone-applications-with-zipapp"]], "Caveats": [[416, "caveats"]], "The Python Zip Application Archive Format": [[416, "the-python-zip-application-archive-format"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[439, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[439, "representation-error"]], "The import system": [[427, "the-import-system"]], "importlib": [[427, "importlib"], [477, "importlib"], [474, "importlib"], [474, "id3"], [472, "importlib"], [473, "importlib"], [475, "importlib"], [475, "id6"]], "Packages": [[427, "packages"]], "Regular packages": [[427, "regular-packages"]], "Namespace packages": [[427, "namespace-packages"]], "Searching": [[427, "searching"]], "The module cache": [[427, "the-module-cache"]], "Finders and loaders": [[427, "finders-and-loaders"]], "Import hooks": [[427, "import-hooks"]], "The meta path": [[427, "the-meta-path"]], "Loading": [[427, "loading"]], "Loaders": [[427, "loaders"]], "Submodules": [[427, "submodules"]], "Module spec": [[427, "module-spec"]], "Import-related module attributes": [[427, "import-related-module-attributes"]], "module.__path__": [[427, "module-path"]], "Module reprs": [[427, "module-reprs"]], "Cached bytecode invalidation": [[427, "cached-bytecode-invalidation"]], "The Path Based Finder": [[427, "the-path-based-finder"]], "Path entry finders": [[427, "path-entry-finders"]], "Path entry finder protocol": [[427, "path-entry-finder-protocol"]], "Replacing the standard import system": [[427, "replacing-the-standard-import-system"]], "Package Relative Imports": [[427, "package-relative-imports"]], "Special considerations for __main__": [[427, "special-considerations-for-main"]], "__main__.__spec__": [[427, "main-spec"]], "Python \u6559\u5b78": [[440, "the-python-tutorial"]], "Alternate Implementations": [[429, "alternate-implementations"]], "Notation": [[429, "notation"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[441, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[441, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[441, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[441, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[441, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[441, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[441, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[441, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[441, "saving-structured-data-with-json"]], "\u6dfa\u5617\u6ecb\u5473": [[434, "whetting-your-appetite"]], "xml.sax.handler --- Base classes for SAX handlers": [[410, "xml-sax-handler-base-classes-for-sax-handlers"]], "ContentHandler \u7269\u4ef6": [[410, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[410, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[410, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[410, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[410, "lexicalhandler-objects"]], "Simple statements": [[431, "simple-statements"]], "Expression statements": [[431, "expression-statements"]], "Assignment statements": [[431, "assignment-statements"]], "Augmented assignment statements": [[431, "augmented-assignment-statements"]], "Annotated assignment statements": [[431, "annotated-assignment-statements"]], "The assert statement": [[431, "the-assert-statement"]], "The pass statement": [[431, "the-pass-statement"]], "The del statement": [[431, "the-del-statement"]], "The return statement": [[431, "the-return-statement"]], "The yield statement": [[431, "the-yield-statement"]], "The raise statement": [[431, "the-raise-statement"]], "The break statement": [[431, "the-break-statement"]], "The continue statement": [[431, "the-continue-statement"]], "The import statement": [[431, "the-import-statement"]], "Future statements": [[431, "future-statements"]], "The global statement": [[431, "the-global-statement"]], "The nonlocal statement": [[431, "the-nonlocal-statement"]], "The type statement": [[431, "the-type-statement"]], "uuid --- RFC 4122 \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6": [[393, "uuid-uuid-objects-according-to-rfc-4122"]], "\u547d\u4ee4\u5217\u7684\u7528\u6cd5": [[393, "command-line-usage"]], "\u547d\u4ee4\u5217\u7684\u7bc4\u4f8b": [[393, "command-line-example"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[387, "urllib-url-handling-modules"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[378, "tty-terminal-control-functions"]], "tracemalloc --- Trace memory allocations": [[377, "tracemalloc-trace-memory-allocations"]], "Display the top 10": [[377, "display-the-top-10"]], "Compute differences": [[377, "compute-differences"]], "Get the traceback of a memory block": [[377, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[377, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[377, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "API": [[377, "api"], [394, "api"]], "DomainFilter": [[377, "domainfilter"]], "Filter": [[377, "filter"]], "Frame": [[377, "frame"]], "Snapshot": [[377, "snapshot"]], "Statistic": [[377, "statistic"]], "StatisticDiff": [[377, "statisticdiff"]], "Trace": [[377, "trace"]], "Traceback": [[377, "traceback"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[383, "unittest-unit-testing-framework"]], "\u7c21\u55ae\u7bc4\u4f8b": [[383, "basic-example"], [351, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[383, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[383, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[383, "test-discovery"]], "Organizing test code": [[383, "organizing-test-code"]], "Re-using old test code": [[383, "re-using-old-test-code"]], "Skipping tests and expected failures": [[383, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[383, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[383, "classes-and-functions"], [251, "classes-and-functions"]], "Test cases": [[383, "test-cases"]], "Grouping tests": [[383, "grouping-tests"]], "Loading and running tests": [[383, "loading-and-running-tests"]], "load_tests Protocol": [[383, "load-tests-protocol"]], "Class and Module Fixtures": [[383, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[383, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[383, "setupmodule-and-teardownmodule"]], "trace --- Trace or track Python statement execution": [[375, "trace-trace-or-track-python-statement-execution"]], "Main options": [[375, "main-options"]], "Modifiers": [[375, "modifiers"]], "Filters": [[375, "filters"]], "Programmatic Interface": [[375, "programmatic-interface"], [296, "programmatic-interface"]], "typing --- Support for type hints": [[381, "typing-support-for-type-hints"]], "Relevant PEPs": [[381, "relevant-peps"]], "Type aliases": [[381, "type-aliases"]], "NewType": [[381, "newtype"]], "Annotating callable objects": [[381, "annotating-callable-objects"]], "Generics": [[381, "generics"]], "Annotating tuples": [[381, "annotating-tuples"]], "The type of class objects": [[381, "the-type-of-class-objects"]], "User-defined generic types": [[381, "user-defined-generic-types"]], "Any \u578b\u5225": [[381, "the-any-type"]], "Nominal vs structural subtyping": [[381, "nominal-vs-structural-subtyping"]], "\u6a21\u7d44\u5167\u5bb9": [[381, "module-contents"], [405, "module-contents"], [333, "module-contents"], [329, "module-contents"], [315, "module-contents"], [330, "module-contents"], [207, "module-contents"], [171, "module-contents"]], "Special typing primitives": [[381, "special-typing-primitives"]], "Special types": [[381, "special-types"]], "Special forms": [[381, "special-forms"]], "Building generic types and type aliases": [[381, "building-generic-types-and-type-aliases"]], "Other special directives": [[381, "other-special-directives"]], "ABCs for working with IO": [[381, "abcs-for-working-with-io"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[381, "functions-and-decorators"]], "Recognised parameters for field specifiers": [[381, "id7"]], "Introspection helpers": [[381, "introspection-helpers"]], "\u68c4\u7528\u7684\u5225\u540d": [[381, "deprecated-aliases"]], "Aliases to built-in types": [[381, "aliases-to-built-in-types"]], "Aliases to types in collections": [[381, "aliases-to-types-in-collections"]], "Aliases to other concrete types": [[381, "aliases-to-other-concrete-types"]], "Aliases to container ABCs in collections.abc": [[381, "aliases-to-container-abcs-in-collections-abc"]], "Aliases to asynchronous ABCs in collections.abc": [[381, "aliases-to-asynchronous-abcs-in-collections-abc"]], "Aliases to other ABCs in collections.abc": [[381, "aliases-to-other-abcs-in-collections-abc"]], "Aliases to contextlib ABCs": [[381, "aliases-to-contextlib-abcs"]], "Deprecation Timeline of Major Features": [[381, "deprecation-timeline-of-major-features"]], "MS Windows \u7279\u6709\u670d\u52d9": [[399, "ms-windows-specific-services"]], "wsgiref --- WSGI Utilities and Reference Implementation": [[402, "wsgiref-wsgi-utilities-and-reference-implementation"]], "wsgiref.util -- WSGI environment utilities": [[402, "wsgiref-util-wsgi-environment-utilities"]], "wsgiref.headers -- WSGI response header tools": [[402, "wsgiref-headers-wsgi-response-header-tools"]], "wsgiref.simple_server -- a simple WSGI HTTP server": [[402, "wsgiref-simple-server-a-simple-wsgi-http-server"]], "wsgiref.validate --- WSGI conformance checker": [[402, "wsgiref-validate-wsgi-conformance-checker"]], "wsgiref.handlers -- server/gateway base classes": [[402, "wsgiref-handlers-server-gateway-base-classes"]], "wsgiref.types -- WSGI types for static type checking": [[402, "wsgiref-types-wsgi-types-for-static-type-checking"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[392, "uu-encode-and-decode-uuencode-files"]], "warnings --- Warning control": [[395, "warnings-warning-control"]], "Warning Categories": [[395, "warning-categories"]], "The Warnings Filter": [[395, "the-warnings-filter"]], "Describing Warning Filters": [[395, "describing-warning-filters"]], "Default Warning Filter": [[395, "default-warning-filter"]], "Overriding the default filter": [[395, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[395, "temporarily-suppressing-warnings"]], "Testing Warnings": [[395, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[395, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[395, "available-functions"]], "Available Context Managers": [[395, "available-context-managers"]], "venv --- Creation of virtual environments": [[394, "venv-creation-of-virtual-environments"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[394, "creating-virtual-environments"], [448, "creating-virtual-environments"]], "\u865b\u64ec\u74b0\u5883\u5982\u4f55\u904b\u4f5c": [[394, "how-venvs-work"]], "An example of extending EnvBuilder": [[394, "an-example-of-extending-envbuilder"]], "unicodedata --- Unicode Database": [[382, "unicodedata-unicode-database"]], "urllib.parse --- Parse URLs into components": [[389, "urllib-parse-parse-urls-into-components"]], "URL Parsing": [[389, "url-parsing"]], "URL parsing security": [[389, "url-parsing-security"]], "Parsing ASCII Encoded Bytes": [[389, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[389, "structured-parse-results"]], "URL Quoting": [[389, "url-quoting"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[390, "urllib-request-extensible-library-for-opening-urls"]], "Request Objects": [[390, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[390, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[390, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[390, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[390, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[390, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[390, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[390, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[390, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[390, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[390, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[390, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[390, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[390, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[390, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[390, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[390, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[390, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[390, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[390, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[390, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[390, "httperrorprocessor-objects"]], "Examples": [[390, "examples"]], "Legacy interface": [[390, "legacy-interface"]], "urllib.request Restrictions": [[390, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[390, "urllib-response-response-classes-used-by-urllib"]], "XML \u8655\u7406\u6a21\u7d44": [[404, "xml-processing-modules"]], "XML vulnerabilities": [[404, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[404, "the-defusedxml-package"]], "wave --- Read and write WAV files": [[396, "wave-read-and-write-wav-files"]], "Wave_read \u7269\u4ef6": [[396, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[396, "wave-write-objects"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[403, "xdrlib-encode-and-decode-xdr-data"]], "Packer Objects": [[403, "packer-objects"]], "Unpacker Objects": [[403, "unpacker-objects"]], "unittest.mock --- getting started": [[385, "unittest-mock-getting-started"]], "Using Mock": [[385, "using-mock"]], "Mock Patching Methods": [[385, "mock-patching-methods"]], "Mock for Method Calls on an Object": [[385, "mock-for-method-calls-on-an-object"]], "Mocking Classes": [[385, "mocking-classes"]], "Naming your mocks": [[385, "naming-your-mocks"]], "Tracking all Calls": [[385, "tracking-all-calls"]], "Setting Return Values and Attributes": [[385, "setting-return-values-and-attributes"]], "Raising exceptions with mocks": [[385, "raising-exceptions-with-mocks"]], "Side effect functions and iterables": [[385, "side-effect-functions-and-iterables"]], "Mocking asynchronous iterators": [[385, "mocking-asynchronous-iterators"]], "Mocking asynchronous context manager": [[385, "mocking-asynchronous-context-manager"]], "Creating a Mock from an Existing Object": [[385, "creating-a-mock-from-an-existing-object"]], "Patch Decorators": [[385, "patch-decorators"]], "Further Examples": [[385, "further-examples"]], "Mocking chained calls": [[385, "mocking-chained-calls"]], "Partial mocking": [[385, "partial-mocking"]], "Mocking a Generator Method": [[385, "mocking-a-generator-method"]], "Applying the same patch to every test method": [[385, "applying-the-same-patch-to-every-test-method"]], "Mocking Unbound Methods": [[385, "mocking-unbound-methods"]], "Checking multiple calls with mock": [[385, "checking-multiple-calls-with-mock"]], "Coping with mutable arguments": [[385, "coping-with-mutable-arguments"]], "Nesting Patches": [[385, "nesting-patches"]], "Mocking a dictionary with MagicMock": [[385, "mocking-a-dictionary-with-magicmock"]], "Mock subclasses and their attributes": [[385, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[385, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[385, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[385, "more-complex-argument-matching"]], "types --- Dynamic type creation and names for built-in types": [[380, "types-dynamic-type-creation-and-names-for-built-in-types"]], "Dynamic Type Creation": [[380, "dynamic-type-creation"]], "Standard Interpreter Types": [[380, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[380, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[380, "coroutine-utility-functions"]], "webbrowser --- Convenient web-browser controller": [[398, "webbrowser-convenient-web-browser-controller"]], "Browser Controller Objects": [[398, "browser-controller-objects"]], "unittest.mock --- mock object library": [[384, "unittest-mock-mock-object-library"]], "Quick Guide": [[384, "quick-guide"]], "The Mock Class": [[384, "the-mock-class"]], "Calling": [[384, "calling"]], "Deleting Attributes": [[384, "deleting-attributes"]], "Mock names and the name attribute": [[384, "mock-names-and-the-name-attribute"]], "Attaching Mocks as Attributes": [[384, "attaching-mocks-as-attributes"]], "The patchers": [[384, "the-patchers"]], "patch": [[384, "patch"]], "patch.object": [[384, "patch-object"]], "patch.dict": [[384, "patch-dict"]], "patch.multiple": [[384, "patch-multiple"]], "patch methods: start and stop": [[384, "patch-methods-start-and-stop"]], "patch builtins": [[384, "patch-builtins"]], "TEST_PREFIX": [[384, "test-prefix"]], "Nesting Patch Decorators": [[384, "nesting-patch-decorators"]], "Where to patch": [[384, "where-to-patch"]], "Patching Descriptors and Proxy Objects": [[384, "patching-descriptors-and-proxy-objects"]], "MagicMock and magic method support": [[384, "magicmock-and-magic-method-support"]], "Mocking Magic Methods": [[384, "mocking-magic-methods"]], "Magic Mock": [[384, "magic-mock"]], "Helpers": [[384, "helpers"]], "sentinel": [[384, "sentinel"]], "DEFAULT": [[384, "default"]], "call": [[384, "call"]], "create_autospec": [[384, "create-autospec"]], "ANY": [[384, "any"]], "FILTER_DIR": [[384, "filter-dir"]], "mock_open": [[384, "mock-open"]], "Autospeccing": [[384, "autospeccing"]], "Sealing mocks": [[384, "sealing-mocks"]], "traceback --- Print or retrieve a stack traceback": [[376, "traceback-print-or-retrieve-a-stack-traceback"]], "TracebackException \u7269\u4ef6": [[376, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[376, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[376, "framesummary-objects"]], "Traceback Examples": [[376, "traceback-examples"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[391, "urllib-robotparser-parser-for-robots-txt"]], "turtle --- \u9f9c\u5716\u5b78": [[379, "turtle-turtle-graphics"]], "\u4ecb\u7d39": [[379, "introduction"]], "Turtle star": [[379, null]], "Starting a turtle environment": [[379, "starting-a-turtle-environment"]], "Basic drawing": [[379, "basic-drawing"]], "Pen control": [[379, "pen-control"], [379, "id1"]], "The turtle's position": [[379, "the-turtle-s-position"]], "Making algorithmic patterns": [[379, "making-algorithmic-patterns"]], "How to...": [[379, "how-to"]], "Get started as quickly as possible": [[379, "get-started-as-quickly-as-possible"]], "Use the turtle module namespace": [[379, "use-the-turtle-module-namespace"]], "Use turtle graphics in a script": [[379, "use-turtle-graphics-in-a-script"]], "Use object-oriented turtle graphics": [[379, "use-object-oriented-turtle-graphics"]], "Turtle graphics reference": [[379, "turtle-graphics-reference"]], "Turtle methods": [[379, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[379, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[379, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[379, "turtle-motion"]], "Tell Turtle's state": [[379, "tell-turtle-s-state"]], "Settings for measurement": [[379, "settings-for-measurement"]], "Drawing state": [[379, "drawing-state"]], "Color control": [[379, "color-control"]], "Filling": [[379, "filling"]], "More drawing control": [[379, "more-drawing-control"]], "Turtle state": [[379, "turtle-state"]], "Visibility": [[379, "visibility"]], "Appearance": [[379, "appearance"]], "Using events": [[379, "using-events"]], "Special Turtle methods": [[379, "special-turtle-methods"]], "Compound shapes": [[379, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[379, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[379, "window-control"]], "Animation control": [[379, "animation-control"]], "Using screen events": [[379, "using-screen-events"]], "Input methods": [[379, "input-methods"]], "Settings and special methods": [[379, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[379, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[379, "public-classes"]], "Explanation": [[379, "explanation"]], "Help and configuration": [[379, "help-and-configuration"]], "How to use help": [[379, "how-to-use-help"]], "Translation of docstrings into different languages": [[379, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[379, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[379, "turtledemo-demo-scripts"]], "Changes since Python 2.6": [[379, "changes-since-python-2-6"]], "Changes since Python 3.0": [[379, "changes-since-python-3-0"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[407, "xml-dom-pulldom-support-for-building-partial-dom-trees"]], "DOMEventStream \u7269\u4ef6": [[407, "domeventstream-objects"]], "xml.dom --- The Document Object Model API": [[405, "xml-dom-the-document-object-model-api"]], "Objects in the DOM": [[405, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[405, "domimplementation-objects"]], "Node Objects": [[405, "node-objects"]], "NodeList \u7269\u4ef6": [[405, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[405, "documenttype-objects"]], "Document Objects": [[405, "document-objects"]], "Attr Objects": [[405, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[405, "namednodemap-objects"]], "Comment Objects": [[405, "comment-objects"]], "Text and CDATASection Objects": [[405, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[405, "processinginstruction-objects"]], "Conformance": [[405, "conformance"]], "Type Mapping": [[405, "type-mapping"]], "Accessor Methods": [[405, "accessor-methods"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[388, "urllib-error-exception-classes-raised-by-urllib-request"]], "weakref --- Weak references": [[397, "weakref-weak-references"]], "Weak Reference Objects": [[397, "weak-reference-objects"]], "Finalizer Objects": [[397, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[397, "comparing-finalizers-with-del-methods"]], "winsound --- Sound-playing interface for Windows": [[401, "winsound-sound-playing-interface-for-windows"]], "xml.dom.minidom --- Minimal DOM implementation": [[406, "xml-dom-minidom-minimal-dom-implementation"]], "DOM \u7269\u4ef6": [[406, "dom-objects"]], "DOM \u7bc4\u4f8b": [[406, "dom-example"]], "minidom and the DOM standard": [[406, "minidom-and-the-dom-standard"]], "tomllib --- \u5256\u6790 TOML \u6a94\u6848": [[374, "tomllib-parse-toml-files"]], "\u8f49\u63db\u8868": [[374, "conversion-table"]], "Unix \u7279\u6709\u670d\u52d9": [[386, "unix-specific-services"]], "winreg --- Windows registry access": [[400, "winreg-windows-registry-access"]], "HKEY_* Constants": [[400, "hkey-constants"]], "Access Rights": [[400, "access-rights"]], "64-bit Specific": [[400, "bit-specific"]], "Value Types": [[400, "value-types"]], "Registry Handle Objects": [[400, "registry-handle-objects"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-9"]], "Summary -- Release highlights": [[477, "summary-release-highlights"], [476, "summary-release-highlights"], [474, "summary-release-highlights"], [471, "summary-release-highlights"], [473, "summary-release-highlights"]], "You should check for DeprecationWarning in your code": [[477, "you-should-check-for-deprecationwarning-in-your-code"]], "New Features": [[477, "new-features"], [477, "id1"], [476, "new-features"], [474, "new-features"], [472, "new-features"], [473, "new-features"], [475, "new-features"]], "Dictionary Merge & Update Operators": [[477, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[477, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[477, "type-hinting-generics-in-standard-collections"]], "New Parser": [[477, "new-parser"]], "\u5176\u4ed6\u8a9e\u8a00\u66f4\u52d5": [[477, "other-language-changes"], [476, "other-language-changes"], [463, "other-language-changes"], [469, "other-language-changes"], [474, "other-language-changes"], [460, "other-language-changes"], [461, "other-language-changes"], [471, "other-language-changes"], [472, "other-language-changes"], [473, "other-language-changes"], [464, "other-language-changes"], [475, "other-language-changes"], [462, "other-language-changes"], [470, "other-language-changes"], [467, "other-language-changes"], [466, "other-language-changes"], [468, "other-language-changes"]], "\u65b0\u6a21\u7d44": [[477, "new-modules"], [474, "new-modules"], [471, "new-modules"], [472, "new-modules"], [475, "new-modules"], [467, "new-modules"]], "zoneinfo": [[477, "zoneinfo"]], "graphlib": [[477, "graphlib"]], "Improved Modules": [[477, "improved-modules"], [476, "improved-modules"], [469, "improved-modules"], [474, "improved-modules"], [471, "improved-modules"], [472, "improved-modules"], [473, "improved-modules"], [475, "improved-modules"]], "ast": [[477, "ast"], [476, "ast"], [474, "ast"], [470, "ast"]], "asyncio": [[477, "asyncio"], [476, "asyncio"], [469, "asyncio"], [474, "asyncio"], [472, "asyncio"], [473, "asyncio"], [475, "asyncio"], [475, "whatsnew37-asyncio-deprecated"], [467, "asyncio"], [468, "asyncio"]], "compileall": [[477, "compileall"], [473, "compileall"], [475, "compileall"]], "concurrent.futures": [[477, "concurrent-futures"], [474, "concurrent-futures"], [473, "concurrent-futures"], [475, "concurrent-futures"]], "curses": [[477, "curses"], [476, "curses"], [471, "curses"], [473, "curses"], [467, "curses"]], "datetime": [[477, "datetime"], [476, "datetime"], [474, "datetime"], [471, "datetime"], [475, "datetime"], [468, "datetime"]], "distutils": [[477, "distutils"], [474, "distutils"], [474, "id2"], [473, "distutils"], [475, "distutils"], [467, "distutils"]], "fcntl": [[477, "fcntl"], [468, "fcntl"]], "ftplib": [[477, "ftplib"], [471, "ftplib"]], "gc": [[477, "gc"], [476, "gc"], [471, "gc"], [472, "gc"], [475, "gc"], [467, "gc"]], "hashlib": [[477, "hashlib"], [474, "hashlib"], [472, "hashlib"], [470, "hashlib"], [467, "hashlib"], [468, "hashlib"]], "http": [[477, "http"], [471, "http"], [472, "http"], [473, "http"]], "IDLE and idlelib": [[477, "idle-and-idlelib"], [476, "idle-and-idlelib"]], "imaplib": [[477, "imaplib"], [471, "imaplib"], [473, "imaplib"], [470, "imaplib"]], "inspect": [[477, "inspect"], [476, "inspect"], [469, "inspect"], [474, "inspect"], [471, "inspect"], [472, "inspect"], [473, "inspect"], [470, "inspect"], [467, "inspect"], [468, "inspect"]], "ipaddress": [[477, "ipaddress"], [471, "ipaddress"], [472, "ipaddress"], [473, "ipaddress"], [475, "ipaddress"]], "math": [[477, "math"], [476, "math"], [469, "math"], [474, "math"], [471, "math"], [473, "math"], [475, "math"], [470, "math"], [468, "math"]], "multiprocessing": [[477, "multiprocessing"], [476, "multiprocessing"], [474, "multiprocessing"], [471, "multiprocessing"], [472, "multiprocessing"], [473, "multiprocessing"], [475, "multiprocessing"]], "nntplib": [[477, "nntplib"], [471, "nntplib"]], "os": [[477, "os"], [476, "os"], [469, "os"], [474, "os"], [474, "id4"], [471, "os"], [472, "os"], [473, "os"], [475, "os"], [470, "os"], [467, "os"], [468, "os"]], "pathlib": [[477, "pathlib"], [476, "pathlib"], [469, "pathlib"], [474, "pathlib"], [472, "pathlib"], [473, "pathlib"], [475, "pathlib"], [467, "pathlib"], [468, "pathlib"]], "pdb": [[477, "pdb"], [469, "pdb"], [474, "pdb"], [471, "pdb"], [472, "pdb"], [475, "pdb"], [470, "pdb"]], "poplib": [[477, "poplib"], [472, "poplib"], [473, "poplib"], [470, "poplib"]], "pprint": [[477, "pprint"], [476, "pprint"], [472, "pprint"], [467, "pprint"]], "pydoc": [[477, "pydoc"], [474, "pydoc"], [471, "pydoc"], [472, "pydoc"], [475, "pydoc"], [470, "pydoc"]], "random": [[477, "random"], [469, "random"], [474, "random"], [470, "random"]], "signal": [[477, "signal"], [471, "signal"], [473, "signal"], [475, "signal"]], "smtplib": [[477, "smtplib"], [471, "smtplib"], [472, "smtplib"], [473, "smtplib"]], "socket": [[477, "socket"], [476, "socket"], [474, "socket"], [471, "socket"], [472, "socket"], [473, "socket"], [475, "socket"], [475, "id8"], [470, "socket"], [467, "socket"], [468, "socket"]], "time": [[477, "time"], [476, "time"], [474, "time"], [471, "time"], [473, "time"], [475, "time"], [468, "time"]], "sys": [[477, "sys"], [476, "sys"], [469, "sys"], [474, "sys"], [471, "sys"], [472, "sys"], [473, "sys"], [475, "sys"], [475, "id10"], [467, "sys"], [468, "sys"]], "tracemalloc": [[477, "tracemalloc"], [474, "tracemalloc"], [472, "tracemalloc"], [475, "tracemalloc"]], "typing": [[477, "typing"], [477, "id4"], [476, "typing"], [469, "typing"], [474, "typing"], [473, "typing"], [467, "typing"], [468, "typing"]], "unicodedata": [[477, "unicodedata"], [476, "unicodedata"], [469, "unicodedata"], [474, "unicodedata"], [473, "unicodedata"], [475, "unicodedata"], [468, "unicodedata"]], "venv": [[477, "venv"], [476, "venv"], [474, "venv"], [474, "whatsnew36-venv"], [472, "venv"], [468, "venv"]], "xml": [[477, "xml"], [476, "xml"], [467, "xml"]], "Optimizations": [[477, "optimizations"], [476, "optimizations"], [463, "optimizations"], [469, "optimizations"], [474, "optimizations"], [460, "optimizations"], [461, "optimizations"], [471, "optimizations"], [473, "optimizations"], [464, "optimizations"], [475, "optimizations"], [462, "optimizations"], [470, "optimizations"]], "Deprecated": [[477, "deprecated"], [476, "deprecated"], [469, "deprecated"], [469, "id4"], [474, "deprecated"], [471, "deprecated"], [472, "deprecated"], [473, "deprecated"]], "Removed": [[477, "removed"], [477, "id3"], [469, "removed"], [469, "id5"], [474, "removed"], [472, "removed"], [473, "removed"]], "Porting to Python 3.9": [[477, "porting-to-python-3-9"], [477, "id2"]], "Changes in the Python API": [[477, "changes-in-the-python-api"], [476, "changes-in-the-python-api"], [469, "changes-in-the-python-api"], [474, "changes-in-the-python-api"], [473, "changes-in-the-python-api"], [475, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[477, "changes-in-the-c-api"], [476, "changes-in-the-c-api"], [474, "changes-in-the-c-api"], [472, "changes-in-the-c-api"], [473, "changes-in-the-c-api"], [475, "changes-in-the-c-api"], [467, "changes-in-the-c-api"]], "CPython bytecode changes": [[477, "cpython-bytecode-changes"], [476, "cpython-bytecode-changes"], [469, "cpython-bytecode-changes"], [474, "cpython-bytecode-changes"], [475, "cpython-bytecode-changes"]], "Build Changes": [[477, "build-changes"], [469, "build-changes"], [475, "build-changes"]], "C API Changes": [[477, "c-api-changes"], [469, "c-api-changes"], [475, "c-api-changes"]], "Notable changes in Python 3.9.1": [[477, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[477, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Notable changes in Python 3.9.2": [[477, "notable-changes-in-python-3-9-2"]], "collections.abc": [[477, "collections-abc"], [473, "collections-abc"], [467, "collections-abc"]], "urllib.parse": [[477, "urllib-parse"], [475, "urllib-parse"], [470, "urllib-parse"], [467, "urllib-parse"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[476, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[476, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[476, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[476, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[476, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[476, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[476, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[476, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[476, "pickle-protocol-5-with-out-of-band-data-buffers"]], "New Modules": [[476, "new-modules"], [469, "new-modules"], [473, "new-modules"]], "builtins\uff08\u5167\u5efa\uff09": [[476, "builtins"]], "collections": [[476, "collections"], [474, "collections"], [471, "collections"], [472, "collections"], [473, "collections"], [475, "collections"], [475, "id3"], [470, "collections"]], "cProfile": [[476, "cprofile"], [475, "cprofile"]], "csv": [[476, "csv"], [469, "csv"], [473, "csv"], [470, "csv"]], "ctypes": [[476, "ctypes"], [470, "ctypes"]], "functools": [[476, "functools"], [471, "functools"], [472, "functools"], [473, "functools"], [475, "functools"], [470, "functools"], [468, "functools"]], "gettext": [[476, "gettext"], [475, "gettext"]], "gzip": [[476, "gzip"], [473, "gzip"]], "io": [[476, "io"], [471, "io"], [473, "io"], [475, "io"], [470, "io"]], "itertools": [[476, "itertools"], [469, "itertools"], [471, "itertools"], [475, "itertools"], [470, "itertools"], [467, "itertools"]], "json.tool": [[476, "json-tool"]], "logging": [[476, "logging"], [474, "logging"], [471, "logging"], [472, "logging"], [473, "logging"], [475, "logging"], [470, "logging"], [468, "logging"]], "mmap": [[476, "mmap"], [471, "mmap"], [472, "mmap"]], "os.path": [[476, "os-path"], [469, "os-path"], [467, "os-path"]], "pickle": [[476, "pickle"], [474, "pickle"], [471, "pickle"], [472, "pickle"], [473, "pickle"]], "plistlib": [[476, "plistlib"], [472, "plistlib"]], "py_compile": [[476, "py-compile"], [475, "py-compile"], [467, "py-compile"]], "shlex": [[476, "shlex"], [474, "shlex"], [471, "shlex"]], "shutil": [[476, "shutil"], [469, "shutil"], [471, "shutil"], [472, "shutil"], [473, "shutil"], [470, "shutil"], [468, "shutil"]], "ssl": [[476, "ssl"], [474, "ssl"], [474, "id6"], [471, "ssl"], [472, "ssl"], [473, "ssl"], [475, "ssl"], [475, "id9"], [470, "ssl"], [467, "ssl"]], "statistics": [[476, "statistics"], [469, "statistics"], [474, "statistics"], [472, "statistics"], [467, "statistics"]], "tarfile": [[476, "tarfile"], [471, "tarfile"], [472, "tarfile"], [473, "tarfile"], [470, "tarfile"]], "threading": [[476, "threading"], [469, "threading"], [471, "threading"], [472, "threading"], [473, "threading"], [475, "threading"], [470, "threading"], [467, "threading"], [468, "threading"]], "tokenize": [[476, "tokenize"], [469, "tokenize"]], "tkinter": [[476, "tkinter"], [469, "tkinter"], [474, "tkinter"], [474, "id7"], [473, "tkinter"], [475, "tkinter"], [468, "tkinter"]], "unittest": [[476, "unittest"], [469, "unittest"], [471, "unittest"], [472, "unittest"], [473, "unittest"], [475, "unittest"], [470, "unittest"], [467, "unittest"], [468, "unittest"]], "weakref": [[476, "weakref"], [472, "weakref"]], "xmlrpc": [[476, "xmlrpc"], [473, "xmlrpc"]], "Build and C API Changes": [[476, "build-and-c-api-changes"], [463, "build-and-c-api-changes"], [474, "build-and-c-api-changes"], [460, "build-and-c-api-changes"], [461, "build-and-c-api-changes"], [465, "build-and-c-api-changes"], [471, "build-and-c-api-changes"], [473, "build-and-c-api-changes"], [464, "build-and-c-api-changes"], [462, "build-and-c-api-changes"], [470, "build-and-c-api-changes"], [466, "build-and-c-api-changes"]], "API and Feature Removals": [[476, "api-and-feature-removals"], [474, "api-and-feature-removals"], [473, "api-and-feature-removals"], [475, "api-and-feature-removals"]], "Porting to Python 3.8": [[476, "porting-to-python-3-8"]], "Changes in Python behavior": [[476, "changes-in-python-behavior"], [473, "changes-in-python-behavior"]], "Demos and Tools": [[476, "demos-and-tools"], [469, "demos-and-tools"]], "Notable changes in Python 3.8.1": [[476, "notable-changes-in-python-3-8-1"]], "Notable changes in Python 3.8.8": [[476, "notable-changes-in-python-3-8-8"]], "Notable changes in Python 3.8.12": [[476, "notable-changes-in-python-3-8-12"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[478, "changelog"]], "Python next": [[478, "python-next"]], "Security": [[478, "security"], [478, "id2"], [478, "id11"], [478, "id24"], [478, "id32"], [478, "id51"], [478, "id60"], [478, "id77"], [478, "id87"], [478, "id96"], [478, "id108"], [478, "id169"], [478, "id180"], [478, "id190"], [478, "id199"], [478, "id209"], [478, "id227"], [478, "id238"], [478, "id248"], [478, "id258"], [478, "id268"], [478, "id279"], [478, "id290"], [478, "id305"], [478, "id315"], [478, "id326"], [478, "id337"], [478, "id348"], [478, "id364"], [478, "id399"], [478, "id410"], [478, "id451"], [478, "id473"], [478, "id496"], [478, "id505"], [478, "id506"], [478, "id565"], [478, "id574"], [478, "id584"], [478, "id594"], [478, "id598"], [478, "id606"], [478, "id619"]], "Core and Builtins": [[478, "core-and-builtins"], [478, "id3"], [478, "id12"], [478, "id19"], [478, "id25"], [478, "id33"], [478, "id43"], [478, "id52"], [478, "id62"], [478, "id68"], [478, "id78"], [478, "id88"], [478, "id97"], [478, "id109"], [478, "id118"], [478, "id127"], [478, "id135"], [478, "id144"], [478, "id152"], [478, "id160"], [478, "id170"], [478, "id181"], [478, "id191"], [478, "id200"], [478, "id210"], [478, "id219"], [478, "id228"], [478, "id239"], [478, "id249"], [478, "id259"], [478, "id269"], [478, "id280"], [478, "id291"], [478, "id299"], [478, "id306"], [478, "id316"], [478, "id327"], [478, "id338"], [478, "id349"], [478, "id358"], [478, "id365"], [478, "id377"], [478, "id383"], [478, "id390"], [478, "id400"], [478, "id411"], [478, "id420"], [478, "id428"], [478, "id435"], [478, "id445"], [478, "id452"], [478, "id461"], [478, "id474"], [478, "id484"], [478, "id497"], [478, "id507"], [478, "id516"], [478, "id518"], [478, "id526"], [478, "id530"], [478, "id535"], [478, "id540"], [478, "id545"], [478, "id551"], [478, "id559"], [478, "id566"], [478, "id575"], [478, "id585"], [478, "id595"], [478, "id599"], [478, "id607"], [478, "id616"], [478, "id620"], [478, "id628"], [478, "id630"], [478, "id641"], [478, "id643"], [478, "id645"], [478, "id650"], [478, "id653"], [478, "id658"], [478, "id660"], [478, "id666"], [478, "id672"], [478, "id677"], [478, "id682"]], "Library": [[478, "library"], [478, "id4"], [478, "id13"], [478, "id20"], [478, "id26"], [478, "id34"], [478, "id44"], [478, "id53"], [478, "id63"], [478, "id69"], [478, "id79"], [478, "id89"], [478, "id98"], [478, "id110"], [478, "id119"], [478, "id128"], [478, "id136"], [478, "id145"], [478, "id153"], [478, "id161"], [478, "id171"], [478, "id182"], [478, "id192"], [478, "id201"], [478, "id211"], [478, "id220"], [478, "id229"], [478, "id240"], [478, "id250"], [478, "id260"], [478, "id270"], [478, "id281"], [478, "id292"], [478, "id300"], [478, "id307"], [478, "id317"], [478, "id328"], [478, "id339"], [478, "id350"], [478, "id359"], [478, "id366"], [478, "id375"], [478, "id378"], [478, "id384"], [478, "id391"], [478, "id401"], [478, "id412"], [478, "id421"], [478, "id429"], [478, "id436"], [478, "id446"], [478, "id453"], [478, "id462"], [478, "id475"], [478, "id485"], [478, "id494"], [478, "id498"], [478, "id508"], [478, "id519"], [478, "id531"], [478, "id536"], [478, "id541"], [478, "id546"], [478, "id552"], [478, "id560"], [478, "id567"], [478, "id576"], [478, "id586"], [478, "id596"], [478, "id597"], [478, "id600"], [478, "id608"], [478, "id621"], [478, "id631"], [478, "id639"], [478, "id642"], [478, "id644"], [478, "id646"], [478, "id651"], [478, "id654"], [478, "id659"], [478, "id661"], [478, "id667"], [478, "id673"], [478, "id678"], [478, "id683"]], "Tests": [[478, "tests"], [478, "id5"], [478, "id15"], [478, "id21"], [478, "id36"], [478, "id46"], [478, "id55"], [478, "id65"], [478, "id71"], [478, "id81"], [478, "id91"], [478, "id100"], [478, "id112"], [478, "id121"], [478, "id130"], [478, "id138"], [478, "id147"], [478, "id155"], [478, "id163"], [478, "id173"], [478, "id184"], [478, "id194"], [478, "id203"], [478, "id213"], [478, "id222"], [478, "id231"], [478, "id242"], [478, "id252"], [478, "id262"], [478, "id272"], [478, "id283"], [478, "id294"], [478, "id309"], [478, "id319"], [478, "id330"], [478, "id341"], [478, "id352"], [478, "id361"], [478, "id368"], [478, "id386"], [478, "id393"], [478, "id403"], [478, "id414"], [478, "id423"], [478, "id431"], [478, "id438"], [478, "id455"], [478, "id464"], [478, "id471"], [478, "id477"], [478, "id487"], [478, "id500"], [478, "id514"], [478, "id524"], [478, "id538"], [478, "id544"], [478, "id550"], [478, "id555"], [478, "id562"], [478, "id573"], [478, "id579"], [478, "id589"], [478, "id602"], [478, "id612"], [478, "id617"], [478, "id624"], [478, "id634"], [478, "id649"], [478, "id655"], [478, "id663"], [478, "id669"], [478, "id675"], [478, "id688"]], "Build": [[478, "build"], [478, "id6"], [478, "id16"], [478, "id28"], [478, "id37"], [478, "id47"], [478, "id56"], [478, "id66"], [478, "id72"], [478, "id82"], [478, "id92"], [478, "id101"], [478, "id113"], [478, "id122"], [478, "id131"], [478, "id139"], [478, "id148"], [478, "id156"], [478, "id164"], [478, "id174"], [478, "id185"], [478, "id195"], [478, "id204"], [478, "id214"], [478, "id223"], [478, "id232"], [478, "id243"], [478, "id253"], [478, "id263"], [478, "id273"], [478, "id284"], [478, "id295"], [478, "id302"], [478, "id310"], [478, "id320"], [478, "id331"], [478, "id342"], [478, "id353"], [478, "id369"], [478, "id380"], [478, "id387"], [478, "id394"], [478, "id404"], [478, "id415"], [478, "id424"], [478, "id439"], [478, "id448"], [478, "id456"], [478, "id465"], [478, "id472"], [478, "id478"], [478, "id488"], [478, "id495"], [478, "id501"], [478, "id511"], [478, "id517"], [478, "id525"], [478, "id529"], [478, "id539"], [478, "id543"], [478, "id549"], [478, "id556"], [478, "id564"], [478, "id570"], [478, "id581"], [478, "id590"], [478, "id603"], [478, "id615"], [478, "id625"], [478, "id635"], [478, "id638"], [478, "id640"], [478, "id652"], [478, "id657"], [478, "id668"], [478, "id674"], [478, "id679"], [478, "id685"]], "Tools/Demos": [[478, "tools-demos"], [478, "id9"], [478, "id17"], [478, "id41"], [478, "id49"], [478, "id75"], [478, "id85"], [478, "id105"], [478, "id116"], [478, "id125"], [478, "id178"], [478, "id225"], [478, "id236"], [478, "id266"], [478, "id277"], [478, "id288"], [478, "id324"], [478, "id335"], [478, "id346"], [478, "id356"], [478, "id373"], [478, "id398"], [478, "id408"], [478, "id419"], [478, "id433"], [478, "id443"], [478, "id459"], [478, "id469"], [478, "id482"], [478, "id492"], [478, "id504"], [478, "id513"], [478, "id527"], [478, "id534"], [478, "id557"], [478, "id571"], [478, "id583"], [478, "id592"], [478, "id613"], [478, "id627"], [478, "id637"], [478, "id665"], [478, "id670"], [478, "id676"], [478, "id689"]], "C API": [[478, "c-api"], [478, "id10"], [478, "id18"], [478, "id23"], [478, "id31"], [478, "id42"], [478, "id50"], [478, "id59"], [478, "id76"], [478, "id86"], [478, "id95"], [478, "id107"], [478, "id117"], [478, "id126"], [478, "id134"], [478, "id143"], [478, "id151"], [478, "id159"], [478, "id168"], [478, "id179"], [478, "id189"], [478, "id198"], [478, "id208"], [478, "id218"], [478, "id226"], [478, "id237"], [478, "id247"], [478, "id257"], [478, "id267"], [478, "id278"], [478, "id289"], [478, "id298"], [478, "id304"], [478, "id314"], [478, "id325"], [478, "id336"], [478, "id347"], [478, "id357"], [478, "id374"], [478, "id376"], [478, "id409"], [478, "id427"], [478, "id434"], [478, "id444"], [478, "id450"], [478, "id460"], [478, "id470"], [478, "id483"], [478, "id493"], [478, "id510"], [478, "id522"], [478, "id532"], [478, "id548"], [478, "id554"], [478, "id569"], [478, "id582"], [478, "id593"], [478, "id605"], [478, "id610"], [478, "id671"], [478, "id680"], [478, "id686"]], "Python 3.12.0 release candidate 1": [[478, "python-3-12-0-release-candidate-1"]], "Documentation": [[478, "documentation"], [478, "id14"], [478, "id27"], [478, "id35"], [478, "id45"], [478, "id54"], [478, "id64"], [478, "id70"], [478, "id80"], [478, "id90"], [478, "id99"], [478, "id111"], [478, "id120"], [478, "id129"], [478, "id137"], [478, "id146"], [478, "id154"], [478, "id162"], [478, "id172"], [478, "id183"], [478, "id193"], [478, "id202"], [478, "id212"], [478, "id221"], [478, "id230"], [478, "id241"], [478, "id251"], [478, "id261"], [478, "id271"], [478, "id282"], [478, "id293"], [478, "id301"], [478, "id308"], [478, "id318"], [478, "id329"], [478, "id340"], [478, "id351"], [478, "id360"], [478, "id367"], [478, "id379"], [478, "id385"], [478, "id392"], [478, "id402"], [478, "id413"], [478, "id422"], [478, "id430"], [478, "id437"], [478, "id447"], [478, "id454"], [478, "id463"], [478, "id476"], [478, "id486"], [478, "id499"], [478, "id512"], [478, "id523"], [478, "id533"], [478, "id537"], [478, "id572"], [478, "id578"], [478, "id588"], [478, "id601"], [478, "id611"], [478, "id623"], [478, "id633"], [478, "id648"], [478, "id656"], [478, "id664"], [478, "id687"]], "Python 3.12.0 beta 4": [[478, "python-3-12-0-beta-4"]], "Python 3.12.0 beta 3": [[478, "python-3-12-0-beta-3"]], "Python 3.12.0 beta 2": [[478, "python-3-12-0-beta-2"]], "IDLE": [[478, "idle"], [478, "id40"], [478, "id104"], [478, "id133"], [478, "id142"], [478, "id167"], [478, "id177"], [478, "id188"], [478, "id197"], [478, "id207"], [478, "id217"], [478, "id235"], [478, "id246"], [478, "id256"], [478, "id276"], [478, "id287"], [478, "id297"], [478, "id303"], [478, "id313"], [478, "id323"], [478, "id334"], [478, "id345"], [478, "id355"], [478, "id363"], [478, "id372"], [478, "id382"], [478, "id389"], [478, "id397"], [478, "id407"], [478, "id418"], [478, "id442"], [478, "id449"], [478, "id458"], [478, "id468"], [478, "id481"], [478, "id491"], [478, "id503"], [478, "id509"], [478, "id520"], [478, "id553"], [478, "id561"], [478, "id568"], [478, "id577"], [478, "id587"], [478, "id609"], [478, "id618"], [478, "id622"], [478, "id632"], [478, "id647"], [478, "id662"], [478, "id684"], [470, "idle"], [466, "idle"], [243, "idle"]], "Python 3.12.0 beta 1": [[478, "python-3-12-0-beta-1"]], "Python 3.12.0 alpha 7": [[478, "python-3-12-0-alpha-7"]], "Python 3.12.0 alpha 6": [[478, "python-3-12-0-alpha-6"]], "Python 3.12.0 alpha 5": [[478, "python-3-12-0-alpha-5"]], "Python 3.12.0 alpha 4": [[478, "python-3-12-0-alpha-4"]], "Python 3.12.0 alpha 3": [[478, "python-3-12-0-alpha-3"]], "Python 3.12.0 alpha 2": [[478, "python-3-12-0-alpha-2"]], "Python 3.12.0 alpha 1": [[478, "python-3-12-0-alpha-1"]], "Python 3.11.0 beta 1": [[478, "python-3-11-0-beta-1"]], "Python 3.11.0 alpha 7": [[478, "python-3-11-0-alpha-7"]], "Python 3.11.0 alpha 6": [[478, "python-3-11-0-alpha-6"]], "Python 3.11.0 alpha 5": [[478, "python-3-11-0-alpha-5"]], "Python 3.11.0 alpha 4": [[478, "python-3-11-0-alpha-4"]], "Python 3.11.0 alpha 3": [[478, "python-3-11-0-alpha-3"]], "Python 3.11.0 alpha 2": [[478, "python-3-11-0-alpha-2"]], "Python 3.11.0 alpha 1": [[478, "python-3-11-0-alpha-1"]], "Python 3.10.0 beta 1": [[478, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[478, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[478, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[478, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[478, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[478, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[478, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[478, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[478, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[478, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[478, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[478, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[478, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[478, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[478, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[478, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[478, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[478, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[478, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[478, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[478, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[478, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[478, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[478, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[478, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[478, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[478, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[478, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[478, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[478, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[478, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[478, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[478, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[478, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[478, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[478, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[478, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[478, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[478, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[478, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[478, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[478, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[478, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[478, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[478, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[478, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[478, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[478, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[478, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[478, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[478, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[478, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[478, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[478, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[478, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[478, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[478, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[478, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[478, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[478, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[478, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[478, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[478, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[478, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[478, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[478, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[478, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[478, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[478, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[478, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[478, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[478, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[478, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[478, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[478, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[478, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[478, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[478, "python-3-5-0-alpha-1"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[479, "what-s-new-in-python"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[454, "using-python-on-a-mac"]], "\u53d6\u5f97\u548c\u5b89\u88dd MacPython": [[454, "getting-and-installing-macpython"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[454, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[454, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[454, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[454, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[454, "installing-additional-python-packages"]], "\u65bc Mac \u4e0a\u958b\u767c GUI \u7a0b\u5f0f": [[454, "gui-programming-on-the-mac"]], "\u65bc Mac \u4e0a\u767c\u884c Python \u61c9\u7528\u7a0b\u5f0f": [[454, "distributing-python-applications-on-the-mac"]], "\u5176\u4ed6\u8cc7\u6e90": [[454, "other-resources"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[463, "what-s-new-in-python-2-6"]], "Python 3.0": [[463, "python-3-0"]], "Changes to the Development Process": [[463, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[463, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[463, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 343: The 'with' statement": [[463, "pep-343-the-with-statement"], [462, "pep-343-the-with-statement"]], "Writing Context Managers": [[463, "writing-context-managers"], [462, "writing-context-managers"]], "The contextlib module": [[463, "the-contextlib-module"], [462, "the-contextlib-module"]], "PEP 366: Explicit Relative Imports From a Main Module": [[463, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[463, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[463, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[463, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[463, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[463, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[463, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[463, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[463, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[463, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[463, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[463, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[463, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[463, "the-fractions-module"]], "Interpreter Changes": [[463, "interpreter-changes"], [464, "interpreter-changes"]], "New and Improved Modules": [[463, "new-and-improved-modules"], [458, "new-and-improved-modules"], [459, "new-and-improved-modules"], [464, "new-and-improved-modules"]], "The ast module": [[463, "the-ast-module"]], "The future_builtins module": [[463, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[463, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[463, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[463, "ctypes-enhancements"]], "Improved SSL Support": [[463, "improved-ssl-support"]], "Deprecations and Removals": [[463, "deprecations-and-removals"]], "Port-Specific Changes: Windows": [[463, "port-specific-changes-windows"], [464, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[463, "port-specific-changes-mac-os-x"], [464, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: IRIX": [[463, "port-specific-changes-irix"]], "Porting to Python 2.6": [[463, "porting-to-python-2-6"]], "\u6a21\u7d44 (Module)": [[445, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[445, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[445, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[445, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[445, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[445, "standard-modules"]], "dir() \u51fd\u5f0f": [[445, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[445, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[445, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[445, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[445, "packages-in-multiple-directories"]], "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-3-12"]], "\u767c\u5e03\u91cd\u9ede\u6458\u8981": [[469, "summary-release-highlights"], [468, "summary-release-highlights"]], "Improved Error Messages": [[469, "improved-error-messages"]], "\u65b0\u589e\u7279\u6027": [[469, "new-features"], [469, "id2"], [468, "new-features"], [468, "whatsnew311-c-api-new-features"]], "PEP 701: Syntactic formalization of f-strings": [[469, "pep-701-syntactic-formalization-of-f-strings"]], "PEP 709: Comprehension inlining": [[469, "pep-709-comprehension-inlining"]], "PEP 688: Making the buffer protocol accessible in Python": [[469, "pep-688-making-the-buffer-protocol-accessible-in-python"]], "PEP 684: A Per-Interpreter GIL": [[469, "pep-684-a-per-interpreter-gil"]], "New Features Related to Type Hints": [[469, "new-features-related-to-type-hints"]], "PEP 692: Using TypedDict for more precise **kwargs typing": [[469, "pep-692-using-typeddict-for-more-precise-kwargs-typing"]], "PEP 698: Override Decorator for Static Typing": [[469, "pep-698-override-decorator-for-static-typing"]], "PEP 695: Type Parameter Syntax": [[469, "pep-695-type-parameter-syntax"]], "array": [[469, "array"], [474, "array"], [471, "array"], [467, "array"]], "calendar": [[469, "calendar"], [475, "calendar"]], "dis": [[469, "dis"], [472, "dis"], [475, "dis"], [470, "dis"]], "fractions": [[469, "fractions"], [468, "fractions"]], "sqlite3": [[469, "sqlite3"], [474, "sqlite3"], [471, "sqlite3"], [472, "sqlite3"], [473, "sqlite3"], [475, "sqlite3"], [470, "sqlite3"], [467, "sqlite3"], [468, "sqlite3"]], "tempfile": [[469, "tempfile"], [471, "tempfile"], [470, "tempfile"], [468, "tempfile"]], "types": [[469, "types"], [471, "types"], [472, "types"], [473, "types"], [475, "types"], [467, "types"]], "uuid": [[469, "uuid"], [475, "uuid"]], "Pending Removal in Python 3.13": [[469, "pending-removal-in-python-3-13"]], "Pending Removal in Python 3.14": [[469, "pending-removal-in-python-3-14"]], "Pending Removal in Future Versions": [[469, "pending-removal-in-future-versions"]], "Porting to Python 3.12": [[469, "porting-to-python-3-12"], [469, "id3"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[455, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[455, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[455, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[455, "on-freebsd-and-openbsd"]], "\u5efa\u7f6e Python": [[455, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[455, "python-related-paths-and-files"]], "\u96dc\u9805": [[455, "miscellaneous"], [468, "misc"]], "\u5ba2\u88fd\u5316 OpenSSL": [[455, "custom-openssl"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[456, "using-python-on-windows"]], "The full installer": [[456, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[456, "installation-steps"]], "Removing the MAX_PATH Limitation": [[456, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[456, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[456, "installing-without-downloading"]], "Modifying an install": [[456, "modifying-an-install"]], "The Microsoft Store package": [[456, "the-microsoft-store-package"]], "Known issues": [[456, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[456, "redirection-of-local-data-registry-and-temporary-paths"]], "nuget.org \u5957\u4ef6": [[456, "the-nuget-org-packages"]], "The embeddable package": [[456, "the-embeddable-package"]], "Python Application": [[456, "python-application"]], "\u5d4c\u5165 Python": [[456, "embedding-python"]], "Alternative bundles": [[456, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[456, "configuring-python"]], "Excursus: Setting environment variables": [[456, "excursus-setting-environment-variables"]], "Finding the Python executable": [[456, "finding-the-python-executable"]], "UTF-8 \u6a21\u5f0f": [[456, "utf-8-mode"]], "Python Launcher for Windows": [[456, "python-launcher-for-windows"]], "\u958b\u59cb": [[456, "getting-started"]], "From the command-line": [[456, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[456, "virtual-environments"]], "From a script": [[456, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[456, "from-file-associations"]], "Shebang Lines": [[456, "shebang-lines"]], "Arguments in shebang lines": [[456, "arguments-in-shebang-lines"]], "Customization": [[456, "customization"]], "Customization via INI files": [[456, "customization-via-ini-files"]], "Customizing default Python versions": [[456, "customizing-default-python-versions"]], "Diagnostics": [[456, "diagnostics"]], "Dry Run": [[456, "dry-run"]], "\u5b89\u88dd\u96a8\u9078": [[456, "install-on-demand"]], "Return codes": [[456, "return-codes"]], "Finding modules": [[456, "finding-modules"]], "Additional modules": [[456, "additional-modules"]], "PyWin32": [[456, "pywin32"]], "cx_Freeze": [[456, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[456, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[456, "other-platforms"]], "Configure Python": [[451, "configure-python"]], "Build Requirements": [[451, "build-requirements"]], "Configure Options": [[451, "configure-options"]], "General Options": [[451, "general-options"]], "WebAssembly Options": [[451, "webassembly-options"]], "Install Options": [[451, "install-options"]], "Performance options": [[451, "performance-options"]], "Python Debug Build": [[451, "python-debug-build"]], "Debug options": [[451, "debug-options"]], "Linker options": [[451, "linker-options"]], "Libraries options": [[451, "libraries-options"]], "Security Options": [[451, "security-options"]], "macOS Options": [[451, "macos-options"]], "Cross Compiling Options": [[451, "cross-compiling-options"]], "Python Build System": [[451, "python-build-system"]], "Main files of the build system": [[451, "main-files-of-the-build-system"]], "Main build steps": [[451, "main-build-steps"]], "Main Makefile targets": [[451, "main-makefile-targets"]], "C extensions": [[451, "c-extensions"]], "Compiler and linker flags": [[451, "compiler-and-linker-flags"]], "Preprocessor flags": [[451, "preprocessor-flags"]], "Compiler flags": [[451, "compiler-flags"]], "Linker flags": [[451, "linker-flags"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[458, "what-s-new-in-python-2-1"]], "PEP 227: Nested Scopes": [[458, "pep-227-nested-scopes"], [459, "pep-227-nested-scopes"]], "PEP 236: __future__ Directives": [[458, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[458, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[458, "pep-230-warning-framework"]], "PEP 229: New Build System": [[458, "pep-229-new-build-system"]], "PEP 205: Weak References": [[458, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[458, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[458, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[458, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[458, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[458, "pep-241-metadata-in-python-packages"]], "Other Changes and Fixes": [[458, "other-changes-and-fixes"], [459, "other-changes-and-fixes"], [460, "other-changes-and-fixes"], [464, "other-changes-and-fixes"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[446, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[446, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[446, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[446, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[446, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[446, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[446, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[446, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[446, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[446, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[446, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[446, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[446, "batteries-included"]], "\u7de8\u8f2f\u5668\u8207 IDE": [[452, "editors-and-ides"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[459, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[459, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[459, "old-and-new-classes"]], "Descriptors": [[459, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[459, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[459, "attribute-access"]], "Related Links": [[459, "related-links"]], "PEP 234: Iterators": [[459, "pep-234-iterators"]], "PEP 255: Simple Generators": [[459, "pep-255-simple-generators"], [460, "pep-255-simple-generators"]], "PEP 237: Unifying Long Integers and Integers": [[459, "pep-237-unifying-long-integers-and-integers"], [461, "pep-237-unifying-long-integers-and-integers"]], "PEP 238: Changing the Division Operator": [[459, "pep-238-changing-the-division-operator"]], "Unicode Changes": [[459, "unicode-changes"]], "Interpreter Changes and Fixes": [[459, "interpreter-changes-and-fixes"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[474, "what-s-new-in-python-3-6"]], "PEP 498: Formatted string literals": [[474, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[474, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[474, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[474, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[474, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[474, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[474, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[474, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[474, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[474, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[474, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[474, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[474, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[474, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[474, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[474, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[474, "dtrace-and-systemtap-probing-support"]], "secrets": [[474, "secrets"]], "binascii": [[474, "binascii"], [471, "binascii"], [475, "binascii"]], "cmath": [[474, "cmath"], [473, "cmath"]], "contextlib": [[474, "contextlib"], [471, "contextlib"], [472, "contextlib"], [473, "contextlib"], [475, "contextlib"], [470, "contextlib"], [467, "contextlib"], [468, "contextlib"]], "decimal": [[474, "decimal"], [471, "decimal"], [475, "decimal"]], "email": [[474, "email"], [471, "email"], [472, "email"], [473, "email"], [470, "email"]], "encodings": [[474, "encodings"], [467, "encodings"]], "enum": [[474, "enum"], [472, "enum"], [473, "enum"], [475, "enum"], [475, "id5"], [467, "enum"], [468, "enum"]], "faulthandler": [[474, "faulthandler"], [471, "faulthandler"], [473, "faulthandler"], [467, "faulthandler"]], "fileinput": [[474, "fileinput"], [467, "fileinput"]], "http.client": [[474, "http-client"], [473, "http-client"], [475, "http-client"], [470, "http-client"]], "idlelib and IDLE": [[474, "idlelib-and-idle"], [473, "idlelib-and-idle"], [475, "idlelib-and-idle"]], "json": [[474, "json"], [473, "json"]], "pickletools": [[474, "pickletools"]], "re": [[474, "re"], [474, "id5"], [471, "re"], [472, "re"], [473, "re"], [475, "re"], [468, "re"]], "readline": [[474, "readline"], [473, "readline"]], "rlcompleter": [[474, "rlcompleter"]], "site": [[474, "site"], [470, "site"], [467, "site"]], "socketserver": [[474, "socketserver"], [471, "socketserver"], [475, "socketserver"]], "struct": [[474, "struct"], [471, "struct"], [472, "struct"]], "subprocess": [[474, "subprocess"], [471, "subprocess"], [472, "subprocess"], [473, "subprocess"], [475, "subprocess"]], "telnetlib": [[474, "telnetlib"]], "timeit": [[474, "timeit"], [473, "timeit"]], "traceback": [[474, "traceback"], [472, "traceback"], [473, "traceback"], [467, "traceback"], [468, "traceback"]], "unittest.mock": [[474, "unittest-mock"], [473, "unittest-mock"], [475, "unittest-mock"]], "urllib.request": [[474, "urllib-request"]], "urllib.robotparser": [[474, "urllib-robotparser"]], "warnings": [[474, "warnings"], [475, "warnings"], [468, "warnings"]], "winreg": [[474, "winreg"]], "winsound": [[474, "winsound"]], "xmlrpc.client": [[474, "xmlrpc-client"]], "zipfile": [[474, "zipfile"], [472, "zipfile"], [473, "zipfile"], [475, "zipfile"], [468, "zipfile"]], "Other Improvements": [[474, "other-improvements"], [472, "other-improvements"]], "\u65b0\u95dc\u9375\u5b57": [[474, "new-keywords"]], "Deprecated Python behavior": [[474, "deprecated-python-behavior"]], "Deprecated Python modules, functions and methods": [[474, "deprecated-python-modules-functions-and-methods"], [471, "deprecated-python-modules-functions-and-methods"], [473, "deprecated-python-modules-functions-and-methods"], [475, "deprecated-python-modules-functions-and-methods"]], "asynchat": [[474, "asynchat"]], "asyncore": [[474, "asyncore"], [470, "asyncore"]], "dbm": [[474, "dbm"], [472, "dbm"], [473, "dbm"], [475, "dbm"], [475, "id4"], [470, "dbm"]], "grp": [[474, "grp"]], "Deprecated functions and types of the C API": [[474, "deprecated-functions-and-types-of-the-c-api"], [471, "deprecated-functions-and-types-of-the-c-api"], [475, "deprecated-functions-and-types-of-the-c-api"]], "Deprecated Build Options": [[474, "deprecated-build-options"]], "Porting to Python 3.6": [[474, "porting-to-python-3-6"]], "Changes in 'python' Command Behavior": [[474, "changes-in-python-command-behavior"], [472, "changes-in-python-command-behavior"]], "Notable changes in Python 3.6.2": [[474, "notable-changes-in-python-3-6-2"]], "New make regen-all build target": [[474, "new-make-regen-all-build-target"], [473, "new-make-regen-all-build-target"], [464, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[474, "removal-of-make-touch-build-target"], [473, "removal-of-make-touch-build-target"], [464, "removal-of-make-touch-build-target"]], "Notable changes in Python 3.6.4": [[474, "notable-changes-in-python-3-6-4"]], "Notable changes in Python 3.6.5": [[474, "notable-changes-in-python-3-6-5"]], "Notable changes in Python 3.6.7": [[474, "notable-changes-in-python-3-6-7"]], "Notable changes in Python 3.6.10": [[474, "notable-changes-in-python-3-6-10"]], "Notable changes in Python 3.6.13": [[474, "notable-changes-in-python-3-6-13"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[460, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[460, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[460, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[460, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[460, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[460, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[460, "pep-279-enumerate"]], "PEP 282: The logging Package": [[460, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[460, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[460, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[460, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[460, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[460, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[460, "pep-307-pickle-enhancements"]], "Extended Slices": [[460, "extended-slices"]], "String Changes": [[460, "string-changes"]], "New, Improved, and Deprecated Modules": [[460, "new-improved-and-deprecated-modules"], [461, "new-improved-and-deprecated-modules"], [470, "new-improved-and-deprecated-modules"], [466, "new-improved-and-deprecated-modules"]], "Date/Time Type": [[460, "date-time-type"]], "The optparse Module": [[460, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[460, "pymalloc-a-specialized-object-allocator"]], "Port-Specific Changes": [[460, "port-specific-changes"], [461, "port-specific-changes"], [462, "port-specific-changes"]], "Porting to Python 2.3": [[460, "porting-to-python-2-3"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[461, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[461, "pep-218-built-in-set-objects"]], "PEP 289: Generator Expressions": [[461, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[461, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[461, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[461, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[461, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[461, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[461, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[461, "the-decimal-type"]], "Context \u578b\u5225": [[461, "the-context-type"]], "PEP 328: Multi-line Imports": [[461, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[461, "pep-331-locale-independent-float-string-conversions"]], "cookielib": [[461, "cookielib"]], "doctest": [[461, "doctest"], [472, "doctest"], [473, "doctest"], [467, "doctest"]], "Porting to Python 2.4": [[461, "porting-to-python-2-4"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[465, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[465, "common-stumbling-blocks"]], "Print Is A Function": [[465, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[465, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[465, "ordering-comparisons"]], "\u6574\u6578": [[465, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[465, "text-vs-data-instead-of-unicode-vs-8-bit"]], "Overview Of Syntax Changes": [[465, "overview-of-syntax-changes"]], "New Syntax": [[465, "new-syntax"]], "\u8a9e\u6cd5\u8b8a\u66f4": [[465, "changed-syntax"]], "\u5df2\u88ab\u79fb\u9664\u7684\u8a9e\u6cd5": [[465, "removed-syntax"]], "Changes Already Present In Python 2.6": [[465, "changes-already-present-in-python-2-6"]], "\u51fd\u5f0f\u5eab\u8b8a\u66f4": [[465, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[465, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[465, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[465, "miscellaneous-other-changes"]], "Operators And Special Methods": [[465, "operators-and-special-methods"]], "Builtins": [[465, "builtins"]], "Porting To Python 3.0": [[465, "porting-to-python-3-0"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-3-3"]], "PEP 405: Virtual Environments": [[471, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[471, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[471, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "Features": [[471, "features"], [471, "id1"], [277, "features"]], "API changes": [[471, "api-changes"], [471, "id2"]], "PEP 393: Flexible String Representation": [[471, "pep-393-flexible-string-representation"]], "Functionality": [[471, "functionality"]], "Performance and resource usage": [[471, "performance-and-resource-usage"]], "PEP 397: Python Launcher for Windows": [[471, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[471, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[471, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[471, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[471, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[471, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[471, "pep-412-key-sharing-dictionary"]], "PEP 362: Function Signature Object": [[471, "pep-362-function-signature-object"]], "PEP 421: Adding sys.implementation": [[471, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[471, "simplenamespace"]], "Using importlib as the Implementation of Import": [[471, "using-importlib-as-the-implementation-of-import"]], "New APIs": [[471, "new-apis"]], "Visible Changes": [[471, "visible-changes"]], "A Finer-Grained Import Lock": [[471, "a-finer-grained-import-lock"]], "Builtin functions and types": [[471, "builtin-functions-and-types"]], "lzma": [[471, "lzma"], [473, "lzma"]], "abc": [[471, "abc"], [472, "abc"], [470, "abc"]], "base64": [[471, "base64"], [472, "base64"], [467, "base64"]], "bz2": [[471, "bz2"], [473, "bz2"]], "codecs": [[471, "codecs"], [467, "codecs"]], "crypt": [[471, "crypt"], [475, "crypt"]], "Policy Framework": [[471, "policy-framework"]], "Provisional Policy with New Header API": [[471, "provisional-policy-with-new-header-api"]], "Other API Changes": [[471, "other-api-changes"]], "hmac": [[471, "hmac"], [472, "hmac"], [475, "hmac"], [467, "hmac"]], "html": [[471, "html"], [472, "html"], [470, "html"]], "sched": [[471, "sched"]], "select": [[471, "select"], [472, "select"], [470, "select"]], "smtpd": [[471, "smtpd"], [472, "smtpd"], [473, "smtpd"]], "stat": [[471, "stat"], [472, "stat"]], "textwrap": [[471, "textwrap"], [472, "textwrap"]], "urllib": [[471, "urllib"], [472, "urllib"], [473, "urllib"]], "webbrowser": [[471, "webbrowser"]], "xml.etree.ElementTree": [[471, "xml-etree-elementtree"]], "Unsupported Operating Systems": [[471, "unsupported-operating-systems"], [473, "unsupported-operating-systems"]], "Deprecated features": [[471, "deprecated-features"]], "Porting to Python 3.3": [[471, "porting-to-python-3-3"]], "Porting Python code": [[471, "porting-python-code"]], "Porting C code": [[471, "porting-c-code"]], "Building C extensions": [[471, "building-c-extensions"]], "Command Line Switch Changes": [[471, "command-line-switch-changes"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-3-4"], [473, "what-s-new-in-python-3-5"]], "Summary -- Release Highlights": [[472, "summary-release-highlights"], [475, "summary-release-highlights"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[472, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "Bootstrapping pip By Default": [[472, "bootstrapping-pip-by-default"], [464, "bootstrapping-pip-by-default"]], "Documentation Changes": [[472, "documentation-changes"], [464, "documentation-changes"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[472, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[472, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[472, "pep-451-a-modulespec-type-for-the-import-system"]], "ensurepip": [[472, "ensurepip"]], "selectors": [[472, "selectors"], [473, "selectors"]], "aifc": [[472, "aifc"], [475, "aifc"]], "argparse": [[472, "argparse"], [473, "argparse"], [475, "argparse"], [467, "argparse"]], "audioop": [[472, "audioop"]], "colorsys": [[472, "colorsys"]], "filecmp": [[472, "filecmp"]], "glob": [[472, "glob"], [473, "glob"], [467, "glob"]], "idlelib \u8207 IDLE": [[472, "idlelib-and-idle"]], "marshal": [[472, "marshal"]], "operator": [[472, "operator"], [473, "operator"], [468, "operator"]], "pty": [[472, "pty"]], "resource": [[472, "resource"]], "shelve": [[472, "shelve"], [467, "shelve"]], "sunau": [[472, "sunau"], [475, "sunau"]], "wave": [[472, "wave"], [475, "wave"]], "xml.etree": [[472, "xml-etree"], [475, "xml-etree"]], "CPython \u5be6\u4f5c\u8b8a\u66f4": [[472, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[472, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[472, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[472, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[472, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[472, "other-build-and-c-api-changes"]], "\u986f\u8457\u6700\u4f73\u5316": [[472, "significant-optimizations"]], "Deprecations in the Python API": [[472, "deprecations-in-the-python-api"]], "\u5df2\u68c4\u7528\u529f\u80fd": [[472, "deprecated-features"]], "Operating Systems No Longer Supported": [[472, "operating-systems-no-longer-supported"]], "API \u8207\u529f\u80fd\u7684\u79fb\u9664": [[472, "api-and-feature-removals"]], "\u7a0b\u5f0f\u78bc\u7684\u6e05\u9664": [[472, "code-cleanups"]], "Porting to Python 3.4": [[472, "porting-to-python-3-4"]], "Python API \u7684\u8b8a\u66f4": [[472, "changes-in-the-python-api"]], "3.4.3 \u4e2d\u7684\u8b8a\u66f4": [[472, "changed-in-3-4-3"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[472, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [464, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[447, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[447, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[447, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[447, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[447, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[447, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[447, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[447, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[447, "decimal-floating-point-arithmetic"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[453, "python-setup-and-usage"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[442, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[442, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[442, "alternatives-to-the-interactive-interpreter"]], "PEP 492 - Coroutines with async and await syntax": [[473, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[473, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[473, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[473, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[473, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[473, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[473, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[473, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[473, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[473, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[473, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[473, "pep-489-multi-phase-extension-module-initialization"]], "zipapp": [[473, "zipapp"], [475, "zipapp"]], "cgi": [[473, "cgi"]], "code": [[473, "code"]], "configparser": [[473, "configparser"], [470, "configparser"]], "difflib": [[473, "difflib"]], "heapq": [[473, "heapq"]], "imghdr": [[473, "imghdr"]], "linecache": [[473, "linecache"], [467, "linecache"]], "locale": [[473, "locale"], [475, "locale"], [475, "id7"], [468, "locale"]], "sndhdr": [[473, "sndhdr"]], "Memory BIO Support": [[473, "memory-bio-support"], [337, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[473, "application-layer-protocol-negotiation-support"]], "Other Changes": [[473, "other-changes"]], "sysconfig": [[473, "sysconfig"], [470, "sysconfig"], [468, "sysconfig"]], "wsgiref": [[473, "wsgiref"]], "xml.sax": [[473, "xml-sax"]], "Other module-level changes": [[473, "other-module-level-changes"]], "New Keywords": [[473, "new-keywords"]], "Deprecated Python Behavior": [[473, "deprecated-python-behavior"], [475, "deprecated-python-behavior"]], "Porting to Python 3.5": [[473, "porting-to-python-3-5"]], "Notable changes in Python 3.5.4": [[473, "notable-changes-in-python-3-5-4"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[464, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[464, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[464, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[464, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[464, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 378: Format Specifier for Thousands Separator": [[464, "pep-378-format-specifier-for-thousands-separator"], [466, "pep-378-format-specifier-for-thousands-separator"]], "PEP 389: The argparse Module for Parsing Command Lines": [[464, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[464, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[464, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[464, "pep-3137-the-memoryview-object"]], "New module: importlib": [[464, "new-module-importlib"]], "New module: sysconfig": [[464, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[464, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[464, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[464, "updated-module-elementtree-1-3"]], "Port-Specific Changes: FreeBSD": [[464, "port-specific-changes-freebsd"]], "Porting to Python 2.7": [[464, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[464, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[464, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[464, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[464, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[464, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[464, "pep-493-https-verification-migration-tools-for-python-2-7"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[443, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[443, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[443, "argument-passing"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[443, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[443, "source-code-encoding"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[475, "what-s-new-in-python-3-7"]], "PEP 563: Postponed Evaluation of Annotations": [[475, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[475, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[475, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[475, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[475, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[475, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[475, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[475, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[475, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[475, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[475, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[475, "python-development-mode-x-dev"]], "contextvars": [[475, "contextvars"]], "dataclasses": [[475, "dataclasses"], [467, "dataclasses"], [468, "dataclasses"]], "importlib.resources": [[475, "importlib-resources"]], "http.server": [[475, "http-server"]], "mimetypes": [[475, "mimetypes"]], "msilib": [[475, "msilib"]], "queue": [[475, "queue"]], "string": [[475, "string"], [468, "string"]], "uu": [[475, "uu"]], "xmlrpc.server": [[475, "xmlrpc-server"]], "Other CPython Implementation Changes": [[475, "other-cpython-implementation-changes"]], "macpath": [[475, "macpath"]], "Platform Support Removals": [[475, "platform-support-removals"]], "Module Removals": [[475, "module-removals"]], "Windows-only Changes": [[475, "windows-only-changes"], [475, "id12"]], "Porting to Python 3.7": [[475, "porting-to-python-3-7"]], "Changes in Python Behavior": [[475, "changes-in-python-behavior"]], "Other CPython implementation changes": [[475, "id13"]], "Notable changes in Python 3.7.1": [[475, "notable-changes-in-python-3-7-1"]], "Notable changes in Python 3.7.2": [[475, "notable-changes-in-python-3-7-2"]], "Notable changes in Python 3.7.6": [[475, "notable-changes-in-python-3-7-6"]], "Notable changes in Python 3.7.10": [[475, "notable-changes-in-python-3-7-10"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[462, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[462, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[462, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[462, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[462, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[462, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[462, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[462, "pep-342-new-generator-features"]], "PEP 352: Exceptions as New-Style Classes": [[462, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[462, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[462, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[462, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[462, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[462, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[462, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[462, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[462, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[462, "the-wsgiref-package"]], "Porting to Python 2.5": [[462, "porting-to-python-2-5"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[470, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[470, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[470, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[470, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[470, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[470, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[470, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "elementtree": [[470, "elementtree"]], "datetime \u548c time": [[470, "datetime-and-time"]], "reprlib": [[470, "reprlib"]], "decimal and fractions": [[470, "decimal-and-fractions"]], "ftp": [[470, "ftp"]], "popen": [[470, "popen"]], "gzip \u548c zipfile": [[470, "gzip-and-zipfile"]], "nntp": [[470, "nntp"]], "certificates": [[470, "certificates"]], "mailbox": [[470, "mailbox"]], "turtledemo": [[470, "turtledemo"]], "Multi-threading": [[470, "multi-threading"], [254, "multi-threading"]], "Unicode": [[470, "unicode"], [457, "unicode"]], "Codecs": [[470, "codecs"]], "\u6587\u4ef6": [[470, "documentation"]], "Code Repository": [[470, "code-repository"]], "Porting to Python 3.2": [[470, "porting-to-python-3-2"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[444, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[444, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[444, "numbers"]], "\u6587\u5b57": [[444, "text"]], "List\uff08\u4e32\u5217\uff09": [[444, "lists"], [340, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[444, "first-steps-towards-programming"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-3-10"]], "\u6458\u8981 -- \u767c\u5e03\u91cd\u9ede": [[467, "summary-release-highlights"]], "\u65b0\u529f\u80fd": [[467, "new-features"], [467, "id1"]], "\u5e36\u62ec\u865f\u7684\u60c5\u5883\u7ba1\u7406\u5668": [[467, "parenthesized-context-managers"]], "\u66f4\u597d\u7684\u932f\u8aa4\u8a0a\u606f": [[467, "better-error-messages"]], "SyntaxErrors": [[467, "syntaxerrors"]], "IndentationErrors": [[467, "indentationerrors"]], "AttributeErrors": [[467, "attributeerrors"]], "NameErrors": [[467, "nameerrors"]], "PEP 626\uff1a\u7528\u65bc\u9664\u932f\u548c\u5176\u4ed6\u5de5\u5177\u7684\u7cbe\u78ba\u5217\u865f": [[467, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634\uff1a\u7d50\u69cb\u6a21\u5f0f\u5339\u914d": [[467, "pep-634-structural-pattern-matching"]], "\u8a9e\u6cd5\u548c\u64cd\u4f5c": [[467, "syntax-and-operations"]], "\u5ba3\u544a\u5f0f\u65b9\u6cd5 (Declarative approach)": [[467, "declarative-approach"]], "\u7c21\u55ae\u6a21\u5f0f\uff1a\u8207\u5b57\u9762\u503c\u5339\u914d": [[467, "simple-pattern-match-to-a-literal"]], "\u6c92\u6709\u842c\u7528\u5b57\u5143 (wildcard) \u7684\u884c\u70ba": [[467, "behavior-without-the-wildcard"]], "\u5177\u6709\u5b57\u9762\u503c\u548c\u8b8a\u6578\u7684\u6a21\u5f0f": [[467, "patterns-with-a-literal-and-variable"]], "\u6a21\u5f0f\u548c\u985e\u5225": [[467, "patterns-and-classes"]], "\u5177\u6709\u4f4d\u7f6e\u53c3\u6578\u7684\u6a21\u5f0f": [[467, "patterns-with-positional-parameters"]], "\u5de2\u72c0\u6a21\u5f0f": [[467, "nested-patterns"]], "\u8907\u96dc\u6a21\u5f0f\u548c\u842c\u7528\u5b57\u5143": [[467, "complex-patterns-and-the-wildcard"]], "Guard": [[467, "guard"]], "\u5176\u4ed6\u4e3b\u8981\u529f\u80fd": [[467, "other-key-features"]], "\u53ef\u9078\u7684 EncodingWarning \u548c encoding=\"locale\" \u9078\u9805": [[467, "optional-encodingwarning-and-encoding-locale-option"]], "\u8207\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u529f\u80fd": [[467, "new-features-related-to-type-hints"]], "PEP 604\uff1a\u65b0\u578b\u806f\u96c6\u904b\u7b97\u5b50": [[467, "pep-604-new-type-union-operator"]], "PEP 612\uff1a\u53c3\u6578\u898f\u7bc4\u8b8a\u6578": [[467, "pep-612-parameter-specification-variables"]], "PEP 613\uff1a\u578b\u5225\u5225\u540d (TypeAlias)": [[467, "pep-613-typealias"]], "PEP 647\uff1a\u4f7f\u7528\u8005\u5b9a\u7fa9\u7684\u578b\u5225\u9632\u8b77": [[467, "pep-647-user-defined-type-guards"]], "\u6539\u9032\u7684\u6a21\u7d44": [[467, "improved-modules"]], "asynchat, asyncore, smtpd": [[467, "asynchat-asyncore-smtpd"]], "bdb": [[467, "bdb"]], "bisect": [[467, "bisect"]], "\u50c5\u9650\u95dc\u9375\u5b57\u6b04\u4f4d (Keyword-only fields)": [[467, "keyword-only-fields"]], "IDLE \u548c idlelib": [[467, "idle-and-idlelib"]], "importlib.metadata": [[467, "importlib-metadata"]], "platform": [[467, "platform"]], "pyclbr": [[467, "pyclbr"]], "_thread": [[467, "thread"]], "zipimport": [[467, "zipimport"]], "\u6700\u4f73\u5316": [[467, "optimizations"], [466, "optimizations"], [468, "optimizations"]], "\u5df2\u68c4\u7528": [[467, "deprecated"], [467, "id3"], [468, "deprecated"], [468, "whatsnew311-c-api-deprecated"]], "\u5df2\u522a\u9664": [[467, "removed"], [467, "id4"]], "\u79fb\u690d\u5230 Python 3.10": [[467, "porting-to-python-3-10"], [467, "id2"]], "Python \u8a9e\u6cd5\u7684\u8b8a\u5316": [[467, "changes-in-the-python-syntax"]], "Python API \u7684\u8b8a\u5316": [[467, "changes-in-the-python-api"]], "CPython \u4f4d\u5143\u7d44\u78bc\u66f4\u6539": [[467, "cpython-bytecode-changes"]], "\u5efa\u7f6e\u8b8a\u66f4": [[467, "build-changes"], [468, "build-changes"]], "C API \u8b8a\u66f4": [[467, "c-api-changes"], [468, "c-api-changes"]], "PEP 652\uff1a\u7dad\u8b77\u7a69\u5b9a ABI": [[467, "pep-652-maintaining-the-stable-abi"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[448, "virtual-environments-and-packages"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[448, "managing-packages-with-pip"]], "\u547d\u4ee4\u5217\u8207\u74b0\u5883": [[450, "command-line-and-environment"]], "\u547d\u4ee4\u5217": [[450, "command-line"]], "\u4ecb\u9762\u9078\u9805": [[450, "interface-options"]], "Generic options": [[450, "generic-options"]], "Miscellaneous options": [[450, "miscellaneous-options"]], "\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684\u9078\u9805": [[450, "options-you-shouldn-t-use"]], "\u74b0\u5883\u8b8a\u6578": [[450, "environment-variables"]], "\u9664\u932f\u6a21\u5f0f\u8b8a\u6578": [[450, "debug-mode-variables"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[466, "pep-372-ordered-dictionaries"]], "Porting to Python 3.1": [[466, "porting-to-python-3-1"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[449, "what-now"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[457, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[457, "what-about-python-1-6"]], "New Development Process": [[457, "new-development-process"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[457, "list-comprehensions"]], "Augmented Assignment": [[457, "augmented-assignment"]], "String Methods": [[457, "string-methods"], [340, "string-methods"]], "Garbage Collection of Cycles": [[457, "garbage-collection-of-cycles"]], "Other Core Changes": [[457, "other-core-changes"]], "Minor Language Changes": [[457, "minor-language-changes"]], "Changes to Built-in Functions": [[457, "changes-to-built-in-functions"]], "Porting to 2.0": [[457, "porting-to-2-0"]], "Extending/Embedding Changes": [[457, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[457, "distutils-making-modules-easy-to-install"]], "XML Modules": [[457, "xml-modules"]], "SAX2 Support": [[457, "sax2-support"]], "DOM Support": [[457, "dom-support"]], "Relationship to PyXML": [[457, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[457, "module-changes"]], "New modules": [[457, "new-modules"]], "IDLE Improvements": [[457, "idle-improvements"]], "Deleted and Deprecated Modules": [[457, "deleted-and-deprecated-modules"]], "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-3-11"]], "PEP 657\uff1a\u56de\u6eaf (traceback) \u4e2d\u66f4\u7d30\u7dfb\u7684\u932f\u8aa4\u4f4d\u7f6e": [[468, "pep-657-fine-grained-error-locations-in-tracebacks"]], "PEP 654\uff1a\u4f8b\u5916\u7fa4\u7d44\u8207 except*": [[468, "pep-654-exception-groups-and-except"]], "PEP 678\uff1a\u904b\u7528\u4f8b\u5916\u8a3b\u89e3\u4f7f\u5176\u66f4\u52a0\u8a73\u76e1": [[468, "pep-678-exceptions-can-be-enriched-with-notes"]], "Windows py.exe \u555f\u52d5\u7a0b\u5f0f (launcher) \u7684\u6539\u9032": [[468, "windows-py-exe-launcher-improvements"]], "\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u7279\u6027": [[468, "new-features-related-to-type-hints"]], "PEP 646\uff1a\u53ef\u8b8a\u53c3\u6578\u6cdb\u578b (variadic generics)": [[468, "pep-646-variadic-generics"]], "PEP 655\uff1a\u6a19\u8a18\u7368\u7acb TypedDict \u9805\u76ee\u70ba\u5fc5\u8981\u6216\u4e0d\u5fc5\u8981": [[468, "pep-655-marking-individual-typeddict-items-as-required-or-not-required"]], "PEP 673\uff1aSelf \u578b\u5225": [[468, "pep-673-self-type"]], "PEP 675\uff1a\u4efb\u610f\u7684\u6587\u672c\u5b57\u4e32\u578b\u5225 (Arbitrary literal string type)": [[468, "pep-675-arbitrary-literal-string-type"]], "PEP 681\uff1a\u8cc7\u6599\u985e\u5225\u8f49\u63db (Data class transforms)": [[468, "pep-681-data-class-transforms"]], "PEP 563 \u53ef\u80fd\u4e0d\u662f\u672a\u4f86": [[468, "pep-563-may-not-be-the-future"]], "\u5176\u4ed6 CPython \u5be6\u4f5c\u66f4\u52d5": [[468, "other-cpython-implementation-changes"]], "\u65b0\u589e\u6a21\u7d44": [[468, "new-modules"]], "\u6a21\u7d44\u6539\u9032": [[468, "improved-modules"]], "IDLE \u8207 idlelib": [[468, "whatsnew311-idle"]], "\u66f4\u5feb\u7684 CPython": [[468, "faster-cpython"]], "\u66f4\u5feb\u7684\u555f\u52d5": [[468, "faster-startup"]], "\u51cd\u7d50\u5f15\u5165 (Frozen imports) / \u975c\u614b\u7a0b\u5f0f\u78bc\u7269\u4ef6 (Static code objects)": [[468, "frozen-imports-static-code-objects"]], "\u66f4\u5feb\u7684\u904b\u884c\u7a0b\u5f0f": [[468, "faster-runtime"]], "\u6240\u9700\u8cc7\u6e90\u66f4\u5c11 (cheaper) \u4e14\u60f0\u6027\u7684 (lazy)) Python \u5e40 (frame)": [[468, "cheaper-lazy-python-frames"]], "\u884c\u5167 Python \u51fd\u5f0f\u547c\u53eb": [[468, "inlined-python-function-calls"]], "PEP 659\uff1a\u7279\u5316\u7684\u9069\u61c9\u6027\u76f4\u8b6f\u5668": [[468, "pep-659-specializing-adaptive-interpreter"]], "FAQ": [[468, "faq"]], "\u6211\u8a72\u5982\u4f55\u5728\u7a0b\u5f0f\u78bc\u4e2d\u7372\u53d6\u9019\u4e9b\u52a0\u901f\uff1f": [[468, "how-should-i-write-my-code-to-utilize-these-speedups"]], "Python 3.11 \u6703\u4e0d\u6703\u4f7f\u7528\u66f4\u591a\u8a18\u61b6\u9ad4\uff1f": [[468, "will-cpython-3-11-use-more-memory"]], "\u6211\u5728\u6211\u7684\u7a0b\u5f0f\u7576\u4e2d\u6c92\u611f\u89ba\u5230\u4efb\u4f55\u52a0\u901f\uff0c\u70ba\u4ec0\u9ebc\uff1f": [[468, "i-don-t-see-any-speedups-in-my-workload-why"]], "\u6709\u7528\u5230 JIT \u7de8\u8b6f\u5668\u55ce\uff1f": [[468, "is-there-a-jit-compiler"]], "\u95dc\u65bc": [[468, "about"]], "CPython \u4f4d\u5143\u7d44\u78bc (bytecode) \u8b8a\u66f4": [[468, "cpython-bytecode-changes"]], "\u65b0\u589e opcode": [[468, "new-opcodes"]], "\u88ab\u53d6\u4ee3\u7684\u64cd\u4f5c\u78bc (opcode)": [[468, "replaced-opcodes"]], "\u6709\u66f4\u52d5/\u88ab\u79fb\u9664\u7684 opcode": [[468, "changed-removed-opcodes"]], "\u8a9e\u8a00/\u5167\u5efa": [[468, "language-builtins"]], "\u6a19\u6e96\u51fd\u5f0f\u5eab": [[468, "standard-library"]], "Python 3.12 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[468, "pending-removal-in-python-3-12"], [468, "whatsnew311-c-api-pending-removal"]], "\u5df2\u79fb\u9664": [[468, "removed"], [468, "whatsnew311-c-api-removed"]], "\u79fb\u690d\u81f3 Python 3.11": [[468, "porting-to-python-3-11"], [468, "whatsnew311-c-api-porting"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[370, "tkinter-tix-extension-widgets-for-tk"]], "Using Tix": [[370, "using-tix"]], "Tix Widgets": [[370, "tix-widgets"]], "Basic Widgets": [[370, "basic-widgets"]], "File Selectors": [[370, "file-selectors"]], "Hierarchical ListBox": [[370, "hierarchical-listbox"]], "Tabular ListBox": [[370, "tabular-listbox"]], "Manager Widgets": [[370, "manager-widgets"]], "Image Types": [[370, "image-types"]], "Miscellaneous Widgets": [[370, "miscellaneous-widgets"]], "Form Geometry Manager": [[370, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[370, "tix-commands"]], "tkinter.dnd --- Drag and drop support": [[366, "tkinter-dnd-drag-and-drop-support"]], "sysconfig --- Provide access to Python's configuration information": [[350, "sysconfig-provide-access-to-python-s-configuration-information"]], "Configuration variables": [[350, "configuration-variables"]], "Installation paths": [[350, "installation-paths"]], "\u5176\u4ed6\u51fd\u5f0f": [[350, "other-functions"], [333, "other-functions"], [322, "other-functions"]], "Using sysconfig as a script": [[350, "using-sysconfig-as-a-script"]], "\u5167\u5efa\u578b\u5225": [[340, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[340, "truth-value-testing"]], "Boolean Operations --- and, or, not": [[340, "boolean-operations-and-or-not"]], "Numeric Types --- int, float, complex": [[340, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[340, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[340, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[340, "additional-methods-on-float"]], "Hashing of numeric types": [[340, "hashing-of-numeric-types"]], "Boolean Type - bool": [[340, "boolean-type-bool"]], "Iterator Types": [[340, "iterator-types"]], "Generator Types": [[340, "generator-types"]], "Sequence Types --- list, tuple, range": [[340, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[340, "common-sequence-operations"]], "Immutable Sequence Types": [[340, "immutable-sequence-types"]], "Mutable Sequence Types": [[340, "mutable-sequence-types"]], "Tuples": [[340, "tuples"]], "Ranges": [[340, "ranges"]], "Text Sequence Type --- str": [[340, "text-sequence-type-str"]], "printf-style String Formatting": [[340, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[340, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytes Objects": [[340, "bytes-objects"]], "Bytearray Objects": [[340, "bytearray-objects"]], "Bytes and Bytearray Operations": [[340, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[340, "printf-style-bytes-formatting"]], "Memory Views": [[340, "memory-views"]], "Set Types --- set, frozenset": [[340, "set-types-set-frozenset"]], "Mapping Types --- dict": [[340, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[340, "dictionary-view-objects"]], "Context Manager Types": [[340, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[340, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[340, "generic-alias-type"]], "Standard Generic Classes": [[340, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[340, "special-attributes-of-genericalias-objects"]], "Union Type": [[340, "union-type"]], "Other Built-in Types": [[340, "other-built-in-types"]], "Classes and Class Instances": [[340, "classes-and-class-instances"]], "Methods": [[340, "methods"], [292, "methods"], [284, "methods"]], "Code Objects": [[340, "code-objects"]], "The Null Object": [[340, "the-null-object"]], "The Ellipsis Object": [[340, "the-ellipsis-object"]], "The NotImplemented Object": [[340, "the-notimplemented-object"]], "Internal Objects": [[340, "internal-objects"]], "Special Attributes": [[340, "special-attributes"]], "Integer string conversion length limitation": [[340, "integer-string-conversion-length-limitation"]], "Affected APIs": [[340, "affected-apis"]], "Configuring the limit": [[340, "configuring-the-limit"]], "Recommended configuration": [[340, "recommended-configuration"]], "tkinter.messagebox --- Tkinter message prompts": [[368, "tkinter-messagebox-tkinter-message-prompts"]], "termios --- POSIX style tty control": [[356, "termios-posix-style-tty-control"]], "tarfile --- Read and write tar archive files": [[353, "tarfile-read-and-write-tar-archive-files"]], "TarFile \u7269\u4ef6": [[353, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[353, "tarinfo-objects"]], "Extraction filters": [[353, "extraction-filters"]], "Default named filters": [[353, "default-named-filters"]], "Filter errors": [[353, "filter-errors"]], "Hints for further verification": [[353, "hints-for-further-verification"]], "Supporting older Python versions": [[353, "supporting-older-python-versions"]], "Stateful extraction filter example": [[353, "stateful-extraction-filter-example"]], "Supported tar formats": [[353, "supported-tar-formats"]], "Unicode issues": [[353, "unicode-issues"]], "token --- Constants used with Python parse trees": [[372, "token-constants-used-with-python-parse-trees"]], "tabnanny --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392": [[352, "tabnanny-detection-of-ambiguous-indentation"]], "sys --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f": [[348, "sys-system-specific-parameters-and-functions"]], "Attributes of the float_info named tuple": [[348, "id2"]], "stringprep --- Internet String Preparation": [[342, "stringprep-internet-string-preparation"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[358, "text-processing-services"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[354, "telnetlib-telnet-client"]], "Telnet Objects": [[354, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[354, "telnet-example"]], "tkinter.colorchooser --- Color choosing dialog": [[365, "tkinter-colorchooser-color-choosing-dialog"]], "time --- Time access and conversions": [[361, "time-time-access-and-conversions"]], "Clock ID Constants": [[361, "clock-id-constants"]], "Timezone Constants": [[361, "timezone-constants"]], "tkinter.font --- Tkinter font wrapper": [[367, "tkinter-font-tkinter-font-wrapper"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[346, "superseded-modules"]], "syslog --- Unix syslog library routines": [[351, "syslog-unix-syslog-library-routines"]], "threading --- Thread-based parallelism": [[360, "threading-thread-based-parallelism"]], "Thread-Local Data": [[360, "thread-local-data"]], "Thread Objects": [[360, "thread-objects"]], "Lock Objects": [[360, "lock-objects"]], "RLock \u7269\u4ef6": [[360, "rlock-objects"]], "Condition Objects": [[360, "condition-objects"]], "Semaphore Objects": [[360, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[360, "semaphore-example"]], "Event Objects": [[360, "event-objects"]], "Timer Objects": [[360, "timer-objects"]], "Barrier Objects": [[360, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[360, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[345, "sunau-read-and-write-sun-au-files"]], "AU_read \u7269\u4ef6": [[345, "au-read-objects"]], "AU_write \u7269\u4ef6": [[345, "au-write-objects"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[355, "tempfile-generate-temporary-files-and-directories"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[355, "deprecated-functions-and-variables"]], "struct --- Interpret bytes as packed binary data": [[343, "struct-interpret-bytes-as-packed-binary-data"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[343, "functions-and-exceptions"]], "Format Strings": [[343, "format-strings"]], "Byte Order, Size, and Alignment": [[343, "byte-order-size-and-alignment"]], "Format Characters": [[343, "format-characters"]], "Applications": [[343, "applications"]], "Native Formats": [[343, "native-formats"]], "Standard Formats": [[343, "standard-formats"]], "Classes": [[343, "classes"], [325, "classes"]], "tkinter --- Python interface to Tcl/Tk": [[364, "tkinter-python-interface-to-tcl-tk"]], "Architecture": [[364, "architecture"]], "Tkinter Modules": [[364, "tkinter-modules"]], "Tkinter Life Preserver": [[364, "tkinter-life-preserver"]], "A Hello World Program": [[364, "a-hello-world-program"]], "Important Tk Concepts": [[364, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[364, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[364, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[364, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[364, "threading-model"]], "Handy Reference": [[364, "handy-reference"]], "Setting Options": [[364, "setting-options"]], "The Packer": [[364, "the-packer"]], "Packer Options": [[364, "packer-options"]], "Coupling Widget Variables": [[364, "coupling-widget-variables"]], "The Window Manager": [[364, "the-window-manager"]], "Tk Option Data Types": [[364, "tk-option-data-types"]], "Bindings and Events": [[364, "bindings-and-events"]], "The index Parameter": [[364, "the-index-parameter"]], "Images": [[364, "images"]], "File Handlers": [[364, "file-handlers"]], "timeit --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593": [[362, "timeit-measure-execution-time-of-small-code-snippets"]], "\u57fa\u790e\u7bc4\u4f8b": [[362, "basic-examples"], [232, "basic-examples"]], "Python Interface": [[362, "python-interface"]], "textwrap --- Text wrapping and filling": [[359, "textwrap-text-wrapping-and-filling"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[369, "tkinter-scrolledtext-scrolled-text-widget"]], "tokenize --- Tokenizer for Python source": [[373, "tokenize-tokenizer-for-python-source"]], "Tokenizing Input": [[373, "tokenizing-input"]], "string --- Common string operations": [[341, "string-common-string-operations"]], "String constants": [[341, "string-constants"]], "Custom String Formatting": [[341, "custom-string-formatting"]], "Format String Syntax": [[341, "format-string-syntax"]], "Format Specification Mini-Language": [[341, "format-specification-mini-language"]], "Format examples": [[341, "format-examples"]], "Template strings": [[341, "template-strings"]], "Helper functions": [[341, "helper-functions"]], "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)": [[363, "graphical-user-interfaces-with-tk"]], "subprocess --- Subprocess management": [[344, "subprocess-subprocess-management"]], "Using the subprocess Module": [[344, "using-the-subprocess-module"]], "Frequently Used Arguments": [[344, "frequently-used-arguments"]], "Popen Constructor": [[344, "popen-constructor"]], "Security Considerations": [[344, "security-considerations"], [323, "security-considerations"], [241, "security-considerations"], [140, "security-considerations"]], "Popen Objects": [[344, "popen-objects"]], "Windows Popen Helpers": [[344, "windows-popen-helpers"]], "Windows Constants": [[344, "windows-constants"]], "Older high-level API": [[344, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[344, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[344, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[344, "replacing-shell-pipeline"]], "Replacing os.system()": [[344, "replacing-os-system"]], "Replacing the os.spawn family": [[344, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[344, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[344, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[344, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[344, "converting-an-argument-sequence-to-a-string-on-windows"]], "Disabling use of vfork() or posix_spawn()": [[344, "disabling-use-of-vfork-or-posix-spawn"]], "tkinter.ttk --- Tk themed widgets": [[371, "tkinter-ttk-tk-themed-widgets"]], "Using Ttk": [[371, "using-ttk"]], "Ttk Widgets": [[371, "ttk-widgets"]], "Widget": [[371, "widget"]], "Standard Options": [[371, "standard-options"]], "Scrollable Widget Options": [[371, "scrollable-widget-options"]], "Label Options": [[371, "label-options"]], "Compatibility Options": [[371, "compatibility-options"]], "Widget States": [[371, "widget-states"]], "ttk.Widget": [[371, "ttk-widget"]], "Combobox": [[371, "combobox"]], "Options": [[371, "options"], [371, "id1"], [371, "id3"], [371, "id5"], [371, "id6"], [371, "id7"]], "Virtual events": [[371, "virtual-events"], [371, "id2"]], "ttk.Combobox": [[371, "ttk-combobox"]], "Spinbox": [[371, "spinbox"]], "ttk.Spinbox": [[371, "ttk-spinbox"]], "Notebook": [[371, "notebook"]], "Tab Options": [[371, "tab-options"]], "Tab Identifiers": [[371, "tab-identifiers"]], "Virtual Events": [[371, "id4"], [371, "id8"]], "ttk.Notebook": [[371, "ttk-notebook"]], "Progressbar": [[371, "progressbar"]], "ttk.Progressbar": [[371, "ttk-progressbar"]], "Separator": [[371, "separator"]], "Sizegrip": [[371, "sizegrip"]], "Platform-specific notes": [[371, "platform-specific-notes"]], "Bugs": [[371, "bugs"]], "Treeview": [[371, "treeview"]], "Item Options": [[371, "item-options"]], "Tag Options": [[371, "tag-options"]], "Column Identifiers": [[371, "column-identifiers"]], "ttk.Treeview": [[371, "ttk-treeview"]], "Ttk Styling": [[371, "ttk-styling"]], "Layouts": [[371, "layouts"]], "test --- Regression tests package for Python": [[357, "test-regression-tests-package-for-python"]], "Writing Unit Tests for the test package": [[357, "writing-unit-tests-for-the-test-package"]], "Running tests using the command-line interface": [[357, "running-tests-using-the-command-line-interface"]], "test.support --- Utilities for the Python test suite": [[357, "test-support-utilities-for-the-python-test-suite"]], "test.support.socket_helper --- Utilities for socket tests": [[357, "test-support-socket-helper-utilities-for-socket-tests"]], "test.support.script_helper --- Utilities for the Python execution tests": [[357, "test-support-script-helper-utilities-for-the-python-execution-tests"]], "test.support.bytecode_helper --- Support tools for testing correct bytecode generation": [[357, "test-support-bytecode-helper-support-tools-for-testing-correct-bytecode-generation"]], "test.support.threading_helper --- Utilities for threading tests": [[357, "test-support-threading-helper-utilities-for-threading-tests"]], "test.support.os_helper --- Utilities for os tests": [[357, "test-support-os-helper-utilities-for-os-tests"]], "test.support.import_helper --- Utilities for import tests": [[357, "test-support-import-helper-utilities-for-import-tests"]], "test.support.warnings_helper --- Utilities for warnings tests": [[357, "test-support-warnings-helper-utilities-for-warnings-tests"]], "The initialization of the sys.path module search path": [[349, "the-initialization-of-the-sys-path-module-search-path"]], "Virtual environments": [[349, "virtual-environments"]], "_pth files": [[349, "pth-files"]], "Embedded Python": [[349, "embedded-python"]], "symtable --- Access to the compiler's symbol tables": [[347, "symtable-access-to-the-compiler-s-symbol-tables"]], "Generating Symbol Tables": [[347, "generating-symbol-tables"]], "Examining Symbol Tables": [[347, "examining-symbol-tables"]], "selectors --- High-level I/O multiplexing": [[325, "selectors-high-level-i-o-multiplexing"]], "shelve --- Python object persistence": [[326, "shelve-python-object-persistence"]], "Restrictions": [[326, "restrictions"]], "socket --- Low-level networking interface": [[333, "socket-low-level-networking-interface"]], "Socket \u7cfb\u5217\u5bb6\u65cf": [[333, "socket-families"]], "\u5efa\u7acb sockets": [[333, "creating-sockets"]], "Socket \u7269\u4ef6": [[333, "socket-objects"]], "Notes on socket timeouts": [[333, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[333, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[333, "timeouts-and-the-accept-method"]], "sqlite3 --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762": [[336, "sqlite3-db-api-2-0-interface-for-sqlite-databases"]], "Module functions": [[336, "module-functions"]], "Module constants": [[336, "module-constants"]], "Connection objects": [[336, "connection-objects"]], "Cursor objects": [[336, "cursor-objects"]], "Row objects": [[336, "row-objects"]], "Blob objects": [[336, "blob-objects"]], "PrepareProtocol objects": [[336, "prepareprotocol-objects"]], "SQLite and Python types": [[336, "sqlite-and-python-types"]], "Default adapters and converters (deprecated)": [[336, "default-adapters-and-converters-deprecated"]], "How to use placeholders to bind values in SQL queries": [[336, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[336, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[336, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[336, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[336, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[336, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[336, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[336, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[336, "how-to-work-with-sqlite-uris"]], "How to create and use row factories": [[336, "how-to-create-and-use-row-factories"]], "\u89e3\u91cb": [[336, "explanation"]], "Transaction control": [[336, "transaction-control"]], "Transaction control via the autocommit attribute": [[336, "transaction-control-via-the-autocommit-attribute"]], "Transaction control via the isolation_level attribute": [[336, "transaction-control-via-the-isolation-level-attribute"]], "reprlib --- Alternate repr() implementation": [[317, "reprlib-alternate-repr-implementation"]], "Repr \u7269\u4ef6": [[317, "repr-objects"]], "Subclassing Repr Objects": [[317, "subclassing-repr-objects"]], "readline --- GNU readline interface": [[316, "readline-gnu-readline-interface"]], "Init file": [[316, "init-file"]], "Line buffer": [[316, "line-buffer"]], "History file": [[316, "history-file"]], "History list": [[316, "history-list"]], "Startup hooks": [[316, "startup-hooks"]], "Completion": [[316, "completion"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[312, "queue-a-synchronized-queue-class"]], "\u4f47\u5217\u7269\u4ef6": [[312, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[312, "simplequeue-objects"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[339, "statistics-mathematical-statistics-functions"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[339, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[339, "measures-of-spread"]], "\u5169\u500b\u8f38\u5165\u4e4b\u9593\u7684\u95dc\u4fc2\u7d71\u8a08": [[339, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[339, "function-details"]], "NormalDist \u7269\u4ef6": [[339, "normaldist-objects"]], "NormalDist \u7bc4\u4f8b\u8207\u9326\u56ca\u5999\u8a08": [[339, "normaldist-examples-and-recipes"]], "Classic probability problems": [[339, "classic-probability-problems"]], "Monte Carlo inputs for simulations": [[339, "monte-carlo-inputs-for-simulations"]], "Approximating binomial distributions": [[339, "approximating-binomial-distributions"]], "Naive bayesian classifier": [[339, "naive-bayesian-classifier"]], "Kernel density estimation": [[339, "kernel-density-estimation"]], "quopri --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599": [[313, "quopri-encode-and-decode-mime-quoted-printable-data"]], "smtplib --- SMTP protocol client": [[331, "smtplib-smtp-protocol-client"]], "SMTP \u7269\u4ef6": [[331, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[331, "smtp-example"]], "ssl --- TLS/SSL wrapper for socket objects": [[337, "ssl-tls-ssl-wrapper-for-socket-objects"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[337, "functions-constants-and-exceptions"]], "Socket creation": [[337, "socket-creation"]], "Context creation": [[337, "context-creation"]], "Random generation": [[337, "random-generation"]], "Certificate handling": [[337, "certificate-handling"]], "SSL Sockets": [[337, "ssl-sockets"]], "SSL Contexts": [[337, "ssl-contexts"]], "Certificates": [[337, "certificates"]], "Certificate chains": [[337, "certificate-chains"]], "CA certificates": [[337, "ca-certificates"]], "Combined key and certificate": [[337, "combined-key-and-certificate"]], "Self-signed certificates": [[337, "self-signed-certificates"]], "Testing for SSL support": [[337, "testing-for-ssl-support"]], "Client-side operation": [[337, "client-side-operation"]], "Server-side operation": [[337, "server-side-operation"]], "Notes on non-blocking sockets": [[337, "notes-on-non-blocking-sockets"]], "SSL session": [[337, "ssl-session"]], "Security considerations": [[337, "security-considerations"], [264, "security-considerations"]], "Best defaults": [[337, "best-defaults"]], "Manual settings": [[337, "manual-settings"]], "Verifying certificates": [[337, "verifying-certificates"]], "Protocol versions": [[337, "protocol-versions"]], "Cipher selection": [[337, "cipher-selection"]], "Multi-processing": [[337, "multi-processing"]], "TLS 1.3": [[337, "tls-1-3"]], "py_compile --- Compile Python source files": [[307, "py-compile-compile-python-source-files"]], "signal --- Set handlers for asynchronous events": [[329, "signal-set-handlers-for-asynchronous-events"]], "General rules": [[329, "general-rules"]], "Execution of Python signal handlers": [[329, "execution-of-python-signal-handlers"]], "Signals and threads": [[329, "signals-and-threads"]], "Note on SIGPIPE": [[329, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[329, "note-on-signal-handlers-and-exceptions"]], "runpy --- Locating and executing Python modules": [[320, "runpy-locating-and-executing-python-modules"]], "shutil --- High-level file operations": [[328, "shutil-high-level-file-operations"]], "Directory and files operations": [[328, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[328, "platform-dependent-efficient-copy-operations"]], "copytree example": [[328, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[328, "rmtree-example"]], "Archiving operations": [[328, "archiving-operations"]], "Archiving example": [[328, "archiving-example"]], "Archiving example with base_dir": [[328, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[328, "querying-the-size-of-the-output-terminal"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[310, "xml-parsers-expat-fast-xml-parsing-using-expat"]], "ExpatError \u4f8b\u5916": [[310, "expaterror-exceptions"]], "Content Model Descriptions": [[310, "content-model-descriptions"]], "Expat error constants": [[310, "expat-error-constants"]], "re --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c": [[315, "re-regular-expression-operations"]], "Regular Expression Syntax": [[315, "regular-expression-syntax"]], "Flags": [[315, "flags"]], "Functions": [[315, "functions"]], "Regular Expression Objects": [[315, "regular-expression-objects"]], "Match Objects": [[315, "match-objects"]], "Regular Expression Examples": [[315, "regular-expression-examples"]], "Checking for a Pair": [[315, "checking-for-a-pair"]], "Simulating scanf()": [[315, "simulating-scanf"]], "search() vs. match()": [[315, "search-vs-match"]], "Making a Phonebook": [[315, "making-a-phonebook"]], "Text Munging": [[315, "text-munging"]], "Finding all Adverbs": [[315, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[315, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[315, "raw-string-notation"]], "Writing a Tokenizer": [[315, "writing-a-tokenizer"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[332, "sndhdr-determine-type-of-sound-file"]], "pydoc --- Documentation generator and online help system": [[309, "pydoc-documentation-generator-and-online-help-system"]], "pyclbr --- Python module browser support": [[308, "pyclbr-python-module-browser-support"]], "Class Objects": [[308, "class-objects"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[322, "secrets-generate-secure-random-numbers-for-managing-secrets"]], "\u4e82\u6578": [[322, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[322, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[322, "how-many-bytes-should-tokens-use"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[322, "recipes-and-best-practices"]], "stat --- Interpreting stat() results": [[338, "stat-interpreting-stat-results"]], "site --- Site-specific configuration hook": [[330, "site-site-specific-configuration-hook"]], "Readline configuration": [[330, "readline-configuration"]], "Command Line Interface": [[330, "command-line-interface"], [258, "command-line-interface"], [251, "command-line-interface"], [230, "command-line-interface"]], "shlex --- Simple lexical analysis": [[327, "shlex-simple-lexical-analysis"]], "shlex \u7269\u4ef6": [[327, "shlex-objects"]], "Parsing Rules": [[327, "parsing-rules"]], "Improved Compatibility with Shells": [[327, "improved-compatibility-with-shells"]], "resource --- Resource usage information": [[318, "resource-resource-usage-information"]], "Resource Limits": [[318, "resource-limits"]], "Resource Usage": [[318, "resource-usage"]], "socketserver --- A framework for network servers": [[334, "socketserver-a-framework-for-network-servers"]], "Server Creation Notes": [[334, "server-creation-notes"]], "Request Handler Objects": [[334, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[334, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[334, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[334, "asynchronous-mixins"]], "sched --- Event scheduler": [[321, "sched-event-scheduler"]], "Scheduler Objects": [[321, "scheduler-objects"]], "rlcompleter --- Completion function for GNU readline": [[319, "rlcompleter-completion-function-for-gnu-readline"]], "Completer Objects": [[319, "completer-objects"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[314, "random-generate-pseudo-random-numbers"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[314, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[314, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[314, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[314, "functions-for-sequences"]], "\u96e2\u6563\u5206\u5e03": [[314, "discrete-distributions"]], "\u5be6\u6578\u5206\u5e03": [[314, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[314, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[314, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[314, "recipes"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[335, "spwd-the-shadow-password-database"]], "select --- Waiting for I/O completion": [[324, "select-waiting-for-i-o-completion"]], "/dev/poll Polling Objects": [[324, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[324, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[324, "polling-objects"]], "Kqueue Objects": [[324, "kqueue-objects"]], "Kevent Objects": [[324, "kevent-objects"]], "pwd --- \u5bc6\u78bc\u8cc7\u6599\u5eab": [[306, "pwd-the-password-database"]], "Python Runtime Services": [[311, "python-runtime-services"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[291, "ossaudiodev-access-to-oss-compatible-audio-devices"]], "Audio Device Objects": [[291, "audio-device-objects"]], "Mixer Device Objects": [[291, "mixer-device-objects"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[278, "msvcrt-useful-routines-from-the-ms-vc-runtime"]], "File Operations": [[278, "file-operations"]], "Console I/O": [[278, "console-i-o"]], "Other Functions": [[278, "other-functions"]], "optparse --- Parser for command line options": [[288, "optparse-parser-for-command-line-options"]], "What are options for?": [[288, "what-are-options-for"]], "What are positional arguments for?": [[288, "what-are-positional-arguments-for"]], "Understanding option actions": [[288, "understanding-option-actions"]], "The store action": [[288, "the-store-action"]], "Handling boolean (flag) options": [[288, "handling-boolean-flag-options"]], "Other actions": [[288, "other-actions"]], "Default values": [[288, "default-values"]], "Generating help": [[288, "generating-help"]], "Grouping Options": [[288, "grouping-options"]], "Printing a version string": [[288, "printing-a-version-string"]], "How optparse handles errors": [[288, "how-optparse-handles-errors"]], "Putting it all together": [[288, "putting-it-all-together"]], "Reference Guide": [[288, "reference-guide"]], "Creating the parser": [[288, "creating-the-parser"]], "Populating the parser": [[288, "populating-the-parser"]], "Defining options": [[288, "defining-options"]], "Option attributes": [[288, "option-attributes"]], "Standard option actions": [[288, "standard-option-actions"]], "Standard option types": [[288, "standard-option-types"]], "Querying and manipulating your option parser": [[288, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[288, "conflicts-between-options"]], "Cleanup": [[288, "cleanup"], [279, "cleanup"]], "Other methods": [[288, "other-methods"]], "Option Callbacks": [[288, "option-callbacks"]], "Defining a callback option": [[288, "defining-a-callback-option"]], "How callbacks are called": [[288, "how-callbacks-are-called"]], "Raising errors in a callback": [[288, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[288, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[288, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[288, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[288, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[288, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[288, "callback-example-6-variable-arguments"]], "Extending optparse": [[288, "extending-optparse"]], "Adding new types": [[288, "adding-new-types"]], "Adding new actions": [[288, "adding-new-actions"]], "multiprocessing --- Process-based parallelism": [[279, "multiprocessing-process-based-parallelism"]], "The Process class": [[279, "the-process-class"]], "Contexts and start methods": [[279, "contexts-and-start-methods"]], "Exchanging objects between processes": [[279, "exchanging-objects-between-processes"]], "Synchronization between processes": [[279, "synchronization-between-processes"]], "Sharing state between processes": [[279, "sharing-state-between-processes"]], "Using a pool of workers": [[279, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[279, "process-and-exceptions"]], "Pipes and Queues": [[279, "pipes-and-queues"]], "Miscellaneous": [[279, "miscellaneous"], [266, "miscellaneous"]], "Connection Objects": [[279, "connection-objects"]], "Synchronization primitives": [[279, "synchronization-primitives"]], "Shared ctypes Objects": [[279, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[279, "the-multiprocessing-sharedctypes-module"]], "Managers": [[279, "managers"]], "Customized managers": [[279, "customized-managers"]], "Using a remote manager": [[279, "using-a-remote-manager"]], "Proxy Objects": [[279, "proxy-objects"]], "Process Pools": [[279, "process-pools"]], "Listeners and Clients": [[279, "listeners-and-clients"]], "Address Formats": [[279, "address-formats"]], "Authentication keys": [[279, "authentication-keys"]], "Logging": [[279, "logging"]], "The multiprocessing.dummy module": [[279, "the-multiprocessing-dummy-module"]], "Programming guidelines": [[279, "programming-guidelines"]], "All start methods": [[279, "all-start-methods"]], "The spawn and forkserver start methods": [[279, "the-spawn-and-forkserver-start-methods"]], "pathlib --- Object-oriented filesystem paths": [[292, "pathlib-object-oriented-filesystem-paths"]], "Basic use": [[292, "basic-use"]], "\u7d14\u8def\u5f91": [[292, "pure-paths"]], "\u901a\u7528\u7279\u6027": [[292, "general-properties"]], "\u904b\u7b97\u5b50": [[292, "operators"]], "Accessing individual parts": [[292, "accessing-individual-parts"]], "Methods and properties": [[292, "methods-and-properties"]], "Concrete paths": [[292, "concrete-paths"]], "Correspondence to tools in the os module": [[292, "correspondence-to-tools-in-the-os-module"]], "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406": [[281, "internet-data-handling"]], "pickle --- Python object serialization": [[295, "pickle-python-object-serialization"]], "Relationship to other Python modules": [[295, "relationship-to-other-python-modules"]], "Comparison with marshal": [[295, "comparison-with-marshal"]], "Comparison with json": [[295, "comparison-with-json"]], "Data stream format": [[295, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[295, "module-interface"]], "What can be pickled and unpickled?": [[295, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[295, "pickling-class-instances"]], "Persistence of External Objects": [[295, "persistence-of-external-objects"]], "Dispatch Tables": [[295, "dispatch-tables"]], "Handling Stateful Objects": [[295, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[295, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[295, "out-of-band-buffers"]], "Provider API": [[295, "provider-api"]], "Consumer API": [[295, "consumer-api"]], "Restricting Globals": [[295, "restricting-globals"]], "pdb --- The Python Debugger": [[293, "pdb-the-python-debugger"]], "Debugger Commands": [[293, "debugger-commands"]], "poplib --- POP3 protocol client": [[301, "poplib-pop3-protocol-client"]], "POP3 \u7269\u4ef6": [[301, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[301, "pop3-example"]], "os --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[289, "os-miscellaneous-operating-system-interfaces"]], "File Names, Command Line Arguments, and Environment Variables": [[289, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[289, "python-utf-8-mode"]], "Process Parameters": [[289, "process-parameters"]], "File Object Creation": [[289, "file-object-creation"]], "File Descriptor Operations": [[289, "file-descriptor-operations"]], "Querying the size of a terminal": [[289, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[289, "inheritance-of-file-descriptors"]], "Files and Directories": [[289, "files-and-directories"]], "Linux extended attributes": [[289, "linux-extended-attributes"]], "Process Management": [[289, "process-management"]], "Interface to the scheduler": [[289, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[289, "miscellaneous-system-information"]], "Random numbers": [[289, "random-numbers"]], "plistlib --- Generate and parse Apple .plist files": [[300, "plistlib-generate-and-parse-apple-plist-files"]], "netrc --- netrc \u6a94\u6848\u8655\u7406": [[282, "netrc-netrc-file-processing"]], "netrc \u7269\u4ef6": [[282, "netrc-objects"]], "pkgutil --- Package extension utility": [[298, "pkgutil-package-extension-utility"]], "mmap --- Memory-mapped file support": [[274, "mmap-memory-mapped-file-support"]], "MADV_* Constants": [[274, "madv-constants"]], "MAP_* \u5e38\u6578": [[274, "map-constants"]], "mimetypes --- Map filenames to MIME types": [[272, "mimetypes-map-filenames-to-mime-types"]], "MimeTypes \u7269\u4ef6": [[272, "mimetypes-objects"]], "The Python Profilers": [[304, "the-python-profilers"]], "Introduction to the profilers": [[304, "introduction-to-the-profilers"]], "Instant User's Manual": [[304, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[304, "profile-and-cprofile-module-reference"]], "The Stats Class": [[304, "the-stats-class"]], "What Is Deterministic Profiling?": [[304, "what-is-deterministic-profiling"]], "\u9650\u5236": [[304, "limitations"]], "\u6821\u6b63": [[304, "calibration"]], "Using a custom timer": [[304, "using-a-custom-timer"]], "modulefinder --- Find modules used by a script": [[275, "modulefinder-find-modules-used-by-a-script"]], "Example usage of ModuleFinder": [[275, "example-usage-of-modulefinder"]], "multiprocessing.shared_memory --- Shared memory for direct access across processes": [[280, "multiprocessing-shared-memory-shared-memory-for-direct-access-across-processes"]], "pty --- Pseudo-terminal utilities": [[305, "pty-pseudo-terminal-utilities"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[277, "msilib-read-and-write-microsoft-installer-files"]], "Database Objects": [[277, "database-objects"]], "View Objects": [[277, "view-objects"]], "Summary Information Objects": [[277, "summary-information-objects"]], "Record Objects": [[277, "record-objects"]], "Errors": [[277, "errors"]], "CAB \u7269\u4ef6": [[277, "cab-objects"]], "Directory Objects": [[277, "directory-objects"]], "GUI classes": [[277, "gui-classes"]], "Precomputed tables": [[277, "precomputed-tables"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[286, "numeric-and-mathematical-modules"]], "pickletools --- Tools for pickle developers": [[296, "pickletools-tools-for-pickle-developers"]], "Command line usage": [[296, "command-line-usage"], [243, "command-line-usage"]], "Command line options": [[296, "command-line-options"], [258, "command-line-options"], [230, "command-line-options"]], "os.path --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c": [[290, "os-path-common-pathname-manipulations"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[299, "platform-access-to-underlying-platform-s-identifying-data"]], "\u8de8\u5e73\u53f0": [[299, "cross-platform"]], "Java \u5e73\u53f0": [[299, "java-platform"]], "Windows \u5e73\u53f0": [[299, "windows-platform"]], "macOS \u5e73\u53f0": [[299, "macos-platform"]], "Unix \u5e73\u53f0": [[299, "unix-platforms"]], "Linux \u5e73\u53f0": [[299, "linux-platforms"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[283, "nis-interface-to-sun-s-nis-yellow-pages"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[287, "operator-standard-operators-as-functions"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[287, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[287, "in-place-operators"]], "\u591a\u5a92\u9ad4\u670d\u52d9": [[273, "multimedia-services"]], "pipes --- shell pipelines \u4ecb\u9762": [[297, "pipes-interface-to-shell-pipelines"]], "Template Objects": [[297, "template-objects"]], "Data Persistence": [[294, "data-persistence"]], "pprint --- Data pretty printer": [[303, "pprint-data-pretty-printer"]], "PrettyPrinter \u7269\u4ef6": [[303, "prettyprinter-objects"]], "numbers --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[285, "numbers-numeric-abstract-base-classes"]], "\u6578\u503c\u7684\u968e\u5c64": [[285, "the-numeric-tower"]], "\u7d66\u578b\u5225\u5be6\u4f5c\u8005\u7684\u8a3b\u8a18": [[285, "notes-for-type-implementors"]], "\u52a0\u5165\u66f4\u591a\u6578\u503c ABC": [[285, "adding-more-numeric-abcs"]], "\u5be6\u4f5c\u7b97\u8853\u64cd\u4f5c": [[285, "implementing-the-arithmetic-operations"]], "posix --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb": [[302, "posix-the-most-common-posix-system-calls"]], "\u5c0d\u5927\u6a94\u6848 (Large File) \u7684\u652f\u63f4": [[302, "large-file-support"]], "\u503c\u5f97\u6ce8\u610f\u7684\u6a21\u7d44\u5167\u5bb9": [[302, "notable-module-contents"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[284, "nntplib-nntp-protocol-client"]], "NNTP \u7269\u4ef6": [[284, "nntp-objects"]], "\u5c6c\u6027": [[284, "attributes"]], "Utility functions": [[284, "utility-functions"], [172, "utility-functions"]], "Structured Markup Processing Tools": [[269, "structured-markup-processing-tools"]], "io \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177": [[254, "io-core-tools-for-working-with-streams"]], "\u6587\u5b57 I/O": [[254, "text-i-o"], [254, "id1"], [254, "id3"]], "\u4e8c\u9032\u4f4d (Binary) I/O": [[254, "binary-i-o"], [254, "id2"]], "\u539f\u59cb (Raw) I/O": [[254, "raw-i-o"]], "\u6587\u5b57\u7de8\u78bc": [[254, "text-encoding"]], "\u9078\u64c7\u6027\u52a0\u5165\u7684\u7de8\u78bc\u8b66\u544a": [[254, "opt-in-encodingwarning"]], "\u9ad8\u968e\u6a21\u7d44\u4ecb\u9762": [[254, "high-level-module-interface"]], "\u985e\u5225\u968e\u5c64": [[254, "class-hierarchy"]], "I/O Base Classes": [[254, "i-o-base-classes"]], "Raw File I/O": [[254, "raw-file-i-o"]], "Buffered Streams": [[254, "buffered-streams"]], "Reentrancy": [[254, "reentrancy"]], "importlib.resources.abc -- Abstract base classes for resources": [[249, "importlib-resources-abc-abstract-base-classes-for-resources"]], "importlib.metadata -- Accessing package metadata": [[247, "importlib-metadata-accessing-package-metadata"]], "Entry points": [[247, "entry-points"]], "Distribution metadata": [[247, "distribution-metadata"]], "Distribution versions": [[247, "distribution-versions"]], "Distribution files": [[247, "distribution-files"]], "Distribution requirements": [[247, "distribution-requirements"]], "Mapping import to distribution packages": [[247, "mapping-import-to-distribution-packages"]], "Distributions": [[247, "distributions"]], "Distribution Discovery": [[247, "distribution-discovery"]], "Extending the search algorithm": [[247, "extending-the-search-algorithm"]], "itertools --- Functions creating iterators for efficient looping": [[257, "itertools-functions-creating-iterators-for-efficient-looping"]], "Itertool functions": [[257, "itertool-functions"]], "Itertools Recipes": [[257, "itertools-recipes"]], "locale --- Internationalization services": [[262, "locale-internationalization-services"]], "Background, details, hints, tips and caveats": [[262, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[262, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[262, "access-to-message-catalogs"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[250, "the-python-standard-library"]], "http.cookiejar --- Cookie handling for HTTP clients": [[239, "http-cookiejar-cookie-handling-for-http-clients"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[239, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[239, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[239, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[239, "defaultcookiepolicy-objects"]], "Cookie \u7269\u4ef6": [[239, "cookie-objects"], [240, "cookie-objects"]], "http.server --- HTTP servers": [[241, "http-server-http-servers"]], "logging --- Logging facility for Python": [[263, "logging-logging-facility-for-python"]], "Important": [[263, "index-0"], [264, null], [265, null], [207, null]], "Logger Objects": [[263, "logger-objects"]], "Handler Objects": [[263, "handler-objects"]], "Formatter Objects": [[263, "formatter-objects"]], "Filter Objects": [[263, "filter-objects"]], "LogRecord \u7269\u4ef6": [[263, "logrecord-objects"]], "LogRecord attributes": [[263, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[263, "loggeradapter-objects"]], "Thread Safety": [[263, "thread-safety"]], "Module-Level Attributes": [[263, "module-level-attributes"]], "Integration with the warnings module": [[263, "integration-with-the-warnings-module"]], "logging.config --- Logging configuration": [[264, "logging-config-logging-configuration"]], "Configuration functions": [[264, "configuration-functions"]], "Configuration dictionary schema": [[264, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[264, "dictionary-schema-details"]], "Incremental Configuration": [[264, "incremental-configuration"]], "Object connections": [[264, "object-connections"]], "User-defined objects": [[264, "user-defined-objects"]], "Handler configuration order": [[264, "handler-configuration-order"]], "Access to external objects": [[264, "access-to-external-objects"]], "Access to internal objects": [[264, "access-to-internal-objects"]], "Import resolution and custom importers": [[264, "import-resolution-and-custom-importers"]], "Configuring QueueHandler and QueueListener": [[264, "configuring-queuehandler-and-queuelistener"]], "Configuration file format": [[264, "configuration-file-format"]], "Python Language Services": [[260, "python-language-services"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[271, "math-mathematical-functions"]], "Number-theoretic and representation functions": [[271, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[271, "power-and-logarithmic-functions"], [151, "power-and-logarithmic-functions"]], "Trigonometric functions": [[271, "trigonometric-functions"], [151, "trigonometric-functions"]], "Angular conversion": [[271, "angular-conversion"]], "Hyperbolic functions": [[271, "hyperbolic-functions"], [151, "hyperbolic-functions"]], "Special functions": [[271, "special-functions"]], "ipaddress --- IPv4/IPv6 manipulation library": [[255, "ipaddress-ipv4-ipv6-manipulation-library"]], "Convenience factory functions": [[255, "convenience-factory-functions"]], "IP Addresses": [[255, "ip-addresses"]], "Address objects": [[255, "address-objects"]], "Conversion to Strings and Integers": [[255, "conversion-to-strings-and-integers"]], "Comparison operators": [[255, "comparison-operators"]], "Arithmetic operators": [[255, "arithmetic-operators"]], "IP Network definitions": [[255, "ip-network-definitions"]], "Prefix, net mask and host mask": [[255, "prefix-net-mask-and-host-mask"]], "Network objects": [[255, "network-objects"]], "Logical operators": [[255, "logical-operators"], [255, "id3"]], "Networks as containers of addresses": [[255, "networks-as-containers-of-addresses"]], "Interface objects": [[255, "interface-objects"]], "Other Module Level Functions": [[255, "other-module-level-functions"]], "Custom Exceptions": [[255, "custom-exceptions"]], "importlib --- import \u7684\u5be6\u4f5c": [[246, "importlib-the-implementation-of-import"]], "importlib.abc -- Abstract base classes related to import": [[246, "importlib-abc-abstract-base-classes-related-to-import"]], "importlib.machinery -- Importers and path hooks": [[246, "importlib-machinery-importers-and-path-hooks"]], "importlib.util -- Utility code for importers": [[246, "importlib-util-utility-code-for-importers"]], "Importing programmatically": [[246, "importing-programmatically"]], "Checking if a module can be imported": [[246, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[246, "importing-a-source-file-directly"]], "Implementing lazy imports": [[246, "implementing-lazy-imports"]], "Setting up an importer": [[246, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[246, "approximating-importlib-import-module"]], "importlib.resources -- Package resource reading, opening and access": [[248, "importlib-resources-package-resource-reading-opening-and-access"]], "\u5df2\u68c4\u7528\u51fd\u5f0f": [[248, "deprecated-functions"]], "imaplib --- IMAP4 protocol client": [[244, "imaplib-imap4-protocol-client"]], "IMAP4 \u7269\u4ef6": [[244, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[244, "imap4-example"]], "\u570b\u969b\u5316": [[242, "internationalization"]], "json --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668": [[258, "json-json-encoder-and-decoder"]], "Encoders and Decoders": [[258, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[258, "standard-compliance-and-interoperability"]], "Character Encodings": [[258, "character-encodings"]], "Infinite and NaN Number Values": [[258, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[258, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[258, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[258, "implementation-limitations"]], "File menu (Shell and Editor)": [[243, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[243, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[243, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[243, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[243, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[243, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[243, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[243, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[243, "help-menu-shell-and-editor"]], "Context menus": [[243, "context-menus"]], "Editing and Navigation": [[243, "editing-and-navigation"]], "Editor windows": [[243, "editor-windows"]], "Key bindings": [[243, "key-bindings"]], "Automatic indentation": [[243, "automatic-indentation"]], "Completions": [[243, "completions"]], "Calltips": [[243, "calltips"]], "Code Context": [[243, "code-context"]], "Shell window": [[243, "shell-window"]], "Text colors": [[243, "text-colors"]], "Startup and Code Execution": [[243, "startup-and-code-execution"]], "Startup failure": [[243, "startup-failure"]], "Running user code": [[243, "running-user-code"]], "User output in Shell": [[243, "user-output-in-shell"]], "Developing tkinter applications": [[243, "developing-tkinter-applications"]], "Running without a subprocess": [[243, "running-without-a-subprocess"]], "Help and Preferences": [[243, "help-and-preferences"]], "Help sources": [[243, "help-sources"]], "Setting preferences": [[243, "setting-preferences"]], "IDLE on macOS": [[243, "idle-on-macos"]], "Extensions": [[243, "extensions"]], "idlelib": [[243, "idlelib"]], "mailbox --- Manipulate mailboxes in various formats": [[267, "mailbox-manipulate-mailboxes-in-various-formats"]], "Mailbox \u7269\u4ef6": [[267, "mailbox-objects"]], "Maildir": [[267, "maildir"]], "mbox": [[267, "mbox"]], "MH": [[267, "mh"]], "Babyl": [[267, "babyl"]], "MMDF": [[267, "mmdf"]], "Message \u7269\u4ef6": [[267, "message-objects"]], "MaildirMessage": [[267, "maildirmessage"]], "mboxMessage": [[267, "mboxmessage"]], "MHMessage": [[267, "mhmessage"]], "BabylMessage": [[267, "babylmessage"]], "MMDFMessage": [[267, "mmdfmessage"]], "http.client --- HTTP protocol client": [[238, "http-client-http-protocol-client"]], "HTTPConnection \u7269\u4ef6": [[238, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[238, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[238, "httpmessage-objects"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[245, "imghdr-determine-the-type-of-an-image"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[253, "notes-on-availability"]], "WebAssembly \u5e73\u53f0": [[253, "webassembly-platforms"]], "lzma --- Compression using the LZMA algorithm": [[266, "lzma-compression-using-the-lzma-algorithm"]], "Reading and writing compressed files": [[266, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[266, "compressing-and-decompressing-data-in-memory"]], "Specifying custom filter chains": [[266, "specifying-custom-filter-chains"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[270, "marshal-internal-python-object-serialization"]], "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4": [[252, "internet-protocols-and-support"]], "logging.handlers --- Logging handlers": [[265, "logging-handlers-logging-handlers"]], "StreamHandler": [[265, "streamhandler"]], "FileHandler": [[265, "filehandler"]], "NullHandler": [[265, "nullhandler"]], "WatchedFileHandler": [[265, "watchedfilehandler"]], "BaseRotatingHandler": [[265, "baserotatinghandler"]], "RotatingFileHandler": [[265, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[265, "timedrotatingfilehandler"]], "SocketHandler": [[265, "sockethandler"]], "DatagramHandler": [[265, "datagramhandler"]], "SysLogHandler": [[265, "sysloghandler"]], "NTEventLogHandler": [[265, "nteventloghandler"]], "SMTPHandler": [[265, "smtphandler"]], "MemoryHandler": [[265, "memoryhandler"]], "HTTPHandler": [[265, "httphandler"]], "QueueHandler": [[265, "queuehandler"]], "QueueListener": [[265, "queuelistener"]], "Networking and Interprocess Communication": [[256, "networking-and-interprocess-communication"]], "http.cookies --- HTTP state management": [[240, "http-cookies-http-state-management"]], "Morsel \u7269\u4ef6": [[240, "morsel-objects"]], "linecache --- Random access to text lines": [[261, "linecache-random-access-to-text-lines"]], "mailcap --- Mailcap file handling": [[268, "mailcap-mailcap-file-handling"]], "keyword --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57": [[259, "keyword-testing-for-python-keywords"]], "inspect --- Inspect live objects": [[251, "inspect-inspect-live-objects"]], "Types and members": [[251, "types-and-members"]], "Retrieving source code": [[251, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[251, "introspecting-callables-with-the-signature-object"]], "The interpreter stack": [[251, "the-interpreter-stack"]], "Fetching attributes statically": [[251, "fetching-attributes-statically"]], "Current State of Generators, Coroutines, and Asynchronous Generators": [[251, "current-state-of-generators-coroutines-and-asynchronous-generators"]], "Code Objects Bit Flags": [[251, "code-objects-bit-flags"]], "Buffer flags": [[251, "buffer-flags"]], "fractions --- Rational numbers": [[217, "fractions-rational-numbers"]], "gc --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)": [[223, "gc-garbage-collector-interface"]], "hashlib --- Secure hashes and message digests": [[231, "hashlib-secure-hashes-and-message-digests"]], "\u96dc\u6e4a\u6f14\u7b97\u6cd5": [[231, "hash-algorithms"]], "\u7528\u6cd5": [[231, "usage"]], "\u5efa\u69cb\u51fd\u5f0f": [[231, "constructors"]], "Attributes": [[231, "attributes"]], "Hash Objects": [[231, "hash-objects"]], "SHAKE variable length digests": [[231, "shake-variable-length-digests"]], "File hashing": [[231, "file-hashing"]], "Key derivation": [[231, "key-derivation"]], "BLAKE2": [[231, "blake2"]], "Creating hash objects": [[231, "creating-hash-objects"]], "Simple hashing": [[231, "simple-hashing"]], "Using different digest sizes": [[231, "using-different-digest-sizes"]], "Keyed hashing": [[231, "keyed-hashing"]], "Randomized hashing": [[231, "randomized-hashing"]], "Personalization": [[231, "personalization"]], "Tree mode": [[231, "tree-mode"]], "Credits": [[231, "credits"]], "\u5167\u5efa\u51fd\u5f0f": [[221, "built-in-functions"]], "gzip --- Support for gzip files": [[230, "gzip-support-for-gzip-files"]], "\u7528\u6cd5\u7bc4\u4f8b": [[230, "examples-of-usage"], [146, "examples-of-usage"]], "functools --- Higher-order functions and operations on callable objects": [[222, "functools-higher-order-functions-and-operations-on-callable-objects"]], "partial \u7269\u4ef6": [[222, "partial-objects"]], "email.utils: Miscellaneous utilities": [[205, "email-utils-miscellaneous-utilities"]], "fileinput --- Iterate over lines from multiple input streams": [[214, "fileinput-iterate-over-lines-from-multiple-input-streams"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[232, "heapq-heap-queue-algorithm"]], "\u512a\u5148\u4f47\u5217\u5be6\u4f5c\u7d30\u7bc0": [[232, "priority-queue-implementation-notes"]], "\u539f\u7406": [[232, "theory"]], "ftplib --- FTP \u5354\u5b9a\u7528\u6236\u7aef": [[219, "ftplib-ftp-protocol-client"]], "FTP \u7269\u4ef6": [[219, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[219, "ftp-tls-objects"]], "ensurepip --- Bootstrapping the pip installer": [[206, "ensurepip-bootstrapping-the-pip-installer"]], "Command line interface": [[206, "command-line-interface"]], "\u6a21\u7d44 API": [[206, "module-api"]], "faulthandler --- Dump the Python traceback": [[210, "faulthandler-dump-the-python-traceback"]], "Dumping the traceback": [[210, "dumping-the-traceback"]], "Fault handler state": [[210, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[210, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[210, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[210, "issue-with-file-descriptors"]], "gettext --- Multilingual internationalization services": [[226, "gettext-multilingual-internationalization-services"]], "GNU gettext API": [[226, "gnu-gettext-api"]], "Class-based API": [[226, "class-based-api"]], "The NullTranslations class": [[226, "the-nulltranslations-class"]], "The GNUTranslations class": [[226, "the-gnutranslations-class"]], "Solaris message catalog support": [[226, "solaris-message-catalog-support"]], "The Catalog constructor": [[226, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[226, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[226, "localizing-your-module"]], "Localizing your application": [[226, "localizing-your-application"]], "Changing languages on the fly": [[226, "changing-languages-on-the-fly"]], "Deferred translations": [[226, "deferred-translations"]], "email.policy: Policy Objects": [[204, "email-policy-policy-objects"]], "glob --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55": [[227, "glob-unix-style-pathname-pattern-expansion"]], "errno --- Standard errno system symbols": [[208, "errno-standard-errno-system-symbols"]], "http --- HTTP \u6a21\u7d44": [[237, "http-http-modules"]], "HTTP \u72c0\u614b\u78bc": [[237, "http-status-codes"]], "HTTP \u72c0\u614b\u5206\u985e": [[237, "http-status-category"]], "HTTP \u65b9\u6cd5": [[237, "http-methods"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[209, "built-in-exceptions"]], "Exception context": [[209, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[209, "inheriting-from-built-in-exceptions"]], "Base classes": [[209, "base-classes"]], "Concrete exceptions": [[209, "concrete-exceptions"]], "OS exceptions": [[209, "os-exceptions"]], "\u8b66\u544a": [[209, "warnings"]], "Exception groups": [[209, "exception-groups"]], "Exception hierarchy": [[209, "exception-hierarchy"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[220, "functional-programming-modules"]], "enum --- Support for enumerations": [[207, "enum-support-for-enumerations"]], "Data Types": [[207, "data-types"]], "Utilities and Decorators": [[207, "utilities-and-decorators"]], "Notes": [[207, "notes"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[225, "getpass-portable-password-input"]], "grp --- The group database": [[229, "grp-the-group-database"]], "html --- HyperText Markup Language support": [[234, "html-hypertext-markup-language-support"]], "\u6a94\u6848\u683c\u5f0f": [[213, "file-formats"]], "fnmatch --- Unix filename pattern matching": [[216, "fnmatch-unix-filename-pattern-matching"]], "filecmp --- File and Directory Comparisons": [[212, "filecmp-file-and-directory-comparisons"]], "The dircmp class": [[212, "the-dircmp-class"]], "fcntl --- The fcntl and ioctl system calls": [[211, "fcntl-the-fcntl-and-ioctl-system-calls"]], "getopt --- C-style parser for command line options": [[224, "getopt-c-style-parser-for-command-line-options"]], "graphlib \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd": [[228, "graphlib-functionality-to-operate-with-graph-like-structures"]], "\u7a0b\u5f0f\u6846\u67b6": [[218, "program-frameworks"]], "html.parser --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668": [[236, "html-parser-simple-html-and-xhtml-parser"]], "HTML \u5256\u6790\u5668\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b": [[236, "example-html-parser-application"]], "HTMLParser \u65b9\u6cd5": [[236, "htmlparser-methods"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[215, "file-and-directory-access"]], "html.entities --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9": [[235, "html-entities-definitions-of-html-general-entities"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[233, "hmac-keyed-hashing-for-message-authentication"]], "curses.ascii --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f": [[174, "curses-ascii-utilities-for-ascii-characters"]], "decimal --- Decimal fixed point and floating point arithmetic": [[182, "decimal-decimal-fixed-point-and-floating-point-arithmetic"]], "Quick-start Tutorial": [[182, "quick-start-tutorial"]], "Decimal objects": [[182, "decimal-objects"]], "Logical operands": [[182, "logical-operands"]], "Context objects": [[182, "context-objects"]], "Rounding modes": [[182, "rounding-modes"]], "Signals": [[182, "signals"]], "Floating Point Notes": [[182, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[182, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[182, "special-values"]], "Working with threads": [[182, "working-with-threads"]], "Recipes": [[182, "recipes"]], "Decimal FAQ": [[182, "decimal-faq"]], "email.message: Representing an email message": [[201, "email-message-representing-an-email-message"]], "email.contentmanager: Managing MIME Content": [[193, "email-contentmanager-managing-mime-content"]], "Content Manager Instances": [[193, "content-manager-instances"]], "dataclasses --- Data Classes": [[177, "dataclasses-data-classes"]], "Module contents": [[177, "module-contents"]], "Post-init processing": [[177, "post-init-processing"]], "Class variables": [[177, "class-variables"]], "Init-only variables": [[177, "init-only-variables"]], "Frozen instances": [[177, "frozen-instances"]], "Inheritance": [[177, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[177, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[177, "default-factory-functions"]], "Mutable default values": [[177, "mutable-default-values"]], "Descriptor-typed fields": [[177, "descriptor-typed-fields"]], "email.generator: Generating MIME documents": [[197, "email-generator-generating-mime-documents"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[188, "software-packaging-and-distribution"]], "\u52a0\u5bc6\u670d\u52d9": [[170, "cryptographic-services"]], "ctypes --- A foreign function library for Python": [[172, "ctypes-a-foreign-function-library-for-python"]], "ctypes tutorial": [[172, "ctypes-tutorial"]], "Loading dynamic link libraries": [[172, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[172, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[172, "calling-functions"]], "Fundamental data types": [[172, "fundamental-data-types"], [172, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[172, "calling-functions-continued"]], "Calling variadic functions": [[172, "calling-variadic-functions"]], "Calling functions with your own custom data types": [[172, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[172, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[172, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[172, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[172, "structures-and-unions"]], "Structure/union alignment and byte order": [[172, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[172, "bit-fields-in-structures-and-unions"]], "Arrays": [[172, "arrays"]], "Pointers": [[172, "pointers"]], "Type conversions": [[172, "type-conversions"]], "Incomplete Types": [[172, "incomplete-types"]], "Callback functions": [[172, "callback-functions"]], "Accessing values exported from dlls": [[172, "accessing-values-exported-from-dlls"]], "Surprises": [[172, "surprises"]], "Variable-sized data types": [[172, "variable-sized-data-types"]], "ctypes reference": [[172, "ctypes-reference"]], "Finding shared libraries": [[172, "finding-shared-libraries"]], "Loading shared libraries": [[172, "loading-shared-libraries"]], "Foreign functions": [[172, "foreign-functions"]], "Function prototypes": [[172, "function-prototypes"]], "Data types": [[172, "data-types"]], "Structured data types": [[172, "structured-data-types"]], "Arrays and pointers": [[172, "arrays-and-pointers"]], "Python Development Mode": [[184, "python-development-mode"]], "Effects of the Python Development Mode": [[184, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[184, "resourcewarning-example"]], "Bad file descriptor error example": [[184, "bad-file-descriptor-error-example"]], "curses.panel --- A panel stack extension for curses": [[175, "curses-panel-a-panel-stack-extension-for-curses"]], "Panel Objects": [[175, "panel-objects"]], "Custom Python Interpreters": [[176, "custom-python-interpreters"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[187, "dis-disassembler-for-python-bytecode"]], "Bytecode analysis": [[187, "bytecode-analysis"]], "Analysis functions": [[187, "analysis-functions"]], "Python Bytecode Instructions": [[187, "python-bytecode-instructions"]], "Opcode collections": [[187, "opcode-collections"]], "\u958b\u767c\u5de5\u5177": [[183, "development-tools"]], "email --- An email and MIME handling package": [[190, "email-an-email-and-mime-handling-package"]], "curses --- Terminal handling for character-cell displays": [[173, "curses-terminal-handling-for-character-cell-displays"]], "Window Objects": [[173, "window-objects"]], "Constants": [[173, "constants"]], "curses.textpad --- Text input widget for curses programs": [[173, "curses-textpad-text-input-widget-for-curses-programs"]], "Textbox objects": [[173, "textbox-objects"]], "\u8cc7\u6599\u578b\u5225": [[178, "data-types"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[181, "debugging-and-profiling"]], "email.headerregistry: Custom Header Objects": [[199, "email-headerregistry-custom-header-objects"]], "email.mime: Creating email and MIME objects from scratch": [[202, "email-mime-creating-email-and-mime-objects-from-scratch"]], "difflib --- Helpers for computing deltas": [[186, "difflib-helpers-for-computing-deltas"]], "SequenceMatcher \u7269\u4ef6": [[186, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[186, "sequencematcher-examples"]], "Differ Objects": [[186, "differ-objects"]], "Differ Example": [[186, "differ-example"]], "A command-line interface to difflib": [[186, "a-command-line-interface-to-difflib"]], "ndiff \u7bc4\u4f8b\uff1a": [[186, "ndiff-example"]], "doctest --- Test interactive Python examples": [[189, "doctest-test-interactive-python-examples"]], "Simple Usage: Checking Examples in Docstrings": [[189, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[189, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[189, "how-it-works"]], "Which Docstrings Are Examined?": [[189, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[189, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[189, "what-s-the-execution-context"]], "What About Exceptions?": [[189, "what-about-exceptions"]], "Option Flags": [[189, "option-flags"]], "Directives": [[189, "directives"]], "Warnings": [[189, "warnings"]], "Basic API": [[189, "basic-api"]], "Unittest API": [[189, "unittest-api"]], "Advanced API": [[189, "advanced-api"]], "DocTest \u7269\u4ef6": [[189, "doctest-objects"]], "Example \u7269\u4ef6": [[189, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[189, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[189, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[189, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[189, "outputchecker-objects"]], "Debugging": [[189, "debugging"]], "Soapbox": [[189, "soapbox"]], "email.parser: Parsing email messages": [[203, "email-parser-parsing-email-messages"]], "FeedParser API": [[203, "feedparser-api"]], "Parser API": [[203, "parser-api"]], "Additional notes": [[203, "additional-notes"]], "email.header: Internationalized headers": [[198, "email-header-internationalized-headers"]], "Tkinter Dialogs": [[185, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[185, "tkinter-simpledialog-standard-tkinter-input-dialogs"]], "tkinter.filedialog --- File selection dialogs": [[185, "tkinter-filedialog-file-selection-dialogs"]], "Native Load/Save Dialogs": [[185, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[185, "tkinter-commondialog-dialog-window-templates"]], "csv --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165": [[171, "csv-csv-file-reading-and-writing"]], "Dialects and Formatting Parameters": [[171, "dialects-and-formatting-parameters"]], "Reader Objects": [[171, "reader-objects"]], "Writer Objects": [[171, "writer-objects"]], "email.charset: \u8868\u793a\u5b57\u5143\u96c6\u5408": [[191, "email-charset-representing-character-sets"]], "email.encoders: Encoders": [[194, "email-encoders-encoders"]], "dbm --- Interfaces to Unix \"databases\"": [[180, "dbm-interfaces-to-unix-databases"]], "dbm.gnu --- GNU's reinterpretation of dbm": [[180, "dbm-gnu-gnu-s-reinterpretation-of-dbm"]], "dbm.ndbm --- Interface based on ndbm": [[180, "dbm-ndbm-interface-based-on-ndbm"]], "dbm.dumb --- Portable DBM implementation": [[180, "dbm-dumb-portable-dbm-implementation"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[179, "datetime-basic-date-and-time-types"]], "Aware and Naive Objects": [[179, "aware-and-naive-objects"]], "Available Types": [[179, "available-types"]], "\u5e38\u898b\u5c6c\u6027": [[179, "common-properties"]], "Determining if an Object is Aware or Naive": [[179, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[179, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[179, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[179, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[179, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[179, "datetime-objects"]], "Examples of Usage: datetime": [[179, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[179, "time-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atime": [[179, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[179, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[179, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[179, "strftime-and-strptime-behavior"]], "strftime() and strptime() Format Codes": [[179, "strftime-and-strptime-format-codes"]], "\u6280\u8853\u7d30\u7bc0": [[179, "technical-detail"]], "email.message.Message: Representing an email message using the compat32 API": [[192, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "email: Examples": [[196, "email-examples"]], "email.iterators: Iterators": [[200, "email-iterators-iterators"]], "email.errors: Exception and Defect classes": [[195, "email-errors-exception-and-defect-classes"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[138, "audioop-manipulate-raw-audio-data"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[162, "concurrent-futures-launching-parallel-tasks"]], "Executor \u7269\u4ef6": [[162, "executor-objects"]], "ThreadPoolExecutor": [[162, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[162, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[162, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[162, "processpoolexecutor-example"]], "\u6a21\u7d44\u51fd\u5f0f": [[162, "module-functions"], [169, "module-functions"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[144, "bisect-array-bisection-algorithm"]], "\u6548\u80fd\u8003\u91cf": [[144, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[144, "searching-sorted-lists"]], "bz2 --- Support for bzip2 compression": [[146, "bz2-support-for-bzip2-compression"]], "(De)compression of files": [[146, "de-compression-of-files"]], "Incremental (de)compression": [[146, "incremental-de-compression"]], "One-shot (de)compression": [[146, "one-shot-de-compression"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[140, "base64-base16-base32-base64-base85-data-encodings"]], "binascii --- Convert between binary and ASCII": [[143, "binascii-convert-between-binary-and-ascii"]], "contextlib --- Utilities for with-statement contexts": [[165, "contextlib-utilities-for-with-statement-contexts"]], "Utilities": [[165, "utilities"]], "Examples and Recipes": [[165, "examples-and-recipes"], [157, "examples-and-recipes"]], "Supporting a variable number of context managers": [[165, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[165, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[165, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[165, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[165, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[165, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[165, "reentrant-context-managers"]], "Reusable context managers": [[165, "reusable-context-managers"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[169, "crypt-function-to-check-unix-passwords"]], "Hashing Methods": [[169, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[169, "module-attributes"]], "bdb --- Debugger framework": [[141, "bdb-debugger-framework"]], "compileall --- Byte-compile Python libraries": [[159, "compileall-byte-compile-python-libraries"]], "Command-line use": [[159, "command-line-use"]], "Public functions": [[159, "public-functions"]], "Binary Data Services": [[142, "binary-data-services"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[167, "copy-shallow-and-deep-copy-operations"]], "cmd --- Support for line-oriented command interpreters": [[152, "cmd-support-for-line-oriented-command-interpreters"]], "Cmd \u7269\u4ef6": [[152, "cmd-objects"]], "Cmd Example": [[152, "cmd-example"]], "atexit --- Exit handlers": [[137, "atexit-exit-handlers"]], "atexit \u7bc4\u4f8b": [[137, "atexit-example"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[139, "audit-events-table"]], "cmath --- Mathematical functions for complex numbers": [[151, "cmath-mathematical-functions-for-complex-numbers"]], "Conversions to and from polar coordinates": [[151, "conversions-to-and-from-polar-coordinates"]], "Classification functions": [[151, "classification-functions"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[148, "cgi-common-gateway-interface-support"]], "Using the cgi module": [[148, "using-the-cgi-module"]], "Higher Level Interface": [[148, "higher-level-interface"]], "Caring about security": [[148, "caring-about-security"]], "Installing your CGI script on a Unix system": [[148, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[148, "testing-your-cgi-script"]], "Debugging CGI scripts": [[148, "debugging-cgi-scripts"]], "Common problems and solutions": [[148, "common-problems-and-solutions"]], "codecs --- Codec registry and base classes": [[154, "codecs-codec-registry-and-base-classes"]], "Codec Base Classes": [[154, "codec-base-classes"]], "Error Handlers": [[154, "error-handlers"]], "Stateless Encoding and Decoding": [[154, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[154, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[154, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[154, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[154, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[154, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[154, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[154, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[154, "streamrecoder-objects"]], "Encodings and Unicode": [[154, "encodings-and-unicode"]], "Standard Encodings": [[154, "standard-encodings"]], "Python Specific Encodings": [[154, "python-specific-encodings"]], "Text Encodings": [[154, "text-encodings"]], "Binary Transforms": [[154, "binary-transforms"]], "Text Transforms": [[154, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[154, "encodings-idna-internationalized-domain-names-in-applications"]], "encodings.mbcs --- Windows ANSI codepage": [[154, "encodings-mbcs-windows-ansi-codepage"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[154, "encodings-utf-8-sig-utf-8-codec-with-bom-signature"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[149, "cgitb-traceback-manager-for-cgi-scripts"]], "code --- Interpreter base classes": [[153, "code-interpreter-base-classes"]], "Interactive Interpreter Objects": [[153, "interactive-interpreter-objects"]], "Interactive Console Objects": [[153, "interactive-console-objects"]], "contextvars --- Context Variables": [[166, "contextvars-context-variables"]], "Context Variables": [[166, "context-variables"]], "Manual Context Management": [[166, "manual-context-management"]], "asyncio support": [[166, "asyncio-support"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[150, "chunk-read-iff-chunked-data"]], "configparser --- Configuration file parser": [[163, "configparser-configuration-file-parser"]], "Quick Start": [[163, "quick-start"]], "Supported Datatypes": [[163, "supported-datatypes"]], "Fallback Values": [[163, "fallback-values"]], "Supported INI File Structure": [[163, "supported-ini-file-structure"]], "Interpolation of values": [[163, "interpolation-of-values"]], "Mapping Protocol Access": [[163, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[163, "customizing-parser-behaviour"]], "Legacy API Examples": [[163, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[163, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[163, "rawconfigparser-objects"]], "codeop --- Compile Python code": [[155, "codeop-compile-python-code"]], "copyreg --- Register pickle support functions": [[168, "copyreg-register-pickle-support-functions"]], "calendar --- General calendar-related functions": [[147, "calendar-general-calendar-related-functions"]], "\u5167\u5efa\u5e38\u6578": [[164, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[164, "constants-added-by-the-site-module"]], "collections.abc --- Abstract Base Classes for Containers": [[157, "collections-abc-abstract-base-classes-for-containers"]], "Collections Abstract Base Classes": [[157, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[157, "collections-abstract-base-classes-detailed-descriptions"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[158, "colorsys-conversions-between-color-systems"]], "concurrent \u5957\u4ef6": [[161, "the-concurrent-package"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[160, "concurrent-execution"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[156, "collections-container-datatypes"]], "ChainMap \u7269\u4ef6": [[156, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[156, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[156, "counter-objects"]], "deque \u7269\u4ef6": [[156, "deque-objects"]], "deque \u7528\u6cd5": [[156, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[156, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[156, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[156, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[156, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[156, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[156, "userdict-objects"]], "UserList \u7269\u4ef6": [[156, "userlist-objects"]], "UserString \u7269\u4ef6": [[156, "userstring-objects"]], "Coroutines and Tasks": [[136, "coroutines-and-tasks"]], "Awaitables": [[136, "awaitables"]], "Creating Tasks": [[136, "creating-tasks"]], "Task Cancellation": [[136, "task-cancellation"]], "Task Groups": [[136, "task-groups"]], "Sleeping": [[136, "sleeping"]], "Running Tasks Concurrently": [[136, "running-tasks-concurrently"]], "Eager Task Factory": [[136, "eager-task-factory"]], "Shielding From Cancellation": [[136, "shielding-from-cancellation"]], "Timeouts": [[136, "timeouts"]], "Waiting Primitives": [[136, "waiting-primitives"]], "Running in Threads": [[136, "running-in-threads"]], "Scheduling From Other Threads": [[136, "scheduling-from-other-threads"]], "Introspection": [[136, "introspection"]], "Task Object": [[136, "task-object"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[145, "builtins-built-in-objects"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c macro)": [[3, "c.PyObject_New"]], "pyobject_newvar (c macro)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "py_version (c var)": [[4, "c.Py_Version"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "pybool_type (c var)": [[6, "c.PyBool_Type"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(\u8acb\u898b\u7de9\u885d\u5354\u5b9a)": [[7, "index-0"]], "c-contiguous\uff08c \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "index-10"]], "fortran contiguous\uff08fortran \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_max_ndim (c macro)": [[7, "c.PyBUF_MAX_NDIM"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs": [[7, "index-1"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_copydata (c function)": [[7, "c.PyObject_CopyData"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface\uff08\u7de9\u885d\u4ecb\u9762\uff09": [[7, "index-0"]], "buffer object\uff08\u7de9\u885d\u7269\u4ef6\uff09": [[7, "index-0"]], "buffer protocol\uff08\u7de9\u885d\u5354\u5b9a\uff09": [[7, "index-0"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "term-contiguous"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray\uff08\u4f4d\u5143\u7d44\u9663\u5217\uff09": [[8, "index-0"], [340, "index-23"], [340, "index-40"], [340, "index-42"], [340, "index-43"], [340, "index-45"], [423, "index-24"]], "object\uff08\u7269\u4ef6\uff09": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [13, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [27, "index-0"], [34, "index-3"], [37, "index-0"], [38, "index-0"], [42, "index-0"], [43, "index-0"], [43, "index-1"], [45, "index-0"], [54, "index-0"], [59, "index-0"], [60, "index-0"], [74, "index-0"], [86, "term-object"], [221, "index-12"], [270, "index-1"], [333, "index-0"], [340, "index-11"], [340, "index-19"], [340, "index-22"], [340, "index-23"], [340, "index-25"], [340, "index-26"], [340, "index-27"], [340, "index-28"], [340, "index-29"], [340, "index-40"], [340, "index-41"], [340, "index-42"], [340, "index-51"], [340, "index-52"], [340, "index-56"], [340, "index-59"], [340, "index-61"], [340, "index-62"], [340, "index-8"], [348, "index-8"], [376, "index-0"], [422, "index-11"], [422, "index-28"], [422, "index-40"], [422, "index-6"], [423, "index-0"], [423, "index-10"], [423, "index-11"], [423, "index-13"], [423, "index-14"], [423, "index-15"], [423, "index-17"], [423, "index-20"], [423, "index-22"], [423, "index-23"], [423, "index-26"], [423, "index-27"], [423, "index-28"], [423, "index-29"], [423, "index-30"], [423, "index-32"], [423, "index-33"], [423, "index-35"], [423, "index-40"], [423, "index-41"], [423, "index-42"], [423, "index-45"], [423, "index-49"], [423, "index-51"], [423, "index-55"], [423, "index-57"], [423, "index-6"], [423, "index-60"], [423, "index-63"], [423, "index-7"], [423, "index-77"], [423, "index-8"], [423, "index-9"], [423, "index-96"], [425, "index-15"], [425, "index-16"], [425, "index-17"], [425, "index-20"], [425, "index-22"], [425, "index-31"], [425, "index-35"], [425, "index-40"], [425, "index-42"], [425, "index-45"], [425, "index-47"], [425, "index-52"], [425, "index-53"], [425, "index-54"], [425, "index-55"], [425, "index-7"], [425, "index-80"], [425, "index-92"], [431, "index-10"], [431, "index-11"], [431, "index-28"], [431, "index-3"], [431, "index-4"], [431, "index-9"], [435, "index-0"], [441, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes\uff08\u4f4d\u5143\u7d44\uff09": [[9, "index-0"], [48, "index-3"], [340, "index-31"], [340, "index-40"], [340, "index-41"], [340, "index-43"], [340, "index-45"], [423, "index-21"], [423, "index-74"]], "pep 590": [[10, "index-2"], [467, "index-113"], [468, "index-121"], [476, "index-35"], [477, "index-18"], [477, "index-8"], [478, "index-103"], [478, "index-104"], [478, "index-137"], [478, "index-138"], [478, "index-164"], [478, "index-171"], [478, "index-180"], [478, "index-181"], [478, "index-183"], [478, "index-210"], [478, "index-34"], [478, "index-66"], [478, "index-76"], [478, "index-82"], [478, "index-88"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [26, "index-0"], [30, "index-3"], [32, "index-39"], [32, "index-40"], [32, "index-41"], [32, "index-47"], [32, "index-49"], [32, "index-66"], [32, "index-67"], [33, "index-0"], [33, "index-17"], [33, "index-33"], [33, "index-34"], [33, "index-37"], [33, "index-38"], [33, "index-7"], [34, "index-37"], [34, "index-38"], [34, "index-39"], [34, "index-40"], [44, "index-10"], [44, "index-7"], [44, "index-8"], [48, "index-4"], [48, "index-5"], [56, "index-3"], [58, "index-0"], [62, "index-3"], [62, "index-4"], [62, "index-5"], [63, "index-0"], [63, "index-1"], [63, "index-2"], [63, "index-3"], [63, "index-4"], [63, "index-5"], [65, "index-3"], [67, "index-23"], [70, "index-1"], [72, "index-0"], [74, "index-2"], [77, "index-2"], [79, "index-6"], [79, "index-7"], [79, "index-8"], [84, "index-0"], [84, "index-2"], [84, "index-3"], [85, "index-2"], [86, "index-100"], [86, "index-101"], [86, "index-102"], [86, "index-103"], [86, "index-104"], [86, "index-105"], [86, "index-106"], [86, "index-107"], [86, "index-108"], [86, "index-109"], [86, "index-110"], [86, "index-111"], [86, "index-112"], [86, "index-77"], [86, "index-78"], [86, "index-79"], [86, "index-80"], [86, "index-81"], [86, "index-82"], [86, "index-83"], [86, "index-84"], [86, "index-85"], [86, "index-86"], [86, "index-87"], [86, "index-88"], [86, "index-89"], [86, "index-90"], [86, "index-91"], [86, "index-92"], [86, "index-93"], [86, "index-94"], [86, "index-95"], [86, "index-96"], [86, "index-97"], [86, "index-98"], [86, "index-99"], [87, "index-0"], [89, "index-0"], [89, "index-1"], [89, "index-2"], [89, "index-5"], [94, "index-0"], [94, "index-2"], [94, "index-4"], [106, "index-0"], [109, "index-0"], [109, "index-1"], [110, "index-22"], [110, "index-23"], [110, "index-24"], [110, "index-25"], [110, "index-26"], [110, "index-27"], [110, "index-28"], [110, "index-29"], [110, "index-30"], [110, "index-31"], [110, "index-32"], [113, "index-4"], [113, "index-5"], [114, "index-4"], [119, "index-2"], [119, "index-3"], [119, "index-4"], [119, "index-5"], [119, "index-6"], [119, "index-7"], [123, "index-0"], [123, "index-1"], [123, "index-2"], [126, "index-2"], [138, "index-3"], [139, "index-3"], [148, "index-8"], [149, "index-4"], [150, "index-3"], [151, "index-0"], [154, "index-2"], [154, "index-5"], [156, "index-10"], [156, "index-11"], [156, "index-8"], [156, "index-9"], [157, "index-0"], [157, "index-1"], [157, "index-2"], [157, "index-3"], [157, "index-4"], [157, "index-7"], [159, "index-0"], [159, "index-2"], [159, "index-3"], [162, "index-2"], [165, "index-2"], [166, "index-2"], [169, "index-1"], [171, "index-7"], [177, "index-0"], [177, "index-1"], [177, "index-2"], [187, "index-0"], [206, "index-0"], [209, "index-10"], [209, "index-11"], [209, "index-2"], [209, "index-5"], [209, "index-6"], [209, "index-7"], [209, "index-8"], [209, "index-9"], [217, "index-0"], [221, "index-10"], [221, "index-14"], [221, "index-15"], [221, "index-18"], [222, "index-0"], [223, "index-2"], [243, "index-7"], [245, "index-2"], [246, "index-0"], [246, "index-1"], [246, "index-10"], [246, "index-11"], [246, "index-12"], [246, "index-13"], [246, "index-14"], [246, "index-16"], [246, "index-17"], [246, "index-18"], [246, "index-19"], [246, "index-2"], [246, "index-20"], [246, "index-21"], [246, "index-22"], [246, "index-23"], [246, "index-24"], [246, "index-25"], [246, "index-26"], [246, "index-3"], [246, "index-4"], [246, "index-5"], [246, "index-6"], [246, "index-7"], [246, "index-8"], [246, "index-9"], [247, "index-0"], [251, "index-0"], [251, "index-1"], [251, "index-2"], [251, "index-3"], [254, "index-1"], [254, "index-7"], [261, "index-1"], [263, "index-1"], [268, "index-0"], [271, "index-0"], [277, "index-3"], [283, "index-2"], [284, "index-12"], [285, "index-2"], [289, "index-22"], [289, "index-24"], [289, "index-25"], [289, "index-27"], [289, "index-44"], [289, "index-5"], [289, "index-53"], [289, "index-55"], [289, "index-6"], [289, "index-7"], [291, "index-4"], [292, "index-1"], [295, "index-2"], [295, "index-3"], [295, "index-4"], [295, "index-8"], [297, "index-2"], [298, "index-0"], [298, "index-10"], [298, "index-11"], [298, "index-2"], [298, "index-3"], [298, "index-5"], [298, "index-6"], [298, "index-7"], [307, "index-1"], [307, "index-2"], [307, "index-4"], [307, "index-5"], [318, "index-0"], [320, "index-1"], [320, "index-2"], [320, "index-3"], [320, "index-5"], [320, "index-6"], [320, "index-7"], [320, "index-8"], [322, "index-0"], [324, "index-0"], [324, "index-3"], [324, "index-4"], [324, "index-5"], [324, "index-6"], [324, "index-7"], [325, "index-0"], [328, "index-2"], [329, "index-0"], [329, "index-1"], [330, "index-11"], [332, "index-3"], [333, "index-1"], [333, "index-10"], [333, "index-11"], [333, "index-12"], [333, "index-13"], [333, "index-2"], [333, "index-4"], [333, "index-5"], [333, "index-7"], [333, "index-8"], [333, "index-9"], [335, "index-2"], [336, "index-0"], [336, "index-1"], [336, "index-10"], [336, "index-11"], [336, "index-12"], [336, "index-2"], [336, "index-3"], [336, "index-4"], [336, "index-5"], [336, "index-8"], [336, "index-9"], [337, "index-2"], [340, "index-49"], [340, "index-50"], [340, "index-57"], [340, "index-58"], [340, "index-60"], [340, "index-71"], [340, "index-72"], [341, "index-0"], [341, "index-1"], [341, "index-12"], [341, "index-17"], [341, "index-18"], [341, "index-19"], [344, "index-0"], [345, "index-2"], [348, "index-0"], [348, "index-13"], [348, "index-14"], [348, "index-15"], [348, "index-16"], [348, "index-19"], [348, "index-20"], [348, "index-25"], [348, "index-26"], [348, "index-30"], [348, "index-31"], [348, "index-32"], [348, "index-42"], [348, "index-43"], [348, "index-44"], [348, "index-9"], [353, "index-0"], [354, "index-5"], [357, "index-3"], [357, "index-4"], [361, "index-8"], [373, "index-0"], [373, "index-1"], [380, "index-0"], [380, "index-1"], [380, "index-2"], [380, "index-3"], [380, "index-5"], [380, "index-6"], [381, "index-0"], [381, "index-1"], [381, "index-10"], [381, "index-100"], [381, "index-109"], [381, "index-11"], [381, "index-110"], [381, "index-111"], [381, "index-112"], [381, "index-113"], [381, "index-114"], [381, "index-115"], [381, "index-116"], [381, "index-12"], [381, "index-13"], [381, "index-14"], [381, "index-15"], [381, "index-16"], [381, "index-17"], [381, "index-18"], [381, "index-19"], [381, "index-2"], [381, "index-20"], [381, "index-21"], [381, "index-22"], [381, "index-24"], [381, "index-25"], [381, "index-26"], [381, "index-27"], [381, "index-28"], [381, "index-3"], [381, "index-32"], [381, "index-33"], [381, "index-34"], [381, "index-35"], [381, "index-38"], [381, "index-39"], [381, "index-4"], [381, "index-40"], [381, "index-41"], [381, "index-42"], [381, "index-43"], [381, "index-44"], [381, "index-45"], [381, "index-46"], [381, "index-47"], [381, "index-48"], [381, "index-49"], [381, "index-5"], [381, "index-50"], [381, "index-51"], [381, "index-52"], [381, "index-54"], [381, "index-55"], [381, "index-56"], [381, "index-57"], [381, "index-59"], [381, "index-6"], [381, "index-60"], [381, "index-61"], [381, "index-62"], [381, "index-63"], [381, "index-64"], [381, "index-65"], [381, "index-66"], [381, "index-67"], [381, "index-68"], [381, "index-69"], [381, "index-7"], [381, "index-70"], [381, "index-71"], [381, "index-72"], [381, "index-73"], [381, "index-74"], [381, "index-75"], [381, "index-76"], [381, "index-77"], [381, "index-78"], [381, "index-79"], [381, "index-8"], [381, "index-80"], [381, "index-81"], [381, "index-82"], [381, "index-83"], [381, "index-84"], [381, "index-85"], [381, "index-86"], [381, "index-87"], [381, "index-88"], [381, "index-89"], [381, "index-9"], [381, "index-90"], [381, "index-91"], [381, "index-92"], [381, "index-93"], [381, "index-94"], [381, "index-95"], [381, "index-96"], [381, "index-97"], [381, "index-98"], [381, "index-99"], [392, "index-3"], [394, "index-6"], [397, "index-1"], [397, "index-2"], [397, "index-4"], [402, "index-0"], [402, "index-1"], [402, "index-11"], [402, "index-12"], [402, "index-13"], [402, "index-14"], [402, "index-15"], [402, "index-16"], [402, "index-17"], [402, "index-18"], [402, "index-2"], [402, "index-3"], [402, "index-4"], [402, "index-6"], [402, "index-7"], [402, "index-8"], [402, "index-9"], [403, "index-7"], [418, "index-0"], [418, "index-1"], [418, "index-2"], [420, "index-0"], [420, "index-1"], [422, "index-17"], [422, "index-19"], [422, "index-20"], [422, "index-24"], [422, "index-25"], [422, "index-26"], [422, "index-30"], [422, "index-33"], [422, "index-36"], [422, "index-37"], [422, "index-38"], [422, "index-39"], [422, "index-42"], [422, "index-43"], [422, "index-44"], [422, "index-45"], [422, "index-50"], [423, "index-104"], [423, "index-105"], [423, "index-106"], [423, "index-108"], [423, "index-112"], [423, "index-82"], [423, "index-84"], [423, "index-87"], [423, "index-90"], [423, "index-91"], [423, "index-92"], [423, "index-93"], [424, "index-11"], [424, "index-12"], [425, "index-14"], [425, "index-19"], [425, "index-21"], [425, "index-26"], [425, "index-27"], [425, "index-28"], [425, "index-29"], [425, "index-30"], [425, "index-51"], [425, "index-79"], [425, "index-87"], [425, "index-89"], [425, "index-94"], [426, "index-0"], [427, "index-1"], [427, "index-11"], [427, "index-12"], [427, "index-13"], [427, "index-14"], [427, "index-15"], [427, "index-18"], [427, "index-19"], [427, "index-2"], [427, "index-20"], [427, "index-21"], [427, "index-22"], [427, "index-23"], [427, "index-24"], [427, "index-25"], [427, "index-26"], [427, "index-6"], [430, "index-1"], [430, "index-11"], [430, "index-12"], [430, "index-21"], [430, "index-26"], [431, "index-13"], [431, "index-16"], [431, "index-17"], [431, "index-41"], [431, "index-42"], [431, "index-46"], [431, "index-48"], [436, "index-15"], [436, "index-16"], [436, "index-17"], [436, "index-18"], [445, "index-16"], [450, "index-1"], [450, "index-11"], [450, "index-13"], [450, "index-14"], [450, "index-15"], [450, "index-19"], [450, "index-41"], [450, "index-42"], [450, "index-54"], [450, "index-55"], [451, "index-0"], [451, "index-1"], [451, "index-33"], [452, "index-0"], [456, "index-0"], [456, "index-16"], [456, "index-17"], [456, "index-19"], [456, "index-21"], [456, "index-38"], [457, "index-0"], [457, "index-1"], [457, "index-2"], [457, "index-3"], [458, "index-0"], [458, "index-1"], [458, "index-10"], [458, "index-12"], [458, "index-13"], [458, "index-14"], [458, "index-15"], [458, "index-16"], [458, "index-17"], [458, "index-2"], [458, "index-3"], [458, "index-4"], [458, "index-5"], [458, "index-6"], [458, "index-7"], [458, "index-8"], [458, "index-9"], [459, "index-0"], [459, "index-1"], [459, "index-10"], [459, "index-11"], [459, "index-12"], [459, "index-13"], [459, "index-14"], [459, "index-15"], [459, "index-16"], [459, "index-2"], [459, "index-22"], [459, "index-3"], [459, "index-4"], [459, "index-5"], [459, "index-6"], [459, "index-7"], [459, "index-8"], [459, "index-9"], [460, "index-0"], [460, "index-1"], [460, "index-10"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-15"], [460, "index-16"], [460, "index-17"], [460, "index-18"], [460, "index-19"], [460, "index-2"], [460, "index-20"], [460, "index-21"], [460, "index-22"], [460, "index-23"], [460, "index-3"], [460, "index-4"], [460, "index-5"], [460, "index-6"], [460, "index-7"], [460, "index-9"], [461, "index-0"], [461, "index-1"], [461, "index-10"], [461, "index-11"], [461, "index-12"], [461, "index-13"], [461, "index-14"], [461, "index-15"], [461, "index-16"], [461, "index-17"], [461, "index-2"], [461, "index-3"], [461, "index-4"], [461, "index-5"], [461, "index-6"], [461, "index-8"], [461, "index-9"], [462, "index-0"], [462, "index-1"], [462, "index-10"], [462, "index-11"], [462, "index-12"], [462, "index-13"], [462, "index-14"], [462, "index-15"], [462, "index-16"], [462, "index-17"], [462, "index-18"], [462, "index-19"], [462, "index-2"], [462, "index-21"], [462, "index-24"], [462, "index-25"], [462, "index-26"], [462, "index-27"], [462, "index-28"], [462, "index-29"], [462, "index-3"], [462, "index-30"], [462, "index-31"], [462, "index-4"], [462, "index-5"], [462, "index-6"], [462, "index-7"], [462, "index-8"], [462, "index-9"], [463, "index-0"], [463, "index-1"], [463, "index-10"], [463, "index-11"], [463, "index-12"], [463, "index-14"], [463, "index-15"], [463, "index-16"], [463, "index-17"], [463, "index-18"], [463, "index-19"], [463, "index-2"], [463, "index-25"], [463, "index-3"], [463, "index-7"], [463, "index-8"], [463, "index-9"], [464, "index-0"], [464, "index-16"], [464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-2"], [464, "index-20"], [464, "index-21"], [464, "index-22"], [464, "index-23"], [464, "index-24"], [464, "index-25"], [464, "index-26"], [464, "index-3"], [464, "index-4"], [464, "index-5"], [464, "index-6"], [464, "index-7"], [465, "index-0"], [465, "index-1"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-13"], [465, "index-14"], [465, "index-15"], [465, "index-16"], [465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-20"], [465, "index-21"], [465, "index-22"], [465, "index-23"], [465, "index-24"], [465, "index-25"], [465, "index-26"], [465, "index-27"], [465, "index-28"], [465, "index-29"], [465, "index-3"], [465, "index-30"], [465, "index-31"], [465, "index-32"], [465, "index-33"], [465, "index-34"], [465, "index-35"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-7"], [465, "index-8"], [465, "index-9"], [466, "index-0"], [466, "index-1"], [466, "index-2"], [466, "index-3"], [467, "index-100"], [467, "index-101"], [467, "index-102"], [467, "index-103"], [467, "index-104"], [467, "index-105"], [467, "index-106"], [467, "index-107"], [467, "index-108"], [467, "index-109"], [467, "index-110"], [467, "index-111"], [467, "index-112"], [467, "index-113"], [467, "index-115"], [467, "index-116"], [467, "index-117"], [467, "index-118"], [467, "index-119"], [467, "index-80"], [467, "index-81"], [467, "index-82"], [467, "index-83"], [467, "index-84"], [467, "index-85"], [467, "index-86"], [467, "index-87"], [467, "index-88"], [467, "index-89"], [467, "index-90"], [467, "index-91"], [467, "index-92"], [467, "index-93"], [467, "index-94"], [467, "index-95"], [467, "index-96"], [467, "index-97"], [467, "index-99"], [468, "index-100"], [468, "index-101"], [468, "index-102"], [468, "index-103"], [468, "index-105"], [468, "index-106"], [468, "index-107"], [468, "index-108"], [468, "index-109"], [468, "index-110"], [468, "index-111"], [468, "index-112"], [468, "index-113"], [468, "index-114"], [468, "index-115"], [468, "index-117"], [468, "index-118"], [468, "index-119"], [468, "index-120"], [468, "index-121"], [468, "index-122"], [468, "index-123"], [468, "index-83"], [468, "index-85"], [468, "index-86"], [468, "index-87"], [468, "index-88"], [468, "index-90"], [468, "index-91"], [468, "index-92"], [468, "index-93"], [468, "index-94"], [468, "index-95"], [468, "index-96"], [468, "index-97"], [468, "index-98"], [468, "index-99"], [469, "index-0"], [469, "index-1"], [469, "index-10"], [469, "index-11"], [469, "index-12"], [469, "index-13"], [469, "index-14"], [469, "index-15"], [469, "index-18"], [469, "index-19"], [469, "index-2"], [469, "index-20"], [469, "index-21"], [469, "index-22"], [469, "index-23"], [469, "index-24"], [469, "index-25"], [469, "index-26"], [469, "index-27"], [469, "index-28"], [469, "index-29"], [469, "index-3"], [469, "index-30"], [469, "index-31"], [469, "index-32"], [469, "index-33"], [469, "index-34"], [469, "index-35"], [469, "index-36"], [469, "index-37"], [469, "index-38"], [469, "index-39"], [469, "index-4"], [469, "index-40"], [469, "index-41"], [469, "index-42"], [469, "index-43"], [469, "index-46"], [469, "index-47"], [469, "index-5"], [469, "index-7"], [469, "index-8"], [469, "index-9"], [470, "index-0"], [470, "index-1"], [470, "index-14"], [470, "index-2"], [470, "index-3"], [470, "index-4"], [470, "index-5"], [470, "index-6"], [470, "index-9"], [471, "index-0"], [471, "index-1"], [471, "index-10"], [471, "index-12"], [471, "index-13"], [471, "index-14"], [471, "index-15"], [471, "index-16"], [471, "index-17"], [471, "index-18"], [471, "index-19"], [471, "index-2"], [471, "index-20"], [471, "index-21"], [471, "index-22"], [471, "index-28"], [471, "index-29"], [471, "index-3"], [471, "index-30"], [471, "index-31"], [471, "index-32"], [471, "index-33"], [471, "index-34"], [471, "index-36"], [471, "index-37"], [471, "index-38"], [471, "index-4"], [471, "index-41"], [471, "index-42"], [471, "index-6"], [471, "index-7"], [471, "index-8"], [471, "index-9"], [472, "index-0"], [472, "index-1"], [472, "index-10"], [472, "index-11"], [472, "index-12"], [472, "index-13"], [472, "index-14"], [472, "index-15"], [472, "index-16"], [472, "index-17"], [472, "index-18"], [472, "index-19"], [472, "index-2"], [472, "index-20"], [472, "index-21"], [472, "index-22"], [472, "index-23"], [472, "index-24"], [472, "index-25"], [472, "index-26"], [472, "index-27"], [472, "index-28"], [472, "index-29"], [472, "index-3"], [472, "index-30"], [472, "index-31"], [472, "index-32"], [472, "index-33"], [472, "index-34"], [472, "index-35"], [472, "index-36"], [472, "index-37"], [472, "index-38"], [472, "index-39"], [472, "index-4"], [472, "index-42"], [472, "index-43"], [472, "index-44"], [472, "index-45"], [472, "index-46"], [472, "index-47"], [472, "index-48"], [472, "index-49"], [472, "index-5"], [472, "index-52"], [472, "index-53"], [472, "index-6"], [472, "index-7"], [472, "index-8"], [472, "index-9"], [473, "index-0"], [473, "index-1"], [473, "index-10"], [473, "index-11"], [473, "index-12"], [473, "index-13"], [473, "index-14"], [473, "index-15"], [473, "index-16"], [473, "index-17"], [473, "index-18"], [473, "index-19"], [473, "index-2"], [473, "index-20"], [473, "index-21"], [473, "index-22"], [473, "index-23"], [473, "index-24"], [473, "index-25"], [473, "index-26"], [473, "index-27"], [473, "index-28"], [473, "index-29"], [473, "index-3"], [473, "index-30"], [473, "index-4"], [473, "index-45"], [473, "index-46"], [473, "index-47"], [473, "index-48"], [473, "index-49"], [473, "index-5"], [473, "index-50"], [473, "index-52"], [473, "index-6"], [473, "index-7"], [473, "index-8"], [473, "index-9"], [474, "index-0"], [474, "index-1"], [474, "index-10"], [474, "index-11"], [474, "index-12"], [474, "index-13"], [474, "index-14"], [474, "index-15"], [474, "index-16"], [474, "index-17"], [474, "index-18"], [474, "index-20"], [474, "index-22"], [474, "index-23"], [474, "index-24"], [474, "index-25"], [474, "index-26"], [474, "index-28"], [474, "index-29"], [474, "index-3"], [474, "index-30"], [474, "index-31"], [474, "index-32"], [474, "index-33"], [474, "index-34"], [474, "index-35"], [474, "index-36"], [474, "index-37"], [474, "index-4"], [474, "index-5"], [474, "index-6"], [474, "index-7"], [474, "index-8"], [474, "index-9"], [475, "index-0"], [475, "index-1"], [475, "index-10"], [475, "index-11"], [475, "index-13"], [475, "index-14"], [475, "index-15"], [475, "index-16"], [475, "index-17"], [475, "index-18"], [475, "index-19"], [475, "index-2"], [475, "index-20"], [475, "index-21"], [475, "index-22"], [475, "index-23"], [475, "index-24"], [475, "index-28"], [475, "index-29"], [475, "index-3"], [475, "index-30"], [475, "index-32"], [475, "index-33"], [475, "index-37"], [475, "index-38"], [475, "index-40"], [475, "index-5"], [475, "index-6"], [475, "index-7"], [475, "index-9"], [476, "index-10"], [476, "index-11"], [476, "index-12"], [476, "index-15"], [476, "index-16"], [476, "index-17"], [476, "index-18"], [476, "index-19"], [476, "index-23"], [476, "index-24"], [476, "index-31"], [476, "index-32"], [476, "index-33"], [476, "index-34"], [476, "index-35"], [476, "index-36"], [476, "index-5"], [476, "index-8"], [477, "index-0"], [477, "index-1"], [477, "index-10"], [477, "index-11"], [477, "index-12"], [477, "index-13"], [477, "index-14"], [477, "index-15"], [477, "index-16"], [477, "index-17"], [477, "index-18"], [477, "index-19"], [477, "index-2"], [477, "index-20"], [477, "index-23"], [477, "index-24"], [477, "index-25"], [477, "index-26"], [477, "index-27"], [477, "index-3"], [477, "index-4"], [477, "index-5"], [477, "index-6"], [477, "index-7"], [477, "index-8"], [477, "index-9"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-100"], [478, "index-101"], [478, "index-102"], [478, "index-103"], [478, "index-104"], [478, "index-105"], [478, "index-107"], [478, "index-108"], [478, "index-109"], [478, "index-11"], [478, "index-110"], [478, "index-111"], [478, "index-112"], [478, "index-113"], [478, "index-114"], [478, "index-115"], [478, "index-116"], [478, "index-117"], [478, "index-118"], [478, "index-119"], [478, "index-12"], [478, "index-120"], [478, "index-121"], [478, "index-122"], [478, "index-123"], [478, "index-124"], [478, "index-125"], [478, "index-126"], [478, "index-127"], [478, "index-128"], [478, "index-129"], [478, "index-13"], [478, "index-130"], [478, "index-131"], [478, "index-132"], [478, "index-133"], [478, "index-134"], [478, "index-135"], [478, "index-137"], [478, "index-138"], [478, "index-139"], [478, "index-14"], [478, "index-140"], [478, "index-141"], [478, "index-142"], [478, "index-143"], [478, "index-144"], [478, "index-145"], [478, "index-146"], [478, "index-147"], [478, "index-148"], [478, "index-149"], [478, "index-15"], [478, "index-150"], [478, "index-151"], [478, "index-153"], [478, "index-154"], [478, "index-155"], [478, "index-156"], [478, "index-157"], [478, "index-158"], [478, "index-159"], [478, "index-16"], [478, "index-160"], [478, "index-161"], [478, "index-162"], [478, "index-163"], [478, "index-164"], [478, "index-165"], [478, "index-166"], [478, "index-167"], [478, "index-168"], [478, "index-169"], [478, "index-17"], [478, "index-170"], [478, "index-171"], [478, "index-172"], [478, "index-173"], [478, "index-174"], [478, "index-175"], [478, "index-177"], [478, "index-178"], [478, "index-179"], [478, "index-18"], [478, "index-180"], [478, "index-181"], [478, "index-182"], [478, "index-183"], [478, "index-184"], [478, "index-185"], [478, "index-186"], [478, "index-187"], [478, "index-188"], [478, "index-189"], [478, "index-19"], [478, "index-190"], [478, "index-192"], [478, "index-193"], [478, "index-194"], [478, "index-195"], [478, "index-196"], [478, "index-197"], [478, "index-198"], [478, "index-2"], [478, "index-20"], [478, "index-202"], [478, "index-204"], [478, "index-205"], [478, "index-206"], [478, "index-208"], [478, "index-209"], [478, "index-21"], [478, "index-210"], [478, "index-213"], [478, "index-215"], [478, "index-219"], [478, "index-22"], [478, "index-220"], [478, "index-221"], [478, "index-222"], [478, "index-223"], [478, "index-226"], [478, "index-227"], [478, "index-228"], [478, "index-23"], [478, "index-231"], [478, "index-232"], [478, "index-233"], [478, "index-236"], [478, "index-237"], [478, "index-238"], [478, "index-239"], [478, "index-24"], [478, "index-240"], [478, "index-241"], [478, "index-242"], [478, "index-244"], [478, "index-245"], [478, "index-246"], [478, "index-247"], [478, "index-248"], [478, "index-249"], [478, "index-25"], [478, "index-250"], [478, "index-251"], [478, "index-252"], [478, "index-253"], [478, "index-256"], [478, "index-257"], [478, "index-258"], [478, "index-259"], [478, "index-26"], [478, "index-260"], [478, "index-261"], [478, "index-262"], [478, "index-263"], [478, "index-264"], [478, "index-265"], [478, "index-266"], [478, "index-267"], [478, "index-268"], [478, "index-269"], [478, "index-27"], [478, "index-270"], [478, "index-271"], [478, "index-272"], [478, "index-273"], [478, "index-274"], [478, "index-275"], [478, "index-276"], [478, "index-277"], [478, "index-278"], [478, "index-279"], [478, "index-28"], [478, "index-280"], [478, "index-281"], [478, "index-282"], [478, "index-283"], [478, "index-286"], [478, "index-287"], [478, "index-288"], [478, "index-289"], [478, "index-29"], [478, "index-290"], [478, "index-291"], [478, "index-292"], [478, "index-293"], [478, "index-294"], [478, "index-295"], [478, "index-296"], [478, "index-297"], [478, "index-298"], [478, "index-299"], [478, "index-3"], [478, "index-30"], [478, "index-300"], [478, "index-301"], [478, "index-302"], [478, "index-303"], [478, "index-34"], [478, "index-35"], [478, "index-36"], [478, "index-37"], [478, "index-39"], [478, "index-4"], [478, "index-40"], [478, "index-43"], [478, "index-44"], [478, "index-45"], [478, "index-46"], [478, "index-47"], [478, "index-5"], [478, "index-50"], [478, "index-51"], [478, "index-54"], [478, "index-55"], [478, "index-56"], [478, "index-57"], [478, "index-58"], [478, "index-59"], [478, "index-6"], [478, "index-60"], [478, "index-61"], [478, "index-63"], [478, "index-64"], [478, "index-65"], [478, "index-66"], [478, "index-67"], [478, "index-68"], [478, "index-69"], [478, "index-7"], [478, "index-70"], [478, "index-71"], [478, "index-72"], [478, "index-73"], [478, "index-75"], [478, "index-76"], [478, "index-78"], [478, "index-79"], [478, "index-8"], [478, "index-80"], [478, "index-81"], [478, "index-82"], [478, "index-84"], [478, "index-87"], [478, "index-88"], [478, "index-89"], [478, "index-9"], [478, "index-91"], [478, "index-94"], [478, "index-95"], [478, "index-96"], [478, "index-97"], [478, "index-98"], [478, "index-99"], [479, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeevent (c type)": [[13, "c.PyCodeEvent"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addwatcher (c function)": [[13, "c.PyCode_AddWatcher"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_addr2location (c function)": [[13, "c.PyCode_Addr2Location"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_clearwatcher (c function)": [[13, "c.PyCode_ClearWatcher"]], "pycode_getcellvars (c function)": [[13, "c.PyCode_GetCellvars"]], "pycode_getcode (c function)": [[13, "c.PyCode_GetCode"]], "pycode_getfreevars (c function)": [[13, "c.PyCode_GetFreevars"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_getvarnames (c function)": [[13, "c.PyCode_GetVarnames"]], "pycode_new": [[13, "index-1"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs": [[13, "index-2"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "pycode_watchcallback (c type)": [[13, "c.PyCode_WatchCallback"]], "pyunstable_code_getextra (c function)": [[13, "c.PyUnstable_Code_GetExtra"]], "pyunstable_code_new (c function)": [[13, "c.PyUnstable_Code_New"]], "pyunstable_code_newwithposonlyargs (c function)": [[13, "c.PyUnstable_Code_NewWithPosOnlyArgs"]], "pyunstable_code_setextra (c function)": [[13, "c.PyUnstable_Code_SetExtra"]], "pyunstable_eval_requestcodeextraindex (c function)": [[13, "c.PyUnstable_Eval_RequestCodeExtraIndex"]], "_pycode_getextra": [[13, "index-4"]], "_pycode_setextra": [[13, "index-5"]], "_pyeval_requestcodeextraindex": [[13, "index-3"]], "code object\uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\uff09": [[13, "index-0"], [270, "index-1"], [340, "index-62"], [423, "index-55"]], "code\uff08\u7a0b\u5f0f\u78bc\uff09": [[13, "index-0"], [270, "index-1"], [340, "index-62"], [423, "index-55"], [424, "index-0"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number\uff08\u8907\u6578\uff09": [[15, "index-0"], [86, "term-complex-number"], [340, "index-11"], [340, "index-12"]], "mapping\uff08\u5c0d\u6620\uff09": [[16, "index-2"], [86, "term-mapping"], [340, "index-52"], [423, "index-29"], [423, "index-51"], [425, "index-42"], [431, "index-11"]], "numeric\uff08\u6578\u503c\uff09": [[16, "index-0"], [340, "index-11"], [340, "index-12"], [340, "index-14"], [340, "index-15"], [340, "index-8"], [423, "index-51"], [423, "index-9"]], "sequence\uff08\u5e8f\u5217\uff09": [[16, "index-1"], [86, "term-sequence"], [340, "index-18"], [340, "index-19"], [340, "index-20"], [340, "index-22"], [340, "index-23"], [340, "index-24"], [422, "index-6"], [423, "index-15"], [423, "index-51"], [425, "index-42"], [425, "index-45"], [425, "index-80"], [431, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_addwatcher (c function)": [[22, "c.PyDict_AddWatcher"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_clearwatcher (c function)": [[22, "c.PyDict_ClearWatcher"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_unwatch (c function)": [[22, "c.PyDict_Unwatch"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pydict_watch (c function)": [[22, "c.PyDict_Watch"]], "pydict_watchcallback (c type)": [[22, "c.PyDict_WatchCallback"]], "pydict_watchevent (c type)": [[22, "c.PyDict_WatchEvent"]], "pyunicode_fromstring()": [[22, "index-1"]], "built-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[22, "index-2"], [30, "index-1"], [30, "index-2"], [37, "index-1"], [37, "index-2"], [39, "index-0"], [46, "index-0"], [46, "index-1"], [46, "index-2"], [46, "index-3"], [46, "index-4"], [46, "index-5"], [54, "index-1"], [57, "index-0"], [57, "index-1"], [62, "index-1"], [62, "index-2"], [74, "index-3"], [187, "index-1"], [221, "index-2"], [303, "index-1"], [303, "index-2"], [340, "index-13"], [340, "index-20"], [340, "index-22"], [340, "index-52"], [340, "index-63"], [340, "index-64"], [340, "index-65"], [380, "index-4"], [422, "index-8"], [423, "index-1"], [423, "index-100"], [423, "index-101"], [423, "index-102"], [423, "index-15"], [423, "index-19"], [423, "index-26"], [423, "index-29"], [423, "index-40"], [423, "index-53"], [423, "index-66"], [423, "index-74"], [423, "index-75"], [423, "index-77"], [423, "index-83"], [423, "index-95"], [423, "index-97"], [423, "index-98"], [423, "index-99"], [425, "index-53"], [431, "index-3"], [431, "index-44"], [432, "index-6"], [441, "index-0"], [446, "index-0"]], "dictionary\uff08\u5b57\u5178\uff09": [[22, "index-0"], [86, "term-dictionary"], [340, "index-52"], [423, "index-30"], [423, "index-45"], [423, "index-77"], [425, "index-17"], [425, "index-18"], [425, "index-42"], [431, "index-11"]], "len": [[22, "index-2"], [37, "index-1"], [39, "index-0"], [48, "index-8"], [53, "index-0"], [54, "index-1"], [340, "index-20"], [340, "index-52"], [423, "index-15"], [423, "index-26"], [423, "index-29"], [423, "index-95"]], "keyboardinterrupt\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [209, "index-8"], [318, "index-0"], [324, "index-0"], [333, "index-2"], [471, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"]], "pyerr_displayexception (c function)": [[23, "c.PyErr_DisplayException"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_gethandledexception (c function)": [[23, "c.PyErr_GetHandledException"]], "pyerr_getraisedexception (c function)": [[23, "c.PyErr_GetRaisedException"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_sethandledexception (c function)": [[23, "c.PyErr_SetHandledException"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setraisedexception (c function)": [[23, "c.PyErr_SetRaisedException"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror": [[23, "index-4"]], "pyexc_assertionerror": [[23, "index-4"]], "pyexc_attributeerror": [[23, "index-4"]], "pyexc_baseexception": [[23, "index-4"]], "pyexc_blockingioerror": [[23, "index-4"]], "pyexc_brokenpipeerror": [[23, "index-4"]], "pyexc_buffererror": [[23, "index-4"]], "pyexc_byteswarning": [[23, "index-7"]], "pyexc_childprocesserror": [[23, "index-4"]], "pyexc_connectionabortederror": [[23, "index-4"]], "pyexc_connectionerror": [[23, "index-4"]], "pyexc_connectionrefusederror": [[23, "index-4"]], "pyexc_connectionreseterror": [[23, "index-4"]], "pyexc_deprecationwarning": [[23, "index-7"]], "pyexc_eoferror": [[23, "index-4"]], "pyexc_environmenterror": [[23, "index-6"]], "pyexc_exception": [[23, "index-4"]], "pyexc_fileexistserror": [[23, "index-4"]], "pyexc_filenotfounderror": [[23, "index-4"]], "pyexc_floatingpointerror": [[23, "index-4"]], "pyexc_futurewarning": [[23, "index-7"]], "pyexc_generatorexit": [[23, "index-4"]], "pyexc_ioerror": [[23, "index-6"]], "pyexc_importerror": [[23, "index-4"]], "pyexc_importwarning": [[23, "index-7"]], "pyexc_indentationerror": [[23, "index-4"]], "pyexc_indexerror": [[23, "index-4"]], "pyexc_interruptederror": [[23, "index-4"]], "pyexc_isadirectoryerror": [[23, "index-4"]], "pyexc_keyerror": [[23, "index-4"]], "pyexc_keyboardinterrupt": [[23, "index-4"]], "pyexc_lookuperror": [[23, "index-4"]], "pyexc_memoryerror": [[23, "index-4"]], "pyexc_modulenotfounderror": [[23, "index-4"]], "pyexc_nameerror": [[23, "index-4"]], "pyexc_notadirectoryerror": [[23, "index-4"]], "pyexc_notimplementederror": [[23, "index-4"]], "pyexc_oserror": [[23, "index-4"]], "pyexc_overflowerror": [[23, "index-4"]], "pyexc_pendingdeprecationwarning": [[23, "index-7"]], "pyexc_permissionerror": [[23, "index-4"]], "pyexc_processlookuperror": [[23, "index-4"]], "pyexc_recursionerror": [[23, "index-4"]], "pyexc_referenceerror": [[23, "index-4"]], "pyexc_resourcewarning": [[23, "index-7"]], "pyexc_runtimeerror": [[23, "index-4"]], "pyexc_runtimewarning": [[23, "index-7"]], "pyexc_stopasynciteration": [[23, "index-4"]], "pyexc_stopiteration": [[23, "index-4"]], "pyexc_syntaxerror": [[23, "index-4"]], "pyexc_syntaxwarning": [[23, "index-7"]], "pyexc_systemerror": [[23, "index-4"]], "pyexc_systemexit": [[23, "index-4"]], "pyexc_taberror": [[23, "index-4"]], "pyexc_timeouterror": [[23, "index-4"]], "pyexc_typeerror": [[23, "index-4"]], "pyexc_unboundlocalerror": [[23, "index-4"]], "pyexc_unicodedecodeerror": [[23, "index-4"]], "pyexc_unicodeencodeerror": [[23, "index-4"]], "pyexc_unicodeerror": [[23, "index-4"]], "pyexc_unicodetranslateerror": [[23, "index-4"]], "pyexc_unicodewarning": [[23, "index-7"]], "pyexc_userwarning": [[23, "index-7"]], "pyexc_valueerror": [[23, "index-4"]], "pyexc_warning": [[23, "index-7"]], "pyexc_windowserror": [[23, "index-6"]], "pyexc_zerodivisionerror": [[23, "index-4"]], "pyexception_getargs (c function)": [[23, "c.PyException_GetArgs"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setargs (c function)": [[23, "c.PyException_SetArgs"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "pyunstable_exc_prepreraisestar (c function)": [[23, "c.PyUnstable_Exc_PrepReraiseStar"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint": [[23, "index-1"], [23, "index-2"]], "module\uff08\u6a21\u7d44\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [34, "index-18"], [44, "index-0"], [86, "term-module"], [112, "index-2"], [143, "index-0"], [151, "index-1"], [167, "index-0"], [168, "index-0"], [209, "index-4"], [216, "index-1"], [216, "index-3"], [221, "index-13"], [221, "index-8"], [238, "index-1"], [252, "index-1"], [261, "index-0"], [262, "index-0"], [262, "index-6"], [270, "index-0"], [289, "index-23"], [289, "index-30"], [290, "index-2"], [293, "index-1"], [302, "index-0"], [306, "index-0"], [310, "index-1"], [320, "index-0"], [320, "index-4"], [326, "index-0"], [326, "index-1"], [330, "index-0"], [330, "index-5"], [330, "index-6"], [333, "index-14"], [348, "index-21"], [422, "index-11"], [423, "index-25"], [423, "index-31"], [423, "index-4"], [423, "index-42"], [423, "index-43"], [423, "index-53"], [424, "index-10"], [425, "index-40"], [431, "index-34"], [432, "index-2"], [432, "index-3"], [441, "index-1"], [445, "index-0"], [445, "index-4"], [445, "index-7"]], "signal\uff08\u8a0a\u865f\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [112, "index-2"]], "strerror()": [[23, "index-0"]], "eoferror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw": [[24, "index-2"]], "file\uff08\u6a94\u6848\uff09": [[24, "index-0"], [163, "index-0"], [221, "index-6"], [272, "index-2"], [293, "index-2"], [300, "index-0"], [302, "index-1"], [307, "index-0"], [328, "index-0"], [330, "index-4"], [355, "index-0"], [441, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_pack2 (c function)": [[25, "c.PyFloat_Pack2"]], "pyfloat_pack4 (c function)": [[25, "c.PyFloat_Pack4"]], "pyfloat_pack8 (c function)": [[25, "c.PyFloat_Pack8"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "pyfloat_unpack2 (c function)": [[25, "c.PyFloat_Unpack2"]], "pyfloat_unpack4 (c function)": [[25, "c.PyFloat_Unpack4"]], "pyfloat_unpack8 (c function)": [[25, "c.PyFloat_Unpack8"]], "floating point\uff08\u6d6e\u9ede\uff09": [[25, "index-0"], [423, "index-13"]], "pep 523": [[26, "index-0"], [32, "index-39"], [32, "index-40"], [468, "index-120"], [469, "index-39"], [474, "index-25"], [474, "index-26"], [477, "index-24"], [478, "index-252"], [478, "index-257"], [478, "index-265"], [478, "index-4"]], "pyframeobject (c type)": [[26, "c.PyFrameObject"]], "pyframe_check (c function)": [[26, "c.PyFrame_Check"]], "pyframe_getback (c function)": [[26, "c.PyFrame_GetBack"]], "pyframe_getbuiltins (c function)": [[26, "c.PyFrame_GetBuiltins"]], "pyframe_getcode (c function)": [[26, "c.PyFrame_GetCode"]], "pyframe_getgenerator (c function)": [[26, "c.PyFrame_GetGenerator"]], "pyframe_getglobals (c function)": [[26, "c.PyFrame_GetGlobals"]], "pyframe_getlasti (c function)": [[26, "c.PyFrame_GetLasti"]], "pyframe_getlinenumber (c function)": [[26, "c.PyFrame_GetLineNumber"]], "pyframe_getlocals (c function)": [[26, "c.PyFrame_GetLocals"]], "pyframe_getvar (c function)": [[26, "c.PyFrame_GetVar"]], "pyframe_getvarstring (c function)": [[26, "c.PyFrame_GetVarString"]], "pyframe_type (c var)": [[26, "c.PyFrame_Type"]], "pyunstable_interpreterframe_getcode (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetCode"]], "pyunstable_interpreterframe_getlasti (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLasti"]], "pyunstable_interpreterframe_getline (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLine"]], "_pyinterpreterframe (c struct)": [[26, "c._PyInterpreterFrame"]], "methodtype\uff08types \u6a21\u7d44\u4e2d\uff09": [[27, "index-1"], [43, "index-2"], [44, "index-1"]], "pyfunctionobject (c type)": [[27, "c.PyFunctionObject"]], "pyfunction_addwatcher (c function)": [[27, "c.PyFunction_AddWatcher"]], "pyfunction_check (c function)": [[27, "c.PyFunction_Check"]], "pyfunction_clearwatcher (c function)": [[27, "c.PyFunction_ClearWatcher"]], "pyfunction_getannotations (c function)": [[27, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[27, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[27, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[27, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[27, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[27, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[27, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[27, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[27, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[27, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[27, "c.PyFunction_SetDefaults"]], "pyfunction_setvectorcall (c function)": [[27, "c.PyFunction_SetVectorcall"]], "pyfunction_type (c var)": [[27, "c.PyFunction_Type"]], "pyfunction_watchcallback (c type)": [[27, "c.PyFunction_WatchCallback"]], "pyfunction_watchevent (c type)": [[27, "c.PyFunction_WatchEvent"]], "function\uff08\u51fd\u5f0f\uff09": [[27, "index-0"], [86, "term-function"], [436, "index-6"]], "pygc_collect (c function)": [[28, "c.PyGC_Collect"]], "pygc_disable (c function)": [[28, "c.PyGC_Disable"]], "pygc_enable (c function)": [[28, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[28, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[28, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[28, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[28, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c macro)": [[28, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c macro)": [[28, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c function)": [[28, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[28, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[28, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[28, "c.PyObject_IS_GC"]], "pyunstable_gc_visitobjects (c function)": [[28, "c.PyUnstable_GC_VisitObjects"]], "pyunstable_object_gc_newwithextradata (c function)": [[28, "c.PyUnstable_Object_GC_NewWithExtraData"]], "py_visit (c function)": [[28, "c.Py_VISIT"]], "gcvisitobjects_t (c type)": [[28, "c.gcvisitobjects_t"]], "inquiry (c type)": [[28, "c.inquiry"]], "traverseproc (c type)": [[28, "c.traverseproc"]], "visitproc (c type)": [[28, "c.visitproc"]], "pygenobject (c type)": [[29, "c.PyGenObject"]], "pygen_check (c function)": [[29, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[29, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[29, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[29, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[29, "c.PyGen_Type"]], "pep 3147": [[30, "index-3"], [84, "index-3"], [159, "index-0"], [159, "index-2"], [159, "index-3"], [246, "index-11"], [246, "index-21"], [246, "index-23"], [246, "index-24"], [307, "index-1"], [307, "index-4"], [320, "index-2"], [357, "index-3"], [427, "index-13"], [445, "index-16"], [470, "index-5"], [471, "index-18"]], "pyimport_addmodule (c function)": [[30, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[30, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[30, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[30, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[30, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[30, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[30, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[30, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[30, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[30, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[30, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[30, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[30, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[30, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[30, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[30, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[30, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[30, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[30, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[30, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[30, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[30, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[30, "c.PyImport_ReloadModule"]], "__all__": [[30, "index-0"], [445, "index-8"]], "__all__\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[30, "index-0"]], "__import__": [[30, "index-1"]], "_frozen (c struct)": [[30, "c._frozen"]], "_inittab (c struct)": [[30, "c._inittab"]], "_inittab.name (c member)": [[30, "c._inittab.name"]], "compile\uff08\u7de8\u8b6f\uff09": [[30, "index-2"], [340, "index-63"], [380, "index-4"], [431, "index-44"]], "freeze utility\uff08\u51cd\u7d50\u5de5\u5177\uff09": [[30, "index-4"]], "modules\uff08sys \u6a21\u7d44\u4e2d\uff09": [[30, "index-0"], [32, "index-15"]], "package variable\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[30, "index-0"]], "pep 489": [[32, "index-41"], [44, "index-8"], [70, "index-1"], [72, "index-0"], [246, "index-17"], [246, "index-18"], [246, "index-19"], [246, "index-20"], [246, "index-26"], [246, "index-8"], [473, "index-26"], [473, "index-28"], [473, "index-45"], [478, "index-111"], [478, "index-112"], [478, "index-114"], [478, "index-117"], [478, "index-119"], [478, "index-120"], [478, "index-121"], [478, "index-122"], [478, "index-123"], [478, "index-124"], [478, "index-125"], [478, "index-126"], [478, "index-127"], [478, "index-128"], [478, "index-129"], [478, "index-130"], [478, "index-131"], [478, "index-132"], [478, "index-134"], [478, "index-139"], [478, "index-140"], [478, "index-141"], [478, "index-142"], [478, "index-143"], [478, "index-144"], [478, "index-145"], [478, "index-146"], [478, "index-147"], [478, "index-148"], [478, "index-149"], [478, "index-153"], [478, "index-154"], [478, "index-155"], [478, "index-159"], [478, "index-160"], [478, "index-161"], [478, "index-165"], [478, "index-166"], [478, "index-167"], [478, "index-168"], [478, "index-169"], [478, "index-177"], [478, "index-178"], [478, "index-179"], [478, "index-182"], [478, "index-184"], [478, "index-186"], [478, "index-193"], [478, "index-194"], [478, "index-195"], [478, "index-196"], [478, "index-197"], [478, "index-202"], [478, "index-27"]], "pep 528": [[32, "index-67"], [33, "index-17"], [456, "index-16"], [474, "index-22"]], "pep 529": [[32, "index-66"], [63, "index-5"], [289, "index-27"], [348, "index-44"], [348, "index-9"], [450, "index-54"], [456, "index-17"], [474, "index-20"], [476, "index-19"], [478, "index-206"], [478, "index-259"], [478, "index-61"]], "pep 539": [[32, "index-49"], [475, "index-14"], [475, "index-15"], [478, "index-246"]], "pep 554": [[32, "index-47"], [469, "index-10"]], "pythondebug": [[32, "index-61"], [33, "index-22"], [450, "envvar-PYTHONDEBUG"], [450, "index-4"], [451, "index-6"]], "pythondontwritebytecode": [[32, "index-62"], [33, "index-32"], [84, "index-4"], [348, "index-6"], [450, "envvar-PYTHONDONTWRITEBYTECODE"], [450, "index-3"], [463, "index-20"], [463, "index-24"]], "pythonhashseed": [[32, "index-3"], [32, "index-63"], [33, "index-11"], [423, "index-111"], [450, "envvar-PYTHONHASHSEED"], [450, "index-17"], [450, "index-18"], [450, "index-39"], [471, "index-23"], [471, "index-35"], [478, "index-235"]], "pythonhome": [[32, "index-30"], [32, "index-31"], [32, "index-5"], [33, "index-12"], [34, "index-43"], [34, "index-45"], [349, "index-2"], [349, "index-4"], [357, "index-0"], [450, "envvar-PYTHONHOME"], [450, "index-32"], [450, "index-33"], [450, "index-36"], [450, "index-7"], [456, "index-33"], [456, "index-35"], [456, "index-37"], [474, "index-2"]], "pythoninspect": [[32, "index-64"], [33, "index-14"], [450, "envvar-PYTHONINSPECT"], [450, "index-9"], [460, "index-29"]], "pythonioencoding": [[32, "index-17"], [32, "index-18"], [33, "index-26"], [289, "index-1"], [348, "index-35"], [450, "envvar-PYTHONIOENCODING"], [450, "index-45"], [463, "index-21"], [472, "index-54"]], "pythonlegacywindowsfsencoding": [[32, "index-65"], [33, "index-1"], [348, "index-33"], [450, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [474, "index-19"]], "pythonlegacywindowsstdio": [[32, "index-9"], [33, "index-16"], [348, "index-37"], [450, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [450, "index-40"], [474, "index-21"]], "pythonnousersite": [[32, "index-68"], [33, "index-29"], [330, "index-8"], [450, "envvar-PYTHONNOUSERSITE"], [463, "index-6"]], "pythonoptimize": [[32, "index-69"], [33, "index-21"], [450, "envvar-PYTHONOPTIMIZE"], [450, "index-12"]], "pythonpath": [[32, "index-4"], [33, "index-20"], [34, "index-44"], [34, "index-46"], [70, "index-0"], [148, "index-4"], [348, "index-22"], [348, "index-23"], [349, "index-0"], [349, "index-1"], [357, "index-1"], [427, "index-17"], [445, "index-14"], [445, "index-17"], [445, "index-18"], [450, "envvar-PYTHONPATH"], [450, "index-35"], [450, "index-37"], [450, "index-38"], [450, "index-6"], [454, "index-2"], [456, "index-11"], [456, "index-32"], [456, "index-34"], [456, "index-36"], [472, "index-56"], [472, "index-57"]], "pythonunbuffered": [[32, "index-70"], [33, "index-5"], [348, "index-38"], [450, "envvar-PYTHONUNBUFFERED"], [450, "index-52"], [478, "index-203"]], "pythonverbose": [[32, "index-71"], [33, "index-30"], [450, "envvar-PYTHONVERBOSE"], [450, "index-53"]], "pyeval_acquirelock (c function)": [[32, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[32, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[32, "index-37"]], "pyeval_initthreads (c function)": [[32, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[32, "index-15"]], "pyeval_releaselock (c function)": [[32, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[32, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[32, "index-37"]], "pyeval_restorethread (c function)": [[32, "c.PyEval_RestoreThread"]], "pyeval_restorethread()": [[32, "index-36"], [32, "index-37"]], "pyeval_savethread (c function)": [[32, "c.PyEval_SaveThread"]], "pyeval_savethread()": [[32, "index-36"], [32, "index-37"]], "pyeval_setprofile (c function)": [[32, "c.PyEval_SetProfile"]], "pyeval_setprofileallthreads (c function)": [[32, "c.PyEval_SetProfileAllThreads"]], "pyeval_settrace (c function)": [[32, "c.PyEval_SetTrace"]], "pyeval_settraceallthreads (c function)": [[32, "c.PyEval_SetTraceAllThreads"]], "pyeval_threadsinitialized (c function)": [[32, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[32, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[32, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[32, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[32, "c.PyGILState_Release"]], "pyinterpreterconfig (c type)": [[32, "c.PyInterpreterConfig"]], "pyinterpreterconfig.allow_daemon_threads (c member)": [[32, "c.PyInterpreterConfig.allow_daemon_threads"]], "pyinterpreterconfig.allow_exec (c member)": [[32, "c.PyInterpreterConfig.allow_exec"]], "pyinterpreterconfig.allow_fork (c member)": [[32, "c.PyInterpreterConfig.allow_fork"]], "pyinterpreterconfig.allow_threads (c member)": [[32, "c.PyInterpreterConfig.allow_threads"]], "pyinterpreterconfig.check_multi_interp_extensions (c member)": [[32, "c.PyInterpreterConfig.check_multi_interp_extensions"]], "pyinterpreterconfig.gil (c member)": [[32, "c.PyInterpreterConfig.gil"]], "pyinterpreterconfig.use_main_obmalloc (c member)": [[32, "c.PyInterpreterConfig.use_main_obmalloc"]], "pyinterpreterconfig_default_gil (c macro)": [[32, "c.PyInterpreterConfig_DEFAULT_GIL"]], "pyinterpreterconfig_own_gil (c macro)": [[32, "c.PyInterpreterConfig_OWN_GIL"]], "pyinterpreterconfig_shared_gil (c macro)": [[32, "c.PyInterpreterConfig_SHARED_GIL"]], "pyinterpreterstate (c type)": [[32, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[32, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[32, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[32, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[32, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[32, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[32, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[32, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[32, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[32, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[32, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[32, "c.PySys_SetArgv"]], "pysys_setargv()": [[32, "index-15"]], "pysys_setargvex (c function)": [[32, "c.PySys_SetArgvEx"]], "pysys_setargvex()": [[32, "index-15"]], "pythreadstate": [[32, "index-34"]], "pythreadstate (c type)": [[32, "c.PyThreadState"]], "pythreadstate.interp (c member)": [[32, "c.PyThreadState.interp"]], "pythreadstate_clear (c function)": [[32, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[32, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[32, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_entertracing (c function)": [[32, "c.PyThreadState_EnterTracing"]], "pythreadstate_get (c function)": [[32, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[32, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[32, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[32, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[32, "c.PyThreadState_GetInterpreter"]], "pythreadstate_leavetracing (c function)": [[32, "c.PyThreadState_LeaveTracing"]], "pythreadstate_new (c function)": [[32, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[32, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[32, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[32, "c.PyThreadState_Swap"]], "pythread_reinittls (c function)": [[32, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[32, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[32, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[32, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[32, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[32, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[32, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[32, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[32, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[32, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[32, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[32, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[32, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[32, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[32, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[32, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[32, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[32, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[32, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[32, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[32, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[32, "c.Py_AddPendingCall"]], "py_addpendingcall()": [[32, "index-48"]], "py_begin_allow_threads": [[32, "index-35"]], "py_begin_allow_threads (c macro)": [[32, "c.Py_BEGIN_ALLOW_THREADS"]], "py_block_threads (c macro)": [[32, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[32, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[32, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[32, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads": [[32, "index-35"]], "py_end_allow_threads (c macro)": [[32, "c.Py_END_ALLOW_THREADS"]], "py_endinterpreter (c function)": [[32, "c.Py_EndInterpreter"]], "py_fatalerror()": [[32, "index-29"]], "py_finalize (c function)": [[32, "c.Py_Finalize"]], "py_finalizeex (c function)": [[32, "c.Py_FinalizeEx"]], "py_finalizeex()": [[32, "index-15"], [32, "index-43"], [32, "index-46"], [58, "index-2"], [58, "index-3"]], "py_frozenflag (c var)": [[32, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[32, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[32, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[32, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[32, "c.Py_GetExecPrefix"]], "py_getpath (c function)": [[32, "c.Py_GetPath"]], "py_getpath()": [[32, "index-19"], [32, "index-23"], [34, "index-23"]], "py_getplatform (c function)": [[32, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[32, "c.Py_GetPrefix"]], "py_getprogramfullpath (c function)": [[32, "c.Py_GetProgramFullPath"]], "py_getprogramname (c function)": [[32, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[32, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[32, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[32, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[32, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[32, "c.Py_Initialize"]], "py_initialize()": [[32, "index-16"], [32, "index-19"], [32, "index-43"], [34, "index-18"]], "py_initializeex (c function)": [[32, "c.Py_InitializeEx"]], "py_inspectflag (c var)": [[32, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[32, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[32, "c.Py_IsInitialized"]], "py_isolatedflag (c var)": [[32, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[32, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[32, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[32, "c.Py_NewInterpreter"]], "py_newinterpreterfromconfig (c function)": [[32, "c.Py_NewInterpreterFromConfig"]], "py_nositeflag (c var)": [[32, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[32, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[32, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[32, "c.Py_QuietFlag"]], "py_setpath (c function)": [[32, "c.Py_SetPath"]], "py_setpath()": [[32, "index-22"]], "py_setprogramname (c function)": [[32, "c.Py_SetProgramName"]], "py_setprogramname()": [[32, "index-15"], [32, "index-20"], [32, "index-21"], [34, "index-23"]], "py_setpythonhome (c function)": [[32, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[32, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[32, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[32, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[32, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[32, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[32, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[32, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[32, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[32, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[32, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [111, "module-__main__"], [320, "index-0"], [320, "index-4"], [424, "index-10"], [432, "index-2"], [432, "index-3"]], "_thread": [[32, "index-38"], [112, "module-_thread"]], "argv\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-29"]], "builtins\uff08\u5167\u5efa\uff09": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [221, "index-13"], [432, "index-2"], [445, "index-7"]], "close()\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-44"]], "copyright\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-26"]], "executable\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-21"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[32, "index-32"], [86, "term-global-interpreter-lock"]], "interpreter lock\uff08\u76f4\u8b6f\u5668\u9396\uff09": [[32, "index-32"]], "lock, interpreter\uff08\u9396\u3001\u76f4\u8b6f\u5668\uff09": [[32, "index-32"]], "main()": [[32, "index-16"], [32, "index-19"], [32, "index-29"]], "path\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"]], "path\uff08\u8def\u5f91\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"], [261, "index-0"], [290, "index-0"], [292, "index-0"], [330, "index-0"], [330, "index-4"], [348, "index-21"], [427, "index-9"], [445, "index-0"]], "platform\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-25"]], "sdterr": [[32, "index-16"]], "search\uff08\u641c\u5c0b\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"], [261, "index-0"], [330, "index-0"], [348, "index-21"], [445, "index-0"]], "setswitchinterval() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-33"]], "stderr\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "stdin": [[32, "index-16"]], "stdin\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "stdout": [[32, "index-16"]], "stdout\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "sys": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [221, "index-8"], [348, "module-sys"], [422, "index-11"], [432, "index-2"], [445, "index-4"]], "version\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-24"], [32, "index-27"], [32, "index-28"]], "\u6a21\u7d44": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [32, "index-38"], [32, "index-42"], [32, "index-45"], [340, "index-15"], [340, "index-33"], [340, "index-40"], [340, "index-65"]], "\u74b0\u5883\u8b8a\u6578": [[32, "index-17"], [32, "index-18"], [32, "index-3"], [32, "index-30"], [32, "index-31"], [32, "index-4"], [32, "index-5"], [32, "index-61"], [32, "index-62"], [32, "index-63"], [32, "index-64"], [32, "index-65"], [32, "index-68"], [32, "index-69"], [32, "index-70"], [32, "index-71"], [32, "index-9"], [33, "index-1"], [33, "index-10"], [33, "index-11"], [33, "index-12"], [33, "index-13"], [33, "index-14"], [33, "index-15"], [33, "index-16"], [33, "index-18"], [33, "index-19"], [33, "index-2"], [33, "index-20"], [33, "index-21"], [33, "index-22"], [33, "index-23"], [33, "index-24"], [33, "index-25"], [33, "index-26"], [33, "index-27"], [33, "index-28"], [33, "index-29"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-32"], [33, "index-35"], [33, "index-36"], [33, "index-4"], [33, "index-5"], [33, "index-6"], [33, "index-8"], [33, "index-9"], [34, "index-41"], [34, "index-42"], [34, "index-43"], [34, "index-44"], [34, "index-45"], [34, "index-46"], [41, "index-1"], [41, "index-2"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [62, "index-0"], [70, "index-0"], [80, "index-4"], [80, "index-5"], [83, "index-0"], [83, "index-1"], [84, "index-4"], [101, "index-0"], [107, "index-3"], [122, "index-2"], [123, "index-5"], [148, "index-3"], [148, "index-4"], [148, "index-6"], [159, "index-1"], [173, "index-0"], [173, "index-1"], [173, "index-2"], [173, "index-3"], [173, "index-4"], [173, "index-5"], [173, "index-6"], [184, "index-0"], [184, "index-1"], [184, "index-2"], [184, "index-3"], [184, "index-4"], [184, "index-5"], [210, "index-0"], [221, "index-1"], [221, "index-16"], [224, "index-0"], [225, "index-10"], [225, "index-11"], [225, "index-8"], [225, "index-9"], [226, "index-0"], [226, "index-1"], [226, "index-2"], [226, "index-3"], [226, "index-5"], [226, "index-6"], [226, "index-7"], [226, "index-8"], [243, "index-5"], [243, "index-6"], [254, "index-3"], [262, "index-1"], [262, "index-2"], [262, "index-3"], [289, "index-1"], [289, "index-10"], [289, "index-11"], [289, "index-2"], [289, "index-3"], [289, "index-33"], [289, "index-34"], [289, "index-35"], [289, "index-36"], [289, "index-39"], [289, "index-4"], [289, "index-40"], [289, "index-41"], [289, "index-42"], [289, "index-43"], [289, "index-52"], [290, "index-16"], [290, "index-17"], [290, "index-18"], [290, "index-19"], [290, "index-20"], [290, "index-21"], [291, "index-1"], [291, "index-2"], [307, "index-3"], [307, "index-6"], [307, "index-7"], [309, "index-1"], [309, "index-2"], [316, "index-0"], [323, "index-2"], [330, "index-10"], [330, "index-3"], [330, "index-7"], [330, "index-8"], [330, "index-9"], [337, "index-3"], [337, "index-4"], [340, "index-67"], [340, "index-68"], [344, "index-2"], [344, "index-3"], [344, "index-4"], [348, "index-17"], [348, "index-18"], [348, "index-22"], [348, "index-23"], [348, "index-24"], [348, "index-3"], [348, "index-33"], [348, "index-35"], [348, "index-36"], [348, "index-37"], [348, "index-38"], [348, "index-4"], [348, "index-5"], [348, "index-6"], [348, "index-7"], [349, "index-0"], [349, "index-1"], [349, "index-2"], [349, "index-3"], [349, "index-4"], [355, "index-7"], [355, "index-8"], [355, "index-9"], [357, "index-0"], [357, "index-1"], [357, "index-2"], [361, "index-13"], [361, "index-14"], [361, "index-15"], [361, "index-16"], [361, "index-17"], [361, "index-18"], [364, "index-0"], [364, "index-1"], [377, "index-0"], [377, "index-1"], [377, "index-2"], [390, "index-18"], [390, "index-4"], [390, "index-9"], [394, "index-2"], [394, "index-3"], [394, "index-4"], [395, "index-1"], [395, "index-2"], [395, "index-3"], [395, "index-4"], [395, "index-5"], [398, "index-0"], [398, "index-1"], [398, "index-2"], [398, "index-3"], [405, "index-0"], [420, "envvar-PYTHONTZPATH"], [420, "index-2"], [423, "index-111"], [423, "index-59"], [433, "index-4"], [433, "index-5"], [445, "index-14"], [445, "index-15"], [445, "index-17"], [445, "index-18"], [450, "envvar-PYTHONASYNCIODEBUG"], [450, "envvar-PYTHONBREAKPOINT"], [450, "envvar-PYTHONCASEOK"], [450, "envvar-PYTHONCOERCECLOCALE"], [450, "envvar-PYTHONDEBUG"], [450, "envvar-PYTHONDEVMODE"], [450, "envvar-PYTHONDONTWRITEBYTECODE"], [450, "envvar-PYTHONDUMPREFS"], [450, "envvar-PYTHONDUMPREFSFILE-FILENAME"], [450, "envvar-PYTHONEXECUTABLE"], [450, "envvar-PYTHONFAULTHANDLER"], [450, "envvar-PYTHONHASHSEED"], [450, "envvar-PYTHONHOME"], [450, "envvar-PYTHONINSPECT"], [450, "envvar-PYTHONINTMAXSTRDIGITS"], [450, "envvar-PYTHONIOENCODING"], [450, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [450, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [450, "envvar-PYTHONMALLOC"], [450, "envvar-PYTHONMALLOCSTATS"], [450, "envvar-PYTHONNODEBUGRANGES"], [450, "envvar-PYTHONNOUSERSITE"], [450, "envvar-PYTHONOPTIMIZE"], [450, "envvar-PYTHONPATH"], [450, "envvar-PYTHONPERFSUPPORT"], [450, "envvar-PYTHONPLATLIBDIR"], [450, "envvar-PYTHONPROFILEIMPORTTIME"], [450, "envvar-PYTHONPYCACHEPREFIX"], [450, "envvar-PYTHONSAFEPATH"], [450, "envvar-PYTHONSTARTUP"], [450, "envvar-PYTHONTRACEMALLOC"], [450, "envvar-PYTHONUNBUFFERED"], [450, "envvar-PYTHONUSERBASE"], [450, "envvar-PYTHONUTF8"], [450, "envvar-PYTHONVERBOSE"], [450, "envvar-PYTHONWARNDEFAULTENCODING"], [450, "envvar-PYTHONWARNINGS"], [450, "index-0"], [450, "index-10"], [450, "index-12"], [450, "index-16"], [450, "index-17"], [450, "index-18"], [450, "index-2"], [450, "index-22"], [450, "index-23"], [450, "index-24"], [450, "index-25"], [450, "index-26"], [450, "index-27"], [450, "index-28"], [450, "index-29"], [450, "index-3"], [450, "index-30"], [450, "index-31"], [450, "index-32"], [450, "index-33"], [450, "index-34"], [450, "index-35"], [450, "index-36"], [450, "index-37"], [450, "index-38"], [450, "index-39"], [450, "index-4"], [450, "index-40"], [450, "index-43"], [450, "index-45"], [450, "index-46"], [450, "index-5"], [450, "index-52"], [450, "index-53"], [450, "index-6"], [450, "index-7"], [450, "index-8"], [450, "index-9"], [451, "envvar-BASECFLAGS"], [451, "envvar-BASECPPFLAGS"], [451, "envvar-BLDSHARED"], [451, "envvar-CC"], [451, "envvar-CCSHARED"], [451, "envvar-CFLAGS"], [451, "envvar-CFLAGSFORSHARED"], [451, "envvar-CFLAGS_ALIASING"], [451, "envvar-CFLAGS_NODIST"], [451, "envvar-COMPILEALL_OPTS"], [451, "envvar-CONFIGURE_CFLAGS"], [451, "envvar-CONFIGURE_CFLAGS_NODIST"], [451, "envvar-CONFIGURE_CPPFLAGS"], [451, "envvar-CONFIGURE_LDFLAGS"], [451, "envvar-CONFIGURE_LDFLAGS_NODIST"], [451, "envvar-CPPFLAGS"], [451, "envvar-CXX"], [451, "envvar-EXTRA_CFLAGS"], [451, "envvar-LDFLAGS"], [451, "envvar-LDFLAGS_NODIST"], [451, "envvar-LDSHARED"], [451, "envvar-LIBS"], [451, "envvar-LINKCC"], [451, "envvar-OPT"], [451, "envvar-PROFILE_TASK"], [451, "envvar-PURIFY"], [451, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [451, "envvar-PY_CFLAGS"], [451, "envvar-PY_CFLAGS_NODIST"], [451, "envvar-PY_CORE_CFLAGS"], [451, "envvar-PY_CORE_LDFLAGS"], [451, "envvar-PY_CPPFLAGS"], [451, "envvar-PY_LDFLAGS"], [451, "envvar-PY_LDFLAGS_NODIST"], [451, "envvar-PY_STDMODULE_CFLAGS"], [451, "index-10"], [451, "index-11"], [451, "index-12"], [451, "index-13"], [451, "index-14"], [451, "index-15"], [451, "index-16"], [451, "index-17"], [451, "index-18"], [451, "index-19"], [451, "index-20"], [451, "index-21"], [451, "index-22"], [451, "index-23"], [451, "index-24"], [451, "index-25"], [451, "index-26"], [451, "index-27"], [451, "index-28"], [451, "index-32"], [451, "index-34"], [451, "index-4"], [451, "index-6"], [451, "index-7"], [451, "index-8"], [451, "index-9"], [454, "index-2"], [455, "index-2"], [456, "index-10"], [456, "index-11"], [456, "index-12"], [456, "index-13"], [456, "index-14"], [456, "index-15"], [456, "index-18"], [456, "index-2"], [456, "index-20"], [456, "index-22"], [456, "index-23"], [456, "index-24"], [456, "index-25"], [456, "index-26"], [456, "index-27"], [456, "index-28"], [456, "index-29"], [456, "index-3"], [456, "index-30"], [456, "index-31"], [456, "index-32"], [456, "index-33"], [456, "index-34"], [456, "index-35"], [456, "index-36"], [456, "index-37"], [456, "index-4"], [456, "index-40"], [456, "index-5"], [456, "index-6"], [456, "index-7"], [456, "index-8"], [456, "index-9"], [458, "index-11"], [460, "index-24"], [460, "index-25"], [460, "index-26"], [460, "index-27"], [460, "index-28"], [460, "index-29"], [463, "index-20"], [463, "index-21"], [463, "index-24"], [463, "index-4"], [463, "index-5"], [463, "index-6"], [464, "index-1"], [464, "index-12"], [464, "index-14"], [464, "index-15"], [464, "index-8"], [464, "index-9"], [467, "index-114"], [467, "index-98"], [468, "index-104"], [468, "index-116"], [468, "index-84"], [468, "index-89"], [469, "index-17"], [470, "index-10"], [471, "index-23"], [471, "index-24"], [471, "index-35"], [472, "index-40"], [472, "index-41"], [472, "index-50"], [472, "index-51"], [472, "index-54"], [472, "index-55"], [472, "index-56"], [472, "index-57"], [472, "index-58"], [472, "index-59"], [474, "index-19"], [474, "index-2"], [474, "index-21"], [474, "index-27"], [474, "index-38"], [475, "index-12"], [475, "index-26"], [475, "index-27"], [475, "index-31"], [475, "index-36"], [475, "index-4"], [475, "index-8"], [476, "index-13"], [476, "index-14"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-3"], [477, "index-21"], [478, "index-106"], [478, "index-136"], [478, "index-152"], [478, "index-191"], [478, "index-199"], [478, "index-200"], [478, "index-201"], [478, "index-203"], [478, "index-207"], [478, "index-211"], [478, "index-212"], [478, "index-214"], [478, "index-216"], [478, "index-218"], [478, "index-224"], [478, "index-225"], [478, "index-229"], [478, "index-230"], [478, "index-234"], [478, "index-235"], [478, "index-243"], [478, "index-254"], [478, "index-255"], [478, "index-284"], [478, "index-285"], [478, "index-38"], [478, "index-41"], [478, "index-48"], [478, "index-49"], [478, "index-52"], [478, "index-53"], [478, "index-62"], [478, "index-74"], [478, "index-77"], [478, "index-85"], [478, "index-86"], [478, "index-93"]], "pep 432": [[33, "index-37"], [33, "index-38"], [475, "index-38"], [478, "index-248"]], "pep 538": [[33, "index-33"], [450, "index-55"], [451, "index-33"], [475, "index-10"], [475, "index-3"], [475, "index-6"], [475, "index-7"], [478, "index-222"], [478, "index-226"], [478, "index-247"]], "pep 540": [[33, "index-34"], [289, "index-55"], [475, "index-11"], [475, "index-9"], [478, "index-236"]], "pep 552": [[33, "index-7"], [246, "index-9"], [307, "index-5"], [468, "index-106"], [475, "index-22"], [475, "index-23"], [478, "index-219"], [478, "index-239"]], "pep 587": [[33, "index-0"], [476, "index-34"], [476, "index-5"], [478, "index-204"], [478, "index-209"], [478, "index-94"]], "pythoncoerceclocale": [[33, "index-36"], [289, "index-4"], [450, "envvar-PYTHONCOERCECLOCALE"], [451, "index-32"], [475, "index-4"]], "pythondevmode": [[33, "index-8"], [184, "index-0"], [450, "envvar-PYTHONDEVMODE"], [475, "index-26"]], "pythondumprefs": [[33, "index-9"], [62, "index-0"], [450, "envvar-PYTHONDUMPREFS"], [451, "index-7"], [476, "index-3"], [478, "index-214"]], "pythonexecutable": [[33, "index-23"], [450, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[33, "index-10"], [184, "index-4"], [210, "index-0"], [450, "envvar-PYTHONFAULTHANDLER"], [450, "index-23"], [471, "index-24"]], "pythonintmaxstrdigits": [[33, "index-15"], [340, "index-67"], [340, "index-68"], [348, "index-17"], [450, "envvar-PYTHONINTMAXSTRDIGITS"], [450, "index-25"], [478, "index-38"]], "pythonmallocstats": [[33, "index-18"], [41, "index-2"], [450, "envvar-PYTHONMALLOCSTATS"], [478, "index-285"]], "pythonnodebugranges": [[33, "index-6"], [423, "index-59"], [450, "envvar-PYTHONNODEBUGRANGES"], [450, "index-30"], [468, "index-89"]], "pythonperfsupport": [[33, "index-28"], [101, "index-0"], [450, "envvar-PYTHONPERFSUPPORT"], [450, "index-31"], [469, "index-17"]], "pythonplatlibdir": [[33, "index-19"], [349, "index-3"], [450, "envvar-PYTHONPLATLIBDIR"], [478, "index-152"]], "pythonprofileimporttime": [[33, "index-13"], [450, "envvar-PYTHONPROFILEIMPORTTIME"], [450, "index-26"], [475, "index-27"], [478, "index-243"]], "pythonpycacheprefix": [[33, "index-25"], [348, "index-7"], [450, "envvar-PYTHONPYCACHEPREFIX"], [450, "index-28"], [476, "index-2"], [478, "index-216"]], "pythonsafepath": [[33, "index-3"], [323, "index-2"], [348, "index-24"], [450, "envvar-PYTHONSAFEPATH"], [450, "index-16"], [468, "index-104"], [468, "index-84"], [478, "index-53"]], "pythontracemalloc": [[33, "index-27"], [377, "index-0"], [377, "index-1"], [377, "index-2"], [450, "envvar-PYTHONTRACEMALLOC"], [450, "index-24"]], "pythonutf8": [[33, "index-2"], [33, "index-35"], [289, "index-2"], [289, "index-3"], [348, "index-36"], [450, "envvar-PYTHONUTF8"], [450, "index-27"], [450, "index-46"], [456, "index-15"], [475, "index-8"]], "pythonwarnings": [[33, "index-31"], [184, "index-1"], [395, "index-1"], [395, "index-2"], [395, "index-3"], [395, "index-4"], [395, "index-5"], [450, "envvar-PYTHONWARNINGS"], [450, "index-22"], [464, "index-1"], [464, "index-8"], [470, "index-10"], [475, "index-36"], [478, "index-48"]], "pyconfig (c type)": [[33, "c.PyConfig"]], "pyconfig.argv (c member)": [[33, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[33, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[33, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[33, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[33, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[33, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[33, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.code_debug_ranges (c member)": [[33, "c.PyConfig.code_debug_ranges"]], "pyconfig.configure_c_stdio (c member)": [[33, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[33, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[33, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[33, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[33, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[33, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[33, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[33, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[33, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[33, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[33, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[33, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[33, "c.PyConfig.install_signal_handlers"]], "pyconfig.int_max_str_digits (c member)": [[33, "c.PyConfig.int_max_str_digits"]], "pyconfig.interactive (c member)": [[33, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[33, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[33, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[33, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[33, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[33, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[33, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[33, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[33, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[33, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[33, "c.PyConfig.pathconfig_warnings"]], "pyconfig.perf_profiling (c member)": [[33, "c.PyConfig.perf_profiling"]], "pyconfig.platlibdir (c member)": [[33, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[33, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[33, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[33, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[33, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[33, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[33, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[33, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[33, "c.PyConfig.run_module"]], "pyconfig.safe_path (c member)": [[33, "c.PyConfig.safe_path"]], "pyconfig.show_ref_count (c member)": [[33, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[33, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[33, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[33, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[33, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[33, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[33, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[33, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[33, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[33, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[33, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[33, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[33, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[33, "c.PyConfig.xoptions"]], "pyconfig_clear (c function)": [[33, "c.PyConfig_Clear"]], "pyconfig_initisolatedconfig (c function)": [[33, "c.PyConfig_InitIsolatedConfig"]], "pyconfig_initpythonconfig (c function)": [[33, "c.PyConfig_InitPythonConfig"]], "pyconfig_read (c function)": [[33, "c.PyConfig_Read"]], "pyconfig_setargv (c function)": [[33, "c.PyConfig_SetArgv"]], "pyconfig_setbytesargv (c function)": [[33, "c.PyConfig_SetBytesArgv"]], "pyconfig_setbytesstring (c function)": [[33, "c.PyConfig_SetBytesString"]], "pyconfig_setstring (c function)": [[33, "c.PyConfig_SetString"]], "pyconfig_setwidestringlist (c function)": [[33, "c.PyConfig_SetWideStringList"]], "pypreconfig (c type)": [[33, "c.PyPreConfig"]], "pypreconfig.allocator (c member)": [[33, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[33, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[33, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[33, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[33, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[33, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[33, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[33, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[33, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[33, "c.PyPreConfig.utf8_mode"]], "pypreconfig_initisolatedconfig (c function)": [[33, "c.PyPreConfig_InitIsolatedConfig"]], "pypreconfig_initpythonconfig (c function)": [[33, "c.PyPreConfig_InitPythonConfig"]], "pystatus (c type)": [[33, "c.PyStatus"]], "pystatus.err_msg (c member)": [[33, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[33, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[33, "c.PyStatus.func"]], "pystatus_error (c function)": [[33, "c.PyStatus_Error"]], "pystatus_exception (c function)": [[33, "c.PyStatus_Exception"]], "pystatus_exit (c function)": [[33, "c.PyStatus_Exit"]], "pystatus_iserror (c function)": [[33, "c.PyStatus_IsError"]], "pystatus_isexit (c function)": [[33, "c.PyStatus_IsExit"]], "pystatus_nomemory (c function)": [[33, "c.PyStatus_NoMemory"]], "pystatus_ok (c function)": [[33, "c.PyStatus_Ok"]], "pywidestringlist (c type)": [[33, "c.PyWideStringList"]], "pywidestringlist.pywidestringlist_append (c function)": [[33, "c.PyWideStringList.PyWideStringList_Append"]], "pywidestringlist.pywidestringlist_insert (c function)": [[33, "c.PyWideStringList.PyWideStringList_Insert"]], "pywidestringlist.items (c member)": [[33, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[33, "c.PyWideStringList.length"]], "py_exitstatusexception (c function)": [[33, "c.Py_ExitStatusException"]], "py_getargcargv (c function)": [[33, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[33, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[33, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[33, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[33, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[33, "c.Py_RunMain"]], "_py_initializemain (c function)": [[33, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[33, "index-24"], [33, "index-4"]], "path": [[34, "index-41"], [34, "index-42"], [83, "index-0"], [83, "index-1"], [148, "index-3"], [148, "index-6"], [289, "index-33"], [289, "index-34"], [289, "index-35"], [289, "index-36"], [289, "index-39"], [289, "index-40"], [289, "index-41"], [289, "index-42"], [289, "index-52"], [330, "index-3"], [344, "index-2"], [394, "index-2"], [394, "index-3"], [394, "index-4"], [398, "index-3"], [433, "index-4"], [445, "index-15"], [450, "index-34"], [455, "index-2"], [456, "index-10"], [456, "index-12"], [456, "index-13"], [456, "index-14"], [456, "index-18"], [456, "index-2"], [456, "index-20"], [456, "index-22"], [456, "index-23"], [456, "index-25"], [456, "index-3"], [456, "index-40"], [456, "index-5"], [456, "index-9"], [472, "index-55"], [472, "index-58"], [472, "index-59"], [476, "index-22"], [478, "index-211"], [478, "index-212"], [478, "index-52"], [478, "index-77"]], "pep 353": [[34, "index-40"], [462, "index-16"], [462, "index-17"], [462, "index-29"], [467, "index-117"], [478, "index-157"]], "pep 7": [[34, "index-37"], [34, "index-38"], [34, "index-39"], [451, "index-0"], [474, "index-34"]], "pydoc_str (c macro)": [[34, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[34, "c.PyDoc_STRVAR"]], "pyerr_clear()": [[34, "index-12"], [34, "index-17"]], "pyerr_exceptionmatches()": [[34, "index-17"]], "pyerr_occurred()": [[34, "index-11"]], "pyerr_setstring()": [[34, "index-12"]], "pylist_getitem()": [[34, "index-7"]], "pylist_setitem()": [[34, "index-5"]], "pysequence_getitem()": [[34, "index-7"]], "pytuple_setitem()": [[34, "index-5"]], "py_abs (c macro)": [[34, "c.Py_ABS"]], "py_always_inline (c macro)": [[34, "c.Py_ALWAYS_INLINE"]], "py_charmask (c macro)": [[34, "c.Py_CHARMASK"]], "py_decref()": [[34, "index-4"]], "py_deprecated (c macro)": [[34, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[34, "c.Py_GETENV"]], "py_getexecprefix()": [[34, "index-23"]], "py_getprefix()": [[34, "index-23"]], "py_getprogramfullpath()": [[34, "index-23"]], "py_incref()": [[34, "index-4"]], "py_isinitialized()": [[34, "index-26"]], "py_max (c macro)": [[34, "c.Py_MAX"]], "py_member_size (c macro)": [[34, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[34, "c.Py_MIN"]], "py_no_inline (c macro)": [[34, "c.Py_NO_INLINE"]], "py_stringify (c macro)": [[34, "c.Py_STRINGIFY"]], "py_unreachable (c macro)": [[34, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[34, "c.Py_UNUSED"]], "py_xdecref()": [[34, "index-17"]], "py_ssize_t (c type)": [[34, "c.Py_ssize_t"]], "exc_info() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[34, "index-13"]], "incr_item()": [[34, "index-15"], [34, "index-16"]], "set_all()": [[34, "index-6"]], "sum_list()": [[34, "index-8"]], "sum_sequence()": [[34, "index-14"], [34, "index-9"]], "type\uff08\u578b\u5225\uff09": [[34, "index-3"], [48, "index-7"], [60, "index-0"], [86, "term-type"], [221, "index-0"], [221, "index-12"], [340, "index-0"], [340, "index-14"], [340, "index-16"], [340, "index-20"], [340, "index-22"], [340, "index-23"], [340, "index-24"], [340, "index-52"], [340, "index-59"], [340, "index-65"], [423, "index-1"], [423, "index-4"], [423, "index-83"], [425, "index-7"]], "pyaiter_check (c function)": [[35, "c.PyAIter_Check"]], "pyiter_check (c function)": [[35, "c.PyIter_Check"]], "pyiter_next (c function)": [[35, "c.PyIter_Next"]], "pyiter_send (c function)": [[35, "c.PyIter_Send"]], "pysendresult (c type)": [[35, "c.PySendResult"]], "pycalliter_check (c function)": [[36, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[36, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[36, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[36, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[36, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[36, "c.PySeqIter_Type"]], "pylistobject (c type)": [[37, "c.PyListObject"]], "pylist_append (c function)": [[37, "c.PyList_Append"]], "pylist_astuple (c function)": [[37, "c.PyList_AsTuple"]], "pylist_check (c function)": [[37, "c.PyList_Check"]], "pylist_checkexact (c function)": [[37, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[37, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[37, "c.PyList_GET_SIZE"]], "pylist_getitem (c function)": [[37, "c.PyList_GetItem"]], "pylist_getslice (c function)": [[37, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[37, "c.PyList_Insert"]], "pylist_new (c function)": [[37, "c.PyList_New"]], "pylist_reverse (c function)": [[37, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[37, "c.PyList_SET_ITEM"]], "pylist_setitem (c function)": [[37, "c.PyList_SetItem"]], "pylist_setslice (c function)": [[37, "c.PyList_SetSlice"]], "pylist_size (c function)": [[37, "c.PyList_Size"]], "pylist_sort (c function)": [[37, "c.PyList_Sort"]], "pylist_type (c var)": [[37, "c.PyList_Type"]], "list\uff08\u4e32\u5217\uff09": [[37, "index-0"], [86, "term-list"], [340, "index-23"], [340, "index-24"], [340, "index-25"], [422, "index-6"], [423, "index-23"], [425, "index-15"], [425, "index-40"], [425, "index-42"], [425, "index-45"], [425, "index-91"], [431, "index-1"], [431, "index-10"], [431, "index-2"], [431, "index-21"], [431, "index-5"], [431, "index-6"]], "tuple\uff08\u5143\u7d44\uff09": [[37, "index-2"], [59, "index-0"], [340, "index-22"], [340, "index-26"], [423, "index-20"]], "long_max": [[38, "index-1"]], "overflowerror\uff08\u5185\u5efa\u4f8b\u5916\uff09": [[38, "index-1"], [38, "index-2"], [38, "index-3"], [38, "index-4"], [38, "index-5"], [38, "index-6"]], "py_ssize_t_max": [[38, "index-3"]], "pylongobject (c type)": [[38, "c.PyLongObject"]], "pylong_asdouble (c function)": [[38, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[38, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[38, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[38, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[38, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[38, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[38, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[38, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[38, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[38, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[38, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[38, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[38, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[38, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[38, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[38, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[38, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[38, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[38, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[38, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[38, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[38, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[38, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[38, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[38, "c.PyLong_Type"]], "pyunstable_long_compactvalue (c function)": [[38, "c.PyUnstable_Long_CompactValue"]], "pyunstable_long_iscompact (c function)": [[38, "c.PyUnstable_Long_IsCompact"]], "size_max": [[38, "index-5"]], "ulong_max": [[38, "index-4"]], "integer\uff08\u6574\u6570\uff09": [[38, "index-0"]], "long integer\uff08\u9577\u6574\u6570\uff09": [[38, "index-0"]], "pymapping_check (c function)": [[39, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[39, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[39, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[39, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[39, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[39, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[39, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[39, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[39, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[39, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[39, "c.PyMapping_Size"]], "pymapping_values (c function)": [[39, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[40, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[40, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[40, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[40, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[40, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[40, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[40, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[40, "c.PyMarshal_WriteObjectToString"]], "pymem_domain_mem (c macro)": [[41, "c.PYMEM_DOMAIN_MEM"]], "pymem_domain_obj (c macro)": [[41, "c.PYMEM_DOMAIN_OBJ"]], "pymem_domain_raw (c macro)": [[41, "c.PYMEM_DOMAIN_RAW"]], "pythonmalloc": [[41, "index-1"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [184, "index-2"], [184, "index-3"], [450, "envvar-PYTHONMALLOC"], [450, "index-43"], [451, "index-34"], [474, "index-27"], [474, "index-38"], [478, "index-284"]], "pymemallocatordomain (c type)": [[41, "c.PyMemAllocatorDomain"]], "pymemallocatorex (c type)": [[41, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[41, "c.PyMem_Calloc"]], "pymem_del (c function)": [[41, "c.PyMem_Del"]], "pymem_free (c function)": [[41, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[41, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[41, "c.PyMem_Malloc"]], "pymem_new (c macro)": [[41, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[41, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[41, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[41, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[41, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[41, "c.PyMem_Realloc"]], "pymem_resize (c macro)": [[41, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[41, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[41, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[41, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[41, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[41, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[41, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[41, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[41, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[41, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[41, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[41, "c.PyTraceMalloc_Untrack"]], "calloc()": [[41, "index-0"]], "free()": [[41, "index-0"]], "malloc()": [[41, "index-0"]], "realloc()": [[41, "index-0"]], "pymemoryview_check (c function)": [[42, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[42, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[42, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[42, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[42, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[42, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[42, "c.PyMemoryView_GetContiguous"]], "memoryview\uff08\u8a18\u61b6\u9ad4\u8996\u5716\uff09": [[42, "index-0"], [340, "index-40"]], "pyinstancemethod_check (c function)": [[43, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[43, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[43, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[43, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[43, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[43, "c.PyMethod_Check"]], "pymethod_function (c function)": [[43, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[43, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[43, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[43, "c.PyMethod_New"]], "pymethod_self (c function)": [[43, "c.PyMethod_Self"]], "pymethod_type (c var)": [[43, "c.PyMethod_Type"]], "instancemethod": [[43, "index-0"]], "method\uff08\u65b9\u6cd5\uff09": [[43, "index-1"], [86, "index-26"], [86, "index-34"], [86, "term-method"], [340, "index-61"], [423, "index-35"], [423, "index-41"], [425, "index-53"], [435, "index-0"]], "pep 3121": [[44, "index-10"], [465, "index-34"], [478, "index-151"]], "pep 451": [[44, "index-7"], [86, "index-92"], [246, "index-6"], [298, "index-10"], [298, "index-11"], [320, "index-3"], [320, "index-5"], [320, "index-8"], [348, "index-20"], [427, "index-26"], [467, "index-112"], [469, "index-34"], [472, "index-23"], [472, "index-3"], [473, "index-27"], [478, "index-283"], [478, "index-43"]], "pymoduledef (c type)": [[44, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[44, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[44, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[44, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[44, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[44, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[44, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[44, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[44, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[44, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[44, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[44, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[44, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[44, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[44, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[44, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[44, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c macro)": [[44, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[44, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[44, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[44, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c macro)": [[44, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[44, "c.PyModule_AddType"]], "pymodule_check (c function)": [[44, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[44, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[44, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[44, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[44, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[44, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[44, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[44, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[44, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[44, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[44, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[44, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[44, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[44, "c.PyModule_GetState"]], "pymodule_new (c function)": [[44, "c.PyModule_New"]], "pymodule_newobject (c function)": [[44, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[44, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[44, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[44, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[44, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[44, "c.PyState_RemoveModule"]], "py_mod_create (c macro)": [[44, "c.Py_mod_create"]], "py_mod_create.create_module (c function)": [[44, "c.Py_mod_create.create_module"]], "py_mod_exec (c macro)": [[44, "c.Py_mod_exec"]], "py_mod_exec.exec_module (c function)": [[44, "c.Py_mod_exec.exec_module"]], "py_mod_multiple_interpreters (c macro)": [[44, "c.Py_mod_multiple_interpreters"]], "py_mod_multiple_interpreters.py_mod_multiple_interpreters_not_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"]], "py_mod_multiple_interpreters.py_mod_multiple_interpreters_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"]], "py_mod_multiple_interpreters.py_mod_per_interpreter_gil_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "systemerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[44, "index-4"], [44, "index-5"]], "__dict__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-3"]], "__doc__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "__file__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"], [44, "index-5"]], "__loader__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "__name__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"], [44, "index-4"]], "__package__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "object\uff08\u6a21\u7d44\uff09": [[44, "index-0"]], "none": [[45, "index-0"], [423, "index-6"], [431, "index-3"]], "py_none (c var)": [[45, "c.Py_None"]], "py_return_none (c macro)": [[45, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[46, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[46, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[46, "c.PyNumber_Add"]], "pynumber_and (c function)": [[46, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[46, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[46, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[46, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[46, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[46, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[46, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[46, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[46, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[46, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[46, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[46, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[46, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[46, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[46, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[46, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[46, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[46, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[46, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[46, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[46, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[46, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[46, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[46, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[46, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[46, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[46, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[46, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[46, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[46, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[46, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[46, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[46, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[46, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[46, "c.PyNumber_Xor"]], "abs": [[46, "index-2"], [423, "index-100"]], "divmod": [[46, "index-0"], [423, "index-97"], [423, "index-98"]], "float": [[46, "index-5"], [340, "index-13"], [423, "index-101"]], "int": [[46, "index-4"], [340, "index-13"], [423, "index-101"]], "pow": [[46, "index-1"], [46, "index-3"], [423, "index-97"], [423, "index-98"], [423, "index-99"]], "pyobject_ascharbuffer (c function)": [[47, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[47, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[47, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[47, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[48, "index-4"], [48, "index-5"], [113, "index-4"], [157, "index-7"], [423, "index-91"], [463, "index-16"]], "pyobject_ascii (c function)": [[48, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[48, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[48, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[48, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[48, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[48, "c.PyObject_Dir"]], "pyobject_format (c function)": [[48, "c.PyObject_Format"]], "pyobject_genericgetattr (c function)": [[48, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[48, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[48, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[48, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[48, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[48, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[48, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[48, "c.PyObject_GetItem"]], "pyobject_getitemdata (c function)": [[48, "c.PyObject_GetItemData"]], "pyobject_getiter (c function)": [[48, "c.PyObject_GetIter"]], "pyobject_gettypedata (c function)": [[48, "c.PyObject_GetTypeData"]], "pyobject_hasattr (c function)": [[48, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[48, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[48, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[48, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[48, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[48, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[48, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[48, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[48, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[48, "c.PyObject_Not"]], "pyobject_print (c function)": [[48, "c.PyObject_Print"]], "pyobject_repr (c function)": [[48, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[48, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[48, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[48, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[48, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[48, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[48, "c.PyObject_Size"]], "pyobject_str (c function)": [[48, "c.PyObject_Str"]], "pyobject_str\uff08c \u51fd\u5f0f\uff09": [[48, "index-2"]], "pyobject_type (c function)": [[48, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[48, "c.PyObject_TypeCheck"]], "pytype_gettypedatasize (c function)": [[48, "c.PyType_GetTypeDataSize"]], "py_notimplemented (c var)": [[48, "c.Py_NotImplemented"]], "py_return_notimplemented (c macro)": [[48, "c.Py_RETURN_NOTIMPLEMENTED"]], "_pyobject_getdictptr (c function)": [[48, "c._PyObject_GetDictPtr"]], "ascii": [[48, "index-1"], [429, "index-1"], [430, "index-17"]], "bulit-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[48, "index-0"], [48, "index-1"], [48, "index-3"], [48, "index-6"], [48, "index-7"], [48, "index-8"]], "hash\uff08\u96dc\u6e4a\uff09": [[48, "index-6"], [62, "index-2"], [340, "index-22"], [423, "index-77"]], "repr": [[48, "index-0"], [62, "index-1"], [74, "index-3"], [431, "index-3"]], "string\uff08\u5b57\u4e32\uff09": [[48, "index-2"], [74, "index-3"], [221, "index-11"], [221, "index-4"], [262, "index-6"], [340, "index-28"], [340, "index-30"], [340, "index-32"], [340, "index-35"], [423, "index-18"], [423, "index-73"], [423, "index-75"], [425, "index-42"], [425, "index-43"], [425, "index-45"], [430, "index-25"], [431, "index-3"]], "pyunstable_perfmapstate_fini (c function)": [[50, "c.PyUnstable_PerfMapState_Fini"]], "pyunstable_perfmapstate_init (c function)": [[50, "c.PyUnstable_PerfMapState_Init"]], "pyunstable_writeperfmapentry (c function)": [[50, "c.PyUnstable_WritePerfMapEntry"]], "py_clear (c function)": [[51, "c.Py_CLEAR"]], "py_decref (c function)": [[51, "c.Py_DECREF"], [51, "c.Py_DecRef"]], "py_incref (c function)": [[51, "c.Py_INCREF"], [51, "c.Py_IncRef"]], "py_newref (c function)": [[51, "c.Py_NewRef"]], "py_refcnt (c function)": [[51, "c.Py_REFCNT"]], "py_setref (c macro)": [[51, "c.Py_SETREF"]], "py_set_refcnt (c function)": [[51, "c.Py_SET_REFCNT"]], "py_xdecref (c function)": [[51, "c.Py_XDECREF"]], "py_xincref (c function)": [[51, "c.Py_XINCREF"]], "py_xnewref (c function)": [[51, "c.Py_XNewRef"]], "py_xsetref (c macro)": [[51, "c.Py_XSETREF"]], "pyeval_getbuiltins (c function)": [[52, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[52, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[52, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[52, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[52, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[52, "c.PyEval_GetLocals"]], "pysequence_check (c function)": [[53, "c.PySequence_Check"]], "pysequence_concat (c function)": [[53, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[53, "c.PySequence_Contains"]], "pysequence_count (c function)": [[53, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[53, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[53, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[53, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[53, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[53, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[53, "c.PySequence_Fast_ITEMS"]], "pysequence_getitem (c function)": [[53, "c.PySequence_GetItem"]], "pysequence_getslice (c function)": [[53, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[53, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[53, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[53, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[53, "c.PySequence_Index"]], "pysequence_length (c function)": [[53, "c.PySequence_Length"]], "pysequence_list (c function)": [[53, "c.PySequence_List"]], "pysequence_repeat (c function)": [[53, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[53, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[53, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[53, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[53, "c.PySequence_Tuple"]], "built-in function\uff08\u5185\u5efa\u51fd\u5f0f\uff09": [[53, "index-0"], [53, "index-1"]], "tuple\uff08\u5143\u7ec4\uff09": [[53, "index-1"]], "pyanyset_check (c function)": [[54, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[54, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[54, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[54, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[54, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[54, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[54, "c.PySetObject"]], "pyset_add (c function)": [[54, "c.PySet_Add"]], "pyset_check (c function)": [[54, "c.PySet_Check"]], "pyset_checkexact (c function)": [[54, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[54, "c.PySet_Clear"]], "pyset_contains (c function)": [[54, "c.PySet_Contains"]], "pyset_discard (c function)": [[54, "c.PySet_Discard"]], "pyset_get_size (c function)": [[54, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[54, "c.PySet_New"]], "pyset_pop (c function)": [[54, "c.PySet_Pop"]], "pyset_size (c function)": [[54, "c.PySet_Size"]], "pyset_type (c var)": [[54, "c.PySet_Type"]], "frozenset\uff08\u51cd\u7d50\u96c6\u5408\uff09": [[54, "index-0"], [423, "index-28"]], "set\uff08\u96c6\u5408\uff09": [[54, "index-0"], [340, "index-51"], [423, "index-27"], [425, "index-16"]], "pyslice_adjustindices (c function)": [[55, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[55, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[55, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[55, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[55, "c.PySlice_New"]], "pyslice_type (c var)": [[55, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[55, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[55, "c.Py_Ellipsis"]], "pep 387": [[56, "index-3"], [209, "index-10"], [209, "index-11"]], "pyunstable": [[56, "index-1"]], "py_limited_api (c macro)": [[56, "c.Py_LIMITED_API"]], "meth_class (c macro)": [[57, "c.METH_CLASS"]], "meth_coexist (c macro)": [[57, "c.METH_COEXIST"]], "meth_fastcall (c macro)": [[57, "c.METH_FASTCALL"]], "meth_keywords (c macro)": [[57, "c.METH_KEYWORDS"]], "meth_method (c macro)": [[57, "c.METH_METHOD"]], "meth_noargs (c macro)": [[57, "c.METH_NOARGS"]], "meth_o (c macro)": [[57, "c.METH_O"]], "meth_static (c macro)": [[57, "c.METH_STATIC"]], "meth_varargs (c macro)": [[57, "c.METH_VARARGS"]], "pycfunction (c type)": [[57, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[57, "c.PyCFunctionWithKeywords"]], "pycmethod (c type)": [[57, "c.PyCMethod"]], "pygetsetdef (c type)": [[57, "c.PyGetSetDef"]], "pygetsetdef.closure (c member)": [[57, "c.PyGetSetDef.closure"]], "pygetsetdef.doc (c member)": [[57, "c.PyGetSetDef.doc"]], "pygetsetdef.get (c member)": [[57, "c.PyGetSetDef.get"]], "pygetsetdef.name (c member)": [[57, "c.PyGetSetDef.name"]], "pygetsetdef.set (c member)": [[57, "c.PyGetSetDef.set"]], "pymemberdef (c type)": [[57, "c.PyMemberDef"]], "pymemberdef.doc (c member)": [[57, "c.PyMemberDef.doc"]], "pymemberdef.flags (c member)": [[57, "c.PyMemberDef.flags"]], "pymemberdef.name (c member)": [[57, "c.PyMemberDef.name"]], "pymemberdef.offset (c member)": [[57, "c.PyMemberDef.offset"]], "pymemberdef.type (c member)": [[57, "c.PyMemberDef.type"]], "pymember_getone (c function)": [[57, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[57, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[57, "c.PyMethodDef"]], "pymethoddef.ml_doc (c member)": [[57, "c.PyMethodDef.ml_doc"]], "pymethoddef.ml_flags (c member)": [[57, "c.PyMethodDef.ml_flags"]], "pymethoddef.ml_meth (c member)": [[57, "c.PyMethodDef.ml_meth"]], "pymethoddef.ml_name (c member)": [[57, "c.PyMethodDef.ml_name"]], "pyobject (c type)": [[57, "c.PyObject"]], "pyobject_head (c macro)": [[57, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[57, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[57, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[57, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[57, "c.PyVarObject_HEAD_INIT"]], "py_audit_read (c macro)": [[57, "c.Py_AUDIT_READ"]], "py_is_type (c function)": [[57, "c.Py_IS_TYPE"]], "py_is (c function)": [[57, "c.Py_Is"]], "py_isfalse (c function)": [[57, "c.Py_IsFalse"]], "py_isnone (c function)": [[57, "c.Py_IsNone"]], "py_istrue (c function)": [[57, "c.Py_IsTrue"]], "py_readonly (c macro)": [[57, "c.Py_READONLY"]], "py_relative_offset (c macro)": [[57, "c.Py_RELATIVE_OFFSET"]], "py_set_size (c function)": [[57, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[57, "c.Py_SET_TYPE"]], "py_size (c function)": [[57, "c.Py_SIZE"]], "py_type (c function)": [[57, "c.Py_TYPE"]], "py_t_bool (c macro)": [[57, "c.Py_T_BOOL"]], "py_t_byte (c macro)": [[57, "c.Py_T_BYTE"]], "py_t_char (c macro)": [[57, "c.Py_T_CHAR"]], "py_t_double (c macro)": [[57, "c.Py_T_DOUBLE"]], "py_t_float (c macro)": [[57, "c.Py_T_FLOAT"]], "py_t_int (c macro)": [[57, "c.Py_T_INT"]], "py_t_long (c macro)": [[57, "c.Py_T_LONG"]], "py_t_longlong (c macro)": [[57, "c.Py_T_LONGLONG"]], "py_t_object_ex (c macro)": [[57, "c.Py_T_OBJECT_EX"]], "py_t_pyssizet (c macro)": [[57, "c.Py_T_PYSSIZET"]], "py_t_short (c macro)": [[57, "c.Py_T_SHORT"]], "py_t_string (c macro)": [[57, "c.Py_T_STRING"]], "py_t_string_inplace (c macro)": [[57, "c.Py_T_STRING_INPLACE"]], "py_t_ubyte (c macro)": [[57, "c.Py_T_UBYTE"]], "py_t_uint (c macro)": [[57, "c.Py_T_UINT"]], "py_t_ulong (c macro)": [[57, "c.Py_T_ULONG"]], "py_t_ulonglong (c macro)": [[57, "c.Py_T_ULONGLONG"]], "py_t_ushort (c macro)": [[57, "c.Py_T_USHORT"]], "readonly": [[57, "index-3"]], "read_restricted": [[57, "index-2"]], "restricted": [[57, "index-2"]], "t_bool": [[57, "index-4"]], "t_byte": [[57, "index-4"]], "t_char": [[57, "index-4"]], "t_double": [[57, "index-4"]], "t_float": [[57, "index-4"]], "t_int": [[57, "index-4"]], "t_long": [[57, "index-4"]], "t_longlong": [[57, "index-4"]], "t_none (c macro)": [[57, "c.T_NONE"]], "t_object (c macro)": [[57, "c.T_OBJECT"]], "t_object_ex": [[57, "index-4"]], "t_pyssizet": [[57, "index-4"]], "t_short": [[57, "index-4"]], "t_string": [[57, "index-4"]], "t_string_inplace": [[57, "index-4"]], "t_ubyte": [[57, "index-4"]], "t_uint": [[57, "index-4"]], "t_ulong": [[57, "index-4"]], "t_ulongulong": [[57, "index-4"]], "t_ushort": [[57, "index-4"]], "write_restricted": [[57, "index-2"]], "_pycfunctionfast (c type)": [[57, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[57, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[57, "index-0"]], "staticmethod": [[57, "index-1"]], "structmember.h": [[57, "index-4"]], "pep 578": [[58, "index-0"], [139, "index-3"], [348, "index-42"], [476, "index-33"]], "pyos_afterfork (c function)": [[58, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[58, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[58, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[58, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[58, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[58, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[58, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[58, "c.PyOS_setsig"]], "pysys_addaudithook (c function)": [[58, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[58, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[58, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[58, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[58, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[58, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[58, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[58, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[58, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[58, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[58, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[58, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[58, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[58, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[58, "c.Py_AtExit"]], "py_decodelocale (c function)": [[58, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[58, "c.Py_EncodeLocale"]], "py_exit (c function)": [[58, "c.Py_Exit"]], "py_fatalerror (c function)": [[58, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[58, "c.Py_FdIsInteractive"]], "abort()": [[58, "index-1"]], "cleanup functions\uff08\u6e05\u7406\u51fd\u5f0f\uff09": [[58, "index-3"]], "exit()": [[58, "index-2"]], "pystructsequence_desc (c type)": [[59, "c.PyStructSequence_Desc"]], "pystructsequence_desc.doc (c member)": [[59, "c.PyStructSequence_Desc.doc"]], "pystructsequence_desc.fields (c member)": [[59, "c.PyStructSequence_Desc.fields"]], "pystructsequence_desc.n_in_sequence (c member)": [[59, "c.PyStructSequence_Desc.n_in_sequence"]], "pystructsequence_desc.name (c member)": [[59, "c.PyStructSequence_Desc.name"]], "pystructsequence_field (c type)": [[59, "c.PyStructSequence_Field"]], "pystructsequence_field.doc (c member)": [[59, "c.PyStructSequence_Field.doc"]], "pystructsequence_field.name (c member)": [[59, "c.PyStructSequence_Field.name"]], "pystructsequence_get_item (c function)": [[59, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[59, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[59, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[59, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[59, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[59, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[59, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[59, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[59, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[59, "c.PyTupleObject"]], "pytuple_check (c function)": [[59, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[59, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[59, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[59, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[59, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[59, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[59, "c.PyTuple_New"]], "pytuple_pack (c function)": [[59, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[59, "c.PyTuple_SET_ITEM"]], "pytuple_setitem (c function)": [[59, "c.PyTuple_SetItem"]], "pytuple_size (c function)": [[59, "c.PyTuple_Size"]], "pytuple_type (c var)": [[59, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[59, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[60, "c.PyTypeObject"]], "pytype_addwatcher (c function)": [[60, "c.PyType_AddWatcher"]], "pytype_check (c function)": [[60, "c.PyType_Check"]], "pytype_checkexact (c function)": [[60, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[60, "c.PyType_ClearCache"]], "pytype_clearwatcher (c function)": [[60, "c.PyType_ClearWatcher"]], "pytype_frommetaclass (c function)": [[60, "c.PyType_FromMetaclass"]], "pytype_frommoduleandspec (c function)": [[60, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[60, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[60, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[60, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[60, "c.PyType_GenericNew"]], "pytype_getdict (c function)": [[60, "c.PyType_GetDict"]], "pytype_getflags (c function)": [[60, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[60, "c.PyType_GetModule"]], "pytype_getmodulebydef (c function)": [[60, "c.PyType_GetModuleByDef"]], "pytype_getmodulestate (c function)": [[60, "c.PyType_GetModuleState"]], "pytype_getname (c function)": [[60, "c.PyType_GetName"]], "pytype_getqualname (c function)": [[60, "c.PyType_GetQualName"]], "pytype_getslot (c function)": [[60, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[60, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[60, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[60, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[60, "c.PyType_Modified"]], "pytype_ready (c function)": [[60, "c.PyType_Ready"]], "pytype_slot (c type)": [[60, "c.PyType_Slot"]], "pytype_slot.pfunc (c member)": [[60, "c.PyType_Slot.pfunc"]], "pytype_slot.slot (c member)": [[60, "c.PyType_Slot.slot"]], "pytype_spec (c type)": [[60, "c.PyType_Spec"]], "pytype_spec.basicsize (c member)": [[60, "c.PyType_Spec.basicsize"]], "pytype_spec.flags (c member)": [[60, "c.PyType_Spec.flags"]], "pytype_spec.itemsize (c member)": [[60, "c.PyType_Spec.itemsize"]], "pytype_spec.name (c member)": [[60, "c.PyType_Spec.name"]], "pytype_spec.slots (c member)": [[60, "c.PyType_Spec.slots"]], "pytype_type (c var)": [[60, "c.PyType_Type"]], "pytype_watch (c function)": [[60, "c.PyType_Watch"]], "pytype_watchcallback (c type)": [[60, "c.PyType_WatchCallback"]], "pyunstable_type_assignversiontag (c function)": [[60, "c.PyUnstable_Type_AssignVersionTag"]], "py_genericalias (c function)": [[61, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[61, "c.Py_GenericAliasType"]], "pep 442": [[62, "index-5"], [74, "index-2"], [223, "index-2"], [472, "index-15"], [472, "index-16"], [472, "index-45"], [472, "index-46"], [477, "index-20"], [478, "index-208"]], "pep 634": [[62, "index-3"], [62, "index-4"], [109, "index-1"], [422, "index-19"], [422, "index-25"], [423, "index-105"], [467, "index-80"], [467, "index-95"], [478, "index-109"], [478, "index-54"], [478, "index-97"]], "pyasyncmethods (c type)": [[62, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[62, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[62, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[62, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[62, "c.PyAsyncMethods.am_send"]], "pybufferprocs (c type)": [[62, "c.PyBufferProcs"]], "pybufferprocs.bf_getbuffer (c member)": [[62, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[62, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[62, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[62, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[62, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[62, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[62, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[62, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[62, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[62, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[62, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[62, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[62, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[62, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[62, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[62, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[62, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[62, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[62, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[62, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[62, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[62, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[62, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[62, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[62, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[62, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[62, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[62, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[62, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[62, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[62, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[62, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[62, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[62, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[62, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[62, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[62, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[62, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[62, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[62, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[62, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[62, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[62, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[62, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[62, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[62, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[62, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[62, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[62, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[62, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[62, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[62, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[62, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[62, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[62, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[62, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[62, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[62, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[62, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[62, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[62, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[62, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[62, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[62, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[62, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[62, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[62, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[62, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[62, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[62, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[62, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[62, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[62, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[62, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[62, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[62, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[62, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[62, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[62, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[62, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[62, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[62, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[62, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[62, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[62, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[62, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[62, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[62, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[62, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[62, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[62, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[62, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[62, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[62, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_setattr (c member)": [[62, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[62, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[62, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[62, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[62, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[62, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[62, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[62, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_watched (c member)": [[62, "c.PyTypeObject.tp_watched"]], "pytypeobject.tp_weaklist (c member)": [[62, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[62, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[62, "c.PyVarObject.ob_size"]], "py_eq (c macro)": [[62, "c.Py_EQ"]], "py_ge (c macro)": [[62, "c.Py_GE"]], "py_gt (c macro)": [[62, "c.Py_GT"]], "py_le (c macro)": [[62, "c.Py_LE"]], "py_lt (c macro)": [[62, "c.Py_LT"]], "py_ne (c macro)": [[62, "c.Py_NE"]], "py_return_richcompare (c macro)": [[62, "c.Py_RETURN_RICHCOMPARE"]], "py_tpflags_basetype (c macro)": [[62, "c.Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (c macro)": [[62, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (c macro)": [[62, "c.Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (c macro)": [[62, "c.Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (c macro)": [[62, "c.Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (c macro)": [[62, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (c macro)": [[62, "c.Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (c macro)": [[62, "c.Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (c macro)": [[62, "c.Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (c macro)": [[62, "c.Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (c macro)": [[62, "c.Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_items_at_end (c macro)": [[62, "c.Py_TPFLAGS_ITEMS_AT_END"]], "py_tpflags_list_subclass (c macro)": [[62, "c.Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (c macro)": [[62, "c.Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_managed_dict (c macro)": [[62, "c.Py_TPFLAGS_MANAGED_DICT"]], "py_tpflags_managed_weakref (c macro)": [[62, "c.Py_TPFLAGS_MANAGED_WEAKREF"]], "py_tpflags_mapping (c macro)": [[62, "c.Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (c macro)": [[62, "c.Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (c macro)": [[62, "c.Py_TPFLAGS_READY"]], "py_tpflags_readying (c macro)": [[62, "c.Py_TPFLAGS_READYING"]], "py_tpflags_sequence (c macro)": [[62, "c.Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (c macro)": [[62, "c.Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (c macro)": [[62, "c.Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (c macro)": [[62, "c.Py_TPFLAGS_UNICODE_SUBCLASS"]], "py_tpflags_valid_version_tag (c macro)": [[62, "c.Py_TPFLAGS_VALID_VERSION_TAG"]], "allocfunc (c type)": [[62, "c.allocfunc"]], "binaryfunc (c type)": [[62, "c.binaryfunc"]], "descrgetfunc (c type)": [[62, "c.descrgetfunc"]], "descrsetfunc (c type)": [[62, "c.descrsetfunc"]], "destructor (c type)": [[62, "c.destructor"]], "freefunc (c type)": [[62, "c.freefunc"]], "getattrfunc (c type)": [[62, "c.getattrfunc"]], "getattrofunc (c type)": [[62, "c.getattrofunc"]], "getbufferproc (c type)": [[62, "c.getbufferproc"]], "getiterfunc (c type)": [[62, "c.getiterfunc"]], "hashfunc (c type)": [[62, "c.hashfunc"]], "initproc (c type)": [[62, "c.initproc"]], "iternextfunc (c type)": [[62, "c.iternextfunc"]], "lenfunc (c type)": [[62, "c.lenfunc"]], "newfunc (c type)": [[62, "c.newfunc"]], "objobjargproc (c type)": [[62, "c.objobjargproc"]], "objobjproc (c type)": [[62, "c.objobjproc"]], "releasebufferproc (c type)": [[62, "c.releasebufferproc"]], "reprfunc (c type)": [[62, "c.reprfunc"]], "richcmpfunc (c type)": [[62, "c.richcmpfunc"]], "sendfunc (c type)": [[62, "c.sendfunc"]], "setattrfunc (c type)": [[62, "c.setattrfunc"]], "setattrofunc (c type)": [[62, "c.setattrofunc"]], "ssizeargfunc (c type)": [[62, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[62, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[62, "c.ternaryfunc"]], "unaryfunc (c type)": [[62, "c.unaryfunc"]], "pep 383": [[63, "index-2"], [63, "index-3"], [63, "index-4"], [154, "index-2"], [333, "index-1"], [478, "index-60"]], "pep 393": [[63, "index-0"], [154, "index-5"], [348, "index-19"], [467, "index-118"], [471, "index-30"], [471, "index-32"], [471, "index-33"], [471, "index-34"], [471, "index-38"], [471, "index-6"], [471, "index-7"], [471, "index-8"], [477, "index-25"], [477, "index-26"], [478, "index-95"]], "pep 623": [[63, "index-1"], [467, "index-91"], [469, "index-23"], [469, "index-3"], [469, "index-43"], [478, "index-108"], [478, "index-110"], [478, "index-63"]], "pyasciiobject (c type)": [[63, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[63, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[63, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[63, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[63, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[63, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[63, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[63, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[63, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_asasciistring (c function)": [[63, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[63, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[63, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[63, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[63, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[63, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[63, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[63, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[63, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[63, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[63, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[63, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[63, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicodeescapestring (c function)": [[63, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[63, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[63, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[63, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[63, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[63, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[63, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[63, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[63, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[63, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[63, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[63, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[63, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[63, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[63, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[63, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[63, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[63, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[63, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[63, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[63, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[63, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[63, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[63, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[63, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[63, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[63, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[63, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[63, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[63, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[63, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[63, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encodecodepage (c function)": [[63, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[63, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelocale (c function)": [[63, "c.PyUnicode_EncodeLocale"]], "pyunicode_fsconverter (c function)": [[63, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[63, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[63, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[63, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[63, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[63, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[63, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[63, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[63, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[63, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[63, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[63, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[63, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromwidechar (c function)": [[63, "c.PyUnicode_FromWideChar"]], "pyunicode_get_length (c function)": [[63, "c.PyUnicode_GET_LENGTH"]], "pyunicode_getlength (c function)": [[63, "c.PyUnicode_GetLength"]], "pyunicode_internfromstring (c function)": [[63, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[63, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[63, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[63, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[63, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c function)": [[63, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[63, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[63, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[63, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[63, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[63, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[63, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[63, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[63, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[63, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[63, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[63, "c.PyUnicode_Tailmatch"]], "pyunicode_translate (c function)": [[63, "c.PyUnicode_Translate"]], "pyunicode_type (c var)": [[63, "c.PyUnicode_Type"]], "pyunicode_write (c function)": [[63, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[63, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[63, "c.Py_UCS1"]], "py_ucs2 (c type)": [[63, "c.Py_UCS2"]], "py_ucs4 (c type)": [[63, "c.Py_UCS4"]], "py_unicode (c type)": [[63, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[63, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[63, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[63, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[63, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[63, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[63, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[63, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[63, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[63, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[63, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[63, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c function)": [[63, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c function)": [[63, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c function)": [[63, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c function)": [[63, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[63, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[63, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[63, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[63, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[63, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[63, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[65, "c.CO_FUTURE_DIVISION"]], "pep 238": [[65, "index-3"], [86, "index-93"], [110, "index-24"], [459, "index-11"], [459, "index-12"], [459, "index-13"], [465, "index-2"]], "pycompilerflags (c struct)": [[65, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[65, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[65, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[65, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[65, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[65, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[65, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[65, "c.PyEval_MergeCompilerFlags"]], "pyos_inputhook (c var)": [[65, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[65, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[65, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[65, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[65, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[65, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[65, "c.PyRun_File"]], "pyrun_fileex (c function)": [[65, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[65, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[65, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[65, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[65, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[65, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[65, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[65, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[65, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[65, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[65, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[65, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[65, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[65, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[65, "c.Py_BytesMain"]], "py_compilestring (c function)": [[65, "c.Py_CompileString"]], "py_compilestring()": [[65, "index-0"], [65, "index-1"], [65, "index-2"]], "py_compilestringexflags (c function)": [[65, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[65, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[65, "c.Py_CompileStringObject"]], "py_main (c function)": [[65, "c.Py_Main"]], "py_eval_input (c var)": [[65, "c.Py_eval_input"]], "py_file_input (c var)": [[65, "c.Py_file_input"]], "py_single_input (c var)": [[65, "c.Py_single_input"]], "pyobject_clearweakrefs (c function)": [[66, "c.PyObject_ClearWeakRefs"]], "pyweakref_check (c function)": [[66, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[66, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[66, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[66, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[66, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[66, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[66, "c.PyWeakref_NewRef"]], "pep 3101": [[67, "index-23"], [341, "index-0"], [341, "index-1"], [463, "index-9"], [465, "index-23"], [465, "index-24"], [479, "index-23"]], "rfc": [[67, "index-12"], [99, "index-0"], [100, "index-0"], [100, "index-1"], [100, "index-2"], [100, "index-3"], [100, "index-4"], [100, "index-5"], [107, "index-1"], [107, "index-2"], [107, "index-5"], [123, "index-3"], [123, "index-4"], [140, "index-10"], [140, "index-11"], [140, "index-12"], [140, "index-15"], [140, "index-16"], [140, "index-3"], [140, "index-4"], [140, "index-5"], [140, "index-6"], [140, "index-7"], [140, "index-8"], [140, "index-9"], [143, "index-1"], [143, "index-2"], [143, "index-3"], [154, "index-10"], [154, "index-11"], [154, "index-12"], [154, "index-13"], [154, "index-14"], [154, "index-6"], [154, "index-7"], [154, "index-8"], [154, "index-9"], [171, "index-6"], [190, "index-0"], [190, "index-1"], [190, "index-2"], [190, "index-3"], [190, "index-4"], [190, "index-5"], [190, "index-6"], [190, "index-7"], [192, "index-0"], [192, "index-1"], [192, "index-10"], [192, "index-11"], [192, "index-2"], [192, "index-3"], [192, "index-4"], [192, "index-5"], [192, "index-6"], [192, "index-7"], [192, "index-8"], [192, "index-9"], [193, "index-0"], [195, "index-0"], [196, "index-0"], [197, "index-0"], [197, "index-1"], [198, "index-0"], [198, "index-1"], [198, "index-10"], [198, "index-11"], [198, "index-12"], [198, "index-13"], [198, "index-2"], [198, "index-3"], [198, "index-4"], [198, "index-5"], [198, "index-6"], [198, "index-7"], [198, "index-8"], [198, "index-9"], [199, "index-0"], [199, "index-1"], [199, "index-10"], [199, "index-11"], [199, "index-12"], [199, "index-13"], [199, "index-14"], [199, "index-2"], [199, "index-3"], [199, "index-4"], [199, "index-5"], [199, "index-6"], [199, "index-7"], [199, "index-8"], [199, "index-9"], [201, "index-0"], [201, "index-1"], [201, "index-10"], [201, "index-2"], [201, "index-3"], [201, "index-4"], [201, "index-5"], [201, "index-6"], [201, "index-7"], [201, "index-8"], [201, "index-9"], [203, "index-0"], [203, "index-1"], [204, "index-0"], [204, "index-1"], [204, "index-2"], [204, "index-3"], [204, "index-4"], [204, "index-5"], [204, "index-6"], [204, "index-7"], [204, "index-8"], [204, "index-9"], [205, "index-0"], [205, "index-1"], [205, "index-10"], [205, "index-2"], [205, "index-3"], [205, "index-4"], [205, "index-5"], [205, "index-6"], [205, "index-7"], [205, "index-8"], [205, "index-9"], [219, "index-13"], [219, "index-14"], [219, "index-15"], [219, "index-16"], [219, "index-17"], [219, "index-18"], [226, "index-9"], [231, "index-1"], [231, "index-3"], [231, "index-5"], [233, "index-2"], [237, "index-152"], [237, "index-153"], [237, "index-154"], [237, "index-155"], [237, "index-156"], [237, "index-157"], [237, "index-158"], [237, "index-159"], [237, "index-160"], [237, "index-161"], [237, "index-162"], [237, "index-163"], [237, "index-164"], [237, "index-165"], [237, "index-166"], [237, "index-167"], [237, "index-168"], [237, "index-169"], [237, "index-170"], [237, "index-171"], [237, "index-172"], [237, "index-173"], [237, "index-174"], [237, "index-175"], [237, "index-176"], [237, "index-177"], [237, "index-178"], [237, "index-179"], [237, "index-180"], [237, "index-181"], [237, "index-182"], [237, "index-183"], [237, "index-184"], [237, "index-185"], [237, "index-186"], [237, "index-187"], [237, "index-188"], [237, "index-189"], [237, "index-190"], [237, "index-191"], [237, "index-192"], [237, "index-193"], [237, "index-194"], [237, "index-195"], [237, "index-196"], [237, "index-197"], [237, "index-198"], [237, "index-199"], [237, "index-200"], [237, "index-201"], [237, "index-202"], [237, "index-203"], [237, "index-204"], [237, "index-205"], [237, "index-206"], [237, "index-207"], [237, "index-208"], [237, "index-209"], [237, "index-210"], [237, "index-211"], [237, "index-212"], [237, "index-213"], [237, "index-214"], [237, "index-215"], [237, "index-216"], [237, "index-217"], [237, "index-218"], [237, "index-219"], [237, "index-220"], [237, "index-221"], [237, "index-222"], [237, "index-223"], [237, "index-224"], [237, "index-225"], [237, "index-226"], [237, "index-76"], [238, "index-2"], [238, "index-3"], [238, "index-4"], [238, "index-5"], [238, "index-6"], [238, "index-7"], [239, "index-0"], [239, "index-1"], [239, "index-10"], [239, "index-11"], [239, "index-12"], [239, "index-13"], [239, "index-14"], [239, "index-15"], [239, "index-16"], [239, "index-17"], [239, "index-18"], [239, "index-19"], [239, "index-2"], [239, "index-20"], [239, "index-21"], [239, "index-22"], [239, "index-23"], [239, "index-24"], [239, "index-25"], [239, "index-3"], [239, "index-4"], [239, "index-5"], [239, "index-6"], [239, "index-7"], [239, "index-8"], [239, "index-9"], [240, "index-0"], [240, "index-1"], [240, "index-2"], [240, "index-3"], [240, "index-4"], [240, "index-5"], [240, "index-6"], [240, "index-7"], [241, "index-1"], [241, "index-2"], [244, "index-1"], [244, "index-2"], [244, "index-3"], [244, "index-4"], [244, "index-5"], [244, "index-6"], [244, "index-7"], [244, "index-8"], [250, "index-12"], [252, "index-12"], [255, "index-0"], [255, "index-1"], [255, "index-10"], [255, "index-11"], [255, "index-12"], [255, "index-13"], [255, "index-2"], [255, "index-3"], [255, "index-4"], [255, "index-5"], [255, "index-6"], [255, "index-7"], [255, "index-8"], [255, "index-9"], [258, "index-2"], [258, "index-3"], [258, "index-4"], [258, "index-7"], [258, "index-8"], [262, "index-4"], [262, "index-5"], [265, "index-0"], [267, "index-0"], [268, "index-1"], [268, "index-2"], [284, "index-10"], [284, "index-2"], [284, "index-3"], [284, "index-4"], [284, "index-5"], [284, "index-6"], [284, "index-7"], [284, "index-8"], [284, "index-9"], [301, "index-1"], [301, "index-2"], [301, "index-3"], [301, "index-4"], [301, "index-5"], [301, "index-6"], [313, "index-10"], [313, "index-11"], [313, "index-12"], [313, "index-9"], [323, "index-1"], [331, "index-1"], [331, "index-10"], [331, "index-11"], [331, "index-12"], [331, "index-2"], [331, "index-3"], [331, "index-4"], [331, "index-5"], [331, "index-6"], [331, "index-7"], [331, "index-8"], [331, "index-9"], [333, "index-15"], [333, "index-3"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-13"], [337, "index-16"], [337, "index-17"], [337, "index-18"], [337, "index-19"], [337, "index-20"], [337, "index-21"], [337, "index-22"], [337, "index-5"], [337, "index-6"], [337, "index-7"], [337, "index-8"], [337, "index-9"], [342, "index-0"], [342, "index-1"], [354, "index-2"], [354, "index-3"], [361, "index-10"], [361, "index-19"], [361, "index-20"], [361, "index-21"], [361, "index-22"], [388, "index-2"], [389, "index-1"], [389, "index-10"], [389, "index-11"], [389, "index-16"], [389, "index-17"], [389, "index-2"], [389, "index-3"], [389, "index-4"], [389, "index-5"], [389, "index-6"], [389, "index-7"], [389, "index-8"], [389, "index-9"], [390, "index-10"], [390, "index-19"], [390, "index-20"], [390, "index-21"], [390, "index-5"], [390, "index-6"], [390, "index-7"], [390, "index-8"], [393, "index-12"], [393, "index-19"], [393, "index-20"], [393, "index-21"], [393, "index-22"], [393, "index-23"], [393, "index-24"], [402, "index-10"], [402, "index-5"], [403, "index-2"], [403, "index-3"], [403, "index-4"], [403, "index-5"], [414, "index-0"], [446, "index-3"], [459, "index-17"], [459, "index-18"], [459, "index-19"], [459, "index-20"], [459, "index-21"], [461, "index-18"], [462, "index-22"], [462, "index-23"], [463, "index-22"], [463, "index-23"], [464, "index-10"], [464, "index-11"], [464, "index-13"], [470, "index-11"], [470, "index-12"], [470, "index-13"], [470, "index-7"], [470, "index-8"], [471, "index-26"], [471, "index-27"], [473, "index-31"], [473, "index-32"], [473, "index-33"], [473, "index-34"], [473, "index-35"], [473, "index-36"], [473, "index-37"], [473, "index-38"], [473, "index-39"], [473, "index-40"], [473, "index-41"], [473, "index-42"], [473, "index-43"], [473, "index-44"], [473, "index-51"], [475, "index-34"], [475, "index-35"], [477, "index-22"], [478, "index-176"], [478, "index-217"], [478, "index-31"], [478, "index-32"], [478, "index-33"], [478, "index-42"], [478, "index-83"], [478, "index-90"], [478, "index-92"]], "rfc 4122": [[67, "index-12"], [250, "index-12"], [252, "index-12"], [393, "index-12"], [393, "index-19"], [393, "index-20"], [393, "index-21"], [393, "index-22"], [393, "index-23"], [393, "index-24"], [462, "index-22"], [462, "index-23"]], "pyinit_modulename (c function)": [[70, "c.PyInit_modulename"]], "philbrick, geoff": [[72, "index-4"]], "pyarg_parsetuple()": [[72, "index-2"]], "pyarg_parsetupleandkeywords()": [[72, "index-3"]], "pyobject_callobject()": [[72, "index-1"]], "pyerr_fetch()": [[74, "index-1"]], "pyerr_restore()": [[74, "index-1"]], "deallocation": [[74, "index-0"]], "deallocation, object": [[74, "index-0"]], "finalization": [[74, "index-0"]], "finalization, of objects": [[74, "index-0"]], "object representation\uff08\u7269\u4ef6\u8868\u793a\uff09": [[74, "index-3"]], "pep 572": [[77, "index-2"], [422, "index-24"], [425, "index-21"], [425, "index-87"], [469, "index-19"], [476, "index-24"], [476, "index-31"], [478, "index-192"], [478, "index-205"], [478, "index-215"], [478, "index-29"]], "pep 5": [[79, "index-8"], [458, "index-6"]], "pep 6": [[79, "index-6"]], "pep 602": [[79, "index-7"], [477, "index-10"]], "tcl_library": [[80, "index-4"]], "tk_library": [[80, "index-5"]], "pep 8": [[84, "index-0"], [84, "index-2"], [85, "index-2"], [89, "index-2"], [221, "index-10"], [425, "index-79"], [436, "index-18"], [452, "index-0"], [465, "index-21"], [478, "index-240"], [478, "index-302"]], "argument\uff08\u5f15\u6578\uff09": [[84, "index-1"], [86, "term-argument"], [422, "index-31"], [423, "index-32"], [425, "index-47"]], "parameter\uff08\u53c3\u6578\uff09": [[84, "index-1"], [86, "term-parameter"], [422, "index-27"], [422, "index-31"], [425, "index-48"]], "\u8207 argument\uff08\u5f15\u6578\uff09\u7684\u5dee\u7570": [[84, "index-1"]], "\u8207 parameter\uff08\u53c3\u6578\uff09\u7684\u5dee\u7570": [[84, "index-1"]], "...": [[86, "term-..."], [164, "index-0"], [189, "index-0"], [189, "index-3"], [303, "index-0"], [317, "index-0"], [340, "index-66"], [348, "index-27"], [359, "index-0"], [423, "index-8"]], "2to3": [[86, "term-2to3"]], ">>>": [[86, "term-0"], [189, "index-0"], [348, "index-27"]], "bdfl": [[86, "term-BDFL"]], "cpython": [[86, "term-CPython"]], "eafp": [[86, "term-EAFP"]], "gil": [[86, "term-GIL"]], "idle": [[86, "term-IDLE"], [243, "index-0"]], "lbyl": [[86, "term-LBYL"]], "mro": [[86, "term-MRO"]], "pep": [[86, "term-PEP"]], "pep 1": [[86, "index-103"], [457, "index-0"], [457, "index-1"]], "pep 278": [[86, "index-109"], [460, "index-9"]], "pep 302": [[86, "index-90"], [86, "index-99"], [221, "index-14"], [246, "index-12"], [246, "index-13"], [246, "index-14"], [246, "index-16"], [246, "index-2"], [261, "index-1"], [298, "index-0"], [298, "index-2"], [298, "index-3"], [298, "index-5"], [298, "index-6"], [298, "index-7"], [320, "index-1"], [348, "index-25"], [348, "index-26"], [418, "index-2"], [427, "index-1"], [427, "index-18"], [460, "index-17"], [460, "index-18"], [460, "index-19"], [460, "index-6"], [462, "index-21"], [466, "index-2"], [471, "index-20"], [471, "index-21"], [471, "index-37"]], "pep 3116": [[86, "index-110"], [463, "index-14"], [466, "index-3"]], "pep 3155": [[86, "index-106"], [471, "index-15"]], "pep 343": [[86, "index-86"], [110, "index-26"], [165, "index-2"], [422, "index-17"], [423, "index-104"], [462, "index-10"], [462, "index-14"], [463, "index-3"]], "pep 362": [[86, "index-101"], [86, "index-79"], [251, "index-0"], [471, "index-17"]], "pep 411": [[86, "index-105"], [348, "index-13"], [348, "index-14"], [348, "index-31"], [348, "index-32"]], "pep 420": [[86, "index-100"], [86, "index-104"], [86, "index-91"], [246, "index-5"], [427, "index-14"], [427, "index-15"], [427, "index-19"], [427, "index-2"], [427, "index-20"], [427, "index-21"], [427, "index-6"], [471, "index-2"], [471, "index-3"], [478, "index-282"], [478, "index-289"]], "pep 443": [[86, "index-95"], [472, "index-11"], [472, "index-36"]], "pep 483": [[86, "index-96"], [381, "index-1"], [381, "index-3"], [473, "index-12"]], "pep 484": [[86, "index-107"], [86, "index-108"], [86, "index-111"], [86, "index-77"], [86, "index-94"], [86, "index-97"], [119, "index-2"], [119, "index-3"], [119, "index-5"], [119, "index-6"], [340, "index-57"], [381, "index-0"], [381, "index-109"], [381, "index-2"], [381, "index-26"], [381, "index-27"], [381, "index-41"], [381, "index-54"], [422, "index-37"], [423, "index-92"], [431, "index-17"], [436, "index-17"], [467, "index-101"], [467, "index-103"], [467, "index-99"], [468, "index-94"], [468, "index-95"], [469, "index-11"], [469, "index-12"], [469, "index-14"], [473, "index-10"], [473, "index-11"], [474, "index-5"], [475, "index-20"], [476, "index-10"], [476, "index-12"]], "pep 492": [[86, "index-80"], [86, "index-81"], [86, "index-83"], [86, "index-84"], [86, "index-85"], [86, "index-87"], [86, "index-88"], [157, "index-3"], [251, "index-1"], [251, "index-2"], [422, "index-50"], [423, "index-108"], [425, "index-30"], [473, "index-1"], [473, "index-2"], [473, "index-47"], [473, "index-52"], [474, "index-35"], [474, "index-9"], [478, "index-245"], [478, "index-279"], [478, "index-290"], [478, "index-294"]], "pep 498": [[86, "index-89"], [430, "index-26"], [474, "index-3"], [474, "index-4"], [478, "index-286"]], "pep 519": [[86, "index-102"], [474, "index-16"], [478, "index-270"], [478, "index-275"], [478, "index-276"], [478, "index-277"], [478, "index-278"], [478, "index-281"]], "pep 525": [[86, "index-82"], [157, "index-2"], [251, "index-3"], [348, "index-30"], [348, "index-43"], [425, "index-29"], [474, "index-10"], [478, "index-263"]], "pep 526": [[86, "index-112"], [86, "index-78"], [119, "index-4"], [119, "index-7"], [177, "index-1"], [177, "index-2"], [381, "index-34"], [381, "index-4"], [381, "index-48"], [381, "index-50"], [422, "index-38"], [431, "index-16"], [467, "index-107"], [474, "index-33"], [474, "index-6"], [475, "index-1"], [476, "index-11"], [478, "index-264"]], "pep 585": [[86, "index-98"], [157, "index-0"], [340, "index-58"], [380, "index-5"], [381, "index-59"], [381, "index-6"], [381, "index-61"], [381, "index-62"], [381, "index-63"], [381, "index-64"], [381, "index-65"], [381, "index-66"], [381, "index-67"], [381, "index-68"], [381, "index-69"], [381, "index-70"], [381, "index-71"], [381, "index-72"], [381, "index-73"], [381, "index-74"], [381, "index-75"], [381, "index-76"], [381, "index-77"], [381, "index-78"], [381, "index-79"], [381, "index-80"], [381, "index-81"], [381, "index-82"], [381, "index-83"], [381, "index-84"], [381, "index-85"], [381, "index-86"], [381, "index-87"], [381, "index-88"], [381, "index-89"], [381, "index-90"], [381, "index-91"], [381, "index-92"], [381, "index-93"], [381, "index-95"], [381, "index-96"], [381, "index-97"], [381, "index-98"], [381, "index-99"], [477, "index-13"], [477, "index-2"], [478, "index-30"], [478, "index-80"], [478, "index-84"]], "python 3000": [[86, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[86, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[86, "term-Zen-of-Python"]], "__future__": [[86, "term-__future__"], [110, "module-__future__"], [431, "index-40"]], "__slots__": [[86, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[86, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[86, "term-annotation"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[86, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[86, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[86, "term-asynchronous-generator"], [423, "index-39"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[86, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[86, "term-asynchronous-iterator"], [423, "index-39"]], "attribute\uff08\u5c6c\u6027\uff09": [[86, "term-attribute"], [423, "index-45"], [423, "index-46"], [423, "index-49"], [423, "index-5"], [423, "index-50"], [425, "index-39"], [431, "index-23"], [431, "index-4"], [431, "index-8"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[86, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u5236\u6a94\u6848\uff09": [[86, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[86, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[86, "term-bytecode"], [423, "index-55"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[86, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[86, "term-callable"], [423, "index-32"], [425, "index-47"]], "callback\uff08\u56de\u547c\uff09": [[86, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[86, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[86, "term-class"], [422, "index-40"], [423, "index-45"], [423, "index-46"], [423, "index-49"], [423, "index-70"], [423, "index-88"], [425, "index-54"], [431, "index-24"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[86, "term-context-manager"], [340, "index-54"], [423, "index-103"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[86, "term-context-variable"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[86, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[86, "term-coroutine"], [423, "index-107"], [423, "index-38"], [425, "index-24"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[86, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[86, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[86, "term-dictionary-view"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[86, "term-docstring"], [422, "index-40"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[86, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[86, "term-expression"], [422, "index-35"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[86, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[86, "term-f-string"], [430, "index-25"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[86, "term-file-object"], [221, "index-5"], [254, "index-0"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[86, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[86, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[86, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[86, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[86, "term-function-annotation"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[86, "term-garbage-collection"], [423, "index-2"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[86, "index-20"], [86, "term-generator-expression"], [425, "index-22"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[86, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[86, "index-19"], [86, "term-generator"], [423, "index-37"], [423, "index-57"], [425, "index-22"], [425, "index-23"], [425, "index-31"], [431, "index-26"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[86, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[86, "term-generic-type"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[86, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[86, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[86, "term-immutable"]], "import path\uff08\u5f15\u5165\u8def\u5f91\uff09": [[86, "term-import-path"]], "importer\uff08\u5f15\u5165\u5668\uff09": [[86, "term-importer"]], "importing\uff08\u5f15\u5165\uff09": [[86, "term-importing"], [431, "index-34"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[86, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[86, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[86, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[86, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[86, "term-iterator"], [340, "index-18"], [431, "index-26"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[86, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[86, "term-keyword-argument"]], "lambda": [[86, "term-lambda"], [422, "index-35"], [425, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-list-comprehension"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[86, "term-loader"], [427, "index-8"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[86, "term-locale-encoding"]], "magic": [[86, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[86, "term-magic-method"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[86, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[86, "term-metaclass"], [423, "index-83"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[86, "term-method-resolution-order"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[86, "term-module-spec"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[86, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[86, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[86, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[86, "term-namespace"], [423, "index-34"], [423, "index-43"], [424, "index-3"], [427, "index-5"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[86, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[86, "term-new-style-class"]], "package\uff08\u5957\u4ef6\uff09": [[86, "term-package"], [330, "index-4"], [427, "index-3"], [427, "index-4"], [427, "index-5"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[86, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[86, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[86, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[86, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[86, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[86, "term-portion"], [427, "index-5"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[86, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[86, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[86, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[86, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[86, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[86, "term-regular-package"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[86, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[86, "term-slice"], [187, "index-1"], [340, "index-20"], [340, "index-24"], [423, "index-16"], [423, "index-22"], [423, "index-66"], [423, "index-96"], [425, "index-44"], [431, "index-12"]], "special": [[86, "index-34"], [423, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[86, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[86, "term-statement"], [209, "index-0"], [209, "index-1"], [209, "index-3"], [221, "index-13"], [330, "index-2"], [340, "index-1"], [340, "index-24"], [340, "index-52"], [422, "index-0"], [422, "index-13"], [422, "index-15"], [422, "index-16"], [422, "index-18"], [422, "index-28"], [422, "index-3"], [422, "index-4"], [422, "index-4"], [422, "index-40"], [422, "index-46"], [422, "index-48"], [422, "index-49"], [422, "index-5"], [422, "index-6"], [422, "index-6"], [422, "index-7"], [422, "index-9"], [423, "index-103"], [423, "index-22"], [423, "index-42"], [423, "index-64"], [423, "index-71"], [431, "index-0"], [431, "index-1"], [431, "index-14"], [431, "index-15"], [431, "index-18"], [431, "index-20"], [431, "index-21"], [431, "index-22"], [431, "index-24"], [431, "index-26"], [431, "index-27"], [431, "index-30"], [431, "index-30"], [431, "index-33"], [431, "index-33"], [431, "index-34"], [431, "index-4"], [431, "index-40"], [431, "index-43"], [431, "index-45"], [431, "index-47"], [436, "index-0"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[86, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[86, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[86, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[86, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[86, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[86, "term-type-hint"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[86, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[86, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[86, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[86, "term-virtual-machine"]], "pep 604": [[87, "index-0"], [340, "index-60"], [381, "index-11"], [467, "index-100"], [467, "index-85"], [478, "index-115"], [478, "index-156"]], "--converters": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters"]], "--force": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"]], "--help": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [119, "cmdoption-ast-h"], [230, "cmdoption-gzip-h"], [258, "cmdoption-json.tool-h"], [336, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [362, "cmdoption-timeit-h"], [373, "cmdoption-tokenize-h"], [375, "cmdoption-trace-help"], [393, "cmdoption-uuid-h"], [416, "cmdoption-zipapp-h"], [450, "cmdoption-help"]], "--make": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make"]], "--output": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [296, "cmdoption-pickletools-o"], [416, "cmdoption-zipapp-o"]], "--srcdir": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir"]], "--verbose": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"], [353, "cmdoption-tarfile-v"], [362, "cmdoption-timeit-v"], [383, "cmdoption-unittest-discover-v"]], "-f": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"], [159, "cmdoption-compileall-f"], [375, "cmdoption-trace-f"], [383, "cmdoption-unittest-f"]], "-h": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [119, "cmdoption-ast-h"], [230, "cmdoption-gzip-h"], [258, "cmdoption-json.tool-h"], [336, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [362, "cmdoption-timeit-h"], [373, "cmdoption-tokenize-h"], [393, "cmdoption-uuid-h"], [416, "cmdoption-zipapp-h"], [450, "cmdoption-h"]], "-o": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [159, "cmdoption-compileall-o"], [296, "cmdoption-pickletools-o"], [416, "cmdoption-zipapp-o"], [450, "cmdoption-O"]], "-v": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"], [336, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [353, "cmdoption-tarfile-v"], [362, "cmdoption-timeit-v"], [383, "cmdoption-unittest-discover-v"], [450, "cmdoption-V"], [450, "cmdoption-v"]], "./tools/clinic/clinic.py-[-h]-[-f]-[-o-output]-[-v]-\\-[--converters]-[--make]-[--srcdir-srcdir]-[file-...] \u547d\u4ee4\u5217\u9078\u9805": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"]], "cconverter (clinic \u4e2d\u7684\u985e\u5225)": [[89, "clinic.CConverter"]], "file": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE"], [159, "cmdoption-compileall-arg-file"], [230, "cmdoption-gzip-arg-file"]], "pep 257": [[89, "index-1"]], "pep 436": [[89, "index-0"], [472, "index-18"], [472, "index-48"], [472, "index-49"]], "pep 573": [[89, "index-5"], [477, "index-23"], [477, "index-6"], [478, "index-158"], [478, "index-163"]], "block": [[89, "term-block"], [424, "index-0"], [424, "index-1"]], "c_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.c_default"]], "c_ignored_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.c_ignored_default"]], "checksum": [[89, "term-checksum"]], "checksum line": [[89, "term-checksum-line"]], "clinic": [[89, "module-clinic"]], "converter (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.converter"]], "default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.default"]], "end line": [[89, "term-end-line"]], "impl_by_reference (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.impl_by_reference"]], "input": [[89, "term-input"]], "module": [[89, "module-clinic"], [109, "module-lib2to3"], [110, "module-__future__"], [111, "module-__main__"], [112, "module-_thread"], [113, "module-abc"], [114, "module-aifc"], [117, "module-argparse"], [118, "module-array"], [119, "module-ast"], [120, "module-asyncio"], [137, "module-atexit"], [138, "module-audioop"], [140, "module-base64"], [141, "module-bdb"], [143, "module-binascii"], [144, "module-bisect"], [145, "module-builtins"], [146, "module-bz2"], [147, "module-calendar"], [148, "module-cgi"], [149, "module-cgitb"], [150, "module-chunk"], [151, "module-cmath"], [152, "module-cmd"], [153, "module-code"], [154, "module-codecs"], [154, "module-encodings.idna"], [154, "module-encodings.mbcs"], [154, "module-encodings.utf_8_sig"], [155, "module-codeop"], [156, "module-collections"], [157, "module-collections.abc"], [158, "module-colorsys"], [159, "module-compileall"], [162, "module-concurrent.futures"], [163, "module-configparser"], [165, "module-contextlib"], [166, "module-contextvars"], [167, "module-copy"], [168, "module-copyreg"], [169, "module-crypt"], [171, "module-csv"], [172, "module-ctypes"], [173, "module-curses"], [173, "module-curses.textpad"], [174, "module-curses.ascii"], [175, "module-curses.panel"], [177, "module-dataclasses"], [179, "module-datetime"], [180, "module-dbm"], [180, "module-dbm.dumb"], [180, "module-dbm.gnu"], [180, "module-dbm.ndbm"], [182, "module-decimal"], [185, "module-tkinter.commondialog"], [185, "module-tkinter.filedialog"], [185, "module-tkinter.simpledialog"], [186, "module-difflib"], [187, "module-dis"], [189, "module-doctest"], [190, "module-email"], [191, "module-email.charset"], [193, "module-email.contentmanager"], [194, "module-email.encoders"], [195, "module-email.errors"], [197, "module-email.generator"], [198, "module-email.header"], [199, "module-email.headerregistry"], [200, "module-email.iterators"], [201, "module-email.message"], [202, "module-email.mime"], [203, "module-email.parser"], [204, "module-email.policy"], [205, "module-email.utils"], [206, "module-ensurepip"], [207, "module-enum"], [208, "module-errno"], [210, "module-faulthandler"], [211, "module-fcntl"], [212, "module-filecmp"], [214, "module-fileinput"], [216, "module-fnmatch"], [217, "module-fractions"], [219, "module-ftplib"], [222, "module-functools"], [223, "module-gc"], [224, "module-getopt"], [225, "module-getpass"], [226, "module-gettext"], [227, "module-glob"], [228, "module-graphlib"], [229, "module-grp"], [230, "module-gzip"], [231, "module-hashlib"], [232, "module-heapq"], [233, "module-hmac"], [234, "module-html"], [235, "module-html.entities"], [236, "module-html.parser"], [237, "module-http"], [238, "module-http.client"], [239, "module-http.cookiejar"], [240, "module-http.cookies"], [241, "module-http.server"], [243, "module-idlelib"], [244, "module-imaplib"], [245, "module-imghdr"], [246, "module-importlib"], [246, "module-importlib.abc"], [246, "module-importlib.machinery"], [246, "module-importlib.util"], [247, "module-importlib.metadata"], [248, "module-importlib.resources"], [249, "module-importlib.resources.abc"], [251, "module-inspect"], [254, "module-io"], [255, "module-ipaddress"], [257, "module-itertools"], [258, "module-json"], [258, "module-json.tool"], [259, "module-keyword"], [261, "module-linecache"], [262, "module-locale"], [263, "module-logging"], [264, "module-logging.config"], [265, "module-logging.handlers"], [266, "module-lzma"], [267, "module-mailbox"], [268, "module-mailcap"], [270, "module-marshal"], [271, "module-math"], [272, "module-mimetypes"], [274, "module-mmap"], [275, "module-modulefinder"], [277, "module-msilib"], [278, "module-msvcrt"], [279, "module-multiprocessing"], [279, "module-multiprocessing.connection"], [279, "module-multiprocessing.dummy"], [279, "module-multiprocessing.managers"], [279, "module-multiprocessing.pool"], [279, "module-multiprocessing.sharedctypes"], [280, "module-multiprocessing.shared_memory"], [282, "module-netrc"], [283, "module-nis"], [284, "module-nntplib"], [285, "module-numbers"], [287, "module-operator"], [288, "module-optparse"], [289, "module-os"], [290, "module-os.path"], [291, "module-ossaudiodev"], [292, "module-pathlib"], [293, "module-pdb"], [295, "module-pickle"], [296, "module-pickletools"], [297, "module-pipes"], [298, "module-pkgutil"], [299, "module-platform"], [300, "module-plistlib"], [301, "module-poplib"], [302, "module-posix"], [303, "module-pprint"], [304, "module-cProfile"], [304, "module-profile"], [304, "module-pstats"], [305, "module-pty"], [306, "module-pwd"], [307, "module-py_compile"], [308, "module-pyclbr"], [309, "module-pydoc"], [310, "module-xml.parsers.expat"], [310, "module-xml.parsers.expat.errors"], [310, "module-xml.parsers.expat.model"], [312, "module-queue"], [313, "module-quopri"], [314, "module-random"], [315, "module-re"], [316, "module-readline"], [317, "module-reprlib"], [318, "module-resource"], [319, "module-rlcompleter"], [320, "module-runpy"], [321, "module-sched"], [322, "module-secrets"], [324, "module-select"], [325, "module-selectors"], [326, "module-shelve"], [327, "module-shlex"], [328, "module-shutil"], [329, "module-signal"], [330, "module-site"], [331, "module-smtplib"], [332, "module-sndhdr"], [333, "module-socket"], [334, "module-socketserver"], [335, "module-spwd"], [336, "module-sqlite3"], [337, "module-ssl"], [338, "module-stat"], [339, "module-statistics"], [341, "module-string"], [342, "module-stringprep"], [343, "module-struct"], [344, "module-subprocess"], [345, "module-sunau"], [347, "module-symtable"], [348, "module-sys"], [350, "module-sysconfig"], [351, "module-syslog"], [352, "module-tabnanny"], [353, "module-tarfile"], [354, "module-telnetlib"], [355, "module-tempfile"], [356, "module-termios"], [357, "module-test"], [357, "module-test.support"], [357, "module-test.support.bytecode_helper"], [357, "module-test.support.import_helper"], [357, "module-test.support.os_helper"], [357, "module-test.support.script_helper"], [357, "module-test.support.socket_helper"], [357, "module-test.support.threading_helper"], [357, "module-test.support.warnings_helper"], [359, "module-textwrap"], [360, "module-threading"], [361, "module-time"], [362, "module-timeit"], [364, "module-tkinter"], [365, "module-tkinter.colorchooser"], [366, "module-tkinter.dnd"], [367, "module-tkinter.font"], [368, "module-tkinter.messagebox"], [369, "module-tkinter.scrolledtext"], [370, "module-tkinter.tix"], [371, "module-tkinter.ttk"], [372, "module-token"], [373, "module-tokenize"], [374, "module-tomllib"], [375, "module-trace"], [376, "module-traceback"], [377, "module-tracemalloc"], [378, "module-tty"], [379, "module-turtle"], [379, "module-turtledemo"], [380, "module-types"], [381, "module-typing"], [382, "module-unicodedata"], [383, "module-unittest"], [384, "module-unittest.mock"], [387, "module-urllib"], [388, "module-urllib.error"], [389, "module-urllib.parse"], [390, "module-urllib.request"], [390, "module-urllib.response"], [391, "module-urllib.robotparser"], [392, "module-uu"], [393, "module-uuid"], [394, "module-venv"], [395, "module-warnings"], [396, "module-wave"], [397, "module-weakref"], [398, "module-webbrowser"], [400, "module-winreg"], [401, "module-winsound"], [402, "module-wsgiref"], [402, "module-wsgiref.handlers"], [402, "module-wsgiref.headers"], [402, "module-wsgiref.simple_server"], [402, "module-wsgiref.types"], [402, "module-wsgiref.util"], [402, "module-wsgiref.validate"], [403, "module-xdrlib"], [404, "module-xml"], [405, "module-xml.dom"], [406, "module-xml.dom.minidom"], [407, "module-xml.dom.pulldom"], [408, "module-xml.etree.ElementTree"], [409, "module-xml.sax"], [410, "module-xml.sax.handler"], [411, "module-xml.sax.xmlreader"], [412, "module-xml.sax.saxutils"], [414, "module-xmlrpc.client"], [415, "module-xmlrpc.server"], [416, "module-zipapp"], [417, "module-zipfile"], [418, "module-zipimport"], [419, "module-zlib"], [420, "module-zoneinfo"]], "output": [[89, "term-output"], [431, "index-3"]], "parse_by_reference (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.parse_by_reference"]], "py_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.py_default"]], "start line": [[89, "term-start-line"]], "type (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.type"]], "pep 289": [[94, "index-4"], [461, "index-15"], [461, "index-2"]], "pep 342": [[94, "index-0"], [94, "index-2"], [157, "index-1"], [425, "index-27"], [462, "index-11"], [462, "index-31"], [462, "index-9"]], "rfc 3339": [[99, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[99, "logging.logging.Formatter.__init__"]], "rfc 3164": [[100, "index-5"]], "rfc 5424": [[100, "index-0"], [100, "index-2"], [100, "index-3"], [100, "index-4"], [265, "index-0"]], "rfc 5424#section-6": [[100, "index-1"]], "pep 263": [[106, "index-0"], [246, "index-1"], [373, "index-0"], [373, "index-1"], [460, "index-3"], [462, "index-19"], [478, "index-79"]], "rfc 2616": [[107, "index-1"], [107, "index-2"], [107, "index-5"], [388, "index-2"], [390, "index-10"], [390, "index-6"], [390, "index-7"], [402, "index-10"], [402, "index-5"], [470, "index-7"]], "http_proxy": [[107, "index-3"], [390, "index-18"], [390, "index-9"]], "pep 617": [[109, "index-0"], [426, "index-0"], [467, "index-94"], [468, "index-115"], [469, "index-7"], [477, "index-14"], [477, "index-19"], [477, "index-7"], [478, "index-172"], [478, "index-89"]], "apply (2to3 fixer)": [[109, "to3fixer-apply"]], "asserts (2to3 fixer)": [[109, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[109, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[109, "to3fixer-buffer"]], "dict (2to3 fixer)": [[109, "to3fixer-dict"]], "except (2to3 fixer)": [[109, "to3fixer-except"]], "exec (2to3 fixer)": [[109, "to3fixer-exec"]], "execfile (2to3 fixer)": [[109, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[109, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[109, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[109, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[109, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[109, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[109, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[109, "to3fixer-idioms"]], "import (2to3 fixer)": [[109, "to3fixer-import"]], "imports (2to3 fixer)": [[109, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[109, "to3fixer-imports2"]], "input (2to3 fixer)": [[109, "to3fixer-input"]], "intern (2to3 fixer)": [[109, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[109, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[109, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[109, "to3fixer-itertools_imports"]], "lib2to3": [[109, "module-lib2to3"]], "long (2to3 fixer)": [[109, "to3fixer-long"]], "map (2to3 fixer)": [[109, "to3fixer-map"]], "metaclass (2to3 fixer)": [[109, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[109, "to3fixer-methodattrs"]], "ne (2to3 fixer)": [[109, "to3fixer-ne"]], "next (2to3 fixer)": [[109, "to3fixer-next"]], "nonzero (2to3 fixer)": [[109, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[109, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[109, "to3fixer-operator"]], "paren (2to3 fixer)": [[109, "to3fixer-paren"]], "print (2to3 fixer)": [[109, "to3fixer-print"]], "raise (2to3 fixer)": [[109, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[109, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[109, "to3fixer-reduce"]], "reload (2to3 fixer)": [[109, "to3fixer-reload"]], "renames (2to3 fixer)": [[109, "to3fixer-renames"]], "repr (2to3 fixer)": [[109, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[109, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[109, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[109, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[109, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[109, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[109, "to3fixer-types"]], "unicode (2to3 fixer)": [[109, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[109, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[109, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[109, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[109, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[109, "to3fixer-zip"]], "pep 227": [[110, "index-22"], [458, "index-2"], [459, "index-16"]], "pep 255": [[110, "index-23"], [425, "index-26"], [459, "index-8"], [459, "index-9"], [460, "index-1"], [460, "index-2"]], "pep 3105": [[110, "index-27"], [463, "index-10"], [465, "index-0"]], "pep 3112": [[110, "index-28"], [463, "index-12"]], "pep 328": [[110, "index-25"], [221, "index-15"], [246, "index-3"], [427, "index-23"], [461, "index-10"], [461, "index-17"], [462, "index-5"], [462, "index-6"], [465, "index-16"], [471, "index-36"]], "pep 479": [[110, "index-29"], [209, "index-5"], [209, "index-6"], [473, "index-17"], [473, "index-18"], [475, "index-37"], [478, "index-220"], [478, "index-228"], [478, "index-231"], [478, "index-253"], [478, "index-274"], [478, "index-288"]], "pep 563": [[110, "index-30"], [110, "index-31"], [381, "index-57"], [381, "index-60"], [422, "index-39"], [431, "index-41"], [468, "index-103"], [475, "index-2"], [478, "index-100"], [478, "index-133"]], "pep 649": [[110, "index-32"], [424, "index-11"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.LockType"]], "posix": [[112, "index-1"], [302, "module-posix"], [356, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[112, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.allocate_lock"]], "binary semaphores": [[112, "index-0"]], "error": [[112, "thread.error"], [138, "audioop.error"], [143, "binascii.Error"], [163, "configparser.Error"], [167, "copy.Error"], [171, "csv.Error"], [173, "curses.error"], [180, "dbm.dumb.error"], [180, "dbm.error"], [180, "dbm.gnu.error"], [180, "dbm.ndbm.error"], [224, "getopt.error"], [262, "locale.Error"], [267, "mailbox.Error"], [283, "nis.error"], [289, "os.error"], [310, "xml.parsers.expat.error"], [315, "re.error"], [318, "resource.error"], [324, "select.error"], [328, "shutil.Error"], [333, "socket.error"], [336, "sqlite3.Error"], [343, "struct.error"], [345, "sunau.Error"], [392, "uu.Error"], [396, "wave.Error"], [398, "webbrowser.Error"], [403, "xdrlib.Error"], [419, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.interrupt_main"]], "light-weight processes": [[112, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[112, "thread.lock.locked"]], "processes, light-weight": [[112, "index-0"]], "pthreads": [[112, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[112, "thread.lock.release"]], "semaphores, binary": [[112, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[112, "thread.start_new_thread"]], "threads": [[112, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[113, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[113, "abc.ABCMeta"]], "pep 3141": [[113, "index-5"], [285, "index-2"], [463, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[113, "abc.ABCMeta.__subclasshook__"]], "abc": [[113, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[113, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[113, "abc.update_abstractmethods"]], "a-law": [[114, "index-2"], [138, "index-1"], [332, "index-0"]], "aiff": [[114, "index-0"], [150, "index-0"]], "aiff-c": [[114, "index-0"], [150, "index-0"]], "audio interchange file format\uff08\u97f3\u8a0a\u4ea4\u63db\u6a94\u6848\u683c\u5f0f\uff09": [[114, "index-0"], [150, "index-0"]], "g.722": [[114, "index-2"]], "pep 594#aifc": [[114, "index-4"]], "aifc": [[114, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[114, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.tell"]], "u-law": [[114, "index-2"], [138, "index-1"], [332, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[114, "aifc.aifc.writeframesraw"]], "* \uff08\u661f\u865f\uff09": [[117, "index-1"], [119, "index-1"], [216, "index-2"], [227, "index-1"], [315, "index-3"], [340, "index-13"], [340, "index-36"], [340, "index-46"], [422, "index-32"], [425, "index-49"], [425, "index-65"], [425, "index-93"], [431, "index-37"], [431, "index-6"], [436, "index-3"]], "+ \uff08\u52a0\u865f\uff09": [[117, "index-2"], [189, "index-4"], [315, "index-4"], [340, "index-13"], [340, "index-37"], [340, "index-47"], [341, "index-4"], [425, "index-61"], [425, "index-69"]], "? \uff08\u554f\u865f\uff09": [[117, "index-0"], [119, "index-0"], [152, "index-0"], [154, "index-1"], [216, "index-2"], [227, "index-1"], [315, "index-5"], [336, "index-6"], [343, "index-2"], [343, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.ArgumentDefaultsHelpFormatter"]], "argumenterror": [[117, "argparse.ArgumentError"], [172, "ctypes.ArgumentError"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.ArgumentParser"]], "argumenttypeerror": [[117, "argparse.ArgumentTypeError"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[117, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[117, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.get_default"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[117, "argparse.ArgumentParser.set_defaults"]], "\u65bc argparse \u6a21\u7d44\u4e2d": [[117, "index-0"], [117, "index-1"], [117, "index-2"]], "append() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.append"]], "array": [[118, "module-array"]], "array (array \u4e2d\u7684\u985e\u5225)": [[118, "array.array"]], "arrays\uff08\u9663\u5217\uff09": [[118, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[118, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[118, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[118, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[118, "array.typecodes"]], "--include-attributes": [[119, "cmdoption-ast-a"]], "--indent": [[119, "cmdoption-ast-indent"], [258, "cmdoption-json.tool-indent"]], "--mode": [[119, "cmdoption-ast-mode"]], "--no-type-comments": [[119, "cmdoption-ast-no-type-comments"]], "-a": [[119, "cmdoption-ast-a"], [296, "cmdoption-pickletools-a"]], "-i": [[119, "cmdoption-ast-i"], [159, "cmdoption-compileall-i"], [450, "cmdoption-I"], [450, "cmdoption-i"]], "-m": [[119, "cmdoption-ast-m"], [296, "cmdoption-pickletools-m"], [375, "cmdoption-trace-m"], [416, "cmdoption-zipapp-m"], [450, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Expr"]], "expression (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Expression"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.FunctionDef"]], "functiontype (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.FunctionType"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.In"]], "interactive (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Interactive"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Mod"]], "module (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Module"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Or"]], "paramspec (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.ParamSpec"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Try"]], "trystar (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.TryStar"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Tuple"]], "typealias (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.TypeAlias"]], "typevar (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.TypeVar"]], "typevartuple (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.TypeVarTuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[119, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.arguments"]], "ast": [[119, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[119, "cmdoption-ast-a"], [119, "cmdoption-ast-h"], [119, "cmdoption-ast-i"], [119, "cmdoption-ast-indent"], [119, "cmdoption-ast-m"], [119, "cmdoption-ast-mode"], [119, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[119, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[119, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[119, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[119, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.get_source_segment"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[119, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[119, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[119, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[119, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[119, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[119, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[119, "ast.NodeVisitor.visit"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[119, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[119, "ast.withitem"]], "\u65bc ast \u6587\u6cd5\u4e2d": [[119, "index-0"], [119, "index-1"]], "asyncio": [[120, "module-asyncio"]], "pythonasynciodebug": [[122, "index-2"], [123, "index-5"], [184, "index-5"], [450, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.Handle"]], "pep 567": [[123, "index-0"], [123, "index-1"], [123, "index-2"], [126, "index-2"], [166, "index-2"], [475, "index-28"], [475, "index-30"], [478, "index-223"], [478, "index-227"], [478, "index-232"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.ProactorEventLoop"]], "rfc 8305": [[123, "index-3"], [123, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[123, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[123, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[123, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.default_exception_handler"]], "get_context() (asyncio.handle \u7684\u65b9\u6cd5)": [[123, "asyncio.Handle.get_context"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[123, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[123, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[123, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[123, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.shutdown_default_executor"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_recv_into"]], "sock_recvfrom() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_recvfrom"]], "sock_recvfrom_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_recvfrom_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_sendfile"]], "sock_sendto() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.sock_sendto"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[123, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[123, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[123, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[123, "asyncio.TimerHandle.when"]], "cancellederror": [[124, "asyncio.CancelledError"], [162, "concurrent.futures.CancelledError"]], "incompletereaderror": [[124, "asyncio.IncompleteReadError"]], "invalidstateerror": [[124, "asyncio.InvalidStateError"], [162, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[124, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[124, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[124, "asyncio.TimeoutError"], [162, "concurrent.futures.TimeoutError"], [209, "TimeoutError"], [279, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[124, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[124, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[124, "asyncio.IncompleteReadError.partial"]], "__init__() (asyncio.future \u7684\u65b9\u6cd5)": [[125, "asyncio.Future.__init__"]], "__init__() (asyncio.task \u7684\u65b9\u6cd5)": [[125, "asyncio.Task.__init__"]], "_enter_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio._enter_task"]], "_leave_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio._leave_task"]], "_register_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio._register_task"]], "_unregister_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[125, "asyncio._unregister_task"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[129, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[130, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[130, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[130, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[130, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[130, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[130, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[130, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[130, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[130, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.Queue"]], "queueempty": [[131, "asyncio.QueueEmpty"]], "queuefull": [[131, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[131, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[131, "asyncio.Queue.task_done"]], "runner (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.Runner"]], "close() (asyncio.runner \u7684\u65b9\u6cd5)": [[132, "asyncio.Runner.close"]], "get_loop() (asyncio.runner \u7684\u65b9\u6cd5)": [[132, "asyncio.Runner.get_loop"]], "run() (asyncio.runner \u7684\u65b9\u6cd5)": [[132, "asyncio.Runner.run"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[132, "asyncio.run"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.drain"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.start_server"]], "start_tls() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.start_tls"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[133, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[133, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[134, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[134, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[134, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[134, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[134, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[134, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[134, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[134, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[134, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[134, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[134, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[134, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[134, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[134, "asyncio.subprocess.Process.wait"]], "barrier (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Barrier"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.BoundedSemaphore"]], "brokenbarriererror": [[135, "asyncio.BrokenBarrierError"], [360, "threading.BrokenBarrierError"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Semaphore"]], "abort() (asyncio.barrier \u7684\u65b9\u6cd5)": [[135, "asyncio.Barrier.abort"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[135, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[135, "asyncio.Semaphore.acquire"]], "broken (asyncio.barrier \u7684\u5c6c\u6027)": [[135, "asyncio.Barrier.broken"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[135, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[135, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[135, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[135, "asyncio.Semaphore.locked"]], "n_waiting (asyncio.barrier \u7684\u5c6c\u6027)": [[135, "asyncio.Barrier.n_waiting"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.notify_all"]], "parties (asyncio.barrier \u7684\u5c6c\u6027)": [[135, "asyncio.Barrier.parties"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[135, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[135, "asyncio.Semaphore.release"]], "reset() (asyncio.barrier \u7684\u65b9\u6cd5)": [[135, "asyncio.Barrier.reset"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[135, "asyncio.Event.set"]], "wait() (asyncio.barrier \u7684\u65b9\u6cd5)": [[135, "asyncio.Barrier.wait"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[135, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[135, "asyncio.Condition.wait_for"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Task"]], "taskgroup (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.TaskGroup"]], "timeout (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Timeout"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.cancelled"]], "cancelling() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.cancelling"]], "create_eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.create_eager_task_factory"]], "create_task() (asyncio.taskgroup \u7684\u65b9\u6cd5)": [[136, "asyncio.TaskGroup.create_task"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.done"]], "eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.eager_task_factory"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.exception"]], "expired() (asyncio.timeout \u7684\u65b9\u6cd5)": [[136, "asyncio.Timeout.expired"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.gather"]], "get_context() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.get_context"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.get_stack"]], "iscoroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.iscoroutine"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.remove_done_callback"]], "reschedule() (asyncio.timeout \u7684\u65b9\u6cd5)": [[136, "asyncio.Timeout.reschedule"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.result"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.sleep"]], "timeout() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.timeout"]], "timeout_at() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.timeout_at"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.to_thread"]], "uncancel() (asyncio.task \u7684\u65b9\u6cd5)": [[136, "asyncio.Task.uncancel"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.wait_for"]], "when() (asyncio.timeout \u7684\u65b9\u6cd5)": [[136, "asyncio.Timeout.when"]], "atexit": [[137, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[137, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[137, "atexit.unregister"]], "adpcm, intel/dvi": [[138, "index-1"]], "intel/dvi adpcm": [[138, "index-1"]], "pep 594#audioop": [[138, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.alaw2lin"]], "audioop": [[138, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[138, "audioop.ulaw2lin"]], "audit events\uff08\u7a3d\u6838\u4e8b\u4ef6\uff09": [[139, "index-0"]], "mime": [[140, "index-0"], [148, "index-0"], [272, "index-0"], [272, "index-1"], [313, "index-0"]], "rfc 1521": [[140, "index-12"], [313, "index-11"], [313, "index-9"]], "rfc 2045": [[140, "index-10"], [140, "index-4"], [140, "index-5"], [140, "index-9"], [190, "index-3"], [192, "index-4"], [192, "index-5"], [192, "index-6"], [192, "index-9"], [198, "index-4"], [199, "index-10"], [199, "index-9"], [201, "index-6"], [201, "index-7"], [201, "index-8"]], "rfc 4648": [[140, "index-11"], [140, "index-15"], [140, "index-16"], [140, "index-3"], [140, "index-6"], [140, "index-7"], [140, "index-8"], [323, "index-1"], [478, "index-92"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.b85encode"]], "base64": [[140, "index-0"], [140, "module-base64"], [143, "index-0"]], "base64 encoding\uff08base64 \u7de8\u78bc\uff09": [[140, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.encodebytes"]], "encoding\uff08\u7de8\u78bc\uff09": [[140, "index-0"], [313, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[140, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[141, "bdb.Bdb"]], "bdbquit": [[141, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[141, "bdb.Breakpoint"]], "bdb": [[141, "module-bdb"], [293, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[141, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[141, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[141, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[141, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[141, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[141, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[141, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.line"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[141, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[141, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[141, "bdb.Bdb.user_return"]], "incomplete": [[143, "binascii.Incomplete"]], "rfc 1522": [[143, "index-3"], [313, "index-10"], [313, "index-12"]], "rfc 3548": [[143, "index-1"], [143, "index-2"], [461, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.a2b_hex"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.b2a_hex"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.b2a_uu"]], "binascii": [[143, "module-binascii"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.hexlify"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[143, "binascii.unhexlify"]], "uu": [[143, "index-0"], [392, "module-uu"]], "bisect": [[144, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[144, "bisect.insort_right"]], "builtins": [[145, "module-builtins"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[146, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[146, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[146, "bz2.BZ2File"]], "bz2": [[146, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[146, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[146, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[146, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[146, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[146, "bz2.BZ2Decompressor.eof"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[146, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[146, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[146, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[146, "bz2.BZ2File.peek"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[146, "bz2.BZ2Decompressor.unused_data"]], "april (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.APRIL"]], "august (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.AUGUST"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.Calendar"]], "december (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.DECEMBER"]], "day (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.Day"]], "february (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.FEBRUARY"]], "friday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.FRIDAY"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.HTMLCalendar"]], "january (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.JANUARY"]], "july (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.JULY"]], "june (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.JUNE"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.LocaleTextCalendar"]], "march (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.MARCH"]], "may (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.MAY"]], "monday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.MONDAY"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.MONDAY"]], "month (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.Month"]], "november (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.NOVEMBER"]], "october (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.OCTOBER"]], "saturday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.SATURDAY"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.SATURDAY"]], "september (calendar.month \u7684\u5c6c\u6027)": [[147, "calendar.Month.SEPTEMBER"]], "sunday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.SUNDAY"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.SUNDAY"]], "thursday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.THURSDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.THURSDAY"]], "tuesday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.TUESDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[147, "calendar.TextCalendar"]], "wednesday (calendar.day \u7684\u5c6c\u6027)": [[147, "calendar.Day.WEDNESDAY"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.WEDNESDAY"]], "calendar": [[147, "module-calendar"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[147, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.TextCalendar.formatmonth"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.leapdays"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[147, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.timegm"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[147, "calendar.weekheader"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[147, "calendar.Calendar.yeardayscalendar"]], "cgi": [[148, "index-0"], [148, "index-2"], [148, "index-5"], [148, "module-cgi"], [149, "index-0"]], "common gateway interface\uff08\u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\uff09": [[148, "index-0"]], "http": [[148, "index-0"], [237, "index-0"], [237, "module-http"], [238, "index-0"], [241, "index-0"], [390, "index-11"], [390, "index-12"]], "pep 594#cgi": [[148, "index-8"]], "url\uff08\u7d71\u4e00\u8cc7\u6e90\u5b9a\u4f4d\u5668\uff09": [[148, "index-0"], [241, "index-0"], [389, "index-0"], [391, "index-0"]], "www": [[148, "index-0"], [241, "index-0"], [252, "index-0"], [389, "index-0"], [391, "index-0"]], "debugging\uff08\u9664\u932f\uff09": [[148, "index-5"], [293, "index-0"], [431, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[148, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[148, "cgi.FieldStorage.getlist"]], "headers\uff08\u6a19\u982d\uff09": [[148, "index-0"], [272, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.print_form"]], "protocol\uff08\u5354\u5b9a\uff09": [[148, "index-0"], [219, "index-0"], [237, "index-0"], [238, "index-0"], [241, "index-0"], [244, "index-0"], [284, "index-0"], [295, "index-5"], [301, "index-0"], [331, "index-0"], [340, "index-18"], [340, "index-54"], [354, "index-0"], [390, "index-11"], [390, "index-12"]], "security\uff08\u5b89\u5168\uff09": [[148, "index-2"], [241, "index-3"]], "server\uff08\u4f3a\u670d\u5668\uff09": [[148, "index-0"], [241, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[148, "cgi.test"]], "pep 594#cgitb": [[149, "index-4"]], "cgitb": [[149, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[149, "cgitb.enable"]], "excepthook() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[149, "index-2"]], "exceptions\uff08\u4f8b\u5916\uff09": [[149, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[149, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[149, "cgitb.html"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[149, "cgitb.text"]], "tracebacks\uff08\u56de\u6eaf\uff09": [[149, "index-0"]], "\u65bc cgi \u8173\u672c\u4e2d": [[149, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[150, "chunk.Chunk"]], "pep 594#chunk": [[150, "index-3"]], "rmff": [[150, "index-0"]], "real media file format\uff08real media \u6a94\u6848\u683c\u5f0f\uff09": [[150, "index-0"]], "chunk": [[150, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[150, "chunk.Chunk.tell"]], "pep 485": [[151, "index-0"], [271, "index-0"], [473, "index-19"], [473, "index-20"], [478, "index-295"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.atanh"]], "cmath": [[151, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.log10"]], "math\uff08\u6578\u5b78\uff09": [[151, "index-1"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[151, "cmath.tau"]], "! \uff08\u9a5a\u5606\u865f\uff09": [[152, "index-0"], [174, "index-0"], [216, "index-2"], [227, "index-1"], [341, "index-2"], [343, "index-1"], [430, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[152, "cmd.Cmd"]], "cmd": [[152, "module-cmd"], [293, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.cmdqueue"]], "columnize() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.columnize"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.default"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.identchars"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[152, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[152, "cmd.Cmd.use_rawinput"]], "\u65bc command interpreter\uff08\u6307\u4ee4\u76f4\u8b6f\u5668\uff09\u4e2d": [[152, "index-0"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[153, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[153, "code.InteractiveInterpreter"]], "code": [[153, "module-code"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[153, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[153, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[153, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[153, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[153, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[153, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[153, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[153, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[153, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[153, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[153, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.BOM_UTF8"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.CodecInfo"]], "codecs": [[154, "index-0"], [154, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.IncrementalEncoder"]], "rfc 3490": [[154, "index-13"], [154, "index-14"], [154, "index-6"], [154, "index-8"]], "rfc 3490#section-3.1": [[154, "index-12"]], "rfc 3492": [[154, "index-7"], [154, "index-9"]], "rfc 5891": [[154, "index-10"]], "rfc 5895": [[154, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[154, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[154, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[154, "encodings.idna.ToUnicode"]], "unicode": [[154, "index-0"], [382, "index-0"], [423, "index-19"]], "\\ \uff08\u53cd\u659c\u7dda\uff09": [[154, "index-1"], [289, "index-48"], [315, "index-12"], [315, "index-26"], [315, "index-9"], [430, "index-23"]], "\\n": [[154, "index-3"], [315, "index-37"], [315, "index-37"], [430, "index-23"], [430, "index-23"]], "\\u": [[154, "index-1"], [154, "index-1"], [315, "index-37"], [315, "index-37"], [430, "index-23"], [430, "index-23"]], "\\x": [[154, "index-1"], [315, "index-37"], [430, "index-23"]], "backslashreplace": [[154, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.backslashreplace_errors"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[154, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.decode"]], "decode\uff08\u89e3\u78bc\uff09": [[154, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[154, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.encode"]], "encode\uff08\u7de8\u78bc\uff09": [[154, "index-0"]], "encodings.idna": [[154, "module-encodings.idna"]], "encodings.mbcs": [[154, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[154, "module-encodings.utf_8_sig"]], "error handler's name\uff08\u932f\u8aa4\u8655\u7406\u5668\u540d\u7a31\uff09": [[154, "index-1"], [154, "index-3"], [154, "index-4"]], "escape sequence\uff08\u8df3\u812b\u5e8f\u5217\uff09": [[154, "index-1"], [154, "index-3"], [430, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.getwriter"]], "ignore": [[154, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[154, "encodings.idna.nameprep"]], "namereplace": [[154, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[154, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[154, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[154, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.register_error"]], "replace": [[154, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.replace_errors"]], "replacement character\uff08\u66ff\u4ee3\u5b57\u5143\uff09": [[154, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[154, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[154, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[154, "codecs.IncrementalEncoder.setstate"]], "stackable\uff08\u53ef\u5806\u758a\uff09": [[154, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.streamreader"]], "streams\uff08\u4e32\u6d41\uff09": [[154, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[154, "codecs.CodecInfo.streamwriter"]], "strict": [[154, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.strict_errors"]], "surrogateescape": [[154, "index-1"]], "surrogatepass": [[154, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[154, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[154, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[154, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[154, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[155, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[155, "codeop.Compile"]], "codeop": [[155, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[155, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.OrderedDict"]], "pep 468": [[156, "index-10"], [474, "index-24"], [478, "index-258"]], "pep 584": [[156, "index-11"], [156, "index-8"], [156, "index-9"], [289, "index-6"], [289, "index-7"], [380, "index-6"], [397, "index-1"], [397, "index-4"], [477, "index-1"], [477, "index-11"], [478, "index-173"], [478, "index-174"], [478, "index-175"], [478, "index-187"], [478, "index-188"], [478, "index-189"], [478, "index-190"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[156, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[156, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[156, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[156, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[156, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[156, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.clear"]], "collections": [[156, "module-collections"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[156, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[156, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[156, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[156, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[156, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[156, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[156, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[156, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[156, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[156, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[156, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[156, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[156, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[156, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Awaitable"]], "buffer (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Buffer"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.MutableSet"]], "pep 688": [[157, "index-4"], [423, "index-106"], [469, "index-1"], [469, "index-9"], [478, "index-9"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[157, "collections.abc.ValuesView"]], "collections.abc": [[157, "module-collections.abc"]], "colorsys": [[158, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[158, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[159, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[159, "cmdoption-compileall-invalidation-mode"]], "-b": [[159, "cmdoption-compileall-b"], [383, "cmdoption-unittest-b"], [450, "cmdoption-B"], [450, "cmdoption-b"]], "-d": [[159, "cmdoption-compileall-d"], [230, "cmdoption-gzip-d"], [450, "cmdoption-d"]], "-e": [[159, "cmdoption-compileall-e"], [353, "cmdoption-tarfile-e"], [373, "cmdoption-tokenize-e"], [417, "cmdoption-zipfile-e"], [450, "cmdoption-E"]], "-j": [[159, "cmdoption-compileall-j"], [450, "cmdoption-J"]], "-l": [[159, "cmdoption-compileall-l"], [296, "cmdoption-pickletools-l"], [353, "cmdoption-tarfile-l"], [375, "cmdoption-trace-l"], [417, "cmdoption-zipfile-l"]], "-p": [[159, "cmdoption-compileall-p"], [296, "cmdoption-pickletools-p"], [362, "cmdoption-timeit-p"], [383, "cmdoption-unittest-discover-p"], [416, "cmdoption-zipapp-p"], [450, "cmdoption-P"]], "-q": [[159, "cmdoption-compileall-q"], [307, "cmdoption-python-m-py_compile-q"], [450, "cmdoption-q"]], "-r": [[159, "cmdoption-compileall-r"], [362, "cmdoption-timeit-r"], [375, "cmdoption-trace-R"], [375, "cmdoption-trace-r"], [450, "cmdoption-R"]], "-s": [[159, "cmdoption-compileall-s"], [362, "cmdoption-timeit-s"], [375, "cmdoption-trace-s"], [383, "cmdoption-unittest-discover-s"], [450, "cmdoption-S"], [450, "cmdoption-s"]], "-x": [[159, "cmdoption-compileall-x"], [450, "cmdoption-X"], [450, "cmdoption-x"]], "source_date_epoch": [[159, "index-1"], [307, "index-3"], [307, "index-6"], [307, "index-7"], [475, "index-31"], [478, "index-218"], [478, "index-234"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[159, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[159, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[159, "compileall.compile_path"]], "compileall": [[159, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[159, "cmdoption-compileall-arg-directory"], [159, "cmdoption-compileall-arg-file"], [159, "cmdoption-compileall-b"], [159, "cmdoption-compileall-d"], [159, "cmdoption-compileall-e"], [159, "cmdoption-compileall-f"], [159, "cmdoption-compileall-hardlink-dupes"], [159, "cmdoption-compileall-i"], [159, "cmdoption-compileall-invalidation-mode"], [159, "cmdoption-compileall-j"], [159, "cmdoption-compileall-l"], [159, "cmdoption-compileall-o"], [159, "cmdoption-compileall-p"], [159, "cmdoption-compileall-q"], [159, "cmdoption-compileall-r"], [159, "cmdoption-compileall-s"], [159, "cmdoption-compileall-x"]], "directory": [[159, "cmdoption-compileall-arg-directory"]], "brokenexecutor": [[162, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[162, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[162, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[162, "concurrent.futures.Executor"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[162, "concurrent.futures.Future"]], "pep 3148": [[162, "index-2"], [470, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[162, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[162, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[162, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[162, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[162, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[162, "concurrent.futures.wait"]], "$ \uff08\u91d1\u9322\u7b26\u865f\uff09": [[163, "index-2"], [290, "index-9"], [315, "index-2"], [341, "index-13"]], "% \uff08\u767e\u5206\u865f\uff09": [[163, "index-1"], [179, "index-0"], [290, "index-9"], [340, "index-13"], [340, "index-35"], [340, "index-45"], [361, "index-11"], [361, "index-9"], [400, "index-0"], [425, "index-68"]], ".ini": [[163, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[163, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[163, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[163, "configparser.ConfigParser"]], "duplicateoptionerror": [[163, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[163, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[163, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[163, "configparser.InterpolationDepthError"]], "interpolationerror": [[163, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[163, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[163, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[163, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[163, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[163, "configparser.NoOptionError"]], "nosectionerror": [[163, "configparser.NoSectionError"]], "parsingerror": [[163, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[163, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[163, "configparser.ConfigParser.SECTCRE"]], "windows ini file\uff08windows ini \u6a94\u6848\uff09": [[163, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[163, "configparser.RawConfigParser.add_section"]], "configparser": [[163, "module-configparser"]], "configuration\uff08\u8a2d\u5b9a\uff09": [[163, "index-0"], [293, "index-2"], [330, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.has_section"]], "ini file\uff08ini \u6a94\u6848\uff09": [[163, "index-0"]], "interpolation in configuration files\uff08\u8a2d\u5b9a\u6a94\u4e2d\u7684\u63d2\u503c\uff09": [[163, "index-1"], [163, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.read_string"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[163, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[163, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[164, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[164, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[164, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[164, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[164, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[164, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[164, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[164, "credits"]], "ellipsis literal\uff08\u522a\u7bc0\u865f\uff09": [[164, "index-0"], [340, "index-66"], [423, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[164, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[164, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[164, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[165, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.ExitStack.callback"]], "chdir() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.chdir"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.closing"]], "contextlib": [[165, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[165, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[165, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[166, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[166, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[166, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[166, "contextvars.Token"]], "contextvars": [[166, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[166, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[166, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[166, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[166, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[166, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[166, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[166, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[166, "contextvars.Token.var"]], "__copy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[167, "index-1"]], "__deepcopy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[167, "index-1"]], "copy": [[167, "module-copy"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[167, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[167, "copy.deepcopy"]], "pickle": [[167, "index-0"], [168, "index-0"], [270, "index-0"], [295, "module-pickle"], [326, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[168, "copyreg.constructor"]], "copyreg": [[168, "module-copyreg"]], "copy\uff08\u8907\u88fd\uff09": [[168, "index-0"], [243, "index-4"], [295, "index-5"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[168, "copyreg.pickle"]], "des": [[169, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[169, "index-1"]], "cipher": [[169, "index-0"]], "crypt": [[169, "module-crypt"], [306, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.crypt"]], "crypt(3)": [[169, "index-0"], [169, "index-2"], [169, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[169, "crypt.mksalt"]], "cryptography\uff08\u5bc6\u78bc\u5b78\uff09": [[170, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.DictWriter"]], "pep 305": [[171, "index-7"], [460, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_NONNUMERIC"]], "quote_notnull (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_NOTNULL"]], "quote_strings (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.QUOTE_STRINGS"]], "rfc 4180": [[171, "index-6"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[171, "csv.csvreader.__next__"]], "csv": [[171, "index-0"], [171, "module-csv"]], "csv.reader \u51fd\u5f0f": [[171, "index-3"]], "data\uff08\u8cc7\u6599\uff09": [[171, "index-0"], [343, "index-0"], [423, "index-0"], [423, "index-4"], [425, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[171, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[171, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.field_size_limit"]], "fieldnames (csv.dictreader \u7684\u5c6c\u6027)": [[171, "csv.DictReader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[171, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[171, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[171, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[171, "csv.Dialect.strict"]], "tabular\uff08\u8868\u683c\uff09": [[171, "index-0"]], "universal newlines": [[171, "index-3"], [221, "index-7"], [246, "index-15"], [254, "index-4"], [254, "index-5"], [340, "index-34"], [340, "index-44"], [344, "index-1"], [460, "index-8"], [461, "index-7"], [462, "index-20"], [463, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[171, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[171, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[171, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[171, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[171, "csv.csvwriter.writerows"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.BigEndianStructure"]], "bigendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.BigEndianUnion"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.LittleEndianStructure"]], "littleendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.LittleEndianUnion"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[172, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.POINTER"], [172, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[172, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[172, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[172, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[172, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[172, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[172, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[172, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[172, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[172, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[172, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[172, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[172, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_ssize_t"]], "c_time_t (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_time_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[172, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.create_unicode_buffer"]], "ctypes": [[172, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[172, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[172, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[172, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[172, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[172, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[172, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[172, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[172, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[172, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[172, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[172, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[172, "ctypes.wstring_at"]], "acs_bbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BBSS"]], "acs_block (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BLOCK"]], "acs_board (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BOARD"]], "acs_bsbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BSBS"]], "acs_bssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BSSB"]], "acs_bsss (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BSSS"]], "acs_btee (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BTEE"]], "acs_bullet (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_BULLET"]], "acs_ckboard (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_CKBOARD"]], "acs_darrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_DARROW"]], "acs_degree (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_DEGREE"]], "acs_diamond (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_DIAMOND"]], "acs_gequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_GEQUAL"]], "acs_hline (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_HLINE"]], "acs_lantern (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LANTERN"]], "acs_larrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LARROW"]], "acs_lequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LEQUAL"]], "acs_llcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LLCORNER"]], "acs_lrcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LRCORNER"]], "acs_ltee (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_LTEE"]], "acs_nequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_NEQUAL"]], "acs_pi (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_PI"]], "acs_plminus (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_PLMINUS"]], "acs_plus (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_PLUS"]], "acs_rarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_RARROW"]], "acs_rtee (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_RTEE"]], "acs_s1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_S1"]], "acs_s3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_S3"]], "acs_s7 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_S7"]], "acs_s9 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_S9"]], "acs_sbbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SBBS"]], "acs_sbsb (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SBSB"]], "acs_sbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SBSS"]], "acs_ssbb (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SSBB"]], "acs_ssbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SSBS"]], "acs_sssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SSSB"]], "acs_ssss (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_SSSS"]], "acs_sterling (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_STERLING"]], "acs_ttee (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_TTEE"]], "acs_uarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_UARROW"]], "acs_ulcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_ULCORNER"]], "acs_urcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_URCORNER"]], "acs_vline (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ACS_VLINE"]], "a_altcharset (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_ALTCHARSET"]], "a_attributes (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_ATTRIBUTES"]], "a_blink (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_BLINK"]], "a_bold (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_BOLD"]], "a_chartext (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_CHARTEXT"]], "a_color (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_COLOR"]], "a_dim (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_DIM"]], "a_horizontal (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_HORIZONTAL"]], "a_invis (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_INVIS"]], "a_italic (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_ITALIC"]], "a_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_LEFT"]], "a_low (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_LOW"]], "a_normal (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_NORMAL"]], "a_protect (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_PROTECT"]], "a_reverse (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_REVERSE"]], "a_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_RIGHT"]], "a_standout (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_STANDOUT"]], "a_top (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_TOP"]], "a_underline (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_UNDERLINE"]], "a_vertical (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.A_VERTICAL"]], "button_alt (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTON_ALT"]], "button_ctrl (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTON_CTRL"]], "button_shift (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTON_SHIFT"]], "buttonn_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTONn_CLICKED"]], "buttonn_double_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTONn_DOUBLE_CLICKED"]], "buttonn_pressed (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTONn_PRESSED"]], "buttonn_released (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTONn_RELEASED"]], "buttonn_triple_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.BUTTONn_TRIPLE_CLICKED"]], "colors (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLORS"]], "color_black (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_BLACK"]], "color_blue (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_BLUE"]], "color_cyan (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_CYAN"]], "color_green (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_GREEN"]], "color_magenta (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_MAGENTA"]], "color_pairs (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_PAIRS"]], "color_red (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_RED"]], "color_white (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_WHITE"]], "color_yellow (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLOR_YELLOW"]], "cols (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.COLS"]], "columns": [[173, "index-4"], [173, "index-6"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ERR"]], "key_a1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_A1"]], "key_a3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_A3"]], "key_b2 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_B2"]], "key_backspace (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_BACKSPACE"]], "key_beg (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_BEG"]], "key_break (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_BREAK"]], "key_btab (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_BTAB"]], "key_c1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_C1"]], "key_c3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_C3"]], "key_cancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CANCEL"]], "key_catab (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CATAB"]], "key_clear (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CLEAR"]], "key_close (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CLOSE"]], "key_command (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_COMMAND"]], "key_copy (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_COPY"]], "key_create (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CREATE"]], "key_ctab (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_CTAB"]], "key_dc (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_DC"]], "key_dl (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_DL"]], "key_down (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_DOWN"]], "key_eic (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_EIC"]], "key_end (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_END"]], "key_enter (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_ENTER"]], "key_eol (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_EOL"]], "key_eos (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_EOS"]], "key_exit (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_EXIT"]], "key_f0 (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_F0"]], "key_find (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_FIND"]], "key_fn (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_Fn"]], "key_help (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_HELP"]], "key_home (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_HOME"]], "key_ic (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_IC"]], "key_il (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_IL"]], "key_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_LEFT"]], "key_ll (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_LL"]], "key_mark (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MARK"]], "key_max (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MAX"]], "key_message (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MESSAGE"]], "key_min (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MIN"]], "key_mouse (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MOUSE"]], "key_move (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_MOVE"]], "key_next (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_NEXT"]], "key_npage (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_NPAGE"]], "key_open (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_OPEN"]], "key_options (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_OPTIONS"]], "key_ppage (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_PPAGE"]], "key_previous (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_PREVIOUS"]], "key_print (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_PRINT"]], "key_redo (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_REDO"]], "key_reference (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_REFERENCE"]], "key_refresh (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_REFRESH"]], "key_replace (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_REPLACE"]], "key_reset (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_RESET"]], "key_resize (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_RESIZE"]], "key_restart (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_RESTART"]], "key_resume (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_RESUME"]], "key_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_RIGHT"]], "key_save (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SAVE"]], "key_sbeg (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SBEG"]], "key_scancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SCANCEL"]], "key_scommand (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SCOMMAND"]], "key_scopy (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SCOPY"]], "key_screate (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SCREATE"]], "key_sdc (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SDC"]], "key_sdl (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SDL"]], "key_select (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SELECT"]], "key_send (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SEND"]], "key_seol (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SEOL"]], "key_sexit (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SEXIT"]], "key_sf (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SF"]], "key_sfind (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SFIND"]], "key_shelp (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SHELP"]], "key_shome (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SHOME"]], "key_sic (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SIC"]], "key_sleft (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SLEFT"]], "key_smessage (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SMESSAGE"]], "key_smove (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SMOVE"]], "key_snext (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SNEXT"]], "key_soptions (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SOPTIONS"]], "key_sprevious (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SPREVIOUS"]], "key_sprint (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SPRINT"]], "key_sr (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SR"]], "key_sredo (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SREDO"]], "key_sreplace (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SREPLACE"]], "key_sreset (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SRESET"]], "key_sright (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SRIGHT"]], "key_srsume (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SRSUME"]], "key_ssave (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SSAVE"]], "key_ssuspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SSUSPEND"]], "key_stab (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_STAB"]], "key_sundo (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SUNDO"]], "key_suspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_SUSPEND"]], "key_undo (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_UNDO"]], "key_up (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.KEY_UP"]], "lines": [[173, "index-0"], [173, "index-3"], [173, "index-5"]], "lines (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.LINES"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.OK"]], "term": [[173, "index-1"], [173, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[173, "curses.textpad.Textbox"]], "__version__ (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.__version__"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.curs_set"]], "curses": [[173, "module-curses"]], "curses.textpad": [[173, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[173, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[173, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[173, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[173, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[173, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[173, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[173, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[173, "curses.wrapper"]], "ack (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ACK"]], "bel (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.BEL"]], "bs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.BS"]], "can (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.CAN"]], "cr (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.CR"]], "dc1 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DC1"]], "dc2 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DC2"]], "dc3 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DC3"]], "dc4 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DC4"]], "del (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DEL"]], "dle (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.DLE"]], "em (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.EM"]], "enq (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ENQ"]], "eot (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.EOT"]], "esc (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ESC"]], "etb (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ETB"]], "etx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ETX"]], "ff (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.FF"]], "fs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.FS"]], "gs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.GS"]], "ht (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.HT"]], "lf (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.LF"]], "nak (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.NAK"]], "nl (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.NL"]], "nul (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.NUL"]], "rs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.RS"]], "si (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SI"]], "so (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SO"]], "soh (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SOH"]], "sp (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SP"]], "stx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.STX"]], "sub (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SUB"]], "syn (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.SYN"]], "tab (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.TAB"]], "us (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.US"]], "vt (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.VT"]], "^ \uff08\u63d2\u5165\u7b26\u865f\uff09": [[174, "index-0"], [189, "index-1"], [315, "index-1"], [315, "index-13"], [340, "index-16"], [341, "index-3"], [376, "index-1"], [425, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ctrl"]], "curses.ascii": [[174, "module-curses.ascii"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[174, "curses.ascii.unctrl"]], "\u65bc curses \u6a21\u7d44\u4e2d": [[174, "index-0"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[175, "curses.panel.bottom_panel"]], "curses.panel": [[175, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[175, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[175, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[175, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[175, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[177, "dataclasses.Field"]], "frozeninstanceerror": [[177, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.MISSING"]], "pep 557": [[177, "index-0"], [475, "index-29"]], "__post_init__() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.__post_init__"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.dataclass"]], "dataclasses": [[177, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[177, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[179, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[179, "datetime.MINYEAR"]], "utc (\u65bc datetime \u6a21\u7d44\u4e2d)": [[179, "datetime.UTC"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.date"]], "datetime": [[179, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.datetime"]], "datetime format\uff08\u65e5\u671f\u6642\u9593\u683c\u5f0f\uff09": [[179, "index-0"], [361, "index-11"], [361, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[179, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[179, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[179, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[179, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[179, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[179, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[179, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[179, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[179, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[179, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[179, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[179, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[179, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[179, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[179, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[179, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[179, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[179, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[179, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[179, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[179, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[180, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[180, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[180, "dbm.ndbm.ndbm.close"]], "databases\uff08\u8cc7\u6599\u5eab\uff09": [[180, "index-0"]], "dbm": [[180, "module-dbm"]], "dbm.dumb": [[180, "module-dbm.dumb"]], "dbm.gnu": [[180, "module-dbm.gnu"], [326, "index-1"], [423, "index-31"]], "dbm.ndbm": [[180, "module-dbm.ndbm"], [326, "index-1"], [423, "index-31"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[180, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[180, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[180, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[180, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[180, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[180, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[180, "dbm.ndbm.open"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[180, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[180, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[180, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[180, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[182, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.create_decimal_from_float"]], "decimal": [[182, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[182, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[182, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[182, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[182, "decimal.Context.to_sci_string"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[185, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[185, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[185, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[185, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[185, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[185, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[185, "module-tkinter.commondialog"]], "tkinter.filedialog": [[185, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[185, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[186, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[186, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[186, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[186, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[186, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.diff_bytes"]], "difflib": [[186, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[186, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[186, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[186, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[186, "difflib.unified_diff"]], "before_async_with (opcode)": [[187, "opcode-BEFORE_ASYNC_WITH"]], "before_with (opcode)": [[187, "opcode-BEFORE_WITH"]], "binary_op (opcode)": [[187, "opcode-BINARY_OP"]], "binary_slice (opcode)": [[187, "opcode-BINARY_SLICE"]], "binary_subscr (opcode)": [[187, "opcode-BINARY_SUBSCR"]], "build_const_key_map (opcode)": [[187, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[187, "opcode-BUILD_LIST"]], "build_map (opcode)": [[187, "opcode-BUILD_MAP"]], "build_set (opcode)": [[187, "opcode-BUILD_SET"]], "build_slice (opcode)": [[187, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[187, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[187, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[187, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Bytecode.first_line"]], "cache (opcode)": [[187, "opcode-CACHE"]], "call (opcode)": [[187, "opcode-CALL"]], "call_function_ex (opcode)": [[187, "opcode-CALL_FUNCTION_EX"]], "call_intrinsic_1 (opcode)": [[187, "opcode-CALL_INTRINSIC_1"]], "call_intrinsic_2 (opcode)": [[187, "opcode-CALL_INTRINSIC_2"]], "check_eg_match (opcode)": [[187, "opcode-CHECK_EG_MATCH"]], "check_exc_match (opcode)": [[187, "opcode-CHECK_EXC_MATCH"]], "cleanup_throw (opcode)": [[187, "opcode-CLEANUP_THROW"]], "compare_op (opcode)": [[187, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[187, "opcode-CONTAINS_OP"]], "copy (opcode)": [[187, "opcode-COPY"]], "copy_free_vars (opcode)": [[187, "opcode-COPY_FREE_VARS"]], "delete_attr (opcode)": [[187, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[187, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[187, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[187, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[187, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[187, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[187, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[187, "opcode-DICT_UPDATE"]], "end_async_for (opcode)": [[187, "opcode-END_ASYNC_FOR"]], "end_for (opcode)": [[187, "opcode-END_FOR"]], "extended_arg (opcode)": [[187, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[187, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[187, "opcode-FOR_ITER"]], "get_aiter (opcode)": [[187, "opcode-GET_AITER"]], "get_anext (opcode)": [[187, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[187, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[187, "opcode-GET_ITER"]], "get_len (opcode)": [[187, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[187, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[187, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[187, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[187, "opcode-IMPORT_NAME"]], "is_op (opcode)": [[187, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[187, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.opname"]], "instruction.positions (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.positions"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Instruction.starts_line"]], "jump (opcode)": [[187, "opcode-JUMP"]], "jump_backward (opcode)": [[187, "opcode-JUMP_BACKWARD"]], "jump_backward_no_interrupt (opcode)": [[187, "opcode-JUMP_BACKWARD_NO_INTERRUPT"]], "jump_forward (opcode)": [[187, "opcode-JUMP_FORWARD"]], "jump_no_interrupt (opcode)": [[187, "opcode-JUMP_NO_INTERRUPT"]], "kw_names (opcode)": [[187, "opcode-KW_NAMES"]], "list_append (opcode)": [[187, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[187, "opcode-LIST_EXTEND"]], "load_assertion_error (opcode)": [[187, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[187, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[187, "opcode-LOAD_BUILD_CLASS"]], "load_closure (opcode)": [[187, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[187, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[187, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[187, "opcode-LOAD_FAST"]], "load_fast_and_clear (opcode)": [[187, "opcode-LOAD_FAST_AND_CLEAR"]], "load_fast_check (opcode)": [[187, "opcode-LOAD_FAST_CHECK"]], "load_from_dict_or_deref (opcode)": [[187, "opcode-LOAD_FROM_DICT_OR_DEREF"]], "load_from_dict_or_globals (opcode)": [[187, "opcode-LOAD_FROM_DICT_OR_GLOBALS"]], "load_global (opcode)": [[187, "opcode-LOAD_GLOBAL"]], "load_locals (opcode)": [[187, "opcode-LOAD_LOCALS"]], "load_method (opcode)": [[187, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[187, "opcode-LOAD_NAME"]], "load_super_attr (opcode)": [[187, "opcode-LOAD_SUPER_ATTR"]], "make_cell (opcode)": [[187, "opcode-MAKE_CELL"]], "make_function (opcode)": [[187, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[187, "opcode-MAP_ADD"]], "match_class (opcode)": [[187, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[187, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[187, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[187, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[187, "opcode-NOP"]], "pep 626": [[187, "index-0"], [467, "index-84"], [469, "index-29"], [478, "index-40"]], "pop_block (opcode)": [[187, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[187, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[187, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_none (opcode)": [[187, "opcode-POP_JUMP_IF_NONE"]], "pop_jump_if_not_none (opcode)": [[187, "opcode-POP_JUMP_IF_NOT_NONE"]], "pop_jump_if_true (opcode)": [[187, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[187, "opcode-POP_TOP"]], "push_exc_info (opcode)": [[187, "opcode-PUSH_EXC_INFO"]], "push_null (opcode)": [[187, "opcode-PUSH_NULL"]], "positions (dis \u4e2d\u7684\u985e\u5225)": [[187, "dis.Positions"]], "positions.col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Positions.col_offset"]], "positions.end_col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Positions.end_col_offset"]], "positions.end_lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Positions.end_lineno"]], "positions.lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.Positions.lineno"]], "raise_varargs (opcode)": [[187, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[187, "opcode-RERAISE"]], "resume (opcode)": [[187, "opcode-RESUME"]], "return_const (opcode)": [[187, "opcode-RETURN_CONST"]], "return_generator (opcode)": [[187, "opcode-RETURN_GENERATOR"]], "return_value (opcode)": [[187, "opcode-RETURN_VALUE"]], "send (opcode)": [[187, "opcode-SEND"]], "setup_annotations (opcode)": [[187, "opcode-SETUP_ANNOTATIONS"]], "setup_cleanup (opcode)": [[187, "opcode-SETUP_CLEANUP"]], "setup_finally (opcode)": [[187, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[187, "opcode-SETUP_WITH"]], "set_add (opcode)": [[187, "opcode-SET_ADD"]], "set_update (opcode)": [[187, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[187, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[187, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[187, "opcode-STORE_FAST"]], "store_global (opcode)": [[187, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[187, "opcode-STORE_NAME"]], "store_slice (opcode)": [[187, "opcode-STORE_SLICE"]], "store_subscr (opcode)": [[187, "opcode-STORE_SUBSCR"]], "swap (opcode)": [[187, "opcode-SWAP"]], "unary_invert (opcode)": [[187, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[187, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[187, "opcode-UNARY_NOT"]], "unpack_ex (opcode)": [[187, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[187, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[187, "opcode-WITH_EXCEPT_START"]], "yield_value (opcode)": [[187, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.code_info"]], "dis": [[187, "module-dis"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[187, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[187, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.get_instructions"]], "hasarg (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasarg"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasconst"]], "hasexc (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasexc"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[187, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.show_code"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[187, "dis.stack_effect"]], "# \uff08\u4e95\u5b57\u865f\uff09": [[189, "index-4"], [315, "index-38"], [330, "index-2"], [340, "index-37"], [340, "index-47"], [341, "index-7"], [430, "index-4"], [430, "index-5"]], "- \uff08\u6e1b\u865f\uff09": [[189, "index-4"], [216, "index-2"], [227, "index-1"], [315, "index-11"], [340, "index-13"], [340, "index-37"], [340, "index-47"], [341, "index-4"], [425, "index-60"], [425, "index-70"]], "<blankline>": [[189, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.DocTest"]], "doctestfailure": [[189, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[189, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.SKIP"]], "unexpectedexception": [[189, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[189, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.docstring"]], "doctest": [[189, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[189, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[189, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[189, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.exc_msg"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[189, "doctest.DocTestFailure.got"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.indent"]], "interpreter prompt\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[189, "index-0"], [348, "index-27"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.lineno"]], "marker\uff08\u6a19\u8a18\uff09": [[189, "index-1"], [376, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[189, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[189, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[189, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[189, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[189, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[189, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[189, "doctest.Example.want"]], "\u65bc doctests \u4e2d": [[189, "index-3"], [189, "index-4"]], "rfc 2046": [[190, "index-4"], [193, "index-0"], [198, "index-5"]], "rfc 2047": [[190, "index-5"], [198, "index-11"], [198, "index-13"], [198, "index-6"], [198, "index-8"], [199, "index-1"], [199, "index-4"], [199, "index-6"], [204, "index-3"], [204, "index-4"], [205, "index-1"], [470, "index-11"], [470, "index-8"]], "rfc 2183": [[190, "index-6"], [192, "index-11"], [201, "index-10"]], "rfc 2231": [[190, "index-7"], [192, "index-10"], [192, "index-2"], [192, "index-3"], [192, "index-7"], [192, "index-8"], [198, "index-7"], [201, "index-4"], [201, "index-5"], [201, "index-9"], [205, "index-5"], [205, "index-6"], [205, "index-7"], [205, "index-8"], [205, "index-9"]], "rfc 2821": [[190, "index-0"]], "rfc 5322": [[190, "index-1"], [192, "index-0"], [195, "index-0"], [197, "index-0"], [197, "index-1"], [199, "index-0"], [199, "index-11"], [199, "index-12"], [199, "index-14"], [199, "index-2"], [199, "index-3"], [199, "index-5"], [199, "index-7"], [199, "index-8"], [201, "index-0"], [201, "index-2"], [203, "index-0"], [204, "index-0"], [204, "index-1"], [204, "index-2"], [204, "index-5"], [204, "index-6"], [204, "index-9"], [331, "index-11"]], "rfc 6532": [[190, "index-2"], [201, "index-1"], [203, "index-1"], [204, "index-7"], [473, "index-31"]], "email": [[190, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[191, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[191, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[191, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[191, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.body_encoding"]], "email.charset": [[191, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[191, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[191, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[192, "email.message.Message"]], "rfc 2822": [[192, "index-1"], [198, "index-0"], [198, "index-10"], [198, "index-12"], [198, "index-2"], [198, "index-3"], [198, "index-9"], [205, "index-0"], [205, "index-10"], [205, "index-2"], [205, "index-3"], [205, "index-4"], [238, "index-2"], [241, "index-2"], [267, "index-0"], [361, "index-10"], [361, "index-22"], [446, "index-3"], [459, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[192, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[192, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[192, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[192, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[193, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[193, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[193, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[193, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[193, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[193, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[193, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[193, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[193, "email.contentmanager.set_content"]], "email.encoders": [[194, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[194, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[194, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[194, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[194, "email.encoders.encode_quopri"]], "boundaryerror": [[195, "email.errors.BoundaryError"]], "headerparseerror": [[195, "email.errors.HeaderParseError"]], "messageerror": [[195, "email.errors.MessageError"]], "messageparseerror": [[195, "email.errors.MessageParseError"]], "multipartconversionerror": [[195, "email.errors.MultipartConversionError"]], "email.errors": [[195, "module-email.errors"]], "rfc 822": [[196, "index-0"], [198, "index-1"], [226, "index-9"], [238, "index-6"], [331, "index-10"], [331, "index-12"], [331, "index-6"], [331, "index-9"], [361, "index-19"], [361, "index-20"], [459, "index-21"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[197, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[197, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[197, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[197, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[197, "email.generator.Generator.clone"]], "email.generator": [[197, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[197, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[197, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[197, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[197, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[198, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[198, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[198, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[198, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[198, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[198, "email.header.decode_header"]], "email.header": [[198, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[198, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[198, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[199, "index-13"], [471, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[199, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Address.domain"]], "email.headerregistry": [[199, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[199, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[199, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[199, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[200, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[200, "email.iterators.body_line_iterator"]], "email.iterators": [[200, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[200, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[201, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[201, "email.message.MIMEPart"]], "rfc 6531": [[201, "index-3"], [204, "index-8"], [331, "index-3"], [473, "index-32"], [473, "index-38"], [473, "index-39"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[201, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.del_param"]], "email.message": [[201, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[201, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[201, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[201, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[202, "email.mime.text.MIMEText"]], "email.mime": [[202, "module-email.mime"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[203, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[203, "email.parser.BytesFeedParser.close"]], "email.parser": [[203, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[203, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[203, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[203, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[203, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[203, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[203, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[203, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[203, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[203, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[204, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[204, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[204, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[204, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.default"]], "email.policy": [[204, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[204, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[204, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[204, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[204, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[204, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[204, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[204, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[204, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[204, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[204, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[204, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[204, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[204, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.decode_rfc2231"]], "email.utils": [[205, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[205, "email.utils.unquote"]], "pep 453": [[206, "index-0"], [464, "index-22"], [464, "index-23"], [464, "index-24"], [472, "index-1"], [472, "index-19"], [472, "index-20"], [472, "index-27"], [472, "index-42"], [472, "index-5"], [472, "index-53"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[206, "ensurepip.bootstrap"]], "ensurepip": [[206, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[206, "ensurepip.version"]], "conform (enum.flagboundary \u7684\u5c6c\u6027)": [[207, "enum.FlagBoundary.CONFORM"]], "continuous (enum.enumcheck \u7684\u5c6c\u6027)": [[207, "enum.EnumCheck.CONTINUOUS"]], "eject (enum.flagboundary \u7684\u5c6c\u6027)": [[207, "enum.FlagBoundary.EJECT"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.Enum"]], "enumcheck (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.EnumCheck"]], "enumtype (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.EnumType"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.Flag"]], "flagboundary (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.FlagBoundary"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.IntFlag"]], "keep (enum.flagboundary \u7684\u5c6c\u6027)": [[207, "enum.FlagBoundary.KEEP"]], "named_flags (enum.enumcheck \u7684\u5c6c\u6027)": [[207, "enum.EnumCheck.NAMED_FLAGS"]], "reprenum (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.ReprEnum"]], "strict (enum.flagboundary \u7684\u5c6c\u6027)": [[207, "enum.FlagBoundary.STRICT"]], "strenum (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.StrEnum"]], "unique (enum.enumcheck \u7684\u5c6c\u6027)": [[207, "enum.EnumCheck.UNIQUE"]], "__and__() (enum.flag \u7684\u65b9\u6cd5)": [[207, "enum.Flag.__and__"]], "__call__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__call__"]], "__contains__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__contains__"]], "__contains__() (enum.flag \u7684\u65b9\u6cd5)": [[207, "enum.Flag.__contains__"]], "__dir__() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum.__dir__"]], "__dir__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__dir__"]], "__format__() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum.__format__"]], "__getitem__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__getitem__"]], "__init_subclass__() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum.__init_subclass__"]], "__iter__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__iter__"]], "__len__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__len__"]], "__or__() (enum.flag \u7684\u65b9\u6cd5)": [[207, "enum.Flag.__or__"]], "__repr__() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum.__repr__"]], "__reversed__() (enum.enumtype \u7684\u65b9\u6cd5)": [[207, "enum.EnumType.__reversed__"]], "__str__() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum.__str__"]], "__xor__() (enum.flag \u7684\u65b9\u6cd5)": [[207, "enum.Flag.__xor__"]], "_generate_next_value_() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum._generate_next_value_"]], "_ignore_ (enum.enum \u7684\u5c6c\u6027)": [[207, "enum.Enum._ignore_"]], "_missing_() (enum.enum \u7684\u65b9\u6cd5)": [[207, "enum.Enum._missing_"]], "_numeric_repr_() (enum.flag \u7684\u65b9\u6cd5)": [[207, "enum.Flag._numeric_repr_"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[207, "enum.auto"]], "enum": [[207, "module-enum"]], "global_enum() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.global_enum"]], "member() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.member"]], "name (enum.enum \u7684\u5c6c\u6027)": [[207, "enum.Enum.name"]], "nonmember() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.nonmember"]], "property() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.property"]], "show_flag_values() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.show_flag_values"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.unique"]], "value (enum.enum \u7684\u5c6c\u6027)": [[207, "enum.Enum.value"]], "verify() (\u65bc enum \u6a21\u7d44\u4e2d)": [[207, "enum.verify"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EBUSY"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTBLK"]], "enotcapable (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTCAPABLE"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTNAM"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTSOCK"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EOVERFLOW"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EPROTOTYPE"]], "eqfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EQFULL"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.EXFULL"]], "errno": [[208, "module-errno"], [209, "index-4"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[208, "errno.errorcode"]], "arithmeticerror": [[209, "ArithmeticError"]], "assertionerror": [[209, "AssertionError"], [431, "index-19"]], "attributeerror": [[209, "AttributeError"], [425, "index-40"]], "baseexception": [[209, "BaseException"]], "baseexceptiongroup": [[209, "BaseExceptionGroup"]], "blockingioerror": [[209, "BlockingIOError"], [254, "io.BlockingIOError"]], "brokenpipeerror": [[209, "BrokenPipeError"]], "buffererror": [[209, "BufferError"]], "byteswarning": [[209, "BytesWarning"]], "childprocesserror": [[209, "ChildProcessError"]], "connectionabortederror": [[209, "ConnectionAbortedError"]], "connectionerror": [[209, "ConnectionError"]], "connectionrefusederror": [[209, "ConnectionRefusedError"]], "connectionreseterror": [[209, "ConnectionResetError"]], "deprecationwarning": [[209, "DeprecationWarning"]], "eoferror": [[209, "EOFError"]], "encodingwarning": [[209, "EncodingWarning"]], "environmenterror": [[209, "EnvironmentError"]], "exception": [[209, "Exception"], [425, "index-32"], [425, "index-33"], [425, "index-36"], [425, "index-37"], [425, "index-4"], [425, "index-40"], [425, "index-63"], [425, "index-67"], [425, "index-72"]], "exceptiongroup": [[209, "ExceptionGroup"]], "fileexistserror": [[209, "FileExistsError"]], "filenotfounderror": [[209, "FileNotFoundError"]], "floatingpointerror": [[209, "FloatingPointError"]], "futurewarning": [[209, "FutureWarning"]], "generatorexit": [[209, "GeneratorExit"], [425, "index-33"], [425, "index-37"]], "ioerror": [[209, "IOError"]], "importerror": [[209, "ImportError"], [431, "index-34"]], "importwarning": [[209, "ImportWarning"]], "indentationerror": [[209, "IndentationError"]], "indexerror": [[209, "IndexError"]], "interruptederror": [[209, "InterruptedError"]], "isadirectoryerror": [[209, "IsADirectoryError"]], "keyerror": [[209, "KeyError"]], "keyboardinterrupt": [[209, "KeyboardInterrupt"]], "lookuperror": [[209, "LookupError"]], "memoryerror": [[209, "MemoryError"]], "modulenotfounderror": [[209, "ModuleNotFoundError"]], "nameerror": [[209, "NameError"], [425, "index-4"]], "notadirectoryerror": [[209, "NotADirectoryError"]], "notimplementederror": [[209, "NotImplementedError"]], "oserror": [[209, "OSError"]], "overflowerror": [[209, "OverflowError"]], "pep 3134": [[209, "index-2"], [465, "index-12"], [465, "index-28"], [465, "index-29"], [478, "index-64"]], "pep 475": [[209, "index-7"], [221, "index-18"], [289, "index-22"], [289, "index-24"], [289, "index-25"], [289, "index-44"], [324, "index-3"], [324, "index-4"], [324, "index-5"], [324, "index-6"], [324, "index-7"], [325, "index-0"], [329, "index-0"], [329, "index-1"], [333, "index-10"], [333, "index-11"], [333, "index-12"], [333, "index-13"], [333, "index-4"], [333, "index-5"], [333, "index-7"], [333, "index-8"], [333, "index-9"], [361, "index-8"], [473, "index-15"], [473, "index-16"], [473, "index-49"], [478, "index-241"], [478, "index-298"]], "pep 565": [[209, "index-9"], [475, "index-19"]], "pendingdeprecationwarning": [[209, "PendingDeprecationWarning"]], "permissionerror": [[209, "PermissionError"]], "processlookuperror": [[209, "ProcessLookupError"]], "recursionerror": [[209, "RecursionError"]], "referenceerror": [[209, "ReferenceError"]], "resourcewarning": [[209, "ResourceWarning"]], "runtimeerror": [[209, "RuntimeError"]], "runtimewarning": [[209, "RuntimeWarning"]], "stopasynciteration": [[209, "StopAsyncIteration"], [425, "index-36"]], "stopiteration": [[209, "StopIteration"], [425, "index-32"], [431, "index-26"]], "syntaxerror": [[209, "SyntaxError"]], "syntaxwarning": [[209, "SyntaxWarning"]], "systemerror": [[209, "SystemError"]], "systemexit": [[209, "SystemExit"]], "taberror": [[209, "TabError"]], "typeerror": [[209, "TypeError"], [425, "index-63"]], "unboundlocalerror": [[209, "UnboundLocalError"], [424, "index-9"]], "unicodedecodeerror": [[209, "UnicodeDecodeError"]], "unicodeencodeerror": [[209, "UnicodeEncodeError"]], "unicodeerror": [[209, "UnicodeError"]], "unicodetranslateerror": [[209, "UnicodeTranslateError"]], "unicodewarning": [[209, "UnicodeWarning"]], "userwarning": [[209, "UserWarning"]], "valueerror": [[209, "ValueError"], [425, "index-72"]], "warning": [[209, "Warning"], [336, "sqlite3.Warning"]], "windowserror": [[209, "WindowsError"]], "zerodivisionerror": [[209, "ZeroDivisionError"], [425, "index-67"]], "__notes__ (baseexception \u7684\u5c6c\u6027)": [[209, "BaseException.__notes__"]], "add_note() (baseexception \u7684\u65b9\u6cd5)": [[209, "BaseException.add_note"]], "args (baseexception \u7684\u5c6c\u6027)": [[209, "BaseException.args"]], "assert": [[209, "index-3"], [431, "index-18"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[209, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[209, "SystemExit.code"]], "derive() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[209, "BaseExceptionGroup.derive"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[209, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[209, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[209, "OSError.errno"]], "except": [[209, "index-0"], [422, "index-9"]], "exceptions (baseexceptiongroup \u7684\u5c6c\u6027)": [[209, "BaseExceptionGroup.exceptions"]], "filename (oserror \u7684\u5c6c\u6027)": [[209, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[209, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.lineno"]], "message (baseexceptiongroup \u7684\u5c6c\u6027)": [[209, "BaseExceptionGroup.message"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[209, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.offset"]], "raise": [[209, "index-1"], [431, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[209, "UnicodeError.reason"]], "split() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[209, "BaseExceptionGroup.split"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[209, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[209, "OSError.strerror"]], "subgroup() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[209, "BaseExceptionGroup.subgroup"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[209, "SyntaxError.text"]], "try": [[209, "index-0"], [422, "index-9"], [423, "index-64"]], "winerror (oserror \u7684\u5c6c\u6027)": [[209, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[209, "BaseException.with_traceback"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.enable"]], "faulthandler": [[210, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[210, "faulthandler.unregister"]], "i/o control\uff08i/o \u63a7\u5236\uff09": [[211, "index-0"], [221, "index-8"], [333, "index-6"], [356, "index-0"]], "unix": [[211, "index-0"], [432, "index-4"]], "fcntl": [[211, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[211, "fcntl.fcntl"]], "file control\uff08\u6a94\u6848\u63a7\u5236\uff09": [[211, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[211, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[211, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[211, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[212, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[212, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[212, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[212, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[212, "filecmp.dircmp"]], "filecmp": [[212, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[212, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[212, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[212, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[212, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[214, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.close"]], "fileinput": [[214, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[214, "fileinput.nextfile"]], "[] \uff08\u65b9\u62ec\u865f\uff09": [[216, "index-2"], [227, "index-1"], [315, "index-10"], [341, "index-2"], [425, "index-15"], [425, "index-41"], [431, "index-6"]], "filenames\uff08\u6a94\u6848\u540d\u7a31\uff09": [[216, "index-0"], [227, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[216, "fnmatch.filter"]], "fnmatch": [[216, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[216, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[216, "fnmatch.fnmatchcase"]], "glob": [[216, "index-3"], [227, "module-glob"]], "re": [[216, "index-1"], [315, "module-re"], [340, "index-33"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[216, "fnmatch.translate"]], "wildcard expansion\uff08\u842c\u7528\u5b57\u5143\u5c55\u958b\uff09": [[216, "index-0"]], "\u65bc glob \u98a8\u683c\u7684\u842c\u7528\u5b57\u5143\u4e2d": [[216, "index-2"], [227, "index-1"], [227, "index-2"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[217, "fractions.Fraction"]], "pep 515": [[217, "index-0"], [341, "index-19"], [468, "index-109"], [474, "index-7"], [474, "index-8"], [478, "index-261"], [478, "index-262"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.__floor__"]], "__format__() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.__format__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[217, "fractions.Fraction.denominator"]], "fractions": [[217, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[217, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[217, "fractions.Fraction.from_float"]], "is_integer() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.is_integer"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[217, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[217, "fractions.Fraction.numerator"]], "ftp": [[219, "index-0"], [390, "index-11"], [390, "index-13"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[219, "ftplib.FTP"]], "rfc 2640": [[219, "index-14"], [219, "index-15"], [219, "index-17"], [477, "index-22"], [478, "index-176"]], "rfc 3659": [[219, "index-18"]], "rfc 4217": [[219, "index-16"]], "rfc 959": [[219, "index-13"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[219, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.dir"]], "error_perm": [[219, "ftplib.error_perm"]], "error_proto": [[219, "ftplib.error_proto"], [301, "poplib.error_proto"]], "error_reply": [[219, "ftplib.error_reply"]], "error_temp": [[219, "ftplib.error_temp"]], "ftplib": [[219, "module-ftplib"]], "ftplib\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[219, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[219, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[219, "ftplib.FTP.voidcmd"]], "boolean\uff08\u5e03\u6797\u503c\uff09": [[221, "index-0"]], "infinity\uff08\u7121\u7aae\uff09": [[221, "index-3"]], "nan": [[221, "index-3"]], "pythonbreakpoint": [[221, "index-1"], [348, "index-3"], [348, "index-4"], [348, "index-5"], [450, "envvar-PYTHONBREAKPOINT"], [475, "index-12"]], "pythoncaseok": [[221, "index-16"], [450, "envvar-PYTHONCASEOK"], [458, "index-11"], [477, "index-21"], [478, "index-191"]], "__format__": [[221, "index-4"]], "__import__()": [[221, "import__"]], "abs()": [[221, "abs"]], "aiter()": [[221, "aiter"]], "all()": [[221, "all"]], "anext()": [[221, "anext"]], "any()": [[221, "any"]], "ascii()": [[221, "ascii"]], "bin()": [[221, "bin"]], "binary mode\uff08\u4e8c\u9032\u4f4d\u6a21\u5f0f\uff09": [[221, "index-8"]], "bool (\u5167\u5efa\u985e\u5225)": [[221, "bool"]], "breakpoint()": [[221, "breakpoint"]], "buffer size, i/o\uff08\u7de9\u885d\u5340\u5927\u5c0f\u3001i/o\uff09": [[221, "index-8"]], "buffering\uff08\u7de9\u885d\uff09": [[221, "index-8"], [333, "index-6"]], "built-in function": [[221, "abs"], [221, "aiter"], [221, "all"], [221, "anext"], [221, "any"], [221, "ascii"], [221, "bin"], [221, "breakpoint"], [221, "callable"], [221, "chr"], [221, "classmethod"], [221, "compile"], [221, "delattr"], [221, "dir"], [221, "divmod"], [221, "enumerate"], [221, "eval"], [221, "exec"], [221, "filter"], [221, "format"], [221, "getattr"], [221, "globals"], [221, "hasattr"], [221, "hash"], [221, "help"], [221, "hex"], [221, "id"], [221, "import__"], [221, "input"], [221, "isinstance"], [221, "issubclass"], [221, "iter"], [221, "len"], [221, "locals"], [221, "map"], [221, "max"], [221, "min"], [221, "next"], [221, "oct"], [221, "open"], [221, "ord"], [221, "pow"], [221, "print"], [221, "repr"], [221, "reversed"], [221, "round"], [221, "setattr"], [221, "sorted"], [221, "staticmethod"], [221, "sum"], [221, "vars"], [221, "zip"], [279, "multiprocessing.Manager"], [408, "xml.etree.ElementInclude.default_loader"], [408, "xml.etree.ElementInclude.include"]], "callable()": [[221, "callable"]], "chr()": [[221, "chr"]], "classmethod()": [[221, "classmethod"]], "compile()": [[221, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[221, "complex"]], "delattr()": [[221, "delattr"]], "dir()": [[221, "dir"]], "divmod()": [[221, "divmod"]], "enumerate()": [[221, "enumerate"]], "eval()": [[221, "eval"]], "exec": [[221, "index-2"], [340, "index-64"], [431, "index-44"]], "exec()": [[221, "exec"]], "filter()": [[221, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[221, "float"]], "format()": [[221, "format"]], "format()\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[221, "index-4"]], "getattr()": [[221, "getattr"]], "globals()": [[221, "globals"]], "hasattr()": [[221, "hasattr"]], "hash()": [[221, "hash"]], "help()": [[221, "help"]], "hex()": [[221, "hex"]], "id()": [[221, "id"]], "import\uff08\u5f15\u5165\uff09": [[221, "index-13"], [330, "index-2"], [423, "index-42"], [427, "index-9"], [431, "index-34"], [431, "index-39"]], "input()": [[221, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[221, "int"]], "isinstance()": [[221, "isinstance"]], "issubclass()": [[221, "issubclass"]], "iter()": [[221, "iter"]], "len()": [[221, "len"]], "line-buffered i/o\uff08\u5217\u7de9\u885d i/o\uff09": [[221, "index-8"]], "locals()": [[221, "locals"]], "map()": [[221, "map"]], "max()": [[221, "max"]], "min()": [[221, "min"]], "modes\uff08\u6a21\u5f0f\uff09": [[221, "index-6"]], "next()": [[221, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[221, "object"]], "oct()": [[221, "oct"]], "open()": [[221, "open"]], "open() \u5167\u5efa\u51fd\u5f0f": [[221, "index-5"], [221, "index-7"]], "ord()": [[221, "ord"]], "pow()": [[221, "pow"]], "print()": [[221, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[221, "property"]], "repr()": [[221, "repr"]], "reversed()": [[221, "reversed"]], "round()": [[221, "round"]], "setattr()": [[221, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[221, "slice"]], "sorted()": [[221, "sorted"]], "staticmethod()": [[221, "staticmethod"]], "str() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[221, "index-11"]], "sum()": [[221, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[221, "super"]], "text mode\uff08\u6587\u5b57\u6a21\u5f0f\uff09": [[221, "index-8"]], "type (\u5167\u5efa\u985e\u5225)": [[221, "type"]], "unbuffered i/o\uff08\u975e\u7de9\u885d i/o\uff09": [[221, "index-8"]], "vars()": [[221, "vars"]], "zip()": [[221, "zip"]], "pep 412": [[222, "index-0"], [471, "index-16"]], "args (functools.partial \u7684\u5c6c\u6027)": [[222, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[222, "functools.partial.func"]], "functools": [[222, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[222, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[222, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[222, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[222, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.garbage"]], "gc": [[223, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[223, "gc.unfreeze"]], "getopterror": [[224, "getopt.GetoptError"]], "posixly_correct": [[224, "index-0"]], "getopt": [[224, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[224, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[224, "getopt.gnu_getopt"]], "getpasswarning": [[225, "getpass.GetPassWarning"]], "lname": [[225, "index-10"]], "logname": [[225, "index-8"], [289, "index-10"]], "user": [[225, "index-9"]], "username": [[225, "index-11"], [289, "index-11"], [290, "index-20"]], "getpass": [[225, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[225, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[225, "getpass.getuser"]], "gnome": [[226, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[226, "gettext.GNUTranslations"]], "lang": [[226, "index-3"], [226, "index-8"], [262, "index-1"], [262, "index-2"], [262, "index-3"]], "language": [[226, "index-0"], [226, "index-5"]], "lc_all": [[226, "index-1"], [226, "index-6"]], "lc_messages": [[226, "index-2"], [226, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[226, "gettext.NullTranslations"]], "_ \uff08\u5e95\u7dda\uff09": [[226, "index-4"], [341, "index-10"], [430, "index-28"], [430, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.add_fallback"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.find"]], "gettext": [[226, "index-4"], [226, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[226, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.install"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[226, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[226, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.npgettext"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[226, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[226, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.pgettext"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[226, "gettext.translation"]], "**": [[227, "index-2"], [340, "index-13"], [422, "index-32"], [425, "index-18"], [425, "index-50"], [425, "index-58"], [436, "index-4"]], ". \uff08\u9ede\uff09": [[227, "index-1"], [289, "index-45"], [289, "index-50"], [315, "index-0"], [340, "index-36"], [340, "index-46"], [341, "index-2"], [425, "index-39"], [430, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[227, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[227, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[227, "glob.iglob"]], "pathname expansion\uff08\u8def\u5f91\u540d\u7a31\u5c55\u958b\uff09": [[227, "index-0"]], "cycleerror": [[228, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[228, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[228, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[228, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[229, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[229, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[229, "grp.getgrnam"]], "grp": [[229, "module-grp"]], "--best": [[230, "cmdoption-gzip-best"]], "--decompress": [[230, "cmdoption-gzip-d"]], "--fast": [[230, "cmdoption-gzip-fast"]], "badgzipfile": [[230, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[230, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[230, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[230, "gzip.decompress"]], "gzip": [[230, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[230, "cmdoption-gzip-arg-file"], [230, "cmdoption-gzip-best"], [230, "cmdoption-gzip-d"], [230, "cmdoption-gzip-fast"], [230, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[230, "gzip.GzipFile.mtime"]], "name (gzip.gzipfile \u7684\u5c6c\u6027)": [[230, "gzip.GzipFile.name"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[230, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[230, "gzip.GzipFile.peek"]], "openssl": [[231, "index-2"], [337, "index-0"]], "rfc 1321": [[231, "index-1"]], "rfc 7693": [[231, "index-5"]], "rfc 7914": [[231, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2b"]], "blake2b, blake2s": [[231, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[231, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[231, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[231, "hashlib.shake.digest"]], "file_digest() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.file_digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.hash.digest_size"]], "hashlib": [[231, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[231, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[231, "hashlib.shake.hexdigest"]], "md5() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.md5"]], "message digest, md5": [[231, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[231, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha2, sha224, sha256, sha384, sha512, sha3, shake, blake2": [[231, "index-0"]], "sha1() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha1"]], "sha224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha224"]], "sha256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha256"]], "sha384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha384"]], "sha3_224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha3_224"]], "sha3_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha3_256"]], "sha3_384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha3_384"]], "sha3_512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha3_512"]], "sha512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.sha512"]], "shake_128() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.shake_128"]], "shake_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[231, "hashlib.shake_256"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[231, "hashlib.hash.update"]], "\uff08\u4f7f\u7528\u65bc hashlib \u6a21\u7d44\u4e2d\uff09": [[231, "index-2"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.heappushpop"]], "heapq": [[232, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[232, "heapq.nsmallest"]], "rfc 2014": [[233, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[233, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[233, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[233, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[233, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[233, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[233, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[233, "hmac.HMAC.hexdigest"]], "hmac": [[233, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[233, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[233, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[233, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[234, "html.escape"]], "html": [[234, "module-html"], [236, "index-0"], [390, "index-12"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[234, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[235, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[235, "html.entities.entitydefs"]], "html.entities": [[235, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[235, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[235, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[236, "html.parser.HTMLParser"]], "xhtml": [[236, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[236, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[236, "html.parser.HTMLParser.unknown_decl"]], "httpmethod (http \u4e2d\u7684\u985e\u5225)": [[237, "http.HTTPMethod"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[237, "http.HTTPStatus"]], "rfc 2295": [[237, "index-209"]], "rfc 2324": [[237, "index-192"]], "rfc 2518": [[237, "index-154"]], "rfc 2774": [[237, "index-212"]], "rfc 3229": [[237, "index-165"]], "rfc 4918": [[237, "index-163"], [237, "index-194"], [237, "index-195"], [237, "index-196"], [237, "index-210"]], "rfc 5789": [[237, "index-76"]], "rfc 5842": [[237, "index-164"], [237, "index-211"]], "rfc 6585": [[237, "index-199"], [237, "index-200"], [237, "index-201"], [237, "index-213"]], "rfc 7231": [[237, "index-152"], [237, "index-153"], [237, "index-156"], [237, "index-157"], [237, "index-158"], [237, "index-159"], [237, "index-160"], [237, "index-161"], [237, "index-166"], [237, "index-167"], [237, "index-168"], [237, "index-169"], [237, "index-171"], [237, "index-172"], [237, "index-174"], [237, "index-176"], [237, "index-177"], [237, "index-178"], [237, "index-179"], [237, "index-180"], [237, "index-182"], [237, "index-183"], [237, "index-184"], [237, "index-185"], [237, "index-187"], [237, "index-188"], [237, "index-189"], [237, "index-191"], [237, "index-198"], [237, "index-203"], [237, "index-204"], [237, "index-205"], [237, "index-206"], [237, "index-207"], [237, "index-208"], [237, "index-214"], [237, "index-215"], [237, "index-216"], [237, "index-217"], [237, "index-218"], [237, "index-219"], [237, "index-220"], [237, "index-221"], [237, "index-222"], [237, "index-223"], [237, "index-224"], [237, "index-225"], [237, "index-226"]], "rfc 7232": [[237, "index-170"], [237, "index-186"]], "rfc 7233": [[237, "index-162"], [237, "index-190"]], "rfc 7235": [[237, "index-175"], [237, "index-181"]], "rfc 7238": [[237, "index-173"]], "rfc 7540": [[237, "index-193"]], "rfc 7725": [[237, "index-202"]], "rfc 8297": [[237, "index-155"]], "rfc 8470": [[237, "index-197"]], "http\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[237, "index-0"]], "badstatusline": [[238, "http.client.BadStatusLine"]], "cannotsendheader": [[238, "http.client.CannotSendHeader"]], "cannotsendrequest": [[238, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[238, "http.client.HTTPConnection"]], "httpexception": [[238, "http.client.HTTPException"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[238, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[238, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[238, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[238, "http.client.HTTP_PORT"]], "improperconnectionstate": [[238, "http.client.ImproperConnectionState"]], "incompleteread": [[238, "http.client.IncompleteRead"]], "invalidurl": [[238, "http.client.InvalidURL"]], "linetoolong": [[238, "http.client.LineTooLong"]], "notconnected": [[238, "http.client.NotConnected"]], "rfc 2616#section-14.23": [[238, "index-4"]], "rfc 2616#section-5.1.2": [[238, "index-3"], [238, "index-5"]], "rfc 7230": [[238, "index-7"], [390, "index-19"]], "remotedisconnected": [[238, "http.client.RemoteDisconnected"]], "responsenotready": [[238, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[238, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[238, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[238, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[238, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.fileno"]], "get_proxy_response_headers() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.get_proxy_response_headers"]], "getcode() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.getcode"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.getresponse"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.headers"]], "http.client": [[238, "module-http.client"]], "http.client\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[238, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[238, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[238, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[238, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.url"]], "urllib.request": [[238, "index-1"], [390, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[238, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.LWPCookieJar"]], "loaderror": [[239, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[239, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[239, "index-1"], [239, "index-15"], [239, "index-21"], [239, "index-23"], [239, "index-24"], [239, "index-3"], [239, "index-4"], [239, "index-6"], [240, "index-0"], [240, "index-2"], [240, "index-3"], [240, "index-4"], [240, "index-5"], [240, "index-6"], [240, "index-7"]], "rfc 2964": [[239, "index-10"]], "rfc 2965": [[239, "index-0"], [239, "index-11"], [239, "index-12"], [239, "index-13"], [239, "index-14"], [239, "index-16"], [239, "index-17"], [239, "index-18"], [239, "index-19"], [239, "index-2"], [239, "index-20"], [239, "index-22"], [239, "index-25"], [239, "index-5"], [239, "index-7"], [239, "index-8"], [239, "index-9"], [390, "index-20"], [390, "index-21"], [390, "index-5"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[239, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.discard"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[239, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[239, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[239, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[239, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[239, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[240, "http.cookies.BaseCookie"]], "cookieerror": [[240, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[240, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[240, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[240, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[240, "http.cookies.Morsel.coded_value"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.copy"]], "http.cookies": [[240, "module-http.cookies"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[240, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[240, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[240, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[240, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.output"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[240, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[240, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[240, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[240, "http.cookies.BaseCookie.value_encode"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[241, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[241, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[241, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[241, "index-1"], [389, "index-2"], [389, "index-4"], [389, "index-5"], [389, "index-7"], [389, "index-8"], [464, "index-10"], [464, "index-13"], [473, "index-42"], [475, "index-35"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[241, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[241, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[241, "index-3"], [241, "module-http.server"]], "httpd": [[241, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[241, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[241, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[243, "index-4"]], "cut\uff08\u526a\u4e0b\uff09": [[243, "index-4"]], "idlestartup": [[243, "index-5"], [478, "index-224"], [478, "index-229"], [478, "index-254"]], "integrated development environment\uff08\u6574\u5408\u958b\u767c\u74b0\u5883\uff09": [[243, "index-0"]], "module browser\uff08\u6a21\u7d44\u700f\u89bd\u5668\uff09": [[243, "index-1"]], "pep 434": [[243, "index-7"], [464, "index-16"]], "pythonstartup": [[243, "index-6"], [316, "index-0"], [330, "index-7"], [348, "index-18"], [433, "index-5"], [450, "envvar-PYTHONSTARTUP"], [450, "index-8"], [472, "index-40"], [472, "index-41"], [478, "index-225"], [478, "index-230"], [478, "index-255"]], "paste\uff08\u8cbc\u4e0a\uff09": [[243, "index-4"]], "path browser\uff08\u8def\u5f91\u700f\u89bd\u5668\uff09": [[243, "index-1"]], "python editor\uff08python \u7de8\u8f2f\u5668\uff09": [[243, "index-0"]], "run script\uff08\u57f7\u884c\u8173\u672c\uff09": [[243, "index-2"]], "set breakpoint": [[243, "index-4"]], "breakpoints\uff08\u4e2d\u65b7\u9ede\uff09": [[243, "index-4"]], "debugger\uff08\u9664\u932f\u5668\uff09": [[243, "index-3"], [293, "index-2"], [348, "index-11"], [348, "index-29"], [360, "index-1"]], "idlelib": [[243, "module-idlelib"]], "stack viewer\uff08\u5806\u758a\u6aa2\u8996\u5668\uff09": [[243, "index-3"]], "imap4": [[244, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[244, "imaplib.IMAP4"]], "imap4.abort": [[244, "imaplib.IMAP4.abort"]], "imap4.error": [[244, "imaplib.IMAP4.error"]], "imap4.readonly": [[244, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[244, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[244, "imaplib.IMAP4_SSL"]], "imap4_stream": [[244, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[244, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[244, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[244, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[244, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[244, "imaplib.ParseFlags"]], "rfc 1730": [[244, "index-2"]], "rfc 2060": [[244, "index-1"], [244, "index-7"]], "rfc 2342": [[244, "index-6"], [459, "index-19"]], "rfc 3501": [[244, "index-8"]], "rfc 5161": [[244, "index-3"], [473, "index-33"]], "rfc 6855": [[244, "index-4"], [244, "index-5"], [473, "index-34"], [473, "index-35"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[244, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[244, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[244, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[244, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[244, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[245, "index-2"]], "imghdr": [[245, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[245, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[245, "imghdr.what"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.FileLoader"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[246, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.ModuleSpec"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[246, "index-0"]], "pep 3120": [[246, "index-10"], [430, "index-1"], [465, "index-4"]], "pep 366": [[246, "index-4"], [320, "index-7"], [427, "index-11"], [427, "index-12"], [427, "index-22"], [427, "index-24"], [471, "index-22"]], "pep 488": [[246, "index-22"], [246, "index-25"], [246, "index-7"], [307, "index-2"], [357, "index-4"], [450, "index-11"], [450, "index-13"], [450, "index-14"], [450, "index-15"], [473, "index-24"], [473, "index-25"], [473, "index-50"], [478, "index-297"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.PathFinder"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.ResourceLoader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[246, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.SourcelessFileLoader"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[246, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[246, "importlib.__import__"]], "_incompatible_extension_module_restrictions() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util._incompatible_extension_module_restrictions"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[246, "importlib.machinery.all_suffixes"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.cached"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[246, "importlib.util.LazyLoader.factory"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[246, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[246, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[246, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[246, "importlib.import_module"]], "importlib": [[246, "module-importlib"]], "importlib.abc": [[246, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source \u65b9\u6cd5": [[246, "index-15"]], "importlib.machinery": [[246, "module-importlib.machinery"]], "importlib.util": [[246, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[246, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[246, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[246, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[246, "importlib.invalidate_caches"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourcelessFileLoader.is_package"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.loader_state"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.module_from_spec"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[246, "importlib.abc.FileLoader.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.SourcelessFileLoader.name"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[246, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[246, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[246, "importlib.machinery.SourcelessFileLoader.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[246, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourceFileLoader.path_stats"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[246, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.resolve_name"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[246, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[246, "importlib.machinery.SourceFileLoader.set_data"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[246, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[246, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[246, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[247, "index-0"]], "importlib.metadata": [[247, "module-importlib.metadata"]], "anchor (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.Anchor"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.Package"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.Resource"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.as_file"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.contents"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.files"]], "importlib.resources": [[248, "module-importlib.resources"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.is_resource"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.open_binary"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.open_text"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.path"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.read_binary"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[248, "importlib.resources.read_text"]], "resourcereader (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[249, "importlib.resources.abc.ResourceReader"]], "traversable (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[249, "importlib.resources.abc.Traversable"]], "traversableresources (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[249, "importlib.resources.abc.TraversableResources"]], "__truediv__() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.__truediv__"]], "contents() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.ResourceReader.contents"]], "files() (importlib.resources.abc.traversableresources \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.TraversableResources.files"]], "importlib.resources.abc": [[249, "module-importlib.resources.abc"]], "is_dir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.is_dir"]], "is_file() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.is_file"]], "is_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.ResourceReader.is_resource"]], "iterdir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.iterdir"]], "joinpath() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.joinpath"]], "name (importlib.resources.abc.traversable \u7684\u5c6c\u6027)": [[249, "importlib.resources.abc.Traversable.name"]], "open() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.open"]], "open_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.ResourceReader.open_resource"]], "read_bytes() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.read_bytes"]], "read_text() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.Traversable.read_text"]], "resource_path() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[249, "importlib.resources.abc.ResourceReader.resource_path"]], "--details": [[251, "cmdoption-inspect-details"]], "any_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.ANY_CONTIGUOUS"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.BoundArguments"]], "bufferflags (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.BufferFlags"]], "contig (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.CONTIG"]], "contig_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.CONTIG_RO"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_NEWLOCALS"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.CO_VARKEYWORDS"]], "c_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.C_CONTIGUOUS"]], "format (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.FORMAT"]], "full (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.FULL"]], "full_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.FULL_RO"]], "f_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.F_CONTIGUOUS"]], "frameinfo (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.FrameInfo"]], "indirect (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.INDIRECT"]], "nd (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.ND"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.Parameter"]], "read (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.READ"]], "records (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.RECORDS"]], "records_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.RECORDS_RO"]], "simple (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.SIMPLE"]], "strided (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.STRIDED"]], "strided_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.STRIDED_RO"]], "strides (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.STRIDES"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.Signature"]], "traceback (inspect \u4e2d\u7684\u985e\u5225)": [[251, "inspect.Traceback"]], "writable (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.WRITABLE"]], "write (inspect.bufferflags \u7684\u5c6c\u6027)": [[251, "inspect.BufferFlags.WRITE"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[251, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[251, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[251, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[251, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[251, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.cleandoc"]], "code_context (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.code_context"]], "code_context (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.code_context"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[251, "inspect.Signature.empty"]], "filename (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.filename"]], "filename (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.filename"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.formatargvalues"]], "frame (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.frame"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[251, "inspect.Signature.from_callable"]], "function (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.function"]], "function (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.function"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.get_annotations"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getargvalues"]], "getasyncgenlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getasyncgenlocals"]], "getasyncgenstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getasyncgenstate"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getmembers"]], "getmembers_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getmembers_static"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.getsourcelines"]], "index (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.index"]], "index (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.index"]], "inspect": [[251, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[251, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.ismethoddescriptor"]], "ismethodwrapper() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.ismethodwrapper"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[251, "inspect.BoundArguments.kwargs"]], "lineno (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.lineno"]], "lineno (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.lineno"]], "markcoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.markcoroutinefunction"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[251, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[251, "inspect.Signature.parameters"]], "positions (inspect.frameinfo \u7684\u5c6c\u6027)": [[251, "inspect.FrameInfo.positions"]], "positions (inspect.traceback \u7684\u5c6c\u6027)": [[251, "inspect.Traceback.positions"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[251, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[251, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[251, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[251, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[251, "inspect.unwrap"]], "internet\uff08\u7db2\u969b\u7db2\u8def\uff09": [[252, "index-0"]], "world wide web \uff08\u5168\u7403\u8cc7\u8a0a\u7db2\uff09": [[252, "index-0"], [389, "index-0"], [391, "index-0"]], "socket": [[252, "index-1"], [333, "index-0"], [333, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[254, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[254, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[254, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[254, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[254, "io.IncrementalNewlineDecoder"]], "pep 597": [[254, "index-7"], [467, "index-93"], [478, "index-105"]], "pep 686": [[254, "index-1"], [289, "index-5"]], "pythonwarndefaultencoding": [[254, "index-3"], [450, "envvar-PYTHONWARNDEFAULTENCODING"], [450, "index-29"], [467, "index-98"], [478, "index-106"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[254, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[254, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[254, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[254, "io.TextIOWrapper"]], "unsupportedoperation": [[254, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[254, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[254, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[254, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[254, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[254, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[254, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[254, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[254, "io.StringIO.getvalue"]], "io": [[254, "module-io"], [423, "index-53"]], "io \u6a21\u7d44": [[254, "index-0"]], "io.incrementalnewlinedecoder \u985e\u5225": [[254, "index-5"]], "io.textiowrapper \u985e\u5225": [[254, "index-4"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[254, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[254, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[254, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[254, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[254, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[254, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[254, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[254, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[254, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[254, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[254, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[254, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[254, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[254, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[254, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[254, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[254, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[254, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[254, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[254, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[254, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[254, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[254, "io.IOBase.writelines"]], "addressvalueerror": [[255, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[255, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[255, "ipaddress.NetmaskValueError"]], "rfc 2373": [[255, "index-1"], [255, "index-3"], [255, "index-5"]], "rfc 3056": [[255, "index-12"]], "rfc 3171": [[255, "index-0"]], "rfc 3330": [[255, "index-4"]], "rfc 3879": [[255, "index-9"]], "rfc 3927": [[255, "index-6"]], "rfc 4007": [[255, "index-11"], [255, "index-8"]], "rfc 4193": [[255, "index-10"]], "rfc 4291": [[255, "index-7"], [478, "index-90"]], "rfc 4380": [[255, "index-13"]], "rfc 5735": [[255, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.ip_network"]], "ipaddress": [[255, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[255, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[255, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[255, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.accumulate"]], "batched() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.batched"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[257, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.islice"]], "itertools": [[257, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[257, "itertools.zip_longest"]], "--compact": [[258, "cmdoption-json.tool-indent"]], "--json-lines": [[258, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[258, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[258, "cmdoption-json.tool-indent"]], "--sort-keys": [[258, "cmdoption-json.tool-sort-keys"]], "--tab": [[258, "cmdoption-json.tool-indent"]], "jsondecodeerror": [[258, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[258, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[258, "json.JSONEncoder"]], "rfc 4627": [[258, "index-3"], [258, "index-8"]], "rfc 7159": [[258, "index-2"], [258, "index-4"], [258, "index-7"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[258, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[258, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[258, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[258, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[258, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[258, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[258, "json.JSONEncoder.encode"]], "infile": [[258, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[258, "json.JSONEncoder.iterencode"]], "json": [[258, "module-json"], [441, "index-1"]], "json.tool": [[258, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[258, "cmdoption-json.tool-arg-infile"], [258, "cmdoption-json.tool-arg-outfile"], [258, "cmdoption-json.tool-h"], [258, "cmdoption-json.tool-indent"], [258, "cmdoption-json.tool-json-lines"], [258, "cmdoption-json.tool-no-ensure-ascii"], [258, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[258, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[258, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[258, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[258, "json.JSONDecodeError.msg"]], "outfile": [[258, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[258, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[258, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[259, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[259, "keyword.issoftkeyword"]], "keyword": [[259, "module-keyword"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[259, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[259, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[261, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[261, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[261, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[261, "linecache.lazycache"]], "linecache": [[261, "module-linecache"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.CRNCYSTR"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.LC_TIME"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.RADIXCHAR"]], "rfc 1766": [[262, "index-4"], [262, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.YESEXPR"]], "_locale": [[262, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.atoi"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.dgettext"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.getdefaultlocale"]], "getencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.getencoding"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.gettext"]], "locale": [[262, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[262, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.BufferingFormatter"]], "critical (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.CRITICAL"]], "debug (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.DEBUG"]], "error (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.ERROR"]], "errors\uff08\u932f\u8aa4\uff09": [[263, "index-0"], [424, "index-15"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.Handler"]], "info (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.INFO"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[263, "logging.LoggerAdapter"]], "notset (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.NOTSET"]], "pep 282": [[263, "index-1"], [328, "index-2"], [460, "index-11"], [460, "index-12"]], "warning (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.WARNING"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.__init__"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.disable"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[263, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[263, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[263, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[263, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[263, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[263, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[263, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[263, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.getChild"]], "getchildren() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.getChildren"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.getEffectiveLevel"]], "gethandlerbyname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getHandlerByName"]], "gethandlernames() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getHandlerNames"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getLevelName"]], "getlevelnamesmapping() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getLevelNamesMapping"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[263, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.handleError"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.lastResort"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.log"]], "logging": [[263, "module-logging"]], "logging\uff08\u65e5\u8a8c\uff09": [[263, "index-0"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.makeRecord"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[263, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[263, "logging.Logger.propagate"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[263, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[263, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[263, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[264, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[264, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[264, "logging.config.listen"]], "logging.config": [[264, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[264, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[265, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[265, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[265, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[265, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.createSocket"]], "createsocket() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SysLogHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[265, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[265, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[265, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[265, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[265, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[265, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[265, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[265, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[265, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[265, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[265, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[265, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[265, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[266, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[266, "lzma.LZMADecompressor"]], "lzmaerror": [[266, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[266, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[266, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[266, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[266, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[266, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[266, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[266, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[266, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[266, "lzma.is_check_supported"]], "lzma": [[266, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[266, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[266, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[266, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[266, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.BabylMessage"]], "externalclasherror": [[267, "mailbox.ExternalClashError"]], "formaterror": [[267, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.Message"]], "nosuchmailboxerror": [[267, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[267, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.close"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[267, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[267, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[267, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[267, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[267, "mailbox.mbox.lock"]], "mailbox": [[267, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[267, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[267, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[267, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[267, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[267, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[267, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[267, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[267, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[268, "index-0"]], "rfc 1524": [[268, "index-1"], [268, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[268, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[268, "mailcap.getcaps"]], "mailcap": [[268, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[270, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[270, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[270, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[270, "marshal.loads"]], "marshal": [[270, "module-marshal"]], "shelve": [[270, "index-0"], [326, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[270, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.atanh"]], "cbrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.cbrt"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.exp"]], "exp2() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.exp2"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.log2"]], "math": [[271, "module-math"], [340, "index-15"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.sqrt"]], "sumprod() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.sumprod"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[271, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[272, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.common_types"]], "content type\uff08\u5167\u5bb9\u985e\u578b\uff09": [[272, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[272, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.knownfiles"]], "mime.types": [[272, "index-2"]], "mimetypes": [[272, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[272, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[272, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[272, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[272, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[272, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MADV_WILLNEED"]], "map_aligned_super (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_ALIGNED_SUPER"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_ANONYMOUS"]], "map_conceal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_CONCEAL"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_SHARED"]], "map_stack (\u65bc mmap \u6a21\u7d44\u4e2d)": [[274, "mmap.MAP_STACK"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[274, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.madvise"]], "mmap": [[274, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[274, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[274, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[275, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[275, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[275, "modulefinder.ReplacePackage"]], "modulefinder": [[275, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[275, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[275, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[275, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[277, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[277, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[277, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[277, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[277, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[277, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[277, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[277, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[277, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[277, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[277, "msilib.Database.OpenView"]], "pep 594#msilib": [[277, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[277, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[277, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[277, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[277, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[277, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[277, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[277, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[277, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[277, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[277, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[277, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[277, "msilib.Control.mapping"]], "msi": [[277, "index-0"]], "msilib": [[277, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[277, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[277, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[277, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[277, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[277, "msilib.Dialog.text"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.LK_UNLCK"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.locking"]], "msvcrt": [[278, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[278, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[279, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[279, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Process"]], "processerror": [[279, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[279, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[279, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[279, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[279, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[279, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[279, "module-multiprocessing"]], "multiprocessing.manager()": [[279, "multiprocessing.Manager"]], "multiprocessing.connection": [[279, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[279, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[279, "module-multiprocessing.managers"]], "multiprocessing.pool": [[279, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[279, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[279, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[279, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[279, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.set_executable"]], "set_forkserver_preload() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.set_forkserver_preload"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[279, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[279, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[279, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[279, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[279, "multiprocessing.connection.wait"]], "named shared memory\uff08\u9644\u540d\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[280, "index-0"]], "posix shared memory\uff08posix \u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[280, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory\uff08\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[280, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[280, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[280, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[280, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[280, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[280, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[280, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[280, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[280, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[280, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[280, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[282, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[282, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[282, "netrc.netrc.authenticators"]], "filename (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[282, "netrc.NetrcParseError.filename"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[282, "netrc.netrc.hosts"]], "lineno (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[282, "netrc.NetrcParseError.lineno"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[282, "netrc.netrc.macros"]], "msg (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[282, "netrc.NetrcParseError.msg"]], "netrc": [[282, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[282, "netrc.netrc"]], "pep 594#nis": [[283, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[283, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[283, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[283, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[283, "nis.match"]], "nis": [[283, "module-nis"]], "nntp": [[284, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[284, "nntplib.NNTP"]], "nntpdataerror": [[284, "nntplib.NNTPDataError"]], "nntperror": [[284, "nntplib.NNTPError"]], "nntppermanenterror": [[284, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[284, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[284, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[284, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[284, "nntplib.NNTP_SSL"]], "network news transfer protocol\uff08\u7db2\u8def\u65b0\u805e\u50b3\u8f38\u5354\u5b9a\uff09": [[284, "index-0"]], "pep 594": [[284, "index-12"], [468, "index-114"], [468, "index-85"], [469, "index-28"], [469, "index-30"], [469, "index-33"], [478, "index-36"], [478, "index-46"], [478, "index-56"], [478, "index-67"], [478, "index-68"], [478, "index-72"]], "rfc 2980": [[284, "index-4"], [284, "index-9"]], "rfc 3977": [[284, "index-10"], [284, "index-2"], [284, "index-6"], [284, "index-7"], [284, "index-8"]], "rfc 4642": [[284, "index-5"]], "rfc 977": [[284, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[284, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[284, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[284, "nntplib.NNTP.nntp_version"]], "nntplib": [[284, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[284, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[284, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[285, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[285, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[285, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[285, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[285, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[285, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[285, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[285, "numbers.Complex.imag"]], "numbers": [[285, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[285, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[285, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__and__"]], "__call__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__call__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.attrgetter"]], "call() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.call"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.not_"]], "operator": [[287, "module-operator"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[287, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "ambiguousoptionerror": [[288, "optparse.AmbiguousOptionError"]], "badoptionerror": [[288, "optparse.BadOptionError"]], "option (optparse \u4e2d\u7684\u985e\u5225)": [[288, "optparse.Option"]], "optionconflicterror": [[288, "optparse.OptionConflictError"]], "optionerror": [[288, "optparse.OptionError"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[288, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[288, "optparse.OptionParser"]], "optionvalueerror": [[288, "optparse.OptionValueError"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.TYPE_CHECKER"]], "values (optparse \u4e2d\u7684\u985e\u5225)": [[288, "optparse.Values"]], "action (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.nargs"]], "optparse": [[288, "module-optparse"]], "parse_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.parse_args"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[288, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[288, "optparse.Option.type"]], "..": [[289, "index-46"]], "/ \uff08\u659c\u7dda\uff09": [[289, "index-47"], [289, "index-49"], [340, "index-13"], [422, "index-32"], [425, "index-67"]], ": \uff08\u5192\u865f\uff09": [[289, "index-51"], [336, "index-7"], [341, "index-2"], [422, "index-16"], [422, "index-18"], [422, "index-28"], [422, "index-3"], [422, "index-34"], [422, "index-4"], [422, "index-40"], [422, "index-6"], [422, "index-9"], [425, "index-17"], [425, "index-44"], [425, "index-90"], [430, "index-25"], [431, "index-15"], [436, "index-6"]], "; \uff08\u5206\u865f\uff09": [[289, "index-51"], [422, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLD_TRAPPED"]], "clone_files (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_FILES"]], "clone_fs (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_FS"]], "clone_newcgroup (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWCGROUP"]], "clone_newipc (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWIPC"]], "clone_newnet (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWNET"]], "clone_newns (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWNS"]], "clone_newpid (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWPID"]], "clone_newtime (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWTIME"]], "clone_newuser (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWUSER"]], "clone_newuts (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_NEWUTS"]], "clone_sighand (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_SIGHAND"]], "clone_sysvsem (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_SYSVSEM"]], "clone_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_THREAD"]], "clone_vm (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.CLONE_VM"]], "comspec": [[289, "index-43"], [344, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[289, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.O_WRONLY"]], "pep 524": [[289, "index-53"], [474, "index-1"], [474, "index-31"], [474, "index-32"], [478, "index-267"], [478, "index-268"]], "pidfd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PIDFD_NONBLOCK"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.POSIX_SPAWN_OPEN"]], "prio_darwin_bg (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_DARWIN_BG"]], "prio_darwin_nonui (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_DARWIN_NONUI"]], "prio_darwin_process (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_DARWIN_PROCESS"]], "prio_darwin_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_DARWIN_THREAD"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[289, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SEEK_CUR"]], "seek_data (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SEEK_DATA"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SEEK_END"]], "seek_hole (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SEEK_HOLE"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SF_MNOWAIT"]], "sf_nocache (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SF_NOCACHE"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.SPLICE_F_NONBLOCK"]], "unc paths\uff08unc \u8def\u5f91\uff09": [[289, "index-28"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[289, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.altsep"]], "changing\uff08\u6539\u8b8a\uff09": [[289, "index-26"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[289, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[289, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.cpu_count"]], "creating\uff08\u5efa\u7acb\uff09": [[289, "index-28"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.defpath"]], "deleting\uff08\u522a\u9664\uff09": [[289, "index-21"], [289, "index-29"], [328, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.devnull"]], "directory\uff08\u76ee\u9304\uff09": [[289, "index-26"], [289, "index-28"], [289, "index-29"], [289, "index-31"], [289, "index-32"], [328, "index-1"], [330, "index-1"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.dup2"]], "effective id": [[289, "index-8"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.environb"]], "environment variables\uff08\u74b0\u5883\u8b8a\u6578\uff09": [[289, "index-17"], [289, "index-21"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getgroups"]], "gethostbyaddr()\uff08\u65bc socket \u6a21\u7d44\uff09": [[289, "index-20"]], "gethostname()\uff08\u65bc socket \u6a21\u7d44\uff09": [[289, "index-20"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.getxattr"]], "group\uff08\u7fa4\u7d44\uff09": [[289, "index-12"], [289, "index-9"]], "id": [[289, "index-13"], [289, "index-16"], [423, "index-1"]], "id of parent": [[289, "index-14"]], "id, setting\uff08\u8a2d\u5b9a\uff09": [[289, "index-19"]], "in pathnames (windows)\uff08\u5728\u8def\u5f91\u540d\u7a31\u4e2d (windows)\uff09": [[289, "index-48"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.is_file"]], "is_junction() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.is_junction"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.kill"]], "killing": [[289, "index-37"], [289, "index-38"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[289, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.listdir"]], "listdrives() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.listdrives"]], "listmounts() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.listmounts"]], "listvolumes() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.listvolumes"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lockf"]], "login_tty() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.login_tty"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[289, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.openpty"]], "os": [[289, "module-os"], [302, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[289, "os.DirEntry.path"]], "path separator (posix)\uff08\u8def\u5f91\u5206\u9694\u5668 (posix)\uff09": [[289, "index-51"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.preadv"]], "process": [[289, "index-12"], [289, "index-13"], [289, "index-14"], [289, "index-15"], [289, "index-18"], [289, "index-37"], [289, "index-38"], [289, "index-9"]], "pty": [[289, "index-23"], [305, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[289, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[289, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sched_yield"]], "scheduling priority\uff08\u6392\u7a0b\u512a\u5148\u6b0a\uff09": [[289, "index-15"], [289, "index-18"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setgroups"]], "setns() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setns"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setsid"]], "setting\uff08\u8a2d\u5b9a\uff09": [[289, "index-17"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.setxattr"]], "signalling\uff08\u4fe1\u865f\uff09": [[289, "index-37"], [289, "index-38"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_birthtime"]], "st_birthtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_birthtime_ns"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[289, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.startfile"]], "stat": [[289, "index-30"], [338, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[289, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[289, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[289, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.times"]], "traversal\uff08\u904d\u6b77\uff09": [[289, "index-31"], [289, "index-32"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.unsetenv"]], "unshare() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.unshare"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.urandom"]], "user\uff08\u4f7f\u7528\u8005\uff09": [[289, "index-16"], [289, "index-19"], [289, "index-8"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.walk"]], "walking": [[289, "index-31"], [289, "index-32"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[289, "os.writev"]], "\u4ee5\u53ca os.makedirs()": [[289, "index-28"]], "\u65bc pathnames\uff08\u8def\u5f91\u540d\u7a31\uff09\u4e2d": [[289, "index-45"], [289, "index-46"], [289, "index-47"], [289, "index-49"], [289, "index-50"]], "home": [[290, "index-16"], [290, "index-21"], [364, "index-1"], [476, "index-14"], [476, "index-21"], [478, "index-200"], [478, "index-201"]], "homedrive": [[290, "index-19"]], "homepath": [[290, "index-18"]], "userprofile": [[290, "index-17"], [476, "index-13"], [476, "index-20"], [478, "index-199"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.dirname"]], "environment variables expansion (windows)\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[290, "index-9"]], "environment variables expansion\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b\uff09": [[290, "index-9"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.getsize"]], "home directory expansion\uff08\u5bb6\u76ee\u9304\u5c55\u958b\uff09": [[290, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.isabs"]], "isdevdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.isdevdrive"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.isfile"]], "isjunction() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.isjunction"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.normpath"]], "operations\uff08\u64cd\u4f5c\uff09": [[290, "index-0"], [292, "index-0"], [340, "index-1"], [340, "index-16"], [340, "index-5"]], "os.path": [[290, "module-os.path"]], "pwd": [[290, "index-2"], [306, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.splitext"]], "splitroot() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.splitroot"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[290, "os.path.supports_unicode_filenames"]], "~ \uff08\u6ce2\u6d6a\u865f\uff09": [[290, "index-1"], [340, "index-16"], [425, "index-62"]], "audiodev": [[291, "index-1"]], "mixerdev": [[291, "index-2"]], "ossaudioerror": [[291, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[291, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[291, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[291, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[291, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[291, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[291, "ossaudiodev.openmixer"]], "ossaudiodev": [[291, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[291, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[292, "index-1"], [472, "index-30"], [472, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.PurePath"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[292, "pathlib.WindowsPath"]], "absolute() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.absolute"]], "anchor (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.anchor"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[292, "pathlib.Path.cwd"]], "drive (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.drive"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[292, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_file"]], "is_junction() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_junction"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.lchmod"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.mkdir"]], "name (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.name"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.owner"]], "parent (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.parent"]], "parents (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.parents"]], "parts (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.parts"]], "pathlib": [[292, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.rmdir"]], "root (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.root"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.stat"]], "stem (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.stem"]], "suffix (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.suffix"]], "suffixes (pathlib.purepath \u7684\u5c6c\u6027)": [[292, "pathlib.PurePath.suffixes"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.unlink"]], "walk() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.walk"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.with_name"]], "with_segments() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.with_segments"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[292, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[292, "pathlib.Path.write_text"]], "! (pdb command)": [[293, "pdbcommand-0"]], ".pdbrc": [[293, "index-2"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[293, "pdb.Pdb"]], "pdb\uff08pdb \u4e2d\u7684\u985e\u5225\uff09": [[293, "index-1"]], "alias (pdb command)": [[293, "pdbcommand-alias"]], "args (pdb command)": [[293, "pdbcommand-args"]], "break (pdb command)": [[293, "pdbcommand-break"]], "clear (pdb command)": [[293, "pdbcommand-clear"]], "commands (pdb command)": [[293, "pdbcommand-commands"]], "condition (pdb command)": [[293, "pdbcommand-condition"]], "continue (pdb command)": [[293, "pdbcommand-continue"]], "debug (pdb command)": [[293, "pdbcommand-debug"]], "disable (pdb command)": [[293, "pdbcommand-disable"]], "display (pdb command)": [[293, "pdbcommand-display"]], "down (pdb command)": [[293, "pdbcommand-down"]], "enable (pdb command)": [[293, "pdbcommand-enable"]], "help (pdb command)": [[293, "pdbcommand-help"]], "ignore (pdb command)": [[293, "pdbcommand-ignore"]], "interact (pdb command)": [[293, "pdbcommand-interact"]], "jump (pdb command)": [[293, "pdbcommand-jump"]], "list (pdb command)": [[293, "pdbcommand-list"]], "ll (pdb command)": [[293, "pdbcommand-ll"]], "next (pdb command)": [[293, "pdbcommand-next"]], "p (pdb command)": [[293, "pdbcommand-p"]], "pdb": [[293, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.post_mortem"]], "pp (pdb command)": [[293, "pdbcommand-pp"]], "quit (pdb command)": [[293, "pdbcommand-quit"]], "restart (pdb command)": [[293, "pdbcommand-restart"]], "return (pdb command)": [[293, "pdbcommand-return"]], "retval (pdb command)": [[293, "pdbcommand-retval"]], "run (pdb command)": [[293, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[293, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[293, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[293, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[293, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[293, "pdb.set_trace"]], "source (pdb command)": [[293, "pdbcommand-source"]], "step (pdb command)": [[293, "pdbcommand-step"]], "tbreak (pdb command)": [[293, "pdbcommand-tbreak"]], "unalias (pdb command)": [[293, "pdbcommand-unalias"]], "undisplay (pdb command)": [[293, "pdbcommand-undisplay"]], "until (pdb command)": [[293, "pdbcommand-until"]], "up (pdb command)": [[293, "pdbcommand-up"]], "whatis (pdb command)": [[293, "pdbcommand-whatis"]], "where (pdb command)": [[293, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.DEFAULT_PROTOCOL"]], "external data representation\uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\u6cd5\uff09": [[295, "index-1"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[295, "index-2"], [460, "index-21"], [460, "index-22"], [460, "index-23"]], "pep 3154": [[295, "index-3"], [472, "index-12"], [472, "index-39"], [478, "index-221"]], "pep 574": [[295, "index-4"], [295, "index-8"], [476, "index-36"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[295, "pickle.PickleBuffer"]], "pickleerror": [[295, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[295, "pickle.Pickler"]], "picklingerror": [[295, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[295, "pickle.Unpickler"]], "unpicklingerror": [[295, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[295, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[295, "object.__getnewargs_ex__"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[295, "object.__getstate__"]], "__getstate__()\uff08copy \u5354\u5b9a\uff09": [[295, "index-7"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[295, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[295, "object.__reduce_ex__"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[295, "object.__setstate__"]], "__setstate__()\uff08copy \u5354\u5b9a\uff09": [[295, "index-7"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[295, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[295, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[295, "pickle.Pickler.fast"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[295, "pickle.Unpickler.find_class"]], "find_class()\uff08pickle \u5354\u5b9a\uff09": [[295, "index-9"]], "flattening\uff08\u6524\u5e73\uff09": [[295, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[295, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[295, "pickle.loads"]], "marshalling": [[295, "index-0"]], "objects\uff08\u7269\u4ef6\uff09": [[295, "index-0"], [340, "index-8"]], "persistence\uff08\u6301\u7e8c\u6027\uff09": [[295, "index-0"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[295, "pickle.Pickler.persistent_id"]], "persistent_id\uff08pickle \u5354\u5b9a\uff09": [[295, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[295, "pickle.Unpickler.persistent_load"]], "persistent_load\uff08pickle \u5354\u5b9a\uff09": [[295, "index-6"]], "persistent\uff08\u6301\u7e8c\uff09": [[295, "index-0"]], "pickling": [[295, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[295, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[295, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[295, "pickle.PickleBuffer.release"]], "serializing\uff08\u5e8f\u5217\u5316\uff09": [[295, "index-0"]], "--annotate": [[296, "cmdoption-pickletools-a"]], "--indentlevel": [[296, "cmdoption-pickletools-l"]], "--memo": [[296, "cmdoption-pickletools-m"]], "--preamble": [[296, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[296, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[296, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[296, "pickletools.optimize"]], "pickletools": [[296, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[296, "cmdoption-pickletools-a"], [296, "cmdoption-pickletools-l"], [296, "cmdoption-pickletools-m"], [296, "cmdoption-pickletools-o"], [296, "cmdoption-pickletools-p"]], "pep 594#pipes": [[297, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[297, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.open"]], "pipes": [[297, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[297, "pipes.Template.reset"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[298, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.iter_modules"]], "pkgutil": [[298, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[298, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.node"]], "platform": [[299, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[299, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[300, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[300, "plistlib.loads"]], "plist": [[300, "index-0"]], "plistlib": [[300, "module-plistlib"]], "property list\uff08\u5c6c\u6027\u6e05\u55ae\uff09": [[300, "index-0"]], "pop3": [[301, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[301, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[301, "poplib.POP3_SSL"]], "rfc 1939": [[301, "index-1"], [301, "index-2"]], "rfc 2449": [[301, "index-4"]], "rfc 2595": [[301, "index-3"], [301, "index-6"]], "rfc 6856": [[301, "index-5"], [473, "index-36"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.pass_"]], "poplib": [[301, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[301, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[302, "posix.environ"]], "large files\uff08\u5927\u578b\u6a94\u6848\uff09": [[302, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[303, "pprint.PrettyPrinter"]], "eval": [[303, "index-1"], [303, "index-2"], [340, "index-64"], [431, "index-44"], [432, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[303, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[303, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[303, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[303, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.pformat"]], "placeholder\uff08\u4f54\u4f4d\u7b26\u865f\uff09": [[303, "index-0"], [317, "index-0"], [359, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.pp"]], "pprint": [[303, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[303, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[303, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[304, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[304, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.add"]], "cprofile": [[304, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.create_stats"]], "deterministic profiling": [[304, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.print_stats"]], "profile": [[304, "module-profile"]], "profiling, deterministic": [[304, "index-0"]], "pstats": [[304, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[304, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[304, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[304, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[304, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[305, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[305, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[305, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[306, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[306, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[306, "pwd.getpwuid"]], "-": [[307, "cmdoption-python-m-py_compile"]], "--quiet": [[307, "cmdoption-python-m-py_compile-q"]], "<file>": [[307, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[307, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[307, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[307, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[307, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[307, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "byte-code\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[307, "index-0"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[307, "py_compile.compile"]], "py_compile": [[307, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[307, "cmdoption-python-m-py_compile"], [307, "cmdoption-python-m-py_compile-arg-file"], [307, "cmdoption-python-m-py_compile-q"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[308, "pyclbr.Function.parent"]], "pyclbr": [[308, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[308, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[308, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[308, "pyclbr.Class.super"]], "pager": [[309, "index-1"]], "pythondocs": [[309, "index-2"]], "documentation\uff08\u6587\u4ef6\uff09": [[309, "index-0"]], "generation\uff08\u7522\u751f\uff09": [[309, "index-0"]], "help\uff08\u5e6b\u52a9\uff09": [[309, "index-0"], [446, "index-0"]], "online\uff08\u7dda\u4e0a\uff09": [[309, "index-0"]], "pydoc": [[309, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.ErrorString"]], "expat": [[310, "index-0"]], "expaterror": [[310, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.GetInputContext"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_amplification_limit_breach (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_argument (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_buffer (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_NO_BUFFER"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_reserved_namespace_uri (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI"]], "xml_error_reserved_prefix_xml (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML"]], "xml_error_reserved_prefix_xmlns (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[310, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[310, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[310, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[310, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[310, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[310, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[310, "module-xml.parsers.expat.model"]], "empty": [[312, "queue.Empty"], [425, "index-15"], [425, "index-9"]], "full": [[312, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[312, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[312, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[312, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[312, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[312, "queue.SimpleQueue.qsize"]], "queue": [[312, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[312, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[313, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[313, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[313, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[313, "quopri.encodestring"]], "quopri": [[313, "module-quopri"]], "quoted-printable encoding\uff08\u53ef\u5217\u5370\u5b57\u5143\u7de8\u78bc\uff09": [[313, "index-0"]], "quoted-printable\uff08\u53ef\u5217\u5370\u5b57\u5143\uff09": [[313, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[314, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[314, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.betavariate"]], "binomialvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.binomialvariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.gauss"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.getrandbits"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.randint"]], "random": [[314, "module-random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.sample"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.seed"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[314, "random.weibullvariate"]], "() \uff08\u5713\u62ec\u865f\uff09": [[315, "index-15"], [340, "index-36"], [340, "index-46"], [422, "index-28"], [422, "index-40"], [425, "index-22"], [425, "index-47"], [425, "index-8"], [431, "index-6"]], "(?": [[315, "index-16"]], "(?!": [[315, "index-22"]], "(?#": [[315, "index-20"]], "(?(": [[315, "index-25"]], "(?:": [[315, "index-17"]], "(?<!": [[315, "index-24"]], "(?<=": [[315, "index-23"]], "(?=": [[315, "index-21"]], "(?p<": [[315, "index-18"]], "(?p=": [[315, "index-19"]], "*+": [[315, "index-7"]], "*?": [[315, "index-6"]], "++": [[315, "index-7"]], "+?": [[315, "index-6"]], "?+": [[315, "index-7"]], "??": [[315, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.MULTILINE"]], "noflag (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.NOFLAG"]], "regexflag (re \u4e2d\u7684\u985e\u5225)": [[315, "re.RegexFlag"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.S"]], "u (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.U"]], "unicode (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.UNICODE"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.X"]], "\\a": [[315, "index-27"], [315, "index-37"], [430, "index-23"]], "\\b": [[315, "index-29"], [315, "index-28"], [315, "index-37"], [430, "index-23"]], "\\d": [[315, "index-31"], [315, "index-30"]], "\\s": [[315, "index-33"], [315, "index-32"]], "\\w": [[315, "index-35"], [315, "index-34"]], "\\z": [[315, "index-36"]], "\\\\": [[315, "index-37"], [430, "index-23"]], "\\f": [[315, "index-37"], [430, "index-23"]], "\\g": [[315, "index-39"]], "\\r": [[315, "index-37"], [430, "index-23"]], "\\t": [[315, "index-37"], [430, "index-23"]], "\\v": [[315, "index-37"], [430, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[315, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[315, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[315, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[315, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.groups"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[315, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[315, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[315, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[315, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[315, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.re"]], "scanf()": [[315, "index-40"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[315, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[315, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[315, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[315, "re.subn"]], "{} \uff08\u82b1\u62ec\u865f\uff09": [[315, "index-8"], [341, "index-2"], [425, "index-16"], [425, "index-17"], [430, "index-25"]], "| \uff08\u5782\u76f4\u7dda\uff09": [[315, "index-14"], [340, "index-16"], [425, "index-76"]], "\u65bc\u6b63\u898f\u8868\u793a\u5f0f\u4e2d": [[315, "index-0"], [315, "index-1"], [315, "index-10"], [315, "index-11"], [315, "index-12"], [315, "index-13"], [315, "index-14"], [315, "index-15"], [315, "index-16"], [315, "index-17"], [315, "index-18"], [315, "index-19"], [315, "index-2"], [315, "index-20"], [315, "index-21"], [315, "index-22"], [315, "index-23"], [315, "index-24"], [315, "index-25"], [315, "index-26"], [315, "index-27"], [315, "index-28"], [315, "index-29"], [315, "index-3"], [315, "index-30"], [315, "index-31"], [315, "index-32"], [315, "index-33"], [315, "index-34"], [315, "index-35"], [315, "index-36"], [315, "index-37"], [315, "index-38"], [315, "index-39"], [315, "index-4"], [315, "index-5"], [315, "index-6"], [315, "index-7"], [315, "index-8"], [315, "index-9"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.read_init_file"]], "readline": [[316, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[316, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[317, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[317, "reprlib.aRepr"]], "fillvalue (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.fillvalue"]], "indent (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.indent"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[317, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[317, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[317, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[317, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[317, "reprlib.Repr.repr1"]], "reprlib": [[317, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.prlimit"]], "resource": [[318, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[318, "resource.setrlimit"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[319, "rlcompleter.Completer.complete"]], "rlcompleter": [[319, "module-rlcompleter"]], "pep 338": [[320, "index-6"], [427, "index-25"], [450, "index-1"], [462, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[320, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[320, "runpy.run_path"]], "runpy": [[320, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[321, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[321, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[321, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[321, "sched.scheduler.enterabs"]], "event scheduling\uff08\u4e8b\u4ef6\u6392\u7a0b\uff09": [[321, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[321, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[321, "sched.scheduler.run"]], "sched": [[321, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[321, "sched.scheduler"]], "pep 506": [[322, "index-0"], [474, "index-28"], [478, "index-287"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[322, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.randbits"]], "secrets": [[322, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[322, "secrets.token_urlsafe"]], "security considerations\uff08\u5b89\u5168\u6027\u8003\u91cf\uff09": [[323, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.PIPE_BUF"]], "winsock": [[324, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[324, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[324, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[324, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[324, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[324, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[324, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[324, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[324, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[324, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.poll"]], "popen() (\u65bc os \u6a21\u7d44)": [[324, "index-1"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[324, "select.poll.register"]], "select": [[324, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[324, "select.select"]], "socket() (\u65bc socket \u6a21\u7d44)": [[324, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[324, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[324, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[324, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[324, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.DevpollSelector"]], "event_read (\u65bc selectors \u6a21\u7d44\u4e2d)": [[325, "selectors.EVENT_READ"]], "event_write (\u65bc selectors \u6a21\u7d44\u4e2d)": [[325, "selectors.EVENT_WRITE"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[325, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[325, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[325, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[325, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[325, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[325, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[325, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[325, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.select"]], "selectors": [[325, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[325, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[326, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[326, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[326, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[326, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[326, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[326, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[327, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[327, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.read_token"]], "shlex": [[327, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[327, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[327, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[327, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[327, "shlex.shlex.wordchars"]], "samefileerror": [[328, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[328, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copyfileobj"]], "copying files\uff08\u8907\u88fd\u6a94\u6848\uff09": [[328, "index-0"]], "copying\uff08\u8907\u88fd\uff09": [[328, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.rmtree"]], "shutil": [[328, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[328, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.CTRL_C_EVENT"]], "handlers (signal \u4e2d\u7684\u985e\u5225)": [[329, "signal.Handlers"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.ITIMER_VIRTUAL"]], "itimererror": [[329, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGSEGV"]], "sigstkflt (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGSTKFLT"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.SIG_UNBLOCK"]], "sigmasks (signal \u4e2d\u7684\u985e\u5225)": [[329, "signal.Sigmasks"]], "signals (signal \u4e2d\u7684\u985e\u5225)": [[329, "signal.Signals"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.siginterrupt"]], "signal": [[329, "module-signal"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[329, "signal.valid_signals"]], "--user-base": [[330, "cmdoption-site-user-base"]], "--user-site": [[330, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.ENABLE_USER_SITE"]], "pep 370": [[330, "index-11"], [450, "index-19"], [450, "index-41"], [450, "index-42"], [463, "index-7"], [478, "index-45"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.PREFIXES"]], "pythonuserbase": [[330, "index-10"], [330, "index-9"], [450, "envvar-PYTHONUSERBASE"], [463, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.addsitedir"]], "comment\uff08\u8a3b\u89e3\uff09": [[330, "index-2"], [430, "index-4"], [444, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[330, "site.main"]], "site": [[330, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[330, "cmdoption-site-user-base"], [330, "cmdoption-site-user-site"]], "site-packages": [[330, "index-1"]], "sitecustomize": [[330, "index-5"]], "usercustomize": [[330, "index-6"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[331, "smtplib.LMTP"]], "rfc 1869": [[331, "index-2"], [331, "index-5"]], "rfc 4954": [[331, "index-7"], [331, "index-8"]], "rfc 821": [[331, "index-1"], [331, "index-4"]], "smtp": [[331, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[331, "smtplib.SMTP"]], "smtpauthenticationerror": [[331, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[331, "smtplib.SMTPConnectError"]], "smtpdataerror": [[331, "smtplib.SMTPDataError"]], "smtpexception": [[331, "smtplib.SMTPException"]], "smtpheloerror": [[331, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[331, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[331, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[331, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[331, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[331, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[331, "smtplib.SMTP_SSL"]], "simple mail transfer protocol\uff08\u7c21\u55ae\u90f5\u4ef6\u50b3\u8f38\u5354\u5b9a\uff09": [[331, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[331, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[331, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[332, "index-3"]], "sndhdr": [[332, "module-sndhdr"]], "tests (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[332, "sndhdr.tests"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[332, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[332, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_CAN"]], "af_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_DIVERT"]], "af_hyperv (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_HYPERV"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_UNIX"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.CMSG_SPACE"]], "ethertype_arp (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ETHERTYPE_ARP"]], "ethertype_ip (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ETHERTYPE_IP"]], "ethertype_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ETHERTYPE_IPV6"]], "ethertype_vlan (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ETHERTYPE_VLAN"]], "eth_p_all (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ETH_P_ALL"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HCI_TIME_STAMP"]], "hvsocket_address_flag_passthru (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU"]], "hvsocket_connected_suspend (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HVSOCKET_CONNECTED_SUSPEND"]], "hvsocket_connect_timeout (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HVSOCKET_CONNECT_TIMEOUT"]], "hvsocket_connect_timeout_max (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HVSOCKET_CONNECT_TIMEOUT_MAX"]], "hv_guid_broadcast (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_BROADCAST"]], "hv_guid_children (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_CHILDREN"]], "hv_guid_loopback (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_LOOPBACK"]], "hv_guid_parent (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_PARENT"]], "hv_guid_wildcard (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_WILDCARD"]], "hv_guid_zero (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_GUID_ZERO"]], "hv_protocol_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.HV_PROTOCOL_RAW"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "local_creds (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.LOCAL_CREDS"]], "local_creds_persistent (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.LOCAL_CREDS_PERSISTENT"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.PF_CAN"]], "pf_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.PF_DIVERT"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.PF_RDS"]], "rfc 3493": [[333, "index-15"]], "rfc 3542": [[333, "index-3"], [478, "index-217"]], "scm_creds2 (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SCM_CREDS2"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SOMAXCONN"]], "so_incoming_cpu (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SO_INCOMING_CPU"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[333, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.fromshare"]], "gaierror": [[333, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.has_ipv6"]], "herror": [[333, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[333, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[333, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[333, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[333, "socket.socketpair"]], "struct": [[333, "index-14"], [343, "module-struct"]], "timeout": [[333, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[333, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ForkingUDPServer"]], "forkingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ForkingUnixDatagramServer"]], "forkingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ForkingUnixStreamServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ThreadingUDPServer"]], "threadingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ThreadingUnixDatagramServer"]], "threadingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.ThreadingUnixStreamServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[334, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.allow_reuse_address"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.process_request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.request_queue_size"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.serve_forever"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.socket_type"]], "socketserver": [[334, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[334, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[334, "socketserver.BaseServer.verify_request"]], "pep 594#spwd": [[335, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[335, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[335, "spwd.getspnam"]], "spwd": [[335, "module-spwd"]], "--version": [[336, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [375, "cmdoption-trace-version"], [450, "cmdoption-version"]], "blob (sqlite3 \u4e2d\u7684\u985e\u5225)": [[336, "sqlite3.Blob"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[336, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[336, "sqlite3.Cursor"]], "dataerror": [[336, "sqlite3.DataError"]], "databaseerror": [[336, "sqlite3.DatabaseError"]], "integrityerror": [[336, "sqlite3.IntegrityError"]], "interfaceerror": [[336, "sqlite3.InterfaceError"]], "internalerror": [[336, "sqlite3.InternalError"]], "legacy_transaction_control (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.LEGACY_TRANSACTION_CONTROL"]], "notsupportederror": [[336, "sqlite3.NotSupportedError"]], "operationalerror": [[336, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[336, "index-8"], [478, "index-47"]], "pep 249": [[336, "index-0"], [336, "index-1"], [336, "index-10"], [336, "index-11"], [336, "index-12"], [336, "index-2"], [336, "index-3"], [336, "index-4"], [336, "index-5"], [336, "index-9"], [462, "index-24"], [462, "index-25"], [469, "index-21"], [478, "index-37"], [478, "index-70"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[336, "sqlite3.PrepareProtocol"]], "programmingerror": [[336, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[336, "sqlite3.Row"]], "sqlite_dbconfig_defensive (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_DEFENSIVE"]], "sqlite_dbconfig_dqs_ddl (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_DQS_DDL"]], "sqlite_dbconfig_dqs_dml (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_DQS_DML"]], "sqlite_dbconfig_enable_fkey (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY"]], "sqlite_dbconfig_enable_fts3_tokenizer (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"]], "sqlite_dbconfig_enable_load_extension (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"]], "sqlite_dbconfig_enable_qpsg (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG"]], "sqlite_dbconfig_enable_trigger (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER"]], "sqlite_dbconfig_enable_view (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW"]], "sqlite_dbconfig_legacy_alter_table (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"]], "sqlite_dbconfig_legacy_file_format (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"]], "sqlite_dbconfig_no_ckpt_on_close (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"]], "sqlite_dbconfig_reset_database (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_RESET_DATABASE"]], "sqlite_dbconfig_trigger_eqp (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP"]], "sqlite_dbconfig_trusted_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA"]], "sqlite_dbconfig_writable_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.arraysize"]], "autocommit (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.autocommit"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.backup"]], "blobopen() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.blobopen"]], "close() (sqlite3.blob \u7684\u65b9\u6cd5)": [[336, "sqlite3.Blob.close"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.create_function"]], "create_window_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.create_window_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.description"]], "deserialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.deserialize"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.fetchone"]], "getconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.getconfig"]], "getlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.getlimit"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[336, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.paramstyle"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql] \u547d\u4ee4\u5217\u9078\u9805": [[336, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [336, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"]], "read() (sqlite3.blob \u7684\u65b9\u6cd5)": [[336, "sqlite3.Blob.read"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.row_factory"]], "row_factory (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[336, "sqlite3.Cursor.rowcount"]], "seek() (sqlite3.blob \u7684\u65b9\u6cd5)": [[336, "sqlite3.Blob.seek"]], "serialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.serialize"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.set_trace_callback"]], "setconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.setconfig"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.setinputsizes"]], "setlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[336, "sqlite3.Connection.setlimit"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[336, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[336, "module-sqlite3"]], "sqlite_errorcode (sqlite3.error \u7684\u5c6c\u6027)": [[336, "sqlite3.Error.sqlite_errorcode"]], "sqlite_errorname (sqlite3.error \u7684\u5c6c\u6027)": [[336, "sqlite3.Error.sqlite_errorname"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.sqlite_version_info"]], "tell() (sqlite3.blob \u7684\u65b9\u6cd5)": [[336, "sqlite3.Blob.tell"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[336, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[336, "sqlite3.version_info"]], "write() (sqlite3.blob \u7684\u65b9\u6cd5)": [[336, "sqlite3.Blob.write"]], "\u65bc sql \u9673\u8ff0\u5f0f\u4e2d": [[336, "index-6"], [336, "index-7"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[337, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_ktls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_ENABLE_KTLS"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_legacy_server_connect (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_LEGACY_SERVER_CONNECT"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[337, "index-2"], [467, "index-109"], [467, "index-110"], [467, "index-115"], [467, "index-89"], [469, "index-32"], [478, "index-101"], [478, "index-44"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.RAND_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.RAND_status"]], "rfc 1422": [[337, "index-16"], [337, "index-17"]], "rfc 1750": [[337, "index-5"]], "rfc 3280": [[337, "index-10"]], "rfc 4086": [[337, "index-18"]], "rfc 5246": [[337, "index-20"], [337, "index-9"]], "rfc 5280": [[337, "index-19"], [337, "index-6"], [473, "index-41"], [473, "index-51"]], "rfc 5929": [[337, "index-11"]], "rfc 6066": [[337, "index-13"], [337, "index-21"], [337, "index-8"]], "rfc 7301": [[337, "index-12"], [337, "index-7"], [473, "index-40"]], "rfc 7525": [[337, "index-22"]], "ssl": [[337, "index-1"], [337, "module-ssl"]], "sslcertverificationerror": [[337, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.SSLContext"]], "ssleoferror": [[337, "ssl.SSLEOFError"]], "sslerror": [[337, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[337, "index-3"], [337, "index-4"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.SSLSocket"]], "sslsyscallerror": [[337, "ssl.SSLSyscallError"]], "sslwantreaderror": [[337, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[337, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[337, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.SSLv3"]], "secure sockets layer\uff08\u5b89\u5168 socket \u5c64\uff09": [[337, "index-1"]], "tls": [[337, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[337, "ssl.TLSVersion.TLSv1_3"]], "transport layer security\uff08\u50b3\u8f38\u5c64\u5b89\u5168\uff09": [[337, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[337, "ssl.VerifyMode"]], "x509 certificate\uff08x509 \u6191\u8b49\uff09": [[337, "index-15"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.cert_time_to_seconds"]], "certificates\uff08\u6191\u8b49\uff09": [[337, "index-14"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[337, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[337, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[337, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[337, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[337, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[337, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.load_verify_locations"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[337, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[337, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[337, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[337, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[337, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[337, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[337, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[337, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[337, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[337, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[337, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[337, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[337, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[337, "ssl.SSLContext.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[337, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[337, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[337, "ssl.MemoryBIO.write_eof"]], "\uff08\u7528\u65bc ssl \u6a21\u7d44\uff09": [[337, "index-0"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[338, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[339, "statistics.NormalDist"]], "statisticserror": [[339, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[339, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[339, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[339, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[339, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.samples"]], "statistics": [[339, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[339, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[339, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[339, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[339, "statistics.NormalDist.zscore"]], "!=": [[340, "index-7"], [425, "index-77"]], "& \uff08\u548c\u865f\uff09": [[340, "index-16"], [425, "index-74"]], "//": [[340, "index-13"], [425, "index-67"]], "< \uff08\u5c0f\u65bc\uff09": [[340, "index-7"], [341, "index-3"], [343, "index-1"], [425, "index-77"]], "<<": [[340, "index-16"], [425, "index-71"]], "<=": [[340, "index-7"], [425, "index-77"]], "==": [[340, "index-7"], [425, "index-77"]], "> \uff08\u5927\u65bc\uff09": [[340, "index-7"], [341, "index-3"], [343, "index-1"], [425, "index-77"]], ">=": [[340, "index-7"], [425, "index-77"]], ">>": [[340, "index-16"], [425, "index-71"]], "alias\uff08\u5225\u540d\uff09": [[340, "index-56"]], "boolean\uff08\u5e03\u6797\uff09": [[340, "index-1"], [340, "index-11"], [340, "index-17"], [340, "index-5"], [423, "index-11"], [425, "index-82"]], "c": [[340, "index-11"], [343, "index-0"], [423, "index-13"], [423, "index-4"], [423, "index-40"], [425, "index-77"], [430, "index-23"]], "false": [[340, "index-17"], [340, "index-4"], [340, "index-1"], [423, "index-11"]], "false\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[340, "index-3"]], "genericalias\uff08\u6cdb\u578b\u5225\u540d\uff09": [[340, "index-56"]], "generic\uff08\u6cdb\u578b\uff09": [[340, "index-56"], [423, "index-5"]], "none\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[340, "index-3"]], "pep 237": [[340, "index-71"], [340, "index-72"], [459, "index-10"], [461, "index-1"], [461, "index-16"], [465, "index-1"]], "pep 3118": [[340, "index-50"], [463, "index-15"], [465, "index-33"], [471, "index-31"], [471, "index-4"], [471, "index-41"], [476, "index-8"], [478, "index-249"], [478, "index-256"], [478, "index-301"]], "pep 461": [[340, "index-49"], [473, "index-7"], [473, "index-8"]], "true": [[340, "index-17"], [340, "index-4"], [340, "index-2"], [423, "index-11"]], "union\uff08\u806f\u96c6\uff09": [[340, "index-59"], [340, "index-59"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[340, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[340, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[340, "instance.__class__"]], "__code__\uff08\u51fd\u5f0f\u7269\u4ef6\u5c6c\u6027\uff09": [[340, "index-63"]], "__dict__ (object \u7684\u5c6c\u6027)": [[340, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[340, "contextmanager.__enter__"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.__eq__"]], "__eq__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[340, "contextmanager.__exit__"]], "__ge__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__gt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[340, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[340, "iterator.__iter__"]], "__le__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__lt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__missing__()": [[340, "index-53"]], "__mro__ (class \u7684\u5c6c\u6027)": [[340, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[340, "definition.__name__"]], "__ne__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[340, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[340, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[340, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[340, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[340, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[340, "class.__subclasses__"]], "__type_params__ (definition \u7684\u5c6c\u6027)": [[340, "definition.__type_params__"]], "__unpacked__ (genericalias \u7684\u5c6c\u6027)": [[340, "genericalias.__unpacked__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.add"]], "and": [[340, "index-4"], [340, "index-6"], [425, "index-74"], [425, "index-84"]], "annotation\uff08\u8a3b\u8a18\uff09": [[340, "index-55"]], "append()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "arithmetic\uff08\u7b97\u8853\uff09": [[340, "index-13"]], "array\uff08\u9663\u5217\uff09": [[340, "index-40"], [423, "index-25"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[340, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[340, "int.as_integer_ratio"]], "assignment\uff08\u8ce6\u503c\uff09": [[340, "index-24"], [423, "index-22"], [423, "index-46"], [423, "index-50"], [431, "index-12"], [431, "index-14"], [431, "index-15"], [431, "index-4"], [431, "index-6"], [431, "index-8"], [431, "index-9"]], "binary operator\uff08\u4e8c\u5143\u904b\u7b97\u5b50\uff09": [[340, "index-13"], [425, "index-69"], [425, "index-70"]], "binary sequence types\uff08\u4e8c\u9032\u4f4d\u5e8f\u5217\u578b\u5225\uff09": [[340, "index-39"]], "binary\uff08\u4e8c\u9032\u4f4d\uff09": [[340, "index-12"], [343, "index-0"], [425, "index-64"], [425, "index-73"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[340, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[340, "int.bit_length"]], "bitwise\uff08\u4f4d\u5143\uff09": [[340, "index-16"], [425, "index-59"], [425, "index-73"], [425, "index-74"], [425, "index-75"], [425, "index-76"]], "buffer protocol\uff08\u7de9\u885d\u5340\u5354\u5b9a\uff09": [[340, "index-31"], [340, "index-39"]], "built-in\uff08\u5167\u5efa\uff09": [[340, "index-0"], [423, "index-41"]], "bytearray (%)": [[340, "index-45"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[340, "bytearray"]], "bytearray.splitlines \u65b9\u6cd5": [[340, "index-44"]], "bytes (%)": [[340, "index-45"]], "bytes (\u5167\u5efa\u985e\u5225)": [[340, "bytes"]], "bytes.splitlines \u65b9\u6cd5": [[340, "index-44"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[340, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[340, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.cast"]], "ceil()\uff08\u65bc math \u6a21\u7d44\uff09": [[340, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[340, "str.center"]], "chaining\uff08\u93c8\u7d50\uff09": [[340, "index-7"], [431, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[340, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.clear"]], "clear()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "comparing\uff08\u6bd4\u8f03\uff09": [[340, "index-8"]], "comparisons\uff08\u6bd4\u8f03\uff09": [[340, "index-7"], [425, "index-78"]], "comparison\uff08\u6bd4\u8f03\uff09": [[340, "index-7"], [423, "index-76"], [425, "index-77"]], "complex\uff08\u8907\u6578\uff09": [[340, "index-13"], [423, "index-101"], [423, "index-14"]], "concatenation\uff08\u4e32\u63a5\uff09": [[340, "index-20"]], "conjugate()\uff08\u8907\u6578\u65b9\u6cd5\uff09": [[340, "index-14"]], "container\uff08\u5bb9\u5668\uff09": [[340, "index-18"], [423, "index-3"], [423, "index-45"]], "context management protocol\uff08\u60c5\u5883\u7ba1\u7406\u5354\u5b9a\uff09": [[340, "index-54"]], "context management\uff08\u60c5\u5883\u7ba1\u7406\uff09": [[340, "index-54"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.contiguous"]], "conversions\uff08\u8f49\u63db\uff09": [[340, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[340, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.copy"]], "copy()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.count"]], "count() (str \u7684\u65b9\u6cd5)": [[340, "str.count"]], "count()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-20"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.decode"]], "del": [[340, "index-24"], [340, "index-52"], [423, "index-71"], [431, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[340, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[340, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[340, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[340, "str.expandtabs"]], "extend()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[340, "str.find"]], "floating point\uff08\u6d6e\u9ede\u6578\uff09": [[340, "index-11"], [340, "index-12"]], "floor()\uff08\u65bc math \u6a21\u7d44\uff09": [[340, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[340, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[340, "str.format_map"]], "formatting\uff08\u683c\u5f0f\u5316\uff09": [[340, "index-45"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001printf": [[340, "index-35"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001\u5b57\u4e32 (%)": [[340, "index-35"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[340, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[340, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[340, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.hex"]], "hexadecimal\uff08\u5341\u516d\u9032\u4f4d\uff09": [[340, "index-12"]], "if": [[340, "index-1"], [422, "index-18"], [422, "index-3"], [425, "index-12"], [425, "index-88"]], "immutable\uff08\u4e0d\u53ef\u8b8a\uff09": [[340, "index-22"], [423, "index-17"]], "in": [[340, "index-10"], [340, "index-20"], [422, "index-6"], [425, "index-80"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.index"]], "index() (str \u7684\u65b9\u6cd5)": [[340, "str.index"]], "index()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-20"]], "insert()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "integer\uff08\u6574\u6578\uff09": [[340, "index-11"], [340, "index-12"], [340, "index-16"], [423, "index-10"], [423, "index-12"], [423, "index-19"]], "interpolation\uff08\u63d2\u503c\uff09": [[340, "index-45"]], "interpolation\uff08\u63d2\u503c\uff09\u3001printf": [[340, "index-35"]], "interpolation\uff08\u63d2\u503c\uff09\u3001\u5b57\u4e32 (%)": [[340, "index-35"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.intersection_update"]], "io.stringio": [[340, "index-29"]], "is": [[340, "index-7"], [425, "index-81"]], "is not": [[340, "index-7"], [425, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[340, "float.is_integer"]], "is_integer() (int \u7684\u65b9\u6cd5)": [[340, "int.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[340, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[340, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[340, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[340, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[340, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[340, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[340, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[340, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[340, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[340, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[340, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[340, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[340, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.itemsize"]], "iteration over\uff08\u758a\u4ee3\u65bc\uff09": [[340, "index-18"]], "iteration\uff08\u758a\u4ee3\uff09": [[340, "index-18"]], "iterator protocol\uff08\u758a\u4ee3\u5668\u5354\u5b9a\uff09": [[340, "index-18"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[340, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[340, "dict.keys"]], "language\uff08\u8a9e\u8a00\uff09": [[340, "index-11"], [423, "index-13"], [423, "index-4"], [423, "index-40"], [425, "index-77"]], "list (\u5167\u5efa\u985e\u5225)": [[340, "list"]], "literals\uff08\u5b57\u9762\u503c\uff09": [[340, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[340, "str.ljust"]], "loop over\uff08\u8ff4\u5708\uff09": [[340, "index-21"]], "loop\uff08\u8ff4\u5708\uff09": [[340, "index-21"], [422, "index-4"], [422, "index-6"], [431, "index-30"], [431, "index-33"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[340, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[340, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[340, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[340, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[340, "str.maketrans"]], "masking\uff08\u906e\u7f69\uff09": [[340, "index-16"]], "max": [[340, "index-20"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[340, "memoryview"]], "methods\uff08\u65b9\u6cd5\uff09": [[340, "index-32"], [340, "index-43"]], "min": [[340, "index-20"]], "mro() (class \u7684\u65b9\u6cd5)": [[340, "class.mro"]], "mutable sequence\uff08\u53ef\u8b8a\u5e8f\u5217\uff09": [[340, "index-21"], [423, "index-22"]], "mutable\uff08\u53ef\u8b8a\uff09": [[340, "index-23"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.ndim"]], "not": [[340, "index-6"], [425, "index-83"]], "not in": [[340, "index-10"], [340, "index-20"], [425, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.obj"]], "octal\uff08\u516b\u9032\u4f4d\uff09": [[340, "index-12"]], "operations on\uff08\u64cd\u4f5c\u65bc\uff09": [[340, "index-14"], [340, "index-16"], [340, "index-20"], [340, "index-24"], [340, "index-52"]], "operation\uff08\u64cd\u4f5c\uff09": [[340, "index-20"], [425, "index-58"], [425, "index-59"], [425, "index-64"], [425, "index-71"], [425, "index-73"], [425, "index-82"], [431, "index-20"]], "operator\uff08\u904b\u7b97\u5b50\uff09": [[340, "index-10"], [340, "index-13"], [340, "index-16"], [340, "index-20"], [340, "index-4"], [340, "index-6"], [340, "index-7"], [423, "index-68"], [425, "index-58"], [425, "index-60"], [425, "index-61"], [425, "index-62"], [425, "index-65"], [425, "index-66"], [425, "index-67"], [425, "index-68"], [425, "index-69"], [425, "index-70"], [425, "index-71"], [425, "index-74"], [425, "index-75"], [425, "index-76"], [425, "index-77"], [425, "index-80"], [425, "index-81"], [425, "index-83"], [425, "index-84"], [425, "index-85"], [425, "index-88"], [425, "index-97"]], "or": [[340, "index-4"], [340, "index-6"], [425, "index-75"], [425, "index-76"], [425, "index-85"]], "over mutable sequence\uff08\u65bc\u53ef\u8b8a\u5e8f\u5217\uff09": [[340, "index-21"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[340, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[340, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.pop"]], "pop()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[340, "dict.popitem"]], "printf \u98a8\u683c\u683c\u5f0f\u5316": [[340, "index-35"], [340, "index-45"]], "range": [[340, "index-27"], [422, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[340, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.remove"]], "remove()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[340, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[340, "str.removesuffix"]], "repetition\uff08\u91cd\u8907\uff09": [[340, "index-20"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[340, "str.replace"]], "reverse()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[340, "index-24"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[340, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[340, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[340, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[340, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[340, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[340, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[340, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[340, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.shape"]], "shifting\uff08\u79fb\u4f4d\uff09": [[340, "index-16"]], "sort() (list \u7684\u65b9\u6cd5)": [[340, "list.sort"]], "space\uff08\u7a7a\u767d\uff09": [[340, "index-37"], [340, "index-47"], [430, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[340, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[340, "str.splitlines"]], "sprintf \u98a8\u683c\u683c\u5f0f\u5316": [[340, "index-35"], [340, "index-45"]], "start (range \u7684\u5c6c\u6027)": [[340, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[340, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[340, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[340, "range.stop"]], "str (\u5167\u5efa\u985e\u5225)": [[340, "str"]], "str.splitlines \u65b9\u6cd5": [[340, "index-34"]], "strides (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[340, "str.strip"]], "str\uff08\u5167\u5efa\u985e\u5225\uff09": [[340, "index-28"], [340, "index-30"], [340, "index-31"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[340, "memoryview.suboffsets"]], "subscript\uff08\u4e0b\u6a19\uff09": [[340, "index-20"], [340, "index-24"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[340, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.symmetric_difference_update"]], "text sequence type\uff08\u6587\u5b57\u5e8f\u5217\u578b\u5225\uff09": [[340, "index-28"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[340, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[340, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[340, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[340, "str.translate"]], "trunc()\uff08\u65bc math \u6a21\u7d44\uff09": [[340, "index-15"]], "truth\uff08\u771f\uff09": [[340, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[340, "tuple"]], "type annotation\uff08\u578b\u5225\u8a3b\u8a18\uff09\uff1btype hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[340, "index-55"]], "unary operator\uff08\u4e00\u5143\u904b\u7b97\u5b50\uff09": [[340, "index-13"], [425, "index-60"], [425, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[340, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[340, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[340, "str.upper"]], "value": [[340, "index-1"]], "values": [[340, "index-17"], [431, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[340, "dict.values"]], "while": [[340, "index-1"], [422, "index-4"], [431, "index-30"], [431, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[340, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[340, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[340, "str.zfill"]], "\u65bc printf \u98a8\u683c\u683c\u5f0f\u5316": [[340, "index-36"], [340, "index-37"], [340, "index-46"], [340, "index-47"]], "\uff08\u4ea6\u8acb\u898b string\uff09": [[340, "index-28"]], ", \uff08\u9017\u865f\uff09": [[341, "index-8"], [422, "index-16"], [422, "index-28"], [422, "index-40"], [425, "index-10"], [425, "index-15"], [425, "index-16"], [425, "index-17"], [425, "index-44"], [425, "index-47"], [425, "index-91"], [431, "index-18"], [431, "index-34"], [431, "index-43"], [431, "index-45"], [431, "index-6"]], "= \uff08\u7b49\u65bc\uff09": [[341, "index-3"], [343, "index-1"], [422, "index-31"], [423, "index-83"], [425, "index-47"], [430, "index-25"], [431, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[341, "string.Formatter"]], "pep 292": [[341, "index-12"], [461, "index-3"]], "pep 378": [[341, "index-18"], [464, "index-3"], [466, "index-1"]], "pep 682": [[341, "index-17"], [468, "index-105"]], "template (string \u4e2d\u7684\u985e\u5225)": [[341, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.get_field"]], "get_identifiers() (string.template \u7684\u65b9\u6cd5)": [[341, "string.Template.get_identifiers"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.hexdigits"]], "is_valid() (string.template \u7684\u65b9\u6cd5)": [[341, "string.Template.is_valid"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[341, "string.Template.safe_substitute"]], "space": [[341, "index-4"]], "string": [[341, "module-string"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[341, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[341, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[341, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[341, "string.whitespace"]], "z": [[341, "index-5"]], "\u65bc template strings\uff08\u6a21\u677f\u5b57\u4e32\uff09": [[341, "index-13"]], "\u65bc\u5b57\u4e32\u683c\u5f0f\u5316": [[341, "index-10"], [341, "index-2"], [341, "index-3"], [341, "index-4"], [341, "index-5"], [341, "index-7"], [341, "index-8"]], "rfc 3454": [[342, "index-0"], [342, "index-1"], [478, "index-31"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[342, "stringprep.map_table_b3"]], "stringprep": [[342, "module-stringprep"]], "@ \uff08\u5728\uff09": [[343, "index-1"], [422, "index-29"], [422, "index-41"], [425, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[343, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[343, "struct.Struct.format"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[343, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[343, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[343, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.pack_into"]], "packing\uff08\u6253\u5305\uff09": [[343, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[343, "struct.Struct.size"]], "structures\uff08\u7d50\u69cb\uff09": [[343, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[343, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[343, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[343, "struct.unpack_from"]], "\u65bc struct format strings\uff08\u7d50\u69cb\u683c\u5f0f\u5b57\u4e32\uff09": [[343, "index-1"], [343, "index-2"], [343, "index-3"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[344, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[344, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[344, "index-0"], [461, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[344, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[344, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.SW_HIDE"]], "subprocesserror": [[344, "subprocess.SubprocessError"]], "systemroot": [[344, "index-4"]], "timeoutexpired": [[344, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[344, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[344, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[344, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[344, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[344, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[344, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[344, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[344, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[344, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[344, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[344, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[344, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[344, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[344, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[344, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[344, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[344, "module-subprocess"]], "subprocess \u6a21\u7d44": [[344, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[344, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[344, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[344, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[345, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[345, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.setsampwidth"]], "sunau": [[345, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[345, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[345, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[347, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[347, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[347, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[347, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[347, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[347, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[347, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[347, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[347, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[347, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[347, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[347, "symtable.SymbolTable.lookup"]], "symtable": [[347, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[347, "symtable.symtable"]], "pep 3149": [[348, "index-0"], [470, "index-6"], [478, "index-296"]], "pep 421": [[348, "index-15"], [348, "index-16"], [471, "index-19"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._debugmallocstats"]], "_emscripten_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._emscripten_info"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._getframe"]], "_getframemodulename() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._getframemodulename"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.abiflags"]], "activate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.activate_stack_trampoline"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.addaudithook"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.audit"]], "auditing": [[348, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.base_prefix"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.byteorder"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.copyright"]], "deactivate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.deactivate_stack_trampoline"]], "dig (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.dig"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.dllhandle"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.dont_write_bytecode"]], "epsilon (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.epsilon"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.excepthook"]], "exception() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.exception"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.gettrace"]], "getunicodeinternedsize() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getunicodeinternedsize"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.getwindowsversion"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.hash_info"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.hexversion"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.implementation"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.int_info"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.intern"]], "interpreter prompts\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[348, "index-27"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.is_finalizing"]], "is_stack_trampoline_active() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.is_stack_trampoline_active"]], "last_exc (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.last_exc"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.last_value"]], "mant_dig (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.mant_dig"]], "max (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.max"]], "max_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.max_10_exp"]], "max_exp (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.max_exp"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.meta_path"]], "min (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.min"]], "min_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.min_10_exp"]], "min_exp (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.min_exp"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.modules"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.prefix"]], "profile function": [[348, "index-10"], [348, "index-28"], [360, "index-2"], [360, "index-3"]], "profiler": [[348, "index-10"], [348, "index-28"]], "prompts, interpreter\uff08\u63d0\u793a\u3001\u76f4\u8b6f\u5668\uff09": [[348, "index-27"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.ps2"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.pycache_prefix"]], "radix (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.radix"]], "rounds (sys.float_info \u7684\u5c6c\u6027)": [[348, "sys.float_info.rounds"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.settrace"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.stdout"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.thread_info"]], "trace function": [[348, "index-11"], [348, "index-29"], [360, "index-0"], [360, "index-1"]], "traceback": [[348, "index-8"], [376, "index-0"], [376, "module-traceback"], [422, "index-11"], [423, "index-63"], [431, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.unraisablehook"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.version_info"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.warnoptions"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[348, "sys.winver"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig._get_preferred_schemes"]], "configuration information\uff08\u8a2d\u5b9a\u8cc7\u8a0a\uff09": [[350, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[350, "sysconfig.parse_config_h"]], "sysconfig": [[350, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[351, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[351, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[351, "syslog.setlogmask"]], "syslog": [[351, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[351, "syslog.syslog"]], "nannynag": [[352, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[352, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[352, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[352, "tabnanny.process_tokens"]], "tabnanny": [[352, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[352, "tabnanny.verbose"]], "--create": [[353, "cmdoption-tarfile-create"], [417, "cmdoption-zipfile-create"]], "--extract": [[353, "cmdoption-tarfile-extract"], [417, "cmdoption-zipfile-extract"]], "--filter": [[353, "cmdoption-tarfile-filter"]], "--list": [[353, "cmdoption-tarfile-list"], [417, "cmdoption-zipfile-list"]], "--test": [[353, "cmdoption-tarfile-test"], [417, "cmdoption-zipfile-test"]], "-c": [[353, "cmdoption-tarfile-c"], [375, "cmdoption-trace-C"], [375, "cmdoption-trace-c"], [383, "cmdoption-unittest-c"], [416, "cmdoption-zipapp-c"], [417, "cmdoption-zipfile-c"], [450, "cmdoption-c"]], "-t": [[353, "cmdoption-tarfile-t"], [375, "cmdoption-trace-T"], [375, "cmdoption-trace-t"], [383, "cmdoption-unittest-discover-t"], [417, "cmdoption-zipfile-t"]], "absolutelinkerror": [[353, "tarfile.AbsoluteLinkError"]], "absolutepatherror": [[353, "tarfile.AbsolutePathError"]], "compressionerror": [[353, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.DEFAULT_FORMAT"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.ENCODING"]], "extracterror": [[353, "tarfile.ExtractError"]], "filtererror": [[353, "tarfile.FilterError"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.GNU_FORMAT"]], "headererror": [[353, "tarfile.HeaderError"]], "linkoutsidedestinationerror": [[353, "tarfile.LinkOutsideDestinationError"]], "outsidedestinationerror": [[353, "tarfile.OutsideDestinationError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.PAX_FORMAT"]], "pep 706": [[353, "index-0"], [469, "index-18"]], "readerror": [[353, "tarfile.ReadError"]], "specialfileerror": [[353, "tarfile.SpecialFileError"]], "streamerror": [[353, "tarfile.StreamError"]], "tarerror": [[353, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[353, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[353, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.addfile"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.close"]], "data_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.data_filter"]], "errorlevel (tarfile.tarfile \u7684\u5c6c\u6027)": [[353, "tarfile.TarFile.errorlevel"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.extractfile"]], "extraction_filter (tarfile.tarfile \u7684\u5c6c\u6027)": [[353, "tarfile.TarFile.extraction_filter"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[353, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[353, "tarfile.TarInfo.fromtarfile"]], "fully_trusted_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.fully_trusted_filter"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[353, "tarfile.TarFile.next"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[353, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[353, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.pax_headers"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.size"]], "tar_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[353, "tarfile.tar_filter"]], "tarfile": [[353, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[353, "cmdoption-tarfile-c"], [353, "cmdoption-tarfile-create"], [353, "cmdoption-tarfile-e"], [353, "cmdoption-tarfile-extract"], [353, "cmdoption-tarfile-filter"], [353, "cmdoption-tarfile-l"], [353, "cmdoption-tarfile-list"], [353, "cmdoption-tarfile-t"], [353, "cmdoption-tarfile-test"], [353, "cmdoption-tarfile-v"]], "tarinfo (tarfile.filtererror \u7684\u5c6c\u6027)": [[353, "tarfile.FilterError.tarinfo"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[353, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[353, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[354, "index-5"]], "rfc 854": [[354, "index-2"], [354, "index-3"]], "telnet": [[354, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[354, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[354, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[354, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[355, "tempfile.SpooledTemporaryFile"]], "temp": [[355, "index-8"], [456, "index-7"]], "tmp": [[355, "index-9"]], "tmpdir": [[355, "index-7"], [478, "index-49"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[355, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.TemporaryFile"]], "file name\uff08\u6a94\u6848\u540d\u7a31\uff09": [[355, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.mktemp"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[355, "tempfile.tempdir"]], "tempfile": [[355, "module-tempfile"]], "temporary\uff08\u81e8\u6642\uff09": [[355, "index-0"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcgetattr"]], "tcgetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcgetwinsize"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcsetattr"]], "tcsetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[356, "termios.tcsetwinsize"]], "termios": [[356, "module-termios"]], "tty": [[356, "index-0"], [378, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.ALWAYS_EQ"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[357, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[357, "index-2"]], "py_debug (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.Py_DEBUG"]], "resourcedenied": [[357, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[357, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[357, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[357, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[357, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[357, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[357, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.bind_unix_socket"]], "busy_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.busy_retry"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.findfile"]], "flush_std_streams() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.flush_std_streams"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[357, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.get_original_stdout"]], "get_pagesize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.get_pagesize"]], "ignore_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.warnings_helper.ignore_warnings"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.make_zip_script"]], "match_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.match_test"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[357, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[357, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_gzip"]], "requires_limited_api() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_limited_api"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[357, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.rmtree"]], "run_doctest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.run_doctest"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.run_python_until_end"]], "run_unittest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.run_unittest"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[357, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[357, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_match_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.set_match_tests"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.skip_unless_xattr"]], "sleeping_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.sleeping_retry"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.temp_umask"]], "test": [[357, "module-test"]], "test.support": [[357, "module-test.support"]], "test.support.bytecode_helper": [[357, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[357, "module-test.support.import_helper"]], "test.support.os_helper": [[357, "module-test.support.os_helper"]], "test.support.script_helper": [[357, "module-test.support.script_helper"]], "test.support.socket_helper": [[357, "module-test.support.socket_helper"]], "test.support.threading_helper": [[357, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[357, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[357, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[357, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[357, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[359, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[359, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[359, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[359, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[359, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[359, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.tabsize"]], "textwrap": [[359, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[359, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[359, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[359, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.BoundedSemaphore"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[360, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[360, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[360, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[360, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[360, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[360, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[360, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[360, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[360, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[360, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[360, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[360, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[360, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[360, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[360, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[360, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[360, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[360, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[360, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[360, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[360, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.setprofile"]], "setprofile_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.setprofile_all_threads"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.settrace"]], "settrace_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.settrace_all_threads"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[360, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[360, "threading.Thread.start"]], "threading": [[360, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[360, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[360, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[360, "threading.Condition.wait_for"]], "2-digit years\uff082 \u4f4d\u6578\u5e74\u4efd\uff09": [[361, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.CLOCK_UPTIME_RAW"]], "cpu time\uff08cpu \u6642\u9593\uff09": [[361, "index-12"], [361, "index-7"]], "coordinated universal time\uff08\u4e16\u754c\u5354\u8abf\u6642\u9593\uff09": [[361, "index-4"]], "daylight saving time\uff08\u65e5\u5149\u7bc0\u7d04\u6642\u9593\uff09": [[361, "index-5"]], "greenwich mean time\uff08\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\uff09": [[361, "index-4"]], "rfc 1123": [[361, "index-21"]], "tz": [[361, "index-13"], [361, "index-14"], [361, "index-15"], [361, "index-16"], [361, "index-17"], [361, "index-18"]], "utc": [[361, "index-4"]], "year 2038\uff082038 \u5e74\u554f\u984c\uff09": [[361, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.asctime"]], "benchmarking\uff08\u57fa\u6e96\u6e2c\u8a66\uff09": [[361, "index-12"], [361, "index-6"], [361, "index-7"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.daylight"]], "epoch\uff08\u7d00\u5143\uff09": [[361, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.process_time_ns"]], "processor time\uff08\u8655\u7406\u5668\u6642\u9593\uff09": [[361, "index-12"], [361, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[361, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[361, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.thread_time_ns"]], "time": [[361, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.timezone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[361, "time.tzset"]], "--number": [[362, "cmdoption-timeit-n"]], "--process": [[362, "cmdoption-timeit-p"]], "--repeat": [[362, "cmdoption-timeit-r"]], "--setup": [[362, "cmdoption-timeit-s"]], "--unit": [[362, "cmdoption-timeit-u"]], "-n": [[362, "cmdoption-timeit-n"], [393, "cmdoption-uuid-N"], [393, "cmdoption-uuid-n"]], "-u": [[362, "cmdoption-timeit-u"], [393, "cmdoption-uuid-u"], [450, "cmdoption-u"]], "benchmarking": [[362, "index-0"]], "performance": [[362, "index-0"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[362, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[362, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[362, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[362, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[362, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[362, "timeit.repeat"]], "timeit": [[362, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[362, "cmdoption-timeit-h"], [362, "cmdoption-timeit-n"], [362, "cmdoption-timeit-p"], [362, "cmdoption-timeit-r"], [362, "cmdoption-timeit-s"], [362, "cmdoption-timeit-u"], [362, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[362, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[362, "timeit.timeit"]], "gui": [[363, "index-0"]], "graphical user interface\uff08\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\uff09": [[363, "index-0"]], "tk": [[363, "index-0"]], "tkinter": [[363, "index-0"], [364, "module-tkinter"]], "display": [[364, "index-0"], [425, "index-15"], [425, "index-16"], [425, "index-17"]], "exception (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[364, "tkinter.EXCEPTION"]], "readable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[364, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[364, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[364, "tkinter.Tk"]], "tk option data types": [[364, "index-4"]], "writable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[364, "tkinter.WRITABLE"]], "bind (widgets)": [[364, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[364, "tkinter.Tk.children"]], "createfilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[364, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[364, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[364, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[364, "tkinter.Tk.master"]], "packing (widgets)": [[364, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[364, "tkinter.Tk.tk"]], "window manager (widgets)": [[364, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[365, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[365, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[365, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[366, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[366, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[366, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[366, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[366, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[366, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[366, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[367, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[367, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[367, "tkinter.font.nametofont"]], "tkinter.font": [[367, "module-tkinter.font"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[368, "tkinter.messagebox.Message"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.askyesnocancel"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[368, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[368, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[369, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[369, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[369, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[369, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.TList"]], "tix": [[370, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[370, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[370, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[371, "module-tkinter.ttk"]], "ttk": [[371, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[371, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ERRORTOKEN"]], "exclamation (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.EXCLAMATION"]], "fstring_end (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.FSTRING_END"]], "fstring_middle (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.FSTRING_MIDDLE"]], "fstring_start (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.FSTRING_START"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[372, "token.tok_name"]], "token": [[372, "module-token"], [430, "index-0"]], "--exact": [[373, "cmdoption-tokenize-e"]], "tokenerror": [[373, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[373, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[373, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[373, "tokenize.open"]], "tokenize": [[373, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[373, "cmdoption-tokenize-e"], [373, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[373, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[373, "tokenize.untokenize"]], "tomldecodeerror": [[374, "tomllib.TOMLDecodeError"]], "load() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[374, "tomllib.load"]], "loads() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[374, "tomllib.loads"]], "tomllib": [[374, "module-tomllib"]], "--count": [[375, "cmdoption-trace-c"]], "--coverdir": [[375, "cmdoption-trace-C"]], "--file": [[375, "cmdoption-trace-f"]], "--ignore-dir": [[375, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[375, "cmdoption-trace-ignore-module"]], "--listfuncs": [[375, "cmdoption-trace-l"]], "--missing": [[375, "cmdoption-trace-m"]], "--no-report": [[375, "cmdoption-trace-R"]], "--report": [[375, "cmdoption-trace-r"]], "--summary": [[375, "cmdoption-trace-s"]], "--timing": [[375, "cmdoption-trace-g"]], "--trace": [[375, "cmdoption-trace-t"]], "--trackcalls": [[375, "cmdoption-trace-T"]], "-g": [[375, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[375, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[375, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[375, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[375, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[375, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[375, "trace.Trace.runfunc"]], "trace": [[375, "module-trace"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[375, "cmdoption-trace-C"], [375, "cmdoption-trace-R"], [375, "cmdoption-trace-T"], [375, "cmdoption-trace-c"], [375, "cmdoption-trace-f"], [375, "cmdoption-trace-g"], [375, "cmdoption-trace-help"], [375, "cmdoption-trace-ignore-dir"], [375, "cmdoption-trace-ignore-module"], [375, "cmdoption-trace-l"], [375, "cmdoption-trace-m"], [375, "cmdoption-trace-r"], [375, "cmdoption-trace-s"], [375, "cmdoption-trace-t"], [375, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[375, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[375, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[376, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[376, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[376, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.__context__"]], "__notes__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.__notes__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.clear_frames"]], "end_lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.end_lineno"]], "end_offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.end_offset"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.exc_type"]], "exceptions (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.exceptions"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[376, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.extract_tb"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[376, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[376, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[376, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_exception_only"]], "format_frame_summary() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[376, "traceback.StackSummary.format_frame_summary"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[376, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[376, "traceback.StackSummary.from_list"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.msg"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.offset"]], "print() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[376, "traceback.TracebackException.print"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[376, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[376, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[377, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[377, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[377, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[377, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[377, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[377, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[377, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[377, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[377, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[377, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[377, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[377, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[377, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[377, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[377, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[377, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[377, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[377, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[377, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[377, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[377, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[377, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[377, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[377, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[377, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[377, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[377, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[377, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[377, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[377, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[377, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[377, "tracemalloc.Snapshot.traces"]], "cfmakecbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[378, "tty.cfmakecbreak"]], "cfmakeraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[378, "tty.cfmakeraw"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[378, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[378, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[379, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[379, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.stamp"]], "teleport() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.teleport"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.tracer"]], "turtle": [[379, "module-turtle"]], "turtledemo": [[379, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[379, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[380, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[380, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[380, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[380, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.NotImplementedType"]], "pep 3115": [[380, "index-0"], [422, "index-43"], [423, "index-87"], [465, "index-14"], [471, "index-29"]], "pep 560": [[380, "index-1"], [380, "index-2"], [380, "index-3"], [423, "index-84"], [423, "index-93"], [475, "index-21"], [475, "index-33"], [478, "index-237"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[380, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[380, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[380, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[380, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[380, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[380, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[380, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[380, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[380, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[380, "types.MappingProxyType.get"]], "get_original_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.get_original_bases"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[380, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[380, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.prepare_class"]], "replace() (types.codetype \u7684\u65b9\u6cd5)": [[380, "types.CodeType.replace"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[380, "types.resolve_bases"]], "types": [[380, "module-types"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[380, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Literal"]], "literalstring (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.LiteralString"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.NamedTuple"]], "never (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Never"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.NoReturn"]], "notrequired (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.NotRequired"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.OrderedDict"]], "pep 544": [[381, "index-28"], [381, "index-49"], [381, "index-5"], [476, "index-18"]], "pep 586": [[381, "index-33"], [381, "index-7"], [467, "index-111"], [476, "index-16"], [477, "index-27"]], "pep 589": [[381, "index-51"], [381, "index-8"], [476, "index-15"]], "pep 591": [[381, "index-35"], [381, "index-55"], [381, "index-9"], [476, "index-17"]], "pep 593": [[381, "index-10"], [381, "index-116"], [381, "index-38"], [477, "index-17"], [477, "index-5"], [478, "index-198"]], "pep 612": [[381, "index-12"], [381, "index-24"], [381, "index-25"], [381, "index-32"], [381, "index-47"], [381, "index-94"], [467, "index-102"], [467, "index-86"], [478, "index-113"], [478, "index-116"], [478, "index-118"], [478, "index-91"], [478, "index-98"]], "pep 613": [[381, "index-112"], [381, "index-13"], [467, "index-104"], [467, "index-87"], [478, "index-135"]], "pep 646": [[381, "index-14"], [381, "index-44"], [468, "index-96"], [468, "index-97"]], "pep 647": [[381, "index-15"], [381, "index-39"], [467, "index-105"], [467, "index-88"], [478, "index-99"]], "pep 655": [[381, "index-113"], [381, "index-114"], [381, "index-16"], [381, "index-52"], [468, "index-98"], [478, "index-59"]], "pep 673": [[381, "index-111"], [381, "index-17"], [468, "index-100"], [478, "index-75"]], "pep 675": [[381, "index-110"], [381, "index-18"], [468, "index-101"], [478, "index-65"]], "pep 681": [[381, "index-115"], [381, "index-19"], [468, "index-102"], [478, "index-57"]], "pep 692": [[381, "index-20"], [381, "index-40"], [469, "index-13"], [478, "index-12"], [478, "index-19"]], "pep 695": [[381, "index-100"], [381, "index-21"], [381, "index-42"], [381, "index-43"], [381, "index-45"], [381, "index-46"], [424, "index-12"], [431, "index-48"], [469, "index-15"], [469, "index-26"], [469, "index-47"], [478, "index-0"], [478, "index-1"], [478, "index-11"], [478, "index-2"], [478, "index-3"], [478, "index-6"]], "pep 698": [[381, "index-22"], [381, "index-56"], [469, "index-2"], [478, "index-23"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Protocol"]], "required (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Required"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Reversible"]], "self (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Self"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.TypeAlias"]], "typealiastype (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.TypeAliasType"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.TypeVar"]], "typevartuple (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.TypeVarTuple"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Union"]], "unpack (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.Unpack"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[381, "typing.ValuesView"]], "__bound__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__bound__"]], "__constraints__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__constraints__"]], "__contravariant__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__contravariant__"]], "__covariant__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__covariant__"]], "__infer_variance__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__infer_variance__"]], "__module__ (typing.newtype \u7684\u5c6c\u6027)": [[381, "typing.NewType.__module__"]], "__module__ (typing.typealiastype \u7684\u5c6c\u6027)": [[381, "typing.TypeAliasType.__module__"]], "__name__ (typing.newtype \u7684\u5c6c\u6027)": [[381, "typing.NewType.__name__"]], "__name__ (typing.paramspec \u7684\u5c6c\u6027)": [[381, "typing.ParamSpec.__name__"]], "__name__ (typing.typealiastype \u7684\u5c6c\u6027)": [[381, "typing.TypeAliasType.__name__"]], "__name__ (typing.typevar \u7684\u5c6c\u6027)": [[381, "typing.TypeVar.__name__"]], "__name__ (typing.typevartuple \u7684\u5c6c\u6027)": [[381, "typing.TypeVarTuple.__name__"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[381, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[381, "typing.TypedDict.__required_keys__"]], "__supertype__ (typing.newtype \u7684\u5c6c\u6027)": [[381, "typing.NewType.__supertype__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[381, "typing.TypedDict.__total__"]], "__type_params__ (typing.typealiastype \u7684\u5c6c\u6027)": [[381, "typing.TypeAliasType.__type_params__"]], "__value__ (typing.typealiastype \u7684\u5c6c\u6027)": [[381, "typing.TypeAliasType.__value__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[381, "typing.ParamSpec.args"]], "assert_never() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.assert_never"]], "assert_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.assert_type"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.cast"]], "clear_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.clear_overloads"]], "dataclass_transform() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.dataclass_transform"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.get_origin"]], "get_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.get_overloads"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[381, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.overload"]], "override() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.override"]], "reveal_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.reveal_type"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[381, "typing.type_check_only"]], "typing": [[381, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.category"]], "character\uff08\u5b57\u5143\uff09": [[382, "index-0"], [423, "index-19"], [425, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.combining"]], "database\uff08\u8cc7\u6599\u5eab\uff09": [[382, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.ucd_3_2_0"]], "unicodedata": [[382, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[382, "unicodedata.unidata_version"]], "--buffer": [[383, "cmdoption-unittest-b"]], "--catch": [[383, "cmdoption-unittest-c"]], "--durations": [[383, "cmdoption-unittest-durations"]], "--failfast": [[383, "cmdoption-unittest-f"]], "--locals": [[383, "cmdoption-unittest-locals"]], "--pattern": [[383, "cmdoption-unittest-discover-p"]], "--start-directory": [[383, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[383, "cmdoption-unittest-discover-t"]], "-k": [[383, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[383, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[383, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[383, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[383, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[383, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.addCleanup"]], "addduration() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addDuration"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[383, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[383, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.buffer"]], "collecteddurations (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.collectedDurations"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[383, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.doModuleCleanups"]], "enterasynccontext() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[383, "unittest.IsolatedAsyncioTestCase.enterAsyncContext"]], "enterclasscontext() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[383, "unittest.TestCase.enterClassContext"]], "entercontext() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.enterContext"]], "entermodulecontext() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.enterModuleContext"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[383, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[383, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[383, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[383, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[383, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[383, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[383, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[383, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[383, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[383, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[383, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[383, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[383, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[383, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[383, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[383, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[383, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[383, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[383, "cmdoption-unittest-b"], [383, "cmdoption-unittest-c"], [383, "cmdoption-unittest-durations"], [383, "cmdoption-unittest-f"], [383, "cmdoption-unittest-k"], [383, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[383, "cmdoption-unittest-discover-p"], [383, "cmdoption-unittest-discover-s"], [383, "cmdoption-unittest-discover-t"], [383, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[383, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[384, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[384, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[384, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[384, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[384, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[384, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[384, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[384, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[384, "module-unittest.mock"]], "urllib": [[387, "module-urllib"]], "contenttooshorterror": [[388, "urllib.error.ContentTooShortError"]], "httperror": [[388, "urllib.error.HTTPError"]], "urlerror": [[388, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[388, "urllib.error.HTTPError.code"]], "content (urllib.error.contenttooshorterror \u7684\u5c6c\u6027)": [[388, "urllib.error.ContentTooShortError.content"]], "fp (urllib.error.httperror \u7684\u5c6c\u6027)": [[388, "urllib.error.HTTPError.fp"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[388, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[388, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[388, "urllib.error.URLError.reason"]], "url (urllib.error.httperror \u7684\u5c6c\u6027)": [[388, "urllib.error.HTTPError.url"]], "urllib.error": [[388, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[389, "index-17"]], "rfc 1808": [[389, "index-1"], [389, "index-16"], [473, "index-43"]], "rfc 2368": [[389, "index-11"]], "rfc 2396": [[389, "index-10"], [389, "index-3"], [389, "index-6"], [473, "index-44"], [475, "index-34"]], "rfc 2732": [[389, "index-9"], [464, "index-11"], [470, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[389, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[389, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.parse_qsl"]], "parsing\uff08\u5256\u6790\uff09": [[389, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.quote_plus"]], "relative\uff08\u76f8\u5c0d\uff09": [[389, "index-0"], [431, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urljoin"]], "urllib.parse": [[389, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[389, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.ProxyHandler"]], "rfc 2397": [[390, "index-8"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[390, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[390, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[390, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[390, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[390, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[390, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.get_method"]], "getcode() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[390, "urllib.response.addinfourl.getcode"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.getproxies"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[390, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[390, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_308() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.http_error_308"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[390, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.method"]], "no_proxy": [[390, "index-4"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[390, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[390, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[390, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[390, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[390, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[390, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[390, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[390, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[390, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[390, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[390, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[390, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.urlcleanup"]], "urllib.response": [[390, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[390, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[390, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[391, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[391, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[391, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[391, "module-urllib.robotparser"]], "ellinghouse, lance": [[392, "index-1"]], "jansen, jack": [[392, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[392, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[392, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[392, "uu.encode"]], "--name": [[393, "cmdoption-uuid-name"]], "--namespace": [[393, "cmdoption-uuid-namespace"]], "--uuid": [[393, "cmdoption-uuid-uuid"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[393, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[393, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.bytes_le"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.fields"]], "getnode": [[393, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.is_safe"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[393, "uuid.SafeUUID.safe"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[393, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[393, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.urn"]], "uuid": [[393, "module-uuid"]], "uuid \u547d\u4ee4\u5217\u9078\u9805": [[393, "cmdoption-uuid-N"], [393, "cmdoption-uuid-h"], [393, "cmdoption-uuid-n"], [393, "cmdoption-uuid-name"], [393, "cmdoption-uuid-namespace"], [393, "cmdoption-uuid-u"], [393, "cmdoption-uuid-uuid"]], "uuid1": [[393, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.uuid1"]], "uuid3": [[393, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.uuid3"]], "uuid4": [[393, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.uuid4"]], "uuid5": [[393, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[393, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[393, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[394, "venv.EnvBuilder"]], "environments \uff08\u74b0\u5883\uff09": [[394, "index-0"]], "pep 405": [[394, "index-6"], [471, "index-1"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[394, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[394, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[394, "module-venv"]], "virtual \uff08\u865b\u64ec\uff09": [[394, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[395, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[395, "warnings.warn_explicit"]], "warnings": [[395, "module-warnings"]], "warnings \uff08\u8b66\u544a\uff09": [[395, "index-0"]], "wave_read (wave \u4e2d\u7684\u985e\u5225)": [[396, "wave.Wave_read"]], "wave_write (wave \u4e2d\u7684\u985e\u5225)": [[396, "wave.Wave_write"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[396, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[396, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.tell"]], "wave": [[396, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[396, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.CallableProxyType"]], "pep 205": [[397, "index-2"], [458, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[397, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[397, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[397, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[397, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[397, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[397, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[397, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[397, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[397, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[397, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[397, "module-weakref"]], "browser": [[398, "index-0"], [398, "index-1"]], "kdedir": [[398, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.get"]], "name (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.name"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[398, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[398, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[398, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[398, "webbrowser.register"]], "webbrowser": [[398, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[400, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[400, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[400, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[400, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[400, "winreg.PyHKEY.__exit__"]], "environment variables expansion (windows) \uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[400, "index-0"]], "winreg": [[400, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[401, "winsound.SND_PURGE"]], "winsound": [[401, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.handlers.CGIHandler"]], "errorstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.types.ErrorStream"]], "filewrapper (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.types.FileWrapper"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.handlers.IISCGIHandler"]], "inputstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.types.InputStream"]], "pep 3333": [[402, "index-0"], [402, "index-1"], [402, "index-11"], [402, "index-12"], [402, "index-13"], [402, "index-14"], [402, "index-15"], [402, "index-16"], [402, "index-17"], [402, "index-18"], [402, "index-2"], [402, "index-3"], [402, "index-4"], [402, "index-6"], [402, "index-7"], [402, "index-8"], [402, "index-9"], [468, "index-108"], [470, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.handlers.SimpleHandler"]], "startresponse (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.types.StartResponse"]], "wsgiapplication (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[402, "wsgiref.types.WSGIApplication"]], "wsgienvironment (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[402, "wsgiref.types.WSGIEnvironment"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[402, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[402, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[402, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[402, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[402, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[402, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[402, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[402, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[402, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[402, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[402, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[402, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[402, "module-wsgiref"]], "wsgiref.handlers": [[402, "module-wsgiref.handlers"]], "wsgiref.headers": [[402, "module-wsgiref.headers"]], "wsgiref.simple_server": [[402, "module-wsgiref.simple_server"]], "wsgiref.types": [[402, "module-wsgiref.types"]], "wsgiref.util": [[402, "module-wsgiref.util"]], "wsgiref.validate": [[402, "module-wsgiref.validate"]], "conversionerror": [[403, "xdrlib.ConversionError"]], "external data representation \uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\uff09": [[403, "index-0"]], "pep 594#xdrlib": [[403, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[403, "xdrlib.Packer"]], "rfc 1014": [[403, "index-2"], [403, "index-3"]], "rfc 1832": [[403, "index-4"], [403, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[403, "xdrlib.Unpacker"]], "xdr": [[403, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[403, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[403, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[403, "module-xdrlib"]], "xml": [[404, "module-xml"]], "domexception": [[405, "xml.dom.DOMException"]], "domstringsizeerr": [[405, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[405, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[405, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[405, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[405, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[405, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[405, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[405, "xml.dom.InvalidStateErr"]], "namespaceerr": [[405, "xml.dom.NamespaceErr"]], "nodataallowederr": [[405, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[405, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[405, "xml.dom.NotFoundErr"]], "notsupportederr": [[405, "xml.dom.NotSupportedErr"]], "python_dom": [[405, "index-0"]], "syntaxerr": [[405, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[405, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[405, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[405, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[405, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[405, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[405, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[405, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[405, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[405, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[405, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[405, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[405, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[405, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[405, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[405, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[405, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[405, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[405, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[405, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[405, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[405, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[405, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[405, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[405, "xml.dom.Attr.value"]], "xml.dom": [[405, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[406, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[407, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[407, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[407, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[407, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[407, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[407, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[407, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[407, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[407, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[407, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[408, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.data"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.findtext"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.getroot"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[408, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[408, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[408, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude.default_loader()": [[408, "xml.etree.ElementInclude.default_loader"]], "xml.etree.elementinclude.include()": [[408, "xml.etree.ElementInclude.include"]], "xml.etree.elementtree": [[408, "module-xml.etree.ElementTree"]], "saxexception": [[409, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[409, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[409, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[409, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[409, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[409, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[409, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[409, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[409, "xml.sax.parseString"]], "xml.sax": [[409, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[410, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[410, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[410, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[410, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[410, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[410, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[410, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[410, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[411, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[411, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[412, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[412, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[412, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[412, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[412, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[414, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[414, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[414, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[414, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[414, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[414, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[414, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[415, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[415, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[415, "module-xmlrpc.server"]], "--compress": [[416, "cmdoption-zipapp-c"]], "--info": [[416, "cmdoption-zipapp-info"]], "--main": [[416, "cmdoption-zipapp-m"]], "--python": [[416, "cmdoption-zipapp-p"]], "executable zip files\uff08\u53ef\u57f7\u884c\u7684 zip \u6a94\u6848\uff09": [[416, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[416, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[416, "zipapp.get_interpreter"]], "zipapp": [[416, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[416, "cmdoption-zipapp-c"], [416, "cmdoption-zipapp-h"], [416, "cmdoption-zipapp-info"], [416, "cmdoption-zipapp-m"], [416, "cmdoption-zipapp-o"], [416, "cmdoption-zipapp-p"]], "--metadata-encoding": [[417, "cmdoption-zipfile-metadata-encoding"]], "badzipfile": [[417, "zipfile.BadZipFile"], [417, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.CRC"]], "largezipfile": [[417, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[417, "zipfile.Path"]], "path.stem (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.Path.stem"]], "path.suffix (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.Path.suffix"]], "path.suffixes (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.Path.suffixes"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[417, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[417, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[417, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[417, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[417, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[417, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[417, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[417, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.joinpath"]], "mkdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.mkdir"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[417, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[417, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[417, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[417, "zipfile.ZipFile.writestr"]], "zipfile": [[417, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[417, "cmdoption-zipfile-c"], [417, "cmdoption-zipfile-create"], [417, "cmdoption-zipfile-e"], [417, "cmdoption-zipfile-extract"], [417, "cmdoption-zipfile-l"], [417, "cmdoption-zipfile-list"], [417, "cmdoption-zipfile-metadata-encoding"], [417, "cmdoption-zipfile-t"], [417, "cmdoption-zipfile-test"]], "pep 273": [[418, "index-0"], [418, "index-1"], [460, "index-4"], [460, "index-5"]], "zipimporterror": [[418, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[418, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.exec_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[418, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[418, "zipimport.zipimporter.prefix"]], "zipimport": [[418, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[418, "zipimport.zipimporter"]], "cyclic redundancy check\uff08\u5faa\u74b0\u5197\u9918\u6838\u5c0d\uff09": [[419, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.adler32"]], "checksum\uff08\u6838\u5c0d\u548c\uff09": [[419, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[419, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[419, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[419, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[419, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[419, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[419, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[419, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[419, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[419, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[419, "zlib.Decompress.unused_data"]], "zlib": [[419, "module-zlib"]], "invalidtzpathwarning": [[420, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[420, "index-1"], [474, "index-17"], [474, "index-18"], [478, "index-272"]], "pep 615": [[420, "index-0"], [477, "index-16"], [477, "index-9"], [478, "index-162"]], "pythontzpath": [[420, "envvar-PYTHONTZPATH"], [420, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[420, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[420, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[420, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[420, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[420, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[420, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[420, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[420, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[420, "zoneinfo.reset_tzpath"]], "zoneinfo": [[420, "module-zoneinfo"]], "! patterns": [[422, "index-23"]], "->": [[422, "index-34"], [436, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[422, "index-23"]], "dedent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[422, "index-2"], [430, "index-9"]], "newline token\uff08\u63db\u884c\u6a19\u8a8c\uff09": [[422, "index-2"], [430, "index-3"]], "pep 3107": [[422, "index-36"], [436, "index-16"], [465, "index-6"], [473, "index-9"], [475, "index-0"]], "pep 3129": [[422, "index-44"], [463, "index-18"]], "pep 318": [[422, "index-45"], [461, "index-12"], [461, "index-4"], [461, "index-5"]], "pep 570": [[422, "index-33"], [476, "index-23"], [476, "index-32"], [478, "index-213"]], "pep 614": [[422, "index-30"], [422, "index-42"], [477, "index-15"], [477, "index-3"], [478, "index-185"]], "pep 636": [[422, "index-20"], [422, "index-26"], [436, "index-15"], [467, "index-82"], [467, "index-97"]], "annotations\uff08\u8a3b\u91cb\uff09": [[422, "index-34"], [436, "index-6"]], "as": [[422, "index-10"], [422, "index-16"], [422, "index-18"], [422, "index-9"], [431, "index-34"], [431, "index-35"]], "async": [[422, "index-47"]], "async def": [[422, "index-46"]], "async for": [[422, "index-48"], [425, "index-12"]], "async with": [[422, "index-49"]], "await": [[422, "index-47"], [425, "index-13"], [425, "index-57"]], "binding\uff08\u7d81\u5b9a\uff09": [[422, "index-28"], [422, "index-40"]], "break": [[422, "index-13"], [422, "index-15"], [422, "index-5"], [422, "index-7"], [431, "index-30"]], "case": [[422, "index-18"], [422, "index-18"]], "case block": [[422, "index-22"]], "class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09": [[422, "index-40"], [422, "index-41"], [423, "index-83"]], "clause\uff08\u5b50\u53e5\uff09": [[422, "index-1"]], "compound statement\uff08\u8907\u5408\u9673\u8ff0\u5f0f\uff09": [[422, "index-16"], [422, "index-18"], [422, "index-28"], [422, "index-3"], [422, "index-4"], [422, "index-40"], [422, "index-6"], [422, "index-9"]], "compound\uff08\u8907\u5408\uff09": [[422, "index-0"]], "continue": [[422, "index-13"], [422, "index-15"], [422, "index-5"], [422, "index-7"], [431, "index-33"]], "dangling": [[422, "index-2"]], "def": [[422, "index-28"]], "default\uff08\u9810\u8a2d\uff09": [[422, "index-31"]], "definition\uff08\u5b9a\u7fa9\uff09": [[422, "index-28"], [422, "index-40"], [431, "index-24"]], "elif": [[422, "index-3"]], "else": [[422, "index-13"], [422, "index-2"], [422, "index-3"], [422, "index-4"], [422, "index-6"], [422, "index-9"], [425, "index-88"], [431, "index-31"]], "except clause\uff08\u4f8b\u5916\u5b50\u53e5\uff09": [[422, "index-10"]], "except_star": [[422, "index-12"]], "execution\uff08\u57f7\u884c\uff09": [[422, "index-40"], [423, "index-63"], [424, "index-13"], [424, "index-2"]], "expression list\uff08\u8868\u9054\u5f0f\u5217\u8868\uff09": [[422, "index-40"]], "finally": [[422, "index-14"], [422, "index-9"], [431, "index-25"], [431, "index-32"], [431, "index-33"]], "for": [[422, "index-6"], [425, "index-12"], [431, "index-30"], [431, "index-33"], [436, "index-0"]], "frame": [[422, "index-40"], [423, "index-60"], [424, "index-2"]], "function annotations\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[422, "index-34"], [436, "index-6"]], "function definition\uff08\u51fd\u5f0f\u5b9a\u7fa9\uff09": [[422, "index-27"], [422, "index-28"], [422, "index-29"], [422, "index-31"], [422, "index-32"]], "function \uff08\u51fd\u5f0f\uff09": [[422, "index-28"], [422, "index-34"], [423, "index-32"], [423, "index-33"], [423, "index-37"], [423, "index-38"], [423, "index-39"], [423, "index-40"], [425, "index-23"], [425, "index-52"], [425, "index-53"], [425, "index-90"], [431, "index-24"], [431, "index-26"]], "guard": [[422, "index-21"]], "inheritance\uff08\u7e7c\u627f\uff09": [[422, "index-40"]], "irrefutable case block": [[422, "index-22"]], "keyword\uff08\u95dc\u9375\u5b57\uff09": [[422, "index-12"], [422, "index-13"], [422, "index-14"], [422, "index-16"], [422, "index-18"], [422, "index-18"], [422, "index-3"], [422, "index-4"], [422, "index-47"], [422, "index-6"], [422, "index-9"], [425, "index-23"], [425, "index-57"], [430, "index-13"], [430, "index-14"], [431, "index-25"], [431, "index-31"], [431, "index-32"], [431, "index-33"], [431, "index-34"]], "match": [[422, "index-18"], [422, "index-18"]], "match statement\uff08\u5339\u914d\u9673\u8ff0\u5f0f\uff09": [[422, "index-18"]], "name\uff08\u540d\u7a31\uff09": [[422, "index-28"], [422, "index-40"], [424, "index-4"], [425, "index-3"], [425, "index-5"], [430, "index-10"], [431, "index-22"], [431, "index-34"], [431, "index-36"], [431, "index-4"], [431, "index-43"], [435, "index-1"]], "parameter list\uff08\u53c3\u6578\u5217\u8868\uff09": [[422, "index-28"]], "pattern matching\uff08\u6a21\u5f0f\u5339\u914d\uff09": [[422, "index-18"]], "return \uff08\u56de\u50b3\uff09": [[422, "index-13"], [422, "index-15"], [431, "index-24"]], "suite\uff08\u5957\u88dd\uff09": [[422, "index-1"]], "target": [[422, "index-6"], [431, "index-21"], [431, "index-31"], [431, "index-5"], [431, "index-6"]], "type parameter\uff08\u578b\u5225\u53c3\u6578\uff09": [[422, "index-51"]], "user-defined function\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u51fd\u5f0f\uff09": [[422, "index-28"], [423, "index-33"], [425, "index-52"]], "value\uff08\u503c\uff09": [[422, "index-31"], [425, "index-17"]], "with": [[422, "index-16"], [423, "index-103"]], "with statement\uff08with \u9673\u8ff0\u5f0f\uff09": [[422, "index-16"]], "ellipsis": [[423, "index-8"]], "java": [[423, "index-13"]], "notimplemented": [[423, "index-7"]], "pep 252": [[423, "index-82"], [459, "index-2"], [459, "index-4"]], "pep 3135": [[423, "index-90"], [465, "index-31"]], "pep 562": [[423, "index-112"], [475, "index-16"], [478, "index-233"], [478, "index-238"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[423, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[423, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[423, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[423, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[423, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[423, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[423, "object.__anext__"]], "__annotations__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__annotations__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-43"]], "__annotations__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__await__() (object \u7684\u65b9\u6cd5)": [[423, "object.__await__"]], "__bases__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[423, "object.__bool__"]], "__bool__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-95"]], "__buffer__() (object \u7684\u65b9\u6cd5)": [[423, "object.__buffer__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[423, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[423, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ceil__"]], "__class__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[423, "index-52"]], "__class__ \uff08\u65b9\u6cd5 cell\uff09": [[423, "index-89"]], "__class__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-80"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[423, "object.__class_getitem__"]], "__classcell__ \uff08\u985e\u5225\u547d\u540d\u7a7a\u9593\u9805\u76ee\uff09": [[423, "index-89"]], "__closure__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__code__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[423, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[423, "object.__contains__"]], "__defaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__del__() (object \u7684\u65b9\u6cd5)": [[423, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[423, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[423, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[423, "object.__delitem__"]], "__dict__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__dict__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[423, "index-52"]], "__dict__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-44"]], "__dict__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__dir__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-80"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[423, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[423, "object.__divmod__"]], "__doc__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__doc__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[423, "index-36"]], "__doc__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-43"]], "__doc__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[423, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[423, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[423, "object.__exit__"]], "__file__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-43"]], "__float__() (object \u7684\u65b9\u6cd5)": [[423, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[423, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__floordiv__"]], "__format__() (object \u7684\u65b9\u6cd5)": [[423, "object.__format__"]], "__format__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-75"]], "__func__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[423, "index-36"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[423, "object.__get__"]], "__getattr__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-80"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[423, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[423, "object.__getattribute__"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[423, "object.__getitem__"]], "__getitem__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-68"]], "__globals__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[423, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[423, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[423, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[423, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[423, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[423, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[423, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[423, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[423, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[423, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[423, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[423, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[423, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ixor__"]], "__kwdefaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__le__() (object \u7684\u65b9\u6cd5)": [[423, "object.__le__"]], "__len__() (object \u7684\u65b9\u6cd5)": [[423, "object.__len__"]], "__len__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-79"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[423, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[423, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[423, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[423, "object.__mod__"]], "__module__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__module__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[423, "index-36"]], "__module__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__mro_entries__() (object \u7684\u65b9\u6cd5)": [[423, "object.__mro_entries__"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__mul__"]], "__name__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__name__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[423, "index-36"]], "__name__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[423, "index-43"]], "__name__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[423, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[423, "object.__new__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[423, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[423, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[423, "object.__pow__"]], "__prepare__ \uff08\u5143\u985e\u5225\u65b9\u6cd5\uff09": [[423, "index-86"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[423, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rdivmod__"]], "__release_buffer__() (object \u7684\u65b9\u6cd5)": [[423, "object.__release_buffer__"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[423, "object.__repr__"]], "__repr__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-72"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[423, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[423, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[423, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[423, "object.__rxor__"]], "__self__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[423, "index-36"]], "__set__() (object \u7684\u65b9\u6cd5)": [[423, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[423, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[423, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[423, "object.__setitem__"]], "__str__() (object \u7684\u65b9\u6cd5)": [[423, "object.__str__"]], "__str__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[423, "index-73"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[423, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[423, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[423, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[423, "object.__trunc__"]], "__type_params__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[423, "index-34"]], "__type_params__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[423, "index-48"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[423, "object.__xor__"]], "body": [[423, "index-88"]], "built-in method\uff08\u5167\u5efa\u65b9\u6cd5\uff09": [[423, "index-41"], [425, "index-53"]], "byte\uff08\u4f4d\u5143\u7d44\uff09": [[423, "index-21"]], "call\uff08\u547c\u53eb\uff09": [[423, "index-32"], [423, "index-45"], [423, "index-47"], [423, "index-94"], [425, "index-47"], [425, "index-52"], [425, "index-53"], [425, "index-54"], [425, "index-55"], [425, "index-56"]], "chr": [[423, "index-19"]], "class instance\uff08\u985e\u5225\u5be6\u4f8b\uff09": [[423, "index-45"], [423, "index-49"], [423, "index-50"], [425, "index-55"]], "class object\uff08\u985e\u5225\u7269\u4ef6\uff09": [[423, "index-45"], [423, "index-47"], [425, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[423, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[423, "coroutine.close"]], "co_argcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_cellvars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_code \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_consts \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_filename \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_firstlineno \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_flags \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_freevars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_kwonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_lnotab \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_name \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_names \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_nlocals \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_positions() (codeobject \u7684\u65b9\u6cd5)": [[423, "codeobject.co_positions"]], "co_posonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_qualname \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_stacksize \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "co_varnames \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-56"]], "constructor\uff08\u5efa\u69cb\u51fd\u5f0f\uff09": [[423, "index-70"]], "conversion": [[423, "index-75"], [425, "index-1"], [431, "index-3"]], "destructor\uff08\u89e3\u69cb\u51fd\u5f0f\uff09": [[423, "index-71"], [431, "index-7"]], "documentation string\uff08\u6587\u4ef6\u5b57\u4e32\uff09": [[423, "index-58"]], "empty\uff08\u7a7a\u7684\uff09": [[423, "index-20"]], "exc_info \uff08sys \u6a21\u7d44\u4e2d\uff09": [[423, "index-63"]], "exception\uff08\u4f8b\u5916\uff09": [[423, "index-63"], [424, "index-14"], [431, "index-19"], [431, "index-26"], [431, "index-27"], [431, "index-29"], [431, "index-34"]], "extension\uff08\u64f4\u5145\uff09": [[423, "index-4"]], "f_back \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_builtins \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_code \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_globals \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_lasti \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_lineno \uff08frame \u5c6c\u6027\uff09": [[423, "index-62"]], "f_locals \uff08frame \u5c6c\u6027\uff09": [[423, "index-61"]], "f_trace \uff08frame \u5c6c\u6027\uff09": [[423, "index-62"]], "f_trace_lines \uff08frame \u5c6c\u6027\uff09": [[423, "index-62"]], "f_trace_opcodes \uff08frame \u5c6c\u6027\uff09": [[423, "index-62"]], "finalizer\uff08\u7d42\u7d50\u51fd\u5f0f\uff09": [[423, "index-71"]], "format() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[423, "index-73"]], "global\uff08\u5168\u57df\uff09": [[423, "index-34"]], "handler\uff08\u8655\u7406\u5668\uff09": [[423, "index-63"]], "hierarchy\uff08\u968e\u5c64\uff09": [[423, "index-4"]], "identity of an object\uff08\u7269\u4ef6\u7684\u8b58\u5225\uff09": [[423, "index-1"]], "immutable object\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[423, "index-1"]], "immutable sequences\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[423, "index-18"]], "immutable sequence\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[423, "index-17"]], "immutable types\uff08\u4e0d\u53ef\u8b8a\u578b\u5225\uff09": [[423, "index-69"]], "index operation\uff08\u7d22\u5f15\u64cd\u4f5c\uff09": [[423, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[423, "slice.indices"]], "instance\uff08\u5be6\u4f8b\uff09": [[423, "index-45"], [423, "index-49"], [423, "index-94"], [425, "index-55"], [425, "index-56"]], "internal type\uff08\u5167\u90e8\u578b\u5225\uff09": [[423, "index-54"]], "invocation\uff08\u8abf\u7528\uff09": [[423, "index-32"]], "item selection\uff08\u9805\u76ee\u9078\u53d6\uff09": [[423, "index-15"]], "itorator\uff08\u758a\u4ee3\u5668\uff09": [[423, "index-37"]], "last_traceback \uff08sys \u6a21\u7d44\u4e2d\uff09": [[423, "index-63"]], "makefile() \uff08socket \u65b9\u6cd5\uff09": [[423, "index-53"]], "metaclass hint\uff08\u5143\u985e\u5225\u63d0\u793a\uff09": [[423, "index-85"]], "mutable object\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[423, "index-1"]], "mutable\uff08\u53ef\u8b8a\u7684\uff09": [[423, "index-22"], [431, "index-4"], [431, "index-9"]], "number\uff08\u6578\u5b57\uff09": [[423, "index-13"], [423, "index-14"], [430, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[423, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[423, "object.__slots__"]], "open": [[423, "index-53"], [441, "index-0"]], "ord": [[423, "index-19"]], "overloading\uff08\u591a\u8f09\uff09": [[423, "index-68"]], "popen() \uff08\u65bc os \u6a21\u7d44\u4e2d\uff09": [[423, "index-53"]], "print": [[423, "index-75"]], "print() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[423, "index-73"]], "reference counting\uff08\u53c3\u7167\u8a08\u6578\uff09": [[423, "index-2"]], "repr() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[423, "index-72"]], "representation\uff08\u8868\u793a\uff09": [[423, "index-12"]], "round": [[423, "index-102"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[423, "coroutine.send"]], "set type\uff08\u96c6\u5408\u578b\u5225\uff09": [[423, "index-26"]], "singleton\uff08\u55ae\u4f8b\uff09": [[423, "index-20"]], "stack\uff08\u5806\u758a\uff09": [[423, "index-63"]], "start \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-67"]], "stderr \uff08sys \u6a21\u7d44\u4e2d\uff09": [[423, "index-53"]], "stdin \uff08sys \u6a21\u7d44\u4e2d\uff09": [[423, "index-53"]], "stdio": [[423, "index-53"]], "stdout \uff08sys \u6a21\u7d44\u4e2d\uff09": [[423, "index-53"]], "step \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-67"]], "stop \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[423, "index-67"]], "subclassing\uff08\u5b50\u985e\u5225\u5316\uff09": [[423, "index-69"]], "subscription\uff08\u4e0b\u6a19\uff09": [[423, "index-15"], [423, "index-22"], [423, "index-29"], [425, "index-41"], [431, "index-9"]], "sys.exc_info": [[423, "index-63"]], "sys.exception": [[423, "index-63"]], "sys.last_traceback": [[423, "index-63"]], "sys.stderr": [[423, "index-53"]], "sys.stdin": [[423, "index-53"]], "sys.stdout": [[423, "index-53"]], "tb_frame \uff08traceback \u5c6c\u6027\uff09": [[423, "index-64"]], "tb_lasti \uff08traceback \u5c6c\u6027\uff09": [[423, "index-64"]], "tb_lineno \uff08traceback \u5c6c\u6027\uff09": [[423, "index-64"]], "tb_next \uff08traceback \u5c6c\u6027\uff09": [[423, "index-65"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[423, "coroutine.throw"]], "trace\uff08\u8ffd\u8e64\uff09": [[423, "index-63"]], "type of an object\uff08\u7269\u4ef6\u7684\u578b\u5225\uff09": [[423, "index-1"]], "types\uff08\u578b\u5225\uff09, internal\uff08\u5167\u90e8\uff09": [[423, "index-54"]], "unreachable object\uff08\u4e0d\u53ef\u9054\u7269\u4ef6\uff09": [[423, "index-2"]], "user-defined method\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u65b9\u6cd5\uff09": [[423, "index-35"]], "user-defined\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\uff09": [[423, "index-33"], [423, "index-35"], [425, "index-52"]], "value of an object\uff08\u7269\u4ef6\u7684\u503c\uff09": [[423, "index-1"]], "nameerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[424, "index-9"]], "systemexit\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[424, "index-17"]], "binding\uff08\u7e6b\u7d50\uff09": [[424, "index-4"], [431, "index-34"], [431, "index-36"], [431, "index-4"], [431, "index-43"]], "environment\uff08\u74b0\u5883\uff09": [[424, "index-8"]], "error handling\uff08\u932f\u8aa4\u8655\u7406\uff09": [[424, "index-15"]], "exception handler\uff08\u4f8b\u5916\u8655\u7406\u5668\uff09": [[424, "index-15"]], "execution model\uff08\u57f7\u884c\u6a21\u578b\uff09": [[424, "index-0"]], "free": [[424, "index-6"]], "from": [[424, "index-5"], [425, "index-23"], [425, "index-25"], [431, "index-34"], [431, "index-36"]], "handle an exception\uff08\u8655\u7406\u4f8b\u5916\uff09": [[424, "index-15"]], "import statement\uff08\u5f15\u5165\u9673\u8ff0\u5f0f\uff09": [[424, "index-5"], [431, "index-34"], [431, "index-35"], [431, "index-36"], [431, "index-37"]], "raise an exception\uff08\u5f15\u767c\u4f8b\u5916\uff09": [[424, "index-15"]], "restricted\uff08\u53d7\u9650\uff09": [[424, "index-13"]], "scope\uff08\u4f5c\u7528\u57df\uff09": [[424, "index-3"], [424, "index-7"]], "termination model\uff08\u7d42\u6b62\u6a21\u578b\uff09": [[424, "index-16"]], "variable\uff08\u8b8a\u6578\uff09": [[424, "index-6"]], ":= \uff08\u5192\u865f\u7b49\u65bc\uff09": [[425, "index-86"]], "bnf": [[425, "index-0"], [429, "index-0"]], "conditional\uff08\u689d\u4ef6\u5f0f\uff09": [[425, "index-82"], [425, "index-88"]], "pep 308": [[425, "index-89"], [462, "index-1"], [462, "index-2"]], "pep 380": [[425, "index-28"], [471, "index-12"]], "pep 448": [[425, "index-19"], [425, "index-51"], [425, "index-94"], [473, "index-5"], [473, "index-6"], [478, "index-280"], [478, "index-291"], [478, "index-292"], [478, "index-293"]], "pep 530": [[425, "index-14"], [474, "index-11"], [474, "index-12"], [478, "index-266"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[425, "agen.__anext__"]], "__call__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[425, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[425, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[425, "agen.aclose"]], "addition\uff08\u52a0\uff09": [[425, "index-69"]], "anonymous\uff08\u533f\u540d\uff09": [[425, "index-90"]], "argument list\uff08\u5f15\u6578\u5217\u8868\uff09": [[425, "index-47"]], "arithmetic": [[425, "index-1"], [425, "index-59"], [425, "index-64"]], "asend() (agen \u7684\u65b9\u6cd5)": [[425, "agen.asend"]], "assignment expression\uff08\u8ce6\u503c\u904b\u7b97\u5f0f\uff09": [[425, "index-86"]], "asynchronous-generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[425, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[425, "agen.athrow"]], "atom": [[425, "index-2"]], "attribute reference\uff08\u5c6c\u6027\u53c3\u7167\uff09": [[425, "index-39"]], "call semantics\uff08\u547c\u53eb\u8a9e\u610f\uff09": [[425, "index-47"], [425, "index-48"]], "chaining\uff08\u93c8\u63a5\uff09": [[425, "index-78"]], "close() (generator \u7684\u65b9\u6cd5)": [[425, "generator.close"]], "comma": [[425, "index-10"], [425, "index-95"]], "comprehensions": [[425, "index-11"], [425, "index-15"], [425, "index-16"], [425, "index-17"]], "conditional expression\uff08\u689d\u4ef6\u904b\u7b97\u5f0f\uff09": [[425, "index-88"]], "dictionary expression\uff08\u5b57\u5178\u904b\u7b97\u5f0f\uff09": [[425, "index-17"]], "division\uff08\u9664\uff09": [[425, "index-67"]], "evaluation": [[425, "index-96"]], "exclusive\uff08\u6392\u5916\uff09": [[425, "index-75"]], "expression": [[425, "index-0"], [425, "index-22"], [425, "index-23"], [425, "index-82"], [425, "index-88"], [425, "index-90"], [425, "index-91"], [431, "index-1"], [431, "index-2"]], "expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[425, "index-15"], [425, "index-16"], [425, "index-91"]], "form": [[425, "index-90"]], "hashable\uff08\u53ef\u96dc\u6e4a\uff09": [[425, "index-20"]], "identifier": [[425, "index-3"]], "identity": [[425, "index-81"]], "immutable": [[425, "index-20"], [425, "index-7"]], "inclusive\uff08\u5305\u542b\uff09": [[425, "index-76"]], "inversion\uff08\u53cd\u8f49\uff09": [[425, "index-62"]], "item\uff08\u9805\u76ee\uff09": [[425, "index-42"], [425, "index-43"]], "iterable\uff08\u53ef\u758a\u4ee3\uff09": [[425, "index-93"]], "key/value pair\uff08\u9375/\u503c\u5c0d\uff09": [[425, "index-17"]], "key\uff08\u9375\uff09": [[425, "index-17"]], "lambda expression\uff08lambda \u904b\u7b97\u5f0f\uff09": [[425, "index-90"]], "list expression\uff08\u4e32\u5217\u904b\u7b97\u5f0f\uff09": [[425, "index-15"]], "literal": [[425, "index-6"]], "mangling": [[425, "index-5"]], "matrix multiplication\uff08\u77e9\u9663\u4e58\u6cd5\uff09": [[425, "index-66"]], "membership\uff08\u6210\u54e1\uff09": [[425, "index-80"]], "minus\uff08\u6e1b\uff09": [[425, "index-60"]], "modulo\uff08\u9918\u6578\uff09": [[425, "index-68"]], "multiplication\uff08\u4e58\uff09": [[425, "index-65"]], "named expression\uff08\u9644\u540d\u904b\u7b97\u5f0f\uff09": [[425, "index-86"]], "names": [[425, "index-5"]], "negation\uff08\u5426\u5b9a\uff09": [[425, "index-60"]], "order\uff08\u9806\u5e8f\uff09": [[425, "index-96"]], "parenthesized form": [[425, "index-8"]], "plus\uff08\u52a0\uff09": [[425, "index-61"]], "power\uff08\u6b21\u65b9\uff09": [[425, "index-58"]], "precedence\uff08\u512a\u5148\u9806\u5e8f\uff09": [[425, "index-97"]], "primary\uff08\u4e3b\u8981\uff09": [[425, "index-38"]], "private": [[425, "index-5"]], "reference\uff08\u53c3\u7167\uff09": [[425, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[425, "generator.send"]], "set expression\uff08\u96c6\u5408\u904b\u7b97\u5f0f\uff09": [[425, "index-16"]], "shifting\uff08\u79fb\u52d5\uff09": [[425, "index-71"]], "slicing\uff08\u5207\u7247\uff09": [[425, "index-44"]], "start\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[425, "index-46"]], "step\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[425, "index-46"]], "stop\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[425, "index-46"]], "subtraction\uff08\u6e1b\uff09": [[425, "index-70"]], "ternary\uff08\u4e09\u5143\uff09": [[425, "index-88"]], "test\uff08\u6e2c\u8a66\uff09": [[425, "index-80"], [425, "index-81"]], "throw() (generator \u7684\u65b9\u6cd5)": [[425, "generator.throw"]], "trailing": [[425, "index-95"]], "tuple": [[425, "index-42"], [425, "index-45"], [425, "index-9"], [425, "index-92"]], "tuple display": [[425, "index-8"]], "unary\uff08\u4e00\u5143\uff09": [[425, "index-59"]], "unpacking\uff08\u89e3\u5305\uff09": [[425, "index-18"], [425, "index-49"], [425, "index-93"]], "walrus operator\uff08\u6d77\u8c61\u904b\u7b97\u5b50\uff09": [[425, "index-86"]], "xor": [[425, "index-75"]], "yield": [[425, "index-23"], [425, "index-34"], [431, "index-26"], [471, "index-11"]], "yield from expression\uff08yield from \u904b\u7b97\u5f0f\uff09": [[425, "index-25"]], "\u65bc comprehensions\uff08\u7d9c\u5408\u904b\u7b97\uff09": [[425, "index-12"], [425, "index-13"]], "\u65bc expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[425, "index-93"]], "\u65bc\u51fd\u5f0f\u547c\u53eb\u4e2d": [[425, "index-47"], [425, "index-49"], [425, "index-50"], [436, "index-3"], [436, "index-4"]], "\u65bc\u5b57\u5178\u904b\u7b97\u5f0f": [[425, "index-17"]], "\u65bc\u5b57\u5178\u986f\u793a": [[425, "index-17"], [425, "index-18"]], "\u7bc4\u4f8b": [[425, "index-34"]], "__cached__": [[427, "cached__"]], "__file__": [[427, "file__"]], "__loader__": [[427, "loader__"]], "__name__": [[427, "name__"]], "__package__": [[427, "package__"]], "__path__": [[427, "path__"]], "__spec__": [[427, "spec__"]], "find_spec": [[427, "index-10"]], "finder\uff08\u641c\u5c0b\u5668\uff09": [[427, "index-10"], [427, "index-8"]], "hooks": [[427, "index-9"]], "import hooks": [[427, "index-9"]], "import machinery\uff08\u5f15\u5165\u6a5f\u5236\uff09": [[427, "index-0"]], "meta": [[427, "index-9"]], "meta hooks": [[427, "index-9"]], "module spec": [[427, "index-8"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u641c\u5c0b\u5668\uff09": [[427, "index-16"]], "path hooks": [[427, "index-9"]], "regular\uff08\u4e00\u822c\uff09": [[427, "index-4"]], "sys.meta_path": [[427, "index-10"]], "sys.modules": [[427, "index-7"]], "sys.path": [[427, "index-17"]], "sys.path_hooks": [[427, "index-17"]], "sys.path_importer_cache": [[427, "index-17"]], "grammar\uff08\u6587\u6cd5\uff09": [[429, "index-0"]], "lexical definitions\uff08\u8a5e\u6cd5\u5b9a\u7fa9\uff09": [[429, "index-1"]], "notation\uff08\u6a19\u8a18\u6cd5\uff09": [[429, "index-0"]], "syntax\uff08\u8a9e\u6cd5\uff09": [[429, "index-0"]], "\" \uff08\u96d9\u5f15\u865f\uff09": [[430, "index-17"]], "\"\"\"": [[430, "index-18"]], "' \uff08\u55ae\u5f15\u865f\uff09": [[430, "index-17"]], "'''": [[430, "index-18"]], "0b": [[430, "index-28"]], "0o": [[430, "index-28"]], "0x": [[430, "index-28"]], "indent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[430, "index-9"]], "pep 3131": [[430, "index-11"], [430, "index-12"], [465, "index-5"]], "pep 414": [[430, "index-21"], [471, "index-14"]], "standard c\uff08\u6a19\u6e96 c\uff09": [[430, "index-23"]], "unicode consortium": [[430, "index-18"]], "_, identifiers\uff08\u8b58\u5225\u5668\uff09": [[430, "index-15"]], "__, identifiers\uff08\u8b58\u5225\u5668\uff09": [[430, "index-15"]], "b\"": [[430, "index-19"]], "b'": [[430, "index-19"]], "backslash character\uff08\u53cd\u659c\u7dda\u5b57\u5143\uff09": [[430, "index-6"]], "binary literal\uff08\u4e8c\u9032\u4f4d\u5e38\u6578\uff09": [[430, "index-27"]], "blank line\uff08\u7a7a\u767d\u5217\uff09": [[430, "index-7"]], "bytes literal\uff08\u4f4d\u5143\u7d44\u5e38\u6578\uff09": [[430, "index-17"], [430, "index-19"]], "complex literal\uff08\u8907\u6578\u5e38\u6578\uff09": [[430, "index-27"]], "constant\uff08\u5e38\u6578\uff09": [[430, "index-16"]], "decimal literal\uff08\u5341\u9032\u4f4d\u5e38\u6578\uff09": [[430, "index-27"]], "delimiters\uff08\u5206\u9694\u7b26\u865f\uff09": [[430, "index-32"]], "e": [[430, "index-29"]], "encoding declarations (source file)\uff08\u7de8\u78bc\u5ba3\u544a\uff08\u539f\u59cb\u6a94\u6848\uff09\uff09": [[430, "index-5"]], "f\"": [[430, "index-22"]], "f'": [[430, "index-22"]], "floating point literal\uff08\u6d6e\u9ede\u6578\u5e38\u6578\uff09": [[430, "index-27"]], "for help in debugging using string literals\uff08\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u9032\u884c\u9664\u932f\uff09": [[430, "index-25"]], "formatted literal\uff08\u683c\u5f0f\u5316\u5e38\u6578\uff09": [[430, "index-25"]], "formatted string literal\uff08\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\uff09": [[430, "index-22"], [430, "index-25"]], "fstring\uff08f \u5b57\u4e32\uff09": [[430, "index-25"]], "grouping\uff08\u7fa4\u7d44\uff09": [[430, "index-8"]], "hash character\uff08\u4e95\u5b57\u865f\uff09": [[430, "index-4"]], "hexadecimal literal\uff08\u5341\u516d\u9032\u4f4d\u5e38\u6578\uff09": [[430, "index-27"]], "identifier\uff08\u8b58\u5225\u5668\uff09": [[430, "index-10"]], "imaginary literal\uff08\u865b\u6578\u5e38\u6578\uff09": [[430, "index-27"]], "indentation\uff08\u7e2e\u6392\uff09": [[430, "index-8"]], "integer literal\uff08\u6574\u6578\u5e38\u6578\uff09": [[430, "index-27"], [430, "index-28"]], "interpolated literal\uff08\u63d2\u503c\u5e38\u6578\uff09": [[430, "index-25"]], "interpolated string literal\uff08\u63d2\u503c\u5b57\u4e32\u5e38\u6578\uff09": [[430, "index-25"]], "j": [[430, "index-30"]], "leading whitespace\uff08\u524d\u7f6e\u7a7a\u767d\uff09": [[430, "index-8"]], "lexical analysis\uff08\u8a5e\u6cd5\u5206\u6790\uff09": [[430, "index-0"]], "line continuation\uff08\u5217\u5ef6\u7e8c\uff09": [[430, "index-6"]], "line joining\uff08\u5217\u9023\u63a5\uff09": [[430, "index-3"], [430, "index-6"]], "line structure\uff08\u5217\u7d50\u69cb\uff09": [[430, "index-2"]], "literal\uff08\u5e38\u6578\uff09": [[430, "index-16"]], "logical line\uff08\u908f\u8f2f\u5217\uff09": [[430, "index-3"]], "numeric literal\uff08\u6578\u503c\u5e38\u6578\uff09": [[430, "index-27"]], "octal literal\uff08\u516b\u9032\u4f4d\u5e38\u6578\uff09": [[430, "index-27"]], "operators\uff08\u904b\u7b97\u5b50\uff09": [[430, "index-31"]], "parser\uff08\u5256\u6790\u5668\uff09": [[430, "index-0"]], "physical line\uff08\u7269\u7406\u5217\uff09": [[430, "index-23"], [430, "index-3"], [430, "index-6"]], "r\"": [[430, "index-20"]], "r'": [[430, "index-20"]], "raw string literal\uff08\u539f\u59cb\u5b57\u4e32\u5e38\u6578\uff09": [[430, "index-20"]], "raw string\uff08\u539f\u59cb\u5b57\u4e32\uff09": [[430, "index-18"]], "reserved word\uff08\u4fdd\u7559\u5b57\uff09": [[430, "index-13"]], "soft keyword\uff08\u8edf\u95dc\u9375\u5b57\uff09": [[430, "index-14"]], "source character set\uff08\u539f\u59cb\u5b57\u5143\u96c6\u5408\uff09": [[430, "index-5"]], "source encoding declaration\uff08\u539f\u59cb\u7de8\u78bc\u5ba3\u544a\uff09": [[430, "index-5"]], "statement grouping\uff08\u9673\u8ff0\u5f0f\u7fa4\u7d44\uff09": [[430, "index-8"]], "string literal\uff08\u5b57\u4e32\u5e38\u6578\uff09": [[430, "index-17"], [430, "index-18"]], "tab\uff08\u5b9a\u4f4d\u5b57\u5143\uff09": [[430, "index-8"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5b57\u4e32\uff09": [[430, "index-18"]], "u\"": [[430, "index-17"]], "u'": [[430, "index-17"]], "unrecognized escape sequence\uff08\u7121\u6cd5\u8fa8\u8b58\u7684\u8df3\u812b\u5e8f\u5217\uff09": [[430, "index-24"]], "\u65bc\u6578\u503c\u5e38\u6578\u4e2d": [[430, "index-28"], [430, "index-29"], [430, "index-30"]], "\u65bc\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\u4e2d": [[430, "index-25"]], "%=": [[431, "index-14"]], "&=": [[431, "index-14"]], "**=": [[431, "index-14"]], "*=": [[431, "index-14"]], "+=": [[431, "index-14"]], "-=": [[431, "index-14"]], "//=": [[431, "index-14"]], "/=": [[431, "index-14"]], "<<=": [[431, "index-14"]], ">>=": [[431, "index-14"]], "pep 236": [[431, "index-42"], [458, "index-0"], [458, "index-1"], [458, "index-3"]], "pep 3104": [[431, "index-46"], [465, "index-8"]], "pep 3132": [[431, "index-13"], [465, "index-9"]], "^=": [[431, "index-14"]], "__all__\uff08\u53ef\u9078\u6a21\u7d44\u5c6c\u6027\uff09": [[431, "index-38"]], "__cause__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[431, "index-29"]], "__context__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[431, "index-29"]], "__debug__": [[431, "index-19"]], "__traceback__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[431, "index-27"]], "annotated variable\uff08\u8a3b\u91cb\u8b8a\u6578\uff09": [[431, "index-15"]], "annotated\uff08\u8a3b\u91cb\uff09": [[431, "index-15"]], "assertions\uff08\u65b7\u8a00\uff09": [[431, "index-18"]], "assignment statement\uff08\u8ce6\u503c\u9673\u8ff0\u5f0f\uff09": [[431, "index-4"]], "assignment\uff08\u8ce6\u503c\uff09\u3001annotated\uff08\u8a3b\u91cb\uff09": [[431, "index-15"]], "assignment\uff08\u8ce6\u503c\uff09\u3001augmented\uff08\u589e\u5f37\uff09": [[431, "index-14"]], "augmented assignment\uff08\u589e\u5f37\u8ce6\u503c\uff09": [[431, "index-14"]], "augmented\uff08\u589e\u5f37\uff09": [[431, "index-14"]], "call": [[431, "index-3"]], "deletion\uff08\u522a\u9664\uff09": [[431, "index-21"], [431, "index-23"]], "expression list\uff08\u904b\u7b97\u5f0f\u5217\u8868\uff09": [[431, "index-18"]], "future": [[431, "index-40"]], "future statement\uff08future \u9673\u8ff0\u5f0f\uff09": [[431, "index-40"]], "global": [[431, "index-22"], [431, "index-43"], [431, "index-43"]], "identifier list\uff08\u8b58\u5225\u7b26\u865f\u6e05\u55ae\uff09": [[431, "index-43"], [431, "index-45"]], "loop control\uff08\u8ff4\u5708\u63a7\u5236\uff09": [[431, "index-31"]], "nonlocal": [[431, "index-45"]], "null": [[431, "index-20"]], "pass": [[431, "index-20"]], "procedure": [[431, "index-3"]], "raiseing": [[431, "index-27"]], "rebinding\uff08\u91cd\u65b0\u7e6b\u7d50\uff09": [[431, "index-4"]], "simple": [[431, "index-0"]], "standard": [[431, "index-3"]], "type": [[431, "index-47"]], "unbinding\uff08\u89e3\u9664\u7e6b\u7d50\uff09": [[431, "index-22"]], "writing": [[431, "index-3"]], "|=": [[431, "index-14"]], "\u65bc\u76ee\u6a19\u5217\u8868\u4e2d": [[431, "index-6"]], "\u65bc\u8ce6\u503c\u76ee\u6a19\u5217\u8868\u4e2d": [[431, "index-6"]], "windows": [[432, "index-4"]], "command line\uff08\u547d\u4ee4\u5217\uff09": [[432, "index-4"]], "input\uff08\u8f38\u5165\uff09": [[432, "index-5"]], "interactive mode\uff08\u4e92\u52d5\u6a21\u5f0f\uff09": [[432, "index-3"]], "interpreter\uff08\u76f4\u8b6f\u5668\uff09": [[432, "index-0"]], "program\uff08\u7a0b\u5f0f\uff09": [[432, "index-1"]], "standard input\uff08\u6a19\u6e96\u8f38\u5165\uff09": [[432, "index-4"]], "mangling\uff08\u4fee\u98fe\uff09": [[435, "index-1"]], "coding\uff08\u7a0b\u5f0f\u7de8\u5beb\uff09": [[436, "index-9"]], "ddocumentation strings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[436, "index-2"], [436, "index-5"]], "docstrings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[436, "index-2"], [436, "index-5"]], "strings\uff08\u5b57\u4e32\uff09, documentation\uff08\u8aaa\u660e\u6587\u4ef6\uff09": [[436, "index-2"], [436, "index-5"]], "style\uff08\u98a8\u683c\uff09": [[436, "index-9"]], "# (hash)": [[444, "index-0"]], "--check-hash-based-pycs": [[450, "cmdoption-check-hash-based-pycs"]], "--help-all": [[450, "cmdoption-help-all"]], "--help-env": [[450, "cmdoption-help-env"]], "--help-xoptions": [[450, "cmdoption-help-xoptions"]], "-?": [[450, "cmdoption-0"]], "-oo": [[450, "cmdoption-OO"]], "-w": [[450, "cmdoption-W"]], "python*": [[450, "index-0"], [450, "index-10"], [450, "index-2"], [450, "index-5"], [472, "index-50"], [478, "index-41"]], "pythondumprefsfile=filename": [[450, "envvar-PYTHONDUMPREFSFILE-FILENAME"]], "\u547d\u4ee4\u5217\u9078\u9805": [[450, "cmdoption-0"], [450, "cmdoption-B"], [450, "cmdoption-E"], [450, "cmdoption-I"], [450, "cmdoption-J"], [450, "cmdoption-O"], [450, "cmdoption-OO"], [450, "cmdoption-P"], [450, "cmdoption-R"], [450, "cmdoption-S"], [450, "cmdoption-V"], [450, "cmdoption-W"], [450, "cmdoption-X"], [450, "cmdoption-b"], [450, "cmdoption-c"], [450, "cmdoption-check-hash-based-pycs"], [450, "cmdoption-d"], [450, "cmdoption-h"], [450, "cmdoption-help"], [450, "cmdoption-help-all"], [450, "cmdoption-help-env"], [450, "cmdoption-help-xoptions"], [450, "cmdoption-i"], [450, "cmdoption-m"], [450, "cmdoption-q"], [450, "cmdoption-s"], [450, "cmdoption-u"], [450, "cmdoption-v"], [450, "cmdoption-version"], [450, "cmdoption-x"], [451, "cmdoption-0"], [451, "cmdoption-1"], [451, "cmdoption-arg-CONFIG_SITE"], [451, "cmdoption-build"], [451, "cmdoption-disable-ipv6"], [451, "cmdoption-disable-test-modules"], [451, "cmdoption-enable-big-digits"], [451, "cmdoption-enable-bolt"], [451, "cmdoption-enable-framework"], [451, "cmdoption-enable-loadable-sqlite-extensions"], [451, "cmdoption-enable-optimizations"], [451, "cmdoption-enable-profiling"], [451, "cmdoption-enable-pystats"], [451, "cmdoption-enable-shared"], [451, "cmdoption-enable-universalsdk"], [451, "cmdoption-enable-wasm-dynamic-linking"], [451, "cmdoption-enable-wasm-pthreads"], [451, "cmdoption-exec-prefix"], [451, "cmdoption-host"], [451, "cmdoption-prefix"], [451, "cmdoption-with-address-sanitizer"], [451, "cmdoption-with-assertions"], [451, "cmdoption-with-build-python"], [451, "cmdoption-with-builtin-hashlib-hashes"], [451, "cmdoption-with-computed-gotos"], [451, "cmdoption-with-dbmliborder"], [451, "cmdoption-with-dtrace"], [451, "cmdoption-with-emscripten-target"], [451, "cmdoption-with-ensurepip"], [451, "cmdoption-with-framework-name"], [451, "cmdoption-with-hash-algorithm"], [451, "cmdoption-with-libc"], [451, "cmdoption-with-libm"], [451, "cmdoption-with-libs"], [451, "cmdoption-with-lto"], [451, "cmdoption-with-memory-sanitizer"], [451, "cmdoption-with-openssl"], [451, "cmdoption-with-openssl-rpath"], [451, "cmdoption-with-pkg-config"], [451, "cmdoption-with-platlibdir"], [451, "cmdoption-with-pydebug"], [451, "cmdoption-with-readline"], [451, "cmdoption-with-ssl-default-suites"], [451, "cmdoption-with-strict-overflow"], [451, "cmdoption-with-suffix"], [451, "cmdoption-with-system-expat"], [451, "cmdoption-with-system-libmpdec"], [451, "cmdoption-with-trace-refs"], [451, "cmdoption-with-tzpath"], [451, "cmdoption-with-undefined-behavior-sanitizer"], [451, "cmdoption-with-universal-archs"], [451, "cmdoption-with-valgrind"], [451, "cmdoption-with-wheel-pkg-dir"], [451, "cmdoption-without-c-locale-coercion"], [451, "cmdoption-without-decimal-contextvar"], [451, "cmdoption-without-doc-strings"], [451, "cmdoption-without-freelists"], [451, "cmdoption-without-pymalloc"], [451, "cmdoption-without-readline"], [451, "cmdoption-without-static-libpython"]], "--build": [[451, "cmdoption-build"]], "--disable-ipv6": [[451, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[451, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[451, "cmdoption-enable-big-digits"]], "--enable-bolt": [[451, "cmdoption-enable-bolt"]], "--enable-framework": [[451, "cmdoption-1"], [451, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[451, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[451, "cmdoption-enable-optimizations"]], "--enable-profiling": [[451, "cmdoption-enable-profiling"]], "--enable-pystats": [[451, "cmdoption-enable-pystats"]], "--enable-shared": [[451, "cmdoption-enable-shared"]], "--enable-universalsdk": [[451, "cmdoption-0"], [451, "cmdoption-enable-universalsdk"]], "--enable-wasm-dynamic-linking": [[451, "cmdoption-enable-wasm-dynamic-linking"]], "--enable-wasm-pthreads": [[451, "cmdoption-enable-wasm-pthreads"]], "--exec-prefix": [[451, "cmdoption-exec-prefix"]], "--host": [[451, "cmdoption-host"]], "--prefix": [[451, "cmdoption-prefix"]], "--with-address-sanitizer": [[451, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[451, "cmdoption-with-assertions"]], "--with-build-python": [[451, "cmdoption-with-build-python"]], "--with-builtin-hashlib-hashes": [[451, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[451, "cmdoption-with-computed-gotos"]], "--with-dbmliborder": [[451, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[451, "cmdoption-with-dtrace"]], "--with-emscripten-target": [[451, "cmdoption-with-emscripten-target"]], "--with-ensurepip": [[451, "cmdoption-with-ensurepip"]], "--with-framework-name": [[451, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[451, "cmdoption-with-hash-algorithm"]], "--with-libc": [[451, "cmdoption-with-libc"]], "--with-libm": [[451, "cmdoption-with-libm"]], "--with-libs": [[451, "cmdoption-with-libs"]], "--with-lto": [[451, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[451, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[451, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[451, "cmdoption-with-openssl-rpath"]], "--with-pkg-config": [[451, "cmdoption-with-pkg-config"]], "--with-platlibdir": [[451, "cmdoption-with-platlibdir"]], "--with-pydebug": [[451, "cmdoption-with-pydebug"]], "--with-readline": [[451, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[451, "cmdoption-with-ssl-default-suites"]], "--with-strict-overflow": [[451, "cmdoption-with-strict-overflow"]], "--with-suffix": [[451, "cmdoption-with-suffix"]], "--with-system-expat": [[451, "cmdoption-with-system-expat"]], "--with-system-libmpdec": [[451, "cmdoption-with-system-libmpdec"]], "--with-trace-refs": [[451, "cmdoption-with-trace-refs"]], "--with-tzpath": [[451, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[451, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[451, "cmdoption-with-universal-archs"]], "--with-valgrind": [[451, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[451, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[451, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[451, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[451, "cmdoption-without-doc-strings"]], "--without-freelists": [[451, "cmdoption-without-freelists"]], "--without-pymalloc": [[451, "cmdoption-without-pymalloc"]], "--without-readline": [[451, "cmdoption-without-readline"]], "--without-static-libpython": [[451, "cmdoption-without-static-libpython"]], "basecflags": [[451, "envvar-BASECFLAGS"]], "basecppflags": [[451, "envvar-BASECPPFLAGS"]], "bldshared": [[451, "envvar-BLDSHARED"]], "cc": [[451, "envvar-CC"], [460, "index-24"]], "ccshared": [[451, "envvar-CCSHARED"]], "cflags": [[451, "envvar-CFLAGS"], [451, "index-13"], [451, "index-14"], [451, "index-15"], [451, "index-16"], [451, "index-19"], [460, "index-25"]], "cflagsforshared": [[451, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[451, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[451, "envvar-CFLAGS_NODIST"], [451, "index-12"], [451, "index-17"], [451, "index-22"]], "compileall_opts": [[451, "envvar-COMPILEALL_OPTS"]], "configure_cflags": [[451, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[451, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[451, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[451, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[451, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "config_site": [[451, "cmdoption-arg-CONFIG_SITE"]], "cppflags": [[451, "envvar-CPPFLAGS"], [451, "index-10"], [451, "index-27"], [451, "index-9"], [460, "index-28"]], "cxx": [[451, "envvar-CXX"]], "extra_cflags": [[451, "envvar-EXTRA_CFLAGS"]], "ldflags": [[451, "envvar-LDFLAGS"], [451, "index-11"], [451, "index-18"], [451, "index-20"], [451, "index-23"], [451, "index-24"], [451, "index-25"], [451, "index-28"], [460, "index-27"]], "ldflags_nodist": [[451, "envvar-LDFLAGS_NODIST"], [451, "index-21"], [451, "index-26"]], "ldshared": [[451, "envvar-LDSHARED"]], "libs": [[451, "envvar-LIBS"]], "linkcc": [[451, "envvar-LINKCC"]], "opt": [[451, "envvar-OPT"], [451, "index-8"]], "pep 11": [[451, "index-1"], [456, "index-0"], [456, "index-38"], [465, "index-19"], [468, "index-117"], [473, "index-48"], [475, "index-5"], [478, "index-251"], [478, "index-50"], [478, "index-51"]], "profile_task": [[451, "envvar-PROFILE_TASK"], [451, "index-4"]], "purify": [[451, "envvar-PURIFY"]], "py_builtin_module_cflags": [[451, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[451, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[451, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[451, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[451, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[451, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[451, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[451, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[451, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[456, "index-8"]], "pathext": [[456, "index-4"], [456, "index-6"], [472, "index-51"], [478, "index-136"]], "pep 397": [[456, "index-19"], [471, "index-9"], [473, "index-22"]], "pep 514": [[456, "index-21"], [468, "index-93"], [478, "index-273"], [478, "index-73"]], "pylauncher_allow_install": [[456, "index-29"], [478, "index-74"]], "pylauncher_always_install": [[456, "index-30"]], "pylauncher_debug": [[456, "index-27"]], "pylauncher_dryrun": [[456, "index-28"], [456, "index-31"]], "pylauncher_no_search_path": [[456, "index-24"]], "py_python": [[456, "index-26"]], "pep 100": [[457, "index-3"]], "pep 201": [[457, "index-2"]], "pep 207": [[458, "index-4"], [458, "index-5"]], "pep 208": [[458, "index-13"]], "pep 217": [[458, "index-12"]], "pep 229": [[458, "index-8"]], "pep 230": [[458, "index-7"]], "pep 232": [[458, "index-10"]], "pep 241": [[458, "index-14"], [458, "index-15"], [458, "index-16"]], "pep 243": [[458, "index-17"]], "pep 234": [[459, "index-7"]], "pep 253": [[459, "index-0"], [459, "index-1"], [459, "index-3"], [459, "index-5"], [459, "index-6"]], "pep 261": [[459, "index-14"], [459, "index-15"]], "pep 264": [[459, "index-22"]], "rfc 2104": [[459, "index-17"]], "rfc 2487": [[459, "index-18"]], "cpp": [[460, "index-26"]], "pep 218": [[460, "index-0"], [461, "index-0"], [461, "index-13"]], "pep 277": [[460, "index-7"]], "pep 279": [[460, "index-10"]], "pep 285": [[460, "index-13"], [460, "index-14"]], "pep 293": [[460, "index-15"]], "pep 301": [[460, "index-16"]], "what's new\uff08\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff09": [[460, "index-8"], [461, "index-7"], [462, "index-20"], [463, "index-13"]], "pep 322": [[461, "index-14"], [461, "index-6"]], "pep 327": [[461, "index-9"]], "pep 331": [[461, "index-11"]], "pep 288": [[462, "index-12"]], "pep 309": [[462, "index-3"]], "pep 314": [[462, "index-4"]], "pep 325": [[462, "index-13"]], "pep 333": [[462, "index-26"], [462, "index-27"]], "pep 339": [[462, "index-30"]], "pep 341": [[462, "index-8"]], "pep 347": [[462, "index-28"]], "pep 352": [[462, "index-15"], [463, "index-25"], [465, "index-25"]], "pep 356": [[462, "index-0"]], "pep 357": [[462, "index-18"]], "appdata": [[463, "index-5"]], "pep 3000": [[463, "index-1"]], "pep 3100": [[463, "index-2"]], "pep 3110": [[463, "index-11"], [465, "index-13"], [465, "index-27"]], "pep 3127": [[463, "index-17"]], "pep 361": [[463, "index-0"]], "pep 371": [[463, "index-8"]], "rfc 2033": [[463, "index-22"]], "rfc 3207": [[463, "index-23"]], "ldcxxshared": [[464, "index-12"]], "pep 3106": [[464, "index-6"]], "pep 3137": [[464, "index-7"]], "pep 372": [[464, "index-2"], [466, "index-0"]], "pep 373": [[464, "index-0"]], "pep 389": [[464, "index-4"], [470, "index-2"]], "pep 391": [[464, "index-5"], [470, "index-3"]], "pep 466": [[464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-20"]], "pep 476": [[464, "index-25"]], "pep 477": [[464, "index-21"]], "pep 493": [[464, "index-26"]], "pythonshowalloccount": [[464, "index-15"]], "pythonshowrefcount": [[464, "index-14"]], "user_base": [[464, "index-9"]], "pep 274": [[465, "index-10"]], "pep 3102": [[465, "index-7"]], "pep 3108": [[465, "index-17"], [465, "index-20"], [465, "index-22"]], "pep 3109": [[465, "index-11"], [465, "index-26"]], "pep 3111": [[465, "index-32"]], "pep 3113": [[465, "index-15"]], "pep 3114": [[465, "index-30"]], "pep 3123": [[465, "index-35"]], "pep 3138": [[465, "index-3"]], "pep 4": [[465, "index-18"]], "pep 384": [[467, "index-119"], [470, "index-1"], [478, "index-107"]], "pep 618": [[467, "index-106"], [467, "index-83"], [478, "index-150"]], "pep 624": [[467, "index-92"], [468, "index-122"], [468, "index-86"], [478, "index-96"]], "pep 632": [[467, "index-108"], [467, "index-90"], [469, "index-31"], [469, "index-4"], [478, "index-35"]], "pep 635": [[467, "index-81"], [467, "index-96"]], "pep 652": [[467, "index-116"], [478, "index-102"]], "pythonthreaddebug": [[467, "index-114"], [468, "index-116"], [478, "index-86"]], "pep 11#tier-3": [[468, "index-118"]], "pep 484#annotating-instance-and-class-methods": [[468, "index-99"]], "pep 624#alternative-apis": [[468, "index-123"]], "pep 654": [[468, "index-113"], [468, "index-90"], [468, "index-91"], [478, "index-39"], [478, "index-78"], [478, "index-81"]], "pep 657": [[468, "index-110"], [468, "index-88"], [478, "index-58"], [478, "index-87"]], "pep 659": [[468, "index-111"], [468, "index-112"]], "pep 670": [[468, "index-119"], [468, "index-87"]], "pep 678": [[468, "index-92"], [469, "index-20"], [478, "index-21"], [478, "index-55"], [478, "index-7"]], "pep 680": [[468, "index-107"], [468, "index-83"], [478, "index-69"]], "pep 683": [[469, "index-41"], [478, "index-5"]], "pep 684": [[469, "index-42"]], "pep 697": [[469, "index-38"], [469, "index-40"], [478, "index-20"]], "pep 699": [[469, "index-27"], [478, "index-28"]], "pep 701": [[469, "index-0"], [469, "index-22"], [469, "index-24"], [469, "index-35"], [469, "index-36"], [469, "index-37"], [469, "index-46"], [469, "index-5"]], "pep 709": [[469, "index-25"], [469, "index-8"], [478, "index-10"]], "pep 385": [[470, "index-14"]], "pep 392": [[470, "index-0"]], "rfc 2818": [[470, "index-12"]], "pep 3144": [[471, "index-42"]], "pep 398": [[471, "index-0"]], "pep 409": [[471, "index-13"]], "pep 418": [[471, "index-28"]], "rfc 1870": [[471, "index-27"]], "yield from\uff08\u5728\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\u4e2d\uff09": [[471, "index-11"]], "pep 247": [[472, "index-37"]], "pep 3156": [[472, "index-25"], [472, "index-26"], [472, "index-31"], [472, "index-4"], [472, "index-8"]], "pep 424": [[472, "index-24"], [472, "index-38"]], "pep 429": [[472, "index-0"]], "pep 435": [[472, "index-28"], [472, "index-29"], [472, "index-6"]], "pep 445": [[472, "index-17"], [472, "index-43"], [472, "index-44"], [472, "index-52"]], "pep 446": [[472, "index-14"], [472, "index-2"], [472, "index-21"], [472, "index-22"]], "pep 450": [[472, "index-32"], [472, "index-33"], [472, "index-9"]], "pep 454": [[472, "index-10"], [472, "index-34"], [472, "index-35"]], "pep 456": [[472, "index-13"], [472, "index-47"]], "pep 441": [[473, "index-29"], [473, "index-30"]], "pep 465": [[473, "index-3"], [473, "index-4"], [473, "index-46"], [478, "index-303"]], "pep 471": [[473, "index-13"], [473, "index-14"], [478, "index-299"]], "pep 478": [[473, "index-0"]], "pep 486": [[473, "index-21"], [473, "index-23"], [478, "index-300"]], "rfc 6152": [[473, "index-37"]], "pep 487": [[474, "index-13"], [474, "index-14"], [474, "index-15"], [474, "index-37"], [478, "index-250"], [478, "index-260"], [478, "index-269"]], "pep 494": [[474, "index-0"]], "pep 511": [[474, "index-36"]], "pep 520": [[474, "index-23"]], "pep 628": [[474, "index-29"], [474, "index-30"], [478, "index-271"]], "pep 545": [[475, "index-24"], [475, "index-40"]], "pep 553": [[475, "index-13"], [478, "index-244"]], "pep 564": [[475, "index-17"], [475, "index-18"], [475, "index-32"], [478, "index-242"]], "pep 596": [[477, "index-0"]], "pep 616": [[477, "index-12"], [477, "index-4"], [478, "index-170"]], "enablecontrolflowguard": [[478, "index-93"]], "pep 669": [[478, "index-8"]], "pep 676": [[478, "index-71"]], "pep 687": [[478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-16"], [478, "index-17"], [478, "index-18"], [478, "index-22"], [478, "index-24"], [478, "index-25"]], "pep 689": [[478, "index-26"]], "pip_user": [[478, "index-207"]], "pythondumprefsfile": [[478, "index-85"]], "pythonregrtest_unicode_guard": [[478, "index-62"]], "rfc 3491": [[478, "index-33"]], "rfc 5894": [[478, "index-32"]], "rfc 7538": [[478, "index-83"]], "rfc 9239": [[478, "index-42"]]}})