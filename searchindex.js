Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/frame", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/perfmaps", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/enum", "howto/functional", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/isolating-extensions", "howto/logging", "howto/logging-cookbook", "howto/perf_profiling", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "install/index", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-extending", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-runner", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/importlib", "library/importlib.metadata", "library/importlib.resources", "library/importlib.resources.abc", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sys_path_init", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/tomllib", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.11", "whatsnew/3.12", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/frame.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/perfmaps.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/enum.rst", "howto/functional.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/isolating-extensions.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/perf_profiling.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "install/index.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-extending.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-runner.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/importlib.resources.rst", "library/importlib.resources.abc.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sys_path_init.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/tomllib.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.11.rst", "whatsnew/3.12.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "\u4f4d\u5143\u7d44\u4e32\u5217\u7269\u4ef6 (Byte Array Objects)", "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "\u7a0b\u5f0f\u78bc\u7269\u4ef6", "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f", "\u8907\u6578\u7269\u4ef6", "\u5177\u9ad4\u7269\u4ef6\u5c64", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\u7269\u4ef6 (File Objects)", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "Frame Objects", "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668 (Generator) \u7269\u4ef6", "\u5f15\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "\u758a\u4ee3\u5668\u5354\u8b70", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "Support for Perf Maps", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "Set Objects", "\u5207\u7247\u7269\u4ef6", "C API \u7a69\u5b9a\u6027", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6", "Type Objects", "\u578b\u5225\u63d0\u793a\u7269\u4ef6", "\u578b\u5225\u7269\u4ef6", "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "<span class=\"section-number\">4. </span>\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "Annotations Best Practices", "Argparse \u6559\u5b78", "Argument Clinic How-To", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u4fee\u98fe\u5668 HowTo \u6307\u5357", "Enum HOWTO", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "Instrumenting CPython with DTrace and SystemTap", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "Isolating Extension Modules", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "Python support for the Linux <code class=\"docutils literal notranslate\"><span class=\"pre\">perf</span></code> profiler", "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357", "\u5982\u4f55\u6392\u5e8f", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- Top-level code environment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- Abstract Syntax Trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Extending", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "Runners", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- Debugger framework", "Binary Data Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- General calendar-related functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- Mathematical functions for complex numbers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- Configuration file parser", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- Register <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> support functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Interfaces to Unix &quot;databases&quot;", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: Representing character sets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- Bootstrapping the <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> installer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- Support for enumerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP \u5354\u5b9a\u7528\u6236\u7aef", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- Support for <strong class=\"program\">gzip</strong> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- HyperText Markup Language support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> --- HTTP servers", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code> \u7684\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code> -- Accessing package metadata", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code> -- Package resource reading, opening and access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code> -- Abstract base classes for resources", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- Inspect live objects", "Internet Protocols and Support", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- Functions creating iterators for efficient looping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON encoder and decoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> --- Internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Logging facility for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- Manipulate mailboxes in various formats", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "\u591a\u5a92\u9ad4\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u5f15\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- Shared memory for direct access across processes", "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc \u6a94\u6848\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- Object-oriented filesystem paths", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python object serialization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- Tools for pickle developers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> --- Compile Python source files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "Security Considerations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> --- High-level file operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- TLS/SSL wrapper for socket objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- Common string operations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- Subprocess management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- Access to the compiler's symbol tables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f", "The initialization of the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> module search path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Regression tests package for Python", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593", "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- Color choosing dialog", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter font wrapper", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter message prompts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tomllib</span></code> --- \u5256\u6790 TOML \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- Support for type hints", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- mock object library", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- getting started", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- UUID objects according to <strong>RFC 4122</strong>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- Read and write WAV files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI Utilities and Reference Implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> --- Manage executable Python zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- \u76f8\u5bb9\u65bc <strong class=\"program\">gzip</strong> \u7684\u58d3\u7e2e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA \u6642\u5340\u652f\u63f4", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>Data model", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>\u547d\u4ee4\u5217\u8207\u74b0\u5883", "<span class=\"section-number\">3. </span>Configure Python", "<span class=\"section-number\">6. </span>\u7de8\u8f2f\u5668\u8207 IDE", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 67, 79, 83, 100, 470, 479], "restructuredtext": [0, 67, 79, 190, 479], "bug": [0, 58, 62, 67, 71, 72, 77, 78, 79, 83, 88, 92, 94, 100, 102, 106, 123, 149, 174, 205, 222, 239, 240, 268, 281, 290, 293, 296, 305, 337, 338, 345, 358, 361, 364, 382, 385, 403, 440, 442, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "fred": [0, 100, 311, 365, 431, 458, 459, 460, 461, 463, 464, 475], "drake": [0, 458, 459, 460, 461, 463, 464], "jr": [0, 83, 459, 460, 461, 463, 464], "docutil": [0, 464, 479], "fredrik": [0, 84, 94, 422, 458, 459, 460, 462, 463, 465, 467, 471], "lundh": [0, 84, 94, 422, 458, 459, 460, 462, 463, 465, 471], "altern": [0, 18, 23, 30, 32, 44, 62, 67, 72, 78, 83, 84, 89, 92, 94, 103, 106, 107, 110, 118, 120, 124, 130, 135, 136, 137, 141, 152, 155, 158, 164, 170, 172, 173, 174, 175, 178, 179, 183, 190, 193, 196, 197, 202, 207, 208, 211, 212, 215, 218, 222, 225, 239, 248, 251, 258, 264, 265, 266, 269, 272, 280, 289, 290, 292, 294, 296, 311, 321, 329, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 354, 355, 361, 365, 371, 372, 377, 380, 382, 384, 385, 386, 390, 395, 396, 398, 401, 403, 421, 422, 426, 427, 428, 429, 440, 451, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 473, 474, 475, 476, 477, 478, 479], "refer": [0, 3, 5, 7, 9, 11, 12, 13, 17, 19, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 41, 44, 48, 49, 51, 53, 54, 57, 58, 59, 63, 65, 66, 67, 70, 71, 73, 75, 76, 77, 83, 86, 92, 97, 98, 99, 100, 103, 107, 108, 112, 113, 116, 118, 120, 124, 127, 131, 134, 135, 137, 138, 139, 140, 142, 152, 155, 161, 164, 167, 174, 179, 180, 182, 188, 202, 207, 208, 209, 210, 212, 219, 222, 223, 224, 225, 227, 230, 232, 235, 236, 237, 240, 242, 244, 247, 248, 250, 251, 252, 253, 255, 256, 259, 264, 265, 266, 268, 270, 275, 281, 285, 290, 294, 295, 296, 299, 304, 310, 311, 316, 318, 321, 326, 329, 330, 331, 334, 338, 341, 342, 344, 347, 349, 352, 357, 358, 361, 362, 364, 371, 372, 373, 377, 381, 382, 384, 385, 386, 390, 391, 396, 401, 405, 406, 407, 411, 413, 417, 418, 421, 423, 424, 425, 429, 430, 431, 432, 436, 437, 441, 446, 451, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "misc": [0, 34, 79, 220, 341, 372, 452, 458, 461, 462, 463, 464, 465, 466, 469, 471, 473, 479, 480], "ack": [0, 67, 116, 175, 464], "tracker": [1, 67, 280, 358, 463, 465, 479], "https": [1, 67, 70, 74, 77, 78, 79, 80, 83, 84, 94, 99, 100, 102, 106, 107, 108, 124, 134, 157, 159, 166, 180, 223, 232, 236, 237, 239, 240, 245, 248, 258, 266, 304, 310, 311, 315, 316, 323, 325, 337, 338, 349, 375, 383, 384, 390, 391, 395, 399, 403, 407, 409, 415, 420, 422, 424, 431, 436, 440, 441, 447, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 476, 477, 479], "github": [1, 69, 74, 79, 109, 245, 304, 384, 422, 470, 475, 476, 479], "com": [1, 67, 68, 72, 74, 79, 83, 84, 92, 99, 100, 102, 103, 107, 134, 159, 163, 173, 180, 181, 197, 240, 245, 258, 285, 294, 304, 315, 316, 323, 337, 338, 341, 384, 391, 392, 394, 401, 409, 415, 449, 450, 455, 457, 460, 462, 463, 464, 465, 470, 471, 472, 473, 474, 477, 479], "doc": [1, 23, 57, 59, 67, 74, 75, 78, 79, 92, 102, 103, 124, 173, 191, 202, 220, 222, 239, 244, 248, 252, 259, 282, 290, 293, 310, 337, 338, 349, 358, 363, 381, 382, 390, 399, 401, 408, 448, 450, 452, 456, 457, 458, 460, 461, 463, 464, 465, 470, 471, 475, 476, 477, 479], "zh": 1, "tw": [1, 155], "issu": [1, 7, 22, 31, 32, 33, 60, 65, 67, 75, 79, 92, 93, 99, 100, 102, 106, 112, 117, 118, 124, 133, 153, 155, 173, 174, 178, 182, 183, 185, 200, 210, 218, 222, 232, 239, 244, 245, 255, 259, 263, 264, 268, 269, 280, 281, 289, 290, 293, 296, 308, 330, 332, 334, 338, 341, 345, 358, 380, 382, 384, 385, 386, 396, 398, 405, 408, 409, 417, 422, 451, 454, 458, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "discours": [1, 479], "org": [1, 56, 67, 69, 74, 77, 78, 83, 86, 94, 100, 104, 106, 107, 108, 109, 124, 157, 163, 164, 166, 181, 220, 223, 232, 236, 237, 239, 240, 244, 245, 280, 285, 300, 304, 310, 311, 316, 325, 332, 334, 337, 338, 349, 351, 383, 390, 391, 392, 394, 399, 407, 409, 411, 415, 422, 424, 431, 436, 440, 441, 447, 449, 450, 451, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479], "list": [1, 2, 5, 7, 16, 18, 23, 30, 32, 33, 34, 39, 41, 48, 51, 53, 54, 56, 57, 58, 59, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 83, 85, 86, 88, 89, 91, 92, 93, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 115, 117, 118, 119, 120, 124, 126, 131, 134, 137, 138, 142, 148, 149, 153, 155, 157, 158, 160, 161, 164, 166, 167, 168, 170, 172, 173, 174, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 193, 194, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 213, 215, 217, 219, 220, 222, 223, 224, 225, 227, 228, 230, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 269, 271, 273, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 302, 304, 305, 307, 308, 309, 311, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 351, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 390, 391, 392, 396, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 417, 418, 419, 422, 424, 425, 427, 428, 429, 431, 432, 436, 439, 441, 442, 444, 446, 447, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "cpython": [1, 4, 10, 13, 32, 34, 53, 56, 58, 62, 67, 70, 72, 74, 75, 79, 84, 86, 88, 89, 95, 98, 140, 155, 158, 183, 185, 188, 207, 210, 211, 222, 232, 234, 247, 252, 254, 272, 280, 290, 293, 300, 308, 313, 317, 321, 329, 340, 341, 345, 349, 358, 361, 375, 381, 398, 403, 421, 423, 424, 425, 426, 427, 430, 432, 446, 451, 452, 456, 457, 459, 460, 461, 463, 464, 465, 471, 472, 474, 479, 480], "sign": [1, 18, 48, 63, 67, 74, 84, 103, 119, 139, 152, 155, 164, 173, 174, 180, 183, 193, 198, 206, 218, 222, 225, 232, 263, 265, 266, 269, 272, 280, 281, 289, 290, 292, 294, 296, 316, 333, 341, 342, 344, 361, 362, 390, 409, 424, 426, 431, 457, 459, 460, 462, 463, 464, 465, 470, 471, 473, 475, 477, 479], "up": [1, 7, 9, 23, 32, 34, 41, 44, 60, 62, 63, 67, 72, 74, 75, 76, 83, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 106, 118, 120, 124, 130, 136, 137, 138, 148, 149, 155, 160, 163, 164, 174, 176, 180, 183, 187, 188, 190, 191, 194, 197, 205, 206, 208, 210, 218, 219, 222, 223, 227, 232, 237, 239, 240, 242, 244, 249, 252, 255, 258, 262, 263, 264, 265, 266, 267, 272, 273, 275, 277, 279, 280, 281, 289, 290, 293, 294, 305, 306, 308, 312, 316, 317, 320, 325, 328, 330, 331, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 352, 354, 355, 358, 360, 361, 365, 370, 371, 372, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 398, 403, 406, 409, 412, 413, 417, 421, 423, 424, 425, 426, 428, 430, 431, 432, 437, 446, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "new": [1, 3, 5, 7, 8, 9, 13, 17, 22, 23, 26, 27, 28, 30, 32, 34, 36, 37, 38, 41, 42, 44, 48, 49, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 126, 127, 130, 131, 133, 136, 137, 138, 141, 142, 147, 149, 151, 153, 154, 155, 157, 158, 164, 166, 167, 171, 172, 173, 174, 175, 178, 180, 181, 183, 185, 188, 190, 191, 192, 193, 195, 197, 198, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 218, 222, 223, 231, 232, 233, 234, 239, 244, 245, 247, 252, 254, 255, 256, 258, 263, 264, 265, 266, 267, 268, 269, 273, 275, 277, 278, 280, 281, 285, 290, 292, 293, 294, 296, 297, 298, 301, 304, 305, 306, 309, 311, 312, 316, 317, 319, 322, 325, 326, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 354, 356, 357, 358, 361, 362, 365, 368, 371, 372, 376, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 399, 401, 403, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 428, 430, 432, 436, 437, 438, 445, 447, 448, 451, 452, 457, 469, 479, 480], "titl": [1, 63, 67, 83, 92, 94, 103, 106, 107, 118, 149, 157, 181, 186, 219, 237, 244, 259, 264, 278, 280, 289, 334, 337, 341, 342, 365, 369, 380, 382, 391, 407, 408, 409, 416, 422, 458, 460, 462, 469, 471, 477, 479], "comment": [1, 9, 63, 67, 72, 89, 94, 100, 103, 106, 110, 117, 120, 164, 173, 190, 200, 219, 237, 240, 241, 244, 252, 253, 261, 270, 290, 296, 297, 310, 311, 316, 328, 345, 358, 373, 374, 390, 408, 409, 411, 418, 419, 427, 432, 445, 458, 460, 461, 463, 465, 466, 468, 470, 471, 477, 479], "mozilla": [1, 107, 240, 338, 391, 399, 462, 479], "patch": [1, 56, 67, 79, 83, 88, 91, 96, 103, 118, 174, 184, 238, 239, 285, 341, 358, 382, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 474, 475, 477, 478, 479], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 74, 75, 76, 86, 88, 93, 96, 98, 99, 100, 103, 104, 105, 107, 111, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 126, 130, 133, 134, 137, 138, 142, 143, 146, 147, 149, 150, 151, 152, 154, 157, 163, 164, 165, 166, 168, 170, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 187, 189, 192, 193, 195, 196, 199, 201, 202, 204, 205, 206, 207, 208, 210, 212, 216, 218, 219, 220, 222, 223, 224, 227, 228, 231, 232, 233, 234, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 262, 265, 266, 268, 270, 272, 275, 276, 277, 278, 280, 281, 285, 286, 288, 289, 291, 292, 293, 295, 297, 299, 300, 302, 303, 304, 310, 311, 315, 316, 317, 318, 320, 324, 325, 328, 329, 331, 332, 334, 335, 338, 340, 341, 342, 344, 345, 348, 349, 352, 353, 356, 359, 361, 362, 364, 372, 375, 377, 378, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 398, 399, 401, 403, 405, 406, 407, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 435, 437, 438, 439, 440, 442, 443, 449, 450, 451, 453], "except": [2, 5, 7, 9, 11, 13, 14, 17, 18, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 44, 46, 48, 50, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 73, 74, 75, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 102, 103, 106, 108, 110, 112, 113, 115, 116, 120, 123, 124, 125, 127, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 163, 164, 167, 168, 170, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 187, 188, 191, 192, 193, 197, 198, 202, 203, 204, 205, 207, 209, 211, 212, 215, 220, 222, 223, 225, 226, 229, 231, 232, 239, 240, 241, 242, 244, 245, 247, 251, 252, 253, 255, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 275, 276, 278, 280, 282, 283, 284, 285, 290, 292, 293, 294, 296, 299, 301, 302, 305, 308, 311, 312, 313, 317, 319, 320, 322, 325, 326, 327, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 371, 374, 375, 377, 378, 381, 382, 384, 385, 389, 390, 391, 393, 395, 396, 397, 398, 399, 401, 403, 404, 406, 407, 409, 410, 411, 412, 415, 416, 418, 419, 420, 422, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 437, 441, 446, 448, 451, 452, 457, 458, 459, 460, 461, 462, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "pylist_new": [2, 34, 37, 56], "null": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 74, 75, 78, 92, 98, 100, 102, 106, 108, 120, 172, 173, 188, 222, 224, 240, 259, 269, 278, 281, 284, 290, 296, 315, 316, 334, 337, 338, 344, 345, 401, 404, 406, 407, 418, 427, 431, 432, 458, 462, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479], "protocol": [2, 8, 9, 23, 28, 31, 54, 57, 60, 62, 65, 67, 73, 78, 83, 86, 89, 93, 94, 97, 100, 104, 106, 107, 119, 121, 124, 128, 135, 139, 140, 143, 144, 149, 155, 158, 166, 173, 180, 181, 184, 191, 200, 206, 209, 214, 222, 232, 238, 240, 242, 247, 248, 251, 252, 255, 257, 259, 264, 265, 266, 268, 280, 285, 290, 292, 296, 297, 325, 326, 327, 334, 335, 337, 341, 343, 344, 354, 355, 358, 361, 365, 382, 385, 386, 391, 401, 403, 412, 415, 416, 419, 423, 424, 426, 431, 452, 458, 460, 461, 463, 464, 465, 467, 468, 469, 471, 473, 476, 478, 479, 480], "call": [2, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 41, 44, 46, 48, 50, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 73, 74, 75, 76, 78, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 147, 149, 151, 153, 154, 155, 157, 158, 160, 161, 164, 166, 167, 170, 172, 174, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 221, 222, 223, 224, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 279, 280, 281, 285, 288, 290, 292, 293, 294, 296, 299, 302, 304, 305, 306, 311, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 384, 387, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 421, 423, 424, 425, 427, 428, 431, 432, 436, 437, 438, 439, 442, 445, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479], "tp_call": [2, 23, 62, 67, 74, 470, 479], "vectorcal": [2, 27, 57, 62, 67, 468, 469, 470, 478, 479], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 34, 37, 38, 44, 45, 47, 50, 54, 57, 58, 60, 62, 63, 64, 67, 71, 73, 74, 75, 78, 83, 86, 87, 90, 91, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 118, 123, 125, 126, 127, 130, 131, 134, 135, 137, 138, 140, 156, 158, 161, 166, 167, 172, 173, 174, 182, 184, 185, 188, 189, 191, 192, 194, 195, 198, 199, 200, 202, 203, 205, 206, 208, 214, 220, 225, 232, 233, 243, 247, 251, 252, 254, 255, 256, 258, 259, 264, 265, 266, 268, 270, 277, 278, 279, 280, 282, 290, 291, 292, 295, 299, 301, 315, 316, 317, 329, 334, 338, 339, 342, 349, 351, 353, 356, 358, 361, 365, 375, 382, 384, 385, 386, 390, 396, 401, 402, 403, 405, 407, 410, 411, 415, 416, 425, 426, 428, 429, 431, 432, 436, 437, 441, 447, 457, 458, 459, 460, 480], "number": [2, 5, 7, 9, 13, 18, 22, 23, 25, 26, 28, 30, 31, 32, 38, 39, 40, 41, 49, 51, 53, 54, 57, 58, 59, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 113, 114, 115, 116, 118, 120, 124, 130, 131, 135, 136, 137, 139, 142, 144, 147, 148, 149, 150, 153, 155, 157, 160, 163, 164, 167, 170, 172, 173, 174, 180, 183, 185, 187, 188, 190, 192, 193, 196, 199, 200, 202, 205, 208, 209, 210, 211, 212, 213, 215, 222, 223, 227, 231, 232, 237, 239, 241, 242, 244, 245, 247, 248, 251, 252, 254, 255, 256, 258, 261, 263, 264, 266, 267, 268, 269, 271, 273, 275, 278, 280, 281, 282, 285, 287, 289, 292, 293, 294, 296, 297, 301, 302, 304, 305, 309, 310, 311, 312, 315, 316, 317, 318, 319, 321, 322, 323, 325, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 349, 351, 354, 355, 358, 360, 361, 362, 363, 365, 368, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 390, 391, 394, 396, 397, 398, 399, 401, 402, 403, 404, 406, 409, 410, 412, 413, 415, 418, 421, 423, 424, 426, 427, 428, 430, 431, 432, 437, 438, 439, 440, 441, 446, 447, 448, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "sequenc": [2, 5, 7, 16, 22, 31, 32, 34, 36, 38, 41, 48, 49, 55, 58, 63, 65, 67, 74, 78, 83, 86, 89, 91, 93, 94, 98, 100, 103, 106, 110, 118, 120, 124, 137, 141, 143, 154, 155, 156, 158, 160, 161, 172, 173, 174, 179, 184, 186, 187, 188, 190, 193, 199, 202, 203, 206, 209, 210, 215, 222, 227, 233, 235, 240, 247, 251, 252, 255, 256, 258, 259, 263, 265, 267, 268, 272, 273, 278, 280, 281, 289, 290, 293, 296, 297, 298, 299, 304, 309, 311, 315, 316, 318, 322, 323, 329, 334, 337, 338, 340, 342, 347, 354, 355, 358, 359, 362, 363, 365, 372, 374, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 394, 396, 398, 401, 406, 409, 410, 415, 421, 424, 426, 430, 431, 432, 436, 437, 441, 445, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "map": [2, 16, 22, 31, 32, 33, 41, 48, 49, 58, 64, 65, 67, 74, 77, 78, 83, 84, 86, 89, 92, 93, 94, 100, 101, 106, 107, 110, 114, 120, 141, 153, 155, 157, 158, 161, 163, 166, 167, 172, 174, 178, 179, 180, 181, 183, 184, 187, 188, 190, 192, 193, 200, 202, 208, 209, 210, 213, 214, 222, 223, 227, 233, 239, 242, 244, 251, 252, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 276, 277, 278, 280, 282, 284, 285, 288, 289, 290, 292, 293, 295, 296, 305, 309, 311, 315, 316, 318, 319, 326, 334, 337, 338, 340, 342, 343, 344, 345, 347, 349, 358, 361, 362, 363, 364, 372, 373, 380, 381, 382, 383, 385, 390, 391, 398, 403, 407, 409, 411, 412, 424, 426, 427, 428, 432, 436, 437, 438, 440, 446, 448, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479], "buffer": [2, 8, 9, 18, 24, 31, 32, 33, 40, 41, 42, 49, 63, 64, 65, 67, 74, 86, 89, 91, 99, 104, 110, 116, 118, 119, 124, 125, 128, 134, 135, 140, 144, 147, 149, 154, 155, 158, 173, 174, 179, 184, 185, 209, 210, 211, 212, 222, 231, 232, 239, 242, 266, 267, 275, 279, 280, 281, 290, 292, 293, 295, 311, 312, 319, 325, 328, 329, 330, 334, 338, 341, 344, 345, 349, 354, 355, 356, 358, 359, 361, 382, 384, 391, 403, 404, 409, 410, 418, 420, 451, 452, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 475, 476, 478, 479, 480], "structur": [2, 3, 5, 13, 17, 22, 26, 30, 31, 32, 33, 34, 41, 42, 44, 46, 49, 54, 57, 58, 60, 65, 67, 72, 74, 75, 78, 84, 89, 91, 92, 94, 98, 99, 103, 108, 116, 120, 126, 133, 137, 142, 151, 155, 174, 184, 191, 193, 198, 200, 201, 202, 203, 204, 209, 210, 212, 214, 219, 223, 227, 230, 242, 244, 245, 248, 251, 252, 253, 255, 258, 259, 268, 273, 278, 280, 290, 293, 296, 302, 304, 308, 316, 329, 330, 334, 336, 338, 341, 343, 344, 345, 350, 358, 362, 365, 371, 380, 381, 384, 385, 398, 406, 409, 410, 415, 418, 419, 423, 424, 428, 429, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479], "request": [2, 5, 23, 30, 32, 41, 44, 48, 60, 62, 67, 75, 83, 84, 87, 93, 94, 97, 98, 100, 106, 107, 118, 131, 137, 140, 149, 155, 157, 163, 166, 173, 174, 183, 194, 205, 207, 209, 210, 212, 220, 222, 223, 227, 231, 238, 239, 240, 241, 242, 244, 245, 247, 251, 252, 253, 255, 268, 280, 281, 285, 289, 290, 292, 296, 302, 304, 311, 313, 319, 325, 328, 330, 331, 338, 341, 345, 349, 356, 358, 362, 372, 380, 385, 388, 390, 392, 395, 401, 403, 406, 412, 413, 415, 416, 419, 424, 428, 432, 437, 447, 449, 457, 458, 459, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 476, 477, 478, 479], "type": [2, 3, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 51, 52, 53, 54, 55, 58, 59, 61, 66, 67, 72, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 91, 92, 97, 99, 100, 107, 108, 110, 113, 115, 116, 117, 119, 121, 124, 137, 140, 142, 143, 149, 150, 151, 153, 155, 157, 158, 164, 165, 166, 169, 170, 172, 174, 175, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 218, 220, 222, 223, 224, 227, 232, 233, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 255, 258, 259, 261, 263, 264, 265, 266, 267, 269, 270, 272, 275, 276, 278, 280, 281, 282, 287, 290, 293, 294, 295, 301, 304, 305, 310, 311, 312, 313, 316, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 338, 339, 342, 344, 345, 346, 347, 348, 349, 354, 358, 359, 361, 362, 364, 372, 373, 374, 377, 378, 380, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 400, 402, 404, 405, 407, 408, 409, 411, 412, 415, 416, 418, 421, 422, 425, 426, 427, 428, 429, 431, 435, 436, 437, 438, 439, 444, 445, 446, 447, 451, 452, 457, 458, 459, 465, 466, 467, 471, 479, 480], "independ": [2, 18, 22, 25, 32, 33, 44, 67, 72, 74, 83, 91, 93, 94, 98, 100, 108, 157, 180, 183, 190, 198, 207, 222, 223, 243, 258, 263, 264, 268, 315, 340, 341, 349, 350, 362, 363, 365, 372, 374, 384, 395, 406, 409, 418, 426, 452, 458, 465, 472, 478, 479, 480], "field": [2, 3, 5, 13, 28, 30, 32, 33, 41, 53, 54, 57, 59, 60, 62, 63, 65, 67, 72, 74, 75, 83, 86, 89, 92, 93, 99, 108, 116, 120, 149, 151, 155, 157, 172, 174, 180, 183, 188, 193, 196, 199, 200, 202, 205, 206, 210, 230, 231, 233, 239, 244, 253, 256, 258, 264, 265, 269, 278, 290, 311, 312, 313, 319, 322, 332, 334, 336, 337, 338, 339, 341, 342, 344, 345, 349, 352, 354, 357, 362, 363, 365, 372, 374, 377, 381, 390, 394, 396, 401, 403, 407, 409, 418, 431, 448, 451, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "readon": [2, 57, 67, 245, 253, 329, 337, 341, 372, 406, 407, 464, 470, 479], "format": [2, 5, 9, 10, 18, 23, 25, 30, 34, 40, 47, 48, 58, 62, 63, 67, 72, 74, 78, 83, 84, 86, 89, 91, 92, 93, 102, 103, 106, 107, 108, 110, 115, 116, 117, 118, 120, 131, 139, 140, 141, 142, 143, 144, 148, 149, 150, 151, 155, 161, 164, 166, 170, 173, 179, 181, 182, 183, 187, 188, 189, 190, 191, 193, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 214, 218, 222, 225, 227, 231, 232, 240, 242, 245, 246, 247, 251, 252, 256, 259, 262, 263, 264, 266, 267, 269, 273, 278, 281, 282, 289, 290, 292, 293, 294, 295, 297, 299, 301, 304, 305, 311, 312, 316, 317, 318, 327, 328, 329, 333, 334, 335, 337, 338, 345, 346, 349, 355, 358, 359, 362, 364, 365, 368, 371, 372, 374, 377, 378, 380, 381, 384, 390, 391, 393, 394, 396, 397, 401, 403, 409, 413, 418, 419, 423, 424, 426, 427, 430, 438, 440, 441, 445, 446, 447, 451, 457, 458, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 476, 477, 479, 480], "shape": [2, 62, 67, 93, 219, 222, 281, 315, 341, 382, 464, 468, 469, 472, 479], "stride": [2, 62, 67, 252, 312, 341, 424, 426, 461, 472, 479], "suboffset": [2, 62, 67, 341, 472], "contigu": [2, 5, 42, 67, 86, 187, 245, 258, 268, 296, 341, 411, 464, 472, 479], "compound": [2, 34, 67, 219, 244, 342, 360, 365, 371, 372, 427, 429, 431, 464, 472, 479], "complex": [2, 5, 13, 15, 34, 67, 71, 72, 74, 83, 84, 86, 100, 103, 104, 105, 108, 118, 120, 124, 126, 130, 158, 164, 167, 172, 181, 183, 184, 187, 191, 197, 200, 222, 223, 251, 258, 259, 265, 272, 286, 287, 289, 296, 304, 316, 330, 331, 342, 345, 349, 354, 380, 382, 385, 415, 423, 424, 426, 431, 432, 436, 445, 446, 451, 460, 462, 463, 464, 465, 467, 468, 469, 471, 473, 475, 476, 477, 479], "array": [2, 5, 9, 10, 16, 30, 38, 44, 53, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 86, 89, 92, 98, 100, 115, 116, 140, 148, 155, 161, 175, 179, 212, 251, 276, 280, 281, 282, 284, 290, 296, 306, 334, 341, 344, 357, 375, 377, 381, 382, 398, 404, 415, 423, 424, 438, 448, 461, 462, 463, 464, 465, 466, 471, 474, 476, 478, 479], "numpi": [2, 67, 84, 119, 222, 281, 296, 340, 440, 446, 449, 457, 463, 464, 469, 471, 472, 474, 479], "style": [2, 5, 9, 23, 63, 67, 72, 75, 77, 86, 93, 94, 99, 103, 112, 116, 118, 120, 131, 141, 142, 144, 148, 157, 164, 187, 193, 202, 204, 217, 218, 221, 222, 223, 227, 237, 239, 242, 251, 258, 264, 265, 268, 272, 273, 281, 289, 290, 293, 294, 296, 305, 310, 316, 327, 329, 330, 334, 337, 349, 351, 358, 361, 364, 365, 368, 369, 371, 377, 384, 387, 403, 416, 426, 427, 430, 431, 441, 442, 445, 448, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 470, 471, 472, 473, 476, 477, 479, 480], "and": [2, 3, 8, 9, 10, 11, 13, 16, 17, 18, 22, 24, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 73, 77, 83, 86, 88, 90, 95, 97, 99, 101, 102, 104, 110, 111, 112, 113, 115, 116, 117, 121, 122, 127, 128, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 145, 147, 148, 150, 151, 153, 154, 156, 157, 160, 161, 163, 164, 167, 169, 170, 171, 174, 175, 176, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 233, 235, 239, 241, 242, 243, 245, 246, 248, 250, 251, 254, 255, 258, 261, 262, 264, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 287, 288, 292, 294, 295, 297, 298, 299, 300, 302, 304, 306, 308, 309, 311, 312, 315, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 331, 332, 333, 335, 336, 339, 340, 342, 343, 345, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 383, 387, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 408, 410, 411, 412, 413, 416, 417, 418, 419, 422, 423, 427, 429, 430, 432, 434, 437, 438, 439, 440, 442, 445, 446, 447, 451, 453, 454, 468, 469, 480], "pil": [2, 67, 84, 341], "relat": [2, 32, 41, 44, 62, 67, 78, 83, 84, 89, 92, 94, 99, 100, 103, 105, 106, 108, 110, 111, 112, 120, 124, 131, 137, 143, 151, 152, 155, 164, 166, 174, 178, 179, 180, 187, 188, 190, 191, 193, 197, 202, 204, 205, 206, 207, 210, 212, 214, 222, 225, 232, 238, 242, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 266, 267, 268, 272, 275, 277, 278, 280, 287, 290, 293, 295, 296, 297, 299, 305, 311, 312, 316, 317, 321, 322, 328, 329, 330, 334, 337, 338, 340, 341, 342, 345, 349, 350, 356, 358, 362, 365, 371, 372, 376, 380, 381, 382, 384, 385, 390, 395, 396, 398, 401, 403, 408, 409, 411, 417, 418, 421, 424, 426, 427, 429, 431, 432, 446, 451, 457, 458, 459, 461, 462, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "function": [2, 5, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 86, 87, 88, 91, 96, 97, 99, 100, 101, 102, 106, 107, 108, 110, 111, 112, 113, 115, 116, 122, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 153, 154, 155, 156, 158, 161, 163, 164, 167, 170, 172, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 221, 222, 225, 227, 231, 232, 233, 235, 239, 240, 242, 244, 245, 246, 247, 249, 251, 253, 254, 255, 259, 261, 262, 263, 266, 267, 269, 273, 275, 277, 278, 280, 284, 287, 289, 290, 292, 293, 294, 295, 297, 299, 301, 304, 305, 306, 308, 309, 310, 311, 312, 317, 318, 319, 321, 322, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 373, 374, 376, 377, 378, 382, 383, 385, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 421, 424, 425, 427, 428, 431, 432, 435, 436, 438, 440, 441, 446, 447, 451, 452, 457, 460, 461, 465, 467, 468, 469, 470, 471, 473, 477, 478, 479, 480], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 89, 96, 98, 173, 316, 358, 460, 463, 464, 468, 469, 476, 477, 479], "_pyobject_new": 3, "pytypeobject": [3, 6, 8, 9, 12, 13, 15, 17, 19, 21, 22, 25, 26, 27, 28, 29, 34, 36, 37, 38, 43, 44, 45, 48, 49, 54, 55, 56, 57, 59, 60, 61, 63, 67, 74, 75, 89, 98, 459, 469, 470, 474, 477, 478, 479], "pyvarobject": [3, 28, 49, 56, 57, 67, 358, 469], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 13, 18, 22, 23, 28, 33, 34, 37, 38, 39, 40, 42, 44, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 72, 74, 89, 98, 173, 349, 424, 463, 464, 469, 477, 479], "size": [3, 5, 7, 8, 9, 18, 28, 30, 33, 34, 38, 40, 41, 42, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 67, 72, 74, 75, 91, 92, 93, 96, 98, 99, 100, 106, 113, 115, 116, 117, 118, 131, 135, 139, 140, 142, 143, 149, 151, 155, 158, 160, 161, 170, 171, 172, 174, 179, 182, 183, 184, 187, 188, 212, 213, 216, 220, 222, 223, 239, 242, 244, 245, 247, 248, 253, 255, 258, 259, 263, 266, 267, 275, 280, 281, 292, 296, 302, 305, 308, 311, 317, 318, 319, 332, 334, 335, 337, 339, 340, 341, 342, 345, 346, 349, 354, 356, 357, 358, 360, 361, 365, 368, 371, 372, 377, 380, 382, 384, 391, 404, 406, 417, 418, 424, 428, 442, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pyobject_init": [3, 56, 477, 478, 479], "op": [3, 10, 15, 27, 28, 32, 36, 38, 48, 62, 63, 67, 74, 84, 120, 136, 174, 188, 227, 261, 266, 280, 290, 316, 334, 337, 349, 361, 373, 374, 403, 461, 464, 468, 469, 470, 476, 479], "part": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 74, 84, 89, 91, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 120, 126, 141, 149, 152, 154, 155, 156, 158, 164, 166, 173, 174, 180, 183, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 216, 222, 227, 232, 242, 244, 245, 247, 248, 255, 256, 263, 264, 265, 266, 267, 272, 273, 278, 279, 280, 290, 296, 299, 304, 305, 311, 316, 320, 328, 331, 334, 335, 337, 338, 341, 342, 343, 349, 358, 361, 362, 365, 371, 377, 380, 381, 382, 384, 385, 386, 390, 394, 395, 398, 399, 406, 407, 409, 415, 422, 423, 424, 425, 426, 428, 431, 432, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "ofthe": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 21, 22, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 70, 71, 73, 74, 76, 78, 85, 86, 90, 92, 93, 95, 97, 104, 105, 107, 110, 111, 113, 115, 116, 117, 120, 121, 122, 123, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 292, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 347, 349, 351, 352, 354, 355, 356, 357, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 383, 384, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 413, 415, 416, 418, 419, 422, 425, 427, 429, 430, 431, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 454, 458, 459, 462, 466, 467, 468, 469, 479, 480], "stabl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 105, 207, 222, 233, 249, 273, 289, 341, 349, 421, 461, 462, 465, 473, 474, 475, 477, 478, 479, 480], "abi": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 96, 108, 349, 452, 456, 465, 469, 470, 473, 474, 476, 478, 479, 480], "pyobject_initvar": [3, 56, 479], "pyobject_new": [3, 28, 41, 62, 461, 477, 478, 479], "typeobj": [3, 28, 384], "alloc": [3, 5, 7, 16, 23, 28, 30, 31, 33, 44, 48, 55, 57, 58, 62, 63, 65, 67, 71, 72, 73, 75, 84, 92, 98, 113, 131, 166, 173, 182, 185, 211, 251, 255, 256, 280, 281, 290, 296, 311, 319, 334, 349, 361, 372, 401, 412, 451, 452, 458, 459, 460, 463, 465, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "object": [3, 5, 6, 7, 11, 13, 14, 16, 18, 22, 25, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 45, 46, 51, 52, 53, 58, 65, 66, 67, 71, 72, 73, 75, 76, 77, 79, 86, 89, 91, 94, 96, 101, 102, 103, 105, 106, 107, 108, 113, 114, 115, 116, 117, 119, 120, 123, 127, 131, 134, 135, 136, 139, 140, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 166, 167, 168, 169, 170, 171, 173, 177, 178, 179, 181, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 230, 231, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 261, 266, 267, 268, 270, 271, 273, 275, 279, 281, 282, 285, 287, 288, 289, 291, 294, 295, 297, 299, 301, 302, 304, 305, 307, 310, 311, 312, 319, 321, 326, 328, 329, 330, 332, 333, 334, 336, 342, 344, 346, 347, 348, 349, 351, 354, 356, 357, 358, 359, 360, 362, 363, 365, 367, 368, 370, 374, 376, 377, 378, 381, 383, 384, 389, 390, 393, 395, 396, 397, 400, 402, 403, 407, 408, 410, 411, 413, 416, 417, 419, 420, 421, 422, 423, 425, 426, 428, 429, 432, 436, 437, 438, 442, 445, 446, 448, 451, 452, 455, 457, 458, 459, 460, 463, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480], "usenot": [3, 5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 79, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 121, 122, 123, 124, 126, 127, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 225, 226, 227, 230, 231, 232, 233, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 367, 369, 371, 372, 374, 376, 377, 378, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "defin": [3, 5, 7, 11, 23, 25, 28, 32, 33, 34, 41, 42, 44, 49, 56, 58, 60, 62, 63, 67, 70, 71, 72, 73, 76, 78, 83, 87, 91, 92, 93, 94, 99, 100, 102, 103, 105, 106, 107, 108, 112, 113, 116, 118, 120, 123, 124, 130, 131, 138, 139, 141, 142, 144, 148, 149, 151, 152, 153, 155, 158, 164, 166, 169, 170, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 188, 190, 191, 193, 196, 200, 202, 205, 208, 209, 210, 212, 213, 222, 223, 227, 230, 231, 232, 235, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 252, 255, 256, 259, 262, 263, 264, 266, 268, 272, 273, 280, 284, 285, 287, 290, 292, 293, 294, 296, 298, 299, 301, 302, 304, 306, 309, 311, 316, 317, 319, 320, 321, 322, 325, 326, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 354, 357, 358, 361, 362, 363, 365, 368, 371, 372, 373, 376, 377, 380, 381, 383, 384, 385, 386, 390, 391, 393, 394, 396, 397, 398, 399, 401, 403, 404, 406, 407, 409, 410, 411, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 436, 437, 439, 445, 446, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480], "by": [3, 5, 7, 13, 15, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 112, 113, 115, 116, 118, 120, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 170, 172, 174, 175, 176, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 231, 232, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 277, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 439, 445, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "header": [3, 25, 28, 57, 62, 67, 72, 83, 99, 103, 108, 115, 134, 140, 144, 148, 149, 151, 153, 164, 166, 172, 173, 181, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 212, 227, 231, 239, 240, 241, 242, 244, 245, 247, 253, 264, 266, 268, 273, 282, 285, 290, 294, 302, 308, 314, 332, 333, 334, 338, 346, 349, 351, 354, 358, 373, 377, 381, 389, 391, 393, 397, 407, 415, 418, 423, 425, 448, 452, 457, 459, 461, 463, 464, 465, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479], "are": [3, 5, 7, 9, 11, 13, 22, 23, 25, 26, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 225, 227, 230, 231, 232, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 287, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 313, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 440, 442, 445, 447, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "initi": [3, 5, 13, 16, 18, 22, 23, 24, 27, 28, 30, 31, 34, 41, 48, 50, 57, 58, 59, 60, 62, 65, 67, 68, 70, 71, 73, 75, 78, 84, 85, 89, 91, 92, 94, 98, 99, 100, 105, 106, 112, 113, 118, 119, 120, 124, 133, 137, 138, 139, 140, 144, 153, 155, 163, 164, 172, 173, 174, 178, 183, 186, 187, 188, 190, 192, 199, 200, 203, 210, 223, 227, 231, 232, 240, 244, 245, 247, 251, 255, 258, 259, 263, 264, 265, 266, 267, 268, 273, 275, 277, 278, 280, 281, 285, 289, 290, 296, 298, 302, 305, 311, 317, 318, 328, 331, 332, 334, 335, 337, 338, 341, 345, 349, 352, 355, 361, 362, 363, 365, 372, 380, 381, 382, 384, 391, 396, 409, 415, 421, 422, 423, 424, 427, 428, 432, 446, 451, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 478, 479], "caller": [3, 5, 9, 18, 23, 30, 32, 33, 34, 44, 60, 63, 72, 84, 87, 92, 94, 137, 142, 154, 155, 166, 173, 178, 186, 188, 210, 222, 232, 239, 248, 249, 252, 255, 264, 288, 290, 293, 299, 305, 329, 330, 332, 334, 338, 345, 349, 361, 366, 372, 376, 377, 382, 384, 391, 393, 396, 397, 399, 401, 415, 417, 424, 425, 426, 436, 439, 459, 460, 461, 462, 463, 464, 465, 469, 475, 478, 479], "will": [3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 219, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 306, 308, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 366, 369, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "own": [3, 5, 7, 9, 22, 23, 26, 28, 32, 34, 44, 58, 60, 62, 63, 67, 71, 72, 75, 76, 83, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 106, 107, 108, 110, 112, 116, 118, 124, 131, 135, 137, 149, 164, 166, 172, 178, 183, 190, 193, 197, 200, 202, 204, 207, 208, 222, 227, 240, 244, 247, 252, 255, 264, 265, 266, 268, 280, 281, 289, 290, 293, 294, 296, 305, 316, 318, 323, 328, 329, 330, 334, 337, 338, 341, 342, 345, 349, 354, 358, 360, 361, 365, 380, 384, 390, 391, 395, 398, 399, 403, 406, 409, 411, 416, 422, 424, 426, 428, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 474, 476, 478, 479], "onli": [3, 5, 7, 9, 10, 13, 22, 23, 26, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 48, 50, 51, 53, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 130, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 149, 151, 152, 153, 155, 157, 158, 160, 163, 164, 166, 167, 172, 173, 174, 176, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 218, 222, 223, 225, 227, 229, 231, 232, 239, 240, 241, 242, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 279, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 298, 299, 301, 302, 305, 308, 309, 310, 311, 312, 315, 316, 317, 319, 322, 324, 325, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 349, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 439, 440, 441, 445, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 478, 479, 480], "to": [3, 5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 86, 87, 90, 91, 92, 94, 95, 96, 97, 103, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 264, 266, 267, 268, 269, 270, 272, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 292, 294, 295, 297, 298, 299, 301, 302, 304, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 341, 342, 343, 344, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 383, 384, 390, 391, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 451, 452, 453, 457, 459, 460, 468, 469, 479, 480], "its": [3, 5, 7, 8, 9, 11, 22, 23, 25, 28, 30, 32, 33, 34, 38, 41, 42, 44, 46, 48, 54, 55, 57, 59, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 131, 133, 134, 135, 137, 141, 142, 147, 149, 150, 152, 153, 155, 160, 163, 164, 166, 167, 172, 173, 174, 175, 178, 180, 181, 183, 185, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 215, 222, 223, 225, 227, 232, 239, 240, 242, 244, 245, 247, 248, 249, 250, 252, 255, 258, 259, 262, 264, 265, 266, 268, 272, 273, 275, 276, 280, 281, 289, 290, 292, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 308, 310, 311, 312, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 348, 349, 351, 354, 356, 358, 360, 361, 362, 363, 365, 368, 371, 372, 374, 376, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 430, 431, 432, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "count": [3, 5, 7, 9, 32, 33, 34, 44, 51, 53, 57, 62, 63, 67, 73, 74, 75, 77, 79, 83, 84, 86, 88, 89, 92, 93, 94, 98, 100, 103, 118, 119, 124, 137, 142, 144, 146, 149, 157, 158, 161, 173, 174, 179, 180, 182, 185, 187, 188, 190, 193, 205, 208, 215, 221, 223, 233, 244, 245, 247, 252, 255, 258, 264, 268, 275, 278, 280, 281, 285, 289, 290, 294, 296, 302, 305, 315, 316, 325, 328, 334, 337, 338, 340, 341, 342, 344, 349, 358, 360, 361, 362, 363, 365, 376, 378, 384, 391, 396, 409, 424, 426, 431, 432, 438, 442, 448, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 477, 479], "be": [3, 5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 176, 178, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 230, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 439, 440, 442, 444, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "one": [3, 5, 7, 9, 11, 13, 18, 23, 24, 25, 28, 30, 32, 33, 34, 36, 41, 42, 44, 46, 48, 50, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 107, 108, 110, 112, 113, 115, 117, 118, 120, 124, 130, 131, 133, 135, 136, 137, 139, 141, 142, 144, 148, 149, 151, 152, 153, 154, 155, 157, 158, 160, 163, 164, 166, 167, 170, 172, 173, 174, 178, 180, 181, 183, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 218, 222, 223, 225, 227, 229, 231, 232, 239, 240, 242, 244, 245, 247, 248, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 308, 311, 315, 316, 317, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "memori": [3, 5, 7, 18, 23, 28, 30, 31, 32, 33, 34, 40, 42, 44, 46, 48, 54, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 84, 86, 92, 94, 98, 99, 100, 103, 104, 106, 113, 117, 120, 130, 135, 149, 155, 161, 173, 181, 182, 183, 185, 204, 209, 210, 211, 222, 231, 232, 244, 247, 251, 252, 255, 257, 258, 259, 266, 268, 280, 290, 296, 311, 319, 327, 329, 330, 334, 335, 337, 344, 345, 349, 354, 358, 361, 382, 385, 398, 401, 402, 405, 407, 409, 417, 418, 424, 431, 438, 451, 452, 458, 459, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 475, 476, 477, 478, 479], "is": [3, 5, 6, 7, 8, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 77, 78, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 118, 120, 121, 122, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 440, 442, 445, 446, 447, 448, 451, 452, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "determin": [3, 5, 7, 11, 18, 22, 23, 32, 33, 38, 39, 44, 48, 53, 59, 62, 67, 72, 74, 75, 84, 89, 91, 93, 97, 99, 100, 102, 103, 104, 105, 106, 108, 118, 124, 131, 142, 149, 152, 154, 155, 156, 158, 172, 173, 174, 176, 178, 179, 181, 183, 186, 187, 188, 190, 194, 200, 205, 208, 210, 212, 222, 227, 239, 244, 245, 246, 247, 252, 256, 262, 263, 264, 265, 266, 267, 268, 269, 272, 276, 280, 289, 290, 292, 293, 294, 296, 304, 305, 308, 311, 315, 316, 317, 318, 325, 327, 328, 329, 330, 331, 334, 337, 341, 342, 343, 344, 345, 349, 350, 351, 352, 354, 356, 357, 358, 362, 363, 365, 372, 374, 380, 382, 384, 391, 394, 395, 396, 401, 406, 411, 417, 421, 422, 423, 425, 426, 428, 430, 431, 432, 451, 457, 460, 461, 463, 464, 465, 467, 470, 471, 472, 473, 474, 476, 479], "from": [3, 5, 7, 8, 9, 10, 11, 13, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 73, 74, 75, 76, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 124, 126, 130, 131, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 163, 164, 167, 170, 172, 174, 175, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 223, 227, 229, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 280, 281, 282, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 370, 371, 372, 373, 374, 376, 377, 378, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 451, 452, 454, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "tp_basics": [3, 28, 60, 62, 74, 75, 478, 479], "pyobject_newvar": [3, 28, 41, 62, 461, 477, 478, 479], "tp_items": [3, 28, 60, 62, 74, 75], "tupl": [3, 5, 10, 14, 16, 23, 27, 34, 37, 39, 41, 48, 53, 54, 57, 58, 60, 61, 62, 65, 67, 71, 72, 74, 75, 78, 86, 89, 93, 94, 96, 99, 100, 103, 105, 107, 110, 111, 113, 114, 115, 118, 119, 120, 124, 131, 132, 135, 139, 142, 145, 148, 150, 153, 155, 163, 167, 169, 173, 174, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 193, 200, 202, 205, 206, 210, 218, 222, 223, 224, 229, 230, 233, 239, 240, 241, 242, 245, 247, 251, 252, 255, 256, 258, 259, 261, 263, 264, 266, 268, 269, 271, 273, 276, 278, 280, 283, 285, 286, 288, 289, 290, 292, 293, 296, 297, 300, 301, 302, 304, 305, 307, 311, 313, 315, 316, 319, 322, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 348, 349, 351, 355, 356, 357, 358, 361, 362, 365, 368, 372, 374, 377, 378, 380, 381, 384, 385, 390, 391, 392, 394, 396, 397, 398, 401, 403, 408, 409, 411, 412, 415, 416, 418, 423, 424, 425, 426, 427, 428, 432, 436, 437, 439, 441, 442, 446, 447, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "void": [3, 5, 7, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 47, 48, 50, 51, 52, 57, 58, 59, 60, 62, 63, 65, 66, 70, 71, 72, 74, 75, 76, 85, 96, 98, 173, 316, 344, 407, 427, 465, 468, 469, 470, 477, 478, 479], "pyobject_del": [3, 41, 62, 461], "tp_dealloc": [3, 28, 60, 62, 66, 74, 75, 469, 477, 479], "handler": [3, 23, 24, 28, 32, 33, 58, 60, 62, 63, 65, 66, 67, 72, 74, 75, 80, 86, 106, 113, 116, 118, 120, 123, 128, 130, 133, 143, 149, 150, 164, 174, 182, 185, 186, 188, 193, 194, 198, 199, 210, 222, 226, 237, 242, 251, 253, 255, 257, 263, 270, 280, 289, 290, 294, 305, 311, 312, 325, 326, 329, 334, 337, 341, 347, 349, 352, 354, 358, 362, 364, 384, 389, 391, 399, 407, 408, 410, 412, 413, 416, 423, 424, 425, 451, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "_py_nonestruct": [3, 85], "none": [3, 5, 16, 20, 23, 26, 30, 32, 33, 44, 54, 55, 57, 62, 63, 66, 67, 72, 79, 84, 86, 87, 88, 89, 92, 94, 99, 100, 103, 104, 105, 107, 110, 111, 112, 114, 115, 118, 120, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 145, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 178, 180, 181, 183, 186, 187, 188, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 215, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 280, 281, 283, 284, 285, 288, 289, 290, 293, 294, 296, 297, 299, 301, 302, 304, 305, 308, 309, 311, 313, 315, 316, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 349, 351, 354, 355, 356, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 424, 426, 427, 428, 431, 432, 433, 437, 438, 439, 442, 446, 449, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "py_non": [3, 23, 27, 32, 45, 46, 55, 66, 72, 85, 89, 427], "pymodule_cr": [3, 32, 44, 71, 72, 75], "macro": [4, 5, 6, 16, 17, 23, 28, 32, 33, 34, 37, 41, 42, 43, 44, 49, 51, 54, 55, 58, 59, 62, 63, 67, 72, 75, 89, 173, 214, 283, 349, 358, 452, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "built": [4, 7, 16, 23, 30, 32, 33, 36, 41, 46, 48, 57, 58, 60, 62, 67, 72, 74, 75, 76, 78, 79, 83, 84, 89, 92, 96, 99, 100, 102, 106, 107, 108, 109, 110, 113, 118, 120, 126, 130, 133, 143, 149, 152, 155, 156, 158, 160, 165, 175, 178, 179, 183, 184, 187, 188, 192, 196, 199, 203, 208, 210, 218, 222, 227, 232, 244, 247, 248, 249, 251, 252, 254, 255, 258, 263, 272, 273, 280, 281, 289, 290, 293, 294, 296, 305, 308, 310, 317, 318, 325, 326, 334, 337, 338, 342, 344, 345, 349, 351, 358, 365, 372, 380, 384, 385, 396, 398, 401, 406, 407, 409, 411, 415, 419, 423, 424, 425, 426, 428, 430, 431, 432, 438, 439, 451, 452, 457, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480], "run": [4, 23, 28, 32, 33, 41, 44, 50, 58, 62, 63, 67, 71, 72, 75, 76, 78, 80, 83, 84, 85, 87, 88, 89, 91, 92, 94, 96, 98, 99, 101, 102, 103, 104, 106, 108, 110, 112, 113, 118, 121, 122, 123, 127, 130, 131, 132, 134, 135, 136, 138, 142, 149, 150, 154, 160, 161, 163, 164, 166, 167, 170, 173, 174, 178, 182, 183, 184, 190, 197, 200, 205, 210, 211, 223, 225, 227, 232, 233, 239, 240, 241, 242, 247, 248, 252, 253, 258, 263, 265, 266, 268, 276, 280, 285, 289, 290, 293, 294, 305, 310, 317, 319, 320, 321, 322, 324, 328, 329, 330, 331, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 351, 352, 360, 361, 362, 363, 364, 365, 372, 376, 378, 380, 382, 385, 386, 394, 395, 396, 398, 399, 401, 403, 416, 417, 423, 424, 425, 426, 427, 428, 431, 436, 439, 440, 447, 448, 449, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "time": [4, 5, 13, 20, 22, 23, 27, 28, 30, 32, 33, 40, 41, 44, 53, 62, 63, 67, 71, 72, 74, 75, 76, 78, 80, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 102, 103, 104, 107, 108, 113, 115, 116, 118, 120, 124, 130, 131, 132, 134, 136, 137, 138, 139, 140, 142, 144, 148, 149, 154, 157, 160, 163, 164, 166, 170, 173, 174, 179, 183, 187, 190, 199, 200, 205, 206, 209, 210, 211, 213, 215, 222, 223, 227, 231, 232, 240, 242, 244, 245, 247, 251, 252, 254, 256, 258, 263, 264, 265, 266, 268, 273, 278, 279, 280, 281, 285, 289, 290, 291, 292, 293, 294, 296, 297, 305, 306, 311, 315, 316, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 334, 335, 337, 338, 339, 341, 345, 349, 354, 355, 358, 360, 361, 363, 365, 368, 371, 372, 375, 376, 380, 382, 384, 385, 386, 391, 394, 396, 398, 401, 403, 404, 405, 406, 411, 412, 415, 416, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 436, 439, 445, 447, 448, 451, 452, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 473, 479], "py_major_vers": [4, 111], "1a2": 4, "py_minor_vers": [4, 65, 111, 477], "py_micro_vers": [4, 111], "py_release_level": [4, 111], "0xa": 4, "alpha": [4, 67, 79, 86, 111, 281, 285, 304, 315, 349, 351, 447, 458, 459, 464, 467, 480], "0xb": 4, "beta": [4, 67, 111, 315, 349, 447, 458, 464, 474, 480], "0xc": 4, "0xf": 4, "py_release_seri": [4, 111], "py_version_hex": [4, 56, 468, 469, 477, 478, 479], "32": [4, 16, 25, 40, 58, 67, 85, 93, 94, 96, 97, 103, 104, 106, 113, 119, 137, 139, 144, 151, 155, 163, 173, 183, 212, 223, 232, 247, 248, 256, 258, 259, 267, 280, 290, 300, 301, 303, 308, 315, 323, 330, 334, 340, 341, 344, 346, 349, 361, 362, 384, 394, 401, 402, 418, 419, 420, 424, 431, 442, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "big": [4, 25, 34, 41, 63, 67, 72, 77, 83, 89, 94, 100, 104, 106, 130, 131, 139, 151, 155, 164, 173, 174, 188, 227, 256, 266, 292, 341, 344, 346, 349, 358, 385, 394, 401, 430, 448, 452, 460, 461, 462, 465, 467, 469, 471, 473, 479], "endian": [4, 25, 30, 41, 63, 83, 104, 106, 139, 151, 155, 173, 227, 256, 292, 344, 346, 349, 394, 401, 448, 473, 479], "order": [4, 7, 13, 28, 30, 32, 33, 42, 44, 57, 58, 62, 63, 67, 71, 72, 74, 75, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 110, 114, 116, 118, 120, 124, 131, 137, 138, 143, 145, 147, 149, 151, 153, 155, 157, 164, 166, 172, 174, 175, 176, 180, 181, 183, 184, 187, 188, 190, 193, 197, 199, 200, 202, 205, 208, 210, 211, 215, 221, 222, 225, 227, 230, 233, 242, 244, 245, 247, 251, 252, 255, 256, 258, 259, 263, 264, 266, 268, 272, 278, 280, 281, 285, 290, 292, 293, 296, 299, 300, 301, 304, 305, 306, 310, 311, 312, 313, 315, 316, 322, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 345, 347, 349, 354, 358, 360, 361, 362, 365, 372, 377, 378, 380, 381, 382, 384, 385, 390, 391, 394, 395, 396, 398, 403, 406, 407, 409, 411, 417, 418, 423, 424, 425, 427, 428, 429, 431, 438, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480], "0x03": [4, 188], "16": [4, 5, 16, 33, 40, 46, 67, 77, 84, 88, 93, 94, 100, 104, 106, 115, 119, 139, 144, 155, 170, 173, 174, 180, 190, 208, 218, 222, 223, 232, 233, 237, 256, 258, 259, 264, 280, 289, 290, 292, 311, 315, 316, 319, 323, 329, 334, 338, 340, 341, 342, 345, 349, 362, 365, 374, 394, 420, 422, 431, 436, 438, 440, 442, 445, 447, 448, 449, 452, 458, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "0x04": [4, 188, 424], "17": [4, 93, 94, 100, 106, 108, 137, 180, 183, 187, 190, 205, 220, 233, 254, 258, 289, 290, 316, 362, 374, 440, 445, 459, 462, 464, 465, 467, 470, 471, 473, 474, 477, 478, 479], "24": [4, 84, 93, 94, 97, 103, 106, 137, 139, 180, 183, 190, 206, 233, 256, 258, 292, 316, 329, 340, 341, 344, 346, 362, 420, 422, 431, 465, 469, 472, 473, 477, 478, 479], "0x01": [4, 188, 334], "25": [4, 84, 93, 94, 124, 180, 183, 187, 218, 233, 256, 258, 280, 315, 316, 319, 332, 334, 337, 340, 341, 357, 374, 378, 380, 420, 438, 442, 444, 445, 447, 458, 460, 461, 462, 464, 465, 469, 470, 472, 474, 475, 476, 477, 478, 479], "28": [4, 32, 96, 100, 183, 223, 233, 256, 337, 362, 380, 462, 463, 464, 468, 471, 477, 478, 479], "29": [4, 96, 100, 103, 180, 183, 187, 233, 256, 258, 264, 315, 362, 461, 464, 468, 472, 477, 478, 479], "0x2": 4, "hexvers": [4, 67, 79, 312, 349, 446, 472], "0x030401a2": 4, "10": [4, 10, 14, 20, 22, 23, 26, 28, 32, 33, 35, 38, 44, 46, 48, 51, 54, 56, 57, 60, 62, 63, 67, 72, 78, 83, 86, 91, 92, 93, 94, 96, 99, 100, 103, 105, 106, 107, 110, 111, 113, 114, 118, 119, 120, 121, 124, 127, 129, 132, 133, 134, 135, 136, 137, 141, 145, 147, 149, 152, 153, 155, 157, 160, 166, 173, 174, 178, 180, 182, 183, 185, 188, 190, 206, 210, 211, 212, 213, 215, 217, 218, 220, 222, 223, 228, 230, 232, 233, 234, 238, 239, 247, 248, 249, 252, 255, 256, 258, 263, 264, 265, 271, 272, 275, 279, 280, 281, 283, 285, 288, 289, 290, 291, 293, 300, 301, 304, 305, 308, 309, 315, 316, 319, 322, 323, 327, 329, 334, 337, 338, 339, 340, 341, 342, 344, 345, 349, 351, 356, 358, 360, 361, 362, 363, 365, 368, 374, 377, 380, 381, 382, 384, 386, 390, 391, 403, 409, 411, 416, 418, 419, 421, 423, 424, 425, 426, 427, 428, 431, 436, 437, 438, 439, 440, 442, 444, 445, 447, 448, 449, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 477, 478, 480], "0x030a00f0": 4, "if": [4, 5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 79, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 118, 120, 124, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 229, 230, 231, 232, 233, 235, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 438, 439, 441, 444, 446, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "py_vers": [4, 32, 56, 173, 469, 471, 479], "const": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 32, 33, 38, 39, 40, 42, 44, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 62, 63, 65, 67, 72, 74, 78, 96, 98, 116, 289, 347, 407, 473, 476, 477, 479], "unsign": [4, 5, 7, 9, 25, 30, 32, 33, 34, 38, 41, 50, 57, 60, 62, 63, 74, 89, 119, 139, 144, 173, 290, 292, 296, 334, 341, 344, 346, 404, 406, 407, 420, 448, 460, 461, 463, 468, 472, 476, 479], "long": [4, 5, 6, 9, 22, 23, 30, 32, 33, 34, 38, 40, 44, 57, 58, 60, 62, 63, 65, 67, 72, 74, 83, 84, 88, 89, 94, 96, 98, 99, 100, 102, 103, 104, 107, 110, 118, 119, 124, 137, 141, 144, 164, 166, 173, 174, 187, 190, 199, 205, 209, 212, 222, 223, 225, 239, 242, 244, 245, 255, 256, 258, 264, 265, 280, 289, 290, 296, 300, 302, 303, 304, 305, 316, 318, 325, 327, 330, 332, 334, 335, 337, 338, 341, 344, 345, 349, 354, 358, 360, 361, 362, 363, 365, 371, 372, 377, 391, 396, 401, 403, 406, 407, 421, 422, 423, 424, 426, 431, 451, 457, 458, 459, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "sinc": [4, 5, 7, 10, 13, 14, 22, 23, 26, 28, 30, 32, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 87, 89, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 112, 124, 131, 142, 144, 147, 149, 154, 158, 164, 166, 170, 172, 173, 174, 178, 180, 183, 187, 190, 191, 193, 195, 196, 198, 200, 202, 204, 205, 206, 210, 215, 219, 222, 223, 227, 231, 232, 240, 241, 242, 244, 245, 247, 248, 255, 259, 263, 265, 266, 268, 269, 272, 275, 280, 285, 289, 290, 292, 293, 294, 304, 305, 311, 316, 325, 327, 329, 332, 334, 335, 336, 337, 338, 341, 342, 344, 349, 354, 358, 360, 361, 362, 365, 372, 374, 376, 377, 378, 382, 384, 385, 386, 391, 394, 395, 396, 398, 401, 403, 405, 406, 407, 408, 410, 411, 415, 417, 418, 423, 424, 426, 428, 430, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "version": [4, 7, 9, 10, 13, 14, 23, 26, 28, 30, 32, 33, 34, 35, 40, 41, 42, 44, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 84, 88, 89, 90, 91, 92, 93, 94, 96, 99, 100, 103, 104, 106, 107, 109, 110, 115, 116, 117, 118, 120, 124, 126, 131, 137, 140, 141, 149, 155, 160, 164, 170, 173, 174, 180, 181, 183, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 218, 222, 227, 230, 232, 239, 240, 241, 242, 244, 245, 247, 249, 252, 253, 254, 256, 259, 262, 263, 264, 265, 266, 267, 268, 271, 272, 275, 277, 278, 280, 282, 285, 290, 292, 293, 295, 296, 300, 301, 304, 305, 309, 310, 311, 312, 315, 316, 317, 327, 328, 329, 331, 334, 335, 336, 337, 341, 342, 344, 345, 347, 349, 350, 351, 352, 355, 357, 358, 360, 361, 363, 365, 371, 372, 373, 375, 376, 377, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 397, 398, 399, 401, 403, 406, 407, 409, 413, 417, 418, 421, 422, 424, 425, 426, 427, 428, 431, 432, 446, 449, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480], "11": [4, 7, 13, 23, 25, 26, 30, 32, 33, 34, 42, 51, 57, 58, 59, 60, 67, 71, 84, 86, 88, 91, 92, 93, 94, 98, 99, 100, 101, 103, 106, 108, 110, 111, 115, 118, 124, 125, 126, 133, 134, 136, 137, 139, 144, 149, 150, 151, 155, 157, 163, 166, 170, 172, 173, 178, 180, 181, 183, 188, 190, 208, 209, 210, 212, 215, 218, 222, 223, 227, 228, 231, 232, 233, 238, 239, 242, 244, 246, 247, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 269, 272, 275, 278, 280, 284, 285, 288, 290, 292, 293, 294, 296, 298, 304, 315, 316, 318, 319, 327, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 362, 374, 375, 377, 382, 384, 391, 393, 395, 396, 399, 403, 404, 408, 418, 419, 420, 421, 423, 424, 426, 427, 431, 432, 438, 442, 451, 452, 457, 460, 461, 462, 464, 466, 468, 470, 471, 473, 474, 475, 476, 477, 480], "includ": [4, 5, 7, 9, 13, 18, 22, 23, 26, 27, 28, 30, 31, 32, 33, 44, 48, 52, 54, 55, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 80, 83, 84, 85, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 105, 106, 107, 108, 110, 112, 115, 118, 120, 131, 135, 137, 141, 144, 148, 150, 151, 152, 153, 154, 155, 156, 158, 160, 164, 170, 173, 174, 175, 178, 180, 183, 187, 188, 190, 193, 197, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 270, 272, 273, 275, 278, 280, 285, 286, 289, 290, 293, 294, 296, 302, 304, 305, 308, 309, 311, 316, 319, 320, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 341, 342, 344, 345, 349, 351, 352, 354, 355, 358, 360, 361, 362, 365, 368, 369, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 393, 395, 396, 398, 399, 401, 402, 403, 405, 406, 407, 409, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 447, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "patchlevel": [4, 300], "these": [5, 7, 8, 9, 11, 13, 23, 25, 28, 30, 32, 33, 34, 40, 41, 44, 50, 51, 56, 57, 58, 62, 63, 65, 71, 72, 74, 75, 76, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 112, 113, 118, 120, 124, 130, 131, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 160, 164, 166, 173, 174, 175, 178, 180, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 218, 222, 223, 227, 232, 239, 240, 242, 244, 247, 248, 249, 252, 253, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 304, 305, 309, 311, 315, 316, 317, 318, 319, 321, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 358, 361, 362, 363, 365, 371, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 396, 398, 399, 401, 403, 404, 406, 407, 409, 410, 411, 412, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "when": [5, 7, 9, 10, 11, 13, 18, 22, 23, 27, 28, 30, 32, 33, 34, 35, 36, 38, 41, 44, 46, 48, 49, 51, 53, 56, 57, 58, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 87, 88, 89, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 122, 124, 126, 127, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 151, 152, 153, 154, 155, 164, 166, 167, 169, 170, 172, 173, 174, 175, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 218, 222, 223, 225, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 305, 306, 308, 310, 311, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 357, 358, 361, 362, 363, 365, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "creat": [5, 7, 8, 9, 11, 13, 16, 17, 22, 23, 24, 25, 27, 28, 30, 33, 34, 38, 39, 41, 42, 44, 48, 50, 51, 54, 57, 58, 59, 62, 65, 66, 67, 72, 74, 75, 76, 85, 86, 87, 89, 91, 92, 98, 99, 102, 103, 104, 105, 106, 107, 108, 112, 113, 115, 118, 120, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 142, 147, 148, 149, 151, 154, 155, 157, 158, 160, 164, 166, 167, 171, 172, 173, 174, 178, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 212, 215, 218, 221, 222, 223, 227, 231, 233, 238, 239, 242, 244, 245, 247, 248, 249, 251, 252, 253, 255, 256, 264, 265, 266, 267, 268, 269, 275, 278, 279, 280, 281, 282, 285, 290, 293, 294, 295, 296, 297, 299, 302, 304, 305, 309, 311, 316, 319, 320, 325, 327, 329, 331, 332, 334, 335, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 354, 356, 358, 360, 361, 363, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 391, 393, 394, 395, 398, 399, 401, 403, 406, 407, 409, 410, 411, 412, 413, 415, 416, 418, 419, 421, 422, 423, 425, 426, 428, 430, 431, 432, 436, 437, 438, 447, 448, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "your": [5, 22, 32, 56, 58, 62, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 93, 94, 98, 99, 101, 103, 104, 106, 107, 108, 110, 112, 116, 118, 120, 131, 139, 150, 156, 164, 174, 178, 180, 184, 188, 190, 193, 195, 197, 198, 199, 202, 204, 208, 210, 219, 223, 231, 232, 239, 240, 241, 242, 243, 244, 247, 252, 255, 259, 263, 264, 265, 266, 268, 275, 280, 290, 293, 294, 296, 302, 305, 310, 316, 317, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 347, 350, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 371, 378, 380, 382, 384, 385, 390, 391, 395, 396, 398, 403, 406, 407, 409, 411, 416, 417, 418, 421, 422, 430, 432, 437, 438, 445, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "extens": [5, 7, 11, 13, 23, 27, 33, 34, 41, 44, 49, 56, 60, 62, 65, 67, 71, 73, 78, 83, 84, 86, 89, 90, 91, 93, 95, 102, 103, 112, 116, 137, 141, 150, 164, 170, 173, 174, 178, 180, 181, 186, 187, 190, 191, 197, 200, 205, 215, 217, 232, 238, 239, 242, 243, 245, 247, 248, 251, 252, 255, 259, 266, 268, 270, 273, 277, 285, 289, 290, 293, 294, 296, 302, 305, 309, 311, 316, 327, 328, 329, 330, 332, 334, 337, 338, 341, 349, 350, 351, 354, 358, 361, 364, 365, 371, 378, 380, 381, 382, 384, 391, 398, 401, 406, 407, 410, 411, 415, 417, 418, 424, 426, 428, 436, 441, 447, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479], "method": [5, 7, 10, 16, 21, 22, 23, 24, 25, 28, 32, 33, 36, 38, 39, 41, 44, 45, 48, 49, 52, 53, 54, 55, 60, 61, 62, 65, 67, 71, 73, 74, 79, 80, 85, 86, 87, 88, 89, 91, 94, 99, 100, 102, 105, 106, 107, 110, 113, 114, 115, 116, 120, 123, 126, 128, 129, 130, 131, 134, 135, 136, 137, 140, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 163, 164, 165, 167, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 187, 188, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 215, 216, 218, 219, 222, 223, 224, 227, 231, 232, 234, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 261, 262, 264, 265, 266, 267, 268, 270, 273, 275, 276, 278, 281, 288, 290, 292, 294, 295, 296, 298, 299, 302, 304, 305, 308, 309, 310, 311, 312, 313, 315, 316, 318, 320, 322, 325, 326, 327, 328, 332, 335, 338, 340, 342, 344, 345, 346, 347, 348, 349, 354, 355, 356, 358, 360, 361, 363, 365, 366, 368, 369, 370, 371, 372, 374, 377, 378, 381, 382, 383, 384, 390, 391, 393, 394, 395, 397, 399, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 425, 428, 429, 431, 432, 437, 438, 439, 440, 441, 443, 445, 447, 448, 451, 452, 459, 460, 461, 464, 465, 467, 468, 470, 471, 473, 477, 479, 480], "addit": [5, 7, 9, 23, 30, 32, 34, 40, 41, 44, 57, 60, 62, 65, 67, 72, 74, 75, 83, 89, 93, 94, 96, 97, 98, 99, 100, 103, 106, 108, 110, 113, 115, 118, 120, 124, 137, 139, 143, 148, 149, 154, 155, 164, 166, 170, 172, 173, 174, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 190, 191, 193, 194, 196, 199, 200, 202, 203, 205, 207, 210, 212, 215, 218, 222, 223, 227, 231, 232, 239, 240, 242, 244, 247, 248, 252, 254, 255, 256, 258, 259, 263, 264, 265, 267, 268, 272, 273, 275, 280, 282, 289, 290, 293, 296, 302, 304, 305, 310, 311, 316, 318, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 342, 344, 345, 349, 354, 355, 356, 358, 360, 361, 362, 363, 365, 368, 371, 372, 374, 380, 382, 383, 384, 385, 386, 390, 391, 395, 396, 398, 401, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 418, 422, 423, 424, 425, 426, 428, 430, 431, 432, 440, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479], "inform": [5, 7, 11, 16, 23, 25, 28, 32, 33, 41, 44, 50, 57, 59, 62, 63, 65, 67, 71, 72, 74, 76, 84, 85, 87, 88, 89, 92, 94, 96, 97, 99, 101, 103, 106, 107, 108, 110, 113, 116, 118, 120, 121, 124, 131, 138, 141, 142, 149, 150, 152, 155, 160, 166, 169, 170, 172, 173, 174, 178, 180, 183, 185, 187, 188, 190, 192, 193, 194, 198, 200, 202, 204, 206, 207, 208, 210, 212, 213, 222, 223, 225, 226, 230, 232, 237, 239, 240, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 273, 275, 280, 284, 285, 289, 293, 296, 299, 302, 304, 305, 308, 309, 310, 311, 312, 316, 317, 318, 325, 326, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 352, 354, 355, 357, 358, 361, 362, 365, 369, 371, 372, 376, 377, 378, 380, 382, 384, 385, 387, 390, 391, 394, 395, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 421, 422, 423, 424, 425, 427, 428, 430, 431, 432, 439, 444, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "exampl": [5, 7, 18, 22, 23, 32, 33, 34, 41, 44, 50, 51, 57, 60, 62, 63, 65, 67, 71, 72, 73, 74, 76, 83, 84, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 110, 112, 115, 117, 118, 120, 124, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 152, 155, 156, 157, 160, 167, 169, 170, 172, 173, 174, 178, 179, 181, 183, 184, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 277, 279, 280, 281, 282, 285, 290, 292, 293, 294, 296, 297, 302, 304, 305, 308, 310, 311, 312, 315, 317, 318, 323, 326, 328, 330, 331, 332, 334, 335, 337, 338, 341, 343, 344, 345, 347, 349, 351, 352, 355, 358, 359, 360, 361, 362, 363, 365, 371, 372, 374, 376, 378, 380, 381, 382, 383, 384, 385, 390, 396, 398, 399, 403, 404, 405, 406, 407, 408, 409, 411, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 436, 440, 446, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "avail": [5, 7, 11, 13, 22, 23, 25, 26, 27, 32, 33, 38, 41, 44, 54, 57, 58, 60, 63, 65, 67, 70, 71, 72, 74, 76, 83, 84, 89, 91, 93, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 113, 118, 120, 121, 124, 131, 134, 135, 137, 149, 153, 155, 160, 164, 166, 167, 170, 172, 173, 174, 179, 181, 183, 188, 192, 204, 207, 208, 209, 210, 211, 212, 215, 220, 222, 223, 226, 227, 230, 232, 239, 242, 244, 245, 247, 248, 249, 252, 254, 255, 256, 259, 263, 264, 265, 266, 268, 272, 273, 275, 279, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 301, 302, 305, 307, 310, 311, 312, 315, 316, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 350, 352, 354, 355, 357, 358, 361, 362, 365, 370, 371, 372, 374, 377, 378, 380, 381, 382, 384, 385, 386, 391, 394, 395, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "in": [5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 67, 70, 73, 74, 75, 77, 79, 86, 88, 90, 91, 92, 93, 96, 97, 98, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 164, 165, 167, 170, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 230, 231, 232, 233, 235, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 290, 292, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 451, 452, 454, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 479, 480], "first": [5, 13, 18, 22, 23, 25, 27, 30, 32, 33, 36, 38, 40, 41, 44, 46, 48, 50, 53, 57, 58, 59, 60, 62, 63, 66, 71, 72, 74, 75, 76, 77, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 112, 115, 118, 120, 124, 130, 133, 137, 138, 139, 142, 145, 148, 149, 151, 153, 154, 155, 157, 164, 166, 172, 173, 174, 175, 180, 181, 183, 185, 187, 188, 190, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 215, 218, 222, 223, 225, 227, 232, 239, 240, 241, 244, 245, 252, 255, 256, 258, 262, 263, 264, 265, 266, 268, 269, 272, 273, 275, 278, 280, 281, 284, 285, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 304, 305, 310, 311, 316, 317, 321, 322, 325, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 352, 354, 355, 357, 358, 360, 362, 363, 365, 371, 372, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 396, 397, 398, 401, 403, 404, 406, 409, 410, 415, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 442, 445, 448, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "three": [5, 7, 23, 30, 34, 41, 57, 62, 72, 74, 75, 76, 83, 84, 87, 89, 92, 93, 99, 100, 103, 104, 105, 106, 108, 115, 118, 120, 131, 132, 137, 155, 157, 158, 172, 173, 174, 178, 180, 183, 186, 187, 188, 190, 191, 193, 197, 202, 204, 208, 210, 213, 222, 223, 240, 242, 245, 247, 263, 264, 265, 266, 268, 275, 280, 285, 289, 290, 292, 293, 294, 296, 304, 305, 311, 315, 316, 325, 329, 330, 331, 334, 337, 338, 341, 342, 344, 345, 349, 354, 355, 362, 363, 365, 372, 380, 381, 382, 384, 385, 386, 391, 395, 399, 405, 406, 410, 411, 415, 421, 423, 424, 426, 427, 428, 430, 431, 432, 437, 447, 448, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 476, 477, 479], "describ": [5, 7, 13, 23, 26, 30, 41, 44, 48, 49, 50, 57, 58, 59, 60, 62, 65, 67, 71, 72, 74, 76, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 106, 107, 108, 110, 113, 115, 118, 120, 124, 126, 135, 141, 142, 143, 148, 149, 150, 155, 160, 164, 166, 172, 173, 174, 177, 178, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 199, 200, 205, 210, 213, 214, 219, 221, 222, 227, 232, 239, 241, 242, 243, 244, 245, 246, 248, 252, 253, 255, 256, 257, 263, 264, 265, 266, 268, 273, 277, 278, 281, 285, 287, 289, 290, 292, 295, 296, 304, 305, 309, 311, 312, 316, 318, 319, 321, 325, 329, 332, 333, 334, 337, 338, 339, 341, 342, 344, 345, 349, 350, 354, 361, 365, 371, 372, 380, 382, 384, 385, 390, 391, 393, 401, 402, 403, 404, 406, 410, 411, 412, 415, 418, 419, 422, 423, 424, 426, 428, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pyarg_parsetupl": [5, 7, 47, 56, 57, 71, 72, 74, 76, 89, 426, 458, 460, 461, 463, 464, 468, 470, 472, 477, 479], "pyarg_parsetupleandkeyword": [5, 56, 57, 72, 74, 75, 89, 462, 475, 479], "pyarg_pars": [5, 56, 89, 465, 471, 479], "all": [5, 7, 9, 17, 22, 23, 25, 28, 30, 32, 33, 34, 37, 38, 41, 44, 46, 54, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 76, 83, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 118, 120, 122, 124, 126, 131, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 167, 170, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 222, 223, 225, 227, 230, 231, 232, 235, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 281, 284, 285, 290, 292, 293, 294, 296, 297, 299, 302, 305, 306, 308, 309, 310, 311, 313, 319, 321, 322, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 365, 371, 372, 374, 376, 377, 380, 381, 382, 383, 384, 385, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 436, 437, 438, 440, 445, 446, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479], "which": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 83, 84, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 112, 113, 115, 118, 120, 124, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 222, 223, 225, 227, 231, 232, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 316, 317, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 349, 350, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 440, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "tell": [5, 30, 32, 67, 72, 74, 88, 89, 91, 94, 100, 102, 103, 108, 110, 115, 116, 118, 124, 149, 151, 156, 190, 205, 219, 232, 255, 264, 266, 274, 275, 280, 289, 292, 295, 296, 329, 330, 334, 335, 337, 338, 341, 346, 347, 363, 365, 376, 382, 385, 391, 397, 403, 418, 442, 458, 460, 461, 462, 464, 474, 475, 476, 479], "about": [5, 7, 13, 22, 23, 25, 27, 28, 41, 50, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 79, 83, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 118, 120, 124, 126, 131, 139, 141, 142, 152, 153, 154, 155, 166, 169, 172, 173, 175, 178, 180, 183, 184, 187, 188, 191, 192, 194, 198, 200, 204, 206, 210, 213, 222, 232, 240, 242, 244, 247, 252, 258, 262, 264, 265, 266, 267, 268, 272, 275, 276, 280, 285, 289, 290, 293, 294, 296, 297, 304, 305, 309, 316, 317, 318, 319, 325, 327, 329, 330, 332, 334, 336, 337, 338, 339, 341, 344, 345, 347, 349, 354, 355, 358, 365, 372, 377, 380, 382, 384, 385, 386, 390, 391, 394, 396, 398, 401, 403, 404, 405, 406, 408, 410, 411, 412, 418, 419, 421, 423, 424, 425, 426, 428, 430, 432, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "expect": [5, 9, 23, 28, 38, 44, 51, 56, 57, 62, 65, 67, 72, 74, 75, 76, 83, 84, 88, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 112, 118, 120, 124, 125, 131, 132, 137, 149, 151, 155, 164, 166, 173, 174, 178, 183, 184, 185, 187, 188, 190, 194, 200, 210, 218, 222, 227, 232, 239, 240, 242, 247, 248, 250, 252, 258, 259, 263, 264, 266, 268, 275, 280, 289, 290, 296, 299, 306, 309, 325, 327, 328, 330, 334, 337, 338, 340, 341, 345, 347, 349, 350, 354, 355, 358, 362, 372, 374, 380, 381, 382, 385, 386, 390, 391, 393, 395, 403, 404, 409, 411, 412, 415, 421, 424, 425, 426, 427, 428, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "same": [5, 6, 7, 8, 9, 13, 22, 23, 25, 26, 27, 28, 32, 33, 37, 38, 40, 41, 44, 45, 48, 50, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 130, 131, 133, 135, 136, 137, 138, 139, 142, 148, 149, 152, 154, 155, 160, 164, 166, 167, 170, 172, 173, 174, 175, 178, 180, 181, 183, 184, 187, 188, 190, 191, 192, 193, 198, 199, 200, 202, 204, 205, 206, 208, 210, 212, 213, 215, 217, 218, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 249, 250, 252, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 302, 304, 305, 306, 309, 310, 311, 316, 317, 318, 319, 322, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 350, 351, 354, 355, 357, 358, 360, 361, 362, 363, 365, 367, 370, 371, 372, 374, 377, 380, 381, 382, 383, 384, 385, 390, 391, 394, 396, 397, 398, 399, 401, 403, 406, 409, 411, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478, 479], "syntax": [5, 7, 67, 72, 77, 78, 79, 84, 89, 94, 97, 99, 100, 103, 106, 107, 110, 116, 124, 137, 149, 154, 156, 164, 165, 173, 178, 183, 200, 208, 210, 222, 227, 244, 251, 252, 259, 261, 263, 265, 270, 280, 289, 292, 294, 311, 328, 337, 341, 349, 358, 359, 365, 372, 377, 378, 382, 384, 390, 391, 413, 415, 423, 424, 425, 426, 427, 428, 430, 431, 432, 440, 441, 442, 445, 451, 453, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 471, 473, 476, 477, 478, 479, 480], "for": [5, 7, 8, 9, 11, 13, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 85, 86, 88, 90, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 156, 157, 160, 161, 163, 164, 167, 169, 170, 172, 175, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 232, 233, 235, 237, 239, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 284, 285, 287, 288, 290, 292, 293, 294, 295, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 383, 384, 385, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 404, 405, 406, 407, 413, 415, 416, 417, 418, 419, 421, 422, 425, 427, 429, 430, 431, 432, 436, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 451, 452, 453, 454, 458, 459, 460, 466, 468, 469, 479, 480], "each": [5, 7, 13, 22, 23, 28, 30, 32, 33, 34, 36, 39, 41, 44, 58, 60, 62, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 112, 115, 118, 120, 124, 130, 131, 136, 137, 139, 141, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 163, 164, 166, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 192, 193, 194, 199, 200, 201, 202, 205, 208, 209, 211, 213, 215, 222, 223, 225, 227, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 278, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 302, 304, 305, 306, 309, 310, 311, 315, 316, 317, 318, 319, 322, 326, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 363, 365, 368, 371, 372, 374, 376, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 396, 398, 401, 403, 404, 405, 406, 407, 409, 411, 413, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 438, 440, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479], "consist": [5, 7, 9, 18, 23, 30, 32, 55, 62, 63, 65, 72, 84, 89, 91, 93, 94, 99, 100, 102, 108, 112, 115, 120, 139, 144, 148, 149, 151, 155, 164, 174, 175, 180, 187, 188, 190, 193, 200, 202, 204, 205, 206, 208, 225, 239, 240, 244, 245, 247, 249, 256, 259, 263, 265, 266, 267, 272, 280, 290, 296, 298, 305, 316, 322, 328, 332, 335, 337, 341, 343, 344, 345, 349, 358, 360, 365, 371, 372, 380, 382, 384, 391, 406, 421, 422, 423, 424, 426, 428, 431, 452, 457, 458, 459, 460, 461, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "zero": [5, 7, 18, 23, 25, 26, 28, 30, 32, 33, 34, 35, 37, 38, 41, 44, 48, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 83, 84, 86, 89, 93, 97, 98, 99, 100, 103, 105, 106, 118, 120, 124, 131, 137, 139, 141, 144, 148, 152, 153, 155, 157, 173, 174, 178, 180, 183, 187, 188, 190, 193, 206, 208, 210, 222, 223, 231, 232, 239, 245, 247, 255, 256, 258, 266, 268, 272, 275, 280, 285, 289, 290, 294, 296, 302, 311, 316, 317, 325, 329, 330, 332, 334, 337, 338, 339, 341, 342, 344, 345, 349, 354, 357, 360, 361, 362, 372, 380, 384, 393, 401, 406, 409, 418, 424, 425, 426, 427, 430, 431, 432, 437, 439, 440, 444, 451, 458, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "ormore": [5, 11, 13, 18, 22, 23, 24, 25, 27, 32, 33, 34, 41, 44, 48, 50, 55, 56, 57, 59, 60, 62, 63, 65, 67, 70, 71, 72, 73, 75, 76, 78, 83, 84, 85, 87, 89, 92, 93, 94, 96, 98, 99, 102, 104, 106, 107, 108, 110, 112, 113, 118, 120, 121, 124, 131, 135, 137, 138, 139, 141, 142, 144, 147, 148, 149, 151, 153, 154, 155, 157, 158, 160, 164, 166, 167, 169, 170, 172, 173, 174, 178, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 207, 208, 210, 212, 215, 217, 219, 222, 223, 225, 226, 227, 229, 230, 231, 232, 239, 240, 242, 244, 245, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 264, 265, 266, 267, 268, 272, 273, 275, 278, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 302, 304, 305, 308, 309, 311, 315, 316, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 362, 363, 365, 370, 371, 372, 373, 377, 378, 382, 384, 385, 390, 391, 395, 396, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 411, 415, 416, 418, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 437, 439, 440, 444, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479], "unit": [5, 63, 67, 72, 84, 86, 89, 93, 94, 97, 99, 100, 106, 112, 175, 180, 184, 190, 222, 223, 272, 305, 322, 334, 338, 341, 342, 362, 363, 365, 372, 380, 384, 385, 403, 422, 424, 425, 459, 464, 470, 472, 474, 477, 478, 479], "it": [5, 6, 7, 8, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 118, 120, 124, 127, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 230, 231, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 440, 445, 446, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "usual": [5, 7, 23, 28, 32, 33, 34, 38, 44, 46, 60, 62, 63, 72, 74, 83, 84, 89, 91, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 107, 108, 110, 112, 113, 118, 120, 124, 131, 144, 147, 149, 151, 170, 172, 173, 183, 187, 190, 191, 193, 195, 199, 202, 210, 218, 222, 223, 227, 240, 242, 244, 245, 247, 248, 252, 255, 256, 258, 265, 266, 269, 272, 280, 285, 289, 290, 292, 294, 296, 301, 316, 318, 325, 329, 330, 331, 334, 335, 336, 337, 338, 341, 342, 345, 349, 354, 358, 362, 365, 371, 372, 377, 380, 382, 384, 385, 386, 391, 397, 398, 409, 417, 418, 419, 423, 424, 426, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 475, 477, 479], "singl": [5, 7, 9, 16, 22, 23, 25, 30, 32, 38, 47, 50, 57, 58, 60, 62, 63, 65, 66, 67, 70, 72, 75, 78, 84, 86, 89, 91, 93, 94, 97, 98, 102, 103, 106, 107, 108, 118, 120, 124, 142, 144, 148, 149, 154, 155, 156, 160, 163, 164, 172, 173, 174, 175, 178, 180, 183, 186, 187, 188, 190, 192, 193, 199, 200, 204, 205, 210, 215, 217, 222, 223, 227, 231, 232, 239, 240, 244, 245, 247, 248, 252, 255, 256, 258, 262, 264, 265, 266, 267, 268, 272, 275, 278, 280, 281, 285, 289, 290, 293, 294, 296, 299, 302, 304, 305, 311, 312, 315, 316, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 348, 349, 351, 354, 358, 360, 362, 365, 367, 368, 372, 374, 376, 377, 382, 384, 385, 386, 390, 391, 394, 396, 398, 403, 404, 406, 409, 411, 413, 415, 417, 418, 423, 424, 426, 427, 428, 430, 431, 432, 437, 440, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "charact": [5, 9, 16, 18, 32, 33, 38, 41, 48, 58, 67, 72, 83, 84, 86, 89, 91, 100, 106, 116, 118, 119, 120, 124, 129, 135, 141, 143, 144, 148, 149, 153, 155, 164, 170, 172, 173, 175, 180, 181, 183, 187, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 210, 211, 217, 222, 225, 228, 235, 236, 241, 242, 244, 245, 247, 248, 251, 255, 262, 263, 265, 268, 269, 270, 279, 280, 281, 282, 285, 290, 293, 296, 304, 311, 316, 317, 318, 320, 328, 329, 332, 334, 335, 337, 339, 341, 342, 343, 345, 349, 354, 355, 357, 358, 360, 362, 365, 368, 371, 372, 383, 384, 390, 394, 401, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 422, 426, 427, 430, 431, 432, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "parenthes": [5, 62, 67, 72, 78, 84, 89, 94, 100, 103, 154, 188, 245, 247, 263, 305, 316, 341, 395, 423, 424, 425, 427, 430, 431, 432, 438, 445, 458, 462, 463, 464, 465, 468, 470, 474, 476, 477, 479], "with": [5, 7, 8, 9, 10, 11, 13, 18, 22, 23, 24, 25, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 73, 74, 75, 76, 86, 87, 88, 89, 90, 92, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 126, 130, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 164, 167, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 230, 231, 232, 235, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 261, 263, 265, 266, 267, 268, 269, 270, 272, 273, 275, 278, 279, 280, 281, 285, 287, 288, 289, 290, 292, 293, 294, 295, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 365, 367, 368, 371, 372, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 390, 391, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 419, 421, 422, 426, 427, 428, 429, 430, 431, 432, 434, 437, 438, 439, 440, 442, 445, 447, 448, 451, 452, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 473, 475, 478, 479, 480], "few": [5, 32, 72, 84, 89, 93, 94, 98, 99, 100, 103, 106, 108, 112, 118, 139, 153, 155, 164, 167, 170, 173, 174, 178, 180, 183, 187, 190, 195, 197, 227, 244, 266, 278, 280, 289, 296, 297, 316, 331, 332, 334, 338, 341, 344, 358, 363, 365, 377, 384, 385, 390, 391, 424, 430, 431, 458, 459, 460, 461, 463, 464, 465, 466, 470, 471, 473, 474, 475, 477, 479], "that": [5, 7, 8, 9, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 91, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 122, 123, 124, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 227, 229, 230, 231, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 280, 281, 284, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 439, 440, 442, 446, 448, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "normal": [5, 20, 22, 23, 25, 30, 32, 33, 34, 37, 44, 48, 50, 55, 57, 62, 65, 67, 71, 72, 74, 75, 84, 89, 91, 92, 93, 99, 100, 103, 104, 106, 107, 108, 118, 120, 137, 138, 141, 142, 144, 148, 153, 155, 164, 166, 173, 174, 178, 180, 183, 185, 187, 190, 192, 193, 195, 197, 199, 202, 205, 206, 208, 210, 211, 215, 217, 218, 222, 223, 227, 231, 232, 239, 243, 244, 245, 255, 263, 264, 265, 266, 270, 272, 273, 279, 280, 285, 287, 289, 290, 293, 294, 296, 299, 305, 308, 311, 316, 317, 318, 321, 328, 330, 332, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 356, 358, 359, 360, 361, 362, 364, 365, 368, 370, 372, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 396, 398, 403, 406, 407, 410, 411, 412, 415, 417, 418, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 437, 451, 457, 459, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "correspond": [5, 9, 18, 22, 23, 30, 32, 39, 44, 48, 55, 57, 60, 62, 63, 67, 70, 72, 74, 75, 78, 84, 91, 93, 94, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 113, 115, 118, 120, 124, 126, 131, 135, 137, 144, 148, 153, 155, 160, 164, 167, 172, 173, 174, 175, 180, 181, 183, 186, 188, 190, 196, 205, 206, 209, 210, 215, 216, 219, 222, 223, 227, 230, 232, 235, 240, 242, 244, 245, 247, 248, 252, 256, 258, 259, 263, 264, 265, 266, 268, 280, 289, 290, 292, 304, 305, 311, 316, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 341, 342, 344, 345, 348, 349, 351, 354, 360, 361, 362, 365, 371, 372, 377, 382, 383, 384, 385, 390, 393, 395, 398, 399, 402, 406, 407, 411, 413, 415, 418, 419, 423, 424, 425, 426, 427, 428, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "address": [5, 9, 23, 41, 50, 57, 62, 63, 67, 72, 74, 84, 99, 100, 104, 110, 119, 124, 126, 131, 140, 161, 167, 173, 180, 188, 190, 191, 197, 200, 205, 206, 209, 212, 222, 239, 240, 242, 253, 259, 264, 266, 267, 268, 281, 282, 316, 319, 332, 334, 335, 337, 338, 358, 378, 382, 390, 394, 403, 416, 424, 452, 458, 460, 461, 463, 464, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479], "follow": [5, 7, 9, 18, 23, 28, 32, 33, 38, 40, 41, 44, 54, 56, 57, 60, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 130, 131, 133, 135, 137, 138, 139, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 164, 166, 167, 172, 173, 174, 175, 176, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 204, 205, 206, 209, 210, 212, 213, 215, 217, 218, 222, 223, 225, 227, 230, 231, 232, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 275, 280, 281, 284, 285, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 309, 311, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "descript": [5, 23, 24, 52, 57, 58, 62, 63, 67, 72, 88, 92, 96, 98, 99, 100, 108, 115, 118, 120, 126, 139, 157, 172, 173, 174, 179, 187, 188, 190, 193, 197, 198, 199, 202, 209, 212, 227, 238, 242, 247, 248, 252, 256, 263, 264, 265, 267, 270, 275, 281, 285, 289, 290, 294, 295, 297, 304, 310, 312, 319, 329, 330, 334, 337, 338, 341, 347, 352, 355, 357, 358, 362, 365, 371, 372, 382, 384, 395, 397, 404, 410, 411, 415, 416, 423, 424, 425, 426, 430, 432, 447, 451, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 471, 473, 474, 476, 478, 479], "quot": [5, 67, 78, 83, 84, 86, 87, 89, 103, 106, 124, 135, 144, 155, 172, 173, 191, 192, 193, 194, 195, 199, 200, 202, 205, 206, 214, 219, 232, 235, 244, 245, 253, 259, 282, 294, 314, 316, 328, 337, 341, 342, 345, 356, 360, 363, 380, 382, 391, 409, 413, 422, 423, 427, 430, 431, 442, 445, 447, 457, 458, 461, 463, 470, 471, 472, 476, 479], "form": [5, 7, 23, 30, 32, 33, 36, 37, 53, 54, 62, 67, 71, 72, 78, 83, 84, 88, 89, 91, 94, 97, 99, 100, 103, 106, 107, 108, 118, 120, 124, 142, 149, 155, 158, 164, 166, 173, 174, 175, 178, 180, 183, 184, 187, 188, 190, 193, 194, 195, 197, 200, 202, 203, 205, 206, 210, 218, 222, 223, 225, 227, 239, 241, 242, 245, 248, 252, 254, 256, 258, 263, 264, 265, 266, 268, 270, 273, 280, 285, 290, 293, 295, 299, 301, 302, 304, 316, 331, 334, 337, 338, 339, 341, 342, 343, 344, 349, 354, 358, 360, 361, 362, 363, 364, 365, 372, 380, 383, 384, 385, 386, 390, 391, 394, 396, 401, 403, 404, 406, 409, 415, 417, 421, 422, 423, 424, 425, 427, 428, 431, 432, 435, 451, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "entri": [5, 13, 22, 26, 27, 30, 32, 44, 48, 50, 57, 62, 67, 72, 74, 86, 88, 92, 93, 94, 96, 100, 106, 107, 108, 112, 118, 124, 133, 137, 142, 148, 155, 157, 164, 166, 173, 174, 178, 181, 183, 188, 190, 192, 213, 222, 223, 227, 230, 233, 240, 244, 245, 247, 252, 258, 262, 265, 266, 267, 268, 269, 277, 278, 280, 281, 289, 290, 293, 296, 299, 304, 305, 311, 313, 316, 318, 321, 327, 328, 330, 332, 336, 337, 338, 341, 348, 349, 350, 354, 356, 358, 361, 365, 371, 372, 374, 377, 380, 381, 385, 386, 396, 398, 399, 401, 417, 418, 421, 425, 426, 448, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 479], "round": [5, 62, 63, 67, 120, 147, 170, 180, 187, 190, 218, 222, 240, 251, 258, 272, 286, 287, 290, 315, 340, 341, 342, 344, 349, 374, 380, 382, 384, 397, 424, 426, 438, 440, 445, 446, 447, 448, 458, 460, 462, 463, 464, 465, 466, 467, 472, 473, 476, 477, 479], "match": [5, 11, 22, 23, 32, 41, 44, 60, 62, 63, 67, 72, 77, 84, 88, 91, 93, 94, 99, 100, 106, 107, 116, 124, 134, 137, 138, 139, 142, 148, 149, 153, 160, 164, 174, 180, 183, 184, 187, 188, 190, 193, 194, 200, 201, 202, 205, 208, 210, 213, 216, 222, 223, 225, 239, 240, 243, 244, 245, 248, 251, 252, 258, 261, 264, 265, 267, 269, 280, 284, 285, 290, 293, 294, 299, 305, 308, 311, 315, 317, 320, 328, 329, 330, 334, 337, 338, 341, 342, 344, 345, 347, 349, 354, 355, 358, 359, 362, 365, 371, 372, 374, 377, 378, 381, 382, 384, 385, 390, 391, 396, 397, 399, 406, 407, 409, 411, 416, 421, 425, 426, 427, 429, 431, 441, 451, 452, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "squar": [5, 32, 62, 84, 86, 88, 93, 94, 106, 139, 152, 174, 178, 183, 258, 272, 294, 305, 337, 340, 341, 380, 390, 409, 423, 424, 426, 430, 431, 432, 436, 438, 445, 460, 461, 464, 468, 477, 479], "bracket": [5, 32, 62, 94, 100, 103, 106, 142, 206, 217, 222, 268, 294, 316, 337, 341, 382, 383, 390, 406, 409, 423, 424, 426, 430, 431, 432, 463, 464, 465, 479], "variabl": [5, 9, 13, 16, 18, 22, 23, 26, 28, 30, 31, 33, 34, 41, 44, 51, 52, 54, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 86, 88, 91, 92, 93, 94, 98, 100, 101, 103, 106, 107, 108, 110, 112, 116, 124, 137, 139, 149, 150, 152, 153, 160, 161, 164, 171, 174, 185, 188, 190, 206, 210, 211, 212, 220, 222, 225, 227, 242, 244, 245, 246, 247, 251, 252, 258, 261, 263, 264, 278, 280, 292, 294, 296, 298, 308, 310, 312, 316, 317, 321, 324, 328, 329, 330, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 354, 358, 361, 362, 363, 364, 372, 377, 378, 380, 381, 382, 384, 385, 390, 391, 395, 396, 399, 401, 403, 404, 406, 407, 408, 416, 421, 423, 424, 425, 426, 427, 428, 431, 432, 436, 437, 444, 445, 448, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479], "whose": [5, 23, 30, 32, 34, 41, 44, 59, 60, 62, 72, 84, 89, 92, 100, 118, 120, 166, 172, 173, 174, 178, 180, 183, 190, 195, 197, 200, 202, 205, 208, 210, 212, 213, 218, 222, 223, 225, 230, 239, 240, 241, 249, 252, 255, 263, 264, 265, 266, 268, 280, 289, 290, 293, 294, 296, 304, 305, 309, 316, 319, 329, 330, 331, 334, 336, 337, 341, 342, 349, 354, 356, 358, 361, 362, 365, 372, 376, 377, 384, 385, 386, 391, 396, 398, 401, 409, 411, 423, 424, 426, 428, 431, 458, 459, 460, 462, 463, 464, 465, 470, 472, 473, 474, 476, 477, 479], "should": [5, 7, 10, 11, 13, 22, 23, 25, 27, 28, 30, 32, 33, 36, 41, 44, 51, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 113, 115, 118, 120, 124, 126, 130, 131, 133, 135, 137, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 177, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 279, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 306, 308, 311, 315, 316, 317, 318, 319, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 349, 351, 354, 355, 356, 358, 360, 361, 362, 363, 365, 367, 370, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 423, 424, 425, 426, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "pass": [5, 7, 9, 11, 13, 17, 22, 23, 27, 28, 32, 33, 34, 41, 42, 44, 46, 48, 51, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 89, 91, 92, 93, 97, 98, 99, 102, 103, 104, 106, 107, 108, 110, 112, 114, 116, 118, 120, 124, 131, 133, 135, 136, 137, 138, 139, 142, 144, 147, 148, 149, 152, 153, 154, 155, 157, 160, 163, 164, 166, 167, 169, 170, 172, 174, 175, 178, 180, 187, 188, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 222, 223, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 272, 275, 276, 278, 280, 285, 289, 290, 292, 293, 294, 296, 302, 304, 305, 306, 308, 311, 316, 317, 318, 319, 322, 327, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 349, 351, 354, 355, 358, 360, 361, 362, 363, 365, 371, 372, 374, 376, 377, 379, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 431, 439, 441, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "allow": [5, 7, 9, 22, 23, 32, 33, 34, 40, 41, 42, 44, 48, 57, 58, 60, 62, 63, 67, 70, 71, 72, 74, 75, 78, 83, 84, 88, 89, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 106, 107, 110, 112, 113, 118, 120, 124, 130, 131, 133, 135, 136, 137, 141, 148, 149, 151, 152, 154, 155, 157, 158, 160, 164, 166, 170, 172, 173, 174, 177, 178, 180, 183, 186, 187, 188, 190, 191, 192, 193, 199, 200, 202, 205, 207, 208, 210, 211, 212, 215, 218, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 250, 252, 255, 258, 259, 262, 263, 264, 265, 266, 268, 272, 273, 275, 276, 280, 284, 285, 289, 290, 292, 293, 294, 296, 299, 302, 304, 305, 308, 310, 311, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 343, 345, 349, 350, 352, 354, 358, 360, 361, 362, 365, 370, 371, 372, 373, 376, 378, 380, 381, 382, 384, 385, 386, 390, 391, 393, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 409, 411, 412, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 431, 432, 437, 439, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "access": [5, 7, 11, 16, 23, 30, 32, 44, 46, 48, 49, 53, 54, 58, 59, 60, 62, 67, 71, 72, 74, 75, 76, 78, 83, 84, 86, 89, 92, 96, 97, 99, 100, 102, 103, 105, 106, 107, 108, 116, 120, 134, 136, 137, 140, 144, 147, 149, 152, 155, 157, 158, 161, 166, 167, 172, 174, 178, 180, 183, 188, 190, 191, 193, 197, 200, 202, 204, 207, 209, 210, 214, 215, 216, 218, 222, 223, 227, 230, 232, 239, 240, 241, 242, 243, 244, 247, 250, 251, 252, 253, 254, 255, 256, 258, 261, 264, 266, 268, 272, 273, 275, 277, 278, 279, 280, 289, 290, 292, 294, 296, 299, 309, 311, 312, 316, 317, 319, 321, 325, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 342, 345, 349, 350, 354, 355, 356, 358, 361, 363, 365, 371, 372, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 398, 400, 402, 403, 405, 406, 407, 408, 409, 411, 416, 418, 421, 422, 423, 425, 426, 428, 432, 445, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 477, 478, 479], "an": [5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 73, 74, 75, 76, 79, 86, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 118, 120, 121, 124, 126, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 164, 167, 170, 172, 173, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 218, 222, 223, 225, 227, 230, 231, 232, 233, 235, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 277, 278, 280, 281, 282, 284, 285, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 445, 447, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "as": [5, 6, 7, 8, 9, 11, 13, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 48, 50, 51, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 91, 92, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 434, 437, 439, 440, 442, 446, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 478, 479, 480], "chunk": [5, 13, 42, 67, 77, 84, 89, 100, 104, 106, 131, 147, 163, 177, 222, 232, 237, 239, 251, 255, 258, 259, 267, 280, 281, 290, 300, 311, 329, 331, 334, 344, 347, 391, 403, 411, 412, 426, 458, 461, 463, 465, 469, 470, 475, 479], "you": [5, 13, 22, 23, 25, 26, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 112, 113, 115, 118, 120, 121, 124, 131, 138, 139, 141, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 187, 189, 190, 192, 193, 195, 197, 198, 199, 202, 203, 204, 205, 208, 210, 211, 212, 215, 218, 222, 223, 227, 231, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 255, 256, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 275, 280, 285, 289, 290, 292, 293, 294, 296, 297, 302, 304, 305, 310, 311, 316, 317, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 349, 351, 354, 355, 356, 358, 360, 361, 363, 365, 367, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 430, 432, 437, 438, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "don": [5, 8, 9, 18, 23, 28, 32, 33, 34, 48, 57, 58, 62, 72, 74, 75, 78, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 106, 108, 118, 120, 124, 131, 135, 137, 142, 149, 150, 151, 152, 156, 157, 160, 164, 166, 173, 176, 178, 180, 187, 188, 190, 197, 206, 213, 222, 223, 227, 239, 240, 247, 254, 255, 256, 259, 264, 265, 266, 272, 280, 285, 289, 290, 292, 293, 294, 296, 304, 305, 316, 325, 327, 329, 332, 334, 337, 338, 341, 361, 363, 365, 372, 382, 384, 385, 386, 391, 395, 397, 398, 401, 403, 409, 422, 423, 424, 426, 427, 428, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 474, 475, 477, 478, 479], "have": [5, 7, 11, 18, 22, 23, 27, 28, 30, 32, 33, 34, 41, 44, 46, 48, 51, 57, 58, 59, 62, 63, 66, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 127, 130, 135, 136, 137, 138, 139, 141, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 164, 166, 167, 172, 173, 174, 175, 176, 178, 180, 181, 183, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 208, 210, 212, 215, 218, 220, 222, 223, 227, 231, 232, 238, 239, 240, 241, 244, 245, 247, 248, 249, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 302, 304, 305, 308, 309, 311, 315, 316, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 365, 367, 371, 372, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 401, 403, 404, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "provid": [5, 7, 11, 18, 23, 25, 28, 30, 32, 33, 36, 39, 41, 42, 44, 46, 48, 50, 53, 57, 60, 62, 63, 65, 67, 71, 73, 74, 78, 83, 84, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 112, 113, 115, 118, 120, 122, 124, 131, 135, 137, 139, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 164, 166, 167, 169, 170, 172, 173, 174, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 221, 222, 223, 225, 227, 230, 231, 232, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 285, 287, 289, 290, 292, 293, 295, 297, 299, 301, 302, 304, 305, 308, 309, 311, 312, 316, 317, 318, 319, 321, 323, 325, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 428, 431, 432, 436, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "raw": [5, 7, 16, 31, 62, 67, 99, 103, 116, 118, 120, 149, 164, 173, 174, 188, 190, 193, 194, 202, 203, 204, 222, 227, 252, 267, 280, 285, 290, 293, 295, 296, 326, 328, 334, 335, 338, 341, 359, 362, 363, 365, 377, 379, 391, 394, 398, 411, 423, 431, 445, 459, 461, 463, 464, 466, 469, 470, 472, 474, 479], "storag": [5, 31, 34, 41, 54, 67, 86, 92, 98, 100, 106, 155, 164, 174, 188, 247, 255, 258, 281, 290, 297, 327, 337, 341, 344, 409, 436, 460, 463, 464, 465, 470, 472, 473, 479], "return": [5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 77, 78, 83, 85, 86, 87, 88, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 118, 120, 123, 124, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 169, 170, 172, 174, 175, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 230, 231, 232, 233, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 281, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 394, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 431, 436, 437, 439, 445, 446, 447, 448, 451, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "unicod": [5, 16, 27, 30, 31, 38, 44, 58, 62, 64, 67, 79, 84, 86, 89, 91, 95, 100, 102, 103, 110, 117, 119, 141, 143, 144, 164, 172, 173, 174, 179, 180, 183, 190, 191, 192, 193, 194, 197, 198, 199, 200, 205, 206, 210, 218, 222, 227, 235, 236, 237, 244, 251, 255, 259, 263, 279, 290, 291, 293, 296, 299, 316, 337, 341, 342, 343, 349, 359, 374, 382, 390, 396, 401, 403, 407, 408, 409, 418, 421, 424, 426, 431, 438, 451, 452, 459, 463, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480], "byte": [5, 7, 12, 16, 18, 23, 24, 25, 26, 28, 30, 32, 33, 38, 40, 41, 42, 48, 57, 58, 60, 62, 63, 65, 67, 77, 78, 83, 84, 86, 89, 91, 92, 93, 98, 100, 102, 103, 104, 107, 111, 115, 116, 119, 120, 124, 125, 131, 134, 135, 139, 140, 141, 143, 144, 147, 149, 151, 155, 158, 163, 164, 174, 175, 179, 181, 183, 185, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 205, 209, 210, 212, 220, 222, 227, 231, 232, 234, 239, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 261, 263, 265, 266, 267, 268, 271, 275, 279, 280, 281, 284, 285, 290, 292, 293, 295, 296, 301, 306, 308, 311, 314, 315, 316, 319, 321, 325, 329, 330, 332, 333, 334, 335, 337, 338, 339, 345, 346, 349, 354, 355, 358, 365, 373, 374, 378, 382, 391, 394, 396, 397, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 415, 417, 418, 420, 421, 423, 424, 426, 427, 428, 436, 442, 446, 447, 451, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "area": [5, 7, 41, 44, 62, 91, 93, 99, 100, 106, 174, 193, 202, 222, 244, 255, 275, 296, 319, 334, 338, 367, 372, 430, 442, 458, 463, 464, 473, 476], "unless": [5, 7, 9, 13, 22, 23, 26, 27, 30, 32, 41, 50, 53, 55, 57, 58, 62, 72, 75, 84, 93, 94, 98, 99, 102, 103, 104, 108, 110, 112, 115, 118, 120, 124, 137, 138, 139, 147, 148, 158, 164, 166, 172, 178, 180, 183, 188, 190, 193, 197, 202, 203, 206, 222, 223, 239, 240, 241, 244, 247, 252, 255, 256, 258, 264, 265, 267, 268, 272, 278, 280, 285, 289, 290, 294, 306, 311, 316, 320, 325, 326, 329, 331, 332, 334, 335, 337, 338, 341, 342, 345, 349, 350, 354, 355, 360, 361, 382, 384, 385, 390, 391, 395, 396, 398, 402, 403, 408, 411, 422, 423, 424, 425, 426, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 475, 476, 477, 478, 479], "otherwis": [5, 7, 11, 13, 18, 22, 23, 27, 28, 30, 32, 33, 38, 39, 41, 42, 44, 46, 48, 51, 53, 57, 58, 60, 62, 63, 65, 72, 75, 78, 89, 93, 94, 99, 100, 102, 103, 104, 107, 110, 115, 118, 120, 124, 127, 131, 133, 137, 139, 144, 147, 148, 152, 153, 154, 155, 160, 164, 166, 167, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 192, 193, 194, 196, 197, 199, 202, 203, 205, 206, 207, 208, 211, 213, 215, 222, 223, 227, 231, 239, 240, 241, 242, 244, 247, 248, 249, 252, 254, 255, 256, 258, 259, 264, 265, 266, 268, 272, 273, 275, 280, 289, 290, 293, 294, 296, 298, 299, 301, 302, 304, 308, 309, 311, 316, 318, 321, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 345, 349, 350, 351, 352, 354, 355, 358, 360, 361, 362, 365, 372, 374, 377, 378, 380, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 402, 403, 407, 409, 411, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 431, 432, 438, 451, 452, 457, 459, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "state": [5, 13, 17, 22, 23, 27, 30, 31, 44, 49, 50, 52, 58, 60, 62, 67, 72, 74, 75, 83, 84, 89, 91, 94, 96, 99, 102, 103, 107, 117, 124, 131, 136, 137, 138, 139, 142, 149, 152, 154, 155, 157, 161, 164, 166, 167, 168, 174, 182, 188, 209, 210, 215, 219, 223, 232, 240, 245, 247, 251, 253, 255, 256, 265, 267, 268, 290, 292, 294, 295, 298, 305, 311, 312, 315, 317, 320, 322, 325, 330, 334, 335, 337, 338, 341, 345, 349, 358, 361, 362, 364, 365, 371, 377, 381, 384, 385, 386, 390, 391, 396, 398, 401, 407, 408, 421, 422, 424, 426, 428, 437, 448, 458, 460, 461, 463, 470, 471, 472, 473, 476, 477, 478, 479], "nul": [5, 7, 62, 67, 89, 116, 173, 174, 175, 234, 266, 281, 290, 293, 311, 344, 349, 415, 471, 472, 479], "termin": [5, 7, 9, 30, 32, 33, 36, 38, 44, 57, 59, 60, 62, 63, 65, 67, 72, 83, 84, 91, 94, 98, 99, 100, 106, 108, 113, 116, 118, 124, 128, 130, 131, 135, 137, 138, 153, 161, 172, 173, 175, 186, 187, 188, 190, 204, 205, 211, 216, 222, 226, 239, 242, 244, 251, 252, 255, 258, 262, 263, 266, 268, 280, 285, 289, 294, 299, 305, 316, 319, 330, 332, 335, 337, 338, 341, 342, 345, 349, 356, 357, 361, 365, 373, 380, 387, 391, 396, 401, 403, 407, 409, 411, 422, 423, 425, 426, 428, 431, 432, 437, 451, 458, 462, 463, 464, 466, 471, 472, 474, 476, 477, 479], "there": [5, 7, 9, 13, 18, 22, 23, 25, 26, 27, 30, 32, 33, 34, 37, 38, 40, 41, 44, 45, 48, 50, 54, 56, 57, 58, 59, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 106, 107, 108, 112, 113, 118, 120, 124, 130, 131, 135, 137, 141, 142, 149, 151, 152, 153, 154, 155, 156, 160, 163, 164, 166, 167, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 193, 194, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 210, 212, 213, 215, 222, 223, 225, 227, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 255, 256, 258, 262, 263, 264, 265, 266, 268, 272, 275, 278, 280, 284, 285, 289, 290, 292, 293, 294, 296, 301, 302, 304, 305, 310, 311, 315, 316, 321, 322, 325, 327, 328, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 354, 355, 358, 360, 361, 362, 363, 365, 371, 372, 374, 380, 382, 383, 384, 385, 386, 390, 391, 395, 396, 398, 403, 404, 405, 406, 407, 409, 410, 411, 412, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 439, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "way": [5, 7, 9, 13, 23, 25, 30, 32, 33, 34, 41, 44, 51, 57, 58, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 118, 120, 122, 124, 131, 137, 139, 142, 149, 152, 154, 155, 156, 158, 160, 164, 166, 169, 170, 173, 174, 178, 180, 183, 185, 187, 190, 191, 192, 193, 197, 198, 202, 204, 205, 206, 208, 222, 225, 227, 232, 240, 244, 245, 247, 248, 252, 255, 256, 258, 263, 264, 265, 266, 267, 268, 272, 275, 277, 280, 281, 289, 290, 292, 293, 294, 296, 304, 305, 315, 316, 321, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 344, 345, 349, 350, 354, 358, 361, 363, 365, 371, 374, 377, 380, 382, 383, 384, 385, 386, 391, 394, 396, 398, 399, 403, 406, 409, 411, 415, 416, 417, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "can": [5, 7, 11, 13, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 40, 41, 42, 44, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 118, 120, 121, 124, 126, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 160, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 222, 223, 225, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 304, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 368, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 439, 440, 442, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "convert": [5, 7, 18, 25, 32, 38, 46, 54, 55, 57, 58, 63, 65, 67, 71, 72, 74, 75, 83, 91, 92, 93, 94, 98, 99, 100, 103, 108, 110, 115, 118, 124, 137, 139, 142, 146, 152, 153, 155, 157, 161, 164, 172, 173, 174, 175, 178, 180, 181, 183, 187, 188, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 205, 206, 210, 212, 217, 222, 223, 227, 235, 241, 245, 251, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 280, 282, 289, 290, 295, 296, 298, 299, 304, 306, 316, 332, 334, 339, 341, 342, 344, 349, 354, 358, 362, 372, 374, 379, 382, 384, 390, 394, 396, 401, 403, 407, 409, 411, 415, 421, 423, 424, 426, 431, 432, 439, 442, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "such": [5, 7, 13, 18, 23, 25, 27, 28, 30, 32, 33, 34, 37, 41, 44, 50, 56, 57, 60, 62, 63, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 105, 106, 107, 108, 110, 113, 118, 120, 124, 130, 131, 135, 137, 139, 142, 144, 148, 149, 153, 155, 156, 158, 164, 166, 169, 172, 173, 174, 178, 180, 181, 183, 187, 190, 191, 193, 194, 199, 200, 202, 204, 205, 206, 208, 209, 210, 212, 213, 222, 223, 227, 231, 232, 235, 240, 242, 244, 245, 247, 248, 250, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 268, 269, 272, 275, 278, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 299, 301, 304, 305, 310, 311, 316, 321, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 349, 351, 354, 355, 357, 358, 361, 362, 365, 371, 372, 373, 376, 377, 380, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 396, 398, 402, 403, 405, 406, 407, 408, 409, 411, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 432, 439, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "fill": [5, 7, 22, 32, 33, 37, 41, 44, 46, 54, 59, 62, 63, 67, 74, 75, 84, 91, 94, 98, 100, 102, 107, 115, 118, 120, 136, 149, 172, 173, 174, 180, 183, 190, 193, 198, 202, 219, 222, 242, 244, 247, 251, 255, 258, 266, 290, 332, 334, 337, 338, 341, 342, 344, 345, 358, 359, 362, 365, 424, 426, 428, 448, 452, 458, 460, 461, 462, 463, 464, 470, 471, 472, 474, 475, 479], "py_buff": [5, 7, 42, 56, 62, 67, 464, 469, 472, 479], "thislock": [5, 30, 31, 50, 62, 67, 72, 75, 83, 86, 98, 100, 104, 113, 122, 140, 161, 163, 164, 166, 173, 209, 212, 223, 238, 255, 264, 266, 267, 268, 279, 280, 282, 290, 302, 313, 319, 321, 327, 330, 335, 337, 339, 349, 358, 365, 382, 398, 400, 424, 448, 458, 460, 462, 463, 464, 465, 466, 469, 470, 471, 474, 476, 477, 478, 479, 480], "under": [5, 7, 13, 18, 23, 32, 33, 41, 42, 44, 53, 57, 60, 65, 67, 73, 83, 84, 91, 92, 94, 99, 100, 102, 103, 105, 108, 118, 124, 130, 131, 133, 143, 147, 149, 151, 153, 155, 158, 166, 172, 173, 174, 180, 187, 190, 193, 196, 200, 205, 209, 210, 212, 213, 222, 223, 227, 231, 232, 239, 244, 252, 255, 258, 259, 264, 265, 266, 267, 268, 272, 275, 278, 280, 281, 289, 290, 292, 293, 294, 296, 302, 305, 311, 317, 319, 325, 326, 327, 328, 329, 330, 334, 335, 337, 338, 339, 341, 345, 349, 351, 356, 358, 361, 362, 365, 367, 371, 372, 376, 377, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 399, 401, 402, 403, 406, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "so": [5, 7, 11, 13, 22, 23, 25, 27, 28, 30, 32, 33, 34, 40, 41, 44, 48, 51, 53, 56, 58, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 116, 118, 120, 124, 135, 137, 138, 139, 141, 148, 149, 151, 152, 154, 155, 156, 164, 166, 167, 170, 173, 174, 175, 176, 178, 180, 183, 187, 188, 190, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 215, 218, 222, 223, 225, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 247, 250, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 275, 280, 281, 289, 290, 293, 294, 296, 299, 305, 309, 311, 316, 322, 325, 326, 328, 329, 330, 331, 332, 334, 337, 338, 341, 342, 344, 345, 349, 350, 351, 354, 355, 358, 360, 361, 362, 363, 365, 371, 372, 374, 380, 381, 382, 384, 385, 386, 391, 395, 397, 398, 401, 402, 403, 405, 406, 407, 409, 411, 412, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 432, 440, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480], "subsequ": [5, 23, 32, 44, 59, 63, 84, 87, 92, 99, 103, 113, 118, 156, 174, 187, 188, 199, 203, 205, 208, 223, 240, 247, 252, 255, 258, 265, 266, 268, 275, 280, 289, 290, 316, 329, 334, 338, 341, 342, 349, 352, 354, 361, 365, 371, 380, 385, 391, 422, 423, 426, 428, 430, 432, 461, 462, 463, 464, 465, 467, 474, 477, 479], "even": [5, 9, 18, 23, 26, 30, 32, 33, 41, 44, 56, 57, 58, 62, 63, 72, 75, 83, 84, 88, 89, 92, 93, 94, 98, 100, 102, 103, 104, 105, 106, 108, 110, 118, 120, 124, 130, 137, 144, 149, 152, 155, 158, 160, 164, 166, 173, 174, 178, 180, 183, 185, 190, 191, 193, 195, 196, 202, 203, 204, 205, 208, 210, 211, 212, 215, 218, 222, 223, 232, 240, 244, 247, 248, 252, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 272, 280, 289, 290, 293, 294, 296, 304, 305, 315, 316, 328, 329, 330, 331, 332, 334, 337, 338, 341, 342, 344, 349, 350, 354, 356, 358, 360, 361, 362, 365, 372, 378, 380, 382, 383, 384, 385, 386, 391, 395, 396, 398, 399, 401, 403, 407, 411, 413, 415, 418, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 478, 479], "insid": [5, 7, 11, 32, 41, 62, 67, 75, 84, 89, 91, 94, 103, 104, 111, 112, 120, 133, 142, 166, 172, 174, 183, 193, 196, 202, 207, 222, 223, 248, 249, 255, 259, 278, 280, 281, 293, 294, 296, 299, 316, 329, 330, 334, 342, 365, 371, 372, 380, 382, 384, 385, 386, 409, 416, 418, 419, 423, 424, 425, 426, 431, 445, 457, 459, 460, 461, 462, 463, 464, 466, 469, 470, 471, 473, 475, 476, 477, 479], "py_begin_allow_thread": [5, 32, 56, 72], "block": [5, 7, 23, 32, 41, 44, 54, 62, 67, 72, 74, 76, 89, 91, 92, 103, 107, 110, 112, 113, 115, 120, 123, 124, 131, 132, 133, 135, 136, 137, 142, 144, 147, 166, 173, 174, 175, 182, 183, 185, 187, 188, 190, 196, 204, 205, 209, 210, 212, 220, 222, 223, 229, 231, 232, 239, 240, 244, 245, 252, 254, 255, 258, 266, 270, 279, 280, 281, 285, 290, 292, 293, 302, 310, 313, 319, 322, 324, 325, 326, 327, 329, 330, 332, 334, 337, 339, 345, 348, 349, 354, 355, 358, 361, 365, 382, 384, 385, 391, 397, 399, 401, 402, 407, 412, 424, 425, 426, 427, 428, 432, 451, 459, 460, 461, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "without": [5, 7, 8, 9, 13, 22, 23, 25, 26, 28, 32, 33, 34, 37, 38, 41, 44, 48, 50, 53, 54, 56, 57, 58, 60, 62, 65, 67, 71, 72, 74, 75, 78, 84, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 103, 104, 105, 108, 112, 113, 118, 120, 124, 131, 133, 135, 137, 138, 147, 149, 153, 155, 164, 166, 167, 170, 172, 173, 174, 178, 180, 181, 183, 185, 187, 188, 189, 190, 191, 193, 194, 199, 202, 205, 206, 208, 210, 211, 215, 222, 223, 225, 227, 231, 232, 240, 241, 245, 247, 249, 250, 252, 255, 256, 258, 262, 263, 264, 267, 268, 272, 275, 279, 280, 285, 289, 290, 292, 293, 294, 296, 302, 305, 306, 311, 315, 316, 319, 320, 321, 322, 325, 327, 329, 331, 334, 337, 338, 341, 342, 344, 345, 349, 350, 354, 355, 358, 360, 361, 362, 363, 364, 365, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 403, 406, 407, 409, 412, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 437, 445, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "risk": [5, 41, 42, 72, 84, 94, 124, 210, 265, 268, 280, 289, 296, 358, 380, 409, 417, 422, 464, 471, 476, 477, 479], "mutabl": [5, 27, 28, 32, 34, 62, 67, 84, 86, 94, 98, 158, 168, 173, 184, 200, 212, 222, 223, 252, 280, 281, 288, 290, 294, 296, 312, 327, 398, 409, 420, 423, 424, 426, 432, 436, 438, 445, 458, 461, 463, 464, 465, 466, 469, 470, 475, 478, 479], "data": [5, 7, 9, 13, 28, 31, 32, 41, 48, 53, 54, 55, 57, 59, 62, 63, 64, 67, 71, 72, 73, 74, 76, 78, 83, 87, 88, 89, 91, 92, 96, 98, 100, 101, 103, 105, 108, 112, 113, 115, 116, 117, 118, 119, 120, 124, 131, 132, 134, 135, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 154, 155, 157, 161, 163, 164, 166, 172, 174, 175, 176, 179, 180, 181, 183, 187, 188, 192, 193, 194, 195, 198, 200, 203, 204, 205, 209, 210, 212, 220, 222, 223, 227, 231, 232, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 258, 259, 263, 264, 266, 268, 269, 270, 271, 273, 275, 278, 280, 281, 285, 287, 289, 290, 292, 293, 297, 299, 301, 305, 306, 311, 312, 313, 315, 316, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 349, 351, 354, 355, 356, 357, 358, 359, 362, 364, 368, 371, 372, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 390, 391, 393, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 426, 428, 429, 435, 436, 439, 441, 447, 452, 454, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480], "being": [5, 7, 13, 22, 23, 27, 28, 32, 34, 37, 44, 59, 60, 62, 63, 65, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 112, 118, 120, 124, 131, 137, 147, 148, 149, 155, 156, 158, 160, 164, 166, 167, 172, 173, 174, 178, 180, 181, 188, 190, 192, 193, 199, 202, 205, 208, 210, 213, 215, 222, 223, 227, 231, 244, 245, 247, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 273, 275, 280, 289, 290, 292, 293, 294, 296, 299, 304, 305, 306, 309, 311, 315, 316, 317, 321, 325, 326, 327, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 358, 360, 361, 362, 363, 365, 372, 377, 382, 384, 385, 386, 390, 395, 396, 398, 403, 406, 409, 410, 411, 413, 417, 418, 422, 423, 424, 426, 428, 430, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "resiz": [5, 8, 9, 28, 41, 53, 55, 59, 63, 67, 116, 173, 174, 255, 275, 330, 341, 365, 371, 372, 380, 384, 474, 476, 479], "destroy": [5, 11, 13, 22, 27, 32, 51, 59, 62, 66, 86, 94, 98, 244, 255, 275, 280, 281, 289, 342, 361, 365, 384, 396, 398, 401, 424, 428, 458, 460, 461, 463, 471, 475, 476, 478, 479], "result": [5, 7, 8, 9, 13, 23, 26, 30, 32, 33, 34, 38, 41, 44, 46, 48, 52, 53, 57, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 108, 112, 115, 118, 120, 121, 123, 124, 127, 131, 133, 135, 136, 137, 139, 140, 141, 142, 144, 149, 150, 152, 155, 156, 157, 160, 161, 163, 164, 166, 167, 170, 173, 174, 175, 178, 180, 182, 183, 187, 188, 190, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 216, 222, 223, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 249, 251, 252, 253, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 302, 304, 305, 306, 308, 315, 316, 318, 319, 321, 325, 328, 329, 330, 332, 334, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 351, 354, 355, 358, 360, 361, 362, 363, 365, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 391, 393, 394, 396, 398, 399, 401, 403, 405, 406, 407, 409, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 431, 432, 437, 439, 440, 442, 446, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pybuffer_releas": [5, 7, 47, 56, 62, 89, 464, 469, 479], "after": [5, 7, 8, 13, 18, 23, 26, 27, 28, 32, 33, 38, 41, 44, 57, 58, 60, 62, 63, 67, 70, 71, 72, 75, 84, 87, 88, 89, 91, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 110, 113, 115, 118, 120, 124, 126, 131, 133, 137, 138, 141, 142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 164, 166, 167, 172, 173, 174, 176, 178, 180, 182, 183, 187, 188, 190, 192, 193, 202, 203, 204, 206, 207, 209, 210, 212, 213, 215, 222, 225, 229, 231, 232, 239, 242, 244, 245, 247, 252, 255, 258, 263, 264, 265, 266, 267, 268, 272, 275, 276, 279, 280, 281, 285, 289, 290, 292, 293, 294, 297, 302, 305, 306, 311, 316, 317, 321, 322, 325, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 354, 356, 357, 358, 360, 361, 362, 363, 365, 371, 372, 377, 378, 380, 382, 384, 385, 386, 391, 395, 396, 397, 398, 401, 403, 406, 409, 411, 412, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "finish": [5, 33, 41, 60, 62, 67, 71, 78, 83, 84, 89, 96, 99, 100, 120, 122, 123, 124, 126, 133, 135, 136, 137, 142, 147, 153, 166, 210, 239, 253, 255, 267, 280, 281, 311, 313, 330, 335, 337, 338, 341, 345, 354, 358, 364, 367, 384, 399, 407, 408, 409, 412, 415, 418, 423, 424, 448, 451, 463, 464, 471, 472, 474, 475, 478, 479], "process": [5, 7, 23, 31, 33, 38, 44, 50, 57, 62, 64, 65, 67, 71, 72, 74, 76, 77, 78, 83, 89, 91, 94, 96, 97, 99, 103, 104, 106, 107, 108, 110, 112, 113, 116, 118, 120, 128, 131, 132, 135, 138, 143, 147, 148, 149, 153, 155, 161, 163, 166, 172, 173, 174, 180, 183, 190, 197, 198, 200, 207, 209, 210, 211, 215, 222, 223, 225, 227, 229, 232, 237, 238, 242, 244, 245, 247, 251, 252, 254, 257, 258, 263, 264, 265, 266, 267, 268, 275, 277, 289, 292, 293, 296, 305, 306, 311, 312, 313, 316, 319, 321, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 339, 341, 343, 344, 345, 349, 350, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 367, 374, 376, 377, 380, 381, 382, 390, 391, 394, 395, 396, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 421, 423, 424, 426, 428, 431, 432, 451, 452, 457, 459, 460, 461, 462, 463, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "ani": [5, 7, 8, 9, 11, 13, 18, 22, 23, 24, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 42, 44, 51, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 112, 113, 114, 115, 118, 120, 124, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 148, 149, 150, 152, 153, 154, 155, 156, 160, 164, 167, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 215, 217, 218, 222, 223, 227, 231, 232, 233, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 280, 281, 285, 288, 289, 290, 292, 293, 294, 296, 299, 302, 305, 306, 310, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 354, 355, 356, 358, 360, 361, 362, 365, 368, 371, 372, 374, 376, 377, 378, 380, 381, 384, 386, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 442, 446, 449, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "earli": [5, 33, 74, 166, 252, 266, 289, 330, 338, 341, 361, 365, 378, 407, 418, 426, 428, 458, 462, 464, 471, 479], "abort": [5, 34, 41, 58, 67, 72, 100, 116, 124, 128, 131, 134, 136, 161, 209, 210, 220, 245, 253, 290, 294, 330, 337, 338, 349, 354, 355, 361, 384, 428, 461, 476, 479], "case": [5, 7, 13, 18, 22, 23, 24, 25, 27, 30, 32, 33, 34, 38, 40, 44, 48, 51, 55, 56, 57, 58, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 118, 120, 122, 124, 131, 133, 137, 139, 142, 144, 147, 149, 152, 153, 155, 156, 160, 164, 166, 170, 172, 173, 174, 175, 178, 180, 183, 184, 185, 187, 188, 190, 192, 193, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 212, 217, 222, 227, 231, 232, 240, 241, 242, 244, 245, 247, 248, 252, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 280, 285, 289, 290, 292, 293, 294, 296, 299, 304, 305, 311, 315, 316, 321, 322, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 349, 350, 354, 355, 356, 358, 361, 362, 363, 365, 371, 372, 374, 378, 380, 382, 383, 385, 386, 390, 391, 395, 396, 397, 401, 403, 405, 406, 407, 409, 411, 412, 416, 417, 421, 424, 425, 426, 427, 428, 431, 432, 437, 439, 440, 446, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "es": [5, 84, 89, 341, 460, 464, 465, 466, 468, 470, 479], "et": [5, 78, 89, 100, 178, 334, 338, 372, 409, 460, 463, 465, 468, 479], "pymem_fre": [5, 18, 33, 41, 56, 58, 63, 461, 463, 479], "other": [5, 7, 9, 11, 13, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 41, 42, 44, 51, 53, 54, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 72, 73, 74, 76, 77, 83, 87, 88, 89, 91, 92, 94, 96, 98, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 116, 120, 124, 130, 131, 135, 139, 142, 143, 144, 148, 149, 150, 151, 152, 155, 156, 158, 160, 164, 166, 167, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 198, 199, 200, 202, 203, 204, 206, 207, 208, 210, 213, 222, 223, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 272, 275, 277, 280, 281, 284, 285, 286, 290, 293, 294, 295, 299, 304, 305, 306, 310, 311, 316, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 361, 362, 363, 365, 372, 374, 376, 378, 380, 381, 383, 384, 385, 386, 390, 391, 394, 395, 396, 398, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 440, 442, 451, 452, 457, 462, 463, 464, 467, 468, 470, 471, 477, 478, 479, 480], "take": [5, 9, 13, 22, 23, 27, 32, 34, 48, 50, 51, 57, 59, 62, 63, 65, 72, 74, 75, 78, 83, 84, 89, 91, 92, 93, 94, 99, 100, 101, 102, 103, 106, 118, 120, 124, 133, 137, 139, 142, 148, 149, 150, 155, 164, 166, 172, 173, 174, 175, 178, 183, 184, 187, 188, 190, 191, 195, 198, 199, 200, 203, 204, 205, 206, 212, 215, 222, 223, 227, 229, 232, 240, 241, 242, 244, 246, 247, 248, 255, 258, 259, 263, 264, 265, 267, 268, 272, 273, 280, 285, 289, 290, 293, 296, 297, 304, 305, 316, 321, 322, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 354, 357, 358, 360, 363, 365, 371, 372, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 403, 404, 406, 407, 408, 409, 411, 413, 415, 417, 418, 423, 424, 426, 428, 432, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479], "str": [5, 10, 18, 22, 24, 25, 26, 32, 33, 34, 38, 48, 57, 58, 62, 63, 65, 67, 74, 75, 77, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 110, 112, 118, 120, 124, 134, 140, 144, 147, 153, 155, 157, 160, 164, 166, 172, 174, 178, 179, 180, 183, 185, 187, 188, 192, 193, 194, 198, 199, 200, 202, 205, 206, 208, 210, 218, 222, 223, 231, 232, 233, 234, 237, 239, 241, 243, 244, 248, 249, 251, 252, 255, 256, 258, 259, 263, 264, 265, 267, 280, 281, 285, 288, 289, 290, 293, 296, 303, 315, 316, 328, 332, 335, 337, 338, 342, 344, 345, 349, 354, 358, 359, 360, 363, 374, 375, 378, 381, 382, 384, 385, 390, 394, 396, 398, 401, 406, 409, 410, 415, 418, 421, 423, 424, 426, 431, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "read": [5, 7, 22, 23, 24, 25, 30, 32, 33, 40, 41, 42, 57, 60, 62, 63, 65, 67, 71, 72, 74, 75, 77, 78, 84, 85, 86, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 104, 107, 108, 110, 112, 115, 116, 117, 118, 120, 134, 135, 138, 141, 143, 144, 146, 147, 149, 151, 153, 154, 155, 156, 157, 158, 160, 163, 164, 167, 172, 173, 174, 178, 180, 181, 185, 186, 187, 188, 190, 191, 197, 200, 201, 204, 205, 208, 209, 210, 212, 213, 214, 215, 220, 222, 223, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 250, 251, 252, 253, 255, 259, 262, 265, 268, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 289, 290, 292, 293, 294, 295, 296, 298, 299, 301, 302, 305, 306, 309, 310, 311, 312, 316, 317, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 347, 349, 351, 355, 356, 361, 362, 365, 372, 374, 376, 377, 378, 380, 381, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 398, 403, 406, 409, 410, 411, 412, 413, 415, 417, 418, 421, 422, 423, 424, 426, 428, 431, 434, 436, 442, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "like": [5, 7, 13, 18, 23, 25, 28, 30, 32, 33, 34, 41, 42, 44, 48, 50, 54, 55, 56, 57, 59, 60, 62, 63, 65, 67, 72, 73, 74, 75, 76, 78, 83, 84, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 110, 112, 115, 118, 119, 120, 124, 127, 131, 134, 137, 139, 141, 142, 144, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 164, 166, 169, 172, 173, 174, 178, 179, 180, 181, 183, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 210, 211, 212, 215, 222, 223, 225, 226, 227, 228, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 280, 281, 289, 290, 291, 292, 293, 294, 296, 297, 298, 301, 304, 305, 306, 307, 308, 310, 311, 316, 318, 321, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 348, 349, 351, 354, 355, 356, 357, 358, 361, 362, 365, 371, 372, 374, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 393, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 32, 33, 34, 38, 39, 40, 41, 42, 44, 47, 48, 50, 52, 53, 57, 58, 59, 60, 62, 63, 65, 71, 72, 74, 75, 78, 89, 96, 119, 144, 155, 173, 174, 199, 244, 259, 279, 341, 342, 344, 363, 365, 382, 405, 409, 424, 436, 461, 463, 464, 465, 468, 473, 476, 477, 479], "pointer": [5, 7, 8, 9, 11, 13, 17, 18, 23, 30, 32, 34, 38, 41, 42, 44, 48, 53, 54, 57, 58, 59, 60, 62, 63, 67, 71, 74, 75, 77, 78, 84, 86, 89, 96, 98, 101, 115, 116, 140, 174, 176, 239, 275, 280, 290, 296, 300, 305, 346, 349, 397, 426, 436, 460, 462, 463, 464, 465, 470, 471, 473, 475, 476, 479], "borrow": [5, 22, 27, 34, 57, 62, 66, 72, 74, 86, 94, 209, 460, 461, 462, 479], "manag": [5, 17, 28, 32, 41, 62, 67, 73, 75, 86, 87, 99, 104, 107, 108, 116, 118, 120, 122, 124, 126, 135, 137, 142, 149, 155, 161, 173, 181, 183, 184, 185, 188, 189, 191, 200, 210, 215, 222, 240, 242, 244, 247, 249, 251, 253, 255, 264, 268, 275, 281, 282, 292, 295, 296, 305, 312, 325, 326, 327, 334, 335, 338, 349, 351, 354, 355, 356, 358, 361, 364, 370, 372, 380, 384, 385, 391, 398, 399, 415, 418, 422, 423, 427, 430, 456, 457, 458, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "share": [5, 7, 32, 34, 40, 41, 44, 57, 62, 63, 67, 70, 72, 75, 76, 78, 83, 93, 96, 98, 100, 101, 104, 108, 113, 116, 118, 120, 131, 136, 161, 178, 180, 183, 209, 212, 223, 227, 232, 251, 256, 258, 263, 264, 275, 289, 290, 291, 293, 296, 308, 319, 323, 327, 334, 335, 337, 339, 341, 342, 349, 350, 354, 356, 361, 362, 365, 371, 384, 385, 403, 422, 423, 424, 426, 428, 436, 451, 452, 457, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 479, 480], "lifetim": [5, 41, 67, 72, 84, 155, 166, 290, 401, 426, 459, 472, 475, 476, 479], "won": [5, 32, 33, 40, 62, 72, 74, 75, 84, 89, 91, 93, 94, 97, 99, 100, 103, 106, 112, 120, 131, 137, 149, 164, 180, 181, 183, 190, 203, 222, 227, 240, 264, 266, 289, 290, 294, 296, 297, 326, 334, 344, 349, 365, 385, 412, 417, 451, 459, 460, 462, 463, 464, 465, 466, 467, 471, 474, 476, 479], "releas": [5, 7, 9, 13, 23, 26, 28, 33, 34, 35, 38, 41, 44, 50, 51, 56, 57, 60, 62, 63, 67, 71, 72, 74, 75, 76, 79, 83, 84, 86, 92, 100, 102, 107, 108, 113, 116, 120, 124, 130, 133, 136, 137, 145, 161, 166, 173, 174, 188, 207, 231, 232, 233, 252, 255, 264, 268, 280, 281, 290, 295, 296, 300, 330, 334, 337, 341, 349, 358, 361, 365, 367, 378, 380, 382, 396, 418, 422, 424, 432, 436, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 480], "yourself": [5, 32, 42, 71, 84, 89, 91, 93, 103, 104, 106, 108, 120, 153, 174, 176, 190, 198, 208, 247, 259, 263, 264, 265, 266, 289, 294, 325, 332, 338, 349, 384, 385, 386, 406, 457, 463, 466, 471], "ensur": [5, 18, 32, 33, 41, 44, 48, 50, 58, 62, 65, 67, 72, 75, 78, 83, 87, 89, 91, 97, 98, 99, 100, 103, 108, 118, 124, 130, 131, 135, 141, 155, 163, 166, 173, 178, 180, 183, 190, 193, 202, 207, 208, 223, 252, 259, 264, 266, 267, 275, 280, 281, 289, 290, 296, 321, 334, 337, 338, 341, 345, 349, 357, 358, 360, 365, 368, 372, 378, 382, 384, 385, 386, 394, 396, 398, 401, 403, 415, 417, 418, 424, 426, 451, 452, 457, 458, 461, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479], "may": [5, 7, 9, 10, 11, 13, 22, 23, 24, 26, 27, 28, 30, 32, 33, 34, 37, 38, 41, 42, 44, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 113, 115, 118, 120, 124, 126, 130, 131, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 153, 154, 155, 156, 158, 160, 164, 166, 169, 170, 172, 173, 174, 178, 179, 180, 181, 183, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 218, 220, 222, 223, 225, 227, 230, 231, 232, 239, 240, 242, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 302, 304, 308, 309, 310, 311, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 439, 442, 449, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "safe": [5, 22, 23, 32, 33, 34, 41, 44, 48, 50, 51, 55, 58, 62, 63, 67, 71, 72, 74, 75, 84, 87, 100, 120, 123, 124, 127, 128, 130, 131, 132, 135, 136, 137, 141, 148, 149, 157, 166, 172, 173, 174, 178, 190, 211, 232, 235, 244, 247, 253, 255, 263, 264, 265, 267, 268, 280, 290, 296, 309, 321, 322, 325, 327, 328, 329, 331, 334, 337, 338, 342, 345, 358, 361, 382, 385, 386, 390, 394, 396, 398, 405, 411, 457, 458, 459, 461, 464, 465, 470, 471, 472, 476, 477, 479], "pybufferproc": [5, 60, 62, 74], "bf_releasebuff": [5, 60, 62, 469], "must": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 48, 51, 55, 57, 58, 59, 60, 62, 63, 65, 70, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 96, 97, 98, 102, 103, 107, 108, 110, 113, 115, 118, 120, 124, 130, 131, 137, 138, 141, 142, 144, 147, 148, 149, 152, 153, 155, 158, 164, 166, 169, 170, 172, 173, 174, 178, 180, 181, 183, 185, 186, 187, 188, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 210, 211, 215, 222, 223, 225, 227, 229, 231, 232, 239, 240, 242, 244, 245, 247, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 285, 288, 289, 290, 292, 293, 294, 296, 298, 299, 301, 305, 311, 315, 316, 317, 319, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 349, 351, 352, 354, 355, 356, 357, 358, 361, 362, 365, 367, 371, 372, 374, 376, 378, 380, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 438, 439, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "disallow": [5, 32, 62, 93, 118, 164, 178, 269, 290, 334, 337, 341, 419, 423, 457, 464, 470, 473, 476, 477, 479], "common": [5, 7, 23, 32, 33, 34, 57, 62, 67, 72, 75, 83, 84, 88, 91, 92, 93, 94, 97, 99, 100, 105, 106, 107, 112, 113, 118, 126, 133, 137, 155, 157, 164, 166, 173, 178, 179, 187, 190, 192, 197, 198, 200, 202, 204, 205, 208, 210, 212, 213, 216, 232, 239, 240, 242, 244, 248, 251, 256, 258, 259, 262, 264, 268, 269, 272, 273, 280, 281, 289, 290, 292, 296, 304, 315, 328, 329, 330, 332, 335, 337, 338, 343, 344, 345, 347, 350, 354, 357, 358, 359, 360, 361, 362, 363, 365, 369, 371, 380, 382, 384, 385, 386, 390, 391, 395, 396, 404, 413, 415, 417, 418, 421, 422, 423, 424, 426, 427, 428, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480], "bytearray": [5, 7, 8, 32, 33, 63, 67, 77, 84, 86, 89, 131, 143, 144, 158, 173, 179, 188, 210, 212, 222, 232, 234, 251, 255, 258, 259, 271, 275, 281, 296, 301, 315, 334, 338, 344, 382, 390, 396, 415, 420, 423, 424, 426, 446, 451, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479], "but": [5, 7, 8, 9, 13, 18, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 37, 38, 41, 44, 46, 48, 51, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 77, 78, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 126, 130, 131, 135, 137, 139, 141, 142, 144, 148, 149, 150, 152, 153, 155, 156, 158, 164, 166, 169, 172, 173, 174, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 215, 217, 218, 222, 225, 227, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 254, 255, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 279, 280, 281, 285, 286, 289, 290, 292, 293, 294, 296, 298, 301, 305, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 348, 349, 351, 354, 356, 358, 360, 361, 362, 363, 365, 369, 371, 372, 373, 374, 377, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 396, 398, 399, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 440, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "also": [5, 7, 11, 13, 23, 26, 28, 30, 32, 33, 34, 39, 41, 44, 48, 51, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 130, 131, 135, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 164, 166, 169, 170, 172, 173, 174, 178, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 225, 227, 230, 231, 232, 235, 238, 239, 240, 241, 242, 244, 245, 247, 248, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 278, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 302, 304, 305, 306, 308, 310, 311, 316, 318, 319, 321, 322, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 348, 349, 354, 357, 358, 360, 361, 362, 363, 365, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "some": [5, 7, 23, 28, 32, 33, 34, 41, 51, 57, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 130, 131, 135, 136, 137, 139, 143, 147, 149, 152, 153, 154, 155, 158, 160, 164, 166, 172, 173, 174, 177, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 193, 195, 196, 200, 201, 202, 203, 204, 205, 206, 210, 212, 213, 215, 218, 222, 223, 227, 231, 232, 237, 240, 241, 244, 245, 247, 248, 252, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 304, 305, 308, 311, 316, 319, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 365, 372, 373, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 398, 399, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 439, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "memoryview": [5, 7, 16, 67, 86, 110, 143, 222, 251, 281, 296, 329, 334, 349, 382, 423, 424, 446, 466, 470, 471, 473, 474, 477, 479, 480], "besid": [5, 75, 89, 92, 93, 180, 222, 255, 330, 372, 398, 431, 432, 457, 479], "requir": [5, 7, 18, 23, 28, 32, 41, 44, 50, 57, 58, 62, 63, 67, 70, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 113, 116, 120, 124, 130, 136, 137, 147, 148, 154, 155, 158, 163, 164, 166, 167, 172, 174, 178, 180, 181, 183, 184, 186, 188, 190, 191, 192, 193, 197, 198, 199, 200, 204, 205, 207, 209, 210, 218, 223, 225, 231, 232, 240, 242, 244, 245, 247, 249, 250, 252, 253, 254, 255, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 277, 278, 280, 281, 285, 289, 290, 292, 293, 296, 297, 298, 302, 304, 305, 311, 316, 319, 325, 327, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 352, 354, 357, 358, 361, 362, 365, 371, 372, 374, 377, 380, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 398, 401, 403, 405, 406, 409, 410, 411, 412, 413, 415, 417, 418, 421, 422, 423, 424, 426, 427, 428, 431, 432, 437, 449, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "no": [5, 7, 11, 13, 17, 18, 22, 23, 24, 26, 27, 30, 32, 33, 34, 36, 37, 38, 40, 41, 44, 45, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 106, 107, 108, 110, 113, 115, 118, 120, 124, 130, 131, 135, 136, 137, 139, 142, 144, 148, 149, 151, 152, 153, 155, 158, 160, 164, 166, 167, 170, 172, 173, 174, 178, 180, 181, 183, 187, 188, 190, 192, 193, 194, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 222, 223, 225, 227, 231, 239, 240, 241, 242, 244, 245, 247, 248, 250, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 280, 281, 285, 289, 290, 292, 293, 294, 296, 298, 299, 302, 304, 305, 306, 308, 310, 311, 315, 316, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 362, 365, 367, 368, 369, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 437, 439, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "check": [5, 7, 9, 16, 17, 23, 25, 30, 32, 33, 34, 37, 40, 41, 42, 44, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 66, 67, 71, 72, 74, 75, 83, 87, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 103, 104, 106, 108, 112, 117, 118, 120, 124, 126, 137, 141, 142, 147, 149, 153, 157, 158, 160, 164, 166, 170, 173, 174, 175, 178, 180, 183, 184, 185, 188, 194, 197, 202, 205, 208, 210, 211, 212, 218, 223, 230, 239, 240, 242, 244, 245, 252, 253, 256, 259, 261, 262, 264, 265, 266, 267, 269, 272, 277, 280, 284, 285, 286, 290, 292, 293, 299, 300, 302, 317, 319, 324, 325, 328, 329, 330, 331, 332, 334, 337, 338, 339, 341, 342, 344, 345, 347, 349, 353, 354, 358, 359, 361, 371, 372, 374, 378, 380, 381, 382, 384, 385, 391, 396, 398, 405, 409, 412, 415, 418, 420, 423, 426, 427, 428, 432, 442, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "verifi": [5, 7, 67, 74, 84, 92, 94, 96, 102, 158, 179, 184, 190, 208, 232, 240, 247, 253, 265, 266, 268, 290, 332, 337, 358, 384, 396, 403, 457, 464, 465, 469, 471, 472, 473, 477, 479], "whether": [5, 7, 9, 11, 13, 17, 23, 30, 34, 44, 57, 58, 62, 63, 72, 78, 84, 88, 89, 91, 92, 94, 97, 98, 99, 102, 103, 104, 106, 108, 112, 113, 118, 131, 137, 141, 142, 149, 150, 152, 153, 154, 155, 156, 158, 164, 166, 173, 174, 178, 180, 183, 186, 188, 190, 193, 199, 204, 205, 207, 217, 222, 227, 231, 232, 240, 241, 244, 247, 252, 255, 256, 258, 263, 265, 266, 268, 269, 272, 273, 280, 281, 289, 290, 292, 293, 294, 296, 299, 304, 305, 308, 311, 316, 321, 325, 329, 330, 331, 332, 334, 335, 337, 338, 341, 343, 344, 345, 349, 354, 356, 358, 361, 362, 365, 372, 376, 380, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 398, 401, 403, 405, 406, 411, 416, 417, 418, 422, 423, 424, 425, 426, 428, 432, 451, 452, 457, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 479], "input": [5, 9, 33, 62, 63, 65, 67, 72, 74, 78, 83, 84, 89, 92, 94, 97, 99, 105, 106, 107, 108, 110, 112, 116, 118, 120, 131, 135, 139, 140, 141, 142, 144, 147, 149, 153, 154, 155, 156, 157, 164, 166, 170, 172, 173, 180, 183, 187, 188, 190, 191, 192, 193, 194, 197, 198, 200, 204, 205, 206, 210, 216, 218, 219, 222, 226, 231, 232, 241, 242, 244, 251, 255, 258, 259, 261, 264, 266, 267, 268, 272, 280, 281, 289, 290, 292, 294, 298, 299, 304, 306, 308, 311, 314, 316, 317, 319, 325, 328, 332, 334, 337, 338, 341, 345, 349, 350, 355, 357, 358, 360, 362, 364, 365, 371, 372, 373, 377, 385, 390, 391, 393, 397, 403, 404, 407, 408, 409, 410, 411, 412, 413, 417, 423, 424, 425, 426, 427, 428, 430, 431, 437, 439, 440, 446, 448, 451, 458, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479], "immut": [5, 9, 10, 28, 32, 34, 59, 62, 63, 67, 84, 86, 92, 98, 120, 158, 172, 173, 178, 180, 183, 205, 218, 222, 223, 252, 264, 288, 290, 293, 394, 423, 424, 426, 438, 445, 458, 461, 462, 463, 464, 465, 466, 470, 477, 478, 479], "would": [5, 7, 18, 23, 30, 32, 33, 46, 57, 58, 60, 63, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 106, 108, 110, 112, 118, 120, 124, 136, 137, 149, 152, 155, 158, 164, 166, 167, 169, 173, 174, 178, 180, 181, 183, 185, 187, 190, 193, 196, 197, 199, 200, 202, 204, 205, 209, 210, 222, 223, 225, 227, 231, 232, 239, 240, 242, 244, 247, 250, 252, 255, 258, 259, 264, 265, 266, 269, 272, 273, 280, 289, 290, 302, 304, 305, 310, 316, 317, 319, 327, 328, 329, 330, 334, 335, 337, 338, 339, 341, 342, 343, 345, 349, 352, 354, 358, 361, 365, 368, 372, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 396, 398, 399, 401, 404, 406, 408, 409, 417, 418, 419, 421, 422, 423, 424, 426, 428, 430, 431, 432, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479], "honor": [5, 113, 248, 294, 349, 354, 416, 464, 465, 475, 479], "writabl": [5, 7, 42, 57, 67, 83, 104, 116, 118, 131, 147, 149, 245, 252, 255, 275, 280, 290, 292, 301, 312, 329, 334, 335, 338, 341, 344, 364, 365, 398, 418, 424, 428, 432, 462, 464, 472, 474, 475, 476, 479], "anoth": [5, 7, 22, 23, 30, 32, 34, 41, 57, 62, 63, 71, 72, 74, 75, 76, 83, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 112, 113, 118, 123, 124, 130, 131, 133, 137, 142, 149, 153, 155, 160, 164, 166, 170, 173, 174, 178, 180, 183, 190, 191, 193, 200, 210, 212, 218, 222, 223, 227, 232, 240, 242, 244, 247, 252, 255, 258, 259, 264, 265, 267, 268, 275, 280, 284, 285, 289, 290, 293, 294, 296, 298, 305, 306, 308, 311, 316, 325, 329, 330, 335, 337, 338, 341, 342, 344, 345, 349, 350, 361, 363, 365, 371, 372, 374, 376, 380, 382, 384, 385, 386, 390, 391, 395, 398, 401, 403, 404, 405, 406, 407, 409, 410, 418, 421, 423, 424, 425, 426, 428, 432, 439, 440, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 474, 475, 477, 478, 479], "thread": [5, 17, 23, 30, 31, 33, 34, 41, 50, 52, 58, 62, 67, 72, 75, 78, 84, 86, 98, 99, 104, 116, 122, 123, 127, 128, 130, 131, 132, 133, 135, 136, 138, 147, 148, 157, 161, 163, 166, 167, 173, 184, 187, 211, 223, 229, 242, 244, 245, 251, 253, 254, 263, 265, 266, 267, 268, 280, 287, 290, 313, 318, 319, 321, 322, 329, 335, 337, 338, 341, 345, 349, 362, 364, 382, 391, 395, 396, 398, 424, 441, 451, 452, 458, 460, 461, 462, 463, 464, 465, 466, 475, 478, 479, 480], "mutat": [5, 22, 62, 84, 98, 164, 178, 193, 223, 247, 255, 280, 327, 341, 382, 386, 396, 460, 462, 473, 479], "variant": [5, 22, 30, 40, 46, 51, 62, 67, 72, 83, 92, 94, 100, 103, 106, 118, 124, 155, 157, 164, 174, 180, 181, 183, 188, 200, 222, 223, 242, 245, 253, 258, 279, 280, 290, 293, 300, 329, 334, 337, 338, 354, 384, 385, 386, 391, 394, 412, 424, 428, 463, 464, 465, 466, 470, 473, 476, 477, 478, 479], "etc": [5, 33, 63, 78, 83, 84, 93, 94, 99, 100, 106, 107, 108, 118, 131, 139, 144, 149, 153, 172, 203, 208, 222, 240, 241, 244, 249, 252, 256, 263, 264, 266, 269, 273, 278, 280, 281, 289, 290, 293, 300, 304, 305, 307, 308, 316, 326, 331, 334, 337, 338, 354, 361, 362, 365, 371, 380, 382, 384, 390, 403, 406, 418, 424, 427, 432, 447, 452, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 479], "py_ssize_t_clean": [5, 34, 58, 71, 72, 75, 463, 468, 477, 479], "befor": [5, 7, 13, 17, 22, 23, 27, 28, 30, 31, 33, 37, 41, 44, 50, 51, 54, 55, 57, 58, 59, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 78, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 113, 115, 118, 124, 126, 130, 133, 134, 135, 137, 138, 139, 141, 147, 148, 149, 151, 153, 154, 155, 156, 164, 166, 167, 172, 173, 174, 180, 181, 183, 187, 188, 190, 192, 193, 198, 200, 202, 210, 215, 222, 223, 231, 239, 240, 242, 244, 245, 247, 252, 255, 256, 258, 263, 264, 265, 266, 267, 268, 273, 275, 280, 285, 289, 290, 292, 293, 294, 296, 297, 302, 304, 305, 306, 310, 311, 316, 317, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 352, 354, 355, 356, 358, 360, 361, 362, 371, 372, 378, 379, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 401, 403, 406, 407, 408, 409, 410, 411, 412, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 442, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "on": [5, 7, 8, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 44, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 118, 120, 121, 124, 130, 131, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 148, 151, 152, 153, 154, 155, 158, 160, 161, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 217, 218, 221, 222, 225, 226, 229, 230, 231, 232, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 335, 336, 337, 339, 342, 343, 344, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 437, 438, 442, 444, 445, 447, 451, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "older": [5, 32, 62, 67, 72, 74, 91, 100, 102, 117, 118, 161, 174, 183, 187, 199, 227, 232, 244, 248, 249, 265, 285, 290, 292, 294, 296, 311, 325, 337, 338, 349, 350, 358, 365, 373, 382, 391, 411, 418, 426, 428, 458, 461, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479], "length": [5, 7, 8, 9, 22, 23, 24, 33, 34, 37, 48, 53, 54, 55, 57, 58, 59, 62, 63, 67, 72, 74, 78, 84, 89, 91, 92, 93, 94, 96, 98, 100, 106, 107, 115, 118, 119, 120, 139, 140, 141, 144, 148, 155, 171, 172, 173, 174, 181, 183, 187, 188, 192, 193, 198, 199, 202, 204, 205, 212, 222, 239, 242, 245, 251, 255, 256, 258, 259, 265, 266, 267, 268, 270, 272, 275, 280, 281, 289, 290, 305, 311, 316, 317, 325, 329, 332, 334, 337, 338, 342, 344, 349, 354, 357, 360, 361, 362, 372, 381, 382, 384, 385, 389, 391, 396, 401, 403, 404, 406, 411, 415, 418, 419, 420, 423, 424, 426, 431, 432, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 479], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 78, 83, 86, 87, 88, 89, 92, 93, 96, 97, 98, 99, 100, 102, 103, 110, 111, 112, 118, 119, 120, 124, 125, 137, 138, 153, 157, 163, 164, 167, 173, 178, 180, 183, 187, 190, 208, 210, 218, 222, 223, 233, 237, 245, 251, 252, 253, 256, 259, 264, 272, 278, 281, 286, 288, 289, 290, 292, 296, 301, 303, 313, 315, 316, 323, 325, 334, 337, 340, 342, 344, 348, 349, 354, 362, 363, 374, 375, 378, 380, 381, 382, 384, 385, 394, 398, 401, 403, 406, 407, 408, 409, 415, 423, 424, 425, 426, 436, 437, 439, 442, 445, 446, 447, 451, 452, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "exist": [5, 9, 22, 23, 25, 26, 30, 32, 33, 38, 41, 54, 57, 58, 62, 63, 65, 66, 67, 71, 72, 75, 78, 83, 84, 92, 93, 94, 97, 99, 100, 102, 103, 106, 107, 108, 110, 113, 115, 117, 118, 120, 124, 126, 134, 137, 142, 147, 149, 153, 155, 157, 158, 160, 164, 166, 173, 178, 180, 181, 184, 186, 188, 190, 191, 193, 197, 202, 203, 205, 207, 208, 209, 210, 213, 215, 216, 222, 223, 227, 231, 232, 233, 240, 241, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 258, 264, 265, 266, 267, 268, 269, 273, 275, 278, 280, 281, 284, 285, 289, 290, 291, 292, 293, 294, 296, 299, 305, 310, 316, 317, 321, 327, 329, 330, 331, 334, 337, 338, 339, 340, 341, 342, 344, 345, 349, 350, 351, 354, 356, 358, 362, 364, 365, 368, 371, 372, 380, 382, 383, 384, 385, 390, 391, 393, 395, 396, 398, 399, 401, 403, 406, 409, 415, 417, 418, 419, 421, 423, 424, 425, 426, 428, 431, 432, 449, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "store": [5, 7, 11, 13, 18, 25, 27, 28, 32, 33, 40, 41, 48, 55, 57, 60, 62, 63, 67, 72, 74, 75, 78, 83, 84, 87, 88, 89, 92, 94, 98, 99, 100, 103, 105, 106, 107, 108, 115, 118, 120, 131, 132, 139, 152, 155, 157, 164, 167, 170, 172, 173, 174, 178, 180, 181, 183, 188, 190, 193, 194, 197, 198, 200, 202, 205, 240, 242, 244, 245, 247, 250, 252, 253, 255, 258, 261, 264, 267, 268, 269, 273, 275, 280, 281, 285, 290, 295, 296, 297, 311, 325, 326, 327, 332, 334, 335, 337, 338, 339, 341, 344, 347, 349, 351, 354, 358, 361, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 391, 398, 401, 403, 406, 409, 415, 417, 418, 421, 423, 424, 426, 427, 428, 431, 432, 439, 444, 451, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479], "contain": [5, 7, 9, 13, 22, 23, 25, 28, 30, 32, 33, 34, 37, 39, 40, 41, 48, 50, 53, 54, 57, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 116, 120, 124, 131, 137, 139, 141, 142, 144, 147, 148, 149, 150, 154, 155, 156, 160, 164, 166, 167, 169, 172, 173, 174, 175, 178, 179, 180, 181, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 221, 222, 223, 227, 231, 232, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 259, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 308, 309, 310, 311, 316, 319, 321, 325, 327, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 348, 349, 350, 351, 354, 357, 358, 360, 361, 362, 363, 365, 371, 372, 374, 376, 377, 378, 380, 381, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "embed": [5, 7, 9, 32, 34, 44, 51, 56, 60, 63, 67, 72, 73, 78, 89, 91, 92, 96, 98, 103, 106, 126, 133, 160, 172, 174, 196, 199, 256, 263, 277, 278, 290, 305, 316, 341, 345, 358, 362, 365, 371, 396, 411, 416, 417, 431, 447, 457, 459, 460, 463, 465, 471, 473, 476, 477, 478, 479, 480], "code": [5, 7, 9, 11, 12, 13, 18, 22, 23, 26, 27, 30, 33, 34, 37, 38, 40, 41, 44, 47, 50, 51, 54, 55, 58, 59, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 79, 83, 86, 87, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 116, 119, 120, 126, 128, 130, 131, 133, 135, 137, 139, 140, 141, 142, 144, 149, 150, 155, 160, 163, 164, 165, 166, 167, 172, 173, 174, 177, 178, 179, 181, 183, 184, 185, 187, 188, 190, 193, 199, 200, 202, 203, 205, 208, 209, 210, 211, 212, 218, 222, 223, 225, 227, 232, 233, 238, 239, 240, 242, 245, 248, 251, 253, 254, 256, 258, 259, 263, 264, 265, 266, 267, 268, 270, 271, 275, 276, 277, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 299, 305, 306, 308, 309, 310, 311, 312, 316, 317, 321, 322, 327, 328, 329, 330, 331, 332, 334, 337, 338, 343, 344, 345, 348, 349, 350, 352, 358, 360, 361, 362, 363, 364, 365, 371, 372, 373, 374, 376, 377, 378, 381, 382, 385, 386, 389, 390, 391, 393, 398, 403, 404, 405, 406, 407, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 441, 444, 450, 451, 452, 454, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 473, 475, 476, 477, 479, 480], "point": [5, 7, 16, 17, 18, 22, 23, 30, 32, 33, 34, 37, 38, 40, 41, 42, 44, 46, 51, 54, 57, 59, 62, 63, 65, 67, 72, 76, 78, 83, 84, 86, 89, 91, 92, 94, 96, 98, 99, 100, 102, 103, 106, 108, 112, 113, 114, 124, 131, 133, 135, 136, 137, 139, 142, 151, 152, 155, 157, 159, 160, 164, 166, 167, 173, 174, 178, 180, 186, 187, 190, 193, 197, 199, 200, 202, 203, 206, 210, 218, 222, 229, 232, 244, 247, 251, 258, 259, 263, 264, 265, 266, 268, 271, 272, 275, 277, 278, 280, 287, 289, 290, 291, 293, 294, 296, 299, 305, 316, 319, 325, 328, 329, 330, 334, 337, 338, 340, 341, 342, 343, 344, 349, 350, 351, 354, 358, 361, 362, 365, 368, 372, 374, 377, 380, 382, 384, 385, 386, 391, 395, 399, 404, 405, 407, 408, 409, 410, 417, 419, 421, 423, 424, 425, 426, 428, 432, 437, 438, 440, 445, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "doe": [5, 9, 13, 22, 23, 25, 26, 27, 28, 30, 32, 33, 37, 39, 41, 44, 48, 51, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 76, 83, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 107, 108, 112, 113, 118, 120, 121, 124, 131, 137, 138, 141, 144, 147, 149, 151, 154, 155, 158, 160, 164, 166, 170, 172, 173, 174, 176, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 212, 217, 218, 222, 223, 225, 226, 227, 230, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 273, 275, 280, 281, 284, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 302, 305, 306, 308, 311, 316, 319, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 352, 354, 355, 356, 358, 360, 361, 362, 364, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 436, 438, 445, 448, 451, 452, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "valueerror": [5, 9, 18, 23, 38, 40, 57, 63, 67, 84, 92, 93, 97, 99, 107, 112, 113, 118, 119, 120, 124, 132, 136, 141, 142, 145, 149, 154, 155, 156, 157, 160, 163, 164, 170, 172, 173, 178, 180, 183, 190, 193, 194, 200, 202, 205, 206, 207, 208, 210, 220, 222, 224, 229, 240, 245, 247, 252, 255, 256, 258, 259, 264, 265, 271, 272, 275, 280, 281, 285, 289, 290, 291, 293, 299, 302, 311, 313, 315, 319, 322, 326, 327, 329, 330, 332, 334, 337, 338, 340, 341, 342, 345, 348, 349, 361, 362, 375, 383, 384, 385, 390, 391, 395, 404, 406, 418, 421, 423, 426, 437, 438, 439, 442, 446, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "rais": [5, 7, 9, 13, 18, 22, 24, 25, 26, 28, 31, 32, 33, 36, 38, 44, 46, 48, 53, 54, 57, 58, 59, 60, 62, 63, 65, 66, 67, 72, 74, 75, 77, 87, 91, 92, 93, 94, 97, 100, 102, 104, 106, 107, 110, 112, 113, 118, 120, 123, 124, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 151, 152, 154, 155, 156, 157, 160, 164, 166, 167, 169, 170, 172, 173, 174, 178, 180, 181, 183, 184, 188, 190, 191, 193, 194, 195, 196, 197, 199, 200, 202, 203, 205, 206, 208, 210, 212, 215, 218, 222, 223, 225, 227, 230, 231, 232, 233, 239, 240, 241, 242, 244, 245, 247, 249, 250, 252, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 275, 278, 279, 280, 281, 284, 285, 288, 290, 292, 293, 294, 296, 299, 301, 302, 304, 308, 311, 316, 319, 320, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 352, 354, 355, 358, 361, 362, 365, 374, 377, 378, 380, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 415, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 431, 436, 437, 438, 439, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "utf": [5, 16, 23, 26, 30, 32, 33, 44, 58, 67, 86, 99, 100, 106, 116, 118, 120, 143, 149, 164, 172, 185, 187, 193, 194, 202, 203, 205, 206, 215, 220, 222, 232, 245, 247, 248, 249, 255, 259, 262, 263, 281, 283, 285, 294, 296, 302, 304, 311, 327, 334, 335, 337, 338, 341, 349, 354, 374, 390, 391, 394, 395, 403, 407, 409, 415, 417, 418, 424, 428, 431, 437, 442, 444, 451, 452, 454, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479], "encod": [5, 14, 16, 23, 24, 26, 30, 32, 33, 44, 57, 58, 65, 67, 70, 76, 83, 86, 89, 91, 96, 99, 100, 102, 103, 107, 116, 117, 118, 119, 124, 131, 134, 139, 141, 143, 144, 147, 148, 149, 151, 164, 167, 172, 173, 174, 175, 181, 183, 185, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 211, 215, 220, 222, 227, 231, 232, 239, 241, 245, 247, 248, 249, 250, 251, 252, 253, 255, 261, 262, 263, 264, 265, 266, 267, 273, 281, 282, 290, 292, 293, 294, 296, 301, 304, 306, 311, 314, 327, 332, 334, 337, 338, 341, 344, 345, 346, 347, 349, 352, 354, 355, 356, 358, 365, 373, 374, 382, 391, 393, 394, 397, 403, 404, 407, 409, 411, 412, 413, 415, 416, 417, 418, 424, 428, 441, 442, 451, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480], "convers": [5, 9, 18, 32, 33, 62, 63, 67, 71, 89, 91, 92, 96, 116, 118, 120, 131, 141, 144, 155, 164, 172, 180, 183, 192, 222, 251, 253, 255, 259, 263, 268, 273, 287, 289, 290, 296, 315, 334, 338, 342, 344, 345, 349, 354, 374, 381, 385, 390, 393, 422, 423, 427, 429, 431, 446, 451, 457, 463, 464, 465, 466, 467, 471, 473, 474, 476, 477, 479, 480], "fail": [5, 7, 9, 11, 18, 23, 24, 30, 32, 34, 40, 41, 44, 46, 55, 63, 67, 71, 72, 75, 78, 83, 84, 87, 88, 89, 93, 100, 102, 103, 107, 118, 120, 136, 137, 149, 151, 152, 166, 173, 180, 184, 185, 187, 190, 206, 208, 210, 212, 241, 242, 244, 246, 247, 252, 254, 255, 258, 259, 263, 265, 267, 268, 269, 275, 280, 289, 290, 292, 293, 294, 299, 304, 316, 319, 325, 327, 329, 330, 331, 332, 333, 334, 337, 338, 341, 342, 345, 349, 354, 356, 358, 361, 365, 378, 382, 384, 385, 386, 391, 394, 401, 404, 409, 412, 415, 418, 421, 423, 424, 425, 427, 428, 432, 439, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 479], "unicodeerror": [5, 23, 67, 86, 155, 180, 199, 210, 290, 341, 446, 461, 466], "accept": [5, 18, 23, 28, 30, 32, 57, 60, 63, 65, 66, 67, 72, 74, 75, 78, 84, 88, 89, 91, 94, 97, 100, 102, 103, 104, 106, 107, 112, 115, 118, 120, 124, 131, 135, 137, 139, 141, 144, 147, 149, 152, 153, 155, 160, 161, 164, 166, 170, 173, 174, 175, 178, 180, 181, 183, 187, 190, 198, 202, 203, 205, 206, 210, 212, 218, 223, 225, 231, 232, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 275, 279, 280, 289, 290, 292, 296, 311, 316, 321, 325, 326, 327, 329, 330, 332, 335, 337, 338, 341, 345, 349, 354, 358, 360, 362, 371, 372, 374, 376, 378, 381, 382, 384, 390, 391, 393, 394, 397, 399, 401, 403, 407, 409, 412, 415, 417, 418, 422, 423, 424, 426, 428, 431, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "want": [5, 7, 23, 25, 32, 33, 55, 62, 67, 71, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 113, 118, 120, 124, 130, 134, 139, 141, 142, 149, 150, 153, 154, 156, 164, 166, 173, 174, 177, 180, 184, 187, 190, 193, 197, 198, 199, 202, 205, 208, 212, 215, 222, 223, 225, 227, 232, 239, 240, 242, 244, 245, 247, 248, 252, 263, 264, 265, 266, 269, 272, 273, 275, 280, 289, 290, 293, 294, 296, 297, 299, 305, 310, 316, 325, 326, 329, 330, 332, 334, 335, 337, 338, 341, 342, 345, 349, 354, 360, 361, 365, 377, 380, 382, 384, 385, 386, 390, 391, 394, 396, 398, 403, 409, 417, 418, 421, 422, 424, 425, 428, 437, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 475, 477, 478, 479], "filesystem": [5, 23, 32, 33, 58, 63, 65, 67, 86, 106, 108, 118, 124, 141, 164, 210, 212, 213, 216, 247, 251, 263, 268, 280, 290, 294, 299, 321, 329, 338, 349, 354, 358, 384, 385, 395, 396, 417, 418, 451, 457, 459, 465, 470, 473, 476, 479], "path": [5, 23, 24, 30, 31, 32, 34, 38, 58, 63, 67, 69, 71, 72, 75, 83, 84, 86, 87, 89, 92, 94, 96, 98, 99, 100, 106, 109, 112, 116, 117, 118, 124, 134, 137, 140, 142, 146, 147, 149, 160, 164, 166, 173, 181, 187, 190, 197, 207, 210, 212, 216, 217, 220, 222, 227, 228, 231, 239, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 255, 258, 262, 263, 264, 265, 266, 267, 268, 273, 276, 277, 278, 280, 283, 285, 289, 290, 294, 299, 305, 308, 309, 310, 312, 317, 321, 324, 327, 328, 329, 331, 332, 334, 337, 338, 339, 345, 349, 352, 354, 356, 358, 362, 365, 380, 382, 384, 385, 390, 391, 395, 396, 399, 401, 403, 409, 412, 415, 416, 417, 419, 421, 424, 429, 432, 434, 446, 448, 449, 451, 452, 454, 456, 458, 460, 461, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 476, 478, 479], "them": [5, 7, 22, 23, 32, 33, 34, 44, 58, 62, 63, 65, 67, 70, 72, 75, 76, 83, 84, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 103, 106, 107, 108, 110, 112, 118, 120, 124, 126, 132, 137, 149, 153, 155, 156, 158, 160, 164, 166, 167, 172, 173, 174, 178, 180, 181, 183, 185, 188, 190, 192, 193, 198, 203, 205, 211, 213, 222, 223, 227, 232, 240, 241, 244, 245, 247, 248, 252, 255, 263, 264, 265, 266, 268, 280, 281, 285, 289, 290, 292, 293, 296, 304, 305, 316, 319, 321, 325, 327, 332, 334, 337, 338, 339, 341, 343, 344, 345, 349, 354, 355, 358, 360, 361, 363, 365, 371, 372, 378, 380, 382, 384, 385, 386, 396, 397, 401, 405, 406, 407, 408, 409, 417, 418, 423, 424, 426, 427, 428, 430, 432, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "prefer": [5, 22, 23, 28, 30, 33, 42, 48, 60, 62, 67, 84, 89, 93, 94, 100, 107, 108, 112, 118, 124, 137, 158, 164, 174, 180, 183, 199, 202, 210, 222, 247, 252, 255, 258, 263, 268, 272, 280, 289, 290, 296, 310, 337, 338, 340, 341, 345, 349, 351, 358, 360, 361, 362, 364, 372, 380, 381, 382, 394, 399, 401, 412, 417, 422, 428, 452, 457, 463, 465, 470, 471, 472, 474, 475, 476, 477, 479], "pyunicode_fsconvert": [5, 56, 63, 475, 479], "previous": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 28, 32, 37, 39, 41, 46, 57, 58, 60, 62, 63, 71, 72, 74, 75, 78, 83, 84, 88, 89, 91, 94, 99, 100, 103, 106, 118, 120, 124, 130, 131, 137, 138, 142, 147, 148, 149, 155, 164, 166, 167, 170, 173, 174, 178, 180, 183, 187, 188, 190, 204, 205, 208, 210, 211, 213, 218, 223, 227, 239, 242, 244, 247, 252, 258, 262, 264, 266, 267, 268, 273, 275, 279, 280, 281, 289, 290, 294, 296, 308, 311, 316, 326, 327, 328, 330, 332, 334, 337, 338, 341, 344, 349, 351, 352, 354, 358, 360, 361, 362, 371, 372, 376, 378, 380, 381, 382, 384, 385, 386, 390, 391, 396, 397, 401, 406, 409, 416, 418, 419, 422, 423, 424, 425, 428, 432, 442, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "typeerror": [5, 9, 22, 23, 38, 40, 46, 47, 48, 53, 54, 57, 58, 60, 62, 63, 66, 67, 72, 74, 75, 84, 88, 92, 93, 94, 97, 106, 107, 118, 119, 120, 127, 141, 164, 165, 166, 169, 173, 178, 180, 181, 183, 190, 193, 194, 195, 196, 202, 203, 208, 210, 222, 230, 247, 252, 255, 256, 259, 265, 271, 272, 275, 288, 289, 290, 293, 301, 315, 341, 349, 362, 382, 384, 385, 390, 394, 398, 407, 409, 415, 418, 423, 424, 426, 432, 437, 438, 439, 445, 446, 447, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "was": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 30, 32, 41, 44, 48, 53, 55, 57, 58, 59, 60, 62, 63, 65, 72, 74, 75, 76, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 115, 118, 120, 123, 124, 130, 131, 135, 137, 138, 139, 141, 142, 147, 149, 150, 153, 154, 155, 158, 160, 164, 166, 167, 172, 174, 178, 180, 183, 185, 187, 188, 190, 193, 196, 198, 199, 202, 203, 204, 207, 208, 210, 211, 215, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 255, 256, 263, 264, 265, 266, 267, 268, 269, 272, 275, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 304, 305, 308, 310, 311, 316, 317, 318, 319, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 406, 409, 410, 411, 415, 416, 418, 419, 421, 422, 423, 424, 426, 428, 430, 431, 432, 437, 439, 448, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "were": [5, 7, 9, 17, 18, 23, 26, 32, 34, 57, 60, 62, 65, 72, 74, 75, 89, 92, 94, 99, 100, 103, 108, 110, 118, 120, 124, 131, 137, 138, 142, 147, 149, 155, 157, 164, 166, 174, 178, 180, 183, 185, 187, 188, 190, 193, 196, 197, 198, 200, 202, 204, 205, 210, 213, 222, 225, 232, 244, 247, 248, 252, 259, 264, 265, 272, 273, 275, 280, 290, 292, 296, 305, 311, 316, 327, 330, 332, 334, 335, 337, 341, 342, 344, 345, 349, 352, 354, 355, 358, 365, 372, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 396, 403, 408, 409, 419, 423, 424, 425, 426, 428, 430, 431, 432, 437, 439, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "encount": [5, 9, 54, 62, 103, 105, 106, 118, 149, 151, 172, 183, 190, 196, 202, 205, 209, 210, 225, 237, 241, 252, 259, 264, 265, 269, 289, 294, 296, 308, 311, 316, 328, 329, 335, 337, 338, 341, 345, 355, 372, 380, 382, 384, 396, 409, 411, 428, 458, 461, 462, 463, 464, 471, 472, 477, 479], "well": [5, 23, 34, 48, 51, 62, 63, 72, 74, 75, 76, 78, 83, 84, 87, 88, 92, 93, 94, 98, 99, 100, 102, 103, 104, 106, 107, 108, 112, 118, 130, 131, 135, 139, 141, 142, 144, 149, 150, 152, 154, 155, 164, 166, 173, 174, 181, 183, 188, 190, 191, 192, 194, 197, 200, 201, 205, 208, 210, 212, 215, 222, 223, 225, 227, 231, 232, 240, 244, 248, 254, 255, 256, 258, 264, 265, 266, 267, 268, 273, 276, 281, 285, 289, 290, 296, 304, 316, 318, 321, 326, 329, 332, 337, 338, 339, 340, 341, 342, 345, 349, 350, 354, 357, 358, 360, 363, 365, 369, 371, 374, 377, 378, 380, 381, 382, 384, 385, 386, 390, 394, 398, 406, 409, 410, 411, 412, 415, 421, 423, 424, 426, 428, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "into": [5, 9, 13, 18, 22, 23, 25, 26, 32, 33, 37, 40, 48, 54, 58, 60, 62, 63, 67, 71, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 97, 99, 102, 103, 104, 106, 108, 110, 112, 118, 120, 124, 131, 132, 135, 136, 137, 138, 139, 142, 144, 149, 151, 154, 155, 157, 160, 164, 166, 172, 173, 174, 178, 180, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 212, 219, 220, 222, 223, 227, 239, 241, 242, 244, 245, 247, 248, 249, 251, 252, 253, 255, 256, 258, 259, 263, 264, 265, 266, 268, 269, 273, 275, 278, 279, 280, 281, 289, 290, 292, 293, 294, 295, 296, 302, 304, 305, 306, 308, 309, 311, 316, 317, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 349, 354, 358, 360, 361, 362, 365, 371, 372, 373, 374, 376, 377, 378, 381, 382, 383, 384, 385, 386, 391, 393, 395, 396, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 417, 418, 423, 424, 426, 428, 431, 432, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "two": [5, 7, 9, 14, 23, 25, 28, 30, 32, 33, 34, 36, 40, 41, 44, 46, 56, 57, 62, 63, 66, 67, 71, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 112, 115, 118, 120, 124, 130, 131, 137, 139, 141, 142, 144, 148, 149, 152, 153, 154, 155, 156, 157, 160, 164, 169, 170, 172, 173, 174, 175, 178, 180, 183, 186, 187, 188, 190, 191, 192, 193, 197, 199, 204, 205, 206, 207, 208, 210, 213, 215, 218, 222, 223, 225, 227, 232, 240, 242, 244, 245, 246, 247, 252, 255, 256, 257, 258, 263, 264, 265, 268, 272, 273, 275, 280, 281, 285, 289, 290, 292, 293, 294, 296, 298, 300, 302, 305, 309, 311, 315, 316, 319, 321, 322, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 349, 354, 357, 358, 360, 361, 362, 363, 368, 371, 372, 374, 378, 380, 382, 383, 384, 385, 386, 390, 394, 395, 396, 397, 398, 401, 403, 404, 406, 409, 412, 417, 418, 421, 423, 424, 426, 427, 428, 430, 431, 432, 436, 437, 438, 445, 446, 447, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "second": [5, 20, 22, 23, 32, 34, 36, 57, 63, 66, 67, 72, 74, 75, 76, 83, 84, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 115, 124, 127, 132, 133, 134, 136, 137, 139, 149, 155, 164, 166, 172, 173, 174, 179, 180, 183, 187, 188, 190, 192, 197, 200, 205, 206, 208, 210, 211, 212, 215, 218, 222, 225, 227, 232, 239, 240, 244, 245, 247, 252, 255, 258, 264, 265, 266, 268, 269, 272, 273, 279, 280, 281, 289, 290, 292, 294, 296, 298, 299, 302, 304, 305, 315, 316, 319, 322, 325, 326, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 354, 355, 357, 358, 361, 362, 363, 372, 374, 380, 382, 384, 385, 390, 391, 392, 394, 403, 409, 415, 418, 424, 426, 427, 428, 431, 432, 438, 442, 445, 452, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 474, 475, 476, 477, 479], "set": [5, 7, 9, 10, 11, 13, 16, 17, 18, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 37, 38, 40, 41, 44, 48, 51, 55, 57, 58, 59, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 80, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 115, 118, 120, 127, 131, 133, 134, 135, 136, 137, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 163, 164, 166, 167, 170, 172, 173, 174, 175, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 219, 220, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 245, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 285, 289, 290, 292, 293, 294, 296, 298, 302, 304, 305, 308, 310, 311, 315, 316, 317, 318, 319, 320, 321, 325, 327, 328, 329, 331, 332, 334, 335, 337, 339, 342, 343, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 370, 371, 372, 373, 376, 378, 379, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 423, 424, 425, 427, 428, 431, 432, 436, 441, 444, 446, 448, 451, 452, 454, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "buf": [5, 7, 41, 67, 124, 161, 212, 232, 281, 338, 341, 354, 463], "member": [5, 7, 26, 30, 32, 33, 34, 44, 49, 55, 58, 59, 60, 62, 67, 72, 74, 75, 87, 89, 110, 147, 160, 164, 173, 174, 178, 179, 188, 208, 210, 230, 231, 241, 242, 245, 258, 259, 265, 267, 290, 296, 308, 310, 312, 329, 334, 336, 337, 338, 339, 341, 344, 349, 354, 358, 362, 374, 381, 382, 384, 385, 418, 423, 424, 426, 461, 462, 463, 464, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "doesn": [5, 7, 22, 23, 30, 32, 33, 42, 55, 62, 71, 72, 75, 76, 78, 84, 89, 91, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 118, 120, 130, 131, 133, 142, 148, 149, 155, 166, 170, 172, 173, 180, 181, 183, 190, 193, 195, 197, 202, 210, 211, 222, 223, 240, 241, 244, 247, 248, 252, 255, 256, 259, 263, 264, 265, 266, 289, 290, 293, 294, 296, 299, 302, 311, 316, 319, 320, 325, 327, 329, 330, 331, 332, 334, 336, 337, 338, 341, 342, 345, 349, 354, 358, 361, 363, 365, 380, 381, 383, 384, 385, 386, 396, 401, 403, 405, 415, 419, 424, 426, 428, 437, 445, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "recommend": [5, 32, 41, 44, 62, 63, 67, 71, 72, 74, 75, 84, 87, 89, 90, 93, 94, 99, 102, 106, 108, 118, 120, 124, 130, 131, 133, 137, 141, 155, 164, 170, 173, 178, 180, 183, 190, 193, 210, 222, 227, 232, 239, 242, 244, 245, 247, 252, 259, 264, 272, 285, 290, 292, 293, 296, 305, 311, 316, 321, 328, 329, 334, 335, 337, 338, 345, 349, 354, 356, 362, 365, 380, 382, 384, 390, 394, 403, 405, 406, 407, 411, 412, 418, 421, 424, 428, 431, 452, 457, 458, 460, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "binari": [5, 7, 33, 40, 41, 46, 56, 62, 65, 67, 74, 77, 83, 85, 86, 89, 93, 96, 100, 106, 108, 113, 116, 120, 124, 139, 141, 147, 165, 173, 183, 188, 191, 193, 194, 195, 197, 198, 200, 202, 204, 205, 208, 212, 218, 220, 222, 227, 231, 232, 242, 247, 249, 250, 251, 252, 253, 256, 258, 259, 263, 265, 266, 267, 268, 271, 272, 278, 279, 280, 282, 285, 289, 290, 293, 296, 299, 301, 334, 342, 345, 347, 349, 351, 354, 356, 359, 365, 382, 391, 393, 395, 398, 401, 409, 412, 416, 417, 418, 421, 422, 424, 429, 432, 435, 441, 442, 452, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pybytesobject": [5, 9, 13, 63, 89, 464, 469, 479], "attempt": [5, 11, 23, 25, 30, 32, 46, 58, 60, 62, 66, 84, 87, 89, 91, 93, 96, 97, 100, 103, 106, 107, 118, 120, 124, 131, 138, 147, 153, 164, 166, 170, 174, 180, 181, 183, 187, 188, 190, 191, 193, 196, 200, 202, 203, 204, 206, 209, 210, 222, 223, 239, 240, 244, 245, 247, 252, 255, 262, 263, 265, 266, 267, 268, 275, 279, 280, 281, 290, 292, 296, 299, 302, 304, 308, 310, 311, 316, 317, 319, 322, 325, 329, 330, 331, 332, 334, 335, 337, 338, 341, 344, 349, 354, 355, 358, 360, 361, 362, 382, 384, 385, 390, 391, 394, 397, 403, 406, 409, 411, 412, 413, 418, 419, 423, 424, 426, 428, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 472, 474, 475, 476, 477, 478, 479], "declar": [5, 32, 57, 62, 67, 72, 74, 75, 77, 83, 84, 89, 94, 100, 106, 126, 137, 164, 166, 167, 169, 173, 222, 223, 237, 247, 252, 255, 265, 289, 296, 311, 328, 335, 337, 341, 348, 382, 384, 398, 399, 405, 406, 407, 409, 411, 412, 421, 423, 424, 425, 426, 427, 432, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pybytearrayobject": [5, 8, 89], "implement": [5, 8, 9, 13, 23, 28, 30, 31, 32, 38, 41, 44, 48, 53, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 71, 72, 74, 75, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 98, 99, 103, 105, 106, 107, 112, 118, 120, 126, 130, 131, 135, 137, 141, 142, 149, 153, 154, 155, 158, 164, 167, 170, 172, 173, 178, 179, 180, 183, 188, 190, 193, 200, 202, 204, 205, 208, 209, 210, 211, 215, 217, 218, 222, 223, 227, 231, 232, 234, 239, 240, 241, 242, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 258, 263, 264, 265, 266, 268, 270, 272, 277, 278, 279, 280, 281, 282, 285, 289, 290, 293, 295, 296, 297, 299, 302, 304, 305, 306, 309, 311, 312, 316, 317, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 351, 352, 354, 355, 356, 358, 361, 362, 365, 366, 370, 372, 374, 375, 377, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 401, 405, 406, 409, 410, 411, 412, 413, 415, 418, 419, 421, 423, 425, 426, 428, 429, 431, 432, 437, 438, 446, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 474, 477, 478, 479, 480], "write": [5, 7, 18, 23, 25, 28, 32, 33, 34, 40, 41, 42, 50, 57, 58, 62, 63, 67, 71, 73, 74, 75, 77, 78, 83, 85, 86, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 108, 110, 112, 115, 116, 117, 118, 124, 128, 133, 134, 135, 137, 138, 140, 141, 143, 147, 149, 153, 154, 155, 158, 160, 164, 166, 167, 172, 173, 174, 177, 181, 184, 186, 187, 190, 191, 193, 197, 198, 202, 205, 210, 212, 214, 215, 219, 220, 222, 223, 225, 227, 231, 233, 240, 242, 243, 244, 245, 247, 251, 252, 255, 256, 259, 264, 265, 266, 268, 270, 274, 275, 278, 280, 281, 282, 285, 289, 290, 292, 293, 295, 296, 298, 301, 302, 304, 305, 306, 308, 312, 317, 325, 326, 327, 328, 329, 330, 334, 335, 338, 339, 341, 344, 345, 347, 349, 352, 355, 356, 359, 361, 365, 367, 372, 374, 376, 378, 380, 382, 384, 385, 386, 393, 395, 396, 401, 403, 406, 407, 409, 411, 413, 415, 417, 418, 422, 423, 424, 427, 428, 432, 437, 442, 446, 447, 448, 451, 457, 458, 459, 460, 461, 462, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "interfac": [5, 7, 28, 30, 31, 32, 42, 50, 56, 58, 62, 63, 65, 67, 71, 72, 74, 79, 83, 84, 91, 92, 94, 99, 100, 102, 103, 106, 107, 108, 112, 116, 117, 118, 124, 130, 131, 141, 147, 148, 151, 153, 155, 158, 164, 166, 167, 169, 170, 172, 173, 174, 177, 182, 184, 186, 189, 190, 191, 193, 194, 200, 201, 202, 203, 204, 209, 211, 212, 215, 219, 225, 227, 230, 232, 239, 240, 242, 244, 247, 248, 249, 250, 251, 253, 255, 257, 258, 261, 263, 264, 267, 268, 270, 273, 278, 280, 282, 289, 292, 293, 294, 295, 296, 299, 301, 302, 305, 309, 311, 312, 322, 325, 327, 330, 332, 335, 336, 338, 341, 345, 347, 348, 349, 352, 357, 359, 361, 362, 366, 371, 374, 377, 380, 390, 393, 394, 396, 397, 398, 399, 400, 403, 405, 406, 407, 409, 410, 411, 413, 422, 424, 428, 451, 457, 458, 460, 461, 462, 463, 464, 465, 467, 470, 472, 473, 474, 475, 476, 478, 479, 480], "done": [5, 7, 30, 32, 33, 34, 35, 46, 48, 50, 51, 53, 54, 57, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 108, 112, 118, 123, 124, 127, 131, 134, 137, 139, 149, 153, 155, 156, 161, 163, 164, 170, 172, 173, 174, 179, 180, 181, 183, 188, 190, 193, 197, 201, 202, 205, 206, 213, 219, 222, 229, 231, 232, 242, 244, 247, 252, 255, 263, 264, 265, 266, 275, 280, 285, 289, 290, 292, 293, 296, 299, 305, 306, 311, 313, 316, 331, 335, 337, 338, 341, 342, 345, 347, 349, 354, 355, 357, 358, 362, 363, 371, 372, 380, 381, 382, 385, 386, 391, 395, 396, 398, 404, 407, 408, 409, 410, 417, 424, 426, 428, 431, 432, 448, 457, 458, 459, 460, 461, 463, 464, 470, 471, 472, 473, 474, 475, 477, 479], "work": [5, 18, 23, 25, 32, 33, 35, 36, 40, 41, 44, 54, 58, 62, 63, 67, 71, 72, 75, 76, 77, 78, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 117, 118, 120, 121, 130, 131, 132, 133, 135, 136, 137, 138, 143, 148, 149, 153, 155, 158, 160, 164, 166, 167, 170, 173, 174, 178, 180, 181, 184, 187, 188, 189, 194, 202, 204, 205, 207, 208, 212, 222, 223, 225, 226, 227, 229, 230, 238, 239, 240, 242, 244, 245, 247, 248, 251, 252, 254, 255, 257, 258, 261, 263, 264, 265, 266, 270, 272, 275, 280, 281, 284, 285, 287, 288, 289, 290, 293, 294, 295, 296, 297, 299, 301, 302, 305, 306, 313, 316, 319, 321, 325, 326, 327, 329, 332, 334, 335, 336, 338, 340, 341, 342, 344, 345, 349, 352, 354, 355, 356, 357, 358, 360, 361, 365, 371, 372, 377, 380, 384, 385, 386, 390, 391, 395, 396, 398, 399, 401, 403, 406, 407, 409, 410, 415, 416, 417, 421, 422, 423, 424, 426, 428, 430, 432, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 26, 28, 29, 30, 32, 33, 34, 41, 44, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 86, 88, 89, 91, 94, 96, 99, 100, 101, 102, 105, 106, 107, 110, 112, 115, 116, 117, 120, 124, 126, 131, 132, 134, 137, 138, 140, 142, 143, 145, 147, 148, 149, 150, 151, 153, 154, 157, 158, 160, 161, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 197, 199, 200, 202, 205, 206, 209, 210, 211, 212, 213, 215, 216, 217, 220, 222, 223, 225, 227, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 302, 304, 305, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 325, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 357, 358, 359, 361, 362, 364, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 382, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 422, 423, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 442, 445, 446, 448, 449, 451, 452, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "known": [5, 9, 23, 32, 59, 60, 62, 63, 67, 74, 84, 93, 94, 96, 103, 104, 107, 108, 118, 120, 149, 152, 155, 164, 166, 173, 180, 183, 193, 194, 206, 232, 239, 244, 247, 248, 250, 263, 264, 265, 272, 273, 281, 290, 296, 316, 317, 324, 325, 334, 337, 338, 339, 341, 345, 349, 350, 362, 365, 371, 372, 374, 380, 382, 383, 385, 386, 394, 395, 396, 405, 406, 411, 412, 418, 421, 422, 424, 426, 430, 431, 432, 452, 454, 461, 463, 465, 466, 467, 471, 473, 475, 476, 477, 479], "content": [5, 7, 8, 9, 25, 32, 37, 41, 44, 53, 57, 60, 63, 65, 67, 71, 83, 84, 87, 89, 91, 94, 99, 100, 103, 106, 107, 108, 112, 116, 120, 141, 147, 149, 151, 154, 155, 157, 160, 163, 172, 173, 174, 176, 181, 184, 188, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 212, 213, 220, 222, 223, 227, 231, 232, 237, 238, 239, 242, 244, 247, 248, 249, 250, 252, 253, 255, 259, 265, 268, 270, 273, 275, 276, 277, 278, 281, 282, 290, 293, 296, 297, 299, 304, 308, 312, 316, 317, 329, 331, 334, 337, 338, 341, 342, 344, 349, 350, 354, 356, 358, 360, 365, 374, 381, 389, 390, 391, 395, 398, 403, 405, 406, 407, 409, 411, 412, 413, 415, 416, 417, 418, 421, 422, 425, 426, 428, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "text": [5, 53, 58, 63, 67, 71, 74, 83, 84, 86, 88, 89, 94, 99, 100, 103, 106, 107, 116, 118, 120, 124, 143, 144, 147, 148, 149, 150, 153, 154, 156, 164, 165, 170, 172, 173, 175, 184, 185, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 215, 216, 220, 222, 223, 231, 235, 237, 239, 242, 245, 247, 249, 250, 251, 252, 255, 259, 263, 264, 265, 266, 267, 268, 270, 278, 279, 285, 289, 290, 293, 296, 302, 304, 305, 310, 311, 312, 317, 320, 328, 330, 337, 338, 342, 343, 345, 347, 349, 354, 356, 363, 364, 365, 368, 371, 372, 373, 377, 380, 382, 383, 384, 390, 391, 394, 395, 396, 399, 403, 405, 407, 408, 409, 411, 412, 418, 422, 424, 425, 426, 428, 430, 431, 442, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "specifi": [5, 7, 9, 11, 13, 17, 18, 22, 23, 25, 30, 32, 33, 38, 41, 44, 48, 55, 60, 62, 63, 65, 67, 72, 74, 75, 76, 78, 84, 87, 89, 91, 92, 93, 94, 99, 100, 103, 106, 107, 108, 110, 112, 113, 115, 116, 117, 118, 120, 124, 130, 131, 133, 136, 137, 139, 141, 142, 144, 147, 148, 149, 152, 153, 154, 155, 158, 160, 163, 164, 166, 170, 172, 174, 178, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 215, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 308, 310, 311, 316, 317, 319, 321, 325, 326, 327, 328, 329, 330, 332, 334, 337, 338, 341, 342, 344, 345, 349, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 365, 368, 371, 372, 374, 376, 377, 380, 381, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 401, 402, 403, 406, 407, 409, 411, 412, 418, 419, 421, 423, 424, 425, 426, 427, 428, 431, 432, 442, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "need": [5, 7, 11, 13, 18, 23, 26, 28, 30, 32, 33, 34, 41, 44, 48, 50, 51, 56, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 118, 120, 124, 130, 135, 136, 137, 138, 139, 142, 147, 149, 151, 152, 153, 154, 155, 158, 164, 166, 170, 173, 174, 176, 178, 180, 183, 187, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 222, 223, 227, 231, 232, 235, 240, 242, 244, 245, 247, 248, 249, 252, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 275, 278, 280, 281, 285, 289, 290, 292, 293, 296, 299, 302, 304, 305, 308, 311, 316, 317, 318, 319, 322, 323, 327, 328, 329, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 356, 357, 358, 360, 361, 362, 365, 371, 373, 374, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 424, 426, 427, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "copi": [5, 7, 9, 17, 25, 32, 33, 41, 42, 54, 57, 62, 63, 67, 72, 76, 79, 83, 84, 89, 94, 98, 100, 108, 110, 117, 118, 120, 124, 131, 137, 149, 155, 157, 161, 163, 164, 167, 169, 171, 173, 174, 178, 179, 180, 183, 188, 190, 197, 198, 200, 205, 210, 212, 216, 222, 223, 227, 232, 234, 241, 244, 245, 251, 252, 253, 255, 258, 264, 265, 266, 268, 273, 275, 280, 281, 287, 289, 290, 294, 296, 298, 299, 306, 316, 327, 337, 341, 342, 344, 345, 347, 349, 351, 354, 358, 364, 368, 378, 380, 381, 384, 385, 386, 391, 395, 396, 403, 411, 412, 417, 420, 422, 424, 436, 437, 438, 457, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "adjust": [5, 44, 53, 55, 56, 63, 67, 89, 102, 118, 157, 174, 180, 183, 198, 205, 287, 304, 321, 331, 337, 338, 341, 362, 365, 371, 372, 409, 458, 465, 473, 475, 476, 477, 479], "newli": [5, 41, 58, 67, 72, 84, 99, 137, 154, 158, 178, 188, 195, 229, 240, 255, 280, 290, 299, 329, 331, 334, 371, 372, 380, 406, 423, 424, 462, 464, 470, 472, 475, 476, 479], "respons": [5, 18, 23, 32, 33, 34, 44, 60, 62, 63, 67, 72, 75, 78, 92, 93, 94, 99, 100, 106, 107, 108, 124, 131, 133, 135, 153, 166, 172, 174, 176, 180, 188, 193, 208, 239, 240, 242, 245, 247, 251, 253, 263, 264, 285, 302, 311, 322, 332, 334, 335, 337, 338, 344, 345, 347, 348, 354, 382, 384, 386, 389, 397, 408, 415, 416, 417, 421, 422, 424, 426, 428, 437, 447, 457, 458, 461, 464, 465, 469, 471, 472, 473, 474, 476, 477, 479], "free": [5, 7, 11, 13, 18, 32, 33, 41, 58, 62, 63, 72, 74, 75, 77, 83, 84, 88, 94, 102, 108, 120, 126, 132, 138, 155, 173, 187, 188, 222, 226, 227, 245, 252, 280, 281, 289, 290, 296, 300, 313, 329, 341, 348, 349, 358, 378, 381, 384, 398, 406, 415, 416, 421, 422, 423, 424, 425, 426, 428, 432, 457, 459, 460, 461, 463, 464, 466, 471, 472, 473, 478, 479], "through": [5, 7, 9, 11, 22, 23, 28, 32, 41, 44, 50, 54, 58, 59, 62, 63, 66, 67, 72, 75, 76, 84, 89, 90, 92, 94, 97, 99, 100, 102, 103, 106, 107, 108, 118, 120, 124, 142, 149, 155, 164, 172, 173, 174, 175, 178, 180, 183, 187, 188, 190, 191, 193, 194, 195, 199, 201, 202, 203, 205, 207, 213, 218, 222, 223, 227, 239, 241, 242, 244, 247, 248, 254, 264, 265, 266, 268, 272, 275, 278, 280, 281, 289, 290, 294, 298, 299, 309, 311, 316, 332, 334, 337, 338, 339, 341, 342, 345, 349, 351, 358, 360, 361, 363, 365, 371, 372, 381, 382, 384, 385, 386, 390, 391, 394, 398, 402, 406, 407, 409, 411, 413, 415, 418, 422, 423, 424, 425, 426, 428, 430, 431, 432, 437, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "recod": 5, "instead": [5, 7, 13, 17, 22, 23, 28, 30, 32, 33, 39, 41, 44, 48, 51, 57, 58, 60, 62, 65, 67, 71, 72, 74, 75, 76, 83, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 112, 118, 120, 121, 124, 126, 131, 133, 137, 141, 144, 147, 149, 150, 154, 155, 156, 158, 164, 166, 167, 172, 173, 174, 178, 180, 181, 183, 187, 188, 190, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 222, 223, 225, 227, 231, 239, 240, 241, 242, 244, 245, 247, 250, 252, 255, 258, 259, 263, 264, 266, 267, 268, 272, 280, 281, 285, 289, 290, 293, 294, 296, 297, 299, 300, 304, 305, 308, 309, 310, 311, 316, 317, 318, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 341, 342, 344, 345, 349, 350, 351, 354, 355, 358, 361, 363, 365, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 395, 396, 398, 399, 401, 403, 405, 406, 407, 408, 409, 411, 419, 421, 423, 424, 425, 426, 427, 428, 431, 432, 445, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "assum": [5, 7, 32, 33, 34, 40, 44, 53, 55, 59, 62, 71, 72, 75, 83, 84, 87, 88, 94, 96, 97, 98, 99, 100, 102, 103, 106, 108, 118, 124, 148, 149, 151, 152, 155, 158, 164, 166, 172, 173, 180, 193, 196, 198, 199, 200, 206, 207, 222, 227, 232, 239, 240, 244, 245, 246, 249, 255, 263, 264, 265, 280, 285, 289, 290, 293, 294, 299, 308, 310, 331, 334, 337, 338, 341, 342, 344, 345, 349, 354, 360, 362, 368, 372, 382, 384, 386, 391, 395, 404, 412, 417, 422, 424, 426, 428, 432, 457, 458, 459, 460, 463, 464, 466, 470, 472, 473, 474, 475, 476, 479], "paramet": [5, 7, 9, 11, 13, 17, 22, 23, 28, 31, 33, 36, 44, 48, 51, 55, 57, 60, 62, 63, 65, 66, 67, 73, 74, 78, 83, 86, 92, 93, 94, 99, 103, 105, 106, 110, 113, 115, 116, 118, 124, 133, 134, 135, 137, 139, 142, 147, 148, 149, 155, 160, 163, 164, 166, 167, 169, 174, 180, 183, 187, 188, 190, 193, 194, 195, 196, 198, 200, 202, 203, 205, 206, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 225, 227, 231, 232, 239, 240, 242, 244, 245, 247, 248, 249, 250, 252, 255, 256, 258, 259, 261, 263, 264, 265, 266, 268, 269, 272, 273, 275, 278, 279, 280, 281, 285, 289, 292, 293, 294, 302, 304, 308, 309, 311, 312, 316, 317, 319, 322, 325, 327, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 343, 345, 348, 349, 352, 354, 355, 356, 358, 361, 362, 363, 364, 371, 376, 377, 378, 380, 384, 385, 386, 390, 391, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 413, 415, 416, 418, 421, 424, 425, 426, 427, 428, 429, 432, 441, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 478, 479], "buffer_length": 5, "unlik": [5, 32, 37, 40, 41, 44, 48, 54, 59, 63, 72, 75, 83, 84, 92, 93, 94, 98, 99, 100, 105, 106, 120, 124, 135, 137, 147, 160, 166, 172, 174, 180, 181, 183, 202, 222, 225, 240, 245, 255, 258, 259, 267, 268, 272, 280, 290, 292, 293, 294, 296, 302, 316, 321, 334, 338, 341, 342, 345, 354, 356, 358, 362, 365, 378, 380, 381, 382, 384, 385, 398, 401, 403, 409, 421, 424, 426, 428, 430, 431, 432, 457, 459, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 478, 479], "third": [5, 7, 23, 28, 30, 32, 57, 62, 72, 74, 75, 83, 84, 88, 89, 92, 94, 99, 100, 103, 106, 108, 110, 115, 124, 126, 130, 131, 136, 155, 164, 173, 174, 178, 180, 181, 183, 222, 225, 247, 248, 258, 264, 265, 290, 296, 299, 304, 316, 327, 329, 334, 337, 338, 340, 341, 349, 351, 365, 376, 382, 384, 386, 391, 395, 396, 398, 415, 422, 424, 428, 445, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 477, 478, 479], "integ": [5, 7, 9, 18, 22, 23, 32, 33, 34, 38, 40, 41, 44, 46, 48, 55, 60, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 93, 94, 97, 100, 102, 103, 106, 107, 112, 113, 115, 118, 120, 124, 131, 136, 139, 147, 148, 149, 152, 155, 164, 170, 173, 174, 175, 180, 183, 190, 200, 208, 209, 210, 212, 215, 218, 222, 230, 231, 240, 242, 245, 247, 251, 253, 255, 259, 263, 264, 265, 266, 267, 272, 275, 278, 280, 285, 286, 289, 290, 296, 301, 302, 304, 305, 311, 315, 316, 317, 318, 319, 325, 326, 329, 334, 335, 336, 337, 338, 342, 344, 345, 346, 349, 357, 358, 361, 362, 365, 372, 375, 380, 383, 385, 390, 394, 396, 397, 401, 404, 406, 407, 409, 415, 418, 423, 424, 426, 432, 437, 439, 447, 451, 452, 458, 459, 461, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "referenc": [5, 7, 13, 59, 62, 66, 72, 74, 84, 99, 103, 112, 118, 137, 164, 176, 188, 222, 223, 244, 252, 280, 290, 293, 296, 316, 341, 348, 398, 406, 424, 457, 459, 460, 461, 464, 465, 466, 472, 473, 479], "output": [5, 9, 18, 32, 33, 41, 58, 62, 63, 65, 67, 72, 74, 75, 78, 83, 91, 94, 96, 99, 101, 103, 104, 106, 108, 110, 112, 115, 118, 124, 131, 135, 137, 139, 141, 142, 144, 146, 147, 148, 149, 150, 153, 154, 155, 160, 161, 164, 166, 172, 173, 174, 180, 184, 187, 188, 190, 192, 197, 198, 199, 201, 205, 206, 207, 209, 215, 216, 220, 222, 225, 231, 232, 239, 241, 242, 243, 245, 252, 253, 255, 258, 259, 264, 266, 267, 272, 276, 280, 285, 289, 290, 292, 296, 297, 298, 299, 302, 304, 305, 306, 308, 310, 311, 314, 316, 318, 319, 322, 325, 328, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 353, 354, 355, 357, 358, 360, 362, 363, 364, 374, 376, 377, 378, 380, 382, 384, 391, 393, 394, 395, 396, 397, 398, 403, 407, 409, 413, 417, 418, 424, 431, 432, 441, 446, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "mode": [5, 24, 32, 33, 34, 40, 41, 58, 63, 65, 67, 72, 83, 84, 89, 91, 99, 100, 101, 102, 103, 106, 108, 110, 115, 116, 117, 118, 120, 123, 133, 140, 142, 147, 149, 155, 160, 164, 171, 173, 174, 175, 181, 184, 186, 187, 190, 197, 204, 210, 211, 215, 219, 220, 222, 225, 231, 235, 242, 244, 248, 249, 250, 251, 255, 263, 264, 266, 267, 268, 272, 279, 285, 287, 289, 292, 293, 294, 296, 298, 302, 306, 308, 315, 316, 317, 319, 320, 324, 328, 329, 331, 332, 334, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 354, 356, 358, 372, 374, 378, 379, 380, 382, 384, 393, 397, 399, 409, 411, 417, 418, 420, 421, 424, 432, 442, 444, 451, 452, 457, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "oper": [5, 7, 22, 23, 28, 32, 34, 36, 40, 41, 46, 48, 53, 58, 62, 63, 65, 67, 71, 72, 74, 75, 76, 83, 86, 89, 91, 92, 93, 99, 100, 102, 103, 106, 107, 108, 110, 111, 116, 117, 120, 124, 131, 137, 139, 140, 142, 143, 145, 149, 152, 158, 163, 164, 166, 170, 172, 173, 174, 180, 181, 183, 185, 188, 191, 192, 193, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 212, 213, 216, 217, 218, 221, 222, 224, 227, 239, 242, 244, 247, 248, 251, 252, 253, 254, 255, 258, 263, 264, 266, 267, 268, 272, 273, 280, 286, 292, 293, 296, 305, 306, 310, 311, 316, 317, 319, 325, 327, 328, 330, 332, 334, 337, 339, 344, 345, 349, 354, 355, 356, 357, 358, 359, 361, 365, 372, 374, 380, 381, 382, 386, 390, 391, 396, 398, 399, 400, 401, 403, 405, 406, 407, 409, 412, 415, 418, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 438, 439, 442, 445, 451, 452, 457, 458, 459, 461, 462, 463, 464, 465, 470, 471, 475, 476, 477, 479, 480], "usag": [5, 32, 33, 62, 63, 66, 67, 71, 72, 75, 84, 88, 89, 94, 99, 100, 102, 103, 106, 108, 110, 116, 133, 138, 141, 147, 151, 166, 175, 179, 182, 184, 185, 191, 210, 215, 222, 223, 225, 227, 231, 240, 242, 245, 247, 248, 251, 253, 256, 261, 264, 266, 269, 277, 280, 289, 290, 294, 296, 302, 304, 312, 316, 329, 341, 342, 349, 354, 358, 363, 364, 371, 378, 382, 384, 387, 391, 395, 396, 399, 403, 406, 407, 417, 421, 423, 424, 445, 451, 452, 457, 460, 461, 462, 463, 464, 465, 470, 471, 474, 475, 479], "non": [5, 7, 9, 11, 13, 18, 22, 23, 25, 26, 28, 30, 33, 34, 35, 37, 38, 41, 44, 48, 57, 58, 59, 60, 62, 63, 67, 70, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 96, 98, 99, 100, 106, 107, 113, 118, 120, 123, 124, 130, 131, 137, 141, 142, 147, 149, 153, 155, 164, 166, 172, 173, 174, 175, 178, 180, 181, 183, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 220, 222, 223, 225, 227, 230, 231, 232, 234, 239, 240, 242, 244, 245, 247, 249, 250, 254, 255, 256, 258, 262, 263, 264, 265, 266, 270, 272, 273, 275, 280, 281, 282, 285, 289, 290, 292, 293, 294, 296, 299, 302, 305, 308, 311, 313, 315, 316, 317, 319, 325, 328, 329, 330, 331, 332, 334, 335, 337, 339, 341, 342, 343, 344, 345, 349, 351, 354, 355, 358, 360, 361, 362, 373, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 397, 399, 411, 415, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 436, 437, 439, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479], "alreadi": [5, 7, 9, 13, 22, 23, 24, 27, 28, 30, 32, 33, 37, 41, 48, 50, 53, 59, 60, 62, 63, 65, 67, 72, 74, 75, 76, 83, 84, 91, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 108, 110, 118, 120, 124, 127, 131, 137, 149, 160, 164, 166, 173, 178, 180, 181, 186, 187, 193, 196, 197, 202, 205, 207, 208, 209, 210, 215, 224, 239, 240, 244, 245, 247, 252, 255, 258, 264, 265, 267, 268, 273, 278, 279, 280, 281, 289, 290, 293, 296, 299, 302, 304, 305, 316, 317, 318, 325, 326, 329, 330, 334, 337, 338, 341, 345, 349, 352, 354, 355, 358, 361, 365, 372, 380, 384, 385, 386, 390, 393, 395, 396, 399, 401, 406, 407, 409, 413, 417, 423, 424, 426, 428, 432, 457, 458, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "locat": [5, 7, 32, 33, 34, 57, 63, 67, 71, 76, 83, 84, 88, 91, 92, 93, 96, 99, 100, 103, 107, 110, 120, 139, 145, 155, 160, 164, 173, 174, 180, 181, 188, 190, 207, 208, 210, 222, 240, 244, 247, 248, 249, 250, 251, 263, 265, 266, 270, 273, 277, 280, 290, 294, 296, 297, 299, 308, 309, 310, 311, 316, 317, 329, 337, 338, 350, 351, 358, 362, 371, 380, 382, 384, 390, 391, 395, 396, 403, 405, 406, 409, 410, 411, 418, 421, 422, 423, 424, 427, 428, 432, 449, 451, 457, 458, 460, 461, 462, 463, 464, 465, 468, 470, 471, 473, 475, 477, 479], "interpret": [5, 7, 13, 23, 24, 26, 27, 28, 30, 31, 33, 38, 41, 44, 46, 48, 50, 52, 57, 58, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 86, 89, 92, 94, 96, 99, 100, 101, 102, 103, 106, 108, 110, 112, 113, 118, 120, 124, 138, 143, 148, 149, 150, 160, 163, 164, 172, 173, 174, 179, 180, 181, 183, 187, 188, 189, 190, 194, 200, 204, 206, 207, 210, 216, 219, 222, 224, 232, 242, 244, 245, 247, 248, 251, 255, 256, 258, 259, 264, 265, 275, 278, 280, 289, 290, 293, 294, 296, 304, 305, 306, 308, 310, 311, 312, 315, 316, 317, 321, 325, 327, 328, 330, 331, 332, 334, 337, 338, 341, 342, 345, 349, 351, 352, 357, 358, 361, 362, 365, 368, 371, 372, 377, 382, 384, 385, 391, 395, 396, 398, 399, 402, 406, 409, 422, 423, 424, 425, 426, 428, 430, 431, 432, 438, 445, 451, 452, 457, 458, 459, 461, 462, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "then": [5, 7, 13, 18, 23, 25, 27, 28, 30, 32, 33, 34, 41, 42, 46, 48, 58, 60, 62, 63, 65, 71, 72, 74, 75, 78, 83, 84, 87, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 112, 113, 118, 120, 124, 130, 131, 137, 142, 149, 152, 154, 155, 158, 160, 166, 173, 174, 178, 180, 181, 183, 186, 187, 188, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 222, 223, 225, 227, 232, 240, 242, 244, 245, 247, 248, 250, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 268, 269, 272, 273, 275, 278, 280, 281, 285, 289, 290, 294, 295, 296, 299, 304, 305, 306, 310, 311, 316, 319, 321, 322, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 354, 356, 358, 360, 361, 362, 363, 365, 367, 368, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 396, 397, 398, 399, 401, 403, 404, 406, 409, 410, 411, 416, 417, 418, 422, 423, 424, 426, 427, 428, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "larg": [5, 7, 18, 54, 57, 58, 62, 67, 71, 83, 91, 92, 94, 97, 100, 102, 103, 104, 106, 107, 120, 135, 155, 173, 174, 180, 181, 183, 185, 187, 190, 209, 210, 219, 244, 245, 255, 256, 259, 272, 280, 285, 289, 290, 292, 293, 296, 315, 330, 341, 342, 343, 344, 345, 349, 354, 378, 380, 384, 387, 398, 405, 406, 407, 409, 418, 421, 440, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 477, 479], "enough": [5, 41, 44, 58, 62, 63, 83, 84, 91, 92, 97, 99, 100, 102, 104, 155, 173, 180, 187, 196, 198, 244, 247, 255, 258, 262, 267, 289, 290, 296, 305, 334, 336, 338, 341, 342, 345, 358, 360, 363, 365, 381, 385, 398, 458, 459, 460, 461, 466, 472, 479], "both": [5, 7, 18, 22, 23, 24, 32, 44, 48, 54, 57, 62, 63, 71, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 112, 118, 120, 124, 131, 135, 137, 139, 141, 148, 149, 152, 155, 156, 158, 164, 166, 172, 173, 174, 178, 180, 183, 187, 188, 190, 191, 192, 193, 197, 198, 199, 200, 202, 203, 204, 207, 210, 212, 213, 217, 222, 223, 227, 230, 232, 235, 240, 241, 242, 244, 247, 252, 254, 255, 256, 264, 265, 267, 272, 275, 278, 279, 280, 281, 284, 289, 290, 292, 293, 294, 296, 299, 301, 302, 304, 305, 306, 316, 317, 319, 321, 326, 327, 329, 330, 331, 332, 334, 337, 338, 341, 342, 344, 345, 349, 351, 357, 358, 360, 362, 363, 365, 372, 374, 376, 378, 380, 382, 384, 385, 386, 390, 391, 396, 398, 401, 403, 407, 409, 413, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 438, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "trail": [5, 18, 32, 33, 38, 63, 77, 89, 91, 94, 103, 141, 144, 154, 155, 156, 164, 174, 183, 187, 193, 202, 205, 218, 222, 225, 244, 268, 281, 311, 334, 338, 341, 342, 345, 352, 362, 365, 377, 385, 391, 403, 406, 423, 424, 426, 427, 431, 432, 438, 447, 451, 458, 462, 464, 465, 466, 467, 471, 473, 474, 475, 476, 477, 479], "12": [5, 6, 10, 13, 20, 22, 23, 26, 27, 28, 30, 32, 33, 41, 44, 45, 48, 51, 55, 56, 57, 60, 62, 63, 65, 67, 70, 77, 79, 84, 88, 93, 94, 99, 100, 101, 103, 105, 106, 108, 118, 124, 130, 133, 134, 135, 137, 138, 141, 144, 148, 158, 164, 166, 170, 173, 180, 183, 188, 190, 206, 208, 212, 218, 220, 222, 223, 231, 232, 233, 238, 239, 242, 245, 247, 248, 249, 250, 252, 256, 258, 264, 265, 266, 272, 275, 280, 290, 291, 293, 294, 299, 301, 302, 315, 316, 318, 319, 321, 328, 329, 332, 334, 335, 337, 338, 340, 341, 342, 344, 345, 349, 352, 354, 356, 358, 360, 361, 362, 365, 374, 377, 378, 379, 380, 381, 382, 384, 390, 394, 395, 396, 397, 399, 409, 418, 419, 421, 423, 424, 425, 426, 427, 428, 431, 432, 437, 438, 440, 442, 444, 445, 447, 451, 452, 455, 457, 460, 461, 462, 463, 464, 465, 467, 468, 471, 475, 476, 478, 480], "remov": [5, 10, 22, 24, 26, 28, 30, 33, 34, 39, 44, 48, 54, 62, 63, 65, 67, 72, 74, 75, 79, 83, 86, 89, 92, 93, 94, 99, 100, 103, 105, 107, 108, 110, 116, 118, 119, 120, 124, 130, 133, 135, 137, 138, 140, 141, 142, 147, 149, 153, 154, 155, 157, 158, 160, 164, 166, 172, 174, 176, 179, 180, 183, 185, 188, 190, 191, 193, 197, 200, 202, 204, 205, 207, 208, 209, 210, 215, 220, 223, 231, 232, 233, 239, 240, 244, 245, 247, 248, 249, 252, 256, 258, 259, 263, 264, 266, 268, 270, 272, 278, 280, 281, 282, 289, 290, 293, 294, 296, 301, 302, 305, 310, 311, 316, 317, 322, 325, 326, 328, 329, 330, 331, 332, 337, 338, 341, 342, 349, 354, 355, 356, 358, 360, 372, 373, 378, 380, 381, 382, 384, 385, 390, 391, 396, 398, 399, 401, 403, 406, 408, 409, 417, 418, 419, 421, 422, 424, 426, 428, 432, 436, 438, 445, 447, 448, 451, 452, 454, 458, 459, 460, 461, 462, 466, 468, 471, 472, 479, 480], "becaus": [5, 23, 28, 32, 33, 34, 41, 44, 46, 51, 53, 57, 59, 62, 70, 71, 72, 74, 75, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 112, 118, 120, 124, 127, 131, 133, 134, 135, 137, 147, 148, 149, 154, 155, 158, 160, 163, 164, 166, 173, 178, 180, 181, 183, 185, 187, 190, 193, 198, 200, 202, 205, 208, 209, 210, 211, 212, 222, 223, 227, 232, 240, 241, 242, 244, 247, 248, 250, 252, 255, 258, 264, 265, 266, 267, 268, 272, 278, 280, 281, 284, 289, 290, 292, 293, 294, 296, 297, 298, 299, 315, 316, 325, 327, 328, 329, 331, 332, 334, 335, 337, 338, 341, 342, 345, 349, 354, 355, 356, 358, 361, 362, 363, 365, 371, 380, 382, 384, 385, 386, 391, 395, 396, 397, 398, 402, 403, 406, 409, 411, 415, 421, 423, 424, 425, 426, 427, 428, 431, 432, 445, 446, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "they": [5, 7, 8, 18, 23, 28, 32, 33, 34, 41, 44, 53, 54, 57, 58, 60, 62, 63, 65, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 131, 133, 136, 137, 138, 139, 142, 148, 149, 151, 152, 153, 155, 158, 160, 164, 166, 167, 172, 173, 174, 175, 176, 178, 180, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 202, 204, 205, 206, 208, 210, 212, 213, 215, 222, 223, 225, 227, 230, 232, 240, 244, 245, 247, 249, 252, 253, 255, 256, 258, 259, 264, 265, 266, 267, 268, 272, 273, 278, 279, 280, 281, 285, 289, 290, 292, 293, 296, 299, 300, 301, 304, 305, 306, 309, 311, 315, 316, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 349, 354, 355, 358, 360, 361, 362, 363, 365, 371, 372, 373, 376, 377, 380, 382, 383, 384, 385, 386, 390, 391, 396, 398, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 440, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "legaci": [5, 23, 32, 57, 67, 74, 108, 141, 160, 161, 169, 191, 192, 193, 195, 199, 202, 203, 206, 214, 232, 247, 252, 253, 267, 285, 289, 290, 329, 337, 338, 344, 349, 358, 384, 418, 428, 431, 451, 457, 465, 470, 471, 472, 473, 475, 477, 478, 479], "py_unicod": [5, 63, 119, 468, 469, 470, 472, 478, 479], "represent": [5, 7, 9, 18, 23, 25, 26, 38, 40, 48, 57, 58, 62, 63, 67, 74, 75, 84, 89, 99, 102, 106, 118, 119, 120, 144, 152, 155, 157, 164, 173, 174, 175, 179, 180, 183, 188, 193, 194, 198, 201, 202, 204, 209, 210, 222, 239, 241, 242, 245, 247, 250, 256, 259, 263, 264, 268, 269, 278, 280, 287, 290, 293, 296, 304, 311, 318, 327, 334, 337, 341, 342, 343, 344, 349, 358, 362, 368, 373, 377, 380, 382, 384, 385, 404, 406, 409, 422, 424, 428, 441, 458, 462, 463, 464, 465, 467, 470, 471, 473, 474, 475, 477, 478, 479, 480], "nonneg": [5, 147, 183, 267, 272, 334, 341, 380, 426, 432], "tini": [5, 83, 84, 178, 458, 464, 465, 479], "overflow": [5, 23, 34, 38, 41, 67, 139, 173, 180, 183, 185, 209, 211, 272, 280, 287, 349, 424, 452, 462, 464, 465, 475, 476, 479], "short": [5, 7, 40, 41, 57, 62, 67, 72, 74, 83, 89, 93, 94, 98, 100, 103, 104, 112, 118, 119, 141, 156, 173, 174, 190, 225, 242, 255, 256, 268, 280, 289, 290, 297, 328, 341, 344, 345, 349, 358, 362, 363, 365, 380, 382, 384, 407, 409, 417, 430, 438, 451, 457, 458, 460, 461, 463, 465, 471, 472, 473, 475, 476, 478, 479], "repres": [5, 6, 7, 8, 9, 11, 13, 17, 18, 22, 25, 32, 37, 38, 41, 44, 46, 54, 57, 59, 62, 63, 65, 67, 72, 76, 83, 84, 87, 89, 91, 93, 94, 97, 100, 102, 103, 106, 107, 108, 118, 120, 124, 131, 137, 142, 144, 148, 149, 151, 152, 155, 164, 173, 174, 180, 183, 188, 191, 194, 196, 198, 200, 203, 205, 206, 210, 212, 218, 222, 239, 240, 241, 245, 247, 248, 249, 250, 252, 255, 256, 259, 263, 264, 265, 267, 268, 269, 272, 273, 278, 279, 280, 282, 285, 289, 290, 293, 296, 301, 302, 304, 305, 311, 316, 318, 319, 322, 325, 329, 330, 332, 334, 335, 337, 338, 341, 342, 343, 344, 345, 348, 349, 354, 355, 358, 361, 362, 365, 368, 371, 372, 373, 377, 380, 382, 384, 385, 386, 393, 394, 396, 398, 401, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 426, 428, 431, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "float": [5, 16, 18, 40, 41, 46, 57, 62, 67, 75, 77, 83, 84, 86, 89, 92, 93, 102, 110, 113, 118, 119, 124, 137, 139, 152, 157, 159, 164, 172, 173, 178, 180, 187, 190, 206, 210, 218, 222, 223, 224, 230, 245, 247, 251, 258, 259, 263, 268, 271, 272, 280, 281, 286, 287, 289, 290, 296, 301, 305, 315, 316, 319, 325, 330, 334, 337, 338, 340, 342, 344, 349, 354, 361, 362, 363, 372, 374, 375, 380, 381, 382, 383, 384, 404, 415, 423, 424, 426, 432, 436, 438, 440, 445, 446, 447, 448, 452, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "doubl": [5, 15, 18, 25, 34, 38, 57, 62, 63, 74, 75, 77, 84, 87, 89, 100, 103, 119, 155, 157, 172, 173, 174, 179, 186, 190, 206, 232, 244, 245, 259, 266, 272, 280, 290, 294, 316, 328, 341, 342, 344, 345, 355, 358, 385, 395, 404, 413, 415, 423, 424, 426, 427, 431, 438, 440, 445, 457, 461, 462, 463, 464, 469, 470, 471, 472, 475, 476, 477, 479], "py_complex": [5, 15, 72, 89], "program": [5, 30, 32, 33, 41, 44, 65, 67, 71, 72, 76, 83, 85, 88, 92, 93, 94, 95, 99, 100, 102, 103, 107, 108, 110, 112, 116, 118, 120, 123, 124, 131, 135, 138, 144, 148, 149, 153, 154, 155, 156, 157, 161, 164, 165, 166, 172, 173, 180, 183, 190, 197, 198, 200, 205, 210, 211, 213, 219, 221, 222, 223, 224, 225, 231, 243, 244, 245, 247, 251, 252, 266, 268, 269, 273, 279, 289, 290, 293, 294, 296, 304, 305, 306, 308, 310, 311, 316, 319, 325, 327, 330, 334, 335, 337, 338, 341, 344, 345, 349, 350, 358, 361, 363, 364, 371, 372, 376, 377, 380, 382, 384, 390, 391, 394, 396, 398, 399, 401, 403, 406, 407, 415, 417, 418, 422, 423, 424, 426, 429, 430, 431, 432, 436, 448, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 479], "thus": [5, 7, 10, 32, 34, 37, 41, 53, 72, 83, 84, 89, 93, 98, 99, 100, 102, 108, 115, 118, 120, 138, 164, 166, 173, 174, 190, 198, 201, 202, 205, 210, 222, 225, 232, 240, 247, 248, 256, 259, 263, 264, 265, 266, 272, 280, 289, 290, 296, 310, 316, 324, 328, 329, 331, 334, 337, 338, 341, 345, 349, 354, 358, 362, 380, 382, 384, 390, 391, 395, 401, 403, 417, 421, 423, 426, 428, 431, 432, 451, 457, 458, 466, 471, 472, 473, 474, 475, 477, 479], "receiv": [5, 23, 32, 34, 44, 48, 66, 67, 71, 72, 75, 83, 89, 94, 99, 102, 107, 112, 113, 118, 124, 130, 131, 134, 136, 149, 153, 155, 164, 173, 187, 188, 210, 222, 232, 239, 240, 241, 242, 244, 245, 256, 264, 265, 266, 272, 280, 285, 292, 296, 302, 306, 311, 319, 326, 329, 330, 332, 334, 335, 338, 345, 355, 361, 372, 377, 382, 384, 391, 396, 398, 403, 406, 407, 409, 410, 411, 416, 422, 423, 425, 426, 458, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "actual": [5, 7, 13, 23, 32, 34, 38, 48, 51, 54, 57, 60, 62, 63, 65, 67, 72, 74, 75, 76, 83, 84, 88, 89, 91, 92, 93, 97, 99, 100, 102, 103, 104, 106, 108, 115, 120, 124, 137, 147, 149, 155, 157, 164, 166, 170, 173, 174, 175, 178, 188, 190, 194, 195, 197, 200, 203, 204, 206, 208, 210, 222, 227, 231, 242, 245, 247, 248, 249, 250, 252, 255, 258, 262, 264, 265, 266, 267, 268, 275, 278, 280, 289, 290, 292, 293, 294, 302, 305, 317, 321, 322, 327, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 361, 364, 365, 368, 377, 380, 382, 384, 385, 386, 391, 395, 397, 398, 401, 403, 406, 410, 418, 422, 423, 424, 425, 428, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 476, 477, 478, 479], "strong": [5, 7, 9, 13, 23, 26, 32, 34, 48, 51, 57, 58, 62, 63, 72, 74, 86, 93, 99, 108, 137, 167, 180, 222, 237, 338, 349, 398, 411, 418, 424, 428, 452, 459, 460, 463, 464, 469, 472, 475, 479], "increas": [5, 67, 75, 88, 89, 93, 97, 99, 106, 118, 155, 187, 188, 208, 218, 244, 252, 256, 264, 267, 287, 290, 325, 337, 338, 341, 349, 363, 372, 378, 380, 384, 396, 408, 410, 424, 431, 452, 458, 460, 461, 464, 465, 472, 475, 476, 477, 478, 479], "typeobject": [5, 92, 460, 470, 479], "similar": [5, 7, 8, 9, 13, 22, 23, 26, 28, 30, 32, 37, 44, 48, 51, 57, 58, 59, 62, 63, 65, 66, 71, 72, 74, 77, 78, 83, 84, 87, 88, 89, 92, 93, 94, 98, 99, 100, 102, 103, 106, 107, 108, 110, 118, 124, 131, 135, 137, 141, 144, 148, 149, 152, 154, 155, 160, 164, 166, 167, 172, 173, 174, 177, 178, 180, 181, 183, 185, 187, 188, 190, 192, 193, 202, 204, 208, 210, 217, 222, 223, 225, 227, 230, 232, 239, 240, 242, 244, 247, 248, 249, 252, 255, 256, 258, 263, 265, 267, 268, 273, 279, 280, 289, 290, 293, 294, 296, 298, 299, 302, 305, 310, 316, 318, 328, 329, 332, 334, 335, 336, 337, 338, 341, 342, 344, 345, 349, 351, 354, 360, 361, 362, 363, 365, 371, 377, 378, 380, 382, 384, 386, 390, 398, 403, 404, 405, 406, 407, 409, 410, 413, 415, 418, 421, 423, 424, 426, 428, 431, 432, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "anyth": [5, 28, 40, 62, 71, 72, 75, 84, 91, 94, 99, 100, 103, 104, 106, 108, 112, 118, 135, 149, 173, 174, 175, 178, 180, 183, 190, 193, 200, 208, 245, 254, 255, 264, 266, 280, 289, 294, 298, 316, 320, 327, 331, 332, 338, 342, 345, 349, 358, 361, 365, 372, 380, 382, 385, 390, 397, 401, 403, 409, 417, 423, 424, 426, 428, 437, 457, 459, 460, 463, 464, 472, 473, 477, 479], "arbitrari": [5, 13, 23, 32, 34, 36, 38, 41, 44, 54, 58, 60, 62, 67, 71, 73, 75, 83, 84, 87, 89, 93, 94, 100, 103, 106, 107, 108, 113, 118, 131, 141, 149, 155, 156, 166, 172, 173, 176, 180, 183, 188, 200, 205, 222, 227, 230, 231, 242, 245, 247, 248, 252, 255, 256, 259, 264, 265, 268, 272, 280, 284, 287, 290, 292, 293, 294, 296, 304, 310, 316, 319, 325, 327, 330, 331, 334, 335, 336, 341, 342, 347, 349, 350, 354, 358, 361, 362, 365, 380, 382, 384, 385, 386, 393, 406, 409, 415, 416, 417, 424, 441, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "turn": [5, 23, 32, 33, 34, 57, 62, 72, 84, 87, 88, 89, 91, 92, 94, 99, 102, 103, 106, 107, 108, 110, 112, 118, 120, 126, 153, 155, 164, 173, 174, 187, 190, 191, 205, 206, 222, 240, 242, 244, 252, 263, 264, 265, 280, 289, 293, 295, 298, 308, 313, 317, 325, 330, 332, 334, 341, 349, 357, 358, 361, 363, 365, 380, 384, 386, 391, 396, 416, 423, 428, 430, 431, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 475, 479], "status": [5, 32, 33, 48, 58, 62, 67, 72, 83, 91, 93, 99, 100, 107, 112, 113, 118, 142, 174, 193, 202, 204, 208, 210, 211, 238, 239, 242, 244, 245, 253, 268, 280, 285, 289, 290, 302, 304, 306, 308, 331, 335, 337, 338, 345, 349, 372, 391, 403, 437, 444, 458, 462, 463, 465, 466, 468, 470, 471, 473, 474, 475, 476, 478, 479], "where": [5, 23, 32, 33, 34, 37, 39, 41, 44, 46, 48, 53, 55, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 76, 77, 78, 83, 84, 86, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 110, 112, 118, 120, 124, 131, 137, 139, 142, 148, 149, 150, 151, 152, 155, 160, 164, 166, 172, 173, 174, 178, 180, 183, 184, 185, 187, 188, 190, 193, 196, 198, 199, 200, 202, 205, 207, 208, 210, 212, 218, 222, 223, 227, 232, 239, 240, 242, 244, 245, 247, 248, 250, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 300, 305, 309, 310, 311, 316, 321, 325, 328, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 355, 357, 358, 361, 362, 363, 365, 367, 372, 374, 376, 377, 378, 380, 381, 382, 384, 386, 389, 390, 391, 394, 395, 396, 398, 403, 406, 407, 408, 409, 411, 412, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 440, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "success": [5, 7, 9, 11, 13, 17, 18, 22, 23, 26, 27, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 72, 74, 75, 76, 78, 79, 84, 87, 89, 91, 94, 96, 99, 103, 107, 112, 113, 120, 124, 130, 131, 137, 156, 160, 161, 164, 166, 173, 174, 188, 190, 206, 212, 220, 239, 242, 245, 247, 258, 263, 266, 275, 280, 285, 289, 290, 292, 293, 296, 297, 302, 311, 315, 316, 329, 332, 334, 337, 338, 341, 344, 345, 349, 361, 371, 372, 384, 391, 403, 406, 419, 423, 424, 428, 432, 449, 452, 458, 461, 462, 465, 471, 473, 474, 475, 477, 479], "has": [5, 7, 8, 9, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 39, 41, 42, 44, 45, 46, 48, 51, 55, 57, 58, 60, 62, 63, 70, 71, 72, 74, 75, 76, 78, 83, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 115, 118, 120, 124, 126, 127, 130, 131, 132, 135, 137, 138, 139, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 164, 166, 167, 172, 173, 174, 175, 178, 180, 181, 183, 185, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 218, 222, 223, 225, 227, 229, 232, 239, 240, 241, 242, 244, 245, 247, 248, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 278, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 301, 302, 304, 305, 308, 309, 310, 311, 315, 316, 317, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 362, 363, 365, 370, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 408, 409, 411, 412, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 439, 440, 442, 445, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "leav": [5, 23, 30, 34, 59, 63, 65, 74, 75, 89, 91, 94, 100, 106, 118, 124, 136, 138, 164, 166, 174, 181, 183, 185, 188, 190, 193, 202, 208, 210, 223, 232, 240, 244, 247, 266, 268, 272, 280, 281, 289, 290, 337, 338, 354, 358, 361, 365, 380, 384, 401, 417, 423, 428, 430, 432, 438, 440, 452, 458, 460, 461, 462, 463, 465, 472, 475, 479], "unmodifi": [5, 7, 89, 113, 205, 206, 304, 341, 361, 390, 413, 479], "py_cleanup_support": 5, "get": [5, 7, 17, 23, 26, 30, 32, 33, 38, 39, 41, 44, 48, 51, 53, 57, 60, 62, 63, 65, 67, 71, 72, 74, 75, 76, 77, 78, 79, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 118, 120, 124, 126, 127, 131, 132, 134, 135, 137, 139, 142, 148, 149, 155, 157, 158, 161, 164, 166, 167, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 197, 202, 203, 205, 206, 208, 210, 213, 214, 219, 222, 225, 227, 229, 230, 232, 238, 239, 240, 242, 244, 245, 247, 248, 251, 252, 253, 255, 258, 259, 262, 263, 264, 265, 266, 268, 270, 276, 278, 280, 282, 285, 286, 289, 290, 292, 293, 294, 296, 299, 302, 305, 306, 310, 313, 315, 317, 319, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 345, 346, 347, 349, 351, 354, 355, 356, 358, 361, 362, 364, 365, 371, 372, 377, 381, 382, 384, 385, 390, 391, 394, 395, 396, 397, 398, 399, 403, 406, 407, 409, 410, 411, 412, 415, 416, 421, 423, 424, 426, 428, 434, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "eventu": [5, 32, 34, 72, 75, 78, 83, 103, 131, 137, 190, 229, 239, 244, 247, 280, 290, 306, 363, 391, 407, 415, 428, 431, 459, 460, 462, 463, 464, 465, 466, 470, 473, 475, 479], "give": [5, 7, 23, 34, 41, 62, 63, 71, 72, 74, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 98, 102, 103, 104, 105, 106, 115, 118, 120, 139, 149, 151, 152, 153, 155, 173, 174, 178, 180, 183, 187, 188, 190, 205, 210, 213, 222, 225, 227, 247, 255, 258, 265, 266, 272, 273, 275, 276, 280, 284, 289, 290, 293, 294, 296, 304, 311, 316, 329, 330, 335, 338, 341, 342, 345, 349, 361, 362, 363, 365, 372, 380, 382, 384, 386, 390, 395, 399, 401, 403, 405, 406, 407, 411, 418, 422, 423, 424, 430, 431, 440, 451, 457, 458, 460, 461, 463, 464, 465, 466, 467, 471, 472, 477, 478, 479], "chanc": [5, 34, 58, 74, 99, 100, 102, 104, 137, 138, 180, 247, 361, 463, 470, 477, 479], "had": [5, 22, 32, 41, 60, 71, 75, 84, 88, 89, 94, 100, 110, 118, 120, 138, 153, 155, 166, 167, 174, 180, 183, 188, 196, 208, 210, 240, 252, 280, 290, 294, 311, 325, 334, 338, 342, 365, 376, 378, 382, 384, 385, 390, 406, 428, 432, 437, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "origin": [5, 7, 9, 23, 32, 33, 41, 42, 59, 61, 62, 66, 67, 72, 84, 89, 91, 93, 99, 103, 105, 106, 110, 118, 120, 124, 139, 142, 147, 150, 152, 155, 164, 166, 170, 172, 173, 174, 178, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 207, 210, 218, 222, 223, 227, 231, 240, 244, 247, 252, 258, 259, 263, 264, 266, 268, 272, 275, 277, 280, 281, 289, 290, 293, 294, 296, 305, 309, 316, 321, 325, 328, 329, 334, 337, 338, 341, 342, 345, 349, 354, 358, 361, 362, 365, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 398, 403, 404, 409, 411, 412, 413, 417, 418, 419, 421, 422, 423, 424, 426, 428, 430, 432, 436, 437, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479], "bool": [5, 6, 30, 57, 67, 89, 91, 93, 118, 124, 137, 164, 165, 173, 178, 180, 208, 222, 223, 251, 258, 259, 264, 281, 286, 288, 337, 344, 375, 378, 382, 384, 406, 415, 423, 424, 426, 436, 446, 461, 464, 468, 470, 476, 477, 479], "test": [5, 23, 45, 57, 60, 67, 72, 77, 83, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 112, 118, 120, 123, 152, 153, 158, 167, 173, 174, 175, 178, 183, 184, 186, 188, 197, 210, 217, 222, 223, 225, 233, 237, 242, 244, 245, 246, 247, 248, 251, 252, 256, 258, 259, 263, 266, 269, 272, 280, 290, 293, 302, 306, 312, 316, 332, 333, 337, 339, 341, 347, 349, 354, 360, 361, 363, 371, 372, 378, 382, 385, 391, 398, 403, 409, 415, 418, 421, 422, 423, 424, 430, 436, 438, 439, 442, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478], "truth": [5, 67, 88, 94, 173, 221, 288, 341, 344, 409, 424, 426, 461, 470, 479], "boolean": [5, 16, 67, 84, 89, 99, 105, 118, 120, 136, 164, 165, 173, 174, 180, 188, 190, 222, 232, 240, 242, 245, 251, 259, 265, 271, 280, 288, 290, 292, 301, 316, 317, 334, 335, 337, 338, 347, 361, 365, 372, 375, 380, 382, 385, 391, 395, 398, 406, 407, 415, 423, 424, 429, 459, 462, 463, 464, 465, 466, 470, 471, 473, 474, 475, 477, 478, 479, 480], "redic": 5, "equival": [5, 7, 9, 13, 18, 22, 23, 24, 32, 37, 39, 41, 44, 46, 48, 53, 54, 57, 59, 60, 62, 63, 67, 72, 75, 77, 88, 89, 93, 94, 96, 98, 102, 103, 108, 110, 113, 115, 118, 120, 131, 135, 137, 147, 152, 155, 160, 164, 166, 173, 174, 175, 178, 180, 183, 187, 188, 193, 201, 202, 204, 210, 222, 223, 225, 231, 232, 240, 241, 242, 244, 247, 248, 252, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 280, 289, 290, 293, 296, 297, 298, 299, 305, 315, 316, 318, 321, 326, 334, 335, 341, 342, 345, 349, 351, 354, 358, 361, 362, 365, 380, 381, 382, 383, 384, 390, 397, 399, 401, 406, 418, 423, 424, 426, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 478, 479], "true": [5, 6, 7, 8, 9, 11, 13, 15, 17, 20, 22, 23, 25, 27, 32, 33, 34, 36, 37, 38, 42, 43, 44, 48, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 72, 75, 77, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 108, 110, 112, 113, 114, 118, 120, 123, 124, 127, 128, 130, 131, 132, 133, 134, 136, 137, 141, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 160, 163, 164, 165, 166, 167, 170, 172, 173, 174, 176, 178, 180, 183, 185, 186, 187, 188, 190, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 224, 225, 227, 228, 229, 232, 233, 235, 237, 238, 239, 240, 245, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 263, 264, 265, 266, 267, 268, 272, 273, 275, 279, 280, 281, 285, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 301, 304, 305, 308, 309, 311, 313, 314, 316, 317, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 351, 354, 356, 358, 360, 361, 362, 365, 368, 369, 372, 373, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 392, 393, 395, 396, 398, 399, 401, 403, 406, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 421, 423, 424, 426, 427, 431, 432, 436, 437, 438, 439, 440, 442, 444, 445, 446, 448, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "fals": [5, 6, 7, 22, 32, 33, 34, 46, 48, 57, 62, 63, 65, 67, 72, 83, 84, 88, 89, 91, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 112, 113, 114, 118, 120, 124, 127, 130, 131, 132, 133, 134, 136, 137, 141, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 160, 163, 164, 165, 166, 167, 172, 173, 174, 176, 178, 180, 183, 185, 187, 188, 190, 193, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 222, 223, 224, 225, 227, 228, 229, 232, 233, 238, 239, 240, 242, 245, 247, 249, 250, 251, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 273, 280, 281, 285, 288, 289, 290, 291, 292, 293, 294, 296, 300, 301, 304, 308, 309, 311, 313, 314, 317, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 344, 345, 349, 351, 354, 356, 358, 360, 361, 362, 365, 368, 369, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 392, 393, 395, 396, 398, 399, 403, 409, 411, 413, 415, 416, 417, 418, 421, 423, 424, 426, 427, 431, 432, 436, 437, 438, 439, 440, 445, 446, 448, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "express": [5, 22, 39, 46, 48, 53, 59, 65, 67, 72, 84, 86, 92, 100, 112, 118, 137, 142, 152, 156, 158, 160, 164, 180, 183, 187, 188, 190, 210, 217, 222, 227, 244, 251, 252, 256, 258, 261, 263, 265, 272, 280, 290, 294, 305, 320, 330, 334, 337, 338, 341, 342, 344, 349, 355, 358, 359, 362, 363, 365, 374, 376, 381, 382, 383, 384, 386, 394, 396, 398, 409, 415, 422, 423, 424, 425, 427, 428, 429, 431, 435, 438, 442, 443, 445, 447, 451, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480], "valid": [5, 7, 11, 18, 23, 28, 33, 41, 51, 60, 62, 63, 65, 67, 71, 72, 84, 87, 89, 91, 97, 103, 106, 108, 110, 118, 120, 137, 141, 144, 149, 154, 155, 156, 160, 164, 166, 169, 170, 172, 173, 174, 178, 180, 181, 183, 184, 186, 188, 191, 192, 194, 200, 204, 206, 208, 222, 235, 239, 241, 242, 244, 247, 252, 253, 255, 256, 258, 259, 262, 264, 265, 267, 275, 278, 280, 284, 285, 290, 298, 299, 301, 305, 308, 311, 316, 319, 320, 321, 328, 330, 332, 334, 337, 338, 341, 342, 344, 345, 349, 354, 358, 361, 362, 372, 374, 380, 382, 383, 384, 385, 390, 391, 397, 401, 407, 409, 411, 412, 416, 418, 419, 421, 423, 424, 427, 428, 431, 432, 439, 447, 451, 452, 458, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "see": [5, 7, 11, 18, 23, 26, 30, 32, 33, 39, 41, 44, 46, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 77, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 112, 118, 120, 121, 124, 130, 131, 135, 137, 139, 141, 142, 143, 148, 149, 153, 155, 158, 160, 163, 164, 165, 166, 169, 170, 172, 173, 174, 178, 180, 183, 185, 187, 188, 190, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 217, 218, 222, 223, 226, 227, 230, 231, 232, 239, 240, 242, 244, 245, 247, 248, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 269, 272, 275, 276, 278, 280, 281, 284, 285, 289, 290, 292, 294, 296, 297, 298, 299, 301, 302, 305, 308, 310, 311, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 371, 372, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "how": [5, 7, 11, 32, 34, 41, 51, 57, 60, 62, 63, 67, 70, 71, 72, 74, 75, 76, 85, 87, 91, 92, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 112, 115, 118, 120, 124, 130, 131, 135, 137, 138, 139, 142, 147, 149, 152, 153, 155, 160, 164, 169, 172, 173, 178, 180, 181, 183, 184, 186, 187, 191, 192, 197, 198, 199, 204, 208, 210, 215, 219, 222, 223, 227, 231, 232, 239, 240, 241, 244, 247, 248, 250, 252, 255, 256, 258, 259, 264, 265, 266, 269, 272, 275, 280, 281, 285, 290, 293, 295, 296, 305, 308, 315, 316, 317, 318, 319, 328, 329, 330, 334, 335, 338, 341, 342, 343, 345, 347, 349, 354, 356, 360, 361, 362, 363, 364, 372, 376, 378, 382, 384, 385, 386, 390, 391, 395, 398, 403, 404, 406, 415, 417, 421, 423, 424, 425, 426, 428, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "item": [5, 7, 14, 22, 23, 30, 32, 33, 34, 35, 36, 37, 39, 48, 53, 59, 62, 63, 67, 72, 75, 78, 83, 86, 89, 93, 94, 100, 102, 105, 110, 118, 120, 132, 139, 145, 148, 149, 154, 155, 157, 158, 161, 164, 167, 168, 173, 178, 179, 181, 186, 187, 188, 190, 191, 193, 194, 197, 202, 206, 208, 210, 214, 222, 223, 230, 231, 232, 233, 241, 244, 245, 247, 249, 250, 258, 259, 265, 266, 268, 270, 272, 273, 276, 280, 282, 285, 288, 290, 296, 299, 304, 305, 310, 313, 316, 317, 321, 329, 331, 334, 336, 337, 338, 341, 342, 344, 345, 349, 350, 355, 357, 358, 361, 364, 365, 371, 374, 377, 380, 381, 382, 385, 390, 398, 401, 403, 404, 405, 406, 408, 409, 412, 415, 418, 419, 423, 424, 426, 427, 428, 430, 431, 432, 436, 437, 438, 442, 445, 446, 448, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 479], "individu": [5, 13, 41, 44, 57, 60, 62, 67, 91, 93, 97, 98, 99, 100, 103, 108, 110, 115, 118, 155, 172, 174, 181, 183, 187, 188, 190, 193, 195, 200, 203, 216, 227, 245, 246, 258, 264, 268, 278, 279, 280, 290, 310, 316, 329, 333, 341, 342, 352, 354, 355, 358, 360, 362, 363, 365, 372, 380, 382, 384, 385, 386, 390, 394, 396, 404, 409, 415, 416, 418, 422, 424, 428, 430, 432, 436, 451, 459, 462, 463, 465, 467, 472, 473, 478, 479], "nest": [5, 13, 67, 72, 84, 86, 93, 94, 99, 103, 111, 137, 157, 166, 173, 178, 183, 184, 187, 188, 190, 196, 210, 223, 252, 258, 259, 264, 268, 280, 294, 299, 304, 309, 311, 316, 341, 342, 348, 349, 361, 365, 372, 377, 382, 384, 405, 409, 411, 423, 424, 425, 426, 431, 432, 437, 438, 451, 458, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 479, 480], "possibl": [5, 7, 13, 18, 22, 23, 27, 30, 32, 33, 34, 38, 41, 46, 48, 57, 60, 62, 63, 65, 67, 70, 71, 72, 75, 78, 87, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 112, 113, 115, 118, 120, 124, 130, 137, 138, 139, 147, 149, 155, 156, 160, 164, 166, 167, 170, 172, 173, 174, 177, 178, 180, 181, 183, 187, 188, 190, 191, 193, 194, 197, 198, 199, 200, 202, 203, 205, 207, 208, 210, 215, 219, 222, 223, 229, 232, 239, 242, 244, 247, 252, 255, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 279, 280, 285, 289, 290, 292, 294, 296, 299, 301, 305, 306, 308, 309, 311, 316, 317, 325, 328, 329, 330, 334, 337, 338, 341, 342, 343, 344, 345, 348, 349, 352, 354, 355, 358, 360, 361, 362, 363, 365, 371, 372, 378, 381, 382, 384, 385, 386, 390, 391, 394, 396, 398, 399, 401, 402, 403, 409, 411, 412, 415, 417, 418, 419, 422, 423, 424, 426, 427, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "exceed": [5, 58, 124, 137, 164, 183, 209, 210, 222, 255, 266, 281, 290, 296, 304, 319, 341, 360, 361, 377, 406, 418, 461, 462, 464, 465, 475, 476, 479], "platform": [5, 9, 18, 25, 32, 33, 50, 58, 60, 63, 67, 71, 72, 74, 75, 83, 84, 89, 100, 113, 116, 121, 124, 131, 148, 149, 155, 160, 170, 172, 173, 180, 183, 186, 190, 205, 207, 209, 210, 212, 216, 222, 226, 230, 232, 239, 242, 244, 245, 247, 248, 251, 253, 254, 255, 263, 266, 268, 272, 275, 279, 280, 281, 284, 285, 289, 290, 293, 302, 304, 305, 306, 312, 319, 320, 323, 325, 326, 330, 332, 334, 335, 336, 337, 338, 339, 344, 345, 349, 350, 351, 352, 354, 355, 358, 361, 362, 363, 364, 365, 374, 384, 391, 394, 395, 399, 402, 403, 415, 416, 421, 426, 431, 446, 451, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480], "long_max": [5, 38, 479], "howev": [5, 23, 24, 32, 33, 34, 41, 44, 48, 56, 62, 70, 71, 72, 75, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 110, 112, 118, 124, 126, 131, 133, 137, 149, 155, 158, 164, 166, 167, 173, 174, 178, 180, 183, 187, 190, 191, 193, 196, 198, 200, 202, 203, 205, 206, 210, 222, 223, 227, 232, 240, 242, 244, 245, 247, 249, 252, 255, 256, 258, 264, 265, 266, 268, 269, 278, 280, 285, 289, 290, 296, 297, 308, 316, 325, 328, 329, 330, 331, 334, 337, 338, 341, 342, 345, 349, 350, 354, 358, 360, 361, 363, 365, 372, 374, 377, 381, 382, 383, 384, 385, 386, 393, 398, 399, 401, 403, 406, 407, 411, 412, 415, 418, 422, 424, 425, 426, 428, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479], "proper": [5, 23, 32, 33, 44, 48, 58, 62, 67, 71, 72, 74, 75, 84, 89, 98, 100, 103, 108, 112, 124, 135, 152, 166, 167, 174, 187, 188, 199, 200, 204, 206, 208, 210, 227, 232, 242, 244, 247, 263, 280, 281, 290, 305, 311, 329, 332, 334, 338, 341, 344, 345, 349, 354, 358, 361, 365, 372, 384, 385, 390, 391, 406, 409, 411, 423, 424, 426, 457, 458, 459, 460, 461, 465, 466, 470, 472, 473, 474, 475, 476, 477, 479], "rang": [5, 7, 23, 25, 38, 58, 63, 67, 71, 72, 75, 83, 84, 86, 89, 91, 92, 93, 94, 97, 100, 101, 103, 106, 107, 110, 118, 124, 132, 136, 137, 139, 142, 147, 148, 152, 155, 163, 164, 166, 173, 174, 175, 180, 183, 187, 188, 190, 208, 209, 210, 222, 223, 232, 233, 238, 241, 245, 251, 252, 256, 258, 259, 275, 280, 281, 285, 290, 292, 294, 296, 301, 302, 305, 312, 313, 315, 316, 319, 323, 330, 332, 334, 337, 338, 340, 342, 344, 349, 361, 362, 363, 365, 371, 374, 377, 378, 380, 382, 384, 390, 402, 406, 415, 421, 423, 424, 425, 426, 428, 430, 431, 432, 436, 438, 439, 441, 442, 445, 446, 447, 448, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "most": [5, 7, 9, 23, 25, 30, 32, 33, 38, 41, 44, 57, 58, 60, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 123, 124, 131, 134, 137, 139, 141, 142, 144, 147, 149, 151, 155, 157, 164, 166, 173, 174, 180, 181, 183, 185, 187, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200, 202, 204, 207, 208, 210, 211, 212, 218, 222, 223, 227, 230, 231, 240, 244, 245, 247, 248, 252, 253, 255, 256, 258, 259, 263, 264, 265, 266, 267, 269, 272, 275, 280, 281, 289, 290, 292, 293, 294, 296, 299, 302, 304, 305, 311, 316, 318, 325, 326, 327, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 352, 354, 358, 360, 361, 362, 363, 365, 370, 371, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 396, 397, 398, 399, 402, 403, 404, 406, 407, 409, 410, 411, 412, 417, 418, 421, 423, 424, 425, 426, 428, 430, 432, 436, 437, 438, 439, 440, 442, 445, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "signific": [5, 40, 84, 94, 97, 100, 103, 106, 124, 130, 131, 155, 166, 175, 183, 190, 194, 255, 256, 258, 266, 272, 281, 290, 296, 305, 338, 341, 342, 349, 361, 384, 394, 407, 424, 428, 430, 431, 440, 451, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "bit": [5, 7, 25, 34, 40, 41, 57, 60, 62, 63, 65, 67, 72, 74, 75, 84, 85, 88, 89, 91, 92, 93, 94, 97, 100, 103, 106, 115, 116, 131, 139, 144, 150, 151, 152, 155, 164, 166, 174, 175, 183, 188, 190, 192, 197, 198, 199, 202, 205, 208, 212, 213, 222, 224, 227, 232, 240, 241, 256, 263, 267, 272, 281, 284, 286, 289, 290, 292, 296, 300, 303, 312, 316, 319, 325, 329, 333, 334, 338, 339, 341, 344, 345, 346, 349, 352, 354, 356, 362, 363, 365, 372, 386, 393, 394, 400, 406, 417, 418, 420, 423, 424, 426, 431, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "silent": [5, 22, 48, 55, 58, 65, 99, 100, 106, 113, 131, 138, 166, 183, 210, 215, 245, 264, 266, 268, 275, 280, 281, 290, 292, 294, 304, 305, 329, 331, 337, 342, 345, 361, 385, 390, 421, 432, 451, 457, 458, 462, 463, 465, 466, 470, 471, 473, 474, 476, 477, 478, 479], "truncat": [5, 18, 58, 63, 67, 83, 84, 116, 139, 140, 147, 174, 180, 183, 210, 222, 231, 245, 255, 258, 267, 290, 317, 334, 337, 341, 344, 356, 358, 360, 377, 378, 393, 418, 424, 426, 442, 458, 460, 464, 465, 466, 471, 472, 473, 474, 476, 479], "too": [5, 18, 34, 62, 65, 74, 83, 89, 91, 93, 94, 99, 100, 103, 106, 107, 108, 131, 135, 137, 149, 152, 155, 164, 166, 173, 181, 183, 185, 188, 190, 191, 201, 209, 210, 227, 240, 254, 255, 256, 280, 289, 302, 304, 329, 330, 334, 335, 337, 338, 341, 342, 344, 345, 349, 355, 358, 361, 365, 380, 382, 384, 385, 386, 405, 409, 418, 419, 424, 428, 430, 447, 451, 458, 459, 460, 461, 462, 464, 465, 466, 470, 472, 474, 476, 477, 479], "small": [5, 32, 38, 41, 54, 57, 62, 67, 72, 83, 84, 89, 91, 93, 97, 100, 101, 103, 106, 120, 155, 166, 173, 183, 187, 190, 240, 244, 255, 258, 268, 272, 280, 285, 290, 305, 316, 327, 330, 334, 341, 358, 361, 363, 371, 378, 384, 403, 405, 409, 424, 432, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 475, 477, 478, 479], "semant": [5, 7, 11, 13, 27, 56, 62, 63, 89, 93, 99, 100, 102, 131, 137, 158, 183, 190, 193, 199, 202, 204, 205, 222, 245, 247, 249, 264, 265, 266, 268, 280, 289, 290, 292, 293, 296, 308, 313, 316, 327, 328, 329, 334, 339, 349, 361, 362, 382, 390, 401, 419, 421, 423, 424, 425, 426, 428, 432, 451, 452, 458, 460, 461, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "inherit": [5, 28, 33, 60, 62, 67, 74, 75, 84, 87, 89, 92, 93, 98, 114, 116, 118, 120, 124, 126, 137, 153, 155, 158, 166, 173, 174, 180, 196, 208, 210, 218, 219, 222, 231, 232, 244, 247, 252, 255, 256, 266, 268, 280, 281, 289, 293, 296, 312, 325, 334, 335, 338, 339, 345, 348, 358, 361, 365, 366, 372, 374, 382, 406, 410, 411, 412, 423, 424, 426, 441, 457, 458, 461, 463, 464, 466, 470, 472, 474, 476, 477, 478, 479], "downcast": [5, 452], "mileag": [5, 332], "vari": [5, 7, 57, 74, 83, 84, 94, 102, 103, 105, 106, 108, 139, 149, 155, 180, 188, 190, 222, 244, 248, 252, 255, 263, 268, 276, 302, 332, 335, 337, 338, 339, 341, 349, 358, 361, 362, 365, 381, 385, 386, 396, 423, 424, 430, 458, 459, 460, 462, 464, 465, 471, 472, 473], "mean": [5, 7, 13, 18, 22, 23, 27, 30, 32, 33, 34, 41, 44, 58, 60, 62, 63, 65, 66, 67, 72, 74, 75, 83, 88, 89, 92, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 113, 115, 118, 120, 124, 131, 137, 139, 142, 149, 153, 155, 160, 164, 166, 167, 172, 173, 174, 175, 178, 180, 181, 183, 187, 188, 190, 193, 199, 200, 202, 203, 204, 205, 206, 210, 211, 212, 213, 215, 217, 222, 223, 225, 230, 231, 232, 239, 240, 241, 244, 247, 248, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 273, 275, 278, 280, 285, 287, 289, 290, 293, 294, 296, 298, 304, 305, 308, 311, 315, 316, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 349, 357, 358, 361, 362, 363, 365, 372, 377, 380, 381, 382, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 401, 403, 406, 409, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "occur": [5, 7, 13, 17, 18, 22, 23, 30, 38, 39, 41, 44, 48, 58, 62, 63, 65, 72, 74, 78, 84, 89, 92, 94, 97, 99, 100, 102, 106, 118, 120, 124, 135, 137, 142, 148, 149, 150, 152, 154, 155, 164, 166, 167, 172, 174, 178, 180, 183, 187, 188, 190, 200, 209, 210, 215, 225, 227, 244, 247, 252, 255, 258, 264, 266, 267, 268, 272, 285, 289, 290, 294, 296, 299, 308, 311, 316, 325, 329, 330, 332, 334, 338, 341, 342, 345, 349, 354, 358, 360, 361, 362, 365, 367, 372, 377, 380, 381, 382, 384, 391, 396, 398, 399, 403, 405, 406, 408, 409, 411, 415, 418, 423, 424, 425, 426, 428, 431, 432, 439, 448, 461, 463, 464, 465, 466, 468, 471, 472, 473, 476, 477, 478, 479], "indic": [5, 7, 30, 31, 32, 37, 40, 41, 48, 51, 53, 55, 57, 58, 60, 62, 63, 67, 72, 74, 75, 83, 84, 89, 96, 97, 99, 100, 103, 106, 107, 112, 115, 118, 120, 124, 135, 137, 149, 153, 154, 155, 164, 166, 170, 172, 173, 174, 180, 183, 186, 188, 193, 199, 200, 202, 205, 206, 207, 210, 220, 222, 223, 225, 231, 232, 238, 239, 240, 242, 244, 245, 247, 248, 252, 255, 258, 263, 264, 265, 267, 268, 273, 275, 280, 285, 289, 290, 292, 294, 297, 300, 302, 304, 305, 308, 311, 315, 316, 325, 326, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 354, 357, 358, 361, 362, 365, 372, 373, 377, 382, 384, 385, 390, 391, 394, 395, 396, 401, 402, 403, 404, 406, 409, 415, 418, 422, 423, 424, 426, 427, 428, 431, 432, 445, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479], "remain": [5, 13, 32, 41, 62, 72, 75, 84, 93, 94, 100, 103, 118, 120, 124, 137, 151, 158, 166, 172, 173, 174, 180, 183, 187, 188, 190, 191, 192, 195, 199, 200, 202, 205, 206, 208, 210, 215, 222, 223, 244, 245, 247, 265, 268, 272, 280, 289, 290, 292, 293, 294, 296, 309, 319, 321, 330, 334, 337, 341, 342, 345, 349, 358, 360, 361, 372, 380, 381, 382, 384, 390, 396, 398, 403, 422, 423, 424, 428, 431, 432, 438, 451, 452, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "option": [5, 23, 32, 33, 41, 46, 48, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 77, 87, 91, 92, 93, 94, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 113, 116, 117, 120, 124, 126, 133, 135, 137, 138, 139, 141, 144, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 164, 166, 167, 170, 172, 173, 174, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 210, 211, 213, 214, 215, 218, 222, 223, 227, 232, 235, 238, 239, 242, 245, 247, 248, 249, 251, 252, 255, 256, 258, 261, 263, 264, 265, 266, 267, 268, 269, 273, 275, 278, 280, 281, 282, 285, 290, 292, 293, 294, 296, 302, 304, 305, 306, 308, 309, 310, 311, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 355, 358, 360, 361, 362, 363, 364, 366, 368, 369, 371, 374, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 394, 395, 396, 399, 403, 407, 409, 410, 411, 413, 415, 416, 417, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "their": [5, 7, 18, 28, 32, 33, 34, 41, 44, 54, 60, 62, 63, 67, 71, 72, 74, 75, 76, 83, 84, 87, 89, 91, 92, 94, 97, 98, 99, 100, 103, 105, 106, 107, 108, 110, 113, 118, 120, 124, 130, 135, 137, 149, 155, 160, 163, 164, 166, 167, 172, 173, 174, 178, 180, 181, 183, 184, 188, 190, 191, 192, 193, 200, 202, 204, 205, 208, 210, 211, 212, 213, 215, 222, 223, 227, 232, 240, 241, 247, 248, 252, 255, 256, 258, 259, 263, 264, 265, 266, 272, 276, 279, 280, 281, 285, 289, 290, 293, 294, 296, 304, 305, 309, 310, 311, 321, 322, 323, 326, 329, 330, 332, 334, 337, 338, 339, 341, 342, 344, 345, 349, 351, 354, 357, 358, 359, 361, 362, 365, 368, 371, 372, 377, 378, 380, 382, 383, 384, 385, 390, 391, 394, 395, 396, 398, 403, 406, 407, 408, 409, 411, 413, 415, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "default": [5, 7, 17, 23, 24, 27, 31, 32, 33, 34, 44, 48, 57, 60, 62, 63, 65, 67, 70, 75, 76, 83, 88, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 113, 115, 116, 117, 120, 123, 124, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 170, 172, 173, 174, 175, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 219, 220, 222, 223, 225, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 280, 281, 282, 283, 284, 285, 288, 290, 292, 293, 294, 295, 296, 297, 301, 302, 304, 305, 306, 308, 310, 311, 312, 315, 316, 317, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 341, 342, 344, 345, 347, 349, 351, 352, 355, 356, 358, 360, 361, 362, 363, 365, 369, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 421, 423, 424, 425, 426, 427, 428, 431, 432, 444, 447, 449, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479], "touch": [5, 67, 84, 174, 216, 244, 293, 294, 425, 464, 477, 479], "keyword": [5, 57, 62, 63, 65, 67, 73, 74, 75, 83, 86, 88, 89, 94, 98, 99, 100, 113, 118, 120, 124, 133, 137, 138, 147, 149, 155, 157, 164, 167, 172, 173, 174, 180, 183, 186, 187, 188, 190, 193, 202, 203, 204, 205, 210, 215, 221, 222, 223, 227, 232, 240, 242, 244, 248, 251, 252, 258, 259, 261, 263, 264, 265, 268, 275, 280, 285, 289, 290, 293, 294, 296, 301, 304, 310, 312, 315, 316, 318, 320, 322, 324, 328, 329, 332, 334, 341, 342, 345, 349, 352, 354, 358, 360, 361, 365, 368, 372, 380, 381, 382, 384, 385, 386, 391, 395, 396, 399, 403, 407, 409, 416, 418, 423, 424, 425, 426, 427, 429, 432, 438, 439, 441, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 476, 477, 478, 479], "current": [5, 11, 13, 17, 18, 23, 26, 27, 28, 30, 32, 33, 38, 40, 41, 42, 44, 48, 52, 58, 60, 62, 63, 65, 67, 72, 74, 75, 78, 83, 87, 88, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 113, 115, 118, 120, 126, 127, 130, 131, 133, 134, 135, 136, 137, 142, 148, 149, 150, 151, 153, 155, 157, 160, 164, 166, 167, 170, 172, 173, 174, 176, 180, 182, 183, 186, 188, 190, 193, 194, 197, 199, 200, 202, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 219, 222, 227, 231, 232, 239, 241, 242, 244, 245, 247, 253, 255, 256, 258, 263, 264, 266, 268, 272, 273, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 304, 305, 306, 308, 310, 311, 312, 316, 317, 319, 320, 321, 322, 324, 326, 328, 329, 330, 334, 337, 338, 341, 342, 345, 349, 350, 351, 352, 354, 358, 360, 361, 362, 363, 364, 365, 368, 371, 372, 376, 377, 380, 382, 384, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 415, 418, 423, 424, 425, 426, 427, 428, 431, 432, 447, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "alway": [5, 7, 8, 9, 11, 13, 17, 18, 23, 25, 30, 32, 33, 34, 36, 38, 39, 41, 42, 44, 46, 48, 53, 54, 55, 57, 58, 59, 60, 62, 63, 66, 72, 74, 75, 78, 84, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 107, 108, 110, 113, 118, 120, 124, 131, 137, 139, 141, 142, 144, 147, 149, 152, 154, 155, 160, 164, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 192, 193, 200, 202, 203, 204, 205, 207, 208, 210, 211, 213, 218, 223, 227, 231, 232, 239, 241, 242, 244, 245, 247, 248, 252, 254, 255, 256, 259, 263, 264, 266, 267, 268, 269, 272, 280, 281, 289, 290, 292, 293, 296, 304, 306, 316, 321, 327, 328, 330, 331, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 354, 356, 358, 360, 361, 362, 363, 365, 372, 373, 377, 380, 382, 384, 385, 390, 391, 395, 396, 398, 401, 403, 405, 406, 409, 411, 413, 418, 421, 423, 424, 425, 426, 428, 431, 432, 445, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "end": [5, 7, 9, 13, 23, 24, 28, 30, 32, 33, 34, 36, 37, 38, 41, 55, 57, 59, 62, 63, 65, 67, 71, 72, 74, 77, 78, 79, 83, 88, 89, 93, 94, 96, 98, 99, 100, 103, 104, 106, 108, 114, 115, 118, 120, 124, 131, 133, 136, 137, 141, 144, 147, 148, 149, 151, 153, 155, 156, 157, 160, 164, 166, 172, 173, 174, 175, 179, 180, 183, 187, 188, 190, 191, 193, 202, 204, 205, 206, 207, 210, 212, 222, 223, 231, 232, 237, 239, 240, 242, 244, 245, 247, 252, 255, 258, 259, 264, 265, 266, 267, 268, 270, 275, 276, 279, 280, 281, 285, 289, 290, 292, 293, 294, 298, 299, 302, 305, 306, 308, 311, 316, 317, 325, 327, 328, 329, 332, 334, 337, 338, 341, 342, 344, 345, 349, 351, 354, 355, 358, 359, 360, 362, 367, 372, 373, 374, 376, 377, 380, 384, 385, 386, 391, 396, 403, 404, 406, 407, 409, 411, 412, 413, 417, 418, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 436, 437, 438, 439, 442, 444, 445, 446, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "here": [5, 7, 23, 28, 32, 33, 34, 41, 44, 50, 51, 62, 71, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 103, 107, 108, 110, 112, 118, 120, 127, 135, 139, 142, 149, 151, 153, 155, 164, 166, 167, 172, 173, 174, 178, 180, 183, 187, 188, 190, 193, 195, 196, 197, 199, 202, 203, 204, 205, 206, 213, 218, 219, 222, 223, 227, 231, 232, 239, 242, 244, 245, 248, 252, 253, 264, 265, 266, 267, 272, 280, 285, 289, 290, 294, 296, 302, 304, 311, 312, 316, 319, 326, 328, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 349, 354, 357, 358, 361, 362, 363, 365, 372, 380, 381, 382, 384, 385, 386, 391, 394, 396, 399, 403, 404, 406, 407, 409, 419, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 447, 451, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 474, 475, 476, 477, 478, 479], "colon": [5, 67, 89, 103, 180, 190, 193, 196, 202, 205, 225, 227, 239, 252, 256, 261, 264, 268, 294, 299, 316, 332, 342, 373, 374, 391, 396, 403, 406, 423, 426, 427, 431, 451, 452, 457, 464, 465, 475, 479], "error": [5, 7, 8, 9, 13, 14, 17, 18, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 73, 74, 75, 78, 83, 86, 88, 89, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 112, 113, 116, 117, 118, 120, 130, 131, 135, 138, 139, 140, 141, 142, 143, 144, 147, 149, 152, 153, 154, 156, 160, 161, 164, 166, 168, 172, 173, 174, 178, 179, 180, 181, 184, 187, 190, 191, 193, 194, 198, 199, 200, 202, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 222, 223, 225, 226, 231, 241, 242, 243, 244, 245, 247, 249, 251, 253, 254, 255, 256, 259, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 275, 280, 281, 282, 284, 285, 287, 290, 292, 293, 295, 296, 299, 302, 305, 308, 316, 319, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 346, 347, 349, 352, 355, 356, 358, 359, 361, 365, 372, 377, 380, 382, 384, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 415, 416, 417, 418, 420, 423, 424, 425, 426, 427, 431, 432, 438, 441, 448, 451, 452, 457, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "messag": [5, 23, 32, 33, 53, 58, 65, 67, 71, 72, 74, 75, 78, 83, 84, 88, 91, 94, 97, 103, 106, 107, 112, 118, 120, 124, 131, 134, 140, 141, 142, 144, 149, 153, 154, 155, 160, 171, 173, 174, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 209, 210, 225, 231, 239, 240, 242, 243, 244, 245, 247, 251, 252, 256, 259, 264, 265, 266, 269, 270, 276, 280, 281, 282, 285, 289, 290, 294, 302, 308, 311, 316, 319, 328, 330, 332, 334, 335, 337, 338, 339, 349, 352, 353, 354, 355, 358, 363, 364, 371, 374, 377, 382, 384, 385, 386, 391, 394, 395, 396, 403, 409, 410, 411, 415, 417, 423, 425, 427, 432, 445, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480], "associ": [5, 23, 32, 57, 60, 62, 65, 72, 74, 75, 83, 86, 89, 91, 93, 97, 98, 99, 100, 101, 103, 104, 107, 113, 118, 124, 133, 137, 142, 149, 155, 172, 174, 176, 183, 188, 190, 191, 193, 198, 200, 210, 227, 239, 242, 244, 245, 247, 249, 252, 264, 273, 280, 289, 290, 292, 294, 296, 311, 325, 326, 334, 341, 343, 345, 354, 358, 361, 363, 365, 371, 372, 382, 384, 398, 399, 401, 402, 403, 406, 409, 411, 412, 415, 416, 418, 419, 422, 423, 424, 425, 427, 428, 432, 438, 450, 457, 465, 471, 472, 473, 476, 477, 478, 479], "semicolon": [5, 32, 75, 103, 294, 337, 423, 432, 451, 457], "mutual": [5, 62, 67, 102, 108, 116, 259, 265, 268, 289, 316, 365, 376, 382, 399, 425, 479], "exclud": [5, 18, 33, 58, 63, 98, 100, 103, 160, 178, 180, 188, 190, 232, 244, 258, 268, 272, 276, 278, 290, 293, 305, 311, 338, 341, 349, 354, 361, 362, 363, 372, 378, 385, 409, 417, 418, 422, 423, 424, 426, 432, 438, 445, 451, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479], "note": [5, 7, 18, 23, 25, 28, 30, 32, 33, 39, 41, 44, 45, 50, 51, 53, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 118, 120, 124, 130, 135, 137, 138, 139, 141, 148, 149, 152, 154, 155, 158, 160, 164, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 187, 188, 190, 191, 193, 195, 196, 197, 198, 201, 202, 205, 206, 210, 211, 212, 213, 217, 218, 222, 223, 225, 227, 230, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 258, 259, 264, 265, 266, 267, 268, 272, 275, 280, 281, 282, 284, 285, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 302, 304, 305, 306, 316, 318, 319, 321, 325, 328, 329, 331, 332, 337, 341, 342, 344, 345, 348, 349, 350, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 374, 377, 380, 381, 382, 384, 385, 386, 390, 391, 394, 396, 397, 398, 399, 401, 403, 405, 406, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 423, 426, 427, 428, 430, 431, 432, 438, 439, 442, 445, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 477, 478, 479], "do": [5, 7, 18, 22, 23, 28, 32, 33, 34, 35, 41, 42, 51, 55, 58, 59, 60, 62, 63, 67, 71, 72, 74, 75, 76, 77, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 118, 120, 124, 130, 135, 136, 137, 138, 139, 148, 149, 155, 156, 158, 160, 164, 166, 173, 174, 175, 176, 178, 183, 186, 187, 188, 190, 191, 192, 193, 194, 198, 199, 202, 204, 205, 208, 210, 211, 222, 223, 225, 227, 240, 241, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 263, 264, 265, 266, 268, 272, 280, 281, 289, 290, 292, 293, 294, 296, 302, 305, 311, 316, 317, 319, 327, 328, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 349, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 364, 370, 371, 372, 374, 376, 378, 380, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 432, 437, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "decrement": [5, 7, 9, 34, 62, 72, 75, 84, 137, 188, 280, 290, 294, 330, 361, 372, 424, 479], "abov": [5, 7, 23, 32, 33, 41, 57, 62, 63, 67, 71, 72, 74, 75, 84, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 113, 115, 116, 118, 120, 124, 135, 137, 147, 148, 149, 152, 155, 160, 164, 166, 172, 173, 174, 175, 176, 178, 180, 181, 183, 185, 186, 187, 188, 190, 194, 197, 200, 202, 205, 210, 212, 222, 227, 231, 232, 239, 240, 244, 248, 255, 256, 263, 264, 265, 266, 267, 272, 275, 280, 285, 289, 290, 294, 296, 304, 305, 310, 316, 321, 329, 330, 331, 332, 334, 337, 338, 339, 341, 342, 344, 345, 349, 350, 358, 362, 365, 371, 372, 376, 380, 382, 384, 385, 386, 390, 391, 393, 398, 401, 403, 404, 406, 409, 416, 417, 422, 423, 424, 427, 428, 430, 431, 432, 439, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 476, 477, 478, 479], "what": [5, 9, 23, 25, 26, 30, 32, 33, 38, 39, 41, 48, 50, 53, 57, 62, 63, 67, 71, 74, 75, 88, 89, 92, 93, 94, 96, 100, 102, 103, 104, 106, 107, 108, 110, 118, 120, 124, 131, 137, 149, 152, 155, 160, 164, 167, 172, 173, 174, 180, 182, 183, 184, 196, 197, 198, 200, 204, 205, 210, 212, 222, 227, 232, 240, 241, 244, 245, 246, 247, 248, 258, 263, 264, 265, 266, 267, 269, 276, 290, 292, 293, 295, 304, 308, 311, 312, 316, 317, 325, 329, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 347, 349, 354, 357, 358, 364, 371, 372, 376, 380, 382, 384, 385, 386, 390, 396, 406, 407, 409, 417, 423, 425, 426, 428, 430, 431, 432, 438, 457, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "succeed": [5, 7, 8, 9, 11, 13, 17, 18, 25, 36, 38, 39, 42, 44, 46, 48, 53, 54, 55, 59, 60, 62, 63, 66, 84, 103, 120, 173, 190, 206, 229, 246, 285, 290, 293, 329, 333, 334, 338, 358, 384, 385, 386, 390, 391, 401, 406, 423, 425, 427, 451, 460, 461, 462, 479], "arg": [5, 10, 20, 23, 28, 32, 33, 34, 35, 57, 58, 60, 61, 62, 63, 65, 67, 71, 72, 74, 75, 77, 83, 84, 86, 88, 89, 92, 93, 98, 99, 100, 108, 110, 113, 114, 118, 120, 123, 124, 130, 135, 137, 138, 140, 142, 153, 157, 161, 163, 166, 167, 172, 173, 174, 180, 184, 187, 188, 194, 197, 200, 202, 209, 210, 212, 221, 222, 223, 225, 229, 244, 245, 250, 252, 258, 261, 264, 265, 266, 268, 280, 281, 288, 289, 290, 294, 296, 297, 304, 305, 312, 313, 315, 332, 341, 342, 345, 349, 351, 355, 358, 361, 372, 376, 380, 382, 384, 385, 386, 391, 395, 398, 423, 424, 427, 432, 437, 439, 444, 447, 451, 452, 458, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 477, 478, 479], "exhaust": [5, 62, 94, 120, 155, 157, 188, 222, 239, 258, 290, 324, 339, 341, 358, 365, 382, 385, 418, 423, 424, 426, 460, 462, 463, 464, 466, 474, 475, 479], "appropri": [5, 9, 18, 23, 30, 40, 41, 48, 53, 60, 62, 63, 67, 70, 72, 74, 75, 87, 89, 91, 93, 94, 99, 100, 102, 103, 107, 108, 110, 118, 124, 135, 137, 149, 154, 155, 174, 180, 181, 183, 190, 192, 193, 195, 198, 199, 202, 203, 204, 205, 208, 222, 223, 227, 232, 239, 240, 242, 245, 247, 255, 256, 263, 264, 265, 266, 268, 272, 280, 289, 290, 293, 296, 304, 305, 311, 316, 321, 325, 330, 332, 334, 335, 338, 341, 342, 344, 345, 349, 354, 361, 362, 371, 377, 380, 381, 382, 385, 390, 391, 395, 398, 399, 404, 406, 407, 409, 411, 417, 418, 422, 425, 426, 428, 432, 451, 457, 458, 459, 460, 461, 462, 464, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "due": [5, 23, 32, 44, 62, 65, 74, 75, 83, 92, 99, 102, 107, 120, 124, 135, 137, 166, 172, 173, 174, 180, 181, 187, 205, 210, 218, 239, 244, 247, 255, 264, 265, 266, 268, 272, 280, 296, 311, 322, 324, 338, 341, 345, 358, 361, 367, 382, 384, 385, 398, 405, 418, 423, 424, 426, 427, 428, 431, 452, 457, 458, 459, 462, 464, 465, 466, 470, 471, 472, 474, 475, 476, 477, 478, 479], "failur": [5, 7, 8, 9, 11, 13, 18, 22, 23, 24, 25, 28, 30, 32, 33, 34, 37, 38, 39, 41, 44, 46, 48, 50, 53, 54, 57, 58, 59, 63, 65, 67, 72, 89, 102, 103, 112, 120, 131, 173, 174, 180, 184, 188, 190, 210, 240, 266, 275, 279, 280, 290, 293, 299, 319, 329, 331, 334, 338, 341, 358, 362, 364, 385, 386, 419, 421, 422, 423, 426, 427, 432, 439, 459, 462, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 479], "at": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 30, 32, 33, 34, 37, 40, 41, 42, 44, 48, 51, 57, 58, 59, 60, 62, 63, 65, 67, 70, 71, 72, 74, 75, 76, 78, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 112, 113, 115, 118, 120, 123, 124, 127, 131, 133, 134, 136, 137, 138, 139, 141, 142, 144, 147, 149, 151, 152, 153, 155, 157, 160, 164, 166, 167, 170, 172, 173, 174, 177, 178, 180, 183, 185, 187, 188, 189, 190, 191, 193, 197, 198, 199, 200, 204, 205, 207, 208, 210, 211, 212, 215, 218, 220, 222, 223, 227, 229, 231, 232, 239, 240, 242, 244, 245, 247, 248, 252, 255, 258, 259, 261, 263, 264, 265, 266, 267, 268, 272, 275, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 302, 305, 306, 308, 310, 311, 315, 316, 317, 319, 321, 325, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 341, 342, 344, 345, 349, 350, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 371, 372, 373, 374, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 437, 438, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "left": [5, 15, 32, 33, 46, 62, 63, 67, 71, 72, 74, 89, 91, 94, 100, 103, 104, 106, 108, 120, 124, 139, 144, 147, 152, 153, 154, 157, 164, 173, 174, 178, 180, 183, 187, 188, 190, 193, 209, 213, 216, 219, 222, 223, 225, 232, 244, 247, 264, 265, 266, 268, 278, 280, 289, 290, 292, 294, 299, 311, 316, 321, 328, 334, 337, 338, 341, 342, 345, 360, 361, 365, 371, 372, 380, 382, 383, 384, 386, 391, 396, 407, 423, 424, 426, 428, 431, 432, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 474, 476, 477, 479], "untouch": [5, 63, 178, 452, 479], "posit": [5, 7, 13, 23, 25, 37, 46, 57, 59, 60, 62, 63, 67, 72, 75, 83, 84, 86, 88, 89, 91, 93, 94, 96, 98, 100, 103, 105, 106, 113, 115, 118, 120, 124, 131, 134, 136, 137, 138, 142, 147, 151, 152, 153, 155, 157, 160, 172, 173, 174, 178, 180, 183, 187, 188, 190, 208, 210, 212, 218, 219, 222, 223, 231, 232, 244, 249, 252, 255, 258, 259, 261, 263, 264, 267, 270, 272, 275, 279, 280, 281, 290, 293, 296, 297, 308, 311, 312, 315, 317, 318, 322, 325, 329, 334, 337, 338, 341, 342, 344, 345, 346, 347, 349, 354, 358, 359, 361, 362, 365, 368, 372, 374, 377, 378, 381, 382, 384, 385, 386, 390, 394, 395, 397, 404, 406, 409, 411, 417, 418, 423, 426, 427, 438, 441, 445, 458, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "local": [5, 13, 16, 18, 30, 31, 33, 34, 48, 52, 58, 65, 67, 72, 78, 83, 84, 86, 87, 88, 89, 91, 94, 98, 99, 100, 103, 105, 106, 108, 112, 118, 124, 138, 142, 148, 149, 150, 154, 157, 161, 164, 167, 172, 173, 174, 180, 183, 187, 188, 189, 190, 197, 206, 210, 222, 223, 239, 242, 243, 244, 245, 247, 251, 252, 255, 256, 258, 264, 266, 269, 275, 280, 285, 290, 291, 293, 294, 296, 305, 310, 311, 316, 317, 329, 331, 332, 334, 338, 341, 342, 345, 348, 349, 351, 358, 359, 362, 375, 376, 377, 382, 384, 386, 391, 394, 401, 405, 409, 410, 411, 412, 415, 418, 421, 423, 424, 425, 426, 428, 432, 434, 436, 437, 444, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 477, 479, 480], "pyarg_vapars": [5, 56, 479], "va_list": [5, 9, 18, 23, 63, 462, 474, 479], "varg": [5, 9, 23, 63], "ident": [5, 9, 18, 25, 45, 48, 63, 67, 72, 83, 92, 93, 94, 97, 99, 100, 120, 124, 138, 140, 152, 156, 161, 178, 180, 183, 187, 190, 193, 198, 202, 204, 212, 213, 222, 227, 242, 258, 264, 266, 268, 278, 280, 290, 302, 305, 316, 325, 329, 330, 334, 337, 338, 341, 344, 349, 352, 361, 362, 371, 374, 381, 385, 386, 398, 406, 409, 421, 424, 427, 437, 460, 461, 463, 464, 468, 471, 475, 476, 477, 479], "rather": [5, 7, 22, 23, 30, 32, 40, 44, 54, 57, 60, 63, 71, 72, 74, 75, 83, 93, 98, 99, 100, 108, 112, 118, 120, 124, 135, 138, 147, 149, 152, 153, 155, 160, 166, 173, 174, 178, 180, 183, 188, 205, 206, 207, 208, 210, 222, 223, 232, 240, 244, 245, 252, 255, 258, 264, 265, 266, 267, 268, 272, 280, 289, 290, 292, 293, 297, 299, 309, 310, 311, 316, 321, 328, 329, 331, 332, 334, 337, 338, 341, 342, 345, 349, 354, 358, 362, 363, 365, 368, 371, 372, 374, 380, 382, 384, 385, 386, 390, 391, 395, 396, 398, 403, 406, 409, 415, 418, 419, 421, 423, 424, 426, 428, 430, 432, 451, 452, 457, 459, 460, 461, 462, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "than": [5, 10, 18, 22, 23, 24, 25, 30, 32, 33, 34, 37, 38, 40, 41, 44, 48, 51, 54, 55, 57, 60, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 102, 103, 104, 105, 106, 107, 108, 112, 113, 115, 118, 120, 124, 131, 135, 137, 138, 142, 144, 145, 147, 149, 152, 155, 157, 158, 160, 164, 166, 167, 172, 173, 174, 178, 180, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 210, 212, 215, 222, 223, 227, 231, 232, 239, 240, 244, 245, 247, 248, 252, 255, 256, 258, 259, 264, 265, 266, 267, 268, 269, 272, 273, 275, 280, 281, 285, 289, 290, 292, 293, 294, 296, 297, 299, 304, 305, 309, 310, 311, 316, 317, 319, 321, 322, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 344, 345, 348, 349, 350, 354, 355, 358, 360, 361, 362, 363, 365, 368, 370, 371, 372, 374, 377, 378, 380, 382, 384, 385, 386, 390, 391, 395, 396, 398, 401, 403, 405, 406, 407, 409, 411, 415, 418, 421, 423, 424, 426, 428, 430, 431, 432, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "kw": [5, 62, 173, 186, 194, 200, 202, 205, 259, 358, 368, 370, 371, 372, 385, 386, 396, 437, 458, 461, 464, 471], "empti": [5, 13, 17, 22, 24, 30, 32, 33, 37, 44, 48, 54, 58, 67, 72, 75, 83, 84, 87, 89, 94, 103, 104, 108, 112, 118, 120, 124, 131, 132, 134, 136, 137, 141, 142, 147, 148, 149, 151, 153, 154, 155, 157, 161, 164, 167, 172, 178, 180, 181, 185, 187, 188, 190, 193, 194, 200, 202, 204, 205, 206, 209, 210, 215, 222, 223, 225, 227, 230, 231, 233, 239, 242, 247, 252, 255, 256, 258, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 280, 285, 289, 290, 293, 296, 306, 311, 312, 313, 316, 322, 324, 325, 326, 327, 328, 329, 330, 331, 334, 337, 338, 341, 342, 344, 345, 349, 354, 355, 358, 360, 361, 365, 371, 372, 376, 378, 380, 381, 382, 383, 384, 385, 390, 391, 396, 401, 403, 404, 406, 407, 409, 415, 416, 418, 419, 423, 424, 426, 427, 428, 431, 432, 436, 438, 445, 451, 452, 457, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "denot": [5, 45, 60, 67, 84, 103, 164, 188, 241, 242, 252, 256, 290, 319, 338, 341, 365, 382, 391, 423, 424, 426, 427, 428, 431, 458, 464, 476, 479], "added": [5, 13, 22, 23, 30, 33, 41, 44, 57, 58, 60, 62, 63, 67, 72, 74, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 108, 110, 112, 113, 115, 118, 124, 126, 133, 134, 137, 139, 141, 147, 148, 149, 153, 155, 157, 158, 160, 164, 166, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 208, 210, 211, 215, 222, 231, 232, 239, 240, 242, 244, 245, 247, 248, 255, 256, 259, 263, 264, 265, 266, 267, 268, 272, 273, 278, 280, 285, 289, 290, 293, 296, 299, 301, 302, 304, 305, 308, 315, 316, 318, 321, 325, 327, 329, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 352, 354, 355, 358, 360, 361, 362, 365, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 390, 391, 395, 396, 397, 398, 399, 403, 406, 407, 409, 412, 415, 416, 417, 418, 422, 423, 424, 426, 428, 431, 432, 440, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "support": [5, 7, 13, 16, 22, 23, 25, 31, 33, 36, 37, 39, 41, 42, 46, 48, 53, 57, 59, 60, 62, 64, 66, 67, 72, 73, 78, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 103, 107, 108, 110, 113, 115, 117, 118, 120, 124, 130, 131, 135, 137, 139, 141, 144, 149, 151, 155, 158, 160, 161, 170, 172, 173, 174, 177, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 198, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 223, 225, 232, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 278, 280, 281, 285, 287, 289, 290, 292, 293, 294, 295, 296, 299, 301, 302, 304, 305, 311, 312, 315, 316, 317, 318, 319, 325, 326, 327, 329, 330, 331, 332, 334, 335, 337, 339, 341, 342, 344, 345, 349, 351, 355, 357, 361, 362, 364, 365, 372, 373, 374, 377, 378, 381, 383, 384, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 411, 412, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 438, 445, 447, 451, 452, 453, 457, 459, 460, 462, 463, 465, 466, 467, 470, 471, 472, 479, 480], "pyarg_vaparsetupleandkeyword": [5, 56, 462, 479], "pyarg_validatekeywordargu": [5, 56, 479], "key": [5, 22, 32, 34, 39, 48, 53, 54, 62, 67, 77, 83, 84, 86, 91, 92, 93, 94, 98, 99, 100, 102, 110, 120, 124, 140, 145, 149, 153, 154, 157, 158, 161, 164, 167, 171, 172, 174, 178, 179, 180, 181, 183, 186, 188, 190, 191, 193, 194, 198, 200, 202, 203, 209, 210, 222, 223, 227, 233, 234, 241, 242, 245, 247, 248, 252, 253, 256, 258, 259, 263, 264, 265, 267, 268, 269, 270, 276, 279, 282, 284, 285, 288, 290, 292, 294, 295, 296, 301, 302, 304, 305, 309, 316, 317, 326, 327, 330, 331, 337, 341, 342, 343, 349, 351, 354, 358, 364, 365, 372, 380, 381, 382, 385, 386, 390, 391, 398, 401, 403, 409, 412, 413, 415, 417, 421, 423, 424, 426, 427, 428, 432, 436, 437, 438, 442, 448, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "dictionari": [5, 21, 22, 23, 30, 32, 41, 44, 48, 52, 57, 58, 60, 62, 63, 65, 67, 72, 74, 75, 83, 84, 86, 87, 92, 93, 94, 99, 103, 105, 107, 110, 113, 116, 118, 120, 142, 149, 154, 155, 157, 164, 170, 172, 173, 178, 180, 181, 183, 184, 188, 190, 192, 193, 197, 198, 199, 200, 202, 203, 204, 209, 210, 213, 222, 223, 227, 233, 239, 241, 242, 247, 248, 252, 256, 259, 263, 264, 266, 267, 268, 269, 271, 273, 276, 280, 284, 285, 288, 289, 290, 294, 296, 297, 301, 302, 304, 305, 309, 311, 316, 321, 322, 323, 327, 332, 337, 338, 341, 342, 343, 345, 349, 351, 354, 358, 361, 365, 371, 372, 373, 376, 377, 380, 382, 384, 385, 389, 390, 391, 396, 398, 403, 409, 412, 413, 423, 424, 425, 427, 432, 436, 437, 441, 442, 448, 451, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 473, 474, 475, 476, 477, 479, 480], "latter": [5, 7, 23, 41, 72, 84, 102, 103, 107, 118, 124, 131, 142, 164, 180, 181, 193, 198, 202, 206, 212, 244, 247, 252, 255, 256, 264, 265, 273, 289, 290, 293, 296, 305, 329, 334, 337, 341, 344, 356, 365, 371, 372, 380, 382, 384, 394, 396, 397, 423, 424, 425, 426, 427, 428, 432, 457, 461, 466, 471, 472, 473, 476, 478, 479], "deconstruct": 5, "old": [5, 9, 13, 23, 41, 44, 51, 57, 58, 59, 63, 67, 72, 84, 89, 99, 103, 110, 118, 120, 149, 157, 166, 173, 174, 184, 193, 202, 210, 222, 223, 240, 245, 247, 259, 265, 266, 268, 273, 280, 289, 290, 293, 294, 296, 301, 305, 327, 330, 337, 341, 342, 349, 354, 357, 358, 365, 377, 378, 380, 382, 385, 395, 403, 406, 411, 423, 424, 426, 431, 432, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "meth_oldarg": [5, 460, 466], "been": [5, 7, 13, 18, 22, 23, 24, 27, 28, 30, 32, 33, 41, 42, 44, 46, 48, 57, 58, 59, 62, 63, 66, 72, 74, 77, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 106, 107, 108, 110, 113, 115, 118, 120, 124, 131, 132, 137, 138, 139, 142, 147, 149, 151, 153, 155, 157, 158, 164, 166, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 193, 196, 198, 199, 201, 204, 209, 210, 215, 220, 222, 223, 227, 229, 232, 239, 240, 241, 244, 245, 247, 248, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 273, 278, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 299, 302, 304, 305, 306, 311, 316, 317, 319, 325, 326, 328, 330, 331, 332, 334, 335, 337, 338, 341, 344, 345, 349, 350, 352, 354, 356, 357, 358, 360, 361, 362, 365, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 396, 397, 398, 399, 401, 403, 404, 407, 408, 409, 412, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 431, 432, 438, 442, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "standard": [5, 7, 18, 30, 31, 32, 33, 41, 58, 60, 62, 63, 65, 67, 72, 73, 74, 75, 76, 78, 79, 83, 87, 93, 94, 99, 100, 102, 103, 105, 106, 107, 110, 112, 113, 116, 118, 124, 131, 135, 139, 141, 142, 143, 148, 149, 151, 152, 154, 160, 164, 173, 174, 175, 179, 180, 183, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 215, 217, 220, 222, 227, 232, 235, 240, 242, 244, 245, 247, 252, 254, 255, 258, 263, 264, 265, 266, 268, 269, 270, 272, 273, 275, 276, 278, 280, 282, 285, 290, 292, 294, 296, 298, 299, 302, 305, 306, 308, 309, 311, 316, 318, 321, 323, 325, 328, 329, 330, 331, 332, 334, 335, 340, 342, 345, 347, 349, 350, 351, 353, 354, 355, 358, 361, 362, 363, 364, 365, 366, 371, 377, 380, 382, 383, 384, 385, 386, 390, 391, 393, 394, 396, 398, 403, 404, 406, 409, 415, 417, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 437, 440, 441, 448, 450, 451, 452, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "modifi": [5, 9, 22, 23, 27, 32, 33, 51, 60, 62, 63, 65, 67, 72, 75, 76, 78, 86, 87, 89, 93, 94, 98, 99, 100, 106, 107, 110, 118, 120, 135, 137, 139, 155, 164, 170, 173, 174, 181, 182, 183, 188, 190, 193, 194, 195, 198, 200, 202, 205, 208, 212, 213, 222, 242, 244, 252, 253, 263, 264, 265, 266, 268, 270, 278, 280, 281, 289, 290, 293, 294, 296, 299, 304, 305, 311, 316, 318, 321, 325, 326, 327, 328, 329, 332, 334, 335, 337, 341, 342, 345, 347, 349, 351, 354, 358, 361, 365, 368, 371, 372, 374, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 392, 393, 396, 401, 403, 405, 406, 412, 413, 416, 417, 419, 421, 422, 423, 424, 425, 428, 430, 431, 432, 451, 454, 458, 459, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 479], "longer": [5, 7, 22, 23, 30, 33, 34, 38, 44, 51, 57, 58, 60, 62, 63, 66, 67, 70, 72, 84, 91, 93, 94, 98, 99, 102, 107, 115, 118, 124, 139, 155, 164, 173, 174, 181, 185, 187, 188, 196, 198, 205, 208, 222, 223, 232, 239, 242, 245, 247, 248, 252, 256, 258, 262, 265, 266, 268, 280, 281, 289, 290, 304, 306, 308, 315, 316, 322, 325, 329, 334, 337, 338, 341, 342, 344, 345, 349, 354, 358, 360, 361, 362, 372, 377, 378, 380, 382, 384, 385, 386, 395, 396, 398, 405, 406, 407, 408, 409, 410, 418, 424, 426, 428, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479], "purpos": [5, 7, 17, 18, 30, 32, 36, 41, 62, 67, 71, 72, 74, 84, 89, 92, 93, 99, 100, 103, 107, 112, 120, 124, 126, 141, 152, 155, 164, 167, 170, 173, 174, 178, 180, 183, 187, 190, 193, 199, 202, 203, 210, 223, 227, 232, 242, 247, 250, 252, 258, 265, 280, 281, 289, 290, 292, 296, 304, 305, 316, 320, 322, 324, 331, 334, 337, 338, 344, 349, 354, 361, 365, 372, 380, 381, 382, 384, 385, 390, 396, 403, 406, 409, 410, 417, 421, 422, 423, 425, 426, 427, 428, 431, 436, 451, 452, 457, 458, 464, 465, 466, 467, 471, 473, 474, 475, 476, 477, 479], "conveni": [5, 7, 23, 28, 30, 32, 41, 44, 62, 67, 72, 74, 83, 84, 89, 99, 100, 106, 107, 108, 118, 122, 124, 137, 144, 148, 149, 154, 155, 164, 178, 180, 183, 186, 188, 192, 193, 195, 198, 199, 200, 202, 203, 204, 205, 206, 222, 223, 227, 231, 232, 240, 244, 248, 251, 252, 253, 255, 264, 265, 267, 268, 272, 273, 280, 281, 289, 292, 294, 296, 305, 323, 328, 332, 334, 338, 341, 345, 354, 357, 358, 360, 362, 363, 365, 369, 371, 380, 382, 384, 385, 386, 395, 397, 403, 405, 406, 409, 410, 412, 417, 423, 424, 428, 431, 432, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 474, 475, 477, 479], "decompos": [5, 94, 383, 390, 479], "continu": [5, 23, 28, 34, 35, 58, 60, 67, 72, 77, 78, 84, 86, 92, 94, 98, 99, 106, 107, 113, 116, 120, 124, 137, 152, 153, 155, 166, 174, 178, 179, 190, 193, 196, 197, 199, 204, 208, 238, 239, 242, 245, 247, 248, 258, 261, 264, 268, 279, 289, 290, 293, 294, 311, 316, 329, 330, 334, 335, 338, 340, 341, 350, 354, 362, 373, 380, 384, 386, 391, 396, 411, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 441, 448, 451, 457, 458, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 476, 477, 479], "pyarg_unpacktupl": [5, 56, 57, 67, 460, 479], "min": [5, 67, 86, 94, 100, 103, 104, 157, 163, 179, 180, 183, 222, 223, 233, 251, 252, 258, 272, 287, 313, 340, 341, 349, 363, 426, 436, 446, 463, 465, 473, 479], "max": [5, 67, 86, 94, 118, 139, 152, 157, 179, 180, 183, 222, 223, 233, 240, 241, 251, 258, 272, 287, 315, 337, 338, 340, 341, 347, 349, 396, 423, 426, 436, 446, 463, 465, 470, 471, 473, 477, 479], "simpler": [5, 62, 67, 88, 89, 91, 100, 103, 108, 118, 149, 222, 232, 280, 316, 341, 342, 365, 385, 398, 407, 409, 411, 428, 457, 458, 459, 460, 461, 463, 465, 472, 473, 476, 479, 480], "retriev": [5, 11, 23, 32, 38, 44, 48, 53, 55, 60, 67, 71, 72, 74, 83, 84, 91, 92, 94, 103, 107, 137, 149, 163, 164, 168, 173, 174, 178, 181, 186, 193, 200, 204, 205, 222, 223, 231, 238, 239, 240, 244, 245, 251, 253, 255, 262, 263, 265, 268, 280, 290, 293, 296, 299, 301, 302, 312, 316, 319, 325, 327, 329, 337, 338, 341, 342, 349, 356, 361, 368, 378, 382, 385, 391, 398, 401, 405, 409, 423, 424, 426, 432, 451, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 475, 477, 478, 479], "meth_vararg": [5, 57, 71, 72, 460, 479], "tabl": [5, 7, 30, 32, 41, 44, 57, 58, 63, 67, 73, 74, 76, 77, 89, 92, 94, 99, 102, 103, 106, 107, 145, 148, 155, 173, 174, 180, 183, 187, 192, 200, 209, 232, 244, 247, 251, 258, 259, 261, 263, 264, 273, 280, 293, 295, 316, 325, 335, 337, 338, 341, 343, 344, 347, 349, 354, 362, 365, 375, 382, 384, 399, 401, 405, 406, 418, 422, 426, 437, 442, 448, 451, 460, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 478, 479], "least": [5, 28, 33, 34, 40, 48, 51, 60, 62, 65, 71, 72, 75, 83, 84, 89, 92, 97, 100, 102, 103, 106, 108, 113, 118, 134, 147, 151, 152, 155, 157, 172, 173, 174, 180, 183, 187, 190, 191, 197, 200, 205, 207, 212, 218, 223, 229, 231, 239, 245, 255, 258, 266, 267, 272, 289, 290, 305, 306, 315, 325, 329, 330, 332, 334, 338, 340, 341, 342, 344, 345, 349, 355, 356, 357, 358, 361, 362, 363, 374, 376, 378, 382, 384, 385, 394, 402, 405, 418, 422, 423, 424, 426, 427, 430, 432, 457, 461, 464, 465, 466, 470, 472, 475, 476, 478, 479], "equal": [5, 7, 25, 32, 33, 36, 41, 53, 58, 62, 63, 65, 67, 74, 84, 88, 93, 94, 100, 105, 110, 118, 120, 130, 131, 138, 139, 145, 147, 152, 157, 167, 173, 174, 178, 180, 183, 187, 190, 192, 193, 199, 205, 213, 218, 222, 223, 225, 240, 255, 256, 258, 259, 261, 263, 269, 272, 275, 281, 290, 292, 294, 305, 316, 328, 331, 334, 337, 338, 341, 343, 344, 349, 358, 360, 361, 372, 373, 374, 378, 380, 382, 383, 384, 385, 386, 396, 398, 404, 406, 408, 409, 419, 423, 424, 426, 427, 428, 431, 432, 437, 446, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 475, 477, 478, 479], "given": [5, 7, 9, 13, 22, 23, 27, 30, 32, 34, 41, 42, 44, 48, 55, 57, 60, 62, 63, 65, 71, 72, 83, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 107, 108, 110, 113, 115, 118, 120, 124, 131, 133, 137, 142, 147, 148, 151, 152, 153, 154, 155, 160, 164, 166, 167, 170, 172, 173, 174, 175, 176, 178, 180, 181, 183, 187, 188, 190, 192, 193, 197, 199, 200, 202, 203, 205, 206, 207, 208, 210, 213, 215, 218, 222, 223, 225, 227, 230, 231, 232, 239, 240, 241, 242, 244, 245, 247, 249, 252, 255, 256, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 280, 285, 289, 290, 292, 293, 294, 296, 297, 298, 299, 305, 309, 310, 311, 316, 319, 321, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 349, 352, 354, 355, 358, 360, 361, 362, 363, 365, 368, 371, 372, 376, 377, 380, 381, 382, 383, 384, 385, 390, 391, 394, 395, 396, 398, 399, 403, 404, 406, 407, 408, 409, 410, 413, 416, 417, 418, 419, 423, 424, 425, 426, 428, 430, 431, 432, 437, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "wrong": [5, 32, 41, 72, 83, 84, 94, 98, 102, 103, 107, 108, 118, 142, 173, 180, 190, 209, 210, 245, 272, 289, 290, 292, 332, 337, 344, 349, 354, 362, 384, 385, 391, 403, 424, 437, 445, 459, 461, 462, 463, 464, 468, 470, 471, 473, 479], "element": [5, 7, 13, 32, 34, 39, 41, 48, 53, 54, 58, 60, 62, 63, 67, 84, 86, 100, 103, 106, 115, 118, 120, 131, 137, 139, 149, 153, 157, 158, 169, 172, 173, 175, 178, 179, 183, 187, 188, 190, 192, 193, 200, 202, 204, 206, 210, 217, 222, 223, 225, 239, 242, 252, 258, 259, 264, 269, 270, 272, 280, 289, 290, 301, 311, 315, 316, 319, 329, 332, 334, 341, 342, 344, 345, 349, 362, 365, 371, 372, 374, 377, 380, 381, 382, 384, 390, 398, 404, 407, 408, 411, 412, 413, 415, 416, 421, 423, 424, 425, 426, 427, 436, 438, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 477, 478, 479], "taken": [5, 32, 33, 41, 44, 54, 62, 65, 72, 74, 86, 94, 100, 118, 139, 142, 160, 164, 180, 183, 188, 190, 193, 199, 202, 203, 208, 213, 222, 227, 245, 258, 263, 265, 266, 273, 275, 280, 290, 305, 308, 311, 319, 328, 337, 338, 341, 344, 354, 356, 358, 360, 361, 363, 377, 378, 393, 396, 423, 424, 428, 432, 458, 460, 461, 463, 470, 471, 472, 473, 477, 479], "sourc": [5, 13, 22, 23, 30, 32, 33, 65, 67, 71, 72, 74, 75, 78, 83, 84, 89, 91, 92, 93, 94, 100, 102, 110, 120, 140, 150, 154, 155, 156, 160, 164, 172, 173, 174, 178, 179, 184, 187, 188, 190, 200, 204, 205, 206, 210, 211, 219, 222, 227, 232, 239, 245, 248, 249, 251, 254, 258, 259, 261, 262, 264, 265, 266, 267, 277, 278, 280, 289, 290, 292, 293, 294, 296, 297, 305, 309, 310, 312, 318, 321, 324, 327, 328, 329, 332, 334, 337, 338, 341, 342, 343, 344, 348, 349, 351, 354, 355, 358, 360, 362, 363, 364, 365, 367, 373, 376, 377, 378, 384, 391, 395, 396, 401, 403, 406, 409, 410, 411, 412, 413, 417, 418, 419, 422, 423, 424, 428, 430, 431, 432, 439, 449, 451, 452, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "_weakref": [5, 478, 479], "helper": [5, 32, 50, 67, 85, 92, 126, 161, 166, 173, 184, 193, 202, 215, 232, 247, 251, 254, 255, 261, 264, 296, 316, 329, 338, 359, 363, 377, 380, 384, 386, 391, 409, 463, 464, 472, 474, 475, 479], "modul": [5, 7, 11, 16, 17, 23, 24, 30, 32, 33, 34, 40, 41, 57, 58, 60, 62, 64, 65, 67, 70, 71, 73, 74, 75, 76, 78, 80, 86, 87, 88, 89, 90, 93, 95, 96, 101, 102, 106, 107, 108, 110, 112, 113, 115, 116, 118, 120, 121, 123, 124, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 284, 285, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 301, 302, 304, 306, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 425, 426, 430, 431, 432, 435, 436, 437, 438, 439, 441, 442, 444, 445, 447, 448, 451, 452, 454, 466, 468, 469, 479, 480], "weak": [5, 62, 66, 67, 72, 73, 84, 137, 179, 210, 223, 232, 251, 338, 341, 384, 424, 441, 460, 463, 465, 470, 473, 479, 480], "static": [5, 10, 28, 32, 34, 41, 44, 49, 51, 57, 59, 61, 63, 67, 71, 72, 74, 75, 76, 78, 79, 86, 89, 100, 103, 111, 186, 188, 212, 222, 223, 247, 253, 296, 312, 316, 341, 361, 365, 382, 385, 386, 423, 424, 428, 432, 436, 452, 459, 460, 461, 462, 465, 467, 468, 471, 474, 475, 476, 477, 478, 479], "weakref_ref": 5, "self": [5, 10, 22, 28, 43, 51, 57, 60, 62, 67, 71, 72, 74, 75, 78, 83, 86, 92, 93, 94, 96, 98, 100, 101, 104, 105, 114, 118, 120, 124, 130, 131, 140, 142, 146, 153, 157, 158, 166, 169, 173, 178, 180, 183, 184, 188, 200, 202, 208, 210, 213, 218, 220, 222, 223, 224, 227, 229, 237, 239, 240, 245, 250, 252, 256, 258, 259, 271, 280, 285, 286, 289, 290, 293, 294, 296, 302, 315, 317, 318, 330, 332, 334, 335, 337, 341, 342, 354, 355, 358, 365, 368, 371, 377, 378, 380, 381, 382, 384, 385, 386, 391, 395, 398, 406, 409, 413, 415, 416, 417, 423, 424, 428, 436, 437, 442, 447, 448, 451, 458, 459, 460, 461, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 478, 479], "callback": [5, 11, 13, 14, 22, 27, 28, 32, 60, 62, 66, 67, 72, 80, 86, 92, 98, 116, 118, 121, 123, 127, 128, 130, 131, 134, 137, 166, 220, 224, 252, 278, 280, 296, 305, 306, 311, 312, 313, 317, 326, 329, 337, 338, 339, 347, 355, 363, 365, 367, 372, 381, 382, 398, 408, 409, 411, 417, 424, 448, 463, 464, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480], "ref": [5, 33, 34, 62, 66, 67, 77, 174, 179, 398, 451, 452, 459, 465, 468, 473, 477, 479], "pyweakref_newref": [5, 56, 66, 479], "entir": [5, 41, 62, 72, 74, 83, 84, 89, 91, 92, 97, 98, 102, 103, 104, 106, 108, 110, 112, 124, 148, 149, 166, 174, 181, 193, 197, 202, 204, 210, 213, 227, 232, 239, 244, 255, 256, 258, 263, 264, 266, 267, 268, 275, 285, 289, 290, 292, 316, 319, 328, 329, 337, 338, 341, 342, 349, 354, 360, 361, 363, 365, 372, 380, 383, 384, 396, 401, 404, 406, 409, 412, 422, 423, 425, 428, 431, 432, 442, 451, 457, 459, 461, 462, 463, 464, 465, 467, 470, 472, 473, 476, 479], "py_buildvalu": [5, 10, 34, 56, 58, 59, 67, 72, 85, 463, 468, 477, 479], "base": [5, 23, 25, 30, 32, 33, 38, 42, 44, 46, 48, 49, 60, 62, 63, 67, 72, 74, 75, 77, 83, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 107, 116, 118, 120, 121, 124, 130, 134, 137, 141, 142, 143, 144, 148, 152, 160, 161, 164, 166, 170, 173, 177, 178, 179, 180, 183, 184, 186, 190, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 208, 218, 222, 223, 231, 232, 239, 240, 242, 243, 244, 245, 248, 251, 252, 253, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 277, 278, 279, 281, 285, 289, 290, 293, 295, 296, 299, 302, 305, 309, 311, 316, 317, 318, 321, 324, 326, 327, 329, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 351, 354, 356, 358, 362, 365, 369, 371, 372, 378, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 398, 399, 404, 405, 406, 407, 409, 410, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 431, 436, 439, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480], "those": [5, 7, 23, 32, 34, 38, 58, 62, 63, 65, 66, 71, 72, 75, 76, 83, 84, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 112, 118, 120, 124, 131, 137, 149, 152, 155, 158, 164, 166, 169, 172, 173, 174, 175, 180, 183, 187, 188, 190, 191, 193, 199, 200, 201, 202, 205, 207, 208, 210, 213, 217, 222, 223, 225, 231, 239, 241, 244, 247, 248, 249, 250, 252, 255, 256, 258, 259, 263, 264, 265, 266, 268, 272, 273, 280, 281, 289, 290, 292, 293, 294, 296, 299, 305, 308, 311, 316, 319, 321, 322, 326, 327, 328, 329, 330, 332, 334, 338, 341, 349, 351, 354, 357, 358, 361, 362, 365, 371, 372, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 398, 401, 406, 408, 409, 411, 412, 418, 421, 422, 423, 424, 425, 426, 428, 431, 432, 451, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "famili": [5, 16, 32, 41, 53, 67, 94, 106, 124, 134, 140, 161, 197, 209, 232, 268, 280, 290, 295, 334, 335, 352, 358, 364, 365, 368, 406, 451, 457, 461, 462, 463, 465, 472, 475, 476, 477, 479], "exact": [5, 7, 9, 11, 13, 18, 24, 28, 38, 46, 63, 65, 72, 74, 75, 83, 84, 89, 91, 92, 93, 94, 97, 98, 100, 103, 104, 106, 110, 118, 124, 131, 145, 147, 150, 166, 173, 174, 180, 183, 188, 190, 193, 195, 198, 200, 202, 204, 208, 210, 218, 222, 225, 240, 242, 247, 252, 264, 265, 266, 267, 268, 272, 280, 281, 287, 289, 290, 292, 296, 311, 316, 319, 325, 332, 334, 335, 338, 341, 342, 343, 344, 345, 349, 351, 356, 357, 360, 361, 365, 374, 377, 382, 384, 385, 386, 394, 395, 398, 407, 409, 417, 418, 423, 426, 428, 431, 432, 440, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 473, 479], "whatev": [5, 30, 72, 77, 83, 84, 87, 99, 100, 103, 108, 118, 149, 173, 192, 197, 205, 222, 247, 264, 265, 289, 290, 294, 308, 316, 341, 349, 355, 358, 361, 382, 385, 386, 391, 403, 426, 428, 458, 459, 460, 461, 462, 465, 479], "forc": [5, 32, 33, 62, 67, 72, 83, 84, 89, 94, 97, 102, 108, 124, 131, 150, 156, 160, 174, 178, 180, 181, 183, 190, 232, 245, 255, 264, 279, 280, 285, 290, 305, 306, 308, 316, 330, 342, 344, 345, 349, 358, 362, 385, 398, 403, 424, 428, 451, 465, 470, 472, 473, 474, 475, 477, 478, 479], "suppli": [5, 18, 28, 32, 62, 74, 84, 89, 91, 92, 93, 94, 103, 106, 107, 108, 118, 120, 137, 144, 149, 150, 158, 173, 174, 175, 178, 180, 183, 188, 190, 212, 223, 232, 240, 244, 245, 248, 250, 252, 256, 258, 264, 266, 280, 281, 285, 289, 290, 292, 293, 294, 299, 305, 311, 321, 325, 334, 337, 338, 341, 345, 351, 358, 361, 372, 377, 380, 382, 384, 390, 391, 395, 396, 398, 403, 411, 415, 417, 418, 421, 423, 424, 426, 428, 432, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 475, 479], "never": [5, 13, 18, 22, 23, 27, 28, 32, 33, 34, 41, 58, 59, 60, 62, 67, 72, 75, 84, 86, 89, 91, 94, 99, 100, 102, 103, 107, 108, 118, 126, 130, 131, 137, 139, 142, 149, 155, 160, 163, 164, 166, 167, 172, 173, 174, 178, 180, 183, 184, 187, 193, 196, 202, 210, 223, 227, 239, 240, 242, 244, 247, 252, 255, 256, 259, 262, 263, 264, 266, 275, 280, 289, 290, 293, 294, 296, 311, 316, 319, 321, 325, 329, 331, 335, 337, 338, 341, 344, 345, 354, 355, 358, 361, 365, 381, 382, 385, 390, 396, 398, 399, 403, 406, 409, 411, 418, 421, 423, 424, 426, 428, 431, 432, 451, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "word": [5, 11, 32, 62, 72, 84, 89, 91, 93, 96, 100, 103, 104, 105, 106, 118, 152, 155, 157, 164, 170, 173, 180, 183, 187, 190, 198, 200, 205, 244, 272, 289, 293, 294, 316, 317, 323, 328, 337, 341, 342, 346, 360, 361, 365, 382, 408, 409, 413, 426, 428, 430, 431, 432, 436, 437, 438, 445, 458, 460, 462, 463, 464, 466, 470, 474, 475, 476, 477, 479], "invok": [5, 13, 23, 27, 30, 34, 51, 57, 58, 62, 63, 67, 74, 83, 84, 92, 94, 96, 97, 100, 102, 103, 106, 108, 112, 118, 124, 142, 149, 153, 164, 166, 173, 178, 180, 190, 207, 222, 223, 240, 242, 244, 252, 263, 264, 265, 280, 289, 290, 294, 296, 297, 299, 305, 308, 310, 316, 317, 321, 329, 332, 335, 337, 338, 341, 345, 349, 355, 358, 361, 363, 365, 367, 372, 373, 376, 382, 384, 390, 395, 398, 403, 409, 410, 411, 412, 415, 416, 418, 419, 421, 423, 425, 428, 431, 433, 447, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 472, 473, 474, 476, 478, 479], "malloc": [5, 7, 33, 41, 72, 77, 210, 279, 420, 451, 458, 459, 461, 463, 473, 474, 475, 479], "onc": [5, 7, 13, 22, 23, 24, 28, 32, 33, 51, 55, 58, 60, 62, 71, 72, 74, 75, 83, 84, 88, 89, 91, 93, 94, 98, 99, 100, 102, 103, 106, 108, 115, 118, 124, 130, 131, 133, 137, 138, 147, 149, 153, 155, 156, 157, 160, 164, 166, 183, 185, 187, 190, 193, 202, 208, 210, 215, 223, 227, 231, 232, 242, 244, 247, 248, 252, 255, 258, 264, 265, 266, 267, 268, 280, 281, 285, 289, 290, 292, 296, 305, 311, 316, 317, 325, 326, 329, 330, 331, 334, 335, 337, 338, 341, 344, 350, 354, 358, 361, 363, 365, 378, 380, 382, 384, 385, 386, 391, 395, 396, 398, 399, 403, 406, 407, 409, 411, 412, 423, 424, 426, 427, 428, 432, 451, 452, 457, 458, 459, 461, 462, 463, 464, 465, 466, 470, 471, 472, 474, 476, 477, 478, 479], "space": [5, 32, 41, 48, 58, 60, 62, 63, 71, 72, 84, 91, 92, 94, 98, 99, 103, 104, 106, 113, 118, 120, 141, 144, 148, 153, 155, 158, 159, 164, 172, 174, 175, 181, 183, 187, 188, 190, 195, 196, 198, 199, 209, 210, 218, 222, 223, 239, 244, 245, 252, 256, 258, 259, 263, 265, 280, 281, 289, 290, 294, 297, 300, 311, 316, 318, 319, 328, 329, 330, 331, 332, 334, 341, 342, 343, 345, 358, 360, 361, 362, 363, 365, 368, 371, 372, 374, 378, 380, 390, 391, 393, 395, 403, 406, 409, 422, 424, 428, 430, 431, 457, 458, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 475, 476, 478, 479], "tab": [5, 65, 67, 76, 116, 120, 144, 153, 172, 174, 175, 187, 190, 195, 199, 210, 222, 239, 244, 252, 259, 294, 314, 316, 317, 320, 328, 331, 341, 342, 345, 360, 364, 371, 390, 399, 415, 431, 437, 441, 445, 451, 458, 463, 465, 468, 470, 472, 473, 475, 476, 477, 478, 479], "comma": [5, 33, 67, 77, 89, 93, 110, 149, 172, 183, 190, 239, 245, 261, 263, 264, 265, 268, 289, 316, 341, 342, 358, 373, 376, 391, 396, 423, 424, 426, 427, 432, 438, 451, 462, 463, 464, 465, 466, 468, 470, 473, 476, 477, 479, 480], "ignor": [5, 18, 22, 23, 24, 32, 33, 34, 38, 46, 48, 58, 60, 62, 63, 65, 67, 72, 75, 76, 89, 99, 103, 106, 107, 108, 113, 120, 131, 134, 135, 137, 141, 142, 147, 149, 153, 155, 156, 160, 164, 166, 169, 172, 173, 174, 178, 180, 182, 183, 185, 187, 188, 190, 193, 196, 197, 205, 206, 210, 212, 213, 215, 220, 222, 223, 227, 239, 240, 244, 245, 246, 247, 248, 252, 255, 258, 259, 263, 264, 265, 266, 267, 268, 269, 273, 280, 281, 285, 290, 293, 294, 296, 299, 301, 305, 311, 316, 317, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 352, 354, 356, 358, 360, 361, 362, 368, 372, 374, 376, 377, 378, 382, 384, 385, 390, 391, 394, 396, 401, 403, 406, 409, 411, 412, 417, 418, 421, 423, 424, 427, 428, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "within": [5, 7, 22, 32, 41, 48, 53, 67, 72, 75, 84, 91, 93, 94, 96, 97, 98, 100, 102, 103, 112, 118, 120, 133, 137, 138, 142, 152, 154, 155, 160, 164, 166, 173, 174, 180, 183, 187, 188, 190, 192, 200, 213, 215, 222, 227, 244, 245, 247, 248, 249, 250, 252, 258, 264, 267, 268, 272, 280, 281, 282, 294, 299, 304, 305, 309, 310, 316, 318, 321, 328, 329, 334, 335, 337, 341, 342, 344, 345, 348, 349, 350, 358, 360, 363, 365, 367, 372, 380, 382, 384, 385, 390, 391, 395, 396, 406, 407, 409, 416, 418, 419, 422, 423, 424, 425, 426, 428, 431, 432, 445, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 475, 476, 477, 478, 479], "make": [5, 10, 11, 23, 32, 38, 44, 50, 58, 62, 63, 67, 71, 72, 74, 75, 83, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 118, 120, 124, 131, 137, 138, 139, 149, 153, 154, 155, 157, 158, 160, 164, 166, 167, 172, 173, 174, 176, 178, 180, 183, 185, 187, 188, 190, 193, 194, 197, 202, 203, 206, 208, 209, 210, 215, 218, 219, 222, 223, 227, 231, 232, 239, 242, 244, 247, 249, 252, 255, 256, 258, 263, 264, 265, 266, 267, 268, 272, 276, 278, 280, 285, 289, 290, 292, 293, 294, 296, 299, 305, 309, 315, 319, 325, 326, 327, 328, 330, 331, 334, 335, 337, 338, 341, 342, 344, 349, 351, 354, 356, 358, 359, 360, 361, 363, 365, 366, 372, 374, 376, 377, 381, 382, 384, 385, 386, 390, 391, 394, 396, 397, 398, 399, 403, 407, 408, 409, 412, 417, 418, 422, 423, 424, 426, 428, 430, 431, 432, 440, 452, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 471, 472, 473, 476, 477, 478, 479, 480], "tad": 5, "readabl": [5, 67, 84, 89, 91, 99, 100, 103, 104, 115, 116, 118, 131, 147, 149, 153, 157, 164, 173, 187, 188, 195, 202, 227, 240, 242, 255, 264, 265, 280, 285, 290, 296, 300, 301, 304, 307, 316, 330, 335, 338, 339, 341, 344, 345, 346, 364, 365, 373, 385, 397, 410, 422, 431, 451, 459, 460, 462, 464, 465, 466, 467, 471, 473, 474, 475, 476, 477, 479], "wchar_t": [5, 16, 32, 33, 58, 65, 67, 71, 72, 89, 119, 173, 469, 470, 476, 478, 479], "ucs": [5, 349, 460, 472], "increment": [5, 32, 33, 34, 41, 62, 67, 72, 75, 84, 93, 94, 100, 108, 116, 117, 120, 143, 183, 188, 204, 208, 267, 280, 289, 290, 341, 361, 362, 365, 372, 382, 407, 409, 458, 460, 461, 462, 463, 465, 469, 471, 472, 479], "caus": [5, 9, 18, 23, 32, 34, 41, 46, 50, 58, 60, 62, 63, 65, 72, 74, 75, 76, 84, 89, 94, 99, 100, 103, 107, 110, 112, 113, 118, 120, 124, 131, 133, 136, 137, 149, 150, 153, 155, 156, 160, 164, 166, 172, 173, 174, 181, 183, 185, 187, 188, 190, 202, 205, 208, 209, 210, 222, 225, 239, 242, 244, 245, 247, 252, 255, 259, 263, 264, 266, 268, 272, 273, 279, 280, 281, 290, 294, 296, 299, 305, 310, 311, 316, 324, 325, 327, 330, 331, 334, 337, 338, 341, 342, 349, 352, 354, 358, 360, 361, 362, 363, 372, 382, 384, 385, 386, 391, 396, 398, 401, 403, 406, 407, 411, 415, 418, 422, 423, 424, 425, 426, 427, 428, 431, 432, 439, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479], "produc": [5, 7, 22, 23, 25, 33, 38, 58, 62, 75, 76, 83, 84, 87, 88, 89, 91, 94, 99, 100, 101, 103, 106, 108, 118, 120, 137, 147, 149, 155, 158, 160, 164, 172, 173, 174, 180, 183, 184, 187, 190, 191, 193, 194, 198, 199, 200, 202, 205, 210, 211, 222, 225, 227, 231, 232, 245, 255, 258, 259, 264, 267, 273, 280, 285, 290, 296, 299, 302, 305, 310, 315, 316, 318, 338, 341, 342, 344, 345, 349, 354, 361, 373, 374, 376, 380, 390, 393, 402, 403, 407, 408, 410, 411, 412, 417, 418, 424, 426, 428, 431, 445, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479], "found": [5, 17, 22, 30, 32, 41, 44, 48, 54, 57, 58, 60, 62, 63, 70, 71, 72, 75, 76, 78, 87, 89, 92, 93, 94, 96, 98, 99, 100, 103, 106, 107, 112, 118, 120, 147, 149, 155, 160, 164, 167, 172, 173, 174, 188, 190, 193, 194, 196, 200, 202, 204, 205, 208, 210, 212, 213, 222, 223, 225, 227, 230, 233, 238, 239, 240, 241, 242, 244, 245, 247, 248, 250, 252, 258, 262, 263, 264, 265, 267, 268, 269, 273, 275, 276, 279, 280, 289, 290, 292, 293, 294, 299, 311, 316, 319, 329, 330, 332, 334, 336, 337, 338, 341, 345, 349, 350, 351, 354, 355, 358, 365, 367, 372, 374, 381, 382, 383, 384, 385, 386, 391, 396, 402, 403, 406, 408, 409, 410, 411, 415, 416, 419, 421, 423, 424, 425, 426, 428, 430, 431, 432, 437, 447, 448, 449, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "therefor": [5, 23, 32, 41, 48, 62, 72, 74, 75, 83, 84, 86, 88, 89, 91, 94, 99, 100, 101, 102, 103, 106, 118, 120, 137, 144, 149, 155, 170, 173, 178, 180, 205, 210, 211, 212, 222, 240, 250, 255, 259, 263, 266, 278, 280, 290, 296, 310, 316, 327, 329, 330, 334, 338, 341, 349, 354, 356, 361, 371, 382, 385, 396, 409, 410, 417, 418, 423, 424, 426, 430, 431, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 472, 475, 476, 479], "yet": [5, 13, 23, 28, 30, 32, 33, 44, 62, 63, 72, 78, 83, 84, 88, 89, 91, 93, 98, 102, 103, 131, 135, 137, 149, 166, 173, 174, 183, 193, 194, 202, 210, 229, 247, 265, 266, 280, 290, 292, 294, 305, 331, 332, 338, 341, 345, 361, 377, 382, 385, 406, 409, 425, 427, 432, 458, 460, 461, 463, 465, 470, 473, 475, 476, 478, 479], "systemerror": [5, 23, 27, 44, 48, 54, 59, 63, 67, 210, 439, 446, 470, 475, 479], "constructor": [5, 18, 23, 28, 52, 54, 62, 63, 67, 72, 78, 86, 92, 93, 94, 97, 99, 100, 102, 110, 118, 120, 124, 133, 147, 148, 154, 155, 157, 158, 161, 164, 169, 172, 173, 178, 180, 183, 187, 190, 195, 198, 199, 200, 203, 204, 205, 210, 215, 218, 222, 223, 231, 232, 234, 239, 240, 243, 245, 255, 256, 258, 259, 264, 265, 267, 268, 275, 280, 289, 295, 296, 302, 304, 305, 313, 318, 322, 324, 325, 327, 328, 332, 334, 335, 338, 341, 342, 348, 354, 355, 358, 360, 361, 363, 365, 380, 381, 382, 384, 385, 386, 391, 398, 399, 403, 409, 416, 418, 419, 421, 424, 426, 437, 439, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "compat": [5, 23, 24, 32, 33, 41, 56, 58, 60, 62, 63, 65, 67, 74, 75, 78, 83, 86, 89, 91, 96, 98, 99, 100, 103, 106, 107, 108, 118, 124, 126, 137, 142, 143, 155, 158, 164, 173, 181, 183, 190, 191, 193, 198, 200, 202, 204, 205, 210, 211, 219, 225, 227, 240, 242, 244, 245, 247, 248, 249, 250, 252, 256, 263, 264, 265, 268, 280, 285, 290, 292, 293, 296, 298, 299, 305, 309, 311, 316, 319, 322, 329, 334, 337, 338, 341, 345, 349, 354, 358, 361, 362, 364, 377, 380, 382, 383, 384, 390, 391, 393, 394, 397, 403, 407, 415, 417, 418, 421, 423, 424, 426, 428, 431, 432, 452, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "dict": [5, 10, 22, 23, 26, 30, 32, 34, 53, 58, 60, 62, 67, 72, 77, 78, 83, 84, 86, 89, 92, 94, 98, 110, 118, 120, 124, 157, 161, 164, 168, 172, 178, 179, 181, 184, 187, 188, 190, 202, 222, 223, 241, 247, 251, 252, 258, 259, 261, 264, 265, 266, 280, 285, 288, 296, 301, 304, 323, 327, 337, 338, 342, 351, 354, 358, 361, 365, 372, 375, 381, 382, 384, 398, 409, 415, 423, 424, 426, 427, 431, 437, 438, 442, 446, 448, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "pair": [5, 7, 22, 28, 32, 39, 63, 67, 72, 74, 84, 91, 93, 94, 97, 103, 106, 118, 124, 131, 134, 139, 142, 149, 152, 157, 164, 174, 178, 181, 183, 187, 188, 190, 193, 194, 199, 206, 210, 218, 225, 227, 241, 252, 256, 258, 259, 265, 268, 272, 280, 285, 289, 290, 293, 294, 296, 306, 319, 329, 334, 335, 337, 338, 341, 345, 351, 354, 355, 357, 359, 361, 365, 371, 372, 380, 381, 382, 385, 390, 391, 398, 403, 406, 409, 412, 413, 423, 424, 426, 431, 432, 437, 438, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 475, 479], "consecut": [5, 22, 60, 63, 94, 120, 141, 155, 258, 272, 341, 342, 344, 380, 431, 451, 462, 473, 479], "add": [5, 7, 28, 30, 32, 33, 44, 54, 57, 58, 62, 67, 72, 75, 76, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 105, 106, 107, 108, 110, 115, 117, 118, 120, 137, 139, 141, 149, 150, 153, 154, 155, 157, 158, 160, 164, 166, 174, 178, 179, 180, 182, 183, 185, 186, 188, 190, 191, 192, 193, 194, 197, 200, 202, 203, 205, 210, 221, 222, 223, 227, 229, 231, 233, 240, 241, 242, 244, 247, 252, 255, 258, 259, 261, 264, 265, 268, 273, 278, 280, 282, 286, 287, 288, 289, 290, 293, 296, 298, 299, 304, 305, 316, 318, 325, 329, 331, 332, 334, 335, 337, 338, 341, 342, 344, 347, 349, 350, 351, 354, 358, 360, 362, 364, 365, 371, 372, 380, 381, 382, 384, 385, 386, 390, 391, 396, 398, 403, 406, 407, 409, 410, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 430, 431, 432, 436, 439, 442, 445, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "serv": [5, 72, 75, 99, 100, 124, 131, 134, 183, 190, 199, 200, 223, 242, 250, 258, 265, 280, 290, 296, 310, 330, 337, 338, 365, 380, 382, 403, 409, 416, 428, 431, 462, 466, 471, 472, 474, 476, 479], "respect": [5, 18, 22, 23, 30, 32, 33, 38, 46, 48, 51, 63, 71, 72, 74, 75, 83, 84, 92, 93, 99, 100, 103, 110, 118, 120, 130, 133, 137, 139, 147, 148, 149, 152, 155, 160, 164, 173, 174, 180, 183, 188, 190, 191, 193, 205, 210, 212, 222, 227, 240, 242, 250, 255, 259, 264, 265, 266, 267, 272, 275, 280, 290, 296, 305, 306, 319, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 354, 361, 362, 371, 372, 380, 382, 384, 393, 407, 422, 424, 426, 428, 432, 451, 452, 458, 460, 462, 464, 466, 470, 471, 472, 473, 475, 476, 477, 478, 479], "py_vabuildvalu": [5, 56], "py_fals": [6, 62, 63, 74, 427, 479], "py_tru": [6, 62, 63, 74, 427, 479], "pybool_typ": [6, 56], "instanc": [6, 8, 9, 13, 16, 23, 25, 28, 30, 32, 37, 38, 41, 42, 44, 46, 48, 52, 54, 57, 59, 60, 62, 63, 67, 70, 72, 74, 75, 77, 88, 89, 91, 94, 98, 99, 100, 102, 103, 105, 107, 115, 118, 120, 124, 126, 130, 131, 133, 134, 135, 137, 138, 142, 147, 148, 149, 151, 153, 154, 155, 156, 158, 164, 166, 169, 172, 173, 174, 180, 183, 187, 188, 190, 191, 192, 193, 196, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 213, 215, 218, 222, 223, 227, 231, 232, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 255, 258, 259, 264, 265, 266, 267, 268, 278, 280, 281, 282, 285, 289, 290, 293, 294, 295, 297, 302, 304, 305, 309, 311, 312, 315, 316, 318, 320, 322, 326, 327, 328, 329, 332, 334, 335, 337, 338, 342, 344, 345, 348, 349, 351, 354, 355, 358, 360, 361, 363, 365, 368, 376, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 394, 396, 397, 398, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 421, 423, 425, 426, 431, 432, 436, 439, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "layer": [6, 8, 9, 25, 26, 31, 37, 38, 55, 59, 60, 67, 74, 83, 100, 302, 332, 334, 338, 344, 415, 451, 458, 461, 464, 477, 478, 479], "pybool_check": 6, "immort": [6, 32, 33, 45, 51, 55, 86, 349, 461, 470, 477, 479], "py_return_fals": [6, 462], "py_return_tru": [6, 462], "pybool_fromlong": [6, 56], "certain": [7, 23, 32, 40, 41, 48, 57, 58, 62, 65, 72, 76, 84, 87, 91, 93, 94, 99, 100, 103, 104, 108, 118, 131, 142, 155, 170, 173, 180, 187, 190, 192, 193, 196, 200, 202, 203, 205, 206, 210, 231, 244, 252, 263, 264, 265, 266, 267, 268, 269, 280, 289, 290, 292, 294, 304, 305, 334, 338, 343, 345, 350, 354, 361, 362, 363, 365, 382, 383, 384, 385, 390, 403, 406, 415, 424, 426, 428, 431, 457, 458, 459, 460, 461, 462, 464, 465, 467, 470, 472, 473, 476, 477, 479], "wrap": [7, 18, 21, 32, 41, 42, 57, 62, 67, 78, 87, 89, 92, 96, 100, 105, 106, 110, 112, 118, 120, 124, 127, 135, 137, 139, 147, 153, 155, 166, 173, 174, 178, 187, 188, 190, 198, 199, 204, 205, 210, 217, 221, 222, 223, 227, 231, 239, 244, 248, 251, 252, 255, 258, 264, 265, 267, 278, 280, 289, 290, 301, 330, 337, 338, 341, 344, 349, 352, 354, 358, 359, 364, 372, 381, 382, 384, 385, 386, 390, 391, 401, 403, 409, 413, 423, 424, 448, 457, 460, 461, 462, 463, 464, 465, 466, 470, 471, 473, 474, 475, 477, 479], "parti": [7, 30, 32, 67, 83, 84, 100, 108, 110, 124, 126, 130, 131, 136, 155, 161, 173, 178, 180, 181, 222, 232, 247, 248, 264, 280, 290, 296, 299, 316, 327, 331, 337, 338, 349, 351, 361, 365, 376, 382, 395, 396, 398, 421, 422, 424, 457, 458, 459, 461, 462, 464, 465, 467, 471, 472, 473, 475, 477, 478, 479], "librari": [7, 18, 23, 32, 33, 41, 44, 50, 58, 62, 65, 67, 70, 71, 72, 73, 75, 76, 78, 79, 83, 84, 87, 89, 90, 91, 94, 96, 98, 102, 103, 104, 105, 106, 107, 108, 112, 116, 118, 121, 124, 131, 137, 140, 143, 164, 166, 174, 175, 180, 181, 183, 184, 189, 190, 191, 200, 205, 209, 225, 227, 232, 240, 244, 248, 253, 254, 259, 261, 263, 264, 266, 272, 280, 284, 289, 290, 293, 295, 296, 299, 305, 310, 311, 316, 317, 325, 327, 328, 330, 331, 334, 337, 338, 341, 342, 349, 350, 351, 354, 358, 361, 362, 365, 371, 374, 380, 382, 384, 386, 387, 390, 396, 403, 405, 406, 418, 421, 422, 423, 424, 426, 428, 429, 430, 431, 432, 441, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480], "special": [7, 23, 30, 32, 33, 41, 48, 56, 57, 59, 60, 62, 63, 67, 72, 74, 83, 84, 86, 89, 91, 93, 94, 98, 99, 100, 101, 102, 103, 106, 108, 112, 118, 120, 124, 135, 136, 137, 141, 142, 149, 150, 152, 153, 164, 165, 166, 172, 173, 174, 177, 178, 180, 184, 188, 190, 193, 200, 202, 205, 210, 217, 219, 225, 227, 242, 244, 247, 251, 252, 256, 258, 259, 263, 264, 265, 268, 269, 278, 279, 280, 287, 289, 290, 293, 296, 299, 316, 318, 321, 326, 328, 329, 330, 334, 338, 339, 344, 345, 349, 354, 357, 361, 365, 371, 384, 385, 390, 391, 398, 403, 406, 409, 411, 415, 421, 422, 423, 425, 426, 427, 429, 431, 432, 445, 452, 457, 458, 459, 460, 462, 463, 464, 465, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "imag": [7, 15, 41, 67, 84, 86, 149, 152, 174, 195, 197, 203, 222, 223, 240, 246, 259, 286, 287, 319, 333, 341, 342, 349, 364, 372, 380, 391, 398, 402, 415, 424, 427, 471, 476, 479], "numer": [7, 40, 46, 62, 63, 67, 83, 84, 89, 94, 99, 100, 103, 106, 107, 142, 145, 152, 155, 172, 174, 183, 188, 206, 208, 209, 210, 218, 222, 230, 231, 235, 237, 239, 242, 251, 258, 259, 263, 264, 272, 280, 286, 287, 290, 299, 305, 311, 316, 322, 328, 332, 334, 337, 338, 342, 349, 359, 365, 372, 373, 380, 383, 384, 385, 391, 409, 415, 418, 426, 445, 457, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 477, 479], "analysi": [7, 32, 67, 101, 103, 150, 152, 187, 219, 251, 261, 276, 305, 382, 426, 429, 430, 432, 463, 472, 474, 479], "while": [7, 13, 22, 23, 28, 32, 34, 35, 39, 44, 48, 62, 63, 67, 71, 72, 74, 75, 83, 84, 86, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 113, 114, 118, 120, 124, 131, 132, 134, 136, 137, 138, 145, 147, 149, 152, 155, 157, 164, 166, 167, 169, 172, 173, 174, 176, 180, 181, 183, 187, 188, 189, 190, 193, 196, 205, 206, 208, 210, 222, 223, 224, 227, 229, 231, 232, 233, 239, 240, 244, 247, 248, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 272, 280, 281, 289, 290, 293, 294, 296, 299, 305, 308, 311, 313, 315, 316, 323, 325, 326, 328, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 356, 358, 360, 361, 362, 365, 367, 376, 377, 380, 382, 384, 390, 391, 394, 395, 396, 397, 406, 409, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 445, 446, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "characterist": [7, 84, 296, 343, 349, 463, 464], "back": [7, 10, 22, 25, 28, 34, 38, 40, 41, 57, 58, 62, 63, 67, 72, 75, 83, 84, 88, 89, 94, 96, 100, 102, 103, 104, 105, 106, 110, 118, 120, 126, 131, 144, 149, 152, 153, 155, 158, 164, 166, 174, 178, 180, 183, 187, 188, 190, 191, 193, 202, 205, 212, 219, 222, 227, 229, 232, 240, 242, 247, 255, 259, 265, 266, 275, 279, 280, 281, 289, 290, 292, 294, 296, 309, 311, 316, 327, 334, 335, 337, 338, 339, 341, 342, 349, 354, 358, 362, 365, 373, 374, 380, 386, 390, 391, 409, 413, 415, 416, 418, 421, 423, 424, 428, 432, 445, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 477, 478, 479], "desir": [7, 9, 23, 32, 41, 60, 72, 84, 91, 92, 93, 94, 99, 100, 103, 106, 108, 118, 135, 137, 149, 155, 158, 164, 166, 173, 174, 186, 187, 188, 205, 209, 223, 232, 242, 244, 247, 256, 263, 264, 268, 269, 273, 275, 289, 294, 299, 304, 308, 316, 317, 335, 337, 338, 341, 342, 344, 350, 358, 360, 361, 365, 371, 372, 380, 382, 390, 395, 398, 401, 408, 409, 412, 424, 426, 428, 451, 458, 460, 461, 462, 463, 464, 465, 473, 474, 475, 477, 479], "situat": [7, 34, 41, 60, 62, 72, 74, 84, 87, 89, 93, 94, 98, 99, 100, 102, 105, 107, 108, 112, 118, 124, 149, 155, 166, 178, 188, 204, 210, 227, 232, 247, 250, 255, 264, 268, 280, 289, 332, 345, 358, 361, 386, 393, 396, 406, 424, 460, 465, 466, 470, 473, 474, 475, 479], "direct": [7, 13, 16, 28, 30, 32, 33, 41, 44, 45, 48, 53, 57, 58, 60, 62, 63, 66, 67, 71, 72, 74, 75, 84, 87, 89, 92, 93, 96, 97, 98, 99, 100, 102, 105, 107, 108, 110, 112, 113, 118, 120, 121, 126, 130, 131, 137, 144, 147, 148, 149, 155, 156, 157, 158, 160, 161, 164, 166, 172, 173, 178, 180, 183, 184, 187, 188, 191, 193, 198, 202, 203, 206, 207, 209, 210, 215, 218, 222, 223, 229, 232, 239, 240, 242, 244, 248, 249, 250, 251, 252, 255, 256, 259, 263, 264, 265, 267, 268, 275, 277, 280, 289, 290, 292, 296, 299, 304, 305, 311, 316, 317, 321, 327, 332, 334, 335, 337, 338, 341, 342, 345, 349, 354, 358, 360, 361, 362, 363, 365, 370, 371, 372, 374, 376, 377, 380, 381, 384, 385, 386, 391, 396, 398, 403, 406, 409, 410, 413, 417, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 439, 451, 457, 458, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "intermedi": [7, 83, 86, 94, 183, 188, 203, 223, 247, 258, 272, 289, 290, 329, 338, 385, 428, 440, 463, 467, 471, 476, 479], "facil": [7, 32, 67, 89, 91, 99, 116, 140, 142, 153, 154, 174, 244, 251, 261, 266, 268, 290, 296, 334, 338, 342, 352, 354, 365, 380, 424, 457, 461, 479], "level": [7, 13, 16, 22, 23, 30, 31, 32, 33, 41, 42, 56, 58, 62, 67, 72, 73, 74, 78, 83, 84, 88, 89, 92, 93, 94, 96, 98, 102, 106, 107, 108, 116, 118, 120, 123, 124, 127, 131, 133, 134, 135, 137, 138, 144, 147, 148, 150, 155, 157, 160, 161, 164, 166, 167, 174, 177, 178, 180, 187, 188, 190, 191, 199, 201, 204, 207, 208, 209, 210, 216, 220, 222, 223, 227, 231, 239, 240, 242, 244, 245, 247, 248, 251, 252, 253, 255, 257, 258, 265, 266, 267, 268, 276, 278, 279, 280, 281, 282, 285, 290, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 308, 309, 310, 311, 312, 316, 318, 319, 321, 327, 328, 330, 331, 332, 337, 338, 344, 347, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 365, 371, 372, 377, 381, 382, 384, 385, 391, 395, 396, 398, 399, 403, 405, 406, 407, 409, 411, 415, 418, 420, 421, 423, 424, 425, 426, 427, 428, 431, 432, 436, 446, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "side": [7, 14, 22, 30, 32, 51, 59, 67, 72, 74, 83, 84, 89, 94, 100, 103, 104, 106, 107, 120, 124, 131, 149, 152, 157, 166, 174, 178, 184, 187, 188, 193, 207, 223, 239, 240, 247, 263, 264, 266, 280, 285, 290, 296, 299, 308, 315, 320, 321, 327, 334, 335, 341, 345, 349, 358, 365, 372, 382, 384, 385, 403, 409, 421, 423, 426, 428, 432, 438, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "export": [7, 23, 41, 42, 44, 47, 62, 67, 70, 71, 72, 76, 84, 107, 108, 116, 120, 148, 208, 296, 334, 337, 341, 349, 374, 432, 452, 461, 465, 471, 472, 474, 475, 476, 477, 478, 479], "expos": [7, 32, 37, 42, 43, 44, 45, 54, 56, 57, 60, 61, 62, 63, 71, 72, 75, 88, 99, 107, 124, 137, 173, 174, 178, 183, 207, 212, 247, 249, 252, 256, 259, 263, 264, 278, 280, 290, 296, 304, 327, 328, 332, 341, 342, 343, 345, 349, 376, 380, 381, 383, 398, 401, 403, 416, 418, 421, 424, 428, 461, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "section": [7, 17, 33, 41, 50, 54, 57, 62, 63, 67, 70, 71, 72, 74, 75, 76, 84, 87, 89, 91, 92, 94, 96, 97, 99, 100, 103, 106, 107, 108, 112, 118, 120, 124, 130, 131, 133, 135, 137, 141, 143, 149, 153, 155, 157, 164, 166, 172, 173, 178, 181, 183, 190, 191, 192, 195, 199, 200, 209, 214, 218, 227, 232, 238, 239, 240, 244, 245, 255, 258, 259, 264, 265, 268, 289, 290, 296, 302, 304, 305, 311, 316, 318, 325, 329, 334, 337, 338, 341, 342, 344, 345, 349, 354, 361, 363, 365, 380, 382, 384, 385, 386, 390, 391, 403, 405, 406, 407, 409, 411, 412, 415, 418, 422, 423, 424, 425, 426, 428, 431, 432, 447, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "consum": [7, 58, 62, 63, 67, 83, 84, 94, 103, 104, 112, 118, 123, 125, 132, 134, 149, 155, 166, 188, 191, 204, 239, 255, 258, 259, 280, 285, 289, 290, 293, 295, 305, 313, 316, 319, 327, 344, 358, 361, 378, 382, 385, 390, 405, 409, 424, 427, 451, 458, 462, 463, 464, 465, 471, 472, 473, 475, 477, 479], "sever": [7, 28, 32, 34, 41, 56, 65, 71, 72, 74, 76, 83, 84, 89, 92, 93, 94, 98, 99, 100, 103, 106, 107, 108, 110, 118, 120, 124, 133, 135, 148, 154, 155, 158, 164, 173, 174, 180, 181, 183, 185, 188, 190, 192, 196, 209, 210, 222, 238, 247, 252, 256, 264, 265, 266, 268, 270, 278, 280, 284, 289, 290, 292, 296, 304, 305, 308, 316, 318, 326, 330, 332, 334, 335, 337, 338, 339, 341, 344, 345, 354, 361, 365, 371, 372, 374, 376, 377, 380, 382, 383, 384, 385, 386, 391, 396, 398, 399, 401, 402, 405, 411, 415, 421, 423, 424, 428, 430, 432, 445, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479], "obtain": [7, 30, 63, 67, 91, 97, 99, 103, 124, 135, 147, 149, 150, 151, 174, 180, 183, 187, 193, 194, 200, 202, 205, 212, 222, 232, 245, 255, 256, 258, 263, 264, 265, 266, 267, 275, 280, 289, 290, 305, 308, 310, 316, 334, 338, 341, 345, 348, 362, 391, 394, 395, 398, 403, 409, 410, 411, 422, 423, 426, 432, 457, 458, 460, 461, 463, 464, 471, 472, 473, 474, 475, 476, 479], "simpl": [7, 32, 34, 42, 62, 63, 66, 67, 72, 74, 83, 84, 89, 91, 93, 94, 97, 98, 99, 100, 106, 107, 108, 111, 113, 118, 120, 136, 138, 139, 148, 149, 153, 155, 158, 164, 166, 167, 170, 171, 173, 178, 180, 181, 184, 186, 187, 191, 193, 197, 202, 204, 205, 206, 219, 223, 227, 231, 239, 241, 245, 251, 252, 253, 259, 265, 266, 268, 275, 280, 286, 289, 290, 292, 293, 294, 296, 301, 304, 305, 312, 316, 321, 326, 330, 332, 334, 337, 340, 341, 342, 344, 354, 355, 358, 361, 363, 365, 374, 376, 377, 380, 381, 382, 384, 386, 390, 391, 395, 396, 398, 402, 404, 405, 406, 407, 409, 410, 415, 416, 418, 423, 426, 427, 429, 436, 442, 451, 457, 458, 459, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480], "orient": [7, 41, 67, 75, 84, 86, 92, 94, 106, 131, 148, 198, 216, 219, 251, 280, 305, 334, 341, 361, 362, 365, 372, 436, 459, 464, 471, 473], "multi": [7, 16, 31, 32, 67, 70, 72, 83, 84, 85, 86, 93, 94, 98, 100, 103, 106, 111, 116, 120, 147, 148, 183, 187, 188, 190, 223, 231, 244, 247, 258, 264, 265, 267, 280, 313, 316, 319, 322, 328, 329, 337, 341, 361, 363, 403, 416, 418, 423, 431, 441, 451, 457, 458, 463, 465, 468, 470, 472, 473, 477, 479, 480], "valu": [7, 9, 11, 12, 13, 15, 17, 18, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 73, 74, 75, 77, 78, 86, 87, 88, 91, 92, 97, 99, 100, 102, 103, 105, 106, 107, 108, 110, 112, 113, 115, 116, 120, 124, 127, 131, 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 170, 172, 174, 175, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 218, 222, 223, 225, 227, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 258, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 365, 368, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 427, 428, 429, 431, 432, 436, 437, 438, 440, 442, 445, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "file": [7, 16, 23, 25, 30, 31, 32, 33, 40, 44, 48, 50, 58, 62, 65, 67, 71, 72, 74, 75, 76, 77, 78, 80, 83, 85, 86, 88, 92, 93, 94, 96, 98, 101, 103, 104, 107, 110, 112, 113, 115, 116, 117, 119, 120, 123, 128, 129, 130, 131, 135, 137, 138, 139, 141, 142, 143, 144, 146, 149, 150, 151, 153, 154, 155, 157, 160, 166, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 187, 188, 193, 197, 198, 201, 203, 204, 205, 209, 210, 212, 214, 215, 216, 217, 220, 222, 225, 226, 227, 228, 239, 240, 242, 245, 246, 249, 250, 251, 252, 254, 256, 257, 259, 261, 262, 263, 264, 266, 268, 270, 271, 273, 274, 276, 277, 278, 280, 283, 285, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 309, 310, 311, 316, 318, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 351, 355, 356, 357, 358, 359, 361, 362, 363, 364, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 395, 396, 398, 399, 400, 401, 402, 403, 405, 407, 408, 410, 412, 413, 415, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 436, 437, 438, 439, 441, 442, 444, 445, 446, 448, 451, 454, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 478, 479, 480], "seri": [7, 32, 60, 94, 103, 110, 118, 120, 153, 172, 173, 183, 188, 222, 232, 289, 311, 334, 341, 351, 361, 371, 382, 385, 386, 390, 403, 426, 437, 445, 446, 460, 462, 463, 464, 465, 473, 476], "written": [7, 9, 18, 23, 33, 41, 44, 48, 58, 63, 71, 72, 75, 83, 84, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 106, 108, 110, 112, 115, 124, 131, 135, 137, 144, 149, 150, 154, 155, 158, 160, 164, 166, 172, 173, 174, 181, 188, 190, 193, 199, 202, 210, 211, 222, 227, 231, 232, 242, 244, 252, 255, 266, 268, 275, 278, 280, 285, 289, 290, 292, 296, 297, 298, 301, 304, 305, 308, 310, 317, 321, 325, 327, 329, 330, 334, 335, 337, 338, 341, 349, 354, 357, 358, 376, 378, 380, 381, 382, 384, 386, 396, 397, 398, 401, 403, 404, 406, 409, 415, 416, 417, 418, 419, 422, 424, 427, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "intern": [7, 8, 9, 10, 11, 13, 16, 22, 23, 30, 32, 33, 40, 41, 44, 54, 58, 60, 62, 63, 67, 72, 74, 75, 83, 89, 91, 92, 94, 99, 100, 102, 103, 106, 107, 110, 116, 118, 120, 124, 126, 133, 134, 137, 138, 147, 152, 153, 154, 155, 158, 164, 172, 173, 178, 180, 181, 183, 188, 190, 196, 201, 204, 205, 207, 210, 232, 240, 242, 244, 247, 252, 255, 258, 262, 263, 264, 266, 267, 271, 272, 273, 275, 280, 290, 294, 296, 299, 304, 305, 311, 312, 319, 325, 328, 329, 330, 334, 337, 338, 343, 344, 345, 349, 354, 355, 358, 361, 362, 365, 371, 372, 377, 380, 382, 384, 391, 394, 395, 396, 398, 406, 407, 409, 411, 415, 418, 419, 424, 425, 426, 446, 452, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "readinto": [7, 67, 116, 147, 239, 253, 255, 296, 464, 472, 474, 479], "argument": [7, 9, 11, 13, 18, 22, 23, 24, 25, 28, 30, 32, 33, 34, 36, 38, 41, 46, 48, 51, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 72, 74, 75, 77, 78, 83, 86, 87, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 115, 116, 120, 124, 126, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 166, 167, 170, 172, 174, 175, 178, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 215, 218, 220, 222, 223, 225, 227, 230, 231, 232, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 278, 279, 280, 281, 284, 285, 292, 293, 294, 296, 297, 298, 299, 301, 304, 305, 308, 310, 311, 312, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 342, 344, 347, 348, 349, 351, 352, 354, 355, 357, 358, 360, 361, 362, 363, 365, 367, 372, 374, 376, 377, 380, 381, 382, 384, 385, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 432, 436, 438, 439, 441, 442, 446, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479], "select": [7, 32, 58, 63, 65, 67, 83, 92, 93, 99, 101, 103, 104, 106, 118, 120, 124, 136, 139, 152, 157, 166, 173, 174, 207, 208, 210, 222, 227, 243, 244, 245, 248, 251, 253, 255, 257, 258, 259, 263, 265, 267, 278, 280, 285, 290, 296, 305, 308, 310, 315, 326, 330, 332, 334, 335, 337, 341, 342, 344, 345, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 380, 382, 386, 399, 403, 409, 413, 423, 424, 425, 426, 428, 452, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 474, 475, 476, 477, 478, 479], "reject": [7, 77, 97, 103, 164, 240, 245, 272, 315, 354, 382, 431, 432, 458, 465, 473, 475, 479], "acquir": [7, 32, 67, 72, 88, 113, 116, 136, 161, 166, 205, 212, 264, 268, 280, 290, 330, 338, 354, 361, 370, 424, 463, 464, 465, 466, 469, 471, 472, 474, 476, 479], "over": [7, 13, 22, 23, 32, 41, 48, 60, 63, 67, 72, 73, 74, 83, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 106, 118, 120, 124, 131, 139, 142, 149, 150, 157, 158, 164, 167, 173, 174, 180, 181, 183, 187, 188, 190, 193, 198, 199, 201, 202, 208, 216, 222, 223, 227, 240, 244, 245, 247, 249, 250, 251, 255, 256, 258, 264, 265, 266, 268, 273, 275, 280, 285, 290, 296, 297, 302, 305, 316, 319, 325, 326, 329, 332, 334, 337, 338, 341, 342, 345, 347, 349, 354, 358, 363, 365, 371, 372, 373, 374, 376, 380, 381, 382, 384, 385, 386, 393, 394, 396, 403, 405, 406, 408, 409, 415, 418, 423, 424, 426, 428, 431, 436, 437, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "target": [7, 32, 34, 63, 67, 83, 92, 96, 99, 100, 102, 108, 118, 120, 124, 131, 134, 166, 180, 183, 188, 208, 238, 239, 244, 247, 248, 252, 265, 266, 270, 280, 281, 289, 290, 293, 311, 313, 316, 329, 330, 334, 335, 337, 348, 354, 358, 361, 365, 367, 382, 384, 385, 395, 403, 406, 409, 411, 415, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 432, 438, 451, 454, 457, 461, 463, 464, 466, 468, 470, 471, 472, 473, 476, 477, 479], "pyobject_getbuff": [7, 47, 56, 62, 464, 469, 479], "right": [7, 15, 41, 46, 63, 67, 71, 72, 84, 89, 91, 94, 100, 103, 104, 106, 108, 110, 120, 139, 142, 144, 149, 152, 153, 155, 157, 166, 173, 174, 180, 183, 187, 188, 190, 193, 210, 213, 216, 219, 222, 223, 232, 244, 245, 252, 264, 272, 285, 286, 289, 290, 292, 293, 296, 299, 305, 316, 327, 334, 338, 341, 342, 351, 360, 365, 370, 371, 372, 380, 384, 385, 386, 396, 399, 400, 407, 421, 422, 423, 424, 426, 427, 431, 432, 448, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 473, 475, 476, 477, 479], "sibl": [7, 84, 110, 118, 222, 372, 406], "isn": [7, 22, 23, 25, 30, 32, 60, 62, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 97, 98, 100, 102, 103, 104, 106, 108, 112, 113, 118, 120, 131, 137, 154, 155, 166, 172, 180, 188, 190, 193, 199, 201, 202, 231, 240, 245, 252, 255, 266, 290, 293, 299, 311, 316, 334, 335, 338, 339, 349, 351, 365, 374, 384, 385, 386, 390, 399, 401, 402, 403, 405, 415, 424, 432, 445, 458, 459, 460, 461, 462, 463, 464, 465, 471, 479], "anymor": [7, 11, 30, 32, 62, 63, 84, 89, 131, 259, 280, 290, 294, 334, 349, 465, 466, 470, 471, 472, 477, 479], "could": [7, 22, 23, 27, 30, 32, 34, 38, 41, 46, 55, 60, 62, 72, 75, 76, 84, 87, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 107, 108, 110, 112, 118, 120, 124, 126, 127, 130, 131, 133, 136, 139, 149, 153, 164, 173, 174, 180, 190, 197, 198, 203, 205, 210, 213, 222, 223, 225, 227, 242, 244, 252, 255, 256, 258, 259, 264, 265, 266, 268, 280, 289, 290, 292, 293, 294, 296, 305, 308, 311, 316, 318, 326, 328, 330, 334, 337, 345, 349, 354, 358, 361, 365, 378, 382, 384, 385, 386, 390, 391, 393, 394, 398, 403, 406, 418, 421, 424, 426, 428, 430, 431, 432, 439, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "lead": [7, 18, 28, 38, 62, 63, 72, 74, 77, 84, 93, 97, 98, 99, 100, 102, 103, 120, 137, 138, 148, 149, 153, 160, 164, 180, 183, 185, 187, 190, 193, 196, 202, 205, 210, 218, 222, 225, 240, 242, 244, 247, 252, 255, 256, 258, 264, 266, 268, 272, 273, 280, 290, 293, 294, 296, 305, 311, 315, 334, 338, 341, 342, 344, 349, 350, 352, 354, 355, 358, 360, 362, 363, 377, 384, 385, 390, 391, 396, 406, 409, 418, 423, 424, 425, 426, 428, 431, 432, 451, 457, 458, 461, 462, 463, 464, 466, 470, 472, 473, 475, 476, 477, 478, 479], "various": [7, 32, 41, 57, 62, 67, 72, 74, 78, 84, 89, 90, 91, 92, 93, 94, 102, 103, 106, 108, 110, 115, 118, 131, 144, 149, 155, 166, 173, 175, 178, 183, 187, 190, 191, 194, 200, 205, 208, 210, 213, 214, 227, 239, 240, 247, 251, 255, 256, 258, 261, 265, 270, 275, 278, 282, 287, 289, 290, 293, 295, 297, 305, 311, 328, 332, 334, 335, 336, 337, 338, 341, 342, 344, 349, 350, 354, 358, 362, 365, 380, 381, 383, 384, 386, 391, 393, 403, 405, 409, 424, 426, 428, 431, 432, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 479], "resourc": [7, 23, 32, 62, 67, 83, 84, 90, 98, 104, 105, 107, 117, 118, 120, 130, 131, 133, 136, 140, 166, 185, 190, 209, 210, 223, 239, 245, 247, 248, 251, 254, 259, 264, 277, 280, 281, 290, 296, 299, 326, 329, 334, 338, 341, 349, 358, 361, 365, 372, 378, 384, 387, 390, 391, 394, 396, 401, 403, 405, 409, 412, 415, 424, 428, 451, 461, 463, 464, 465, 469, 470, 471, 475, 478, 479], "leak": [7, 32, 37, 44, 58, 59, 72, 98, 100, 222, 224, 280, 290, 345, 349, 378, 426, 458, 459, 465, 466, 471, 473, 474, 478, 479], "simpli": [7, 62, 71, 72, 74, 75, 78, 83, 84, 87, 89, 94, 97, 100, 102, 103, 106, 108, 118, 137, 148, 150, 153, 155, 164, 173, 174, 180, 183, 190, 222, 227, 247, 252, 259, 265, 266, 269, 280, 289, 290, 293, 294, 296, 301, 311, 316, 321, 322, 330, 332, 337, 339, 342, 345, 349, 361, 381, 382, 384, 385, 386, 391, 396, 398, 399, 403, 405, 406, 407, 415, 417, 428, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 474, 479], "programm": [7, 62, 72, 76, 79, 84, 86, 91, 92, 99, 105, 172, 174, 178, 180, 183, 190, 191, 210, 263, 268, 272, 280, 289, 290, 292, 334, 337, 341, 344, 349, 365, 371, 380, 386, 396, 398, 401, 423, 432, 459, 460, 462, 463, 464, 471, 479], "slice": [7, 37, 39, 41, 53, 55, 59, 67, 84, 86, 94, 102, 119, 120, 139, 165, 168, 173, 188, 203, 210, 222, 225, 251, 258, 261, 275, 280, 281, 288, 290, 293, 296, 316, 337, 341, 362, 411, 424, 427, 432, 438, 442, 445, 446, 458, 460, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 476, 478, 479, 480], "mechan": [7, 11, 28, 32, 34, 44, 60, 62, 72, 74, 78, 83, 84, 91, 92, 93, 99, 100, 103, 104, 108, 112, 124, 137, 141, 166, 173, 178, 190, 194, 200, 223, 240, 241, 242, 243, 245, 248, 256, 257, 263, 264, 265, 266, 268, 269, 281, 289, 294, 296, 299, 316, 319, 321, 330, 332, 334, 335, 338, 341, 354, 361, 365, 371, 372, 381, 384, 391, 395, 396, 419, 422, 424, 428, 431, 432, 458, 459, 460, 461, 462, 463, 465, 467, 470, 471, 472, 473, 474, 477, 478, 479], "abil": [7, 71, 72, 84, 88, 91, 94, 99, 100, 103, 108, 115, 120, 210, 250, 265, 280, 289, 321, 329, 341, 342, 382, 384, 406, 417, 418, 419, 422, 423, 459, 460, 461, 463, 464, 465, 471, 472, 473, 474, 475, 479], "quit": [7, 67, 71, 72, 75, 83, 84, 88, 89, 91, 94, 99, 100, 103, 118, 142, 165, 166, 173, 174, 181, 186, 197, 220, 244, 253, 255, 266, 272, 280, 285, 289, 294, 302, 306, 332, 337, 338, 347, 364, 365, 394, 426, 428, 430, 437, 444, 446, 447, 458, 459, 460, 461, 463, 472, 473, 479], "easili": [7, 23, 41, 71, 72, 75, 83, 84, 88, 89, 93, 97, 99, 100, 102, 103, 112, 137, 149, 155, 164, 166, 172, 173, 197, 222, 227, 252, 294, 316, 328, 341, 358, 384, 398, 424, 431, 447, 457, 458, 461, 463, 467, 471, 472, 474, 475, 478, 479], "constant": [7, 25, 32, 44, 57, 62, 63, 67, 75, 83, 84, 89, 91, 93, 100, 113, 116, 118, 120, 124, 137, 148, 152, 155, 158, 161, 170, 172, 173, 175, 180, 181, 183, 188, 190, 208, 212, 222, 223, 232, 239, 241, 251, 252, 255, 258, 261, 263, 264, 267, 270, 272, 278, 279, 280, 289, 290, 292, 295, 296, 297, 301, 305, 316, 319, 323, 325, 326, 330, 334, 338, 339, 341, 349, 352, 354, 355, 357, 358, 359, 361, 365, 371, 374, 378, 382, 383, 394, 396, 400, 402, 406, 408, 409, 411, 415, 418, 424, 426, 431, 437, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "manipul": [7, 13, 32, 33, 34, 41, 44, 54, 67, 72, 75, 94, 97, 100, 108, 142, 143, 166, 173, 174, 180, 183, 191, 192, 202, 204, 235, 251, 253, 266, 280, 282, 290, 293, 305, 321, 328, 329, 331, 334, 339, 341, 347, 349, 365, 371, 372, 390, 403, 406, 409, 416, 421, 428, 451, 458, 461, 464, 470, 472, 473, 475, 477, 478, 479], "system": [7, 16, 23, 32, 33, 41, 58, 62, 67, 72, 73, 76, 78, 83, 84, 85, 88, 91, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 108, 112, 113, 116, 117, 119, 124, 131, 135, 140, 142, 148, 153, 160, 161, 164, 166, 170, 172, 173, 174, 180, 183, 184, 204, 205, 206, 207, 210, 211, 217, 222, 225, 227, 228, 242, 244, 247, 248, 249, 250, 251, 253, 254, 255, 263, 264, 265, 266, 267, 268, 269, 273, 275, 279, 280, 281, 284, 292, 293, 294, 296, 298, 299, 300, 303, 305, 306, 308, 311, 319, 321, 323, 325, 328, 329, 330, 331, 334, 335, 337, 338, 339, 341, 344, 347, 349, 351, 352, 354, 356, 357, 358, 361, 362, 365, 371, 378, 380, 381, 382, 384, 385, 386, 387, 391, 395, 399, 401, 402, 403, 405, 406, 409, 410, 411, 412, 415, 416, 417, 421, 422, 424, 429, 431, 432, 447, 451, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 476, 477, 478, 479, 480], "around": [7, 23, 25, 30, 32, 42, 58, 71, 72, 75, 78, 94, 96, 98, 100, 102, 112, 118, 137, 139, 146, 150, 153, 164, 166, 172, 174, 180, 183, 188, 190, 203, 212, 215, 218, 223, 244, 247, 252, 262, 266, 272, 278, 280, 281, 284, 289, 290, 294, 299, 316, 334, 338, 349, 354, 358, 365, 372, 377, 380, 382, 384, 398, 423, 424, 427, 438, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 479], "nativ": [7, 25, 32, 40, 63, 67, 89, 101, 106, 113, 143, 152, 155, 166, 167, 173, 180, 181, 205, 210, 232, 255, 290, 293, 327, 334, 337, 341, 349, 361, 364, 366, 380, 382, 418, 428, 457, 460, 465, 466, 471, 472, 473, 475, 476, 477, 478, 479], "contrari": [7, 60, 187], "veri": [7, 31, 32, 51, 58, 62, 67, 72, 73, 74, 83, 84, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 106, 107, 108, 126, 147, 149, 155, 164, 166, 174, 180, 183, 187, 190, 193, 199, 200, 203, 204, 208, 227, 239, 242, 247, 252, 263, 267, 268, 280, 281, 285, 289, 290, 296, 305, 316, 325, 327, 332, 334, 335, 338, 343, 345, 349, 354, 355, 363, 365, 371, 380, 382, 384, 385, 386, 390, 422, 424, 426, 428, 432, 437, 457, 458, 459, 460, 461, 462, 463, 465, 466, 470, 471, 472, 473, 474, 475, 477, 479], "generic": [7, 16, 34, 48, 60, 61, 62, 67, 75, 84, 86, 89, 97, 99, 110, 131, 142, 149, 155, 158, 164, 181, 184, 188, 190, 191, 197, 200, 223, 232, 247, 251, 255, 265, 266, 278, 306, 322, 327, 334, 338, 358, 361, 374, 381, 390, 409, 425, 426, 427, 432, 454, 464, 468, 470, 471, 472, 473, 474, 475, 477, 479], "wrapper": [7, 18, 21, 23, 25, 30, 32, 41, 43, 57, 58, 67, 85, 86, 91, 92, 100, 105, 112, 116, 124, 135, 144, 146, 157, 166, 173, 174, 188, 190, 212, 223, 247, 251, 252, 257, 264, 272, 278, 280, 284, 290, 296, 299, 325, 334, 342, 358, 360, 364, 365, 377, 396, 403, 406, 409, 415, 421, 423, 424, 436, 455, 458, 459, 460, 462, 463, 464, 465, 470, 471, 473, 474, 477, 479], "instruct": [7, 13, 26, 67, 76, 83, 94, 96, 108, 149, 172, 183, 190, 237, 252, 261, 289, 290, 305, 311, 330, 337, 338, 384, 406, 409, 411, 424, 426, 451, 458, 463, 465, 469, 470, 471, 473, 477, 478, 479], "start": [7, 9, 11, 22, 23, 25, 32, 33, 41, 55, 62, 63, 65, 67, 71, 74, 75, 78, 79, 83, 84, 89, 92, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 108, 112, 113, 115, 116, 118, 119, 120, 124, 130, 131, 135, 137, 138, 139, 140, 142, 144, 148, 149, 151, 154, 155, 157, 158, 161, 163, 166, 173, 174, 175, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 196, 198, 200, 202, 205, 208, 210, 212, 214, 217, 219, 222, 224, 227, 230, 237, 239, 240, 242, 244, 245, 248, 251, 252, 255, 256, 258, 259, 263, 264, 265, 266, 268, 269, 270, 272, 275, 278, 281, 285, 287, 289, 290, 291, 293, 294, 296, 297, 299, 302, 305, 306, 309, 310, 311, 313, 315, 316, 317, 329, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 350, 352, 354, 358, 359, 361, 362, 364, 365, 367, 372, 374, 376, 377, 378, 382, 384, 390, 391, 395, 396, 398, 399, 403, 406, 407, 409, 411, 413, 417, 418, 423, 424, 426, 427, 428, 431, 432, 437, 438, 447, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "logic": [7, 67, 83, 84, 87, 94, 98, 100, 112, 137, 158, 166, 174, 178, 188, 190, 204, 218, 229, 253, 264, 266, 267, 268, 278, 287, 293, 299, 316, 341, 342, 352, 356, 358, 365, 373, 382, 384, 423, 432, 458, 461, 462, 464, 465, 470, 472, 476, 477, 479], "physic": [7, 67, 91, 174, 190, 244, 249, 275, 278, 334, 341, 373, 374, 380, 401, 428, 463, 476], "negat": [7, 15, 18, 22, 23, 30, 37, 38, 41, 44, 46, 48, 53, 57, 59, 60, 62, 63, 65, 89, 92, 93, 94, 98, 103, 105, 113, 118, 120, 131, 135, 144, 147, 148, 151, 152, 155, 157, 172, 173, 174, 175, 180, 183, 208, 218, 222, 223, 255, 256, 258, 259, 263, 267, 272, 275, 280, 290, 293, 296, 305, 315, 316, 317, 325, 328, 329, 330, 334, 337, 338, 341, 342, 345, 349, 361, 362, 365, 368, 377, 380, 406, 409, 423, 424, 426, 427, 432, 437, 438, 458, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "begin": [7, 18, 23, 34, 57, 72, 74, 75, 77, 78, 83, 84, 89, 94, 100, 102, 103, 108, 115, 118, 137, 148, 149, 153, 164, 174, 175, 180, 183, 187, 190, 193, 198, 206, 212, 244, 247, 252, 255, 259, 267, 268, 275, 280, 285, 290, 293, 294, 298, 299, 311, 316, 317, 321, 331, 332, 337, 338, 341, 342, 344, 354, 355, 358, 360, 363, 365, 372, 374, 380, 384, 397, 409, 411, 412, 421, 423, 424, 425, 426, 428, 430, 431, 432, 445, 451, 452, 457, 460, 463, 464, 465, 468, 470, 475, 476, 479], "obj": [7, 9, 10, 23, 24, 26, 28, 32, 35, 38, 42, 44, 47, 48, 51, 62, 63, 67, 74, 76, 77, 83, 84, 86, 89, 92, 93, 94, 100, 110, 127, 137, 140, 155, 158, 173, 176, 178, 188, 190, 194, 205, 208, 210, 222, 224, 252, 256, 259, 275, 280, 288, 296, 318, 341, 342, 358, 378, 382, 384, 385, 398, 424, 427, 436, 437, 458, 459, 460, 461, 462, 463, 464, 468, 469, 474, 476, 477, 479], "automat": [7, 23, 28, 32, 44, 54, 58, 60, 62, 67, 70, 72, 75, 83, 84, 89, 91, 94, 97, 102, 103, 104, 106, 108, 110, 118, 124, 130, 131, 137, 138, 149, 153, 155, 158, 164, 166, 172, 173, 174, 178, 181, 183, 184, 187, 188, 190, 193, 198, 202, 203, 205, 206, 210, 222, 223, 231, 239, 240, 245, 247, 252, 264, 265, 267, 268, 269, 275, 278, 280, 285, 289, 290, 294, 296, 305, 310, 315, 317, 320, 325, 327, 329, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 352, 354, 356, 358, 361, 362, 363, 364, 365, 372, 380, 382, 384, 385, 386, 390, 391, 397, 398, 401, 403, 407, 411, 415, 418, 419, 422, 424, 425, 426, 428, 432, 442, 447, 448, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "temporari": [7, 22, 39, 48, 51, 54, 62, 67, 100, 107, 108, 110, 142, 173, 182, 190, 244, 249, 255, 258, 263, 268, 269, 280, 290, 294, 321, 337, 341, 349, 354, 356, 358, 378, 384, 391, 398, 454, 460, 462, 464, 471, 472, 473, 478, 479], "pymemoryview_frombuff": [7, 42, 56, 469, 479], "pybuffer_fillinfo": [7, 56, 62, 469, 479], "general": [7, 13, 23, 32, 36, 39, 41, 50, 53, 56, 62, 67, 71, 72, 75, 83, 84, 86, 89, 90, 92, 93, 98, 99, 100, 103, 104, 106, 108, 118, 120, 124, 131, 137, 144, 149, 150, 155, 164, 166, 173, 174, 178, 179, 180, 181, 183, 188, 200, 205, 210, 221, 222, 223, 232, 239, 240, 241, 244, 247, 251, 258, 263, 264, 265, 266, 267, 268, 270, 272, 280, 285, 290, 296, 302, 304, 311, 316, 317, 322, 327, 332, 334, 338, 339, 341, 342, 344, 345, 347, 349, 354, 360, 362, 365, 371, 377, 380, 382, 383, 385, 386, 390, 391, 395, 401, 403, 404, 405, 407, 408, 409, 410, 411, 413, 421, 422, 423, 424, 426, 427, 430, 431, 432, 451, 454, 457, 458, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "scheme": [7, 30, 62, 74, 77, 94, 100, 107, 134, 139, 155, 173, 180, 207, 244, 266, 268, 331, 337, 338, 349, 351, 354, 371, 390, 391, 395, 403, 424, 451, 458, 459, 461, 464, 465, 470, 471, 472, 473, 474, 479], "len": [7, 8, 9, 22, 37, 39, 40, 48, 53, 54, 59, 63, 67, 75, 84, 86, 92, 93, 100, 103, 104, 106, 112, 139, 140, 145, 147, 149, 157, 158, 163, 167, 173, 185, 187, 188, 190, 208, 212, 222, 223, 227, 232, 233, 239, 244, 251, 258, 266, 275, 280, 281, 285, 288, 289, 290, 293, 302, 315, 317, 332, 334, 337, 338, 341, 344, 358, 378, 381, 385, 396, 403, 404, 406, 409, 423, 424, 431, 436, 437, 438, 439, 445, 446, 447, 458, 461, 462, 463, 464, 465, 466, 469, 471, 472, 473, 474, 477, 479], "product": [7, 67, 79, 83, 94, 99, 120, 123, 141, 183, 190, 221, 233, 242, 244, 258, 266, 272, 315, 324, 341, 349, 380, 384, 385, 417, 422, 426, 431, 436, 446, 455, 458, 459, 463, 464, 465, 467, 470, 472, 475, 477, 479], "items": [7, 60, 67, 119, 179, 280, 334, 341, 479], "guarante": [7, 9, 11, 18, 32, 34, 41, 53, 57, 58, 60, 62, 63, 66, 71, 72, 75, 84, 87, 89, 91, 94, 96, 102, 113, 120, 124, 137, 173, 180, 183, 188, 190, 193, 202, 222, 223, 229, 232, 240, 247, 252, 255, 259, 272, 273, 275, 280, 285, 289, 290, 296, 305, 321, 325, 328, 341, 344, 345, 349, 356, 358, 360, 361, 374, 382, 394, 396, 398, 401, 403, 404, 409, 411, 421, 423, 424, 428, 457, 462, 463, 465, 467, 471, 472, 475, 476, 477, 478, 479], "pybuf_simpl": 7, "pybuf_writ": [7, 42, 464], "control": [7, 31, 32, 33, 34, 41, 49, 57, 67, 72, 73, 74, 76, 78, 82, 83, 84, 91, 92, 93, 98, 99, 100, 103, 105, 108, 113, 118, 124, 128, 130, 131, 135, 137, 141, 142, 147, 149, 150, 153, 155, 160, 172, 173, 174, 175, 180, 181, 183, 187, 188, 190, 191, 193, 194, 198, 199, 202, 204, 205, 207, 208, 210, 212, 215, 219, 222, 226, 231, 242, 244, 245, 247, 251, 252, 253, 255, 256, 259, 261, 264, 265, 266, 268, 273, 278, 279, 280, 281, 285, 289, 290, 292, 294, 295, 296, 302, 304, 305, 306, 308, 311, 312, 318, 319, 325, 326, 328, 330, 334, 335, 338, 341, 343, 344, 345, 347, 349, 354, 360, 361, 363, 364, 365, 370, 371, 372, 376, 377, 381, 384, 385, 386, 387, 390, 391, 398, 401, 402, 403, 409, 411, 413, 415, 416, 418, 422, 423, 424, 425, 426, 428, 430, 432, 434, 439, 444, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "flag": [7, 9, 10, 13, 18, 24, 28, 32, 33, 42, 48, 49, 60, 62, 63, 65, 67, 71, 72, 74, 75, 88, 97, 98, 99, 100, 101, 102, 106, 110, 112, 116, 124, 134, 136, 140, 141, 142, 153, 155, 173, 174, 178, 179, 180, 181, 183, 184, 185, 188, 193, 204, 205, 206, 208, 212, 222, 224, 235, 240, 245, 254, 255, 261, 263, 264, 265, 268, 273, 275, 278, 279, 280, 285, 290, 293, 298, 302, 304, 310, 311, 312, 325, 327, 329, 330, 331, 334, 335, 337, 338, 339, 341, 342, 345, 347, 349, 356, 357, 358, 359, 361, 362, 372, 381, 382, 384, 390, 391, 396, 402, 403, 404, 415, 416, 418, 421, 423, 424, 428, 446, 451, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "struct": [7, 15, 16, 21, 26, 30, 32, 38, 44, 56, 57, 60, 62, 65, 67, 72, 74, 75, 77, 83, 85, 89, 98, 100, 119, 139, 143, 173, 212, 222, 251, 265, 266, 281, 334, 341, 362, 415, 436, 448, 460, 463, 464, 465, 468, 469, 470, 471, 476, 477, 478, 479], "calcsiz": [7, 67, 143, 222, 334, 341, 344, 479], "import": [7, 11, 23, 30, 32, 33, 34, 41, 44, 58, 62, 65, 67, 70, 71, 72, 74, 75, 76, 78, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 123, 124, 129, 131, 132, 134, 135, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 153, 157, 159, 160, 163, 164, 165, 166, 167, 169, 170, 172, 173, 178, 180, 181, 183, 184, 185, 187, 188, 190, 192, 193, 197, 199, 202, 204, 205, 206, 210, 211, 212, 213, 215, 217, 218, 220, 222, 223, 225, 227, 228, 231, 232, 233, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 254, 255, 258, 259, 261, 262, 263, 267, 268, 269, 272, 273, 275, 276, 277, 280, 281, 285, 289, 290, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 352, 354, 355, 356, 357, 361, 362, 363, 364, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 390, 391, 392, 394, 395, 396, 398, 402, 403, 404, 405, 406, 407, 408, 409, 411, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 429, 431, 434, 436, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 451, 452, 457, 458, 460, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480], "pybuf_format": 7, "still": [7, 9, 13, 22, 23, 27, 28, 30, 32, 33, 57, 62, 71, 72, 74, 75, 76, 83, 84, 89, 91, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 112, 118, 120, 131, 137, 141, 149, 155, 160, 164, 166, 167, 173, 174, 178, 183, 190, 191, 199, 203, 205, 210, 223, 227, 240, 244, 247, 249, 252, 265, 266, 268, 272, 275, 280, 281, 289, 290, 292, 293, 296, 305, 311, 316, 319, 320, 321, 325, 327, 330, 331, 334, 335, 337, 338, 341, 342, 345, 349, 356, 358, 360, 361, 365, 372, 378, 381, 382, 384, 385, 386, 391, 398, 403, 405, 406, 409, 412, 422, 423, 424, 426, 428, 431, 432, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "present": [7, 22, 30, 33, 38, 44, 48, 62, 67, 72, 73, 76, 78, 84, 91, 92, 93, 94, 96, 99, 100, 102, 103, 106, 107, 108, 112, 113, 118, 120, 141, 144, 149, 150, 151, 153, 155, 158, 164, 173, 174, 178, 181, 183, 187, 188, 190, 193, 194, 202, 207, 210, 212, 218, 222, 223, 232, 240, 242, 244, 247, 248, 252, 256, 259, 264, 265, 266, 268, 273, 275, 281, 285, 289, 290, 293, 294, 296, 300, 304, 305, 310, 311, 316, 319, 328, 332, 334, 338, 341, 342, 349, 354, 355, 358, 360, 361, 362, 363, 365, 367, 371, 372, 374, 377, 380, 382, 384, 390, 391, 398, 403, 406, 409, 411, 415, 417, 419, 423, 424, 426, 428, 431, 432, 452, 458, 459, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "hold": [7, 9, 23, 27, 32, 34, 44, 50, 54, 57, 62, 65, 72, 84, 86, 92, 98, 99, 100, 104, 108, 118, 120, 122, 137, 164, 166, 167, 173, 180, 183, 188, 200, 212, 239, 242, 252, 254, 265, 266, 268, 280, 281, 289, 290, 299, 305, 316, 319, 322, 327, 334, 338, 341, 345, 349, 358, 361, 365, 377, 384, 398, 401, 407, 409, 411, 417, 422, 424, 428, 432, 458, 459, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "navig": [7, 67, 91, 174, 293, 310, 364, 371, 479], "disregard": [7, 32, 341], "string": [7, 8, 9, 11, 16, 18, 22, 23, 24, 25, 26, 28, 30, 32, 33, 34, 38, 39, 40, 41, 44, 46, 48, 52, 57, 58, 62, 64, 65, 67, 71, 72, 74, 75, 78, 86, 87, 88, 89, 91, 92, 94, 96, 97, 99, 100, 102, 105, 107, 108, 110, 111, 112, 115, 118, 119, 120, 124, 131, 135, 137, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 164, 166, 169, 170, 172, 173, 174, 175, 178, 179, 180, 181, 183, 185, 187, 188, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 217, 218, 222, 223, 225, 227, 230, 231, 232, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 261, 263, 264, 265, 266, 268, 269, 271, 273, 275, 278, 279, 280, 281, 284, 285, 286, 288, 290, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 317, 318, 323, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 347, 348, 349, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 419, 420, 423, 424, 425, 426, 427, 428, 430, 432, 438, 440, 441, 443, 445, 446, 448, 451, 452, 457, 459, 460, 463, 465, 467, 468, 471, 473, 474, 479, 480], "ndim": [7, 67, 341], "dimens": [7, 173, 174, 272, 329, 341, 464, 472, 477, 479], "dimension": [7, 86, 200, 272, 296, 315, 341, 371, 380, 472, 474, 479], "scalar": [7, 139, 193, 196, 223, 380, 382, 479], "maximum": [7, 25, 58, 63, 84, 92, 94, 99, 100, 103, 113, 124, 137, 139, 149, 152, 155, 160, 164, 172, 173, 174, 183, 187, 192, 199, 200, 205, 210, 232, 244, 258, 259, 266, 267, 272, 275, 278, 280, 285, 290, 296, 302, 304, 316, 317, 318, 319, 326, 334, 336, 337, 338, 340, 342, 345, 349, 354, 360, 361, 372, 374, 378, 380, 384, 390, 391, 403, 409, 431, 451, 458, 460, 461, 463, 464, 465, 471, 472, 474, 475, 476, 479], "pybuf_max_ndim": 7, "restrict": [7, 32, 41, 57, 67, 72, 74, 75, 88, 89, 92, 98, 100, 103, 113, 118, 120, 148, 155, 173, 174, 180, 183, 187, 202, 220, 222, 227, 232, 244, 253, 254, 259, 280, 290, 295, 305, 309, 316, 324, 334, 337, 338, 341, 342, 343, 345, 350, 352, 361, 362, 382, 385, 406, 409, 415, 416, 422, 423, 424, 426, 427, 431, 432, 451, 457, 459, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "attent": [7, 98, 103, 174, 380, 461, 471, 473], "further": [7, 32, 40, 62, 67, 72, 74, 75, 77, 78, 84, 87, 89, 94, 97, 99, 100, 106, 107, 117, 120, 137, 142, 147, 149, 151, 155, 166, 170, 173, 178, 184, 188, 190, 208, 210, 215, 225, 244, 263, 264, 266, 267, 272, 279, 289, 290, 292, 294, 296, 316, 329, 330, 334, 335, 337, 338, 341, 342, 349, 350, 362, 365, 377, 382, 405, 406, 409, 411, 417, 421, 423, 424, 426, 428, 431, 440, 451, 457, 458, 459, 460, 461, 462, 464, 465, 470, 472, 476, 477, 479], "skip": [7, 32, 33, 34, 57, 67, 83, 89, 94, 102, 103, 104, 106, 137, 142, 151, 155, 160, 164, 166, 180, 184, 188, 190, 201, 202, 207, 215, 247, 252, 258, 259, 264, 268, 269, 294, 301, 316, 328, 331, 339, 341, 344, 347, 349, 354, 358, 372, 382, 395, 409, 411, 422, 423, 432, 448, 451, 457, 458, 460, 461, 462, 463, 464, 465, 467, 470, 471, 473, 478, 479], "regular": [7, 11, 32, 33, 41, 62, 67, 75, 83, 84, 86, 92, 94, 100, 102, 108, 118, 120, 124, 131, 157, 158, 160, 164, 166, 172, 173, 178, 183, 190, 197, 207, 210, 217, 222, 223, 231, 240, 244, 251, 252, 258, 263, 265, 290, 293, 296, 305, 308, 325, 330, 332, 334, 338, 339, 341, 342, 349, 354, 355, 358, 359, 380, 382, 384, 391, 396, 398, 424, 425, 426, 431, 432, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "abl": [7, 32, 62, 72, 74, 75, 76, 83, 88, 89, 91, 93, 99, 100, 101, 102, 103, 104, 106, 120, 139, 149, 155, 156, 166, 173, 174, 178, 180, 191, 210, 232, 252, 264, 265, 266, 289, 290, 292, 294, 296, 306, 311, 316, 329, 334, 337, 338, 345, 354, 358, 361, 380, 385, 390, 396, 402, 403, 409, 417, 423, 424, 430, 451, 452, 457, 458, 459, 460, 463, 465, 470, 471, 472, 473, 476, 477, 479], "handl": [7, 25, 30, 31, 32, 33, 34, 41, 48, 50, 55, 60, 62, 63, 65, 67, 72, 74, 75, 78, 84, 88, 89, 90, 91, 93, 94, 97, 98, 99, 102, 103, 106, 108, 110, 111, 113, 116, 118, 120, 130, 137, 138, 140, 142, 144, 147, 149, 150, 152, 154, 155, 164, 166, 167, 172, 173, 178, 180, 183, 184, 186, 187, 188, 190, 193, 197, 198, 199, 200, 204, 205, 208, 209, 210, 212, 222, 223, 227, 231, 239, 241, 242, 244, 245, 247, 250, 251, 252, 253, 255, 256, 259, 264, 265, 266, 267, 268, 272, 275, 279, 280, 282, 290, 292, 293, 294, 295, 305, 306, 308, 316, 318, 325, 327, 328, 329, 330, 332, 334, 335, 337, 339, 341, 342, 345, 347, 349, 354, 358, 361, 362, 367, 371, 374, 382, 385, 386, 391, 396, 398, 399, 400, 403, 405, 409, 411, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 432, 439, 448, 451, 457, 458, 459, 460, 462, 463, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480], "along": [7, 57, 89, 94, 98, 99, 100, 108, 118, 124, 138, 139, 147, 152, 160, 166, 173, 183, 190, 200, 202, 215, 227, 231, 232, 241, 247, 248, 264, 266, 275, 290, 296, 305, 326, 332, 334, 338, 341, 342, 345, 365, 372, 376, 380, 382, 384, 385, 403, 410, 417, 422, 423, 458, 459, 460, 461, 462, 464, 465, 471, 473, 474, 479], "nth": [7, 258, 372], "dictat": [7, 86, 164, 219, 222, 296, 334, 457, 458, 464], "mani": [7, 13, 18, 32, 33, 34, 51, 62, 63, 71, 72, 74, 75, 78, 83, 89, 91, 93, 94, 97, 98, 99, 100, 103, 104, 106, 107, 108, 115, 118, 120, 126, 131, 135, 137, 141, 152, 155, 160, 164, 166, 173, 174, 175, 178, 180, 183, 187, 188, 190, 191, 200, 205, 209, 222, 227, 232, 239, 240, 241, 244, 247, 255, 256, 258, 259, 262, 264, 272, 275, 280, 281, 285, 289, 290, 292, 293, 295, 296, 302, 304, 305, 311, 316, 322, 325, 327, 329, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 355, 358, 360, 361, 362, 363, 365, 371, 376, 377, 380, 381, 382, 385, 386, 391, 398, 399, 401, 402, 403, 406, 411, 423, 424, 428, 430, 432, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "de": [7, 12, 23, 28, 40, 67, 73, 79, 117, 174, 227, 240, 249, 258, 285, 296, 341, 354, 382, 390, 415, 468, 469, 470, 473, 475, 476, 478, 479], "might": [7, 23, 32, 34, 51, 57, 62, 63, 72, 74, 75, 84, 87, 89, 91, 93, 94, 98, 99, 100, 102, 103, 104, 106, 107, 108, 112, 120, 130, 135, 137, 139, 142, 144, 155, 173, 176, 178, 180, 188, 190, 193, 202, 204, 206, 210, 218, 231, 232, 235, 240, 244, 255, 256, 263, 264, 265, 266, 268, 269, 275, 280, 281, 285, 289, 290, 292, 296, 299, 302, 305, 316, 332, 334, 337, 338, 341, 349, 358, 361, 363, 365, 380, 382, 385, 386, 390, 391, 396, 398, 404, 409, 418, 424, 428, 430, 446, 451, 457, 458, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 475, 476, 479], "re": [7, 32, 41, 44, 62, 67, 71, 72, 74, 75, 76, 83, 84, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 106, 108, 112, 120, 137, 138, 142, 143, 153, 157, 160, 164, 166, 173, 174, 180, 183, 184, 187, 188, 190, 193, 198, 202, 204, 208, 217, 240, 244, 245, 247, 251, 255, 256, 263, 264, 265, 266, 268, 275, 276, 280, 285, 289, 290, 292, 293, 294, 305, 312, 335, 338, 341, 342, 345, 349, 359, 360, 361, 363, 365, 373, 374, 380, 382, 386, 390, 391, 396, 403, 409, 411, 415, 423, 424, 425, 428, 430, 431, 432, 437, 447, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 477, 479], "cast": [7, 32, 41, 44, 57, 60, 63, 67, 72, 75, 89, 116, 173, 183, 184, 258, 341, 377, 382, 472, 476, 477, 479], "freed": [7, 13, 22, 27, 32, 41, 44, 72, 74, 98, 100, 229, 280, 290, 326, 424, 459, 461, 463, 475, 479], "alter": [7, 22, 41, 84, 124, 151, 183, 205, 240, 244, 245, 259, 265, 269, 296, 321, 341, 342, 380, 422, 424, 428, 458, 462, 471, 473, 477, 479], "send": [7, 67, 78, 83, 91, 94, 99, 102, 103, 104, 107, 116, 124, 126, 131, 134, 135, 139, 140, 149, 150, 155, 158, 161, 166, 174, 188, 191, 197, 198, 209, 220, 227, 239, 241, 242, 244, 245, 253, 254, 264, 265, 266, 275, 280, 281, 285, 290, 296, 302, 313, 326, 330, 332, 334, 335, 338, 345, 352, 357, 358, 365, 380, 382, 391, 403, 415, 424, 426, 448, 458, 461, 462, 463, 465, 469, 470, 471, 472, 474, 475, 476, 478, 479], "via": [7, 32, 41, 44, 60, 62, 63, 67, 72, 75, 83, 84, 88, 89, 94, 96, 99, 107, 110, 113, 118, 120, 137, 138, 142, 149, 164, 167, 180, 187, 190, 193, 197, 198, 199, 202, 203, 204, 205, 210, 213, 215, 218, 222, 225, 230, 232, 239, 244, 248, 252, 258, 259, 262, 263, 264, 265, 266, 275, 280, 281, 289, 290, 294, 295, 296, 299, 302, 305, 311, 316, 317, 318, 320, 332, 334, 335, 338, 341, 342, 345, 349, 351, 356, 358, 380, 382, 384, 385, 391, 396, 401, 403, 406, 409, 415, 421, 423, 424, 426, 451, 454, 458, 463, 464, 465, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479], "drastic": [7, 110], "unambigu": [7, 118, 120, 180, 265, 305, 332, 424, 432, 464, 471], "influenc": [7, 296, 334, 451, 464, 479], "correct": [7, 25, 32, 44, 62, 63, 65, 67, 70, 72, 75, 76, 84, 89, 92, 93, 94, 97, 98, 100, 106, 107, 110, 112, 115, 118, 131, 149, 155, 166, 172, 173, 180, 183, 184, 185, 188, 190, 193, 194, 196, 200, 205, 206, 208, 213, 222, 240, 244, 245, 251, 256, 263, 272, 275, 280, 286, 289, 290, 292, 296, 311, 321, 328, 329, 334, 337, 338, 340, 341, 342, 344, 345, 349, 354, 362, 365, 380, 382, 384, 385, 386, 395, 397, 401, 403, 411, 417, 421, 424, 426, 428, 431, 440, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "els": [7, 22, 28, 34, 35, 40, 41, 52, 62, 63, 67, 71, 72, 74, 75, 77, 78, 83, 84, 87, 88, 89, 94, 98, 100, 102, 103, 104, 107, 108, 112, 120, 124, 134, 137, 149, 157, 163, 166, 170, 173, 180, 183, 187, 188, 190, 193, 197, 204, 223, 225, 227, 237, 239, 244, 245, 247, 258, 259, 264, 266, 268, 273, 280, 286, 288, 289, 290, 296, 306, 315, 316, 326, 329, 334, 337, 338, 339, 340, 341, 345, 349, 354, 356, 358, 361, 368, 374, 380, 381, 382, 385, 395, 396, 398, 403, 406, 418, 424, 426, 427, 428, 430, 431, 432, 439, 441, 451, 457, 458, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 478, 479], "report": [7, 22, 32, 39, 44, 60, 67, 71, 72, 84, 96, 97, 99, 101, 103, 106, 118, 120, 131, 149, 150, 163, 172, 173, 174, 187, 188, 190, 193, 200, 202, 210, 213, 216, 222, 230, 252, 256, 258, 276, 277, 280, 289, 290, 305, 311, 316, 325, 326, 330, 336, 338, 339, 341, 349, 358, 363, 365, 376, 382, 384, 391, 396, 409, 411, 427, 451, 457, 458, 460, 461, 462, 463, 464, 465, 471, 472, 473, 475, 477, 479], "either": [7, 11, 22, 23, 32, 42, 44, 48, 54, 57, 58, 60, 62, 63, 66, 70, 71, 72, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 106, 107, 108, 115, 118, 120, 124, 131, 135, 137, 139, 141, 142, 143, 147, 149, 152, 155, 166, 169, 170, 172, 173, 174, 175, 178, 180, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 202, 203, 204, 205, 206, 208, 210, 212, 218, 222, 232, 239, 240, 242, 244, 245, 247, 249, 252, 254, 255, 256, 258, 259, 264, 265, 266, 267, 268, 269, 272, 275, 278, 280, 281, 285, 289, 290, 292, 293, 294, 296, 298, 299, 305, 306, 308, 311, 316, 319, 321, 322, 325, 326, 328, 329, 331, 334, 337, 338, 341, 342, 344, 345, 349, 351, 354, 355, 356, 358, 361, 362, 365, 371, 372, 374, 377, 380, 382, 384, 385, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 432, 437, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "choic": [7, 67, 72, 83, 84, 88, 100, 102, 104, 107, 116, 149, 152, 171, 190, 208, 222, 227, 244, 252, 264, 265, 268, 280, 287, 289, 305, 311, 315, 321, 323, 326, 327, 338, 340, 341, 344, 347, 371, 427, 430, 437, 447, 460, 463, 470, 471, 474, 475, 476, 479], "next": [7, 23, 26, 32, 36, 41, 62, 63, 67, 71, 72, 74, 75, 84, 86, 89, 91, 92, 93, 94, 97, 100, 102, 103, 106, 108, 110, 112, 115, 117, 124, 137, 139, 142, 147, 149, 151, 153, 154, 156, 157, 158, 164, 172, 173, 174, 183, 187, 188, 190, 191, 192, 193, 194, 202, 208, 210, 215, 218, 222, 223, 227, 233, 239, 240, 244, 250, 251, 252, 258, 264, 266, 267, 268, 275, 279, 280, 285, 289, 290, 293, 294, 304, 305, 311, 316, 317, 322, 327, 328, 330, 334, 335, 337, 338, 341, 342, 345, 347, 350, 354, 364, 365, 371, 372, 380, 385, 386, 391, 394, 396, 409, 421, 423, 424, 425, 426, 428, 430, 432, 436, 438, 445, 446, 448, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 471, 472, 474, 476, 477, 478, 480], "stand": [7, 80, 85, 106, 108, 166, 183, 207, 272, 289, 299, 316, 416, 417, 423, 431, 458, 463, 464, 465, 471, 473, 476, 477, 479], "alon": [7, 63, 74, 80, 85, 100, 103, 108, 120, 247, 294, 316, 321, 328, 416, 422, 423, 430, 460, 463, 473, 479], "impli": [7, 30, 41, 57, 62, 88, 100, 106, 108, 110, 160, 178, 255, 289, 311, 317, 337, 338, 341, 411, 418, 422, 424, 426, 432, 451, 452, 457, 464, 473, 476, 477, 479], "decreas": [7, 136, 180, 188, 256, 362, 458, 462, 465, 472, 475, 477, 479], "below": [7, 23, 30, 32, 44, 54, 56, 58, 59, 60, 62, 63, 65, 67, 72, 75, 84, 87, 89, 92, 93, 94, 99, 100, 107, 108, 112, 113, 115, 116, 118, 131, 142, 147, 152, 155, 164, 169, 172, 174, 176, 178, 180, 183, 185, 186, 188, 190, 192, 200, 205, 210, 218, 227, 230, 232, 239, 240, 242, 244, 245, 246, 247, 249, 255, 263, 264, 265, 266, 273, 279, 280, 285, 289, 290, 292, 293, 294, 304, 311, 316, 317, 318, 319, 321, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 344, 345, 349, 350, 352, 354, 355, 358, 360, 361, 362, 365, 367, 372, 376, 380, 382, 384, 385, 386, 391, 399, 402, 409, 410, 415, 416, 418, 422, 423, 424, 425, 426, 427, 428, 431, 437, 457, 458, 459, 461, 463, 464, 465, 466, 470, 473, 474, 479], "pybuf_indirect": 7, "yes": [7, 72, 78, 84, 88, 96, 164, 183, 190, 263, 264, 311, 316, 338, 365, 369, 401, 403, 407, 409, 437, 442, 445, 452, 457, 460, 471], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 77, 86, 296, 337, 341, 440, 459, 462, 464], "explicit": [7, 23, 28, 30, 32, 33, 34, 44, 48, 50, 62, 65, 67, 72, 75, 77, 84, 87, 89, 91, 93, 94, 96, 98, 99, 100, 102, 103, 108, 110, 112, 118, 120, 124, 130, 131, 133, 137, 138, 149, 154, 163, 164, 166, 167, 173, 176, 178, 180, 183, 185, 187, 193, 195, 199, 202, 203, 205, 207, 210, 211, 215, 222, 223, 227, 230, 240, 242, 247, 252, 255, 256, 259, 263, 264, 265, 266, 267, 268, 272, 278, 280, 281, 289, 290, 292, 294, 296, 304, 308, 311, 321, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 352, 354, 358, 361, 377, 380, 381, 382, 384, 385, 391, 395, 396, 398, 401, 403, 406, 407, 408, 409, 410, 417, 419, 422, 423, 424, 425, 426, 428, 432, 436, 451, 452, 457, 458, 459, 460, 461, 463, 465, 466, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480], "contig": [7, 67, 252, 312], "pybuf_c_contigu": [7, 464], "pybuf_f_contigu": [7, 464], "pybuf_any_contigu": 7, "fulli": [7, 13, 27, 32, 33, 44, 60, 62, 70, 86, 100, 102, 106, 110, 118, 132, 183, 190, 194, 200, 204, 205, 247, 252, 258, 265, 266, 280, 296, 330, 332, 334, 341, 345, 349, 354, 356, 382, 384, 394, 396, 403, 406, 409, 413, 419, 424, 428, 451, 457, 460, 465, 466, 470, 471, 472, 473, 474, 475, 477, 478, 479], "combin": [7, 23, 32, 48, 55, 57, 62, 63, 67, 71, 75, 84, 89, 91, 94, 98, 100, 103, 106, 107, 115, 118, 124, 137, 155, 157, 160, 166, 173, 174, 178, 179, 180, 183, 186, 190, 200, 202, 205, 208, 221, 240, 241, 242, 244, 247, 258, 263, 264, 280, 289, 290, 292, 293, 305, 315, 316, 319, 325, 326, 328, 331, 332, 334, 335, 337, 340, 341, 342, 343, 344, 345, 352, 354, 359, 365, 372, 382, 383, 384, 390, 401, 402, 419, 422, 423, 424, 426, 428, 431, 432, 452, 458, 462, 463, 464, 465, 473, 474, 475, 476, 477, 479], "frequent": [7, 67, 72, 74, 83, 84, 96, 103, 106, 107, 161, 180, 187, 244, 263, 266, 280, 285, 289, 302, 382, 384, 461, 462, 464, 465, 477, 479], "undefin": [7, 18, 25, 28, 32, 38, 41, 62, 63, 84, 89, 124, 138, 155, 163, 193, 202, 204, 210, 222, 224, 255, 272, 289, 325, 341, 349, 362, 374, 378, 396, 409, 412, 424, 426, 431, 445, 452, 474, 476, 479], "pybuffer_iscontigu": [7, 56, 469, 479], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 33, 41, 256, 462, 474], "typeof": 7, "def": [7, 17, 22, 34, 44, 60, 65, 67, 70, 71, 72, 75, 78, 83, 84, 86, 87, 89, 91, 92, 93, 94, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 112, 114, 118, 120, 121, 123, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 147, 153, 157, 158, 163, 166, 167, 169, 170, 173, 178, 180, 183, 185, 187, 188, 190, 197, 200, 208, 210, 213, 222, 223, 224, 225, 227, 229, 232, 233, 237, 240, 242, 244, 247, 248, 252, 255, 256, 258, 259, 264, 265, 272, 280, 286, 288, 289, 293, 294, 296, 300, 306, 309, 311, 313, 315, 316, 317, 318, 322, 326, 328, 329, 330, 332, 334, 335, 337, 338, 339, 340, 341, 342, 348, 349, 354, 357, 358, 360, 361, 363, 365, 374, 377, 378, 380, 381, 382, 384, 385, 386, 395, 396, 398, 403, 407, 409, 415, 416, 418, 423, 424, 425, 426, 427, 431, 432, 436, 437, 439, 446, 447, 448, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 20, 22, 23, 26, 28, 57, 60, 62, 67, 74, 75, 83, 92, 96, 120, 124, 139, 140, 151, 173, 180, 183, 188, 200, 206, 210, 212, 220, 232, 237, 252, 255, 261, 268, 270, 275, 280, 290, 303, 311, 312, 334, 337, 344, 358, 362, 375, 377, 411, 418, 421, 424, 442, 451, 458, 463, 464, 468, 471, 472, 476, 479], "bound": [7, 10, 13, 37, 41, 43, 53, 55, 59, 62, 63, 84, 92, 93, 99, 100, 103, 120, 124, 128, 136, 137, 155, 166, 183, 187, 188, 208, 210, 222, 223, 245, 247, 252, 265, 266, 280, 315, 316, 319, 328, 334, 337, 338, 341, 348, 358, 361, 363, 365, 371, 372, 381, 382, 385, 386, 391, 398, 416, 422, 423, 424, 425, 426, 427, 428, 432, 458, 460, 461, 463, 464, 465, 470, 472, 473, 476, 478, 479], "mem": [7, 41, 42], "imin": 7, "sum": [7, 67, 86, 92, 94, 118, 120, 124, 139, 157, 180, 183, 190, 205, 222, 223, 251, 258, 267, 272, 281, 290, 293, 305, 315, 319, 323, 334, 340, 341, 362, 372, 378, 382, 426, 427, 436, 437, 440, 445, 446, 447, 448, 461, 462, 464, 467, 469, 470, 472, 477, 478, 479], "imax": 7, "view": [7, 22, 42, 47, 62, 67, 83, 86, 91, 92, 93, 96, 102, 118, 120, 131, 137, 157, 158, 180, 183, 188, 193, 197, 202, 205, 222, 244, 255, 264, 269, 296, 305, 310, 337, 339, 344, 347, 348, 349, 365, 371, 372, 380, 381, 401, 406, 458, 463, 464, 468, 471, 472, 474, 479, 480], "anywher": [7, 84, 149, 183, 187, 208, 244, 248, 258, 265, 289, 316, 349, 374, 382, 390, 411, 421, 425, 426, 428, 466, 478, 479], "index": [7, 13, 33, 34, 37, 46, 53, 58, 59, 62, 63, 67, 69, 78, 79, 83, 86, 93, 94, 97, 100, 102, 103, 105, 109, 113, 114, 119, 120, 139, 140, 142, 145, 149, 153, 157, 158, 161, 173, 179, 188, 189, 193, 202, 206, 208, 210, 221, 222, 227, 230, 233, 239, 242, 251, 252, 258, 259, 265, 275, 278, 280, 281, 288, 290, 293, 296, 310, 311, 312, 316, 317, 319, 334, 336, 337, 339, 341, 342, 349, 355, 357, 361, 362, 364, 372, 377, 378, 390, 401, 403, 406, 409, 418, 423, 424, 426, 432, 436, 438, 445, 449, 450, 455, 458, 460, 462, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "get_item_point": 7, "pyobject_checkbuff": [7, 56, 469, 478, 479], "cannot": [7, 9, 24, 26, 28, 32, 33, 37, 38, 48, 53, 57, 60, 62, 63, 65, 66, 71, 72, 75, 84, 88, 89, 91, 93, 94, 97, 98, 99, 100, 101, 102, 105, 107, 110, 113, 120, 124, 130, 133, 142, 149, 155, 157, 158, 160, 164, 166, 173, 174, 178, 180, 183, 188, 190, 194, 198, 199, 200, 205, 209, 210, 211, 212, 215, 222, 223, 227, 230, 242, 244, 247, 249, 250, 252, 255, 263, 264, 265, 266, 267, 268, 272, 273, 275, 279, 280, 290, 292, 293, 294, 296, 299, 301, 304, 305, 311, 316, 319, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 341, 342, 345, 349, 350, 354, 356, 358, 361, 362, 365, 382, 390, 391, 395, 398, 401, 402, 406, 409, 411, 412, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 439, 451, 452, 457, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "pyexc_buffererror": [7, 23, 56, 62], "chain": [7, 23, 62, 67, 84, 92, 94, 98, 100, 107, 117, 154, 157, 164, 173, 184, 210, 211, 221, 222, 233, 252, 258, 264, 290, 341, 349, 377, 385, 391, 424, 426, 432, 441, 464, 466, 470, 472, 473, 474, 478, 479], "redirect": [7, 62, 67, 85, 99, 100, 107, 131, 135, 166, 239, 240, 242, 247, 264, 330, 345, 349, 391, 395, 451, 454, 458, 473, 474, 475, 476, 479], "pybuffer_sizefromformat": [7, 56, 469, 479], "pybuffer_getpoint": [7, 56, 469, 479], "pybuffer_fromcontigu": [7, 56, 469, 479], "fort": 7, "pybuffer_tocontigu": [7, 56, 469, 479], "src": [7, 51, 88, 101, 140, 173, 190, 197, 228, 237, 275, 278, 290, 329, 337, 461, 463], "pyobject_copydata": [7, 56], "dest": [7, 67, 88, 100, 116, 197, 225, 266, 275, 289, 306, 347, 395, 461, 463, 464, 465, 479], "between": [7, 32, 33, 37, 38, 41, 44, 53, 55, 59, 60, 62, 67, 71, 72, 73, 74, 75, 78, 83, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 118, 120, 124, 131, 138, 139, 147, 148, 152, 155, 158, 161, 164, 169, 170, 174, 180, 183, 188, 190, 192, 193, 194, 198, 202, 206, 208, 210, 213, 215, 222, 227, 232, 244, 247, 248, 251, 252, 255, 256, 258, 259, 263, 264, 265, 266, 267, 272, 273, 275, 281, 282, 290, 292, 293, 294, 296, 297, 305, 315, 316, 317, 331, 334, 335, 336, 337, 338, 340, 341, 344, 345, 347, 349, 355, 358, 360, 361, 362, 363, 365, 367, 368, 371, 372, 373, 374, 378, 380, 381, 382, 384, 385, 386, 390, 391, 396, 397, 401, 403, 406, 407, 409, 413, 415, 421, 422, 423, 424, 426, 427, 428, 430, 432, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pybuffer_fillcontiguousstrid": [7, 56, 469], "per": [7, 13, 22, 23, 30, 34, 44, 48, 62, 63, 67, 72, 83, 84, 87, 89, 100, 108, 115, 118, 120, 124, 130, 131, 139, 141, 142, 144, 148, 155, 174, 178, 180, 183, 188, 193, 194, 200, 202, 205, 206, 223, 239, 247, 248, 259, 264, 268, 278, 280, 285, 290, 292, 302, 304, 305, 316, 326, 331, 334, 335, 337, 338, 341, 349, 358, 361, 362, 363, 365, 372, 376, 378, 384, 415, 418, 423, 424, 428, 432, 451, 457, 461, 462, 463, 465, 466, 467, 468, 472, 473, 474, 476, 477, 479, 480], "accord": [7, 18, 32, 38, 63, 65, 67, 75, 91, 92, 93, 94, 97, 100, 106, 120, 124, 149, 152, 155, 166, 172, 178, 180, 183, 193, 198, 200, 202, 205, 206, 213, 215, 222, 223, 230, 232, 240, 244, 245, 247, 251, 253, 258, 263, 264, 265, 272, 278, 280, 289, 290, 305, 338, 339, 341, 343, 344, 362, 371, 372, 374, 380, 384, 390, 391, 397, 406, 418, 422, 424, 426, 428, 431, 451, 457, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 479], "design": [7, 33, 62, 75, 83, 84, 87, 89, 92, 93, 94, 98, 99, 100, 102, 106, 107, 108, 120, 135, 137, 144, 150, 155, 164, 166, 174, 180, 183, 189, 190, 191, 198, 207, 208, 210, 222, 223, 225, 227, 232, 244, 247, 268, 280, 289, 290, 296, 305, 320, 328, 334, 338, 344, 354, 358, 361, 365, 371, 374, 380, 382, 385, 390, 403, 413, 421, 422, 428, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 476, 478, 479], "getbufferproc": [7, 56, 62, 472, 479], "subtyp": [8, 9, 11, 25, 37, 38, 44, 48, 54, 59, 60, 62, 63, 67, 184, 191, 193, 194, 197, 198, 200, 201, 202, 203, 244, 273, 282, 289, 330, 338, 341, 412, 423, 424, 426, 460, 479], "pybytearray_typ": [8, 56], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 56, 464], "pybytearray_fromstringands": [8, 56, 464], "pybytearray_concat": [8, 56], "concat": [8, 63, 67, 94, 221, 288, 382, 437], "pybytearray_s": [8, 56], "pybytearray_asstr": [8, 56], "extra": [8, 9, 16, 18, 28, 56, 62, 63, 67, 75, 84, 87, 89, 91, 93, 100, 107, 108, 110, 117, 118, 120, 124, 130, 158, 167, 172, 183, 188, 190, 193, 199, 200, 202, 205, 208, 239, 244, 248, 264, 265, 268, 280, 281, 289, 290, 329, 337, 338, 341, 344, 354, 355, 358, 363, 372, 382, 385, 409, 418, 424, 427, 448, 451, 452, 458, 461, 464, 465, 470, 471, 472, 475, 476, 477, 479], "append": [8, 9, 33, 37, 58, 63, 67, 75, 77, 78, 79, 83, 84, 89, 99, 100, 104, 108, 110, 118, 119, 132, 147, 149, 154, 155, 157, 158, 160, 173, 178, 179, 181, 183, 186, 188, 191, 193, 197, 199, 200, 202, 205, 222, 223, 231, 245, 246, 247, 252, 253, 255, 258, 264, 266, 267, 268, 270, 278, 280, 281, 282, 285, 289, 290, 293, 294, 296, 298, 299, 306, 313, 315, 316, 317, 318, 327, 331, 334, 337, 338, 339, 341, 347, 349, 354, 358, 374, 384, 391, 396, 403, 404, 407, 409, 418, 423, 424, 431, 436, 437, 438, 439, 445, 446, 448, 451, 452, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 479], "pybytearray_res": [8, 56], "trade": [8, 213, 289, 341, 422], "safeti": [8, 32, 67, 72, 87, 93, 116, 137, 197, 252, 280, 289, 321, 337, 394, 465, 467, 471, 479], "speed": [8, 41, 63, 67, 72, 92, 99, 103, 108, 144, 158, 174, 181, 183, 187, 213, 219, 223, 231, 247, 255, 258, 292, 293, 294, 296, 327, 338, 340, 347, 349, 357, 363, 380, 424, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "pybytes_typ": [9, 56, 479], "pybytes_check": [9, 78, 464], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 41, 56], "pybytes_fromstringands": [9, 56, 464], "uniniti": [9, 32, 34, 41, 72, 84, 89, 296, 452, 479], "pybytes_fromformat": [9, 56, 479], "printf": [9, 63, 67, 71, 72, 96, 173, 242, 264, 426, 442, 445, 456, 463, 469, 479], "calcul": [9, 30, 32, 33, 58, 62, 63, 72, 84, 88, 89, 92, 94, 118, 148, 174, 178, 180, 183, 188, 203, 223, 232, 266, 272, 280, 292, 319, 330, 334, 341, 342, 344, 348, 350, 352, 362, 363, 374, 377, 380, 381, 386, 391, 397, 424, 426, 428, 431, 460, 463, 464, 467, 469, 470, 473, 477, 479], "liter": [9, 38, 63, 67, 77, 89, 93, 102, 103, 110, 111, 118, 154, 155, 156, 180, 183, 184, 188, 190, 217, 218, 222, 227, 228, 245, 254, 259, 261, 264, 265, 267, 299, 304, 316, 328, 337, 341, 342, 345, 362, 363, 365, 372, 374, 382, 384, 390, 396, 399, 409, 411, 424, 425, 427, 428, 429, 430, 437, 441, 445, 458, 460, 461, 463, 465, 466, 468, 470, 471, 473, 476, 477, 478, 479, 480], "ld": [9, 71, 76, 173, 341, 452], "lu": [9, 341, 383, 431, 458, 473, 475, 476, 479], "zd": [9, 479], "zu": [9, 479], "size_t": [9, 10, 18, 28, 33, 34, 38, 41, 58, 63, 89, 173, 344, 472, 479], "hex": [9, 63, 67, 84, 93, 103, 106, 141, 144, 155, 173, 208, 222, 232, 251, 253, 338, 341, 342, 349, 365, 394, 424, 431, 440, 446, 448, 458, 459, 461, 463, 464, 466, 467, 468, 473, 474, 479], "0x": [9, 46, 63, 84, 86, 93, 103, 136, 173, 190, 222, 241, 280, 289, 341, 342, 380, 385, 386, 431, 462, 471, 479], "regardless": [9, 24, 32, 33, 40, 58, 63, 93, 102, 108, 112, 118, 137, 166, 172, 174, 180, 183, 205, 208, 217, 244, 247, 255, 258, 259, 299, 311, 330, 331, 332, 334, 337, 338, 341, 342, 344, 345, 349, 372, 380, 384, 385, 386, 395, 396, 398, 399, 408, 421, 426, 428, 431, 451, 457, 470, 471, 472, 473, 474, 476, 479], "yield": [9, 35, 63, 67, 74, 84, 86, 94, 114, 120, 131, 136, 137, 147, 149, 157, 164, 166, 180, 187, 188, 194, 204, 222, 223, 229, 232, 239, 250, 252, 255, 258, 259, 261, 268, 280, 290, 293, 296, 299, 316, 328, 341, 344, 354, 358, 374, 377, 382, 385, 386, 390, 394, 403, 406, 409, 415, 423, 424, 425, 427, 429, 431, 436, 460, 461, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "unrecogn": [9, 63, 88, 118, 225, 410, 418, 431, 470, 474, 475, 479], "rest": [9, 18, 63, 76, 84, 88, 89, 94, 98, 99, 100, 103, 110, 118, 120, 126, 149, 158, 174, 183, 190, 210, 220, 223, 244, 264, 273, 289, 290, 299, 316, 320, 341, 358, 372, 374, 385, 415, 423, 424, 427, 431, 432, 437, 458, 460, 461, 463, 464, 465, 466, 468, 470, 472, 473, 476, 478, 479], "discard": [9, 34, 37, 48, 54, 59, 63, 65, 67, 72, 89, 93, 94, 124, 137, 141, 149, 154, 155, 158, 180, 183, 240, 253, 255, 264, 265, 268, 280, 282, 289, 334, 337, 341, 357, 372, 396, 398, 407, 409, 412, 423, 424, 445, 451, 460, 463, 464, 465, 470, 473, 475, 477, 479], "effect": [9, 11, 14, 22, 23, 27, 30, 32, 33, 44, 51, 57, 58, 62, 63, 67, 72, 74, 83, 84, 87, 91, 92, 94, 97, 99, 100, 102, 103, 105, 107, 108, 113, 118, 120, 124, 130, 138, 142, 156, 164, 166, 173, 174, 178, 180, 182, 183, 184, 188, 190, 200, 205, 207, 210, 212, 215, 222, 223, 224, 240, 244, 247, 255, 258, 263, 264, 265, 266, 269, 280, 289, 290, 292, 293, 294, 299, 305, 308, 311, 316, 319, 320, 321, 322, 325, 327, 328, 329, 331, 337, 338, 339, 340, 341, 342, 345, 349, 354, 358, 360, 361, 362, 372, 378, 380, 381, 382, 384, 385, 396, 401, 408, 416, 417, 418, 421, 423, 424, 426, 428, 431, 432, 438, 446, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "precis": [9, 13, 18, 25, 44, 63, 67, 71, 99, 180, 210, 222, 227, 256, 259, 265, 266, 272, 280, 287, 290, 305, 310, 325, 326, 334, 337, 341, 342, 344, 349, 362, 363, 372, 382, 391, 404, 423, 424, 426, 430, 431, 440, 448, 458, 462, 463, 464, 465, 471, 472, 473, 475, 476, 477, 478, 479], "pybytes_fromformatv": [9, 56], "pybytes_fromobject": [9, 56], "pybytes_s": [9, 56, 78], "pybytes_get_s": 9, "pybytes_asstr": [9, 56, 468], "last": [9, 22, 23, 25, 26, 32, 33, 34, 44, 51, 58, 62, 66, 67, 72, 75, 77, 83, 84, 86, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 103, 104, 106, 112, 118, 120, 123, 137, 138, 142, 144, 148, 149, 153, 155, 157, 158, 164, 166, 173, 174, 180, 181, 183, 185, 187, 188, 190, 193, 197, 200, 202, 206, 208, 210, 211, 212, 215, 218, 222, 231, 232, 242, 244, 245, 252, 256, 258, 259, 263, 264, 266, 267, 268, 272, 280, 281, 285, 288, 289, 290, 293, 294, 296, 298, 305, 311, 316, 317, 320, 325, 327, 328, 329, 334, 336, 337, 339, 341, 342, 344, 345, 347, 349, 354, 361, 362, 365, 372, 374, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 394, 398, 401, 402, 406, 409, 411, 418, 423, 424, 425, 426, 428, 431, 432, 436, 437, 438, 439, 442, 445, 448, 451, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "just": [9, 13, 28, 32, 34, 38, 50, 62, 63, 65, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 118, 120, 126, 127, 136, 137, 147, 148, 149, 153, 154, 155, 156, 158, 164, 166, 173, 174, 176, 178, 180, 183, 187, 190, 191, 197, 198, 208, 210, 215, 222, 223, 227, 231, 232, 240, 244, 247, 249, 250, 258, 263, 264, 265, 266, 268, 278, 280, 281, 289, 290, 293, 294, 296, 305, 310, 311, 316, 317, 325, 327, 328, 330, 334, 335, 337, 338, 341, 342, 345, 348, 349, 351, 354, 356, 358, 360, 361, 365, 371, 372, 377, 380, 382, 384, 385, 386, 391, 395, 398, 403, 405, 406, 409, 410, 411, 416, 417, 418, 419, 423, 424, 426, 428, 430, 432, 437, 448, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "dealloc": [9, 13, 22, 28, 32, 34, 41, 44, 51, 62, 63, 72, 74, 75, 86, 98, 358, 398, 432, 452, 459, 460, 465, 469, 471, 477, 479], "pybytes_as_str": [9, 427], "pybytes_asstringands": [9, 56, 78], "pybytes_concat": [9, 56, 479], "newpart": 9, "stolen": [9, 34, 71, 479], "pybytes_concatanddel": [9, 56], "_pybytes_res": [9, 479], "newsiz": [9, 28, 59, 275], "though": [9, 11, 30, 32, 57, 62, 63, 72, 74, 75, 83, 84, 89, 91, 93, 94, 100, 102, 103, 106, 107, 112, 113, 118, 124, 130, 131, 152, 153, 155, 158, 170, 174, 183, 190, 193, 196, 197, 202, 203, 205, 208, 210, 222, 227, 232, 240, 244, 247, 248, 249, 252, 255, 259, 264, 266, 268, 272, 280, 281, 285, 289, 290, 302, 308, 311, 316, 325, 328, 338, 341, 344, 358, 361, 362, 365, 378, 380, 382, 384, 385, 386, 391, 403, 406, 407, 411, 421, 422, 424, 425, 426, 428, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 472, 479], "build": [9, 32, 33, 41, 57, 63, 64, 67, 73, 74, 75, 78, 83, 84, 89, 92, 96, 100, 101, 107, 120, 139, 153, 154, 155, 173, 181, 183, 184, 185, 187, 188, 200, 203, 205, 208, 222, 232, 242, 251, 254, 255, 258, 270, 272, 279, 289, 293, 304, 308, 311, 325, 331, 334, 335, 338, 341, 349, 351, 358, 365, 378, 380, 384, 386, 390, 391, 395, 396, 405, 406, 421, 424, 447, 451, 454, 457, 458, 460, 480], "brand": [9, 54, 59, 72, 302, 479], "refcount": [9, 32, 51, 62, 98, 349, 358, 463, 479], "lvalu": [9, 289, 341], "differ": [9, 10, 13, 23, 27, 32, 33, 34, 41, 44, 56, 57, 58, 62, 63, 65, 67, 71, 72, 73, 74, 75, 78, 83, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 112, 118, 120, 124, 130, 131, 135, 136, 137, 139, 149, 152, 153, 154, 155, 156, 158, 160, 164, 166, 167, 170, 171, 172, 173, 174, 180, 182, 183, 188, 190, 192, 193, 199, 200, 202, 205, 208, 210, 211, 213, 219, 222, 223, 227, 239, 240, 242, 244, 247, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 272, 273, 275, 278, 280, 281, 289, 290, 292, 293, 294, 296, 299, 300, 305, 310, 311, 315, 316, 317, 318, 319, 325, 327, 328, 330, 332, 334, 335, 337, 338, 341, 342, 344, 345, 349, 351, 354, 356, 358, 359, 360, 361, 362, 363, 365, 368, 371, 372, 377, 381, 382, 384, 385, 386, 390, 391, 397, 401, 403, 406, 407, 416, 418, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 440, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "realloc": [9, 41, 53, 72, 174, 462, 475, 479], "memoryerror": [9, 23, 54, 59, 63, 67, 120, 183, 210, 391, 446, 473, 479], "slot": [10, 16, 31, 44, 46, 48, 49, 57, 60, 67, 74, 75, 89, 92, 100, 132, 178, 188, 209, 223, 247, 252, 278, 280, 296, 313, 341, 382, 424, 426, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 472, 473, 474, 477, 478, 479], "callabl": [10, 32, 36, 57, 58, 62, 66, 67, 71, 72, 84, 86, 87, 91, 93, 94, 100, 105, 110, 118, 120, 124, 130, 134, 136, 137, 158, 163, 164, 167, 169, 173, 174, 178, 179, 184, 187, 188, 203, 204, 205, 221, 222, 232, 245, 247, 248, 251, 255, 264, 265, 266, 268, 280, 288, 289, 290, 293, 295, 296, 310, 311, 312, 322, 329, 330, 332, 341, 345, 349, 354, 361, 363, 367, 372, 374, 384, 385, 386, 391, 395, 396, 398, 403, 409, 417, 423, 426, 428, 446, 451, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479], "kwarg": [10, 57, 62, 67, 84, 86, 89, 92, 99, 100, 110, 113, 118, 120, 124, 137, 138, 140, 155, 157, 163, 164, 167, 174, 183, 184, 222, 250, 252, 259, 264, 265, 280, 288, 289, 290, 296, 304, 305, 312, 322, 341, 342, 354, 358, 360, 361, 381, 382, 384, 385, 386, 395, 398, 424, 427, 437, 464, 469, 472, 474, 475, 477, 479], "tp_new": [10, 60, 62, 67, 74, 75, 98, 470, 479], "tp_init": [10, 60, 62, 67, 74, 75, 470, 479], "pyobject_cal": [10, 56, 62, 72, 478, 479], "pep": [10, 13, 23, 26, 30, 32, 33, 34, 44, 48, 56, 58, 61, 62, 63, 65, 67, 69, 70, 72, 74, 77, 79, 84, 85, 86, 87, 89, 94, 106, 110, 111, 114, 115, 120, 124, 127, 139, 140, 149, 150, 151, 152, 155, 157, 158, 160, 163, 166, 167, 170, 172, 178, 184, 188, 197, 207, 210, 218, 222, 223, 224, 244, 246, 247, 248, 252, 255, 262, 264, 269, 272, 278, 284, 285, 286, 290, 292, 293, 296, 298, 299, 308, 319, 321, 323, 325, 326, 329, 330, 331, 333, 334, 336, 337, 338, 341, 342, 345, 346, 349, 354, 355, 358, 362, 374, 381, 393, 395, 398, 403, 404, 419, 421, 423, 424, 425, 426, 427, 428, 431, 432, 437, 446, 451, 452, 453, 457, 458, 478, 479, 480], "590": [10, 67, 468, 469, 478, 479], "pyvectorcall_cal": [10, 56, 62, 470, 479], "py_tpflags_have_vectorcal": [10, 62, 470, 479], "now": [10, 23, 28, 32, 33, 34, 38, 41, 48, 51, 57, 58, 60, 62, 63, 65, 67, 71, 72, 74, 75, 83, 84, 88, 89, 91, 92, 93, 99, 100, 102, 103, 104, 105, 106, 107, 108, 112, 113, 115, 118, 120, 124, 130, 131, 135, 137, 138, 139, 141, 144, 147, 149, 151, 155, 157, 158, 160, 164, 166, 167, 169, 172, 173, 174, 178, 179, 180, 181, 183, 185, 188, 190, 197, 199, 202, 208, 209, 210, 211, 212, 213, 215, 218, 222, 223, 227, 231, 232, 239, 240, 241, 242, 245, 247, 248, 249, 252, 255, 256, 259, 263, 264, 265, 266, 267, 268, 272, 275, 279, 280, 281, 285, 289, 290, 292, 293, 294, 296, 301, 302, 305, 306, 308, 310, 315, 316, 325, 326, 327, 328, 329, 330, 332, 334, 335, 337, 338, 340, 341, 342, 344, 345, 349, 355, 356, 361, 362, 363, 373, 377, 378, 380, 381, 382, 384, 385, 386, 390, 391, 395, 396, 397, 401, 407, 409, 415, 416, 418, 419, 423, 424, 426, 428, 431, 432, 437, 438, 445, 446, 447, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "class": [10, 22, 23, 28, 32, 39, 43, 44, 48, 52, 53, 57, 60, 61, 62, 63, 66, 67, 72, 74, 75, 79, 83, 85, 86, 87, 91, 94, 97, 99, 102, 103, 104, 105, 106, 107, 110, 114, 116, 119, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 156, 157, 161, 163, 164, 166, 167, 169, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 208, 215, 216, 218, 219, 220, 221, 222, 223, 224, 229, 231, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 251, 253, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 273, 275, 276, 277, 281, 282, 283, 285, 286, 289, 290, 292, 293, 294, 295, 297, 298, 299, 301, 302, 304, 308, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 330, 332, 334, 335, 337, 338, 340, 342, 345, 347, 348, 349, 354, 355, 356, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 383, 390, 392, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 425, 426, 427, 428, 429, 430, 432, 435, 437, 439, 441, 442, 446, 447, 448, 451, 457, 458, 459, 461, 462, 465, 466, 467, 468, 470, 471, 473, 474, 476, 477, 478, 479, 480], "__call__": [10, 62, 67, 84, 86, 92, 118, 156, 157, 158, 179, 191, 200, 208, 221, 222, 280, 282, 288, 354, 382, 385, 386, 398, 424, 426, 470, 475, 479], "reassign": [10, 41, 62, 75, 208, 304, 345, 382, 398, 470, 477, 479], "behav": [10, 23, 32, 33, 44, 62, 63, 75, 84, 88, 89, 93, 98, 100, 103, 106, 160, 164, 166, 167, 172, 173, 180, 181, 183, 185, 222, 223, 241, 254, 255, 268, 275, 285, 290, 317, 318, 330, 332, 334, 335, 338, 341, 345, 349, 352, 360, 365, 382, 384, 385, 386, 407, 409, 423, 424, 425, 426, 431, 432, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 476, 477, 479], "earlier": [10, 32, 62, 63, 71, 83, 84, 89, 91, 94, 99, 100, 102, 103, 108, 112, 113, 124, 174, 180, 190, 207, 227, 242, 244, 255, 264, 266, 272, 289, 290, 296, 316, 328, 337, 338, 345, 349, 354, 365, 376, 382, 384, 385, 390, 396, 398, 407, 411, 424, 426, 428, 431, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 475, 476, 477, 478, 479], "tp_vectorcall_offset": [10, 57, 60, 62, 74, 479], "vectorcallfunc": [10, 27, 56, 62, 74, 470], "typedef": [10, 11, 13, 15, 22, 27, 28, 31, 32, 49, 57, 58, 60, 63, 67, 74, 75, 89, 479], "nargsf": 10, "kwname": [10, 57, 98], "py_vectorcall_arguments_offset": [10, 56, 470, 479], "pyvectorcall_narg": [10, 56, 470, 479], "pyobject_vectorcallmethod": [10, 56, 470, 479], "pyobject_vectorcal": [10, 56, 101, 470, 479], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 479], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 479], "_pyobject_callmethodnoarg": [10, 479], "_pyobject_callmethodonearg": [10, 479], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 56, 478, 479], "py_leaverecursivecal": [10, 23, 56, 478, 479], "pyvectorcall_funct": [10, 479], "fall": [10, 22, 25, 38, 41, 62, 63, 83, 94, 99, 105, 158, 174, 178, 180, 183, 193, 202, 210, 222, 232, 265, 290, 292, 322, 338, 341, 342, 354, 390, 391, 421, 424, 428, 431, 444, 458, 460, 461, 463, 464, 465, 466, 470, 471, 473, 475, 476, 478, 479], "pyobject_callnoarg": [10, 56, 74, 478, 479], "pyobject_callonearg": [10, 478, 479], "pyobject_callobject": [10, 56, 71, 72, 78], "pyobject_callfunct": [10, 56, 463, 477], "pyobject_callmethod": [10, 38, 54, 56, 78, 468, 470], "pyobject_callfunctionobjarg": [10, 56, 479], "pyobject_callmethodobjarg": [10, 56, 479], "pyobject_callmethodnoarg": [10, 479], "pyobject_callmethodonearg": [10, 479], "arg1": [10, 74, 84, 94, 96, 114, 222, 289, 290, 424, 460, 461, 463], "arg2": [10, 74, 84, 94, 96, 114, 222, 289, 385, 424, 460, 461, 463], "kwdict": [10, 72], "py_tpflags_method_descriptor": [10, 62, 479], "unbound": [10, 62, 67, 100, 113, 183, 184, 188, 222, 223, 252, 265, 358, 361, 380, 381, 424, 425, 428, 432, 460, 462, 466, 468, 474, 476, 479], "pycallable_check": [10, 56, 71, 72], "pycapsul": [11, 72, 465, 467, 468, 471, 479], "opaqu": [11, 13, 26, 32, 34, 38, 60, 62, 114, 168, 255, 311, 326, 339, 404, 409, 459, 470, 471, 473, 476, 477, 478, 479], "who": [11, 67, 72, 97, 99, 100, 105, 106, 124, 160, 225, 227, 245, 264, 290, 297, 319, 338, 342, 354, 380, 407, 417, 419, 421, 442, 457, 458, 460, 461, 462, 463, 465, 472, 475, 477, 478, 479], "often": [11, 13, 32, 34, 57, 63, 72, 74, 75, 83, 84, 89, 91, 92, 94, 97, 100, 103, 105, 106, 107, 108, 112, 118, 120, 144, 149, 153, 173, 180, 181, 183, 187, 190, 191, 195, 210, 222, 227, 230, 252, 258, 278, 289, 296, 305, 306, 308, 328, 334, 337, 338, 341, 343, 345, 350, 358, 361, 362, 365, 382, 385, 386, 391, 410, 424, 426, 430, 431, 432, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 474, 477, 479], "dynam": [11, 22, 25, 30, 41, 44, 51, 62, 65, 67, 71, 72, 76, 78, 79, 83, 84, 99, 100, 101, 116, 139, 179, 187, 200, 222, 223, 244, 247, 251, 252, 281, 290, 318, 332, 334, 337, 341, 342, 349, 365, 372, 380, 382, 385, 386, 403, 419, 424, 426, 428, 432, 436, 452, 458, 460, 461, 463, 464, 471, 472, 473, 476, 477, 479], "load": [11, 30, 32, 33, 40, 44, 57, 58, 67, 71, 72, 76, 78, 83, 84, 85, 89, 92, 93, 96, 98, 99, 100, 107, 116, 120, 140, 149, 153, 163, 164, 181, 182, 184, 188, 190, 210, 214, 240, 241, 244, 247, 248, 250, 253, 258, 259, 261, 264, 265, 271, 273, 276, 281, 282, 290, 294, 295, 296, 299, 301, 304, 305, 308, 311, 317, 327, 331, 337, 338, 341, 349, 350, 358, 362, 364, 365, 375, 378, 380, 381, 401, 406, 409, 410, 415, 416, 417, 419, 421, 423, 424, 427, 429, 432, 442, 451, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pycapsule_destructor": [11, 56], "destructor": [11, 32, 56, 62, 74, 75, 77, 83, 86, 113, 185, 290, 313, 345, 349, 424, 432, 451, 467, 471, 475, 477, 479], "pycapsule_new": [11, 56, 72], "pycapsule_checkexact": 11, "encapsul": [11, 83, 84, 87, 92, 98, 110, 112, 153, 199, 205, 245, 255, 283, 302, 332, 349, 406, 410, 412, 415, 423, 428, 432, 462, 463, 464, 465, 473], "outliv": [11, 281, 423, 479], "permit": [11, 27, 58, 72, 87, 89, 97, 120, 183, 207, 209, 218, 222, 242, 252, 254, 256, 259, 262, 268, 280, 281, 290, 296, 305, 316, 341, 345, 350, 385, 406, 415, 422, 426, 427, 431, 432, 451, 463, 464, 470, 472, 473, 474, 477, 479], "attribut": [11, 22, 23, 26, 27, 30, 32, 44, 48, 49, 55, 59, 60, 62, 67, 73, 78, 86, 87, 89, 94, 99, 103, 107, 110, 112, 113, 116, 118, 120, 124, 131, 135, 140, 142, 147, 148, 149, 153, 155, 156, 157, 164, 169, 171, 172, 173, 174, 178, 180, 183, 184, 185, 187, 188, 190, 192, 193, 194, 197, 200, 202, 204, 205, 208, 210, 212, 213, 222, 223, 225, 230, 231, 235, 239, 240, 241, 242, 244, 245, 247, 248, 251, 255, 256, 259, 261, 265, 266, 267, 268, 270, 278, 280, 281, 285, 288, 292, 293, 295, 296, 299, 300, 301, 302, 309, 310, 311, 312, 316, 318, 322, 325, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 344, 345, 347, 349, 354, 356, 357, 358, 360, 361, 362, 363, 365, 367, 368, 370, 377, 378, 379, 380, 381, 382, 384, 389, 390, 391, 394, 395, 396, 398, 401, 403, 404, 406, 407, 409, 410, 411, 413, 415, 416, 418, 419, 421, 422, 423, 425, 431, 432, 436, 438, 452, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480], "modulenam": [11, 70, 72, 78, 84, 96, 446, 479], "attributenam": [11, 72], "enabl": [11, 28, 33, 48, 62, 67, 74, 75, 89, 91, 93, 103, 107, 108, 110, 118, 120, 131, 137, 140, 142, 149, 150, 153, 164, 166, 173, 174, 182, 183, 185, 190, 194, 210, 211, 222, 223, 224, 227, 239, 242, 244, 245, 247, 252, 253, 255, 263, 265, 266, 280, 285, 290, 293, 294, 296, 302, 305, 308, 311, 312, 316, 317, 330, 331, 334, 337, 338, 341, 342, 345, 347, 349, 350, 358, 363, 365, 367, 372, 376, 382, 384, 386, 396, 403, 408, 410, 411, 416, 418, 423, 424, 425, 432, 451, 452, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479], "pycapsule_import": [11, 56, 72, 479], "pycapsule_getpoint": [11, 56, 465], "compar": [11, 23, 32, 33, 48, 62, 63, 67, 71, 74, 83, 88, 91, 93, 97, 99, 100, 102, 103, 105, 108, 120, 124, 173, 178, 179, 180, 183, 187, 188, 190, 192, 193, 194, 199, 211, 213, 222, 223, 233, 256, 259, 261, 263, 264, 266, 268, 280, 281, 287, 289, 294, 305, 308, 311, 313, 323, 325, 337, 338, 339, 341, 343, 349, 358, 359, 363, 365, 378, 382, 383, 384, 385, 386, 394, 401, 409, 421, 423, 424, 426, 428, 431, 440, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "strcmp": [11, 18, 74, 479], "pycapsule_getdestructor": [11, 56], "legal": [11, 76, 89, 91, 106, 222, 238, 244, 255, 294, 358, 362, 365, 372, 382, 416, 422, 426, 431, 459, 460, 461, 463, 464, 465, 479], "somewhat": [11, 23, 89, 98, 100, 173, 180, 201, 223, 244, 263, 289, 290, 334, 365, 421, 458, 463, 466, 476, 477, 479], "ambigu": [11, 67, 89, 94, 103, 118, 180, 256, 289, 294, 316, 341, 421, 423, 426, 430, 431, 458, 464, 470, 473, 475, 476, 477, 478, 479], "pycapsule_isvalid": [11, 56, 465], "pyerr_occur": [11, 22, 23, 25, 34, 35, 38, 40, 48, 56, 63, 71, 72, 89, 427, 479], "disambigu": [11, 38, 67, 180, 426, 431, 479], "pycapsule_getcontext": [11, 56], "context": [11, 16, 23, 32, 41, 44, 48, 53, 63, 65, 67, 72, 77, 78, 84, 86, 89, 94, 98, 106, 118, 120, 121, 122, 124, 126, 127, 130, 137, 149, 150, 157, 161, 163, 164, 180, 181, 184, 185, 187, 188, 215, 220, 222, 227, 232, 239, 247, 248, 249, 251, 252, 255, 259, 264, 265, 266, 267, 268, 275, 285, 287, 290, 292, 294, 295, 296, 302, 304, 305, 311, 312, 313, 316, 318, 319, 325, 326, 327, 332, 334, 335, 342, 345, 349, 354, 355, 356, 358, 361, 364, 371, 373, 382, 384, 385, 391, 395, 398, 401, 406, 408, 409, 410, 411, 415, 418, 423, 425, 426, 427, 431, 432, 452, 458, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "pycapsule_getnam": [11, 56], "no_block": [11, 479], "full": [11, 28, 32, 33, 62, 63, 67, 72, 75, 83, 89, 92, 99, 100, 102, 103, 107, 132, 137, 148, 154, 155, 158, 160, 161, 164, 165, 170, 172, 173, 177, 180, 183, 187, 188, 190, 194, 197, 198, 209, 210, 219, 240, 244, 248, 252, 256, 258, 264, 266, 272, 275, 277, 278, 280, 281, 289, 290, 292, 293, 294, 299, 311, 312, 313, 316, 328, 329, 330, 332, 334, 335, 338, 341, 344, 345, 349, 354, 358, 362, 365, 380, 381, 382, 384, 385, 390, 391, 395, 398, 399, 403, 407, 409, 415, 418, 423, 424, 425, 427, 428, 432, 442, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "accessor": [11, 67, 84, 222, 270, 407, 463, 477, 479], "pycapsule_get": 11, "nonzero": [11, 23, 32, 58, 72, 103, 110, 113, 183, 188, 222, 266, 272, 275, 280, 297, 308, 316, 341, 349, 357, 361, 362, 424, 431, 451, 464, 477], "pycapsule_setcontext": [11, 56], "pycapsule_setdestructor": [11, 56], "pycapsule_setnam": [11, 56], "made": [11, 30, 32, 34, 42, 57, 58, 62, 65, 71, 84, 88, 89, 93, 96, 99, 100, 102, 103, 108, 110, 118, 131, 137, 155, 157, 164, 166, 173, 174, 180, 183, 188, 190, 193, 196, 197, 202, 205, 210, 227, 239, 240, 244, 247, 252, 255, 264, 265, 266, 272, 275, 278, 280, 290, 294, 296, 304, 305, 311, 316, 317, 318, 319, 321, 325, 328, 329, 330, 331, 332, 334, 338, 341, 345, 354, 358, 361, 365, 378, 385, 386, 390, 394, 396, 398, 403, 406, 409, 415, 416, 417, 421, 422, 423, 424, 432, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pycapsule_setpoint": [11, 56], "stack": [12, 23, 32, 34, 58, 67, 72, 74, 77, 89, 93, 99, 101, 113, 116, 120, 124, 133, 137, 138, 142, 154, 157, 166, 168, 174, 181, 182, 188, 190, 210, 211, 222, 223, 244, 251, 254, 264, 266, 294, 312, 313, 316, 319, 328, 330, 334, 338, 339, 341, 349, 361, 371, 384, 385, 386, 396, 423, 424, 425, 426, 431, 432, 439, 441, 451, 458, 459, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "frame": [12, 13, 16, 19, 23, 29, 32, 34, 48, 52, 65, 67, 77, 83, 93, 96, 101, 115, 137, 139, 140, 141, 142, 168, 174, 182, 188, 210, 211, 244, 252, 259, 264, 294, 312, 330, 333, 334, 338, 341, 346, 349, 364, 365, 370, 371, 372, 377, 381, 396, 397, 403, 423, 424, 425, 451, 459, 461, 462, 463, 465, 468, 470, 472, 473, 474, 476, 478, 479], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 29, 55, 66, 398, 469], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 468, 479], "low": [13, 16, 32, 37, 56, 59, 62, 63, 67, 74, 83, 96, 99, 103, 106, 124, 127, 128, 131, 133, 134, 135, 137, 144, 148, 161, 164, 166, 174, 175, 188, 210, 222, 251, 255, 257, 278, 281, 290, 293, 305, 315, 316, 325, 326, 327, 330, 332, 337, 338, 340, 341, 349, 352, 365, 382, 396, 398, 409, 411, 424, 452, 460, 461, 463, 464, 465, 470, 472, 474, 475, 477, 479], "detail": [13, 17, 18, 26, 33, 38, 41, 44, 53, 54, 56, 58, 60, 62, 63, 65, 67, 70, 71, 72, 75, 76, 78, 83, 84, 87, 89, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 116, 118, 120, 124, 131, 135, 137, 139, 142, 149, 150, 155, 166, 169, 170, 172, 173, 174, 178, 179, 183, 187, 188, 190, 191, 193, 198, 202, 204, 208, 210, 212, 222, 223, 227, 231, 232, 242, 243, 244, 247, 248, 252, 256, 259, 262, 264, 266, 267, 268, 269, 278, 280, 289, 290, 296, 297, 316, 319, 321, 328, 329, 332, 334, 335, 337, 339, 341, 342, 344, 345, 349, 350, 351, 352, 354, 355, 358, 360, 361, 365, 377, 381, 382, 384, 385, 390, 391, 395, 396, 398, 401, 403, 406, 409, 411, 415, 417, 418, 423, 424, 425, 426, 427, 428, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "execut": [13, 22, 23, 26, 27, 32, 33, 44, 48, 50, 52, 58, 65, 67, 71, 72, 74, 75, 76, 78, 83, 84, 88, 89, 92, 94, 96, 100, 101, 102, 103, 106, 108, 112, 113, 118, 120, 126, 131, 133, 135, 137, 138, 140, 142, 149, 153, 154, 155, 157, 160, 163, 166, 167, 173, 182, 184, 188, 189, 198, 210, 222, 223, 231, 242, 245, 247, 251, 252, 255, 263, 264, 265, 266, 269, 277, 278, 280, 281, 289, 290, 293, 294, 295, 296, 297, 298, 300, 305, 306, 310, 312, 317, 319, 322, 325, 327, 328, 329, 331, 334, 337, 339, 341, 343, 344, 345, 347, 349, 350, 354, 361, 362, 363, 364, 365, 367, 371, 374, 382, 384, 385, 386, 391, 394, 395, 396, 399, 401, 403, 416, 422, 423, 426, 427, 428, 429, 432, 437, 439, 446, 447, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "hasn": [13, 34, 78, 83, 84, 89, 108, 131, 133, 137, 187, 229, 294, 311, 331, 338, 352, 385, 386, 458, 459, 463, 464, 466, 474, 476, 479], "pycodeobject": [13, 26, 469, 479], "subject": [13, 38, 44, 54, 60, 62, 74, 83, 94, 99, 100, 107, 120, 164, 180, 188, 190, 193, 197, 199, 200, 202, 240, 244, 259, 264, 265, 266, 268, 285, 290, 304, 305, 327, 334, 338, 358, 362, 382, 422, 423, 424, 427, 431, 437, 463, 468, 470, 473, 479], "chang": [13, 17, 22, 23, 26, 27, 28, 32, 33, 34, 38, 44, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 65, 67, 71, 72, 74, 75, 76, 78, 87, 88, 91, 92, 93, 94, 96, 100, 102, 103, 106, 107, 108, 110, 111, 113, 118, 120, 137, 147, 148, 149, 153, 160, 163, 164, 166, 167, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 191, 193, 194, 198, 202, 203, 204, 205, 208, 209, 210, 213, 215, 219, 220, 222, 223, 231, 232, 240, 243, 244, 245, 247, 248, 252, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 272, 275, 278, 280, 281, 290, 293, 294, 296, 302, 305, 308, 310, 311, 316, 317, 318, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 349, 354, 357, 358, 360, 361, 362, 363, 365, 371, 372, 373, 374, 378, 379, 381, 382, 384, 385, 386, 390, 391, 396, 397, 401, 403, 406, 407, 408, 409, 412, 417, 418, 421, 422, 423, 424, 425, 428, 430, 431, 432, 437, 447, 451, 452, 457, 479, 480], "pycode_typ": 13, "pycode_check": 13, "co": [13, 30, 57, 65, 67, 75, 118, 163, 174, 253, 334, 358, 380, 462, 471, 476, 479], "pycode_getnumfre": 13, "pyunstable_code_new": [13, 470], "argcount": [13, 65, 140, 381, 477], "kwonlyargcount": [13, 140, 381, 479], "nlocal": [13, 140, 381], "stacksiz": [13, 140, 381, 479], "varnam": [13, 479], "freevar": [13, 479], "cellvar": [13, 222, 479], "filenam": [13, 23, 32, 33, 44, 58, 65, 67, 70, 76, 83, 84, 89, 94, 96, 99, 100, 103, 108, 110, 117, 118, 120, 140, 142, 147, 149, 153, 154, 155, 156, 157, 160, 164, 166, 172, 173, 181, 182, 184, 186, 187, 190, 193, 194, 197, 198, 202, 210, 211, 214, 215, 216, 220, 222, 227, 231, 240, 244, 247, 251, 252, 253, 262, 264, 265, 266, 267, 269, 276, 278, 280, 282, 283, 289, 290, 292, 293, 294, 296, 299, 305, 306, 308, 312, 316, 317, 327, 328, 329, 333, 337, 345, 348, 349, 354, 358, 365, 371, 374, 377, 378, 380, 381, 384, 386, 389, 391, 396, 399, 401, 402, 403, 407, 408, 409, 410, 417, 418, 424, 432, 434, 442, 447, 448, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "qualnam": [13, 19, 27, 29, 93, 99, 194, 208, 265, 479], "firstlineno": 13, "linet": 13, "exceptiont": 13, "unstabl": [13, 23, 26, 28, 38, 50, 56, 60, 74, 110, 183, 470, 477, 479], "warn": [13, 26, 27, 28, 31, 32, 33, 38, 50, 51, 56, 57, 58, 60, 67, 75, 84, 89, 96, 99, 100, 102, 110, 116, 123, 124, 133, 137, 178, 179, 184, 185, 210, 247, 251, 255, 265, 266, 269, 270, 280, 295, 305, 308, 312, 316, 330, 336, 337, 338, 345, 349, 354, 365, 369, 380, 382, 384, 393, 403, 410, 411, 412, 424, 425, 428, 431, 446, 447, 448, 451, 452, 458, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 473, 474, 477, 478, 479, 480], "minor": [13, 23, 26, 28, 32, 38, 50, 56, 60, 62, 65, 67, 76, 78, 83, 91, 100, 102, 107, 108, 116, 120, 174, 191, 200, 203, 282, 290, 300, 310, 349, 351, 411, 452, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479], "dummi": [13, 67, 72, 100, 112, 161, 173, 187, 227, 255, 290, 338, 354, 358, 361, 380, 403, 475, 479], "pycode_newempti": [13, 465], "definit": [13, 30, 32, 38, 44, 49, 57, 58, 63, 67, 72, 74, 75, 84, 86, 87, 89, 91, 93, 97, 98, 100, 103, 106, 110, 118, 141, 142, 148, 155, 158, 166, 173, 174, 178, 180, 208, 222, 223, 227, 229, 235, 244, 247, 248, 252, 253, 261, 264, 266, 278, 280, 281, 286, 289, 296, 305, 309, 310, 321, 332, 337, 341, 342, 349, 355, 360, 362, 373, 380, 381, 382, 383, 384, 391, 394, 398, 404, 405, 406, 407, 410, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 476, 477, 478, 479], "bytecod": [13, 30, 32, 65, 67, 83, 84, 86, 94, 96, 101, 103, 160, 184, 222, 247, 251, 252, 261, 297, 308, 321, 330, 348, 349, 378, 424, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 479, 480], "bind": [13, 43, 57, 60, 67, 84, 92, 100, 104, 124, 127, 140, 166, 168, 174, 190, 222, 227, 238, 242, 252, 263, 265, 291, 295, 311, 312, 317, 326, 332, 334, 335, 338, 348, 349, 358, 364, 367, 371, 372, 380, 405, 422, 423, 424, 426, 428, 429, 430, 432, 437, 455, 458, 459, 460, 462, 463, 464, 468, 472, 473, 474, 476, 479], "inter": [13, 187, 254, 257, 330, 382, 471, 479], "depend": [13, 18, 27, 32, 33, 44, 52, 62, 63, 67, 69, 71, 72, 74, 76, 78, 83, 84, 89, 91, 92, 93, 94, 98, 99, 100, 103, 105, 106, 108, 109, 112, 113, 120, 124, 131, 137, 142, 148, 149, 153, 155, 164, 166, 170, 173, 174, 178, 180, 183, 187, 188, 190, 192, 202, 205, 207, 208, 210, 212, 216, 218, 222, 227, 231, 239, 240, 241, 244, 247, 252, 253, 254, 255, 256, 258, 263, 264, 265, 266, 267, 268, 272, 276, 278, 280, 285, 290, 293, 296, 305, 306, 312, 316, 319, 325, 326, 327, 330, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 354, 355, 356, 357, 358, 360, 362, 363, 365, 372, 380, 382, 384, 385, 386, 391, 394, 395, 397, 398, 399, 401, 402, 403, 409, 411, 415, 417, 421, 423, 424, 425, 426, 428, 431, 432, 448, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479], "subtl": [13, 23, 62, 72, 190, 212, 289, 292, 305, 424, 425, 473, 479], "incorrect": [13, 96, 100, 103, 110, 141, 154, 181, 190, 210, 222, 241, 244, 252, 264, 268, 289, 290, 345, 362, 382, 384, 385, 386, 393, 407, 418, 424, 427, 459, 460, 461, 463, 466, 470, 471, 472, 473, 477, 478, 479], "vm": [13, 62, 83, 319, 472, 479], "crash": [13, 32, 42, 56, 62, 72, 74, 98, 120, 138, 149, 173, 181, 185, 211, 244, 247, 268, 280, 289, 294, 296, 349, 358, 452, 458, 463, 464, 470, 472, 473, 475, 479], "extrem": [13, 94, 98, 100, 106, 204, 259, 265, 290, 296, 315, 385, 406, 418, 426, 479], "care": [13, 23, 32, 34, 51, 62, 65, 67, 72, 74, 75, 83, 84, 89, 92, 93, 98, 99, 100, 102, 103, 106, 107, 112, 118, 120, 133, 142, 166, 173, 178, 180, 183, 188, 190, 193, 205, 208, 227, 247, 264, 265, 266, 268, 280, 289, 296, 305, 311, 316, 327, 330, 344, 345, 347, 349, 354, 384, 385, 386, 396, 404, 407, 409, 417, 424, 426, 444, 451, 457, 458, 462, 463, 464, 465, 466, 468, 470, 471, 473, 478, 479], "renam": [13, 41, 57, 62, 67, 75, 83, 100, 108, 110, 116, 140, 157, 210, 216, 220, 244, 245, 249, 253, 266, 268, 290, 293, 308, 325, 329, 339, 377, 384, 385, 417, 448, 458, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 474, 475, 479], "pycode_new": [13, 465, 469, 470, 477, 479], "deprec": [13, 23, 30, 32, 41, 48, 53, 55, 56, 57, 58, 60, 62, 63, 67, 88, 92, 108, 110, 118, 120, 124, 137, 147, 149, 155, 158, 170, 173, 183, 184, 195, 196, 202, 204, 210, 215, 220, 222, 231, 239, 240, 245, 247, 249, 252, 256, 264, 269, 272, 289, 290, 293, 295, 296, 301, 302, 311, 319, 321, 324, 325, 329, 332, 334, 338, 341, 343, 349, 354, 358, 361, 362, 365, 367, 380, 384, 391, 393, 396, 399, 409, 419, 424, 426, 428, 457, 459, 460, 463, 466, 479, 480], "until": [13, 30, 32, 33, 58, 62, 65, 71, 72, 75, 78, 83, 84, 87, 89, 91, 94, 99, 100, 103, 108, 113, 118, 120, 124, 127, 131, 132, 135, 136, 137, 141, 149, 151, 157, 174, 180, 183, 188, 204, 208, 211, 215, 222, 223, 227, 232, 239, 240, 244, 247, 255, 258, 262, 264, 266, 267, 280, 289, 290, 292, 294, 296, 302, 305, 313, 317, 322, 325, 326, 328, 330, 334, 335, 336, 337, 338, 341, 344, 345, 355, 357, 358, 361, 363, 365, 377, 380, 382, 385, 391, 396, 398, 399, 401, 403, 404, 408, 411, 412, 423, 424, 432, 448, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 478, 479], "signatur": [13, 17, 44, 57, 62, 67, 70, 84, 89, 92, 93, 98, 99, 100, 120, 124, 137, 143, 156, 157, 158, 166, 178, 180, 210, 213, 222, 223, 232, 244, 255, 264, 265, 289, 296, 310, 312, 329, 337, 338, 345, 349, 377, 380, 381, 382, 385, 386, 390, 409, 411, 415, 420, 424, 426, 436, 464, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480], "again": [13, 22, 27, 28, 32, 44, 62, 72, 74, 75, 83, 84, 91, 93, 94, 100, 103, 106, 107, 120, 131, 144, 149, 164, 167, 173, 174, 180, 185, 197, 209, 211, 218, 223, 229, 240, 244, 258, 264, 266, 272, 275, 279, 280, 289, 290, 292, 293, 294, 296, 305, 310, 325, 328, 330, 332, 337, 338, 341, 345, 349, 356, 358, 361, 365, 371, 372, 380, 383, 385, 386, 391, 396, 405, 409, 410, 423, 424, 426, 428, 431, 432, 437, 439, 457, 458, 460, 461, 464, 466, 471, 472, 476, 477, 479], "pyunstable_code_newwithposonlyarg": [13, 470], "posonlyargcount": [13, 140, 381, 477, 479], "caveat": [13, 60, 67, 113, 180, 189, 243, 247, 252, 305, 308, 385, 424, 432], "appli": [13, 18, 33, 51, 62, 63, 67, 72, 74, 87, 93, 94, 99, 100, 108, 110, 118, 120, 137, 139, 152, 155, 161, 166, 172, 173, 174, 175, 178, 180, 183, 184, 187, 188, 190, 195, 202, 205, 206, 210, 217, 220, 222, 223, 227, 232, 240, 241, 242, 244, 252, 256, 258, 264, 265, 267, 268, 269, 273, 280, 289, 290, 294, 296, 305, 311, 316, 318, 319, 321, 325, 329, 334, 338, 341, 342, 345, 349, 350, 354, 358, 361, 362, 363, 365, 372, 374, 378, 382, 383, 384, 385, 390, 396, 405, 407, 409, 415, 418, 422, 423, 424, 425, 426, 428, 432, 438, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 475, 476, 477, 478, 479], "pycode_newwithposonlyarg": [13, 469, 470, 477, 479], "funcnam": [13, 67, 71, 96, 142, 182, 264, 423, 436], "line": [13, 23, 24, 26, 32, 33, 63, 65, 67, 71, 72, 75, 83, 84, 88, 91, 93, 94, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 111, 112, 116, 117, 123, 134, 135, 140, 141, 142, 144, 147, 148, 149, 150, 152, 154, 155, 156, 157, 164, 166, 167, 172, 173, 174, 175, 180, 182, 183, 184, 185, 188, 189, 190, 192, 193, 196, 197, 198, 199, 201, 202, 204, 205, 208, 210, 211, 216, 219, 220, 222, 227, 237, 239, 242, 245, 247, 248, 251, 253, 255, 256, 258, 261, 264, 265, 266, 267, 268, 269, 275, 278, 279, 280, 282, 285, 293, 294, 295, 296, 298, 299, 302, 304, 305, 309, 310, 311, 312, 316, 318, 321, 324, 328, 329, 332, 338, 341, 342, 344, 345, 347, 348, 349, 350, 355, 359, 360, 363, 364, 365, 368, 371, 373, 377, 378, 380, 382, 383, 385, 386, 392, 395, 396, 399, 403, 407, 409, 412, 416, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 442, 444, 445, 447, 448, 449, 451, 452, 454, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480], "pycode_addr2lin": [13, 461, 468, 469, 475], "byte_offset": 13, "pyframe_getlinenumb": [13, 26, 56, 465, 468, 469, 475, 478], "effici": [13, 22, 25, 32, 48, 59, 62, 63, 67, 91, 94, 97, 104, 106, 124, 131, 149, 155, 180, 183, 188, 210, 213, 216, 217, 221, 223, 232, 248, 251, 280, 281, 290, 296, 297, 304, 315, 316, 325, 326, 338, 341, 344, 360, 361, 401, 403, 405, 409, 424, 460, 462, 464, 466, 470, 471, 472, 473, 474, 477, 478, 479], "iter": [13, 16, 22, 28, 29, 32, 35, 48, 53, 54, 62, 63, 66, 67, 74, 77, 86, 87, 92, 97, 103, 105, 110, 114, 119, 120, 124, 131, 134, 137, 142, 147, 148, 149, 155, 157, 158, 163, 164, 166, 167, 172, 173, 178, 179, 184, 188, 191, 192, 193, 194, 202, 208, 210, 216, 217, 221, 222, 223, 227, 228, 231, 232, 233, 239, 240, 248, 249, 250, 251, 252, 253, 255, 259, 263, 264, 267, 268, 270, 272, 280, 282, 285, 290, 293, 294, 296, 297, 301, 305, 315, 316, 325, 334, 337, 340, 342, 344, 349, 358, 374, 381, 382, 385, 390, 391, 398, 403, 406, 409, 410, 411, 415, 421, 423, 427, 428, 432, 437, 438, 439, 441, 446, 458, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "626": [13, 67, 188, 470, 479], "pycode_addr2loc": [13, 469, 479], "start_lin": [13, 424], "start_column": [13, 424], "end_lin": [13, 424], "end_column": [13, 424], "column": [13, 33, 62, 67, 84, 89, 96, 106, 116, 120, 148, 149, 153, 172, 174, 187, 188, 190, 210, 219, 222, 244, 252, 258, 259, 278, 290, 297, 305, 311, 316, 329, 337, 341, 344, 360, 364, 365, 374, 409, 412, 424, 451, 458, 465, 469, 474, 479], "particular": [13, 32, 44, 58, 62, 63, 65, 67, 71, 72, 74, 84, 86, 92, 94, 97, 98, 99, 103, 106, 107, 108, 112, 113, 118, 120, 137, 149, 155, 158, 164, 166, 172, 173, 174, 180, 190, 200, 205, 210, 240, 244, 245, 248, 252, 256, 259, 264, 265, 266, 268, 272, 273, 280, 281, 285, 289, 290, 294, 296, 299, 305, 316, 319, 325, 329, 330, 331, 332, 334, 335, 338, 339, 341, 342, 344, 345, 349, 351, 358, 360, 361, 365, 371, 372, 377, 382, 384, 385, 386, 390, 391, 396, 398, 406, 407, 409, 416, 422, 423, 424, 426, 427, 428, 430, 432, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 479], "pycode_getcod": [13, 469, 479], "getattr": [13, 67, 77, 84, 86, 87, 92, 99, 100, 114, 124, 157, 173, 178, 188, 222, 251, 252, 280, 288, 289, 296, 342, 354, 381, 382, 423, 436, 446, 458, 471, 473, 476, 479], "co_cod": [13, 252, 424, 469, 479], "demand": [13, 41, 63, 92, 164, 280, 289, 300, 385, 423, 457, 470, 474, 478, 479], "necessarili": [13, 23, 60, 62, 71, 75, 84, 98, 108, 113, 120, 174, 183, 190, 193, 202, 248, 268, 272, 280, 281, 290, 296, 316, 334, 337, 338, 341, 349, 362, 381, 385, 403, 406, 411, 421, 422, 432, 457, 461, 463, 464, 465, 479], "primari": [13, 67, 75, 84, 92, 93, 105, 112, 154, 166, 190, 191, 193, 202, 203, 215, 258, 264, 273, 278, 290, 296, 305, 331, 334, 337, 338, 342, 349, 374, 398, 415, 421, 427, 428, 429, 432, 448, 458, 459, 461, 462, 464, 465, 466, 471, 472, 473, 479], "debugg": [13, 31, 41, 56, 67, 72, 84, 182, 190, 210, 211, 222, 244, 251, 318, 349, 377, 384, 424, 436, 452, 457, 460, 461, 463, 464, 465, 470, 471, 475, 476, 477, 479], "profil": [13, 31, 33, 50, 67, 84, 95, 96, 155, 182, 251, 330, 338, 343, 349, 350, 361, 365, 401, 434, 447, 451, 452, 455, 459, 460, 462, 463, 464, 466, 468, 469, 470, 475, 477, 479], "pycode_getvarnam": [13, 469, 479], "co_varnam": [13, 188, 252, 424, 469, 479], "pytupleobject": [13, 53, 58, 59, 61], "pycode_getcellvar": [13, 469, 479], "co_cellvar": [13, 252, 424, 469, 479], "pycode_getfreevar": [13, 469, 479], "co_freevar": [13, 252, 424, 469, 479], "pycode_addwatch": [13, 470, 479], "pycode_watchcallback": 13, "regist": [13, 22, 27, 32, 33, 58, 60, 62, 67, 72, 75, 83, 84, 86, 89, 106, 107, 114, 118, 124, 126, 130, 131, 134, 138, 143, 155, 158, 161, 164, 166, 172, 182, 190, 194, 200, 205, 211, 222, 223, 247, 251, 253, 255, 264, 273, 280, 286, 290, 295, 296, 299, 312, 317, 325, 326, 329, 330, 334, 338, 341, 349, 358, 365, 372, 380, 382, 384, 391, 396, 398, 399, 402, 406, 409, 411, 416, 417, 423, 424, 426, 428, 457, 458, 459, 461, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479], "watcher": [13, 22, 27, 60, 62, 67, 74, 135, 470, 478, 479], "id": [13, 22, 27, 32, 44, 60, 67, 77, 86, 94, 96, 99, 100, 113, 115, 116, 120, 128, 131, 140, 151, 157, 174, 178, 184, 190, 193, 194, 197, 200, 202, 206, 222, 227, 230, 237, 251, 256, 258, 264, 265, 266, 267, 268, 269, 278, 280, 285, 290, 296, 300, 302, 304, 307, 311, 316, 319, 325, 326, 331, 334, 337, 338, 339, 345, 346, 352, 354, 361, 365, 372, 382, 384, 385, 386, 394, 397, 398, 409, 412, 424, 426, 427, 446, 459, 460, 462, 463, 464, 469, 470, 476, 477, 478, 479], "pycode_clearwatch": [13, 470, 479], "ids": [13, 22, 27, 60, 84, 227, 256, 265, 267, 280, 285, 290, 296, 300, 361, 372, 398, 462, 472, 479], "watcher_id": [13, 22, 27, 60], "clear": [13, 22, 27, 31, 32, 34, 44, 46, 57, 60, 62, 66, 67, 72, 74, 75, 79, 84, 89, 91, 94, 96, 98, 100, 102, 103, 106, 107, 116, 118, 124, 136, 153, 155, 157, 158, 161, 164, 166, 174, 179, 183, 188, 190, 191, 202, 213, 219, 220, 223, 240, 244, 247, 252, 253, 262, 264, 266, 268, 270, 273, 282, 289, 290, 294, 299, 316, 317, 329, 330, 334, 337, 341, 349, 354, 358, 361, 372, 377, 378, 380, 382, 384, 385, 386, 395, 396, 409, 419, 423, 424, 426, 438, 445, 452, 457, 458, 460, 461, 463, 464, 465, 470, 471, 472, 473, 475, 476, 478, 479], "identifi": [13, 22, 23, 27, 32, 41, 60, 63, 67, 72, 74, 75, 76, 84, 86, 89, 97, 99, 106, 107, 108, 113, 118, 120, 151, 157, 172, 173, 188, 190, 191, 193, 202, 209, 222, 227, 244, 245, 252, 256, 265, 266, 268, 278, 280, 285, 290, 294, 299, 305, 311, 316, 317, 320, 325, 332, 334, 338, 341, 342, 343, 348, 349, 351, 358, 361, 364, 365, 368, 382, 383, 384, 386, 390, 391, 394, 401, 403, 406, 409, 411, 412, 416, 422, 423, 424, 425, 428, 429, 432, 436, 439, 444, 457, 461, 462, 463, 464, 465, 466, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479], "pycodeev": 13, "enumer": [13, 22, 23, 27, 67, 77, 92, 94, 105, 106, 148, 161, 179, 222, 223, 251, 258, 280, 308, 341, 361, 378, 394, 401, 418, 437, 438, 446, 448, 457, 469, 470, 473, 475, 479, 480], "event": [13, 22, 24, 27, 30, 32, 41, 57, 58, 65, 67, 72, 80, 91, 96, 99, 113, 119, 121, 122, 123, 127, 128, 130, 131, 133, 134, 135, 137, 140, 142, 161, 173, 174, 180, 182, 186, 188, 219, 224, 251, 254, 257, 264, 266, 271, 278, 280, 290, 305, 311, 325, 326, 332, 338, 339, 347, 349, 354, 358, 364, 367, 381, 384, 391, 398, 406, 407, 408, 409, 410, 411, 412, 413, 422, 424, 426, 442, 448, 451, 457, 458, 463, 464, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "py_code_event_cr": 13, "py_code_event_destroy": 13, "destruct": [13, 32, 72, 74, 153, 174, 252, 255, 281, 341, 424, 459, 470, 471, 479], "place": [13, 22, 23, 27, 32, 33, 34, 37, 41, 44, 46, 51, 53, 57, 59, 60, 62, 63, 67, 72, 74, 75, 76, 78, 83, 86, 89, 92, 93, 94, 96, 98, 99, 100, 105, 107, 108, 110, 118, 120, 137, 149, 150, 155, 157, 164, 165, 166, 172, 173, 174, 178, 180, 183, 186, 187, 188, 190, 193, 202, 205, 208, 215, 221, 222, 223, 227, 229, 240, 244, 247, 255, 259, 264, 265, 266, 268, 272, 275, 280, 290, 293, 294, 296, 299, 305, 308, 311, 315, 316, 318, 321, 335, 337, 338, 341, 342, 345, 351, 360, 365, 371, 372, 376, 380, 381, 382, 384, 385, 386, 391, 393, 395, 403, 417, 418, 422, 423, 424, 426, 428, 432, 448, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 474, 475, 476, 477, 479], "prior": [13, 22, 27, 32, 44, 58, 84, 92, 99, 100, 120, 124, 141, 183, 208, 222, 223, 242, 248, 252, 264, 326, 329, 334, 337, 338, 340, 341, 345, 349, 352, 354, 358, 361, 382, 384, 398, 409, 418, 422, 423, 424, 426, 428, 431, 470, 473, 474, 475, 476, 477, 479], "inspect": [13, 22, 27, 32, 33, 65, 67, 72, 75, 86, 87, 89, 96, 100, 102, 118, 120, 127, 137, 158, 172, 178, 190, 222, 232, 247, 248, 251, 256, 264, 268, 294, 299, 304, 310, 312, 329, 330, 331, 338, 341, 349, 354, 358, 367, 378, 382, 384, 385, 391, 418, 423, 424, 451, 458, 459, 460, 464, 465, 479], "resurrect": [13, 22, 27, 349, 358, 361, 424, 471, 478, 479], "prevent": [13, 22, 23, 27, 32, 34, 41, 57, 60, 67, 72, 74, 75, 83, 84, 91, 92, 98, 99, 100, 106, 107, 108, 124, 137, 155, 164, 166, 167, 173, 178, 183, 185, 187, 190, 203, 210, 222, 223, 244, 247, 256, 259, 265, 266, 268, 269, 273, 280, 285, 289, 290, 293, 302, 308, 332, 334, 338, 345, 349, 354, 358, 365, 377, 380, 382, 384, 385, 386, 396, 398, 405, 418, 424, 426, 428, 451, 457, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 477, 478, 479], "later": [13, 22, 23, 24, 27, 32, 33, 41, 44, 60, 71, 72, 74, 75, 83, 89, 91, 94, 99, 100, 103, 107, 108, 112, 118, 123, 124, 136, 137, 138, 139, 147, 149, 150, 152, 153, 155, 164, 166, 173, 174, 180, 188, 193, 199, 202, 227, 232, 240, 244, 247, 252, 255, 258, 262, 263, 265, 267, 276, 280, 289, 290, 296, 316, 322, 325, 328, 330, 334, 337, 338, 349, 354, 358, 377, 382, 384, 385, 386, 391, 396, 397, 398, 417, 422, 423, 424, 426, 428, 432, 451, 452, 457, 458, 459, 460, 461, 464, 465, 466, 470, 471, 473, 474, 476, 478, 479], "activ": [13, 22, 23, 27, 32, 48, 58, 62, 65, 71, 84, 91, 102, 103, 108, 124, 130, 136, 137, 142, 149, 150, 157, 166, 174, 183, 207, 210, 215, 220, 222, 240, 244, 248, 269, 280, 285, 289, 292, 294, 302, 305, 311, 325, 331, 335, 337, 338, 341, 345, 349, 361, 362, 365, 372, 380, 381, 385, 386, 395, 407, 408, 411, 432, 437, 449, 451, 457, 458, 460, 461, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479], "user": [13, 23, 28, 32, 33, 34, 38, 41, 60, 62, 63, 65, 67, 71, 72, 73, 75, 78, 83, 84, 85, 89, 92, 93, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 112, 116, 118, 124, 131, 133, 137, 140, 142, 149, 152, 153, 154, 155, 156, 157, 158, 160, 164, 166, 170, 172, 174, 176, 178, 180, 182, 183, 184, 186, 190, 197, 207, 208, 209, 210, 213, 220, 223, 225, 226, 227, 230, 232, 239, 240, 242, 245, 247, 248, 251, 252, 253, 254, 255, 259, 263, 264, 266, 268, 269, 272, 278, 280, 285, 289, 290, 291, 292, 293, 294, 296, 297, 302, 308, 309, 316, 317, 319, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 344, 345, 349, 351, 352, 354, 355, 356, 358, 361, 362, 365, 366, 369, 371, 372, 376, 377, 380, 381, 384, 386, 390, 391, 392, 395, 396, 399, 401, 403, 407, 408, 409, 410, 411, 415, 417, 418, 421, 422, 423, 424, 425, 426, 428, 432, 434, 437, 449, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "reli": [13, 50, 51, 72, 75, 87, 92, 93, 98, 100, 102, 131, 138, 149, 158, 178, 180, 222, 247, 252, 264, 273, 280, 289, 290, 296, 299, 327, 329, 341, 349, 358, 360, 361, 362, 384, 386, 395, 423, 424, 425, 428, 457, 458, 461, 462, 463, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "runtim": [13, 24, 27, 32, 34, 41, 50, 51, 58, 65, 67, 72, 74, 75, 76, 84, 86, 87, 89, 98, 99, 106, 108, 111, 138, 140, 160, 164, 173, 179, 185, 188, 210, 222, 247, 251, 254, 265, 266, 289, 308, 337, 341, 345, 349, 350, 365, 378, 382, 385, 396, 400, 407, 417, 420, 423, 424, 425, 428, 432, 436, 451, 452, 457, 459, 461, 465, 466, 468, 470, 472, 473, 474, 475, 478, 479], "limit": [13, 23, 26, 32, 33, 34, 38, 56, 57, 58, 60, 62, 63, 67, 74, 84, 89, 91, 93, 94, 96, 100, 103, 110, 117, 118, 120, 124, 130, 131, 134, 135, 137, 140, 147, 155, 160, 166, 170, 172, 181, 183, 188, 198, 204, 205, 208, 211, 212, 222, 223, 232, 244, 245, 251, 254, 258, 265, 267, 273, 279, 280, 281, 282, 289, 290, 292, 296, 304, 305, 309, 311, 316, 318, 321, 327, 330, 331, 334, 337, 338, 340, 342, 345, 349, 354, 358, 361, 369, 371, 377, 378, 380, 385, 387, 401, 403, 406, 409, 417, 422, 424, 425, 426, 428, 430, 431, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "creation": [13, 16, 27, 32, 57, 58, 62, 67, 72, 75, 84, 92, 93, 94, 99, 100, 116, 118, 131, 133, 135, 137, 147, 178, 179, 183, 189, 194, 208, 222, 223, 227, 245, 247, 251, 252, 253, 255, 264, 267, 268, 278, 280, 281, 285, 289, 302, 308, 318, 319, 328, 329, 332, 339, 341, 342, 345, 354, 356, 358, 365, 371, 385, 398, 406, 409, 417, 422, 423, 425, 428, 461, 470, 472, 473, 474, 476, 478, 479], "observ": [13, 27, 84, 93, 96, 100, 180, 205, 315, 340, 345, 378, 380, 390, 432, 460, 472, 479], "print": [13, 22, 27, 31, 32, 33, 41, 48, 58, 62, 67, 71, 72, 74, 75, 77, 78, 83, 84, 85, 86, 87, 88, 89, 93, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 110, 111, 112, 113, 116, 120, 121, 123, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 148, 149, 153, 154, 156, 157, 160, 163, 164, 166, 167, 169, 172, 173, 174, 178, 180, 181, 183, 185, 187, 188, 190, 193, 197, 198, 201, 202, 208, 210, 211, 213, 217, 222, 223, 225, 227, 229, 232, 237, 239, 241, 242, 244, 245, 247, 248, 251, 252, 255, 258, 259, 264, 266, 268, 275, 276, 279, 280, 285, 290, 293, 294, 296, 297, 298, 301, 302, 304, 305, 306, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 326, 328, 330, 331, 332, 334, 335, 337, 338, 339, 341, 342, 345, 347, 349, 351, 353, 354, 355, 356, 358, 360, 361, 363, 365, 371, 372, 374, 376, 378, 380, 382, 384, 385, 391, 393, 395, 396, 398, 401, 403, 404, 407, 408, 409, 412, 413, 415, 416, 417, 418, 421, 423, 424, 425, 426, 431, 432, 436, 437, 438, 439, 442, 444, 445, 446, 447, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "unrais": [13, 22, 23, 27, 140, 337, 349, 358, 469, 477, 479], "pyerr_writeunrais": [13, 22, 23, 27, 56, 74, 479], "pend": [13, 22, 23, 27, 32, 38, 67, 74, 110, 124, 131, 137, 163, 255, 268, 278, 302, 325, 330, 337, 338, 426, 471, 472, 473, 475, 478, 479], "save": [13, 22, 23, 27, 32, 41, 62, 67, 71, 72, 74, 84, 89, 92, 93, 94, 98, 99, 100, 103, 108, 118, 137, 138, 147, 149, 150, 153, 164, 166, 174, 180, 184, 197, 206, 223, 240, 244, 253, 258, 263, 266, 267, 268, 289, 290, 296, 305, 310, 316, 317, 331, 337, 349, 358, 361, 362, 364, 365, 377, 379, 380, 396, 401, 415, 421, 423, 424, 460, 462, 463, 464, 465, 466, 467, 470, 471, 473, 476, 478, 479], "restor": [13, 17, 22, 23, 27, 32, 62, 67, 74, 89, 91, 100, 130, 155, 166, 167, 168, 174, 183, 184, 187, 188, 240, 244, 252, 263, 289, 296, 298, 316, 317, 321, 337, 345, 349, 354, 357, 358, 359, 361, 372, 380, 382, 384, 385, 386, 396, 401, 424, 458, 460, 461, 463, 464, 470, 473, 476, 478, 479], "evalu": [13, 22, 32, 51, 55, 65, 67, 72, 84, 87, 89, 93, 94, 101, 111, 120, 142, 222, 227, 258, 264, 265, 272, 280, 290, 294, 320, 321, 341, 349, 361, 365, 382, 390, 398, 423, 424, 429, 431, 432, 442, 445, 452, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 477, 478, 479], "extern": [13, 34, 50, 67, 72, 78, 83, 84, 89, 92, 98, 100, 105, 116, 119, 120, 149, 155, 164, 173, 181, 194, 213, 244, 247, 252, 254, 264, 269, 290, 295, 308, 311, 335, 341, 344, 345, 354, 358, 361, 365, 380, 384, 403, 404, 405, 406, 408, 409, 410, 411, 412, 418, 424, 426, 457, 464, 466, 467, 471, 474, 475, 476, 477, 478, 479], "compil": [13, 30, 32, 33, 41, 44, 57, 58, 62, 65, 67, 73, 75, 76, 78, 83, 84, 85, 89, 94, 100, 101, 106, 110, 111, 140, 154, 164, 173, 177, 179, 181, 188, 190, 210, 217, 222, 227, 232, 239, 244, 245, 247, 249, 251, 252, 261, 265, 267, 271, 305, 311, 316, 317, 321, 328, 337, 338, 341, 342, 344, 349, 351, 355, 358, 359, 363, 377, 381, 382, 383, 384, 396, 406, 418, 422, 424, 425, 428, 430, 431, 432, 436, 446, 451, 454, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "attach": [13, 32, 44, 67, 71, 98, 99, 100, 118, 124, 130, 180, 184, 190, 191, 193, 194, 196, 200, 202, 203, 204, 209, 244, 264, 265, 281, 282, 325, 326, 337, 349, 365, 371, 384, 386, 403, 421, 422, 423, 424, 432, 459, 461, 465, 466, 472, 475, 477, 479], "tier": [13, 56, 469, 470, 479], "pyunstable_eval_requestcodeextraindex": [13, 470], "freefunc": [13, 44, 62, 74], "adding": [13, 22, 32, 46, 56, 60, 67, 72, 73, 76, 83, 84, 91, 92, 94, 98, 102, 103, 107, 108, 120, 139, 149, 178, 183, 192, 193, 194, 202, 203, 204, 240, 244, 259, 264, 268, 290, 316, 337, 341, 347, 361, 372, 382, 384, 385, 391, 398, 403, 409, 418, 419, 424, 426, 428, 431, 432, 451, 457, 458, 460, 461, 462, 463, 464, 466, 470, 471, 473, 474, 476, 477, 478, 479, 480], "pycode_getextra": 13, "pycode_setextra": 13, "py_decref": [13, 22, 23, 28, 34, 35, 44, 51, 56, 62, 71, 72, 74, 75, 78, 86, 468, 470, 477, 479], "_pyeval_requestcodeextraindex": [13, 470], "privat": [13, 31, 32, 41, 42, 56, 67, 84, 92, 93, 94, 173, 178, 187, 220, 222, 244, 245, 247, 256, 275, 280, 296, 302, 332, 338, 343, 345, 358, 382, 385, 426, 431, 432, 436, 457, 459, 460, 461, 464, 470, 471, 472, 473, 474, 475, 477, 479], "pyunstable_code_getextra": [13, 470], "_pycode_getextra": [13, 470, 479], "pyunstable_code_setextra": [13, 470], "_pycode_setextra": [13, 470, 479], "pycodec_regist": [14, 56], "search_funct": [14, 155], "pycodec_unregist": [14, 56, 468, 479], "registri": [14, 23, 33, 63, 67, 143, 164, 172, 192, 194, 200, 223, 247, 251, 256, 266, 273, 296, 300, 338, 349, 350, 382, 391, 396, 400, 402, 409, 454, 458, 464, 465, 475, 478, 479], "pycodec_knownencod": [14, 56], "pycodec_encod": [14, 56], "lookuperror": [14, 23, 63, 67, 155, 167, 210, 341, 446, 473], "pycodec_decod": [14, 56], "keyerror": [14, 22, 23, 34, 54, 67, 77, 84, 157, 164, 167, 181, 193, 194, 202, 208, 210, 230, 233, 240, 247, 258, 268, 293, 307, 325, 326, 327, 336, 341, 342, 351, 354, 381, 382, 383, 385, 386, 418, 421, 424, 428, 446, 448, 461, 462, 465, 472, 475, 477, 479], "pycodec_incrementalencod": [14, 56], "incrementalencod": [14, 67, 143, 463], "pycodec_incrementaldecod": [14, 56], "incrementaldecod": [14, 67, 143, 255, 463], "pycodec_streamread": [14, 56], "stream": [14, 32, 33, 40, 67, 83, 86, 94, 99, 104, 106, 116, 124, 134, 135, 137, 143, 144, 147, 154, 166, 174, 191, 197, 198, 203, 204, 209, 210, 216, 222, 226, 231, 239, 242, 244, 246, 249, 251, 258, 259, 264, 265, 266, 267, 273, 278, 290, 295, 297, 304, 305, 311, 325, 326, 328, 329, 330, 331, 333, 334, 335, 345, 346, 349, 354, 358, 374, 382, 384, 391, 395, 397, 403, 404, 405, 408, 409, 412, 413, 415, 418, 424, 426, 430, 431, 451, 458, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 479], "streamread": [14, 67, 122, 124, 135, 143, 462, 463, 474, 475, 479], "pycodec_streamwrit": [14, 56], "streamwrit": [14, 67, 122, 124, 135, 143, 463, 469, 476, 479], "pycodec_registererror": [14, 56], "unicodeencodeerror": [14, 23, 44, 67, 70, 106, 155, 210, 349, 390, 446, 469, 471, 477, 479], "unicodedecodeerror": [14, 23, 67, 106, 155, 210, 290, 390, 446, 463, 466, 471, 473, 477, 479], "unicodetranslateerror": [14, 23, 67, 155, 210, 446, 479], "pycodec_lookuperror": [14, 56], "strict": [14, 33, 62, 63, 67, 72, 93, 94, 97, 100, 105, 106, 108, 118, 131, 141, 155, 164, 172, 173, 178, 179, 180, 183, 191, 199, 204, 205, 208, 214, 215, 222, 237, 239, 240, 241, 245, 249, 252, 255, 256, 258, 259, 272, 273, 282, 290, 291, 292, 293, 296, 338, 341, 349, 358, 362, 390, 391, 406, 422, 423, 424, 425, 426, 428, 431, 452, 458, 459, 461, 463, 464, 465, 468, 470, 471, 472, 473, 474, 476, 479], "pycodec_stricterror": [14, 56], "exc": [14, 23, 32, 46, 110, 120, 131, 137, 163, 166, 210, 377, 384, 386, 424, 432, 439, 464, 466, 468, 470, 472, 479], "pycodec_ignoreerror": [14, 56], "pycodec_replaceerror": [14, 56], "fffd": [14, 106, 155, 458], "pycodec_xmlcharrefreplaceerror": [14, 56], "xml": [14, 67, 79, 94, 103, 106, 155, 222, 251, 253, 255, 270, 301, 324, 391, 414, 447, 448, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 475, 479, 480], "pycodec_backslashreplaceerror": [14, 56], "pycodec_namereplaceerror": [14, 56, 474], "derefer": [15, 56, 280, 354, 479], "real": [15, 34, 37, 46, 58, 67, 71, 75, 84, 86, 92, 100, 107, 108, 142, 151, 152, 154, 166, 173, 188, 190, 197, 202, 210, 222, 223, 245, 247, 259, 285, 286, 287, 290, 305, 316, 319, 321, 328, 330, 331, 337, 338, 340, 341, 342, 349, 350, 362, 365, 384, 385, 386, 409, 423, 424, 427, 431, 436, 457, 463, 464, 465, 470, 471, 472, 475, 479], "_py_c_sum": 15, "_py_c_diff": 15, "_py_c_neg": 15, "num": [15, 100, 120, 155, 174, 183, 223, 227, 237, 245, 280, 289, 297, 338, 342, 382, 437, 438, 464, 465, 470, 477, 479], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 183], "divisor": [15, 183, 272, 445], "errno": [15, 23, 34, 50, 67, 72, 83, 116, 131, 140, 173, 185, 210, 212, 247, 251, 290, 311, 325, 330, 334, 338, 349, 358, 439, 464, 469, 472, 474, 476, 479], "edom": [15, 67, 116, 209], "_py_c_pow": 15, "exp": [15, 67, 152, 183, 222, 272, 287, 315, 342, 464, 465, 472, 479], "pycomplexobject": 15, "pycomplex_typ": [15, 56], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 56], "pycomplex_realasdoubl": [15, 56], "pycomplex_imagasdoubl": [15, 56], "pycomplex_asccomplex": [15, 464], "__complex__": [15, 67, 152, 222, 259, 382, 385, 424, 464, 469, 473, 476, 477, 479], "__float__": [15, 25, 62, 67, 152, 222, 382, 385, 424, 468, 476, 477, 479], "__index__": [15, 25, 38, 62, 67, 221, 222, 288, 341, 344, 382, 385, 424, 464, 465, 466, 468, 469, 473, 476, 477, 479, 480], "pydict_check": [16, 22], "tree": [16, 32, 33, 62, 67, 77, 83, 84, 89, 94, 108, 110, 149, 160, 171, 187, 191, 193, 201, 202, 204, 213, 244, 251, 261, 270, 290, 293, 308, 309, 329, 339, 341, 349, 353, 356, 364, 365, 371, 372, 380, 395, 405, 406, 407, 424, 427, 448, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 472, 474, 475, 477, 478, 479], "singleton": [16, 20, 32, 44, 45, 48, 55, 57, 62, 72, 84, 86, 93, 100, 120, 180, 271, 296, 341, 385, 415, 423, 424, 426, 437, 438, 452, 459, 469, 475, 476, 479], "heap": [16, 31, 34, 41, 49, 57, 67, 72, 74, 75, 89, 179, 211, 251, 279, 319, 380, 448, 461, 462, 464, 465, 468, 469, 470, 477, 478, 479], "pack": [16, 67, 100, 139, 143, 173, 212, 222, 231, 244, 251, 253, 256, 265, 266, 268, 281, 282, 290, 300, 334, 341, 365, 370, 372, 404, 417, 424, 438, 448, 463, 465, 469, 471, 479], "unpack": [16, 67, 72, 83, 89, 94, 100, 108, 110, 120, 143, 157, 184, 188, 197, 212, 222, 280, 301, 329, 334, 341, 342, 344, 347, 381, 382, 385, 423, 426, 427, 432, 438, 439, 441, 448, 458, 462, 463, 464, 466, 468, 469, 470, 471, 473, 477, 479], "properti": [16, 57, 62, 67, 84, 86, 93, 94, 97, 99, 103, 114, 120, 148, 155, 157, 167, 172, 173, 174, 178, 179, 183, 190, 192, 193, 200, 202, 205, 208, 216, 218, 222, 223, 227, 232, 238, 248, 251, 252, 254, 255, 256, 259, 263, 268, 278, 280, 301, 328, 332, 338, 341, 343, 344, 349, 361, 374, 378, 380, 381, 382, 383, 384, 385, 391, 398, 401, 406, 407, 410, 411, 412, 418, 422, 423, 424, 431, 432, 446, 457, 458, 460, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "codec": [16, 33, 67, 86, 102, 106, 143, 192, 198, 199, 210, 222, 251, 255, 290, 332, 341, 359, 418, 444, 447, 457, 458, 460, 462, 463, 466, 469, 474, 475, 477, 478, 479, 480], "escap": [16, 41, 48, 58, 67, 72, 77, 84, 91, 100, 103, 106, 118, 124, 135, 155, 164, 172, 174, 175, 187, 205, 216, 219, 222, 228, 235, 244, 247, 255, 259, 270, 285, 316, 318, 328, 341, 342, 345, 359, 362, 380, 382, 390, 413, 415, 424, 431, 445, 458, 459, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "latin": [16, 67, 103, 106, 118, 134, 155, 192, 220, 236, 316, 328, 354, 383, 426, 460, 461, 464, 467, 471, 474, 475, 476, 478, 479], "ascii": [16, 23, 30, 33, 41, 48, 57, 67, 70, 91, 99, 100, 103, 104, 106, 107, 116, 118, 120, 131, 135, 141, 143, 149, 155, 173, 174, 180, 188, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 211, 222, 227, 234, 245, 251, 253, 255, 259, 263, 269, 279, 282, 283, 285, 290, 296, 311, 314, 316, 328, 332, 335, 337, 338, 341, 342, 343, 346, 354, 355, 358, 359, 391, 393, 409, 415, 418, 422, 430, 431, 437, 442, 444, 446, 451, 458, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479], "mbcs": [16, 32, 33, 67, 143, 349, 451, 457, 460, 461, 471, 472, 475, 479], "window": [16, 23, 32, 33, 34, 41, 56, 58, 62, 65, 67, 69, 70, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86, 89, 99, 100, 102, 104, 106, 107, 109, 113, 116, 118, 124, 130, 131, 135, 143, 149, 153, 161, 163, 164, 173, 176, 210, 211, 219, 222, 226, 228, 240, 247, 251, 255, 258, 263, 266, 269, 272, 273, 275, 278, 279, 280, 289, 290, 291, 293, 303, 313, 325, 326, 328, 329, 330, 331, 332, 334, 337, 338, 339, 349, 350, 351, 354, 356, 357, 358, 361, 362, 364, 366, 367, 368, 371, 372, 374, 384, 391, 393, 395, 399, 403, 417, 418, 421, 422, 424, 431, 434, 435, 437, 442, 444, 446, 449, 451, 452, 454, 458, 459, 460, 462, 463, 466, 467, 468, 470, 471, 473, 474, 477, 478, 480], "cell": [16, 27, 65, 67, 84, 91, 92, 116, 173, 188, 223, 251, 252, 372, 381, 424, 464, 469, 479], "phase": [16, 31, 32, 67, 70, 72, 98, 136, 152, 224, 247, 287, 338, 372, 427, 428, 432, 464, 468, 471, 472, 479], "lookup": [16, 17, 22, 30, 60, 62, 67, 76, 84, 93, 120, 143, 145, 155, 157, 178, 188, 192, 200, 208, 210, 222, 223, 227, 242, 252, 256, 261, 266, 284, 290, 341, 342, 348, 349, 359, 364, 365, 372, 377, 383, 385, 421, 423, 428, 458, 460, 462, 463, 464, 470, 471, 472, 473, 475, 477, 478, 479], "descriptor": [16, 23, 24, 30, 32, 48, 60, 62, 67, 74, 77, 80, 83, 86, 93, 96, 114, 116, 123, 128, 129, 130, 131, 173, 174, 182, 184, 209, 212, 215, 222, 223, 232, 245, 252, 254, 255, 265, 275, 279, 280, 292, 306, 309, 312, 319, 325, 326, 329, 330, 334, 335, 338, 341, 345, 354, 355, 357, 358, 365, 379, 381, 423, 426, 432, 462, 463, 464, 465, 468, 469, 470, 471, 472, 474, 476, 478, 479], "ellipsi": [16, 62, 67, 86, 120, 165, 184, 190, 251, 261, 271, 304, 373, 374, 381, 382, 424, 427, 431, 446, 462, 466, 470, 477, 479], "capsul": [16, 67, 72, 94, 466, 479], "generat": [16, 26, 30, 32, 48, 50, 57, 63, 65, 67, 70, 71, 72, 74, 76, 78, 84, 86, 96, 99, 100, 101, 106, 108, 110, 111, 118, 120, 124, 128, 132, 133, 135, 137, 139, 140, 141, 142, 148, 149, 153, 155, 158, 160, 163, 166, 170, 172, 174, 178, 179, 180, 184, 187, 188, 190, 191, 193, 200, 202, 205, 206, 208, 210, 214, 222, 224, 227, 232, 239, 241, 242, 245, 251, 258, 261, 264, 266, 268, 272, 278, 280, 281, 282, 290, 293, 296, 304, 308, 311, 312, 315, 316, 318, 320, 323, 328, 332, 337, 343, 345, 347, 349, 354, 362, 365, 372, 373, 374, 376, 377, 380, 381, 382, 384, 390, 391, 394, 398, 403, 405, 406, 409, 413, 415, 416, 417, 422, 423, 424, 425, 427, 428, 430, 431, 432, 441, 451, 452, 457, 458, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480], "coroutin": [16, 26, 67, 86, 94, 121, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 135, 136, 158, 166, 179, 183, 184, 185, 188, 210, 312, 341, 349, 382, 384, 385, 426, 452, 463, 469, 470, 475, 476, 477, 478, 479], "datetim": [16, 67, 84, 93, 100, 124, 131, 135, 137, 148, 179, 187, 191, 200, 206, 208, 245, 251, 253, 266, 282, 285, 296, 301, 337, 338, 342, 362, 375, 381, 386, 415, 416, 421, 431, 447, 461, 462, 463, 464, 465, 468, 470, 474, 479], "pycontext": 17, "pycontextvar": [17, 479], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 34, 180, 185, 223, 264, 266, 280, 290, 299, 329, 382, 452, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "34762": [17, 476, 479], "public": [17, 26, 28, 32, 33, 54, 56, 62, 67, 83, 92, 104, 107, 124, 153, 172, 173, 187, 201, 208, 219, 220, 232, 237, 240, 247, 248, 252, 256, 261, 280, 289, 311, 328, 334, 338, 342, 348, 349, 354, 358, 360, 363, 382, 383, 384, 391, 404, 406, 409, 412, 422, 431, 432, 436, 458, 459, 461, 462, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "contextvar": [17, 67, 86, 124, 127, 133, 137, 161, 183, 251, 452, 479], "token": [17, 65, 67, 83, 114, 120, 161, 167, 171, 219, 247, 251, 261, 262, 278, 283, 301, 311, 315, 328, 345, 353, 359, 391, 423, 427, 429, 430, 439, 443, 465, 466, 471, 475, 476, 479], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 41, 100, 120, 167, 183, 280, 338, 464], "shallow": [17, 32, 67, 157, 167, 178, 179, 190, 213, 241, 251, 252, 296, 341, 354, 381, 438, 479], "pycontext_copycurr": 17, "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 89, 349, 365, 395, 424, 449, 457, 470, 479], "pycontextvar_new": 17, "introspect": [17, 67, 74, 84, 86, 89, 92, 167, 184, 188, 210, 223, 247, 296, 312, 365, 381, 385, 415, 416, 424, 428, 466, 468, 469, 470, 471, 472, 473, 474, 479], "debug": [17, 31, 32, 33, 48, 62, 65, 67, 74, 75, 84, 91, 96, 99, 100, 101, 102, 116, 117, 120, 123, 133, 142, 150, 167, 173, 183, 184, 185, 188, 193, 201, 202, 208, 210, 219, 239, 245, 253, 264, 265, 266, 276, 285, 289, 290, 294, 298, 302, 316, 328, 332, 337, 338, 341, 347, 349, 354, 355, 356, 358, 359, 364, 365, 371, 378, 382, 384, 385, 396, 409, 415, 418, 424, 425, 431, 432, 442, 448, 451, 453, 454, 457, 458, 459, 460, 461, 463, 464, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479], "pycontextvar_get": 17, "var": [17, 67, 77, 84, 86, 87, 92, 93, 100, 118, 120, 157, 161, 164, 167, 222, 251, 266, 341, 351, 356, 382, 385, 427, 437, 442, 446, 462, 463, 464, 465, 466, 468, 471, 479], "default_valu": [17, 89], "dure": [17, 18, 22, 23, 28, 32, 33, 44, 50, 51, 57, 62, 63, 67, 76, 84, 89, 92, 93, 100, 102, 120, 131, 137, 138, 149, 155, 164, 173, 174, 178, 180, 183, 188, 190, 195, 198, 199, 200, 205, 208, 210, 215, 223, 232, 247, 248, 255, 259, 264, 265, 266, 267, 268, 278, 285, 290, 293, 296, 305, 310, 311, 316, 317, 320, 329, 330, 331, 332, 337, 338, 341, 349, 356, 357, 358, 362, 363, 372, 376, 378, 380, 381, 382, 384, 385, 386, 396, 398, 409, 410, 411, 412, 418, 421, 423, 424, 426, 428, 431, 432, 439, 440, 451, 457, 458, 461, 462, 463, 464, 465, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 32, 58, 67, 84, 93, 94, 107, 136, 142, 143, 153, 154, 155, 157, 161, 167, 174, 182, 183, 187, 195, 203, 209, 210, 211, 215, 219, 237, 242, 244, 247, 264, 270, 280, 290, 292, 298, 323, 325, 330, 334, 338, 341, 347, 352, 354, 358, 361, 362, 371, 376, 380, 384, 385, 396, 404, 408, 409, 412, 421, 423, 431, 460, 464, 471, 472, 473, 474, 479], "pyos_snprintf": [18, 56, 460], "unix": [18, 23, 32, 33, 34, 58, 65, 67, 72, 73, 79, 80, 82, 86, 91, 94, 99, 104, 106, 113, 116, 118, 122, 128, 129, 130, 131, 134, 135, 144, 148, 157, 164, 171, 172, 174, 187, 193, 196, 198, 205, 212, 216, 222, 225, 226, 227, 230, 240, 244, 251, 254, 255, 258, 263, 266, 268, 269, 275, 280, 283, 284, 285, 289, 290, 291, 292, 293, 295, 298, 302, 303, 306, 307, 310, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 345, 347, 349, 350, 354, 356, 357, 358, 361, 362, 365, 371, 379, 384, 399, 403, 417, 418, 431, 434, 435, 442, 444, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479], "man": [18, 91, 124, 170, 268, 290, 310, 319, 325, 330, 334, 339, 362, 365, 371, 465, 479], "page": [18, 63, 67, 83, 86, 91, 94, 99, 100, 107, 108, 113, 118, 124, 131, 134, 148, 155, 163, 166, 170, 174, 187, 208, 212, 244, 248, 251, 255, 263, 264, 265, 266, 268, 275, 281, 290, 301, 310, 311, 319, 325, 330, 334, 337, 339, 344, 347, 352, 357, 358, 361, 362, 365, 371, 380, 391, 399, 403, 409, 416, 418, 422, 430, 436, 447, 449, 451, 457, 458, 460, 462, 463, 464, 465, 471, 472, 475, 476, 477, 479], "snprintf": [18, 460, 468, 479], "pyos_vsnprintf": [18, 56, 460], "va": [18, 422], "vsnprintf": [18, 460, 468, 479], "behavior": [18, 22, 23, 27, 28, 32, 33, 34, 41, 57, 60, 62, 67, 72, 78, 84, 89, 91, 92, 93, 98, 99, 100, 112, 117, 118, 124, 130, 137, 147, 154, 164, 170, 172, 173, 174, 178, 180, 183, 187, 190, 191, 193, 198, 200, 202, 203, 205, 208, 210, 212, 215, 222, 231, 239, 242, 244, 247, 252, 254, 255, 258, 259, 263, 264, 266, 267, 268, 272, 273, 280, 281, 285, 289, 290, 293, 296, 299, 306, 311, 325, 328, 329, 330, 331, 332, 334, 335, 338, 340, 341, 342, 344, 345, 349, 354, 356, 358, 361, 362, 363, 365, 370, 372, 374, 377, 382, 384, 390, 391, 396, 403, 406, 421, 423, 424, 425, 426, 428, 431, 432, 451, 452, 457, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 478, 479, 480], "corner": [18, 62, 91, 174, 380, 403, 460, 463, 464, 469, 479], "upon": [18, 25, 32, 40, 63, 65, 71, 72, 84, 92, 99, 138, 142, 149, 153, 155, 156, 166, 170, 172, 174, 183, 185, 186, 190, 239, 241, 244, 245, 247, 268, 281, 290, 294, 296, 325, 326, 328, 330, 331, 337, 338, 344, 349, 351, 356, 358, 376, 395, 396, 397, 406, 422, 424, 426, 428, 459, 464, 472, 473, 475, 477, 479], "int_max": [18, 479], "c99": [18, 34, 62, 75, 152, 173, 272, 341, 344, 349, 440, 452, 464, 468, 471, 475, 479], "necessari": [18, 32, 34, 48, 60, 62, 63, 71, 72, 75, 76, 83, 84, 92, 93, 94, 97, 98, 99, 100, 102, 103, 105, 108, 110, 113, 118, 131, 137, 141, 152, 153, 155, 158, 164, 166, 174, 181, 183, 188, 190, 191, 192, 193, 202, 203, 204, 205, 206, 210, 222, 223, 239, 240, 244, 245, 247, 255, 258, 263, 264, 267, 268, 269, 272, 275, 280, 285, 289, 290, 293, 296, 299, 305, 329, 332, 334, 337, 338, 341, 343, 344, 345, 351, 352, 358, 360, 361, 363, 368, 370, 372, 380, 384, 398, 401, 403, 404, 406, 408, 411, 415, 418, 424, 425, 426, 427, 432, 457, 460, 461, 463, 464, 465, 467, 470, 472, 473, 474, 475, 477, 479], "rv": [18, 34, 212], "someth": [18, 22, 32, 35, 72, 74, 83, 84, 88, 89, 91, 92, 94, 97, 98, 99, 100, 102, 103, 104, 108, 118, 120, 130, 137, 142, 149, 166, 172, 173, 198, 210, 222, 225, 244, 248, 250, 252, 258, 259, 264, 265, 280, 289, 290, 296, 305, 311, 319, 335, 337, 338, 354, 358, 361, 365, 382, 384, 385, 386, 391, 397, 398, 403, 406, 409, 415, 421, 424, 427, 428, 432, 437, 445, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 471, 478, 479], "bad": [18, 41, 67, 71, 72, 99, 102, 107, 118, 172, 184, 187, 190, 198, 209, 210, 232, 244, 263, 265, 268, 280, 289, 305, 330, 380, 382, 393, 418, 432, 437, 439, 460, 464, 466, 468, 473, 475, 479], "happen": [18, 23, 25, 32, 58, 67, 72, 75, 83, 89, 91, 92, 94, 100, 102, 104, 107, 113, 124, 137, 154, 166, 173, 174, 178, 180, 187, 204, 210, 222, 223, 244, 247, 252, 255, 263, 265, 266, 281, 289, 290, 292, 296, 311, 316, 325, 331, 334, 338, 341, 342, 349, 355, 356, 357, 358, 361, 365, 377, 384, 385, 386, 391, 403, 423, 424, 425, 426, 428, 431, 432, 439, 458, 460, 462, 463, 464, 465, 466, 470, 473, 474, 477, 478, 479], "pyos_string_to_doubl": [18, 56, 465, 467], "endptr": 18, "overflow_except": 18, "whitespac": [18, 38, 63, 67, 84, 93, 94, 103, 106, 110, 118, 124, 135, 141, 144, 153, 164, 172, 175, 183, 187, 190, 196, 199, 200, 205, 218, 219, 242, 244, 252, 259, 263, 294, 311, 316, 328, 341, 342, 344, 345, 358, 359, 360, 362, 377, 396, 406, 409, 411, 451, 458, 461, 464, 465, 467, 471, 472, 473, 476, 479], "whole": [18, 41, 78, 89, 96, 97, 103, 104, 118, 139, 148, 155, 164, 166, 174, 180, 204, 205, 232, 239, 256, 258, 264, 275, 289, 290, 293, 302, 304, 316, 325, 334, 337, 341, 360, 371, 384, 406, 409, 422, 423, 431, 451, 458, 465, 473, 477, 479], "much": [18, 23, 34, 54, 60, 62, 66, 72, 74, 75, 83, 84, 87, 89, 91, 94, 100, 102, 103, 104, 106, 107, 118, 124, 135, 149, 152, 155, 164, 173, 183, 190, 191, 200, 204, 222, 252, 255, 258, 266, 267, 268, 272, 280, 289, 290, 292, 296, 305, 316, 327, 334, 345, 351, 365, 372, 378, 380, 382, 384, 385, 386, 406, 407, 415, 423, 428, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 477, 478, 479], "unconvert": 18, "segment": [18, 41, 47, 120, 152, 173, 190, 211, 212, 217, 280, 290, 330, 362, 390, 395, 403, 463, 465, 471, 472, 479], "1e500": 18, "py_huge_v": 18, "out": [18, 23, 30, 33, 34, 37, 38, 41, 55, 56, 58, 59, 63, 67, 71, 72, 75, 84, 88, 89, 91, 93, 94, 97, 99, 100, 102, 103, 104, 106, 107, 108, 118, 120, 131, 132, 137, 138, 139, 142, 147, 155, 158, 160, 164, 172, 173, 174, 175, 180, 181, 183, 187, 188, 190, 192, 193, 200, 202, 208, 209, 210, 212, 223, 227, 232, 240, 244, 247, 248, 250, 255, 256, 258, 259, 263, 264, 272, 280, 289, 290, 292, 294, 295, 297, 301, 305, 308, 310, 311, 316, 319, 325, 328, 330, 334, 335, 337, 338, 341, 342, 344, 345, 349, 354, 358, 361, 365, 377, 380, 381, 382, 384, 385, 386, 390, 395, 396, 403, 405, 406, 409, 413, 415, 419, 421, 422, 423, 424, 425, 432, 437, 438, 440, 445, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 479], "pyos_double_to_str": [18, 56], "val": [18, 22, 23, 72, 94, 114, 164, 187, 188, 193, 202, 220, 241, 263, 294, 337, 341, 382, 386, 391, 424, 463, 470, 479], "format_cod": 18, "ptype": [18, 23, 300, 479], "repr": [18, 23, 24, 48, 62, 63, 67, 74, 93, 100, 105, 106, 110, 120, 137, 173, 178, 179, 180, 188, 190, 208, 222, 239, 244, 251, 280, 311, 326, 334, 341, 342, 349, 358, 360, 374, 377, 381, 382, 385, 386, 421, 423, 424, 431, 432, 440, 442, 446, 448, 458, 459, 461, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "ed": [18, 41, 62, 72, 91, 164, 174, 190, 208, 267, 290, 316, 329, 337, 468, 471, 478, 479], "togeth": [18, 60, 62, 67, 71, 87, 89, 91, 92, 94, 97, 99, 100, 102, 103, 118, 124, 131, 155, 157, 172, 173, 190, 199, 204, 205, 215, 222, 231, 232, 240, 241, 244, 256, 258, 264, 265, 268, 290, 329, 338, 341, 347, 365, 370, 380, 382, 384, 385, 386, 391, 395, 408, 410, 422, 424, 426, 445, 462, 470, 471, 472, 478, 479], "preced": [18, 67, 92, 99, 100, 101, 103, 104, 151, 164, 172, 175, 180, 187, 188, 190, 191, 199, 204, 223, 244, 252, 263, 264, 265, 273, 300, 305, 316, 331, 334, 337, 341, 342, 344, 345, 349, 362, 365, 372, 380, 396, 406, 409, 415, 416, 418, 423, 424, 425, 427, 429, 430, 431, 432, 451, 452, 457, 459, 460, 472, 476, 479], "look": [18, 28, 32, 34, 41, 44, 48, 50, 62, 63, 71, 72, 74, 75, 76, 78, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 102, 103, 106, 107, 108, 110, 112, 118, 120, 124, 137, 139, 141, 149, 152, 155, 164, 166, 173, 174, 177, 178, 180, 183, 186, 187, 188, 190, 193, 194, 196, 200, 202, 208, 210, 222, 223, 227, 231, 240, 242, 244, 247, 248, 256, 262, 264, 265, 266, 268, 289, 290, 292, 293, 299, 305, 310, 316, 321, 329, 335, 337, 338, 341, 342, 345, 349, 350, 351, 358, 363, 365, 372, 374, 377, 378, 381, 382, 383, 384, 385, 386, 391, 398, 403, 406, 409, 419, 421, 423, 424, 425, 426, 428, 431, 432, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 471, 472, 473, 475, 477, 479], "rule": [18, 23, 28, 32, 60, 62, 67, 84, 89, 92, 93, 94, 98, 100, 102, 103, 106, 118, 120, 149, 152, 158, 173, 175, 178, 180, 183, 187, 191, 193, 199, 200, 202, 204, 205, 206, 218, 219, 222, 235, 240, 241, 244, 256, 263, 272, 289, 293, 316, 341, 342, 344, 345, 361, 362, 371, 382, 385, 386, 390, 396, 407, 411, 423, 424, 425, 426, 427, 428, 430, 431, 432, 458, 459, 461, 463, 464, 465, 466, 470, 471, 472, 479], "document": [18, 23, 24, 28, 41, 44, 50, 54, 57, 58, 60, 62, 63, 67, 70, 71, 72, 74, 75, 76, 78, 84, 87, 88, 89, 91, 92, 94, 97, 98, 99, 100, 102, 103, 106, 107, 108, 110, 113, 118, 120, 124, 126, 131, 135, 137, 142, 143, 149, 153, 164, 166, 173, 174, 178, 180, 184, 187, 190, 191, 192, 193, 195, 199, 200, 202, 204, 205, 210, 217, 218, 222, 223, 227, 232, 238, 240, 244, 245, 247, 248, 251, 252, 253, 256, 259, 263, 264, 265, 266, 268, 269, 270, 278, 279, 280, 282, 287, 289, 290, 292, 294, 301, 304, 311, 319, 327, 328, 332, 334, 335, 337, 338, 339, 341, 345, 348, 349, 350, 354, 357, 358, 360, 361, 362, 365, 371, 372, 380, 381, 382, 390, 391, 395, 396, 398, 399, 401, 405, 407, 408, 410, 411, 412, 413, 415, 418, 419, 421, 422, 423, 424, 426, 428, 430, 431, 432, 441, 442, 452, 457, 458, 459, 460, 461, 462, 463, 466, 467, 470, 471, 474, 475, 476, 478, 480], "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "signifi": [18, 93, 102, 178, 242, 337, 338, 341, 382, 424, 431], "finit": [18, 25, 34, 83, 91, 94, 103, 152, 183, 218, 258, 272, 341, 349, 424, 479], "infinit": [18, 22, 27, 44, 60, 67, 84, 94, 103, 136, 155, 183, 245, 258, 272, 280, 282, 290, 293, 296, 316, 317, 341, 349, 384, 424, 458, 462, 464, 472, 479], "pyos_stricmp": [18, 464], "s1": [18, 106, 158, 187, 263, 334, 461], "s2": [18, 106, 158, 187, 263, 334, 461], "insensit": [18, 67, 103, 106, 155, 164, 193, 202, 241, 242, 247, 273, 293, 316, 331, 337, 342, 343, 354, 358, 396, 403, 451, 457, 462, 464, 476, 479, 480], "comparison": [18, 23, 48, 62, 63, 67, 73, 94, 102, 106, 110, 120, 138, 152, 157, 158, 170, 173, 178, 180, 183, 187, 188, 190, 216, 217, 222, 223, 251, 252, 253, 263, 272, 280, 288, 295, 342, 343, 349, 358, 382, 384, 385, 386, 394, 401, 409, 415, 424, 427, 429, 431, 438, 445, 451, 458, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "almost": [18, 32, 34, 63, 71, 74, 75, 83, 84, 89, 91, 100, 103, 104, 106, 108, 110, 118, 152, 154, 174, 183, 248, 255, 263, 269, 272, 280, 285, 289, 316, 338, 341, 345, 365, 382, 384, 385, 403, 424, 430, 452, 457, 459, 461, 464, 466, 470, 472, 478, 479], "pyos_strnicmp": [18, 464], "strncmp": 18, "async": [19, 23, 26, 31, 49, 67, 86, 100, 121, 122, 123, 124, 127, 131, 132, 133, 134, 135, 136, 137, 166, 167, 188, 222, 252, 261, 309, 338, 373, 381, 382, 384, 385, 386, 424, 426, 427, 431, 468, 469, 475, 476, 477, 478, 479], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 26, 29, 32, 52, 56, 65, 469, 473, 479], "__name__": [19, 29, 44, 60, 62, 67, 83, 84, 86, 92, 93, 99, 100, 101, 124, 142, 153, 154, 163, 179, 180, 184, 185, 187, 190, 194, 197, 208, 222, 223, 225, 247, 252, 264, 280, 286, 289, 293, 294, 296, 299, 310, 312, 318, 320, 321, 330, 335, 337, 339, 341, 358, 361, 363, 381, 382, 384, 395, 396, 398, 403, 416, 424, 428, 446, 460, 461, 464, 466, 468, 470, 472, 473, 474, 475, 477, 478, 479], "__qualname__": [19, 27, 29, 60, 67, 86, 92, 93, 194, 208, 222, 223, 252, 341, 424, 425, 468, 472, 474, 479], "pydatetime_import": 20, "pydatetimeapi": 20, "utc": [20, 67, 179, 180, 187, 200, 206, 266, 337, 338, 362, 421, 447, 464, 469, 470, 471, 474, 475, 476, 479], "pydatetime_timezone_utc": [20, 476], "timezon": [20, 67, 100, 116, 179, 187, 200, 206, 337, 338, 358, 375, 421, 447, 469, 470, 471, 472, 474, 475, 476, 479], "pydate_check": 20, "pydatetime_datetyp": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_datetimetyp": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pydatetime_timetyp": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydatetime_deltatyp": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pydatetime_tzinfotyp": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 67, 84, 92, 103, 108, 148, 179, 180, 190, 259, 337, 340, 362, 382, 409, 418, 431, 442, 457, 459, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 477, 478, 479], "month": [20, 67, 84, 148, 179, 180, 263, 362, 418, 431, 458, 459, 461, 465, 470, 479], "day": [20, 67, 72, 83, 84, 93, 103, 124, 148, 164, 179, 180, 223, 241, 259, 263, 266, 272, 285, 290, 336, 338, 340, 362, 381, 418, 421, 428, 431, 447, 458, 461, 463, 464, 465, 470, 473, 475, 477, 478, 479], "date": [20, 32, 67, 71, 84, 93, 100, 108, 131, 135, 137, 148, 160, 179, 190, 196, 200, 205, 206, 208, 240, 242, 263, 264, 266, 268, 285, 288, 290, 296, 308, 336, 337, 338, 341, 347, 354, 362, 365, 375, 386, 415, 416, 418, 419, 422, 428, 431, 447, 448, 457, 458, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pydatetime_fromdateandtim": 20, "hour": [20, 67, 84, 103, 124, 131, 137, 179, 180, 206, 266, 268, 362, 418, 421, 431, 461, 475], "minut": [20, 67, 104, 106, 133, 179, 180, 266, 290, 358, 362, 418, 431, 452, 461, 476, 479], "usecond": 20, "pydatetime_fromdateandtimeandfold": [20, 479], "fold": [20, 67, 179, 180, 191, 198, 199, 200, 205, 247, 282, 341, 343, 421, 422, 462, 463, 475, 476, 479], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "timedelta": [20, 67, 93, 179, 285, 381, 421, 461, 465, 471, 472, 476, 477, 478, 479], "pytimezone_fromoffset": [20, 476], "pytimezone_fromoffsetandnam": [20, 476], "pyunicod": [20, 63, 479], "tzname": [20, 67, 116, 179, 180, 362, 421, 475, 478, 479], "pydatetime_d": 20, "pydatetime_datetim": 20, "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 92, 103, 108, 148, 170, 173, 175, 180, 208, 231, 256, 259, 315, 316, 340, 341, 349, 362, 415, 418, 420, 421, 431, 447, 461, 463, 464, 471, 476, 477, 478, 479], "pydatetime_date_get_hour": 20, "23": [20, 93, 96, 100, 106, 180, 183, 206, 222, 223, 233, 256, 258, 264, 280, 316, 329, 334, 341, 345, 355, 362, 363, 460, 461, 469, 471, 473, 474, 475, 477, 478, 479], "pydatetime_date_get_minut": 20, "59": [20, 88, 100, 180, 258, 316, 362, 378, 449, 471, 479], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 180, 183, 472], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 468, 479], "tzinfo": [20, 67, 179, 206, 375, 421, 461, 468, 469, 471, 472, 475, 476, 478, 479], "pydatetime_tim": 20, "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 468, 479], "delta": [20, 67, 106, 139, 180, 188, 251, 267, 359, 384, 460, 462, 465, 475, 477, 479], "pydatetime_delta": 20, "pydatetime_delta_get_day": 20, "999999999": [20, 180], "pydatetime_delta_get_second": 20, "86399": [20, 180], "pydatetime_delta_get_microsecond": 20, "db": [20, 67, 92, 172, 181, 222, 251, 258, 278, 295, 327, 447, 452, 463, 464, 466, 469, 479], "pydatetime_fromtimestamp": 20, "fromtimestamp": [20, 67, 100, 179, 180, 187, 337, 470, 476, 479], "pydate_fromtimestamp": [20, 479], "pyproperty_typ": [21, 56, 92], "pydescr_newgetset": [21, 56], "pygetsetdef": [21, 56, 57, 62, 74, 75, 98, 252, 381, 476, 479], "getset": [21, 62, 252], "pydescr_newmemb": [21, 56], "pymemberdef": [21, 56, 57, 60, 62, 74, 75, 92, 252, 381, 465, 470, 476, 479], "meth": [21, 43, 62, 77, 84, 86, 110, 341, 382, 459, 462, 468, 469, 472], "pydescr_newmethod": [21, 56, 479], "pymethoddef": [21, 34, 44, 56, 57, 61, 62, 71, 72, 74, 75, 89, 98, 461, 479], "pydescr_newwrapp": 21, "wrapperbas": [21, 476, 479], "pydescr_newclassmethod": [21, 56], "pydescr_isdata": [21, 479], "descr": [21, 92, 173], "pywrapper_new": [21, 56], "pydictobject": [22, 54, 470, 479], "pydict_typ": [22, 56], "pydict_checkexact": 22, "pydict_new": [22, 56], "pydictproxy_new": [22, 56], "mappingproxytyp": [22, 67, 178, 179, 222, 341, 381, 423, 468, 470, 472, 479], "enforc": [22, 93, 183, 193, 202, 222, 240, 290, 319, 339, 341, 342, 380, 382, 406, 407, 409, 423, 426, 432, 451, 459, 460, 463, 466, 471, 472, 479], "modif": [22, 27, 33, 60, 63, 65, 72, 93, 100, 110, 120, 166, 187, 213, 231, 242, 245, 247, 263, 266, 268, 275, 280, 289, 290, 293, 321, 329, 331, 335, 339, 349, 354, 358, 372, 406, 409, 418, 422, 424, 457, 463, 465, 471, 472, 473, 474, 475, 477, 479], "pydict_clear": [22, 56], "pydict_contain": [22, 56, 462], "pydict_copi": [22, 56], "pydict_setitem": [22, 56, 62, 72, 479], "insert": [22, 30, 32, 33, 37, 59, 67, 71, 72, 79, 89, 94, 106, 110, 112, 118, 119, 120, 124, 141, 144, 145, 149, 157, 158, 164, 174, 178, 179, 187, 190, 205, 222, 223, 244, 247, 255, 259, 264, 267, 270, 278, 281, 289, 294, 296, 304, 317, 337, 341, 342, 344, 349, 364, 372, 381, 396, 398, 403, 406, 409, 419, 424, 426, 428, 432, 436, 438, 451, 456, 458, 461, 463, 464, 465, 467, 470, 472, 473, 474, 475, 476, 477, 479], "hashabl": [22, 48, 62, 67, 84, 86, 114, 158, 179, 180, 184, 187, 218, 222, 223, 229, 252, 256, 293, 315, 341, 382, 398, 424, 426, 461, 462, 464, 465, 469, 470, 472, 474, 478, 479], "steal": [22, 23, 32, 34, 37, 39, 44, 48, 53, 59, 479], "pydict_setitemstr": [22, 56, 479], "pyunicode_fromstr": [22, 34, 56, 63, 71, 75], "pydict_delitem": [22, 56], "pydict_delitemstr": [22, 56], "pydict_getitem": [22, 56, 72, 468, 479], "__hash__": [22, 62, 67, 77, 79, 84, 86, 158, 178, 208, 222, 286, 341, 385, 424, 451, 463, 464, 466, 472, 476, 479], "__eq__": [22, 62, 67, 77, 79, 84, 86, 145, 158, 165, 178, 191, 192, 199, 208, 221, 223, 241, 252, 282, 288, 341, 381, 385, 386, 415, 424, 459, 464, 465, 466, 469, 471, 476, 479], "pydict_getitemwitherror": [22, 56, 479], "gil": [22, 23, 41, 44, 50, 58, 62, 67, 75, 83, 86, 98, 137, 163, 173, 185, 232, 247, 464, 465, 468, 471, 473, 475, 478, 479], "held": [22, 30, 32, 41, 51, 58, 83, 98, 164, 244, 255, 265, 266, 275, 280, 341, 349, 361, 384, 398, 422, 424, 458, 463, 464, 465, 475, 479], "histor": [22, 40, 62, 72, 74, 94, 98, 164, 174, 180, 210, 245, 268, 292, 362, 410, 418, 432, 457, 465, 470, 473, 475, 479], "reason": [22, 23, 32, 34, 41, 45, 46, 48, 50, 62, 67, 72, 75, 83, 84, 87, 88, 89, 91, 93, 94, 99, 100, 102, 103, 104, 106, 107, 108, 113, 137, 139, 149, 152, 153, 174, 178, 180, 183, 190, 191, 193, 208, 210, 213, 227, 238, 239, 242, 244, 245, 247, 253, 255, 264, 265, 266, 267, 268, 272, 289, 290, 293, 296, 302, 305, 311, 329, 331, 334, 338, 341, 349, 354, 355, 358, 360, 362, 365, 380, 382, 384, 385, 386, 389, 391, 395, 403, 421, 422, 423, 424, 428, 460, 461, 463, 466, 471, 472, 473, 474, 479], "suppress": [22, 32, 33, 39, 67, 89, 91, 99, 108, 118, 137, 150, 154, 160, 166, 190, 285, 289, 308, 312, 331, 332, 341, 345, 349, 358, 403, 423, 424, 432, 451, 457, 459, 461, 463, 464, 465, 466, 467, 473, 474, 476, 477, 479, 480], "wasn": [22, 30, 44, 75, 100, 118, 266, 289, 352, 384, 419, 458, 460, 461, 463, 464, 475, 479], "pydict_getitemstr": [22, 56, 72], "pydict_setdefault": [22, 479], "defaultobj": 22, "setdefault": [22, 67, 77, 157, 158, 181, 241, 253, 341, 403, 424, 458, 461, 471, 472, 479], "hash": [22, 32, 33, 48, 62, 63, 67, 74, 77, 83, 84, 86, 89, 144, 158, 160, 164, 171, 178, 181, 220, 222, 234, 247, 248, 251, 267, 286, 295, 308, 334, 347, 349, 381, 385, 394, 398, 422, 424, 426, 428, 431, 445, 446, 451, 452, 460, 461, 463, 464, 465, 468, 469, 471, 472, 475, 478, 479], "pydict_item": [22, 56], "pylistobject": [22, 37, 53, 75], "pydict_key": [22, 56], "pydict_valu": [22, 56], "pydict_s": [22, 56], "pydict_next": [22, 56], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 71], "spars": [22, 354, 479], "pos": [22, 59, 67, 115, 139, 151, 183, 219, 221, 252, 259, 275, 282, 288, 290, 297, 316, 317, 346, 359, 372, 380, 397, 461, 465, 474], "interest": [22, 62, 67, 71, 72, 74, 76, 83, 84, 92, 93, 94, 96, 99, 100, 103, 105, 106, 118, 149, 151, 152, 164, 180, 187, 190, 191, 197, 204, 212, 213, 244, 258, 264, 268, 270, 273, 289, 294, 305, 311, 316, 325, 361, 363, 382, 384, 385, 386, 396, 397, 411, 424, 430, 432, 458, 459, 460, 461, 463, 465, 479], "pylong_aslong": [22, 34, 38, 56, 71, 477], "pylong_fromlong": [22, 34, 38, 44, 56, 71, 72, 74, 75, 479], "pydict_merg": [22, 56], "overrid": [22, 32, 33, 48, 60, 62, 63, 65, 67, 84, 89, 92, 99, 100, 107, 108, 114, 118, 124, 130, 133, 134, 142, 148, 153, 154, 158, 164, 168, 172, 173, 178, 180, 184, 186, 190, 193, 199, 200, 202, 205, 206, 210, 215, 222, 223, 227, 240, 241, 242, 245, 247, 252, 255, 259, 264, 266, 269, 280, 284, 289, 290, 293, 296, 308, 311, 312, 316, 328, 331, 334, 335, 341, 342, 345, 349, 350, 358, 361, 372, 380, 382, 384, 385, 386, 391, 394, 398, 403, 409, 413, 418, 424, 425, 426, 428, 436, 451, 452, 457, 458, 461, 464, 465, 466, 467, 472, 473, 475, 476, 477, 479], "pymapping_key": [22, 39, 56, 476, 479], "pyobject_getitem": [22, 34, 39, 48, 56, 62], "replac": [22, 24, 30, 32, 33, 37, 41, 55, 58, 59, 60, 62, 63, 67, 70, 72, 83, 84, 88, 89, 91, 92, 93, 94, 100, 106, 108, 110, 116, 118, 120, 124, 130, 137, 148, 149, 154, 155, 161, 164, 170, 173, 174, 176, 178, 179, 180, 187, 188, 190, 193, 194, 199, 202, 203, 206, 208, 210, 211, 215, 216, 222, 226, 232, 247, 248, 249, 252, 255, 263, 264, 265, 268, 269, 273, 276, 280, 289, 290, 293, 294, 304, 305, 312, 315, 316, 317, 318, 328, 329, 330, 337, 338, 341, 342, 349, 354, 358, 360, 361, 362, 364, 365, 367, 371, 372, 374, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 395, 396, 398, 403, 405, 406, 409, 411, 413, 417, 418, 421, 424, 426, 429, 431, 432, 445, 447, 451, 452, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pydict_upd": [22, 56], "updat": [22, 32, 33, 41, 44, 58, 62, 67, 74, 75, 83, 84, 89, 91, 92, 94, 100, 106, 115, 118, 124, 131, 133, 138, 157, 158, 160, 166, 171, 174, 176, 179, 180, 182, 186, 188, 190, 193, 202, 204, 210, 219, 222, 223, 232, 233, 234, 241, 244, 245, 247, 252, 253, 255, 262, 268, 275, 278, 280, 282, 285, 289, 290, 293, 296, 299, 312, 321, 327, 334, 337, 338, 341, 345, 351, 354, 362, 365, 372, 376, 380, 381, 385, 390, 391, 397, 403, 409, 417, 424, 428, 432, 436, 451, 457, 458, 459, 460, 461, 462, 463, 464, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "pydict_mergefromseq2": [22, 56], "seq2": [22, 94, 288, 458], "merg": [22, 67, 84, 86, 91, 92, 94, 99, 100, 174, 179, 180, 190, 210, 233, 264, 266, 279, 289, 290, 341, 376, 382, 422, 448, 452, 457, 458, 461, 464, 465, 470, 474, 479], "duplic": [22, 51, 67, 87, 94, 110, 160, 164, 166, 183, 187, 188, 193, 202, 205, 208, 212, 252, 256, 264, 268, 290, 299, 334, 341, 342, 358, 380, 382, 384, 403, 418, 422, 423, 424, 426, 427, 437, 438, 460, 462, 463, 464, 470, 471, 474, 476, 478, 479], "win": [22, 32, 67, 91, 100, 174, 176, 289, 315, 351, 384, 457, 467, 471, 479], "pydict_addwatch": [22, 470], "pydict_watchcallback": 22, "futur": [22, 32, 60, 62, 67, 76, 83, 86, 89, 98, 99, 102, 103, 108, 110, 112, 118, 120, 121, 123, 125, 128, 130, 131, 136, 137, 153, 156, 161, 162, 164, 172, 180, 190, 194, 200, 202, 204, 205, 207, 210, 222, 231, 242, 244, 247, 249, 251, 252, 254, 264, 265, 280, 281, 289, 290, 305, 312, 316, 322, 325, 330, 334, 337, 338, 349, 358, 361, 362, 381, 382, 384, 391, 394, 396, 409, 424, 426, 431, 457, 458, 459, 460, 461, 462, 463, 464, 469, 472, 473, 477, 479, 480], "pydict_watch": [22, 470], "pydict_clearwatch": 22, "mark": [22, 23, 28, 33, 56, 57, 60, 63, 74, 83, 89, 92, 96, 100, 102, 103, 106, 110, 115, 118, 120, 128, 131, 137, 142, 155, 163, 164, 174, 178, 187, 188, 190, 202, 227, 233, 237, 244, 252, 259, 266, 268, 294, 297, 302, 311, 325, 334, 337, 341, 345, 355, 358, 365, 376, 382, 384, 398, 406, 411, 422, 424, 426, 427, 431, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "watch": [22, 58, 60, 67, 98, 99, 102, 131, 135, 183, 258, 264, 266, 325, 365, 447], "grant": [22, 60, 92, 103, 356, 422, 458, 459, 463], "pydict_unwatch": 22, "pydict_watchev": 22, "pydict_event_ad": 22, "pydict_event_modifi": 22, "pydict_event_delet": 22, "pydict_event_clon": 22, "pydict_event_clear": 22, "pydict_event_dealloc": 22, "new_valu": [22, 27, 358], "delet": [22, 37, 48, 53, 57, 58, 62, 63, 67, 72, 74, 75, 83, 86, 87, 89, 92, 96, 100, 103, 107, 114, 120, 142, 157, 164, 172, 174, 175, 176, 178, 181, 184, 187, 188, 193, 197, 202, 203, 210, 215, 220, 222, 223, 238, 244, 245, 247, 253, 261, 266, 268, 280, 290, 293, 294, 302, 327, 329, 331, 337, 339, 341, 349, 356, 358, 361, 364, 365, 372, 380, 391, 395, 396, 398, 401, 403, 417, 423, 424, 428, 431, 432, 434, 457, 460, 461, 463, 464, 465, 466, 467, 471, 473, 476, 477, 478, 479, 480], "maintain": [22, 32, 72, 75, 83, 89, 91, 93, 98, 100, 105, 108, 118, 145, 155, 164, 166, 173, 178, 183, 193, 204, 205, 210, 222, 245, 247, 248, 252, 263, 289, 304, 305, 322, 335, 344, 349, 362, 371, 384, 396, 398, 399, 403, 408, 421, 426, 428, 430, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 472, 473, 474, 476, 477, 478, 479], "doing": [22, 27, 32, 35, 62, 83, 84, 91, 94, 96, 97, 99, 100, 102, 103, 104, 106, 108, 120, 131, 149, 155, 156, 166, 173, 183, 191, 213, 222, 232, 240, 247, 255, 262, 266, 275, 276, 280, 289, 290, 292, 296, 302, 316, 325, 330, 335, 338, 339, 342, 345, 358, 361, 365, 380, 382, 384, 385, 386, 391, 409, 417, 424, 425, 460, 463, 464, 465, 466, 471, 473, 474, 475, 476, 479], "unpredict": [22, 27, 210, 268, 290, 409, 412, 424, 451, 460], "recurs": [22, 27, 31, 32, 60, 67, 72, 84, 94, 110, 120, 140, 149, 160, 164, 167, 178, 187, 188, 190, 193, 197, 202, 210, 213, 223, 228, 247, 249, 259, 280, 290, 293, 294, 296, 299, 304, 305, 310, 318, 327, 329, 339, 349, 354, 361, 380, 382, 384, 385, 391, 408, 409, 418, 424, 425, 428, 432, 436, 458, 459, 460, 461, 462, 464, 470, 471, 473, 474, 475, 476, 477, 479], "trigger": [22, 32, 33, 41, 51, 62, 67, 75, 89, 92, 94, 96, 102, 137, 166, 174, 183, 186, 193, 202, 207, 210, 223, 247, 252, 280, 281, 289, 290, 330, 331, 337, 341, 349, 365, 367, 384, 385, 390, 396, 405, 415, 424, 451, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 479], "notifi": [22, 58, 67, 99, 102, 132, 136, 137, 161, 244, 245, 280, 361, 367, 398, 479], "chapter": [23, 41, 49, 65, 71, 72, 74, 75, 76, 83, 90, 94, 143, 177, 184, 214, 219, 221, 243, 244, 253, 257, 277, 287, 295, 312, 349, 363, 426, 430, 431, 479], "let": [23, 41, 65, 71, 72, 75, 78, 83, 84, 87, 88, 89, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 107, 108, 118, 124, 137, 153, 158, 164, 166, 173, 187, 197, 223, 227, 242, 248, 259, 263, 264, 265, 266, 289, 294, 304, 316, 327, 328, 337, 338, 365, 372, 380, 382, 385, 386, 409, 426, 428, 457, 458, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 473, 476, 479], "understand": [23, 41, 67, 72, 74, 75, 83, 89, 92, 99, 100, 102, 103, 104, 106, 118, 152, 180, 190, 204, 227, 239, 240, 259, 272, 285, 304, 305, 316, 337, 342, 345, 347, 364, 372, 382, 386, 403, 412, 418, 423, 430, 458, 459, 460, 461, 463, 464, 465, 466, 475, 479], "basic": [23, 32, 62, 63, 67, 72, 73, 74, 76, 83, 84, 91, 92, 94, 97, 99, 100, 102, 108, 110, 118, 133, 142, 143, 153, 155, 157, 164, 166, 174, 180, 181, 184, 186, 187, 208, 216, 219, 227, 231, 242, 244, 247, 249, 251, 252, 253, 255, 259, 264, 266, 280, 281, 289, 301, 304, 305, 319, 324, 334, 335, 337, 338, 341, 345, 354, 358, 361, 364, 365, 370, 372, 377, 382, 384, 385, 386, 391, 402, 408, 409, 410, 411, 415, 426, 432, 452, 458, 460, 461, 463, 464, 465, 467, 471, 472, 473, 474, 477, 479], "posix": [23, 33, 67, 69, 100, 104, 108, 109, 113, 131, 135, 148, 173, 180, 206, 210, 251, 254, 263, 280, 283, 289, 290, 291, 293, 298, 306, 313, 319, 325, 328, 329, 334, 335, 345, 349, 351, 354, 356, 361, 362, 387, 395, 417, 421, 422, 451, 452, 458, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 476, 477, 479], "global": [23, 27, 30, 31, 33, 34, 44, 50, 52, 62, 65, 67, 72, 75, 78, 86, 87, 89, 93, 94, 96, 107, 108, 112, 113, 118, 120, 130, 133, 138, 142, 149, 157, 163, 166, 173, 174, 179, 188, 190, 192, 207, 208, 210, 215, 220, 222, 224, 227, 239, 244, 245, 247, 251, 252, 261, 262, 266, 273, 280, 289, 290, 293, 294, 295, 302, 305, 317, 321, 324, 331, 332, 334, 341, 342, 348, 349, 350, 351, 354, 355, 358, 361, 363, 365, 376, 380, 382, 384, 386, 391, 394, 396, 398, 409, 416, 423, 424, 425, 427, 428, 429, 431, 436, 437, 446, 451, 457, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "suppos": [23, 59, 62, 63, 72, 76, 84, 97, 100, 108, 178, 183, 190, 193, 196, 245, 306, 316, 331, 334, 337, 338, 342, 354, 372, 386, 398, 463, 464, 465, 471, 476, 477, 479], "pyarg_": 23, "concret": [23, 32, 67, 74, 75, 93, 103, 120, 173, 180, 184, 194, 205, 216, 227, 247, 250, 251, 255, 265, 289, 326, 335, 341, 344, 349, 361, 384, 390, 403, 406, 413, 421, 428, 460, 461, 464, 472, 473, 476, 478, 479], "traceback": [23, 33, 41, 65, 67, 72, 75, 78, 84, 88, 91, 92, 93, 94, 97, 98, 99, 100, 106, 112, 118, 123, 137, 138, 140, 149, 154, 157, 160, 164, 166, 173, 174, 180, 182, 183, 185, 188, 190, 208, 210, 222, 244, 251, 252, 256, 262, 264, 265, 266, 280, 281, 293, 294, 296, 308, 312, 316, 335, 337, 341, 342, 344, 345, 347, 349, 361, 363, 380, 381, 383, 384, 385, 386, 403, 423, 424, 425, 426, 432, 436, 437, 438, 439, 442, 445, 448, 451, 452, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 476, 477, 478, 479], "although": [23, 25, 27, 41, 62, 71, 84, 89, 93, 99, 100, 137, 148, 155, 173, 178, 180, 187, 190, 193, 194, 197, 202, 203, 245, 252, 255, 258, 259, 264, 268, 278, 280, 289, 290, 292, 293, 296, 304, 316, 342, 349, 351, 354, 362, 371, 403, 408, 410, 411, 412, 417, 421, 423, 424, 426, 428, 430, 432, 451, 457, 458, 470, 473, 474, 475, 479], "forbidden": [23, 41, 93, 107, 137, 238, 296, 341, 361, 464, 474, 479], "clean": [23, 32, 67, 72, 74, 96, 98, 100, 103, 118, 120, 130, 137, 138, 155, 163, 188, 190, 198, 202, 205, 209, 210, 244, 249, 252, 268, 279, 280, 281, 282, 284, 312, 335, 337, 338, 340, 354, 356, 358, 391, 395, 398, 412, 424, 426, 452, 458, 459, 460, 462, 463, 464, 465, 466, 468, 471, 472, 477, 478, 479], "prepar": [23, 58, 65, 67, 100, 106, 107, 116, 148, 154, 179, 180, 188, 222, 227, 229, 232, 241, 251, 255, 266, 290, 296, 324, 334, 345, 349, 358, 359, 380, 381, 384, 391, 409, 410, 413, 418, 422, 464, 466, 473, 474, 476, 478, 479], "propag": [23, 32, 35, 67, 89, 94, 99, 100, 116, 123, 137, 154, 167, 210, 247, 264, 265, 280, 293, 294, 299, 322, 329, 330, 337, 341, 345, 349, 362, 377, 384, 385, 386, 391, 398, 423, 424, 426, 428, 439, 461, 463, 475, 479], "intend": [23, 30, 32, 33, 41, 44, 56, 60, 63, 71, 72, 74, 83, 89, 94, 99, 100, 103, 107, 108, 112, 113, 124, 137, 149, 155, 166, 181, 188, 190, 198, 205, 210, 223, 241, 242, 244, 248, 252, 255, 256, 264, 266, 267, 268, 272, 285, 290, 296, 299, 304, 331, 334, 338, 341, 342, 344, 345, 349, 354, 361, 372, 376, 380, 382, 384, 385, 390, 391, 396, 403, 407, 418, 421, 423, 424, 426, 430, 431, 432, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 479], "mysteri": [23, 72, 149, 293, 331, 473], "sys": [23, 24, 28, 30, 32, 33, 34, 44, 58, 62, 63, 65, 67, 72, 78, 79, 84, 86, 87, 89, 96, 98, 99, 100, 101, 102, 106, 108, 110, 111, 112, 113, 116, 120, 131, 134, 135, 137, 138, 140, 142, 149, 150, 153, 154, 160, 166, 172, 173, 174, 183, 185, 187, 188, 190, 197, 207, 210, 211, 212, 213, 215, 220, 222, 224, 225, 226, 227, 231, 242, 244, 247, 248, 251, 252, 255, 258, 259, 262, 264, 265, 266, 272, 276, 277, 280, 289, 290, 292, 294, 296, 297, 299, 300, 304, 305, 306, 308, 309, 310, 312, 318, 321, 324, 325, 328, 329, 330, 331, 334, 335, 337, 339, 341, 344, 345, 351, 352, 354, 355, 357, 358, 361, 363, 365, 376, 377, 378, 381, 384, 385, 386, 391, 395, 396, 398, 403, 409, 413, 416, 417, 418, 419, 423, 424, 426, 428, 432, 433, 434, 439, 442, 444, 446, 447, 448, 449, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 479, 480], "exc_info": [23, 32, 34, 67, 72, 99, 100, 110, 142, 150, 184, 188, 190, 264, 266, 312, 329, 349, 354, 384, 401, 403, 423, 424, 446, 461, 463, 464, 466, 469, 474, 479], "former": [23, 30, 62, 74, 84, 118, 142, 156, 158, 173, 174, 180, 183, 222, 241, 247, 252, 264, 272, 280, 285, 305, 319, 329, 337, 362, 365, 371, 380, 382, 394, 424, 426, 428, 467, 470, 471, 472, 475, 476, 477, 478, 479], "caught": [23, 98, 113, 118, 137, 150, 154, 210, 280, 290, 299, 302, 320, 329, 330, 334, 337, 349, 358, 362, 365, 384, 385, 410, 419, 423, 424, 432, 439, 459, 464, 466, 473, 477, 479], "stop": [23, 28, 33, 55, 67, 84, 93, 94, 96, 99, 100, 102, 116, 119, 128, 131, 135, 137, 142, 153, 156, 157, 158, 180, 182, 184, 187, 188, 190, 194, 204, 210, 222, 224, 225, 232, 244, 252, 258, 264, 265, 266, 268, 280, 281, 289, 290, 292, 293, 294, 297, 299, 305, 311, 315, 330, 335, 341, 345, 358, 361, 364, 372, 378, 380, 381, 382, 384, 386, 402, 403, 423, 424, 426, 437, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 471, 474, 475, 476, 479], "pyerr_clear": [23, 34, 56, 72, 473], "pyerr_printex": [23, 56, 479], "set_sys_last_var": 23, "stderr": [23, 32, 33, 41, 58, 63, 67, 71, 72, 84, 99, 100, 112, 124, 128, 131, 135, 149, 154, 161, 166, 187, 190, 211, 224, 226, 242, 244, 255, 264, 265, 266, 280, 289, 290, 308, 312, 318, 330, 337, 341, 345, 349, 354, 358, 361, 363, 377, 382, 384, 395, 396, 403, 424, 446, 447, 448, 451, 457, 458, 462, 464, 465, 466, 471, 473, 474, 475, 476, 478, 479], "systemexit": [23, 65, 67, 99, 113, 137, 138, 154, 165, 210, 244, 349, 361, 402, 425, 439, 446, 463, 464, 466, 475, 479], "exit": [23, 32, 33, 58, 65, 67, 71, 72, 83, 85, 88, 91, 94, 100, 112, 113, 116, 120, 124, 130, 131, 133, 135, 136, 137, 149, 153, 154, 161, 163, 165, 166, 172, 174, 183, 185, 186, 190, 197, 210, 211, 215, 225, 244, 245, 249, 251, 258, 264, 266, 280, 289, 290, 294, 305, 306, 308, 312, 316, 325, 330, 331, 332, 334, 335, 337, 341, 345, 349, 355, 356, 358, 361, 363, 374, 376, 380, 381, 384, 385, 386, 394, 395, 396, 398, 399, 402, 403, 407, 416, 417, 418, 423, 424, 426, 439, 444, 446, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 474, 475, 476, 477, 478, 479], "fatal": [23, 32, 41, 58, 71, 72, 138, 211, 338, 354, 384, 439, 465, 466, 472, 475, 479], "last_exc": [23, 67, 312, 349, 377, 470, 479], "backward": [23, 24, 32, 58, 60, 63, 65, 67, 79, 86, 89, 99, 100, 118, 126, 142, 164, 174, 180, 188, 190, 191, 193, 202, 204, 205, 210, 219, 225, 242, 244, 245, 247, 252, 264, 265, 268, 290, 292, 296, 299, 305, 311, 316, 319, 329, 334, 338, 341, 345, 358, 362, 377, 380, 382, 390, 391, 393, 415, 426, 428, 431, 432, 436, 457, 458, 460, 461, 463, 464, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479], "last_typ": [23, 67, 312, 349, 446, 466, 470, 479], "last_valu": [23, 67, 93, 208, 312, 349, 377, 446, 470, 479], "last_traceback": [23, 67, 294, 312, 349, 424, 446, 470, 479], "pyerr_print": [23, 56, 67, 71, 72, 479], "unraisablehook": [23, 28, 67, 113, 140, 312, 337, 349, 358, 446, 477, 479], "util": [23, 30, 32, 58, 67, 92, 93, 94, 100, 112, 116, 120, 131, 149, 153, 155, 156, 160, 174, 179, 183, 184, 187, 188, 190, 191, 193, 197, 200, 202, 204, 205, 227, 235, 238, 245, 248, 251, 253, 267, 270, 277, 282, 289, 308, 312, 319, 329, 339, 341, 343, 345, 347, 361, 365, 380, 384, 387, 395, 407, 457, 458, 460, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "imposs": [23, 39, 53, 62, 84, 99, 155, 210, 265, 280, 290, 293, 309, 358, 361, 382, 384, 397, 406, 418, 432, 458, 459, 460, 461, 462, 464, 465, 470, 474, 479], "__del__": [23, 32, 51, 62, 67, 72, 83, 116, 179, 224, 255, 280, 313, 337, 356, 358, 385, 424, 473, 479], "pyerr_displayexcept": [23, 56, 470, 479], "display": [23, 32, 33, 41, 67, 86, 88, 93, 96, 100, 106, 116, 118, 120, 137, 149, 150, 153, 154, 157, 176, 182, 183, 185, 188, 190, 197, 200, 210, 211, 235, 244, 251, 252, 256, 263, 264, 268, 278, 285, 290, 293, 294, 304, 308, 310, 316, 317, 318, 339, 341, 342, 343, 345, 349, 354, 360, 363, 365, 368, 371, 372, 374, 376, 377, 380, 384, 391, 395, 396, 399, 417, 422, 424, 431, 432, 445, 451, 452, 457, 458, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "help": [23, 32, 44, 48, 57, 60, 65, 67, 74, 79, 83, 84, 85, 86, 88, 89, 92, 93, 99, 100, 102, 103, 104, 106, 107, 108, 116, 120, 121, 149, 150, 153, 155, 166, 173, 174, 184, 187, 189, 190, 197, 219, 222, 223, 225, 227, 231, 232, 235, 238, 241, 243, 247, 250, 251, 252, 255, 258, 259, 278, 285, 290, 294, 305, 332, 334, 337, 338, 341, 347, 349, 358, 362, 363, 364, 365, 371, 374, 376, 382, 385, 386, 390, 391, 394, 395, 401, 409, 417, 424, 428, 431, 440, 444, 446, 447, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "statement": [23, 39, 46, 48, 53, 60, 62, 65, 67, 71, 72, 78, 84, 86, 88, 89, 94, 98, 100, 108, 110, 111, 112, 113, 115, 118, 124, 137, 142, 147, 149, 156, 161, 163, 173, 181, 182, 183, 185, 188, 190, 198, 210, 215, 222, 231, 239, 244, 245, 247, 249, 251, 252, 255, 261, 267, 268, 275, 278, 280, 281, 285, 288, 289, 290, 292, 294, 309, 312, 316, 325, 332, 334, 335, 337, 338, 341, 345, 348, 349, 350, 354, 355, 356, 357, 358, 363, 374, 380, 382, 385, 386, 397, 401, 406, 407, 408, 418, 422, 425, 426, 427, 428, 429, 431, 433, 435, 436, 442, 451, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480], "pyerr_setstr": [23, 34, 56, 72, 74, 75, 98, 465, 470], "pyexc_runtimeerror": [23, 56, 74], "py_incref": [23, 34, 51, 56, 66, 72, 74, 75, 85, 86, 468, 469, 470, 477, 479], "decod": [23, 32, 33, 58, 63, 65, 67, 71, 72, 86, 100, 102, 106, 119, 124, 131, 134, 135, 139, 141, 143, 144, 172, 173, 185, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 210, 222, 232, 241, 247, 251, 253, 255, 267, 282, 285, 290, 296, 297, 301, 314, 334, 337, 338, 341, 344, 345, 347, 349, 354, 355, 358, 373, 374, 390, 391, 393, 395, 403, 415, 418, 424, 428, 431, 447, 451, 458, 460, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 478, 479], "pyerr_setobject": [23, 56, 72, 470, 479], "pyerr_format": [23, 56, 74, 89, 465, 474, 479], "pyunicode_fromformat": [23, 56, 63, 74, 75, 468, 470, 472, 473, 474, 479], "pyerr_formatv": [23, 56, 474, 479], "pyerr_setnon": [23, 56], "shorthand": [23, 84, 97, 118, 141, 188, 190, 256, 299, 334, 360, 365, 377, 382, 396, 423, 439, 461, 462, 473], "pyerr_badargu": [23, 56], "pyexc_typeerror": [23, 56, 72, 74, 75], "illeg": [23, 46, 94, 106, 155, 193, 202, 209, 210, 290, 311, 330, 338, 341, 362, 372, 403, 406, 418, 423, 424, 427, 431, 432, 459, 460, 462, 463, 465, 471, 476, 477], "pyerr_nomemori": [23, 41, 56, 72], "pyexc_memoryerror": [23, 56], "pyerr_setfromerrno": [23, 56, 72], "construct": [23, 53, 57, 58, 60, 61, 65, 71, 72, 74, 84, 92, 93, 94, 97, 98, 99, 100, 112, 118, 124, 131, 135, 137, 147, 155, 158, 166, 173, 180, 183, 186, 188, 190, 191, 194, 198, 200, 205, 206, 210, 213, 217, 218, 231, 232, 240, 242, 247, 256, 258, 264, 265, 267, 278, 280, 289, 290, 293, 296, 304, 305, 311, 316, 317, 328, 331, 332, 334, 337, 338, 341, 344, 361, 365, 377, 380, 382, 384, 385, 386, 390, 395, 398, 405, 407, 408, 409, 410, 415, 416, 418, 421, 423, 424, 425, 426, 431, 432, 447, 451, 457, 458, 459, 460, 462, 463, 465, 470, 471, 472, 474, 475, 476, 477, 478, 479], "gotten": [23, 149, 180, 183, 280, 458, 479], "strerror": [23, 67, 116, 209, 210, 263, 290, 464, 479], "eintr": [23, 67, 116, 209, 210, 280, 465, 479], "interrupt": [23, 32, 67, 100, 113, 117, 124, 137, 149, 174, 175, 183, 188, 209, 210, 244, 268, 280, 290, 295, 325, 326, 330, 334, 335, 337, 345, 355, 361, 362, 384, 391, 402, 416, 422, 424, 437, 464, 465, 471, 474, 477, 478, 479], "pyerr_checksign": [23, 56, 470, 479], "pyerr_setfromerrnowithfilenameobject": [23, 56], "filenameobject": 23, "oserror": [23, 67, 106, 124, 128, 131, 151, 173, 180, 185, 210, 212, 215, 220, 222, 227, 231, 240, 242, 247, 252, 255, 275, 279, 280, 285, 290, 291, 292, 293, 300, 303, 319, 325, 329, 330, 332, 334, 338, 345, 354, 355, 358, 362, 389, 391, 401, 419, 423, 439, 446, 465, 468, 472, 473, 477, 479], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 56], "pyerr_setfromwindowserr": [23, 56], "ierr": 23, "windowserror": [23, 67, 173, 210, 401, 472], "getlasterror": [23, 67, 116, 173, 479], "win32": [23, 63, 83, 85, 135, 173, 266, 280, 290, 334, 345, 349, 351, 401, 402, 457, 458, 464, 466, 471, 474, 479], "formatmessag": [23, 173, 210], "pyexc_windowserror": [23, 56], "pyerr_setexcfromwindowserr": [23, 56], "pyerr_setfromwindowserrwithfilenam": [23, 56], "pyerr_setfromwindowserrwithfilenameobject": 23, "os": [23, 32, 33, 58, 63, 67, 69, 72, 77, 84, 86, 89, 91, 92, 94, 96, 99, 100, 106, 108, 110, 113, 116, 118, 122, 123, 124, 130, 131, 135, 136, 137, 138, 140, 149, 157, 160, 161, 163, 164, 166, 167, 180, 184, 185, 186, 187, 190, 197, 205, 207, 209, 211, 212, 213, 216, 217, 222, 226, 227, 228, 231, 232, 240, 242, 244, 249, 251, 255, 263, 266, 269, 275, 279, 280, 283, 289, 296, 298, 299, 300, 303, 305, 306, 315, 317, 325, 326, 329, 330, 331, 332, 334, 337, 338, 339, 341, 349, 350, 351, 354, 356, 361, 362, 365, 376, 378, 384, 385, 395, 396, 399, 403, 417, 418, 421, 424, 434, 439, 447, 448, 451, 452, 457, 458, 460, 461, 462, 463, 466, 479, 480], "fsdecod": [23, 67, 86, 116, 290, 349, 471, 475, 479], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 56], "filename2": [23, 67, 210], "pyerr_setexcfromwindowserrwithfilenam": [23, 56], "pyerr_setimporterror": [23, 56, 473, 475], "msg": [23, 67, 83, 100, 104, 120, 127, 137, 149, 166, 173, 187, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 210, 214, 225, 232, 234, 239, 247, 253, 259, 263, 264, 266, 268, 280, 282, 283, 312, 316, 332, 334, 341, 347, 355, 358, 359, 377, 384, 389, 391, 404, 410, 446, 461, 462, 463, 471, 472, 473, 474, 475, 479], "importerror": [23, 67, 100, 102, 210, 247, 265, 276, 280, 296, 299, 331, 338, 349, 358, 384, 406, 419, 428, 432, 446, 452, 459, 461, 464, 470, 472, 473, 475, 476, 478, 479], "pyerr_setimporterrorsubclass": [23, 56, 475], "subclass": [23, 28, 42, 46, 48, 53, 57, 58, 60, 62, 67, 73, 74, 86, 89, 97, 98, 99, 103, 107, 114, 118, 120, 124, 130, 131, 136, 137, 142, 148, 153, 154, 155, 158, 164, 169, 172, 173, 178, 179, 180, 183, 184, 186, 190, 196, 200, 202, 203, 205, 208, 210, 213, 215, 222, 223, 239, 242, 245, 247, 248, 250, 252, 253, 255, 256, 259, 264, 265, 266, 268, 280, 281, 289, 290, 293, 296, 302, 304, 315, 316, 327, 328, 329, 331, 332, 334, 335, 337, 338, 341, 342, 345, 349, 354, 358, 361, 365, 371, 372, 380, 381, 382, 384, 385, 390, 391, 393, 395, 396, 398, 403, 405, 406, 408, 409, 410, 411, 413, 415, 419, 421, 423, 425, 426, 432, 436, 439, 448, 451, 458, 460, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pyerr_syntaxlocationobject": [23, 479], "lineno": [23, 67, 96, 120, 142, 164, 182, 184, 185, 188, 190, 210, 214, 215, 216, 219, 252, 259, 261, 262, 264, 270, 282, 283, 294, 296, 305, 309, 311, 312, 316, 328, 358, 359, 377, 378, 384, 396, 427, 451, 468, 474, 475, 477, 479], "col_offset": [23, 67, 120, 188, 261, 477, 479], "syntaxerror": [23, 65, 67, 78, 103, 120, 154, 156, 165, 190, 210, 222, 244, 316, 358, 374, 377, 382, 423, 425, 427, 431, 432, 438, 439, 442, 445, 446, 458, 459, 460, 469, 470, 471, 473, 474, 475, 476, 479], "subsystem": [23, 94, 100, 247, 345, 365, 457, 461, 463, 465, 477, 479], "think": [23, 59, 63, 74, 84, 89, 94, 98, 100, 103, 106, 108, 190, 198, 222, 249, 258, 264, 289, 296, 382, 385, 386, 424, 426, 428, 460, 463, 464], "pyerr_syntaxlocationex": [23, 56, 479], "pyerr_syntaxloc": [23, 56], "omit": [23, 57, 59, 67, 74, 89, 100, 101, 103, 115, 118, 120, 124, 151, 164, 172, 173, 174, 180, 187, 190, 197, 198, 199, 201, 210, 222, 227, 231, 242, 244, 245, 249, 255, 256, 262, 263, 268, 273, 275, 280, 285, 289, 290, 294, 296, 302, 311, 316, 317, 325, 328, 329, 331, 332, 334, 337, 341, 342, 354, 361, 372, 377, 379, 380, 382, 384, 385, 396, 397, 405, 407, 409, 410, 417, 422, 423, 424, 426, 427, 431, 432, 451, 457, 461, 462, 463, 465, 466, 472, 473, 475, 476, 479], "pyerr_badinternalcal": [23, 56], "pyexc_systemerror": [23, 56], "mirror": [23, 67, 107, 220, 264, 265, 266, 359, 365, 373, 383, 411, 451, 462, 479], "problem": [23, 25, 32, 34, 58, 62, 67, 72, 75, 83, 84, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 104, 106, 112, 124, 139, 150, 152, 155, 156, 164, 166, 172, 180, 183, 187, 190, 193, 196, 200, 202, 204, 227, 242, 244, 247, 259, 263, 264, 265, 280, 281, 289, 290, 296, 305, 311, 330, 334, 337, 338, 341, 344, 347, 354, 358, 360, 382, 385, 386, 398, 403, 406, 409, 423, 431, 439, 440, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 476, 477, 479], "machineri": [23, 44, 62, 67, 72, 86, 92, 100, 155, 206, 208, 222, 248, 252, 265, 277, 299, 338, 349, 381, 398, 402, 419, 424, 428, 451, 457, 459, 460, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479], "nor": [23, 32, 33, 62, 74, 75, 83, 88, 93, 97, 107, 131, 141, 142, 155, 185, 188, 239, 240, 264, 267, 272, 280, 289, 290, 294, 296, 299, 316, 327, 335, 337, 338, 341, 349, 372, 376, 382, 384, 399, 421, 422, 424, 426, 451, 452, 470, 471, 473, 475, 476, 479], "intent": [23, 30, 71, 72, 89, 100, 178, 180, 193, 202, 244, 272, 285, 290, 349, 382, 384, 385, 403, 415, 422, 423, 424, 461, 462, 464, 466, 472, 473, 479], "pyerr_warnex": [23, 56, 396, 463], "stack_level": 23, "forth": [23, 84, 91, 103, 104, 157, 290, 316, 325, 341, 424, 458, 460, 461, 463], "pyexc_warn": [23, 56], "pyexc_except": [23, 56], "pyexc_runtimewarn": [23, 56], "command": [23, 32, 33, 65, 67, 71, 72, 76, 78, 84, 88, 99, 100, 101, 102, 106, 108, 110, 112, 116, 117, 124, 135, 140, 149, 154, 161, 174, 182, 184, 185, 188, 189, 190, 203, 211, 219, 222, 227, 242, 245, 248, 251, 253, 261, 265, 269, 280, 282, 285, 292, 293, 295, 298, 302, 305, 306, 310, 312, 321, 324, 328, 329, 332, 338, 341, 347, 349, 350, 355, 359, 363, 364, 365, 371, 372, 378, 380, 395, 396, 399, 403, 409, 416, 417, 424, 425, 432, 444, 447, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 474, 476, 477, 478, 479, 480], "pyerr_warnexplicitobject": 23, "straightforward": [23, 72, 83, 84, 98, 100, 106, 155, 164, 173, 256, 265, 289, 325, 334, 380, 385, 386, 460, 461, 464, 471, 472, 479], "warn_explicit": [23, 67, 312, 396, 475, 479], "pyerr_warnexplicit": [23, 56, 479], "pyerr_warnformat": [23, 56], "pyerr_resourcewarn": [23, 56, 475, 479], "resourcewarn": [23, 67, 123, 184, 210, 224, 290, 345, 358, 384, 396, 446, 471, 475, 479], "warningmessag": [23, 475, 479], "pyerr_set": 23, "pyerr_restor": [23, 56, 62, 74, 470, 479], "specif": [23, 33, 34, 41, 44, 48, 50, 57, 59, 60, 62, 65, 66, 67, 72, 75, 76, 84, 87, 89, 92, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 113, 118, 120, 124, 130, 131, 143, 149, 151, 152, 153, 158, 164, 166, 169, 172, 173, 174, 178, 180, 181, 183, 190, 191, 192, 193, 199, 200, 202, 203, 205, 207, 208, 209, 210, 212, 218, 219, 222, 223, 225, 227, 232, 237, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 263, 264, 265, 266, 268, 272, 278, 280, 285, 290, 292, 293, 294, 296, 305, 311, 312, 318, 319, 324, 325, 326, 328, 329, 332, 334, 335, 337, 338, 339, 341, 344, 349, 350, 351, 354, 355, 358, 359, 360, 361, 362, 364, 365, 368, 370, 373, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 396, 397, 398, 400, 403, 406, 407, 409, 413, 415, 418, 419, 421, 422, 423, 424, 428, 430, 431, 432, 442, 451, 457, 458, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479], "pyerr_exceptionmatch": [23, 34, 56], "shown": [23, 41, 72, 76, 89, 91, 93, 98, 99, 100, 101, 102, 107, 108, 118, 166, 178, 183, 185, 187, 188, 190, 200, 210, 211, 244, 264, 265, 289, 294, 305, 310, 316, 322, 342, 345, 362, 371, 372, 377, 380, 384, 385, 386, 390, 396, 398, 424, 457, 464, 474, 475, 476, 477, 478, 479], "pyerr_givenexceptionmatch": [23, 56], "violat": [23, 41, 60, 62, 93, 173, 180, 185, 200, 205, 212, 245, 296, 302, 338, 341, 397, 424, 475, 479], "subtupl": 23, "search": [23, 30, 32, 33, 34, 58, 63, 67, 74, 83, 84, 92, 98, 99, 106, 112, 139, 145, 149, 155, 157, 160, 173, 190, 193, 208, 213, 222, 227, 245, 247, 251, 253, 262, 263, 264, 265, 267, 275, 276, 277, 285, 290, 293, 294, 296, 299, 305, 308, 309, 310, 328, 329, 331, 337, 341, 345, 349, 359, 364, 365, 367, 371, 380, 384, 391, 392, 399, 406, 408, 409, 411, 416, 418, 419, 421, 423, 424, 425, 426, 429, 432, 437, 446, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479], "pyerr_getraisedexcept": [23, 56, 470, 479], "catch": [23, 41, 67, 84, 91, 94, 100, 102, 106, 107, 118, 120, 137, 164, 172, 190, 210, 241, 252, 264, 289, 290, 312, 319, 328, 330, 337, 345, 358, 382, 384, 391, 404, 424, 426, 458, 461, 463, 464, 465, 466, 470, 471, 472, 473, 475, 478, 479], "temporarili": [23, 34, 67, 72, 89, 100, 107, 108, 148, 166, 183, 190, 227, 247, 263, 264, 312, 329, 341, 345, 358, 363, 372, 378, 384, 385, 386, 423, 457, 464, 470, 475, 476, 479], "pyerr_setraisedexcept": [23, 56, 470, 479], "pyerr_gethandledexcept": [23, 56, 469, 479], "pyerr_fetch": [23, 56, 62, 74, 470, 473, 479], "ptraceback": 23, "invalid": [23, 28, 33, 58, 60, 62, 63, 67, 72, 78, 84, 86, 88, 92, 93, 97, 99, 103, 106, 107, 113, 116, 124, 144, 154, 156, 157, 160, 173, 180, 181, 183, 193, 196, 198, 200, 202, 205, 206, 208, 209, 210, 213, 223, 227, 231, 235, 239, 241, 244, 247, 252, 259, 265, 268, 272, 280, 289, 290, 292, 296, 306, 308, 316, 319, 325, 326, 330, 334, 338, 341, 342, 345, 354, 358, 361, 362, 372, 374, 382, 384, 390, 396, 397, 398, 401, 406, 415, 421, 423, 424, 427, 432, 437, 439, 445, 451, 458, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479], "away": [23, 27, 32, 34, 75, 84, 89, 94, 99, 118, 163, 174, 180, 183, 190, 210, 244, 247, 252, 272, 280, 281, 289, 290, 305, 316, 448, 460, 461, 466, 473, 474, 479], "pyerr_normalizeexcept": [23, 56, 479], "tb": [23, 100, 188, 210, 244, 377, 378, 381, 386, 424, 463, 464, 470, 473, 479], "avoid": [23, 32, 33, 41, 60, 62, 67, 71, 72, 74, 75, 84, 87, 89, 91, 93, 94, 98, 99, 102, 103, 104, 106, 118, 124, 130, 131, 135, 136, 137, 155, 157, 164, 166, 173, 174, 180, 183, 207, 210, 212, 222, 239, 242, 245, 252, 256, 259, 262, 265, 266, 268, 272, 275, 280, 281, 286, 289, 290, 296, 311, 316, 318, 329, 330, 334, 337, 339, 341, 345, 349, 354, 358, 360, 361, 362, 363, 365, 371, 381, 382, 384, 386, 398, 402, 405, 406, 407, 409, 413, 423, 424, 426, 427, 428, 431, 432, 452, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "circumst": [23, 41, 84, 91, 93, 99, 100, 149, 164, 210, 240, 264, 267, 289, 290, 319, 329, 391, 399, 424, 432, 462, 473, 477, 479], "unnorm": [23, 479], "instanti": [23, 62, 75, 93, 98, 99, 100, 107, 120, 124, 130, 131, 137, 149, 151, 153, 157, 173, 174, 178, 180, 187, 191, 193, 195, 200, 227, 239, 242, 245, 247, 264, 265, 266, 268, 280, 289, 293, 294, 296, 325, 326, 328, 332, 334, 335, 341, 358, 365, 372, 381, 382, 384, 385, 386, 399, 404, 406, 407, 410, 412, 424, 432, 436, 439, 463, 464, 470, 471, 474, 476, 477, 478, 479], "noth": [23, 32, 33, 34, 41, 57, 63, 71, 72, 74, 89, 99, 100, 103, 104, 107, 108, 113, 120, 130, 137, 138, 152, 155, 166, 174, 178, 180, 187, 188, 190, 195, 207, 208, 210, 223, 244, 245, 255, 263, 264, 265, 266, 268, 279, 280, 289, 296, 302, 316, 329, 330, 335, 337, 341, 343, 345, 355, 361, 365, 378, 382, 384, 395, 403, 413, 422, 424, 426, 431, 432, 437, 451, 460, 461, 464, 465, 470, 473, 474, 477, 478, 479], "delay": [23, 67, 83, 91, 100, 127, 137, 174, 219, 242, 244, 252, 266, 280, 285, 322, 330, 334, 338, 358, 380, 386, 391, 392, 424, 446, 464, 471, 475, 476, 477, 479], "improv": [23, 67, 72, 84, 88, 92, 98, 100, 103, 112, 118, 131, 137, 155, 164, 219, 231, 245, 247, 272, 296, 311, 337, 338, 345, 372, 406, 422, 424, 426, 452, 466, 479, 480], "perform": [23, 28, 32, 34, 38, 41, 58, 59, 62, 63, 67, 71, 74, 88, 89, 91, 94, 99, 100, 101, 106, 108, 110, 116, 118, 120, 124, 131, 137, 155, 158, 160, 164, 166, 172, 174, 178, 180, 183, 185, 188, 190, 196, 203, 206, 208, 210, 212, 217, 222, 223, 224, 239, 240, 242, 244, 245, 246, 247, 249, 256, 258, 259, 263, 264, 265, 266, 269, 280, 281, 285, 290, 295, 297, 302, 305, 311, 316, 318, 328, 329, 330, 331, 333, 334, 335, 337, 338, 341, 342, 345, 349, 361, 362, 363, 367, 374, 380, 382, 384, 385, 390, 391, 395, 401, 411, 415, 416, 422, 424, 426, 428, 431, 432, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "implicit": [23, 33, 58, 62, 67, 72, 84, 89, 98, 100, 110, 112, 118, 124, 131, 137, 141, 164, 166, 178, 181, 185, 187, 210, 222, 245, 247, 252, 255, 265, 278, 292, 294, 311, 316, 321, 330, 332, 334, 337, 341, 342, 344, 345, 382, 385, 386, 396, 398, 408, 423, 424, 426, 428, 432, 436, 439, 451, 465, 466, 471, 473, 474, 475, 476, 477, 479, 480], "__traceback__": [23, 210, 349, 377, 381, 424, 426, 432, 466, 469, 479], "snippet": [23, 93, 100, 137, 167, 241, 265, 328, 338, 361, 363, 457, 460, 461, 463, 474, 479], "pyexception_settraceback": [23, 56, 479], "fresh": [23, 62, 84, 89, 94, 155, 166, 252, 280, 304, 321, 358, 381, 428, 457, 460, 461, 479], "pyerr_sethandledexcept": [23, 56, 469, 479], "pyerr_getexcinfo": [23, 56, 469, 479], "info": [23, 62, 67, 72, 83, 92, 99, 100, 116, 118, 123, 135, 150, 155, 166, 180, 188, 222, 224, 227, 239, 240, 243, 248, 252, 253, 261, 264, 265, 266, 268, 280, 285, 299, 300, 304, 329, 346, 354, 365, 380, 382, 384, 391, 417, 418, 426, 448, 455, 459, 461, 463, 464, 465, 470, 471, 473, 477, 479], "kept": [23, 24, 32, 44, 58, 63, 84, 89, 98, 100, 112, 164, 173, 181, 183, 192, 196, 205, 208, 210, 211, 222, 240, 241, 244, 255, 258, 266, 268, 308, 309, 316, 331, 335, 338, 382, 385, 398, 432, 458, 460, 465, 466, 468, 470, 471, 472, 473, 478, 479], "pyerr_setexcinfo": [23, 56, 469, 479], "deriv": [23, 32, 48, 60, 67, 75, 87, 108, 118, 120, 142, 154, 155, 171, 173, 174, 175, 178, 180, 194, 196, 198, 199, 200, 210, 223, 227, 241, 245, 247, 248, 252, 255, 258, 259, 264, 265, 269, 285, 289, 290, 293, 305, 309, 310, 311, 325, 335, 338, 342, 349, 365, 380, 382, 384, 391, 394, 396, 403, 404, 407, 412, 415, 416, 422, 424, 427, 428, 431, 436, 439, 458, 461, 462, 463, 464, 465, 466, 472, 473, 475, 476, 479], "interact": [23, 32, 33, 41, 58, 62, 65, 67, 71, 78, 83, 84, 86, 92, 100, 103, 108, 112, 113, 118, 120, 124, 142, 153, 163, 174, 177, 183, 184, 188, 191, 204, 210, 211, 215, 222, 240, 244, 251, 252, 254, 255, 261, 280, 281, 289, 290, 292, 294, 304, 305, 310, 312, 317, 320, 331, 338, 345, 347, 349, 350, 354, 355, 365, 371, 372, 377, 380, 384, 391, 396, 409, 416, 418, 424, 427, 428, 430, 431, 432, 444, 451, 457, 460, 461, 462, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "main": [23, 32, 33, 41, 44, 58, 62, 65, 67, 71, 72, 74, 75, 83, 84, 89, 91, 92, 98, 99, 100, 101, 112, 113, 118, 120, 121, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 149, 153, 154, 163, 164, 166, 167, 174, 182, 184, 185, 187, 190, 191, 193, 196, 197, 198, 201, 202, 203, 205, 223, 225, 227, 237, 244, 247, 248, 249, 252, 255, 264, 265, 268, 280, 285, 289, 290, 293, 296, 306, 312, 319, 321, 330, 331, 335, 337, 341, 344, 349, 350, 351, 352, 354, 358, 361, 363, 365, 368, 371, 372, 378, 380, 382, 384, 385, 386, 391, 395, 398, 403, 407, 409, 411, 415, 416, 417, 424, 425, 428, 446, 447, 448, 451, 454, 457, 460, 461, 463, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "sent": [23, 67, 89, 91, 94, 99, 104, 106, 107, 120, 124, 131, 135, 166, 174, 197, 232, 239, 241, 242, 244, 245, 256, 264, 265, 266, 280, 285, 290, 294, 302, 319, 330, 332, 334, 335, 337, 338, 345, 362, 363, 382, 391, 403, 415, 416, 422, 457, 458, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 477, 479], "immedi": [23, 24, 28, 30, 32, 44, 62, 65, 72, 78, 83, 84, 89, 91, 92, 94, 102, 103, 113, 124, 131, 133, 137, 139, 151, 153, 166, 172, 173, 174, 181, 183, 190, 202, 210, 211, 213, 215, 223, 229, 239, 244, 252, 255, 263, 264, 268, 279, 280, 281, 290, 292, 294, 300, 309, 316, 328, 330, 334, 337, 338, 341, 342, 345, 349, 355, 356, 357, 361, 362, 365, 372, 380, 382, 384, 385, 386, 391, 396, 402, 406, 409, 411, 412, 415, 416, 423, 424, 425, 426, 428, 451, 460, 461, 462, 464, 465, 470, 472, 473, 475, 476, 477, 478, 479], "invoc": [23, 28, 55, 67, 72, 89, 96, 161, 166, 173, 207, 271, 280, 305, 361, 377, 384, 395, 403, 411, 423, 424, 436, 451, 462, 471, 473, 477, 479], "press": [23, 91, 100, 124, 152, 174, 244, 279, 294, 320, 365, 371, 372, 380, 384, 418, 465, 471, 479], "ctrl": [23, 67, 85, 91, 100, 116, 124, 133, 165, 175, 280, 294, 330, 335, 337, 437, 451, 458, 463, 471, 477, 479], "sigint": [23, 67, 113, 133, 280, 294, 313, 330, 345, 384, 468, 471, 477, 479], "keyboardinterrupt": [23, 67, 99, 100, 113, 133, 137, 154, 210, 280, 313, 330, 384, 403, 416, 434, 439, 446, 463, 464, 465, 466, 475, 476, 477, 479], "pyerr_setinterrupt": [23, 56], "simul": [23, 67, 89, 91, 92, 100, 105, 113, 124, 131, 134, 174, 231, 296, 315, 330, 340, 344, 359, 380, 398, 459, 460, 473], "arriv": [23, 113, 190, 240, 242, 280, 315, 330, 335, 338, 362, 438, 458], "pyerr_setinterruptex": [23, 56, 468], "signum": [23, 83, 113, 124, 211, 290, 330, 479], "sig_dfl": [23, 67, 113, 330, 345, 479], "sig_ign": [23, 67, 113, 330, 345, 479], "outsid": [23, 58, 84, 89, 92, 94, 99, 100, 103, 104, 108, 124, 130, 137, 148, 155, 160, 167, 173, 174, 180, 183, 193, 196, 202, 205, 210, 242, 244, 249, 259, 296, 310, 311, 316, 322, 329, 334, 338, 341, 342, 344, 354, 358, 361, 362, 363, 372, 380, 382, 396, 409, 411, 418, 423, 424, 431, 432, 436, 461, 462, 465, 470, 471, 475, 476, 477, 478, 479], "pysignal_setwakeupfd": [23, 464], "fd": [23, 24, 67, 83, 124, 128, 131, 140, 174, 212, 219, 255, 279, 290, 306, 325, 326, 329, 330, 334, 357, 379, 380, 464, 479], "whenev": [23, 51, 60, 62, 65, 72, 84, 92, 93, 94, 99, 100, 108, 118, 131, 174, 183, 187, 204, 222, 244, 249, 252, 264, 266, 268, 280, 289, 293, 296, 311, 325, 330, 337, 338, 341, 349, 358, 372, 380, 384, 385, 409, 421, 424, 428, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 479], "disabl": [23, 28, 32, 33, 41, 62, 67, 72, 93, 99, 100, 103, 108, 110, 116, 118, 124, 133, 142, 149, 161, 164, 172, 174, 182, 183, 187, 190, 198, 211, 215, 222, 223, 224, 239, 247, 252, 259, 264, 265, 266, 280, 285, 289, 290, 294, 296, 305, 312, 316, 317, 324, 325, 328, 330, 331, 332, 334, 336, 337, 338, 341, 349, 356, 358, 372, 380, 382, 384, 385, 391, 396, 398, 401, 409, 421, 424, 428, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "featur": [23, 32, 33, 48, 50, 53, 60, 62, 65, 67, 74, 78, 83, 84, 86, 89, 91, 92, 93, 94, 99, 100, 103, 106, 108, 118, 141, 149, 150, 152, 155, 164, 169, 173, 174, 176, 177, 178, 180, 184, 190, 191, 205, 207, 210, 222, 223, 240, 244, 247, 254, 259, 264, 267, 280, 289, 290, 294, 296, 299, 316, 321, 329, 332, 337, 338, 341, 345, 347, 349, 354, 358, 361, 365, 376, 380, 384, 385, 391, 396, 398, 403, 405, 406, 407, 410, 411, 412, 418, 424, 426, 428, 430, 431, 432, 451, 452, 457, 458, 459, 460, 461, 462, 464, 466, 467, 471, 479, 480], "set_wakeup_fd": [23, 67, 330, 464, 474, 476, 479], "socket": [23, 67, 79, 86, 94, 95, 97, 99, 103, 106, 122, 125, 128, 129, 140, 155, 167, 168, 184, 204, 209, 210, 220, 232, 239, 242, 244, 245, 251, 253, 254, 255, 256, 257, 264, 265, 266, 280, 281, 285, 290, 293, 302, 304, 319, 325, 326, 330, 332, 335, 339, 354, 355, 365, 398, 403, 409, 424, 435, 448, 452, 458, 459, 460, 461, 462, 463, 464, 465, 470, 479], "pyerr_newexcept": [23, 56, 72, 463, 465, 471], "classnam": [23, 84, 120, 158, 365, 371, 385, 386, 423, 436], "__module__": [23, 27, 62, 67, 87, 92, 93, 157, 178, 184, 194, 208, 222, 223, 252, 276, 358, 382, 424, 461, 468, 474, 475, 479], "dot": [23, 30, 44, 62, 63, 67, 75, 77, 86, 89, 92, 96, 99, 100, 103, 108, 120, 190, 219, 222, 240, 244, 247, 256, 258, 261, 263, 264, 265, 268, 273, 285, 299, 310, 316, 320, 329, 334, 341, 349, 354, 356, 365, 373, 380, 384, 385, 386, 416, 418, 419, 423, 424, 428, 430, 432, 436, 443, 451, 457, 464, 467, 468, 474, 479], "pyerr_newexceptionwithdoc": [23, 56, 465, 471], "docstr": [23, 27, 33, 44, 57, 59, 62, 65, 67, 74, 83, 86, 89, 100, 120, 153, 157, 184, 219, 222, 223, 244, 252, 294, 310, 358, 374, 381, 382, 384, 403, 423, 424, 431, 432, 436, 437, 447, 451, 458, 459, 460, 461, 462, 463, 464, 465, 469, 471, 473, 474, 475, 476, 477, 478, 479], "pyexception_gettraceback": [23, 56], "ex": [23, 33, 41, 100, 317, 334, 341, 415, 427, 451, 463, 470, 474, 475, 478, 479], "pyexception_getcontext": [23, 56], "__context__": [23, 67, 210, 312, 377, 432, 466, 472, 479], "pyexception_setcontext": [23, 56], "sure": [23, 44, 62, 63, 67, 71, 74, 75, 83, 84, 89, 91, 94, 99, 100, 103, 108, 118, 149, 153, 155, 164, 173, 183, 210, 222, 232, 247, 263, 280, 289, 290, 293, 326, 337, 338, 356, 358, 361, 365, 393, 396, 397, 409, 417, 424, 457, 460, 461, 463, 464, 466, 471, 472, 479], "pyexception_getcaus": [23, 56], "__cause__": [23, 67, 188, 210, 312, 377, 432, 466, 479], "pyexception_setcaus": [23, 56], "__suppress_context__": [23, 67, 210, 312, 377, 432], "pyexception_getarg": [23, 56, 470, 479], "pyexception_setarg": [23, 56, 470, 479], "pyunstable_exc_prepreraisestar": [23, 479], "orig": [23, 200, 392], "unhandl": [23, 65, 113, 149, 154, 166, 190, 225, 244, 349, 361, 377, 391, 424, 439, 466, 470, 479], "claus": [23, 67, 94, 100, 113, 120, 137, 166, 210, 252, 280, 294, 311, 337, 341, 349, 358, 424, 425, 426, 431, 432, 437, 439, 458, 463, 464, 471, 473, 476, 477, 478, 479], "rerais": [23, 166, 188, 280, 341, 423, 424, 479], "exceptiongroup": [23, 67, 124, 137, 166, 188, 210, 334, 377, 423, 439, 469, 470, 479], "pyunicodedecodeerror_cr": [23, 56], "pyunicodedecodeerror_getencod": [23, 56], "pyunicodeencodeerror_getencod": [23, 56], "pyunicodedecodeerror_getobject": [23, 56], "pyunicodeencodeerror_getobject": [23, 56], "pyunicodetranslateerror_getobject": [23, 56], "pyunicodedecodeerror_getstart": [23, 56], "pyunicodeencodeerror_getstart": [23, 56], "pyunicodetranslateerror_getstart": [23, 56], "pyunicodedecodeerror_setstart": [23, 56], "pyunicodeencodeerror_setstart": [23, 56], "pyunicodetranslateerror_setstart": [23, 56], "pyunicodedecodeerror_getend": [23, 56], "pyunicodeencodeerror_getend": [23, 56], "pyunicodetranslateerror_getend": [23, 56], "pyunicodedecodeerror_setend": [23, 56], "pyunicodeencodeerror_setend": [23, 56], "pyunicodetranslateerror_setend": [23, 56], "pyunicodedecodeerror_getreason": [23, 56], "pyunicodeencodeerror_getreason": [23, 56], "pyunicodetranslateerror_getreason": [23, 56], "pyunicodedecodeerror_setreason": [23, 56], "pyunicodeencodeerror_setreason": [23, 56], "pyunicodetranslateerror_setreason": [23, 56], "core": [23, 28, 32, 33, 58, 67, 72, 75, 99, 102, 103, 116, 124, 160, 164, 202, 232, 247, 248, 258, 263, 266, 289, 290, 297, 305, 310, 319, 330, 341, 358, 361, 365, 381, 385, 395, 406, 409, 421, 424, 432, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 480], "track": [23, 28, 41, 62, 67, 84, 93, 99, 102, 103, 124, 149, 155, 164, 166, 178, 182, 183, 184, 190, 251, 266, 272, 280, 281, 289, 290, 293, 296, 316, 325, 349, 361, 362, 365, 367, 384, 385, 391, 406, 422, 440, 458, 459, 462, 465, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479], "depth": [23, 90, 99, 120, 140, 160, 164, 174, 176, 181, 188, 193, 202, 210, 232, 267, 296, 304, 318, 337, 341, 349, 354, 358, 371, 377, 381, 384, 408, 409, 458, 459, 460, 474, 475, 476, 479], "use_stackcheck": [23, 58, 479], "pyos_checkstack": [23, 56, 58, 479], "reach": [23, 24, 51, 56, 65, 72, 74, 83, 84, 94, 100, 103, 107, 124, 135, 142, 147, 151, 156, 222, 239, 255, 258, 264, 267, 290, 294, 310, 311, 325, 328, 334, 335, 337, 341, 345, 377, 391, 409, 411, 423, 424, 426, 428, 432, 437, 457, 458, 459, 460, 461, 463, 464, 465, 471, 473, 474, 476, 477, 479], "recursionerror": [23, 67, 120, 210, 259, 296, 304, 349, 439, 474, 475, 479], "concaten": [23, 52, 53, 67, 75, 103, 118, 119, 147, 149, 154, 155, 184, 188, 222, 231, 232, 264, 267, 268, 290, 293, 294, 311, 316, 328, 332, 334, 338, 341, 342, 354, 377, 382, 420, 424, 426, 439, 442, 445, 457, 461, 462, 468, 479], "tp_repr": [23, 62, 74], "protect": [23, 32, 72, 74, 75, 100, 137, 164, 173, 174, 178, 220, 227, 232, 245, 255, 267, 275, 280, 304, 321, 328, 335, 338, 339, 354, 385, 396, 417, 424, 451, 460, 463, 470, 474, 479], "cycl": [23, 28, 60, 62, 67, 72, 75, 77, 84, 86, 94, 96, 98, 100, 108, 112, 137, 207, 221, 224, 229, 244, 252, 258, 281, 349, 358, 361, 372, 398, 423, 424, 432, 459, 461, 463, 464, 465, 471, 473, 477, 478, 479, 480], "facilit": [23, 89, 244, 265, 316, 317, 332, 396, 473, 476, 479], "reprlib": [23, 67, 179, 251, 448, 466, 479], "recursive_repr": [23, 67, 179, 318, 471, 479], "py_reprent": [23, 56], "detect": [23, 28, 33, 41, 58, 62, 67, 72, 74, 75, 84, 89, 92, 94, 103, 107, 110, 131, 138, 155, 158, 172, 174, 178, 180, 183, 185, 188, 191, 200, 203, 210, 244, 247, 252, 268, 272, 289, 290, 292, 293, 296, 304, 311, 317, 318, 328, 330, 332, 334, 337, 341, 345, 349, 354, 358, 360, 361, 374, 378, 384, 385, 391, 399, 403, 423, 424, 425, 426, 431, 451, 452, 457, 458, 459, 460, 461, 464, 465, 470, 471, 473, 474, 475, 476, 477, 479], "typic": [23, 32, 33, 44, 48, 57, 60, 62, 72, 76, 84, 89, 92, 93, 98, 99, 100, 102, 107, 108, 112, 118, 120, 124, 137, 147, 149, 155, 164, 170, 183, 187, 190, 193, 200, 202, 215, 222, 223, 225, 227, 242, 247, 248, 249, 250, 252, 255, 263, 264, 265, 266, 268, 272, 273, 278, 280, 289, 290, 293, 294, 296, 304, 305, 317, 321, 329, 331, 338, 341, 342, 344, 345, 349, 351, 354, 355, 361, 362, 363, 365, 367, 372, 380, 381, 382, 384, 385, 391, 394, 395, 396, 401, 403, 406, 407, 409, 410, 411, 412, 417, 419, 424, 426, 428, 451, 457, 461, 462, 465, 466, 470, 471, 473, 474, 476, 477, 479], "py_reprleav": [23, 56], "pyexc_": 23, "complet": [23, 32, 33, 41, 58, 63, 65, 67, 72, 74, 75, 76, 86, 89, 91, 93, 94, 98, 100, 103, 104, 108, 115, 118, 124, 131, 134, 135, 137, 138, 148, 149, 152, 153, 154, 155, 156, 160, 163, 164, 166, 174, 178, 180, 183, 187, 190, 191, 193, 199, 200, 202, 203, 204, 205, 208, 210, 212, 220, 223, 227, 230, 232, 242, 251, 252, 256, 257, 258, 259, 264, 265, 266, 268, 269, 273, 278, 280, 281, 289, 290, 292, 294, 296, 305, 313, 316, 319, 328, 329, 331, 334, 335, 337, 338, 339, 341, 345, 349, 350, 354, 357, 358, 359, 361, 364, 365, 371, 372, 374, 376, 377, 380, 382, 384, 386, 390, 391, 397, 403, 404, 406, 407, 409, 412, 423, 424, 425, 426, 428, 430, 441, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pyexc_baseexcept": [23, 56], "baseexcept": [23, 67, 125, 137, 163, 210, 264, 349, 377, 428, 432, 439, 446, 463, 464, 466, 469, 476, 477, 479], "pyexc_arithmeticerror": [23, 56], "arithmeticerror": [23, 67, 183, 210, 446], "pyexc_assertionerror": [23, 56], "assertionerror": [23, 67, 188, 210, 280, 358, 384, 385, 386, 403, 432, 446, 469, 478, 479], "pyexc_attributeerror": [23, 56, 74, 75], "attributeerror": [23, 48, 57, 67, 87, 92, 100, 149, 166, 173, 178, 210, 222, 223, 247, 252, 258, 265, 280, 290, 296, 299, 316, 330, 341, 358, 363, 381, 384, 385, 386, 406, 407, 423, 424, 426, 432, 446, 452, 458, 460, 465, 469, 471, 472, 473, 474, 476, 479], "pyexc_blockingioerror": [23, 56], "blockingioerror": [23, 67, 116, 209, 210, 255, 290, 338, 423, 446, 472, 479], "pyexc_brokenpipeerror": [23, 56], "brokenpipeerror": [23, 67, 135, 209, 210, 330, 446, 472, 479], "buffererror": [23, 67, 210, 296, 446, 479], "pyexc_childprocesserror": [23, 56], "childprocesserror": [23, 67, 209, 210, 290, 446, 472, 479], "pyexc_connectionabortederror": [23, 56], "connectionabortederror": [23, 67, 209, 210, 446, 472], "pyexc_connectionerror": [23, 56], "connectionerror": [23, 67, 210, 239, 439, 446, 472, 474], "pyexc_connectionrefusederror": [23, 56], "connectionrefusederror": [23, 67, 209, 210, 446, 472], "pyexc_connectionreseterror": [23, 56], "connectionreseterror": [23, 67, 135, 209, 210, 239, 446, 472, 479], "pyexc_eoferror": [23, 56], "eoferror": [23, 24, 40, 67, 119, 125, 147, 151, 154, 210, 220, 222, 231, 267, 271, 280, 296, 332, 355, 446, 466], "pyexc_fileexistserror": [23, 56], "fileexistserror": [23, 67, 197, 209, 210, 222, 255, 290, 293, 308, 329, 354, 418, 446, 472, 473, 479], "pyexc_filenotfounderror": [23, 56], "filenotfounderror": [23, 67, 118, 138, 166, 209, 210, 250, 265, 283, 290, 293, 317, 439, 446, 472, 474, 479], "pyexc_floatingpointerror": [23, 56], "floatingpointerror": [23, 67, 210, 446], "pyexc_generatorexit": [23, 56], "generatorexit": [23, 67, 94, 210, 424, 426, 446, 463, 464, 479], "pyexc_importerror": [23, 56, 98], "pyexc_indentationerror": [23, 56], "indentationerror": [23, 67, 85, 210, 446, 458, 479], "pyexc_indexerror": [23, 56], "indexerror": [23, 36, 37, 46, 59, 67, 155, 157, 173, 193, 210, 233, 258, 280, 296, 315, 316, 341, 342, 377, 385, 424, 426, 432, 445, 446, 458, 471, 479], "pyexc_interruptederror": [23, 56], "interruptederror": [23, 67, 209, 210, 222, 290, 325, 330, 334, 446, 472, 474, 479], "pyexc_isadirectoryerror": [23, 56], "isadirectoryerror": [23, 67, 209, 210, 290, 446, 472, 479], "pyexc_keyerror": [23, 34, 56], "pyexc_keyboardinterrupt": [23, 56], "pyexc_lookuperror": [23, 56], "pyexc_modulenotfounderror": [23, 56], "modulenotfounderror": [23, 67, 210, 247, 428, 475, 476, 479], "pyexc_nameerror": [23, 56], "nameerror": [23, 26, 67, 173, 210, 247, 425, 426, 432, 439, 445, 446, 458, 459, 460, 463, 470, 479], "pyexc_notadirectoryerror": [23, 56], "notadirectoryerror": [23, 67, 209, 210, 290, 446, 472, 479], "pyexc_notimplementederror": [23, 56], "notimplementederror": [23, 67, 131, 165, 180, 197, 210, 223, 240, 247, 264, 280, 290, 293, 315, 338, 382, 401, 418, 446, 473, 475, 479], "pyexc_oserror": [23, 56, 72], "pyexc_overflowerror": [23, 56], "overflowerror": [23, 25, 38, 46, 67, 113, 154, 156, 180, 183, 190, 210, 222, 272, 301, 334, 337, 341, 361, 362, 424, 446, 460, 461, 464, 465, 467, 468, 472, 473, 479], "pyexc_permissionerror": [23, 56], "permissionerror": [23, 67, 209, 210, 247, 290, 319, 336, 356, 358, 446, 472, 475, 479], "pyexc_processlookuperror": [23, 56], "processlookuperror": [23, 67, 209, 210, 319, 446, 472], "pyexc_recursionerror": [23, 56, 474], "pyexc_referenceerror": [23, 56], "referenceerror": [23, 67, 210, 398, 446, 459, 460], "runtimeerror": [23, 67, 94, 104, 113, 119, 124, 125, 130, 135, 136, 137, 138, 163, 166, 167, 210, 215, 222, 255, 258, 265, 280, 290, 293, 316, 332, 341, 345, 349, 352, 358, 361, 382, 402, 418, 424, 426, 432, 439, 446, 461, 462, 463, 465, 470, 472, 474, 475, 476, 477, 479], "pyexc_stopasynciter": [23, 56], "stopasynciter": [23, 67, 86, 188, 210, 222, 385, 423, 424, 426, 432, 479], "pyexc_stopiter": [23, 56], "stopiter": [23, 62, 67, 74, 86, 94, 111, 157, 188, 210, 222, 258, 271, 280, 341, 385, 424, 426, 432, 436, 446, 460, 461, 463, 464, 468, 475, 476, 479], "pyexc_syntaxerror": [23, 56, 427], "pyexc_systemexit": [23, 56], "pyexc_taberror": [23, 56], "taberror": [23, 67, 85, 210, 431, 446, 458, 470], "pyexc_timeouterror": [23, 56], "timeouterror": [23, 67, 125, 137, 161, 163, 209, 210, 280, 332, 334, 446, 468, 472, 479], "pyexc_unboundlocalerror": [23, 56], "unboundlocalerror": [23, 67, 188, 210, 425, 446, 458, 479], "pyexc_unicodedecodeerror": [23, 56], "pyexc_unicodeencodeerror": [23, 56], "pyexc_unicodeerror": [23, 56], "pyexc_unicodetranslateerror": [23, 56], "pyexc_valueerror": [23, 56, 72, 465], "pyexc_zerodivisionerror": [23, 56, 72], "zerodivisionerror": [23, 67, 91, 100, 180, 183, 210, 218, 280, 294, 330, 337, 425, 426, 432, 439, 446, 447, 461, 467, 469, 471, 474, 478, 479], "3151": [23, 67, 210, 319, 325, 334, 461, 480], "alias": [23, 67, 93, 118, 120, 148, 155, 184, 192, 208, 210, 227, 263, 294, 300, 334, 337, 341, 372, 380, 383, 425, 431, 432, 436, 452, 457, 459, 461, 464, 468, 470, 471, 472, 473, 475, 478, 479], "pyexc_environmenterror": [23, 56], "pyexc_ioerror": [23, 56], "separ": [23, 32, 33, 54, 58, 62, 63, 67, 76, 78, 83, 84, 87, 89, 91, 93, 98, 99, 100, 102, 103, 105, 106, 108, 110, 118, 125, 130, 134, 137, 144, 148, 149, 152, 153, 155, 164, 166, 172, 173, 174, 175, 180, 183, 187, 190, 193, 198, 199, 202, 205, 208, 210, 217, 222, 223, 227, 242, 244, 245, 247, 249, 255, 256, 259, 263, 264, 265, 266, 267, 268, 273, 280, 285, 289, 290, 293, 294, 299, 300, 304, 310, 311, 316, 321, 328, 331, 332, 334, 335, 337, 338, 341, 342, 344, 345, 354, 357, 358, 360, 361, 363, 364, 365, 368, 376, 382, 384, 385, 386, 390, 391, 394, 396, 398, 399, 403, 418, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 437, 448, 451, 452, 457, 458, 460, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "preprocessor": [23, 41, 56, 67, 89, 108, 328, 454, 458, 465, 479], "ms_window": [23, 33], "pyexc_byteswarn": [23, 56], "byteswarn": [23, 33, 67, 210, 396, 446, 476, 479], "pyexc_deprecationwarn": [23, 56], "deprecationwarn": [23, 67, 103, 110, 130, 165, 185, 210, 249, 337, 344, 354, 358, 384, 396, 409, 424, 428, 431, 446, 451, 459, 461, 465, 468, 469, 470, 471, 473, 474, 475, 477, 479, 480], "pyexc_futurewarn": [23, 56], "futurewarn": [23, 67, 210, 316, 396, 446, 461, 462, 465, 470, 476, 479], "pyexc_importwarn": [23, 56], "importwarn": [23, 67, 185, 210, 384, 396, 428, 446, 463, 468, 470, 475, 479], "pyexc_pendingdeprecationwarn": [23, 56], "pendingdeprecationwarn": [23, 67, 110, 185, 210, 384, 396, 446, 461, 464, 465, 474, 475, 476, 477, 478, 479], "pyexc_resourcewarn": [23, 56], "runtimewarn": [23, 44, 67, 123, 124, 210, 334, 349, 384, 396, 446, 471, 477, 479], "pyexc_syntaxwarn": [23, 56], "syntaxwarn": [23, 67, 210, 316, 358, 396, 431, 446, 461, 469, 470, 475, 477, 479], "pyexc_unicodewarn": [23, 56], "unicodewarn": [23, 67, 210, 396, 446, 463, 471], "pyexc_userwarn": [23, 56], "userwarn": [23, 67, 210, 226, 358, 396, 446, 479], "minim": [24, 44, 67, 72, 75, 83, 89, 91, 100, 112, 120, 139, 149, 183, 187, 190, 211, 232, 245, 247, 251, 256, 270, 289, 296, 302, 316, 321, 330, 334, 336, 337, 358, 360, 375, 382, 391, 405, 452, 457, 458, 463, 475, 479], "emul": [24, 32, 67, 75, 78, 84, 92, 108, 154, 156, 174, 178, 186, 190, 212, 255, 263, 268, 280, 289, 290, 299, 306, 317, 329, 330, 345, 349, 355, 460, 461, 464, 471, 472, 475, 477, 479], "io": [24, 32, 33, 67, 70, 78, 84, 86, 102, 108, 116, 121, 122, 123, 124, 134, 137, 147, 155, 161, 166, 184, 185, 187, 193, 210, 212, 215, 216, 222, 231, 232, 239, 242, 248, 250, 251, 259, 267, 268, 285, 290, 296, 305, 306, 335, 338, 341, 345, 349, 354, 356, 358, 374, 375, 385, 395, 403, 407, 417, 418, 421, 424, 451, 455, 463, 464, 465, 466, 467, 468, 469, 470, 473, 475, 478, 479, 480], "pyfile_fromfd": [24, 56], "newlin": [24, 67, 78, 86, 100, 103, 116, 118, 120, 141, 144, 147, 154, 156, 172, 174, 187, 190, 193, 204, 215, 222, 231, 244, 247, 255, 259, 261, 262, 264, 266, 267, 268, 275, 285, 293, 296, 304, 316, 328, 334, 335, 341, 345, 352, 356, 360, 362, 363, 373, 374, 377, 378, 390, 396, 407, 415, 417, 418, 423, 427, 431, 433, 445, 447, 448, 451, 459, 462, 463, 464, 465, 466, 469, 473, 475, 476, 477, 479, 480], "closefd": [24, 185, 222, 255, 280, 466, 479], "open": [24, 32, 33, 40, 50, 65, 67, 72, 77, 83, 86, 89, 91, 94, 99, 102, 103, 106, 108, 110, 115, 116, 117, 118, 131, 134, 138, 140, 143, 146, 147, 149, 153, 155, 157, 164, 166, 172, 174, 180, 181, 185, 186, 187, 197, 204, 205, 209, 210, 211, 212, 215, 216, 220, 222, 227, 231, 232, 237, 239, 240, 242, 244, 245, 246, 250, 251, 252, 253, 255, 261, 262, 263, 264, 265, 266, 267, 268, 273, 274, 275, 277, 278, 280, 285, 290, 291, 292, 293, 295, 296, 298, 299, 302, 306, 310, 311, 317, 319, 323, 325, 327, 328, 330, 332, 333, 334, 337, 338, 339, 341, 345, 346, 347, 349, 352, 354, 355, 356, 358, 361, 364, 365, 371, 372, 374, 375, 377, 380, 382, 385, 386, 391, 393, 397, 399, 401, 403, 407, 409, 410, 412, 415, 417, 418, 421, 422, 423, 424, 431, 434, 436, 439, 442, 446, 447, 448, 451, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "comprehens": [24, 67, 83, 84, 86, 89, 98, 110, 147, 188, 232, 252, 261, 296, 341, 365, 425, 426, 427, 431, 436, 441, 453, 462, 463, 465, 466, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480], "pleas": [24, 32, 70, 87, 89, 98, 99, 100, 102, 103, 107, 118, 126, 135, 149, 164, 173, 181, 227, 239, 245, 247, 264, 265, 266, 285, 290, 302, 316, 319, 329, 332, 334, 337, 338, 345, 349, 354, 357, 380, 382, 385, 396, 403, 424, 426, 430, 437, 439, 453, 457, 458, 459, 461, 463, 466, 470, 472, 473, 474, 475, 476, 477, 478, 479], "pyobject_asfiledescriptor": [24, 56], "fileno": [24, 58, 67, 83, 100, 116, 140, 147, 161, 185, 212, 215, 216, 232, 239, 253, 255, 275, 280, 290, 292, 325, 326, 330, 334, 335, 338, 347, 355, 356, 357, 365, 460, 463, 473, 479], "pyfile_getlin": [24, 56], "readlin": [24, 33, 65, 67, 78, 83, 94, 98, 106, 116, 124, 134, 135, 138, 141, 143, 149, 153, 155, 167, 185, 187, 201, 204, 210, 215, 220, 222, 245, 251, 253, 255, 265, 275, 290, 293, 294, 296, 312, 328, 335, 359, 365, 374, 378, 385, 391, 395, 417, 418, 424, 434, 436, 439, 442, 443, 444, 451, 452, 458, 459, 460, 461, 463, 464, 465, 468, 471, 473, 476, 479], "greater": [24, 32, 33, 37, 38, 44, 55, 62, 63, 67, 75, 91, 99, 100, 105, 106, 113, 131, 137, 142, 144, 145, 152, 174, 180, 183, 187, 193, 205, 206, 208, 223, 227, 239, 245, 256, 261, 264, 266, 272, 290, 294, 319, 331, 332, 341, 349, 354, 358, 361, 372, 373, 378, 380, 384, 403, 406, 424, 431, 432, 458, 460, 461, 462, 463, 474, 475, 476, 478, 479], "partial": [24, 33, 67, 87, 89, 94, 106, 107, 112, 116, 124, 125, 127, 134, 174, 178, 184, 194, 203, 204, 221, 222, 245, 251, 252, 253, 258, 266, 267, 270, 272, 281, 319, 321, 334, 335, 341, 345, 354, 405, 409, 423, 458, 461, 462, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 479, 480], "less": [24, 25, 32, 33, 38, 55, 58, 63, 67, 72, 75, 84, 89, 98, 100, 103, 105, 106, 108, 110, 131, 137, 145, 147, 149, 151, 155, 174, 180, 183, 184, 190, 193, 212, 223, 225, 231, 232, 241, 244, 248, 255, 256, 258, 261, 264, 267, 272, 275, 280, 281, 290, 294, 296, 297, 304, 305, 316, 329, 330, 334, 337, 338, 341, 342, 345, 349, 354, 358, 361, 362, 365, 371, 372, 373, 377, 384, 391, 396, 406, 423, 424, 426, 432, 459, 460, 461, 462, 463, 464, 467, 470, 471, 473, 474, 475, 477, 478, 479], "pyfile_setopencodehook": [24, 255, 479], "py_opencodehookfunct": 24, "open_cod": [24, 67, 116, 255, 479], "userdata": [24, 58], "pyunicodeobject": [24, 62, 63, 89, 468, 469], "hook": [24, 30, 31, 33, 58, 65, 67, 86, 92, 96, 98, 113, 140, 153, 173, 180, 185, 205, 213, 215, 222, 239, 251, 277, 299, 304, 305, 312, 328, 337, 341, 349, 359, 361, 378, 381, 385, 395, 396, 419, 424, 426, 432, 434, 451, 452, 458, 460, 463, 465, 468, 469, 470, 472, 474, 475, 476, 478, 479, 480], "py_initi": [24, 30, 32, 33, 34, 56, 58, 71, 72, 85, 457, 468, 471, 476, 478, 479], "audit": [24, 57, 58, 67, 96, 113, 119, 140, 173, 182, 224, 271, 290, 312, 332, 349, 381, 391, 446, 451, 461, 468, 479], "setopencodehook": [24, 140], "pyfile_writeobject": [24, 56], "py_print_raw": [24, 48], "pyfile_writestr": [24, 56], "pyfloatobject": [25, 75], "pyfloat_typ": [25, 56], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 56], "pyfloat_fromdoubl": [25, 56], "pyfloat_asdoubl": [25, 56, 477], "pyfloat": 25, "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 56, 464], "structseq": [25, 465, 479], "minimum": [25, 33, 41, 63, 75, 89, 92, 100, 102, 109, 113, 131, 139, 152, 173, 174, 183, 194, 254, 258, 272, 290, 325, 331, 338, 341, 342, 349, 358, 361, 368, 372, 380, 382, 384, 385, 452, 460, 461, 464, 471, 472, 473, 475, 476, 479], "thin": [25, 58, 67, 223, 272, 284, 330, 365, 452, 469, 479], "pyfloat_getmax": [25, 56, 464], "dbl_max": [25, 349], "pyfloat_getmin": [25, 56, 464], "dbl_min": [25, 349], "routin": [25, 32, 40, 62, 67, 71, 72, 74, 85, 92, 105, 106, 138, 139, 170, 174, 181, 192, 212, 247, 251, 255, 263, 278, 290, 305, 338, 362, 387, 400, 403, 461, 462, 476, 479], "suffix": [25, 63, 67, 70, 89, 100, 108, 110, 117, 173, 197, 216, 242, 245, 247, 256, 264, 265, 266, 273, 290, 293, 316, 327, 332, 341, 356, 391, 418, 426, 427, 452, 457, 458, 460, 469, 471, 472, 477, 479], "appear": [25, 32, 33, 44, 57, 58, 65, 67, 74, 75, 83, 89, 91, 93, 94, 97, 99, 100, 101, 102, 103, 108, 110, 118, 120, 131, 149, 155, 160, 164, 172, 173, 174, 178, 183, 187, 188, 190, 193, 196, 199, 200, 202, 210, 219, 222, 227, 232, 244, 245, 247, 252, 256, 263, 265, 266, 268, 269, 278, 280, 294, 305, 311, 316, 328, 330, 332, 334, 337, 341, 342, 354, 360, 365, 372, 382, 385, 386, 391, 396, 398, 403, 404, 406, 409, 412, 416, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 451, 457, 459, 461, 463, 464, 465, 467, 470, 471, 473, 474, 475, 476, 477, 479], "ieee": [25, 152, 183, 259, 272, 291, 334, 344, 358, 426, 440, 452, 462, 464, 467, 469, 471, 475, 476, 479], "754": [25, 152, 183, 259, 272, 344, 358, 426, 440, 452, 462, 464, 467, 469, 471, 475, 476, 479], "binary16": [25, 344], "half": [25, 91, 100, 131, 172, 174, 180, 218, 223, 272, 292, 325, 341, 344, 431, 465, 470, 475, 479], "binary32": [25, 344], "binary64": [25, 344, 440], "inf": [25, 67, 152, 183, 222, 259, 272, 287, 341, 342, 349, 464, 465, 469, 471, 474, 475, 479], "nan": [25, 67, 84, 152, 183, 222, 272, 282, 287, 340, 341, 342, 349, 426, 438, 452, 462, 464, 465, 468, 469, 471, 472, 474, 475, 479], "thing": [25, 32, 62, 67, 71, 72, 74, 75, 76, 83, 84, 89, 91, 93, 94, 97, 99, 100, 102, 104, 106, 107, 108, 118, 131, 154, 156, 164, 166, 173, 178, 190, 197, 203, 208, 212, 222, 241, 247, 255, 264, 265, 272, 280, 289, 296, 316, 331, 338, 343, 349, 354, 361, 363, 365, 370, 372, 380, 382, 383, 384, 385, 386, 391, 396, 399, 426, 427, 430, 457, 458, 459, 460, 461, 462, 463, 466, 470, 472, 473, 477, 479], "larger": [25, 41, 48, 55, 75, 84, 91, 92, 115, 131, 149, 152, 173, 174, 180, 183, 212, 222, 255, 256, 272, 275, 281, 290, 316, 319, 337, 338, 341, 342, 358, 361, 363, 418, 424, 426, 431, 457, 458, 460, 461, 463, 465, 466, 470, 471, 474, 475, 476, 477, 478, 479], "smaller": [25, 41, 63, 91, 92, 103, 131, 173, 180, 183, 187, 188, 223, 256, 267, 272, 290, 296, 305, 342, 344, 351, 365, 372, 378, 380, 390, 407, 424, 426, 431, 451, 459, 461, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 477, 479], "accident": [25, 32, 100, 102, 183, 187, 190, 210, 382, 432, 459, 461, 464, 474, 479], "ala": 25, "le": [25, 67, 94, 106, 155, 197, 221, 288, 459, 467, 472], "littl": [25, 30, 63, 67, 89, 94, 99, 100, 103, 104, 106, 139, 144, 151, 155, 173, 174, 175, 183, 187, 188, 190, 227, 240, 265, 280, 289, 292, 316, 330, 334, 341, 344, 349, 363, 378, 380, 386, 394, 401, 422, 437, 448, 458, 459, 460, 464, 471, 472, 473, 479], "expon": [25, 88, 183, 222, 272, 315, 341, 342, 344, 349, 374, 431, 462, 464, 472, 477, 479], "py_big_endian": 25, "processor": [25, 34, 67, 72, 92, 106, 116, 280, 285, 289, 292, 300, 311, 319, 334, 391, 405, 411, 424, 458, 462, 463, 477, 478, 479], "ok": [25, 67, 72, 107, 116, 174, 186, 190, 220, 238, 239, 240, 242, 245, 289, 332, 338, 369, 371, 382, 384, 403, 437, 462, 469, 470, 471, 479], "infin": [25, 103, 152, 183, 222, 259, 272, 341, 342, 349, 462, 464, 471, 479], "pyfloat_pack2": [25, 469, 479], "pyfloat_pack4": [25, 469, 479], "pyfloat_pack8": [25, 469, 479], "refus": [25, 209, 210, 269, 285, 327, 332, 334, 338, 354, 418, 479], "pyfloat_unpack2": [25, 469, 479], "pyfloat_unpack4": [25, 469, 479], "pyfloat_unpack8": [25, 469, 479], "pyeval_getfram": [26, 32, 52, 56, 479], "pythreadstate_getfram": [26, 32, 52, 56, 469, 478, 479], "reflect": [26, 31, 51, 64, 67, 84, 88, 96, 100, 115, 118, 120, 172, 174, 180, 190, 207, 212, 222, 223, 244, 247, 252, 281, 289, 290, 305, 317, 334, 337, 338, 341, 344, 349, 365, 380, 381, 397, 401, 407, 417, 423, 424, 425, 451, 464, 470, 471, 472, 474, 477, 478, 479], "pyframe_typ": [26, 469, 479], "frametyp": [26, 67, 179, 381, 479], "frameobject": [26, 468, 469, 479], "pyframe_check": [26, 469, 479], "pyframe_getback": [26, 469, 478, 479], "outer": [26, 84, 137, 166, 183, 188, 204, 223, 234, 252, 349, 423, 424, 425, 426, 431, 432, 466, 469, 470, 471, 472, 478, 479], "pyframe_getbuiltin": [26, 469, 479], "f_builtin": [26, 252, 424, 469, 479], "pyframe_getcod": [26, 56, 469, 478, 479], "pyframe_getgener": [26, 469, 479], "pyframe_getglob": [26, 469, 479], "f_global": [26, 252, 424, 469, 479], "pyframe_getlasti": [26, 469, 479], "f_lasti": [26, 188, 252, 424, 461, 468, 469, 479], "pyframe_getvar": [26, 470, 479], "pyframe_getvarstr": [26, 470, 479], "pyframe_getloc": [26, 469, 479], "f_local": [26, 252, 381, 424, 469, 479], "523": [26, 32, 67, 461, 469, 470, 478, 479], "_pyinterpreterfram": [26, 32, 469, 479], "pyunstable_interpreterframe_getcod": [26, 479], "pyunstable_interpreterframe_getlasti": [26, 479], "pyunstable_interpreterframe_getlin": [26, 479], "pyfunctionobject": [27, 470, 479], "pyfunction_typ": [27, 479], "functiontyp": [27, 67, 120, 179, 261, 381, 468, 479], "pyfunction_check": 27, "pyfunction_new": 27, "annot": [27, 67, 84, 86, 89, 95, 111, 120, 178, 184, 188, 223, 245, 251, 252, 263, 297, 312, 348, 358, 376, 398, 403, 422, 423, 424, 426, 427, 441, 466, 468, 469, 470, 471, 472, 474, 477, 478, 479], "closur": [27, 57, 65, 75, 124, 166, 167, 188, 222, 247, 252, 289, 341, 356, 424, 469, 472, 475, 479], "co_qualnam": [27, 252, 424, 479], "pyfunction_newwithqualnam": 27, "pyfunction_getcod": 27, "pyfunction_getglob": 27, "pyfunction_getmodul": 27, "pyfunction_getdefault": 27, "pyfunction_setdefault": 27, "pyfunction_setvectorcal": [27, 470, 479], "func": [27, 32, 33, 34, 43, 52, 58, 62, 65, 67, 77, 84, 86, 87, 89, 92, 94, 98, 118, 120, 124, 137, 138, 142, 157, 163, 173, 174, 209, 221, 223, 252, 258, 263, 264, 280, 289, 305, 311, 329, 337, 341, 349, 358, 361, 363, 365, 376, 382, 384, 398, 416, 423, 425, 439, 462, 464, 466, 471, 472, 475, 477, 479], "preserv": [27, 32, 41, 67, 72, 83, 84, 89, 94, 100, 105, 110, 118, 164, 172, 180, 183, 187, 190, 193, 198, 200, 202, 205, 210, 252, 258, 259, 265, 266, 289, 290, 294, 296, 297, 328, 329, 337, 341, 354, 358, 364, 381, 382, 384, 385, 398, 407, 409, 423, 424, 426, 431, 457, 458, 459, 460, 461, 463, 464, 465, 471, 472, 473, 474, 476, 477, 478, 479], "unalt": [27, 479], "pyfunction_getclosur": 27, "pyfunction_setclosur": 27, "pyfunction_getannot": [27, 479], "pyfunction_setannot": 27, "pyfunction_addwatch": 27, "pyfunction_watchcallback": 27, "pyfunction_clearwatch": 27, "pyfunction_watchev": 27, "pyfunction_event_cr": 27, "pyfunction_event_destroy": 27, "pyfunction_event_modify_cod": 27, "pyfunction_event_modify_default": 27, "pyfunction_event_modify_kwdefault": 27, "optim": [27, 33, 41, 57, 62, 65, 67, 75, 84, 89, 103, 120, 126, 131, 137, 139, 155, 160, 174, 188, 208, 222, 232, 240, 247, 252, 261, 262, 290, 296, 297, 305, 308, 315, 334, 337, 348, 349, 358, 361, 362, 418, 423, 424, 432, 452, 457, 458, 460, 468, 473, 479, 480], "emit": [27, 32, 33, 44, 57, 67, 75, 99, 100, 113, 116, 124, 130, 133, 137, 174, 180, 185, 188, 210, 242, 255, 258, 264, 266, 290, 296, 337, 345, 349, 358, 372, 377, 382, 384, 396, 407, 409, 413, 424, 426, 432, 451, 461, 464, 467, 470, 471, 473, 475, 476, 477, 478, 479], "decis": [27, 100, 102, 154, 252, 349, 372, 423, 432, 458, 462, 463, 465, 471, 472, 479], "involv": [28, 41, 44, 62, 72, 75, 98, 120, 152, 164, 166, 174, 183, 190, 210, 223, 240, 280, 289, 296, 305, 329, 337, 338, 341, 344, 358, 377, 386, 391, 408, 424, 426, 427, 428, 432, 458, 465, 473, 474, 476, 477, 479], "circular": [28, 32, 34, 72, 75, 84, 259, 380, 386, 424, 459, 474, 476, 479], "atom": [28, 67, 83, 224, 280, 290, 313, 316, 334, 341, 361, 362, 427, 429, 465, 466, 469, 472, 479], "tp_flag": [28, 60, 62, 74, 75, 98, 188, 464, 478, 479], "py_tpflags_have_gc": [28, 60, 62, 75, 98, 469, 479], "tp_travers": [28, 60, 62, 74, 75, 98, 224, 469, 478, 479], "tp_clear": [28, 44, 62, 74, 75, 98, 479], "conform": [28, 62, 67, 93, 99, 124, 144, 149, 164, 179, 180, 183, 198, 200, 205, 206, 208, 239, 242, 244, 247, 249, 253, 263, 264, 270, 293, 296, 311, 349, 382, 390, 407, 409, 415, 421, 424, 452, 462, 466, 467, 472, 473, 475, 476, 477, 478, 479], "pyobject_gc_new": [28, 62, 460, 477], "pyobject_gc_newvar": [28, 62, 460, 477], "pyobject_gc_track": [28, 56, 460, 479], "pyobject_gc_untrack": [28, 56, 62, 74, 75, 460, 469, 479], "pyobject_gc_del": [28, 56, 62, 460, 477, 479], "pytype_readi": [28, 44, 56, 60, 62, 74, 75, 98, 469, 479], "indirect": [28, 48, 57, 60, 63, 67, 72, 84, 92, 102, 173, 210, 247, 252, 290, 304, 311, 312, 349, 398, 422, 424, 425, 426, 428, 466, 473, 476, 477, 479], "pytype_fromspecwithbas": [28, 56, 60, 62, 468, 470, 479], "pytype_fromspec": [28, 44, 56, 57, 60, 62, 75, 98, 470, 477, 478, 479], "popul": [28, 34, 44, 67, 99, 100, 112, 118, 120, 180, 188, 204, 247, 264, 281, 296, 315, 321, 341, 347, 381, 396, 403, 407, 409, 424, 428, 457, 461, 468, 469, 475, 479], "child": [28, 32, 58, 84, 87, 99, 100, 118, 120, 130, 131, 135, 157, 209, 210, 245, 250, 275, 280, 290, 293, 306, 311, 319, 325, 330, 334, 335, 345, 365, 372, 382, 385, 386, 406, 407, 409, 418, 424, 458, 462, 463, 464, 465, 470, 471, 472, 473, 475, 476, 477, 478, 479], "analog": [28, 37, 63, 74, 84, 100, 183, 252, 264, 265, 272, 280, 296, 360, 380, 424, 426, 428, 460, 462, 463, 465, 471, 473, 477, 479], "pyunstable_object_gc_newwithextradata": [28, 479], "extra_s": [28, 448], "final": [28, 31, 33, 34, 44, 48, 58, 60, 62, 67, 72, 73, 75, 83, 84, 89, 93, 94, 99, 100, 102, 103, 105, 108, 111, 113, 120, 124, 131, 133, 136, 137, 139, 142, 155, 173, 178, 179, 183, 184, 185, 187, 188, 190, 194, 200, 208, 210, 232, 242, 247, 252, 255, 258, 262, 264, 268, 280, 289, 290, 293, 294, 296, 305, 308, 311, 312, 316, 329, 331, 335, 337, 338, 342, 349, 350, 354, 356, 357, 358, 360, 361, 363, 365, 372, 374, 377, 378, 380, 381, 382, 384, 385, 386, 395, 396, 402, 405, 410, 418, 424, 425, 426, 427, 428, 431, 432, 437, 439, 440, 442, 452, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 471, 472, 474, 475, 476, 477, 478, 480], "reserv": [28, 48, 60, 67, 93, 117, 252, 256, 293, 296, 311, 316, 319, 330, 336, 341, 361, 394, 401, 406, 415, 418, 422, 424, 432, 439, 451, 459, 464, 466, 471, 476, 477, 479], "decid": [28, 33, 75, 84, 88, 89, 94, 99, 102, 130, 137, 142, 152, 154, 166, 180, 190, 240, 266, 334, 335, 349, 361, 382, 424, 428, 432, 463, 465, 470, 479], "pyobject_gc_res": [28, 479], "unexpect": [28, 99, 100, 167, 190, 202, 205, 227, 247, 264, 272, 285, 315, 316, 319, 330, 332, 334, 338, 340, 358, 384, 386, 391, 396, 418, 423, 424, 426, 431, 436, 439, 457, 460, 465, 468, 470, 472, 474, 476, 477, 478, 479], "becom": [28, 32, 33, 34, 62, 63, 65, 72, 83, 84, 86, 89, 91, 92, 93, 94, 96, 98, 100, 102, 103, 104, 106, 110, 112, 124, 130, 131, 137, 139, 155, 172, 174, 190, 193, 199, 202, 208, 222, 244, 252, 255, 258, 280, 289, 290, 294, 296, 305, 308, 315, 316, 325, 326, 328, 329, 330, 338, 341, 342, 345, 349, 354, 361, 365, 372, 380, 382, 385, 386, 391, 398, 418, 423, 424, 425, 426, 432, 437, 446, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "near": [28, 89, 99, 102, 152, 164, 181, 183, 187, 244, 266, 272, 280, 290, 294, 424, 432, 440, 460, 461, 463, 464, 465, 466, 471, 474, 479], "pyobject_is_gc": [28, 62, 74, 478, 479], "pyobject_gc_istrack": [28, 56, 478, 479], "gc": [28, 44, 60, 62, 67, 72, 75, 77, 84, 86, 96, 140, 251, 252, 312, 349, 358, 363, 378, 398, 407, 424, 448, 452, 458, 461, 463, 465, 470, 471, 479], "is_track": [28, 67, 224, 312, 465], "pyobject_gc_isfin": [28, 56, 478, 479], "is_fin": [28, 32, 67, 224, 312, 349, 446, 474, 477, 478, 479], "_pyobject_gc_track": [28, 477, 479], "_pyobject_gc_untrack": [28, 477, 479], "visitproc": [28, 56, 62, 75, 478], "visitor": [28, 120], "travers": [28, 30, 44, 51, 62, 67, 75, 94, 98, 110, 120, 160, 181, 193, 202, 210, 249, 250, 264, 277, 290, 299, 341, 372, 384, 385, 403, 408, 409, 418, 428, 432, 458, 460, 461, 463, 464, 465, 469, 470, 474, 477, 478, 479], "traverseproc": [28, 44, 56, 62, 74, 75], "visit": [28, 62, 67, 75, 94, 98, 120, 180, 261, 290, 293, 310, 329, 339, 411, 457, 458, 460, 461, 464, 472, 478, 479], "simplifi": [28, 30, 32, 41, 65, 92, 94, 103, 107, 122, 126, 133, 155, 166, 180, 181, 194, 198, 213, 223, 247, 252, 280, 316, 334, 335, 371, 372, 374, 382, 398, 406, 423, 431, 457, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479], "py_visit": [28, 62, 75, 98, 478], "my_travers": 28, "noddi": 28, "foo": [28, 77, 78, 84, 85, 86, 87, 88, 89, 93, 99, 100, 101, 103, 107, 108, 114, 118, 120, 149, 153, 164, 173, 190, 193, 197, 225, 240, 244, 247, 252, 259, 263, 264, 265, 269, 280, 285, 288, 289, 290, 291, 293, 294, 296, 299, 301, 305, 308, 316, 331, 337, 341, 354, 358, 381, 382, 384, 385, 386, 401, 403, 407, 408, 409, 418, 419, 423, 426, 428, 431, 432, 437, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479], "bar": [28, 50, 84, 86, 89, 93, 99, 100, 101, 103, 118, 120, 153, 164, 173, 174, 197, 225, 240, 244, 247, 259, 264, 265, 280, 285, 288, 289, 290, 291, 293, 294, 299, 301, 305, 308, 310, 316, 331, 337, 341, 354, 358, 365, 370, 372, 381, 382, 384, 385, 386, 403, 418, 419, 421, 423, 428, 430, 431, 432, 437, 458, 464, 479], "inquiri": [28, 44, 56, 62, 74, 75, 255, 384], "drop": [28, 62, 67, 75, 83, 84, 86, 92, 93, 99, 102, 106, 131, 157, 190, 208, 209, 222, 247, 251, 258, 266, 280, 302, 318, 322, 338, 341, 345, 349, 360, 364, 365, 372, 384, 390, 458, 459, 460, 462, 463, 464, 466, 471, 473, 474, 479], "pygc_collect": [28, 56, 478, 479], "uncondit": [28, 113, 244, 280, 281, 285, 290, 294, 331, 384, 386, 424, 431, 451, 465, 466, 471, 472, 473, 474, 476, 478, 479], "unreach": [28, 209, 224, 382, 424, 476, 478, 479], "pygc_en": [28, 56, 468, 479], "pygc_dis": [28, 56, 468, 479], "pygc_isen": [28, 56, 468, 479], "isen": [28, 67, 224, 312], "pyunstable_gc_visitobject": 28, "gcvisitobjects_t": 28, "live": [28, 34, 62, 66, 67, 72, 83, 89, 100, 108, 149, 180, 204, 244, 245, 248, 250, 251, 280, 290, 296, 302, 312, 337, 338, 354, 390, 396, 398, 406, 421, 424, 442, 457, 458, 459, 460, 466, 471, 479], "capabl": [28, 63, 75, 91, 92, 94, 100, 103, 120, 124, 166, 174, 183, 190, 209, 231, 242, 245, 248, 250, 252, 254, 255, 256, 269, 279, 280, 285, 289, 302, 304, 317, 371, 386, 390, 409, 411, 418, 426, 451, 460, 461, 462, 463, 471, 472, 473, 474, 479], "behaviour": [28, 30, 32, 34, 48, 62, 67, 83, 84, 94, 99, 100, 103, 108, 124, 166, 186, 210, 212, 214, 240, 252, 255, 263, 264, 265, 266, 280, 289, 290, 293, 296, 308, 316, 317, 325, 328, 330, 334, 335, 337, 341, 345, 349, 360, 380, 385, 386, 390, 391, 396, 409, 412, 415, 424, 426, 428, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 472, 473, 475, 476, 479], "multipl": [28, 30, 32, 33, 44, 46, 62, 63, 67, 70, 72, 74, 75, 83, 86, 88, 89, 91, 93, 94, 102, 103, 106, 107, 108, 113, 114, 118, 119, 120, 122, 124, 133, 135, 141, 147, 149, 155, 157, 160, 164, 166, 172, 174, 178, 180, 183, 184, 186, 190, 196, 202, 206, 210, 216, 218, 222, 223, 225, 227, 231, 232, 242, 244, 248, 250, 251, 252, 255, 258, 259, 264, 265, 267, 268, 272, 273, 275, 279, 280, 281, 289, 290, 293, 294, 296, 297, 299, 304, 311, 316, 317, 326, 327, 328, 332, 334, 335, 337, 338, 339, 341, 344, 348, 349, 352, 354, 358, 361, 363, 365, 371, 372, 373, 376, 380, 382, 384, 394, 396, 398, 403, 405, 409, 411, 415, 423, 424, 425, 426, 427, 428, 431, 432, 437, 440, 451, 457, 458, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "pygen_new": 29, "pygen_newwithqualnam": 29, "pygenobject": 29, "pygen_typ": 29, "pygen_check": 29, "pygen_checkexact": 29, "pyimport_importmodul": [30, 56, 72, 78, 459, 464, 466, 468, 479], "pyimport_importmoduleex": [30, 472], "submodul": [30, 62, 67, 86, 155, 181, 190, 222, 235, 247, 299, 321, 338, 376, 382, 405, 418, 432, 446, 451, 463, 466, 467, 473, 476, 479], "packag": [30, 32, 33, 62, 63, 67, 69, 73, 75, 76, 78, 79, 83, 84, 86, 92, 99, 100, 108, 109, 110, 141, 149, 157, 170, 173, 180, 184, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 209, 222, 227, 235, 239, 244, 247, 250, 251, 252, 258, 264, 265, 266, 273, 276, 277, 278, 280, 282, 304, 309, 310, 312, 321, 327, 331, 332, 337, 338, 342, 349, 350, 351, 365, 371, 376, 380, 381, 382, 384, 385, 386, 388, 395, 396, 405, 407, 410, 417, 418, 419, 421, 422, 429, 432, 434, 441, 449, 450, 451, 452, 454, 456, 458, 460, 462, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "fromlist": [30, 67, 119, 179, 188, 222, 247, 479], "top": [30, 32, 41, 67, 72, 83, 84, 89, 91, 93, 94, 96, 99, 100, 102, 103, 107, 108, 113, 116, 118, 120, 133, 137, 140, 149, 150, 155, 164, 167, 173, 174, 176, 182, 186, 187, 188, 190, 204, 208, 210, 222, 223, 227, 240, 244, 245, 247, 248, 251, 252, 253, 254, 255, 263, 273, 282, 290, 293, 296, 299, 301, 302, 305, 309, 310, 311, 312, 321, 338, 339, 348, 349, 354, 358, 361, 365, 367, 371, 372, 380, 381, 384, 385, 395, 409, 415, 416, 418, 423, 425, 428, 431, 432, 436, 446, 447, 451, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479], "unfortun": [30, 83, 87, 91, 94, 98, 100, 101, 102, 103, 107, 149, 155, 280, 302, 305, 327, 334, 338, 354, 365, 386, 457, 459, 462, 464, 467, 475, 478], "fact": [30, 32, 63, 72, 84, 94, 99, 103, 104, 107, 108, 124, 148, 164, 173, 183, 190, 203, 207, 220, 222, 247, 276, 289, 296, 305, 341, 354, 365, 380, 382, 391, 403, 417, 424, 426, 428, 430, 457, 458, 459, 464, 470, 472, 473, 474, 479], "subpackag": [30, 62, 86, 247, 278, 349, 384, 418, 428, 446, 458], "__all__": [30, 222, 244, 276, 316, 358, 432, 446, 459, 475, 479], "absolut": [30, 32, 33, 46, 60, 62, 67, 71, 75, 83, 99, 105, 108, 111, 120, 124, 137, 139, 142, 149, 151, 152, 153, 183, 188, 190, 210, 216, 222, 227, 239, 247, 248, 254, 255, 265, 266, 267, 272, 275, 289, 290, 293, 321, 328, 329, 332, 337, 341, 342, 349, 350, 354, 356, 362, 365, 368, 378, 380, 382, 390, 395, 401, 411, 418, 421, 426, 428, 432, 442, 446, 451, 452, 457, 458, 462, 464, 465, 466, 470, 471, 472, 473, 474, 476, 478, 479, 480], "pyimport_importmodulenoblock": [30, 56, 464, 466, 472, 479], "alia": [30, 39, 58, 67, 84, 86, 93, 100, 102, 120, 131, 135, 151, 155, 158, 173, 175, 180, 188, 192, 194, 202, 208, 210, 215, 225, 227, 240, 247, 251, 252, 261, 280, 284, 289, 290, 294, 311, 319, 325, 326, 330, 334, 337, 338, 345, 355, 361, 372, 380, 381, 382, 389, 399, 401, 402, 403, 415, 418, 423, 424, 425, 432, 452, 466, 468, 470, 473, 475, 476, 478, 479], "switch": [30, 32, 34, 63, 67, 74, 83, 89, 98, 104, 106, 107, 108, 109, 110, 126, 131, 135, 155, 190, 207, 222, 227, 240, 242, 244, 289, 302, 316, 319, 321, 337, 341, 342, 349, 354, 380, 385, 408, 428, 437, 446, 451, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 476, 478, 479], "best": [30, 34, 54, 63, 67, 83, 86, 89, 91, 94, 95, 98, 99, 100, 102, 108, 139, 171, 180, 183, 185, 187, 190, 191, 192, 202, 210, 222, 223, 227, 231, 232, 239, 244, 245, 252, 264, 267, 280, 285, 289, 290, 302, 304, 305, 328, 332, 334, 337, 341, 349, 354, 363, 365, 371, 380, 382, 385, 399, 421, 424, 428, 452, 457, 458, 462, 463, 466, 468, 470, 471, 473, 474, 475, 478, 479], "__import__": [30, 67, 188, 222, 247, 251, 265, 277, 296, 424, 428, 446, 464, 467, 472, 475, 478, 479], "incomplet": [30, 60, 63, 67, 78, 116, 144, 154, 155, 177, 180, 244, 258, 265, 282, 311, 325, 354, 418, 461, 462, 465, 466, 470, 472, 473, 479], "pyimport_importmodulelevelobject": [30, 56], "pyimport_importmodulelevel": [30, 56, 472], "pyimport_import": [30, 56, 71, 464], "higher": [30, 32, 55, 67, 94, 96, 99, 100, 113, 124, 138, 144, 166, 174, 183, 188, 199, 201, 221, 222, 227, 239, 251, 255, 258, 264, 265, 266, 267, 276, 278, 279, 280, 285, 290, 296, 302, 322, 329, 334, 337, 338, 341, 347, 349, 354, 355, 361, 363, 378, 382, 396, 409, 459, 460, 463, 464, 471, 472, 473, 476, 479], "__builtins__": [30, 146, 222, 252, 425, 446, 466, 468, 479], "instal": [30, 32, 33, 34, 41, 67, 69, 71, 75, 78, 83, 84, 88, 91, 96, 100, 102, 107, 109, 110, 112, 130, 133, 142, 160, 181, 185, 189, 209, 211, 227, 232, 243, 244, 247, 248, 251, 258, 264, 266, 273, 308, 312, 317, 330, 331, 337, 338, 341, 345, 347, 349, 350, 357, 365, 371, 378, 380, 384, 391, 395, 396, 401, 403, 417, 422, 428, 449, 451, 454, 455, 456, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480], "environ": [30, 32, 33, 41, 62, 65, 67, 69, 83, 84, 86, 92, 99, 100, 101, 102, 106, 107, 108, 109, 116, 124, 149, 155, 157, 160, 173, 174, 179, 183, 185, 189, 207, 211, 219, 222, 225, 227, 232, 244, 248, 251, 253, 263, 265, 277, 289, 292, 294, 296, 303, 305, 306, 308, 310, 312, 322, 324, 329, 334, 335, 338, 341, 345, 349, 351, 354, 358, 362, 365, 376, 378, 384, 385, 387, 391, 396, 399, 401, 406, 416, 424, 425, 428, 434, 444, 449, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 464, 466, 467, 470, 471, 473, 476, 477, 478, 479, 480], "pyimport_reloadmodul": [30, 56, 479], "reload": [30, 67, 84, 89, 93, 110, 240, 244, 247, 277, 349, 358, 378, 428, 446, 461, 466, 470, 473, 476, 479], "pyimport_addmoduleobject": [30, 56], "pyimport_addmodul": [30, 56, 72], "pyimport_execcodemodul": [30, 56], "danger": [30, 34, 58, 60, 84, 280, 289, 290, 293, 338, 354, 385, 430, 459, 462, 463, 470, 479], "know": [30, 32, 34, 58, 62, 72, 75, 76, 84, 89, 92, 94, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 118, 130, 137, 149, 152, 158, 173, 175, 178, 187, 190, 192, 197, 198, 205, 240, 242, 247, 256, 263, 265, 266, 268, 269, 280, 289, 290, 327, 329, 334, 338, 341, 349, 365, 372, 378, 380, 385, 391, 396, 401, 403, 412, 415, 418, 421, 428, 430, 432, 457, 458, 459, 460, 463, 464, 465, 470, 472, 473, 475, 479], "unknown": [30, 32, 63, 67, 87, 93, 103, 120, 137, 139, 187, 190, 193, 196, 198, 199, 205, 208, 222, 232, 242, 253, 273, 285, 289, 290, 301, 304, 316, 339, 349, 354, 361, 362, 378, 391, 394, 412, 437, 452, 460, 461, 465, 469, 471, 475, 476, 479], "probabl": [30, 32, 55, 72, 74, 78, 84, 89, 91, 97, 100, 102, 103, 104, 108, 141, 155, 156, 173, 180, 190, 197, 210, 227, 280, 290, 294, 297, 305, 315, 332, 334, 335, 337, 338, 340, 349, 363, 380, 385, 391, 394, 401, 402, 403, 411, 430, 452, 458, 459, 460, 461, 463, 464, 466, 471, 472, 479], "damag": [30, 296, 354, 382, 422], "author": [30, 69, 72, 76, 94, 98, 99, 101, 103, 107, 108, 109, 124, 155, 157, 190, 210, 232, 239, 248, 249, 266, 290, 304, 337, 338, 384, 391, 403, 415, 422, 449, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 471, 473, 474, 479], "__spec__": [30, 67, 179, 247, 249, 321, 381, 446, 468, 470, 473, 475, 476, 479], "__loader__": [30, 44, 67, 179, 222, 247, 262, 321, 381, 428, 446, 468, 472, 473, 476, 479], "spec": [30, 44, 60, 67, 86, 105, 208, 233, 236, 241, 247, 252, 259, 321, 338, 349, 372, 385, 386, 390, 415, 419, 427, 461, 470, 473, 474, 475, 476, 477, 478, 479], "loader": [30, 67, 86, 166, 173, 190, 247, 248, 249, 250, 262, 277, 299, 358, 378, 381, 384, 409, 417, 419, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "sourcefileload": [30, 67, 247, 277, 470, 472, 475, 479], "__file__": [30, 44, 67, 88, 100, 112, 185, 190, 222, 232, 247, 252, 262, 299, 320, 321, 358, 378, 384, 396, 419, 424, 428, 452, 461, 473, 475, 476, 478, 479], "co_filenam": [30, 252, 424, 465, 479], "applic": [30, 32, 33, 56, 62, 63, 67, 71, 72, 74, 76, 84, 88, 94, 98, 99, 101, 102, 103, 106, 107, 108, 112, 118, 120, 124, 131, 135, 137, 138, 141, 143, 149, 154, 164, 166, 172, 174, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 205, 210, 211, 222, 223, 232, 239, 243, 255, 259, 263, 264, 265, 266, 268, 269, 272, 273, 278, 279, 280, 281, 289, 290, 293, 296, 302, 305, 311, 316, 322, 328, 329, 330, 334, 337, 338, 341, 343, 345, 350, 354, 358, 360, 361, 362, 364, 365, 367, 368, 371, 372, 378, 380, 383, 384, 390, 391, 396, 398, 401, 403, 406, 407, 409, 410, 411, 412, 413, 418, 419, 421, 422, 423, 426, 430, 432, 451, 454, 455, 458, 459, 460, 461, 462, 464, 465, 466, 467, 471, 472, 473, 475, 476, 477, 478, 479, 480], "__cached__": [30, 67, 222, 247, 321, 428, 468, 470, 471, 473, 479], "pyimport_execcodemoduleex": [30, 56], "pyimport_execcodemodulewithpathnam": [30, 56], "modulespec": [30, 44, 67, 86, 247, 277, 299, 321, 349, 381, 428], "pathnam": [30, 83, 140, 149, 173, 217, 220, 228, 264, 266, 276, 278, 290, 291, 293, 328, 339, 349, 354, 356, 365, 371, 393, 418, 419, 424, 428, 451, 471, 474, 479], "pyimport_execcodemoduleobject": [30, 56, 479], "cpathnam": 30, "figur": [30, 72, 75, 91, 93, 94, 102, 103, 106, 118, 183, 190, 289, 305, 334, 354, 458, 459, 460, 461, 462, 463, 464, 465, 472, 479], "imp": [30, 466, 468, 469, 470, 471, 472, 473, 475, 479], "source_from_cach": [30, 67, 247, 277, 470, 471, 473, 475], "pyimport_getmagicnumb": [30, 56, 472], "magic": [30, 67, 84, 86, 88, 89, 113, 164, 173, 184, 190, 197, 227, 247, 305, 338, 346, 358, 361, 362, 382, 386, 418, 421, 458, 459, 461, 473, 474, 475, 476, 479], "pyc": [30, 32, 33, 67, 85, 86, 160, 247, 271, 278, 296, 308, 329, 341, 349, 358, 378, 418, 419, 424, 428, 446, 451, 452, 457, 459, 461, 462, 464, 465, 469, 470, 473, 474, 478, 479, 480], "four": [30, 57, 63, 87, 88, 89, 91, 92, 93, 103, 106, 118, 130, 155, 174, 187, 188, 204, 208, 239, 244, 252, 256, 264, 265, 268, 275, 278, 289, 311, 315, 331, 334, 335, 337, 341, 342, 344, 365, 372, 380, 385, 431, 437, 457, 464, 467, 471, 478, 479], "pyimport_getmagictag": [30, 56], "tag": [30, 60, 62, 67, 74, 96, 103, 120, 149, 187, 237, 245, 247, 266, 270, 275, 290, 296, 311, 343, 349, 352, 364, 391, 406, 409, 413, 415, 457, 458, 463, 465, 469, 473, 474, 477, 479, 480], "3147": [30, 67, 84, 160, 247, 308, 321, 358, 428, 446, 472, 480], "keep": [30, 32, 38, 62, 67, 72, 84, 89, 93, 98, 100, 102, 103, 106, 108, 118, 120, 126, 137, 142, 149, 155, 157, 166, 173, 174, 176, 178, 179, 183, 188, 190, 193, 208, 211, 223, 231, 240, 244, 249, 252, 255, 258, 268, 275, 289, 290, 293, 296, 302, 304, 316, 335, 341, 345, 349, 358, 365, 384, 385, 391, 398, 403, 406, 411, 423, 424, 428, 432, 459, 461, 462, 463, 464, 465, 471, 473, 476, 479], "mind": [30, 84, 89, 91, 98, 100, 102, 103, 118, 120, 173, 183, 197, 249, 266, 280, 289, 382, 391, 409, 428, 460, 462, 471], "cache_tag": [30, 247, 349, 470, 472, 479], "authorit": [30, 107, 470, 479], "pyimport_getmoduledict": [30, 56, 479], "administr": [30, 32, 58, 99, 108, 149, 153, 245, 284, 285, 290, 331, 334, 362, 403, 425, 457, 462, 472, 477, 478, 479], "pyimport_getmodul": [30, 56, 476, 479], "pyimport_getimport": [30, 56], "finder": [30, 67, 86, 190, 247, 248, 267, 276, 299, 349, 429, 455, 457, 462, 464, 468, 470, 472, 473, 479], "pkg": [30, 247, 299, 417, 432, 451, 452, 456, 458, 459, 463, 465, 468, 469, 470, 477, 479], "__path__": [30, 67, 86, 247, 299, 309, 349, 446, 473, 475, 476, 479], "fetch": [30, 67, 89, 92, 94, 107, 112, 164, 172, 205, 245, 253, 254, 258, 278, 280, 281, 290, 296, 304, 312, 330, 334, 337, 338, 347, 385, 386, 391, 392, 410, 415, 448, 462, 471, 472, 479], "path_importer_cach": [30, 67, 247, 299, 312, 349, 428, 446, 461, 469, 470, 472, 473, 474, 476, 479], "cach": [30, 33, 41, 60, 62, 63, 67, 72, 74, 83, 86, 92, 99, 103, 107, 114, 124, 137, 145, 155, 157, 160, 173, 181, 187, 188, 213, 217, 221, 223, 227, 247, 262, 264, 277, 280, 285, 290, 299, 308, 316, 321, 327, 337, 338, 344, 349, 356, 358, 378, 382, 384, 391, 398, 419, 421, 423, 446, 448, 449, 451, 457, 459, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479], "path_hook": [30, 67, 86, 140, 247, 277, 299, 312, 349, 428, 432, 446, 461, 472, 473, 479], "our": [30, 34, 72, 75, 84, 88, 89, 92, 93, 100, 103, 106, 107, 112, 132, 164, 166, 173, 193, 197, 202, 256, 289, 296, 316, 332, 335, 337, 338, 358, 382, 385, 386, 398, 403, 409, 418, 460, 463, 464, 479], "find": [30, 32, 60, 62, 67, 71, 72, 74, 76, 88, 89, 92, 93, 94, 96, 97, 99, 100, 102, 103, 106, 108, 110, 116, 118, 120, 139, 145, 149, 155, 157, 174, 178, 180, 184, 187, 188, 190, 192, 193, 194, 196, 202, 204, 208, 210, 218, 222, 223, 227, 232, 243, 244, 247, 248, 251, 252, 263, 264, 270, 275, 277, 289, 290, 296, 297, 299, 310, 320, 334, 338, 341, 345, 349, 350, 358, 359, 361, 363, 365, 382, 384, 385, 386, 390, 391, 398, 406, 425, 426, 428, 430, 432, 437, 438, 451, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479], "pyimport_importfrozenmoduleobject": [30, 56, 479], "frozen": [30, 33, 67, 173, 222, 247, 280, 299, 312, 349, 378, 382, 424, 428, 451, 457, 461, 470, 473, 476, 479], "misnom": 30, "pyimport_importfrozenmodul": [30, 56, 479], "_frozen": [30, 173, 469, 479], "freez": [30, 67, 80, 84, 223, 224, 244, 285, 312, 449, 476, 479], "tool": [30, 32, 50, 56, 67, 71, 78, 84, 86, 89, 91, 92, 94, 96, 97, 99, 100, 101, 102, 103, 106, 108, 110, 112, 120, 135, 153, 166, 173, 184, 190, 191, 201, 216, 220, 222, 223, 227, 228, 248, 251, 252, 253, 258, 259, 261, 296, 304, 318, 328, 330, 349, 374, 376, 378, 380, 382, 384, 395, 409, 417, 418, 424, 432, 440, 452, 453, 457, 458, 459, 460, 461, 463, 464, 466, 467, 469, 471, 472, 473, 474, 475, 478, 480], "distribut": [30, 32, 65, 67, 70, 72, 74, 83, 84, 112, 124, 183, 206, 227, 232, 247, 268, 272, 277, 280, 281, 299, 315, 337, 340, 351, 354, 365, 373, 384, 410, 417, 422, 452, 457, 458, 459, 461, 463, 464, 466, 468, 471, 474, 475, 476, 477, 478, 479], "is_packag": [30, 67, 247, 277, 419, 469, 479], "pyimport_frozenmodul": [30, 33, 173, 479], "record": [30, 60, 67, 74, 77, 91, 92, 93, 94, 99, 100, 101, 105, 106, 108, 120, 153, 157, 160, 172, 173, 174, 175, 181, 182, 183, 184, 194, 200, 209, 248, 252, 256, 264, 266, 268, 276, 289, 290, 292, 296, 305, 306, 312, 337, 339, 341, 344, 347, 358, 380, 381, 382, 384, 385, 386, 396, 418, 428, 436, 441, 458, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 479], "play": [30, 67, 75, 88, 173, 183, 251, 292, 315, 338, 380, 384, 400, 424, 436, 466, 479], "trick": [30, 67, 84, 173, 222, 294, 337, 349, 382, 386, 436, 460], "collect": [30, 31, 41, 44, 49, 51, 62, 63, 66, 67, 72, 73, 74, 77, 83, 84, 86, 89, 91, 94, 96, 99, 100, 102, 103, 110, 112, 114, 118, 120, 123, 131, 137, 145, 149, 155, 164, 166, 167, 173, 176, 178, 179, 181, 184, 190, 191, 210, 211, 222, 223, 224, 239, 240, 248, 251, 252, 258, 261, 280, 290, 296, 302, 305, 311, 312, 313, 327, 329, 330, 333, 334, 335, 337, 338, 341, 344, 349, 355, 356, 358, 363, 372, 378, 380, 381, 384, 391, 397, 398, 401, 407, 409, 423, 424, 426, 432, 437, 438, 448, 449, 452, 457, 460, 461, 462, 463, 464, 466, 467, 469, 470, 479, 480], "pyimport_appendinittab": [30, 32, 33, 44, 56, 71, 72, 479], "initfunc": 30, "pyimport_extendinittab": [30, 32, 33, 479], "extend": [30, 32, 41, 44, 60, 62, 67, 72, 73, 74, 75, 78, 79, 83, 91, 93, 100, 103, 107, 116, 118, 119, 120, 121, 131, 141, 148, 152, 153, 155, 157, 158, 164, 165, 166, 173, 174, 179, 180, 187, 188, 189, 190, 193, 202, 204, 210, 222, 223, 227, 242, 244, 246, 255, 258, 259, 268, 270, 272, 273, 275, 277, 279, 296, 299, 300, 305, 311, 317, 325, 329, 332, 334, 338, 341, 347, 349, 354, 356, 362, 372, 374, 384, 391, 397, 398, 405, 406, 409, 416, 424, 425, 426, 428, 432, 437, 438, 440, 457, 459, 462, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480], "_inittab": 30, "emb": [30, 32, 33, 65, 67, 71, 84, 160, 190, 243, 247, 363, 365, 405, 409, 460, 465, 476, 477, 479], "conjunct": [30, 187, 189, 190, 222, 252, 265, 328, 334, 338, 382, 427, 431, 473], "newtab": 30, "sentinel": [30, 36, 57, 67, 72, 74, 75, 84, 89, 100, 161, 178, 184, 222, 258, 266, 280, 386, 460, 472, 476, 479], "fault": [30, 67, 99, 173, 182, 253, 289, 294, 319, 330, 362, 377, 463, 465, 472, 479], "insuffici": [30, 158, 183, 190, 209, 249, 280, 290, 385, 475], "high": [31, 32, 37, 41, 51, 59, 63, 67, 72, 73, 78, 83, 84, 99, 100, 102, 107, 120, 124, 126, 128, 131, 133, 134, 135, 137, 147, 161, 174, 180, 183, 188, 191, 198, 216, 223, 245, 251, 255, 256, 257, 258, 263, 267, 280, 286, 290, 292, 296, 305, 306, 315, 316, 325, 330, 334, 337, 338, 340, 349, 352, 354, 362, 382, 399, 432, 460, 461, 462, 463, 464, 470, 471, 472, 473, 474, 476, 478, 479], "queri": [31, 49, 67, 83, 94, 100, 103, 106, 116, 131, 134, 149, 155, 166, 202, 216, 227, 242, 247, 248, 252, 278, 293, 295, 302, 325, 347, 354, 358, 365, 371, 372, 382, 390, 391, 401, 403, 406, 415, 428, 451, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "signal": [31, 32, 33, 48, 58, 62, 67, 91, 94, 98, 100, 103, 113, 128, 130, 131, 133, 135, 138, 139, 140, 163, 173, 174, 182, 184, 185, 188, 190, 210, 239, 251, 254, 255, 257, 258, 264, 265, 272, 280, 287, 289, 290, 294, 296, 306, 316, 319, 325, 326, 328, 334, 337, 338, 342, 345, 349, 358, 361, 362, 367, 377, 382, 391, 409, 411, 415, 426, 428, 451, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 475, 477, 479], "categori": [31, 67, 83, 99, 103, 106, 131, 210, 238, 255, 263, 266, 312, 316, 337, 341, 358, 359, 383, 390, 431, 451, 458, 459, 463, 464, 466, 471, 476, 479], "marshal": [31, 64, 67, 84, 140, 155, 251, 259, 266, 295, 375, 415, 461, 462, 465, 474, 479], "perf": [31, 33, 64, 67, 95, 349, 451, 470, 479], "abstract": [31, 37, 54, 62, 67, 73, 75, 77, 78, 83, 84, 86, 90, 91, 92, 124, 130, 131, 166, 173, 179, 180, 183, 205, 210, 218, 223, 241, 248, 251, 252, 255, 261, 266, 277, 287, 290, 298, 326, 334, 338, 341, 349, 356, 382, 403, 421, 424, 426, 461, 463, 465, 466, 468, 471, 472, 474, 475, 476, 478, 479, 480], "configur": [31, 34, 41, 58, 62, 63, 67, 71, 72, 84, 89, 91, 94, 96, 98, 101, 103, 113, 116, 124, 130, 133, 134, 167, 169, 173, 179, 181, 183, 186, 208, 214, 219, 232, 242, 244, 245, 247, 251, 263, 264, 266, 268, 269, 289, 290, 302, 303, 304, 311, 312, 317, 320, 324, 328, 332, 334, 337, 338, 349, 350, 354, 357, 358, 361, 364, 365, 368, 369, 370, 371, 372, 384, 385, 386, 391, 395, 396, 401, 403, 407, 408, 409, 413, 415, 422, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480], "wide": [31, 33, 58, 63, 67, 89, 91, 94, 98, 99, 102, 106, 108, 113, 118, 130, 133, 139, 148, 153, 164, 173, 174, 180, 183, 190, 191, 240, 244, 252, 254, 263, 268, 279, 290, 292, 296, 299, 302, 312, 327, 338, 341, 344, 345, 354, 361, 362, 371, 406, 418, 421, 422, 452, 457, 460, 463, 464, 465, 470, 471, 472, 473, 479], "sub": [31, 44, 49, 67, 89, 94, 98, 99, 100, 103, 116, 120, 122, 131, 172, 173, 174, 175, 180, 187, 188, 191, 193, 198, 202, 204, 211, 221, 228, 245, 249, 251, 258, 261, 265, 268, 275, 288, 305, 311, 316, 327, 341, 349, 358, 359, 371, 382, 384, 386, 401, 409, 426, 427, 439, 447, 457, 458, 460, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 479], "asynchron": [31, 62, 67, 83, 86, 120, 123, 124, 128, 131, 133, 134, 135, 137, 158, 163, 166, 167, 184, 188, 210, 222, 251, 253, 257, 264, 280, 312, 334, 338, 345, 349, 381, 384, 385, 402, 423, 432, 465, 469, 470, 471, 472, 473, 474, 476, 477, 479], "notif": [31, 66, 67, 326, 396, 401, 411, 458, 465, 470, 477, 479], "trace": [31, 33, 34, 41, 62, 67, 72, 96, 99, 101, 113, 142, 154, 168, 173, 182, 188, 211, 223, 238, 245, 251, 252, 254, 290, 294, 312, 337, 349, 358, 361, 377, 380, 422, 424, 432, 451, 452, 459, 460, 461, 465, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "advanc": [31, 67, 75, 84, 91, 100, 103, 104, 108, 147, 164, 166, 172, 173, 174, 183, 184, 191, 208, 222, 231, 252, 255, 258, 264, 267, 275, 289, 334, 338, 342, 345, 349, 363, 376, 380, 386, 398, 407, 408, 418, 423, 424, 430, 457, 461, 466, 471, 477, 479, 480], "pywidestringlist": [31, 67, 477], "pystatus": [31, 32, 67, 470, 477], "pypreconfig": [31, 32, 41, 58, 67, 470, 477], "preiniti": [31, 41, 58, 67, 263], "pyconfig": [31, 32, 34, 58, 65, 67, 86, 290, 349, 350, 351, 452, 465, 468, 469, 470, 477, 478, 479], "isol": [31, 32, 44, 62, 65, 67, 86, 94, 95, 112, 120, 137, 190, 244, 324, 349, 350, 358, 384, 385, 395, 451, 457, 469, 470, 473, 475, 478, 479], "py_runmain": [31, 67, 477, 479], "py_getargcargv": [31, 67, 479], "provision": [31, 67, 86, 194, 200, 202, 205, 248, 349, 473, 474, 475, 476, 477, 479], "domain": [31, 67, 96, 99, 124, 143, 182, 191, 200, 205, 206, 209, 227, 232, 240, 241, 245, 263, 265, 266, 280, 282, 284, 332, 334, 335, 338, 343, 344, 349, 378, 390, 394, 451, 461, 463, 470, 472, 473, 474, 475, 476, 479], "custom": [31, 32, 33, 58, 62, 67, 70, 72, 75, 78, 84, 107, 113, 116, 117, 120, 124, 133, 137, 148, 153, 155, 158, 161, 178, 180, 182, 186, 190, 191, 204, 205, 208, 210, 214, 222, 239, 242, 244, 247, 248, 251, 252, 253, 255, 259, 264, 266, 268, 277, 282, 289, 295, 317, 320, 329, 330, 331, 338, 341, 349, 350, 354, 358, 359, 361, 365, 372, 382, 384, 385, 391, 395, 396, 398, 403, 406, 408, 409, 415, 421, 423, 426, 428, 432, 452, 454, 456, 458, 461, 462, 463, 464, 465, 466, 470, 471, 472, 474, 477, 478, 479], "pymalloc": [31, 33, 67, 349, 451, 452, 459, 464, 465, 471, 473, 475, 477, 479, 480], "tracemalloc": [31, 33, 67, 182, 185, 251, 358, 422, 451, 479], "cyclic": [31, 44, 49, 62, 67, 73, 84, 86, 267, 289, 407, 420, 424, 471, 473, 479], "garbag": [31, 41, 44, 49, 51, 62, 63, 66, 67, 72, 73, 74, 83, 84, 86, 94, 96, 100, 123, 137, 149, 156, 166, 167, 173, 176, 190, 210, 211, 251, 271, 280, 289, 290, 312, 334, 337, 349, 356, 358, 363, 384, 398, 407, 423, 424, 426, 448, 452, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480], "pyinitfrozenextens": 32, "pymem_setalloc": [32, 33, 41, 470], "pymem_setupdebughook": [32, 41, 185, 475, 479], "pyobject_setarenaalloc": [32, 41], "py_setpath": [32, 56, 350, 457, 469, 477, 479], "py_setprogramnam": [32, 33, 34, 56, 71, 72, 457, 469, 479], "py_setpythonhom": [32, 33, 56, 469, 479], "py_setstandardstreamencod": [32, 33, 469, 473, 479], "pysys_addwarnopt": [32, 56, 58, 469, 476, 479], "pysys_addxopt": [32, 56, 58, 469, 479], "pysys_resetwarnopt": [32, 56, 58, 479], "py_isiniti": [32, 34, 56], "pymem_getalloc": [32, 41], "pyobject_getarenaalloc": [32, 41], "py_getbuildinfo": [32, 56, 463], "py_getcompil": [32, 56], "py_getcopyright": [32, 56], "py_getplatform": [32, 56], "py_getvers": [32, 56], "py_decodelocal": [32, 33, 56, 58, 63, 71, 72, 474, 476, 479], "pymem_rawmalloc": [32, 33, 41, 65, 473, 479], "pymem_rawrealloc": [32, 41, 65, 473], "pymem_rawcalloc": [32, 41, 474, 479], "pymem_rawfre": [32, 41, 58, 71, 72], "py_encodelocal": [32, 56, 58, 63, 474, 476, 479], "py_getpath": [32, 34, 56, 468, 479], "py_getprefix": [32, 34, 56, 468, 479], "py_getexecprefix": [32, 34, 56, 468, 479], "py_getprogramfullpath": [32, 34, 56, 468, 477, 479], "py_getpythonhom": [32, 56, 468, 479], "py_getprogramnam": [32, 56, 468, 477, 479], "pyeval_initthread": [32, 56, 471, 478, 479], "py_byteswarningflag": [32, 470, 476], "bb": [32, 94, 102, 157, 258, 264, 451, 476, 479], "bytes_warn": [32, 33, 349, 470, 471], "py_debugflag": [32, 470], "parser_debug": [32, 33, 470], "parser": [32, 33, 67, 72, 78, 88, 94, 100, 103, 106, 110, 116, 120, 154, 156, 157, 172, 187, 190, 191, 193, 196, 197, 198, 200, 202, 203, 205, 210, 214, 235, 251, 259, 265, 270, 282, 294, 301, 306, 316, 328, 341, 347, 391, 395, 405, 406, 407, 408, 409, 411, 413, 427, 431, 432, 437, 439, 443, 447, 451, 452, 458, 459, 461, 462, 463, 465, 468, 470, 471, 472, 473, 474, 475, 476, 479], "expert": [32, 33, 289, 451], "pythondebug": [32, 33, 451, 452], "py_dontwritebytecodeflag": [32, 470], "write_bytecod": [32, 33, 470], "tri": [32, 33, 34, 41, 44, 48, 62, 67, 70, 72, 74, 75, 76, 77, 78, 83, 86, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 112, 113, 118, 120, 124, 131, 133, 136, 137, 138, 139, 144, 149, 156, 157, 163, 164, 172, 173, 174, 180, 183, 185, 187, 188, 190, 197, 200, 206, 209, 210, 222, 223, 225, 227, 242, 244, 247, 252, 255, 258, 259, 261, 263, 264, 265, 266, 268, 273, 276, 279, 280, 289, 290, 292, 293, 294, 296, 299, 302, 305, 310, 311, 312, 316, 317, 319, 320, 328, 329, 330, 332, 334, 337, 338, 341, 342, 345, 349, 354, 355, 357, 358, 361, 363, 365, 371, 377, 380, 382, 385, 386, 391, 395, 396, 398, 399, 403, 404, 409, 415, 416, 418, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 439, 442, 445, 451, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "pythondontwritebytecod": [32, 33, 84, 349, 451, 464], "py_frozenflag": [32, 470], "pathconfig_warn": [32, 33, 470], "_freeze_modul": [32, 479], "frozenmain": 32, "py_hashrandomizationflag": [32, 470], "hash_se": [32, 33, 470], "use_hash_se": [32, 33, 470], "pythonhashse": [32, 33, 424, 451, 472, 479], "secret": [32, 67, 131, 171, 232, 251, 280, 289, 290, 302, 315, 324, 338, 422, 451, 458, 479], "seed": [32, 33, 67, 86, 287, 290, 315, 338, 340, 349, 422, 451, 465, 471, 478, 479], "py_ignoreenvironmentflag": [32, 470, 476, 479], "use_environ": [32, 33, 34, 470, 478], "pythonpath": [32, 33, 34, 70, 85, 108, 149, 349, 350, 358, 428, 446, 451, 455, 457, 473, 479], "pythonhom": [32, 33, 34, 108, 350, 358, 451, 457, 475], "py_inspectflag": [32, 470], "script": [32, 33, 34, 65, 67, 71, 72, 74, 78, 85, 86, 88, 96, 99, 100, 101, 107, 108, 110, 112, 118, 120, 150, 160, 166, 181, 185, 190, 207, 210, 219, 225, 227, 237, 241, 242, 247, 248, 251, 277, 289, 294, 305, 306, 308, 310, 312, 321, 324, 327, 331, 337, 347, 349, 350, 358, 365, 372, 374, 382, 384, 391, 394, 395, 399, 403, 416, 417, 425, 428, 430, 431, 432, 446, 449, 451, 452, 454, 456, 458, 459, 460, 461, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "enter": [32, 33, 67, 78, 83, 84, 85, 89, 91, 94, 96, 106, 133, 142, 149, 153, 154, 156, 161, 166, 174, 186, 222, 244, 255, 279, 289, 290, 294, 309, 322, 332, 337, 338, 341, 349, 355, 361, 365, 371, 380, 384, 396, 423, 424, 425, 437, 439, 448, 451, 460, 461, 463, 471, 472, 473, 476, 477, 479], "stdin": [32, 33, 58, 65, 67, 75, 84, 86, 93, 94, 98, 118, 120, 124, 128, 131, 135, 142, 149, 153, 154, 160, 161, 173, 180, 183, 187, 190, 205, 211, 212, 215, 226, 231, 244, 245, 255, 256, 259, 280, 290, 293, 294, 306, 312, 318, 325, 328, 341, 344, 345, 349, 354, 357, 358, 374, 383, 391, 403, 416, 423, 424, 426, 428, 432, 436, 437, 438, 439, 442, 444, 445, 446, 447, 448, 451, 452, 459, 460, 461, 462, 464, 465, 466, 468, 470, 472, 473, 474, 475, 476, 478, 479], "pythoninspect": [32, 33, 451, 461], "py_interactiveflag": [32, 470], "py_isolatedflag": [32, 470], "neither": [32, 75, 89, 94, 97, 103, 112, 131, 141, 142, 155, 178, 183, 188, 190, 193, 202, 206, 222, 239, 259, 264, 267, 268, 272, 280, 289, 290, 296, 316, 335, 337, 338, 341, 349, 372, 376, 382, 384, 399, 421, 422, 424, 426, 451, 470, 473, 475, 476, 479], "directori": [32, 33, 50, 67, 72, 74, 75, 78, 83, 84, 85, 88, 89, 92, 94, 96, 100, 106, 108, 110, 112, 116, 135, 149, 150, 160, 164, 166, 181, 186, 187, 190, 197, 207, 209, 210, 216, 217, 220, 222, 227, 242, 244, 245, 247, 248, 249, 250, 251, 268, 276, 280, 289, 293, 294, 299, 307, 308, 309, 310, 317, 321, 324, 328, 331, 337, 338, 339, 345, 347, 349, 350, 351, 353, 354, 356, 358, 364, 371, 376, 380, 384, 391, 395, 398, 399, 403, 417, 418, 419, 421, 428, 439, 447, 451, 452, 457, 458, 459, 461, 462, 463, 465, 466, 467, 470, 472, 473, 475, 476, 477, 478, 479, 480], "site": [32, 33, 67, 84, 94, 106, 107, 108, 164, 207, 222, 240, 241, 247, 248, 251, 256, 264, 290, 299, 312, 332, 349, 350, 351, 354, 391, 395, 396, 410, 426, 428, 434, 446, 449, 451, 452, 457, 458, 463, 465, 466, 472, 473, 474, 479, 480], "py_legacywindowsfsencodingflag": [32, 470, 479], "legacy_windows_fs_encod": [32, 33, 58, 470], "surrogatepass": [32, 33, 155, 451, 473, 475, 479], "pythonlegacywindowsfsencod": [32, 33, 349, 451, 475], "529": [32, 63, 67, 290, 349, 451, 457, 477, 479], "py_legacywindowsstdioflag": [32, 470], "legacy_windows_stdio": [32, 33, 470], "fileio": [32, 33, 67, 116, 118, 222, 255, 465, 473, 479], "_windowsconsoleio": [32, 33], "pythonlegacywindowsstdio": [32, 33, 349, 451, 475], "528": [32, 33, 67, 457, 479], "py_nositeflag": [32, 470], "site_import": [32, 33, 470], "entail": [32, 33, 451], "py_nousersitedirectori": [32, 470], "user_site_directori": [32, 33, 470], "pythonnousersit": [32, 33, 331, 451, 464], "py_optimizeflag": [32, 470], "optimization_level": [32, 33, 470], "pythonoptim": [32, 33, 451], "py_quietflag": [32, 470], "quiet": [32, 33, 88, 108, 160, 183, 187, 272, 289, 308, 349, 358, 393, 457, 462, 465, 468, 470, 471, 474, 479], "copyright": [32, 33, 67, 68, 72, 85, 108, 121, 165, 232, 244, 312, 349, 409, 422, 444, 446, 451, 471, 477], "py_unbufferedstdioflag": [32, 470], "buffered_stdio": [32, 33, 470], "stdout": [32, 33, 58, 63, 65, 67, 72, 86, 89, 99, 100, 118, 120, 124, 128, 131, 135, 137, 149, 153, 161, 166, 173, 174, 187, 188, 190, 207, 213, 220, 222, 239, 244, 245, 255, 259, 265, 266, 280, 289, 290, 294, 297, 304, 305, 306, 312, 318, 330, 341, 345, 349, 354, 355, 358, 374, 376, 377, 384, 385, 395, 396, 403, 409, 413, 418, 424, 442, 446, 447, 451, 452, 457, 458, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 476, 479], "unbuff": [32, 255, 345, 349, 451, 479], "pythonunbuff": [32, 33, 349, 451, 479], "py_verboseflag": [32, 470], "verbos": [32, 33, 62, 67, 88, 89, 97, 99, 100, 108, 118, 157, 174, 184, 185, 190, 207, 223, 225, 261, 265, 289, 298, 316, 328, 329, 342, 349, 353, 354, 358, 359, 363, 378, 384, 395, 415, 424, 457, 460, 461, 462, 464, 465, 469, 470, 471, 473, 475, 476, 479], "show": [32, 33, 67, 71, 72, 75, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 104, 106, 107, 116, 118, 120, 124, 137, 149, 150, 153, 155, 157, 166, 169, 173, 176, 183, 185, 186, 187, 190, 199, 208, 210, 213, 222, 223, 231, 232, 239, 240, 244, 245, 247, 258, 259, 264, 275, 280, 289, 290, 296, 304, 305, 315, 318, 329, 331, 334, 337, 338, 340, 341, 342, 354, 363, 364, 365, 366, 371, 372, 374, 376, 377, 380, 384, 385, 386, 394, 395, 396, 398, 415, 416, 417, 427, 431, 438, 447, 448, 449, 451, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 473, 474, 475, 478, 479], "cleanup": [32, 33, 34, 58, 67, 89, 94, 100, 113, 133, 138, 161, 166, 211, 281, 290, 335, 345, 347, 349, 356, 358, 384, 386, 398, 401, 407, 423, 424, 425, 426, 451, 458, 460, 463, 465, 466, 470, 471, 472, 477, 479], "pythonverbos": [32, 33, 451], "fundament": [32, 62, 67, 116, 191, 256, 280, 289, 296, 304, 305, 337, 381, 398, 428, 457, 458, 464, 475, 479], "builtin": [32, 33, 34, 52, 62, 67, 84, 86, 89, 92, 105, 120, 140, 155, 157, 184, 188, 190, 222, 227, 232, 241, 244, 247, 251, 252, 256, 258, 265, 296, 305, 312, 320, 331, 341, 349, 356, 381, 382, 386, 423, 424, 426, 428, 431, 433, 436, 446, 452, 464, 467, 468, 470, 471, 473, 474, 475, 476, 478, 480], "__main__": [32, 33, 34, 65, 67, 78, 83, 84, 86, 92, 99, 100, 101, 124, 142, 153, 163, 185, 187, 190, 197, 210, 225, 247, 251, 276, 280, 289, 294, 296, 305, 310, 312, 320, 321, 330, 335, 337, 339, 341, 358, 363, 378, 380, 382, 384, 385, 386, 395, 396, 398, 403, 417, 425, 429, 433, 436, 446, 451, 459, 462, 463, 464, 465, 467, 471, 472, 473, 474, 477, 478, 479], "argv": [32, 33, 34, 65, 67, 71, 72, 100, 112, 116, 124, 134, 140, 185, 187, 190, 215, 225, 244, 289, 290, 294, 306, 312, 321, 335, 339, 349, 352, 365, 384, 403, 439, 444, 446, 447, 451, 461, 465, 466, 471, 476, 477, 479], "pysys_setargvex": [32, 56, 465, 469, 471, 479], "py_finalizeex": [32, 34, 56, 58, 71, 98, 475, 479], "py_initializefromconfig": [32, 33, 41, 350, 470, 477, 479], "consol": [32, 33, 65, 67, 84, 91, 99, 100, 112, 173, 175, 177, 190, 198, 244, 265, 290, 294, 310, 317, 345, 349, 400, 451, 457, 460, 464, 471, 472, 476, 479], "o_text": [32, 67, 116, 279, 290], "o_binari": [32, 33, 67, 116, 279, 290], "affect": [32, 37, 44, 58, 59, 63, 67, 72, 83, 92, 93, 94, 100, 103, 108, 137, 142, 164, 174, 180, 183, 188, 190, 199, 202, 222, 227, 240, 244, 247, 255, 263, 266, 268, 275, 290, 304, 316, 317, 318, 319, 334, 337, 338, 342, 345, 350, 352, 354, 358, 362, 363, 371, 372, 380, 382, 384, 385, 386, 390, 396, 398, 401, 403, 406, 423, 424, 426, 428, 432, 440, 451, 452, 457, 458, 459, 460, 461, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "py_initializeex": [32, 56, 98, 479], "initsig": 32, "registr": [32, 58, 158, 166, 290, 296, 326, 391, 401, 416, 464, 479], "undo": [32, 67, 153, 174, 219, 244, 264, 380, 385, 464, 479], "py_newinterpret": [32, 56, 98, 479], "ideal": [32, 62, 94, 100, 102, 106, 133, 148, 180, 349, 396, 403, 462, 471], "flush": [32, 67, 99, 100, 104, 113, 116, 117, 124, 128, 131, 134, 147, 155, 157, 174, 211, 222, 242, 255, 264, 266, 267, 268, 275, 280, 282, 290, 311, 319, 330, 334, 345, 349, 358, 395, 401, 403, 409, 420, 472, 473, 475, 477, 479], "restart": [32, 100, 174, 209, 244, 265, 294, 330, 357, 362, 464, 465, 474, 476, 477, 479], "itself": [32, 41, 44, 48, 50, 60, 62, 63, 66, 67, 71, 72, 74, 75, 84, 87, 89, 92, 93, 94, 98, 99, 100, 103, 107, 108, 112, 113, 117, 118, 120, 124, 131, 137, 142, 148, 149, 152, 153, 160, 173, 174, 175, 178, 180, 185, 188, 190, 192, 194, 200, 202, 210, 212, 222, 223, 240, 242, 244, 245, 247, 252, 254, 256, 258, 259, 265, 266, 268, 278, 279, 280, 281, 285, 289, 290, 293, 296, 305, 311, 316, 328, 329, 334, 337, 338, 341, 342, 343, 345, 349, 351, 354, 355, 357, 358, 361, 372, 377, 380, 381, 382, 384, 385, 390, 391, 393, 395, 396, 410, 411, 412, 415, 424, 425, 426, 428, 430, 431, 432, 451, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 476, 478, 479], "loadabl": [32, 62, 98, 247, 304, 337, 452, 457, 479], "dll": [32, 56, 67, 76, 83, 108, 173, 266, 290, 349, 365, 457, 463, 464, 468, 473, 477, 479], "unload": [32, 67, 98, 184, 358, 398, 479], "hunt": [32, 289, 479], "develop": [32, 33, 56, 67, 74, 76, 77, 84, 86, 89, 91, 96, 98, 99, 100, 102, 103, 106, 123, 124, 149, 158, 166, 173, 183, 184, 210, 211, 232, 247, 251, 261, 264, 265, 266, 289, 290, 304, 310, 337, 341, 345, 349, 358, 364, 365, 371, 380, 382, 396, 415, 418, 421, 451, 452, 453, 457, 459, 460, 461, 462, 463, 465, 466, 471, 472, 473, 474, 477, 478, 479, 480], "random": [32, 33, 34, 67, 72, 83, 84, 86, 91, 94, 100, 106, 116, 124, 132, 147, 155, 170, 171, 173, 190, 215, 216, 223, 244, 251, 254, 255, 258, 280, 287, 289, 305, 316, 323, 324, 325, 340, 354, 358, 380, 384, 394, 406, 420, 422, 424, 447, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 472, 473, 474, 477, 479], "amount": [32, 44, 72, 75, 83, 84, 89, 94, 124, 131, 137, 174, 183, 232, 255, 256, 267, 280, 285, 289, 290, 292, 293, 296, 302, 304, 319, 327, 329, 330, 334, 339, 341, 360, 361, 362, 365, 368, 372, 380, 391, 405, 407, 459, 462, 464, 471, 473, 474, 475, 476, 478, 479], "tie": [32, 183, 305, 338, 423, 477, 479], "_pysys_clearaudithook": [32, 140], "py_fin": [32, 33, 56, 465, 479], "stdio_encod": [32, 33, 349], "stdio_error": [32, 33, 349], "pythonioencod": [32, 33, 290, 349, 451, 464, 473, 479], "backslashreplac": [32, 33, 106, 155, 211, 222, 255, 264, 290, 341, 349, 451, 461, 474, 476, 479], "program_nam": [32, 33], "durat": [32, 34, 100, 133, 137, 180, 268, 280, 305, 334, 335, 338, 341, 349, 357, 358, 361, 362, 384, 402, 465, 470, 471, 472, 474, 477, 479], "prefix": [32, 33, 34, 46, 56, 57, 60, 62, 63, 67, 72, 89, 97, 102, 103, 116, 153, 156, 160, 164, 170, 172, 173, 174, 183, 187, 188, 200, 210, 225, 227, 232, 240, 242, 244, 253, 265, 266, 270, 277, 290, 294, 299, 309, 311, 312, 316, 329, 331, 341, 342, 344, 349, 350, 351, 356, 358, 360, 365, 371, 372, 376, 384, 385, 394, 395, 396, 406, 409, 411, 415, 419, 423, 427, 431, 432, 436, 445, 446, 451, 452, 456, 457, 461, 464, 465, 470, 471, 472, 474, 475, 477, 479], "complic": [32, 62, 72, 87, 89, 91, 93, 94, 98, 102, 103, 106, 107, 108, 139, 155, 166, 173, 178, 187, 190, 212, 223, 240, 289, 296, 316, 362, 424, 426, 458, 460, 461, 462, 463, 464, 465, 467, 471, 479], "usr": [32, 34, 78, 83, 88, 94, 96, 100, 106, 108, 149, 164, 173, 197, 227, 228, 269, 289, 291, 293, 300, 316, 323, 331, 341, 345, 349, 351, 356, 362, 365, 378, 391, 417, 434, 444, 449, 451, 452, 455, 456, 457, 459, 461, 463, 468, 471, 473, 474, 479], "bin": [32, 34, 67, 71, 78, 83, 94, 100, 106, 107, 108, 149, 161, 164, 197, 222, 242, 248, 251, 289, 290, 293, 298, 341, 342, 351, 391, 392, 395, 417, 424, 434, 444, 446, 449, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 479], "makefil": [32, 67, 71, 72, 78, 228, 232, 255, 293, 334, 338, 351, 424, 454, 458, 459, 464, 465, 470, 472, 473, 474, 475, 479], "exec": [32, 67, 72, 83, 108, 110, 120, 140, 142, 154, 156, 190, 209, 210, 222, 224, 247, 251, 290, 294, 305, 341, 345, 348, 349, 358, 365, 374, 376, 377, 378, 424, 425, 432, 433, 434, 436, 446, 452, 458, 459, 460, 462, 463, 466, 468, 473, 474, 479], "exec_prefix": [32, 33, 34, 67, 108, 280, 312, 331, 349, 350, 376, 395, 446, 451, 452, 456, 471], "background": [32, 67, 76, 91, 96, 100, 124, 137, 164, 166, 174, 243, 244, 266, 280, 290, 337, 345, 347, 358, 361, 365, 371, 372, 380, 423, 424, 448, 462, 473, 479], "plat": [32, 108, 457, 475, 479], "subtre": [32, 409, 458], "speak": [32, 33, 67, 72, 84, 108, 180, 341, 344, 352], "hardwar": [32, 106, 108, 139, 174, 183, 290, 292, 319, 334, 345, 362, 394, 401, 465, 474, 479], "softwar": [32, 67, 68, 76, 79, 84, 94, 99, 100, 106, 108, 149, 155, 174, 184, 189, 190, 191, 207, 209, 225, 232, 242, 243, 244, 263, 285, 290, 304, 338, 362, 380, 395, 401, 403, 415, 422, 455, 457, 458, 459, 461, 462, 464, 465, 479, 480], "sparc": [32, 292], "machin": [32, 50, 63, 67, 72, 83, 86, 96, 99, 100, 116, 131, 155, 174, 175, 180, 197, 209, 222, 227, 240, 252, 255, 257, 265, 266, 267, 269, 280, 281, 285, 290, 293, 300, 305, 310, 330, 332, 334, 337, 338, 341, 344, 361, 363, 394, 405, 416, 417, 424, 430, 452, 457, 458, 459, 460, 463, 464, 465, 467, 470, 471, 472, 476, 477, 479], "solari": [32, 67, 243, 290, 300, 303, 325, 349, 351, 362, 458, 465, 471, 472, 474, 476, 479], "consid": [32, 33, 38, 41, 48, 54, 55, 56, 62, 63, 67, 71, 72, 74, 75, 84, 87, 88, 89, 91, 92, 93, 94, 97, 98, 100, 101, 103, 108, 110, 112, 118, 124, 126, 142, 149, 152, 160, 164, 172, 173, 174, 178, 180, 181, 183, 187, 188, 190, 193, 201, 202, 205, 222, 223, 225, 227, 232, 240, 247, 249, 250, 252, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 272, 280, 281, 285, 289, 293, 294, 296, 305, 311, 316, 317, 325, 328, 330, 338, 341, 342, 344, 349, 351, 354, 358, 360, 361, 362, 365, 381, 382, 384, 385, 390, 391, 398, 403, 406, 407, 408, 416, 417, 423, 424, 425, 426, 428, 432, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 470, 471, 473, 474, 475, 476, 477, 478, 479], "intel": [32, 85, 139, 292, 305, 344, 452, 455, 463, 465, 474, 475, 477, 478, 479], "linux": [32, 33, 50, 67, 69, 70, 71, 79, 82, 83, 91, 92, 95, 96, 108, 113, 116, 130, 173, 174, 183, 209, 211, 212, 227, 244, 254, 255, 266, 275, 280, 292, 303, 306, 319, 323, 325, 329, 330, 334, 339, 345, 349, 351, 354, 356, 358, 361, 362, 365, 391, 444, 451, 452, 454, 457, 458, 459, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "major": [32, 67, 76, 89, 92, 93, 102, 104, 106, 107, 116, 120, 164, 174, 180, 184, 191, 200, 203, 205, 227, 232, 240, 282, 289, 290, 300, 302, 310, 341, 349, 351, 390, 457, 458, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 477, 478, 479], "revis": [32, 67, 106, 107, 344, 404, 422, 458, 463, 464, 467, 475, 476, 479], "stori": [32, 72, 145, 442], "strategi": [32, 41, 62, 72, 75, 78, 118, 133, 155, 266, 358, 365, 384, 399, 420, 421, 428, 437, 461, 466, 471, 476, 479], "meaningless": [32, 106, 459, 460, 473, 479], "mount": [32, 290, 291, 293, 329, 465, 470, 473, 476, 479], "automount": 32, "comput": [32, 33, 34, 48, 62, 63, 67, 71, 74, 75, 84, 86, 89, 91, 92, 94, 96, 97, 99, 100, 103, 105, 106, 108, 131, 137, 139, 144, 148, 152, 157, 158, 175, 178, 180, 182, 183, 188, 190, 213, 222, 223, 232, 251, 252, 256, 258, 264, 266, 272, 280, 290, 291, 293, 304, 305, 308, 315, 331, 334, 335, 338, 341, 349, 359, 361, 365, 380, 384, 391, 394, 401, 422, 423, 424, 426, 431, 432, 436, 447, 451, 452, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 473, 476, 477, 479], "delimit": [32, 58, 67, 84, 86, 89, 103, 164, 172, 190, 198, 214, 218, 235, 244, 245, 268, 285, 289, 296, 316, 317, 341, 342, 345, 365, 374, 390, 421, 429, 448, 457, 461, 471, 479], "maco": [32, 33, 56, 67, 79, 80, 82, 83, 84, 96, 106, 108, 109, 113, 116, 131, 173, 212, 254, 266, 275, 280, 290, 301, 305, 306, 317, 325, 329, 331, 334, 337, 338, 339, 349, 351, 358, 361, 362, 364, 365, 372, 391, 399, 422, 435, 449, 451, 454, 455, 458, 459, 460, 461, 463, 464, 465, 468, 470, 475, 476, 477], "startup": [32, 33, 67, 112, 185, 211, 247, 263, 265, 290, 331, 341, 349, 359, 364, 378, 428, 451, 463, 464, 472, 473, 474, 476, 478, 479], "module_search_path": [32, 33, 58, 469, 479], "module_search_paths_set": [32, 33, 58, 469, 479], "knowledg": [32, 91, 180, 191, 263, 327, 464], "compon": [32, 41, 44, 63, 67, 72, 84, 92, 99, 100, 103, 106, 107, 137, 155, 157, 174, 180, 183, 191, 205, 207, 227, 240, 242, 247, 248, 251, 252, 253, 278, 290, 293, 316, 328, 329, 341, 342, 349, 351, 352, 354, 362, 363, 365, 372, 380, 381, 382, 391, 401, 406, 411, 416, 418, 421, 424, 428, 431, 451, 457, 461, 462, 465, 466, 470, 471, 473, 474, 475, 476, 479], "wchar_": 32, "0a5": 32, "py3k": [32, 86, 102, 349, 351, 466], "63103m": 32, "2008": [32, 155, 180, 220, 329, 344, 409, 422, 464, 465, 466, 471, 479], "00": [32, 88, 101, 104, 106, 180, 183, 218, 232, 264, 316, 338, 362, 380, 421, 447, 448, 451, 463, 464, 465, 471, 475, 478, 479], "53": [32, 77, 100, 101, 137, 180, 183, 272, 315, 340, 341, 362, 386, 440, 463, 479], "55": [32, 92, 94, 99, 100, 101, 137, 183, 223, 281, 315, 316, 380, 437, 438, 440, 445, 446, 451, 475], "gcc": [32, 34, 62, 108, 173, 300, 349, 444, 451, 452, 464, 465, 467, 468, 469, 473, 475, 479], "period": [32, 56, 84, 89, 93, 99, 149, 174, 180, 183, 217, 223, 264, 266, 280, 291, 299, 320, 334, 335, 338, 340, 360, 372, 416, 426, 431, 457, 458, 461, 462, 463, 464, 465, 470, 471, 479], "offici": [32, 155, 192, 206, 273, 292, 338, 365, 384, 407, 415, 424, 457, 458, 459, 460, 463, 465, 471, 472, 474, 476, 478, 479], "lower": [32, 63, 67, 71, 83, 84, 86, 91, 96, 100, 102, 103, 105, 120, 124, 131, 137, 138, 144, 153, 155, 157, 160, 164, 174, 175, 177, 183, 192, 193, 197, 199, 200, 202, 208, 222, 223, 233, 242, 258, 268, 280, 285, 290, 305, 316, 319, 322, 334, 337, 338, 341, 342, 349, 361, 362, 363, 371, 373, 380, 382, 390, 391, 396, 424, 426, 432, 459, 461, 462, 463, 464, 465, 467, 471, 473, 478, 479], "suno": [32, 300, 354, 479], "sunos5": [32, 349], "darwin": [32, 300, 349, 362, 458, 464, 474, 479], "1991": [32, 68, 79, 337, 422], "1995": [32, 68, 206, 422, 458, 479], "sticht": [32, 68, 422], "mathematisch": [32, 68, 422], "centrum": [32, 68, 422], "amsterdam": [32, 362, 422], "67": [32, 101, 218, 222, 334, 340, 378, 380, 442, 464, 479], "aug": [32, 94, 108, 180, 419, 460, 461], "1997": [32, 145, 422, 465, 471], "22": [32, 76, 100, 103, 106, 157, 170, 173, 180, 188, 233, 244, 256, 258, 264, 281, 315, 334, 338, 342, 380, 419, 422, 440, 461, 470, 471, 477, 478, 479], "34": [32, 100, 137, 180, 183, 218, 223, 334, 338, 340, 426, 437, 445, 446, 471, 479], "argc": [32, 33, 65, 71, 72, 188, 479], "updatepath": [32, 465], "parse_argv": [32, 33, 34, 479], "safe_path": [32, 33, 349, 469], "host": [32, 67, 83, 100, 104, 124, 134, 140, 155, 174, 175, 206, 209, 214, 220, 222, 239, 240, 242, 244, 245, 253, 254, 266, 268, 280, 283, 284, 285, 290, 291, 293, 302, 310, 316, 332, 334, 335, 338, 341, 343, 344, 355, 358, 382, 385, 390, 391, 394, 403, 415, 452, 457, 458, 461, 463, 464, 465, 471, 472, 473, 474, 475, 476, 479], "condit": [32, 58, 62, 67, 72, 74, 77, 84, 86, 93, 94, 107, 108, 112, 120, 122, 131, 135, 137, 138, 142, 161, 178, 183, 187, 188, 196, 210, 223, 225, 237, 245, 247, 248, 254, 255, 264, 265, 268, 269, 278, 280, 294, 306, 311, 316, 324, 325, 334, 338, 347, 349, 356, 358, 382, 384, 396, 398, 408, 410, 412, 415, 422, 423, 424, 425, 429, 437, 441, 448, 451, 458, 459, 460, 462, 464, 465, 468, 471, 472, 473, 474, 475, 477, 478, 479, 480], "py_fatalerror": [32, 34, 41, 56, 58, 63, 478, 479], "algorithm": [32, 41, 67, 83, 84, 86, 103, 105, 106, 117, 124, 131, 139, 144, 147, 149, 155, 170, 179, 180, 183, 187, 190, 199, 205, 219, 222, 227, 232, 245, 251, 255, 256, 263, 266, 272, 277, 278, 305, 324, 334, 338, 341, 349, 360, 363, 386, 391, 403, 418, 419, 426, 452, 458, 460, 461, 463, 465, 467, 471, 472, 475, 477, 479], "prepend": [32, 33, 67, 89, 92, 100, 155, 160, 175, 199, 223, 258, 266, 268, 285, 289, 298, 309, 324, 328, 329, 347, 349, 352, 360, 395, 409, 417, 451, 457, 470, 479], "orig_argv": [32, 33, 67, 312, 349, 468, 479], "themselv": [32, 62, 72, 74, 84, 89, 97, 99, 103, 139, 149, 152, 155, 164, 172, 173, 191, 205, 208, 227, 258, 259, 272, 280, 294, 296, 316, 329, 337, 341, 358, 360, 382, 384, 385, 386, 407, 415, 424, 426, 428, 460, 463, 464, 465, 470, 471, 473, 474, 476, 479], "cve": [32, 341, 465, 469, 479], "5983": [32, 465], "achiev": [32, 44, 62, 71, 84, 89, 94, 98, 100, 118, 155, 164, 173, 223, 242, 258, 264, 280, 317, 338, 349, 358, 361, 363, 365, 370, 385, 386, 391, 395, 397, 409, 424, 431, 432, 458, 460, 461, 463, 473, 474, 479], "manual": [32, 44, 60, 67, 71, 72, 76, 78, 83, 84, 91, 92, 94, 98, 100, 102, 106, 108, 110, 118, 124, 130, 131, 137, 161, 173, 174, 182, 190, 194, 203, 208, 212, 222, 264, 268, 280, 281, 289, 290, 299, 301, 310, 317, 325, 334, 337, 341, 352, 354, 357, 362, 364, 371, 382, 385, 406, 409, 417, 420, 424, 430, 447, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 470, 472, 473, 474, 476, 477, 479], "pop": [32, 34, 67, 79, 83, 84, 89, 100, 119, 157, 158, 179, 183, 188, 191, 200, 233, 258, 268, 282, 290, 302, 328, 341, 371, 372, 380, 384, 395, 424, 431, 438, 448, 460, 461, 462, 463, 464, 471, 473, 474, 479], "pysys_setargv": [32, 56, 465, 469, 479], "pyrun_simplestr": [32, 33, 65, 71, 78, 85], "home": [32, 33, 67, 84, 85, 91, 100, 103, 149, 153, 164, 174, 211, 216, 219, 231, 244, 248, 268, 269, 290, 291, 293, 294, 303, 307, 311, 317, 328, 331, 345, 350, 351, 358, 365, 371, 380, 395, 430, 434, 449, 452, 457, 464, 471, 472, 474, 477, 479], "simplest": [32, 62, 71, 72, 75, 89, 94, 97, 98, 99, 103, 107, 118, 155, 166, 172, 183, 190, 197, 207, 264, 296, 316, 338, 361, 382, 384, 385, 424, 426, 451, 458, 460, 461], "simultan": [32, 62, 100, 102, 135, 136, 147, 183, 244, 255, 258, 268, 278, 327, 335, 337, 358, 361, 371, 432, 457, 464, 474, 477, 479], "twice": [32, 33, 76, 87, 94, 100, 102, 105, 106, 108, 144, 160, 164, 180, 185, 211, 252, 272, 316, 337, 374, 396, 418, 451, 458, 460, 461, 462, 464, 465, 475, 477, 479], "concurr": [32, 67, 83, 86, 112, 121, 122, 124, 127, 128, 131, 132, 135, 167, 223, 251, 268, 280, 293, 296, 308, 317, 327, 337, 338, 345, 349, 361, 409, 439, 465, 469, 477, 479, 480], "setswitchinterv": [32, 67, 83, 184, 312, 349, 358, 446, 471, 478, 479], "potenti": [32, 33, 34, 62, 84, 94, 98, 100, 102, 124, 164, 170, 180, 222, 245, 247, 250, 252, 258, 264, 265, 266, 280, 281, 290, 296, 302, 324, 335, 338, 341, 349, 360, 381, 382, 384, 390, 405, 417, 424, 428, 451, 457, 459, 460, 464, 470, 471, 472, 473, 474, 476, 479], "meantim": [32, 120, 479], "bookkeep": [32, 67, 174, 287, 470], "pythreadst": [32, 56, 468, 469, 470, 473, 478, 479], "pythreadstate_get": [32, 56, 479], "reacquir": [32, 173, 361], "py_end_allow_thread": [32, 56, 72, 477, 479], "hidden": [32, 67, 84, 116, 176, 188, 244, 294, 305, 335, 372, 380, 470, 472, 476, 477, 478, 479], "close": [32, 50, 62, 65, 67, 75, 77, 78, 84, 89, 94, 98, 99, 100, 104, 106, 115, 116, 117, 118, 124, 128, 130, 131, 133, 134, 135, 137, 149, 151, 152, 153, 154, 155, 158, 161, 164, 166, 167, 174, 181, 185, 187, 188, 191, 196, 204, 205, 210, 211, 215, 216, 220, 222, 231, 232, 237, 239, 240, 244, 245, 253, 255, 264, 266, 267, 268, 270, 272, 274, 275, 278, 280, 281, 282, 285, 289, 290, 292, 293, 295, 298, 305, 306, 311, 312, 317, 325, 326, 327, 328, 330, 332, 334, 335, 337, 338, 341, 345, 346, 347, 349, 354, 355, 356, 358, 361, 362, 365, 371, 372, 374, 380, 382, 384, 385, 386, 391, 395, 397, 400, 401, 403, 409, 412, 413, 415, 416, 417, 418, 424, 426, 427, 431, 439, 442, 448, 451, 458, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479], "expand": [32, 57, 62, 67, 74, 93, 103, 106, 108, 120, 164, 180, 183, 190, 227, 244, 252, 256, 258, 265, 280, 289, 293, 311, 316, 341, 351, 359, 360, 362, 365, 372, 385, 390, 401, 405, 406, 408, 409, 411, 416, 426, 457, 460, 461, 464, 471, 472, 473, 474, 475, 476, 477, 478, 479], "_save": 32, "pyeval_savethread": [32, 56, 471], "pyeval_restorethread": [32, 56, 471, 477, 479], "compress": [32, 67, 89, 94, 97, 100, 115, 117, 131, 155, 164, 197, 215, 221, 231, 232, 251, 253, 256, 258, 273, 278, 292, 296, 329, 333, 338, 339, 346, 354, 397, 405, 417, 418, 420, 447, 460, 461, 463, 465, 467, 471, 472, 473, 474, 475, 476, 477, 479], "cryptograph": [32, 232, 290, 338, 409, 472, 475], "zlib": [32, 67, 83, 89, 103, 108, 117, 155, 231, 232, 251, 329, 358, 418, 447, 460, 461, 463, 468, 469, 478, 479], "hashlib": [32, 67, 83, 170, 171, 234, 251, 324, 337, 422, 452, 464, 465, 466, 470, 479], "dedic": [32, 67, 100, 164, 190, 232, 338, 341, 358, 382, 479], "aforement": [32, 472], "pygilstate_ensur": [32, 56, 477, 479], "pygilstate_releas": [32, 56], "idiom": [32, 72, 84, 102, 105, 110, 112, 118, 190, 222, 280, 328, 338, 349, 382, 398, 461, 466, 471, 472, 478, 479], "pygilstate_st": [32, 56], "gstate": 32, "action": [32, 41, 54, 67, 72, 74, 75, 88, 91, 103, 113, 116, 120, 142, 153, 157, 166, 172, 174, 187, 197, 212, 225, 239, 245, 278, 280, 290, 294, 298, 305, 306, 322, 325, 330, 335, 337, 341, 347, 349, 354, 355, 356, 357, 361, 372, 380, 384, 385, 391, 395, 396, 403, 422, 424, 437, 451, 458, 459, 461, 462, 463, 464, 465, 467, 471, 473, 478, 479], "callsomefunct": 32, "beyond": [32, 67, 73, 91, 97, 99, 103, 116, 180, 183, 194, 200, 252, 259, 265, 268, 279, 290, 316, 334, 337, 338, 341, 344, 382, 401, 422, 423, 430, 459, 472, 479], "pygilstate_": 32, "mix": [32, 41, 67, 88, 100, 102, 108, 114, 164, 180, 183, 201, 202, 203, 204, 208, 215, 222, 225, 256, 272, 280, 292, 316, 335, 338, 341, 351, 358, 382, 390, 423, 424, 431, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 479], "unsupport": [32, 33, 67, 88, 89, 107, 113, 118, 124, 164, 180, 190, 222, 227, 255, 280, 281, 292, 296, 301, 334, 338, 345, 361, 382, 385, 390, 391, 401, 418, 428, 439, 457, 458, 462, 464, 471, 475, 478, 479], "face": [32, 106, 124, 147, 244, 266, 299, 390, 421, 458, 464, 466, 472, 473, 474, 479], "impact": [32, 74, 164, 247, 290, 293, 304, 331, 337, 338, 344, 345, 358, 382, 470, 479], "solv": [32, 83, 84, 89, 94, 103, 112, 244, 280, 327, 344, 354, 382, 385, 386, 423, 460, 461, 463, 467, 471, 473, 477, 479], "afterward": [32, 71, 92, 173, 180, 183, 258, 290, 325, 337, 349, 355, 386, 417, 424, 460, 461], "pthread_atfork": 32, "accomplish": [32, 84, 102, 118, 174, 245, 327, 406, 423, 479], "deadlock": [32, 135, 163, 209, 211, 264, 280, 313, 335, 345, 349, 361, 424, 464, 471, 472, 479], "defunct": 32, "pyos_afterfork_child": [32, 56, 58, 290, 476, 477, 479], "go": [32, 41, 67, 72, 74, 75, 77, 78, 84, 88, 89, 91, 93, 94, 99, 100, 102, 103, 104, 107, 108, 113, 131, 137, 149, 174, 186, 190, 197, 244, 247, 281, 293, 310, 316, 337, 338, 345, 349, 355, 361, 362, 364, 376, 390, 391, 423, 442, 453, 458, 459, 460, 461, 463, 465, 466, 472, 479], "belong": [32, 41, 57, 62, 72, 84, 93, 98, 108, 137, 190, 208, 240, 256, 269, 278, 289, 290, 311, 335, 337, 341, 372, 381, 396, 406, 412, 423, 424, 465, 472, 479], "pyinterpreterst": [32, 33, 56, 62, 468, 477, 478, 479], "natur": [32, 34, 84, 93, 103, 106, 112, 124, 152, 155, 173, 183, 190, 191, 227, 272, 275, 305, 327, 334, 372, 398, 399, 409, 426, 431, 458, 462, 464, 465, 466, 467, 471, 475, 476, 479], "cooper": [32, 86, 114, 137, 200, 222, 338, 349, 365, 422, 476, 479], "interp": [32, 365, 479], "didn": [32, 75, 78, 84, 89, 102, 103, 106, 112, 120, 166, 289, 316, 332, 386, 424, 458, 459, 460, 462, 463, 464, 465, 473, 476, 478, 479], "pyeval_threadsiniti": [32, 56, 462, 478, 479], "tstate": [32, 469, 470, 478, 479], "ensu": [32, 471], "_py_isfin": [32, 477], "unwant": [32, 84, 354, 476, 479], "needn": [32, 316, 344, 476], "pythreadstate_swap": [32, 56], "swap": [32, 71, 155, 157, 173, 188, 258, 280, 319, 334, 344, 358, 424, 432, 469, 476, 479], "readi": [32, 63, 67, 79, 91, 99, 100, 102, 130, 131, 134, 142, 148, 161, 167, 173, 183, 187, 239, 242, 255, 266, 280, 325, 326, 334, 338, 362, 377, 385, 412, 413, 458, 461, 471, 472, 474, 479], "uniqu": [32, 67, 72, 74, 89, 92, 94, 96, 99, 102, 106, 113, 118, 157, 173, 179, 180, 181, 187, 200, 202, 206, 208, 209, 222, 225, 233, 252, 256, 258, 259, 268, 278, 281, 290, 296, 302, 311, 337, 338, 341, 351, 361, 368, 372, 382, 384, 385, 390, 394, 422, 423, 424, 428, 436, 438, 452, 457, 462, 463, 465, 467, 470, 471, 476, 478, 479], "henc": [32, 72, 88, 100, 112, 120, 166, 169, 188, 190, 244, 250, 266, 280, 289, 293, 298, 305, 319, 328, 341, 344, 345, 361, 385, 396, 423, 424, 426, 462, 473, 476, 479], "gilstat": [32, 479], "everi": [32, 34, 41, 48, 56, 57, 67, 72, 74, 76, 84, 89, 92, 94, 98, 99, 100, 101, 103, 106, 107, 108, 110, 120, 124, 130, 137, 138, 141, 144, 155, 164, 167, 173, 174, 180, 181, 183, 184, 187, 188, 190, 191, 193, 202, 211, 222, 227, 240, 242, 244, 248, 252, 256, 258, 259, 264, 266, 275, 280, 289, 290, 292, 299, 311, 316, 329, 330, 331, 334, 335, 337, 341, 342, 345, 348, 351, 352, 360, 361, 372, 380, 382, 384, 385, 391, 396, 403, 404, 406, 409, 415, 421, 423, 424, 428, 430, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 475, 477, 479], "pygilstate_getthisthreadst": [32, 56, 479], "auto": [32, 67, 92, 107, 179, 180, 208, 244, 317, 328, 334, 338, 380, 385, 386, 452, 456, 458, 465, 468, 471, 475, 476, 479], "diagnost": [32, 41, 67, 74, 99, 382, 385, 403, 415, 417, 454, 471, 475], "pygilstate_check": 32, "sensit": [32, 164, 217, 245, 266, 273, 293, 349, 382, 384, 396, 451, 459, 461, 462, 463, 464, 470, 473, 479], "brace": [32, 89, 155, 278, 316, 341, 342, 394, 426, 431, 475, 476, 479], "discuss": [32, 56, 71, 72, 84, 94, 98, 100, 103, 106, 107, 108, 178, 187, 200, 205, 208, 227, 255, 264, 265, 272, 285, 290, 316, 327, 330, 338, 372, 382, 386, 391, 406, 415, 422, 423, 425, 426, 428, 431, 458, 459, 460, 463, 464, 465, 467, 473, 475, 478, 479], "py_block_thread": [32, 56], "py_unblock_thread": [32, 56], "pyinterpreterstate_new": [32, 56, 140, 479], "serial": [32, 40, 41, 67, 100, 164, 179, 191, 193, 194, 198, 200, 202, 203, 204, 205, 251, 259, 264, 266, 280, 281, 295, 301, 327, 330, 332, 337, 344, 349, 409, 442, 458, 464, 465, 467, 469, 471, 472, 473, 478, 479], "pyinterpreterstate_clear": [32, 56, 140], "pyinterpreterstate_delet": [32, 56], "pythreadstate_new": [32, 56, 479], "pythreadstate_clear": [32, 56, 479], "on_delet": [32, 479], "pythreadstate_delet": [32, 56, 479], "pythreadstate_deletecurr": [32, 478, 479], "uint64_t": 32, "pythreadstate_getid": [32, 56, 478, 479], "pythreadstate_getinterpret": [32, 56, 478, 479], "pythreadstate_entertrac": [32, 469, 479], "suspend": [32, 94, 137, 174, 252, 311, 330, 357, 361, 362, 423, 424, 426, 460, 461, 463, 474, 476, 479], "resum": [32, 94, 131, 137, 166, 174, 175, 188, 252, 280, 290, 293, 294, 296, 311, 357, 361, 403, 423, 424, 426, 460, 461, 462, 463, 469, 479], "pythreadstate_leavetrac": [32, 469, 479], "pyeval_settrac": [32, 460, 479], "pyeval_setprofil": [32, 460, 479], "pyinterpreterstate_get": [32, 56, 478, 479], "int64_t": 32, "pyinterpreterstate_getid": [32, 56, 476], "pyinterpreterstate_getdict": [32, 56, 479], "pymodule_getst": [32, 44, 56, 60, 89, 98, 478, 479], "_pyframeevalfunct": [32, 469, 479], "throwflag": [32, 65, 479], "throw": [32, 65, 67, 76, 87, 89, 93, 94, 99, 110, 126, 137, 158, 174, 188, 244, 290, 358, 382, 390, 424, 426, 427, 463, 470, 472, 475, 478, 479], "_pyinterpreterstate_getevalframefunc": [32, 479], "_pyinterpreterstate_setevalframefunc": [32, 479], "eval_fram": [32, 478], "pythreadstate_getdict": [32, 56, 479], "okay": [32, 93, 118, 164, 263, 382, 403], "pythreadstate_setasyncexc": [32, 56, 476, 479], "naiv": [32, 67, 103, 179, 200, 206, 232, 337, 340, 472, 479], "misus": [32, 44, 102, 337, 460, 479], "pyeval_acquirethread": [32, 56, 477, 479], "pyeval_releasethread": [32, 56], "pyeval_acquirelock": [32, 56, 471, 477, 479], "pyeval_releaselock": [32, 56, 471], "perhap": [32, 62, 71, 72, 75, 78, 83, 89, 93, 98, 99, 100, 103, 107, 108, 118, 149, 152, 174, 178, 190, 215, 240, 255, 263, 265, 280, 290, 296, 331, 334, 390, 407, 424, 426, 427, 458, 459, 460, 462, 463, 464, 468, 470, 477, 479], "pyinterpreterstate_main": [32, 479], "pyinterpreterconfig": [32, 470, 479], "py_newinterpreterfromconfig": [32, 470, 479], "use_main_obmalloc": 32, "check_multi_interp_extens": [32, 470], "pyinterpreterconfig_own_gil": [32, 470, 479], "allow_fork": 32, "unrestrict": [32, 58], "subprocess": [32, 67, 100, 121, 128, 129, 130, 140, 161, 163, 166, 205, 207, 245, 251, 254, 280, 290, 298, 324, 328, 334, 335, 358, 364, 378, 380, 395, 396, 451, 456, 461, 464, 465, 468, 471, 477, 478, 479, 480], "allow_exec": 32, "execv": [32, 67, 116, 254, 289, 290, 303, 472, 479], "allow_thread": 32, "allow_daemon_thread": 32, "daemon": [32, 67, 99, 100, 161, 266, 280, 313, 332, 334, 335, 361, 362, 398, 461, 464, 468, 472, 476, 478, 479], "init": [32, 44, 62, 67, 72, 85, 140, 173, 200, 247, 273, 282, 290, 293, 305, 312, 359, 371, 382, 463, 464, 479], "489": [32, 44, 67, 70, 72, 247, 478, 479], "py_mod_multiple_interpret": [32, 44, 479], "pyinterpreterconfig_default_gil": [32, 479], "pyinterpreterconfig_shared_gil": [32, 479], "tstate_p": 32, "config": [32, 33, 67, 71, 78, 84, 99, 100, 116, 164, 244, 251, 263, 264, 266, 289, 329, 349, 351, 364, 365, 368, 385, 386, 403, 448, 452, 456, 461, 465, 468, 469, 470, 471, 473, 475, 476, 477, 479], "total": [32, 33, 34, 58, 67, 72, 77, 84, 88, 89, 94, 100, 115, 124, 131, 132, 137, 157, 179, 180, 183, 187, 188, 190, 193, 202, 222, 223, 227, 255, 256, 258, 269, 290, 305, 316, 329, 334, 337, 338, 341, 342, 354, 362, 363, 372, 378, 382, 384, 391, 397, 424, 426, 431, 440, 451, 465, 469, 470, 471, 472, 473, 474, 475, 477, 479], "unsuccess": [32, 37, 479], "likewis": [32, 54, 84, 93, 105, 110, 118, 183, 187, 205, 206, 208, 264, 268, 335, 380, 411, 430, 431, 471, 472, 479], "briefli": [32, 76, 106, 183, 463, 479], "pymodule_fromdefandspec": [32, 44, 474], "squirrel": [32, 305], "across": [32, 41, 56, 60, 62, 67, 89, 96, 98, 102, 105, 108, 118, 161, 164, 166, 173, 180, 188, 190, 206, 251, 252, 257, 258, 263, 264, 265, 266, 280, 296, 297, 317, 325, 327, 341, 349, 361, 365, 372, 374, 380, 426, 431, 461, 462, 464, 465, 470, 471, 475, 476, 477, 479], "initmodul": 32, "essenti": [32, 72, 84, 92, 104, 131, 164, 212, 222, 247, 265, 266, 272, 285, 289, 290, 293, 321, 327, 335, 341, 349, 384, 407, 418, 429, 458, 460, 465, 466, 472, 473, 478, 479], "unisol": 32, "py_endinterpret": [32, 56, 98, 479], "haven": [32, 103, 106, 137, 149, 183, 385, 464, 465, 470, 479], "benefit": [32, 84, 94, 100, 102, 105, 112, 183, 264, 265, 281, 296, 338, 341, 349, 358, 372, 382, 398, 403, 457, 460, 461, 462, 465, 471, 472, 476, 477, 479], "truli": [32, 72, 83, 84, 98, 113, 137, 178, 268, 360, 391, 465, 466, 479], "advantag": [32, 50, 72, 74, 84, 89, 94, 99, 100, 108, 183, 194, 247, 296, 305, 321, 328, 341, 363, 371, 384, 398, 407, 409, 411, 458, 461, 462, 467, 470, 471, 472, 473, 474, 477, 479], "cpu": [32, 83, 101, 104, 106, 120, 123, 124, 128, 137, 155, 161, 163, 232, 233, 259, 267, 290, 319, 334, 341, 354, 362, 363, 378, 405, 452, 455, 461, 468, 470, 472, 476, 477, 478, 479], "encourag": [32, 57, 72, 76, 87, 102, 210, 289, 325, 326, 328, 382, 401, 407, 411, 430, 452, 458, 459, 466, 477, 479], "approach": [32, 34, 67, 72, 73, 75, 78, 84, 87, 88, 89, 94, 99, 100, 105, 106, 107, 113, 149, 155, 166, 183, 187, 190, 207, 222, 272, 280, 290, 330, 335, 337, 341, 345, 356, 361, 363, 365, 380, 382, 384, 386, 391, 409, 415, 424, 426, 457, 458, 459, 463, 464, 465, 467, 471, 472, 474, 475, 476, 479, 480], "554": [32, 157, 470, 479], "vigil": 32, "especi": [32, 62, 71, 72, 75, 83, 84, 97, 102, 106, 108, 124, 164, 166, 180, 183, 190, 195, 202, 244, 255, 259, 265, 281, 285, 290, 294, 305, 308, 310, 311, 330, 338, 339, 345, 349, 358, 380, 398, 406, 423, 428, 430, 458, 460, 461, 464, 465, 466, 471, 472, 473, 474, 475, 477, 479], "spite": 32, "come": [32, 63, 70, 74, 83, 84, 89, 91, 92, 96, 99, 100, 102, 104, 106, 107, 108, 112, 148, 149, 155, 158, 166, 174, 178, 183, 190, 206, 223, 232, 241, 247, 289, 292, 296, 297, 316, 317, 331, 335, 337, 338, 341, 365, 372, 382, 391, 395, 406, 411, 423, 424, 428, 430, 431, 437, 457, 458, 459, 460, 461, 462, 464, 473, 476, 477, 478, 479], "consequ": [32, 41, 51, 62, 72, 84, 158, 164, 188, 252, 280, 290, 293, 330, 334, 341, 349, 424, 426, 430, 463, 465, 466, 471, 472, 473, 474, 476, 479], "race": [32, 86, 138, 183, 223, 247, 290, 324, 334, 356, 398, 470, 471, 472, 478, 479], "hard": [32, 41, 71, 72, 75, 89, 91, 92, 94, 98, 100, 102, 103, 104, 160, 164, 172, 173, 174, 180, 187, 190, 199, 222, 264, 265, 289, 290, 293, 294, 305, 316, 319, 337, 338, 345, 354, 358, 371, 382, 386, 457, 458, 471, 473, 476, 477, 479], "asid": [32, 180, 222, 244, 305, 354, 386, 424, 426, 471, 476, 477], "challeng": [32, 280, 332, 396, 471, 476, 479], "communic": [32, 67, 100, 124, 131, 135, 161, 190, 209, 239, 242, 244, 251, 254, 266, 280, 281, 290, 296, 302, 306, 330, 334, 335, 338, 344, 345, 361, 372, 382, 403, 415, 422, 458, 462, 463, 464, 474, 476, 477, 479], "break": [32, 62, 63, 67, 74, 75, 77, 83, 89, 91, 93, 94, 100, 102, 103, 108, 120, 126, 130, 134, 137, 142, 149, 155, 166, 167, 173, 174, 187, 190, 197, 199, 205, 244, 247, 252, 258, 261, 268, 280, 289, 294, 296, 304, 311, 316, 318, 323, 330, 332, 334, 338, 341, 342, 345, 349, 355, 357, 358, 360, 361, 380, 384, 390, 395, 396, 403, 407, 423, 424, 425, 426, 427, 429, 431, 436, 439, 441, 458, 459, 460, 461, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 479], "stdlib": [32, 33, 34, 67, 72, 98, 100, 208, 232, 244, 351, 405, 452, 463, 469, 470, 471, 472, 474, 479], "mitig": [32, 67, 133, 241, 287, 341, 354, 440, 467, 477, 479], "effort": [32, 56, 78, 89, 100, 103, 223, 272, 304, 458, 460, 461, 462, 464, 465, 467, 468, 471, 476, 479], "insul": 32, "perfect": [32, 89, 94, 149, 193, 240, 244, 289, 338, 340, 426, 457, 479], "malici": [32, 106, 259, 265, 296, 311, 324, 345, 349, 354, 405, 407, 408, 409, 410, 415, 416, 451, 464, 479], "namespac": [32, 44, 60, 67, 72, 77, 78, 84, 86, 88, 89, 92, 94, 99, 112, 116, 120, 154, 157, 161, 165, 178, 188, 190, 204, 208, 219, 222, 223, 227, 244, 245, 247, 248, 252, 253, 264, 265, 270, 280, 290, 294, 296, 299, 311, 321, 328, 334, 341, 342, 348, 362, 363, 378, 381, 382, 384, 385, 386, 394, 396, 406, 407, 408, 411, 412, 423, 425, 432, 433, 441, 446, 451, 458, 459, 460, 461, 463, 465, 466, 470, 471, 473, 474, 475, 476, 477, 479, 480], "reachabl": [32, 190, 289, 290, 293, 382, 424, 478, 479], "delic": [32, 62], "biject": [32, 106], "assumpt": [32, 62, 72, 75, 98, 138, 158, 178, 180, 460, 464, 471, 475, 476, 479], "broken": [32, 67, 98, 100, 104, 106, 110, 136, 161, 187, 204, 209, 252, 263, 280, 290, 293, 302, 330, 338, 341, 349, 358, 360, 361, 365, 384, 385, 386, 390, 431, 451, 463, 467, 470, 472, 473, 477, 478, 479], "presenc": [32, 62, 72, 74, 110, 155, 158, 183, 215, 240, 247, 253, 289, 293, 305, 338, 345, 349, 374, 382, 384, 423, 424, 426, 460, 461, 466, 475, 479], "furthermor": [32, 83, 108, 118, 155, 188, 252, 265, 266, 268, 321, 341, 382, 395, 423, 457, 470, 473], "ctype": [32, 67, 72, 116, 140, 161, 193, 197, 202, 211, 251, 290, 299, 341, 349, 382, 465, 470, 472, 475, 479], "py_addpendingcal": [32, 56, 465, 478, 479], "schedul": [32, 67, 79, 83, 113, 116, 123, 161, 249, 251, 252, 319, 330, 349, 362, 372, 426, 460, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 478, 479], "queu": [32, 124, 153, 174, 266, 292, 334, 357, 464], "met": [32, 62, 74, 92, 93, 94, 99, 187, 208, 338, 422, 463, 477], "boundari": [32, 93, 103, 151, 180, 190, 193, 196, 202, 203, 208, 210, 280, 296, 316, 341, 344, 358, 411, 431, 464, 469, 479], "subinterpret": [32, 44, 62, 138, 247, 290, 341, 345, 352, 358, 469, 470, 477, 478, 479], "quick": [32, 49, 67, 74, 83, 84, 94, 100, 102, 103, 107, 108, 116, 184, 187, 210, 213, 214, 215, 219, 266, 287, 316, 330, 349, 365, 371, 382, 384, 386, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 473, 479], "busi": [32, 84, 104, 135, 209, 266, 335, 345, 365, 402, 411, 422, 437], "suitabl": [32, 62, 63, 72, 84, 89, 94, 99, 100, 106, 122, 144, 155, 166, 170, 173, 180, 187, 193, 201, 205, 206, 232, 241, 250, 256, 258, 263, 264, 265, 266, 268, 273, 280, 285, 290, 296, 305, 320, 321, 324, 330, 332, 334, 335, 341, 349, 354, 358, 361, 362, 363, 376, 384, 396, 403, 406, 409, 417, 418, 424, 451, 457, 460, 461, 462, 464, 465, 471, 475, 476, 477, 479], "pygilst": 32, "coverag": [32, 84, 102, 349, 376, 466, 468, 470, 473, 479], "overhead": [32, 34, 74, 100, 104, 130, 137, 185, 249, 258, 267, 290, 305, 337, 339, 341, 349, 363, 378, 380, 382, 398, 424, 428, 458, 459, 460, 461, 463, 467, 469, 471, 472, 475, 476, 477, 478, 479], "py_tracefunc": 32, "pertain": [32, 34, 62, 72, 290, 349, 371, 422, 466, 479], "pytrace_cal": 32, "pytrace_except": 32, "pytrace_lin": 32, "pytrace_return": 32, "pytrace_c_cal": 32, "pytrace_c_except": 32, "pytrace_c_return": 32, "pytrace_opcod": 32, "transfer": [32, 34, 67, 71, 72, 91, 107, 134, 141, 166, 188, 192, 193, 194, 195, 198, 199, 200, 203, 204, 205, 220, 232, 238, 239, 241, 268, 273, 280, 285, 290, 296, 332, 344, 391, 393, 415, 422, 426, 428, 464, 465, 471, 472, 475, 477, 479], "unwind": [32, 74, 101, 133, 166, 252, 424, 479], "f_trace_lin": [32, 349, 424, 469, 476, 479], "opcod": [32, 67, 187, 261, 296, 297, 349, 424, 461, 462, 464, 465, 468, 470, 473, 475, 476, 477, 478, 479], "f_trace_opcod": [32, 349, 424, 469, 476, 479], "monitor": [32, 96, 99, 100, 124, 130, 135, 183, 266, 305, 326, 335, 349, 395, 462, 464, 475, 476, 479], "setprofil": [32, 67, 140, 161, 280, 312, 349, 361, 446, 460, 468, 479], "pyeval_setprofileallthread": [32, 470, 479], "settrac": [32, 67, 140, 142, 161, 280, 312, 349, 361, 446, 460, 468, 479], "pyeval_settraceallthread": [32, 470, 479], "pyinterpreterstate_head": [32, 460], "head": [32, 62, 67, 100, 103, 134, 148, 149, 153, 175, 197, 219, 237, 238, 239, 242, 285, 291, 305, 315, 330, 331, 335, 338, 347, 364, 372, 380, 391, 409, 458, 460, 472, 479], "pyinterpreterstate_next": [32, 460], "pyinterpreterstate_threadhead": [32, 460], "pythreadstate_next": [32, 460], "offer": [32, 62, 72, 83, 90, 91, 92, 93, 94, 97, 99, 100, 106, 108, 154, 158, 169, 183, 213, 222, 232, 255, 258, 264, 265, 266, 268, 280, 293, 294, 316, 317, 321, 329, 334, 337, 341, 345, 350, 361, 362, 385, 391, 401, 404, 412, 422, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 473, 477, 478, 479], "pthread": [32, 113, 349, 361, 452, 471, 479], "pythread": 32, "behalf": [32, 124, 330, 422, 479], "introduc": [32, 33, 44, 72, 77, 84, 88, 89, 94, 98, 99, 100, 102, 103, 120, 124, 137, 185, 210, 232, 240, 242, 247, 248, 266, 268, 272, 280, 289, 294, 296, 302, 305, 338, 341, 342, 344, 348, 349, 365, 371, 372, 380, 381, 382, 390, 410, 421, 423, 424, 425, 426, 428, 430, 431, 432, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "supersed": [32, 58, 250, 285, 292, 338, 422, 458, 465, 468, 472, 476, 479], "py_tss_t": [32, 476], "539": [32, 67, 479], "py_limited_api": [32, 55, 56, 58, 60, 468, 469, 471, 476, 478, 479], "py_tss_needs_init": 32, "pythread_tss_alloc": [32, 56], "pythread_tss_fre": [32, 56], "pythread_tss_delet": [32, 56], "unassign": [32, 92, 343, 479], "dangl": [32, 62, 72, 76, 86, 290, 329, 341, 342, 358, 423, 479], "moreov": [32, 33, 222, 268, 380, 382, 465, 466, 479], "pythread_tss_set": [32, 56], "pythread_tss_get": [32, 56], "pythread_tss_cr": [32, 56], "pythread_tss_is_cr": [32, 56], "repeat": [32, 53, 57, 62, 67, 78, 94, 107, 110, 118, 153, 158, 173, 174, 180, 182, 187, 194, 211, 221, 222, 232, 244, 258, 263, 273, 280, 282, 289, 292, 294, 299, 305, 315, 316, 334, 337, 338, 341, 342, 344, 361, 363, 376, 377, 380, 382, 384, 385, 391, 401, 402, 403, 405, 423, 424, 451, 460, 461, 462, 464, 465, 471, 472, 473, 474, 475, 479], "forget": [32, 67, 71, 72, 89, 98, 100, 137, 183, 184, 358, 364, 372, 426, 427, 438, 462, 463, 464, 468, 470, 471, 477, 479], "distinct": [32, 34, 41, 44, 62, 84, 91, 102, 103, 106, 139, 166, 178, 180, 183, 190, 223, 258, 265, 267, 272, 281, 289, 296, 305, 331, 337, 338, 341, 344, 349, 365, 382, 403, 428, 431, 458, 460, 464, 471, 472, 475, 476, 478, 479], "pythread_create_key": [32, 56, 479], "ops": [32, 99, 120, 338], "pythread_delete_key": [32, 56], "pythread_set_key_valu": [32, 56, 473], "pythread_get_key_valu": [32, 56], "pythread_delete_key_valu": [32, 56], "pythread_reinittl": [32, 56], "py_preiniti": [33, 41, 58, 470, 477], "kind": [33, 62, 63, 67, 72, 75, 78, 84, 86, 89, 97, 98, 100, 102, 106, 108, 118, 120, 131, 149, 173, 180, 190, 210, 247, 248, 252, 255, 278, 280, 290, 293, 296, 298, 312, 316, 325, 337, 338, 341, 343, 349, 361, 365, 382, 384, 391, 396, 405, 409, 410, 411, 422, 423, 424, 426, 427, 428, 436, 437, 452, 457, 460, 461, 462, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479], "lc_ctype": [33, 58, 67, 86, 106, 243, 263, 290, 341, 451, 475, 476, 479], "unchang": [33, 41, 89, 92, 100, 103, 110, 142, 149, 153, 164, 173, 174, 183, 205, 227, 252, 258, 263, 266, 268, 290, 299, 316, 334, 337, 341, 342, 354, 365, 380, 381, 382, 390, 423, 424, 426, 431, 457, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 475, 476, 479], "587": [33, 67, 100, 338, 479], "pyconfig_initpythonconfig": [33, 477], "pyconfig_setbytesargv": [33, 477], "pystatus_except": [33, 470, 477], "goto": [33, 34, 67, 153, 219, 380, 452, 467, 469, 471, 479], "pyconfig_clear": [33, 477, 479], "pystatus_isexit": [33, 477], "exitcod": [33, 67, 161, 280, 290, 345, 358, 479], "py_exitstatusexcept": [33, 477], "pywidestringlist_append": [33, 477], "pywidestringlist_insert": [33, 477], "err_msg": [33, 337, 349, 358], "pystatus_ok": [33, 477], "pystatus_error": [33, 477], "pystatus_nomemori": [33, 477], "pystatus_exit": [33, 477], "pystatus_iserror": [33, 477], "wherea": [33, 72, 84, 100, 124, 135, 164, 259, 264, 280, 316, 326, 349, 365, 385, 398, 428, 457, 466, 478, 479], "preconfigur": [33, 385], "pypreconfig_initpythonconfig": [33, 477], "preconfig": [33, 477], "pypreconfig_initisolatedconfig": [33, 477], "pymem_allocator_not_set": 33, "pymem_allocator_default": 33, "pymem_allocator_debug": 33, "pymem_allocator_malloc": 33, "pymem_allocator_malloc_debug": 33, "pymem_allocator_pymalloc": 33, "pymem_allocator_pymalloc_debug": 33, "configure_local": 33, "coerce_c_local": 33, "coerce_c_locale_warn": 33, "coerc": [33, 63, 97, 164, 172, 183, 192, 193, 202, 258, 259, 342, 451, 458, 466, 476, 479], "dev_mod": [33, 185, 349, 479], "utf8_mod": [33, 290, 349, 470], "filesystem_encod": [33, 58, 86, 290, 349, 470], "filesystem_error": [33, 58, 86, 290, 349, 470], "ifdef": [33, 67, 72, 452, 458, 479], "py_preinitializefromarg": [33, 477], "py_preinitializefrombytesarg": [33, 477], "pars": [33, 58, 63, 64, 65, 67, 72, 78, 83, 84, 89, 97, 100, 103, 107, 108, 110, 112, 116, 120, 131, 134, 149, 153, 154, 156, 164, 172, 180, 184, 190, 191, 193, 196, 197, 198, 200, 202, 203, 205, 206, 214, 219, 222, 225, 227, 235, 237, 239, 240, 241, 242, 245, 247, 251, 253, 256, 259, 261, 265, 266, 268, 270, 273, 282, 283, 290, 305, 337, 341, 342, 345, 347, 351, 359, 362, 374, 378, 388, 391, 392, 395, 396, 403, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 426, 427, 431, 432, 439, 442, 446, 451, 458, 459, 460, 461, 462, 463, 464, 470, 472, 473, 474, 475, 477, 479, 480], "utf8": [33, 57, 67, 120, 149, 155, 191, 200, 202, 204, 205, 245, 253, 282, 290, 302, 311, 332, 349, 407, 409, 451, 457, 474, 476, 479], "pythonutf8": [33, 290, 349, 451, 457, 476, 479], "_pyruntim": [33, 478, 479], "pre": [33, 34, 72, 99, 100, 103, 109, 183, 188, 200, 205, 223, 242, 247, 255, 258, 265, 289, 321, 328, 335, 337, 349, 354, 377, 382, 383, 385, 391, 395, 423, 432, 451, 452, 457, 458, 461, 462, 463, 465, 471, 473, 474, 475, 476, 478, 479], "pyconfig_initisolatedconfig": [33, 477], "pyconfig_setstr": [33, 477], "config_str": 33, "pyconfig_setbytesstr": [33, 58, 477], "pyconfig_setargv": [33, 477], "pyconfig_setwidestringlist": [33, 479], "pyconfig_read": [33, 58, 86, 290, 349, 469, 477, 479], "stripp": [33, 479], "tune": [33, 223, 240, 289, 316, 319, 338, 458, 461, 470, 479], "strip": [33, 67, 84, 89, 94, 103, 118, 120, 155, 164, 167, 174, 175, 180, 187, 190, 197, 205, 206, 222, 225, 242, 244, 265, 266, 281, 305, 323, 328, 332, 335, 340, 341, 345, 352, 354, 358, 377, 378, 382, 390, 396, 403, 409, 418, 438, 439, 458, 461, 466, 467, 471, 474, 479], "unsaf": [33, 62, 67, 74, 84, 147, 164, 185, 253, 280, 324, 328, 337, 349, 354, 384, 385, 394, 451, 461, 470, 474, 476, 479], "py": [33, 34, 50, 67, 72, 75, 78, 84, 85, 86, 88, 89, 93, 94, 96, 99, 100, 101, 106, 108, 109, 110, 111, 114, 115, 118, 120, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 172, 173, 175, 178, 180, 181, 183, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 211, 213, 215, 217, 218, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 273, 276, 278, 281, 283, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 358, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 426, 428, 434, 444, 445, 446, 447, 448, 449, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "symbol": [33, 65, 67, 70, 72, 76, 78, 84, 91, 93, 100, 101, 106, 108, 116, 120, 154, 156, 173, 174, 183, 190, 208, 242, 251, 261, 263, 266, 269, 290, 293, 297, 316, 319, 329, 330, 334, 337, 339, 341, 349, 350, 353, 354, 355, 357, 358, 365, 372, 380, 383, 390, 401, 406, 411, 424, 427, 430, 432, 437, 451, 457, 458, 460, 462, 463, 465, 467, 468, 471, 475, 477, 478, 479], "link": [33, 34, 62, 65, 67, 70, 72, 73, 76, 77, 78, 83, 84, 85, 86, 99, 100, 108, 116, 120, 140, 158, 160, 175, 180, 197, 209, 232, 237, 240, 242, 254, 256, 258, 263, 264, 290, 293, 325, 329, 338, 339, 345, 349, 350, 353, 354, 358, 365, 371, 372, 395, 398, 399, 401, 403, 409, 410, 422, 424, 428, 451, 452, 458, 461, 462, 464, 465, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479], "resolv": [33, 67, 74, 84, 99, 100, 118, 124, 126, 137, 164, 173, 180, 188, 190, 208, 216, 247, 248, 249, 252, 256, 265, 289, 290, 293, 299, 300, 305, 311, 329, 334, 338, 345, 349, 381, 382, 384, 385, 407, 408, 409, 411, 412, 413, 425, 451, 457, 460, 472, 473, 474, 475, 476, 477, 479], "pythonsafepath": [33, 324, 349, 451, 469, 479], "base_exec_prefix": [33, 67, 312, 331, 349, 395, 446], "base_execut": 33, "_base_execut": [33, 479], "__pyvenv_launcher__": [33, 479], "base_prefix": [33, 67, 227, 312, 331, 349, 395, 446], "configure_c_stdio": 33, "warn_default_encod": [33, 255, 349, 451, 468, 479], "encodingwarn": [33, 67, 210, 255, 451, 479], "textiowrapp": [33, 67, 116, 118, 147, 185, 215, 222, 231, 250, 255, 267, 345, 356, 418, 464, 468, 472, 473, 475, 476, 479], "code_debug_rang": 33, "inclus": [33, 38, 41, 67, 89, 118, 157, 180, 182, 209, 235, 256, 262, 264, 267, 290, 305, 315, 316, 328, 340, 378, 409, 422, 426, 430, 432, 451, 465, 471, 476, 479], "caret": [33, 103, 174, 175, 190, 316, 377, 479], "pythonnodebugrang": [33, 424, 451, 469], "no_debug_rang": [33, 424, 451, 469], "check_hash_pycs_mod": 33, "check_sourc": 33, "552": [33, 67, 247, 308, 469, 479], "determinist": [33, 67, 100, 103, 166, 182, 185, 247, 252, 334, 337, 355, 409, 471, 476, 478, 479], "dev": [33, 67, 78, 79, 96, 100, 124, 185, 226, 266, 268, 269, 290, 291, 292, 304, 330, 345, 349, 351, 434, 451, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 474, 479], "pythondevmod": [33, 185, 451, 476], "dump_ref": 33, "dump": [33, 41, 67, 72, 89, 93, 99, 100, 120, 140, 149, 169, 172, 182, 185, 214, 251, 253, 259, 261, 263, 266, 270, 271, 281, 282, 283, 290, 294, 295, 296, 301, 305, 330, 337, 339, 377, 378, 403, 409, 415, 442, 451, 452, 458, 459, 460, 461, 464, 465, 467, 472, 473, 474, 475, 478, 479], "aliv": [33, 62, 67, 84, 173, 179, 223, 280, 281, 302, 341, 358, 361, 398, 423, 424, 448, 451, 459, 465, 466, 471, 473, 479], "pythondumpref": [33, 62, 451, 452, 477, 479], "py_trace_ref": [33, 34, 62, 452, 468, 477, 478, 479], "faulthandl": [33, 67, 173, 182, 185, 251, 294, 330, 358, 377, 451, 479], "pythonfaulthandl": [33, 185, 211, 451, 472], "getfilesystemencod": [33, 65, 67, 86, 106, 118, 290, 312, 349, 354, 417, 446, 475, 479], "android": [33, 63, 86, 263, 300, 349, 358, 475, 476, 477, 479], "vxwork": [33, 63, 86, 170, 263, 290, 298, 319, 468, 479], "nl_langinfo": [33, 67, 243, 263, 460, 479], "codeset": [33, 67, 155, 227, 243, 263, 460, 469, 477, 479], "announc": [33, 79, 106, 290, 472], "mbstowc": 33, "latin1": [33, 134, 155, 296, 311, 463, 472, 475, 478, 479], "ansi_x3": 33, "1968": 33, "getfilesystemencodeerror": [33, 67, 86, 312, 349, 446, 475], "surrogateescap": [33, 58, 63, 106, 155, 198, 205, 215, 222, 290, 334, 349, 354, 451, 471, 474, 475, 476, 479], "chosen": [33, 44, 72, 89, 93, 99, 103, 108, 183, 208, 222, 232, 265, 280, 281, 289, 296, 334, 338, 344, 349, 371, 394, 411, 424, 447, 451, 457, 461, 462, 466, 479], "import_tim": 33, "importtim": [33, 451, 476, 479], "pythonprofileimporttim": [33, 451, 476, 479], "install_signal_handl": [33, 468, 479], "repl": [33, 112, 121, 188, 316, 349, 451, 468, 477, 479], "int_max_str_digit": [33, 341, 349, 451, 479], "4300": [33, 341, 469], "int_info": [33, 67, 312, 341, 349, 446, 452, 467], "default_max_str_digit": [33, 341, 349], "640": [33, 341, 380], "str_digits_check_threshold": [33, 341, 349], "pythonintmaxstrdigit": [33, 341, 349, 451, 479], "prompt": [33, 65, 67, 78, 84, 108, 110, 112, 118, 140, 153, 154, 163, 170, 173, 186, 188, 190, 197, 204, 219, 222, 226, 244, 245, 251, 280, 294, 310, 316, 317, 332, 338, 341, 345, 349, 357, 361, 364, 377, 380, 391, 395, 428, 432, 437, 440, 445, 451, 457, 461, 464, 468, 471, 473, 475, 476, 477, 478, 479], "malloc_stat": 33, "statist": [33, 41, 67, 92, 182, 223, 251, 272, 285, 287, 305, 315, 329, 338, 349, 363, 376, 447, 451, 452, 458, 459, 463, 465, 469, 471, 472, 479], "pythonmallocstat": [33, 41, 451, 479], "platlibdir": [33, 67, 312, 349, 350, 451, 452, 478, 479], "pythonplatlibdir": [33, 350, 451, 479], "lib": [33, 34, 71, 76, 78, 83, 85, 88, 94, 96, 108, 110, 111, 114, 115, 118, 120, 121, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 137, 141, 142, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 172, 173, 174, 175, 178, 180, 181, 183, 186, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 217, 218, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 273, 276, 278, 280, 281, 283, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 313, 314, 315, 316, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 426, 434, 446, 448, 449, 451, 452, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479], "dlls": [33, 67, 73, 116, 290, 458, 463, 477, 479], "layout": [33, 41, 60, 62, 67, 75, 98, 99, 100, 108, 155, 186, 210, 264, 268, 338, 344, 351, 364, 365, 369, 394, 424, 428, 441, 457, 464, 470, 472, 473, 479], "virtual": [33, 34, 67, 69, 72, 84, 86, 100, 102, 108, 109, 114, 158, 173, 174, 176, 189, 207, 222, 223, 239, 248, 251, 252, 277, 290, 330, 334, 337, 338, 349, 351, 354, 364, 381, 391, 403, 423, 424, 425, 428, 436, 449, 454, 458, 464, 470, 471, 473, 475, 476, 477, 479, 480], "pythonpath_env": 33, "delim": 33, "pathsep": [33, 67, 116, 290, 331, 376, 399, 421, 451, 452], "peephol": [33, 462, 463, 471, 476, 479], "__debug__": [33, 65, 67, 165, 185, 222, 247, 251, 432, 446, 451, 461, 468, 479], "assert": [33, 34, 48, 65, 67, 100, 105, 110, 114, 120, 137, 141, 165, 178, 180, 181, 184, 185, 188, 190, 210, 222, 225, 252, 261, 280, 289, 294, 296, 316, 337, 341, 358, 381, 382, 384, 385, 396, 398, 407, 421, 422, 423, 426, 427, 429, 431, 446, 451, 452, 461, 462, 464, 467, 471, 473, 474, 477, 478, 479], "py_debug": [33, 34, 67, 184, 358, 452, 468, 477, 479], "log": [33, 58, 67, 92, 94, 95, 106, 116, 123, 124, 137, 145, 149, 150, 152, 161, 163, 166, 185, 190, 211, 220, 227, 233, 242, 251, 255, 272, 285, 287, 290, 302, 324, 329, 332, 338, 341, 345, 349, 352, 354, 358, 382, 384, 396, 403, 416, 424, 441, 447, 451, 457, 458, 459, 460, 462, 463, 464, 467, 468, 478, 479, 480], "pythonexecut": [33, 451], "with_next_framework": 33, "python3": [33, 56, 71, 88, 89, 96, 100, 108, 109, 110, 197, 205, 293, 331, 341, 350, 351, 378, 395, 417, 434, 444, 449, 451, 452, 456, 457, 465, 468, 470, 471, 473, 475, 477, 478, 479], "pycache_prefix": [33, 67, 160, 312, 349, 446, 451, 477, 479], "pythonpycacheprefix": [33, 349, 451, 477, 479], "run_command": [33, 140, 451], "run_filenam": 33, "skip_source_first_lin": 33, "run_modul": [33, 67, 140, 277, 321, 451, 479], "show_ref_count": 33, "showrefcount": [33, 451, 452, 473, 479], "py_ref_debug": [33, 452], "no_sit": [33, 349, 471], "invert": [33, 67, 92, 93, 94, 120, 155, 183, 188, 208, 221, 261, 288, 341, 424, 426, 427, 469, 479], "cmd": [33, 67, 85, 100, 118, 124, 135, 140, 142, 161, 174, 212, 219, 220, 251, 290, 294, 298, 305, 329, 332, 345, 376, 395, 451, 470, 471, 479], "dos": [33, 77, 174, 285, 289, 451, 458, 460, 471, 473, 479], "hack": [33, 83, 94, 98, 190, 328, 391, 451, 458, 459, 460, 470, 479], "pythontracemalloc": [33, 378, 451, 479], "perf_profil": 33, "trampolin": [33, 349, 470, 479], "pythonperfsupport": [33, 101, 451, 470], "warnopt": [33, 58, 67, 312, 349, 358, 396, 446, 476, 479], "filter": [33, 58, 67, 84, 94, 96, 99, 110, 116, 117, 139, 157, 174, 182, 185, 186, 187, 210, 213, 215, 216, 217, 222, 251, 258, 265, 309, 312, 325, 329, 334, 358, 384, 385, 395, 417, 421, 426, 438, 446, 451, 452, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 471, 475, 476, 477, 478, 479], "lowest": [33, 41, 99, 120, 183, 188, 208, 218, 233, 275, 338, 341, 345, 361, 363, 368, 426, 458, 463, 475], "highest": [33, 78, 92, 93, 99, 120, 131, 164, 208, 264, 275, 296, 297, 325, 330, 337, 338, 341, 349, 362, 368, 426, 464, 472, 479], "prioriti": [33, 67, 92, 122, 140, 164, 233, 247, 258, 259, 266, 290, 296, 313, 319, 322, 325, 338, 341, 345, 352, 361, 371, 424, 426, 460, 461, 464, 471, 472, 473, 475, 477, 479], "revers": [33, 37, 67, 72, 79, 91, 92, 94, 105, 106, 119, 138, 139, 155, 157, 158, 166, 172, 174, 178, 179, 180, 183, 184, 188, 208, 211, 222, 233, 251, 252, 256, 258, 280, 286, 290, 293, 305, 311, 316, 328, 337, 341, 347, 374, 378, 381, 382, 384, 390, 398, 424, 436, 438, 446, 458, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 479, 480], "pythonwarn": [33, 185, 396, 451, 465, 471, 476, 479], "dont_write_bytecod": [33, 67, 312, 349, 446, 464, 471], "xoption": [33, 58, 451, 469, 479], "_xoption": [33, 58, 67, 312, 349, 446, 451], "show_alloc_count": [33, 475, 478, 479], "init_python": 33, "my_program": 33, "pysys_getobject": [33, 56, 58, 469], "my_execut": 33, "unspecifi": [33, 89, 94, 102, 124, 147, 173, 190, 255, 256, 267, 272, 284, 290, 293, 296, 311, 334, 362, 372, 382], "coercion": [33, 67, 222, 290, 342, 424, 451, 452, 463, 465, 479, 480], "538": [33, 67, 451, 452, 479], "540": [33, 67, 290, 479], "pythoncoerceclocal": [33, 290, 451, 452, 476, 479], "softwarepythonpythoncorex": 33, "ypythonpath": 33, "hkey_current_us": [33, 67, 400, 401, 457], "hkey_local_machin": [33, 67, 400, 401, 457], "unset": [33, 58, 62, 67, 184, 188, 268, 290, 292, 341, 349, 358, 394, 428, 464, 465, 476, 479], "overridden": [33, 84, 92, 93, 100, 108, 118, 142, 153, 158, 164, 180, 205, 208, 222, 227, 240, 241, 242, 247, 252, 255, 264, 266, 289, 290, 294, 304, 310, 321, 335, 337, 338, 341, 345, 349, 354, 361, 372, 382, 384, 391, 395, 396, 403, 424, 426, 428, 439, 451, 464, 465, 472, 473, 477, 478, 479], "py_main": [33, 56, 65, 457, 476, 479], "pyvenv": [33, 331, 350, 395, 457, 472, 473, 475, 477, 479], "cfg": [33, 84, 108, 164, 265, 331, 350, 380, 395, 457, 464, 472, 474, 475, 479], "_pth": [33, 67, 277, 457, 475, 476, 479], "pybuilddir": [33, 479], "txt": [33, 34, 67, 77, 94, 100, 106, 108, 118, 157, 163, 166, 185, 190, 205, 215, 217, 222, 227, 228, 231, 232, 240, 244, 248, 251, 253, 255, 275, 285, 289, 290, 293, 296, 329, 341, 345, 349, 354, 365, 383, 388, 395, 409, 417, 418, 431, 436, 439, 447, 448, 449, 452, 457, 458, 464, 465, 467, 471, 472, 473, 474, 475, 477, 479], "432": [33, 476, 479], "bare": [33, 89, 99, 100, 120, 164, 200, 289, 332, 427, 455, 457, 463, 466, 469, 477, 479], "importlib": [33, 67, 84, 86, 96, 100, 102, 110, 222, 244, 251, 252, 265, 277, 299, 308, 321, 349, 358, 378, 381, 418, 419, 424, 429, 432, 446, 457, 467, 469, 470, 471, 477, 479, 480], "_init_main": 33, "_py_initializemain": 33, "move": [33, 67, 75, 83, 84, 89, 90, 91, 92, 97, 100, 107, 110, 116, 118, 120, 140, 153, 173, 174, 176, 178, 180, 193, 202, 203, 215, 216, 244, 258, 266, 268, 275, 290, 294, 308, 329, 358, 362, 364, 367, 371, 372, 380, 384, 386, 390, 391, 395, 409, 447, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "mayb": [33, 72, 89, 93, 94, 104, 268, 396, 427, 430, 468], "meta_path": [33, 67, 86, 140, 247, 248, 299, 312, 349, 428, 432, 446, 457, 461, 472, 475, 479], "motiv": [33, 92, 354, 424, 426, 459, 461, 462, 472, 477, 479], "anytim": [33, 149, 338, 341, 365], "res": [33, 41, 44, 78, 103, 137, 239, 280, 316, 334, 337, 479], "put": [33, 48, 67, 72, 74, 75, 78, 83, 84, 87, 89, 91, 92, 93, 94, 98, 100, 103, 104, 108, 112, 120, 132, 136, 149, 155, 161, 164, 172, 173, 188, 190, 198, 200, 205, 212, 227, 229, 238, 239, 244, 247, 265, 278, 280, 292, 296, 297, 313, 330, 331, 332, 334, 338, 341, 347, 351, 360, 361, 365, 385, 386, 391, 421, 428, 437, 445, 457, 459, 460, 461, 462, 463, 464, 465, 471, 474, 479], "cookbook": [34, 67, 73, 84, 95, 99, 107, 208, 264, 265, 266, 272, 363, 450, 471], "stdio": [34, 71, 72, 101, 290, 464, 469, 479], "_pi": [34, 477, 479], "pythonvers": 34, "version_info": [34, 67, 79, 102, 111, 120, 295, 312, 337, 349, 351, 446, 458, 465, 467, 469, 470, 471, 472, 479], "pythonx": [34, 71, 108, 331, 341, 349, 395, 479], "py_return_non": [34, 45, 72, 462], "py_ab": 34, "py_always_inlin": [34, 479], "inlin": [34, 51, 57, 59, 63, 67, 86, 89, 164, 187, 188, 193, 194, 200, 202, 234, 305, 316, 384, 452, 461, 463, 468, 469, 471, 475, 477, 479], "msc": [34, 85, 479], "py_charmask": 34, "128": [34, 63, 86, 97, 100, 106, 139, 157, 174, 183, 223, 232, 256, 281, 290, 337, 338, 380, 394, 431, 445, 463, 470, 474, 479], "127": [34, 57, 63, 100, 104, 106, 124, 131, 134, 167, 242, 244, 256, 280, 290, 335, 338, 341, 345, 349, 358, 378, 463, 474, 479], "255": [34, 63, 67, 86, 91, 97, 106, 111, 155, 157, 174, 188, 222, 232, 256, 341, 344, 380, 426, 469, 472, 474, 476, 479, 480], "py_deprec": [34, 477, 479], "pyapi_func": [34, 452, 461, 477, 479], "py_oldfunct": [34, 477], "msvc": [34, 62, 76, 85, 173, 462, 477, 479], "py_getenv": 34, "getenv": [34, 67, 116, 290, 303], "py_max": 34, "py_member_s": 34, "py_min": 34, "py_no_inlin": [34, 479], "lto": [34, 452, 469, 479], "pgo": [34, 67, 184, 358, 452, 464, 475, 478, 479], "33720": [34, 479], "py_stringifi": 34, "123": [34, 72, 89, 98, 100, 102, 103, 120, 183, 218, 222, 258, 265, 334, 341, 344, 426, 436, 442, 458, 460, 464, 465, 467, 471], "py_unreach": [34, 476, 479], "__builtin_unreach": [34, 479], "_py_no_return": 34, "py_unus": [34, 57, 75, 89, 479], "pydoc_strvar": [34, 44, 89, 98, 452, 479], "pop_doc": 34, "rightmost": [34, 145, 155, 157, 174, 183, 258, 290, 341, 426, 462], "deque_method": 34, "pycfunct": [34, 43, 56, 57, 72, 74, 75, 89, 98, 462, 479], "deque_pop": 34, "meth_noarg": [34, 57, 67, 75, 460, 461, 479], "pydoc_str": [34, 57, 62, 75, 479], "pysqlite_row_method": 34, "pysqlite_row_key": 34, "row": [34, 67, 72, 84, 87, 148, 172, 222, 258, 295, 365, 372, 374, 380, 431, 438, 463, 467, 471, 474, 475, 479], "pylist_check": [34, 37, 78], "today": [34, 67, 71, 93, 102, 106, 164, 179, 180, 208, 285, 292, 337, 386, 415, 431, 447, 459, 461, 462, 464, 477], "obvious": [34, 51, 62, 72, 89, 94, 99, 100, 103, 108, 164, 174, 183, 264, 289, 292, 296, 305, 320, 344, 345, 358, 375, 385, 386, 409, 457, 458, 462, 463, 475, 479], "solut": [34, 67, 72, 83, 84, 89, 92, 93, 94, 98, 100, 102, 103, 104, 106, 108, 130, 178, 183, 244, 258, 296, 316, 330, 335, 340, 347, 380, 386, 422, 428, 457, 458, 460, 461, 462, 463, 464, 465, 467, 471, 477, 479], "consider": [34, 67, 72, 84, 98, 99, 116, 124, 161, 174, 178, 190, 210, 220, 239, 245, 251, 253, 259, 268, 282, 285, 302, 312, 332, 337, 391, 406, 429, 458, 461, 462, 463, 465, 470, 472, 476, 479], "incref": [34, 62, 479], "sizeof": [34, 41, 62, 67, 75, 116, 173, 300, 344, 349, 385, 479], "theori": [34, 83, 316, 422, 473, 474], "goe": [34, 76, 88, 89, 92, 98, 102, 103, 118, 120, 131, 164, 166, 174, 175, 190, 227, 240, 244, 265, 272, 280, 289, 311, 349, 377, 382, 423, 440, 460, 471, 472], "down": [34, 50, 51, 67, 71, 75, 84, 94, 99, 100, 102, 104, 108, 124, 137, 149, 157, 174, 176, 188, 190, 209, 219, 242, 244, 264, 272, 280, 290, 293, 294, 305, 306, 316, 325, 330, 334, 335, 338, 349, 367, 372, 380, 384, 390, 403, 448, 451, 458, 460, 461, 465, 470, 474, 475, 476, 477, 478, 479], "scope": [34, 67, 75, 77, 84, 86, 89, 93, 97, 99, 100, 111, 112, 120, 142, 157, 188, 252, 256, 294, 304, 311, 317, 328, 334, 338, 348, 349, 365, 382, 385, 386, 395, 407, 409, 411, 423, 424, 426, 428, 432, 441, 446, 458, 464, 466, 470, 471, 472, 475, 476, 477, 478, 479, 480], "cancel": [34, 67, 122, 123, 124, 127, 132, 133, 136, 139, 149, 161, 163, 166, 174, 175, 186, 211, 278, 311, 322, 330, 361, 364, 367, 371, 372, 380, 384, 423, 426, 440, 469, 471, 476, 477, 478, 479], "we": [34, 63, 71, 72, 74, 75, 84, 87, 88, 89, 90, 92, 93, 94, 99, 100, 101, 103, 104, 106, 107, 108, 112, 118, 120, 124, 127, 131, 132, 134, 137, 142, 152, 153, 154, 157, 163, 164, 166, 167, 173, 180, 187, 188, 191, 193, 197, 199, 202, 205, 208, 210, 229, 232, 239, 240, 244, 248, 258, 263, 265, 266, 280, 281, 289, 290, 296, 316, 329, 330, 335, 337, 338, 341, 342, 344, 345, 358, 363, 365, 374, 378, 380, 382, 384, 385, 386, 390, 391, 394, 396, 398, 403, 407, 409, 415, 418, 422, 423, 424, 426, 427, 428, 437, 439, 442, 452, 458, 460, 461, 463, 464, 465, 466, 470, 471, 472, 475, 477, 478, 479], "aris": [34, 183, 255, 264, 265, 296, 381, 422, 426, 460, 462, 471, 477, 479], "pitfal": [34, 67, 103, 117, 469, 479], "extract": [34, 55, 67, 71, 73, 74, 88, 93, 94, 97, 98, 117, 118, 174, 180, 187, 188, 190, 194, 195, 197, 211, 222, 227, 239, 240, 248, 249, 252, 258, 290, 294, 309, 310, 312, 316, 327, 329, 332, 341, 349, 377, 390, 424, 457, 461, 462, 463, 464, 465, 470, 471, 473, 474, 475, 477, 479], "conceiv": [34, 296, 354], "innoc": 34, "flow": [34, 67, 72, 94, 128, 131, 174, 175, 183, 261, 345, 355, 382, 423, 425, 426, 458, 460, 461, 463, 464, 474, 479], "pyobject_": [34, 44, 62, 463], "pynumber_": 34, "pysequence_": 34, "pymapping_": 34, "soon": [34, 83, 89, 91, 102, 103, 106, 134, 137, 190, 225, 229, 258, 280, 290, 294, 341, 356, 358, 380, 382, 407, 423, 424, 461, 463, 470, 473, 478, 479], "explain": [34, 41, 44, 62, 72, 74, 75, 76, 84, 88, 91, 94, 97, 99, 100, 102, 103, 106, 107, 108, 112, 149, 173, 190, 210, 222, 232, 240, 242, 244, 252, 258, 289, 294, 341, 365, 372, 384, 385, 426, 451, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479], "term": [34, 72, 88, 89, 92, 94, 102, 108, 137, 174, 183, 206, 210, 218, 232, 240, 247, 259, 264, 272, 289, 296, 305, 341, 342, 358, 362, 365, 381, 395, 397, 398, 403, 410, 422, 423, 427, 428, 462, 464, 465, 467, 470, 472, 473, 475, 477, 479], "ownership": [34, 67, 98, 100, 124, 134, 254, 280, 361, 422, 464, 472, 479], "py_xdecref": [34, 44, 51, 62, 71, 72, 75, 469, 477, 479], "said": [34, 84, 91, 92, 164, 210, 280, 423, 424, 431, 445, 459, 460, 475, 479], "pylist_setitem": [34, 37, 56, 72], "pytuple_setitem": [34, 54, 56, 59, 71, 72], "pytuple_new": [34, 56, 59, 71], "1l": [34, 460, 461, 464, 465, 479], "2l": [34, 458], "pysequence_setitem": [34, 37, 53, 56, 62, 479], "pyobject_setitem": [34, 39, 48, 56, 62, 463, 479], "iis": [34, 403], "friend": [34, 62, 72, 91, 100, 108, 118, 187, 191, 289, 334, 341, 349, 384, 386, 409, 421, 458, 462, 466, 473, 476, 478, 479], "regard": [34, 62, 89, 98, 99, 166, 202, 223, 232, 266, 290, 337, 341, 345, 406, 409, 422, 457, 479], "saner": 34, "set_al": [34, 223], "pyobject_length": [34, 48, 56], "pylong_fromssize_t": [34, 38, 56], "pysequence_getitem": [34, 53, 56, 62, 78, 479], "plumag": [34, 72, 437], "pylist_getitem": [34, 37, 56, 72, 78, 479], "sum_list": 34, "pylist_s": [34, 37, 56, 78, 463], "pylong_check": [34, 38, 62], "fit": [34, 72, 97, 118, 173, 174, 175, 183, 188, 190, 192, 212, 247, 256, 266, 289, 304, 305, 334, 344, 360, 365, 380, 384, 391, 396, 406, 417, 422, 461, 462, 465, 470, 471, 472, 473, 478, 479], "bail": 34, "sum_sequ": 34, "pysequence_length": [34, 53, 56, 78], "353": [34, 67, 468, 479, 480], "py_ssize_t_max": [34, 46, 55, 89, 479], "incr_item": 34, "const_on": 34, "incremented_item": 34, "0l": [34, 72, 344], "pynumber_add": [34, 46, 56], "shell": [34, 67, 72, 75, 78, 79, 84, 85, 86, 91, 94, 100, 108, 109, 122, 124, 128, 135, 149, 153, 161, 164, 174, 190, 217, 219, 228, 251, 252, 259, 269, 281, 285, 289, 290, 291, 306, 310, 337, 347, 349, 350, 358, 364, 365, 380, 384, 395, 396, 401, 434, 435, 443, 444, 445, 446, 447, 449, 451, 452, 455, 456, 457, 458, 460, 462, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "fallback": [34, 67, 124, 160, 165, 181, 214, 227, 296, 329, 349, 354, 358, 372, 402, 424, 428, 471, 477, 479], "getpath": [34, 479], "specialbuild": [34, 452], "pydebug": [34, 349, 358, 452, 461, 468, 473, 479], "_debug": 34, "doubli": [34, 62, 84, 465], "pyiter_check": [35, 56, 62, 479], "pyiter_next": [35, 56, 62], "pyaiter_check": [35, 56, 479], "asynciter": [35, 48, 67, 158, 179, 184, 341, 382, 474, 479], "pyobject_getit": [35, 48, 54, 56, 62], "pysendresult": [35, 62], "pyiter_send": [35, 56, 62, 468, 479], "enum": [35, 41, 67, 95, 118, 160, 179, 238, 251, 252, 259, 305, 308, 316, 330, 338, 341, 381, 424, 437, 470, 472, 479], "presult": 35, "pygen_return": 35, "pygen_next": 35, "pygen_error": 35, "__getitem__": [36, 39, 53, 62, 63, 67, 79, 86, 96, 100, 105, 114, 157, 158, 173, 179, 191, 193, 200, 202, 208, 215, 221, 222, 268, 280, 282, 288, 316, 341, 342, 359, 382, 385, 386, 403, 406, 408, 409, 423, 426, 448, 460, 461, 462, 466, 469, 470, 471, 475, 477, 479], "pyseqiter_typ": [36, 56], "pyseqiter_new": [36, 56], "pyseqiter_check": 36, "seq": [36, 63, 84, 157, 188, 217, 222, 258, 288, 315, 341, 458, 462, 469, 471], "subscript": [36, 62, 67, 86, 173, 188, 210, 244, 261, 341, 382, 424, 432, 445, 451, 461, 464, 468, 469, 470, 478, 479], "pycalliter_typ": [36, 56], "pycalliter_new": [36, 56], "pycalliter_check": 36, "pylist_typ": [37, 56, 75], "pylist_checkexact": 37, "pylist_get_s": 37, "pylist_get_item": [37, 56], "pylist_set_item": [37, 468, 479], "pylist_insert": [37, 56], "front": [37, 89, 103, 166, 198, 205, 244, 258, 299, 386, 396, 403, 419, 424, 426, 451, 458, 461, 463, 465, 479], "pylist_append": [37, 56], "pylist_getslic": [37, 56], "pylist_setslic": [37, 56], "itemlist": 37, "assign": [37, 53, 60, 62, 67, 72, 74, 75, 78, 84, 86, 87, 88, 92, 93, 94, 106, 110, 113, 118, 120, 124, 137, 155, 164, 167, 173, 174, 178, 183, 188, 193, 199, 200, 202, 205, 208, 209, 210, 222, 223, 240, 247, 261, 264, 268, 275, 280, 281, 289, 290, 293, 294, 296, 311, 316, 327, 328, 334, 337, 338, 341, 344, 348, 349, 358, 360, 361, 372, 377, 382, 383, 384, 385, 396, 407, 409, 418, 421, 423, 424, 425, 427, 428, 429, 431, 436, 437, 438, 445, 452, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 472, 474, 475, 476, 478, 479, 480], "pylist_sort": [37, 56], "sort": [37, 67, 75, 76, 79, 83, 86, 88, 94, 107, 110, 118, 145, 149, 157, 164, 170, 173, 181, 183, 187, 190, 205, 222, 223, 229, 233, 245, 248, 251, 252, 253, 256, 258, 259, 263, 268, 280, 288, 289, 290, 293, 301, 304, 305, 315, 316, 325, 332, 337, 340, 341, 354, 358, 378, 380, 384, 391, 403, 406, 409, 418, 424, 426, 436, 437, 438, 446, 448, 457, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 476, 477, 478, 479], "pylist_revers": [37, 56], "pylist_astupl": [37, 56], "pylong_a": 38, "distinguish": [38, 62, 67, 72, 89, 120, 152, 158, 174, 184, 188, 190, 194, 222, 240, 252, 265, 272, 311, 338, 351, 372, 382, 396, 424, 426, 428, 457, 459, 460, 465, 472, 473, 479], "pylongobject": [38, 56, 470, 479], "pylong_typ": [38, 56], "pylong_checkexact": 38, "256": [38, 41, 63, 86, 97, 155, 170, 174, 183, 222, 232, 267, 323, 338, 341, 354, 424, 445, 462, 463, 477, 478, 479], "pylong_fromunsignedlong": [38, 56, 479], "pylong_fromsize_t": [38, 56, 479], "pylong_fromlonglong": [38, 56, 479], "pylong_fromunsignedlonglong": [38, 56, 479], "pylong_fromdoubl": [38, 56, 478, 479], "pylong_fromstr": [38, 56, 479], "radix": [38, 67, 183, 222, 263, 287, 349, 431, 479], "decim": [38, 58, 63, 67, 77, 84, 103, 106, 152, 155, 164, 175, 180, 218, 222, 223, 251, 256, 258, 259, 263, 265, 272, 287, 289, 305, 316, 340, 341, 342, 349, 359, 361, 362, 374, 375, 383, 384, 415, 422, 424, 426, 431, 440, 441, 445, 451, 452, 458, 463, 464, 465, 467, 468, 469, 477, 479, 480], "36": [38, 99, 101, 106, 222, 258, 268, 280, 315, 319, 340, 342, 362, 438, 442, 445, 447, 448, 449, 468, 471, 473, 477, 478, 479], "underscor": [38, 56, 67, 70, 84, 89, 93, 100, 144, 149, 155, 173, 183, 193, 202, 218, 222, 268, 304, 316, 328, 341, 342, 349, 350, 365, 385, 403, 418, 423, 424, 425, 426, 430, 431, 432, 464, 466, 467, 470, 479], "digit": [38, 58, 63, 67, 84, 98, 103, 106, 115, 139, 141, 144, 152, 155, 157, 170, 175, 180, 183, 190, 218, 222, 232, 241, 256, 263, 265, 272, 285, 290, 316, 318, 323, 337, 338, 341, 342, 349, 358, 359, 362, 363, 365, 374, 383, 384, 390, 391, 394, 409, 420, 422, 431, 440, 445, 452, 458, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 475, 479], "to_byt": [38, 67, 341, 479], "from_byt": [38, 67, 341, 479], "pylong_fromunicodeobject": [38, 468], "pylong_fromvoidptr": [38, 56], "pylong_asvoidptr": [38, 56], "__int__": [38, 62, 67, 218, 222, 382, 385, 424, 463, 465, 468, 469, 476, 477, 479], "pylong_aslongandoverflow": [38, 56, 465, 471], "long_min": 38, "pylong_aslonglong": [38, 56], "pylong_aslonglongandoverflow": [38, 56, 465, 471], "llong_max": 38, "llong_min": 38, "pylong_asssize_t": [38, 56], "pylong": [38, 467, 479], "pylong_asunsignedlong": [38, 56], "pylong_assize_t": [38, 56], "pylong_asunsignedlonglong": [38, 56, 467], "pylong_asunsignedlongmask": [38, 56], "reduct": [38, 67, 169, 295, 341, 470, 472, 479], "modulo": [38, 100, 183, 210, 222, 288, 330, 341, 372, 424, 426, 442, 461, 465, 471, 477, 479], "ulong_max": 38, "pylong_asunsignedlonglongmask": [38, 56, 479], "ullong_max": 38, "pylong_asdoubl": [38, 56, 479], "assur": [38, 75, 84, 152, 223, 272, 280, 374, 424, 465, 467, 471, 479], "usabl": [38, 53, 55, 58, 62, 63, 75, 84, 97, 102, 105, 124, 149, 155, 173, 174, 206, 222, 242, 247, 256, 265, 273, 280, 290, 334, 338, 341, 342, 345, 406, 424, 426, 428, 460, 461, 462, 463, 470, 471, 475, 476, 479], "pyunstable_long_iscompact": [38, 470, 479], "compact": [38, 41, 84, 103, 106, 120, 149, 153, 187, 194, 195, 259, 296, 304, 344, 377, 426, 461, 470, 472, 473, 475, 479], "critic": [38, 67, 74, 86, 99, 100, 116, 124, 188, 247, 264, 265, 266, 289, 402, 428, 447, 448, 461, 463, 464, 467, 469, 471, 474, 479], "fast": [38, 57, 63, 67, 93, 98, 139, 167, 181, 183, 188, 222, 231, 247, 251, 252, 255, 258, 266, 270, 295, 296, 305, 329, 341, 363, 365, 380, 382, 409, 424, 438, 458, 462, 463, 465, 471, 472, 473, 474, 475, 476, 478, 479], "pyunstable_long_compactvalu": [38, 470, 479], "speedup": [38, 296, 422, 427, 459, 463, 464, 465, 467, 470, 471, 472, 473, 477, 479], "neglig": [38, 341, 422], "pyobject_delitem": [39, 48, 56, 62, 461], "pymapping_check": [39, 56, 62], "pymapping_s": [39, 56, 62, 479], "pymapping_length": [39, 56], "pymapping_getitemstr": [39, 56], "pymapping_setitemstr": [39, 56, 479], "pymapping_delitem": 39, "del": [39, 48, 53, 57, 67, 72, 75, 84, 87, 92, 98, 116, 120, 142, 157, 175, 188, 193, 202, 222, 224, 227, 233, 244, 252, 261, 268, 280, 281, 288, 289, 290, 293, 296, 327, 341, 385, 398, 423, 424, 425, 426, 427, 428, 429, 431, 436, 437, 441, 448, 458, 459, 461, 463, 464, 465, 471, 479], "pymapping_delitemstr": 39, "pymapping_haskey": [39, 56], "pymapping_haskeystr": [39, 56], "pymapping_valu": [39, 56, 476, 479], "pymapping_item": [39, 56, 476, 479], "unmarshal": [40, 415, 461, 463, 475, 479], "py_marshal_vers": [40, 469, 479], "pymarshal_writelongtofil": [40, 469, 479], "pymarshal_writeobjecttofil": [40, 469, 479], "pymarshal_writeobjecttostr": [40, 469, 479], "pymarshal_readlongfromfil": 40, "pymarshal_readshortfromfil": 40, "pymarshal_readobjectfromfil": 40, "pymarshal_readlastobjectfromfil": 40, "aggress": [40, 341, 385, 463, 479], "pymarshal_readobjectfromstr": [40, 469, 479], "deal": [41, 62, 63, 67, 71, 102, 103, 106, 118, 123, 154, 155, 191, 193, 194, 202, 222, 255, 263, 279, 280, 289, 296, 315, 322, 324, 334, 362, 380, 386, 390, 409, 422, 427, 458, 460, 461, 462, 463, 466, 472, 474, 479], "aspect": [41, 71, 72, 89, 93, 100, 103, 107, 178, 180, 190, 247, 265, 290, 332, 390, 424, 471, 475], "prealloc": 41, "room": [41, 54, 340, 385, 430, 442, 466, 479], "polici": [41, 67, 100, 121, 124, 129, 133, 191, 193, 197, 198, 200, 202, 203, 204, 210, 222, 240, 282, 290, 332, 335, 338, 422, 452, 457, 459, 462, 465, 470, 473, 474, 475, 479], "adapt": [41, 67, 84, 89, 100, 120, 139, 173, 183, 188, 222, 227, 264, 294, 295, 329, 334, 338, 365, 380, 458, 459, 463, 465, 467, 469, 470, 475, 479], "peculiar": [41, 84, 124, 252, 290], "tradeoff": [41, 479], "deleg": [41, 62, 67, 98, 99, 100, 222, 223, 231, 264, 265, 266, 272, 296, 321, 381, 384, 386, 424, 426, 428, 466, 469, 471, 475, 477, 478, 479, 480], "corrupt": [41, 58, 92, 106, 144, 174, 209, 212, 240, 267, 268, 280, 296, 337, 341, 354, 457, 476, 477, 479], "writer": [41, 67, 72, 75, 106, 124, 134, 147, 155, 167, 190, 214, 243, 248, 255, 290, 316, 407, 409, 412, 451, 461, 470, 474, 476, 479], "calloc": [41, 474, 479], "bufsiz": [41, 67, 72, 118, 124, 292, 334, 345, 347, 354, 407, 408, 420, 462, 477, 479], "exclus": [41, 46, 62, 67, 103, 108, 116, 147, 148, 174, 183, 212, 255, 259, 266, 267, 268, 288, 289, 290, 316, 337, 340, 341, 354, 376, 378, 399, 418, 422, 424, 426, 464, 472, 473, 474, 477, 478, 479], "accur": [41, 51, 89, 102, 173, 204, 242, 272, 289, 305, 349, 354, 362, 363, 365, 378, 397, 418, 440, 462, 464, 465, 470, 471, 473, 475, 476, 477, 479], "footprint": [41, 91, 452, 472, 475, 477, 479], "procedur": [41, 71, 79, 94, 101, 119, 149, 155, 173, 305, 332, 343, 358, 380, 414, 415, 432, 437, 459, 460, 463, 471], "pythonmalloc": [41, 67, 185, 451, 452, 479], "shutdown": [41, 67, 86, 98, 100, 104, 116, 124, 133, 134, 138, 161, 163, 209, 210, 224, 245, 253, 264, 266, 280, 281, 330, 334, 335, 338, 361, 398, 401, 424, 426, 451, 464, 471, 473, 474, 476, 478, 479], "pymemallocatordomain": 41, "hint": [41, 67, 78, 84, 86, 87, 102, 117, 155, 164, 184, 199, 227, 238, 240, 243, 244, 251, 255, 259, 297, 341, 380, 381, 423, 424, 432, 469, 475, 476, 479, 480], "practic": [41, 62, 67, 73, 75, 83, 86, 91, 94, 95, 97, 99, 100, 102, 107, 118, 171, 174, 175, 183, 190, 191, 196, 222, 232, 239, 245, 248, 249, 252, 280, 281, 285, 302, 332, 337, 338, 341, 354, 362, 365, 382, 390, 407, 421, 424, 426, 459, 460, 461, 466, 468, 471, 473, 476, 479], "pyobject_malloc": [41, 56, 461, 463, 473, 475, 479], "pymem_malloc": [41, 56, 63, 65, 461, 463, 473, 475, 479], "nelem": 41, "elsiz": 41, "model": [41, 59, 67, 83, 84, 92, 124, 166, 180, 183, 191, 193, 202, 222, 251, 270, 280, 290, 315, 332, 338, 340, 361, 364, 380, 391, 407, 408, 411, 423, 429, 457, 458, 460, 461, 462, 463, 469, 471, 473, 474, 475, 476, 477, 479, 480], "ansi": [41, 67, 86, 118, 143, 173, 263, 290, 349, 362, 457, 458, 470, 472, 475, 477, 479], "pymem_calloc": [41, 56, 474, 479], "pymem_realloc": [41, 56, 65, 461, 463, 473], "pymem_new": [41, 63, 459], "pymem_res": 41, "lose": [41, 93, 103, 164, 180, 183, 208, 210, 240, 258, 266, 268, 315, 316, 337, 345, 458, 465, 471, 479], "pymem_del": [41, 459], "intercept": [41, 100, 137, 340, 349, 475, 479], "pyobject_calloc": [41, 56, 474, 479], "pyobject_realloc": [41, 56, 461, 463, 479], "pyobject_fre": [41, 56, 62, 461, 463, 475, 479], "pymalloc_debug": [41, 451, 479], "malloc_debug": [41, 451], "legend": 41, "pymemallocatorex": [41, 474], "new_siz": [41, 469], "pymemalloc": [41, 474], "pymem_domain_raw": [41, 451], "pymem_domain_mem": [41, 451, 475, 479], "pymem_domain_obj": [41, 451, 475], "reinstal": [41, 108, 457], "contract": [41, 244, 341, 422], "impos": [41, 192, 259, 290, 293, 296, 318, 319, 341, 382, 430, 451], "substitut": [41, 67, 84, 86, 99, 100, 103, 110, 130, 141, 155, 161, 164, 175, 180, 183, 190, 247, 258, 269, 289, 290, 305, 316, 317, 318, 337, 341, 342, 355, 359, 374, 382, 399, 422, 423, 424, 426, 432, 443, 448, 457, 461, 463, 464, 465, 470, 471, 473, 474, 479, 480], "setup": [41, 67, 72, 75, 78, 91, 100, 107, 108, 166, 184, 190, 219, 244, 253, 293, 335, 338, 358, 363, 380, 384, 385, 386, 449, 451, 452, 455, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 475, 477, 479], "recogniz": [41, 158, 183, 479], "pattern": [41, 62, 67, 75, 84, 92, 99, 106, 140, 142, 160, 166, 175, 184, 186, 187, 188, 216, 219, 223, 244, 245, 251, 258, 261, 264, 272, 278, 280, 281, 285, 289, 290, 293, 294, 305, 315, 316, 329, 341, 342, 358, 359, 365, 367, 378, 382, 384, 385, 386, 398, 425, 426, 427, 431, 437, 452, 457, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479], "0xcd": [41, 479], "pymem_cleanbyt": 41, "0xdd": [41, 479], "pymem_deadbyt": 41, "surround": [41, 78, 94, 103, 164, 172, 187, 222, 241, 244, 263, 342, 345, 370, 395, 423, 425, 426, 427, 431, 446, 452, 458, 463, 464, 465, 466, 467, 470, 475, 479], "0xfd": [41, 479], "pymem_forbiddenbyt": 41, "underflow": [41, 67, 183, 185, 287, 452, 475, 479], "treatment": [41, 48, 100, 191, 280, 390, 458, 466], "ask": [41, 86, 89, 91, 100, 158, 191, 230, 232, 240, 244, 255, 266, 289, 294, 316, 329, 336, 338, 341, 382, 391, 408, 409, 410, 418, 426, 428, 432, 457, 462, 463, 464, 465, 466, 479], "easier": [41, 75, 83, 86, 89, 91, 94, 96, 98, 102, 103, 108, 113, 158, 166, 172, 190, 203, 247, 249, 256, 266, 290, 305, 310, 316, 341, 342, 354, 358, 370, 384, 385, 386, 390, 403, 430, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 475, 479], "excess": [41, 84, 108, 110, 120, 131, 144, 173, 183, 239, 264, 318, 362, 423, 426, 479], "overwritten": [41, 89, 100, 108, 240, 266, 268, 293, 305, 329, 349, 382, 423, 465, 472, 479], "pymem_debug_serialno": [41, 479], "excel": [41, 67, 106, 172, 190, 197, 214, 380, 461, 462, 466], "breakpoint": [41, 67, 78, 84, 140, 142, 145, 182, 222, 244, 251, 294, 349, 451, 463, 471, 479], "captur": [41, 67, 91, 94, 100, 120, 166, 173, 180, 190, 262, 264, 290, 316, 334, 338, 342, 345, 349, 354, 358, 377, 382, 396, 425, 462, 469, 472, 473, 474, 476, 479], "instant": [41, 67, 91, 182, 290, 380], "bumpserialno": 41, "obmalloc": [41, 459, 461, 463, 473, 478, 479], "intact": [41, 100, 164, 180, 200, 202, 205, 215, 266, 342, 403, 462], "ve": [41, 75, 88, 89, 93, 94, 96, 97, 100, 103, 104, 106, 108, 112, 137, 150, 248, 268, 289, 293, 337, 365, 458, 459, 460, 461, 462, 464, 465, 467, 473, 479], "provok": 41, "0xcb": [41, 475, 479], "0xdb": [41, 475, 479], "0xfb": [41, 475, 479], "crt": [41, 67, 338, 465, 473, 479], "512": [41, 129, 170, 232, 290, 325, 354, 420, 442, 463, 471, 475, 477, 479], "fix": [41, 54, 60, 62, 67, 76, 78, 83, 84, 88, 89, 91, 92, 94, 102, 103, 108, 110, 112, 118, 120, 124, 149, 156, 158, 173, 174, 179, 180, 185, 190, 198, 222, 240, 244, 251, 258, 280, 285, 287, 290, 296, 316, 337, 341, 342, 344, 345, 347, 361, 368, 382, 385, 403, 404, 423, 451, 458, 462, 463, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480], "kib": [41, 113, 134, 267, 290, 329, 361, 378, 477, 479], "virtualalloc": [41, 473], "virtualfre": 41, "mmap": [41, 67, 140, 210, 251, 257, 458, 464, 469, 471, 474, 475, 479], "munmap": 41, "pyobjectarenaalloc": 41, "pytracemalloc_track": [41, 476], "uintptr_t": 41, "pytracemalloc_untrack": [41, 476], "untrack": [41, 75, 467, 479], "rewritten": [41, 89, 133, 190, 191, 232, 280, 432, 458, 459, 460, 461, 464, 465, 467, 471, 472, 473, 475, 476, 477, 479], "inde": [41, 75, 135, 192, 338], "reduc": [41, 55, 67, 74, 77, 84, 94, 110, 124, 131, 174, 183, 221, 223, 232, 244, 255, 258, 290, 296, 305, 325, 338, 341, 358, 361, 385, 398, 405, 409, 417, 431, 452, 457, 458, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "label": [41, 67, 77, 93, 94, 155, 186, 188, 244, 268, 278, 289, 315, 328, 338, 342, 364, 365, 371, 382, 424, 457, 460, 461, 471, 473, 476, 479], "buf1": 41, "buf2": 41, "buf3": 41, "aim": [41, 71, 74, 97, 102, 106, 133, 267, 278, 349, 382, 409, 457, 460, 462, 463, 473, 477], "pymemoryview_fromobject": [42, 56], "discret": [42, 315, 335, 340, 477], "pymemoryview_frommemori": [42, 56, 472], "pybuf_read": 42, "pymemoryview_getcontigu": [42, 56], "buffertyp": 42, "ortran": 42, "pymemoryview_check": 42, "pymemoryview_get_buff": 42, "mview": 42, "pymemoryview_get_bas": 42, "pymethod_new": 43, "pyinstancemethod_typ": 43, "pyinstancemethod_check": 43, "pyinstancemethod_new": 43, "pyinstancemethod_funct": 43, "im": [43, 84, 91, 341], "pyinstancemethod_get_funct": 43, "pymethod_typ": [43, 92], "methodtyp": [43, 67, 92, 179, 381, 479], "pymethod_check": 43, "pymethod_funct": 43, "pymethod_get_funct": 43, "pymethod_self": 43, "pymethod_get_self": 43, "pymodule_typ": [44, 56], "moduletyp": [44, 67, 179, 247, 249, 381, 424, 428, 461, 470, 474, 479], "pymodule_check": 44, "pymodule_checkexact": 44, "pymodule_newobject": [44, 56], "__doc__": [44, 62, 67, 74, 79, 83, 86, 92, 93, 154, 157, 179, 187, 190, 208, 222, 223, 252, 286, 310, 317, 320, 381, 423, 424, 431, 436, 437, 446, 459, 460, 461, 466, 468, 471, 473, 474, 478, 479], "__package__": [44, 67, 179, 222, 247, 321, 381, 428, 446, 464, 468, 470, 472, 473, 475, 479], "pymodule_new": [44, 56], "pymodule_getdict": [44, 56], "__dict__": [44, 48, 60, 62, 67, 84, 87, 92, 98, 100, 114, 142, 146, 190, 222, 223, 247, 252, 264, 266, 294, 296, 305, 341, 381, 415, 423, 424, 428, 436, 459, 460, 465, 466, 468, 470, 474, 475, 479], "pymodule_": 44, "pymodule_getnameobject": [44, 56], "pymodule_getnam": [44, 56], "pymoduledef": [44, 56, 60, 70, 71, 72, 75, 89, 98, 478, 479], "m_size": [44, 75, 98, 478, 479], "pymodule_getdef": [44, 56], "pymodule_getfilenameobject": [44, 56], "pymodule_getfilenam": [44, 56], "unencod": [44, 106, 155, 461, 466, 471, 479], "pymoduledef_bas": [44, 56], "m_base": [44, 75], "pymoduledef_head_init": [44, 71, 72, 75], "m_name": [44, 75], "m_doc": [44, 75], "m_free": [44, 98, 478, 479], "3121": [44, 466, 479], "m_method": [44, 479], "pymoduledef_slot": 44, "m_slot": 44, "m_reload": 44, "m_travers": [44, 98, 478, 479], "py_mod_exec": [44, 478, 479], "m_clear": [44, 98, 478, 479], "collector": [44, 49, 62, 67, 72, 75, 84, 86, 94, 98, 211, 251, 280, 289, 312, 349, 358, 398, 407, 424, 452, 458, 460, 463, 464, 465, 467, 468, 470, 472, 473, 476, 478, 479], "pymodule_create2": [44, 56], "module_api_vers": 44, "python_api_vers": [44, 461], "pymodule_addobjectref": [44, 56, 75, 468, 479], "split": [44, 63, 67, 77, 83, 84, 100, 105, 118, 139, 153, 155, 164, 183, 187, 188, 193, 197, 199, 205, 210, 216, 219, 225, 227, 245, 258, 278, 288, 289, 290, 291, 294, 300, 304, 315, 316, 318, 328, 332, 337, 338, 341, 342, 345, 359, 360, 374, 382, 384, 390, 395, 403, 411, 431, 436, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "__new__": [44, 60, 62, 67, 75, 79, 84, 89, 92, 119, 140, 200, 208, 210, 222, 271, 275, 293, 296, 334, 378, 381, 385, 424, 470, 473, 475, 477, 479], "__init__": [44, 60, 62, 67, 75, 77, 78, 79, 84, 86, 89, 92, 99, 100, 104, 105, 112, 116, 118, 126, 131, 137, 146, 157, 158, 164, 166, 169, 172, 173, 180, 181, 187, 191, 210, 211, 222, 223, 235, 238, 242, 247, 248, 249, 250, 258, 259, 264, 265, 266, 278, 280, 293, 296, 299, 305, 312, 317, 330, 337, 342, 354, 358, 359, 361, 365, 378, 381, 382, 384, 385, 386, 395, 398, 403, 406, 410, 418, 424, 428, 436, 437, 446, 448, 458, 459, 460, 461, 463, 464, 468, 469, 470, 472, 475, 477, 479], "pyinit_modulenam": [44, 70], "pymoduledef_init": [44, 56], "py_mod_cr": 44, "create_modul": [44, 67, 247, 277, 419, 428, 468, 474, 475, 479], "451": [44, 67, 86, 157, 238, 247, 299, 321, 349, 428, 468, 470, 474, 479], "loop": [44, 63, 65, 67, 72, 91, 94, 99, 100, 103, 120, 121, 122, 123, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 154, 156, 173, 174, 181, 183, 186, 188, 193, 202, 215, 221, 222, 229, 251, 254, 266, 280, 294, 305, 306, 316, 329, 330, 334, 335, 338, 341, 342, 345, 349, 358, 361, 363, 365, 377, 380, 384, 385, 408, 409, 416, 423, 424, 425, 426, 427, 431, 432, 436, 437, 452, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "hierarchi": [44, 67, 84, 96, 99, 100, 183, 222, 247, 251, 252, 255, 259, 264, 265, 287, 296, 299, 326, 330, 337, 365, 371, 372, 382, 384, 406, 409, 424, 428, 432, 461, 463, 466, 479, 480], "symlink": [44, 67, 116, 140, 160, 254, 289, 290, 293, 308, 329, 354, 395, 446, 455, 456, 462, 464, 468, 471, 472, 473, 477, 479], "exec_modul": [44, 67, 98, 247, 277, 419, 428, 468, 470, 473, 474, 475, 479], "py_mod_multiple_interpreters_not_support": 44, "py_mod_multiple_interpreters_support": 44, "py_mod_per_interpreter_gil_support": [44, 479], "hood": [44, 99, 100, 103, 358, 385, 386, 463, 464, 471], "pymodule_execdef": [44, 56, 474], "pymodule_fromdefandspec2": [44, 56, 474], "pymodule_setdocstr": [44, 56], "pymodule_addfunct": [44, 56], "lack": [44, 45, 84, 97, 172, 210, 213, 244, 247, 280, 290, 332, 338, 344, 356, 418, 425, 426, 457, 458, 459, 464, 466, 472, 473, 474, 476, 479], "add_spam": 44, "spam": [44, 72, 76, 100, 103, 107, 118, 167, 172, 173, 215, 222, 223, 227, 239, 240, 242, 247, 252, 255, 265, 293, 304, 310, 316, 318, 327, 331, 337, 341, 345, 354, 377, 381, 382, 385, 386, 391, 409, 418, 424, 426, 428, 436, 437, 439, 442, 445, 446, 458, 464, 474, 479], "pymodule_addobject": [44, 56, 72, 75, 458, 468, 479], "easi": [44, 62, 67, 72, 83, 84, 88, 89, 91, 97, 98, 100, 103, 105, 108, 118, 135, 149, 164, 166, 172, 180, 183, 188, 190, 191, 201, 205, 223, 225, 265, 289, 290, 296, 315, 328, 334, 338, 341, 354, 360, 384, 385, 386, 403, 407, 424, 426, 459, 460, 462, 463, 464, 465, 471, 472, 473, 474, 475, 476, 479, 480], "stole": 44, "pymodule_addintconst": [44, 56, 458], "pymodule_addstringconst": [44, 56, 458], "pymodule_addintmacro": [44, 464], "af_inet": [44, 67, 100, 104, 124, 280, 334, 335, 338, 358, 464, 479], "pymodule_addstringmacro": [44, 464], "pymodule_addtyp": [44, 56, 478, 479], "tp_name": [44, 60, 62, 74, 75, 89, 479], "pystate_findmodul": [44, 56], "pystate_addmodul": [44, 56, 479], "beforehand": [44, 428], "unnecessari": [44, 72, 84, 99, 118, 131, 268, 280, 281, 285, 341, 349, 378, 382, 386, 390, 406, 432, 459, 460, 462, 465, 470, 474, 477, 479], "harmless": [44, 72, 89, 190, 372, 422, 479], "pystate_removemodul": [44, 56], "suffici": [45, 62, 72, 96, 97, 98, 99, 113, 120, 155, 180, 181, 183, 190, 272, 290, 309, 338, 341, 361, 384, 386, 399, 411, 428, 432, 457, 471, 472, 475, 476, 479], "pynone_check": 45, "pynumber_check": [46, 56, 477], "o1": [46, 48, 53, 77, 178], "o2": [46, 48, 53, 77, 178, 303, 398], "pynumber_subtract": [46, 54, 56], "subtract": [46, 67, 139, 157, 179, 180, 183, 256, 267, 272, 287, 305, 380, 415, 426, 458, 461, 464, 465, 471, 476, 479], "pynumber_multipli": [46, 56], "multipli": [46, 67, 71, 75, 139, 173, 180, 183, 196, 258, 266, 287, 305, 315, 341, 342, 349, 415, 426, 458, 461, 462, 464, 471, 479], "pynumber_matrixmultipli": [46, 56, 474], "matrix": [46, 67, 84, 148, 222, 380, 398, 422, 426, 438, 459, 477, 479], "pynumber_floordivid": [46, 56], "floor": [46, 67, 84, 86, 102, 163, 180, 183, 190, 218, 222, 272, 286, 287, 341, 380, 424, 426, 445, 460, 464, 477, 478, 479], "divid": [46, 67, 83, 89, 91, 103, 139, 164, 180, 183, 188, 190, 191, 222, 244, 272, 281, 287, 293, 305, 363, 371, 415, 431, 439, 464, 471, 472, 473, 477, 479], "pynumber_truedivid": [46, 56], "approxim": [46, 63, 67, 84, 152, 155, 174, 178, 183, 187, 190, 199, 210, 218, 244, 272, 277, 280, 340, 344, 345, 358, 377, 380, 384, 424, 426, 428, 440, 442, 457, 464, 465, 476, 479], "mathemat": [46, 67, 94, 103, 180, 183, 251, 258, 272, 287, 315, 341, 424, 426, 462, 464, 474, 479], "pynumber_remaind": [46, 56], "remaind": [46, 67, 74, 96, 103, 153, 180, 183, 205, 258, 265, 272, 287, 289, 316, 341, 362, 365, 426, 445, 464, 476, 479], "pynumber_divmod": [46, 56], "divmod": [46, 67, 84, 180, 183, 222, 251, 286, 287, 341, 424, 426, 440, 446, 477, 479], "pynumber_pow": [46, 56], "o3": [46, 71], "pow": [46, 67, 84, 88, 120, 163, 166, 221, 222, 251, 258, 261, 272, 280, 286, 287, 288, 341, 416, 424, 426, 427, 446, 460, 469, 471, 477, 479], "pynumber_neg": [46, 56], "pynumber_posit": [46, 56], "pynumber_absolut": [46, 56], "abs": [46, 62, 67, 94, 152, 180, 183, 221, 222, 251, 272, 286, 287, 288, 341, 377, 378, 380, 382, 424, 426, 436, 438, 446, 469, 476, 479], "pynumber_invert": [46, 56], "bitwis": [46, 57, 67, 89, 91, 93, 94, 103, 174, 175, 190, 208, 212, 279, 290, 316, 326, 334, 337, 402, 424, 427, 429, 461, 464, 465, 470, 475, 479], "pynumber_lshift": [46, 56], "shift": [46, 67, 174, 175, 180, 183, 188, 244, 280, 287, 290, 341, 372, 403, 424, 429, 458, 460, 462, 464, 465, 469, 472, 479], "pynumber_rshift": [46, 56], "pynumber_and": [46, 54, 56], "pynumber_xor": [46, 54, 56], "pynumber_or": [46, 54, 56], "pynumber_inplaceadd": [46, 56], "pynumber_inplacesubtract": [46, 54, 56], "pynumber_inplacemultipli": [46, 56], "pynumber_inplacematrixmultipli": [46, 56, 474], "pynumber_inplacefloordivid": [46, 56], "pynumber_inplacetruedivid": [46, 56], "pynumber_inplaceremaind": [46, 56], "pynumber_inplacepow": [46, 56], "pynumber_inplacelshift": [46, 56], "pynumber_inplacershift": [46, 56], "pynumber_inplaceand": [46, 54, 56], "pynumber_inplacexor": [46, 54, 56], "pynumber_inplaceor": [46, 54, 56], "pynumber_long": [46, 56, 467, 477], "pynumber_float": [46, 56, 477], "pynumber_index": [46, 56, 78, 463, 468, 479], "pynumber_tobas": [46, 56, 479], "marker": [46, 67, 106, 115, 147, 155, 167, 188, 190, 222, 252, 255, 267, 294, 296, 337, 338, 373, 382, 396, 452, 472, 475, 476, 479], "0b": [46, 222, 289, 341, 342, 464, 471], "0o": [46, 84, 222, 341, 342, 464, 471], "pynumber_asssize_t": [46, 56], "clip": [46, 55, 89, 174, 432], "py_ssize_t_min": [46, 55], "pyindex_check": [46, 56, 478, 479], "nb_index": [46, 62, 463], "tp_as_numb": [46, 62, 74, 478, 479], "pyobject_ascharbuff": [47, 56, 479], "buffer_len": 47, "pyobject_asreadbuff": [47, 56, 479], "pyobject_checkreadbuff": [47, 56, 479], "pyobject_aswritebuff": [47, 56, 479], "py_notimpl": [48, 62, 63, 74, 459], "notimpl": [48, 67, 93, 114, 165, 180, 210, 223, 247, 251, 286, 296, 381, 385, 424, 426, 446, 465, 466, 468, 473, 478, 479], "py_return_notimpl": 48, "pyobject_print": [48, 54, 72, 479], "fp": [48, 58, 65, 67, 77, 94, 118, 149, 183, 185, 193, 197, 198, 201, 204, 220, 227, 239, 253, 259, 273, 290, 301, 351, 356, 375, 378, 389, 391, 422, 462, 479], "pyobject_hasattr": [48, 56], "attr_nam": [48, 358, 460], "hasattr": [48, 67, 86, 92, 100, 107, 222, 223, 251, 252, 280, 317, 341, 349, 354, 363, 382, 384, 385, 423, 424, 428, 446, 461, 464, 470, 471, 473, 476, 479], "__getattr__": [48, 57, 62, 67, 74, 84, 92, 140, 173, 213, 222, 252, 296, 320, 341, 381, 385, 424, 426, 443, 460, 464, 470, 471, 472, 473, 476, 479], "__getattribute__": [48, 62, 67, 79, 86, 92, 222, 252, 296, 424, 460, 464, 471, 476, 479], "pyobject_getattr": [48, 56, 60, 62], "pyobject_hasattrstr": [48, 56, 479], "pyobject_getattrstr": [48, 56, 71, 72, 78, 469], "pyobject_genericgetattr": [48, 56, 62, 92], "getter": [48, 49, 56, 67, 75, 92, 114, 164, 222, 223, 341, 361, 391, 464, 470, 473, 474, 479], "meant": [48, 60, 99, 100, 102, 112, 120, 131, 137, 139, 155, 210, 227, 247, 305, 334, 358, 365, 382, 391, 418, 427, 457, 463, 464, 465, 468, 471, 472, 473, 474, 476, 477, 479], "tp_getattro": [48, 62, 74, 479], "mro": [48, 60, 67, 84, 86, 114, 178, 194, 341, 381, 436, 476, 479], "outlin": [48, 99, 100, 133, 137, 164, 218, 241, 380, 424, 479], "pyobject_setattr": [48, 56, 62, 479], "favour": [48, 53, 77, 247, 252, 463, 472, 475, 476, 478, 479], "pyobject_delattr": 48, "plan": [48, 89, 102, 131, 296, 380, 382, 399, 458, 462, 463, 464, 465, 466, 470, 471, 473, 479], "pyobject_setattrstr": [48, 56, 78, 479], "pyobject_delattrstr": 48, "pyobject_genericsetattr": [48, 56, 62], "setter": [48, 49, 56, 67, 75, 92, 114, 222, 223, 341, 361, 385, 391, 464, 473, 479], "tp_setattro": [48, 62, 74], "pyobject_genericgetdict": [48, 56, 62, 479], "pyobject_genericsetdict": [48, 56], "_pyobject_getdictptr": 48, "pyobject_richcompar": [48, 56, 62, 74], "opid": 48, "py_lt": [48, 62, 63, 74], "py_l": [48, 62, 63, 74], "py_eq": [48, 62, 63, 74], "py_n": [48, 62, 63, 74], "py_gt": [48, 62, 63, 74], "py_g": [48, 62, 63, 74], "pyobject_richcomparebool": [48, 54, 56, 74, 479], "pyobject_format": [48, 56, 188], "format_spec": [48, 120, 218, 222, 342, 424, 431, 464, 479], "pyobject_repr": [48, 54, 56, 62, 63, 473, 474, 479], "pyobject_ascii": [48, 56], "pyobject_str": [48, 56, 62, 63, 473], "pyobject_byt": [48, 56], "pyobject_issubclass": [48, 56, 60, 474, 479], "cls": [48, 60, 62, 84, 89, 92, 93, 114, 120, 158, 178, 188, 200, 208, 210, 222, 223, 252, 259, 293, 296, 337, 358, 378, 381, 382, 384, 423, 424, 427, 432, 439, 460, 462, 469, 471, 475, 476, 479], "against": [48, 71, 72, 74, 75, 84, 93, 100, 102, 103, 110, 118, 120, 124, 134, 139, 170, 173, 178, 187, 188, 190, 232, 248, 252, 275, 289, 290, 293, 302, 304, 305, 308, 311, 316, 321, 328, 330, 338, 339, 341, 354, 358, 361, 365, 371, 380, 381, 382, 384, 385, 386, 396, 405, 407, 408, 409, 410, 415, 416, 417, 422, 423, 424, 428, 451, 452, 458, 459, 460, 461, 462, 463, 470, 471, 473, 474, 476, 477, 479], "__subclasscheck__": [48, 60, 67, 114, 385, 424, 479], "3119": [48, 67, 114, 158, 424, 466, 480], "__mro__": [48, 62, 67, 84, 92, 114, 194, 222, 341, 382, 424], "__bases__": [48, 62, 67, 75, 200, 222, 296, 341, 381, 424, 461, 479], "pyobject_isinst": [48, 56, 62, 474, 479], "inst": [48, 92, 432, 439], "__instancecheck__": [48, 67, 385, 424, 479], "__class__": [48, 67, 79, 84, 86, 92, 93, 98, 180, 184, 208, 222, 247, 296, 341, 385, 396, 424, 436, 460, 461, 464, 475, 479], "py_hash_t": [48, 62, 74, 471], "pyobject_hash": [48, 54, 56, 62, 469], "pyobject_hashnotimpl": [48, 56, 62, 464], "tp_hash": [48, 62, 74, 464], "pyobject_istru": [48, 54, 56, 479], "pyobject_not": [48, 56, 479], "pyobject_typ": [48, 56], "realli": [48, 62, 71, 74, 76, 84, 87, 89, 91, 94, 103, 104, 106, 108, 112, 180, 188, 197, 200, 202, 268, 280, 285, 290, 325, 341, 349, 361, 362, 380, 383, 409, 424, 431, 432, 437, 458, 459, 460, 461, 462, 463, 466, 470, 475, 479], "py_typ": [48, 57, 60, 62, 74, 75, 89, 98, 464, 469, 477, 478, 479], "pyobject_typecheck": [48, 74, 479], "pyobject_s": [48, 56, 62, 479], "pyobject_lengthhint": [48, 473], "defaultvalu": [48, 265], "estim": [48, 172, 183, 285, 315, 340, 358, 424, 479], "__length_hint__": [48, 67, 288, 424, 473, 479], "length_hint": [48, 67, 221, 288, 424, 473], "pyobject_dir": [48, 56], "dir": [48, 67, 77, 79, 84, 93, 108, 110, 112, 160, 181, 186, 207, 208, 220, 222, 251, 253, 263, 289, 290, 291, 293, 320, 341, 345, 354, 356, 365, 376, 385, 395, 418, 424, 441, 447, 452, 461, 464, 468, 469, 470, 471, 472, 479], "pyobject_getait": [48, 56, 479], "aiter": [48, 67, 222, 251, 424, 468, 475, 479], "pyobject_gettypedata": [48, 56, 60, 470, 479], "pytype_spec": [48, 56, 60, 62, 98, 470, 479], "basics": [48, 57, 60, 470, 479], "pytype_gettypedatas": [48, 56, 470], "memset": [48, 67, 116, 173, 479], "pyobject_getitemdata": [48, 470], "py_tpflags_items_at_end": [48, 60, 62, 470, 479], "tp": [49, 67, 334, 358, 380, 382, 479], "visibl": [50, 59, 67, 72, 84, 86, 89, 91, 94, 100, 124, 126, 137, 155, 164, 174, 176, 187, 193, 202, 219, 244, 252, 258, 268, 334, 356, 372, 385, 391, 396, 425, 459, 462, 463, 470, 471, 476, 477, 479], "tmp": [50, 75, 100, 106, 108, 166, 220, 242, 268, 329, 356, 428, 452, 458, 461, 462, 463, 464, 465, 471, 477], "fli": [50, 67, 74, 101, 183, 222, 243, 423, 435], "pyunstable_perfmapstate_init": [50, 479], "pid": [50, 67, 96, 124, 130, 135, 140, 161, 164, 275, 280, 290, 296, 306, 319, 334, 345, 358, 463, 465, 478, 479], "pyunstable_writeperfmapentri": [50, 479], "code_addr": 50, "code_s": 50, "entry_nam": 50, "7f3529fcf759": 50, "pyunstable_perfmapstate_fini": [50, 479], "shut": [50, 71, 100, 124, 242, 325, 330, 334, 335, 349, 380, 403, 448, 451, 461, 465, 474, 478, 479], "shouldn": [50, 63, 75, 87, 89, 98, 103, 131, 207, 264, 269, 299, 324, 338, 342, 349, 384, 391, 459, 460, 462, 463, 464, 467, 475, 479], "scenario": [50, 89, 99, 100, 133, 183, 185, 264, 265, 317, 384, 385, 386, 391, 428, 452, 473, 475, 479], "fork": [50, 58, 67, 72, 83, 100, 116, 138, 140, 163, 210, 224, 254, 275, 280, 290, 306, 325, 329, 335, 338, 345, 387, 461, 465, 470, 473, 476, 477, 479], "py_refcnt": [51, 57, 75, 464, 468, 479], "py_set_refcnt": [51, 468, 479], "refcnt": [51, 468], "py_newref": [51, 56, 75, 86, 468, 479], "py_xincref": [51, 72, 469, 477, 479], "py_xnewref": [51, 56, 468, 479], "attr": [51, 62, 67, 78, 89, 91, 120, 174, 188, 237, 241, 248, 252, 270, 278, 288, 289, 296, 311, 358, 365, 384, 385, 409, 411, 412, 413, 423, 424, 427, 432, 458, 459, 462, 469, 472, 479], "py_clear": [51, 62, 72, 74, 75, 462, 470, 479], "good": [51, 62, 74, 77, 78, 83, 84, 88, 92, 93, 98, 99, 100, 102, 103, 104, 106, 107, 108, 118, 120, 137, 149, 152, 153, 164, 167, 173, 174, 180, 187, 190, 195, 204, 208, 222, 232, 247, 280, 289, 290, 292, 296, 304, 316, 338, 358, 360, 363, 380, 382, 384, 386, 407, 415, 422, 424, 458, 459, 461, 462, 464, 465, 469, 479], "idea": [51, 77, 78, 83, 84, 88, 91, 92, 93, 98, 99, 100, 104, 108, 118, 180, 187, 190, 208, 258, 263, 292, 304, 372, 380, 424, 458, 460, 461, 462, 465, 466, 467, 471, 475, 479], "py_setref": [51, 75, 470, 479], "dst": [51, 67, 140, 173, 179, 180, 290, 329, 337, 362, 472], "dead": [51, 104, 304, 398, 436, 437, 452, 461, 466, 471, 479], "arrang": [51, 83, 94, 99, 100, 124, 130, 131, 137, 190, 233, 252, 265, 280, 338, 361, 365, 371, 372, 479], "_before_": 51, "torn": [51, 479], "believ": [51, 94, 104, 289, 461], "py_xsetref": [51, 75, 470, 479], "pyeval_getbuiltin": [52, 56], "pyeval_getloc": [52, 56], "pyeval_getglob": [52, 56], "pyeval_getfuncnam": [52, 56], "pyeval_getfuncdesc": [52, 56], "pysequence_check": [53, 56, 62], "pysequence_s": [53, 56, 62, 479], "pysequence_concat": [53, 56, 62], "pysequence_repeat": [53, 56, 62], "pysequence_inplaceconcat": [53, 56, 62], "pysequence_inplacerepeat": [53, 56, 62], "th": [53, 172, 188, 193, 222, 263, 272, 280, 320, 340, 341, 362, 380, 406, 424, 458, 461, 463], "pysequence_getslic": [53, 56, 62], "i1": [53, 187, 275, 415, 462], "i2": [53, 187, 275, 415, 462], "pysequence_delitem": [53, 56, 479], "pysequence_setslic": [53, 56, 62], "pysequence_delslic": [53, 56, 62], "pysequence_count": [53, 56], "occurr": [53, 63, 84, 103, 120, 138, 157, 164, 174, 183, 193, 202, 225, 268, 281, 289, 316, 325, 341, 354, 368, 396, 409, 424, 425, 426, 427, 430, 431, 432, 460, 462, 463, 466, 471, 479], "pysequence_contain": [53, 56, 62], "pysequence_index": [53, 56], "pysequence_list": [53, 56], "pysequence_tupl": [53, 56, 479], "pysequence_fast": [53, 56], "pysequence_fast_get_s": 53, "faster": [53, 62, 67, 83, 84, 92, 103, 124, 137, 173, 174, 183, 204, 223, 231, 232, 244, 258, 280, 290, 305, 338, 341, 380, 385, 422, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479], "pysequence_fast_get_item": 53, "pysequence_fast_item": 53, "reloc": [53, 464, 479], "pysequence_item": 53, "frozenset": [54, 67, 86, 120, 179, 184, 222, 251, 271, 296, 349, 382, 384, 398, 423, 424, 426, 446, 462, 463, 464, 469, 471, 478, 479], "pysetobject": 54, "medium": [54, 93, 175, 183, 422, 462, 463, 479], "pyset_typ": [54, 56], "pyfrozenset_typ": [54, 56], "pyset_check": 54, "pyfrozenset_check": 54, "pyanyset_check": 54, "pyset_checkexact": [54, 468, 479], "pyanyset_checkexact": 54, "pyfrozenset_checkexact": 54, "pyset_new": [54, 56, 463], "pyfrozenset_new": [54, 56, 463], "pyset_s": [54, 56, 463], "anyset": 54, "pyset_get_s": 54, "pyset_contain": [54, 56, 463], "__contains__": [54, 57, 62, 67, 79, 84, 86, 93, 96, 158, 179, 191, 193, 202, 208, 221, 258, 268, 282, 288, 341, 385, 403, 412, 424, 426, 458, 461, 462, 464, 479], "unhash": [54, 77, 178, 341, 384, 424, 426, 468, 478, 479], "pyset_add": [54, 56, 463], "grow": [54, 59, 84, 100, 104, 190, 223, 266, 317, 372, 458, 462, 464, 465, 471, 479], "pyset_discard": [54, 56, 463], "miss": [54, 67, 102, 103, 120, 157, 161, 167, 172, 173, 178, 183, 193, 196, 202, 208, 223, 232, 244, 247, 248, 252, 258, 264, 273, 276, 289, 290, 293, 312, 316, 334, 338, 340, 342, 345, 358, 362, 363, 371, 376, 382, 385, 390, 391, 421, 423, 424, 426, 427, 428, 437, 458, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "pyset_pop": [54, 56], "pyset_clear": [54, 56], "pyslice_typ": [55, 56], "pyslice_check": 55, "pyslice_new": [55, 56], "step": [55, 62, 67, 71, 72, 76, 83, 84, 89, 92, 94, 98, 101, 102, 103, 105, 107, 108, 110, 118, 120, 139, 142, 149, 153, 155, 166, 173, 182, 183, 188, 190, 222, 227, 239, 244, 247, 258, 264, 272, 278, 280, 289, 290, 294, 315, 316, 335, 337, 341, 349, 354, 364, 372, 380, 386, 395, 410, 417, 423, 424, 426, 432, 437, 440, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 479], "pyslice_getindic": [55, 56], "treat": [55, 57, 58, 60, 62, 63, 65, 67, 83, 93, 94, 97, 98, 102, 103, 118, 137, 139, 152, 155, 164, 174, 178, 180, 183, 185, 187, 190, 191, 200, 202, 213, 218, 223, 240, 242, 255, 256, 258, 264, 265, 268, 272, 289, 293, 316, 328, 332, 337, 338, 341, 342, 345, 354, 358, 360, 363, 365, 368, 372, 382, 384, 390, 391, 396, 397, 403, 408, 409, 423, 424, 425, 426, 431, 432, 457, 458, 460, 463, 464, 465, 466, 472, 475, 477, 478, 479], "pysliceobject": 55, "pyslice_getindicesex": [55, 56, 476, 479], "slicelength": 55, "manner": [55, 72, 84, 89, 91, 100, 164, 242, 265, 267, 289, 293, 304, 308, 310, 316, 318, 345, 382, 384, 396, 411, 423, 424, 428, 452, 461, 463, 464, 479], "pyslice_unpack": [55, 56, 476, 479], "pyslice_adjustindic": [55, 56, 476, 479], "0x03050400": [55, 476, 479], "0x03060000": [55, 476, 479], "0x03060100": [55, 476, 479], "boost": [55, 78, 223, 462, 479], "py_ellipsi": [55, 427], "387": [56, 210], "stabil": [56, 105, 258, 469, 479], "exepect": 56, "pyunstabl": 56, "subset": [56, 94, 102, 104, 155, 164, 174, 232, 244, 245, 250, 254, 259, 266, 268, 292, 296, 311, 325, 329, 334, 341, 354, 361, 369, 406, 409, 411, 418, 426, 461, 463, 465, 474, 476, 479], "_py_internalst": 56, "notic": [56, 72, 75, 88, 89, 98, 99, 100, 103, 107, 108, 110, 130, 131, 155, 164, 170, 181, 183, 199, 215, 247, 255, 266, 280, 329, 334, 337, 351, 358, 365, 380, 382, 422, 424, 426, 457, 459, 461, 465, 471, 472, 476, 477, 479], "bugfix": [56, 79, 88, 102, 458, 459, 460, 461, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "project": [56, 74, 76, 83, 84, 85, 90, 100, 102, 108, 110, 120, 149, 164, 180, 190, 207, 220, 227, 232, 247, 248, 258, 289, 304, 311, 382, 384, 385, 417, 418, 421, 422, 430, 452, 455, 457, 458, 461, 464, 465, 466, 470, 471, 472, 473, 475, 478, 479], "spend": [56, 319, 458, 479], "hardcod": [56, 173, 254, 264, 266, 456, 473, 479], "0x030a0000": 56, "0x03020000": 56, "python39": 56, "abi3": [56, 472], "mymodul": [56, 78, 99, 227, 385, 386, 396, 465, 471], "prereleas": [56, 470, 479], "pybaseobject_typ": [56, 62], "pybytearrayiter_typ": 56, "pybytesiter_typ": 56, "pybytes_decodeescap": [56, 479], "pybytes_repr": [56, 479], "pycfunctionwithkeyword": [56, 57], "pycfunction_cal": [56, 479], "pycfunction_getflag": 56, "pycfunction_getfunct": 56, "pycfunction_getself": 56, "pycfunction_new": [56, 479], "pycfunction_newex": [56, 479], "pycfunction_typ": 56, "pycmethod_new": [56, 479], "pycapsule_typ": 56, "pyclassmethoddescr_typ": 56, "pydictitems_typ": 56, "pydictiteritem_typ": 56, "pydictiterkey_typ": 56, "pydictitervalue_typ": 56, "pydictkeys_typ": 56, "pydictproxy_typ": 56, "pydictreviteritem_typ": 56, "pydictreviterkey_typ": 56, "pydictrevitervalue_typ": 56, "pydictvalues_typ": 56, "pyellipsis_typ": 56, "pyenum_typ": 56, "pyerr_display": [56, 468, 470, 479], "pyerr_programtext": 56, "pyeval_callfunct": [56, 478, 479], "pyeval_callmethod": [56, 478, 479], "pyeval_callobjectwithkeyword": [56, 478, 479], "pyeval_evalcod": [56, 65, 101, 468, 479], "pyeval_evalcodeex": [56, 65, 479], "pyeval_evalfram": [56, 65], "pyeval_evalframeex": [56, 65, 473, 479], "pyexc_baseexceptiongroup": 56, "pyexc_encodingwarn": 56, "pyexceptionclass_nam": [56, 477, 479], "pyfilter_typ": 56, "pygetsetdescr_typ": 56, "pylistiter_typ": 56, "pylistreviter_typ": 56, "pylongrangeiter_typ": 56, "pylong_getinfo": 56, "pymap_typ": 56, "pymemberdescr_typ": 56, "pymember_geton": [56, 57, 92, 470], "pymember_seton": [56, 57, 470], "pymemoryview_typ": 56, "pymethoddescr_typ": 56, "pymoduledef_typ": 56, "pyos_afterfork": [56, 58, 476, 479], "pyos_afterfork_par": [56, 58, 290, 476, 479], "pyos_beforefork": [56, 58, 290, 476, 479], "pyos_fspath": [56, 58, 475, 479], "pyos_inputhook": [56, 65, 470, 479], "pyos_interruptoccur": [56, 479], "pyos_getsig": [56, 58, 458], "pyos_mystricmp": [56, 479], "pyos_mystrnicmp": [56, 479], "pyos_setsig": [56, 58, 458, 479], "pyos_sighandler_t": [56, 58], "pyos_strtol": 56, "pyos_strtoul": 56, "ob_refcnt": [56, 62, 468, 479], "ob_typ": [56, 62, 75, 469, 479], "pyobject_clearweakref": [56, 62, 66, 74, 470], "pyobject_delitemstr": [56, 461], "pyobject_selfit": 56, "pyrangeiter_typ": 56, "pyrange_typ": [56, 463], "pyreversed_typ": 56, "pysequence_in": 56, "pysetiter_typ": 56, "pystructsequence_desc": [56, 59, 476, 479], "pystructsequence_field": [56, 59, 476, 479], "pystructsequence_getitem": [56, 59], "pystructsequence_new": [56, 59], "pystructsequence_newtyp": [56, 59, 479], "pystructsequence_setitem": [56, 59], "pystructsequence_unnamedfield": [56, 59, 478, 479], "pysuper_typ": 56, "pysys_addwarnoptionunicod": [56, 58, 469, 476, 479], "pysys_formatstderr": [56, 58], "pysys_formatstdout": [56, 58], "pysys_getxopt": [56, 58], "pysys_haswarnopt": [56, 469, 479], "pysys_setobject": [56, 58], "pysys_setpath": [56, 58, 469, 479], "pysys_writestderr": [56, 58], "pysys_writestdout": [56, 58], "pythread_getinfo": 56, "pythread_acquire_lock": [56, 479], "pythread_acquire_lock_tim": [56, 479], "pythread_allocate_lock": 56, "pythread_exit_thread": [56, 479], "pythread_free_lock": 56, "pythread_get_stacks": 56, "pythread_get_thread_id": [56, 476, 479], "pythread_get_thread_native_id": [56, 479], "pythread_init_thread": 56, "pythread_release_lock": [56, 479], "pythread_set_stacks": 56, "pythread_start_new_thread": [56, 476, 479], "pytraceback_her": [56, 479], "pytraceback_print": [56, 475, 479], "pytraceback_typ": 56, "pytupleiter_typ": 56, "pytuple_getitem": [56, 59, 72, 78], "pytuple_getslic": [56, 59], "pytuple_pack": [56, 59, 78, 462], "pytuple_s": [56, 59, 78], "pytuple_typ": [56, 59], "pytype_clearcach": [56, 60], "pytype_frommetaclass": [56, 60, 62, 470, 479], "pytype_frommoduleandspec": [56, 60, 62, 89, 98, 468, 470, 478, 479], "pytype_genericalloc": [56, 60, 62, 477], "pytype_genericnew": [56, 60, 62, 75], "pytype_getflag": [56, 60, 479], "pytype_getmodul": [56, 60, 98, 478, 479], "pytype_getmodulest": [56, 60, 89, 98, 478, 479], "pytype_getnam": [56, 60, 469, 479], "pytype_getqualnam": [56, 60, 469, 479], "pytype_getslot": [56, 60, 468, 473, 479], "pytype_issubtyp": [56, 60], "pytype_modifi": [56, 60, 62, 479], "pytype_slot": [56, 60], "pytype_typ": [56, 60, 62, 470, 479], "pyunicodeiter_typ": 56, "pyunicode_append": 56, "pyunicode_appendanddel": 56, "pyunicode_asasciistr": [56, 63, 472], "pyunicode_ascharmapstr": [56, 63], "pyunicode_asdecodedobject": [56, 475, 479], "pyunicode_asdecodedunicod": [56, 475, 479], "pyunicode_asencodedobject": [56, 472, 475, 479], "pyunicode_asencodedstr": [56, 63, 479], "pyunicode_asencodedunicod": [56, 475, 479], "pyunicode_aslatin1str": [56, 63, 472], "pyunicode_asmbcsstr": [56, 63, 472], "pyunicode_asrawunicodeescapestr": [56, 63, 472], "pyunicode_asucs4": [56, 63, 472], "pyunicode_asucs4copi": [56, 63, 468, 472], "pyunicode_asutf16str": [56, 63], "pyunicode_asutf32str": [56, 63], "pyunicode_asutf8ands": [56, 63, 468, 476, 479], "pyunicode_asutf8str": [56, 63, 472], "pyunicode_asunicodeescapestr": [56, 63, 472], "pyunicode_aswidechar": [56, 63, 479], "pyunicode_aswidecharstr": [56, 63, 468, 472, 476, 479], "pyunicode_buildencodingmap": [56, 479], "pyunicode_compar": [56, 63, 468, 472], "pyunicode_comparewithasciistr": [56, 63, 471, 479], "pyunicode_concat": [56, 63, 472], "pyunicode_contain": [56, 63], "pyunicode_count": [56, 63], "pyunicode_decod": [56, 63, 479], "pyunicode_decodeascii": [56, 63], "pyunicode_decodecharmap": [56, 63], "pyunicode_decodecodepagest": 56, "pyunicode_decodefsdefault": [56, 63, 71], "pyunicode_decodefsdefaultands": [56, 58, 63], "pyunicode_decodelatin1": [56, 63], "pyunicode_decodelocal": [56, 63], "pyunicode_decodelocaleands": [56, 58, 63, 476], "pyunicode_decodembc": [56, 63], "pyunicode_decodembcsst": [56, 63], "pyunicode_decoderawunicodeescap": [56, 63], "pyunicode_decodeutf16": [56, 63], "pyunicode_decodeutf16st": [56, 63], "pyunicode_decodeutf32": [56, 63], "pyunicode_decodeutf32st": [56, 63], "pyunicode_decodeutf7": [56, 63], "pyunicode_decodeutf7st": [56, 63], "pyunicode_decodeutf8": [56, 63], "pyunicode_decodeutf8st": [56, 63, 479], "pyunicode_decodeunicodeescap": [56, 63], "pyunicode_encodecodepag": [56, 63, 472, 479], "pyunicode_encodefsdefault": [56, 58, 63, 479], "pyunicode_encodelocal": [56, 58, 63, 476, 479], "pyunicode_fsdecod": [56, 63, 470, 475, 479], "pyunicode_find": [56, 63], "pyunicode_findchar": [56, 63, 468, 472, 476, 479], "pyunicode_format": [56, 63], "pyunicode_fromencodedobject": [56, 63], "pyunicode_fromformatv": [56, 58, 63, 470, 479], "pyunicode_fromobject": [56, 63], "pyunicode_fromordin": 56, "pyunicode_fromstringands": [56, 63, 468, 479], "pyunicode_fromwidechar": [56, 63, 472], "pyunicode_getdefaultencod": 56, "pyunicode_getlength": [56, 63, 468, 472], "pyunicode_internfromstr": [56, 63], "pyunicode_interninplac": [56, 63, 468, 479], "pyunicode_isidentifi": [56, 63, 479], "pyunicode_join": [56, 63, 472], "pyunicode_partit": 56, "pyunicode_rpartit": 56, "pyunicode_rsplit": 56, "pyunicode_readchar": [56, 63, 472], "pyunicode_replac": [56, 63], "pyunicode_res": 56, "pyunicode_richcompar": [56, 63], "pyunicode_split": [56, 63], "pyunicode_splitlin": [56, 63], "pyunicode_substr": [56, 63, 468, 472], "pyunicode_tailmatch": [56, 63, 468, 472, 478], "pyunicode_transl": [56, 63], "pyunicode_typ": [56, 62, 63, 89], "pyunicode_writechar": [56, 63, 472], "ob_bas": [56, 57, 75, 479], "ob_siz": [56, 57, 62, 469, 479], "pyweakrefer": [56, 469, 479], "pyweakref_getobject": [56, 66], "pyweakref_newproxi": [56, 66], "pywrapperdescr_typ": 56, "pyzip_typ": 56, "py_atexit": [56, 58], "py_bytesmain": [56, 65, 101, 477], "py_compilestr": [56, 65, 468], "py_exit": [56, 58, 475, 479], "py_filesystemdefaultencodeerror": [56, 470, 479], "py_filesystemdefaultencod": [56, 470, 479], "py_genericalia": [56, 61, 479], "py_genericaliastyp": [56, 61, 479], "py_getrecursionlimit": 56, "py_hasfilesystemdefaultencod": [56, 470], "py_i": [56, 57, 468, 479], "py_isfals": [56, 57, 468, 479], "py_isnon": [56, 57, 468, 479], "py_istru": [56, 57, 468, 479], "py_makependingcal": 56, "py_setrecursionlimit": 56, "py_ucs4": [56, 63, 472], "py_utf8mod": [56, 470, 479], "py_intptr_t": 56, "py_uintptr_t": 56, "allocfunc": [56, 62, 74], "binaryfunc": [56, 62], "descrgetfunc": [56, 62, 74], "descrsetfunc": [56, 62, 74], "getattrfunc": [56, 62, 74], "getattrofunc": [56, 62, 74], "getiterfunc": [56, 62, 74], "hashfunc": [56, 62, 74], "initproc": [56, 62, 74, 75], "iternextfunc": [56, 62, 74], "lenfunc": [56, 62], "newfunc": [56, 62, 74, 223], "objobjargproc": [56, 62], "objobjproc": [56, 62], "releasebufferproc": [56, 62, 479], "reprfunc": [56, 62, 74], "richcmpfunc": [56, 62, 74], "setattrfunc": [56, 62, 74], "setattrofunc": [56, 62, 74], "ssizeargfunc": [56, 62], "ssizeobjargproc": [56, 62], "ssizessizeargfunc": 56, "ssizessizeobjargproc": 56, "symtabl": [56, 67, 251, 261, 465, 468, 478, 479], "ternaryfunc": [56, 62, 74], "unaryfunc": [56, 62], "ultim": [57, 190, 222, 232, 289, 349, 424, 426, 428, 432, 460, 462, 479], "expans": [57, 217, 231, 244, 272, 291, 305, 311, 345, 360, 405, 418, 462, 472, 473], "notion": [57, 108, 180, 183, 187, 190, 222, 296, 341, 372, 406, 410, 426, 430, 471], "py_siz": [57, 464, 469, 479], "pyobject_head": [57, 62, 75, 466], "pyobject_var_head": [57, 62, 74], "py_set_typ": [57, 469, 479], "py_is_typ": [57, 479], "py_set_s": [57, 469, 479], "pyobject_head_init": [57, 62, 470], "_pyobject_extra_init": 57, "pyvarobject_head_init": [57, 62, 74, 75, 479], "shall": [57, 293, 296, 326, 411, 422, 457, 471], "meth_keyword": [57, 72, 98], "_pycfunctionfast": 57, "meth_fastcal": [57, 98, 476, 479], "narg": [57, 67, 88, 98, 100, 116, 289, 306, 337, 347, 395, 447, 465, 471, 479], "_pycfunctionfastwithkeyword": 57, "pycmethod": [57, 60, 98, 469, 478, 479], "meth_method": [57, 89, 98, 478], "defining_class": [57, 89, 98, 479], "ml_name": [57, 74], "ml_meth": [57, 74], "ml_flag": [57, 74], "ml_doc": [57, 74], "bitfield": [57, 111, 479], "convent": [57, 60, 62, 72, 84, 89, 91, 92, 98, 99, 100, 106, 108, 112, 148, 164, 173, 174, 175, 178, 180, 206, 225, 227, 240, 243, 263, 268, 281, 289, 290, 292, 341, 342, 349, 358, 360, 362, 391, 424, 426, 430, 431, 448, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 473, 474, 476, 479], "fourth": [57, 89, 94, 174, 191, 264, 304, 316, 362, 415, 460], "question": [57, 72, 78, 84, 93, 94, 99, 100, 103, 106, 120, 139, 155, 190, 191, 232, 263, 264, 289, 337, 365, 369, 402, 403, 438, 458, 460, 461, 463, 476, 478, 479], "superclass": [57, 60, 62, 98, 114, 153, 178, 222, 223, 259, 265, 309, 335, 382, 424, 460, 461, 463, 470, 479], "unus": [57, 62, 75, 88, 89, 124, 147, 174, 227, 255, 256, 279, 280, 297, 310, 329, 335, 337, 342, 354, 358, 397, 431, 457, 460, 464, 473, 476, 478, 479], "meth_o": [57, 61, 67, 460, 479], "meth_class": [57, 61, 461], "classmethod": [57, 67, 86, 92, 93, 114, 157, 158, 173, 180, 183, 188, 190, 200, 208, 218, 222, 223, 247, 251, 252, 258, 280, 293, 296, 340, 341, 354, 377, 378, 382, 384, 418, 421, 424, 446, 460, 462, 465, 468, 469, 470, 471, 472, 475, 476, 477, 479], "meth_stat": [57, 461], "staticmethod": [57, 67, 84, 86, 92, 93, 114, 190, 208, 222, 223, 251, 265, 354, 416, 424, 446, 460, 462, 465, 468, 471, 472, 477, 479], "meth_coexist": [57, 462], "sq_contain": [57, 62], "preclud": [57, 341, 477], "py_readon": [57, 74, 470], "py_t_str": 57, "py_t_object_ex": [57, 75, 470], "t_object": [57, 470, 479], "__vectorcalloffset__": 57, "py_t_pyssizet": 57, "spam_type_memb": 57, "offsetof": [57, 75, 470], "spam_object": 57, "stddef": [57, 75, 470], "tp_dictoffset": [57, 60, 62, 74, 470, 479], "tp_weaklistoffset": [57, 60, 62, 74, 470, 478, 479], "__dictoffset__": 57, "__weaklistoffset__": 57, "py_tpflags_managed_dict": [57, 60, 62, 470, 479], "py_tpflags_managed_weakref": [57, 60, 62, 74, 470, 479], "structmemb": [57, 92, 470, 479], "obj_addr": 57, "py_audit_read": [57, 470], "py_relative_offset": [57, 470], "py_tp_memb": [57, 479], "mandatori": [57, 75, 83, 239, 245, 247, 265, 290, 338, 339, 452, 461, 472, 476, 478, 479], "pytypeslot": 57, "tp_member": [57, 62, 74, 75, 469, 479], "read_restrict": [57, 470], "write_restrict": [57, 470], "py_": [57, 60, 457, 479], "delattr": [57, 67, 222, 251, 436, 446], "py_t_byt": 57, "py_t_short": 57, "py_t_int": [57, 74, 75, 470], "py_t_long": 57, "py_t_longlong": 57, "py_t_ubyt": 57, "py_t_uint": 57, "py_t_ushort": 57, "py_t_ulong": 57, "py_t_ulonglong": 57, "py_t_float": 57, "py_t_doubl": [57, 74, 470], "py_t_bool": 57, "ro": [57, 84, 337], "py_t_string_inplac": 57, "py_t_char": 57, "py_t_string_inlin": 57, "t_int": [57, 470], "surpris": [57, 67, 83, 84, 87, 100, 116, 180, 183, 190, 222, 244, 264, 272, 280, 305, 340, 354, 365, 382, 421, 428, 459, 460, 463, 467, 470, 474, 476, 479], "t_none": [57, 470, 479], "tp_getset": [57, 62, 74, 75], "pathlik": [58, 63, 67, 86, 116, 160, 222, 249, 290, 291, 293, 341, 385, 421, 475, 479], "__fspath__": [58, 67, 116, 290, 293, 358, 385, 475, 479], "py_fdisinteract": 58, "deem": [58, 120, 204, 227, 266, 341, 403, 422, 458, 459, 463, 465, 470, 471, 472, 473, 479], "isatti": [58, 67, 116, 151, 222, 255, 290, 347, 349, 442, 479], "clone": [58, 67, 191, 198, 202, 205, 219, 227, 232, 234, 280, 282, 290, 298, 332, 347, 372, 380, 406, 430, 456, 472, 477], "parent": [58, 60, 62, 67, 84, 87, 97, 99, 100, 112, 116, 120, 131, 157, 174, 179, 186, 216, 222, 245, 247, 250, 252, 253, 261, 264, 275, 277, 278, 280, 290, 293, 299, 302, 306, 309, 311, 330, 334, 335, 337, 338, 345, 349, 364, 365, 367, 372, 381, 385, 386, 391, 395, 406, 409, 417, 424, 428, 436, 460, 461, 462, 463, 464, 468, 470, 472, 473, 475, 476, 479], "register_at_fork": [58, 67, 116, 290, 476, 479], "reliabl": [58, 104, 122, 124, 130, 131, 137, 155, 158, 183, 185, 248, 280, 330, 345, 399, 411, 423, 428, 457, 461, 465, 471, 472, 473, 474, 475, 476, 479], "microsoft": [58, 67, 76, 85, 155, 164, 173, 251, 290, 347, 349, 394, 395, 403, 431, 444, 452, 454, 460, 461, 463, 464, 469, 474, 479], "visual": [58, 76, 84, 91, 102, 108, 316, 338, 371, 380, 409, 451, 452, 457, 458, 461, 464, 474, 479], "sigact": [58, 479], "undecod": [58, 106, 155, 193, 290, 471, 479], "dc80": [58, 106, 155, 222], "dcff": [58, 106, 155, 222], "surrog": [58, 63, 155, 222, 259, 290, 343, 354, 406, 472, 473, 477, 479], "error_po": 58, "0x80": [58, 106, 175, 341, 479], "0xff": [58, 155, 222, 341], "1000": [58, 84, 96, 100, 106, 147, 170, 174, 180, 218, 244, 256, 258, 272, 280, 281, 317, 326, 341, 342, 349, 365, 378, 380, 422, 436, 437, 440, 442, 445, 446, 458, 463, 464, 465, 471, 472, 477], "plus": [58, 62, 67, 74, 83, 108, 118, 173, 174, 175, 183, 187, 191, 205, 208, 261, 280, 287, 289, 290, 302, 328, 339, 341, 349, 358, 360, 361, 373, 385, 386, 390, 403, 407, 426, 430, 431, 457, 460, 461, 462, 463, 470, 472, 473, 479], "hundr": [58, 100, 190, 232], "pysys_audit": [58, 96, 140, 349, 479], "apart": [58, 75, 94, 99, 103, 120, 164, 187, 272, 280, 289, 299, 426, 431, 457, 461, 465, 467], "unavoid": [58, 94, 180, 462, 465, 467], "pysys_addaudithook": [58, 140, 349], "py_audithookfunct": 58, "silenc": [58, 118, 222, 320, 329, 393, 465, 471, 473, 478, 479], "578": [58, 67, 140, 349, 463, 464, 479], "addaudithook": [58, 67, 140, 312, 349, 446], "kill": [58, 67, 83, 104, 113, 116, 128, 131, 135, 138, 140, 161, 163, 174, 244, 254, 280, 290, 330, 345, 358, 398, 403, 418, 464, 465, 466, 471, 476, 479], "120": [58, 71, 94, 153, 190, 223, 258, 349, 380, 465, 475, 477, 479], "pytuple_check": [59, 78], "pytuple_checkexact": 59, "oo": [59, 173, 349, 358, 446, 451, 467, 474, 479], "pytuple_get_s": 59, "pytuple_get_item": 59, "pytuple_set_item": [59, 468, 479], "_pytuple_res": [59, 460], "shrink": [59, 181, 462, 479], "client": [59, 67, 72, 83, 92, 99, 100, 104, 107, 124, 140, 142, 149, 155, 161, 164, 167, 191, 193, 238, 241, 242, 248, 251, 253, 255, 256, 264, 266, 285, 290, 296, 325, 326, 334, 335, 337, 355, 358, 361, 380, 382, 390, 391, 403, 405, 406, 413, 414, 416, 422, 437, 447, 460, 462, 464, 470, 472, 477, 479], "namedtupl": [59, 67, 86, 93, 115, 145, 179, 184, 285, 296, 299, 300, 316, 326, 333, 337, 341, 344, 346, 349, 378, 381, 382, 397, 438, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479], "desc": [59, 92, 278, 285, 337, 467], "pystructsequence_inittyp": [59, 473], "pystructsequence_inittype2": [59, 473], "meta": [59, 67, 86, 89, 110, 116, 120, 149, 174, 175, 217, 228, 247, 248, 289, 349, 391, 424, 460, 470, 472, 473, 475, 479], "n_in_sequ": 59, "unnam": [59, 72, 93, 173, 208, 337, 401, 426, 473, 479], "pystructsequence_get_item": 59, "pystructsequence_set_item": 59, "pytype_check": [60, 72, 479], "pytype_checkexact": [60, 479], "primarili": [60, 84, 97, 99, 137, 139, 155, 180, 191, 203, 223, 249, 252, 264, 296, 301, 341, 345, 349, 382, 384, 396, 403, 407, 423, 425, 457, 459, 460, 462, 464, 465, 472, 474, 476, 478, 479], "pytype_getdict": [60, 62, 479], "proxi": [60, 66, 67, 161, 164, 167, 179, 184, 210, 222, 223, 239, 245, 254, 338, 341, 381, 384, 391, 398, 406, 415, 422, 424, 459, 464, 470, 471, 472, 474, 475, 477, 479], "tp_dict": [60, 62, 74, 464, 479], "languag": [60, 63, 67, 71, 72, 73, 79, 83, 86, 88, 92, 93, 94, 96, 98, 100, 102, 103, 105, 106, 107, 108, 110, 120, 155, 164, 173, 177, 188, 193, 199, 202, 206, 214, 218, 219, 222, 237, 243, 244, 247, 251, 263, 270, 278, 296, 304, 316, 337, 341, 349, 351, 359, 360, 365, 373, 375, 381, 382, 398, 406, 407, 415, 424, 426, 430, 431, 432, 441, 442, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "adequ": [60, 62, 75, 84, 210, 465, 472], "pytype_addwatch": [60, 470], "pytype_watchcallback": 60, "pytype_watch": [60, 470, 479], "pytype_clearwatch": 60, "_pytype_lookup": [60, 92, 468, 479], "pytype_hasfeatur": [60, 62, 479], "pytype_is_gc": 60, "detector": [60, 72, 252, 452, 465], "issubclass": [60, 67, 77, 86, 114, 158, 222, 251, 341, 381, 382, 396, 424, 436, 446, 458, 464, 468, 476, 479], "nitem": [60, 62], "tp_alloc": [60, 62, 74, 75, 479], "kwds": [60, 62, 74, 75, 92, 135, 142, 166, 172, 200, 208, 222, 223, 252, 280, 294, 315, 342, 358, 376, 381, 384, 424, 427, 437, 463, 477, 479], "qualifi": [60, 67, 86, 92, 188, 190, 194, 247, 252, 265, 266, 296, 332, 334, 341, 345, 382, 384, 394, 396, 409, 412, 419, 424, 428, 432, 451, 457, 463, 469, 474, 477, 479, 480], "pytype_getmodulebydef": [60, 89, 98, 469, 479], "shortcut": [60, 67, 190, 232, 244, 295, 316, 318, 341, 354, 381, 424, 457, 462, 464, 476, 479], "nb_add": [60, 62, 98], "pyunstable_type_assignversiontag": [60, 479], "metaclass": [60, 67, 86, 92, 93, 110, 114, 120, 173, 208, 222, 223, 252, 341, 381, 382, 423, 464, 466, 469, 470, 471, 473, 474, 475, 476, 477, 479], "py_tpflags_heaptyp": [60, 62, 98, 468, 478], "py_tp_bas": [60, 62], "pytype_from": [60, 470, 479], "14": [60, 67, 84, 88, 94, 96, 103, 106, 119, 137, 139, 155, 157, 158, 163, 173, 174, 180, 183, 188, 190, 206, 222, 233, 238, 244, 250, 256, 258, 280, 290, 293, 299, 316, 319, 329, 334, 337, 340, 341, 342, 349, 354, 362, 374, 382, 394, 409, 424, 426, 428, 431, 438, 440, 442, 445, 448, 460, 462, 463, 465, 469, 471, 474, 475, 476, 477, 478, 479], "__init_subclass__": [60, 67, 179, 208, 222, 424, 469, 475, 479], "__set_name__": [60, 67, 92, 178, 424, 470, 475, 479], "tp_doc": [60, 62, 74, 75, 468, 479], "overlap": [60, 63, 67, 91, 103, 158, 174, 187, 253, 256, 258, 279, 287, 289, 293, 316, 340, 341, 368, 380, 432, 459, 460, 479], "mistak": [60, 72, 93, 102, 103, 118, 208, 210, 264, 268, 289, 341, 362, 365, 452, 462, 463, 465, 467, 470, 479], "suggest": [60, 67, 73, 83, 84, 90, 94, 100, 103, 106, 113, 131, 183, 222, 227, 232, 247, 296, 304, 317, 337, 361, 362, 378, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 473, 475, 477, 478, 479], "pynumbermethod": [60, 62, 74, 460, 463], "pysequencemethod": [60, 62, 74], "pymappingmethod": [60, 62, 74], "pyasyncmethod": [60, 62, 74, 479], "py_tp_dealloc": 60, "py_nb_add": 60, "py_sq_length": 60, "sq_length": [60, 62, 479], "tp_mro": [60, 62, 74, 479], "tp_cach": [60, 62, 74], "tp_subclass": [60, 62, 74, 470, 479], "tp_weaklist": [60, 62, 74, 470], "tp_vectorcal": [60, 62, 74, 479], "problemat": [60, 108, 164, 265, 280, 462, 467, 471, 476, 479], "unlimit": [60, 124, 135, 149, 199, 200, 205, 232, 244, 280, 317, 319, 341, 345, 361, 424, 431, 479], "bf_getbuff": [60, 62, 469], "pfunc": [60, 71], "py_tp_doc": 60, "genericalia": [61, 67, 179, 381, 382, 424, 426, 468, 478, 479], "union": [61, 67, 87, 116, 157, 158, 184, 208, 222, 223, 249, 251, 330, 339, 343, 381, 382, 422, 424, 461, 462, 464, 465, 468, 469, 470, 474, 478, 479], "__origin__": [61, 67, 341], "__args__": [61, 67, 341, 468, 478, 479], "__parameters__": [61, 67, 341, 382, 479], "lazili": [61, 87, 163, 213, 240, 258, 341, 382, 384, 385, 423, 425, 426, 468, 469, 473, 479], "my_obj_method": 61, "__class_getitem__": [61, 67, 341, 382, 426, 469, 476, 479], "585": [61, 86, 158, 341, 381, 382, 469, 478, 479], "pytype_": 62, "fair": [62, 83, 91, 100, 104, 106, 190, 201, 205, 278, 305, 327, 338, 365, 384, 390, 406, 407, 452, 458, 460, 461, 463, 464, 475, 479], "examin": [62, 67, 71, 84, 87, 99, 106, 108, 178, 184, 252, 261, 290, 294, 297, 305, 328, 329, 330, 332, 341, 349, 358, 406, 459, 461, 463, 464, 472, 479], "glanc": [62, 100, 461], "insight": 62, "tp_getattr": [62, 74], "tp_setattr": [62, 74], "__setattr__": [62, 67, 74, 79, 84, 92, 140, 178, 296, 385, 424, 432, 460, 479], "__delattr__": [62, 67, 74, 79, 92, 140, 178, 424, 479], "tp_as_async": [62, 74, 474], "__repr__": [62, 67, 79, 92, 93, 105, 157, 161, 178, 179, 180, 192, 208, 214, 222, 252, 280, 283, 304, 318, 337, 381, 382, 385, 415, 421, 424, 448, 460, 461, 468, 469, 471, 476, 477, 479], "tp_as_sequ": [62, 74], "tp_as_map": [62, 74], "tp_str": [62, 74], "__str__": [62, 67, 79, 93, 99, 100, 157, 161, 179, 180, 191, 192, 193, 198, 199, 200, 202, 208, 252, 264, 280, 282, 341, 342, 381, 385, 421, 424, 439, 460, 468, 469, 477, 479], "tp_as_buff": [62, 74, 478, 479], "tp_richcompar": [62, 74, 479], "__lt__": [62, 67, 74, 79, 93, 105, 145, 158, 165, 178, 221, 222, 223, 288, 341, 381, 385, 424, 426, 459, 465, 466, 471, 479], "__le__": [62, 67, 79, 93, 158, 178, 221, 223, 288, 341, 385, 424, 459, 465, 471], "__ne__": [62, 67, 79, 158, 191, 192, 199, 221, 282, 288, 385, 415, 424, 459, 469, 479], "__gt__": [62, 67, 79, 93, 105, 158, 178, 221, 222, 223, 288, 341, 385, 424, 459, 465, 471], "__ge__": [62, 67, 79, 93, 158, 178, 221, 223, 288, 341, 385, 424, 459, 465, 471], "tp_iter": [62, 74, 341, 460], "__iter__": [62, 67, 74, 79, 86, 93, 100, 114, 158, 179, 184, 208, 222, 255, 258, 268, 280, 282, 341, 382, 384, 385, 386, 418, 423, 424, 426, 436, 460, 461, 464, 473, 475, 478, 479], "tp_iternext": [62, 74, 341, 460, 479], "__next__": [62, 67, 74, 86, 94, 110, 158, 163, 172, 188, 210, 214, 222, 255, 258, 280, 341, 418, 424, 426, 436, 466, 479], "tp_method": [62, 74, 75], "tp_base": [62, 74, 75, 479], "__base__": 62, "tp_descr_get": [62, 74], "__get__": [62, 67, 86, 92, 178, 223, 252, 385, 424, 460, 475, 479], "tp_descr_set": [62, 74, 479], "__set__": [62, 67, 86, 92, 178, 252, 385, 424, 460, 475, 479], "__delete__": [62, 67, 86, 92, 252, 385, 424, 460, 479], "tp_free": [62, 74, 75, 98], "tp_is_gc": [62, 74], "__subclasses__": [62, 67, 341, 385, 470, 479], "tp_del": [62, 74, 224], "tp_version_tag": [62, 74], "tp_final": [62, 74, 474, 477, 479], "tp_watch": [62, 74], "angl": [62, 103, 142, 152, 155, 206, 222, 272, 380, 464, 465, 479], "am_await": 62, "__await__": [62, 67, 86, 158, 188, 381, 424, 474, 479], "am_ait": 62, "__aiter__": [62, 67, 86, 158, 188, 222, 385, 386, 423, 424, 474, 475, 476, 479], "am_anext": 62, "__anext__": [62, 67, 86, 158, 188, 210, 222, 385, 423, 424, 426, 479], "am_send": 62, "sendfunc": 62, "__add__": [62, 67, 79, 93, 98, 157, 165, 221, 252, 286, 288, 385, 424, 426, 479], "__radd__": [62, 67, 286, 424, 426], "nb_inplace_add": 62, "__iadd__": [62, 67, 79, 84, 158, 221, 288, 424, 458], "nb_subtract": 62, "__sub__": [62, 67, 158, 221, 288, 385, 424, 426], "__rsub__": [62, 67, 165, 424], "nb_inplace_subtract": 62, "__isub__": [62, 67, 158, 221, 288, 424, 458], "nb_multipli": 62, "__mul__": [62, 67, 79, 157, 221, 288, 385, 424, 426, 479], "__rmul__": [62, 67, 79, 424, 426, 479], "nb_inplace_multipli": 62, "__imul__": [62, 67, 79, 157, 165, 221, 288, 424, 479], "nb_remaind": 62, "__mod__": [62, 67, 102, 221, 288, 385, 424, 426, 468, 479], "__rmod__": [62, 67, 157, 424, 468, 474, 479], "nb_inplace_remaind": 62, "__imod__": [62, 67, 221, 288, 424], "nb_divmod": 62, "__divmod__": [62, 67, 385, 424, 468, 474, 479], "__rdivmod__": [62, 67, 424, 468, 479], "nb_power": 62, "__pow__": [62, 67, 221, 288, 385, 424, 426, 468, 479], "__rpow__": [62, 67, 424, 468, 479], "nb_inplace_pow": 62, "__ipow__": [62, 67, 221, 288, 424, 468, 479], "nb_negat": 62, "__neg__": [62, 67, 221, 288, 385, 424, 426], "nb_posit": 62, "__pos__": [62, 67, 221, 288, 385, 424, 426], "nb_absolut": 62, "__abs__": [62, 67, 221, 222, 288, 382, 424, 479], "nb_bool": [62, 466], "__bool__": [62, 67, 93, 110, 208, 229, 288, 341, 363, 385, 401, 424, 426, 466, 479], "nb_invert": 62, "__invert__": [62, 67, 208, 221, 288, 385, 424, 426], "nb_lshift": 62, "__lshift__": [62, 67, 221, 288, 385, 424, 426], "__rlshift__": [62, 67, 424], "nb_inplace_lshift": 62, "__ilshift__": [62, 67, 221, 288, 424], "nb_rshift": 62, "__rshift__": [62, 67, 221, 288, 385, 424, 426], "__rrshift__": [62, 67, 424], "nb_inplace_rshift": 62, "__irshift__": [62, 67, 221, 288, 424], "nb_and": 62, "__and__": [62, 67, 158, 179, 208, 221, 288, 385, 424, 426], "__rand__": [62, 67, 424, 426], "nb_inplace_and": 62, "__iand__": [62, 67, 158, 165, 221, 288, 424], "nb_xor": 62, "__xor__": [62, 67, 158, 179, 208, 221, 288, 385, 424, 426], "__rxor__": [62, 67, 424, 426], "nb_inplace_xor": 62, "__ixor__": [62, 67, 158, 221, 288, 424], "nb_or": 62, "__or__": [62, 67, 158, 179, 208, 221, 288, 341, 385, 424, 426], "__ror__": [62, 67, 424, 426, 479], "nb_inplace_or": 62, "__ior__": [62, 67, 158, 221, 288, 424], "nb_int": 62, "nb_reserv": 62, "nb_float": 62, "nb_floor_divid": 62, "__floordiv__": [62, 67, 102, 221, 288, 385, 424, 426, 460, 468, 479], "nb_inplace_floor_divid": 62, "__ifloordiv__": [62, 67, 221, 288, 424], "nb_true_divid": 62, "__truediv__": [62, 67, 102, 221, 250, 277, 288, 385, 424, 426, 460, 474], "nb_inplace_true_divid": 62, "__itruediv__": [62, 67, 221, 288, 424], "nb_matrix_multipli": 62, "__matmul__": [62, 67, 221, 288, 385, 424, 474], "__rmatmul__": [62, 67, 424, 474], "nb_inplace_matrix_multipli": 62, "__imatmul__": [62, 67, 221, 288, 424, 474], "mp_length": 62, "__len__": [62, 67, 79, 86, 114, 158, 179, 191, 193, 202, 208, 222, 268, 280, 282, 288, 341, 382, 385, 406, 409, 423, 424, 461, 462, 477, 479], "mp_subscript": [62, 479], "mp_ass_subscript": 62, "__setitem__": [62, 67, 79, 157, 158, 188, 191, 193, 202, 205, 221, 268, 280, 282, 288, 296, 385, 386, 403, 406, 409, 424, 432, 461, 466, 479], "__delitem__": [62, 67, 79, 157, 158, 191, 193, 202, 221, 268, 282, 288, 385, 403, 406, 409, 424, 461, 466, 479], "sq_concat": 62, "sq_repeat": 62, "sq_item": [62, 479], "sq_ass_item": 62, "sq_inplace_concat": 62, "sq_inplace_repeat": 62, "_typeobject": [62, 74], "tp_compar": [62, 74], "tp_reserv": [62, 74, 474], "suit": [62, 67, 74, 83, 84, 86, 89, 94, 99, 100, 102, 158, 184, 190, 227, 251, 255, 280, 289, 337, 338, 354, 378, 384, 385, 396, 418, 423, 452, 457, 463, 464, 465, 466, 469, 470, 471, 473, 475, 476, 478, 479], "rich": [62, 63, 67, 74, 110, 157, 194, 222, 223, 288, 365, 371, 415, 424, 426, 428, 466, 471, 476, 478, 479, 480], "stuff": [62, 74, 78, 89, 99, 100, 120, 166, 173, 190, 304, 385, 466], "resolut": [62, 67, 74, 75, 84, 86, 92, 98, 114, 116, 124, 179, 180, 211, 213, 222, 223, 229, 231, 242, 252, 290, 291, 292, 293, 296, 305, 334, 341, 362, 423, 424, 428, 436, 461, 463, 472, 473, 474, 475, 477, 478, 479], "bitset": [62, 74], "type_new": [62, 92, 479], "metatyp": [62, 252], "complain": [62, 75, 88, 89, 100, 166, 244, 459, 479], "foo_typ": 62, "_ob_next": 62, "_ob_prev": 62, "getobject": [62, 452, 477, 479], "act": [62, 66, 74, 84, 94, 99, 102, 120, 142, 173, 178, 180, 188, 193, 198, 202, 205, 222, 223, 241, 245, 247, 250, 256, 264, 290, 306, 308, 337, 341, 349, 361, 371, 380, 381, 382, 385, 422, 424, 431, 457, 458, 459, 464, 472, 473, 477, 478, 479], "everyth": [62, 72, 75, 84, 87, 88, 89, 91, 100, 102, 107, 108, 118, 190, 205, 217, 222, 244, 265, 289, 290, 293, 296, 316, 329, 330, 334, 355, 365, 385, 396, 415, 430, 431, 464, 466, 470, 472, 479], "pickl": [62, 67, 75, 83, 89, 99, 100, 140, 155, 157, 163, 168, 173, 179, 180, 183, 223, 251, 259, 261, 264, 265, 266, 271, 280, 281, 295, 324, 327, 344, 375, 382, 385, 442, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 479, 480], "pydoc": [62, 67, 75, 83, 184, 222, 251, 416, 459, 460, 461, 462, 465, 467, 474, 479], "meaning": [62, 103, 190, 195, 232, 247, 252, 256, 265, 268, 280, 290, 311, 316, 334, 338, 349, 378, 381, 391, 394, 424, 430, 432, 466, 471, 473, 474, 479], "whichev": [62, 72, 74, 108, 112, 180, 264, 344, 384, 457, 472, 474], "align": [62, 67, 116, 143, 151, 342, 358, 372, 380, 404, 464, 465, 470, 479], "py_tpflags_basetyp": [62, 75], "permiss": [62, 83, 84, 86, 99, 100, 107, 108, 160, 209, 210, 213, 245, 254, 290, 293, 308, 329, 330, 334, 337, 339, 354, 356, 382, 391, 393, 401, 422, 457, 465, 476, 479], "foo_dealloc": [62, 477], "foo_object": 62, "tp_print": [62, 478], "inconsist": [62, 187, 210, 289, 290, 334, 385, 431, 459, 470, 475, 479], "relev": [62, 67, 72, 74, 83, 84, 88, 89, 91, 94, 97, 99, 100, 108, 120, 143, 164, 183, 184, 190, 191, 205, 212, 239, 242, 248, 259, 264, 265, 266, 285, 289, 290, 297, 299, 338, 341, 345, 351, 352, 358, 384, 403, 410, 419, 421, 457, 458, 460, 462, 470, 472, 473, 474, 475, 478, 479], "await": [62, 67, 86, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 158, 166, 167, 179, 184, 185, 188, 222, 252, 261, 341, 373, 381, 382, 384, 385, 423, 425, 427, 429, 431, 458, 461, 468, 469, 475, 476, 477, 478, 479], "eval": [62, 67, 84, 87, 110, 119, 120, 142, 154, 156, 210, 222, 251, 252, 265, 294, 296, 304, 324, 341, 371, 377, 425, 427, 431, 432, 433, 436, 440, 446, 458, 462, 464, 466, 467, 468, 469, 470, 471, 479], "feasibl": [62, 72, 327, 473, 479], "deduc": [62, 172, 190, 280, 305, 350, 457, 471], "isinst": [62, 67, 77, 84, 86, 87, 92, 93, 99, 100, 110, 114, 149, 158, 166, 178, 180, 208, 222, 247, 248, 251, 252, 259, 286, 288, 296, 341, 381, 382, 384, 385, 386, 423, 424, 436, 446, 458, 461, 462, 464, 466, 468, 469, 470, 471, 475, 476, 479], "among": [62, 105, 124, 139, 173, 178, 187, 190, 268, 280, 281, 297, 325, 349, 354, 362, 365, 371, 384, 424, 431, 457, 471, 477, 479], "mask": [62, 67, 173, 174, 208, 253, 290, 319, 326, 329, 330, 334, 339, 352, 365, 372, 401, 424, 462, 464, 471, 472, 478, 479], "guard": [62, 67, 98, 100, 120, 124, 248, 310, 358, 361, 381, 382, 427, 428, 437, 477, 479], "xxx": [62, 99, 100, 118, 428, 465, 467, 472, 479], "py_tpflags_default": [62, 75], "ore": [62, 175, 187, 190, 212, 290, 316, 338, 365, 402], "decref": [62, 63, 479], "java": [62, 67, 77, 79, 83, 84, 94, 100, 103, 104, 114, 116, 222, 290, 341, 361, 406, 410, 411, 424, 430, 435, 437, 440, 458, 462, 463, 464, 466, 468, 471], "py_tpflags_readi": 62, "group": [62, 67, 83, 88, 93, 97, 99, 100, 106, 108, 116, 122, 140, 149, 155, 166, 172, 175, 183, 184, 187, 188, 190, 191, 200, 208, 216, 222, 245, 248, 251, 256, 258, 263, 268, 278, 280, 282, 285, 290, 293, 296, 311, 316, 329, 331, 334, 336, 338, 339, 341, 342, 345, 347, 354, 359, 361, 371, 372, 377, 378, 382, 387, 390, 396, 401, 405, 411, 415, 424, 426, 427, 430, 431, 439, 448, 457, 458, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "bitmask": [62, 124, 190, 292, 325, 326], "py_tpflags_have_stackless_extens": 62, "py_tpflags_immutabletyp": [62, 98, 468, 469, 470, 479], "portion": [62, 86, 89, 91, 94, 97, 103, 126, 139, 152, 176, 180, 183, 200, 206, 223, 232, 264, 265, 266, 334, 339, 372, 384, 390, 403, 406, 412, 415, 416, 422, 428, 458, 471, 472, 474, 479], "py_tpflags_long_subclass": 62, "py_tpflags_list_subclass": 62, "py_tpflags_tuple_subclass": 62, "py_tpflags_bytes_subclass": 62, "py_tpflags_unicode_subclass": 62, "py_tpflags_dict_subclass": 62, "py_tpflags_base_exc_subclass": 62, "py_tpflags_type_subclass": 62, "ins": [62, 93, 94, 458, 460, 461, 462], "py_tpflags_have_fin": [62, 477], "py_tpflags_disallow_instanti": [62, 98, 468, 470, 479], "py_tpflags_map": [62, 188, 423, 479], "abc": [62, 67, 72, 77, 79, 84, 86, 87, 89, 92, 94, 102, 103, 106, 110, 124, 131, 134, 157, 164, 167, 173, 179, 181, 184, 188, 223, 225, 239, 248, 249, 251, 255, 256, 258, 264, 265, 277, 280, 287, 296, 312, 316, 318, 327, 328, 341, 342, 349, 358, 378, 381, 418, 419, 422, 423, 424, 426, 428, 431, 436, 438, 458, 460, 461, 462, 463, 464, 465, 466, 469, 470, 475, 476, 477, 479], "py_tpflags_sequ": [62, 188, 423, 479], "634": [62, 67, 110, 423, 424, 479], "py_tpflags_valid_version_tag": [62, 479], "local_travers": 62, "_thread": [62, 67, 83, 140, 161, 251, 361, 461, 472, 479], "localobject": [62, 89], "particip": [62, 74, 75, 180, 240, 247, 264, 296, 316, 458, 460, 463, 465], "hand": [62, 72, 74, 83, 84, 89, 93, 94, 102, 103, 108, 120, 127, 173, 174, 178, 183, 193, 198, 203, 210, 222, 227, 244, 255, 266, 296, 302, 316, 335, 362, 365, 380, 382, 385, 423, 426, 430, 432, 447, 458, 459, 460, 461, 463, 464, 466, 467, 472, 477, 479], "aid": [62, 101, 337, 457, 461, 462, 465, 471, 472, 473, 479], "anyway": [62, 75, 88, 173, 180, 222, 240, 244, 256, 384, 385, 459, 460, 470, 479], "get_refer": [62, 67, 140, 224, 312, 461, 468, 479], "weakrefer": 62, "40217": [62, 478, 479], "doubt": [62, 83, 91, 164, 180, 463], "prove": [62, 94, 173, 258, 338, 423, 461, 466, 467], "compos": [62, 67, 170, 197, 198, 199, 200, 205, 269, 290, 332, 351, 352, 371, 378, 382, 383, 431, 472], "rare": [62, 83, 124, 131, 174, 178, 190, 196, 210, 232, 240, 244, 264, 289, 327, 330, 334, 341, 354, 386, 403, 406, 459, 460, 463, 464, 470, 472, 479], "local_clear": 62, "trash": [62, 268, 479], "reclam": 62, "weakref": [62, 67, 74, 84, 86, 178, 179, 210, 251, 280, 313, 341, 358, 448, 459, 460, 462, 463, 465, 469, 470, 479], "goal": [62, 74, 89, 94, 98, 198, 222, 232, 317, 358, 409, 430, 459, 461, 463, 464, 471, 473, 474, 475], "eas": [62, 67, 327, 341, 361, 384, 432, 458, 472, 474, 476, 479], "py_return_richcompar": [62, 476, 479], "val_a": 62, "val_b": 62, "pyweakref_": 62, "confus": [62, 71, 83, 84, 91, 98, 100, 102, 103, 107, 154, 173, 183, 187, 190, 222, 256, 266, 289, 290, 296, 316, 330, 354, 365, 385, 391, 424, 426, 431, 432, 458, 459, 460, 461, 462, 463, 465, 467, 470, 471, 473, 475, 476, 477, 479], "unari": [62, 67, 120, 183, 188, 341, 385, 424, 429, 431, 472], "overload": [62, 67, 124, 184, 223, 382, 391, 415, 424, 426, 459, 460, 469, 473, 479], "retreiv": 62, "reiniti": [62, 479], "unrel": [62, 72, 84, 93, 148, 210, 268, 334, 479], "thumb": [62, 98, 102, 187, 372], "defer": [62, 67, 72, 99, 124, 157, 190, 243, 255, 266, 275, 337, 338, 352, 459, 464, 470, 479], "presum": [62, 99, 158, 172, 180, 268, 280, 344, 345, 390, 426, 460, 465, 466, 479], "factori": [62, 67, 86, 97, 118, 124, 126, 128, 131, 155, 166, 169, 173, 186, 190, 200, 204, 205, 223, 247, 253, 264, 265, 266, 268, 272, 277, 280, 287, 289, 295, 312, 329, 361, 365, 367, 382, 386, 398, 403, 406, 409, 415, 416, 424, 460, 463, 464, 467, 470, 471, 472, 474, 476, 477, 478, 479], "mixtur": [62, 200, 427, 431, 474], "_pyobject_get_weakrefs_listptr": [62, 470], "sane": [62, 174, 180, 316, 479], "trivial": [62, 67, 71, 72, 74, 83, 94, 135, 149, 191, 197, 205, 231, 280, 296, 316, 347, 349, 386, 403, 461, 472, 473, 479], "local_fin": 62, "error_typ": 62, "error_valu": 62, "error_traceback": 62, "442": [62, 67, 74, 224, 478, 479], "tradit": [62, 72, 75, 92, 98, 108, 170, 263, 268, 272, 289, 290, 296, 305, 355, 358, 423, 427, 428, 452, 457, 461, 464, 471, 476, 479], "ternari": [62, 424, 426], "operand": [62, 67, 88, 120, 155, 180, 188, 190, 210, 222, 264, 287, 341, 424, 426, 432, 439, 445, 460, 465, 466, 471, 472, 479], "nb_long": 62, "augment": [62, 67, 84, 118, 120, 190, 265, 273, 328, 371, 424, 427, 431, 451, 471, 479, 480], "counter": [62, 67, 72, 75, 84, 86, 94, 138, 179, 184, 187, 188, 197, 233, 280, 289, 290, 341, 361, 362, 382, 384, 426, 436, 460, 462, 463, 464, 465, 467, 471, 472, 477, 479], "root": [62, 67, 87, 92, 99, 100, 108, 109, 110, 112, 139, 140, 152, 157, 173, 183, 198, 202, 203, 204, 207, 216, 232, 244, 245, 249, 258, 261, 264, 265, 272, 280, 290, 291, 293, 299, 301, 311, 329, 336, 338, 339, 345, 349, 354, 358, 362, 365, 367, 368, 371, 372, 382, 384, 406, 409, 411, 417, 418, 419, 424, 448, 451, 452, 458, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 477, 478, 479], "react": [62, 91, 269, 365, 458, 464], "demonstr": [62, 72, 74, 88, 91, 93, 100, 103, 104, 112, 118, 138, 147, 173, 183, 239, 241, 244, 275, 280, 281, 289, 304, 316, 317, 340, 344, 365, 376, 377, 380, 384, 409, 421, 426, 438, 457, 459, 471, 479], "tricki": [62, 84, 89, 93, 154, 289, 365, 458, 459, 466], "tutori": [62, 67, 73, 88, 91, 100, 107, 112, 116, 118, 159, 174, 190, 208, 210, 219, 222, 223, 244, 264, 265, 266, 270, 287, 295, 334, 341, 347, 365, 403, 423, 430, 449, 460, 462, 463, 464, 471, 479], "assort": [62, 67, 73, 190, 371, 479], "topic": [62, 67, 71, 73, 75, 83, 89, 91, 103, 153, 190, 208, 264, 289, 304, 310, 334, 458, 461, 467, 479], "myobject": [62, 74], "myobject_typ": 62, "mymod": 62, "my": [62, 72, 77, 93, 94, 100, 104, 107, 108, 149, 157, 190, 227, 245, 265, 293, 338, 341, 342, 358, 365, 442, 458, 460, 461, 462, 463, 470, 479], "myobj_new": 62, "myobj_dealloc": 62, "myobj_repr": 62, "myobj_travers": 62, "myobj_clear": 62, "myobj_hash": 62, "mystr": 62, "mystr_typ": 62, "393": [63, 67, 155, 349, 468, 478, 479, 480], "varieti": [63, 72, 74, 94, 98, 106, 118, 155, 183, 191, 222, 227, 270, 289, 290, 305, 341, 345, 365, 369, 382, 403, 428, 462, 463, 464, 465, 473], "stay": [63, 67, 136, 349, 470, 471, 472, 475, 479], "65536": [63, 445, 479], "1114112": [63, 155], "623": [63, 315, 468, 470, 479], "py_ucs2": [63, 472], "py_ucs1": [63, 472], "narrow": [63, 316, 334, 341, 382, 452, 460, 468, 471, 472, 479], "pyasciiobject": [63, 472], "pycompactunicodeobject": [63, 472], "pyunicode_check": [63, 75], "pyunicode_checkexact": 63, "pyunicode_readi": [63, 469, 472], "pyunicode_get_length": [63, 468, 472], "canon": [63, 67, 84, 86, 93, 142, 164, 180, 182, 183, 192, 208, 232, 287, 289, 293, 334, 343, 383, 409, 421, 426, 465, 474, 479], "pyunicode_1byte_data": [63, 472], "pyunicode_2byte_data": [63, 472], "pyunicode_4byte_data": [63, 472], "ucs1": [63, 479], "ucs2": [63, 479], "ucs4": [63, 460, 479], "pyunicode_kind": [63, 472], "pyunicode_1byte_kind": [63, 472], "pyunicode_2byte_kind": [63, 472], "pyunicode_4byte_kind": [63, 472], "pyunicode_wchar_kind": [63, 469, 470, 472], "pyunicode_data": [63, 472, 479], "pyunicode_writ": [63, 472], "saniti": [63, 452, 473, 479], "pyunicode_read": [63, 472], "pyunicode_read_char": [63, 472], "pyunicode_max_char_valu": [63, 472], "py_unicode_isspac": [63, 479], "ch": [63, 89, 91, 99, 100, 155, 174, 187, 391, 456, 458, 479], "py_unicode_islow": 63, "lowercas": [63, 103, 106, 141, 153, 155, 164, 183, 193, 202, 232, 245, 256, 302, 316, 341, 342, 349, 360, 394, 431, 466, 479], "py_unicode_isupp": 63, "uppercas": [63, 84, 89, 92, 106, 118, 146, 175, 245, 256, 278, 289, 290, 341, 342, 431, 458, 465, 466, 470, 473, 475, 479], "py_unicode_istitl": 63, "titlecas": [63, 341, 431, 479], "py_unicode_islinebreak": 63, "linebreak": 63, "py_unicode_isdecim": [63, 471], "py_unicode_isdigit": 63, "py_unicode_isnumer": 63, "py_unicode_isalpha": 63, "alphabet": [63, 84, 88, 105, 141, 144, 170, 175, 183, 193, 196, 259, 264, 265, 268, 305, 323, 331, 341, 381, 457, 461, 462, 463, 464, 465, 468, 473, 474, 475, 476, 477, 479], "py_unicode_isalnum": 63, "alphanumer": [63, 103, 149, 175, 190, 247, 265, 269, 296, 316, 328, 341, 342, 362, 461, 479], "py_unicode_isprint": 63, "printabl": [63, 67, 144, 155, 174, 175, 192, 193, 194, 195, 199, 200, 205, 222, 279, 314, 341, 342, 343, 359, 424, 459, 466, 471], "nonprint": [63, 341], "databas": [63, 67, 71, 83, 92, 103, 106, 140, 155, 174, 178, 180, 206, 222, 240, 251, 258, 263, 273, 293, 295, 296, 305, 327, 336, 337, 341, 343, 347, 359, 361, 362, 365, 371, 372, 387, 391, 421, 428, 431, 439, 459, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "0x20": [63, 141, 341, 424], "bear": [63, 108, 180, 240, 247, 280, 341, 349, 479], "py_unicode_tolow": [63, 471], "py_unicode_toupp": 63, "upper": [63, 67, 84, 91, 93, 94, 99, 100, 103, 120, 144, 146, 149, 157, 174, 187, 245, 280, 316, 334, 335, 337, 338, 341, 342, 371, 380, 384, 424, 426, 427, 432, 461, 471, 477, 479], "py_unicode_totitl": 63, "py_unicode_todecim": 63, "py_unicode_todigit": 63, "py_unicode_tonumer": 63, "py_unicode_is_surrog": 63, "0xd800": 63, "0xdfff": 63, "py_unicode_is_high_surrog": 63, "0xdbff": 63, "py_unicode_is_low_surrog": 63, "0xdc00": 63, "py_unicode_join_surrog": 63, "join": [63, 67, 76, 78, 84, 94, 100, 104, 112, 118, 124, 132, 134, 149, 152, 155, 157, 161, 172, 183, 187, 197, 199, 200, 205, 216, 219, 222, 239, 240, 241, 244, 256, 258, 265, 267, 276, 280, 281, 290, 291, 293, 299, 313, 316, 317, 318, 323, 328, 329, 332, 334, 335, 339, 341, 342, 358, 360, 361, 363, 381, 382, 390, 395, 403, 406, 407, 409, 418, 421, 437, 445, 448, 458, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 479], "pyunicode_new": [63, 468, 472], "maxchar": 63, "nearest": [63, 180, 183, 218, 222, 272, 349, 397, 425, 432, 466, 467, 479], "65535": [63, 418, 460], "1114111": [63, 349, 472], "pyunicode_fromkindanddata": [63, 472], "transform": [63, 67, 86, 92, 93, 94, 100, 102, 105, 106, 110, 120, 137, 143, 164, 172, 180, 183, 190, 193, 194, 198, 202, 205, 208, 210, 222, 223, 252, 263, 264, 268, 296, 341, 374, 380, 381, 382, 409, 422, 423, 424, 426, 458, 459, 464, 466, 473, 474, 476, 479], "codepoint": [63, 244], "width": [63, 67, 74, 84, 91, 103, 115, 118, 139, 148, 155, 173, 174, 178, 180, 183, 219, 222, 244, 278, 289, 290, 304, 316, 341, 342, 349, 359, 360, 362, 365, 368, 372, 377, 380, 382, 383, 397, 424, 431, 445, 448, 458, 461, 463, 464, 465, 470, 471, 473, 475, 477, 479], "asterisk": [63, 120, 245, 341, 382, 402, 409, 423, 426, 432, 476], "pad": [63, 67, 83, 120, 141, 144, 151, 174, 180, 183, 193, 196, 222, 231, 232, 256, 281, 334, 341, 342, 344, 346, 362, 365, 372, 391, 404, 458, 461, 464, 465, 471, 475, 479], "ll": [63, 72, 74, 75, 83, 84, 87, 88, 89, 91, 92, 93, 94, 97, 99, 100, 103, 104, 106, 107, 108, 110, 176, 190, 197, 266, 269, 289, 294, 316, 328, 337, 338, 341, 365, 380, 386, 409, 428, 430, 431, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 477, 478, 479], "intmax_t": [63, 470, 479], "uintmax_t": 63, "ssize_t": [63, 67, 89, 173, 344, 471, 472, 480], "ptrdiff_t": [63, 470, 479], "octal": [63, 84, 103, 110, 149, 181, 256, 289, 290, 316, 341, 342, 431, 458, 459, 461, 462, 464, 466, 469, 470, 471, 477, 478, 479], "hexadecim": [63, 84, 98, 103, 144, 155, 175, 232, 256, 289, 316, 341, 342, 349, 394, 431, 458, 462, 464, 469, 470, 471, 472, 473, 479], "formatt": [63, 67, 116, 118, 265, 266, 289, 342, 359, 461, 465, 468, 471, 473, 474, 476, 479], "lld": [63, 452, 465], "llu": [63, 465], "li": [63, 407, 474, 476, 479], "lli": [63, 380], "zi": 63, "ing": [63, 78, 103, 190, 240, 465, 472, 476, 479], "pyunicode_copycharact": [63, 468, 469, 472, 479], "to_start": 63, "from_start": 63, "how_mani": 63, "memcpi": [63, 469, 479], "pyunicode_fil": [63, 469, 472, 479], "fill_char": 63, "bigger": [63, 92, 272, 329, 341, 354, 457, 477, 479], "contrast": [63, 183, 223, 244, 305, 338, 341, 344, 365, 382, 408, 424, 425, 426, 428, 460, 472, 475, 476], "substr": [63, 89, 94, 103, 106, 164, 190, 232, 289, 316, 341, 384, 426, 445, 458, 460, 461, 462, 463, 464, 472, 474, 476, 479], "buflen": [63, 334], "copy_nul": 63, "383": [63, 155, 334, 479], "strlen": [63, 78, 104, 106], "parsetupl": 63, "wcslen": 63, "deviat": [63, 102, 345, 363, 390, 471, 472, 473, 479], "simplic": [63, 74, 259, 337, 341, 458, 460], "pyunicode_asutf8": [63, 472, 476, 479], "byteord": [63, 67, 312, 341, 344, 349, 446, 479], "bom": [63, 67, 106, 143, 259, 374, 479], "divis": [63, 65, 67, 84, 86, 100, 111, 120, 180, 183, 210, 294, 299, 330, 337, 341, 424, 425, 426, 432, 439, 445, 461, 462, 464, 465, 469, 471, 478, 479, 480], "ufeff": 63, "ufff": 63, "odd": [63, 67, 91, 94, 151, 183, 232, 305, 345, 431, 437, 458, 461, 462, 463, 465, 479], "64": [63, 67, 84, 92, 93, 97, 104, 134, 141, 144, 173, 174, 180, 183, 222, 232, 256, 258, 267, 280, 281, 290, 300, 301, 303, 329, 334, 338, 341, 344, 349, 380, 400, 415, 424, 438, 442, 445, 452, 457, 458, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "ordin": [63, 93, 106, 155, 173, 174, 175, 180, 340, 341, 380, 472, 474], "unmap": [63, 372], "0xfffe": [63, 155], "translat": [63, 67, 72, 102, 103, 105, 106, 110, 155, 173, 174, 184, 209, 210, 216, 217, 219, 222, 235, 242, 243, 247, 255, 259, 279, 290, 330, 334, 341, 342, 345, 383, 409, 413, 415, 422, 423, 424, 458, 461, 462, 464, 465, 466, 467, 469, 471, 474, 476, 477, 479], "dbcs": [63, 155], "code_pag": [63, 472], "cp_acp": [63, 155, 472, 475], "sep": [63, 67, 84, 94, 116, 144, 180, 183, 222, 228, 241, 244, 290, 293, 338, 341, 342, 354, 403, 423, 437, 460, 463, 464, 465, 466, 469, 479], "maxsplit": [63, 103, 316, 341], "keepend": [63, 155, 187, 197, 341], "crlf": [63, 220, 241, 242, 476, 479], "tail": [63, 67, 93, 149, 157, 187, 258, 270, 291, 331, 409, 463, 470, 472, 475, 479], "forward": [63, 67, 84, 89, 92, 94, 103, 120, 151, 153, 173, 174, 180, 188, 197, 219, 223, 227, 244, 268, 286, 293, 294, 337, 338, 341, 380, 382, 398, 403, 407, 423, 458, 459, 460, 462, 464, 467, 471, 476, 479], "replstr": 63, "maxcount": 63, "uni": 63, "iso": [63, 148, 155, 180, 187, 192, 193, 199, 202, 236, 239, 263, 285, 311, 334, 337, 349, 362, 394, 403, 413, 415, 458, 462, 469, 471, 474, 475, 477, 479], "8859": [63, 106, 155, 187, 192, 193, 199, 202, 239, 285, 311, 403, 413, 458, 471, 474], "clarif": [63, 428, 479], "lot": [63, 67, 72, 74, 76, 78, 83, 84, 89, 99, 103, 106, 107, 108, 149, 166, 167, 173, 181, 190, 197, 231, 242, 256, 264, 280, 289, 301, 305, 327, 335, 345, 370, 378, 385, 405, 458, 459, 460, 461, 462, 464, 465, 466, 473, 478, 479], "talk": [63, 84, 89, 91, 100, 106, 338, 345, 424, 463, 474], "neutral": [63, 72, 97, 473], "portabl": [64, 67, 72, 79, 80, 100, 104, 106, 129, 173, 174, 212, 213, 216, 246, 247, 263, 272, 275, 290, 295, 296, 300, 303, 334, 339, 354, 362, 395, 399, 417, 444, 457, 458, 461, 467, 472, 476, 477, 479], "grammar": [65, 67, 94, 110, 154, 261, 342, 373, 423, 427, 430, 431, 458, 459, 463, 466, 468, 478, 479], "py_eval_input": [65, 78, 427], "py_file_input": [65, 427, 468], "py_single_input": [65, 427], "incompat": [65, 79, 89, 102, 173, 181, 208, 210, 252, 256, 264, 268, 285, 296, 382, 432, 452, 458, 461, 463, 466, 470, 471, 472, 474, 476, 477, 478, 479], "pyrun_anyfil": 65, "pyrun_anyfileexflag": 65, "closeit": 65, "pyrun_anyfileflag": 65, "pycompilerflag": [65, 477], "pyrun_anyfileex": 65, "devic": [65, 67, 97, 129, 155, 174, 175, 209, 222, 244, 255, 266, 290, 293, 325, 326, 329, 330, 334, 339, 345, 347, 349, 354, 401, 409, 451, 458, 464, 479], "pseudo": [65, 67, 89, 93, 118, 173, 178, 188, 193, 251, 271, 283, 290, 299, 319, 323, 338, 341, 349, 387, 428, 460, 461, 464, 470, 472, 475, 479], "pyrun_interactiveloop": [65, 78], "pyrun_simplefil": [65, 71], "pyrun_simplefileexflag": [65, 479], "pyrun_simplestringflag": 65, "pyrun_simplefileex": 65, "fopen": [65, 187, 472], "rb": [65, 83, 86, 100, 102, 115, 124, 147, 157, 197, 205, 215, 222, 231, 232, 249, 250, 255, 267, 285, 296, 299, 341, 374, 375, 382, 393, 397, 403, 415, 418, 431, 442, 448, 458, 461, 468, 472, 479], "lf": [65, 67, 116, 175, 205, 431, 479], "pyrun_interactiveon": [65, 479], "pyrun_interactiveoneflag": 65, "ps1": [65, 67, 154, 312, 334, 349, 395, 434, 446, 451, 477, 479], "ps2": [65, 67, 154, 312, 349, 434, 446, 451, 479], "errcod": [65, 67, 253, 415], "pyrun_interactiveloopflag": 65, "eof": [65, 67, 104, 117, 124, 128, 131, 134, 135, 147, 153, 154, 165, 190, 210, 219, 220, 222, 255, 267, 290, 306, 325, 328, 334, 337, 338, 355, 420, 451, 463, 468, 472, 479], "prototyp": [65, 67, 89, 116, 153, 183, 337, 458, 463, 465, 479], "idl": [65, 67, 78, 79, 84, 86, 172, 173, 175, 226, 251, 331, 345, 364, 365, 380, 406, 407, 409, 455, 457, 460, 461, 480], "wait": [65, 67, 72, 84, 91, 100, 104, 107, 113, 116, 118, 120, 122, 123, 124, 127, 130, 131, 132, 134, 135, 136, 161, 163, 174, 186, 204, 205, 242, 244, 251, 252, 254, 257, 266, 279, 280, 281, 290, 292, 315, 319, 322, 326, 330, 332, 334, 335, 337, 338, 339, 345, 357, 358, 361, 366, 380, 391, 395, 399, 437, 448, 461, 462, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "integr": [65, 67, 72, 84, 86, 96, 100, 113, 116, 183, 190, 218, 222, 244, 267, 272, 286, 287, 316, 335, 337, 341, 344, 361, 365, 384, 385, 386, 397, 424, 426, 453, 457, 458, 461, 462, 464, 466, 471, 472, 476, 477, 478, 479], "_tkinter": [65, 365, 380, 461, 469, 474, 478, 479], "pyos_readlinefunctionpoint": [65, 78, 468, 470, 473, 479], "edit": [65, 67, 89, 91, 94, 100, 103, 106, 108, 116, 153, 164, 174, 187, 247, 248, 259, 268, 269, 290, 316, 317, 340, 354, 363, 364, 365, 372, 441, 451, 457, 458, 459, 461, 462, 464, 466, 471, 475, 476, 479], "pyrun_str": [65, 78, 479], "pyrun_stringflag": 65, "pyrun_fil": 65, "pyrun_fileexflag": 65, "pyrun_fileex": 65, "pyrun_fileflag": 65, "py_compilestringflag": 65, "py_compilestringexflag": 65, "py_compilestringobject": 65, "constrain": [65, 97, 120, 205, 281, 382, 409, 423, 426, 428, 460, 463, 471, 477, 479], "kws": [65, 222, 349], "kwcount": 65, "defcount": 65, "kwdef": [65, 479], "precompil": [65, 89, 321, 341, 451, 479], "unvarnish": 65, "thrown": [65, 89, 94, 137, 180, 183, 265, 316, 460, 461, 472, 479], "pyeval_mergecompilerflag": 65, "cf": [65, 103, 334], "arbitrarili": [65, 120, 164, 166, 188, 265, 290, 315, 341, 384, 391, 426, 462, 470, 477, 479], "__future__": [65, 67, 86, 87, 102, 110, 156, 210, 222, 251, 252, 260, 312, 382, 423, 424, 432, 460, 461, 463, 464, 466, 468, 469, 473, 474, 476, 478, 479, 480], "cf_flag": [65, 477], "cf_feature_vers": [65, 477, 479], "pycf_only_ast": [65, 67, 120, 261, 463, 477, 479], "co_future_divis": [65, 478], "238": [65, 67, 86, 111, 466, 480], "pyweakref_check": 66, "pyweakref_checkref": 66, "pyweakref_checkproxi": 66, "pyweakref_get_object": [66, 469, 479], "701": [67, 479], "syntact": [67, 84, 166, 199, 247, 311, 337, 341, 374, 382, 385, 390, 396, 410, 423, 425, 426, 430, 431, 432, 437, 462, 463, 466, 479], "formal": [67, 89, 190, 222, 232, 289, 316, 341, 342, 390, 410, 417, 424, 425, 426, 430, 432, 458, 460, 467, 473, 474, 477, 478, 479], "709": [67, 465, 479], "688": [67, 158, 424, 479], "684": [67, 479], "692": [67, 382, 479], "typeddict": [67, 184, 381, 382, 468, 477, 479], "698": [67, 382, 479], "decor": [67, 86, 92, 93, 100, 120, 138, 158, 173, 178, 179, 184, 222, 223, 252, 312, 318, 341, 358, 382, 384, 416, 423, 424, 425, 426, 427, 463, 465, 466, 469, 471, 472, 473, 476, 477, 478, 479, 480], "695": [67, 99, 382, 425, 432, 479], "asyncio": [67, 83, 99, 100, 112, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 161, 166, 185, 251, 257, 264, 280, 338, 345, 349, 361, 385, 386, 424, 426, 451, 479], "calendar": [67, 179, 180, 251, 362, 447, 458, 461, 469, 475, 479], "csv": [67, 98, 157, 214, 251, 358, 447, 461, 463, 467, 475, 479], "dis": [67, 86, 251, 252, 261, 297, 349, 475, 479], "fraction": [67, 72, 106, 180, 183, 190, 222, 223, 251, 258, 263, 272, 286, 287, 305, 315, 316, 337, 338, 340, 341, 361, 362, 380, 426, 431, 440, 445, 460, 461, 462, 463, 465, 466, 467, 468, 474, 475, 477, 478, 479], "itertool": [67, 86, 110, 157, 221, 222, 223, 233, 244, 247, 251, 272, 276, 288, 315, 340, 461, 462, 463, 464, 465, 466, 467, 479], "math": [67, 86, 89, 94, 108, 152, 163, 183, 190, 209, 218, 222, 251, 258, 280, 286, 287, 315, 340, 341, 344, 349, 380, 422, 424, 426, 438, 440, 442, 447, 452, 461, 462, 464, 465, 467, 479], "pathlib": [67, 118, 140, 160, 216, 228, 248, 249, 250, 251, 290, 291, 412, 418, 479], "pdb": [67, 84, 112, 140, 142, 182, 190, 211, 222, 251, 349, 377, 378, 451, 457, 461, 463, 464, 467, 469, 479], "shutil": [67, 83, 100, 107, 117, 140, 163, 216, 222, 231, 251, 290, 293, 345, 354, 358, 398, 447, 461, 464, 465, 468, 476, 479], "sqlite3": [67, 83, 92, 140, 157, 251, 295, 296, 452, 464, 465, 477, 479], "tempfil": [67, 107, 140, 197, 216, 222, 251, 280, 290, 324, 358, 391, 398, 464, 466, 479], "tkinter": [67, 79, 251, 364, 380, 455, 458, 461, 464, 466, 467, 479], "unicodedata": [67, 103, 106, 251, 341, 359, 426, 431, 458, 463, 464, 465, 468, 471, 472, 479], "unittest": [67, 77, 83, 110, 184, 251, 358, 378, 396, 447, 461, 467, 478, 479], "uuid": [67, 251, 253, 278, 334, 463, 469, 477, 479], "demo": [67, 88, 100, 219, 244, 403, 407, 416, 447, 461, 464, 471, 480], "13": [67, 94, 96, 100, 101, 106, 108, 110, 115, 137, 139, 148, 149, 150, 151, 155, 157, 170, 173, 180, 190, 208, 223, 233, 238, 246, 256, 258, 263, 269, 275, 278, 284, 291, 292, 298, 319, 329, 333, 336, 337, 340, 341, 342, 346, 355, 356, 374, 382, 393, 399, 404, 425, 437, 440, 442, 445, 446, 460, 461, 462, 463, 464, 465, 469, 471, 473, 474, 476, 477, 478, 479, 480], "port": [67, 89, 90, 91, 100, 102, 104, 107, 124, 134, 140, 164, 220, 239, 240, 242, 244, 245, 253, 254, 265, 266, 280, 285, 290, 302, 310, 330, 332, 334, 335, 337, 338, 339, 355, 358, 390, 391, 403, 415, 416, 459, 460, 479, 480], "657": [67, 479], "654": [67, 479], "678": [67, 470, 479], "exe": [67, 85, 101, 103, 244, 266, 280, 290, 291, 329, 331, 345, 395, 418, 434, 442, 444, 452, 457, 460, 465, 471, 475, 476, 479], "launcher": [67, 395, 417, 444, 454, 465, 473, 475, 476, 479, 480], "646": [67, 155, 382, 479], "variad": [67, 116, 382, 437, 479], "655": [67, 382, 479], "673": [67, 100, 382, 479], "675": [67, 222, 382, 479], "681": [67, 382, 479], "563": [67, 111, 285, 382, 423, 432, 479], "contextlib": [67, 77, 184, 251, 312, 341, 378, 465, 466, 467, 477, 479], "dataclass": [67, 157, 208, 233, 251, 304, 305, 312, 313, 337, 341, 382, 436, 437, 479], "fcntl": [67, 140, 251, 334, 387, 460, 461, 462, 464, 479], "functool": [67, 84, 86, 87, 92, 105, 110, 124, 127, 145, 157, 217, 221, 222, 248, 251, 252, 258, 341, 424, 463, 464, 465, 466, 467, 479], "idlelib": [67, 364, 365, 461, 479], "sysconfig": [67, 71, 101, 251, 290, 312, 378, 395, 421, 468, 473, 479], "venv": [67, 86, 100, 109, 112, 189, 248, 251, 351, 449, 457, 470, 472, 476, 479], "zipfil": [67, 117, 251, 321, 324, 329, 354, 396, 417, 428, 447, 448, 451, 458, 463, 464, 465, 467, 479], "cheaper": [67, 377, 476], "lazi": [67, 87, 94, 108, 133, 222, 258, 277, 338, 341, 349, 355, 382, 401, 423, 432, 463, 468, 470, 474, 476, 479], "659": [67, 479], "faq": [67, 77, 84, 85, 222, 232, 252, 287, 302, 341, 390, 425, 450, 463, 465, 473, 479], "jit": [67, 470, 475, 479], "wildcard": [67, 120, 186, 217, 228, 285, 328, 345, 384, 409, 431, 437, 439, 441, 476, 477, 479], "604": [67, 87, 341, 382, 479], "612": [67, 99, 382, 464, 479], "613": [67, 382, 479], "typealia": [67, 120, 184, 261, 382, 479], "647": [67, 382, 479], "argpars": [67, 84, 95, 100, 116, 157, 187, 197, 225, 251, 289, 306, 395, 447, 470, 479, 480], "asynchat": [67, 422, 464, 469, 470, 473, 479], "asyncor": [67, 422, 462, 464, 469, 470, 479], "smtpd": [67, 469, 470, 475, 478, 479], "base64": [67, 144, 155, 192, 193, 194, 195, 196, 199, 200, 203, 205, 232, 245, 248, 251, 282, 314, 323, 324, 332, 338, 378, 391, 393, 415, 460, 462, 478, 479], "bdb": [67, 164, 182, 251, 294, 452, 465, 477, 479], "bisect": [67, 179, 251, 448, 462, 479], "curs": [67, 89, 95, 116, 251, 458, 459, 462, 464, 479], "__slots__": [67, 86, 157, 178, 222, 223, 252, 296, 398, 460, 465, 477, 479], "distutil": [67, 69, 70, 75, 76, 109, 248, 331, 351, 451, 452, 455, 457, 459, 463, 464, 465, 469, 470, 471, 477, 479, 480], "doctest": [67, 77, 83, 110, 173, 184, 251, 358, 374, 377, 378, 384, 440, 447, 459, 461, 463, 465, 467, 471, 472, 479], "fileinput": [67, 216, 222, 251, 290, 349, 463, 469, 471, 477, 479], "glob": [67, 100, 140, 142, 184, 190, 216, 217, 251, 278, 291, 293, 294, 329, 345, 347, 447, 464, 465, 469, 470, 471, 475, 479], "hmac": [67, 170, 171, 232, 251, 266, 280, 296, 323, 334, 460, 465, 477, 479], "metadata": [67, 69, 83, 96, 107, 109, 178, 223, 227, 247, 251, 252, 277, 285, 290, 291, 308, 329, 339, 354, 382, 415, 417, 418, 424, 428, 437, 449, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480], "linecach": [67, 216, 251, 378, 479], "pprint": [67, 92, 145, 179, 187, 251, 294, 296, 338, 448, 459, 467, 471, 479], "py_compil": [67, 84, 160, 251, 261, 465, 470, 471, 473, 479], "pyclbr": [67, 251, 261, 479], "shelv": [67, 83, 181, 251, 271, 295, 296, 324, 341, 458, 461, 471, 479], "ssl": [67, 93, 107, 124, 131, 134, 220, 239, 245, 251, 257, 266, 285, 290, 302, 324, 332, 334, 382, 391, 403, 415, 422, 452, 456, 458, 461, 462, 465, 470, 478, 479], "urllib": [67, 83, 95, 110, 134, 140, 149, 163, 166, 220, 223, 238, 239, 240, 251, 253, 266, 304, 378, 385, 395, 447, 458, 461, 463, 464, 466, 477, 479], "zipimport": [67, 173, 249, 251, 277, 299, 428, 461, 463, 467, 470, 479], "652": [67, 479], "summari": [67, 83, 89, 190, 248, 289, 299, 304, 319, 347, 376, 377, 382, 403, 422, 449, 457, 459, 460, 461, 462, 471, 479, 480], "highlight": [67, 79, 91, 174, 187, 244, 384, 390, 453, 458, 465, 468, 469, 471, 479, 480], "zoneinfo": [67, 179, 180, 251, 362, 452, 479], "graphlib": [67, 179, 251, 479], "ast": [67, 181, 222, 251, 261, 348, 373, 374, 463, 468, 469, 470, 472, 476, 479], "compileal": [67, 84, 251, 261, 308, 349, 446, 452, 457, 470, 471, 475, 479], "ftplib": [67, 140, 155, 251, 253, 391, 459, 461, 464, 465, 470, 471, 473, 474, 475, 479], "http": [67, 79, 83, 99, 100, 104, 107, 131, 140, 141, 149, 155, 163, 166, 180, 191, 197, 205, 206, 237, 251, 253, 266, 282, 310, 311, 324, 330, 334, 335, 338, 358, 378, 389, 390, 391, 392, 405, 409, 411, 414, 415, 416, 420, 422, 424, 428, 447, 448, 449, 450, 451, 455, 456, 458, 460, 461, 462, 463, 464, 466, 470, 477, 479], "imaplib": [67, 103, 140, 191, 251, 253, 302, 460, 461, 462, 465, 467, 470, 475, 479], "ipaddress": [67, 95, 251, 253, 477, 479], "multiprocess": [67, 83, 99, 104, 123, 124, 161, 163, 244, 251, 266, 313, 324, 338, 358, 361, 394, 403, 465, 466, 470, 479, 480], "nntplib": [67, 140, 191, 198, 251, 347, 458, 462, 465, 467, 469, 470, 471, 479], "poplib": [67, 140, 191, 251, 253, 447, 462, 470, 472, 475, 479], "smtplib": [67, 83, 100, 140, 191, 197, 198, 205, 251, 253, 266, 338, 447, 460, 464, 470, 471, 475, 479], "notabl": [67, 98, 135, 188, 263, 280, 281, 330, 337, 396, 421, 459, 460, 461, 462, 463, 464, 465, 467, 480], "sur": [67, 479], "appl": [67, 92, 173, 187, 214, 244, 251, 266, 288, 344, 438, 447, 455, 461, 464, 465, 475, 479], "silicon": [67, 479], "mac": [67, 69, 108, 222, 232, 300, 329, 338, 372, 394, 452, 454, 466, 468, 470, 471, 473, 475, 476, 479], "parallel": [67, 83, 86, 94, 98, 100, 122, 124, 127, 132, 135, 160, 161, 166, 204, 222, 229, 232, 251, 258, 349, 380, 384, 397, 399, 409, 439, 451, 458, 465, 471, 472, 473, 474, 478, 479], "band": [67, 295, 325, 479], "cprofil": [67, 182, 463, 479], "gettext": [67, 88, 100, 243, 251, 263, 407, 431, 447, 458, 462, 469, 479], "gzip": [67, 79, 86, 100, 117, 147, 155, 197, 215, 251, 273, 329, 354, 358, 405, 422, 447, 458, 461, 465, 467, 468, 470, 473, 475, 479], "json": [67, 99, 100, 118, 149, 164, 248, 251, 255, 265, 266, 282, 295, 304, 344, 441, 447, 465, 467, 468, 471, 472, 473, 478, 479], "plistlib": [67, 214, 251, 475, 476, 478, 479], "shlex": [67, 112, 124, 135, 164, 219, 251, 294, 345, 470, 478, 479], "tarfil": [67, 112, 117, 251, 329, 447, 461, 462, 463, 464, 465, 470, 475, 476, 479], "xmlrpc": [67, 251, 253, 280, 296, 405, 422, 447, 460, 466, 473, 479], "postpon": [67, 111, 174, 247, 382, 423, 424, 469, 479], "553": [67, 479], "562": [67, 424, 479], "564": [67, 479], "nanosecond": [67, 290, 362, 401, 463, 472, 477, 478, 479], "565": [67, 210], "560": [67, 381, 424, 479], "545": 67, "binascii": [67, 98, 141, 155, 251, 282, 393, 422, 465, 469, 473, 478, 479], "crypt": [67, 171, 251, 307, 347, 422, 469, 470, 475, 479], "dbm": [67, 83, 251, 295, 296, 327, 424, 452, 465, 466, 477, 479], "server": [67, 83, 84, 91, 94, 99, 104, 107, 108, 134, 149, 164, 167, 173, 189, 191, 195, 197, 205, 220, 223, 232, 238, 239, 240, 241, 244, 245, 251, 253, 254, 256, 264, 265, 266, 280, 285, 290, 291, 293, 302, 310, 315, 324, 325, 326, 330, 332, 334, 337, 349, 352, 355, 358, 361, 365, 378, 382, 389, 391, 405, 414, 422, 447, 448, 457, 459, 460, 461, 462, 463, 464, 465, 470, 472, 473, 474, 475, 477, 478, 479, 480], "mimetyp": [67, 194, 197, 251, 269, 282, 378, 403, 460, 464, 475, 479], "msilib": [67, 251, 347, 463, 464, 469, 470, 479], "queue": [67, 83, 99, 100, 104, 121, 124, 134, 157, 161, 174, 179, 209, 229, 251, 258, 265, 266, 290, 315, 319, 322, 325, 334, 335, 341, 355, 357, 361, 365, 409, 441, 448, 458, 461, 462, 463, 464, 466, 471, 474, 477, 478, 479], "socketserv": [67, 100, 238, 242, 251, 253, 334, 416, 464, 465, 466, 479], "mock": [67, 184, 251, 378, 384, 469, 472, 473, 477, 478, 479], "uu": [67, 144, 155, 393, 422, 460, 469, 470, 479], "etre": [67, 251, 270, 405, 407, 447, 463, 465, 470, 471, 475, 477, 478, 479], "zipapp": [67, 112, 189, 251, 479], "aifc": [67, 203, 251, 333, 346, 347, 397, 458, 469, 470, 478, 479], "macpath": [67, 477, 479], "sunau": [67, 251, 347, 469, 470, 478, 479], "wave": [67, 151, 251, 274, 346, 458, 475, 478, 479], "498": [67, 86, 431, 473, 479], "526": [67, 86, 100, 120, 178, 382, 423, 432, 468, 476, 477, 479], "515": [67, 218, 342, 469, 479], "525": [67, 86, 158, 252, 349, 426, 479], "530": [67, 426, 479], "487": [67, 479], "enhanc": [67, 79, 86, 91, 94, 100, 172, 223, 242, 265, 280, 338, 345, 358, 372, 380, 382, 426, 431, 458, 459, 460, 462, 463, 466, 467, 471, 472, 473, 474, 479, 480], "519": [67, 86, 378, 479], "495": [67, 421, 479], "520": 67, "468": [67, 157, 479], "dtrace": [67, 95, 452, 479], "systemtap": [67, 95, 452, 479], "probe": [67, 473, 479], "cmath": [67, 86, 251, 272, 287, 341, 462, 464, 473, 479], "email": [67, 86, 99, 141, 144, 149, 232, 239, 240, 242, 248, 251, 265, 266, 268, 269, 282, 290, 316, 332, 338, 349, 362, 391, 422, 428, 447, 449, 460, 462, 463, 464, 465, 470, 479], "pickletool": [67, 251, 261, 296, 378, 464, 479], "rlcomplet": [67, 112, 251, 317, 331, 359, 463, 464, 479], "telnetlib": [67, 140, 251, 347, 464, 469, 470, 479], "timeit": [67, 84, 166, 182, 251, 305, 447, 451, 461, 462, 464, 479], "robotpars": [67, 251, 253, 388, 458, 466, 479], "winreg": [67, 140, 251, 400, 446, 466, 479], "winsound": [67, 76, 251, 400, 479], "grp": [67, 251, 307, 336, 345, 387, 461, 478, 479], "regen": [67, 89, 452, 479], "492": [67, 86, 158, 252, 423, 424, 426, 475, 479], "465": [67, 332, 479], "infix": 67, "448": [67, 426, 479], "461": [67, 341], "percent": [67, 83, 261, 340, 342, 373, 390, 422, 457, 464, 466, 471, 479], "484": [67, 86, 120, 341, 382, 423, 424, 432, 437, 468, 469, 470, 475, 476, 477, 479], "471": [67, 157, 479], "scandir": [67, 116, 140, 228, 290, 293, 475, 476, 477, 479], "better": [67, 71, 72, 74, 75, 83, 84, 92, 94, 98, 100, 102, 103, 104, 112, 118, 124, 136, 139, 156, 173, 187, 190, 208, 212, 223, 225, 231, 244, 258, 263, 268, 280, 289, 290, 302, 305, 325, 344, 345, 361, 362, 365, 372, 380, 382, 384, 385, 386, 393, 409, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479], "475": [67, 210, 222, 290, 325, 326, 330, 334, 362, 479], "retri": [67, 89, 103, 107, 210, 266, 290, 325, 326, 330, 334, 338, 345, 391, 425, 437, 460, 461, 465, 469, 479], "479": [67, 111, 210, 475, 476, 479], "485": [67, 152, 272, 479], "486": [67, 211, 472, 479], "awar": [67, 76, 97, 103, 105, 137, 164, 176, 179, 191, 193, 197, 199, 200, 202, 203, 206, 223, 227, 245, 263, 269, 290, 293, 337, 338, 342, 349, 362, 363, 365, 396, 409, 412, 446, 451, 452, 457, 458, 460, 461, 462, 466, 467, 470, 471, 472, 475, 476, 479], "488": [67, 247, 308, 358, 451, 479], "elimin": [67, 92, 99, 102, 183, 187, 247, 248, 258, 259, 268, 293, 297, 380, 452, 462, 472, 477, 479], "pyo": [67, 160, 247, 378, 461, 464, 465, 473, 479], "bz2": [67, 117, 155, 173, 215, 251, 267, 293, 329, 354, 358, 418, 447, 461, 465, 467, 468, 473, 478, 479], "cgi": [67, 107, 242, 251, 324, 325, 347, 391, 392, 403, 416, 458, 464, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479], "configpars": [67, 112, 214, 251, 265, 328, 458, 462, 465, 466, 467, 469, 470, 473, 476, 479], "difflib": [67, 143, 190, 213, 251, 359, 459, 460, 462, 463, 464, 465, 473, 479], "heapq": [67, 86, 179, 222, 223, 251, 313, 315, 448, 461, 462, 463, 464, 479], "imghdr": [67, 251, 333, 347, 469, 470, 479], "lzma": [67, 117, 147, 251, 329, 354, 358, 405, 418, 447, 468, 473, 479], "selector": [67, 94, 123, 124, 129, 251, 253, 257, 258, 325, 330, 335, 338, 357, 364, 391, 465, 467, 476, 479], "sndhdr": [67, 251, 347, 469, 470, 479], "bio": [67, 285, 479], "negoti": [67, 238, 338, 464, 472, 479], "wsgiref": [67, 251, 253, 469, 471, 475, 477, 479], "sax": [67, 251, 270, 405, 406, 407, 408, 447, 458, 459, 468, 477, 479], "453": [67, 207], "bootstrap": [67, 109, 140, 189, 251, 315, 331, 395, 470, 479], "pip": [67, 69, 102, 108, 112, 189, 248, 251, 258, 395, 417, 441, 455, 457, 468, 470, 479], "446": [67, 465], "ensurepip": [67, 109, 140, 189, 251, 395, 452, 468, 470, 479], "audioop": [67, 251, 347, 463, 469, 470, 478, 479], "colorsi": [67, 251, 274, 479], "filecmp": [67, 187, 216, 251, 458, 479], "html": [67, 70, 77, 78, 79, 94, 99, 103, 107, 108, 124, 134, 148, 149, 150, 155, 159, 187, 197, 202, 239, 240, 242, 244, 251, 270, 290, 310, 337, 338, 347, 365, 376, 390, 391, 392, 403, 407, 408, 409, 413, 415, 416, 420, 422, 424, 431, 448, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 474, 476, 477, 478, 479, 480], "pti": [67, 140, 251, 290, 338, 387, 470, 479], "stat": [67, 86, 106, 116, 182, 187, 213, 216, 231, 247, 251, 253, 255, 266, 285, 290, 291, 293, 302, 329, 338, 347, 354, 378, 382, 428, 452, 460, 461, 463, 464, 468, 470, 471, 474, 475, 476, 477, 479], "textwrap": [67, 118, 251, 359, 448, 461, 464, 479], "445": 67, "456": [67, 72, 100, 183], "secur": [67, 84, 100, 108, 116, 124, 161, 171, 173, 220, 239, 240, 241, 245, 251, 253, 266, 267, 269, 280, 282, 285, 290, 296, 302, 311, 323, 328, 331, 332, 334, 341, 347, 349, 354, 391, 401, 403, 405, 407, 408, 409, 410, 415, 416, 454, 458, 459, 460, 461, 463, 464, 471, 472, 474, 475, 476, 477, 478], "interchang": [67, 100, 115, 141, 151, 180, 183, 210, 232, 259, 264, 333, 341, 344, 365, 382, 386, 424, 431, 458, 464, 471, 472], "436": [67, 89, 316], "clinic": [67, 95, 475, 477, 479], "476": [67, 378, 479], "certif": [67, 124, 131, 134, 239, 245, 266, 302, 358, 391, 415, 464, 470, 476, 479], "verif": [67, 117, 265, 337, 338, 341, 390, 471, 479], "405": [67, 107, 238, 395, 480], "420": [67, 86, 247, 428, 479, 480], "3118": [67, 341, 466, 477, 479, 480], "flexibl": [67, 72, 83, 88, 89, 92, 97, 99, 100, 103, 110, 131, 149, 166, 173, 187, 190, 193, 202, 205, 227, 264, 265, 280, 289, 292, 296, 337, 341, 345, 354, 362, 382, 385, 396, 407, 409, 424, 458, 459, 461, 463, 465, 466, 471, 474, 478, 480], "397": [67, 329, 457, 474, 479, 480], "rework": [67, 210, 285, 459, 460, 461, 463, 465, 471, 475, 479, 480], "380": [67, 426, 480], "subgener": [67, 426, 480], "409": [67, 107, 238, 480], "414": [67, 107, 183, 238, 378, 431, 461, 479, 480], "3155": [67, 86, 480], "412": [67, 107, 223, 238, 480], "362": [67, 86, 96, 252, 480], "421": [67, 238, 349, 479, 480], "simplenamespac": [67, 157, 179, 304, 381, 395, 478, 479], "finer": [67, 73, 99, 124, 264, 290, 470, 476, 477, 479, 480], "grain": [67, 83, 99, 100, 174, 190, 208, 264, 290, 315, 349, 391, 424, 470, 479, 480], "framework": [67, 83, 100, 121, 124, 131, 153, 164, 167, 173, 182, 184, 190, 219, 244, 251, 253, 331, 332, 338, 341, 349, 382, 384, 385, 391, 403, 416, 424, 439, 452, 455, 460, 461, 464, 465, 466, 471, 473, 474, 476, 477, 478, 479, 480], "sched": [67, 161, 251, 464, 479], "webbrows": [67, 140, 197, 251, 253, 458, 463, 469, 470, 479], "elementtre": [67, 251, 270, 405, 407, 447, 470, 473, 475, 477, 478, 479], "384": [67, 180, 463, 468, 478, 479, 480], "389": [67, 480], "391": [67, 480], "3148": [67, 163, 480], "repositori": [67, 247, 421, 456, 458, 459, 463, 465, 479, 480], "3149": [67, 349, 479, 480], "3333": [67, 403, 480], "web": [67, 83, 84, 94, 102, 104, 106, 107, 108, 149, 223, 232, 241, 242, 244, 251, 253, 254, 266, 269, 310, 337, 338, 390, 391, 403, 406, 416, 422, 428, 457, 458, 459, 460, 461, 462, 463, 464, 465, 473, 479, 480], "gateway": [67, 107, 149, 253, 463, 480], "v1": [67, 334, 344, 479, 480], "ftp": [67, 79, 107, 251, 253, 266, 283, 390, 391, 456, 458, 459, 464, 465, 472, 478, 479], "popen": [67, 100, 116, 124, 131, 135, 140, 149, 161, 205, 245, 290, 298, 303, 325, 334, 356, 358, 395, 424, 462, 464, 472, 473, 475, 476, 477, 479], "nntp": [67, 191, 251, 347, 390, 462, 472, 478, 479], "mailbox": [67, 84, 191, 198, 245, 251, 282, 302, 463, 465, 475, 478, 479], "turtledemo": [67, 219, 244, 479], "372": [67, 480], "378": [67, 342, 378, 480], "thousand": [67, 106, 232, 263, 304, 305, 316, 342, 405, 437, 475, 476, 479, 480], "stumbl": [67, 480], "vs": [67, 184, 305, 359, 363, 423, 479], "overview": [67, 73, 97, 106, 253, 256, 277, 285, 289, 304, 305, 312, 382, 405, 457, 458, 459, 460, 461, 463, 464, 465, 471, 474, 476, 480], "3101": [67, 342, 480], "miscellan": [67, 116, 117, 153, 161, 188, 191, 214, 282, 364, 403, 454, 479, 480], "3106": [67, 480], "3137": [67, 480], "ttk": [67, 251, 364, 365, 371, 467, 475, 476, 477, 479], "theme": [67, 244, 251, 364, 365, 461, 464, 467, 475, 476, 479], "widget": [67, 80, 91, 92, 100, 108, 116, 166, 178, 186, 244, 251, 289, 364, 367, 380, 384, 458, 461, 462, 467, 471, 475, 479], "tk": [67, 108, 244, 251, 367, 368, 380, 435, 455, 457, 458, 459, 464, 467, 468, 469, 471, 472, 474, 475, 476, 478, 479], "freebsd": [67, 91, 113, 131, 209, 212, 275, 290, 292, 306, 319, 325, 334, 349, 358, 361, 362, 454, 463, 469, 473, 476, 478, 479], "mainten": [67, 207, 431, 457, 470, 471, 472, 473, 476, 477, 478, 479, 480], "434": [67, 244], "branch": [67, 152, 188, 267, 316, 358, 371, 376, 458, 463, 464, 478, 479], "466": 67, "network": [67, 99, 104, 106, 107, 108, 131, 134, 139, 143, 181, 209, 244, 246, 251, 253, 254, 266, 280, 285, 290, 296, 319, 325, 332, 338, 344, 354, 358, 390, 391, 394, 401, 405, 410, 416, 428, 459, 460, 461, 464, 472, 474, 476, 477, 479], "477": [67, 470, 479], "backport": [67, 102, 183, 244, 248, 249, 354, 382, 385, 418, 464, 474, 475, 476, 477, 478, 479], "493": [67, 96], "migrat": [67, 90, 248, 249, 252, 382, 396, 406, 432, 463, 464, 467, 470, 472, 473, 479], "roundup": 67, "343": [67, 86, 111, 166, 423, 424, 442, 445, 466, 480], "366": [67, 93, 96, 180, 247, 321, 362, 428, 466, 472, 480], "370": [67, 331, 451, 466, 479, 480], "371": [67, 466, 480], "3105": [67, 111, 466, 480], "3110": [67, 466, 480], "3112": [67, 111, 466, 480], "3116": [67, 86, 466, 467, 480], "3127": [67, 466, 480], "3129": [67, 423, 466, 480], "3141": [67, 114, 286, 466, 480], "future_builtin": [67, 110], "javascript": [67, 164, 237, 241, 254, 259, 296, 437, 442, 468, 479], "notat": [67, 77, 86, 89, 94, 97, 100, 103, 106, 164, 183, 222, 256, 259, 270, 275, 290, 296, 311, 334, 341, 342, 345, 359, 365, 385, 406, 409, 411, 423, 424, 426, 427, 429, 431, 436, 442, 451, 461, 462, 463, 466, 471, 477, 478, 479], "irix": [67, 466, 479], "308": [67, 223, 238, 426, 479, 480], "309": [67, 480], "314": [67, 84, 480], "328": [67, 111, 222, 247, 428, 466, 472, 480], "338": [67, 321, 428, 451, 480], "341": [67, 100, 480], "unifi": [67, 120, 155, 187, 190, 296, 383, 473, 479, 480], "342": [67, 94, 158, 363, 426, 480], "352": [67, 464, 466, 469, 479, 480], "357": [67, 480], "218": [67, 223, 480], "237": [67, 341, 466, 480], "289": [67, 94, 223, 305, 480], "292": [67, 100, 264, 342, 480], "318": [67, 423, 480], "322": [67, 480], "324": [67, 84, 345, 480], "327": [67, 469, 480], "whi": [67, 72, 74, 89, 91, 92, 93, 94, 97, 99, 102, 106, 108, 112, 149, 164, 173, 190, 198, 232, 250, 258, 268, 272, 280, 289, 296, 342, 384, 385, 386, 403, 424, 457, 460, 463, 465, 476, 479], "331": [67, 480], "cookielib": [67, 465, 466], "datatyp": [67, 74, 84, 173, 183, 214, 259, 296, 462, 464, 465, 467, 471, 480], "263": [67, 106, 247, 374, 463, 479, 480], "273": [67, 155, 267, 281, 419, 480], "zip": [67, 84, 86, 94, 100, 108, 110, 112, 117, 144, 155, 157, 163, 189, 222, 247, 248, 249, 250, 251, 258, 272, 277, 324, 329, 337, 341, 342, 350, 354, 358, 405, 428, 436, 438, 446, 448, 449, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 479, 480], "archiv": [67, 83, 100, 102, 108, 112, 117, 189, 216, 248, 251, 268, 277, 339, 350, 358, 395, 422, 447, 458, 459, 463, 464, 465, 467, 470, 471, 473, 476, 477, 479, 480], "277": [67, 480], "nt": [67, 99, 107, 157, 266, 290, 300, 311, 349, 351, 395, 407, 409, 458, 471, 477, 479, 480], "278": [67, 86, 480], "univers": [67, 86, 93, 172, 180, 222, 232, 245, 247, 255, 341, 354, 362, 384, 390, 394, 418, 452, 455, 462, 463, 464, 469, 473, 475, 476, 478, 479, 480], "279": [67, 223, 480], "282": [67, 264, 329, 480], "285": [67, 86, 436, 480], "293": [67, 378, 480], "301": [67, 100, 107, 238, 391, 479, 480], "302": [67, 86, 107, 222, 238, 239, 242, 247, 262, 299, 321, 349, 391, 419, 428, 463, 464, 467, 472, 479, 480], "305": [67, 107, 172, 238, 480], "307": [67, 107, 238, 296, 391, 480], "optpars": [67, 88, 116, 251, 347, 462, 463, 465, 471, 475, 479], "252": [67, 97, 424, 479, 480], "253": [67, 97, 480], "diamond": [67, 93, 174, 222, 424], "234": [67, 183, 342, 448, 467, 474, 480], "227": [67, 111, 480], "236": [67, 432, 480], "207": [67, 238, 305, 480], "230": [67, 220, 471, 475, 480], "229": [67, 480], "205": [67, 107, 238, 242, 285, 398, 479, 480], "232": [67, 480], "235": [67, 247, 479, 480], "217": [67, 378, 480], "208": [67, 238, 480], "241": [67, 480], "sax2": [67, 251, 270, 405, 407, 411], "dom": [67, 251, 254, 270, 405, 411, 447, 459, 461, 463, 469, 477, 479], "relationship": [67, 92, 101, 131, 158, 180, 190, 295, 340, 341, 349, 365, 376, 398, 406, 422, 424, 463, 479], "pyxml": [67, 459], "changelog": [67, 304, 465, 468, 472, 473, 474, 475, 476, 477, 478, 480], "candid": [67, 79, 92, 111, 202, 227, 349, 424, 463, 464, 465, 473, 480], "lambda": [67, 86, 100, 105, 120, 124, 131, 142, 145, 157, 164, 178, 187, 223, 232, 252, 258, 261, 280, 296, 315, 337, 341, 354, 360, 363, 381, 384, 385, 386, 395, 416, 423, 424, 427, 429, 431, 438, 441, 458, 459, 460, 462, 463, 464, 466, 473, 474, 478, 479], "templat": [67, 72, 84, 89, 99, 112, 157, 198, 264, 316, 341, 347, 359, 363, 364, 369, 380, 441, 442, 460, 462, 464, 465, 469, 471, 472, 475, 476, 479], "histori": [67, 79, 100, 106, 138, 153, 180, 244, 268, 294, 331, 359, 361, 420, 441, 451, 473, 474, 475, 479], "openbsd": [67, 113, 220, 275, 290, 334, 361, 362, 454, 474, 476, 479], "openssl": [67, 232, 234, 338, 358, 452, 454, 458, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479], "webassembl": [67, 121, 149, 160, 163, 170, 207, 212, 220, 226, 230, 239, 242, 245, 275, 280, 284, 285, 290, 302, 307, 319, 325, 326, 330, 332, 334, 335, 336, 338, 345, 349, 352, 355, 361, 391, 395, 399, 415, 416, 421, 454, 469, 479], "linker": [67, 71, 76, 173, 454, 469, 479], "cross": [67, 71, 75, 100, 108, 139, 180, 209, 241, 244, 290, 296, 334, 347, 354, 406, 421, 422, 431, 454, 458, 459, 460, 461, 464, 465, 467, 471, 472, 473, 474, 475, 477, 479], "max_path": [67, 454, 475, 479], "nuget": [67, 454, 476, 479], "embedd": [67, 241, 280, 454, 477, 479], "bundl": [67, 84, 166, 198, 204, 207, 245, 302, 338, 364, 365, 417, 452, 454, 461, 465, 470, 471, 473, 474, 476, 479], "excursus": [67, 444, 454], "shebang": [67, 164, 395, 417, 444, 454, 456, 472, 475, 479], "ini": [67, 214, 328, 454, 471, 479], "dri": [67, 281, 289, 454], "pywin32": [67, 84, 454, 479], "cx_freez": [67, 84, 280, 454], "macpython": [67, 454, 460], "gui": [67, 82, 84, 94, 106, 244, 289, 337, 339, 347, 349, 364, 365, 384, 435, 454, 464, 472, 479], "ide": [67, 79, 84, 86, 353, 382, 432, 447, 454, 457, 458, 460], "lexic": [67, 219, 237, 251, 252, 293, 353, 374, 411, 424, 426, 429, 430, 476, 479], "blank": [67, 83, 84, 89, 94, 118, 149, 153, 164, 172, 174, 183, 187, 190, 193, 202, 204, 205, 239, 242, 244, 265, 294, 297, 331, 338, 341, 350, 380, 390, 403, 409, 432, 462, 474, 476, 479], "indent": [67, 89, 96, 103, 110, 118, 120, 164, 166, 179, 184, 190, 201, 210, 252, 259, 261, 270, 297, 304, 318, 359, 360, 363, 364, 371, 373, 374, 385, 386, 407, 409, 423, 427, 443, 458, 468, 470, 471, 472, 473, 478, 479], "soft": [67, 174, 244, 260, 319, 354, 358, 423, 427, 432, 468, 479], "imaginari": [67, 152, 180, 341, 342, 349, 380, 423, 424, 426, 464, 465, 471], "codeobject": [67, 424, 469, 479], "co_posit": [67, 424, 469], "__bytes__": [67, 191, 193, 198, 202, 282, 341, 382, 424, 469, 473, 474, 479], "__format__": [67, 79, 179, 180, 208, 218, 222, 253, 256, 287, 342, 385, 424, 431, 464, 465, 469, 472, 473, 476, 479], "__dir__": [67, 79, 93, 179, 184, 208, 222, 252, 385, 424, 464, 473, 476, 479], "__mro_entries__": [67, 381, 424, 476, 479], "bodi": [67, 83, 84, 89, 107, 110, 120, 133, 134, 137, 141, 166, 180, 186, 188, 192, 193, 194, 196, 197, 198, 202, 204, 205, 222, 237, 239, 242, 245, 252, 268, 269, 285, 330, 332, 337, 341, 347, 358, 363, 364, 382, 384, 385, 386, 389, 391, 398, 403, 409, 423, 425, 426, 427, 432, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 479], "versus": [67, 180, 190, 250, 264, 426, 471, 477, 479], "__missing__": [67, 157, 179, 341, 385, 423, 424, 463, 471, 479], "__reversed__": [67, 79, 86, 157, 158, 179, 208, 222, 385, 424, 475], "__rtruediv__": [67, 424], "__rfloordiv__": [67, 424, 468, 479], "__round__": [67, 218, 222, 287, 382, 385, 424, 466, 479], "__trunc__": [67, 222, 272, 385, 424, 469, 479], "__floor__": [67, 218, 272, 287, 385, 424, 479], "__ceil__": [67, 218, 272, 287, 385, 424, 479], "__enter__": [67, 86, 100, 188, 255, 280, 312, 330, 341, 354, 382, 384, 385, 400, 401, 423, 424, 463, 464, 465, 469, 472, 475, 479], "__exit__": [67, 86, 100, 166, 188, 255, 280, 330, 341, 354, 358, 384, 385, 400, 401, 423, 424, 463, 464, 465, 475, 479], "__match_args__": [67, 178, 423, 424, 437, 468, 479], "__buffer__": [67, 158, 252, 424, 470, 479], "__release_buffer__": [67, 424, 479], "__aenter__": [67, 86, 166, 188, 384, 385, 386, 423, 424, 479], "__aexit__": [67, 86, 137, 166, 188, 384, 385, 386, 423, 424, 479], "arithmet": [67, 180, 210, 218, 222, 251, 253, 272, 287, 316, 341, 349, 415, 421, 423, 424, 427, 429, 447, 461, 462, 463, 471, 472, 474, 477, 479], "agen": [67, 252, 426], "asend": [67, 158, 426, 478, 479], "athrow": [67, 158, 426, 470, 478, 479], "aclos": [67, 124, 158, 166, 312, 426, 468, 478, 479], "power": [67, 84, 88, 92, 93, 101, 139, 164, 170, 173, 183, 208, 222, 232, 258, 287, 289, 290, 294, 296, 316, 334, 341, 354, 380, 385, 386, 409, 422, 423, 427, 429, 445, 461, 462, 464, 465, 466, 471, 472, 477, 479], "membership": [67, 91, 93, 97, 149, 175, 208, 230, 290, 341, 385, 424, 438, 462, 471, 479], "nonloc": [67, 84, 86, 120, 157, 222, 252, 261, 348, 423, 425, 427, 429, 431, 436, 437, 466, 475, 479], "irrefut": 67, "anext": [67, 222, 251, 468, 479], "chr": [67, 84, 106, 222, 237, 251, 311, 383, 424, 446, 463, 465], "oct": [67, 84, 94, 100, 108, 180, 208, 220, 222, 251, 338, 341, 342, 349, 363, 424, 446, 460, 464, 466, 479], "ord": [67, 91, 106, 118, 120, 173, 175, 222, 251, 337, 341, 385, 424, 426, 446, 458, 464], "setattr": [67, 84, 86, 92, 118, 178, 222, 247, 251, 289, 398, 436, 446, 458, 479], "super": [67, 84, 86, 100, 103, 108, 114, 118, 130, 157, 166, 178, 188, 200, 210, 222, 247, 251, 261, 280, 293, 296, 309, 319, 365, 378, 380, 386, 391, 395, 398, 424, 436, 446, 460, 464, 466, 468, 470, 473, 475, 479], "credit": [67, 85, 108, 121, 165, 171, 244, 258, 349, 423, 444, 446, 477, 479], "licens": [67, 85, 108, 121, 165, 244, 248, 268, 304, 349, 422, 444, 446, 449, 460, 477, 479], "bit_length": [67, 272, 315, 341, 465, 467], "bit_count": [67, 341, 468, 479], "as_integer_ratio": [67, 183, 218, 287, 341, 440, 464, 475, 477, 479], "is_integ": [67, 218, 287, 341, 479], "fromhex": [67, 144, 341, 440, 464, 469, 475, 476, 479], "capit": [67, 103, 106, 108, 183, 316, 341, 342, 382, 383, 423, 426, 458, 476, 478, 479], "casefold": [67, 106, 118, 141, 157, 341, 472, 474, 477, 479], "center": [67, 148, 153, 174, 183, 244, 245, 252, 341, 342, 365, 372, 380, 422, 424, 442, 462, 464, 472, 479], "endswith": [67, 296, 341, 395, 458, 461, 463, 464, 474, 479], "expandtab": [67, 341, 360], "format_map": [67, 157, 341, 471, 474, 479], "isalnum": [67, 84, 116, 175, 316, 341], "isalpha": [67, 116, 175, 341], "isascii": [67, 116, 175, 341, 476, 479], "isdecim": [67, 102, 341, 342], "isdigit": [67, 116, 175, 323, 341], "isidentifi": [67, 341, 479], "islow": [67, 116, 175, 323, 341], "isnumer": [67, 102, 341], "isprint": [67, 116, 157, 175, 341, 474, 479], "isspac": [67, 116, 175, 341], "istitl": [67, 341], "isupp": [67, 92, 116, 175, 258, 323, 341, 384], "ljust": [67, 334, 341, 442, 462, 472], "lstrip": [67, 341, 461, 479], "maketran": [67, 157, 341, 467, 471, 474, 479], "partit": [67, 258, 329, 334, 341, 463, 474, 477, 479], "removeprefix": [67, 341, 478, 479], "removesuffix": [67, 341, 478, 479], "rfind": [67, 100, 275, 341, 464, 471, 472, 474, 479], "rindex": [67, 341, 465, 471, 472], "rjust": [67, 341, 442, 462, 472], "rpartit": [67, 247, 341, 463, 465, 471, 479], "rsplit": [67, 341, 462, 465, 471, 479], "rstrip": [67, 84, 131, 134, 135, 185, 244, 281, 341, 447, 461, 479], "splitlin": [67, 86, 153, 187, 197, 205, 341, 360, 377, 464, 471, 473, 479], "startswith": [67, 237, 290, 341, 349, 384, 395, 418, 447, 458, 461, 463, 464, 467, 472, 474, 477, 479], "swapcas": [67, 341, 479], "zfill": [67, 341, 442, 461], "tobyt": [67, 119, 179, 341, 465, 471, 478, 479], "tolist": [67, 119, 179, 341, 460, 465, 471], "toreadon": [67, 341, 479], "nbyte": [67, 124, 131, 140, 279, 281, 311, 323, 334, 341], "c_contigu": [67, 252, 312, 341], "f_contigu": [67, 252, 312, 341], "isdisjoint": [67, 158, 341, 479], "issubset": [67, 341, 461], "issuperset": [67, 341, 461, 479], "intersect": [67, 157, 341, 380, 424, 461, 462, 464, 465, 479], "symmetric_differ": [67, 341, 461], "intersection_upd": [67, 341, 461, 464], "difference_upd": [67, 341, 464, 478, 479], "symmetric_difference_upd": [67, 341, 461], "fromkey": [67, 92, 157, 179, 258, 341, 381, 461, 469, 471, 479], "popitem": [67, 157, 158, 164, 179, 258, 268, 282, 285, 341, 424, 459, 461, 465, 479], "contextmanag": [67, 166, 184, 312, 341, 382, 463, 464, 471, 475, 479], "__unpacked__": [67, 341, 479], "__type_params__": [67, 184, 188, 341, 382, 423, 424, 425, 479], "with_traceback": [67, 110, 210, 432, 479], "add_not": [67, 210, 439, 469, 479], "__notes__": [67, 210, 312, 377, 479], "winerror": [67, 116, 173, 210, 479], "end_lineno": [67, 120, 188, 210, 261, 312, 377, 427, 468, 477, 479], "end_offset": [67, 210, 312, 377, 468, 479], "environmenterror": [67, 210, 446, 472], "ioerror": [67, 151, 187, 210, 212, 215, 222, 227, 240, 252, 255, 279, 280, 292, 329, 330, 389, 419, 446, 464, 465, 466, 472], "characters_written": [67, 210, 479], "baseexceptiongroup": [67, 137, 210, 377, 423, 469, 479], "subgroup": [67, 103, 188, 210, 316, 471, 477, 479], "ascii_lett": [67, 241, 323, 342, 359, 460, 466], "ascii_lowercas": [67, 316, 342, 359, 460], "ascii_uppercas": [67, 342, 359, 460], "hexdigit": [67, 175, 278, 342, 359, 431], "octdigit": [67, 342, 359, 431], "punctuat": [67, 103, 106, 328, 342, 359, 431, 475], "vformat": [67, 342, 359], "get_field": [67, 342, 359], "get_valu": [67, 342, 359], "check_unused_arg": [67, 342, 359], "format_field": [67, 342, 359], "convert_field": [67, 342, 359], "mini": [67, 164, 218, 222, 341, 359, 424, 431, 442, 465, 467, 469], "safe_substitut": [67, 342, 359, 448, 462], "is_valid": [67, 342, 359, 469, 479], "get_identifi": [67, 261, 342, 348, 359, 469, 479], "capword": [67, 341, 342, 359, 479], "regexflag": [67, 208, 316, 359, 469, 476, 479], "ignorecas": [67, 103, 316, 342, 359, 479], "multilin": [67, 103, 155, 164, 244, 316, 332, 359, 384, 470, 471, 478, 479], "noflag": [67, 316, 359, 479], "dotal": [67, 103, 316, 359], "fullmatch": [67, 316, 359, 473, 479], "findal": [67, 103, 157, 270, 316, 359, 409, 447, 473, 479], "findit": [67, 103, 276, 316, 359, 460, 479], "subn": [67, 103, 316, 359, 465, 467, 470, 474, 479], "purg": [67, 316, 359], "colno": [67, 259, 282, 316, 359, 474], "groupindex": [67, 316, 359, 479], "groupdict": [67, 103, 316, 359, 479], "span": [67, 98, 103, 120, 148, 164, 172, 190, 217, 237, 275, 316, 341, 342, 359, 423, 463, 464, 470, 472, 474, 475, 479], "endpo": [67, 316, 359], "lastindex": [67, 316, 359], "lastgroup": [67, 316, 359], "scanf": [67, 359], "phonebook": [67, 359], "mung": [67, 359], "adverb": [67, 359], "htmldiff": [67, 187, 359, 462, 474, 479], "make_fil": [67, 187, 359, 474, 479], "make_t": [67, 187, 359], "context_diff": [67, 187, 359], "get_close_match": [67, 187, 359], "ndiff": [67, 190, 359, 459, 460], "unified_diff": [67, 187, 359], "diff_byt": [67, 187, 359, 474, 479], "is_line_junk": [67, 187, 359], "is_character_junk": [67, 187, 359], "sequencematch": [67, 359, 459, 463, 464, 473, 479], "set_seq": [67, 187, 359], "set_seq1": [67, 187, 359], "set_seq2": [67, 187, 359], "find_longest_match": [67, 187, 359, 479], "get_matching_block": [67, 187, 359, 463, 479], "get_opcod": [67, 187, 359], "get_grouped_opcod": [67, 187, 359], "ratio": [67, 147, 187, 218, 272, 340, 341, 359, 380, 472, 479], "quick_ratio": [67, 187, 359], "real_quick_ratio": [67, 187, 359], "shorten": [67, 181, 318, 359, 360, 471, 472, 473, 478, 479], "dedent": [67, 118, 244, 261, 359, 360, 373, 374, 423, 427, 431, 479], "textwrapp": [67, 359, 360, 461, 473, 479], "expand_tab": [67, 359, 360], "tabsiz": [67, 187, 341, 359, 360, 479], "replace_whitespac": [67, 359, 360], "drop_whitespac": [67, 359, 360, 464], "initial_ind": [67, 359, 360], "subsequent_ind": [67, 359, 360], "fix_sentence_end": [67, 359, 360], "break_long_word": [67, 359, 360, 479], "break_on_hyphen": [67, 359, 360, 479], "max_lin": [67, 359, 360, 473], "placehold": [67, 92, 100, 108, 188, 227, 233, 264, 266, 295, 318, 342, 354, 359, 360, 390, 395, 401, 432, 448, 463, 469, 470, 471, 473, 476, 479], "bidirect": [67, 106, 124, 131, 280, 341, 343, 359, 383, 458, 479], "east_asian_width": [67, 359, 383, 479], "decomposit": [67, 100, 359, 383, 479], "is_norm": [67, 183, 287, 359, 383, 477, 479], "unidata_vers": [67, 359, 383], "ucd_3_2_0": [67, 359, 383, 463], "stringprep": [67, 155, 251, 359, 461], "internet": [67, 97, 102, 107, 141, 191, 207, 232, 237, 240, 244, 251, 269, 332, 334, 335, 338, 358, 359, 362, 390, 391, 422, 437, 457, 458, 459, 461, 468, 471, 473, 479], "in_table_a1": [67, 343, 359], "in_table_b1": [67, 343, 359], "map_table_b2": [67, 343, 359], "map_table_b3": [67, 343, 359], "in_table_c11": [67, 343, 359], "in_table_c12": [67, 343, 359], "in_table_c11_c12": [67, 343, 359], "in_table_c21": [67, 343, 359], "in_table_c22": [67, 343, 359], "in_table_c21_c22": [67, 343, 359], "in_table_c3": [67, 343, 359], "in_table_c4": [67, 343, 359], "in_table_c5": [67, 343, 359], "in_table_c6": [67, 343, 359], "in_table_c7": [67, 343, 359], "in_table_c8": [67, 343, 359], "in_table_c9": [67, 343, 359], "in_table_d1": [67, 343, 359], "in_table_d2": [67, 343, 359], "gnu": [67, 71, 96, 225, 231, 243, 251, 263, 289, 290, 295, 327, 329, 354, 359, 422, 424, 431, 434, 443, 444, 451, 452, 456, 458, 461, 462, 464, 465, 470, 474, 476, 477, 479], "parse_and_bind": [67, 317, 320, 359, 479], "read_init_fil": [67, 317, 320, 359, 479], "get_line_buff": [67, 317, 320, 359], "insert_text": [67, 317, 320, 359], "redisplay": [67, 174, 317, 359, 461], "read_history_fil": [67, 317, 359], "write_history_fil": [67, 317, 359], "append_history_fil": [67, 317, 359, 474, 479], "get_history_length": [67, 317, 359, 479], "set_history_length": [67, 317, 359], "clear_histori": [67, 317, 359], "get_current_history_length": [67, 317, 359, 461], "get_history_item": [67, 317, 359, 461], "remove_history_item": [67, 317, 359], "replace_history_item": [67, 317, 359], "add_histori": [67, 317, 359], "set_auto_histori": [67, 317, 359, 475, 479], "set_startup_hook": [67, 317, 359], "set_pre_input_hook": [67, 317, 359], "set_complet": [67, 317, 320, 359], "get_complet": [67, 317, 359], "get_completion_typ": [67, 317, 359], "get_begidx": [67, 317, 359, 479], "get_endidx": [67, 317, 359, 479], "set_completer_delim": [67, 317, 359, 479], "get_completer_delim": [67, 317, 359], "set_completion_display_matches_hook": [67, 317, 359], "servic": [67, 100, 107, 120, 222, 243, 251, 252, 259, 264, 266, 279, 280, 281, 290, 300, 318, 325, 332, 334, 335, 338, 341, 354, 359, 362, 405, 415, 422, 424, 451, 457, 458, 462, 465, 468, 469, 472, 479], "pack_into": [67, 143, 222, 344, 463, 479], "unpack_from": [67, 143, 222, 344, 463, 479], "iter_unpack": [67, 143, 344, 473], "codecinfo": [67, 143, 155, 463], "getencod": [67, 86, 91, 106, 143, 155, 172, 174, 222, 243, 255, 263, 270, 412, 457, 469, 479], "getdecod": [67, 106, 143, 155], "getincrementalencod": [67, 143, 155, 472], "getincrementaldecod": [67, 143, 155], "getread": [67, 106, 143, 155], "getwrit": [67, 106, 143, 155], "unregist": [67, 124, 126, 138, 143, 155, 182, 211, 290, 312, 325, 326, 329, 365, 398, 468, 478, 479], "encodedfil": [67, 143, 155], "iterencod": [67, 143, 155, 259, 282], "iterdecod": [67, 143, 155], "bom_b": [67, 143, 155], "bom_l": [67, 143, 155], "bom_utf8": [67, 143, 155], "bom_utf16": [67, 143, 155], "bom_utf16_b": [67, 143, 155], "bom_utf16_l": [67, 143, 155], "bom_utf32": [67, 143, 155], "bom_utf32_b": [67, 143, 155], "bom_utf32_l": [67, 143, 155], "register_error": [67, 143, 155, 222, 255, 341, 461], "lookup_error": [67, 143, 155, 461], "strict_error": [67, 143, 155], "ignore_error": [67, 143, 155, 329], "replace_error": [67, 143, 155], "backslashreplace_error": [67, 143, 155], "xmlcharrefreplace_error": [67, 143, 155], "namereplace_error": [67, 143, 155], "stateless": [67, 139, 143, 145], "getstat": [67, 143, 155, 287, 315], "setstat": [67, 143, 155, 287, 315, 479], "writelin": [67, 116, 128, 131, 134, 143, 155, 187, 255, 458, 479], "streamreaderwrit": [67, 143], "streamrecod": [67, 106, 143, 479], "idna": [67, 143, 200, 383, 390, 461, 479], "internation": [67, 88, 106, 143, 191, 243, 251, 279, 282, 332, 338, 342, 343, 362, 431, 458, 461, 462, 474, 476, 479], "nameprep": [67, 143, 155, 343], "toascii": [67, 143, 155], "tounicod": [67, 84, 119, 143, 155, 179], "codepag": [67, 118, 143, 349, 470, 479], "utf_8_sig": [67, 143], "minyear": [67, 179, 180], "maxyear": [67, 179, 180, 479], "total_second": [67, 179, 180, 465], "fromordin": [67, 179, 180, 476], "fromisoformat": [67, 179, 180, 337, 469, 476, 479], "fromisocalendar": [67, 179, 180, 477, 479], "timetupl": [67, 179, 180], "toordin": [67, 179, 180], "weekday": [67, 93, 148, 179, 180, 208, 266, 362, 477, 479], "isoweekday": [67, 93, 179, 180, 208], "isocalendar": [67, 179, 180, 477, 478, 479], "isoformat": [67, 100, 179, 180, 187, 337, 421, 461, 475, 476, 479], "ctime": [67, 71, 116, 179, 180, 290, 291, 339, 362, 461], "strftime": [67, 99, 100, 116, 137, 179, 263, 264, 266, 268, 362, 415, 447, 448, 461, 463, 464, 471, 472, 475, 479], "utcnow": [67, 179, 180, 470, 479], "utcfromtimestamp": [67, 179, 180, 338, 470, 479], "strptime": [67, 116, 179, 264, 338, 362, 415, 460, 461, 463, 471, 479], "microsecond": [67, 96, 179, 180, 319, 337, 362, 464, 479], "timetz": [67, 179, 180], "astimezon": [67, 179, 180, 187, 421, 472, 475, 477, 479], "utcoffset": [67, 179, 180, 479], "utctimetupl": [67, 179, 180, 479], "timestamp": [67, 96, 100, 124, 148, 157, 160, 179, 180, 200, 206, 231, 242, 261, 290, 308, 332, 337, 338, 354, 362, 376, 394, 418, 428, 451, 461, 465, 472, 474, 476, 479], "fromutc": [67, 179, 180, 479], "technic": [67, 94, 110, 164, 179, 188, 210, 249, 259, 289, 316, 341, 396, 423, 428, 457, 458, 465, 476, 479], "iana": [67, 179, 180, 238, 251, 256, 273, 311, 338, 407, 409, 478, 479], "from_fil": [67, 117, 179, 409, 418, 421, 475, 479], "no_cach": [67, 179, 421], "clear_cach": [67, 179, 213, 216, 421, 473], "available_timezon": [67, 179, 421, 479], "reset_tzpath": [67, 179, 421], "tzpath": [67, 179, 421, 452, 479], "zoneinfonotfounderror": [67, 179, 421], "invalidtzpathwarn": [67, 179, 421], "monday": [67, 93, 148, 179, 180, 208, 263, 266, 362, 479], "tuesday": [67, 93, 148, 179, 180, 208, 266, 447], "wednesday": [67, 93, 148, 179, 180, 208], "thursday": [67, 93, 148, 179, 180, 208], "friday": [67, 93, 148, 179, 208], "saturday": [67, 93, 148, 179, 180, 208], "sunday": [67, 93, 148, 179, 180, 208, 263, 266, 362, 465, 479], "januari": [67, 148, 151, 179, 180, 315, 362, 422, 431, 459, 470, 479], "februari": [67, 148, 179, 180, 362, 431, 459, 470, 471, 479], "march": [67, 148, 179, 180, 341, 362, 380, 447, 458, 462, 473], "april": [67, 148, 179, 180, 431, 444, 458, 459], "june": [67, 94, 148, 179, 404, 467, 476], "juli": [67, 94, 148, 179, 187, 422, 431, 460, 461, 465, 479], "august": [67, 148, 179, 463], "septemb": [67, 148, 179, 431, 458, 463, 472, 474], "octob": [67, 148, 179, 180, 458, 460, 461, 464, 477, 478], "novemb": [67, 77, 148, 179, 180, 431, 479], "decemb": [67, 148, 179, 180, 431, 447, 460, 461, 466, 475], "iterweekday": [67, 148, 179], "itermonthd": [67, 148, 179, 476, 479], "itermonthday": [67, 148, 179, 479], "itermonthdays2": [67, 148, 179, 479], "itermonthdays3": [67, 148, 179, 476, 479], "itermonthdays4": [67, 148, 179, 476, 479], "monthdatescalendar": [67, 148, 179], "monthdays2calendar": [67, 148, 179], "monthdayscalendar": [67, 148, 179], "yeardatescalendar": [67, 148, 179], "yeardays2calendar": [67, 148, 179], "yeardayscalendar": [67, 148, 179], "textcalendar": [67, 148, 179, 479], "formatmonth": [67, 148, 179], "prmonth": [67, 148, 179, 479], "formatyear": [67, 148, 179], "pryear": [67, 148, 179, 479], "htmlcalendar": [67, 148, 179, 476], "formatyearpag": [67, 148, 179], "cssclass": [67, 148, 179], "cssclass_noday": [67, 148, 179], "cssclasses_weekday_head": [67, 148, 179], "cssclass_month_head": [67, 148, 179], "cssclass_month": [67, 148, 179], "cssclass_year": [67, 148, 179], "cssclass_year_head": [67, 148, 179], "localetextcalendar": [67, 148, 179, 469, 479], "localehtmlcalendar": [67, 148, 179, 469, 479], "setfirstweekday": [67, 148, 179], "firstweekday": [67, 148, 179], "isleap": [67, 148, 179], "leapday": [67, 148, 179], "weekhead": [67, 148, 179], "monthrang": [67, 148, 179], "monthcalendar": [67, 148, 179], "prcal": [67, 148, 179], "timegm": [67, 148, 179, 362], "day_nam": [67, 148, 179], "day_abbr": [67, 148, 179], "month_nam": [67, 148, 179, 431], "month_abbr": [67, 148, 179], "chainmap": [67, 179, 184, 341, 382, 470, 472, 473, 476, 479], "new_child": [67, 157, 179, 473, 479], "most_common": [67, 157, 179, 465], "dequ": [67, 179, 184, 258, 313, 341, 382, 398, 423, 426, 438, 448, 462, 463, 464, 465, 469, 471, 474, 475, 479], "appendleft": [67, 157, 179, 462], "extendleft": [67, 157, 179], "popleft": [67, 157, 179, 258, 313, 438, 448, 462], "rotat": [67, 99, 116, 157, 179, 183, 266, 287, 380, 462, 464, 465, 479], "maxlen": [67, 149, 157, 179, 258, 382, 464, 465], "defaultdict": [67, 86, 179, 184, 341, 382, 463, 471, 479], "default_factori": [67, 157, 178, 179, 382, 479], "somenamedtupl": [67, 157, 179], "_make": [67, 157, 179, 337, 344, 479], "_asdict": [67, 157, 179, 464, 465, 467, 477, 479], "_replac": [67, 157, 179, 390, 464, 479], "_field": [67, 120, 157, 179, 261, 382, 464, 465, 479], "_field_default": [67, 157, 179, 382, 479], "ordereddict": [67, 86, 164, 172, 179, 184, 252, 341, 382, 465, 467, 469, 471, 474, 475, 477, 478, 479], "move_to_end": [67, 157, 179, 471, 479], "userdict": [67, 179, 459, 461, 464, 479], "userlist": [67, 179, 460, 479], "userstr": [67, 179, 458, 474, 478, 479], "mutablesequ": [67, 158, 179, 184, 341, 382, 466, 472, 474, 479], "bytestr": [67, 91, 158, 179, 184, 290, 334, 337, 341, 382, 403, 409, 420, 464, 470, 479], "mutableset": [67, 158, 179, 184, 341, 382, 479], "mutablemap": [67, 77, 86, 158, 164, 179, 181, 184, 327, 341, 382, 424, 464, 466, 472], "mappingview": [67, 158, 179, 184, 341, 382, 479], "itemsview": [67, 158, 179, 184, 341, 382], "keysview": [67, 158, 179, 184, 341, 382], "valuesview": [67, 158, 179, 184, 341, 382, 479], "asyncgener": [67, 158, 179, 184, 341, 382, 475, 479], "recip": [67, 84, 93, 100, 107, 145, 157, 179, 187, 197, 221, 247, 272, 287, 290, 295, 312, 315, 327, 341, 349, 409, 450, 470, 471, 479], "heappush": [67, 179, 233, 448, 461, 464], "heappop": [67, 179, 233, 258, 448, 461, 464], "heappushpop": [67, 179, 233, 464], "heapifi": [67, 179, 233, 315, 448, 479], "heapreplac": [67, 179, 233, 315], "nlargest": [67, 86, 179, 222, 223, 233, 462, 463, 479], "nsmallest": [67, 86, 179, 222, 223, 233, 462, 463], "bisect_left": [67, 145, 179], "bisect_right": [67, 145, 179], "insort_left": [67, 145, 179, 479], "insort_right": [67, 145, 179], "insort": [67, 145, 179, 448, 479], "typecod": [67, 119, 140, 179, 280, 381, 466, 479], "buffer_info": [67, 119, 179], "byteswap": [67, 119, 139, 179, 347, 473], "frombyt": [67, 119, 179, 334, 471, 478, 479], "fromfil": [67, 119, 179, 187, 466], "fromunicod": [67, 119, 179], "tofil": [67, 119, 179, 187, 466], "__callback__": [67, 179, 398, 473], "getweakrefcount": [67, 179, 398], "getweakref": [67, 179, 398], "weakkeydictionari": [67, 179, 341, 398, 463, 479], "keyref": [67, 179, 398, 463], "weakvaluedictionari": [67, 179, 341, 398, 448, 463, 479], "valueref": [67, 179, 398, 463], "weakset": [67, 179, 341, 398, 465, 469, 479], "weakmethod": [67, 179, 341, 398, 473, 479], "detach": [67, 116, 130, 140, 147, 179, 255, 267, 290, 334, 338, 364, 372, 398, 400, 401, 426, 471, 472, 479], "peek": [67, 116, 117, 147, 157, 179, 231, 255, 267, 398, 471, 479], "atexit": [67, 77, 83, 110, 163, 179, 251, 264, 312, 317, 398, 458, 462, 468, 479], "referencetyp": [67, 179, 398, 479], "proxytyp": [67, 179, 280, 398, 479], "callableproxytyp": [67, 179, 398, 479], "new_class": [67, 179, 381, 472, 479], "prepare_class": [67, 179, 381, 472], "resolve_bas": [67, 179, 381, 424, 476, 479], "get_original_bas": [67, 179, 381, 424, 470, 479], "nonetyp": [67, 88, 89, 165, 179, 190, 223, 281, 315, 316, 381, 382, 468, 469, 479], "lambdatyp": [67, 179, 381], "generatortyp": [67, 179, 381], "coroutinetyp": [67, 179, 381, 474, 479], "asyncgeneratortyp": [67, 179, 381], "codetyp": [67, 179, 381, 477, 479], "celltyp": [67, 179, 381, 479], "builtinfunctiontyp": [67, 179, 381], "builtinmethodtyp": [67, 179, 381, 479], "wrapperdescriptortyp": [67, 179, 381, 476, 479], "methodwrappertyp": [67, 179, 252, 381, 469, 476, 479], "notimplementedtyp": [67, 165, 179, 381, 468, 479], "methoddescriptortyp": [67, 179, 381, 476, 479], "classmethoddescriptortyp": [67, 179, 381, 476, 479], "ellipsistyp": [67, 165, 179, 381, 468, 479], "uniontyp": [67, 179, 223, 341, 381, 382, 469, 479], "tracebacktyp": [67, 179, 264, 377, 381, 424, 476, 479], "getsetdescriptortyp": [67, 179, 381], "memberdescriptortyp": [67, 179, 381, 479], "dynamicclassattribut": [67, 179, 381, 469, 473], "deep": [67, 100, 179, 247, 251, 296, 304, 328, 349, 354, 406, 479], "deepcopi": [67, 84, 157, 168, 178, 179, 316, 386, 420, 465, 470, 475, 476, 479], "pretti": [67, 75, 88, 91, 106, 108, 120, 164, 179, 182, 187, 247, 251, 252, 259, 266, 289, 294, 305, 374, 385, 407, 409, 415, 426, 458, 459, 460, 463, 464, 466, 470, 478, 479], "printer": [67, 103, 179, 244, 251, 365, 374, 401], "prettyprint": [67, 179, 473, 479], "pformat": [67, 179, 304, 473, 479], "pp": [67, 92, 179, 294, 304, 315, 477, 479], "isread": [67, 179, 304], "isrecurs": [67, 179, 304], "saferepr": [67, 179, 304], "arepr": [67, 179, 318], "fillvalu": [67, 179, 258, 318, 464, 479], "maxlevel": [67, 160, 179, 304, 318], "maxdict": [67, 179, 318], "maxlist": [67, 179, 318], "maxtupl": [67, 179, 318], "maxset": [67, 179, 318], "maxfrozenset": [67, 179, 318], "maxdequ": [67, 179, 318], "maxarray": [67, 179, 318], "maxlong": [67, 179, 318], "maxstr": [67, 179, 318], "maxoth": [67, 179, 318], "repr1": [67, 179, 318], "enumtyp": [67, 179, 208, 469], "_ignore_": [67, 93, 179, 208, 476, 479], "_generate_next_value_": [67, 93, 179, 208, 479], "_missing_": [67, 93, 179, 208, 479], "intenum": [67, 179, 208, 238, 330, 334, 338, 341, 475, 479], "strenum": [67, 179, 208, 238, 468, 469, 479], "_numeric_repr_": [67, 179, 208], "intflag": [67, 179, 208, 252, 316, 338, 341, 475, 479], "reprenum": [67, 179, 208, 469], "enumcheck": [67, 179, 208, 469], "named_flag": [67, 179, 208], "flagboundari": [67, 93, 179, 208, 469], "eject": [67, 93, 179, 208], "__dunder__": [67, 179], "_sunder_": [67, 179], "nonmemb": [67, 179, 208, 469, 479], "global_enum": [67, 179, 208, 469], "show_flag_valu": [67, 179, 208], "graph": [67, 179, 251, 265, 289, 296, 380, 460, 473, 478, 479], "topologicalsort": [67, 179, 229, 478, 479], "is_act": [67, 130, 179, 229], "get_readi": [67, 179, 229], "static_ord": [67, 179, 229], "cycleerror": [67, 179, 229], "conjug": [67, 183, 286, 287, 341, 464], "ration": [67, 180, 183, 251, 286, 287, 341, 424, 464, 465, 466, 471, 479], "denomin": [67, 183, 218, 286, 287, 341, 464, 475, 477, 479], "theoret": [67, 87, 89, 94, 183, 287], "ceil": [67, 218, 272, 286, 287, 319, 341, 424, 464, 477, 479], "comb": [67, 258, 272, 287, 340, 438, 469, 477, 479], "copysign": [67, 272, 287, 464, 479], "fab": [67, 272, 287], "fmod": [67, 272, 287, 426], "frexp": [67, 272, 287], "fsum": [67, 222, 272, 287, 340, 440, 464, 479], "gcd": [67, 218, 272, 287, 474, 478, 479], "isclos": [67, 152, 272, 287, 440, 474, 479], "isfinit": [67, 152, 272, 287, 471, 479], "isinf": [67, 152, 272, 287, 341, 464, 479], "isnan": [67, 152, 272, 287, 340, 341, 438, 464, 479], "isqrt": [67, 258, 272, 287, 477, 479], "lcm": [67, 272, 287, 478, 479], "ldexp": [67, 272, 287, 315, 479], "modf": [67, 272, 287], "nextaft": [67, 272, 287, 470, 478, 479], "perm": [67, 93, 220, 272, 287, 431, 469, 476, 477, 479], "prod": [67, 258, 272, 287, 477, 479], "sumprod": [67, 258, 272, 287, 470, 479], "trunc": [67, 272, 286, 287, 341, 424, 464, 479], "ulp": [67, 272, 287, 315, 349, 464, 478, 479], "logarithm": [67, 183, 287, 292, 341, 461, 464, 467, 471, 472], "cbrt": [67, 272, 287, 469, 479], "exp2": [67, 272, 287, 469, 479], "expm1": [67, 272, 287, 465, 471, 479], "log1p": [67, 272, 287, 464, 479], "log2": [67, 272, 287, 471, 472], "log10": [67, 152, 183, 272, 287, 464], "sqrt": [67, 139, 152, 163, 183, 272, 287, 340, 462, 463, 464, 471, 477, 479], "trigonometr": [67, 287, 462], "aco": [67, 152, 272, 287], "asin": [67, 152, 272, 287], "atan": [67, 152, 272, 287, 464], "atan2": [67, 152, 272, 287, 479], "cos": [67, 152, 183, 218, 272, 287, 296, 447, 461, 477], "dist": [67, 248, 267, 272, 287, 293, 380, 417, 463, 471, 474, 477, 479], "hypot": [67, 157, 272, 287, 477, 479], "sin": [67, 120, 152, 183, 272, 287, 424, 461], "tan": [67, 152, 272, 287, 479], "angular": [67, 287, 430], "degre": [67, 72, 153, 174, 219, 272, 287, 341, 380, 424, 461, 477, 479], "radian": [67, 152, 183, 219, 272, 287, 380, 461, 477, 479], "hyperbol": [67, 187, 287, 464], "acosh": [67, 152, 272, 287, 464, 479], "asinh": [67, 152, 272, 287, 464, 479], "atanh": [67, 152, 272, 287, 464, 479], "cosh": [67, 152, 272, 287], "sinh": [67, 152, 272, 287], "tanh": [67, 152, 272, 287], "erf": [67, 92, 272, 287, 465, 471, 476, 479], "erfc": [67, 272, 287, 465, 471, 476, 479], "gamma": [67, 272, 287, 315, 465, 471], "lgamma": [67, 272, 287, 465, 471], "pi": [67, 92, 152, 173, 174, 183, 218, 270, 272, 287, 294, 315, 380, 409, 438, 440, 442, 447, 471, 472, 477], "tau": [67, 152, 272, 287, 475, 479], "polar": [67, 287, 464, 479], "coordin": [67, 84, 89, 91, 93, 100, 173, 174, 176, 180, 268, 272, 278, 287, 337, 342, 362, 365, 372, 374, 380, 458, 464, 470, 479], "rect": [67, 152, 173, 287, 464], "classif": [67, 263, 287, 289, 431], "infj": [67, 152, 287, 475, 479], "nanj": [67, 152, 287, 475, 479], "as_tupl": [67, 183, 287, 464], "compare_sign": [67, 183, 287], "compare_tot": [67, 183, 287], "compare_total_mag": [67, 183, 287], "copy_ab": [67, 183, 287], "copy_neg": [67, 183, 287], "copy_sign": [67, 183, 287], "from_float": [67, 183, 218, 287, 440, 465, 467, 471, 479], "fma": [67, 183, 287], "is_canon": [67, 183, 287, 465], "is_finit": [67, 183, 287], "is_infinit": [67, 183, 287], "is_nan": [67, 183, 287], "is_qnan": [67, 183, 287], "is_sign": [67, 183, 287], "is_snan": [67, 183, 287], "is_subnorm": [67, 183, 287], "is_zero": [67, 183, 287], "ln": [67, 183, 244, 287, 464, 472, 479], "logb": [67, 183, 287], "logical_and": [67, 183, 287], "logical_invert": [67, 183, 287], "logical_or": [67, 183, 287], "logical_xor": [67, 183, 287], "max_mag": [67, 183, 287], "min_mag": [67, 183, 287], "next_minus": [67, 183, 287], "next_plus": [67, 183, 287], "next_toward": [67, 183, 287], "number_class": [67, 183, 287], "quantiz": [67, 183, 287, 472, 479], "remainder_near": [67, 183, 287], "same_quantum": [67, 183, 287], "scaleb": [67, 183, 287], "to_eng_str": [67, 183, 287, 462], "to_integr": [67, 183, 287], "to_integral_exact": [67, 183, 287], "to_integral_valu": [67, 183, 287], "getcontext": [67, 183, 287, 448, 462], "setcontext": [67, 183, 287], "localcontext": [67, 183, 287, 341, 463, 464, 479], "basiccontext": [67, 183, 287, 472], "extendedcontext": [67, 183, 287, 472], "defaultcontext": [67, 183, 287, 472], "clear_flag": [67, 183, 287], "clear_trap": [67, 183, 287], "copy_decim": [67, 183, 287], "create_decim": [67, 183, 287, 464, 472], "create_decimal_from_float": [67, 183, 287], "etini": [67, 183, 287], "etop": [67, 183, 287], "divide_int": [67, 183, 287], "minus": [67, 174, 183, 222, 261, 272, 287, 329, 341, 342, 344, 361, 373, 426, 432, 476, 479], "to_sci_str": [67, 183, 287, 462], "max_prec": [67, 183, 287, 472], "max_emax": [67, 183, 287, 472], "min_emin": [67, 183, 287, 472], "min_etini": [67, 183, 287], "have_thread": [67, 183, 287, 472], "have_contextvar": [67, 183, 287, 452], "round_ceil": [67, 183, 287, 462], "round_down": [67, 183, 287, 462], "round_floor": [67, 183, 287, 479], "round_half_down": [67, 183, 287], "round_half_even": [67, 183, 287, 462, 479], "round_half_up": [67, 183, 287], "round_up": [67, 183, 287], "round_05up": [67, 183, 287], "clamp": [67, 183, 287, 471, 472, 479], "decimalexcept": [67, 183, 287], "divisionbyzero": [67, 183, 287, 462], "inexact": [67, 183, 287, 290, 472], "invalidoper": [67, 183, 287, 462, 464, 465, 472], "subnorm": [67, 183, 287, 479], "floatoper": [67, 183, 287, 472], "off": [67, 83, 89, 91, 94, 99, 100, 102, 103, 107, 108, 110, 118, 153, 164, 173, 174, 180, 187, 188, 197, 205, 206, 213, 222, 229, 240, 244, 258, 264, 265, 266, 272, 287, 289, 298, 302, 305, 328, 332, 341, 349, 357, 358, 362, 363, 372, 380, 384, 385, 391, 416, 424, 428, 431, 432, 444, 451, 458, 459, 460, 461, 462, 463, 464, 466, 471, 473, 474, 475, 477, 478, 479], "from_decim": [67, 218, 287, 471], "limit_denomin": [67, 218, 287], "randbyt": [67, 287, 315, 478, 479], "randrang": [67, 83, 287, 315, 447, 462, 468, 470, 471, 479], "randint": [67, 287, 315, 471, 479], "getrandbit": [67, 287, 315, 462, 473, 479], "shuffl": [67, 83, 287, 315, 316, 469, 471, 478, 479], "sampl": [67, 72, 74, 83, 87, 89, 92, 93, 94, 100, 101, 103, 105, 108, 115, 139, 153, 172, 173, 190, 244, 276, 287, 292, 296, 304, 305, 315, 316, 333, 340, 346, 354, 363, 372, 391, 397, 409, 423, 437, 447, 457, 459, 460, 461, 464, 465, 469, 471, 473, 475, 476, 477, 479], "binomialvari": [67, 287, 315, 470, 479], "uniform": [67, 83, 107, 132, 187, 252, 287, 315, 390, 394, 415, 471, 479], "triangular": [67, 287, 315, 464], "betavari": [67, 287, 315], "expovari": [67, 287, 315, 470, 479], "gammavari": [67, 287, 315, 479], "gauss": [67, 287, 315, 479], "lognormvari": [67, 287, 315], "normalvari": [67, 83, 287, 315, 479], "vonmisesvari": [67, 287, 315], "paretovari": [67, 287, 315, 479], "weibullvari": [67, 287, 315], "systemrandom": [67, 171, 287, 290, 315, 323], "reproduc": [67, 84, 107, 120, 198, 231, 287, 345, 358, 391, 413, 422, 471, 476, 477, 479], "spread": [67, 133, 287, 365, 464], "fmean": [67, 287, 315, 340, 477, 479], "geometric_mean": [67, 287, 340, 477, 479], "harmonic_mean": [67, 287, 340, 475, 479], "median": [67, 92, 287, 315, 340, 447, 473, 479], "median_low": [67, 287, 340], "median_high": [67, 287, 340], "median_group": [67, 287, 340, 479], "multimod": [67, 287, 340, 477], "pstdev": [67, 287, 340, 479], "pvarianc": [67, 287, 340, 479], "stdev": [67, 223, 287, 340, 469, 477, 479], "varianc": [67, 287, 340, 382, 447, 469, 470, 473, 475, 477, 479], "quantil": [67, 287, 315, 340, 477, 479], "covari": [67, 287, 340, 382, 468, 479], "correl": [67, 250, 287, 340, 468, 470, 479], "linear_regress": [67, 287, 340, 468, 479], "statisticserror": [67, 287, 340], "normaldist": [67, 287, 477, 479], "from_sampl": [67, 287, 340, 477], "pdf": [67, 79, 99, 106, 232, 287, 315, 340, 349, 477, 479], "cdf": [67, 287, 340, 477], "inv_cdf": [67, 287, 340, 479], "zscore": [67, 287, 340, 479], "accumul": [67, 84, 89, 91, 94, 118, 183, 221, 223, 258, 289, 296, 305, 315, 328, 376, 384, 440, 459, 471, 472, 477, 479], "batch": [67, 99, 103, 124, 221, 258, 296, 345, 457, 470, 474, 479], "from_iter": [67, 221, 258, 464, 479], "combinations_with_replac": [67, 94, 157, 221, 258, 315, 465, 467, 479], "dropwhil": [67, 94, 221, 258], "filterfals": [67, 94, 110, 221, 222, 258, 340], "groupbi": [67, 86, 94, 221, 223, 258, 288, 462, 467, 479], "islic": [67, 86, 94, 157, 221, 222, 258, 463, 476, 479], "pairwis": [67, 221, 258, 380, 468, 479], "permut": [67, 94, 221, 258, 315, 431, 458, 464, 467, 477, 479], "starmap": [67, 94, 161, 221, 222, 258, 272, 280, 472], "takewhil": [67, 94, 221, 258], "tee": [67, 94, 174, 221, 258, 462, 479], "zip_longest": [67, 221, 222, 258, 466, 479], "cached_properti": [67, 84, 92, 221, 223, 341, 470, 477, 479], "cmp_to_key": [67, 105, 221, 222, 223, 341, 465, 471], "lru_cach": [67, 84, 157, 217, 221, 223, 258, 471, 472, 474, 477, 479], "total_ord": [67, 221, 223, 424, 426, 465, 471, 473, 479], "partialmethod": [67, 221, 223, 341, 473, 477, 479], "singledispatch": [67, 86, 221, 223, 469, 473, 476, 479], "singledispatchmethod": [67, 221, 223, 477, 479], "update_wrapp": [67, 87, 92, 221, 223, 252, 463, 473, 479], "lt": [67, 94, 120, 219, 221, 261, 288, 341, 380, 413, 427, 431, 459, 471], "eq": [67, 94, 120, 178, 221, 261, 288, 382, 427, 479], "ne": [67, 94, 110, 221, 288, 365], "ge": [67, 94, 221, 288], "gt": [67, 94, 120, 221, 235, 236, 237, 261, 288, 413, 427, 471, 472], "not_": [67, 94, 221, 288], "__not__": [67, 221, 288], "is_": [67, 94, 221, 288], "is_not": [67, 94, 221, 288], "and_": [67, 94, 221, 288], "floordiv": [67, 94, 120, 221, 261, 288, 427], "inv": [67, 221, 288, 474], "__inv__": [67, 221, 288], "lshift": [67, 120, 221, 261, 288, 427], "mod": [67, 84, 100, 120, 221, 222, 247, 261, 276, 288, 376, 417, 427, 432, 464, 477, 479], "mul": [67, 94, 110, 139, 183, 221, 258, 272, 280, 288, 347, 416], "matmul": [67, 221, 258, 288, 474, 479], "neg": [67, 183, 221, 223, 258, 288], "or_": [67, 94, 221, 288], "rshift": [67, 120, 221, 261, 288, 427], "truediv": [67, 221, 288], "xor": [67, 183, 208, 221, 288, 341, 426], "__concat__": [67, 221, 288], "countof": [67, 221, 288, 478, 479], "delitem": [67, 221, 288], "getitem": [67, 221, 258, 288, 386, 460], "indexof": [67, 221, 258, 288, 478, 479], "setitem": [67, 221, 288, 386], "attrgett": [67, 86, 94, 105, 145, 221, 288, 462, 463, 464, 471, 474, 479], "itemgett": [67, 86, 105, 145, 221, 258, 288, 462, 463, 474, 477, 479], "methodcal": [67, 86, 105, 221, 288, 464, 474, 479], "iadd": [67, 221, 288], "iand": [67, 221, 288], "iconcat": [67, 221, 288], "__iconcat__": [67, 221, 288], "ifloordiv": [67, 221, 288], "ilshift": [67, 221, 288], "imod": [67, 221, 288], "imul": [67, 110, 221, 288], "imatmul": [67, 221, 288, 474], "ior": [67, 221, 288], "ipow": [67, 221, 288], "irshift": [67, 221, 288], "isub": [67, 221, 288], "itruediv": [67, 221, 288], "ixor": [67, 221, 288], "purepath": [67, 216, 248, 290, 293, 468, 469, 470, 478, 479], "pureposixpath": [67, 216, 293, 479], "purewindowspath": [67, 216, 293, 479], "drive": [67, 104, 108, 216, 228, 244, 289, 290, 291, 293, 354, 358, 365, 384, 418, 422, 457, 470, 472, 473, 474, 479], "anchor": [67, 216, 247, 249, 277, 293, 338, 350, 365, 372, 465, 473, 479], "stem": [67, 117, 216, 293, 418, 465, 469, 479], "as_posix": [67, 216, 293], "as_uri": [67, 216, 293], "is_absolut": [67, 216, 293, 479], "is_relative_to": [67, 216, 293, 479], "is_reserv": [67, 216, 253, 256, 293, 479], "joinpath": [67, 117, 216, 249, 250, 277, 293, 418, 479], "relative_to": [67, 216, 293, 470, 479], "with_nam": [67, 216, 293, 479], "with_stem": [67, 216, 293, 479], "with_suffix": [67, 216, 293, 479], "with_seg": [67, 216, 293, 470, 479], "posixpath": [67, 216, 248, 291, 293, 479], "windowspath": [67, 216, 293, 479], "cwd": [67, 140, 216, 220, 253, 290, 293, 345, 358, 395, 462, 477, 479], "chmod": [67, 83, 100, 116, 140, 149, 216, 290, 293, 329, 339, 354, 434, 456, 468, 472, 479], "expandus": [67, 108, 164, 216, 228, 240, 283, 291, 293, 317, 329, 345, 474, 477, 479], "is_dir": [67, 116, 117, 216, 250, 277, 290, 293, 418, 475, 477, 479], "is_fil": [67, 116, 117, 216, 249, 250, 277, 290, 293, 418, 474, 477, 479], "is_junct": [67, 116, 216, 290, 293, 470, 479], "is_mount": [67, 216, 293, 476, 477, 479], "is_symlink": [67, 116, 216, 290, 293, 477, 479], "is_socket": [67, 216, 293, 477, 479], "is_fifo": [67, 216, 293, 477, 479], "is_block_devic": [67, 216, 293, 477, 479], "is_char_devic": [67, 216, 293, 477, 479], "iterdir": [67, 117, 216, 249, 250, 277, 293, 418, 479], "walk": [67, 89, 116, 118, 120, 140, 191, 193, 197, 201, 202, 204, 216, 261, 282, 289, 290, 293, 345, 365, 377, 404, 460, 464, 466, 470, 472, 474, 479], "lchmod": [67, 116, 216, 290, 293, 464, 479], "lstat": [67, 116, 216, 290, 291, 293, 339, 358, 470, 472, 477, 479], "mkdir": [67, 83, 116, 117, 140, 197, 216, 290, 293, 418, 447, 469, 472, 474, 479], "owner": [67, 72, 92, 96, 100, 178, 216, 280, 290, 293, 329, 339, 354, 422, 424, 448, 475, 479], "read_byt": [67, 117, 216, 249, 250, 275, 277, 293, 418, 474, 479], "read_text": [67, 117, 216, 248, 249, 250, 255, 277, 293, 418, 469, 474, 479], "readlink": [67, 116, 216, 290, 293, 472, 477, 478, 479], "rglob": [67, 140, 216, 293, 469, 470, 479], "rmdir": [67, 83, 116, 140, 184, 216, 290, 293, 358, 472], "samefil": [67, 216, 291, 293, 473, 474, 479], "symlink_to": [67, 216, 293, 468, 477, 479], "hardlink_to": [67, 216, 293, 468, 477, 479], "unlink": [67, 83, 116, 161, 184, 210, 216, 270, 280, 281, 290, 293, 325, 356, 358, 372, 395, 406, 407, 472, 479], "write_byt": [67, 216, 275, 293, 474, 479], "write_text": [67, 216, 293, 474, 479], "abspath": [67, 197, 216, 291, 293, 395, 465, 479], "basenam": [67, 89, 96, 100, 118, 181, 190, 216, 289, 291, 293, 365, 371, 395, 418, 479], "commonpath": [67, 216, 291, 474, 479], "commonprefix": [67, 216, 291, 474], "dirnam": [67, 89, 92, 216, 220, 268, 290, 291, 293, 299, 358, 384, 396, 452, 476], "lexist": [67, 216, 291, 462, 477, 479], "expandvar": [67, 216, 228, 291, 345, 464, 479], "getatim": [67, 216, 291], "getmtim": [67, 216, 291], "getctim": [67, 216, 291], "getsiz": [67, 151, 216, 290, 291, 347, 479], "isab": [67, 216, 291, 293], "isfil": [67, 117, 197, 216, 291, 293, 354, 434, 471, 477, 479], "isdir": [67, 117, 216, 291, 293, 299, 354, 477, 479], "isjunct": [67, 216, 290, 291, 470, 479], "islink": [67, 216, 290, 291, 293, 477, 479], "ismount": [67, 216, 291, 473, 477, 479], "isdevdr": [67, 216, 291, 479], "normcas": [67, 216, 217, 291, 479], "normpath": [67, 216, 290, 291, 465, 479], "realpath": [67, 216, 290, 291, 293, 457, 468, 477, 479], "relpath": [67, 216, 291, 293, 464, 470, 479], "sameopenfil": [67, 216, 291], "samestat": [67, 216, 291, 293, 473], "splitdriv": [67, 216, 291, 476, 479], "splitroot": [67, 216, 291, 470, 479], "splitext": [67, 89, 100, 197, 216, 291, 293, 354, 448, 464, 475, 479], "supports_unicode_filenam": [67, 216, 291, 461], "filelineno": [67, 215, 216], "isfirstlin": [67, 215, 216], "isstdin": [67, 215, 216], "nextfil": [67, 215, 216], "hook_compress": [67, 215, 216, 468], "hook_encod": [67, 215, 216, 475, 479], "s_isdir": [67, 216, 290, 339], "s_ischr": [67, 216, 339], "s_isblk": [67, 216, 339], "s_isreg": [67, 216, 339], "s_isfifo": [67, 216, 339], "s_islnk": [67, 216, 339], "s_issock": [67, 216, 339], "s_isdoor": [67, 216, 339, 479], "s_isport": [67, 216, 339, 479], "s_iswht": [67, 216, 339, 479], "s_imod": [67, 216, 339], "s_ifmt": [67, 216, 339], "filemod": [67, 99, 100, 216, 264, 339, 354, 472, 477, 479], "st_mode": [67, 116, 216, 290, 293, 339, 473, 477], "st_ino": [67, 116, 216, 266, 290, 339, 470, 479], "st_dev": [67, 116, 216, 290, 339, 470], "st_nlink": [67, 116, 216, 290, 339], "st_uid": [67, 116, 216, 290, 339], "st_gid": [67, 116, 216, 290, 339], "st_size": [67, 116, 216, 290, 293, 339, 460], "st_atim": [67, 116, 216, 290, 339], "st_mtime": [67, 116, 187, 216, 231, 290, 293, 339, 354, 461], "st_ctime": [67, 116, 216, 290, 339, 470], "s_ifsock": [67, 216, 339], "s_iflnk": [67, 216, 339, 477], "s_ifreg": [67, 216, 290, 339], "s_ifblk": [67, 216, 290, 339], "s_ifdir": [67, 216, 339], "s_ifchr": [67, 216, 290, 339, 479], "s_ififo": [67, 216, 290, 339], "s_ifdoor": [67, 216, 339, 473, 479], "s_ifport": [67, 216, 339, 473, 479], "s_ifwht": [67, 216, 339, 473, 479], "s_isuid": [67, 216, 290, 339], "s_isgid": [67, 216, 290, 339], "s_isvtx": [67, 216, 290, 339], "s_irwxu": [67, 216, 290, 339], "s_irusr": [67, 216, 290, 339], "s_iwusr": [67, 216, 290, 339, 354], "s_ixusr": [67, 216, 290, 339, 354], "s_irwxg": [67, 216, 290, 339], "s_irgrp": [67, 216, 290, 339], "s_iwgrp": [67, 216, 290, 339], "s_ixgrp": [67, 216, 290, 339], "s_irwxo": [67, 216, 290, 339], "s_iroth": [67, 216, 290, 339], "s_iwoth": [67, 216, 290, 339, 354], "s_ixoth": [67, 216, 290, 339, 354], "s_enfmt": [67, 216, 290, 339], "s_iread": [67, 216, 290, 339], "s_iwrit": [67, 216, 290, 329, 339], "s_iexec": [67, 216, 290, 339], "uf_nodump": [67, 216, 290, 339], "uf_immut": [67, 216, 290, 339, 464], "uf_append": [67, 216, 290, 339, 464], "uf_opaqu": [67, 216, 290, 339], "uf_nounlink": [67, 216, 290, 339], "uf_compress": [67, 216, 290, 339], "uf_hidden": [67, 216, 290, 339], "sf_archiv": [67, 216, 290, 339], "sf_immut": [67, 216, 290, 339], "sf_append": [67, 216, 290, 339], "sf_nounlink": [67, 216, 290, 339], "sf_snapshot": [67, 216, 290, 339], "file_attribute_arch": [67, 216, 339], "file_attribute_compress": [67, 216, 339], "file_attribute_devic": [67, 216, 339], "file_attribute_directori": [67, 216, 339], "file_attribute_encrypt": [67, 216, 339], "file_attribute_hidden": [67, 216, 339], "file_attribute_integrity_stream": [67, 216, 339], "file_attribute_norm": [67, 216, 339], "file_attribute_not_content_index": [67, 216, 339], "file_attribute_no_scrub_data": [67, 216, 339], "file_attribute_offlin": [67, 216, 339], "file_attribute_readon": [67, 216, 339], "file_attribute_reparse_point": [67, 216, 290, 339], "file_attribute_sparse_fil": [67, 216, 339], "file_attribute_system": [67, 216, 339], "file_attribute_temporari": [67, 216, 339], "file_attribute_virtu": [67, 216, 339], "io_reparse_tag_symlink": [67, 216, 339], "io_reparse_tag_mount_point": [67, 216, 339], "io_reparse_tag_appexeclink": [67, 216, 339, 479], "cmp": [67, 105, 213, 216, 222, 341, 458, 459, 462, 466, 479], "cmpfile": [67, 213, 216], "dircmp": [67, 216, 458, 463, 473, 479], "report_partial_closur": [67, 213, 216], "report_full_closur": [67, 213, 216], "left_list": [67, 213, 216], "right_list": [67, 213, 216], "left_on": [67, 213, 216], "right_on": [67, 213, 216], "common_dir": [67, 213, 216], "common_fil": [67, 213, 216], "common_funni": [67, 213, 216], "same_fil": [67, 213, 216], "diff_fil": [67, 213, 216], "funny_fil": [67, 213, 216], "subdir": [67, 118, 213, 216, 268, 358, 479], "default_ignor": [67, 213, 216, 473], "temporaryfil": [67, 216, 356, 479], "namedtemporaryfil": [67, 107, 197, 216, 356, 464, 470, 479], "spooledtemporaryfil": [67, 216, 356, 464, 469, 472, 479], "temporarydirectori": [67, 216, 356, 471, 479], "mkstemp": [67, 140, 216, 280, 356, 479], "mkdtemp": [67, 140, 216, 290, 356, 358, 398, 470, 479], "gettempdir": [67, 216, 356, 479], "gettempdirb": [67, 216, 356, 479], "gettempprefix": [67, 216, 356], "gettempprefixb": [67, 216, 356], "tempdir": [67, 216, 356, 398, 479], "mktemp": [67, 216, 324, 356, 391, 479], "iglob": [67, 216, 228, 468, 474, 475, 479], "fnmatch": [67, 216, 228, 251, 293, 345, 378, 384, 479], "fnmatchcas": [67, 216, 217, 384, 479], "getlin": [67, 216, 262, 378, 474, 479], "clearcach": [67, 216, 262], "checkcach": [67, 216, 262, 479], "lazycach": [67, 216, 262, 474, 479], "copyfileobj": [67, 100, 107, 216, 231, 329, 477, 479], "copyfil": [67, 83, 140, 216, 329, 447, 465, 473, 477, 479], "samefileerror": [67, 216, 329, 473, 479], "copymod": [67, 140, 216, 329], "copystat": [67, 140, 216, 329, 472, 479], "copy2": [67, 83, 216, 329, 471, 472, 474, 477, 479], "ignore_pattern": [67, 216, 329, 358, 464], "copytre": [67, 83, 140, 216, 464, 465, 471, 477, 479], "rmtree": [67, 83, 140, 184, 216, 290, 293, 358, 398, 469, 470, 472, 476, 477, 479], "avoids_symlink_attack": [67, 216, 329], "disk_usag": [67, 216, 329, 472, 479], "chown": [67, 100, 116, 140, 216, 290, 329, 472, 479], "make_arch": [67, 140, 216, 329, 465, 470, 471, 474, 477, 479], "get_archive_format": [67, 216, 329, 471], "register_archive_format": [67, 216, 329, 471], "unregister_archive_format": [67, 216, 329], "unpack_arch": [67, 140, 216, 329, 470, 471, 479], "register_unpack_format": [67, 216, 329], "unregister_unpack_format": [67, 216, 329], "get_unpack_format": [67, 216, 329], "base_dir": [67, 140, 216], "get_terminal_s": [67, 116, 216, 290, 329, 472, 479], "persist": [67, 181, 238, 242, 244, 251, 265, 266, 271, 278, 317, 347, 386, 422, 471, 473, 479], "highest_protocol": [67, 295, 296, 461], "default_protocol": [67, 295, 296, 327, 468, 479], "pickleerror": [67, 295, 296], "picklingerror": [67, 89, 295, 296], "unpicklingerror": [67, 295, 296, 479], "pickler": [67, 89, 169, 295, 296, 297, 467, 472, 477, 479], "persistent_id": [67, 295, 296, 479], "dispatch_t": [67, 169, 295, 296, 472, 479], "reducer_overrid": [67, 295, 296, 477, 479], "unpickl": [67, 75, 93, 100, 180, 264, 266, 280, 281, 295, 297, 421, 461, 464, 465, 467, 479], "persistent_load": [67, 295, 296, 479], "find_class": [67, 140, 295, 296], "picklebuff": [67, 295, 296, 479], "__getnewargs_ex__": [67, 295, 296, 479], "__getnewargs__": [67, 93, 157, 295, 296, 385, 461, 474, 479], "__getstate__": [67, 295, 296, 385, 461, 469, 479], "__setstate__": [67, 295, 296, 385, 461, 477, 479], "__reduce__": [67, 79, 208, 295, 296, 385, 463, 477, 479], "__reduce_ex__": [67, 79, 93, 295, 296, 385, 479], "dispatch": [67, 77, 83, 84, 86, 99, 100, 142, 153, 174, 194, 223, 242, 295, 305, 318, 384, 415, 467, 469, 471, 473, 477, 479], "copyreg": [67, 168, 251, 276, 295, 296, 466, 479], "shelf": [67, 295, 327, 341, 471, 473], "sync": [67, 93, 116, 174, 181, 252, 280, 290, 292, 295, 327, 347, 365, 470, 472, 477, 479], "bsddbshelf": [67, 295, 327, 341], "dbfilenameshelf": [67, 295, 327, 341], "whichdb": [67, 181, 295, 466], "reinterpret": [67, 295], "gdbm": [67, 83, 181, 295, 452, 466, 479], "firstkey": [67, 181, 295], "nextkey": [67, 181, 295], "reorgan": [67, 181, 191, 295, 459, 464, 467, 475, 477, 479], "ndbm": [67, 295, 327, 424, 452, 477, 479], "dumb": [67, 104, 295, 355, 474, 475, 476, 477, 479], "dumbdbm": [67, 181, 295, 466], "sqlite": [67, 251, 295, 439, 447, 452, 463, 465, 468, 469, 470, 471, 472, 473, 476, 479], "connect": [67, 91, 92, 97, 100, 104, 107, 116, 122, 134, 140, 149, 157, 161, 166, 204, 209, 210, 220, 238, 239, 240, 242, 244, 245, 253, 255, 264, 266, 281, 285, 289, 290, 295, 296, 302, 306, 324, 325, 329, 330, 332, 335, 338, 344, 345, 349, 355, 358, 361, 365, 371, 380, 382, 386, 391, 393, 401, 403, 405, 407, 410, 412, 415, 422, 426, 445, 451, 452, 457, 458, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "complete_stat": [67, 295, 337], "enable_callback_traceback": [67, 295, 337], "register_adapt": [67, 295, 337], "register_convert": [67, 295, 337], "legacy_transaction_control": [67, 295, 337], "parse_colnam": [67, 295, 337, 479], "parse_decltyp": [67, 295, 337], "sqlite_ok": [67, 295, 337], "sqlite_deni": [67, 295, 337], "sqlite_ignor": [67, 295, 337], "apilevel": [67, 295, 337], "paramstyl": [67, 295, 337], "sqlite_vers": [67, 295, 337], "sqlite_version_info": [67, 295, 337], "threadsafeti": [67, 295, 337, 469, 479], "sqlite_dbconfig_defens": [67, 295, 337], "sqlite_dbconfig_dqs_ddl": [67, 295, 337], "sqlite_dbconfig_dqs_dml": [67, 295, 337], "sqlite_dbconfig_enable_fkey": [67, 295, 337], "sqlite_dbconfig_enable_fts3_token": [67, 295, 337], "sqlite_dbconfig_enable_load_extens": [67, 295, 337], "sqlite_dbconfig_enable_qpsg": [67, 295, 337], "sqlite_dbconfig_enable_trigg": [67, 295, 337], "sqlite_dbconfig_enable_view": [67, 295, 337], "sqlite_dbconfig_legacy_alter_t": [67, 295, 337], "sqlite_dbconfig_legacy_file_format": [67, 295, 337], "sqlite_dbconfig_no_ckpt_on_clos": [67, 295, 337], "sqlite_dbconfig_reset_databas": [67, 295, 337], "sqlite_dbconfig_trigger_eqp": [67, 295, 337], "sqlite_dbconfig_trusted_schema": [67, 295, 337], "sqlite_dbconfig_writable_schema": [67, 295, 337], "cursor": [67, 91, 153, 157, 172, 174, 244, 290, 295, 296, 317, 365, 371, 372, 386, 463, 464, 467, 471, 475, 477, 478, 479], "blobopen": [67, 295, 337, 469, 479], "commit": [67, 92, 118, 278, 285, 295, 302, 337, 345, 347, 367, 427, 463, 464, 465, 473, 475, 479], "rollback": [67, 295, 337, 463, 464, 469, 479], "executemani": [67, 295, 337, 479], "executescript": [67, 295, 337, 479], "create_funct": [67, 295, 337, 479], "create_aggreg": [67, 295, 337, 479], "create_window_funct": [67, 295, 337, 469, 479], "create_col": [67, 295, 337, 469, 479], "set_author": [67, 295, 337, 469, 479], "set_progress_handl": [67, 295, 337, 479], "set_trace_callback": [67, 295, 337, 472, 479], "enable_load_extens": [67, 140, 295, 337, 452, 465, 468, 471, 479], "load_extens": [67, 140, 295, 337, 465, 468, 470, 471, 479], "iterdump": [67, 295, 337, 479], "backup": [67, 100, 110, 215, 266, 295, 337, 354, 464, 471, 476, 479], "getlimit": [67, 295, 337, 469, 479], "setlimit": [67, 295, 337, 469, 479], "getconfig": [67, 295, 337, 470, 479], "setconfig": [67, 295, 337, 470, 479], "deseri": [67, 259, 281, 295, 296, 337, 421, 442, 465, 469, 473, 475, 479], "autocommit": [67, 295, 470, 479], "in_transact": [67, 295, 337], "isolation_level": [67, 295, 479], "row_factori": [67, 295, 337], "text_factori": [67, 295, 337], "total_chang": [67, 295, 337], "fetchon": [67, 92, 295, 296, 337, 463, 471], "fetchmani": [67, 295, 337], "fetchal": [67, 157, 295, 337, 463], "setinputs": [67, 295, 337], "setoutputs": [67, 295, 337], "arrays": [67, 295, 337], "lastrowid": [67, 295, 337, 475, 479], "rowcount": [67, 295, 337, 479], "blob": [67, 295, 338, 386, 469, 479], "seek": [67, 78, 83, 84, 106, 115, 116, 151, 172, 209, 212, 215, 255, 275, 295, 296, 337, 347, 354, 356, 358, 418, 420, 442, 458, 464, 467, 479], "prepareprotocol": [67, 295, 479], "sqlite_errorcod": [67, 295, 337, 469], "sqlite_errornam": [67, 295, 337, 469], "interfaceerror": [67, 295, 337, 469, 479], "databaseerror": [67, 295, 337], "dataerror": [67, 295, 337, 479], "operationalerror": [67, 295, 337, 479], "integrityerror": [67, 295, 337], "internalerror": [67, 295, 337], "programmingerror": [67, 295, 337, 469, 470, 479], "notsupportederror": [67, 295, 337, 479], "guid": [67, 73, 75, 90, 91, 92, 98, 102, 106, 108, 112, 180, 183, 184, 187, 207, 222, 248, 290, 292, 295, 347, 386, 395, 452, 456, 464, 465, 470, 471, 473, 479], "sql": [67, 94, 106, 172, 258, 278, 289, 295, 382, 447, 463, 467, 469, 472, 479], "uri": [67, 100, 107, 239, 240, 293, 295, 311, 338, 380, 390, 391, 403, 406, 409, 411, 412, 414, 415, 468, 470, 472, 473, 479], "transact": [67, 94, 239, 240, 278, 295, 315, 361, 461, 463, 464, 470, 471, 474, 475, 479], "adler32": [67, 117, 232, 420, 479], "compressobj": [67, 117, 420, 479], "crc32": [67, 117, 144, 232, 282, 420, 447, 448, 479], "decompress": [67, 117, 147, 155, 215, 231, 405, 420, 447, 463, 471, 472, 474, 475, 479], "decompressobj": [67, 117, 420], "unused_data": [67, 117, 147, 267, 420], "unconsumed_tail": [67, 117, 420], "zlib_vers": [67, 117, 420], "zlib_runtime_vers": [67, 117, 420, 472], "badgzipfil": [67, 117, 231, 477, 479], "gzipfil": [67, 86, 117, 231, 354, 465, 467, 468, 470, 471, 474, 478, 479], "mtime": [67, 117, 213, 231, 247, 253, 290, 354, 392, 477, 479], "bzip2": [67, 117, 215, 251, 329, 354, 418, 469, 471, 472, 479], "bz2file": [67, 117, 147, 267, 465, 467, 468, 472, 473, 478, 479], "bz2compressor": [67, 117, 147, 479], "bz2decompressor": [67, 117, 147, 474, 479], "needs_input": [67, 117, 147, 267], "shot": [67, 117, 166, 325, 476], "lzmaerror": [67, 117, 267], "lzmafil": [67, 117, 267, 473, 479], "lzmacompressor": [67, 117, 267, 479], "lzmadecompressor": [67, 117, 267, 474, 479], "is_check_support": [67, 117, 267], "badzipfil": [67, 117, 418, 479], "largezipfil": [67, 117, 418], "zipinfo": [67, 117, 464, 475, 479], "is_zipfil": [67, 117, 418, 465, 479], "zip_stor": [67, 117, 418, 479], "zip_defl": [67, 117, 418, 448], "zip_bzip2": [67, 117, 418], "zip_lzma": [67, 117, 418], "getinfo": [67, 117, 418], "infolist": [67, 117, 418], "namelist": [67, 117, 418], "extractal": [67, 117, 354, 418, 463, 464, 474, 479], "printdir": [67, 117, 418], "setpassword": [67, 117, 418], "testzip": [67, 117, 418], "writestr": [67, 117, 418, 465], "pyzipfil": [67, 117, 473], "writepi": [67, 117, 418, 473], "date_tim": [67, 117, 245, 418], "compress_typ": [67, 117, 418, 465], "create_system": [67, 117, 418], "create_vers": [67, 117, 418], "extract_vers": [67, 117, 418], "flag_bit": [67, 117, 418, 479], "volum": [67, 77, 83, 117, 140, 157, 258, 290, 292, 324, 418, 462, 470, 473, 479], "internal_attr": [67, 117, 418], "external_attr": [67, 117, 418], "header_offset": [67, 117, 418], "crc": [67, 117, 144, 418, 420, 479], "compress_s": [67, 117, 418], "file_s": [67, 117, 418, 460], "tar": [67, 79, 108, 117, 251, 273, 289, 293, 329, 395, 449, 456, 458, 461, 462, 463, 464, 465, 470, 471, 479], "is_tarfil": [67, 117, 354, 479], "tarerror": [67, 117, 354], "readerror": [67, 117, 354, 479], "compressionerror": [67, 117, 354], "streamerror": [67, 117, 354], "extracterror": [67, 117, 354], "headererror": [67, 117, 354], "filtererror": [67, 117, 354], "tarinfo": [67, 117, 465, 471], "absolutepatherror": [67, 117, 354], "outsidedestinationerror": [67, 117, 354], "specialfileerror": [67, 117, 354, 465], "absolutelinkerror": [67, 117, 354], "linkoutsidedestinationerror": [67, 117, 354], "ustar_format": [67, 117, 354], "gnu_format": [67, 117, 354], "pax_format": [67, 117, 354, 464], "default_format": [67, 117, 354, 475], "getmemb": [67, 117, 252, 312, 354, 474, 479], "getnam": [67, 117, 151, 161, 270, 347, 354, 361, 412, 468, 479], "extractfil": [67, 117, 354, 479], "errorlevel": [67, 117, 354], "extraction_filt": [67, 117, 354], "addfil": [67, 117, 354], "gettarinfo": [67, 117, 354], "pax_head": [67, 117, 354], "frombuf": [67, 117, 354], "fromtarfil": [67, 117, 354], "tobuf": [67, 117, 354], "linknam": [67, 117, 354], "uid": [67, 117, 124, 140, 149, 214, 242, 245, 253, 290, 293, 301, 302, 307, 319, 329, 339, 354, 464, 465, 472, 474, 477, 479], "gid": [67, 117, 140, 230, 290, 293, 307, 354, 464, 465, 472, 474, 479], "unam": [67, 116, 117, 290, 300, 349, 351, 354, 471, 472, 479], "gname": [67, 117, 354], "isreg": [67, 117, 354], "issym": [67, 117, 354], "islnk": [67, 117, 354], "ischr": [67, 117, 354], "isblk": [67, 117, 354], "isfifo": [67, 117, 354], "isdev": [67, 117, 354], "fully_trusted_filt": [67, 117, 354], "tar_filt": [67, 117, 354], "data_filt": [67, 117, 354], "reader": [67, 90, 97, 103, 106, 124, 134, 147, 155, 157, 167, 193, 197, 199, 202, 214, 222, 239, 250, 255, 268, 269, 280, 285, 289, 296, 330, 334, 338, 344, 383, 395, 406, 409, 410, 411, 412, 413, 424, 430, 451, 461, 463, 466, 468, 474, 479], "register_dialect": [67, 172, 214], "unregister_dialect": [67, 172, 214, 479], "get_dialect": [67, 172, 214, 479], "list_dialect": [67, 172, 214, 479], "field_size_limit": [67, 98, 172, 214, 463, 479], "dictread": [67, 172, 214, 475, 477, 479], "dictwrit": [67, 172, 214, 471, 479], "dialect": [67, 214, 337, 461, 463, 471, 479], "excel_tab": [67, 172, 214], "unix_dialect": [67, 172, 214, 471], "sniffer": [67, 172, 214, 334, 479], "sniff": [67, 172, 214, 479], "has_head": [67, 172, 214, 240, 253, 391, 479], "quote_al": [67, 172, 214], "quote_minim": [67, 172, 214], "quote_nonnumer": [67, 172, 214], "quote_non": [67, 172, 214], "quote_notnul": [67, 172, 214, 470, 479], "quote_str": [67, 172, 214, 470, 479], "doublequot": [67, 172, 214, 479], "escapechar": [67, 172, 214, 479], "linetermin": [67, 172, 214], "quotechar": [67, 172, 214, 479], "skipinitialspac": [67, 172, 214, 479], "csvreader": [67, 172, 214], "line_num": [67, 172, 214, 316, 463], "fieldnam": [67, 120, 157, 172, 214, 464, 467, 479], "csvwriter": [67, 172, 214], "writerow": [67, 172, 214, 471, 474, 479], "writehead": [67, 172, 214, 471, 479], "interpol": [67, 214, 341, 426, 442, 471, 474, 475, 479], "basicinterpol": [67, 164, 214, 469, 479], "extendedinterpol": [67, 164, 214, 469, 471, 479], "boolean_st": [67, 164, 214], "sectcr": [67, 164, 214], "add_sect": [67, 164, 214, 471], "has_sect": [67, 164, 214], "has_opt": [67, 164, 214, 289, 347], "read_fil": [67, 164, 214, 265, 470], "read_str": [67, 164, 214, 471, 474], "read_dict": [67, 164, 214, 471, 476, 477, 478, 479], "getint": [67, 164, 214, 479], "getfloat": [67, 164, 214], "getboolean": [67, 164, 214, 479], "remove_opt": [67, 164, 214, 289, 347], "remove_sect": [67, 164, 214], "optionxform": [67, 164, 214], "max_interpolation_depth": [67, 164, 214], "rawconfigpars": [67, 214, 265, 465, 469, 473, 479], "nosectionerror": [67, 164, 214], "duplicatesectionerror": [67, 164, 214, 471], "duplicateoptionerror": [67, 164, 214, 471], "nooptionerror": [67, 164, 214, 465], "interpolationerror": [67, 164, 214], "interpolationdeptherror": [67, 164, 214], "interpolationmissingoptionerror": [67, 164, 214, 479], "interpolationsyntaxerror": [67, 164, 214], "missingsectionheadererror": [67, 164, 214], "parsingerror": [67, 164, 214, 469, 470, 479], "tomllib": [67, 164, 214, 251, 469, 479], "toml": [67, 164, 214, 251, 255, 468, 469, 479], "tomldecodeerror": [67, 214, 375], "netrc": [67, 214, 220, 251, 285, 460, 473, 474, 479], "netrcparseerror": [67, 214, 283], "authent": [67, 161, 214, 232, 238, 245, 253, 264, 266, 283, 285, 302, 332, 338, 391, 415, 420, 460, 465, 471, 472, 473, 474, 475, 477, 478, 479], "plist": [67, 214, 251, 269, 455, 464, 473, 476, 477, 479], "fmt_xml": [67, 214, 301, 473], "fmt_binari": [67, 214, 301, 473], "digest": [67, 171, 193, 201, 202, 234, 251, 280, 302, 338, 391, 463, 465, 466, 471, 472, 473, 476, 477, 478, 479], "md5": [67, 170, 171, 232, 234, 245, 332, 337, 338, 394, 452, 463, 464, 465, 466, 471, 473, 477, 478, 479], "sha1": [67, 171, 232, 452, 463, 465, 471, 479], "sha224": [67, 171, 232, 463, 465, 471], "sha256": [67, 171, 232, 248, 334, 338, 452, 463, 465, 471, 479], "sha384": [67, 171, 232, 338, 463, 465, 471], "sha512": [67, 171, 232, 452, 463, 465, 471, 479], "sha3_224": [67, 171, 232, 475], "sha3_256": [67, 171, 232, 475, 479], "sha3_384": [67, 171, 232, 475], "sha3_512": [67, 171, 232, 475, 479], "algorithms_guarante": [67, 171, 232, 465, 471], "algorithms_avail": [67, 171, 232, 465, 471, 479], "digest_s": [67, 171, 232, 234, 473], "block_siz": [67, 171, 232, 234, 473], "hexdigest": [67, 171, 232, 234, 337, 463, 479], "shake": [67, 171, 452, 469, 475, 478, 479], "shake_128": [67, 171, 232, 475], "shake_256": [67, 171, 232, 475], "file_digest": [67, 171, 232, 469, 479], "pbkdf2_hmac": [67, 171, 232, 465, 468, 470, 473, 479], "scrypt": [67, 171, 232, 475, 479], "blake2": [67, 171, 452, 469, 475, 478, 479], "blake2b": [67, 171, 232, 469, 475, 478, 479], "salt_siz": [67, 171, 232], "person_s": [67, 171, 232], "max_key_s": [67, 171, 232], "max_digest_s": [67, 171, 232], "person": [67, 92, 94, 108, 171, 244, 337, 338, 422, 457, 458, 460, 464], "compare_digest": [67, 170, 171, 232, 234, 323, 465, 472, 479], "randbelow": [67, 171, 323, 479], "randbit": [67, 171, 323], "token_byt": [67, 171, 315, 323], "token_hex": [67, 171, 323, 479], "token_urlsaf": [67, 171, 323], "ctermid": [67, 116, 290], "environb": [67, 116, 290, 345, 471, 479], "fsencod": [67, 86, 116, 290, 293, 349, 358, 471, 475, 479], "fspath": [67, 86, 116, 231, 290, 293, 475, 479], "getenvb": [67, 116, 290, 471], "get_exec_path": [67, 116, 290], "getegid": [67, 116, 290, 479], "geteuid": [67, 116, 290, 479], "getgid": [67, 116, 290, 479], "getgrouplist": [67, 116, 290, 472, 479], "getgroup": [67, 116, 290, 479], "getlogin": [67, 116, 226, 290], "getpgid": [67, 116, 290, 461], "getpgrp": [67, 116, 212, 290], "getpid": [67, 99, 116, 124, 280, 290, 479], "getppid": [67, 116, 280, 290, 479], "getprior": [67, 116, 290, 472], "prio_process": [67, 116, 290], "prio_pgrp": [67, 116, 290], "prio_us": [67, 116, 290], "prio_darwin_thread": [67, 116, 290, 479], "prio_darwin_process": [67, 116, 290, 479], "prio_darwin_bg": [67, 116, 290, 479], "prio_darwin_nonui": [67, 116, 290, 479], "getresuid": [67, 116, 290, 465, 479], "getresgid": [67, 116, 290, 465, 479], "getuid": [67, 116, 290, 479], "initgroup": [67, 116, 290, 465], "putenv": [67, 116, 140, 290, 303, 478, 479], "setegid": [67, 116, 290], "seteuid": [67, 116, 290], "setgid": [67, 116, 290, 354], "setgroup": [67, 116, 290, 345, 479], "setn": [67, 116, 290, 479], "setpgrp": [67, 116, 290], "setpgid": [67, 116, 290, 345], "setprior": [67, 116, 290, 472, 479], "setregid": [67, 116, 290, 345], "setresgid": [67, 116, 290, 465], "setresuid": [67, 116, 290, 465], "setreuid": [67, 116, 290, 345], "getsid": [67, 116, 290, 462], "setsid": [67, 116, 290, 345, 479], "setuid": [67, 116, 290, 354], "supports_bytes_environ": [67, 116, 290, 471], "umask": [67, 116, 181, 290, 293, 345, 358, 476, 479], "unsetenv": [67, 116, 140, 290, 464, 478, 479], "unshar": [67, 116, 290, 319, 479], "clone_fil": [67, 116, 290], "clone_f": [67, 116, 290], "clone_newcgroup": [67, 116, 290], "clone_newipc": [67, 116, 290], "clone_newnet": [67, 116, 290], "clone_newn": [67, 116, 290], "clone_newpid": [67, 116, 290], "clone_newtim": [67, 116, 290], "clone_newus": [67, 116, 290], "clone_newut": [67, 116, 290], "clone_sighand": [67, 116, 290], "clone_sysvsem": [67, 116, 290], "clone_thread": [67, 116, 290], "clone_vm": [67, 116, 290], "fdopen": [67, 116, 279, 290, 334, 424], "closerang": [67, 116, 290, 464, 479], "copy_file_rang": [67, 116, 290, 479], "device_encod": [67, 116, 290, 479], "dup": [67, 116, 157, 290, 334, 479], "dup2": [67, 116, 211, 290, 330, 469, 474, 476, 479], "fchmod": [67, 116, 290, 464, 474, 479], "fchown": [67, 116, 290, 464, 474], "fdatasync": [67, 116, 290, 474], "fpathconf": [67, 116, 290, 479], "fstat": [67, 116, 290, 291, 339, 460, 472, 474, 479], "fstatvf": [67, 116, 290, 460, 474], "fsync": [67, 116, 290, 474, 479], "ftruncat": [67, 83, 116, 290, 474, 479], "get_block": [67, 116, 290, 474, 479], "lockf": [67, 116, 140, 212, 268, 290, 387, 460, 464, 472, 479], "f_lock": [67, 116, 290, 479], "f_tlock": [67, 116, 290], "f_ulock": [67, 116, 290], "f_test": [67, 116, 290], "login_tti": [67, 116, 290, 479], "lseek": [67, 116, 290, 463, 472], "seek_set": [67, 116, 212, 255, 275, 290, 337, 463, 467], "seek_cur": [67, 116, 212, 255, 275, 290, 337, 463, 467], "seek_end": [67, 116, 212, 255, 275, 290, 337, 463, 467], "o_rdon": [67, 116, 222, 279, 280, 290], "o_wron": [67, 116, 290, 330], "o_rdwr": [67, 116, 290, 330], "o_append": [67, 116, 279, 290], "o_creat": [67, 116, 290], "o_excl": [67, 116, 290, 356], "o_trunc": [67, 116, 290], "o_dsync": [67, 116, 290], "o_rsync": [67, 116, 290], "o_sync": [67, 116, 290], "o_ndelay": [67, 104, 116, 212, 290], "o_nonblock": [67, 104, 116, 290, 472, 474, 479], "o_noctti": [67, 116, 290], "o_cloexec": [67, 116, 290, 472, 479], "o_noinherit": [67, 116, 290], "o_short_liv": [67, 116, 290], "o_temporari": [67, 116, 290, 356], "o_random": [67, 116, 290], "o_sequenti": [67, 116, 290], "o_evton": [67, 116, 290, 468, 479], "o_fsync": [67, 116, 290, 468, 479], "o_symlink": [67, 116, 290, 468, 479], "o_nofollow_ani": [67, 116, 290, 468, 479], "o_async": [67, 116, 290], "o_direct": [67, 116, 290], "o_directori": [67, 116, 290], "o_nofollow": [67, 116, 290], "o_noatim": [67, 116, 290], "o_path": [67, 116, 290, 473, 479], "o_tmpfil": [67, 116, 290, 356, 473, 479], "o_shlock": [67, 116, 212, 290, 463, 479], "o_exlock": [67, 116, 212, 290, 463, 479], "openpti": [67, 116, 290, 306, 387, 479], "pipe": [67, 86, 100, 103, 104, 116, 123, 128, 129, 131, 135, 161, 187, 205, 209, 210, 212, 251, 255, 290, 325, 326, 329, 330, 339, 345, 347, 349, 354, 358, 395, 451, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479], "pipe2": [67, 116, 290, 472], "posix_falloc": [67, 116, 290, 472, 474, 479], "posix_fadvis": [67, 116, 290, 472, 474, 479], "posix_fadv_norm": [67, 116, 290], "posix_fadv_sequenti": [67, 116, 290], "posix_fadv_random": [67, 116, 290], "posix_fadv_noreus": [67, 116, 290], "posix_fadv_willne": [67, 116, 290], "posix_fadv_dontne": [67, 116, 290], "pread": [67, 116, 290, 472, 474, 476, 479], "preadv": [67, 116, 290, 476, 479], "rwf_nowait": [67, 116, 290], "rwf_hipri": [67, 116, 290], "pwrite": [67, 116, 290, 472, 474, 476], "pwritev": [67, 116, 290, 476, 479], "rwf_dsync": [67, 116, 290], "rwf_sync": [67, 116, 290], "rwf_append": [67, 116, 290, 479], "sendfil": [67, 116, 124, 125, 128, 131, 253, 290, 329, 334, 338, 403, 472, 474, 476, 479], "set_block": [67, 116, 290, 474, 479], "sf_nodiskio": [67, 116, 290], "sf_mnowait": [67, 116, 290], "sf_sync": [67, 116, 290], "sf_nocach": [67, 116, 290, 479], "splice": [67, 116, 209, 290, 468, 479], "splice_f_mov": [67, 116, 290], "splice_f_nonblock": [67, 116, 290], "splice_f_mor": [67, 116, 290], "readv": [67, 116, 290, 472, 474, 476, 479], "tcgetpgrp": [67, 116, 290], "tcsetpgrp": [67, 116, 290], "ttynam": [67, 116, 290, 479], "writev": [67, 116, 290, 472, 474, 476, 479], "terminal_s": [67, 116, 290, 329], "get_inherit": [67, 116, 290, 334, 473], "set_inherit": [67, 116, 290, 325, 334, 473, 479], "get_handle_inherit": [67, 116, 290, 473], "set_handle_inherit": [67, 116, 290, 345, 473], "f_ok": [67, 116, 290, 329], "r_ok": [67, 116, 290], "w_ok": [67, 116, 290], "x_ok": [67, 116, 290, 329], "chdir": [67, 116, 140, 166, 290, 312, 329, 349, 447, 469, 471, 472, 478, 479], "chflag": [67, 116, 140, 290, 329, 339, 464, 472], "chroot": [67, 116, 290, 479], "fchdir": [67, 116, 290, 474], "getcwd": [67, 110, 116, 290, 291, 293, 358, 403, 447, 476, 479], "getcwdb": [67, 116, 290, 466, 477, 479], "lchflag": [67, 116, 290, 464], "lchown": [67, 116, 290, 461], "listdir": [67, 77, 92, 106, 116, 140, 197, 210, 217, 227, 242, 290, 293, 329, 339, 395, 461, 462, 465, 466, 472, 476, 479], "listdriv": [67, 116, 140, 290, 470, 479], "listmount": [67, 116, 140, 290, 470, 479], "listvolum": [67, 116, 140, 290, 470, 479], "makedir": [67, 83, 116, 290, 293, 474, 476, 479], "mkfifo": [67, 116, 290, 472, 474, 479], "mknod": [67, 116, 290, 461, 472, 474, 479], "makedev": [67, 116, 290, 461, 479], "pathconf": [67, 116, 290, 472], "pathconf_nam": [67, 116, 290], "removedir": [67, 83, 116, 290], "direntri": [67, 116, 290, 470, 474, 475, 479], "inod": [67, 116, 266, 290, 339, 479], "stat_result": [67, 116, 290, 293, 354, 461, 474, 477, 479], "st_atime_n": [67, 116, 290], "st_mtime_n": [67, 116, 290], "st_ctime_n": [67, 116, 290], "st_birthtim": [67, 116, 290, 463, 470], "st_birthtime_n": [67, 116, 290], "st_block": [67, 116, 290, 479], "st_blksize": [67, 116, 290], "st_rdev": [67, 116, 290, 470], "st_flag": [67, 116, 290, 463], "st_gen": [67, 116, 290, 463], "st_fstype": [67, 116, 290, 476, 479], "st_rsize": [67, 116, 290], "st_creator": [67, 116, 290], "st_type": [67, 116, 290], "st_file_attribut": [67, 116, 290, 339, 474, 479], "st_reparse_tag": [67, 116, 290, 339, 477], "statvf": [67, 116, 290, 460, 464, 472, 479], "supports_dir_fd": [67, 116, 290, 472], "supports_effective_id": [67, 116, 290, 472], "supports_fd": [67, 116, 290, 472], "supports_follow_symlink": [67, 116, 290, 329], "utim": [67, 116, 140, 290, 329, 472, 479], "fwalk": [67, 116, 140, 290, 472, 476, 479], "memfd_creat": [67, 116, 212, 290, 477, 479], "mfd_cloexec": [67, 116, 290], "mfd_allow_s": [67, 116, 290], "mfd_hugetlb": [67, 116, 290], "mfd_huge_shift": [67, 116, 290], "mfd_huge_mask": [67, 116, 290], "mfd_huge_64kb": [67, 116, 290], "mfd_huge_512kb": [67, 116, 290], "mfd_huge_1mb": [67, 116, 290], "mfd_huge_2mb": [67, 116, 290], "mfd_huge_8mb": [67, 116, 290], "mfd_huge_16mb": [67, 116, 290], "mfd_huge_32mb": [67, 116, 290], "mfd_huge_256mb": [67, 116, 290], "mfd_huge_512mb": [67, 116, 290], "mfd_huge_1gb": [67, 116, 290], "mfd_huge_2gb": [67, 116, 290], "mfd_huge_16gb": [67, 116, 290], "eventfd": [67, 116, 290, 468, 479], "eventfd_read": [67, 116, 290], "eventfd_writ": [67, 116, 290], "efd_cloexec": [67, 116, 290, 479], "efd_nonblock": [67, 116, 290, 479], "efd_semaphor": [67, 116, 290, 479], "getxattr": [67, 116, 140, 290, 472], "listxattr": [67, 116, 140, 290, 472], "removexattr": [67, 116, 140, 290, 472], "setxattr": [67, 116, 140, 290, 472, 479], "xattr_size_max": [67, 116, 290], "xattr_creat": [67, 116, 290], "xattr_replac": [67, 116, 290], "add_dll_directori": [67, 116, 140, 290, 477, 479], "execl": [67, 116, 289, 290], "execlp": [67, 116, 290], "execvp": [67, 116, 290, 345], "_exit": [67, 116, 138, 210, 211, 290], "ex_ok": [67, 116, 290], "ex_usag": [67, 116, 290], "ex_dataerr": [67, 116, 290], "ex_noinput": [67, 116, 290], "ex_nous": [67, 116, 290], "ex_nohost": [67, 116, 290], "ex_unavail": [67, 116, 290], "ex_softwar": [67, 116, 290], "ex_oserr": [67, 116, 290], "ex_osfil": [67, 116, 290], "ex_cantcreat": [67, 116, 290], "ex_ioerr": [67, 116, 290], "ex_tempfail": [67, 116, 290], "ex_protocol": [67, 116, 290], "ex_noperm": [67, 116, 290], "ex_config": [67, 116, 290], "ex_notfound": [67, 116, 290], "forkpti": [67, 116, 140, 290, 479], "killpg": [67, 116, 140, 290, 461, 479], "nice": [67, 104, 116, 118, 138, 142, 149, 166, 173, 190, 222, 267, 290, 319, 332, 335, 341, 386, 399, 424, 458, 471, 472], "pidfd_open": [67, 116, 290, 470, 478, 479], "pidfd_nonblock": [67, 116, 290, 470, 479], "plock": [67, 116, 290], "posix_spawn": [67, 116, 140, 161, 290, 477, 479], "posix_spawn_open": [67, 116, 290], "posix_spawn_clos": [67, 116, 290], "posix_spawn_dup2": [67, 116, 290], "posix_spawnp": [67, 116, 290, 479], "spawnl": [67, 116, 290], "spawnlp": [67, 116, 290, 345], "spawnv": [67, 116, 290, 479], "spawnvp": [67, 116, 290, 345], "p_nowait": [67, 116, 290, 345], "p_nowaito": [67, 116, 290], "p_wait": [67, 116, 290, 345], "p_detach": [67, 116, 290], "p_overlay": [67, 116, 290], "startfil": [67, 116, 140, 290, 479], "waitid": [67, 116, 290, 472, 474, 479], "waitpid": [67, 116, 130, 254, 290, 306, 463, 473, 474, 479], "wait3": [67, 116, 290, 463, 474, 479], "wait4": [67, 116, 290, 463, 474], "p_pid": [67, 116, 290], "p_pgid": [67, 116, 290], "p_all": [67, 116, 290], "p_pidfd": [67, 116, 290, 478, 479], "wcontinu": [67, 116, 290], "wexit": [67, 116, 290], "wstop": [67, 116, 290], "wuntrac": [67, 116, 290], "wnohang": [67, 116, 290], "wnowait": [67, 116, 290], "cld_exit": [67, 116, 290], "cld_kill": [67, 116, 290, 478, 479], "cld_dump": [67, 116, 290], "cld_trap": [67, 116, 290], "cld_stop": [67, 116, 290, 478, 479], "cld_continu": [67, 116, 290], "waitstatus_to_exitcod": [67, 116, 290, 306, 478, 479], "wcoredump": [67, 116, 290], "wifcontinu": [67, 116, 290], "wifstop": [67, 116, 290], "wifsign": [67, 116, 290], "wifexit": [67, 116, 290], "wexitstatus": [67, 116, 290], "wstopsig": [67, 116, 290], "wtermsig": [67, 116, 290], "sched_oth": [67, 116, 290], "sched_batch": [67, 116, 290], "sched_idl": [67, 116, 290], "sched_sporad": [67, 116, 290], "sched_fifo": [67, 116, 290], "sched_rr": [67, 116, 290], "sched_reset_on_fork": [67, 116, 290], "sched_param": [67, 116, 290], "sched_prior": [67, 116, 290], "sched_get_priority_min": [67, 116, 290, 472], "sched_get_priority_max": [67, 116, 290, 472], "sched_setschedul": [67, 116, 290, 472], "sched_getschedul": [67, 116, 290, 472], "sched_setparam": [67, 116, 290, 472], "sched_getparam": [67, 116, 290, 472], "sched_rr_get_interv": [67, 116, 290, 472], "sched_yield": [67, 116, 290, 472, 479], "sched_setaffin": [67, 116, 290, 472, 479], "sched_getaffin": [67, 116, 280, 290, 472, 479], "confstr": [67, 116, 290, 479], "confstr_nam": [67, 116, 290], "cpu_count": [67, 116, 160, 161, 163, 280, 290, 468, 473, 479], "getloadavg": [67, 116, 290], "sysconf": [67, 116, 290, 334, 479], "sysconf_nam": [67, 116, 290, 479], "curdir": [67, 116, 186, 213, 290, 291, 329, 365], "pardir": [67, 116, 213, 290], "altsep": [67, 116, 228, 244, 290, 293, 469, 479], "extsep": [67, 116, 290], "defpath": [67, 116, 290, 329, 479], "linesep": [67, 116, 191, 198, 199, 200, 205, 222, 255, 282, 290, 332, 345, 472, 479], "devnul": [67, 116, 124, 135, 161, 280, 290, 330, 345, 472, 479], "rtld_lazi": [67, 116, 290, 349, 472], "rtld_now": [67, 116, 173, 290, 472], "rtld_global": [67, 116, 173, 290, 349, 472, 477, 479], "rtld_local": [67, 116, 173, 290, 472, 477, 479], "rtld_nodelet": [67, 116, 290, 472], "rtld_noload": [67, 116, 290, 472], "rtld_deepbind": [67, 116, 290, 472], "getrandom": [67, 116, 290, 474, 475, 479], "urandom": [67, 116, 124, 232, 280, 290, 315, 338, 462, 465, 469, 470, 473, 474, 475, 479], "grnd_nonblock": [67, 116, 290, 479], "grnd_random": [67, 116, 290], "default_buffer_s": [67, 116, 222, 255, 345, 479], "text_encod": [67, 116, 255, 479], "unsupportedoper": [67, 116, 255, 479], "iobas": [67, 116, 185, 187, 210, 212, 255, 374, 451, 477, 479], "seekabl": [67, 115, 116, 147, 255, 397, 418, 464, 479], "rawiobas": [67, 116, 222, 255, 464, 472, 474, 479], "readal": [67, 116, 255, 468, 473, 479], "bufferediobas": [67, 116, 147, 222, 231, 239, 242, 255, 267, 296, 335, 356, 365, 403, 464, 465, 469, 471, 472, 474, 475, 479], "read1": [67, 116, 147, 231, 255, 479], "readinto1": [67, 116, 255, 474], "bytesio": [67, 86, 116, 193, 204, 231, 232, 255, 268, 296, 341, 356, 374, 417, 421, 464, 466, 471, 474, 479], "getbuff": [67, 116, 255, 471], "getvalu": [67, 77, 78, 84, 116, 149, 166, 193, 231, 255, 259, 270, 296, 305, 358, 385, 412, 417, 471, 474], "bufferedread": [67, 116, 222, 255, 354, 464, 465, 471, 479], "bufferedwrit": [67, 116, 222, 255, 464, 471, 479], "bufferedrandom": [67, 116, 222, 255, 464], "bufferedrwpair": [67, 116, 255, 464, 479], "textiobas": [67, 78, 116, 222, 239, 255, 356, 365, 424, 464, 465, 466, 469, 479], "line_buff": [67, 116, 255], "write_through": [67, 116, 222, 255, 472, 479], "reconfigur": [67, 89, 116, 222, 255, 476, 479], "stringio": [67, 78, 84, 86, 116, 166, 193, 204, 255, 259, 305, 341, 349, 358, 385, 403, 407, 464, 465, 466, 471, 473, 474, 479], "incrementalnewlinedecod": [67, 116, 255, 479], "reentranc": [67, 116, 166, 313, 479], "asctim": [67, 99, 100, 116, 264, 265, 306, 362, 459, 465, 471], "pthread_getcpuclockid": [67, 116, 362, 476, 479], "clock_getr": [67, 116, 362, 472], "clock_gettim": [67, 116, 362, 472, 478, 479], "clock_gettime_n": [67, 116, 362, 476, 479], "clock_settim": [67, 116, 362, 472], "clock_settime_n": [67, 116, 362, 476, 479], "get_clock_info": [67, 116, 362, 472, 479], "gmtime": [67, 99, 100, 116, 148, 180, 206, 264, 268, 362, 460, 471, 472, 479], "localtim": [67, 86, 99, 116, 180, 191, 200, 206, 245, 264, 282, 362, 459, 460, 470, 472, 479], "mktime": [67, 116, 180, 206, 362, 471, 479], "monoton": [67, 89, 116, 124, 129, 132, 166, 187, 322, 340, 362, 436, 461, 472, 474, 479], "monotonic_n": [67, 116, 362, 476, 479], "perf_count": [67, 116, 305, 362, 363, 472, 477, 479], "perf_counter_n": [67, 116, 362, 476, 479], "process_tim": [67, 116, 305, 362, 363, 472, 477, 479], "process_time_n": [67, 116, 362, 476, 479], "sleep": [67, 83, 94, 100, 116, 121, 122, 123, 124, 127, 131, 132, 133, 135, 136, 163, 164, 174, 254, 280, 319, 322, 330, 337, 345, 358, 362, 464, 468, 469, 472, 474, 475, 476, 477, 479], "struct_tim": [67, 116, 180, 245, 268, 362, 475], "time_n": [67, 116, 362, 476, 479], "thread_tim": [67, 116, 362, 476, 478, 479], "thread_time_n": [67, 116, 362, 476, 479], "tzset": [67, 116, 362, 479], "clock": [67, 84, 116, 124, 129, 137, 180, 305, 319, 380, 464, 472, 474, 475, 476, 477, 479], "clock_boottim": [67, 116, 362, 476, 479], "clock_highr": [67, 116, 362], "clock_monoton": [67, 116, 362, 469, 476, 479], "clock_monotonic_raw": [67, 116, 362], "clock_process_cputime_id": [67, 116, 362], "clock_prof": [67, 116, 362, 476, 479], "clock_tai": [67, 116, 362, 479], "clock_thread_cputime_id": [67, 116, 362, 478, 479], "clock_uptim": [67, 116, 362, 476, 479], "clock_uptime_raw": [67, 116, 362, 477, 479], "clock_realtim": [67, 116, 362, 469, 479], "altzon": [67, 116, 180, 362], "daylight": [67, 116, 180, 206, 362, 421, 478], "add_argu": [67, 88, 100, 116, 157, 187, 197, 225, 306, 395, 447, 465, 471, 479], "argumentpars": [67, 88, 100, 116, 157, 187, 197, 225, 306, 395, 447, 465, 470, 471, 474, 476, 479], "prog": [67, 88, 100, 116, 289, 316, 395, 447, 471], "epilog": [67, 116, 202, 289, 463, 471], "formatter_class": [67, 100, 116], "rawdescriptionhelpformatt": [67, 116, 118], "rawtexthelpformatt": [67, 116, 118], "argumentdefaultshelpformatt": [67, 100, 116, 118, 479], "metavartypehelpformatt": [67, 116, 118], "prefix_char": [67, 116], "fromfile_prefix_char": [67, 116, 470, 479], "argument_default": [67, 116], "allow_abbrev": [67, 116, 474, 479], "conflict_handl": [67, 116, 289], "add_help": [67, 116], "exit_on_error": [67, 116, 479], "metavar": [67, 100, 116, 197, 289, 347, 395, 465, 470, 471, 479], "parse_arg": [67, 88, 100, 116, 157, 187, 197, 225, 289, 306, 347, 395, 447, 461, 465, 471], "abbrevi": [67, 106, 116, 148, 174, 180, 183, 263, 289, 294, 305, 345, 362, 377, 409, 451, 473, 474, 475, 479], "add_subpars": [67, 100, 116, 118, 471, 476, 479], "filetyp": [67, 116, 186, 333, 465, 473, 479], "add_argument_group": [67, 116, 118, 479], "add_mutually_exclusive_group": [67, 88, 116, 118, 479], "set_default": [67, 116, 118, 289, 347, 479], "get_default": [67, 116, 118], "print_usag": [67, 116, 118, 289, 347], "print_help": [67, 116, 118, 289], "format_usag": [67, 116, 118, 479], "format_help": [67, 116, 118], "parse_known_arg": [67, 116, 118, 479], "convert_arg_line_to_arg": [67, 116, 118], "intermix": [67, 116, 225, 476, 479], "parse_intermixed_arg": [67, 116, 118, 476, 479], "parse_known_intermixed_arg": [67, 116, 118], "upgrad": [67, 107, 108, 109, 116, 134, 207, 239, 244, 395, 449, 452, 457, 460, 461, 465, 471, 473, 475, 476, 477, 479], "argumenterror": [67, 116, 118, 173, 479], "argumenttypeerror": [67, 116, 118], "getopt": [67, 88, 116, 187, 251, 289, 461, 465, 479], "gnu_getopt": [67, 116, 225, 461], "getopterror": [67, 116, 225], "logger": [67, 116, 123, 166, 265, 266, 280, 329, 352, 382, 384, 461, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479], "setlevel": [67, 99, 100, 116, 123, 264, 280, 461, 479], "isenabledfor": [67, 99, 100, 116, 264, 465, 479], "geteffectivelevel": [67, 116, 264], "getchild": [67, 116, 264, 465], "getchildren": [67, 116, 264, 465, 471, 477, 478, 479], "addfilt": [67, 99, 100, 116, 264], "removefilt": [67, 99, 116, 264], "addhandl": [67, 99, 100, 116, 264, 467], "removehandl": [67, 99, 100, 116, 184, 264, 384, 465], "findcal": [67, 116, 264], "makerecord": [67, 100, 116, 264], "hashandl": [67, 116, 264], "notset": [67, 99, 116, 264, 265, 280], "createlock": [67, 116, 264, 266], "setformatt": [67, 99, 100, 116, 264, 266], "handleerror": [67, 99, 116, 264, 266], "formattim": [67, 116, 264], "formatexcept": [67, 100, 116, 264], "formatstack": [67, 116, 264], "bufferingformatt": [67, 99, 116, 264], "formathead": [67, 116, 264], "formatfoot": [67, 116, 264], "logrecord": [67, 99, 116, 266, 384, 461, 473, 479], "getmessag": [67, 100, 116, 264, 270, 410], "loggeradapt": [67, 116, 465, 479], "getlogg": [67, 99, 100, 116, 123, 264, 384, 461, 465, 467, 478, 479], "getloggerclass": [67, 116, 264], "getlogrecordfactori": [67, 100, 116, 264], "addlevelnam": [67, 116, 264], "getlevelnamesmap": [67, 116, 264, 469, 479], "getlevelnam": [67, 100, 116, 264], "gethandlerbynam": [67, 116, 264, 265, 479], "gethandlernam": [67, 116, 264, 479], "makelogrecord": [67, 100, 116, 264, 266], "basicconfig": [67, 92, 99, 100, 116, 123, 166, 264, 462, 471, 472, 477, 479], "setloggerclass": [67, 100, 116, 264], "setlogrecordfactori": [67, 100, 116, 264], "lastresort": [67, 99, 116, 264, 471], "capturewarn": [67, 116, 264, 396], "dictconfig": [67, 99, 116, 265, 266, 465, 471, 479], "fileconfig": [67, 99, 100, 116, 265, 465, 473, 476, 479], "listen": [67, 83, 104, 116, 124, 161, 219, 242, 265, 266, 285, 310, 326, 332, 334, 335, 338, 358, 380, 403, 415, 461, 464, 465, 473, 474, 479], "stoplisten": [67, 100, 116, 265], "schema": [67, 92, 116, 278, 337, 347, 465, 479], "queuehandl": [67, 99, 116, 479], "queuelisten": [67, 116, 474, 479], "streamhandl": [67, 99, 100, 116, 264, 265, 471, 476, 479], "setstream": [67, 116, 266, 278, 347, 476, 479], "filehandl": [67, 99, 100, 107, 116, 253, 264, 265, 464, 479], "nullhandl": [67, 99, 116, 467], "watchedfilehandl": [67, 99, 116, 464, 475], "reopenifneed": [67, 116, 266, 475], "baserotatinghandl": [67, 99, 116, 462], "namer": [67, 116, 266, 479], "rotation_filenam": [67, 116, 266], "rotatingfilehandl": [67, 99, 100, 116, 265, 462, 464, 465], "dorollov": [67, 116, 266], "timedrotatingfilehandl": [67, 99, 116, 462, 464, 473, 479], "getfilestodelet": [67, 116, 266], "sockethandl": [67, 99, 100, 116, 265, 469, 473], "makesocket": [67, 116, 266], "makepickl": [67, 100, 116, 266], "createsocket": [67, 116, 266, 469, 479], "datagramhandl": [67, 99, 116, 265, 473], "sysloghandl": [67, 99, 116, 265, 352, 465, 469, 472, 479], "encodeprior": [67, 116, 266], "mapprior": [67, 116, 266], "nteventloghandl": [67, 99, 116, 265], "geteventcategori": [67, 116, 266], "geteventtyp": [67, 116, 266], "getmessageid": [67, 116, 266], "smtphandler": [67, 99, 100, 116, 265, 479], "getsubject": [67, 116, 266], "memoryhandl": [67, 99, 100, 116, 265, 479], "bufferinghandl": [67, 100, 116, 266], "shouldflush": [67, 116, 266], "settarget": [67, 116, 266, 479], "httphandler": [67, 99, 100, 107, 116, 253, 265, 474, 479], "maplogrecord": [67, 116, 266], "enqueu": [67, 100, 116, 266, 280, 479], "dequeu": [67, 100, 116, 266, 479], "enqueue_sentinel": [67, 116, 266], "getpass": [67, 116, 170, 245, 251, 279, 290, 302, 355, 357, 464, 479], "getpasswarn": [67, 116, 226], "getus": [67, 116, 226, 245, 290, 302], "baudrat": [67, 116, 174], "beep": [67, 116, 174, 400, 402, 475], "can_change_color": [67, 91, 116, 174], "cbreak": [67, 91, 116, 174, 379], "color_cont": [67, 116, 174, 468], "color_pair": [67, 91, 116, 174, 479], "curs_set": [67, 91, 116, 174], "def_prog_mod": [67, 116, 174], "def_shell_mod": [67, 116, 174], "delay_output": [67, 116, 174], "doupdat": [67, 91, 116, 174, 176], "echo": [67, 88, 91, 112, 116, 124, 128, 135, 139, 167, 174, 226, 244, 259, 279, 290, 296, 326, 328, 334, 345, 357, 384, 426, 446, 464, 479], "endwin": [67, 91, 116, 174], "erasechar": [67, 116, 174], "flash": [67, 91, 116, 174, 479], "flushinp": [67, 116, 174], "getmous": [67, 116, 174], "getsyx": [67, 116, 174], "getwin": [67, 116, 174], "has_color": [67, 91, 116, 174], "has_extended_color_support": [67, 116, 174, 468, 479], "has_ic": [67, 116, 174], "has_il": [67, 116, 174], "has_key": [67, 110, 116, 174, 458, 459, 460, 461, 466, 479], "halfdelay": [67, 91, 116, 174], "init_color": [67, 116, 174, 468], "init_pair": [67, 91, 116, 174, 468], "initscr": [67, 91, 116, 174], "is_term_res": [67, 116, 174], "isendwin": [67, 116, 174], "keynam": [67, 116, 174], "killchar": [67, 116, 174], "longnam": [67, 116, 174, 354, 479], "mouseinterv": [67, 116, 174], "mousemask": [67, 116, 174], "napm": [67, 116, 174], "newpad": [67, 91, 116, 174], "newwin": [67, 91, 116, 174], "nl": [67, 116, 174, 175, 237, 261, 334, 373, 374, 390, 422, 431, 464, 479], "nocbreak": [67, 91, 116, 174], "noecho": [67, 91, 116, 174], "nonl": [67, 116, 174], "noqiflush": [67, 116, 174], "noraw": [67, 116, 174], "pair_cont": [67, 116, 174, 468], "pair_numb": [67, 116, 174], "putp": [67, 116, 174], "qiflush": [67, 116, 174], "reset_prog_mod": [67, 116, 174], "reset_shell_mod": [67, 116, 174], "resetti": [67, 116, 174], "resize_term": [67, 116, 174], "resizeterm": [67, 116, 174], "savetti": [67, 116, 174], "get_escdelay": [67, 116, 174, 478, 479], "set_escdelay": [67, 116, 174, 478, 479], "get_tabs": [67, 116, 174, 478, 479], "set_tabs": [67, 116, 174, 478, 479], "setsyx": [67, 116, 174], "setupterm": [67, 116, 174], "start_color": [67, 91, 116, 174], "termattr": [67, 116, 174], "termnam": [67, 116, 174], "tigetflag": [67, 116, 174], "tigetnum": [67, 116, 174], "tigetstr": [67, 116, 174], "tparm": [67, 116, 174], "typeahead": [67, 116, 174], "unctrl": [67, 116, 174, 175], "ungetch": [67, 116, 174, 279, 400], "update_lines_col": [67, 116, 174, 474, 479], "unget_wch": [67, 116, 174, 472, 479], "ungetmous": [67, 116, 174, 479], "use_env": [67, 116, 174], "use_default_color": [67, 116, 174, 462], "addch": [67, 89, 91, 116, 174, 479], "addnstr": [67, 116, 174], "addstr": [67, 91, 116, 174, 479], "attroff": [67, 116, 174], "attron": [67, 116, 174], "attrset": [67, 116, 174], "bkgd": [67, 116, 174], "bkgdset": [67, 116, 174], "border": [67, 91, 116, 174, 365, 372, 390], "box": [67, 91, 100, 116, 174, 244, 268, 365, 369, 371, 372, 382, 426, 475, 476, 477, 479], "chgat": [67, 116, 174, 464], "clearok": [67, 116, 174], "clrtobot": [67, 116, 174], "clrtoeol": [67, 116, 174], "cursyncup": [67, 116, 174], "delch": [67, 116, 174], "deleteln": [67, 116, 174], "derwin": [67, 116, 174], "echochar": [67, 116, 174], "enclos": [67, 72, 86, 89, 103, 116, 157, 174, 222, 239, 245, 252, 259, 285, 294, 316, 328, 342, 358, 361, 363, 382, 384, 406, 423, 425, 426, 430, 431, 432, 436, 445, 459, 460, 463, 469, 470, 471, 477, 479], "eras": [67, 84, 91, 100, 116, 174, 341, 355], "getbegyx": [67, 116, 174], "getbkgd": [67, 116, 174], "getch": [67, 85, 91, 116, 174, 279, 400], "get_wch": [67, 116, 174, 472], "getkey": [67, 91, 116, 174, 479], "getmaxyx": [67, 116, 174], "getparyx": [67, 116, 174], "getstr": [67, 91, 116, 174, 278, 347, 464, 479], "getyx": [67, 116, 174], "hline": [67, 116, 174], "idcok": [67, 116, 174], "idlok": [67, 116, 174], "immedok": [67, 116, 174], "inch": [67, 116, 174, 365], "insch": [67, 116, 174], "insdelln": [67, 116, 174], "insertln": [67, 116, 174], "insnstr": [67, 116, 174], "insstr": [67, 116, 174], "instr": [67, 116, 174, 188, 358, 473, 479], "is_linetouch": [67, 116, 174], "is_wintouch": [67, 116, 174], "keypad": [67, 91, 116, 174], "leaveok": [67, 91, 116, 174], "mvderwin": [67, 116, 174], "mvwin": [67, 116, 174], "nodelay": [67, 91, 116, 174], "notimeout": [67, 116, 174], "noutrefresh": [67, 91, 116, 174], "overlay": [67, 116, 174], "overwrit": [67, 72, 89, 99, 100, 110, 116, 147, 160, 174, 178, 193, 197, 202, 255, 264, 266, 267, 290, 317, 327, 341, 354, 391, 417, 418, 423, 424, 437, 457, 461, 464, 465, 467, 470, 471, 472, 473, 479], "putwin": [67, 116, 174], "redrawln": [67, 116, 174], "redrawwin": [67, 116, 174], "refresh": [67, 91, 116, 157, 174, 285, 365, 372, 463, 478, 479], "scroll": [67, 91, 116, 153, 174, 244, 251, 364, 365, 372, 479], "scrollok": [67, 116, 174], "setscrreg": [67, 116, 174], "standend": [67, 116, 174], "standout": [67, 116, 174], "subpad": [67, 116, 174], "subwin": [67, 116, 174], "syncdown": [67, 116, 174], "syncok": [67, 116, 174], "syncup": [67, 116, 174], "timeout": [67, 100, 104, 107, 113, 116, 122, 124, 127, 132, 133, 135, 136, 161, 163, 166, 174, 182, 220, 239, 245, 253, 265, 266, 280, 285, 294, 302, 313, 325, 326, 330, 332, 335, 337, 338, 345, 355, 358, 361, 362, 377, 382, 391, 452, 461, 464, 465, 468, 469, 471, 472, 474, 477, 478, 479], "touchlin": [67, 116, 174], "touchwin": [67, 116, 174], "untouchwin": [67, 116, 174], "vline": [67, 116, 174, 479], "err": [67, 91, 116, 174, 210, 225, 266, 311, 345, 384, 415, 422, 439, 472], "__version__": [67, 116, 174, 187, 242, 384, 472, 474, 478, 479], "ncurses_vers": [67, 116, 174, 477, 479], "color": [67, 84, 86, 93, 100, 116, 153, 157, 159, 174, 186, 208, 219, 237, 251, 328, 364, 365, 371, 372, 374, 401, 424, 437, 438, 468, 469, 471, 475, 476, 479], "col": [67, 91, 116, 174, 244, 342, 474, 479], "a_altcharset": [67, 116, 174], "a_blink": [67, 91, 116, 174], "a_bold": [67, 91, 116, 174, 464], "a_dim": [67, 91, 116, 174], "a_invi": [67, 116, 174], "a_ital": [67, 116, 174, 479], "a_norm": [67, 116, 174], "a_protect": [67, 116, 174], "a_revers": [67, 91, 116, 174], "a_standout": [67, 91, 116, 174], "a_underlin": [67, 91, 116, 174], "a_horizont": [67, 116, 174], "a_left": [67, 116, 174], "a_low": [67, 116, 174], "a_right": [67, 116, 174], "a_top": [67, 116, 174], "a_vert": [67, 116, 174], "a_attribut": [67, 116, 174], "a_chartext": [67, 116, 174], "a_color": [67, 116, 174], "key_min": [67, 116, 174], "key_break": [67, 116, 174], "key_down": [67, 116, 174], "key_up": [67, 91, 116, 174], "key_left": [67, 91, 116, 174], "key_right": [67, 116, 174], "key_hom": [67, 91, 116, 174], "key_backspac": [67, 116, 174], "key_f0": [67, 116, 174], "key_fn": [67, 116, 174], "key_dl": [67, 116, 174], "key_il": [67, 116, 174], "key_dc": [67, 116, 174], "key_ic": [67, 116, 174], "key_eic": [67, 116, 174], "key_clear": [67, 116, 174], "key_eo": [67, 116, 174], "key_eol": [67, 116, 174], "key_sf": [67, 116, 174], "key_sr": [67, 116, 174], "key_npag": [67, 116, 174], "key_ppag": [67, 91, 116, 174], "key_stab": [67, 116, 174], "key_ctab": [67, 116, 174], "key_catab": [67, 116, 174], "key_ent": [67, 116, 174], "key_sreset": [67, 116, 174], "key_reset": [67, 116, 174], "key_print": [67, 116, 174], "key_ll": [67, 116, 174], "key_a1": [67, 116, 174], "key_a3": [67, 116, 174], "key_b2": [67, 116, 174], "key_c1": [67, 116, 174], "key_c3": [67, 116, 174], "key_btab": [67, 116, 174], "key_beg": [67, 116, 174], "key_cancel": [67, 116, 174], "key_clos": [67, 116, 174], "key_command": [67, 116, 174], "key_copi": [67, 116, 174], "key_creat": [67, 116, 174], "key_end": [67, 116, 174], "key_exit": [67, 116, 174], "key_find": [67, 116, 174], "key_help": [67, 116, 174], "key_mark": [67, 116, 174], "key_messag": [67, 116, 174], "key_mov": [67, 116, 174], "key_next": [67, 116, 174], "key_open": [67, 116, 174], "key_opt": [67, 116, 174], "key_previ": [67, 116, 174], "key_redo": [67, 116, 174], "key_refer": [67, 116, 174], "key_refresh": [67, 116, 174], "key_replac": [67, 116, 174], "key_restart": [67, 116, 174], "key_resum": [67, 116, 174], "key_sav": [67, 116, 174], "key_sbeg": [67, 116, 174], "key_scancel": [67, 116, 174], "key_scommand": [67, 116, 174], "key_scopi": [67, 116, 174], "key_screat": [67, 116, 174], "key_sdc": [67, 116, 174], "key_sdl": [67, 116, 174], "key_select": [67, 116, 174], "key_send": [67, 116, 174], "key_seol": [67, 116, 174], "key_sexit": [67, 116, 174], "key_sfind": [67, 116, 174], "key_shelp": [67, 116, 174], "key_shom": [67, 116, 174], "key_sic": [67, 116, 174], "key_sleft": [67, 116, 174], "key_smessag": [67, 116, 174], "key_smov": [67, 116, 174], "key_snext": [67, 116, 174], "key_sopt": [67, 116, 174], "key_sprevi": [67, 116, 174], "key_sprint": [67, 116, 174], "key_sredo": [67, 116, 174], "key_sreplac": [67, 116, 174], "key_sright": [67, 116, 174], "key_srsum": [67, 116, 174], "key_ssav": [67, 116, 174], "key_ssuspend": [67, 116, 174], "key_sundo": [67, 116, 174], "key_suspend": [67, 116, 174], "key_undo": [67, 116, 174], "key_mous": [67, 116, 174], "key_res": [67, 116, 174], "key_max": [67, 116, 174], "acs_bbss": [67, 116, 174], "acs_block": [67, 116, 174], "acs_board": [67, 116, 174], "acs_bsb": [67, 116, 174], "acs_bssb": [67, 116, 174], "acs_bsss": [67, 116, 174], "acs_bte": [67, 116, 174], "acs_bullet": [67, 116, 174], "acs_ckboard": [67, 116, 174], "acs_darrow": [67, 116, 174], "acs_degre": [67, 116, 174], "acs_diamond": [67, 116, 174], "acs_gequ": [67, 116, 174], "acs_hlin": [67, 116, 174], "acs_lantern": [67, 116, 174], "acs_larrow": [67, 116, 174], "acs_lequ": [67, 116, 174], "acs_llcorn": [67, 116, 174], "acs_lrcorn": [67, 116, 174], "acs_lte": [67, 116, 174], "acs_nequ": [67, 116, 174], "acs_pi": [67, 116, 174], "acs_plminus": [67, 91, 116, 174], "acs_plus": [67, 116, 174], "acs_rarrow": [67, 116, 174], "acs_rte": [67, 116, 174], "acs_s1": [67, 116, 174], "acs_s3": [67, 116, 174], "acs_s7": [67, 116, 174], "acs_s9": [67, 116, 174], "acs_sbb": [67, 116, 174], "acs_sbsb": [67, 116, 174], "acs_sbss": [67, 116, 174], "acs_ssbb": [67, 116, 174], "acs_ssb": [67, 116, 174], "acs_sssb": [67, 116, 174], "acs_ssss": [67, 116, 174], "acs_sterl": [67, 116, 174], "acs_tte": [67, 116, 174], "acs_uarrow": [67, 116, 174], "acs_ulcorn": [67, 91, 116, 174], "acs_urcorn": [67, 116, 174], "acs_vlin": [67, 116, 174], "buttonn_press": [67, 116, 174], "buttonn_releas": [67, 116, 174], "buttonn_click": [67, 116, 174], "buttonn_double_click": [67, 116, 174], "buttonn_triple_click": [67, 116, 174], "button_shift": [67, 116, 174], "button_ctrl": [67, 116, 174], "button_alt": [67, 116, 174], "color_black": [67, 91, 116, 174], "color_blu": [67, 116, 174], "color_cyan": [67, 116, 174], "color_green": [67, 116, 174], "color_magenta": [67, 116, 174], "color_r": [67, 91, 116, 174], "color_whit": [67, 91, 116, 174], "color_yellow": [67, 116, 174], "textpad": [67, 91, 116, 251, 464, 479], "rectangl": [67, 72, 91, 116, 174, 178], "textbox": [67, 91, 116, 464, 479], "do_command": [67, 116, 174], "gather": [67, 91, 96, 116, 118, 122, 132, 135, 137, 174, 208, 290, 305, 334, 376, 384, 452, 469, 474, 476, 477, 479], "stripspac": [67, 116, 174], "soh": [67, 116, 175], "stx": [67, 116, 175], "etx": [67, 116, 175], "eot": [67, 104, 116, 175], "enq": [67, 116, 175], "bel": [67, 116, 175, 431, 461, 462, 463, 464, 465, 471, 472], "bs": [67, 116, 174, 175, 431], "ht": [67, 116, 175, 219, 340, 380], "vt": [67, 116, 173, 175, 382, 431], "ff": [67, 116, 175, 187, 222, 316, 431], "cr": [67, 116, 174, 175, 205, 431, 476, 479], "si": [67, 72, 116, 175, 345], "dle": [67, 116, 175], "dc1": [67, 116, 175], "dc2": [67, 116, 175], "dc3": [67, 116, 175], "dc4": [67, 116, 175], "nak": [67, 116, 175], "syn": [67, 116, 175], "etb": [67, 116, 175], "em": [67, 116, 175, 316], "esc": [67, 116, 175], "fs": [67, 100, 116, 163, 175, 290, 340, 479], "gs": [67, 116, 175], "rs": [67, 116, 174, 175], "us": [67, 75, 88, 93, 94, 116, 155, 158, 175, 180, 192, 193, 199, 203, 206, 220, 263, 281, 296, 315, 316, 329, 338, 362, 382, 385, 386, 390, 391, 403, 409, 422, 424, 456, 457, 463, 479], "sp": [67, 116, 175, 232, 237], "isblank": [67, 116, 175, 479], "iscntrl": [67, 116, 175, 479], "isgraph": [67, 116, 175], "ispunct": [67, 116, 175, 479], "isxdigit": [67, 116, 175], "isctrl": [67, 116, 175], "ismeta": [67, 116, 175], "alt": [67, 116, 174, 175, 237, 244, 372, 458, 479], "controlnam": [67, 116, 175], "panel": [67, 82, 116, 174, 251, 402, 459, 479], "bottom_panel": [67, 116, 176], "new_panel": [67, 116, 176], "top_panel": [67, 116, 176], "update_panel": [67, 116, 176], "bottom": [67, 72, 83, 89, 94, 98, 116, 118, 173, 174, 176, 188, 255, 264, 290, 293, 294, 338, 365, 372, 380, 382, 385, 386, 424, 431, 457, 458, 460, 461, 479], "hide": [67, 91, 96, 106, 116, 176, 190, 191, 213, 244, 255, 289, 345, 358, 363, 364, 372, 380, 382, 396, 423, 457, 461, 465, 470, 471, 478, 479], "set_userptr": [67, 116, 176], "userptr": [67, 116, 176, 479], "architectur": [67, 101, 116, 210, 269, 276, 300, 330, 344, 351, 364, 406, 417, 424, 452, 456, 457, 461, 462, 464, 472, 474, 478, 479], "node": [67, 116, 229, 232, 256, 261, 270, 290, 291, 293, 300, 334, 338, 349, 372, 373, 394, 407, 408, 409, 411, 448, 452, 458, 461, 463, 464, 465, 468, 471, 475, 476, 477, 478, 479], "python_build": [67, 116, 300, 479], "python_compil": [67, 116, 300], "python_branch": [67, 116, 300, 479], "python_implement": [67, 116, 300], "python_revis": [67, 116, 300, 479], "python_vers": [67, 116, 300], "python_version_tupl": [67, 116, 300], "system_alia": [67, 116, 300], "java_v": [67, 116, 300], "win32_ver": [67, 116, 300, 479], "win32_edit": [67, 116, 300, 479], "win32_is_iot": [67, 116, 300, 479], "mac_ver": [67, 116, 300, 479], "libc_ver": [67, 116, 300, 479], "freedesktop_os_releas": [67, 116, 300, 468, 479], "errorcod": [67, 116, 209, 270, 311], "eperm": [67, 116, 209, 210, 472, 479], "enoent": [67, 116, 209, 210, 325, 472, 479], "esrch": [67, 116, 209, 210], "eio": [67, 116, 209], "enxio": [67, 116, 209], "e2big": [67, 116, 209], "enoexec": [67, 116, 209], "ebadf": [67, 116, 209, 325, 475, 478, 479], "echild": [67, 116, 209, 210], "eagain": [67, 116, 209, 210, 212, 290], "enomem": [67, 116, 209, 479], "eacc": [67, 116, 209, 210, 212, 247, 472, 479], "efault": [67, 116, 209], "enotblk": [67, 116, 209], "ebusi": [67, 116, 209], "eexist": [67, 116, 209, 210, 290, 479], "exdev": [67, 116, 209, 290], "enodev": [67, 116, 209], "enotdir": [67, 116, 209, 210], "eisdir": [67, 116, 209, 210], "einval": [67, 116, 209, 290, 479], "enfil": [67, 116, 209], "emfil": [67, 116, 209, 479], "enotti": [67, 116, 209, 479], "etxtbsi": [67, 116, 209], "efbig": [67, 116, 209], "enospc": [67, 116, 209], "espip": [67, 116, 209], "erof": [67, 116, 209], "emlink": [67, 116, 209], "epip": [67, 116, 209, 210, 330], "erang": [67, 116, 209], "edeadlk": [67, 116, 209], "enametoolong": [67, 116, 209], "enolck": [67, 116, 209], "enosi": [67, 116, 209, 479], "enotempti": [67, 116, 209], "eloop": [67, 116, 209], "ewouldblock": [67, 116, 209, 210], "enomsg": [67, 116, 209], "eidrm": [67, 116, 209], "echrng": [67, 116, 209], "el2nsync": [67, 116, 209], "el3hlt": [67, 116, 209], "el3rst": [67, 116, 209], "elnrng": [67, 116, 209], "eunatch": [67, 116, 209], "enocsi": [67, 116, 209], "el2hlt": [67, 116, 209], "ebad": [67, 116, 209], "ebadr": [67, 116, 209], "exful": [67, 116, 209], "enoano": [67, 116, 209], "ebadrqc": [67, 116, 209], "ebadslt": [67, 116, 209], "edeadlock": [67, 116, 209], "ebfont": [67, 116, 209], "enostr": [67, 116, 209], "enodata": [67, 116, 209, 290], "etim": [67, 116, 209], "enosr": [67, 116, 209], "enonet": [67, 116, 209], "enopkg": [67, 116, 209], "eremot": [67, 116, 209], "enolink": [67, 116, 209], "eadv": [67, 116, 209], "esrmnt": [67, 116, 209], "ecomm": [67, 116, 209], "eproto": [67, 116, 209], "emultihop": [67, 116, 209], "edotdot": [67, 116, 209], "ebadmsg": [67, 116, 209], "eoverflow": [67, 116, 209], "enotuniq": [67, 116, 209], "ebadfd": [67, 116, 209], "eremchg": [67, 116, 209], "elibacc": [67, 116, 209], "elibbad": [67, 116, 209], "elibscn": [67, 116, 209], "elibmax": [67, 116, 209], "elibexec": [67, 116, 209], "eilseq": [67, 116, 209], "erestart": [67, 116, 209], "estrpip": [67, 116, 209], "euser": [67, 116, 209], "enotsock": [67, 116, 209], "edestaddrreq": [67, 116, 209], "emsgsiz": [67, 116, 209], "eprototyp": [67, 116, 209], "enoprotoopt": [67, 116, 209], "eprotonosupport": [67, 116, 209], "esocktnosupport": [67, 116, 209], "eopnotsupp": [67, 116, 209], "epfnosupport": [67, 116, 209], "eafnosupport": [67, 116, 209], "eaddrinus": [67, 116, 209], "eaddrnotavail": [67, 116, 209], "enetdown": [67, 116, 209], "enetunreach": [67, 116, 209, 479], "enetreset": [67, 116, 209], "econnabort": [67, 116, 209, 210], "econnreset": [67, 116, 209, 210, 479], "enobuf": [67, 116, 131, 209, 479], "eisconn": [67, 83, 116, 209], "enotconn": [67, 116, 209, 473], "eshutdown": [67, 116, 209, 210], "etoomanyref": [67, 116, 209], "etimedout": [67, 116, 209, 210, 464], "econnrefus": [67, 116, 209, 210], "ehostdown": [67, 116, 209], "ehostunreach": [67, 116, 209], "ealreadi": [67, 116, 209, 210], "einprogress": [67, 83, 116, 209, 210], "estal": [67, 116, 209], "euclean": [67, 116, 209], "enotnam": [67, 116, 209], "enavail": [67, 116, 209], "eisnam": [67, 116, 209], "eremoteio": [67, 116, 209], "edquot": [67, 116, 209], "eqful": [67, 116, 209, 479], "enotcap": [67, 116, 209, 210, 479], "foreign": [67, 102, 116, 164, 251, 329, 337, 354], "cdll": [67, 116, 173, 463, 477, 479], "oledl": [67, 116, 173, 464, 479], "windll": [67, 116, 173, 464, 479], "pydll": [67, 116, 173, 479], "_handl": [67, 116, 173], "_name": [67, 92, 116, 173, 178, 193, 202, 479], "libraryload": [67, 116, 173], "loadlibrari": [67, 116, 173], "_funcptr": [67, 116, 173], "restyp": [67, 116, 173, 463], "argtyp": [67, 116, 120, 173, 479], "errcheck": [67, 116, 173], "cfunctyp": [67, 116, 173, 479], "winfunctyp": [67, 116, 173, 479], "pyfunctyp": [67, 116, 173], "addressof": [67, 116, 140, 173], "byref": [67, 116, 173, 464], "create_string_buff": [67, 116, 140, 173, 463], "create_unicode_buff": [67, 116, 140, 173, 479], "dllcanunloadnow": [67, 116, 173], "dllgetclassobject": [67, 116, 173], "find_librari": [67, 116, 173, 475, 479], "find_msvcrt": [67, 116, 173], "formaterror": [67, 116, 173, 268, 282], "get_errno": [67, 116, 140, 173, 464], "get_last_error": [67, 116, 140, 173, 464], "memmov": [67, 116, 173, 464], "set_errno": [67, 116, 140, 173, 464], "set_last_error": [67, 116, 140, 173, 464], "string_at": [67, 116, 140, 173, 211, 472], "wstring_at": [67, 116, 140, 173], "_cdata": [67, 116, 173, 479], "from_buff": [67, 116, 173, 464, 479], "from_buffer_copi": [67, 116, 173, 464, 479], "from_address": [67, 116, 173], "from_param": [67, 116, 173, 479], "in_dll": [67, 116, 173], "_b_base_": [67, 116, 173], "_b_needsfree_": [67, 116, 173], "_object": [67, 116, 173], "_simplecdata": [67, 116, 173], "c_byte": [67, 116, 173, 479], "c_char": [67, 116, 173, 280], "c_char_p": [67, 116, 173, 463], "c_doubl": [67, 116, 173, 280, 463, 479], "c_longdoubl": [67, 116, 173, 479], "c_float": [67, 116, 173, 463], "c_int": [67, 116, 173, 280, 463, 479], "c_int8": [67, 116, 173], "c_int16": [67, 116, 173], "c_int32": [67, 116, 173], "c_int64": [67, 116, 173], "c_long": [67, 116, 173, 341], "c_longlong": [67, 116, 173], "c_short": [67, 116, 173, 280], "c_size_t": [67, 116, 173], "c_ssize_t": [67, 116, 173, 471], "c_time_t": [67, 116, 173, 479], "c_ubyt": [67, 116, 173, 479], "c_uint": [67, 116, 173], "c_uint8": [67, 116, 173, 479], "c_uint16": [67, 116, 173], "c_uint32": [67, 116, 173], "c_uint64": [67, 116, 173], "c_ulong": [67, 116, 173], "c_ulonglong": [67, 116, 173], "c_ushort": [67, 116, 173], "c_void_p": [67, 116, 173], "c_wchar": [67, 116, 173], "c_wchar_p": [67, 116, 173, 479], "c_bool": [67, 116, 173, 464], "hresult": [67, 116, 173], "py_object": [67, 116, 173, 463, 479], "bigendianunion": [67, 116, 173, 479], "littleendianunion": [67, 116, 173, 479], "bigendianstructur": [67, 116, 173, 341, 479], "littleendianstructur": [67, 116, 173, 479], "_fields_": [67, 116, 173, 280, 341, 479], "_pack_": [67, 116, 173], "_anonymous_": [67, 116, 173, 479], "_length_": [67, 116, 173, 479], "_type_": [67, 116, 173], "_pointer": [67, 116, 173], "active_count": [67, 161, 244, 280, 361, 464, 468, 479], "current_thread": [67, 83, 161, 280, 335, 361, 468, 479], "excepthook": [67, 140, 150, 161, 312, 349, 358, 361, 446, 459, 468, 477, 478, 479], "__excepthook__": [67, 161, 312, 349, 361, 446, 468, 479], "get_id": [67, 113, 161, 261, 330, 348, 361, 362, 472], "get_native_id": [67, 113, 161, 361, 477, 479], "main_thread": [67, 161, 361, 473], "settrace_all_thread": [67, 161, 361, 470, 479], "gettrac": [67, 161, 312, 349, 361, 446, 464, 468, 479], "setprofile_all_thread": [67, 161, 361, 470, 479], "getprofil": [67, 161, 312, 349, 361, 446, 464, 468, 479], "stack_siz": [67, 113, 161, 361, 463, 479], "timeout_max": [67, 113, 161, 361], "setnam": [67, 161, 361, 468, 479], "native_id": [67, 161, 361, 477, 479], "is_al": [67, 161, 280, 361, 464, 478, 479], "isdaemon": [67, 161, 361, 464, 468, 479], "setdaemon": [67, 161, 361, 464, 468, 479], "rlock": [67, 161, 166, 280, 464, 468, 471, 474, 479], "wait_for": [67, 122, 132, 135, 136, 137, 161, 280, 361, 469, 477, 478, 479], "notify_al": [67, 136, 161, 361, 468, 479], "semaphor": [67, 83, 96, 113, 122, 161, 209, 280, 290, 349, 358, 448, 464, 471, 472, 477, 478, 479], "boundedsemaphor": [67, 122, 161, 280, 361, 472, 477, 479], "is_set": [67, 136, 161, 361, 468, 479], "timer": [67, 91, 96, 161, 182, 209, 211, 280, 325, 330, 362, 363, 365, 372, 380, 447, 460, 461, 464, 472, 474, 475, 476, 479], "barrier": [67, 122, 161, 280, 380, 469, 471, 479], "n_wait": [67, 136, 161, 361], "brokenbarriererror": [67, 122, 136, 161, 361, 469, 471], "exchang": [67, 71, 124, 161, 173, 209, 232, 275, 290, 338, 344, 354, 361, 464, 465, 471, 472, 479], "synchron": [67, 113, 121, 137, 161, 166, 175, 181, 183, 209, 223, 247, 255, 275, 290, 327, 330, 335, 338, 358, 361, 365, 385, 394, 424, 448, 464, 470, 471, 474, 476, 479], "pool": [67, 72, 83, 122, 128, 161, 163, 220, 258, 281, 290, 315, 459, 461, 464, 465, 471, 472, 473, 475, 479], "worker": [67, 100, 132, 160, 161, 163, 229, 313, 361, 463, 464, 465, 474, 478, 479], "authkey": [67, 161, 280, 281], "processerror": [67, 161, 280], "buffertooshort": [67, 161, 280], "authenticationerror": [67, 161, 280], "qsize": [67, 132, 161, 280, 313], "put_nowait": [67, 100, 132, 161, 266, 280, 313], "get_nowait": [67, 132, 161, 258, 280, 313], "join_thread": [67, 161, 184, 280, 358, 479], "cancel_join_thread": [67, 161, 280], "simplequeu": [67, 161, 266, 280, 341, 476, 478, 479], "joinablequeu": [67, 161, 280, 474, 479], "task_don": [67, 132, 161, 280, 313, 463, 474, 479], "active_children": [67, 161, 280], "current_process": [67, 100, 161, 280], "parent_process": [67, 161, 280, 479], "freeze_support": [67, 161, 280], "get_all_start_method": [67, 161, 280, 473, 479], "get_context": [67, 124, 137, 161, 163, 280, 470, 473, 479], "get_start_method": [67, 161, 280, 473], "set_execut": [67, 161, 280, 479], "set_forkserver_preload": [67, 161, 280, 479], "set_start_method": [67, 161, 280, 470, 473], "recv": [67, 100, 104, 124, 161, 280, 324, 326, 330, 334, 335, 338, 358, 365, 465, 474, 479], "poll": [67, 83, 124, 130, 135, 161, 280, 290, 326, 330, 335, 338, 339, 345, 462, 464, 471, 472, 474, 478, 479], "send_byt": [67, 161, 280], "recv_byt": [67, 161, 280], "recv_bytes_into": [67, 161, 280], "primit": [67, 74, 83, 84, 113, 121, 122, 133, 134, 161, 173, 174, 184, 255, 296, 305, 316, 325, 326, 330, 338, 361, 448, 468, 472, 473, 476, 479], "sharedctyp": [67, 161, 474, 479], "rawarray": [67, 161, 280], "rawvalu": [67, 161, 280], "basemanag": [67, 161, 280, 281, 479], "get_serv": [67, 161, 280], "syncmanag": [67, 161, 280, 479], "remot": [67, 99, 100, 108, 119, 124, 131, 161, 167, 209, 239, 242, 245, 264, 265, 266, 334, 338, 355, 371, 391, 399, 401, 405, 410, 414, 415, 460, 471, 474, 479], "baseproxi": [67, 161, 280, 479], "_callmethod": [67, 161, 280], "_getvalu": [67, 161, 280], "apply_async": [67, 161, 280, 464], "map_async": [67, 161, 280, 464, 472], "imap": [67, 79, 110, 161, 191, 245, 280, 302, 390, 461, 462, 477, 479], "imap_unord": [67, 161, 280, 479], "starmap_async": [67, 161, 280, 472], "asyncresult": [67, 161, 280], "deliver_challeng": [67, 161, 280], "answer_challeng": [67, 161, 280], "last_accept": [67, 161, 280], "get_logg": [67, 161, 280], "log_to_stderr": [67, 161, 280, 479], "threadpool": [67, 161, 280, 479], "guidelin": [67, 74, 87, 98, 161, 244, 358, 458, 459, 463, 479], "spawn": [67, 100, 122, 128, 130, 135, 136, 140, 161, 163, 254, 290, 306, 335, 358, 361, 387, 473, 477, 478, 479], "forkserv": [67, 161, 473, 479], "shared_memori": [67, 161, 251, 349, 477, 479], "sharedmemori": [67, 161, 280, 281, 479], "sharedmemorymanag": [67, 161, 281, 479], "shareablelist": [67, 161, 281, 479], "shm": [67, 161, 281, 479], "executor": [67, 100, 123, 124, 133, 161, 471, 474, 478, 479], "submit": [67, 91, 100, 107, 137, 149, 161, 163, 244, 280, 422, 458, 465, 471, 474, 475, 476, 477, 479], "threadpoolexecutor": [67, 83, 123, 124, 161, 280, 361, 469, 471, 474, 475, 476, 477, 478, 479], "processpoolexecutor": [67, 83, 123, 124, 161, 280, 361, 471, 474, 476, 477, 478, 479], "add_done_callback": [67, 127, 137, 161, 163, 476, 479], "set_running_or_notify_cancel": [67, 161, 163], "set_result": [67, 127, 131, 137, 161, 163, 479], "set_except": [67, 123, 127, 137, 140, 161, 163, 173, 475, 479], "as_complet": [67, 122, 127, 137, 161, 163, 470, 477, 479], "cancellederror": [67, 122, 125, 127, 133, 136, 137, 161, 163, 477, 479], "brokenexecutor": [67, 161, 163], "invalidstateerror": [67, 125, 127, 137, 161, 163, 479], "brokenthreadpool": [67, 161, 163], "brokenprocesspool": [67, 161, 163], "completedprocess": [67, 161, 345, 474, 479], "returncod": [67, 130, 131, 135, 161, 345, 474, 477, 479], "check_returncod": [67, 161, 345], "subprocesserror": [67, 161, 345, 479], "timeoutexpir": [67, 161, 345], "calledprocesserror": [67, 161, 345, 465, 474, 479], "send_sign": [67, 128, 131, 135, 161, 345, 464, 479], "startupinfo": [67, 161, 345, 462, 476, 479], "dwflag": [67, 161, 345], "hstdinput": [67, 161, 345], "hstdoutput": [67, 161, 345], "hstderror": [67, 161, 345], "wshowwindow": [67, 161, 345], "lpattributelist": [67, 161, 345, 476], "std_input_handl": [67, 161, 345], "std_output_handl": [67, 161, 345], "std_error_handl": [67, 161, 345], "sw_hide": [67, 161, 345], "startf_usestdhandl": [67, 161, 345], "startf_useshowwindow": [67, 161, 345], "create_new_consol": [67, 161, 345], "create_new_process_group": [67, 135, 161, 345], "above_normal_priority_class": [67, 161, 345], "below_normal_priority_class": [67, 161, 345], "high_priority_class": [67, 161, 345], "idle_priority_class": [67, 161, 345], "normal_priority_class": [67, 161, 345], "realtime_priority_class": [67, 161, 345], "create_no_window": [67, 161, 345], "detached_process": [67, 161, 345], "create_default_error_mod": [67, 161, 345], "create_breakaway_from_job": [67, 161, 345], "check_cal": [67, 161, 345], "check_output": [67, 161, 184, 190, 345, 465, 473, 479], "sh": [67, 83, 100, 161, 298, 306, 328, 458, 479], "pipelin": [67, 161, 251, 347, 458, 479], "popen2": [67, 161, 462, 464], "popen3": [67, 161], "getstatusoutput": [67, 161, 345, 473, 479], "getoutput": [67, 161, 345, 479], "vfork": [67, 161, 479], "enterab": [67, 161, 322, 472], "lifoqueu": [67, 122, 132, 161, 313, 341, 464, 479], "priorityqueu": [67, 122, 132, 161, 313, 341, 464, 479], "old_valu": [67, 161, 167], "copy_context": [67, 161, 167], "locktyp": [67, 113, 161], "start_new_thread": [67, 113, 140, 161, 479], "interrupt_main": [67, 113, 161, 468, 479], "allocate_lock": [67, 113, 161], "interprocess": [67, 131, 251, 280, 334], "runner": [67, 100, 121, 122, 190, 384, 396, 462, 465, 469, 479], "get_loop": [67, 124, 127, 133, 476, 479], "keyboard": [67, 80, 85, 91, 174, 244, 330, 345, 372, 380, 384, 437, 464, 479], "task": [67, 72, 84, 86, 88, 89, 94, 98, 99, 103, 106, 108, 113, 121, 123, 125, 127, 128, 132, 133, 134, 136, 164, 166, 167, 198, 204, 233, 244, 256, 264, 266, 268, 280, 290, 293, 296, 305, 313, 319, 335, 337, 345, 361, 384, 390, 416, 426, 448, 452, 458, 460, 464, 465, 467, 469, 470, 471, 474, 475, 476, 477, 478, 479], "create_task": [67, 122, 123, 124, 126, 127, 128, 132, 136, 137, 469, 474, 476, 477, 479], "taskgroup": [67, 122, 137, 469, 479], "eager": [67, 355, 423, 470, 476, 479], "eager_task_factori": [67, 137, 470, 479], "create_eager_task_factori": [67, 137, 470], "shield": [67, 122, 477, 479], "reschedul": [67, 124, 137], "expir": [67, 124, 137, 209, 240, 241, 253, 280, 322, 326, 330, 332, 334, 336, 338, 345, 361, 362, 391, 472, 479], "timeout_at": [67, 137, 479], "to_thread": [67, 122, 137, 478, 479], "run_coroutine_threadsaf": [67, 122, 123, 137, 468, 474, 475, 479], "current_task": [67, 122, 126, 137, 470, 476, 478, 479], "all_task": [67, 122, 126, 137, 476, 478, 479], "iscoroutin": [67, 127, 137, 252, 312, 470, 474, 479], "remove_done_callback": [67, 127, 137, 479], "get_stack": [67, 137, 142, 182, 479], "print_stack": [67, 137, 264, 312, 377, 474, 479], "get_coro": [67, 137, 477, 479], "get_nam": [67, 137, 261, 348, 477, 479], "set_nam": [67, 92, 124, 137, 477, 479], "uncancel": [67, 137, 469, 479], "open_connect": [67, 122, 124, 131, 134, 474, 476, 479], "start_serv": [67, 122, 124, 131, 134, 167, 361, 476, 479], "open_unix_connect": [67, 122, 134], "start_unix_serv": [67, 122, 124, 134], "readexact": [67, 134, 475, 479], "readuntil": [67, 134, 474, 475, 479], "at_eof": [67, 134], "can_write_eof": [67, 128, 131, 134], "write_eof": [67, 128, 131, 134, 338, 479], "transport": [67, 121, 124, 127, 128, 134, 135, 167, 191, 195, 198, 203, 209, 332, 338, 414, 415, 460, 474, 475, 476, 479], "get_extra_info": [67, 128, 131, 134, 167, 477, 479], "drain": [67, 131, 134, 136, 338, 471, 479], "start_tl": [67, 124, 128, 134, 469, 476, 479], "is_clos": [67, 124, 128, 131, 134, 474, 475, 476, 479], "wait_clos": [67, 124, 134, 476, 479], "tcp": [67, 79, 83, 99, 100, 104, 122, 124, 128, 254, 266, 280, 332, 334, 335, 338, 358, 464, 465, 475, 476, 479], "create_subprocess_exec": [67, 122, 124, 130, 135, 345, 477, 479], "create_subprocess_shel": [67, 122, 124, 135, 477, 479], "maxsiz": [67, 84, 89, 92, 110, 132, 157, 217, 222, 223, 258, 280, 300, 312, 313, 341, 349, 358, 365, 424, 446, 466, 471, 477, 479], "lifo": [67, 122, 157, 313, 341, 384], "queueempti": [67, 132], "queueful": [67, 132], "sendfilenotavailableerror": [67, 124, 125], "incompletereaderror": [67, 125, 134, 479], "limitoverrunerror": [67, 125, 134, 479], "get_running_loop": [67, 124, 127, 128, 131, 134, 137, 476, 479], "get_event_loop": [67, 124, 128, 130, 470, 474, 475, 476, 479], "set_event_loop": [67, 124, 128, 129, 130, 133, 477, 479], "new_event_loop": [67, 124, 128, 130, 133, 477], "run_until_complet": [67, 124, 128, 474, 475, 477, 479], "run_forev": [67, 124, 128, 479], "is_run": [67, 124, 128], "shutdown_asyncgen": [67, 124, 128, 349, 426, 475, 479], "shutdown_default_executor": [67, 124, 133, 478, 479], "call_soon": [67, 123, 127, 128, 131, 134, 382, 476, 479], "call_soon_threadsaf": [67, 123, 124, 128, 476, 479], "call_lat": [67, 128, 476, 479], "call_at": [67, 123, 124, 128, 476], "create_futur": [67, 124, 126, 127, 128, 131, 474, 475, 479], "set_task_factori": [67, 124, 128, 137, 474, 479], "get_task_factori": [67, 124, 128, 474, 479], "create_connect": [67, 124, 126, 128, 131, 134, 334, 338, 464, 465, 469, 471, 474, 476, 477, 479], "create_datagram_endpoint": [67, 124, 128, 131, 469, 475, 476, 477, 478, 479], "create_unix_connect": [67, 124, 128, 129, 131, 134, 479], "create_serv": [67, 124, 128, 131, 134, 334, 474, 475, 476, 477, 479], "create_unix_serv": [67, 124, 128, 129, 131, 134, 476, 479], "connect_accepted_socket": [67, 124, 128, 131, 468, 475, 479], "tls": [67, 128, 134, 220, 239, 251, 257, 266, 302, 324, 332, 334, 358, 452, 456, 460, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479], "add_read": [67, 124, 128, 129, 131, 134, 479], "remove_read": [67, 124, 128], "add_writ": [67, 124, 128, 129, 479], "remove_writ": [67, 124, 128], "sock_recv": [67, 124, 128, 476, 479], "sock_recv_into": [67, 124, 128, 476, 479], "sock_recvfrom": [67, 124, 128, 469, 479], "sock_recvfrom_into": [67, 124, 128, 469, 479], "sock_sendal": [67, 124, 128, 476, 479], "sock_sendto": [67, 124, 128, 469, 479], "sock_connect": [67, 124, 128, 474, 479], "sock_accept": [67, 124, 128, 476, 479], "sock_sendfil": [67, 124, 128, 476, 479], "dns": [67, 100, 126, 128, 155, 256, 266, 334, 338, 394, 474, 479], "getaddrinfo": [67, 107, 124, 128, 140, 334, 422, 474, 475, 476, 479], "getnameinfo": [67, 124, 128, 140, 334, 422, 476, 479], "connect_read_pip": [67, 124, 128, 129, 131, 135, 479], "connect_write_pip": [67, 124, 128, 129, 131, 135, 479], "add_signal_handl": [67, 124, 128, 129, 479], "remove_signal_handl": [67, 124, 128, 129], "run_in_executor": [67, 123, 124, 128, 137, 478, 479], "set_default_executor": [67, 124, 128, 469, 477, 479], "set_exception_handl": [67, 124, 128], "get_exception_handl": [67, 124, 128, 474, 475, 479], "default_exception_handl": [67, 124, 128], "call_exception_handl": [67, 124, 128], "get_debug": [67, 124, 128, 224, 312, 474], "set_debug": [67, 123, 124, 128, 224, 312, 474], "subprocess_exec": [67, 124, 128, 129, 130, 135, 479], "subprocess_shel": [67, 124, 128, 129, 131, 135], "timerhandl": [67, 124, 479], "serve_forev": [67, 124, 131, 134, 167, 242, 253, 280, 330, 335, 403, 415, 416, 463, 464, 472, 476, 479], "is_serv": [67, 124, 476, 479], "selectoreventloop": [67, 124, 129, 130, 135, 469, 479], "proactoreventloop": [67, 124, 129, 130, 135, 469, 477, 479], "abstracteventloop": [67, 124, 126, 130, 478, 479], "hello": [67, 72, 74, 78, 84, 85, 100, 110, 112, 119, 127, 131, 133, 134, 135, 137, 144, 149, 173, 181, 223, 227, 232, 237, 275, 280, 285, 288, 296, 298, 301, 334, 335, 337, 338, 341, 356, 358, 360, 361, 364, 374, 382, 384, 385, 403, 431, 436, 438, 439, 442, 457, 471, 473, 474, 477, 478, 479], "world": [67, 72, 75, 78, 84, 91, 97, 100, 112, 127, 131, 134, 137, 144, 149, 166, 173, 180, 223, 227, 232, 245, 254, 275, 280, 288, 289, 296, 298, 307, 322, 334, 335, 337, 338, 341, 356, 358, 360, 361, 364, 374, 380, 384, 403, 406, 422, 431, 436, 439, 442, 466, 474, 475, 479], "sigterm": [67, 131, 135, 280, 330, 345, 464, 479], "isfutur": [67, 127, 479], "ensure_futur": [67, 127, 137, 474, 475, 479], "wrap_futur": [67, 127, 479], "basetransport": [67, 131, 134, 477], "writetransport": [67, 124, 131, 479], "readtransport": [67, 124, 131, 476, 479], "datagramtransport": [67, 131, 479], "subprocesstransport": [67, 124, 131], "set_protocol": [67, 128, 131, 479], "get_protocol": [67, 128, 131, 479], "is_read": [67, 128, 131, 476, 479], "pause_read": [67, 128, 131, 476, 479], "resume_read": [67, 128, 131, 476, 479], "get_write_buffer_s": [67, 128, 131], "get_write_buffer_limit": [67, 128, 131, 474, 479], "set_write_buffer_limit": [67, 128, 131], "datagram": [67, 124, 128, 266, 335, 338, 448, 469, 479], "sendto": [67, 124, 128, 131, 140, 334, 335, 474, 479], "get_pid": [67, 128, 131], "get_pipe_transport": [67, 128, 131], "get_returncod": [67, 128, 131], "baseprotocol": [67, 131], "bufferedprotocol": [67, 131, 476, 477, 479], "datagramprotocol": [67, 131, 469], "subprocessprotocol": [67, 124], "connection_mad": [67, 124, 128, 131, 479], "connection_lost": [67, 128, 131, 479], "pause_writ": [67, 128, 131], "resume_writ": [67, 128, 131], "data_receiv": [67, 128, 131, 479], "eof_receiv": [67, 128, 131], "get_buff": [67, 128, 131, 347, 404], "buffer_upd": [67, 128, 131], "datagram_receiv": [67, 128, 131], "error_receiv": [67, 128, 131], "pipe_data_receiv": [67, 128, 131, 479], "pipe_connection_lost": [67, 128, 131], "process_exit": [67, 128, 131, 479], "udp": [67, 99, 124, 128, 266, 334, 335, 358, 465, 469, 475, 476, 477, 478, 479], "get_event_loop_polici": [67, 124, 128, 130], "set_event_loop_polici": [67, 124, 128, 130], "abstracteventlooppolici": [67, 128, 130, 470, 479], "get_child_watch": [67, 130, 470, 479], "set_child_watch": [67, 129, 130, 470, 479], "defaulteventlooppolici": [67, 124, 130, 479], "windowsselectoreventlooppolici": [67, 130, 476, 479], "windowsproactoreventlooppolici": [67, 130, 476, 479], "abstractchildwatch": [67, 130, 470, 479], "add_child_handl": [67, 130], "remove_child_handl": [67, 130], "attach_loop": [67, 130, 479], "threadedchildwatch": [67, 130, 135, 470], "multiloopchildwatch": [67, 130, 470, 479], "safechildwatch": [67, 130, 470, 479], "fastchildwatch": [67, 130, 470, 479], "pidfdchildwatch": [67, 130, 470, 478, 479], "_register_task": [67, 126, 479], "_unregister_task": [67, 126, 479], "_enter_task": [67, 126, 479], "_leave_task": [67, 126, 479], "multithread": [67, 124, 135, 137, 232, 263, 280, 345, 355, 403, 461, 478, 479], "herror": [67, 334], "gaierror": [67, 334, 479], "af_unix": [67, 124, 129, 280, 334, 335, 479], "af_inet6": [67, 124, 334, 479], "sock_stream": [67, 100, 104, 124, 266, 334, 335, 338, 358, 465, 476], "sock_dgram": [67, 124, 266, 334, 335, 465], "sock_raw": [67, 334], "sock_rdm": [67, 334], "sock_seqpacket": [67, 334], "sock_cloexec": [67, 334, 476, 479], "sock_nonblock": [67, 334, 476, 479], "somaxconn": [67, 334, 474], "af_can": [67, 334, 479], "pf_can": [67, 334, 472], "can_bcm": [67, 334, 473], "can_raw_fd_fram": [67, 334, 474, 479], "can_raw_join_filt": [67, 334, 478, 479], "can_isotp": [67, 334, 479], "can_j1939": [67, 334, 478, 479], "af_divert": [67, 334], "pf_divert": [67, 334], "af_packet": [67, 334, 479], "pf_packet": [67, 334], "eth_p_al": [67, 334, 479], "af_rd": [67, 334], "pf_rds": [67, 334, 472], "sol_rd": [67, 334], "sio_rcval": [67, 334], "sio_keepalive_v": [67, 334], "sio_loopback_fast_path": [67, 334, 475, 479], "af_alg": [67, 334, 475, 479], "sol_alg": [67, 334, 475], "af_vsock": [67, 334, 476, 479], "ioctl_vm_sockets_get_local_cid": [67, 334], "af_link": [67, 334, 473], "has_ipv6": [67, 334], "bdaddr_ani": [67, 334], "bdaddr_loc": [67, 334], "hci_filt": [67, 334], "hci_time_stamp": [67, 334], "hci_data_dir": [67, 334], "af_qipcrtr": [67, 334, 479], "scm_creds2": [67, 334, 479], "local_cr": [67, 334, 479], "local_creds_persist": [67, 334, 479], "so_incoming_cpu": [67, 334, 479], "af_hyperv": [67, 334], "hv_protocol_raw": [67, 334], "hvsocket_connect_timeout": [67, 334], "hvsocket_connect_timeout_max": [67, 334], "hvsocket_connected_suspend": [67, 334], "hvsocket_address_flag_passthru": [67, 334], "hv_guid_zero": [67, 334], "hv_guid_wildcard": [67, 334], "hv_guid_broadcast": [67, 334], "hv_guid_children": [67, 334], "hv_guid_loopback": [67, 334], "hv_guid_par": [67, 334], "ethertype_arp": [67, 334], "ethertype_ip": [67, 334], "ethertype_ipv6": [67, 334], "ethertype_vlan": [67, 334], "socketpair": [67, 124, 131, 134, 330, 334, 462, 476, 479], "has_dualstack_ipv6": [67, 334, 477, 479], "fromfd": [67, 325, 334], "fromshar": [67, 334, 476], "sockettyp": [67, 334], "getfqdn": [67, 332, 334, 479], "gethostbynam": [67, 140, 334], "gethostbyname_ex": [67, 334, 479], "gethostnam": [67, 100, 104, 140, 290, 334], "gethostbyaddr": [67, 140, 290, 334, 479], "getprotobynam": [67, 334], "getservbynam": [67, 140, 334, 479], "getservbyport": [67, 140, 334, 462, 479], "ntohl": [67, 104, 334], "ntoh": [67, 104, 334, 468, 476, 479], "htonl": [67, 104, 334], "hton": [67, 104, 334, 468, 476, 479], "inet_aton": [67, 334, 477, 478, 479], "inet_ntoa": [67, 334], "inet_pton": [67, 124, 256, 334, 473, 477, 478, 479], "inet_ntop": [67, 334, 473], "cmsg_len": [67, 334, 479], "cmsg_space": [67, 334, 479], "getdefaulttimeout": [67, 334], "setdefaulttimeout": [67, 107, 334], "sethostnam": [67, 140, 334, 472], "if_nameindex": [67, 334, 477, 479], "if_nametoindex": [67, 334, 477, 479], "if_indextonam": [67, 334, 477, 479], "send_fd": [67, 334, 478, 479], "recv_fd": [67, 334, 478], "connect_ex": [67, 83, 334, 458], "getpeernam": [67, 131, 167, 334, 338], "getsocknam": [67, 131, 134, 334, 338, 479], "getsockopt": [67, 131, 334, 338, 465, 475], "getblock": [67, 334, 476, 479], "gettimeout": [67, 334, 338], "ioctl": [67, 119, 140, 251, 292, 334, 387, 462, 464, 475, 479], "recvfrom": [67, 124, 334, 365, 474, 479], "recvmsg": [67, 334, 472, 474], "recvmsg_into": [67, 334, 472], "recvfrom_into": [67, 124, 334, 463, 465], "recv_into": [67, 124, 334, 338, 463, 465, 479], "sendal": [67, 124, 334, 335, 338, 474, 479], "sendmsg": [67, 140, 334, 470, 472, 474, 479], "sendmsg_afalg": [67, 334, 475], "setblock": [67, 104, 290, 326, 334, 338, 479], "settimeout": [67, 253, 334, 338, 391, 461, 479], "setsockopt": [67, 334, 338, 465, 475], "proto": [67, 124, 134, 297, 334, 382, 391], "create_default_context": [67, 124, 338, 391, 465, 473, 479], "sslerror": [67, 338, 471], "sslzeroreturnerror": [67, 338], "sslwantreaderror": [67, 338, 474, 479], "sslwantwriteerror": [67, 338, 474, 479], "sslsyscallerror": [67, 338], "ssleoferror": [67, 338, 479], "sslcertverificationerror": [67, 338, 476, 479], "verify_cod": [67, 338], "verify_messag": [67, 338], "certificateerror": [67, 338], "rand_byt": [67, 338, 470, 472, 479], "rand_status": [67, 338, 479], "rand_add": [67, 338, 479], "cert_time_to_second": [67, 338, 474, 479], "get_server_certif": [67, 338, 468, 472, 479], "der_cert_to_pem_cert": [67, 338], "pem_cert_to_der_cert": [67, 338], "get_default_verify_path": [67, 338, 473], "enum_certif": [67, 338, 473, 479], "enum_crl": [67, 338, 473, 479], "cert_non": [67, 338, 479], "cert_opt": [67, 338, 479], "cert_requir": [67, 338, 479], "verifymod": [67, 338], "verify_default": [67, 338, 473], "verify_crl_check_leaf": [67, 338, 473], "verify_crl_check_chain": [67, 338, 473], "verify_x509_strict": [67, 338, 473], "verify_allow_proxy_cert": [67, 338, 479], "verify_x509_trusted_first": [67, 338], "verify_x509_partial_chain": [67, 338, 468], "verifyflag": [67, 338], "protocol_tl": [67, 338, 468, 479], "protocol_tls_cli": [67, 338, 468, 479], "protocol_tls_serv": [67, 338, 468, 479], "protocol_sslv23": [67, 220, 338, 468, 479], "protocol_sslv3": [67, 338, 468, 479], "protocol_tlsv1": [67, 338, 468], "protocol_tlsv1_1": [67, 338, 468, 473], "protocol_tlsv1_2": [67, 338, 468, 473, 479], "op_al": [67, 338], "op_no_sslv2": [67, 338, 468, 471, 479], "op_no_sslv3": [67, 338, 468, 479], "op_no_tlsv1": [67, 338, 468], "op_no_tlsv1_1": [67, 338, 468], "op_no_tlsv1_2": [67, 338, 468], "op_no_tlsv1_3": [67, 338, 468, 479], "op_no_renegoti": [67, 338, 479], "op_cipher_server_prefer": [67, 338, 472, 479], "op_single_dh_us": [67, 338, 479], "op_single_ecdh_us": [67, 338, 479], "op_enable_middlebox_compat": [67, 338, 479], "op_no_compress": [67, 338, 472, 479], "op_no_ticket": [67, 338], "op_ignore_unexpected_eof": [67, 338, 468, 479], "op_enable_ktl": [67, 338, 479], "op_legacy_server_connect": [67, 338, 479], "has_alpn": [67, 338, 474], "has_never_check_common_nam": [67, 338], "has_ecdh": [67, 338], "has_sni": [67, 220, 239, 245, 285, 302, 332, 338, 391], "has_npn": [67, 338], "has_sslv2": [67, 338], "has_sslv3": [67, 338], "has_tlsv1": [67, 338], "has_tlsv1_1": [67, 338, 476], "has_tlsv1_2": [67, 338], "has_tlsv1_3": [67, 338], "channel_binding_typ": [67, 338], "openssl_vers": [67, 338, 465, 471], "openssl_version_info": [67, 338, 465, 471], "openssl_version_numb": [67, 338, 465, 471], "alert_description_handshake_failur": [67, 338], "alert_description_internal_error": [67, 338], "alertdescript": [67, 338], "server_auth": [67, 338, 473], "client_auth": [67, 338, 473], "sslerrornumb": [67, 338], "tlsversion": [67, 338, 479], "minimum_support": [67, 338], "maximum_support": [67, 338], "sslv3": [67, 338, 472, 474, 479], "tlsv1": [67, 338, 473, 479], "tlsv1_1": [67, 338], "tlsv1_2": [67, 338], "tlsv1_3": [67, 338], "sslsocket": [67, 131, 338, 465, 468, 473, 474, 476, 478, 479], "do_handshak": [67, 338, 473, 474], "getpeercert": [67, 131, 338, 464, 473, 479], "cipher": [67, 131, 164, 170, 232, 452, 465, 471, 472, 474, 475, 476, 479], "shared_ciph": [67, 338, 474, 479], "get_channel_bind": [67, 338, 472], "selected_alpn_protocol": [67, 338, 474], "selected_npn_protocol": [67, 338, 468], "unwrap": [67, 87, 252, 253, 312, 338, 390, 473, 479], "verify_client_post_handshak": [67, 338, 477, 479], "server_sid": [67, 124, 338], "server_hostnam": [67, 124, 134, 338, 471, 476, 479], "session": [67, 84, 92, 99, 100, 124, 153, 166, 190, 210, 239, 240, 280, 290, 294, 302, 306, 317, 326, 332, 349, 391, 432, 446, 451, 457, 462, 470, 472, 473, 475, 477, 479], "session_reus": [67, 338], "sslcontext": [67, 124, 131, 134, 220, 239, 245, 266, 285, 302, 332, 338, 391, 415, 465, 468, 470, 471, 472, 473, 474, 475, 476, 479], "cert_store_stat": [67, 338, 473], "load_cert_chain": [67, 338, 391, 472], "load_default_cert": [67, 338, 473, 479], "load_verify_loc": [67, 338, 391, 473, 479], "get_ca_cert": [67, 338, 473], "get_ciph": [67, 338, 475, 479], "set_default_verify_path": [67, 338, 473, 479], "set_ciph": [67, 338], "set_alpn_protocol": [67, 239, 338, 391, 474], "set_npn_protocol": [67, 338, 468, 472], "sni_callback": [67, 338, 479], "set_servername_callback": [67, 338, 473], "load_dh_param": [67, 338, 472, 479], "set_ecdh_curv": [67, 338, 472, 479], "wrap_socket": [67, 338, 464, 465, 468, 470, 471, 476, 479], "sslsocket_class": [67, 338], "wrap_bio": [67, 338, 474, 476, 479], "sslobject_class": [67, 338], "session_stat": [67, 338], "check_hostnam": [67, 220, 239, 245, 285, 302, 332, 338, 391, 409, 470, 475, 479], "keylog_filenam": [67, 338], "maximum_vers": [67, 338, 468, 476, 479], "minimum_vers": [67, 338, 468, 476, 479], "num_ticket": [67, 338, 479], "post_handshake_auth": [67, 239, 338, 477, 479], "hostname_checks_common_nam": [67, 338, 476, 479], "security_level": [67, 338, 479], "verify_flag": [67, 338, 473], "verify_mod": [67, 338, 479], "ca": [67, 91, 103, 159, 258, 391, 422, 464, 465, 473, 479], "sslobject": [67, 131, 338, 382, 474, 476, 479], "memorybio": [67, 338, 474, 479], "sslsession": [67, 338, 475, 479], "ticket_lifetime_hint": [67, 338], "has_ticket": [67, 338], "devpol": [67, 325, 326, 472, 473, 474, 479], "epol": [67, 326, 464, 473, 474, 478, 479], "kqueue": [67, 319, 326, 464, 474, 479], "kevent": 67, "pipe_buf": [67, 325, 471, 479], "edg": [67, 102, 173, 174, 190, 198, 222, 229, 358, 360, 380, 472, 473, 479], "fflag": [67, 325], "udata": [67, 325], "multiplex": [67, 251, 257, 325, 338, 473], "event_read": [67, 326, 330], "event_writ": [67, 326], "selectorkey": [67, 326], "fileobj": [67, 231, 232, 326, 330, 354, 472, 479], "baseselector": [67, 326, 479], "get_key": [67, 326, 479], "get_map": [67, 326], "defaultselector": [67, 326, 330, 479], "selectselector": [67, 124, 129, 326], "pollselector": [67, 129, 326, 476], "epollselector": [67, 326, 476, 479], "devpollselector": [67, 326, 474, 476], "kqueueselector": [67, 129, 326, 479], "sigmask": [67, 330], "sigabrt": [67, 185, 211, 290, 330, 451, 472, 479], "sigalrm": [67, 330, 479], "sigbreak": [67, 330], "sigbus": [67, 185, 211, 330, 451, 472], "sigchld": [67, 130, 290, 330], "sigcld": [67, 330], "sigcont": [67, 290, 330], "sigfp": [67, 185, 211, 330, 451, 472, 479], "sighup": [67, 330, 479], "sigil": [67, 185, 211, 330, 451, 472], "sigkil": [67, 131, 135, 280, 290, 330, 345, 356, 462, 476, 479], "sigpip": [67, 345], "sigsegv": [67, 185, 211, 330, 451, 472, 479], "sigstkflt": [67, 330, 479], "sigusr1": [67, 330], "sigusr2": [67, 330], "sigwinch": [67, 174, 330, 479], "ctrl_c_event": [67, 135, 290, 330, 345, 465], "ctrl_break_ev": [67, 135, 290, 330, 345, 465], "nsig": [67, 330, 479], "itimer_r": [67, 330], "itimer_virtu": [67, 330], "itimer_prof": [67, 330], "sig_block": [67, 330], "sig_unblock": [67, 330], "sig_setmask": [67, 330], "itimererror": [67, 330], "alarm": [67, 305, 330, 473, 479], "getsign": [67, 330, 479], "strsignal": [67, 330, 479], "valid_sign": [67, 330, 479], "paus": [67, 91, 94, 131, 135, 174, 292, 294, 330, 426, 462, 463, 479], "raise_sign": [67, 113, 330, 479], "pidfd_send_sign": [67, 330, 478, 479], "pthread_kil": [67, 140, 290, 330, 472], "pthread_sigmask": [67, 330, 472], "setitim": [67, 330, 464, 479], "getitim": [67, 330, 464], "siginterrupt": [67, 330, 464, 472, 479], "sigpend": [67, 330, 472], "sigwait": [67, 330, 472], "sigwaitinfo": [67, 330, 472, 474, 479], "sigtimedwait": [67, 330, 472, 474, 479], "madvis": [67, 275, 477, 479], "madv_": 67, "madv_norm": [67, 275], "madv_random": [67, 275], "madv_sequenti": [67, 275], "madv_willne": [67, 275], "madv_dontne": [67, 275], "madv_remov": [67, 275], "madv_dontfork": [67, 275], "madv_dofork": [67, 275], "madv_hwpoison": [67, 275], "madv_merg": [67, 275], "madv_unmerg": [67, 275], "madv_soft_offlin": [67, 275], "madv_hugepag": [67, 275], "madv_nohugepag": [67, 275], "madv_dontdump": [67, 275], "madv_dodump": [67, 275], "madv_fre": [67, 275], "madv_nosync": [67, 275], "madv_autosync": [67, 275], "madv_nocor": [67, 275], "madv_cor": [67, 275], "madv_protect": [67, 275], "madv_free_reus": [67, 275], "map_": 67, "map_shar": [67, 275], "map_priv": [67, 275], "map_denywrit": [67, 275], "map_execut": [67, 275], "map_anon": [67, 275], "map_anonym": [67, 275], "map_popul": [67, 275, 479], "map_stack": [67, 275, 479], "map_aligned_sup": [67, 275, 479], "map_conc": [67, 275, 479], "mime": [67, 86, 103, 141, 144, 149, 155, 193, 197, 199, 200, 201, 202, 204, 205, 242, 251, 269, 282, 349, 403, 428, 447, 460, 462, 465, 471, 473, 474, 475, 476, 479], "emailmessag": [67, 149, 191, 193, 194, 197, 198, 199, 202, 204, 205, 239, 282, 391, 473, 475, 479], "as_str": [67, 191, 193, 198, 199, 202, 282, 473, 479], "as_byt": [67, 191, 193, 197, 198, 202, 205, 248, 282, 473], "is_multipart": [67, 191, 193, 196, 202, 204, 282, 479], "set_unixfrom": [67, 191, 193, 202, 282], "get_unixfrom": [67, 191, 193, 202, 282], "get_al": [67, 191, 193, 202, 206, 253, 282, 403, 479], "add_head": [67, 191, 193, 202, 203, 253, 282, 385, 391, 403], "replace_head": [67, 191, 193, 202, 282], "get_content_typ": [67, 149, 191, 193, 197, 202, 282], "get_content_maintyp": [67, 191, 193, 197, 202, 282], "get_content_subtyp": [67, 191, 193, 202, 282], "get_default_typ": [67, 191, 193, 202, 282], "set_default_typ": [67, 191, 193, 202, 282], "set_param": [67, 191, 193, 202, 282, 473], "del_param": [67, 191, 193, 202, 282], "get_filenam": [67, 191, 193, 197, 202, 247, 277, 282, 419, 473], "get_boundari": [67, 191, 193, 202, 282], "set_boundari": [67, 191, 193, 196, 202, 282], "get_content_charset": [67, 191, 193, 202, 282], "get_charset": [67, 191, 193, 202, 282], "is_attach": [67, 191, 202, 282, 479], "get_content_disposit": [67, 191, 193, 202, 282, 474], "get_bodi": [67, 191, 197, 202, 204, 282], "iter_attach": [67, 191, 197, 202, 282, 479], "iter_part": [67, 191, 193, 202, 204, 282], "get_cont": [67, 191, 193, 194, 197, 202, 205, 282], "set_cont": [67, 191, 193, 194, 195, 197, 202, 204, 205, 282, 479], "make_rel": [67, 191, 202, 282], "make_altern": [67, 191, 202, 282], "make_mix": [67, 191, 202, 282], "add_rel": [67, 191, 197, 202, 282], "add_altern": [67, 191, 197, 202, 282], "add_attach": [67, 191, 197, 202, 282], "clear_cont": [67, 191, 194, 202, 282], "preambl": [67, 191, 193, 197, 202, 282, 297, 479], "epilogu": [67, 191, 193, 202, 282], "defect": [67, 191, 193, 200, 202, 204, 205, 282, 462, 472, 476, 479], "mimepart": [67, 191, 194, 202, 282, 473], "feedpars": [67, 191, 196, 282, 462, 479], "bytesfeedpars": [67, 191, 204, 282, 471], "feed": [67, 93, 155, 174, 175, 191, 204, 205, 232, 237, 258, 270, 280, 282, 341, 385, 403, 409, 412, 463, 471, 479], "bytespars": [67, 191, 197, 198, 204, 282, 471, 479], "parsebyt": [67, 191, 204, 282], "bytesheaderpars": [67, 191, 204, 282, 472], "parsestr": [67, 191, 197, 204, 270, 282, 407, 408, 410, 458, 474, 479], "headerpars": [67, 191, 204, 282, 472], "message_from_byt": [67, 191, 204, 282, 471], "message_from_binary_fil": [67, 191, 197, 204, 205, 282, 471], "message_from_str": [67, 191, 204, 282, 472], "message_from_fil": [67, 191, 201, 204, 282], "bytesgener": [67, 191, 193, 194, 198, 202, 205, 282, 332, 471], "flatten": [67, 157, 191, 193, 198, 199, 200, 202, 205, 258, 282, 296, 341, 382, 438, 470, 473, 474, 478, 479], "decodedgener": [67, 191, 198, 282, 475, 479], "max_line_length": [67, 191, 193, 202, 205, 282, 472, 479], "cte_typ": [67, 191, 198, 200, 205, 282, 472], "raise_on_defect": [67, 191, 205, 282, 472], "mangle_from_": [67, 191, 193, 198, 205, 282, 474], "message_factori": [67, 191, 204, 205, 282, 475], "handle_defect": [67, 191, 205, 282], "register_defect": [67, 191, 205, 282], "header_max_count": [67, 191, 205, 282], "header_source_pars": [67, 191, 205, 282], "header_store_pars": [67, 191, 205, 282], "header_fetch_pars": [67, 191, 205, 282], "fold_binari": [67, 191, 205, 282], "emailpolici": [67, 191, 194, 200, 205, 282, 472, 474], "refold_sourc": [67, 191, 198, 205, 282, 472], "header_factori": [67, 191, 200, 205, 282, 472], "content_manag": [67, 191, 194, 202, 205, 282, 473], "smtp": [67, 79, 83, 99, 100, 191, 197, 198, 200, 205, 251, 253, 266, 282, 338, 447, 458, 460, 464, 471, 472, 473, 474, 478, 479], "smtputf8": [67, 191, 205, 282, 332, 474, 479], "compat32": [67, 191, 192, 195, 198, 199, 202, 203, 204, 205, 206, 282, 472, 474, 475, 479], "messageerror": [67, 191, 196, 282], "messageparseerror": [67, 191, 196, 268, 282], "headerparseerror": [67, 191, 193, 196, 202, 282], "boundaryerror": [67, 191, 196, 282], "multipartconversionerror": [67, 191, 196, 203, 282], "headerregistri": [67, 191, 196, 197, 202, 205, 282, 479], "basehead": [67, 191, 200, 202, 282], "max_count": [67, 191, 200, 205, 282], "unstructuredhead": [67, 191, 200, 282], "datehead": [67, 191, 200, 282], "addresshead": [67, 191, 200, 282], "singleaddresshead": [67, 191, 200, 282], "mimeversionhead": [67, 191, 200, 282], "parameterizedmimehead": [67, 191, 200, 282], "param": [67, 100, 137, 149, 191, 193, 194, 200, 202, 206, 239, 252, 278, 282, 290, 302, 337, 384, 390, 391, 395, 415, 416, 427, 465, 471, 478, 479], "contenttypehead": [67, 191, 200, 282], "content_typ": [67, 191, 197, 200, 282], "maintyp": [67, 191, 193, 194, 197, 198, 200, 201, 202, 282], "contentdispositionhead": [67, 191, 200, 282], "content_disposit": [67, 191, 200, 282], "contenttransferencod": [67, 191, 200, 282], "cte": [67, 191, 193, 194, 195, 200, 202, 205, 282, 337, 479], "map_to_typ": [67, 191, 200, 282], "display_nam": [67, 191, 197, 200, 282, 472], "usernam": [67, 100, 107, 149, 170, 191, 197, 200, 226, 245, 266, 282, 290, 291, 302, 332, 390, 391, 471, 472, 474, 479], "addr_spec": [67, 191, 200, 282, 472], "contentmanag": [67, 191, 203, 282, 473, 479], "add_get_handl": [67, 191, 194, 282], "add_set_handl": [67, 191, 194, 282], "raw_data_manag": [67, 191, 194, 205, 282], "get_payload": [67, 191, 193, 197, 201, 203, 282, 471], "set_payload": [67, 191, 193, 203, 282, 479], "set_charset": [67, 191, 193, 282], "get_param": [67, 191, 193, 206, 282, 479], "set_typ": [67, 191, 193, 282], "scratch": [67, 88, 100, 126, 186, 191, 195, 198, 204, 282, 338, 406, 472, 473, 479], "mimebas": [67, 191, 203, 282], "mimenonmultipart": [67, 191, 196, 203, 282, 479], "mimemultipart": [67, 191, 203, 282], "mimeappl": [67, 191, 203, 282], "mimeaudio": [67, 191, 195, 203, 282, 479], "mimeimag": [67, 191, 195, 196, 197, 203, 282], "mimemessag": [67, 191, 203, 282], "mimetext": [67, 191, 195, 203, 282, 474, 479], "decode_head": [67, 191, 199, 282, 285, 347, 472], "make_head": [67, 191, 199, 282, 472], "charset": [67, 149, 180, 187, 191, 193, 194, 199, 202, 203, 205, 206, 227, 243, 245, 282, 338, 391, 403, 471, 474, 479], "input_charset": [67, 191, 192, 193, 282], "header_encod": [67, 191, 192, 282], "body_encod": [67, 191, 192, 282, 479], "output_charset": [67, 191, 192, 193, 282, 465, 469, 477], "input_codec": [67, 191, 192, 282], "output_codec": [67, 191, 192, 282], "get_body_encod": [67, 191, 192, 282], "get_output_charset": [67, 191, 192, 282], "header_encode_lin": [67, 191, 192, 282], "add_charset": [67, 191, 192, 282], "add_alia": [67, 191, 192, 282], "add_codec": [67, 191, 192, 282], "encode_quopri": [67, 191, 195, 282], "encode_base64": [67, 191, 195, 203, 282], "encode_7or8bit": [67, 191, 195, 282], "encode_noop": [67, 191, 195, 282], "make_msgid": [67, 191, 197, 206, 282, 479], "unquot": [67, 172, 191, 193, 202, 206, 253, 282, 300, 390, 391, 479], "parseaddr": [67, 191, 206, 282, 479], "formataddr": [67, 191, 206, 282, 472], "getaddress": [67, 191, 206, 282, 479], "parsed": [67, 191, 206, 282], "parsedate_tz": [67, 191, 206, 282, 479], "parsedate_to_datetim": [67, 191, 206, 282, 472], "mktime_tz": [67, 191, 206, 282], "formatd": [67, 191, 206, 282, 462, 479], "format_datetim": [67, 191, 200, 206, 282, 472], "decode_rfc2231": [67, 191, 206, 282], "encode_rfc2231": [67, 191, 206, 282], "collapse_rfc2231_valu": [67, 191, 193, 206, 282], "decode_param": [67, 191, 206, 282], "body_line_iter": [67, 191, 201, 282], "typed_subpart_iter": [67, 191, 201, 282], "_structur": [67, 191, 193, 201, 202, 282], "jsondecod": [67, 259, 282, 465, 475, 479], "raw_decod": [67, 259, 282, 479], "jsonencod": [67, 100, 259, 282, 475, 479], "jsondecodeerror": [67, 118, 259, 282, 474, 479], "complianc": [67, 183, 191, 200, 205, 282, 285, 403, 406, 472, 473, 479], "interoper": [67, 93, 100, 124, 139, 205, 242, 256, 282, 296, 315, 338, 341, 418, 424, 442, 467, 471, 473, 479], "iterkey": [67, 110, 268, 282, 460, 461, 462, 464, 466, 479], "itervalu": [67, 110, 268, 282, 460, 461, 462, 466, 479], "iteritem": [67, 110, 268, 282, 460, 461, 462, 466, 479], "get_messag": [67, 268, 282], "get_byt": [67, 268, 282, 471], "get_str": [67, 268, 282, 471, 479], "get_fil": [67, 268, 282, 471], "unlock": [67, 113, 136, 212, 268, 279, 280, 282, 302, 358, 361, 424, 463, 479], "maildir": [67, 282, 463, 465, 479], "list_fold": [67, 268, 282], "get_fold": [67, 268, 282], "add_fold": [67, 268, 282], "remove_fold": [67, 268, 282], "mbox": [67, 193, 198, 282, 463, 479], "mh": [67, 282, 463], "get_sequ": [67, 268, 282], "set_sequ": [67, 268, 282], "babyl": [67, 282], "get_label": [67, 268, 282], "mmdf": [67, 282], "maildirmessag": [67, 282], "get_subdir": [67, 268, 282], "set_subdir": [67, 268, 282], "get_flag": [67, 268, 282], "set_flag": [67, 268, 282], "add_flag": [67, 268, 282], "remove_flag": [67, 268, 282], "get_dat": [67, 131, 135, 268, 282], "set_dat": [67, 268, 282], "get_info": [67, 268, 282], "set_info": [67, 268, 282], "mboxmessag": [67, 202, 282], "get_from": [67, 268, 282], "set_from": [67, 268, 282], "mhmessag": [67, 282], "add_sequ": [67, 268, 282], "remove_sequ": [67, 268, 282], "babylmessag": [67, 282], "set_label": [67, 268, 282], "add_label": [67, 268, 282], "remove_label": [67, 268, 282], "get_vis": [67, 268, 282], "set_vis": [67, 268, 282], "update_vis": [67, 268, 282], "mmdfmessag": [67, 282], "nosuchmailboxerror": [67, 268, 282], "notemptyerror": [67, 268, 282], "externalclasherror": [67, 268, 282], "guess_typ": [67, 197, 242, 273, 282, 403, 479], "guess_all_extens": [67, 273, 282, 479], "guess_extens": [67, 197, 273, 282], "read_mime_typ": [67, 273, 282, 479], "add_typ": [67, 273, 282], "knownfil": [67, 273, 282], "suffix_map": [67, 273, 282], "encodings_map": [67, 273, 282, 479], "types_map": [67, 273, 282, 464, 479], "common_typ": [67, 273, 282], "types_map_inv": [67, 273, 282], "readfp": [67, 164, 273, 282, 465, 469, 470, 479], "read_windows_registri": [67, 273, 282], "base16": [67, 251, 282, 462], "base32": [67, 251, 282, 462, 468, 479], "base85": [67, 251, 282, 473, 479], "b64encod": [67, 141, 232, 282, 479], "b64decod": [67, 141, 232, 282, 472, 479], "standard_b64encod": [67, 141, 282], "standard_b64decod": [67, 141, 282], "urlsafe_b64encod": [67, 141, 282], "urlsafe_b64decod": [67, 141, 282], "b32encod": [67, 141, 282], "b32decod": [67, 141, 282, 473, 479], "b32hexencod": [67, 141, 282, 468, 479], "b32hexdecod": [67, 141, 282, 468, 479], "b16encod": [67, 141, 282], "b16decod": [67, 141, 282], "a85encod": [67, 141, 282, 473, 479], "a85decod": [67, 141, 282, 473, 479], "b85encod": [67, 141, 282, 473, 479], "b85decod": [67, 141, 282, 473], "decodebyt": [67, 141, 155, 282, 478, 479], "encodebyt": [67, 141, 155, 282, 478, 479], "a2b_uu": [67, 144, 282], "b2a_uu": [67, 144, 282, 476, 479], "a2b_base64": [67, 141, 144, 282, 479], "b2a_base64": [67, 144, 282, 475, 479], "a2b_qp": [67, 144, 282, 479], "b2a_qp": [67, 144, 282, 479], "crc_hqx": [67, 144, 282, 469, 479], "b2a_hex": [67, 144, 155, 282, 479], "hexlifi": [67, 144, 282, 479], "a2b_hex": [67, 144, 155, 282, 473], "unhexlifi": [67, 98, 144, 282, 479], "quopri": [67, 144, 155, 251, 282], "decodestr": [67, 282, 314, 478, 479], "encodestr": [67, 282, 314, 478, 479], "markup": [67, 214, 251, 311, 406, 415, 464, 471, 472, 479], "hypertext": [67, 107, 237, 238, 251, 270, 406], "unescap": [67, 86, 103, 187, 235, 236, 270, 285, 316, 390, 413, 431, 473, 478, 479], "xhtml": [67, 107, 235, 236, 251, 270, 311, 391, 406, 407, 409, 471], "htmlparser": [67, 270, 466, 468, 472, 473, 474, 478, 479], "getpo": [67, 237, 270], "get_starttag_text": [67, 237, 270], "handle_starttag": [67, 237, 270], "handle_endtag": [67, 237, 270], "handle_startendtag": [67, 237, 270], "handle_data": [67, 237, 270], "handle_entityref": [67, 237, 270], "handle_charref": [67, 237, 270], "handle_com": [67, 237, 270], "handle_decl": [67, 237, 270], "handle_pi": [67, 237, 270], "unknown_decl": [67, 237, 270], "entiti": [67, 86, 103, 107, 235, 237, 239, 251, 265, 270, 311, 391, 405, 406, 407, 408, 410, 411, 412, 413, 422, 461, 472, 477, 479], "html5": [67, 236, 270, 472, 473, 479], "entitydef": [67, 236, 270], "name2codepoint": [67, 236, 237, 270], "codepoint2nam": [67, 236, 270], "vulner": [67, 106, 124, 135, 190, 270, 296, 311, 324, 328, 337, 345, 382, 407, 408, 409, 410, 415, 416, 463, 479], "defusedxml": [67, 270], "pull": [67, 72, 180, 183, 270, 325, 380, 385, 408, 421, 458, 462, 465, 473, 476, 479], "xpath": [67, 270, 405, 478, 479], "canonic": [67, 270, 409, 477, 479], "fromstr": [67, 119, 270, 409, 471, 478, 479], "fromstringlist": [67, 270, 409, 471], "isel": [67, 270, 409], "iterpars": [67, 270, 409, 473, 479], "processinginstruct": [67, 270, 409, 411, 463], "register_namespac": [67, 270, 409, 465, 471], "subel": [67, 270, 409, 471], "tostr": [67, 119, 270, 409, 465, 471, 473, 478, 479], "tostringlist": [67, 270, 409, 471, 473, 479], "xmlid": [67, 270, 409], "xinclud": [67, 270, 479], "elementinclud": [67, 270, 409, 463], "default_load": [67, 270, 409], "attrib": [67, 270, 409, 463, 479], "findtext": [67, 270, 409, 479], "iterfind": [67, 270, 409, 471], "itertext": [67, 270, 409, 465, 471, 479], "makeel": [67, 270, 409], "_setroot": [67, 270, 409], "getroot": [67, 270, 409, 463], "qname": [67, 270, 406, 411, 412], "treebuild": [67, 270, 471, 477, 479], "doctyp": [67, 107, 237, 239, 270, 311, 391, 406, 409, 471, 477, 479], "start_n": [67, 270, 409, 477, 479], "end_n": [67, 270, 409, 477, 479], "c14nwritertarget": [67, 270, 409], "xmlparser": [67, 270, 465, 473, 477, 479], "xmlpullpars": [67, 270, 473, 479], "read_ev": [67, 270, 409], "parseerror": [67, 270, 405, 409, 465, 471, 479], "registerdomimplement": [67, 270, 406], "getdomimplement": [67, 270, 406, 407], "empty_namespac": [67, 270, 406], "xml_namespac": [67, 270, 406], "xmlns_namespac": [67, 270, 406], "xhtml_namespac": [67, 270, 406], "domimplement": [67, 270], "hasfeatur": [67, 270, 406], "createdocu": [67, 270, 406, 407], "createdocumenttyp": [67, 270, 406], "nodetyp": [67, 270, 406, 407], "parentnod": [67, 270, 406], "previouss": [67, 270, 406], "nextsibl": [67, 270, 406], "childnod": [67, 270, 406, 407, 458], "firstchild": [67, 270, 406], "lastchild": [67, 270, 406], "localnam": [67, 270, 406, 411, 412, 479], "namespaceuri": [67, 270, 406, 412], "nodenam": [67, 270, 290, 300, 406], "nodevalu": [67, 270, 406], "hasattribut": [67, 270, 406], "haschildnod": [67, 270, 406], "issamenod": [67, 270, 406], "appendchild": [67, 270, 406, 407, 458], "insertbefor": [67, 270, 406, 458], "removechild": [67, 270, 406, 458], "replacechild": [67, 270, 406], "clonenod": [67, 270, 406, 479], "nodelist": [67, 270, 407, 424], "documenttyp": [67, 270], "publicid": [67, 270, 311, 406, 411], "systemid": [67, 270, 311, 406, 411], "internalsubset": [67, 270, 406], "documentel": [67, 270, 406, 407, 458], "createel": [67, 270, 406], "createelementn": [67, 270, 406], "createtextnod": [67, 270, 406, 407], "createcom": [67, 270, 406], "createprocessinginstruct": [67, 270, 406], "createattribut": [67, 270, 406], "createattributen": [67, 270, 406], "getelementsbytagnam": [67, 270, 406, 407, 458], "getelementsbytagnamen": [67, 270, 406], "tagnam": [67, 270, 275, 372, 406, 407, 408], "hasattributen": [67, 270, 406], "getattribut": [67, 270, 406, 408, 424], "getattributenod": [67, 270, 406], "getattributen": [67, 270, 406], "getattributenoden": [67, 270, 406], "removeattribut": [67, 270, 406], "removeattributenod": [67, 270, 406, 479], "removeattributen": [67, 270, 406], "setattribut": [67, 270, 406], "setattributenod": [67, 270, 406], "setattributenoden": [67, 270, 406], "setattributen": [67, 270, 406], "namednodemap": [67, 270], "cdatasect": [67, 270], "domexcept": [67, 270, 406, 407], "domstringsizeerr": [67, 270, 406], "hierarchyrequesterr": [67, 270, 406], "indexsizeerr": [67, 270, 406], "inuseattributeerr": [67, 270, 406], "invalidaccesserr": [67, 270, 406], "invalidcharactererr": [67, 270, 406], "invalidmodificationerr": [67, 270, 406], "invalidstateerr": [67, 270, 406], "namespaceerr": [67, 270, 406], "notfounderr": [67, 270, 406], "notsupportederr": [67, 270, 406], "nodataallowederr": [67, 270, 406], "nomodificationallowederr": [67, 270, 406], "syntaxerr": [67, 270, 406], "wrongdocumenterr": [67, 270, 406], "minidom": [67, 251, 270, 405, 406, 408, 458, 459, 461, 477, 479], "writexml": [67, 270, 407, 477], "toxml": [67, 270, 407, 408, 458, 461, 477], "toprettyxml": [67, 270, 407, 461, 477], "pulldom": [67, 251, 270, 405, 469, 477, 479], "sax2dom": [67, 270, 408], "default_bufs": [67, 270, 408], "domeventstream": [67, 270, 469, 477, 479], "getev": [67, 270, 408], "expandnod": [67, 270, 408], "make_pars": [67, 270, 408, 410, 412, 458, 479], "saxexcept": [67, 270], "saxparseexcept": [67, 270, 410, 411], "saxnotrecognizedexcept": [67, 270, 410, 412], "saxnotsupportedexcept": [67, 270, 410, 412], "getexcept": [67, 270, 410], "contenthandl": [67, 270, 408, 410, 412, 413, 458], "dtdhandler": [67, 270, 412], "entityresolv": [67, 270, 412], "errorhandl": [67, 270, 410, 412, 451, 464], "lexicalhandl": [67, 270, 462, 468, 479], "feature_namespac": [67, 270, 411], "feature_namespace_prefix": [67, 270, 411], "feature_string_intern": [67, 270, 411], "feature_valid": [67, 270, 411], "feature_external_g": [67, 270, 408, 410, 411], "feature_external_p": [67, 270, 411], "all_featur": [67, 270, 411], "property_lexical_handl": [67, 270, 411], "property_declaration_handl": [67, 270, 411], "property_dom_nod": [67, 270, 411], "property_xml_str": [67, 270, 411], "all_properti": [67, 270, 411], "setdocumentloc": [67, 270, 411], "startdocu": [67, 270, 411], "enddocu": [67, 270, 411], "startprefixmap": [67, 270, 411], "endprefixmap": [67, 270, 411], "startel": [67, 270, 411, 412, 458], "endel": [67, 270, 411, 458], "startelementn": [67, 270, 411, 412], "endelementn": [67, 270, 411], "ignorablewhitespac": [67, 270, 411], "skippedent": [67, 270, 411], "notationdecl": [67, 270, 411], "unparsedentitydecl": [67, 270, 411], "resolveent": [67, 270, 411, 412], "fatalerror": [67, 270, 411], "startdtd": [67, 270, 411, 462], "enddtd": [67, 270, 411], "startcdata": [67, 270, 411], "endcdata": [67, 270, 411], "saxutil": [67, 251, 270, 410], "quoteattr": [67, 270, 413], "xmlgener": [67, 270, 413], "xmlfilterbas": [67, 270, 413], "prepare_input_sourc": [67, 270, 413], "xmlreader": [67, 251, 270, 408, 410, 411, 413, 474], "incrementalpars": [67, 270], "inputsourc": [67, 270, 410, 411, 413, 474, 479], "attributesimpl": [67, 270, 412], "attributesnsimpl": [67, 270, 412], "getcontenthandl": [67, 270, 412], "setcontenthandl": [67, 270, 412, 458], "getdtdhandl": [67, 270, 412], "setdtdhandl": [67, 270, 412], "getentityresolv": [67, 270, 412], "setentityresolv": [67, 270, 412], "geterrorhandl": [67, 270, 412], "seterrorhandl": [67, 270, 412], "setlocal": [67, 86, 243, 255, 263, 270, 412, 448, 469, 474, 479], "getfeatur": [67, 270, 412], "setfeatur": [67, 270, 408, 410, 412], "getproperti": [67, 270, 278, 347, 412, 479], "setproperti": [67, 270, 278, 347, 411, 412], "getcolumnnumb": [67, 270, 412], "getlinenumb": [67, 270, 412], "getpublicid": [67, 270, 412], "getsystemid": [67, 270, 412], "setpublicid": [67, 270, 412], "setsystemid": [67, 270, 412], "setencod": [67, 270, 412], "setbytestream": [67, 270, 412], "getbytestream": [67, 270, 412], "setcharacterstream": [67, 270, 412], "getcharacterstream": [67, 270, 412], "getlength": [67, 270, 412], "gettyp": [67, 270, 412, 463], "attributesn": [67, 270, 410, 411], "getvaluebyqnam": [67, 270, 412], "getnamebyqnam": [67, 270, 412], "getqnamebynam": [67, 270, 412], "getqnam": [67, 270, 412], "expat": [67, 251, 270, 301, 405, 409, 411, 452, 458, 459, 461, 463, 465, 471, 479], "expaterror": [67, 270, 471], "xmlparsertyp": [67, 270, 311], "errorstr": [67, 270, 311], "parsercr": [67, 270, 311], "parsefil": [67, 270, 311], "setbas": [67, 270, 311], "getbas": [67, 270, 311], "getinputcontext": [67, 270, 311], "externalentityparsercr": [67, 270, 311], "setparamentitypars": [67, 270, 311], "useforeigndtd": [67, 270, 311], "buffer_s": [67, 255, 270, 311, 464], "buffer_text": [67, 270, 311, 461], "buffer_us": [67, 270, 311], "ordered_attribut": [67, 270, 311], "specified_attribut": [67, 270, 311, 479], "errorbyteindex": [67, 270, 311], "errorcolumnnumb": [67, 270, 311], "errorlinenumb": [67, 270, 311], "currentbyteindex": [67, 270, 311], "currentcolumnnumb": [67, 270, 311], "currentlinenumb": [67, 270, 311], "xmldeclhandl": [67, 270, 311], "startdoctypedeclhandl": [67, 270, 311], "enddoctypedeclhandl": [67, 270, 311], "elementdeclhandl": [67, 270, 311], "attlistdeclhandl": [67, 270, 311], "startelementhandl": [67, 270, 311], "endelementhandl": [67, 270, 311], "processinginstructionhandl": [67, 270, 311], "characterdatahandl": [67, 270, 311], "unparsedentitydeclhandl": [67, 270, 311], "entitydeclhandl": [67, 270, 311], "notationdeclhandl": [67, 270, 311], "startnamespacedeclhandl": [67, 270, 311], "endnamespacedeclhandl": [67, 270, 311], "commenthandl": [67, 270, 311], "startcdatasectionhandl": [67, 270, 311], "endcdatasectionhandl": [67, 270, 311], "defaulthandl": [67, 270, 311], "defaulthandlerexpand": [67, 270, 311], "notstandalonehandl": [67, 270, 311], "externalentityrefhandl": [67, 270, 311], "xml_error_async_ent": [67, 270, 311], "xml_error_attribute_external_entity_ref": [67, 270, 311], "xml_error_bad_char_ref": [67, 270, 311], "xml_error_binary_entity_ref": [67, 270, 311], "xml_error_duplicate_attribut": [67, 270, 311], "xml_error_incorrect_encod": [67, 270, 311], "xml_error_invalid_token": [67, 270, 311], "xml_error_junk_after_doc_el": [67, 270, 311], "xml_error_misplaced_xml_pi": [67, 270, 311], "xml_error_no_el": [67, 270, 311], "xml_error_no_memori": [67, 270, 311], "xml_error_param_entity_ref": [67, 270, 311], "xml_error_partial_char": [67, 270, 311], "xml_error_recursive_entity_ref": [67, 270, 311], "xml_error_syntax": [67, 270, 311], "xml_error_tag_mismatch": [67, 270, 311], "xml_error_unclosed_token": [67, 270, 311], "xml_error_undefined_ent": [67, 270, 311], "xml_error_unknown_encod": [67, 270, 311], "xml_error_unclosed_cdata_sect": [67, 270, 311], "xml_error_external_entity_handl": [67, 270, 311], "xml_error_not_standalon": [67, 270, 311], "xml_error_unexpected_st": [67, 270, 311], "xml_error_entity_declared_in_p": [67, 270, 311], "xml_error_feature_requires_xml_dtd": [67, 270, 311], "xml_error_cant_change_feature_once_pars": [67, 270, 311], "xml_error_unbound_prefix": [67, 270, 311], "xml_error_undeclaring_prefix": [67, 270, 311], "xml_error_incomplete_p": [67, 270, 311], "xml_error_xml_decl": [67, 270, 311], "xml_error_text_decl": [67, 270, 311], "xml_error_publicid": [67, 270, 311], "xml_error_suspend": [67, 270, 311], "xml_error_not_suspend": [67, 270, 311], "xml_error_abort": [67, 270, 311], "xml_error_finish": [67, 270, 311], "xml_error_suspend_p": [67, 270, 311], "xml_error_reserved_prefix_xml": [67, 270, 311], "xml_error_reserved_prefix_xmln": [67, 270, 311], "xml_error_reserved_namespace_uri": [67, 270, 311], "xml_error_invalid_argu": [67, 270, 311], "xml_error_no_buff": [67, 270, 311], "xml_error_amplification_limit_breach": [67, 270, 311], "browser": [67, 94, 106, 107, 149, 150, 187, 241, 242, 244, 251, 253, 254, 261, 269, 305, 310, 349, 390, 391, 436, 452, 458, 459, 461, 462, 463, 464, 470, 471, 472, 475, 476, 479], "open_new": [67, 253, 399, 463], "open_new_tab": [67, 253, 399, 463], "wsgi": [67, 251, 253, 463, 469, 471, 479], "guess_schem": [67, 253, 403], "request_uri": [67, 253, 403], "application_uri": [67, 253, 403], "shift_path_info": [67, 253, 403], "setup_testing_default": [67, 253, 403], "is_hop_by_hop": [67, 253, 403], "filewrapp": [67, 253, 403, 469, 477, 479], "simple_serv": [67, 253, 463, 475, 479], "make_serv": [67, 253, 403, 463], "demo_app": [67, 253, 403], "wsgiserv": [67, 253, 403, 479], "set_app": [67, 253, 403], "get_app": [67, 253, 403], "wsgirequesthandl": [67, 253, 403, 479], "get_environ": [67, 253, 403], "get_stderr": [67, 253, 403], "checker": [67, 84, 102, 118, 174, 190, 253, 289, 341, 382, 423, 424, 462, 463, 468, 469, 470, 474, 475, 477, 478, 479], "cgihandl": [67, 253, 403], "iiscgihandl": [67, 253, 403], "basecgihandl": [67, 253, 403], "simplehandl": [67, 253, 403, 458], "basehandl": [67, 253, 385, 403, 479], "_write": [67, 253, 403], "_flush": [67, 253, 403], "get_stdin": [67, 253, 403], "add_cgi_var": [67, 253, 403], "wsgi_multithread": [67, 253, 403], "wsgi_multiprocess": [67, 253, 403], "wsgi_run_onc": [67, 253, 403], "os_environ": [67, 253, 403], "server_softwar": [67, 253, 403], "get_schem": [67, 253, 403], "setup_environ": [67, 253, 403], "log_except": [67, 253, 403], "traceback_limit": [67, 182, 253, 378, 403], "error_output": [67, 253, 403], "error_status": [67, 253, 403], "error_head": [67, 253, 403], "error_bodi": [67, 253, 403], "wsgi_file_wrapp": [67, 253, 403], "origin_serv": [67, 253, 403], "http_version": [67, 253, 403], "read_environ": [67, 253, 403, 471], "startrespons": [67, 253, 403], "wsgienviron": [67, 253, 403], "wsgiapplic": [67, 253, 403], "inputstream": [67, 253, 403, 479], "errorstream": [67, 253, 403], "url": [67, 84, 134, 140, 141, 149, 163, 164, 220, 238, 239, 240, 242, 244, 248, 251, 253, 266, 273, 310, 323, 341, 358, 389, 392, 394, 395, 399, 403, 409, 412, 413, 415, 416, 422, 428, 458, 461, 462, 463, 464, 465, 471, 473, 474, 479], "urlopen": [67, 83, 107, 163, 166, 223, 240, 253, 304, 389, 390, 391, 447, 463, 464, 465, 471, 472, 473, 474, 479], "install_open": [67, 107, 253, 391], "build_open": [67, 107, 240, 253, 391], "pathname2url": [67, 253, 391], "url2pathnam": [67, 253, 391], "getproxi": [67, 107, 253, 391, 479], "openerdirector": [67, 107, 253, 473], "httpdefaulterrorhandl": [67, 107, 253, 391], "httpredirecthandl": [67, 107, 253], "httpcookieprocessor": [67, 240, 253, 462], "proxyhandl": [67, 107, 253, 479], "httppasswordmgr": [67, 107, 253, 479], "httppasswordmgrwithdefaultrealm": [67, 107, 253, 391], "httppasswordmgrwithpriorauth": [67, 253, 474, 479], "abstractbasicauthhandl": [67, 253, 385, 479], "httpbasicauthhandl": [67, 107, 253], "proxybasicauthhandl": [67, 253], "abstractdigestauthhandl": [67, 253, 385, 479], "httpdigestauthhandl": [67, 253], "proxydigestauthhandl": [67, 253], "httpshandler": [67, 253, 471], "datahandl": [67, 107, 253, 473], "ftphandler": [67, 107, 253], "cacheftphandl": [67, 253, 479], "unknownhandl": [67, 107, 253], "httperrorprocessor": [67, 107, 253], "full_url": [67, 107, 253, 391, 473], "origin_req_host": [67, 240, 253, 391], "unverifi": [67, 239, 240, 253, 391], "get_method": [67, 253, 261, 348, 391, 472], "add_unredirected_head": [67, 240, 253, 391], "remove_head": [67, 253, 391, 473], "get_full_url": [67, 240, 253, 391], "set_proxi": [67, 253, 391, 415, 473], "get_head": [67, 240, 253, 382, 391], "header_item": [67, 240, 253, 391], "add_handl": [67, 107, 253, 391], "add_par": [67, 253, 391], "default_open": [67, 253, 391], "unknown_open": [67, 253, 391], "http_error_default": [67, 253, 391], "redirect_request": [67, 253, 391], "http_error_301": [67, 253, 391], "http_error_302": [67, 253, 391], "http_error_303": [67, 253, 391], "http_error_307": [67, 253, 391], "http_error_308": [67, 253, 391], "cookiejar": [67, 238, 241, 251, 253, 391, 479], "add_password": [67, 107, 253, 391], "find_user_password": [67, 253, 391, 479], "update_authent": [67, 253, 391], "is_authent": [67, 253, 391, 479], "http_error_auth_req": [67, 253, 391], "http_error_401": [67, 253, 391], "http_error_407": [67, 253, 391], "http_open": [67, 253, 391], "https_open": [67, 253, 391], "file_open": [67, 253, 391], "data_open": [67, 253, 391], "ftp_open": [67, 253, 391], "setmaxconn": [67, 253, 391], "http_respons": [67, 253, 391], "https_respons": [67, 253, 391], "urlretriev": [67, 253, 389, 391, 395, 479], "urlcleanup": [67, 253, 391, 479], "open_unknown": [67, 253, 391], "fancyurlopen": [67, 253, 391, 479], "prompt_user_passwd": [67, 253, 391], "addinfourl": [67, 253, 391, 479], "geturl": [67, 239, 253, 390, 391, 479], "getcod": [67, 239, 253, 391, 479], "urlpars": [67, 253, 390, 395, 464, 465, 466, 471, 475, 479], "parse_q": [67, 149, 253, 390, 464, 468, 475, 476, 477, 478, 479], "parse_qsl": [67, 149, 253, 390, 464, 468, 475, 476, 477, 478, 479], "urlunpars": [67, 253, 390], "urlsplit": [67, 134, 253, 390, 465, 475, 479], "urlunsplit": [67, 253, 390], "urljoin": [67, 253, 390, 474, 479], "urldefrag": [67, 253, 390, 471], "splitresult": [67, 253, 390, 479], "defragresult": [67, 253, 390, 471, 479], "parseresult": [67, 253, 390, 465, 471, 479], "defragresultbyt": [67, 253, 390, 479], "parseresultbyt": [67, 253, 390, 471, 479], "splitresultbyt": [67, 253, 390, 479], "quote_plus": [67, 253, 390, 471], "quote_from_byt": [67, 253, 390, 479], "unquote_plus": [67, 253, 390], "unquote_to_byt": [67, 253, 390, 479], "urlencod": [67, 83, 107, 149, 239, 253, 266, 390, 391, 471, 474, 479], "urlerror": [67, 253, 389, 391, 464, 479], "httperror": [67, 223, 253, 389, 391, 473, 479], "contenttooshorterror": [67, 253, 389, 391], "robot": [67, 251, 253, 380, 388, 458, 479], "robotfilepars": [67, 253, 392, 475, 479], "set_url": [67, 253, 392], "can_fetch": [67, 253, 392, 479], "crawl_delay": [67, 253, 392, 479], "request_r": [67, 253, 392, 479], "site_map": [67, 253, 392, 479], "httpstatus": [67, 238, 253, 474, 478, 479], "httpmethod": [67, 238, 253, 479], "httpconnect": [67, 253, 415, 464, 465, 471, 473, 474, 475, 476, 479], "httpsconnect": [67, 239, 253, 391, 464, 465, 471, 473, 476, 479], "httprespons": [67, 253, 391, 465, 472, 479], "parse_head": [67, 149, 239, 242, 253, 347, 479], "httpexcept": [67, 239, 253], "notconnect": [67, 239, 253], "invalidurl": [67, 239, 253, 479], "unknownprotocol": [67, 239, 253], "unknowntransferencod": [67, 239, 253], "unimplementedfilemod": [67, 239, 253], "incompleteread": [67, 239, 253], "improperconnectionst": [67, 239, 253], "cannotsendrequest": [67, 239, 253], "cannotsendhead": [67, 239, 253], "responsenotreadi": [67, 239, 253], "badstatuslin": [67, 239, 253], "linetoolong": [67, 239, 253], "remotedisconnect": [67, 239, 253, 474, 479], "http_port": [67, 239, 253], "https_port": [67, 239, 253], "getrespons": [67, 239, 253, 474, 479], "set_debuglevel": [67, 220, 239, 253, 285, 302, 332, 347, 355, 474], "set_tunnel": [67, 239, 253, 415, 471, 479], "get_proxy_response_head": [67, 239, 253, 479], "blocksiz": [67, 220, 239, 253, 290, 354, 476, 479], "putrequest": [67, 239, 253, 479], "puthead": [67, 239, 253], "endhead": [67, 239, 253, 475], "gethead": [67, 239, 253], "debuglevel": [67, 239, 253, 332, 355, 391, 474, 479], "httpmessag": [67, 107, 242, 253], "error_repli": [67, 220, 253], "error_temp": [67, 220, 253], "error_perm": [67, 220, 253], "error_proto": [67, 220, 253, 302, 472], "all_error": [67, 124, 220, 253, 334, 469, 479], "getwelcom": [67, 220, 253, 285, 302, 347], "login": [67, 100, 170, 220, 245, 253, 283, 285, 290, 332, 336, 347, 355, 391, 471, 479], "sendcmd": [67, 140, 220, 253], "voidcmd": [67, 220, 253], "retrbinari": [67, 220, 253], "retrlin": [67, 220, 253], "set_pasv": [67, 220, 253, 459], "storbinari": [67, 220, 253, 464, 465], "storlin": [67, 220, 253, 464], "transfercmd": [67, 220, 253], "ntransfercmd": [67, 220, 253], "mlsd": [67, 220, 253, 472], "nlst": [67, 220, 253, 472], "mkd": [67, 220, 253], "pwd": [67, 108, 170, 220, 226, 230, 251, 253, 290, 291, 336, 345, 387, 418, 461, 478, 479], "rmd": [67, 220, 253], "ftp_tls": [67, 253, 465, 470, 471, 472, 478, 479], "ssl_version": [67, 220, 253, 338, 470, 479], "auth": [67, 220, 245, 253, 266, 332, 338, 461, 474, 479], "ccc": [67, 220, 253, 344, 372, 472], "prot_p": [67, 220, 253], "prot_c": [67, 220, 253], "pop3": [67, 251, 253, 472, 473, 474, 478, 479], "pop3_ssl": [67, 253, 302, 471, 478, 479], "capa": [67, 253, 302, 473], "pass_": [67, 253, 302], "apop": [67, 253, 302], "rpop": [67, 253, 302], "retr": [67, 220, 253, 302], "dele": [67, 253, 302], "rset": [67, 253, 302, 332, 479], "noop": [67, 245, 253, 280, 302, 332, 479], "uidl": [67, 253, 302], "stls": [67, 253, 302, 473], "imap4": [67, 251, 253, 302, 471, 474, 475, 477, 478, 479], "imap4_ssl": [67, 245, 253, 472, 478, 479], "imap4_stream": [67, 245, 253, 478, 479], "internaldate2tupl": [67, 245, 253], "int2ap": [67, 245, 253], "parseflag": [67, 245, 253], "time2internald": [67, 245, 253], "deleteacl": [67, 245, 253, 462], "expung": [67, 245, 253], "getacl": [67, 245, 253, 460], "getannot": [67, 245, 253], "getquota": [67, 245, 253], "getquotaroot": [67, 245, 253], "login_cram_md5": [67, 245, 253], "logout": [67, 245, 253, 474, 477, 479], "lsub": [67, 245, 253], "myright": [67, 245, 253, 462], "proxyauth": [67, 245, 253], "recent": [67, 72, 75, 83, 84, 88, 92, 93, 94, 97, 98, 100, 106, 112, 118, 123, 130, 142, 149, 157, 164, 166, 173, 180, 183, 185, 190, 207, 208, 211, 222, 223, 231, 244, 245, 252, 253, 256, 264, 266, 280, 281, 290, 292, 293, 294, 296, 304, 311, 316, 332, 334, 337, 338, 341, 342, 344, 345, 349, 358, 371, 377, 378, 380, 383, 384, 385, 386, 390, 396, 398, 418, 423, 424, 425, 426, 432, 436, 437, 438, 439, 442, 445, 448, 451, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "setacl": [67, 245, 253, 460], "setannot": [67, 245, 253], "setquota": [67, 245, 253], "starttl": [67, 100, 245, 253, 266, 285, 332, 338, 347, 464, 471, 472, 479], "subscrib": [67, 100, 245, 253, 382, 424, 479], "unsubscrib": [67, 245, 253, 479], "unselect": [67, 245, 253, 478, 479], "xatom": [67, 245, 253], "protocol_vers": [67, 242, 245, 253], "utf8_en": [67, 245, 253, 474], "smtp_ssl": [67, 253, 332, 464, 472, 478, 479], "lmtp": [67, 253, 332, 464, 472, 478, 479], "smtpexcept": [67, 253, 332, 473], "smtpserverdisconnect": [67, 253, 332, 479], "smtpresponseexcept": [67, 253, 332], "smtpsenderrefus": [67, 253, 332], "smtprecipientsrefus": [67, 253, 332], "smtpdataerror": [67, 253, 332], "smtpconnecterror": [67, 253, 332], "smtpheloerror": [67, 253, 332], "smtpnotsupportederror": [67, 253, 332, 479], "smtpauthenticationerror": [67, 253, 332], "docmd": [67, 253, 332], "helo": [67, 253, 332], "ehlo": [67, 253, 332, 472], "ehlo_or_helo_if_need": [67, 253, 332], "has_extn": [67, 253, 332], "sendmail": [67, 83, 100, 103, 198, 205, 253, 316, 332, 447, 471, 474], "send_messag": [67, 197, 205, 253, 332, 471, 474, 479], "rfc": [67, 99, 100, 103, 107, 124, 141, 144, 155, 172, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 220, 227, 232, 234, 238, 239, 240, 241, 242, 245, 251, 253, 256, 259, 263, 266, 268, 269, 285, 302, 314, 324, 332, 334, 338, 343, 344, 355, 362, 389, 390, 391, 403, 404, 415, 447, 458, 460, 462, 463, 464, 465, 471, 472, 474, 476, 478, 479], "4122": [67, 251, 253, 463], "safeuuid": [67, 253, 394, 479], "bytes_l": [67, 253, 394], "urn": [67, 253, 390, 394], "is_saf": [67, 253, 394, 476, 479], "getnod": [67, 253, 394, 476, 479], "uuid1": [67, 253, 394, 463, 476, 479], "uuid3": [67, 253, 394, 463, 479], "uuid4": [67, 253, 394, 463, 479], "uuid5": [67, 253, 394, 463, 479], "namespace_dn": [67, 253, 394, 463], "namespace_url": [67, 253, 394], "namespace_oid": [67, 253, 394], "namespace_x500": [67, 253, 394], "reserved_nc": [67, 253, 394], "rfc_4122": [67, 253, 394], "reserved_microsoft": [67, 253, 394], "reserved_futur": [67, 253, 394], "tcpserver": [67, 100, 242, 253, 264, 416, 465, 479], "udpserv": [67, 253], "unixstreamserv": [67, 253, 335, 479], "unixdatagramserv": [67, 253, 335], "forkingmixin": [67, 253, 335, 472, 476, 479], "threadingmixin": [67, 242, 253, 335, 476, 479], "forkingtcpserv": [67, 253, 335], "forkingudpserv": [67, 253, 335], "threadingtcpserv": [67, 100, 253, 335], "threadingudpserv": [67, 253, 335], "forkingunixstreamserv": [67, 253, 335, 479], "forkingunixdatagramserv": [67, 253, 335, 479], "threadingunixstreamserv": [67, 253, 335], "threadingunixdatagramserv": [67, 253, 335], "baseserv": [67, 253, 335, 472, 479], "handle_request": [67, 100, 167, 253, 330, 335, 403, 416, 465], "service_act": [67, 253, 335, 472], "server_clos": [67, 253, 335, 403, 476, 479], "address_famili": [67, 253, 334, 335], "requesthandlerclass": [67, 242, 253, 335, 403], "server_address": [67, 242, 253, 335, 403], "allow_reuse_address": [67, 100, 253, 335, 416, 464], "request_queue_s": [67, 253, 335], "socket_typ": [67, 253, 335], "finish_request": [67, 253, 335], "get_request": [67, 253, 335], "handle_error": [67, 253, 335, 475, 479], "handle_timeout": [67, 253, 335, 464, 465], "process_request": [67, 100, 253, 335], "server_activ": [67, 253, 335, 416, 464], "server_bind": [67, 253, 335, 416, 464], "verify_request": [67, 253, 335, 479], "baserequesthandl": [67, 253, 335], "streamrequesthandl": [67, 100, 253, 335, 475, 479], "datagramrequesthandl": [67, 253, 335], "mixin": [67, 93, 158, 166, 253, 255, 358, 391, 479], "httpserver": [67, 242, 253, 330, 403], "threadinghttpserv": [67, 242, 253, 476, 479], "basehttprequesthandl": [67, 107, 239, 242, 253, 389, 403, 471, 472, 479], "client_address": [67, 242, 253, 335, 403], "close_connect": [67, 242, 253], "requestlin": [67, 242, 253], "request_vers": [67, 242, 253], "rfile": [67, 242, 253, 335], "wfile": [67, 242, 253, 335, 475, 479], "server_vers": [67, 242, 253], "sys_vers": [67, 242, 253], "error_message_format": [67, 242, 253, 473], "error_content_typ": [67, 242, 253], "messageclass": [67, 242, 253], "handle_one_request": [67, 242, 253], "handle_expect_100": [67, 242, 253], "send_error": [67, 242, 253, 473, 479], "send_respons": [67, 242, 253], "send_head": [67, 242, 253], "send_response_on": [67, 242, 253], "end_head": [67, 242, 253, 472], "flush_head": [67, 242, 253, 472], "log_request": [67, 242, 253], "log_error": [67, 242, 253], "log_messag": [67, 242, 253, 479], "version_str": [67, 242, 253], "date_time_str": [67, 242, 253], "log_date_time_str": [67, 242, 253], "address_str": [67, 242, 253], "simplehttprequesthandl": [67, 242, 253, 330, 476, 479], "extensions_map": [67, 242, 253], "do_head": [67, 153, 242, 253], "do_get": [67, 242, 253], "cgihttprequesthandl": [67, 242, 253, 479], "cgi_directori": [67, 242, 253], "do_post": [67, 242, 253], "cooki": [67, 107, 113, 232, 238, 251, 253, 338, 361, 374, 391, 462, 464, 465, 466, 474, 476, 479], "cookieerror": [67, 241, 253], "basecooki": [67, 241, 253], "simplecooki": [67, 241, 253, 479], "value_decod": [67, 241, 253], "value_encod": [67, 241, 253], "js_output": [67, 241, 253], "morsel": [67, 253, 464, 474, 476, 479], "coded_valu": [67, 241, 253, 474, 476, 479], "isreservedkey": [67, 241, 253], "outputstr": [67, 241, 253], "loaderror": [67, 240, 253], "filecookiejar": [67, 253, 479], "cookiepolici": [67, 253], "defaultcookiepolici": [67, 253, 479], "add_cookie_head": [67, 240, 253], "extract_cooki": [67, 240, 253], "set_polici": [67, 240, 253], "make_cooki": [67, 240, 253, 479], "set_cookie_if_ok": [67, 240, 253], "set_cooki": [67, 240, 253], "clear_session_cooki": [67, 240, 253], "revert": [67, 100, 167, 208, 239, 240, 253, 321, 354, 358, 451, 465, 472, 475, 479], "delayload": [67, 240, 253], "mozillacookiejar": [67, 240, 253, 479], "lwpcookiejar": [67, 240, 253, 479], "set_ok": [67, 240, 253], "return_ok": [67, 240, 253], "domain_return_ok": [67, 240, 253], "path_return_ok": [67, 240, 253], "netscap": [67, 174, 240, 253, 268, 399, 459, 462, 464, 470, 479], "rfc2965": [67, 240, 253], "hide_cookie2": [67, 240, 253], "blocked_domain": [67, 240, 253], "set_blocked_domain": [67, 240, 253], "is_block": [67, 240, 253], "allowed_domain": [67, 240, 253], "set_allowed_domain": [67, 240, 253], "is_not_allow": [67, 240, 253], "rfc2109_as_netscap": [67, 240, 253], "strict_domain": [67, 240, 253], "strict_rfc2965_unverifi": [67, 240, 253], "strict_ns_unverifi": [67, 240, 253], "strict_ns_domain": [67, 240, 253], "strict_ns_set_initial_dollar": [67, 240, 253], "strict_ns_set_path": [67, 240, 253], "domainstrictnodot": [67, 240, 253], "domainstrictnondomain": [67, 240, 253], "domainrfc2965match": [67, 240, 253], "domainliber": [67, 240, 253], "domainstrict": [67, 240, 253], "comment_url": [67, 240, 253], "rfc2109": [67, 240, 253], "port_specifi": [67, 240, 253], "domain_specifi": [67, 240, 253], "domain_initial_dot": [67, 240, 253], "has_nonstandard_attr": [67, 240, 253], "get_nonstandard_attr": [67, 240, 253], "set_nonstandard_attr": [67, 240, 253], "is_expir": [67, 240, 253], "rpc": [67, 79, 244, 251, 253, 259, 271, 414, 422, 460, 461, 462, 463, 464, 465, 475, 479], "serverproxi": [67, 253, 416, 474, 477, 479], "listmethod": [67, 253, 415, 416], "methodsignatur": [67, 253, 415, 416], "methodhelp": [67, 253, 415, 416], "faultcod": [67, 253, 415, 479], "faultstr": [67, 253, 415], "protocolerror": [67, 253], "errmsg": [67, 253, 415], "multical": [67, 253, 416], "simplexmlrpcserv": [67, 253, 415, 460, 462, 463, 464, 465, 466], "cgixmlrpcrequesthandl": [67, 253, 462], "simplexmlrpcrequesthandl": [67, 253, 416, 462, 465], "register_funct": [67, 253, 415, 416, 476, 479], "register_inst": [67, 253, 416], "register_introspection_funct": [67, 253, 416], "register_multicall_funct": [67, 253, 415, 416], "rpc_path": [67, 253, 416, 463], "docxmlrpcserv": [67, 253, 461, 463, 464, 466, 479], "doccgixmlrpcrequesthandl": [67, 253], "docxmlrpcrequesthandl": [67, 253, 416], "set_server_titl": [67, 253, 416], "set_server_nam": [67, 253, 416], "set_server_document": [67, 253, 416], "ipv4": [67, 97, 104, 124, 242, 251, 253, 334, 338, 464, 472, 477, 478, 479], "ipv6": [67, 97, 124, 242, 251, 253, 334, 338, 358, 390, 452, 460, 464, 465, 467, 471, 472, 474, 477, 478, 479], "ip_address": [67, 97, 140, 253, 256, 334], "ip_network": [67, 97, 253, 256], "ip_interfac": [67, 97, 253, 256, 479], "ip": [67, 79, 99, 100, 124, 145, 240, 242, 253, 264, 266, 334, 335, 338, 355, 358, 390, 391, 458, 464, 471, 472, 474, 476, 479], "ipv4address": [67, 97, 253, 256, 474, 479], "max_prefixlen": [67, 253, 256], "explod": [67, 97, 253, 256, 458, 460, 479], "reverse_point": [67, 253, 256, 474, 479], "is_multicast": [67, 253, 256, 479], "is_priv": [67, 253, 256, 479], "is_glob": [67, 253, 256, 261, 348, 473, 479], "is_unspecifi": [67, 253, 256], "is_loopback": [67, 253, 256], "is_link_loc": [67, 253, 256], "ipv6address": [67, 97, 253, 256, 474, 478, 479], "is_site_loc": [67, 253, 256], "ipv4_map": [67, 253, 256], "scope_id": [67, 253, 256, 334, 478], "sixtofour": [67, 253, 256], "teredo": [67, 253, 256], "net": [67, 80, 83, 107, 108, 180, 191, 232, 240, 253, 290, 316, 325, 420, 422, 430, 457, 458, 459, 460, 461, 462, 463, 464, 466, 472, 479], "ipv4network": [67, 97, 253, 256, 474, 476, 479], "network_address": [67, 253, 256], "broadcast_address": [67, 253, 256], "hostmask": [67, 97, 253, 256], "netmask": [67, 97, 253, 256, 474, 479], "with_prefixlen": [67, 253, 256], "with_netmask": [67, 253, 256], "with_hostmask": [67, 253, 256], "num_address": [67, 97, 253, 256], "prefixlen": [67, 253, 256], "address_exclud": [67, 253, 256], "subnet": [67, 253, 256, 472, 474, 479], "supernet": [67, 253, 256, 474], "subnet_of": [67, 253, 256, 476, 479], "supernet_of": [67, 253, 256, 476], "compare_network": [67, 253, 256], "ipv6network": [67, 97, 253, 256, 474, 476, 479], "ipv4interfac": [67, 97, 253, 256, 479], "ipv6interfac": [67, 97, 253, 256, 479], "v4_int_to_pack": [67, 253, 256], "v6_int_to_pack": [67, 253, 256], "summarize_address_rang": [67, 253, 256, 474, 479], "collapse_address": [67, 253, 256, 474, 479], "get_mixed_type_key": [67, 253, 256], "addressvalueerror": [67, 97, 253, 256], "netmaskvalueerror": [67, 97, 253, 256], "wav": [67, 139, 203, 251, 274, 333, 402, 446], "wave_read": [67, 274], "getnchannel": [67, 115, 274, 346, 347, 397], "getsampwidth": [67, 115, 274, 346, 347, 397], "getframer": [67, 115, 274, 346, 347, 397], "getnfram": [67, 115, 274, 346, 347, 397], "getcomptyp": [67, 115, 274, 346, 347, 397], "getcompnam": [67, 115, 274, 346, 347, 397], "getparam": [67, 115, 274, 346, 347, 397, 473], "readfram": [67, 115, 274, 346, 347, 397], "rewind": [67, 115, 274, 346, 347, 397], "getmark": [67, 115, 274, 346, 347, 397], "setpo": [67, 115, 219, 274, 346, 347, 380, 397], "wave_writ": [67, 274], "setnchannel": [67, 115, 274, 346, 347, 397], "setsampwidth": [67, 115, 274, 346, 347, 397, 473], "setframer": [67, 115, 274, 346, 347, 397], "setnfram": [67, 115, 274, 346, 347, 397], "setcomptyp": [67, 115, 274, 346, 347, 397], "setparam": [67, 115, 274, 346, 347, 397], "writeframesraw": [67, 115, 274, 346, 347, 397, 473], "writefram": [67, 115, 274, 346, 347, 397, 473], "rgb_to_yiq": [67, 159, 274], "yiq_to_rgb": [67, 159, 274], "rgb_to_hl": [67, 159, 274, 479], "hls_to_rgb": [67, 159, 274], "rgb_to_hsv": [67, 159, 274], "hsv_to_rgb": [67, 159, 274], "multilingu": [67, 243, 244, 251, 479], "bindtextdomain": [67, 227, 243, 263], "textdomain": [67, 227, 243, 263], "dgettext": [67, 227, 243, 263], "ngettext": [67, 227, 243, 479], "dngettext": [67, 227, 243], "pgettext": [67, 227, 243, 477, 479], "dpgettext": [67, 227, 243], "npgettext": [67, 227, 243], "dnpgettext": [67, 227, 243], "nulltransl": [67, 243, 469], "_pars": [67, 227, 243], "add_fallback": [67, 227, 243], "gnutransl": [67, 243], "catalog": [67, 243, 458, 459, 461, 479], "localeconv": [67, 243, 263, 341, 448, 475, 476, 479], "d_t_fmt": [67, 243, 263], "d_fmt": [67, 243, 263], "t_fmt": [67, 243, 263], "t_fmt_ampm": [67, 243, 263], "radixchar": [67, 243, 263], "thousep": [67, 243, 263], "yesexpr": [67, 243, 263], "noexpr": [67, 243, 263], "crncystr": [67, 243, 263], "era": [67, 243, 263, 463], "era_d_t_fmt": [67, 243, 263], "era_d_fmt": [67, 243, 263], "era_t_fmt": [67, 243, 263], "alt_digit": [67, 243, 263], "getdefaultlocal": [67, 243, 263, 451, 469, 470, 479], "getlocal": [67, 243, 263, 469, 479], "getpreferredencod": [67, 118, 243, 255, 263, 290, 345, 469, 470, 476, 479], "resetlocal": [67, 243, 263, 469, 479], "strcoll": [67, 105, 223, 243, 263, 471], "strxfrm": [67, 86, 105, 243, 263], "format_str": [67, 243, 263, 342, 448, 463, 470, 474, 476, 479], "currenc": [67, 183, 243, 263, 463, 479], "deloc": [67, 243, 263, 474, 479], "atof": [67, 243, 263, 462, 463], "atoi": [67, 71, 243, 263], "lc_collat": [67, 243, 263], "lc_time": [67, 148, 243, 263], "lc_monetari": [67, 243, 263, 479], "lc_messag": [67, 227, 243, 263], "lc_numer": [67, 243, 263, 341, 474, 475, 476, 479], "lc_all": [67, 227, 243, 263, 358, 448, 451, 469, 476, 479], "char_max": [67, 243, 263], "tip": [67, 222, 243, 244, 458, 465, 479], "dcgettext": [67, 227, 243, 263], "turtl": [67, 153, 219, 244, 251, 365, 464, 466, 469, 470, 471, 479], "draw": [67, 91, 153, 174, 219, 244, 315, 372, 464, 479], "pen": [67, 219], "graphic": [67, 84, 91, 106, 108, 155, 170, 174, 219, 246, 251, 365, 371, 384, 399, 464], "turtlescreen": [67, 219], "screen": [67, 84, 91, 94, 96, 106, 153, 174, 176, 219, 244, 317, 345, 365, 371, 372, 374, 458, 460, 461, 464, 471, 474, 478, 479], "rawturtl": [67, 219, 470, 479], "motion": [67, 174, 219, 367], "bk": [67, 219, 380], "rt": [67, 147, 219, 222, 231, 267, 358, 380, 479], "setposit": [67, 219, 380], "teleport": [67, 219, 380, 479], "setx": [67, 92, 219, 222, 380, 457], "seti": [67, 219, 380], "sethead": [67, 219, 380], "seth": [67, 219, 380, 479], "circl": [67, 93, 153, 219, 272, 380, 464], "stamp": [67, 180, 219, 380, 461, 462, 479], "clearstamp": [67, 219, 380], "toward": [67, 84, 144, 183, 190, 193, 202, 215, 218, 219, 222, 264, 272, 341, 349, 360, 362, 380, 424, 459, 461, 463, 464, 470, 473, 478, 479], "xcor": [67, 219, 380], "ycor": [67, 219, 380], "distanc": [67, 118, 152, 153, 219, 267, 272, 340, 365, 368, 380, 469, 477, 479], "measur": [67, 91, 92, 102, 131, 137, 139, 152, 183, 187, 219, 223, 296, 305, 319, 331, 335, 362, 363, 364, 365, 368, 378, 437, 458, 461, 462, 463, 464, 465, 470, 472, 473, 476, 477, 478, 479], "pendown": [67, 219, 380], "pd": [67, 219, 380], "penup": [67, 219, 380], "pu": [67, 219, 380], "pensiz": [67, 219, 380], "isdown": [67, 219, 380], "pencolor": [67, 219, 380], "fillcolor": [67, 219, 380], "begin_fil": [67, 219, 380], "end_fil": [67, 219, 380], "hideturtl": [67, 219, 380], "showturtl": [67, 219, 380], "st": [67, 219, 380, 461, 475, 476, 479], "isvis": [67, 219, 380], "resizemod": [67, 219, 380], "shapes": [67, 219, 380], "turtles": [67, 219, 380], "shearfactor": [67, 219, 380], "tilt": [67, 219, 380], "settiltangl": [67, 219, 380, 469, 470, 479], "tiltangl": [67, 219, 380, 469, 479], "shapetransform": [67, 219, 380], "get_shapepoli": [67, 219, 380], "onreleas": [67, 219, 380], "ondrag": [67, 219, 380], "begin_poli": [67, 219, 380], "end_poli": [67, 219, 380], "get_poli": [67, 219, 380], "getturtl": [67, 219, 380], "getpen": [67, 219, 380], "getscreen": [67, 219, 380], "setundobuff": [67, 219, 380], "undobufferentri": [67, 219, 380], "bgcolor": [67, 219, 380], "bgpic": [67, 219, 380], "clearscreen": [67, 219, 380], "resetscreen": [67, 219, 380], "screensiz": [67, 219, 380], "setworldcoordin": [67, 219, 380], "anim": [67, 93, 219, 227, 372, 442, 464, 474], "tracer": [67, 219, 376, 380, 464, 479], "onkey": [67, 219, 380], "onkeyreleas": [67, 219, 380], "onkeypress": [67, 219, 380], "onclick": [67, 219, 380], "onscreenclick": [67, 219, 380], "ontim": [67, 219, 380], "mainloop": [67, 80, 219, 244, 365, 372, 380, 479], "textinput": [67, 219, 380, 479], "numinput": [67, 219, 380, 479], "colormod": [67, 219, 380], "getcanva": [67, 219, 380], "getshap": [67, 219, 380], "register_shap": [67, 219, 380], "addshap": [67, 219, 380], "window_height": [67, 219, 380], "window_width": [67, 219, 380], "bye": [67, 153, 167, 219, 245, 285, 380, 472], "exitonclick": [67, 219, 380], "rawpen": [67, 219, 380], "scrolledcanva": [67, 219, 380], "addcompon": [67, 219, 380], "vec2d": [67, 219, 380, 479], "explan": [67, 103, 107, 164, 180, 187, 219, 242, 263, 268, 280, 294, 298, 301, 316, 334, 341, 349, 362, 365, 391, 458, 459, 460, 461, 462, 463, 464, 471, 479], "write_docstringdict": [67, 219, 380], "cmdloop": [67, 153, 219], "onecmd": [67, 153, 219], "emptylin": [67, 153, 219], "completedefault": [67, 153, 219], "precmd": [67, 153, 219], "postcmd": [67, 153, 219], "preloop": [67, 153, 219], "postloop": [67, 153, 219], "identchar": [67, 153, 219], "lastcmd": [67, 153, 219], "cmdqueue": [67, 153, 219], "intro": [67, 153, 219, 338, 455, 465], "doc_head": [67, 153, 219], "misc_head": [67, 153, 219], "undoc_head": [67, 153, 219], "ruler": [67, 153, 219], "use_rawinput": [67, 153, 219], "get_token": [67, 219, 328], "push_token": [67, 219, 328], "read_token": [67, 219, 328], "sourcehook": [67, 219, 328], "push_sourc": [67, 219, 328], "pop_sourc": [67, 219, 328], "error_lead": [67, 219, 328], "wordchar": [67, 219, 328], "escapedquot": [67, 219, 328], "whitespace_split": [67, 219, 328], "infil": [67, 118, 120, 138, 219, 259, 298, 328, 376, 448, 467, 471, 479], "instream": [67, 219, 328], "punctuation_char": [67, 219, 328, 475, 479], "tcl": [67, 80, 244, 251, 364, 371, 372, 448, 455, 457, 458, 461, 464, 465, 468, 469, 471, 474, 475, 477, 478, 479], "master": [67, 103, 106, 186, 190, 289, 290, 292, 296, 306, 316, 364, 365, 366, 369, 370, 372, 380, 464, 479], "children": [67, 84, 99, 101, 120, 130, 261, 264, 280, 290, 293, 309, 311, 319, 358, 364, 365, 372, 380, 384, 385, 386, 406, 407, 408, 409, 418, 458, 465, 476, 479], "life": [67, 86, 89, 164, 223, 281, 296, 337, 354, 364, 406, 418, 437, 457, 458, 464, 477, 479], "concept": [67, 91, 94, 97, 98, 99, 102, 106, 108, 137, 164, 183, 191, 241, 247, 255, 258, 280, 298, 306, 337, 341, 354, 361, 364, 380, 382, 386, 408, 409, 423, 428, 460, 461, 466, 472, 473, 474, 479], "handi": [67, 84, 91, 92, 93, 102, 103, 104, 108, 112, 148, 164, 173, 187, 289, 341, 364, 385, 458, 462], "packer": [67, 347, 364], "coupl": [67, 74, 84, 89, 100, 102, 108, 118, 124, 202, 205, 206, 264, 280, 289, 330, 364, 385, 386, 391, 405, 457, 473, 475, 476, 479], "createfilehandl": [67, 364, 365, 479], "deletefilehandl": [67, 364, 365], "colorchoos": [67, 251, 364, 365, 479], "choos": [67, 72, 74, 84, 88, 89, 94, 100, 102, 103, 104, 106, 108, 118, 155, 160, 190, 202, 222, 223, 232, 242, 247, 251, 264, 272, 281, 289, 292, 296, 305, 315, 337, 338, 344, 349, 361, 364, 365, 371, 385, 394, 409, 422, 428, 457, 460, 461, 465, 471, 472, 473, 476, 479], "dialog": [67, 76, 91, 244, 251, 278, 289, 347, 358, 364, 365, 371, 380, 457, 473, 474, 475, 476, 477, 478, 479], "chooser": [67, 364, 366], "askcolor": [67, 364, 366], "font": [67, 100, 106, 164, 209, 244, 251, 360, 364, 365, 371, 372, 380, 468, 475, 476, 478, 479], "bold": [67, 91, 148, 174, 364, 365, 368], "ital": [67, 148, 174, 364, 368], "roman": [67, 106, 364, 368, 383, 461, 479], "cget": [67, 364, 368, 372], "metric": [67, 84, 364, 368, 479], "nametofont": [67, 364, 368, 479], "simpledialog": [67, 364, 365, 479], "askfloat": [67, 186, 364], "askinteg": [67, 186, 364, 479], "askstr": [67, 186, 364], "buttonbox": [67, 186, 364, 371], "filedialog": [67, 364, 365], "askopenfil": [67, 186, 364], "asksaveasfil": [67, 186, 364], "askopenfilenam": [67, 186, 364], "asksaveasfilenam": [67, 186, 364], "askdirectori": [67, 186, 364], "savea": [67, 186, 364], "cancel_command": [67, 186, 364], "dirs_double_ev": [67, 186, 364], "dirs_select_ev": [67, 186, 364], "files_double_ev": [67, 186, 364], "files_select_ev": [67, 186, 364], "filter_command": [67, 186, 364], "get_filt": [67, 186, 364], "get_select": [67, 186, 364], "ok_ev": [67, 186, 364], "set_filt": [67, 186, 364], "set_select": [67, 186, 364], "loadfiledialog": [67, 186, 364], "ok_command": [67, 186, 364], "savefiledialog": [67, 186, 364], "commondialog": [67, 364, 365, 366], "messagebox": [67, 173, 186, 251, 364, 365, 479], "showinfo": [67, 364, 369], "showwarn": [67, 312, 364, 369, 396, 464, 479], "showerror": [67, 364, 369], "askquest": [67, 364, 369], "askokcancel": [67, 364, 369], "askretrycancel": [67, 364, 369], "askyesno": [67, 364, 369], "askyesnocancel": [67, 364, 369], "scrolledtext": [67, 251, 364, 365], "vbar": [67, 261, 364, 370, 373], "dnd": [67, 251, 364, 365], "drag": [67, 251, 364, 365, 371, 372, 380, 479], "dndhandler": [67, 364, 367], "on_mot": [67, 364, 367], "on_releas": [67, 364, 367], "dnd_start": [67, 364, 367], "scrollabl": [67, 244, 364, 371], "instat": [67, 364, 372], "combobox": [67, 364, 371], "spinbox": [67, 364, 371, 476, 477, 479], "notebook": [67, 364, 371, 477, 479], "enable_travers": [67, 364, 372], "progressbar": [67, 364], "sizegrip": [67, 364], "treeview": [67, 364, 477, 479], "bbox": [67, 364, 372], "get_children": [67, 261, 348, 364, 372], "set_children": [67, 364, 372], "focus": [67, 80, 84, 98, 107, 180, 186, 205, 244, 354, 364, 365, 372, 380, 390, 463, 465, 471, 472, 473, 475, 479], "identify_row": [67, 364, 372], "identify_column": [67, 364, 372], "identify_region": [67, 364, 372], "identify_el": [67, 364, 372], "prev": [67, 174, 364, 372], "reattach": [67, 364, 372], "selection_set": [67, 364, 372, 477, 479], "selection_add": [67, 364, 372, 479], "selection_remov": [67, 364, 372, 479], "selection_toggl": [67, 364, 372, 479], "tag_bind": [67, 364, 372], "tag_configur": [67, 364, 372], "tag_ha": [67, 364, 372, 479], "xview": [67, 364, 372], "yview": [67, 364, 372], "element_cr": [67, 364, 372], "element_nam": [67, 364, 372], "element_opt": [67, 364, 372], "theme_cr": [67, 364, 372], "theme_set": [67, 364, 372], "theme_nam": [67, 364, 372], "theme_us": [67, 364, 372], "tix": [67, 80, 251, 364, 365, 461, 475, 479], "balloon": [67, 364, 371], "labelentri": [67, 364, 371], "labelfram": [67, 364, 371, 372], "meter": [67, 93, 364, 371], "optionmenu": [67, 364, 371, 479], "popupmenu": [67, 364, 371], "stdbuttonbox": [67, 364, 371], "dirlist": [67, 364, 371], "dirtre": [67, 364, 371], "dirselectdialog": [67, 364, 371], "dirselectbox": [67, 364, 371], "exfileselectbox": [67, 364, 371], "fileselectbox": [67, 364, 371], "fileentri": [67, 364, 371], "hierarch": [67, 99, 242, 264, 265, 364, 365, 372, 390, 408, 409, 416, 428], "listbox": [67, 364, 372, 479], "hlist": [67, 364, 371, 479], "checklist": [67, 364, 371], "tabular": [67, 364], "tlist": [67, 364, 371], "panedwindow": [67, 364, 371, 372, 479], "listnotebook": [67, 364, 371], "inputon": [67, 364, 371], "geometri": [67, 364, 365, 370, 372, 479], "tixcommand": [67, 364, 371], "tix_configur": [67, 364, 371], "tix_cget": [67, 364, 371], "tix_getbitmap": [67, 364, 371], "tix_addbitmapdir": [67, 364, 371], "tix_filedialog": [67, 364, 371], "tix_getimag": [67, 364, 371], "tix_option_get": [67, 364, 371], "tix_resetopt": [67, 364, 371], "menu": [67, 91, 364, 365, 371, 380, 424, 457, 463, 467, 471, 475, 476, 477, 478, 479], "editor": [67, 71, 89, 103, 106, 247, 364, 431, 453, 458, 464, 473, 474, 475, 476, 477, 479], "menus": [67, 364, 365, 479], "calltip": [67, 364, 479], "newtyp": [67, 184, 475, 479], "nomin": [67, 120, 184, 479], "anystr": [67, 184, 382], "literalstr": [67, 184, 382, 469, 479], "noreturn": [67, 184, 382, 479], "classvar": [67, 178, 184, 382, 469, 475, 479], "notrequir": [67, 184, 382, 469, 479], "typeguard": [67, 184, 382, 468, 479], "typevar": [67, 120, 184, 188, 261, 341, 381, 382, 423, 469, 470, 479], "__covariant__": [67, 184, 382], "__contravariant__": [67, 184, 382], "__infer_variance__": [67, 184, 382], "__bound__": [67, 184, 382, 423, 425], "__constraints__": [67, 184, 382, 423], "typevartupl": [67, 120, 184, 188, 261, 341, 382, 423, 427, 469, 470, 479], "paramspec": [67, 120, 184, 188, 261, 341, 382, 423, 427, 468, 470, 479], "paramspecarg": [67, 184, 382, 468, 479], "paramspeckwarg": [67, 184, 382, 468, 479], "typealiastyp": [67, 184, 188, 382, 423, 432, 470, 479], "__value__": [67, 184, 382, 425, 432, 479], "__supertype__": [67, 184, 382, 479], "runtime_check": [67, 184, 382, 468, 470, 477, 479], "__total__": [67, 184, 382], "__required_keys__": [67, 184, 382, 479], "__optional_keys__": [67, 184, 382, 479], "supportsab": [67, 184, 382], "supportsbyt": [67, 184, 382, 469, 479], "supportscomplex": [67, 184, 382, 469, 479], "supportsfloat": [67, 184, 382], "supportsindex": [67, 184, 382, 477, 479], "supportsint": [67, 184, 218, 382, 469, 477, 479], "supportsround": [67, 184, 382], "textio": [67, 184, 249, 382, 479], "binaryio": [67, 184, 249, 382, 479], "assert_typ": [67, 184, 382, 469, 479], "assert_nev": [67, 184, 382, 469, 479], "reveal_typ": [67, 184, 382, 469, 479], "dataclass_transform": [67, 184, 382, 469, 470, 479], "get_overload": [67, 184, 382, 469, 479], "clear_overload": [67, 184, 382, 469, 479], "no_type_check": [67, 184, 382, 469, 479], "no_type_check_decor": [67, 184, 382], "type_check_on": [67, 184, 382, 479], "get_type_hint": [67, 86, 184, 382, 469, 476, 478, 479], "get_origin": [67, 184, 382, 477, 479], "get_arg": [67, 184, 382, 468, 469, 477, 478, 479], "is_typeddict": [67, 184, 382, 468, 479], "forwardref": [67, 184, 382, 479], "type_check": [67, 87, 184, 247, 289, 347, 382, 475, 479], "abstractset": [67, 184, 382], "asynccontextmanag": [67, 166, 184, 312, 382, 386, 424, 476, 479], "timelin": [67, 184], "onlin": [67, 102, 184, 251, 365, 380, 395, 410, 460, 464], "recogn": [67, 72, 84, 92, 97, 103, 118, 153, 155, 164, 174, 184, 188, 193, 200, 215, 225, 232, 246, 247, 255, 259, 263, 273, 279, 289, 290, 294, 296, 316, 328, 333, 342, 358, 362, 365, 373, 382, 385, 390, 391, 412, 431, 432, 457, 458, 466, 471, 472, 473, 474, 479], "dont_accept_true_for_1": [67, 184, 190], "dont_accept_blanklin": [67, 184, 190], "normalize_whitespac": [67, 184, 190], "ignore_exception_detail": [67, 184, 190, 465], "comparison_flag": [67, 184, 190], "report_udiff": [67, 184, 190, 462], "report_cdiff": [67, 184, 190, 462], "report_ndiff": [67, 184, 190, 462], "report_only_first_failur": [67, 184, 190], "fail_fast": [67, 184, 190, 473], "reporting_flag": [67, 184, 190], "register_optionflag": [67, 184, 190], "testfil": [67, 184, 190, 463, 479], "testmod": [67, 184, 190, 358, 447, 462, 467], "run_docstring_exampl": [67, 184, 190], "docfilesuit": [67, 184, 190, 463], "doctestsuit": [67, 184, 190, 384, 461, 474, 479], "set_unittest_reportflag": [67, 184, 190], "exc_msg": [67, 184, 190], "doctestfind": [67, 184, 462], "doctestpars": [67, 184], "get_doctest": [67, 184, 190], "get_exampl": [67, 184, 190], "doctestrunn": [67, 184, 462], "report_start": [67, 184, 190], "report_success": [67, 184, 190], "report_failur": [67, 184, 190], "report_unexpected_except": [67, 184, 190], "summar": [67, 92, 102, 106, 183, 184, 190, 256, 327, 341, 382, 384, 423, 426, 428, 462, 471], "outputcheck": [67, 184, 462], "output_differ": [67, 184, 190], "script_from_exampl": [67, 184, 190], "testsourc": [67, 184, 190], "debug_src": [67, 184, 190], "debugrunn": [67, 184, 190], "doctestfailur": [67, 184, 190], "got": [67, 72, 107, 124, 134, 136, 184, 190, 264, 280, 332, 337, 382, 391, 426, 437, 445, 451, 463, 467, 470, 477, 479], "unexpectedexcept": [67, 184, 190], "soapbox": [67, 184], "discoveri": [67, 184, 190, 277, 332, 415, 471, 473, 474, 479], "organ": [67, 83, 87, 94, 99, 100, 103, 184, 190, 255, 338, 422, 428, 461, 478, 479], "skipif": [67, 184, 358, 384], "skipunless": [67, 184, 384, 467], "expectedfailur": [67, 184, 358, 384, 467, 479], "skiptest": [67, 184, 358, 384, 465, 473, 479], "subtest": [67, 184, 473, 479], "testcas": [67, 184, 190, 358, 384, 385, 386, 422, 447, 465, 467, 469, 470, 471, 472, 473, 477, 479], "teardown": [67, 184, 190, 358, 384, 385, 386, 465, 479], "setupclass": [67, 184, 465, 477, 479], "teardownclass": [67, 184, 465, 479], "assertequ": [67, 110, 184, 358, 384, 385, 386, 447, 465, 469, 470, 471, 473, 477, 479], "assertnotequ": [67, 110, 184, 384, 469, 470, 471], "asserttru": [67, 110, 184, 384, 465, 469, 470, 471], "assertfals": [67, 110, 184, 384, 465, 469, 470], "asserti": [67, 184, 384, 386, 465], "assertisnot": [67, 184, 384, 465], "assertisnon": [67, 184, 384, 465, 467], "assertisnotnon": [67, 184, 384, 465, 467], "assertin": [67, 184, 384, 465], "assertnotin": [67, 184, 384, 465], "assertisinst": [67, 184, 384, 465], "assertnotisinst": [67, 184, 384, 465], "assertrais": [67, 110, 184, 384, 447, 465, 467, 469, 470, 472, 479], "assertraisesregex": [67, 184, 384, 469, 470, 472, 479], "assertwarn": [67, 184, 384, 471, 472, 479], "assertwarnsregex": [67, 184, 384, 471, 472, 479], "assertlog": [67, 184, 384, 468, 473, 479], "assertnolog": [67, 184, 384, 468, 479], "assertalmostequ": [67, 110, 184, 384, 465, 469, 470, 471, 479], "assertnotalmostequ": [67, 110, 184, 384, 465, 469, 470, 471, 479], "assertgreat": [67, 184, 384, 465], "assertgreaterequ": [67, 184, 384, 465], "assertless": [67, 184, 384, 465], "assertlessequ": [67, 184, 384, 465], "assertregex": [67, 184, 384, 469, 470, 471, 479], "assertnotregex": [67, 184, 384, 469, 470], "assertcountequ": [67, 184, 384, 471], "addtypeequalityfunc": [67, 184, 384, 465], "assertmultilineequ": [67, 184, 384, 465], "assertsequenceequ": [67, 184, 384, 465, 467, 479], "assertlistequ": [67, 184, 384, 465, 467, 479], "asserttupleequ": [67, 184, 384, 465, 467, 479], "assertsetequ": [67, 184, 384, 465, 467], "assertdictequ": [67, 184, 384, 465, 467], "failureexcept": [67, 184, 190, 384], "longmessag": [67, 107, 184, 242, 384, 465, 479], "maxdiff": [67, 184, 384, 471], "counttestcas": [67, 184, 384], "defaulttestresult": [67, 184, 384], "shortdescript": [67, 184, 384, 479], "addcleanup": [67, 184, 384, 385, 386, 465, 477], "entercontext": [67, 184, 384, 469, 479], "docleanup": [67, 184, 384, 465], "addclasscleanup": [67, 184, 384, 477, 479], "enterclasscontext": [67, 184, 384, 469, 479], "doclasscleanup": [67, 184, 384, 479], "isolatedasynciotestcas": [67, 184, 384, 469, 477, 479], "asyncsetup": [67, 184, 384, 477], "asyncteardown": [67, 184, 384, 477], "addasynccleanup": [67, 184, 384], "enterasynccontext": [67, 184, 384, 469, 479], "functiontestcas": [67, 184, 384], "testsuit": [67, 184, 190, 358, 384, 461, 473, 474, 479], "addtest": [67, 184, 190, 384], "testload": [67, 184, 358, 384, 385, 465, 469, 470, 474, 479], "loadtestsfromtestcas": [67, 184, 384, 469, 479], "loadtestsfrommodul": [67, 184, 358, 384, 469, 470, 474, 479], "loadtestsfromnam": [67, 184, 384, 465], "gettestcasenam": [67, 184, 384, 469, 470, 479], "discov": [67, 102, 112, 180, 184, 193, 202, 241, 358, 384, 411, 459, 460, 461, 465, 471, 473, 479], "testmethodprefix": [67, 184, 384], "sorttestmethodsus": [67, 184, 384], "suiteclass": [67, 184, 384, 465], "testnamepattern": [67, 184, 384], "testresult": [67, 184, 190, 384, 465, 467, 472, 479], "unexpectedsuccess": [67, 184, 384], "collecteddur": [67, 184, 384, 479], "shouldstop": [67, 184, 384], "testsrun": [67, 184, 384], "failfast": [67, 184, 384, 465, 479], "tb_local": [67, 184, 384], "wassuccess": [67, 184, 384], "starttest": [67, 184, 384], "stoptest": [67, 184, 384], "starttestrun": [67, 184, 384, 465, 479], "stoptestrun": [67, 184, 384, 465, 479], "adderror": [67, 184, 384, 479], "addfailur": [67, 184, 384, 479], "addsuccess": [67, 184, 384], "addskip": [67, 184, 384, 479], "addexpectedfailur": [67, 184, 384], "addunexpectedsuccess": [67, 184, 384], "addsubtest": [67, 184, 384, 479], "adddur": [67, 184, 384, 479], "texttestresult": [67, 184, 384, 470, 479], "defaulttestload": [67, 184, 384], "texttestrunn": [67, 184, 384, 479], "_makeresult": [67, 184, 384], "load_test": [67, 184, 190, 358, 474, 479], "fixtur": [67, 184, 465], "setupmodul": [67, 184, 465, 477, 479], "teardownmodul": [67, 184, 465, 479], "addmodulecleanup": [67, 184, 384, 477, 479], "entermodulecontext": [67, 184, 384, 469, 479], "domodulecleanup": [67, 184, 384, 479], "installhandl": [67, 184, 384], "registerresult": [67, 184, 384], "removeresult": [67, 184, 384], "assert_cal": [67, 184, 385, 475, 479], "assert_called_onc": [67, 184, 385, 475, 479], "assert_called_with": [67, 184, 385, 386, 479], "assert_called_once_with": [67, 184, 385, 386, 479], "assert_any_cal": [67, 184, 385], "assert_has_cal": [67, 184, 385, 386, 479], "assert_not_cal": [67, 184, 385, 474, 479], "reset_mock": [67, 184, 385, 475, 479], "mock_add_spec": [67, 184, 385], "attach_mock": [67, 184, 385, 386, 479], "configure_mock": [67, 184, 385, 386, 479], "_get_child_mock": [67, 184, 385, 386], "call_count": [67, 184, 385, 386], "return_valu": [67, 142, 184, 188, 385, 386, 471, 473, 475, 479], "side_effect": [67, 184, 385, 386, 475, 479], "call_arg": [67, 184, 385, 386, 479], "call_args_list": [67, 184, 385, 386], "method_cal": [67, 184, 385, 386], "mock_cal": [67, 184, 385, 386, 479], "noncallablemock": [67, 184, 385, 479], "propertymock": [67, 184, 385, 479], "asyncmock": [67, 184, 385, 386, 477, 479], "assert_await": [67, 184, 385], "assert_awaited_onc": [67, 184, 385, 386], "assert_awaited_with": [67, 184, 385], "assert_awaited_once_with": [67, 184, 385], "assert_any_await": [67, 184, 385], "assert_has_await": [67, 184, 385, 479], "assert_not_await": [67, 184, 385], "await_count": [67, 184, 385], "await_arg": [67, 184, 385], "await_args_list": [67, 184, 385, 479], "patcher": [67, 184, 386, 479], "stopal": [67, 184, 385, 479], "test_prefix": [67, 184], "magicmock": [67, 184, 474, 479], "noncallablemagicmock": [67, 184, 385], "call_list": [67, 184, 385, 386], "create_autospec": [67, 184, 479], "filter_dir": [67, 184], "mock_open": [67, 184, 473, 479], "autospecc": [67, 184, 479], "seal": [67, 184, 212, 471, 476, 479], "cope": [67, 184, 462, 479], "2to3": [67, 86, 184, 251, 464, 465, 466, 469, 471, 479], "fixer": [67, 184, 479], "lib2to3": [67, 86, 184, 469, 478, 479], "regress": [67, 77, 84, 89, 184, 190, 251, 259, 340, 465, 473, 474, 479], "testfail": [67, 184, 358], "resourcedeni": [67, 184, 358], "is_jython": [67, 184, 358], "is_android": [67, 184, 358, 479], "unix_shel": [67, 184, 358, 479], "loopback_timeout": [67, 184, 358, 479], "internet_timeout": [67, 184, 358, 479], "short_timeout": [67, 184, 358, 479], "long_timeout": [67, 184, 358, 479], "pipe_max_s": [67, 184, 358], "sock_max_s": [67, 184, 358], "test_support_dir": [67, 184, 358], "test_home_dir": [67, 184, 358], "test_data_dir": [67, 184, 358], "max_py_ssize_t": [67, 184, 358], "max_memus": [67, 184, 358], "real_max_memus": [67, 184, 358], "missing_c_docstr": [67, 184, 358], "have_docstr": [67, 184, 358], "test_http_url": [67, 184, 358, 479], "always_eq": [67, 184, 358], "never_eq": [67, 184, 358], "largest": [67, 94, 98, 164, 180, 183, 184, 272, 319, 341, 349, 358, 458, 459, 460, 461, 462, 463, 464, 472, 479], "smallest": [67, 94, 106, 180, 183, 184, 272, 341, 349, 358, 365, 378, 448, 461, 462, 463, 464, 479], "busy_retri": [67, 184, 358], "sleeping_retri": [67, 184, 358], "is_resource_en": [67, 184, 358], "python_is_optim": [67, 184, 358], "with_pymalloc": [67, 184, 358], "sortdict": [67, 184, 358], "findfil": [67, 184, 358, 479], "match_test": [67, 184, 358, 378], "set_match_test": [67, 184, 358], "run_unittest": [67, 184, 358, 479], "run_doctest": [67, 184, 358, 378], "get_pages": [67, 184, 358], "check_impl_detail": [67, 184, 358], "set_memlimit": [67, 184, 358], "record_original_stdout": [67, 184, 358], "get_original_stdout": [67, 184, 358], "args_from_interpreter_flag": [67, 184, 358], "optim_args_from_interpreter_flag": [67, 184, 358], "captured_stdin": [67, 184, 358], "captured_stdout": [67, 184, 358], "captured_stderr": [67, 184, 358, 479], "disable_faulthandl": [67, 184, 358], "gc_collect": [67, 184, 358], "disable_gc": [67, 184, 358], "swap_attr": [67, 184, 358, 479], "swap_item": [67, 184, 358, 479], "flush_std_stream": [67, 184, 358], "print_warn": [67, 184, 358], "wait_process": [67, 184, 358, 479], "calcobjs": [67, 184, 358, 479], "calcvobjs": [67, 184, 358], "checksizeof": [67, 184, 358], "anticipate_failur": [67, 184, 358], "system_must_validate_cert": [67, 184, 358], "run_with_local": [67, 184, 358], "run_with_tz": [67, 184, 358], "requires_freebsd_vers": [67, 184, 358], "requires_linux_vers": [67, 184, 358], "requires_mac_vers": [67, 184, 358], "requires_ieee_754": [67, 184, 358], "requires_zlib": [67, 184, 358, 479], "requires_gzip": [67, 184, 358], "requires_bz2": [67, 184, 358], "requires_lzma": [67, 184, 358], "requires_resourc": [67, 184, 358], "requires_docstr": [67, 184, 358], "requires_limited_api": [67, 184, 358], "cpython_on": [67, 184, 358, 479], "impl_detail": [67, 184, 358], "no_trac": [67, 184, 358], "refcount_test": [67, 184, 358], "bigmemtest": [67, 184, 358], "bigaddrspacetest": [67, 184, 358], "check_syntax_error": [67, 184, 358], "open_urlresourc": [67, 184, 358], "reap_children": [67, 184, 358], "get_attribut": [67, 184, 358], "catch_unraisable_except": [67, 184, 358, 479], "load_package_test": [67, 184, 358, 479], "detect_api_mismatch": [67, 184, 358], "run_in_subinterp": [67, 184, 358], "check_free_after_iter": [67, 184, 358], "missing_compiler_execut": [67, 184, 358, 479], "check__all__": [67, 184, 358, 479], "skip_if_broken_multiprocessing_synchron": [67, 184, 358, 479], "check_disallow_instanti": [67, 184, 358], "adjust_int_max_str_digit": [67, 184, 358], "suppresscrashreport": [67, 184, 358, 479], "savesign": [67, 184, 358], "matcher": [67, 184, 358, 386], "match_valu": [67, 184, 358], "socket_help": [67, 184, 251], "ipv6_en": [67, 184, 358], "find_unused_port": [67, 184, 358, 479], "bind_port": [67, 184, 358], "bind_unix_socket": [67, 184, 358], "skip_unless_bind_unix_socket": [67, 184, 358, 479], "transient_internet": [67, 184, 358], "script_help": [67, 184, 251, 479], "interpreter_requires_environ": [67, 184, 358], "run_python_until_end": [67, 184, 358, 479], "assert_python_ok": [67, 184, 358, 479], "assert_python_failur": [67, 184, 358, 479], "spawn_python": [67, 184, 358], "kill_python": [67, 184, 358], "make_script": [67, 184, 358], "make_zip_script": [67, 184, 358], "make_pkg": [67, 184, 358], "make_zip_pkg": [67, 184, 358], "bytecode_help": [67, 184, 251, 479], "bytecodetestcas": [67, 184, 358], "get_disassembly_as_str": [67, 184, 358], "assertinbytecod": [67, 184, 358], "assertnotinbytecod": [67, 184, 358, 479], "threading_help": [67, 184, 251], "reap_thread": [67, 184, 358], "start_thread": [67, 100, 184, 358, 479], "threading_cleanup": [67, 184, 358, 479], "threading_setup": [67, 184, 358, 479], "wait_threads_exit": [67, 184, 358], "catch_threading_except": [67, 184, 358, 479], "os_help": [67, 184, 251], "fs_nonascii": [67, 184, 358], "savedcwd": [67, 184, 358], "testfn": [67, 184, 358, 479], "testfn_nonascii": [67, 184, 358], "testfn_unencod": [67, 184, 358], "testfn_undecod": [67, 184, 358], "testfn_unicod": [67, 184, 358], "environmentvarguard": [67, 184, 358, 464], "fakepath": [67, 184, 358], "can_symlink": [67, 184, 358], "can_xattr": [67, 184, 358], "change_cwd": [67, 184, 358], "create_empty_fil": [67, 184, 358], "fd_count": [67, 184, 358, 479], "fs_is_case_insensit": [67, 184, 358], "make_bad_fd": [67, 184, 358], "skip_unless_symlink": [67, 184, 358], "skip_unless_xattr": [67, 184, 358], "temp_cwd": [67, 184, 358, 479], "temp_dir": [67, 184, 358], "temp_umask": [67, 184, 358], "import_help": [67, 184, 251, 479], "import_fresh_modul": [67, 184, 358, 479], "import_modul": [67, 84, 100, 184, 222, 265, 277, 321, 358, 424, 428, 432, 465, 470, 472, 479], "modules_setup": [67, 184, 358], "modules_cleanup": [67, 184, 358], "make_legacy_pyc": [67, 184, 358, 479], "cleanimport": [67, 184, 358], "dirsonsyspath": [67, 184, 358], "warnings_help": [67, 184, 251, 479], "ignore_warn": [67, 184, 358], "check_no_resource_warn": [67, 184, 358, 479], "check_syntax_warn": [67, 184, 358, 479], "check_warn": [67, 184, 358, 464], "warningsrecord": [67, 184, 358], "bdbquit": [67, 142, 182], "deletem": [67, 142, 182], "bpformat": [67, 142, 182], "bpprint": [67, 142, 182], "cond": [67, 136, 142, 182, 349, 382, 463], "bpbynumb": [67, 142, 182], "bplist": [67, 142, 182], "hit": [67, 85, 91, 142, 151, 173, 182, 210, 223, 244, 294, 338, 355, 365, 376, 385, 397, 463, 471, 479], "trace_dispatch": [67, 142, 182], "dispatch_lin": [67, 142, 182], "dispatch_cal": [67, 142, 182], "dispatch_return": [67, 142, 182], "dispatch_except": [67, 142, 182], "is_skipped_lin": [67, 142, 182], "stop_her": [67, 142, 182], "break_her": [67, 142, 182], "break_anywher": [67, 142, 182], "user_cal": [67, 142, 182], "user_lin": [67, 142, 182], "user_return": [67, 142, 182], "user_except": [67, 142, 182], "do_clear": [67, 142, 182], "set_step": [67, 142, 182], "set_next": [67, 142, 182], "set_return": [67, 142, 182], "set_until": [67, 142, 182], "set_trac": [67, 142, 182, 190, 222, 294, 349, 451, 476, 479], "set_continu": [67, 142, 182], "set_quit": [67, 142, 182], "set_break": [67, 142, 182], "clear_break": [67, 142, 182], "clear_bpbynumb": [67, 142, 182], "clear_all_file_break": [67, 142, 182], "clear_all_break": [67, 142, 182], "get_bpbynumb": [67, 142, 182], "get_break": [67, 142, 182], "get_file_break": [67, 142, 182], "get_all_break": [67, 142, 182], "format_stack_entri": [67, 142, 182, 479], "runev": [67, 142, 182, 294], "runctx": [67, 142, 182, 305, 376], "runcal": [67, 142, 182, 294, 305, 477], "checkfuncnam": [67, 142, 182], "dump_traceback": [67, 182, 211, 474, 479], "is_en": [67, 182, 211], "dump_traceback_lat": [67, 182, 211, 474, 479], "cancel_dump_traceback_lat": [67, 182, 211], "post_mortem": [67, 182, 190, 294, 464], "pm": [67, 180, 182, 190, 263, 294, 349, 362], "introduct": [67, 75, 91, 94, 97, 112, 118, 131, 182, 190, 256, 280, 334, 338, 363, 382, 386, 458, 459, 460, 462, 473, 475, 479], "create_stat": [67, 182, 305], "print_stat": [67, 182, 305], "dump_stat": [67, 182, 305], "strip_dir": [67, 182, 305], "sort_stat": [67, 182, 305], "reverse_ord": [67, 182, 305], "print_cal": [67, 182, 305], "print_calle": [67, 182, 305], "get_stats_profil": [67, 182, 305], "default_tim": [67, 182, 363], "autorang": [67, 182, 363, 475, 479], "print_exc": [67, 100, 182, 312, 363, 377, 479], "programmat": [67, 71, 120, 164, 166, 182, 205, 207, 261, 263, 265, 277, 289, 296, 306, 317, 349, 374, 391, 465, 472, 473, 479], "runfunc": [67, 182, 376, 477], "coverageresult": [67, 182, 376, 479], "write_result": [67, 182, 376], "peak": [67, 139, 182, 463, 478], "clear_trac": [67, 182, 378], "get_object_traceback": [67, 182, 378, 479], "get_traceback_limit": [67, 182, 378], "get_traced_memori": [67, 182, 378], "reset_peak": [67, 182, 378, 478], "get_tracemalloc_memori": [67, 182, 378], "is_trac": [67, 182, 378], "take_snapshot": [67, 182, 378], "domainfilt": [67, 182, 475], "filename_pattern": [67, 182, 378], "all_fram": [67, 182, 378], "snapshot": [67, 182, 254, 339, 473], "compare_to": [67, 182, 378], "filter_trac": [67, 182, 378], "statisticdiff": [67, 182], "count_diff": [67, 182, 378], "size_diff": [67, 182, 378], "total_nfram": [67, 182, 378, 479], "envbuild": [67, 189, 473, 479], "ensure_directori": [67, 189, 395, 479], "create_configur": [67, 189, 395], "setup_python": [67, 189, 395], "setup_script": [67, 189, 395], "upgrade_depend": [67, 189, 395, 479], "post_setup": [67, 189, 395], "install_script": [67, 189, 395], "create_arch": [67, 189, 417, 476, 479], "get_interpret": [67, 189, 417], "standalon": [67, 120, 166, 189, 190, 249, 311, 380, 384, 407, 423, 464, 479], "abiflag": [67, 108, 312, 349, 446, 452, 471, 477, 479], "builtin_module_nam": [67, 83, 247, 312, 349, 446], "call_trac": [67, 312, 349, 446, 479], "_clear_type_cach": [67, 312, 349, 446], "_current_fram": [67, 140, 312, 349, 446, 463], "_current_except": [67, 140, 312, 349, 470, 479], "breakpointhook": [67, 140, 222, 312, 349, 446, 451, 476, 479], "_debugmallocstat": [67, 312, 349, 446], "dllhandl": [67, 312, 349], "displayhook": [67, 222, 312, 349, 446, 459], "_emscripten_info": [67, 312, 349, 479], "__breakpointhook__": [67, 312, 349, 446, 479], "__displayhook__": [67, 312, 349, 446], "__unraisablehook__": [67, 312, 349, 446], "float_info": [67, 86, 272, 312, 341, 349, 446, 464, 479], "float_repr_styl": [67, 312, 349, 446, 465], "getallocatedblock": [67, 312, 349, 446, 473], "getunicodeinterneds": [67, 312, 349, 470], "getandroidapilevel": [67, 312, 349, 476, 479], "getdefaultencod": [67, 312, 349, 446], "getdlopenflag": [67, 290, 312, 349, 446, 460], "get_int_max_str_digit": [67, 312, 341, 349], "getrefcount": [67, 86, 312, 349, 446], "getrecursionlimit": [67, 160, 210, 244, 312, 349, 446, 458, 470, 479], "getsizeof": [67, 183, 312, 349, 358, 378, 446, 464, 469, 479], "getswitchinterv": [67, 312, 349, 446, 478, 479], "_getfram": [67, 99, 140, 312, 349, 446, 459, 469, 479], "_getframemodulenam": [67, 140, 312, 349, 479], "getwindowsvers": [67, 312, 349, 465, 475, 479], "get_asyncgen_hook": [67, 312, 349, 446, 479], "get_coroutine_origin_tracking_depth": [67, 312, 349, 446, 476, 479], "hash_info": [67, 312, 341, 349, 424, 446, 471, 473], "__interactivehook__": [67, 312, 331, 349, 446, 451, 473], "maxunicod": [67, 312, 349, 446, 472], "setdlopenflag": [67, 290, 312, 349, 446, 460, 472], "set_int_max_str_digit": [67, 312, 341, 349, 358, 479], "setrecursionlimit": [67, 244, 296, 312, 349, 446, 458, 470, 479], "set_asyncgen_hook": [67, 312, 349, 426, 446, 479], "set_coroutine_origin_tracking_depth": [67, 252, 312, 349, 446, 476, 479], "activate_stack_trampolin": [67, 101, 312, 349, 470, 479], "deactivate_stack_trampolin": [67, 101, 312, 349, 470, 479], "is_stack_trampoline_act": [67, 312, 349, 470, 479], "_enablelegacywindowsfsencod": [67, 312, 349, 451, 475], "__stdin__": [67, 244, 312, 349, 446], "__stdout__": [67, 244, 312, 329, 349, 446], "__stderr__": [67, 244, 312, 349, 358, 446], "stdlib_module_nam": [67, 312, 349, 468, 479], "thread_info": [67, 312, 349, 446, 472, 479], "tracebacklimit": [67, 312, 349, 479], "api_vers": [67, 312, 349, 446, 461], "winver": [67, 312, 349], "get_config_var": [67, 71, 290, 312, 351, 421, 465, 471, 473, 479], "get_scheme_nam": [67, 312, 351], "get_default_schem": [67, 312, 351, 479], "get_preferred_schem": [67, 312, 351, 469, 479], "_get_preferred_schem": [67, 312, 351], "get_path_nam": [67, 312, 351], "get_path": [67, 312, 351, 465, 471, 479], "get_python_vers": [67, 312, 351, 471], "get_platform": [67, 312, 351, 471, 479], "is_python_build": [67, 312, 351, 465], "parse_config_h": [67, 312, 351], "get_config_h_filenam": [67, 312, 351], "get_makefile_filenam": [67, 71, 312, 351], "idiomat": [67, 102, 110, 312, 382, 479], "formatwarn": [67, 264, 312, 396, 464, 479], "filterwarn": [67, 312, 396, 451, 459, 461, 479], "simplefilt": [67, 312, 358, 396, 464, 465, 469, 479], "resetwarn": [67, 312, 396, 471], "catch_warn": [67, 312, 358, 396, 464, 469, 470, 479], "asdict": [67, 178, 312, 479], "astupl": [67, 178, 312, 479], "make_dataclass": [67, 178, 312, 479], "is_dataclass": [67, 178, 312, 479], "kw_on": [67, 178, 312, 382, 468, 479], "frozeninstanceerror": [67, 178, 312, 479], "post": [67, 93, 94, 99, 100, 107, 141, 149, 173, 190, 191, 238, 239, 242, 266, 285, 292, 294, 312, 338, 347, 349, 365, 390, 391, 395, 416, 436, 452, 458, 460, 464, 470, 471, 472, 477, 479], "__post_init__": [67, 178, 312, 479], "abstractcontextmanag": [67, 166, 312, 341, 382, 475, 479], "abstractasynccontextmanag": [67, 166, 312, 341, 382, 476, 479], "nullcontext": [67, 166, 312, 468, 476, 479], "redirect_stdout": [67, 166, 312, 473, 474], "redirect_stderr": [67, 166, 312, 474, 479], "contextdecor": [67, 166, 312, 471], "asynccontextdecor": [67, 166, 312, 468, 479], "exitstack": [67, 166, 312, 469, 472, 476, 477, 479], "enter_context": [67, 166, 312, 469, 479], "push": [67, 89, 100, 154, 157, 166, 174, 176, 177, 183, 188, 210, 279, 280, 312, 328, 361, 409, 431, 432, 437, 458, 464, 472, 479], "pop_al": [67, 166, 312], "asyncexitstack": [67, 166, 312, 469, 476, 477, 479], "enter_async_context": [67, 166, 312, 469, 479], "push_async_exit": [67, 166, 312], "push_async_callback": [67, 166, 312, 477], "reusabl": [67, 112, 312, 382, 403, 473], "reentrant": [67, 255, 312, 313, 361, 473, 479], "abcmeta": [67, 114, 312, 424, 464, 471, 472, 473, 479], "__subclasshook__": [67, 79, 114, 158, 312, 479], "abstractmethod": [67, 92, 114, 223, 247, 248, 250, 286, 290, 312, 326, 464, 472], "abstractclassmethod": [67, 114, 312, 471, 472], "abstractstaticmethod": [67, 114, 312, 471, 472], "abstractproperti": [67, 114, 312, 464, 472], "get_cache_token": [67, 114, 312, 473], "update_abstractmethod": [67, 114, 312, 479], "print_tb": [67, 211, 312, 377, 474], "print_except": [67, 264, 266, 312, 377, 468, 479], "print_last": [67, 312, 377], "extract_tb": [67, 312, 377], "extract_stack": [67, 312, 377, 479], "format_list": [67, 312, 377, 479], "format_exception_on": [67, 190, 312, 377, 468, 479], "format_except": [67, 312, 377, 468, 479], "format_exc": [67, 312, 377], "format_tb": [67, 312, 377, 378], "format_stack": [67, 312, 377, 479], "clear_fram": [67, 312, 377, 473], "walk_stack": [67, 312, 377, 474], "walk_tb": [67, 312, 377, 474], "tracebackexcept": [67, 312, 469, 474, 479], "exc_typ": [67, 110, 166, 312, 330, 341, 349, 358, 361, 377, 386, 424, 466, 469, 479], "from_except": [67, 312, 377], "stacksummari": [67, 312, 469, 474, 479], "from_list": [67, 312, 377], "format_frame_summari": [67, 312, 377, 469, 479], "framesummari": [67, 312, 474, 479], "get_object": [67, 140, 224, 312, 468, 477, 479], "get_stat": [67, 94, 224, 312, 473, 479], "set_threshold": [67, 224, 312], "get_count": [67, 224, 312, 463], "get_threshold": [67, 224, 312], "get_referr": [67, 140, 224, 312, 378, 468, 479], "unfreez": [67, 224, 312, 476], "get_freeze_count": [67, 224, 312, 476], "debug_stat": [67, 224, 312], "debug_collect": [67, 224, 312], "debug_uncollect": [67, 224, 312, 471], "debug_saveal": [67, 224, 312], "debug_leak": [67, 224, 312], "getmembers_stat": [67, 252, 312, 469, 479], "getmodulenam": [67, 247, 252, 312, 475], "ismodul": [67, 252, 312], "isclass": [67, 252, 312, 424], "ismethod": [67, 252, 312], "isfunct": [67, 252, 312], "isgeneratorfunct": [67, 252, 312, 464, 479], "isgener": [67, 252, 312, 464], "iscoroutinefunct": [67, 252, 312, 385, 470, 474, 479], "markcoroutinefunct": [67, 252, 312, 470, 479], "isawait": [67, 127, 158, 252, 312, 385, 474, 479], "isasyncgenfunct": [67, 252, 312, 479], "isasyncgen": [67, 252, 312], "istraceback": [67, 252, 312], "isfram": [67, 252, 312], "iscod": [67, 252, 312], "isbuiltin": [67, 252, 312], "ismethodwrapp": [67, 252, 312, 469, 479], "isroutin": [67, 252, 312, 479], "isabstract": [67, 252, 312, 464, 479], "ismethoddescriptor": [67, 252, 312], "isdatadescriptor": [67, 252, 312, 479], "isgetsetdescriptor": [67, 252, 312], "ismemberdescriptor": [67, 252, 312], "getdoc": [67, 252, 312, 424, 474, 477, 479], "getcom": [67, 252, 310, 312], "getfil": [67, 252, 312, 479], "getmodul": [67, 252, 312, 479], "getsourcefil": [67, 252, 312, 479], "getsourcelin": [67, 252, 312, 479], "getsourc": [67, 252, 312, 479], "cleandoc": [67, 120, 252, 312], "return_annot": [67, 252, 312], "bind_parti": [67, 252, 312], "from_cal": [67, 252, 312, 468, 469, 474, 479], "boundargu": [67, 252, 312, 472, 474, 478, 479], "apply_default": [67, 252, 312, 474, 479], "getclasstre": [67, 252, 312], "getfullargspec": [67, 252, 310, 312, 469, 473, 474, 475, 479], "getargvalu": [67, 252, 312, 474], "formatargvalu": [67, 252, 312, 474], "getmro": [67, 252, 312], "getcallarg": [67, 252, 312, 465, 474, 479], "getclosurevar": [67, 252, 312, 472], "get_annot": [67, 87, 252, 312, 468, 479], "frameinfo": [67, 252, 312, 469], "code_context": [67, 252, 312], "getframeinfo": [67, 252, 312, 469, 479], "getouterfram": [67, 252, 312, 469, 474, 479], "getinnerfram": [67, 252, 312, 469, 474, 479], "currentfram": [67, 252, 312, 469], "getattr_stat": [67, 252, 312, 382, 470, 471, 479], "getgeneratorst": [67, 252, 312, 471], "getcoroutinest": [67, 252, 312, 474, 479], "getasyncgenst": [67, 252, 312, 470, 479], "getgeneratorloc": [67, 252, 312, 472], "getcoroutineloc": [67, 252, 312, 474, 479], "getasyncgenloc": [67, 252, 312, 470, 479], "co_optim": [67, 252, 312], "co_newloc": [67, 252, 312], "co_vararg": [67, 252, 312], "co_varkeyword": [67, 252, 312], "co_nest": [67, 252, 312], "co_gener": [67, 252, 312, 479], "co_coroutin": [67, 252, 312, 477, 479], "co_iterable_coroutin": [67, 188, 252, 312], "co_async_gener": [67, 252, 312], "bufferflag": [67, 252, 312, 424, 470], "nd": [67, 106, 222, 244, 252, 312, 316, 341, 431], "any_contigu": [67, 252, 312], "contig_ro": [67, 252, 312], "strided_ro": [67, 252, 312], "records_ro": [67, 252, 312], "full_ro": [67, 252, 312], "enable_user_sit": [67, 312, 331], "user_sit": [67, 108, 312, 331], "user_bas": [67, 108, 312, 331, 465], "addsitedir": [67, 108, 312, 331], "getsitepackag": [67, 312, 331, 465, 471], "getuserbas": [67, 312, 331, 465, 471], "getusersitepackag": [67, 312, 331, 434, 465, 471], "interactiveinterpret": [67, 154, 177, 474, 479], "interactiveconsol": [67, 154, 177, 317], "compile_command": [67, 154, 156, 177, 479], "runsourc": [67, 154, 177, 337], "runcod": [67, 154, 177], "showsyntaxerror": [67, 154, 177], "showtraceback": [67, 154, 177, 474, 479], "resetbuff": [67, 154, 177], "raw_input": [67, 110, 154, 177, 466], "codeop": [67, 78, 177, 251, 479], "commandcompil": [67, 156, 177], "zipimporterror": [67, 277, 419], "find_spec": [67, 247, 277, 299, 349, 419, 428, 468, 470, 473, 474, 476, 479], "get_cod": [67, 173, 247, 277, 419, 473], "get_data": [67, 247, 277, 299, 391, 419, 464, 473, 479], "get_sourc": [67, 247, 262, 277, 419, 473, 479], "load_modul": [67, 86, 247, 277, 419, 428, 461, 468, 470, 473, 475, 479], "invalidate_cach": [67, 247, 277, 419, 468, 472, 476, 479], "pkgutil": [67, 251, 277, 463, 464, 468, 469, 470, 472, 475, 476, 479], "moduleinfo": [67, 277, 299, 475], "extend_path": [67, 277, 299], "find_load": [67, 277, 299, 419, 428, 468, 469, 470, 472, 473, 476, 479], "get_import": [67, 277, 299], "get_load": [67, 277, 299, 470, 479], "iter_import": [67, 277, 299, 472], "iter_modul": [67, 277, 299, 472, 475, 479], "walk_packag": [67, 277, 299, 472, 475, 476, 479], "resolve_nam": [67, 247, 277, 299, 478, 479], "modulefind": [67, 251, 277, 479], "addpackagepath": [67, 276, 277], "replacepackag": [67, 276, 277], "run_script": [67, 276, 277], "runpi": [67, 112, 251, 277, 378, 451, 463, 464, 465, 467, 468, 473, 479], "run_path": [67, 277, 321, 451, 465, 479], "metapathfind": [67, 86, 247, 248, 277, 349, 468, 469, 472, 473, 476, 479], "pathentryfind": [67, 86, 247, 277, 419, 428, 468, 469, 472, 473, 476], "resourceload": [67, 247, 277, 476, 479], "inspectload": [67, 247, 277, 473, 474, 479], "source_to_cod": [67, 247, 277, 473, 474, 479], "executionload": [67, 247, 277], "fileload": [67, 247, 277, 472, 473], "sourceload": [67, 247, 277, 472, 473], "path_stat": [67, 247, 277, 472], "path_mtim": [67, 247, 277, 472], "set_data": [67, 247, 277], "source_suffix": [67, 247, 277, 470], "debug_bytecode_suffix": [67, 247, 277], "optimized_bytecode_suffix": [67, 247, 277], "bytecode_suffix": [67, 247, 277, 470], "extension_suffix": [67, 247, 277, 470], "all_suffix": [67, 247, 252, 277], "builtinimport": [67, 247, 277, 280, 468, 469, 475, 479], "frozenimport": [67, 247, 277, 468, 469, 473, 479], "windowsregistryfind": [67, 247, 277, 457, 468, 469, 475, 479], "pathfind": [67, 247, 277, 428, 468, 469, 473, 476, 479], "filefind": [67, 247, 277, 299, 468, 469, 472, 479], "sourcelessfileload": [67, 247, 277, 472, 475], "extensionfileload": [67, 247, 277, 472, 473, 475], "submodule_search_loc": [67, 247, 249, 277, 428], "loader_st": [67, 247, 277, 479], "has_loc": [67, 247, 277, 428], "magic_numb": [67, 247, 277, 470, 473], "cache_from_sourc": [67, 247, 277, 470, 471, 473, 474, 475], "decode_sourc": [67, 247, 277, 473], "module_from_spec": [67, 247, 277, 381, 470, 474, 479], "spec_from_load": [67, 247, 277, 468], "spec_from_file_loc": [67, 247, 277, 470, 475], "source_hash": [67, 247, 277, 476, 479], "_incompatible_extension_module_restrict": [67, 247, 277, 479], "lazyload": [67, 247, 277, 474, 475, 479], "as_fil": [67, 249, 250, 277, 479], "open_binari": [67, 249, 277, 469], "open_text": [67, 249, 277, 469], "read_binari": [67, 249, 277, 469, 479], "is_resourc": [67, 249, 250, 277, 469], "resourceread": [67, 247, 249, 250, 277, 470, 476, 479], "open_resourc": [67, 250, 277], "resource_path": [67, 250, 277], "traversableresourc": [67, 250, 277, 470, 479], "end_col_offset": [67, 120, 188, 261, 427, 477, 479], "formattedvalu": [67, 120, 261, 479], "joinedstr": [67, 120, 261, 479], "star": [67, 92, 120, 188, 261, 354, 373, 409, 423, 427, 430, 432, 468, 469, 479], "expr": [67, 94, 120, 142, 261, 337, 384, 425, 426, 432, 458, 462, 466, 477, 478, 479], "unaryop": [67, 120, 261], "uadd": [67, 120, 261, 427], "usub": [67, 120, 261, 427], "binop": [67, 120, 261, 464, 479], "mult": [67, 120, 261, 427], "div": [67, 84, 120, 183, 237, 261, 408, 427], "bitor": [67, 120, 261, 427], "bitxor": [67, 120, 261, 427], "bitand": [67, 120, 261, 427], "matmult": [67, 120, 261, 427], "boolop": [67, 120, 261], "noteq": [67, 120, 261, 427], "lte": [67, 120, 261, 427], "gte": [67, 120, 261, 427], "isnot": [67, 120, 261, 427], "notin": [67, 120, 261, 427], "ifexp": [67, 120, 261], "namedexpr": [67, 120, 261], "listcomp": [67, 94, 120, 261, 427, 438], "setcomp": [67, 120, 261, 427], "generatorexp": [67, 120, 261], "dictcomp": [67, 120, 261, 427], "type_com": [67, 120, 261, 373, 427, 477, 479], "annassign": [67, 120, 261], "augassign": [67, 120, 261, 427], "importfrom": [67, 120, 261, 479], "trystar": [67, 120, 261], "excepthandl": [67, 120, 261], "withitem": [67, 120, 261], "match_cas": [67, 120, 261], "matchvalu": [67, 120, 261, 479], "matchsingleton": [67, 120, 261, 479], "matchsequ": [67, 120, 261, 479], "matchstar": [67, 120, 261, 479], "matchmap": [67, 120, 261, 479], "matchclass": [67, 120, 261, 479], "matcha": [67, 120, 261, 479], "matchor": [67, 120, 261, 479], "functiondef": [67, 120, 261, 479], "yieldfrom": [67, 120, 261], "classdef": [67, 120, 261, 423, 479], "asyncfunctiondef": [67, 120, 261, 479], "asyncfor": [67, 120, 261, 479], "asyncwith": [67, 120, 261, 479], "unpars": [67, 118, 120, 196, 248, 261, 311, 411, 478, 479], "literal_ev": [67, 120, 222, 261, 464, 471, 476, 479], "get_docstr": [67, 120, 261, 479], "get_source_seg": [67, 120, 261, 477, 479], "fix_missing_loc": [67, 120, 261, 479], "increment_lineno": [67, 120, 261, 479], "copy_loc": [67, 120, 261], "iter_field": [67, 120, 261], "iter_child_nod": [67, 120, 261], "nodevisitor": [67, 120, 261, 464, 477, 479], "generic_visit": [67, 120, 261], "nodetransform": [67, 120, 261, 464, 479], "pycf_allow_top_level_await": [67, 120, 222, 261, 477, 478, 479], "pycf_type_com": [67, 120, 261], "symbolt": [67, 261, 348, 478, 479], "get_typ": [67, 261, 348, 391, 473], "get_lineno": [67, 261, 348], "is_optim": [67, 261, 348], "is_nest": [67, 261, 348], "has_children": [67, 261, 348], "get_symbol": [67, 261, 348], "get_paramet": [67, 261, 348], "get_loc": [67, 261, 348], "get_glob": [67, 261, 348], "get_nonloc": [67, 261, 348], "get_fre": [67, 261, 348], "is_referenc": [67, 261, 348], "is_import": [67, 261, 348], "is_paramet": [67, 261, 348], "is_nonloc": [67, 261, 348, 479], "is_declared_glob": [67, 261, 348, 465], "is_loc": [67, 261, 348], "is_annot": [67, 261, 348], "is_fre": [67, 261, 348], "is_assign": [67, 261, 348], "is_namespac": [67, 261, 348], "get_namespac": [67, 261, 348], "tok_nam": [67, 261, 373, 479], "istermin": [67, 261, 373], "isnontermin": [67, 261, 373], "iseof": [67, 261, 373], "endmark": [67, 261, 373, 374, 427], "lpar": [67, 261, 373, 374, 479], "rpar": [67, 261, 373, 374], "lsqb": [67, 261, 373], "rsqb": [67, 261, 373], "semi": [67, 89, 261, 280, 289, 373, 479], "slash": [67, 103, 108, 218, 222, 252, 256, 261, 289, 290, 293, 310, 354, 373, 390, 403, 418, 419, 457, 479], "amper": [67, 261, 373], "lbrace": [67, 261, 373], "rbrace": [67, 261, 373, 427], "eqequ": [67, 261, 373], "notequ": [67, 261, 373], "lessequ": [67, 261, 373], "greaterequ": [67, 261, 373], "tild": [67, 108, 190, 228, 261, 291, 373], "circumflex": [67, 106, 261, 373], "leftshift": [67, 261, 373], "rightshift": [67, 261, 373], "doublestar": [67, 261, 373], "plusequ": [67, 261, 373], "minequ": [67, 261, 373], "starequ": [67, 261, 373], "slashequ": [67, 261, 373], "percentequ": [67, 261, 373], "amperequ": [67, 261, 373], "vbarequ": [67, 261, 373], "circumflexequ": [67, 261, 373], "leftshiftequ": [67, 261, 373], "rightshiftequ": [67, 261, 373], "doublestarequ": [67, 261, 373], "doubleslash": [67, 261, 373], "doubleslashequ": [67, 261, 373], "atequ": [67, 261, 373], "rarrow": [67, 261, 373], "colonequ": [67, 261, 373], "exclam": [67, 261, 268, 294, 342, 372, 373, 402, 431], "type_ignor": [67, 120, 261, 373], "soft_keyword": [67, 261, 373, 427], "fstring_start": [67, 261, 373, 427, 470], "fstring_middl": [67, 261, 373, 427, 470], "fstring_end": [67, 261, 373, 427, 470], "errortoken": [67, 261, 373, 470], "n_token": [67, 261, 373], "nt_offset": [67, 261, 373], "iskeyword": [67, 260, 261, 341], "kwlist": [67, 72, 75, 187, 260, 261], "issoftkeyword": [67, 260, 261], "softkwlist": [67, 260, 261], "generate_token": [67, 261, 374, 466, 470, 479], "untoken": [67, 261, 374, 479], "detect_encod": [67, 261, 262, 374], "tokenerror": [67, 261, 374, 470, 479], "tabnanni": [67, 85, 251, 261, 458, 479], "filename_on": [67, 261, 353], "nannynag": [67, 261, 353], "process_token": [67, 261, 353], "readmodul": [67, 261, 309, 479], "readmodule_ex": [67, 261, 309, 479], "is_async": [67, 120, 261, 309, 479], "pycompileerror": [67, 261, 308, 479], "pycinvalidationmod": [67, 160, 261, 308], "checked_hash": [67, 261, 308], "unchecked_hash": [67, 261, 308], "compile_dir": [67, 160, 261, 474, 476, 479], "compile_fil": [67, 160, 261, 474, 479], "compile_path": [67, 160, 261, 474], "from_traceback": [67, 188, 261, 473], "codeobj": [67, 188, 261], "first_lin": [67, 188, 261], "code_info": [67, 188, 261, 471], "show_cod": [67, 188, 261, 471, 473], "distb": [67, 188, 261, 473, 479], "disassembl": [67, 188, 261, 297, 358, 473, 476, 479], "disco": [67, 188, 261], "get_instruct": [67, 188, 261, 473, 479], "findlinestart": [67, 188, 261, 479], "findlabel": [67, 188, 261], "stack_effect": [67, 188, 261, 473, 479], "opnam": [67, 84, 188, 261, 358, 473], "argval": [67, 188, 261, 358], "argrepr": [67, 188, 261], "starts_lin": [67, 188, 261], "is_jump_target": [67, 188, 261], "opmap": [67, 188, 261], "cmp_op": [67, 188, 261], "hasarg": [67, 188, 261, 470], "hasconst": [67, 188, 261], "hasfre": [67, 188, 261], "hasnam": [67, 188, 261], "hasjrel": [67, 188, 261], "hasjab": [67, 188, 261], "hasloc": [67, 188, 261], "hascompar": [67, 188, 261], "hasexc": [67, 188, 261], "genop": [67, 261, 297], "ms": [67, 96, 108, 155, 173, 174, 251, 289, 290, 345, 371, 457, 458, 476, 479], "msvcrt": [67, 85, 140, 173, 251, 400, 464, 465, 479], "vc": [67, 173, 251, 400, 479], "lk_lock": [67, 279, 400], "lk_rlck": [67, 279, 400], "lk_nblck": [67, 279, 400], "lk_nbrlck": [67, 279, 400], "lk_unlck": [67, 279, 400], "setmod": [67, 279, 400], "open_osfhandl": [67, 140, 279, 400], "get_osfhandl": [67, 140, 279, 400], "kbhit": [67, 85, 279, 400], "getwch": [67, 279, 400, 464], "putch": [67, 279, 400], "putwch": [67, 279, 400, 464], "ungetwch": [67, 279, 400], "heapmin": [67, 279, 400], "closekey": [67, 400, 401], "connectregistri": [67, 140, 400, 401], "createkey": [67, 140, 400, 401], "createkeyex": [67, 400, 401, 465], "deletekey": [67, 140, 400, 401], "deletekeyex": [67, 400, 401, 465], "deletevalu": [67, 140, 400, 401], "enumkey": [67, 140, 400, 401], "enumvalu": [67, 140, 400, 401], "expandenvironmentstr": [67, 140, 400, 401, 464], "flushkey": [67, 400, 401], "loadkey": [67, 140, 400, 401], "openkey": [67, 140, 400, 401], "openkeyex": [67, 400, 401], "queryinfokey": [67, 140, 400, 401], "queryvalu": [67, 140, 400, 401, 479], "queryvalueex": [67, 400, 401, 479], "savekey": [67, 140, 400, 401], "setvalu": [67, 140, 400, 401, 479], "setvalueex": [67, 400, 401, 479], "disablereflectionkey": [67, 140, 400, 401, 464, 465], "enablereflectionkey": [67, 140, 400, 401, 464, 465], "queryreflectionkey": [67, 140, 400, 401, 464, 465], "hkey_": [67, 400], "hkey_classes_root": [67, 400, 401], "hkey_us": [67, 400, 401], "hkey_performance_data": [67, 400, 401], "hkey_current_config": [67, 400, 401], "hkey_dyn_data": [67, 400, 401], "key_all_access": [67, 400, 401], "key_writ": [67, 400, 401], "key_read": [67, 400, 401], "key_execut": [67, 400, 401], "key_query_valu": [67, 400, 401], "key_set_valu": [67, 400, 401], "key_create_sub_key": [67, 400, 401], "key_enumerate_sub_key": [67, 400, 401], "key_notifi": [67, 400, 401], "key_create_link": [67, 400, 401], "key_wow64_64key": [67, 400, 401], "key_wow64_32key": [67, 400, 401], "reg_binari": [67, 400, 401, 479], "reg_dword": [67, 400, 401], "reg_dword_little_endian": [67, 400, 401], "reg_dword_big_endian": [67, 400, 401], "reg_expand_sz": [67, 400, 401], "reg_link": [67, 400, 401], "reg_multi_sz": [67, 400, 401, 479], "reg_non": [67, 400, 401], "reg_qword": [67, 400, 401, 475, 479], "reg_qword_little_endian": [67, 400, 401], "reg_resource_list": [67, 400, 401], "reg_full_resource_descriptor": [67, 400, 401], "reg_resource_requirements_list": [67, 400, 401], "reg_sz": [67, 400, 401], "pyhkey": [67, 140, 400, 401], "sound": [67, 71, 83, 108, 115, 139, 174, 220, 251, 292, 333, 400, 422, 446, 461, 464], "playsound": [67, 400, 402, 475, 479], "messagebeep": [67, 400, 402, 475, 479], "snd_filenam": [67, 400, 402], "snd_alia": [67, 400, 402], "snd_loop": [67, 400, 402], "snd_memori": [67, 400, 402, 479], "snd_purg": [67, 400, 402], "snd_async": [67, 400, 402], "snd_nodefault": [67, 400, 402], "snd_nostop": [67, 400, 402], "snd_nowait": [67, 400, 402], "mb_iconasterisk": [67, 400, 402], "mb_iconexclam": [67, 400, 402], "mb_iconhand": [67, 400, 402], "mb_iconquest": [67, 400, 402], "mb_ok": [67, 400, 402], "getpwuid": [67, 108, 290, 307, 387, 479], "getpwnam": [67, 170, 307, 345, 387, 479], "getpwal": [67, 307, 387], "getgrgid": [67, 230, 387, 475, 479], "getgrnam": [67, 230, 345, 387, 461, 479], "getgral": [67, 230, 387, 479], "termio": [67, 212, 251, 379, 387, 478, 479], "tti": [67, 174, 226, 251, 255, 290, 387, 433, 434, 444, 451, 464, 479], "tcgetattr": [67, 357, 379, 387], "tcsetattr": [67, 357, 379, 387], "tcsendbreak": [67, 357, 387], "tcdrain": [67, 357, 387], "tcflush": [67, 357, 387], "tcflow": [67, 357, 387], "tcgetwins": [67, 357, 387, 479], "tcsetwins": [67, 357, 387, 479], "cfmakeraw": [67, 379, 387, 479], "cfmakecbreak": [67, 379, 387, 479], "setraw": [67, 379, 387, 479], "setcbreak": [67, 379, 387, 479], "flock": [67, 140, 212, 268, 387, 479], "rlim_infin": [67, 319, 387], "getrlimit": [67, 319, 387, 479], "setrlimit": [67, 140, 319, 358, 387, 479], "prlimit": [67, 140, 319, 387, 473, 479], "rlimit_cor": [67, 319, 358, 387], "rlimit_cpu": [67, 319, 387, 479], "rlimit_fs": [67, 319, 387, 479], "rlimit_data": [67, 319, 387], "rlimit_stack": [67, 319, 387], "rlimit_rss": [67, 319, 387], "rlimit_nproc": [67, 319, 387], "rlimit_nofil": [67, 319, 387], "rlimit_ofil": [67, 319, 387], "rlimit_memlock": [67, 319, 387], "rlimit_vmem": [67, 319, 387], "rlimit_a": [67, 319, 387], "rlimit_msgqueu": [67, 319, 387, 473], "rlimit_nic": [67, 319, 387, 473], "rlimit_rtprio": [67, 319, 387, 473], "rlimit_rttim": [67, 319, 387, 473], "rlimit_sigpend": [67, 319, 387, 473], "rlimit_sbs": [67, 319, 387, 473], "rlimit_swap": [67, 319, 387, 473], "rlimit_npt": [67, 319, 387, 473], "rlimit_kqueu": [67, 319, 387, 479], "getrusag": [67, 290, 319, 387, 463, 479], "getpages": [67, 319, 387], "rusage_self": [67, 319, 387], "rusage_children": [67, 319, 387], "rusage_both": [67, 319, 387], "rusage_thread": [67, 319, 387], "syslog": [67, 99, 140, 251, 266, 387, 465, 470, 472, 479], "openlog": [67, 140, 352, 387, 470, 479], "closelog": [67, 140, 352, 387, 470], "setlogmask": [67, 140, 352, 387], "aiff": [67, 151, 203, 251, 333, 347, 446, 479], "setmark": [67, 115, 347], "adpcm2lin": [67, 139, 347, 479], "alaw2lin": [67, 139, 347], "avg": [67, 139, 347], "avgpp": [67, 139, 347], "bias": [67, 139, 193, 202, 305, 315, 347, 461, 471], "findfactor": [67, 139, 347], "findfit": [67, 139, 347], "findmax": [67, 139, 347], "getsampl": [67, 139, 347], "lin2adpcm": [67, 139, 347, 479], "lin2alaw": [67, 139, 347], "lin2lin": [67, 139, 347], "lin2ulaw": [67, 139, 347], "maxpp": [67, 139, 347], "minmax": [67, 139, 347], "ratecv": [67, 139, 347, 479], "rms": [67, 139, 347], "tomono": [67, 139, 347], "tostereo": [67, 139, 347], "ulaw2lin": [67, 139, 347], "fieldstorag": [67, 149, 347, 473, 474, 476, 479], "getfirst": [67, 149, 347], "getlist": [67, 149, 347, 474], "parse_multipart": [67, 149, 347, 468, 475, 476, 477, 478, 479], "print_environ": [67, 149, 347], "print_form": [67, 149, 347], "print_directori": [67, 149, 347], "print_environ_usag": [67, 149, 347], "cgitb": [67, 149, 251, 347, 469, 470, 479], "iff": [67, 187, 190, 251, 347], "method_sha512": [67, 170, 347], "method_sha256": [67, 170, 347], "method_blowfish": [67, 170, 347], "method_md5": [67, 170, 347], "method_crypt": [67, 170, 347, 475, 479], "mksalt": [67, 170, 347, 472, 476, 479], "mailcap": [67, 251, 347, 469, 470, 479], "findmatch": [67, 269, 347], "getcap": [67, 269, 285, 347], "fcicreat": [67, 278, 347, 479], "uuidcreat": [67, 278, 347], "opendatabas": [67, 278, 347, 479], "createrecord": [67, 278, 347], "init_databas": [67, 278, 347, 479], "add_data": [67, 278, 347, 391, 473], "add_tabl": [67, 278, 347], "add_stream": [67, 278, 347], "gen_uuid": [67, 278, 347], "openview": [67, 278, 347, 479], "getsummaryinform": [67, 278, 347], "getcolumninfo": [67, 278, 347], "summaryinform": [67, 278, 347, 479], "getpropertycount": [67, 278, 347], "getfieldcount": [67, 278, 347], "getinteg": [67, 278, 347, 464], "setstr": [67, 278, 347], "setinteg": [67, 278, 347], "cleardata": [67, 278, 347], "cab": [67, 347, 463, 479], "start_compon": [67, 278, 347, 479], "add_fil": [67, 278, 347], "remove_pyc": [67, 278, 347], "set_curr": [67, 278, 347], "radiobuttongroup": [67, 278, 347], "bitmap": [67, 246, 252, 278, 325, 347, 365, 371, 372], "pushbutton": [67, 278, 347], "radiogroup": [67, 278, 347], "checkbox": [67, 91, 149, 278, 347, 457], "precomput": [67, 145, 347, 479], "nis": [67, 230, 251, 347, 463, 469, 470, 479], "sun": [67, 106, 139, 148, 180, 242, 246, 251, 271, 292, 340, 347, 362, 404, 469, 479], "yellow": [67, 91, 93, 145, 157, 174, 251, 347, 380, 448, 462, 470], "cat": [67, 93, 100, 103, 157, 227, 284, 345, 347, 437, 447, 449, 471, 474], "get_default_domain": [67, 284, 347], "nntp_ssl": [67, 285, 347, 471, 478, 479], "nntperror": [67, 285, 347, 479], "nntpreplyerror": [67, 285, 347], "nntptemporaryerror": [67, 285, 347], "nntppermanenterror": [67, 285, 347], "nntpprotocolerror": [67, 285, 347], "nntpdataerror": [67, 285, 347], "nntp_version": [67, 285, 347], "nntp_implement": [67, 285, 347], "newgroup": [67, 285, 347], "newnew": [67, 285, 347], "articl": [67, 94, 106, 223, 232, 258, 268, 285, 338, 347, 380, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478], "ihav": [67, 285, 347], "slave": [67, 285, 290, 306, 347, 365, 479], "xhdr": [67, 285, 347], "xover": [67, 285, 347], "terminolog": [67, 97, 198, 242, 347, 362, 372, 406, 459, 460, 463, 464], "optiongroup": [67, 289, 347], "optionpars": [67, 118, 289, 347, 461, 463], "get_option_group": [67, 289, 347], "print_vers": [67, 289, 347], "get_vers": [67, 289, 347], "add_opt": [67, 118, 289, 347, 461], "callback_arg": [67, 289, 347], "callback_kwarg": [67, 289, 347], "disable_interspersed_arg": [67, 118, 289, 347], "enable_interspersed_arg": [67, 289, 347], "get_opt": [67, 289, 347], "conflict": [67, 72, 100, 103, 107, 118, 164, 208, 210, 227, 238, 347, 349, 380, 382, 401, 409, 422, 451, 457, 471, 473, 476, 479], "set_usag": [67, 289, 347], "get_usag": [67, 289, 347], "store_act": [67, 289, 347], "typed_act": [67, 289, 347], "always_typed_act": [67, 289, 347], "optionerror": [67, 118, 289, 347], "optionconflicterror": [67, 289, 347], "optionvalueerror": [67, 118, 289, 347], "badoptionerror": [67, 289, 347], "ambiguousoptionerror": [67, 289, 347], "ossaudiodev": [67, 251, 347, 461, 469, 470, 474, 479], "oss": [67, 251, 345, 347, 461, 472, 479], "ossaudioerror": [67, 292, 347], "openmix": [67, 292, 347], "audio": [67, 115, 139, 151, 203, 333, 347, 358, 397, 402, 458, 479], "oss_audio_devic": [67, 292, 347], "writeal": [67, 292, 347], "nonblock": [67, 292, 347, 479], "getfmt": [67, 292, 347], "setfmt": [67, 292, 347], "channel": [67, 106, 115, 131, 139, 173, 198, 209, 265, 280, 292, 333, 334, 338, 346, 347, 397, 460, 472, 479], "setparamet": [67, 292, 347], "obufcount": [67, 292, 347], "obuffre": [67, 292, 347], "mixer": [67, 347], "oss_mixer_devic": [67, 292, 347], "stereocontrol": [67, 292, 347], "reccontrol": [67, 292, 347], "get_recsrc": [67, 292, 347], "set_recsrc": [67, 292, 347], "whathdr": [67, 333, 347, 474, 479], "spwd": [67, 230, 251, 307, 347, 463, 469, 470, 475, 479], "shadow": [67, 84, 85, 170, 230, 251, 252, 307, 347, 354, 446, 463, 473, 478, 479], "getspnam": [67, 336, 347, 475, 479], "getspal": [67, 336, 347], "au": [67, 203, 251, 292, 333, 338, 347, 446], "audio_file_mag": [67, 346, 347], "audio_file_encoding_mulaw_8": [67, 346, 347], "audio_file_encoding_linear_8": [67, 346, 347], "audio_file_encoding_linear_16": [67, 346, 347], "audio_file_encoding_linear_24": [67, 346, 347], "audio_file_encoding_linear_32": [67, 346, 347], "audio_file_encoding_alaw_8": [67, 346, 347], "audio_file_encoding_float": [67, 346, 347], "audio_file_encoding_doubl": [67, 346, 347], "audio_file_encoding_adpcm_g721": [67, 346, 347], "audio_file_encoding_adpcm_g722": [67, 346, 347], "audio_file_encoding_adpcm_g723_3": [67, 346, 347], "audio_file_encoding_adpcm_g723_5": [67, 346, 347], "au_read": [67, 347], "au_writ": [67, 347, 473], "telnet": [67, 140, 167, 251, 347, 390, 464, 475, 479], "read_until": [67, 347, 355], "read_al": [67, 347, 355], "read_som": [67, 347, 355], "read_very_eag": [67, 347, 355], "read_eag": [67, 347, 355], "read_lazi": [67, 347, 355], "read_very_lazi": [67, 347, 355], "read_sb_data": [67, 347, 355], "get_socket": [67, 347, 355], "mt_interact": [67, 347, 355], "set_option_negotiation_callback": [67, 347, 355], "xdrlib": [67, 119, 251, 347, 469, 470, 479], "uuencod": [67, 141, 144, 155, 251, 347], "xdr": [67, 119, 251, 296, 347], "pack_float": [67, 347, 404], "pack_doubl": [67, 347, 404], "pack_fstr": [67, 347, 404], "pack_fopaqu": [67, 347, 404], "pack_str": [67, 347, 404], "pack_opaqu": [67, 347, 404], "pack_byt": [67, 347, 404], "pack_list": [67, 347, 404], "pack_farray": [67, 347, 404], "pack_array": [67, 347, 404], "get_posit": [67, 347, 404], "set_posit": [67, 347, 404], "unpack_float": [67, 347, 404], "unpack_doubl": [67, 347, 404], "unpack_fstr": [67, 347, 404], "unpack_fopaqu": [67, 347, 404], "unpack_str": [67, 347, 404], "unpack_opaqu": [67, 347, 404], "unpack_byt": [67, 347, 404], "unpack_list": [67, 347, 404], "unpack_farray": [67, 347, 404], "unpack_array": [67, 347, 404], "conversionerror": [67, 347, 404, 479], "intermezzo": [67, 73], "linkag": [67, 73, 300], "ice": [67, 281], "setuptool": [67, 69, 73, 75, 76, 108, 248, 299, 304, 351, 395, 449, 452, 455, 457, 465, 468, 470, 473, 475, 479], "app": [67, 73, 100, 104, 244, 266, 349, 365, 395, 403, 457, 464, 465, 471, 479], "pure": [67, 73, 83, 84, 94, 96, 98, 100, 102, 108, 120, 173, 180, 183, 220, 222, 227, 232, 244, 258, 293, 305, 330, 349, 352, 358, 405, 423, 424, 438, 451, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 477, 479], "caution": [67, 72, 84, 126, 187, 265, 289, 290, 293, 345, 409, 463, 479], "tss": [67, 476, 479], "arena": [67, 427, 451, 463, 478, 479], "transit": [67, 93, 97, 98, 107, 180, 223, 258, 265, 327, 335, 391, 421, 426, 460, 462, 463, 465, 468, 472, 479], "howto": [67, 84, 91, 95, 102, 103, 118, 415, 458, 460, 465, 466, 471, 479], "primer": 67, "thought": [67, 89, 94, 98, 280, 458, 460, 461, 466, 474], "orm": 67, "_private__nam": 67, "minutia": 67, "aka": [67, 120, 190, 351, 405, 418, 424, 457, 476, 479], "orderedenum": 67, "duplicatefreeenum": 67, "planet": [67, 463], "timeperiod": [67, 208], "provabl": [67, 457, 479], "modular": [67, 83, 99, 170, 222, 472, 477, 479], "combinator": [67, 258, 315, 467, 477], "acknowledg": [67, 164, 175, 354, 422], "destin": [67, 89, 99, 106, 174, 186, 205, 209, 239, 264, 265, 266, 268, 275, 289, 290, 329, 334, 341, 352, 354, 395, 462, 464, 470, 472, 473, 477, 479], "contextu": [67, 187, 264], "impart": [67, 264], "deploy": [67, 83, 99, 141, 199, 290, 345, 365, 403, 421, 457, 471, 477, 478, 479], "gunicorn": 67, "uwsgi": [67, 345], "zeromq": 67, "elabor": [67, 89, 103, 108, 422, 431, 458, 461, 479], "throughout": [67, 72, 92, 99, 110, 183, 247, 385, 430, 458, 460, 461, 463, 464, 465, 471, 474, 479], "gmt": [67, 99, 180, 206, 242, 264, 338, 362], "cli": [67, 89, 231, 248, 337, 358, 451, 473, 476, 479], "starter": 67, "qt": 67, "rfc5424": 67, "backslash": [67, 108, 155, 156, 190, 206, 222, 244, 255, 280, 290, 293, 316, 345, 431, 442, 461, 462, 466, 470, 475, 476, 479], "plagu": [67, 473], "metacharact": [67, 269, 316, 345, 462], "lookahead": [67, 316, 423, 427, 462], "greedi": [67, 155, 316, 355], "feedback": [67, 227, 380, 422, 462], "ipc": [67, 121, 128, 131, 254, 334], "die": [67, 91, 325, 398, 477, 479], "undecor": [67, 100, 223, 341], "cconvert": [67, 89], "py_default": [67, 89], "c_default": [67, 89], "c_ignored_default": [67, 89], "impl_by_refer": [67, 89], "parse_by_refer": [67, 89], "instrument": [67, 95, 124, 223, 305, 452, 471, 475, 479], "tapset": 67, "newer": [67, 70, 74, 75, 99, 102, 115, 190, 240, 244, 254, 265, 266, 285, 290, 294, 296, 309, 311, 325, 337, 338, 341, 362, 365, 382, 404, 405, 418, 452, 457, 470, 473, 474, 475, 476, 477, 478, 479], "un": [67, 197, 200, 252, 285, 432, 445, 473, 479], "stringiz": [67, 252, 468, 479], "__annotations__": [67, 86, 92, 178, 188, 222, 223, 252, 382, 423, 424, 432, 437, 466, 468, 471, 473, 474, 475, 477, 478, 479], "quirk": [67, 91, 341, 430, 468, 473, 479], "opt": [67, 71, 108, 164, 187, 225, 247, 289, 296, 303, 335, 428, 446, 451, 452, 461, 464, 465, 470, 471, 473, 474, 476, 479], "lossless": [67, 183, 187, 374, 424, 470, 471, 479], "__builtin_new": 67, "__pure_virtu": 67, "pyd": [67, 70, 83, 266, 350, 419, 463, 471, 474, 477, 479], "keypress": [67, 91, 279, 464], "l1": [67, 83, 155, 372], "0rc1": [67, 470, 479], "psf": [67, 79, 293], "beopen": [67, 68], "cnri": [67, 458], "cwi": [67, 79, 237, 334, 390], "bsd": [67, 83, 91, 104, 131, 174, 212, 319, 325, 330, 334, 339, 362, 434, 452, 458, 460, 464, 473, 479], "mersenn": [67, 315, 461], "twister": [67, 315, 461], "uudecod": 67, "test_epol": [67, 479], "siphash24": [67, 452, 469, 479], "strtod": 67, "dtoa": [67, 452, 465, 479], "libffi": [67, 465, 469, 476, 479], "cfuhash": 67, "libmpdec": [67, 183, 452, 472, 479], "w3c": [67, 107, 237, 239, 391, 406, 407, 411, 424, 459, 468, 475, 476, 477, 478, 479], "c14n": [67, 409, 477, 479], "2001": [68, 97, 100, 206, 256, 329, 354, 362, 409, 418, 422, 459, 460, 461, 464, 471, 477, 479], "2023": [68, 100, 422, 470, 479], "foundat": [68, 79, 94, 166, 338, 365, 422, 457, 461, 462, 464, 472], "2000": [68, 84, 99, 155, 220, 266, 281, 362, 380, 422, 437, 440, 458, 461, 464, 471, 472, 473, 479], "corpor": [68, 422], "nation": [68, 422], "research": [68, 94, 422, 479], "sig": [69, 79, 98, 106, 109, 124, 140, 155, 232, 252, 290, 330, 374, 455, 458, 459, 461, 465, 474], "1998": [69, 103, 109, 315, 422], "2004": [69, 108, 155, 180, 372, 422, 462], "wheel": [69, 109, 187, 248, 315, 452, 468, 469, 470, 477, 478, 479], "bdist_wheel": [69, 468, 469, 477, 478, 479], "427": 69, "twine": 69, "pypirc": [69, 479], "bitbucket": 69, "pyinit_": [70, 479], "pyinitu_": 70, "punycod": [70, 155, 461, 479], "hyphen": [70, 118, 155, 225, 289, 316, 360, 382, 394, 451, 457, 461, 479], "initfunc_nam": 70, "u_": 70, "pyinit": 70, "readthedoc": [70, 108, 248, 403, 463], "en": [70, 94, 106, 107, 108, 157, 227, 232, 237, 285, 391, 456, 457, 463, 471, 472, 479], "latest": [70, 84, 108, 149, 180, 183, 207, 223, 244, 395, 418, 457, 463, 465, 467, 471, 472, 473, 475, 479], "learn": [70, 72, 74, 76, 78, 83, 86, 88, 89, 91, 92, 94, 102, 103, 106, 149, 173, 183, 190, 244, 272, 296, 328, 337, 365, 380, 407, 460, 461, 463, 464, 465, 471, 475, 476, 479], "enrich": [71, 479], "tailor": [71, 89, 243, 337, 341, 358, 470], "occasion": [71, 83, 89, 100, 118, 166, 174, 183, 187, 198, 202, 227, 244, 268, 272, 289, 290, 361, 432, 458, 463, 464, 471, 479], "identif": [71, 135, 280, 343, 361, 479], "great": [71, 93, 99, 188, 240, 316, 345, 385, 398, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 474, 477, 479], "fprintf": [71, 72], "troubl": [71, 97, 104, 107, 210, 457, 462], "piec": [71, 86, 94, 101, 103, 104, 131, 139, 144, 149, 166, 176, 187, 188, 190, 199, 240, 267, 289, 338, 354, 365, 382, 410, 425, 431, 460, 463, 473, 478, 479], "cumbersom": [71, 98, 183, 365], "say": [71, 72, 74, 76, 84, 92, 97, 100, 103, 104, 106, 108, 131, 137, 180, 190, 199, 223, 227, 240, 244, 248, 263, 264, 265, 266, 268, 280, 345, 391, 409, 417, 424, 428, 430, 442, 459, 460, 461, 463, 464, 465, 469, 471, 473, 479], "cost": [71, 84, 89, 164, 180, 185, 187, 223, 232, 240, 247, 290, 341, 363, 365, 377, 382, 386, 418, 422, 424, 458, 461, 464, 465, 469, 473, 479], "despit": [71, 84, 100, 232, 259, 293, 322, 338, 345, 382, 428, 464, 479], "accommod": [71, 100, 105, 198, 247, 365, 462, 479], "vice": [71, 83, 139, 173, 247, 264, 290, 293, 316, 341, 372, 376, 382, 409, 464, 470, 473, 479], "versa": [71, 83, 139, 173, 247, 264, 290, 293, 316, 341, 372, 376, 382, 409, 464, 470, 473, 479], "understood": [71, 104, 149, 240, 265, 280, 290, 294, 328, 341, 363, 393, 417, 422, 424, 479], "pname": 71, "pmodul": [71, 72, 479], "parg": 71, "pythonfil": 71, "proceed": [71, 75, 107, 183, 192, 202, 258, 268, 280, 290, 305, 338, 361, 423, 426, 479], "subroutin": [71, 86, 94, 463], "glue": [71, 89, 460, 462], "numarg": 71, "emb_numarg": 71, "embmethod": 71, "embmodul": 71, "pyinit_emb": 71, "recompil": [71, 78, 160, 247, 458, 461, 465, 471, 474, 475], "cflag": [71, 101, 108, 303, 357, 452, 461, 479], "wsign": 71, "dndebug": 71, "fwrapv": 71, "wall": [71, 180, 305, 464, 479], "ldflag": [71, 452, 461, 479], "x86_64": [71, 351, 452, 474, 477, 479], "lpython3": [71, 477, 479], "lpthread": 71, "ldl": 71, "lutil": 71, "lm": [71, 108, 341, 431], "welcom": [71, 89, 91, 153, 280, 285, 380, 422, 463, 471, 479], "linkforshar": [71, 479], "xlinker": [71, 108], "incorpor": [72, 99, 103, 183, 264, 338, 390, 409, 422, 461, 463, 464, 465, 471, 477, 479], "cffi": [72, 73, 90, 183, 479], "favorit": [72, 106, 438], "food": [72, 86, 296, 442], "monti": [72, 164, 190, 222, 259, 290, 293, 337, 340, 341, 354, 418, 435, 450, 462, 464, 471], "fan": 72, "ls": [72, 88, 100, 135, 174, 328, 345, 354, 355, 474], "spammodul": 72, "spammifi": 72, "spam_system": 72, "sts": [72, 83, 345, 462], "saw": 72, "predefin": [72, 84, 99, 103, 110, 153, 155, 173, 174, 244, 264, 278, 342, 365, 394, 399, 401, 424, 479], "pyerr_": 72, "fine": [72, 77, 83, 84, 98, 100, 106, 107, 164, 173, 174, 190, 198, 208, 223, 240, 289, 290, 315, 316, 330, 338, 349, 365, 382, 385, 391, 424, 457, 458, 459, 461, 463, 470, 479], "lost": [72, 88, 89, 93, 99, 100, 106, 131, 174, 180, 183, 198, 223, 244, 259, 264, 266, 280, 305, 329, 330, 332, 335, 423, 440, 458, 460, 471, 472, 473, 478, 479], "pretend": [72, 102, 104, 174, 385, 424, 460, 477], "went": [72, 88, 142, 210, 292, 332, 409, 458, 460, 463, 464, 478], "predeclar": 72, "cours": [72, 75, 89, 93, 94, 99, 100, 104, 108, 173, 183, 190, 197, 199, 204, 232, 264, 265, 280, 289, 290, 328, 335, 338, 365, 380, 385, 386, 406, 415, 424, 451, 458, 459, 461, 466, 471, 472, 473], "wise": [72, 93, 178, 183, 265, 460, 476], "couldn": [72, 103, 107, 187, 255, 290, 330, 337, 382, 386, 419, 459, 460, 463, 465, 470, 475, 479], "satisfi": [72, 107, 178, 218, 231, 252, 255, 265, 272, 361, 424, 428, 471], "spamerror": 72, "pyinit_spam": 72, "pymodinit_func": [72, 75, 452, 461, 479], "retain": [72, 87, 105, 108, 118, 164, 166, 174, 183, 187, 193, 202, 205, 210, 244, 247, 252, 258, 264, 268, 290, 328, 337, 338, 380, 390, 415, 422, 424, 426, 431, 472, 473, 475, 477, 479], "unintend": [72, 84, 183, 280, 293, 354, 479], "going": [72, 74, 75, 78, 83, 89, 92, 94, 96, 102, 103, 108, 115, 124, 135, 142, 149, 180, 183, 193, 197, 276, 289, 290, 305, 331, 338, 354, 358, 361, 385, 386, 403, 409, 415, 424, 457, 458, 460, 464, 479], "genuin": [72, 190, 212, 465, 471], "seen": [72, 74, 83, 84, 89, 93, 94, 100, 153, 188, 208, 227, 232, 252, 258, 266, 268, 289, 302, 328, 358, 365, 396, 398, 409, 411, 451, 461, 464, 467, 470, 473, 476, 479], "promis": [72, 93, 252, 471, 479], "spammethod": 72, "obsolet": [72, 91, 149, 210, 240, 259, 264, 311, 341, 362, 385, 396, 399, 404, 415, 458, 459, 460, 463, 465, 470, 471, 473, 474, 475, 479], "spam_doc": 72, "pyinit_nam": 72, "satisfactorili": 72, "pyimport_inittab": [72, 479], "interven": [72, 100, 187, 190, 201, 472], "exercis": [72, 83, 99, 100, 157, 184, 264, 289, 305, 358, 422, 464, 479], "substanti": [72, 240, 258, 311, 406, 422, 460, 462, 467, 470, 471, 472, 473, 475, 479], "xxmodul": 72, "perman": [72, 107, 108, 245, 391, 448, 457, 474, 478, 479], "rebuild": [72, 108, 160, 471, 479], "luckili": [72, 89, 102, 384, 403], "toplevel": [72, 157, 183, 222, 348, 365, 371, 372, 409, 479], "subdirectori": [72, 75, 83, 84, 100, 108, 160, 197, 213, 244, 249, 250, 268, 290, 293, 299, 331, 376, 384, 395, 417, 418, 419, 457, 458, 459, 461, 464, 465, 474, 476, 477, 478, 479], "lx11": 72, "far": [72, 75, 84, 88, 89, 103, 166, 180, 183, 187, 232, 240, 255, 272, 280, 289, 290, 305, 316, 328, 329, 355, 362, 371, 384, 391, 430, 458, 459, 460, 461, 462, 464, 479], "concentr": [72, 103, 107, 232, 365, 464], "imagin": [72, 103, 112, 296, 380, 385, 386], "fortun": [72, 75, 91, 112, 149, 466], "dwell": 72, "somehow": [72, 280, 354, 464, 465], "wherev": [72, 78, 89, 91, 93, 100, 103, 106, 174, 365, 382, 393, 422, 460, 463], "my_callback": [72, 74, 289], "my_set_callback": 72, "temp": [72, 108, 280, 327, 337, 356, 407, 417, 426, 452, 457, 479], "set_callback": 72, "dispos": [72, 384], "rememb": [72, 84, 88, 89, 91, 92, 94, 99, 100, 103, 108, 156, 190, 244, 258, 280, 316, 337, 358, 365, 372, 391, 398, 406, 408, 432, 437, 457, 458, 459, 463, 464, 465, 467, 471, 472], "boilerpl": [72, 75, 89, 98, 286, 358, 385, 428, 474, 479], "arglist": 72, "eventcod": 72, "placement": [72, 144, 365, 409, 470, 479], "whoop": [72, 100], "lls": 72, "ii": [72, 78, 157, 173, 338, 422, 423], "wb": [72, 86, 100, 115, 118, 147, 197, 205, 220, 231, 267, 275, 296, 306, 317, 346, 382, 393, 397, 415, 417, 418, 458, 467, 471], "100000": [72, 222, 305, 363, 378, 461], "400": [72, 100, 107, 115, 153, 220, 238, 280, 285, 332, 365, 380, 437, 448, 468], "300": [72, 91, 100, 107, 153, 238, 244, 380, 391, 423, 448, 471, 479], "myfunct": [72, 78, 166], "2j": [72, 96, 222, 259, 479], "geoff": [72, 479], "philbrick": 72, "hks": 72, "keywdarg_parrot": 72, "keywd": 72, "voltag": [72, 222, 437], "stiff": [72, 437], "voom": [72, 437], "norwegian": [72, 155, 437], "blue": [72, 91, 93, 100, 103, 105, 145, 153, 157, 174, 208, 258, 315, 340, 341, 365, 372, 380, 398, 437, 438, 448, 461, 462, 467, 468, 470, 471, 475, 479], "sss": [72, 74, 180], "parrot": [72, 222, 239, 304, 437, 464], "wouldn": [72, 83, 89, 102, 103, 264, 329, 358, 384, 385, 423, 437, 458, 459, 460, 461, 462, 464, 479], "volt": [72, 437], "love": [72, 100, 145, 172, 241, 437, 467, 473], "keywdarg_method": 72, "skit": [72, 190], "keywdargmodul": 72, "keywdarg": 72, "pyinit_keywdarg": 72, "counterpart": [72, 100, 174, 188, 222, 255, 258, 264, 285, 316, 334, 341, 357, 423, 465, 467, 469, 471, 476, 479], "iii": [72, 422], "789": [72, 183, 464], "ss": [72, 106, 180, 245, 341, 362, 468, 472], "hell": 72, "forgotten": [72, 106, 123], "occupi": [72, 106, 115, 280, 319, 368, 372, 473], "reus": [72, 75, 79, 89, 124, 126, 136, 155, 163, 166, 173, 181, 190, 211, 223, 247, 290, 316, 334, 335, 338, 344, 354, 358, 360, 361, 385, 398, 423, 428, 431, 463, 470, 471, 478, 479], "unusu": [72, 91, 100, 108, 180, 210, 247, 292, 305, 319, 345, 356, 390, 426, 479], "prematur": [72, 99, 239, 268, 466, 479], "undetect": [72, 268, 361], "modern": [72, 96, 102, 112, 124, 137, 141, 174, 175, 191, 232, 255, 329, 334, 338, 354, 365, 402, 458, 462, 464, 465, 471, 472, 475, 476, 477, 478, 479], "plenti": 72, "appar": [72, 91, 149, 330, 404, 458, 462, 479], "heavi": [72, 107, 164, 465, 472, 476, 479], "principl": [72, 84, 183, 385, 403, 472], "somewher": [72, 83, 84, 89, 100, 242, 244, 289, 299, 311, 341, 406, 437, 457, 464, 468], "sometim": [72, 78, 83, 84, 91, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 107, 108, 110, 112, 118, 133, 137, 149, 155, 164, 166, 173, 174, 183, 185, 187, 190, 200, 210, 222, 223, 232, 244, 252, 256, 258, 265, 268, 285, 289, 290, 296, 305, 316, 338, 339, 362, 365, 380, 382, 385, 386, 391, 409, 424, 426, 430, 432, 458, 461, 462, 463, 465, 466, 467, 471, 472, 473, 474, 475, 478, 479], "claim": [72, 102, 187, 196, 338, 390, 422, 479], "disadvantag": [72, 75, 83, 84, 103, 130, 155, 183, 338, 363, 460, 467], "worri": [72, 74, 89, 91, 99, 102, 106, 108, 149, 180, 191, 289, 316, 344, 384, 460, 465, 472], "reclaim": [72, 74, 247, 382, 398], "nobodi": [72, 149, 232, 242, 332, 479], "seem": [72, 75, 78, 89, 94, 99, 103, 118, 190, 213, 268, 276, 290, 305, 337, 356, 426, 428, 458, 459, 460, 461, 463, 479], "popular": [72, 92, 100, 105, 187, 190, 223, 245, 253, 268, 344, 376, 380, 430, 457, 471, 472, 477], "pictur": [72, 164, 197, 460, 462], "bet": 72, "therebi": [72, 84, 194, 200, 380, 473, 479], "no_bug": 72, "someon": [72, 84, 89, 104, 180, 332, 391, 409, 465, 470, 479], "spent": [72, 137, 305, 319, 330, 463, 464], "his": [72, 83, 227, 431, 458, 460, 464, 465, 473, 475, 479], "redund": [72, 267, 316, 341, 382, 420, 432, 460, 465, 479], "slowli": [72, 100, 468], "ever": [72, 84, 92, 93, 104, 120, 174, 196, 198, 247, 255, 258, 279, 280, 338, 345, 380, 382, 385, 457, 460, 461, 463, 464, 465, 466, 473, 479], "__cplusplus": 72, "sight": [72, 139], "aix": [72, 113, 290, 303, 349, 361, 477, 478, 479], "unic": [72, 292], "wish": [72, 74, 87, 89, 91, 94, 99, 103, 107, 108, 118, 144, 155, 164, 180, 190, 200, 205, 231, 247, 248, 249, 250, 256, 259, 264, 266, 268, 275, 289, 316, 332, 338, 339, 345, 372, 381, 395, 396, 398, 403, 424, 459, 462, 463, 464, 465, 473, 479], "clash": [72, 93, 100, 173, 244, 264, 265, 268, 426, 431, 464, 474, 478, 479], "publish": [72, 100, 103, 183, 187, 189, 337, 358, 363, 416, 422, 457, 459, 465, 471, 478, 479], "certainti": [72, 401], "burden": [72, 465, 466, 470, 472, 474], "pyspam_system": 72, "realiti": [72, 180, 289, 334, 391, 423], "plain": [72, 84, 93, 100, 107, 124, 148, 149, 150, 157, 170, 180, 193, 194, 197, 201, 202, 203, 210, 239, 252, 264, 290, 332, 338, 339, 343, 382, 391, 403, 417, 418, 422, 423, 431, 460, 466, 471, 473, 474, 475, 479], "spam_modul": 72, "pyspam_api": 72, "pyspam_api_point": 72, "c_api_object": 72, "pyspam_system_num": 72, "_c_api": 72, "disappear": [72, 74, 99, 137, 380, 460, 462, 479], "bulk": [72, 183, 473], "ifndef": [72, 89, 479], "py_spammodule_h": 72, "endif": [72, 89, 237, 316, 452, 468, 469, 477, 478], "pyspam_system_return": 72, "pyspam_system_proto": 72, "import_spam": 72, "pyinit_cli": 72, "clientmodul": 72, "mention": [72, 74, 75, 76, 87, 94, 97, 100, 102, 103, 106, 108, 112, 164, 173, 174, 188, 190, 210, 211, 212, 222, 259, 265, 268, 280, 289, 290, 328, 331, 335, 350, 358, 423, 424, 428, 430, 431, 432, 458, 466, 470, 472, 473, 476, 478, 479], "metaphor": [72, 249, 250, 371], "cython": [73, 77, 78, 84, 90, 473, 479], "swig": [73, 78, 85], "numba": 73, "baggag": 74, "easiest": [74, 75, 78, 83, 84, 118, 183, 190, 240, 244, 289, 290, 385], "dealt": [74, 154, 208, 289], "newdatatype_dealloc": 74, "newdatatypeobject": 74, "obj_underlyingdatatypeptr": 74, "other_obj": 74, "unwound": [74, 264, 316, 424], "mislead": [74, 106, 120, 150, 180, 391, 407, 460, 471, 479], "my_dealloc": 74, "cbresult": 74, "err_typ": 74, "err_valu": 74, "err_traceback": 74, "textual": [74, 75, 84, 102, 106, 118, 173, 198, 264, 285, 311, 316, 341, 354, 372, 406, 407, 426, 432, 436, 460, 475, 479], "newdatatype_repr": 74, "ified_newdatatyp": 74, "human": [74, 99, 100, 106, 115, 187, 188, 195, 227, 240, 242, 264, 285, 296, 300, 330, 332, 338, 339, 346, 349, 373, 383, 397, 410, 426, 449, 460, 467, 472, 473, 479], "consumpt": [74, 120, 252, 296, 319, 329, 349, 471, 472, 479], "newdatatype_str": 74, "stringified_newdatatyp": 74, "sens": [74, 84, 88, 89, 93, 97, 99, 100, 108, 110, 112, 118, 180, 183, 187, 202, 203, 223, 244, 256, 268, 280, 289, 290, 305, 330, 335, 337, 338, 341, 342, 349, 363, 380, 390, 399, 422, 424, 428, 457, 466, 471, 473, 474, 476, 479], "flavor": [74, 104, 190, 232, 258, 290, 339, 341, 423, 426, 452, 479], "newdatatype_getattr": 74, "100s": 74, "400s": 74, "newdatatype_setattr": 74, "newdatatype_richcmp": 74, "obj1": [74, 462], "obj2": [74, 462], "size1": 74, "size2": 74, "newdatatyp": 74, "unfil": [74, 426, 479], "newdatatype_hash": 74, "some_s": 74, "32767": [74, 344], "some_numb": 74, "toy": [74, 296], "newdatatype_cal": 74, "arg3": [74, 84, 96, 114], "slight": [74, 78, 84, 88, 89, 94, 99, 100, 107, 108, 166, 172, 183, 193, 212, 227, 240, 248, 255, 289, 290, 294, 304, 305, 338, 341, 380, 386, 390, 428, 432, 458, 460, 461, 462, 463, 464, 465, 471, 473, 474, 476, 478, 479], "incur": [74, 183, 258, 422, 471], "trivialtyp": 74, "breviti": [74, 289], "trivial_dealloc": 74, "trivialobject": 74, "tp_": 74, "some_object": [74, 84, 252, 385], "mytyp": [74, 289, 469], "myth": 74, "download": [74, 79, 84, 100, 108, 293, 304, 371, 391, 395, 424, 436, 449, 457, 463, 464, 465, 471, 472, 476, 477, 479], "www": [74, 78, 94, 104, 106, 107, 108, 149, 155, 159, 163, 166, 180, 181, 197, 232, 237, 239, 240, 258, 311, 315, 316, 337, 338, 341, 349, 383, 390, 391, 392, 399, 407, 409, 420, 422, 424, 431, 436, 441, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 472, 474, 476, 479], "gentl": [75, 92, 97, 118, 460], "cover": [75, 84, 91, 93, 98, 99, 100, 103, 106, 108, 131, 166, 188, 190, 191, 205, 240, 265, 280, 289, 316, 332, 334, 341, 345, 365, 376, 380, 382, 384, 390, 406, 423, 430, 451, 458, 459, 460, 463, 466, 470, 472, 473, 479], "customobject": 75, "customtyp": 75, "custommodul": 75, "pyinit_custom": 75, "hope": [75, 97, 99, 100, 210, 326, 382, 457, 458, 459, 472, 473, 475, 477], "familiar": [75, 91, 94, 97, 100, 103, 112, 154, 191, 225, 259, 290, 337, 428, 459, 460, 461, 464, 479], "wari": [75, 350], "accid": [75, 118, 464, 465, 466, 477, 479], "ob_fval": 75, "pick": [75, 84, 100, 107, 108, 139, 157, 242, 248, 272, 289, 294, 378, 384, 417, 458, 463], "mycustom": 75, "ext_modul": [75, 458], "fire": [75, 96, 100, 118, 137, 330, 470, 479], "uninterest": [75, 187], "showcas": [75, 124, 131], "custom2": 75, "custom_dealloc": 75, "custom_new": 75, "custom_init": 75, "ooi": 75, "custom_memb": 75, "custom_nam": 75, "custom_method": 75, "pyinit_custom2": 75, "midway": 75, "polymorph": [75, 86, 89, 413], "oppos": [75, 89, 91, 103, 120, 124, 154, 198, 205, 244, 334, 391, 428, 464, 474, 479], "ourselv": [75, 93, 112, 382, 479], "anyon": [75, 102, 108, 338, 358, 422, 459, 465, 473], "tempt": [75, 100, 102, 103, 363], "riski": [75, 190, 479], "paranoid": 75, "uui": 75, "custom_getfirst": 75, "custom_setfirst": 75, "custom_getlast": 75, "custom_setlast": 75, "custom_getsett": 75, "custom3": 75, "pyinit_custom3": 75, "aren": [75, 83, 84, 87, 91, 92, 93, 94, 97, 103, 104, 106, 110, 137, 152, 164, 173, 198, 214, 252, 256, 265, 266, 289, 293, 335, 338, 344, 349, 365, 373, 385, 386, 415, 417, 458, 459, 460, 461, 462, 463, 464, 465, 472, 473, 479], "did": [75, 83, 84, 89, 100, 102, 103, 107, 137, 164, 188, 190, 199, 240, 242, 280, 281, 289, 290, 311, 316, 326, 338, 345, 349, 378, 382, 384, 411, 418, 424, 427, 438, 458, 459, 460, 468, 470, 471, 472, 473, 476, 477, 479], "unneed": [75, 407, 465, 473, 478, 479], "some_attribut": [75, 385], "custom_travers": 75, "custom_clear": 75, "custom4": 75, "pyinit_custom4": 75, "subobject": [75, 84], "vret": 75, "autom": [75, 83, 102, 120, 285, 361, 459, 465, 473, 477, 479], "nevertheless": [75, 89, 100, 137, 155, 194, 210, 289, 354, 409, 466], "prone": [75, 112, 149, 180, 190, 296, 305, 341, 470, 474, 479], "micro": [75, 84, 349, 458, 465, 467, 476, 479], "expens": [75, 84, 99, 178, 185, 187, 223, 255, 263, 286, 305, 329, 335, 338, 349, 428, 451, 462, 470, 472, 473, 475, 476, 477, 479], "robust": [75, 137, 149, 181, 252, 305, 330, 398, 465, 471, 473, 474, 479], "reimplement": [75, 384, 460, 473, 474, 475, 476, 479], "difficult": [75, 83, 91, 94, 99, 102, 103, 106, 118, 265, 296, 391, 409, 458, 459, 460, 461, 462, 465, 471, 477, 479], "sublist": [75, 371, 458, 471], "sublistobject": 75, "sublist_incr": 75, "sublist_method": 75, "sublist_init": 75, "sublisttyp": 75, "sublistmodul": 75, "pyinit_sublist": 75, "resembl": [75, 93, 108, 174, 222, 240, 290, 294, 328, 451, 460, 464, 465, 477, 479], "explanatori": [76, 190, 311, 384, 479], "materi": [76, 94, 103, 174, 187, 231, 334, 338, 371, 422, 462, 465, 479], "xy": [76, 108, 258, 331, 382], "studi": [76, 84, 94, 190, 380, 461, 464], "paradigm": [76, 94], "reassur": 76, "pythonxi": [76, 457, 477], "ni": [76, 304, 390, 442, 463], "cl": [76, 294, 464], "thank": [76, 94, 98, 102, 103, 106, 153, 197, 232, 280, 337, 358, 382, 385, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 475, 476, 479], "_declspec": 76, "dllexport": [76, 85], "initspam": 76, "nigetspamdata": 76, "studio": [76, 84, 452, 457, 464, 474, 479], "100k": 76, "rid": [76, 459, 479], "msvcrtxx": 76, "guido": [77, 79, 84, 86, 92, 187, 276, 341, 382, 422, 438, 446, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479], "van": [77, 79, 84, 86, 157, 180, 419, 422, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479], "rossum": [77, 79, 84, 86, 419, 422, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479], "20": [77, 84, 88, 91, 92, 94, 96, 99, 100, 103, 106, 132, 137, 153, 173, 178, 180, 183, 190, 206, 208, 218, 232, 233, 244, 252, 256, 258, 264, 280, 290, 293, 305, 315, 316, 318, 319, 334, 338, 340, 341, 349, 354, 362, 363, 380, 382, 390, 392, 422, 431, 436, 445, 447, 451, 452, 458, 462, 463, 464, 465, 467, 469, 471, 473, 474, 475, 476, 477, 478, 479], "30": [77, 83, 84, 91, 92, 94, 96, 99, 100, 124, 134, 153, 157, 180, 183, 190, 233, 256, 258, 264, 266, 290, 313, 315, 318, 334, 340, 341, 342, 358, 361, 362, 363, 380, 419, 436, 437, 447, 448, 452, 461, 462, 463, 465, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479], "19999999999999996": 77, "0011001100110011001100110011001100110011001100110011": 77, "1999999999999999555910790149937383830547332763671875": 77, "15": [77, 84, 91, 94, 96, 99, 100, 105, 106, 129, 155, 157, 164, 178, 180, 190, 200, 208, 212, 220, 233, 238, 244, 255, 256, 258, 264, 285, 290, 296, 315, 316, 319, 337, 338, 340, 341, 342, 345, 349, 362, 363, 374, 377, 383, 420, 421, 431, 442, 452, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479], "eight": [77, 106, 174, 256, 341, 351, 365, 431, 458, 461, 462, 477, 479], "modula": [77, 79, 271, 436], "m_": 77, "baseclass": 77, "methodnam": [77, 280, 384, 415, 436, 437], "200": [77, 84, 107, 153, 174, 183, 187, 220, 238, 239, 242, 334, 338, 341, 365, 380, 384, 391, 403, 423, 442, 448, 461, 475, 477, 479], "572": [77, 423, 426, 470, 477, 479], "mail": [77, 79, 83, 94, 98, 100, 102, 103, 141, 191, 192, 193, 195, 197, 199, 202, 214, 245, 266, 268, 269, 285, 290, 332, 338, 352, 384, 403, 422, 448, 450, 458, 459, 460, 461, 462, 463, 464, 471, 474, 479], "pipermail": [77, 450, 459, 461], "3000": [77, 86, 111, 381, 382, 423, 424, 464, 466], "2006": [77, 94, 180, 264, 311, 407, 409, 418, 422, 463, 478], "004643": 77, "mydict": [77, 84, 382, 462], "elif": [77, 84, 88, 91, 94, 100, 107, 120, 180, 187, 197, 225, 247, 286, 316, 337, 339, 341, 349, 354, 423, 424, 427, 428, 431, 437, 463, 472, 479], "function_1": [77, 96], "function_2": [77, 96], "method_1": 77, "myvisitor": 77, "visit_a": 77, "method_nam": [77, 78], "visit_": [77, 120], "stackless": [77, 430], "nuitka": [77, 84], "jython": [77, 83, 86, 93, 300, 358, 403, 430, 445, 451, 459, 462, 464, 470, 471, 473, 479], "pypi": [77, 83, 88, 99, 102, 149, 185, 300, 304, 338, 349, 385, 395, 405, 421, 430, 445, 450, 455, 461, 463, 465, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479], "very_long_list_of_fil": 77, "boehm": 77, "purifi": [77, 452], "pascal": [77, 79, 84, 94, 344, 436, 437, 438, 461, 465], "lisp": [77, 84, 94, 460], "539294296": 77, "1142331976": 77, "listwrapp": 77, "the_list": 77, "98767": 77, "555": 77, "el": [77, 141, 355, 390, 409, 427], "9999999": 77, "1001": [77, 155, 342], "7777777": 77, "333": [77, 84, 438, 440, 463], "stub": [77, 153, 254, 255, 290, 349, 382, 385, 479], "driven": [77, 84, 166, 273, 358, 365, 380, 384, 406, 408, 458, 471, 479], "1970": [77, 79, 145, 148, 180, 336, 362, 479], "spaghetti": 77, "mydir": 77, "delphi": 77, "21": [77, 94, 96, 100, 106, 180, 183, 187, 200, 220, 223, 232, 233, 316, 338, 340, 362, 374, 378, 437, 445, 446, 451, 460, 461, 463, 464, 471, 472, 475, 477, 478, 479], "42": [77, 84, 93, 99, 118, 120, 123, 127, 137, 157, 166, 167, 173, 183, 190, 222, 223, 252, 265, 280, 281, 289, 293, 294, 315, 340, 341, 342, 363, 377, 380, 382, 384, 385, 416, 423, 425, 436, 437, 442, 445, 462, 463, 464, 471, 472, 475, 477, 478, 479], "63": [77, 315, 337, 349, 479], "propos": [77, 79, 86, 151, 172, 223, 264, 338, 341, 345, 398, 406, 423, 426, 428, 431, 432, 458, 459, 461, 462, 463, 464, 465, 471, 475, 477, 479], "2016": [77, 180, 338, 442, 449, 457, 475, 476, 479], "040070": 77, "fee": [77, 222, 422], "fie": 77, "fum": [77, 222], "fiefoo": 77, "pyrex": 78, "sip": [78, 390], "cxx": [78, 351, 452, 479], "weav": 78, "pythonrun": [78, 463, 479], "al": [78, 94, 178, 334, 338, 343, 372, 464, 475, 479], "pymap": 78, "arg_format": 78, "print_error": [78, 471], "stdoutcatch": 78, "attrnam": [78, 264, 406], "realiz": [78, 102, 205, 294, 463, 464, 479], "ugli": [78, 112, 187, 365, 458, 461], "hackeri": 78, "worth": [78, 100, 115, 190, 258, 265, 266, 280, 380, 430, 431, 458, 459, 460, 463, 470, 474, 479], "gdb": [78, 84, 465, 479], "gdbinit": [78, 465, 479], "br": [78, 174, 431, 466, 467, 471, 472, 479], "_pyimport_loaddynamicmodul": 78, "myscript": [78, 294, 305, 434, 451], "50": [78, 83, 84, 94, 99, 100, 102, 137, 153, 157, 180, 183, 244, 264, 276, 305, 315, 316, 334, 340, 349, 362, 363, 372, 380, 384, 386, 408, 409, 422, 445, 446, 447, 464, 465, 469, 471, 474, 475, 476, 477, 478, 479], "python2": [78, 108, 109, 110, 341, 417, 457, 459, 464, 473, 479], "red": [78, 79, 91, 93, 99, 100, 103, 105, 108, 145, 148, 157, 174, 208, 237, 258, 315, 340, 341, 365, 372, 380, 398, 422, 437, 448, 461, 462, 467, 468, 469, 470, 475, 479], "hat": [78, 79, 108, 422, 447], "devel": [78, 96, 285, 479], "rpm": [78, 458, 461], "debian": [78, 220, 456, 458, 459, 476, 479], "apt": [78, 96, 475, 479], "tripl": [78, 86, 103, 106, 174, 187, 285, 290, 293, 297, 316, 325, 334, 341, 360, 380, 423, 431, 470, 479], "myreadlin": 78, "relink": 78, "linkcc": [78, 452], "bpl": 78, "amoeba": 79, "bourn": [79, 298], "1989": [79, 180, 464], "usenet": [79, 83, 99], "bn": 79, "rcn": [79, 92], "0an": 79, "0bn": 79, "0rcn": 79, "a0": 79, "4a0": 79, "newsgroup": [79, 285, 462], "comp": [79, 83, 84, 99, 147, 285, 450, 459, 460, 463, 472, 473], "lang": [79, 83, 84, 99, 106, 227, 263, 337, 391, 450, 459, 460, 461, 463, 466], "communiti": [79, 84, 244, 382, 455, 458, 459, 463, 464, 471, 476], "rss": [79, 460], "git": [79, 141, 345, 473, 477, 479], "jelk": 79, "boer": 79, "283": [79, 180], "303": [79, 107, 238, 391], "wiki": [79, 80, 83, 84, 94, 157, 232, 337, 338, 349, 364, 455, 462, 463, 465, 471, 472, 479], "moin": [79, 83, 455, 462], "pythonbook": 79, "bbc": [79, 163, 435, 474], "18": [79, 88, 94, 96, 106, 180, 183, 190, 220, 223, 233, 293, 315, 316, 329, 338, 340, 341, 344, 349, 372, 442, 447, 461, 462, 465, 468, 469, 470, 471, 476, 477, 478, 479], "602": [79, 478], "mailman": [79, 460, 462, 469, 478, 479], "zope": [79, 422, 459, 460, 471], "googl": [79, 82, 83, 99, 107, 399, 415, 463, 464, 465, 470, 472, 477, 479], "yahoo": [79, 181, 463, 464], "lucasfilm": 79, "ltd": [79, 338, 422], "pygam": 79, "__sizeof__": [79, 349, 385, 464, 479], "__": [79, 84, 100, 286, 358, 431], "emac": [79, 85, 91, 106, 153, 174, 244, 268, 328, 431, 455, 464], "edu": [79, 94, 391, 422, 460, 461, 479], "tcl_librari": 80, "tk_librari": 80, "sam": [80, 291, 422, 458, 469, 479], "sourceforg": [80, 108, 180, 458, 459, 461, 464, 479], "tkappinit": 80, "tclsam_init": 80, "libtclsam": 80, "libtksam": 80, "xt": [80, 147, 231, 267], "xtaddinput": 80, "takefocus": [80, 372], "hp": [82, 462, 479], "compaq": 82, "engin": [83, 94, 97, 103, 183, 263, 316, 337, 365, 372, 409, 411, 458, 460, 462, 464, 465, 474, 479], "mathmodul": 83, "sl": [83, 281, 479], "scriptfil": 83, "755": [83, 100], "env": [83, 100, 106, 140, 164, 197, 290, 293, 341, 345, 391, 395, 417, 434, 444, 449, 451, 456, 457, 461, 462, 469, 477, 479], "alex": [83, 461, 464, 465, 468, 469, 470, 474, 475, 477, 478, 479], "rezinski": 83, "ncurs": [83, 91, 174, 458, 459, 462, 468, 477, 479], "sysv": [83, 458, 459], "colour": [83, 91, 103, 120, 458, 479], "mous": [83, 91, 174, 345, 367, 372, 380, 458, 464, 479], "ose": [83, 255, 334, 458, 476, 479], "fancier": [83, 118, 187, 462, 463, 465], "smalltalk": [83, 94, 157, 384, 436, 459], "delight": 83, "main_log": 83, "tractabl": 83, "ters": [83, 300, 380, 457], "pleasant": [83, 458, 459, 463], "fun": [83, 164, 223, 380, 382, 384, 469, 475], "flaw": [83, 87, 385, 460, 471, 479], "self_test": 83, "unavail": [83, 107, 190, 252, 267, 280, 290, 329, 382, 424, 479], "fake": [83, 289, 403, 424, 479], "epydoc": 83, "thread_task": 83, "sequenti": [83, 100, 123, 160, 215, 232, 280, 296, 305, 341, 358, 385, 424, 448, 479], "001": [83, 180, 222, 258, 268, 305, 362, 431], "guess": [83, 155, 164, 181, 190, 197, 203, 206, 242, 247, 252, 263, 273, 305, 391, 403, 430, 452, 461, 471, 479], "job": [83, 91, 99, 100, 103, 106, 118, 126, 148, 156, 198, 204, 227, 280, 290, 296, 342, 345, 371, 391, 428, 458, 464, 471, 479], "realist": [83, 345, 385, 407, 462, 463], "130283832797456": 83, "130283824404752": 83, "130283816012048": 83, "130283807619344": 83, "130283799226640": 83, "consult": [83, 84, 91, 94, 99, 103, 108, 152, 164, 173, 180, 227, 264, 265, 268, 290, 292, 316, 319, 329, 332, 334, 337, 339, 349, 362, 403, 428, 457, 458, 460, 461, 462, 463, 464, 465, 466, 470, 478, 479], "account": [83, 103, 155, 157, 160, 164, 180, 183, 187, 199, 206, 222, 232, 241, 263, 264, 265, 283, 290, 293, 304, 336, 344, 349, 354, 355, 358, 395, 463, 467, 471, 473, 474, 475, 477, 478, 479], "pvm": 83, "l2": [83, 155, 372], "d1": [83, 465, 478], "d2": [83, 465, 478], "mass": [83, 93, 180, 458], "mutex": [83, 113, 122, 136, 337, 349, 479], "hindranc": 83, "multiprocessor": [83, 281, 300], "insist": [83, 306, 365], "greg": [83, 108, 458, 460, 461, 462, 463, 472, 474, 477, 479], "stein": [83, 458, 479], "adam": [83, 464, 465, 468, 470, 471, 472, 475, 476, 477, 478, 479], "olsen": [83, 464, 465], "experi": [83, 89, 93, 94, 99, 101, 103, 121, 124, 173, 227, 305, 337, 365, 380, 384, 406, 457, 458, 459, 460, 464, 465, 467, 474, 477, 479], "safethread": 83, "exhibit": [83, 244, 255, 290, 341], "sharp": [83, 155], "slower": [83, 84, 103, 155, 223, 244, 255, 267, 280, 327, 380, 440, 461, 462, 464, 466, 470, 476, 477, 478, 479], "compens": [83, 305, 475, 479], "creativ": [83, 232, 333], "judici": [83, 178, 464], "tremend": 83, "3rd": [83, 316, 331, 382, 442, 472, 479], "rate": [83, 115, 139, 286, 292, 305, 340, 346, 392, 397, 475, 479], "gain": [83, 89, 100, 142, 164, 247, 255, 296, 349, 391, 428, 430, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479], "old_path": 83, "new_path": 83, "ntfs": 83, "hfs": 83, "hhl": 83, "letter": [83, 91, 103, 106, 141, 155, 174, 175, 183, 187, 190, 225, 263, 264, 289, 293, 294, 298, 316, 338, 341, 342, 360, 372, 383, 390, 391, 418, 426, 431, 438, 445, 458, 460, 462, 463, 464, 465, 466, 470, 472, 474, 475, 476, 479], "homogen": [83, 341, 344, 404], "osx": [83, 173, 473, 476, 479], "ironpython": [83, 86, 93, 300, 430, 464, 479], "pyseri": 83, "mitch": 83, "chapman": [83, 462, 477, 479], "selm": 83, "34a04430": 83, "cf9": 83, "ohioe": 83, "paul": [83, 311, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 472, 473, 474, 476, 477, 478, 479], "boddi": [83, 457], "webprogram": 83, "cameron": [83, 145], "laird": 83, "technolog": [83, 91, 253, 422], "20210224183619": 83, "phaseit": 83, "claird": 83, "web_python": 83, "me": [83, 104, 108, 197, 223, 237, 285, 342, 358, 386, 449, 457, 464, 469, 470], "qs": [83, 390], "josephin": 83, "mi": [83, 147, 463, 477, 478, 479], "req": [83, 107, 338, 385, 391, 471], "hdrs": [83, 389, 391], "guy": 83, "steel": [83, 479], "2c": [83, 365, 479], "sender": [83, 100, 197, 200, 205, 268, 332], "fromaddr": [83, 100, 265, 266, 332, 338], "toaddr": [83, 100, 265, 266, 332], "localhost": [83, 100, 104, 107, 197, 239, 242, 244, 265, 266, 280, 302, 310, 326, 332, 335, 338, 355, 391, 415, 416, 447, 479], "sbin": [83, 173, 316], "progress": [83, 103, 149, 190, 209, 280, 290, 328, 337, 338, 354, 371, 372, 395, 396, 457, 458, 460, 465, 479], "twist": [83, 386, 422, 479], "disk": [83, 94, 99, 106, 166, 181, 191, 197, 205, 210, 231, 240, 244, 255, 262, 266, 268, 275, 278, 281, 285, 290, 292, 295, 296, 319, 324, 327, 329, 337, 345, 349, 354, 378, 401, 409, 418, 424, 461, 463, 464, 466, 472, 479], "lightweight": [83, 213, 223, 259, 337, 377, 395, 405, 457, 458, 463, 464, 474, 475], "databaseprogram": 83, "sdev": 83, "idle3": 84, "pythonwin": [84, 173, 457, 458], "cool": 84, "activepython": [84, 457], "eric": [84, 91, 172, 174, 293, 321, 409, 438, 458, 459, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "pyqt": [84, 455], "scintilla": 84, "trepan3k": 84, "wing": 84, "komodo": 84, "pycharm": [84, 475], "pylint": [84, 102], "pyflak": [84, 479], "sooner": [84, 173, 407, 464], "mypi": [84, 102, 382, 424, 469, 474, 475, 479], "pyre": 84, "pytyp": [84, 102, 475], "scan": [84, 89, 92, 94, 96, 99, 103, 155, 174, 225, 227, 242, 290, 316, 325, 358, 365, 382, 424, 425, 451, 460, 461, 463, 465, 471, 474, 479], "pyinstal": [84, 280], "pyoxid": 84, "py2app": [84, 455], "py2ex": [84, 280, 479], "foobar": [84, 118, 217, 222, 265, 289, 316, 341, 386, 479], "remind": [84, 341, 437, 466, 479], "superfici": 84, "moment": [84, 89, 102, 106, 180, 210, 255, 280, 290, 397, 428, 475, 479], "clutter": [84, 100, 471], "defeat": [84, 103, 396, 424, 479], "everywher": [84, 358, 479], "basi": [84, 99, 100, 155, 173, 240, 259, 264, 268, 305, 349, 354, 418, 422, 428, 432, 457, 460, 461, 476, 479], "harder": [84, 190, 289, 341, 386, 470, 479], "linter": [84, 120, 382], "dateutil": [84, 180, 479], "gordon": [84, 104, 458, 461, 479], "mcmillan": [84, 104, 461], "2nd": [84, 258, 316, 365, 479], "grab": [84, 99, 100, 361, 457, 479], "1st": [84, 180, 258], "techniqu": [84, 94, 100, 105, 106, 149, 158, 190, 198, 223, 290, 305, 316, 350, 357, 371, 382, 385, 386, 428, 471, 477, 479], "gone": [84, 97, 107, 238, 385, 458, 459, 461, 464, 466, 471, 477, 479], "bite": [84, 103, 289, 386], "neophyt": 84, "memoiz": [84, 137, 223, 459, 475, 479], "_cach": [84, 280, 459], "matter": [84, 92, 93, 100, 106, 108, 160, 180, 190, 205, 244, 250, 263, 289, 290, 293, 335, 337, 341, 349, 357, 372, 382, 384, 385, 386, 396, 424, 427, 457, 458, 460, 462, 463, 464, 465, 473, 479], "tast": 84, "3c": [84, 365], "somevar": 84, "mistaken": [84, 436, 458, 471, 473, 479], "diagnos": [84, 99, 173, 244, 384, 386], "a_list": [84, 377], "some_tupl": 84, "some_int": 84, "calle": [84, 376], "se": [84, 240, 355, 365], "func1": [84, 382], "99": [84, 91, 104, 145, 173, 180, 183, 258, 263, 265, 316, 340, 341, 362, 462, 465, 466, 471], "100": [84, 91, 100, 106, 107, 115, 123, 124, 134, 145, 153, 178, 180, 183, 187, 198, 205, 211, 222, 238, 242, 244, 258, 263, 272, 280, 281, 292, 315, 326, 334, 340, 341, 342, 354, 362, 363, 372, 380, 384, 391, 401, 403, 415, 423, 426, 437, 440, 442, 445, 446, 447, 448, 458, 461, 463, 464, 465, 468, 469, 471, 473, 474, 477, 479], "clearest": [84, 461], "changeabl": 84, "func2": 84, "func3": 84, "func4": 84, "linear": [84, 130, 139, 158, 166, 187, 258, 325, 340, 341, 346, 380, 436, 461, 473, 477, 479], "tax": [84, 316, 445, 461], "10e6": 84, "exponenti": [84, 183, 266, 341, 358, 405, 426, 461, 462, 464, 479], "inc": [84, 338, 404, 422, 458, 464], "dec": [84, 85, 94, 180, 218, 220, 447, 460, 461, 479], "newdict": 84, "olddict": 84, "new_l": 84, "0x16d07cc": 84, "arguabl": [84, 338], "deliber": [84, 89, 118, 289, 302, 331, 341, 381, 384, 422, 451, 473], "benefici": [84, 100, 137, 422, 474], "on_tru": 84, "on_fals": 84, "ulf": 84, "bartelt": 84, "prime": [84, 163, 190, 205, 222, 258, 280, 341, 349, 362, 437, 447, 471, 475, 477, 479], "fibonacci": [84, 223, 437, 445, 446, 469], "mandelbrot": 84, "ru": [84, 215, 461], "iu": [84, 461], "sx": 84, "sy": 84, "yc": 84, "xc": [84, 349], "80": [84, 89, 102, 104, 134, 145, 153, 155, 164, 205, 239, 240, 244, 258, 304, 305, 329, 334, 335, 340, 380, 384, 390, 391, 448, 462, 469, 471, 474, 475, 479], "___": 84, "______": 84, "__________": 84, "_________________": 84, "axi": [84, 152, 272, 372, 437, 468], "____________________________": 84, "sole": [84, 89, 93, 102, 108, 158, 183, 252, 280, 281, 337, 341, 360, 381, 382, 398, 422, 424, 426, 465, 472, 473, 474, 476, 479], "invari": [84, 93, 94, 183, 193, 296, 382, 426, 428, 479], "0o10": [84, 222], "0xa5": 84, "165": [84, 264, 340], "0xb2": 84, "178": 84, "ago": [84, 460, 479], "190": [84, 340, 460], "144": [84, 223, 258, 437, 445, 446, 477], "0144": 84, "0x144": 84, "rm": [84, 88, 293, 328, 479], "rf": [84, 328, 431, 479], "09": [84, 100, 152, 206, 264, 272, 329, 338, 444, 479], "fanci": [84, 91, 100, 461, 465, 479], "04d": [84, 223], "3f": [84, 157, 442, 471, 477], "assembl": [84, 94, 106, 188, 337, 345, 365, 424, 430, 463, 479], "sio": 84, "yello": 84, "paren": [84, 110, 120, 172, 244, 427, 463, 479], "get_input": 84, "do_foo": [84, 153], "do_bar": [84, 153], "foo_inst": 84, "do_": [84, 153, 242], "myfunc": [84, 100, 188, 316, 416], "fname": [84, 106, 166, 187, 265, 378, 473], "untermin": [84, 479], "workaround": [84, 178, 190, 294, 338, 341, 386, 398, 418, 470, 472, 477, 479], "tough": 84, "dive": 84, "hot": [84, 244, 305], "spot": [84, 292, 360], "benchmark": [84, 223, 305, 451, 458, 459, 461, 462, 463, 465, 466, 467, 469, 472, 473, 474, 477, 478, 479], "sophist": [84, 89, 131, 153, 166, 183, 264, 338, 342, 409, 460, 463], "sprinkl": [84, 430], "moder": [84, 94, 103, 285, 289, 302, 316, 460, 461], "tend": [84, 98, 147, 187, 223, 302, 305, 467], "outweigh": 84, "detriment": 84, "confid": [84, 102, 108, 149, 315], "skill": [84, 380], "ineffici": [84, 255, 290, 378, 470, 474, 479], "quadrat": [84, 158, 187, 341, 405, 465, 468, 479], "my_str": [84, 470], "my_bytes_object": 84, "cheap": [84, 173, 296, 479], "penultim": 84, "activest": [84, 108, 450, 455, 458, 471], "52560": 84, "reorder": [84, 93, 124, 409, 479], "mylist": [84, 178, 318, 471], "variat": [84, 92, 93, 103, 180, 190, 268, 290, 302, 338, 345, 350, 424, 457, 463, 479], "keep_funct": 84, "keep_condit": 84, "fastest": [84, 231, 280, 316, 363, 380, 447, 464, 471, 477], "con": [84, 337, 479], "lisp_list": 84, "analogu": [84, 280], "car": 84, "cdr": 84, "replic": [84, 94, 205, 280, 457, 462, 465, 479], "eleg": [84, 164, 462, 471], "suffic": [84, 222, 292], "exemplar": 84, "wrote": [84, 89, 94, 335, 422, 458, 460, 462, 473, 479], "randal": [84, 105], "schwartz": [84, 105, 464], "isort": 84, "list1": 84, "list2": 84, "embodi": [84, 204, 406], "refin": [84, 476, 479], "mboxmailbox": 84, "maildirmailbox": 84, "outlookmailbox": 84, "mere": [84, 166, 180, 190, 222, 281, 289, 330, 345, 349, 380, 422, 423, 466], "class1": [84, 385, 386, 460], "class2": [84, 385, 386, 460], "upperout": 84, "outfil": [84, 118, 138, 259, 289, 298, 376, 448, 467, 471, 479], "_outfil": 84, "redefin": [84, 108, 142, 158, 247, 335, 424, 461, 464, 479], "trickier": [84, 289], "rough": [84, 92, 100, 106, 172, 199, 223, 240, 249, 258, 272, 278, 280, 289, 290, 299, 315, 341, 358, 361, 381, 424, 432, 440, 458, 464, 465, 476, 478, 479], "incident": [84, 108, 210, 248, 381, 422, 479], "basealia": 84, "getcount": [84, 288, 478], "rebind": [84, 224, 432, 462, 479], "tight": [84, 99, 108, 133, 426, 430, 479], "answer": [84, 88, 92, 93, 131, 152, 190, 223, 232, 265, 268, 305, 342, 362, 438, 442, 458, 462, 466, 479], "cout": 84, "mangl": [84, 193, 222, 318, 426, 431, 432, 436, 473, 479], "_classname__spam": [84, 436], "privaci": [84, 338, 394], "bother": [84, 91, 100, 102, 106, 280, 459, 460, 470], "vanish": [84, 155, 382], "inconveni": [84, 89, 240, 252, 386, 409], "wors": [84, 103, 124, 180, 185, 259, 470, 472, 473, 479], "patholog": [84, 479], "illustr": [84, 89, 98, 99, 100, 107, 118, 137, 170, 180, 190, 205, 240, 247, 265, 328, 330, 337, 341, 345, 355, 365, 384, 391, 423, 426, 462, 472], "13901272": 84, "13891296": 84, "inadvis": 84, "500": [84, 107, 153, 180, 183, 211, 220, 238, 285, 340, 341, 394, 403, 446, 448, 461, 463, 468, 479], "thon": [84, 445], "english": [84, 100, 106, 289, 360, 362, 380, 430, 431, 465, 466, 474], "_sentinel": 84, "late": [84, 91, 102, 187, 300, 458, 479], "firstofmonthd": 84, "namedint": 84, "xlat": 84, "ten": [84, 92, 100, 157, 174, 183, 305, 315, 344, 461], "titlestr": [84, 380], "2012": [84, 91, 106, 220, 472, 478, 479], "blog": [84, 386, 463], "rock": [84, 106, 118], "princip": [84, 120, 240, 338, 467, 471], "age": [84, 92, 102, 105, 157, 223, 240, 241, 337, 338, 447, 460, 461, 462, 465, 471], "weather": 84, "govern": [84, 100, 178, 183, 191, 390, 415, 422, 471], "websit": [84, 107, 181, 391, 430, 471, 479], "station_id": 84, "_station_id": 84, "current_temperatur": 84, "longitud": [84, 342], "latitud": [84, 342], "station": 84, "historic_rainfal": 84, "mm": [84, 108, 180, 245, 275, 341, 362], "rainfal": 84, "change_st": 84, "cm": [84, 137, 166, 358, 384], "__pycache__": [84, 247, 293, 308, 349, 446, 451, 469, 471, 477, 479], "middl": [84, 89, 91, 124, 166, 196, 294, 315, 318, 360, 380, 412, 463, 465, 475, 479], "xyz": [84, 118, 264, 265, 341, 384, 471, 479], "cfile": [84, 308], "bar_var": 84, "foo_var": 84, "jim": [84, 94, 100, 305, 430, 458, 462, 464, 471, 475, 479], "roskind": [84, 305], "strang": [84, 113, 360, 390, 424, 457, 459, 463, 464], "matthia": [84, 465, 468, 470, 472, 475, 476, 477, 479], "urlich": 84, "restructur": [84, 304, 458, 459, 464, 479], "modnam": [84, 436, 446, 463, 470, 475], "fool": [84, 458, 462], "proof": [84, 94, 200, 280, 458, 477, 479], "paradox": [84, 461], "0x7352a0": 84, "0x4198d0": 84, "yournam": 85, "v3": [85, 334, 479], "d48eceb": 85, "19": [85, 88, 94, 99, 100, 103, 106, 108, 137, 157, 173, 180, 183, 190, 206, 220, 233, 258, 290, 338, 340, 341, 342, 419, 461, 462, 463, 464, 465, 468, 471, 477, 478, 479], "2017": [85, 291, 338, 431, 452, 479], "06": [85, 100, 180, 242, 264, 329, 445, 463, 475, 479], "04": [85, 88, 91, 180, 342, 344, 362, 421, 444, 463, 465, 468, 475, 476, 479], "45": [85, 89, 94, 144, 157, 164, 183, 264, 280, 315, 334, 380, 382, 461, 462, 463, 468, 477, 478], "1900": [85, 180, 362, 431, 464, 471], "hellohellohello": 85, "desktop": [85, 106, 399, 457], "pathext": [85, 329, 395, 457, 470, 473, 479], "mcafe": 85, "pyinit_foo": 85, "__declspec": 85, "nn": 85, "33": [85, 145, 157, 173, 175, 258, 280, 281, 316, 349, 385, 440, 446, 447, 460, 461, 462, 471, 477, 478, 479], "loadlibraryex": [85, 173, 477], "getprocaddress": 85, "leo": [85, 147], "initleo": 85, "initleoc": 85, "initmyappc": 85, "myapp": [85, 99, 100, 164, 232, 365, 417, 474], "pythonnn": 85, "_resultobj": 85, "typemap": [85, 266], "wxpythonwindow": 85, "duck": [86, 341, 382, 464, 473, 479], "bdfl": 86, "benevol": [86, 458], "argument1": 86, "argument2": 86, "argumentn": 86, "1j": [86, 152, 222, 259, 385, 479], "multidimension": [86, 341], "perl": [86, 94, 103, 105, 240, 316, 435, 440, 448, 458, 462, 463, 479], "dictview": [86, 341, 477, 479], "eafp": [86, 290], "forgiv": [86, 458, 479], "lbyl": 86, "75": [86, 91, 100, 187, 190, 280, 340, 380, 445, 447, 461, 462, 464, 465, 475, 476, 477, 478, 479], "sum_two_numb": [86, 120], "_featur": [86, 111, 222], "8192": [86, 104, 220, 222, 239, 403], "81": [86, 101, 258, 280, 315, 340, 374, 438, 442, 445, 447, 477], "443": [86, 134, 239, 338, 473], "parameter": [86, 174, 190, 337, 341, 381, 382, 424, 468, 478, 479], "483": [86, 382, 474], "intens": [86, 174, 267, 290, 472, 479], "collat": [86, 263, 337, 469, 479], "leap": [86, 99, 103, 148, 180, 362], "new_local": 86, "cp1252": [86, 155, 444], "04x": [86, 106], "organiz": [86, 338, 424], "1024": [86, 106, 172, 183, 212, 232, 265, 306, 334, 335, 338, 341, 378, 431, 447, 479], "max_exp": [86, 349], "posonly1": 86, "posonly2": 86, "positional_or_keyword": [86, 252], "kw_only1": 86, "kw_only2": 86, "411": [86, 107, 238, 264, 349, 378, 479], "abracadabra": [86, 92, 157, 280, 341, 342, 438, 462], "variable_nam": 86, "0000": [86, 97, 106, 155, 180, 200, 206, 256, 341, 362, 424, 458, 471, 472, 479], "10ffff": [86, 155, 424, 472, 479], "datastream": 86, "remove_gray_shad": 86, "refactor": [86, 94, 110, 120, 384, 385, 386, 462, 473, 474, 475, 476, 479], "macintosh": [86, 155, 431, 458, 461], "zen": [86, 112], "larri": [87, 89, 340, 465, 467, 468, 472, 473, 477, 478, 479], "hast": [87, 89, 465, 467, 468, 472, 473, 477, 478, 479], "viabl": 87, "inadvert": [87, 108, 166, 252, 464, 473, 474, 479], "ann": 87, "exot": [87, 98, 259, 460], "malform": [87, 120, 155, 183, 196, 222, 239, 255, 268, 342, 462, 464, 471, 479], "nutshel": [87, 89], "__wrapped__": [87, 92, 222, 223, 252, 468, 469, 471, 473, 474, 479], "__globals__": [87, 252, 424, 466, 468, 479], "fn": [87, 100, 106, 163, 197, 264, 395, 403, 417, 418, 466, 474, 477], "paragraph": [87, 89, 99, 137, 194, 244, 259, 289, 290, 293, 338, 341, 360, 409, 416, 422, 424, 458, 461, 479], "tshepang": 88, "mbambo": 88, "fulfil": [88, 107, 238, 242, 338, 356, 459, 461, 471], "devguid": [88, 473], "ctypes_configur": 88, "dotview": 88, "lib_pypi": 88, "drwxr": [88, 220], "xr": [88, 220, 329, 471], "wena": 88, "4096": [88, 104, 106, 113, 157, 170, 220, 222, 232, 334, 341, 361, 471], "feb": [88, 94, 180, 422, 460], "51": [88, 100, 101, 315, 380, 438, 464, 468], "rwxr": [88, 329], "535": 88, "05": [88, 100, 132, 152, 180, 258, 272, 316, 338, 344, 362, 448, 463, 464, 475, 479], "rw": [88, 93, 100, 220, 292, 329, 337, 345, 471, 474, 475, 476], "741": [88, 479], "01": [88, 100, 104, 144, 180, 183, 206, 222, 232, 237, 264, 329, 334, 336, 338, 341, 362, 404, 418, 421, 426, 447, 457, 459, 461, 462, 463, 471, 472, 475, 476, 479], "cftuvsux": 88, "cp": [88, 92, 155, 289, 290, 465, 474], "store_tru": [88, 118, 187, 225, 289, 306, 395, 465, 471, 479], "spirit": 88, "brought": [88, 296, 461, 479], "complaint": [88, 89, 459], "vv": [88, 118, 451, 467, 475, 479], "vvv": [88, 118, 391], "sad": [88, 93, 466, 479], "vvvv": 88, "surfac": [88, 380], "explor": [88, 99, 107, 164, 188, 237, 244, 290, 380, 395, 409, 424, 457, 464, 471, 479], "greedili": 88, "opposit": [88, 94, 103, 106, 206, 316, 380, 424, 458, 464, 466, 479], "sake": [88, 89, 91, 100, 126, 202, 290, 328, 428, 461, 479], "vq": 88, "po": [88, 227, 465, 469], "babel": [88, 227], "pybabel": [88, 227], "ship": [89, 124, 130, 250, 365, 384, 405, 417, 422, 457, 458, 461, 465, 467, 471, 473, 474, 478, 479], "checksum": [89, 144, 334, 354, 418, 420], "mismatch": [89, 190, 210, 213, 264, 316, 331, 338, 409, 423, 459, 461, 463, 465, 474, 479], "regener": [89, 198, 308, 428, 452, 465, 470, 474, 475, 479], "happi": [89, 93, 124, 461, 477, 479], "_end_": 89, "_start_": 89, "srcdir": [89, 452, 471, 479], "impl": [89, 407, 479], "farther": 89, "walkthrough": 89, "checkout": [89, 118, 457, 465, 479], "trunk": [89, 463, 464], "_pickl": [89, 479], "cut": [89, 103, 152, 222, 244, 340, 362, 462, 464, 479], "past": [89, 100, 118, 120, 180, 190, 213, 244, 252, 290, 293, 296, 311, 342, 345, 362, 403, 471, 473, 474, 477, 478, 479], "junk": [89, 187, 280, 285, 345, 479], "margin": 89, "wider": [89, 155, 180, 382, 462, 473], "257": [89, 479], "hygien": 89, "picklerobject": 89, "pickler_typ": 89, "name_of_paramet": 89, "establish": [89, 99, 124, 190, 244, 245, 266, 280, 296, 299, 302, 316, 325, 332, 338, 355, 391, 401, 423, 424, 425, 465, 471, 479], "multicharact": 89, "infer": [89, 118, 158, 190, 222, 223, 265, 280, 299, 362, 377, 382, 475, 479], "outdent": 89, "luck": [89, 406], "_pickle_pickler_dump": 89, "87ecad1261e02ac7": 89, "552eb1c0f52260d9": 89, "__pickle_pickler_dump_methoddef": 89, "__pickle_pickler_dump": 89, "__pickle_pickler_dump__doc__": 89, "rerun": [89, 428, 466], "cur": [89, 106, 268, 278, 337, 342, 383, 394, 426, 431, 464, 465, 475, 479], "reiter": 89, "weird": [89, 118], "return_typ": [89, 427], "your_function_impl": 89, "da39a3ee5e6b4b0d3255bfef95601890afd80709": 89, "_pickle_pickler_dump_impl": 89, "3bd30745bf206a48f8b576a1da3d90f55a0a4187": 89, "issue3664": 89, "segfault": [89, 174, 462, 463, 475, 476, 479], "_pickler_clearbuff": 89, "pickler_method": 89, "__pickle_pickler_clear_memo_methoddef": 89, "_py_id": 89, "new_unique_py_id": 89, "congratul": 89, "collid": [89, 280, 316, 391, 432], "_impl": 89, "pickler_dump": 89, "pickler_dumper_impl": 89, "file_obj": [89, 458, 461], "fix_import": [89, 296, 467], "group_": 89, "favor": [89, 158, 222, 239, 285, 290, 338, 341, 358, 382, 391, 462, 464, 466, 470, 471, 473, 474, 475, 477, 479], "clearer": [89, 94, 102, 190, 289, 341, 458, 459, 460, 461, 462, 464, 476, 479], "mandat": [89, 193, 202, 245, 259, 316, 362, 475], "subclass_of": 89, "parameter_nam": 89, "_length": 89, "unsigned_short": 89, "unsigned_char": 89, "name_of_encod": 89, "unsigned_int": 89, "unsigned_long": 89, "unsigned_long_long": 89, "pysomething_typ": 89, "name_of_c_funct": 89, "rwbuffer": 89, "robuff": 89, "unsigned_": 89, "preprocess": [89, 164, 172, 255, 390], "unreason": [89, 463, 479], "bat": [89, 103, 293, 358, 395, 479], "yep": 89, "nope": [89, 164, 437], "nada": 89, "perspect": [89, 250, 403], "came": [89, 94, 99, 100, 102, 190, 199, 280, 459, 460, 461, 462, 463, 479], "max_widget": 89, "preload": [89, 280, 452, 479], "new_funct": 89, "c_basenam": 89, "existing_funct": 89, "sorri": [89, 437], "proposit": 89, "__ignored_unused_variable__": 89, "self_convert": 89, "thereof": [89, 203, 265, 266, 290, 358, 361, 422, 425, 479], "picklerobject_convert": 89, "zlibmodul": 89, "zlib_compress_compress_impl": 89, "compobject": 89, "6731b3f0ff357ca6": 89, "04d00f65ab01d260": 89, "zlibstat": 89, "__text_signature__": [89, 479], "setattro": 89, "_threadmodul": 89, "local_setattro": 89, "thread_modul": 89, "thread_module_st": 89, "get_thread_st": 89, "573": [89, 478, 479], "converternam": 89, "_convert": [89, 479], "converter_init": 89, "ssize_t_convert": 89, "da39a3ee5e6b4b0d": 89, "35521e4e733823c7": 89, "grep": [89, 96, 100, 101, 244, 345, 458, 479], "creturnconvert": 89, "meth_o_sampl": 89, "interspers": [89, 100, 289], "boon": 89, "rearrang": [89, 448, 458, 461, 463, 465, 478, 479], "peopl": [89, 92, 94, 97, 102, 106, 174, 183, 187, 190, 227, 232, 289, 409, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 472, 475, 477, 479], "hamper": 89, "subsect": [89, 91, 103, 108, 124, 244, 341, 426, 479], "methoddef_defin": 89, "seven": [89, 148, 183, 241, 386, 471, 479], "docstring_prototyp": 89, "docstring_definit": 89, "impl_prototyp": 89, "parser_prototyp": 89, "parser_definit": 89, "impl_definit": 89, "methoddef": [89, 479], "_prototyp": 89, "_definit": 89, "_defin": 89, "five": [89, 100, 183, 266, 268, 289, 290, 316, 335, 337, 338, 349, 390, 411, 458, 464, 472, 477, 479], "preset": [89, 267, 294, 354, 479], "subcommand": [89, 100, 118, 465, 471], "file_templ": 89, "basename_root": 89, "basename_extens": 89, "line_prefix": 89, "line_suffix": 89, "have_functionnam": 89, "module_functionnam": 89, "functionnam": 89, "module_functionname_methoddef": 89, "_methoddef": 89, "wonder": [89, 92, 149, 172, 305, 430, 458, 461, 471], "clever": [89, 106, 149, 296, 342, 460], "ticklish": 89, "posixmodul": [89, 479], "12357": 89, "book": [90, 94, 102, 103, 148, 152, 157, 180, 268, 316, 337, 358, 365, 471, 479], "py3c": 90, "opinion": [90, 458, 463], "kuchl": [91, 94, 103, 106, 174, 458, 459, 460, 461, 462, 463, 464, 465, 473], "raymond": [91, 92, 94, 105, 174, 344, 423, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "paint": [91, 174, 380, 460], "vt100s": [91, 174], "nich": 91, "valuabl": [91, 112, 227, 334, 377, 472], "kernel": [91, 113, 124, 130, 254, 258, 275, 290, 325, 329, 330, 334, 338, 349, 351, 361, 458, 463, 468, 472, 473, 475, 477, 479], "button": [91, 100, 149, 174, 186, 244, 278, 365, 371, 372, 380, 422, 457, 475, 476, 477, 479], "urwid": 91, "commerci": [91, 292, 422, 464], "carri": [91, 92, 99, 155, 181, 183, 188, 262, 264, 272, 280, 289, 315, 337, 341, 384, 405, 406, 422, 425, 431, 432, 463, 464, 465, 474, 477, 479], "proprietari": [91, 422], "unicurs": 91, "biggest": [91, 102, 378, 466, 471, 472], "mvaddstr": 91, "mvwaddstr": 91, "stdscr": [91, 174, 464], "multibyt": [91, 174, 205, 341, 472, 479], "mess": [91, 118, 289, 460], "buggi": [91, 104, 458, 460, 470, 472, 473, 479], "uncaught": [91, 150, 337, 349, 361, 426, 459, 477, 479], "funni": [91, 139], "rectangular": [91, 152, 380], "redraw": 91, "begin_x": [91, 174], "begin_i": [91, 174], "height": [91, 174, 178, 244, 278, 290, 316, 340, 365, 372, 380, 382, 445, 463, 479], "40": [91, 92, 94, 99, 153, 157, 180, 190, 244, 264, 305, 315, 316, 318, 329, 340, 362, 371, 380, 420, 437, 447, 448, 468, 473, 476, 477, 478, 479], "slow": [91, 100, 181, 232, 244, 255, 258, 266, 280, 327, 335, 341, 358, 380, 382, 394, 418, 419, 458, 459, 461, 462, 464, 478, 479], "baud": [91, 479], "flurri": [91, 458], "redrawn": [91, 174, 380], "26": [91, 93, 99, 101, 108, 180, 233, 256, 280, 315, 329, 338, 362, 363, 374, 390, 419, 422, 461, 462, 465, 471, 475, 477, 478, 479], "ordinari": [91, 99, 103, 149, 166, 190, 222, 231, 297, 316, 327, 330, 337, 340, 354, 385, 398, 409, 428, 431, 432, 458, 472, 479], "annoy": [91, 106, 149, 264, 385, 458, 460, 461, 464, 466, 472, 477, 479], "flicker": [91, 174, 479], "twisti": 91, "maze": 91, "subt": [91, 172, 193, 202, 428], "waddstr": [91, 472], "boldfac": [91, 464], "underlin": [91, 174, 368, 372], "distract": [91, 289, 479], "blink": [91, 174, 477, 478, 479], "invis": [91, 155, 174, 176, 380, 465, 467, 479], "synonym": [91, 100, 106, 113, 174, 289, 296, 316, 339, 365, 406, 431, 464, 479], "video": [91, 174, 258, 269, 272, 464], "viewer": [91, 244, 266, 380, 479], "safest": [91, 173, 268, 479], "stick": [91, 106, 267, 280, 358, 372, 380, 460, 461, 464], "bright": 91, "xterm": [91, 174, 479], "american": [91, 180], "spell": [91, 155, 180, 200, 264, 305, 341, 372, 431, 432, 461, 466, 472, 479], "canadian": [91, 155], "british": 91, "resign": 91, "misspel": [91, 92, 164, 385, 479], "foreground": [91, 174, 244, 372, 448], "wire": [91, 99, 155, 174, 264, 265, 266, 338, 343, 385, 415, 474], "white": [91, 93, 103, 174, 175, 196, 208, 244, 345, 372, 380, 391, 422, 430, 448, 473, 478, 479], "black": [91, 93, 100, 106, 145, 157, 174, 208, 244, 315, 372, 380, 448, 461, 462, 468, 469, 470, 473, 477], "green": [91, 93, 120, 157, 174, 208, 237, 315, 340, 380, 398, 437, 448, 461, 462, 467, 468, 471, 475, 479], "magenta": [91, 93, 174, 448], "cyan": [91, 93, 174, 448], "alert": [91, 104, 237, 266, 338, 382, 396, 476, 479], "rgb": [91, 93, 159, 174, 203, 246, 289, 365, 380, 473, 479], "purpl": [91, 93, 100, 208], "unabl": [91, 94, 99, 100, 107, 252, 268, 290, 325, 337, 345, 349, 360, 439, 457, 463, 479], "lucki": [91, 173], "talent": 91, "tenth": [91, 139, 174, 206], "printdocu": 91, "backspac": [91, 103, 174, 175, 244, 316, 431, 444, 479], "keybind": [91, 174, 244, 317], "editwin": 91, "struck": 91, "brows": [91, 107, 310, 372, 464, 479], "vendor": [91, 232, 300, 456, 457, 479], "acs_": 91, "lengthi": [91, 94, 103, 258, 297, 458, 459, 460, 461, 462, 471, 479], "swear": 91, "pycon": [91, 106, 338, 463], "2013": [91, 100, 106, 180, 291, 338, 422, 479], "hetting": [92, 94, 105, 423, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "curious": [92, 149, 479], "objtyp": 92, "directorys": 92, "song": [92, 470], "game": [92, 118, 380, 463, 464], "twenti": [92, 172], "chess": [92, 94, 106, 460, 461], "reveal": [92, 180, 382, 464, 471, 479], "_age": 92, "loggedageaccess": 92, "birthday": [92, 447, 468], "mari": [92, 334, 437], "dave": [92, 105, 461, 462, 465, 471, 479], "david": [92, 94, 96, 106, 227, 422, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 471, 472, 473, 474, 475, 477, 479], "hardwir": [92, 166, 305], "loggedaccess": 92, "public_nam": 92, "private_nam": 92, "pete": 92, "peter": [92, 97, 112, 227, 315, 363, 458, 459, 460, 461, 462, 463, 464, 469, 472, 473, 474, 475, 478, 479], "kate": 92, "catherin": 92, "some_class": 92, "descriptor_nam": 92, "notori": [92, 398], "meet": [92, 94, 100, 138, 166, 172, 183, 187, 190, 296, 341, 391, 422, 424, 458, 462], "oneof": 92, "predic": [92, 94, 136, 252, 258, 360, 361, 409, 461, 464, 471, 476, 478, 479], "minvalu": 92, "maxvalu": 92, "minsiz": 92, "wood": [92, 118], "metal": 92, "plastic": 92, "quantiti": [92, 183, 272, 290, 316, 338, 461, 465, 471], "metl": 92, "toolset": [92, 258, 289, 464, 479], "deeper": [92, 107, 164, 180, 190, 304, 342, 349], "behind": [92, 108, 173, 190, 281, 306, 322, 354, 380, 391, 424, 457, 459, 462, 479], "everyday": [92, 222], "find_name_in_mro": 92, "object_getattribut": 92, "cls_var": 92, "descr_get": 92, "bypass": [92, 155, 223, 232, 290, 342, 349, 350, 385, 421, 424, 426, 428, 470, 479], "getattr_hook": 92, "slot_tp_getattr_hook": 92, "type_getattro": [92, 479], "super_getattro": 92, "skeleton": 92, "conn": [92, 124, 157, 163, 166, 239, 280, 296, 326, 334, 338, 361, 463, 471, 474], "movi": [92, 145, 337, 382, 469, 470], "director": [92, 145, 391], "music": [92, 157, 422], "artist": 92, "genr": 92, "entertain": [92, 149], "war": [92, 469], "georg": [92, 106, 258, 442, 463, 464, 465, 467, 468, 471, 472, 474, 475, 479], "luca": [92, 232, 473, 474, 479], "jaw": [92, 145], "1975": [92, 145, 259, 337, 340, 445, 477], "steven": [92, 459, 463, 465, 470, 471, 473, 474, 475, 477, 479], "spielberg": [92, 145], "countri": [92, 240, 263, 338, 341, 409, 462], "road": [92, 241], "john": [92, 105, 107, 157, 172, 187, 365, 409, 436, 437, 438, 459, 462, 463, 464, 465, 468, 469, 472, 475, 479], "denver": [92, 479], "abram": 92, "excit": [92, 458, 460], "prepackag": 92, "succinct": [92, 258, 382], "fget": [92, 222, 381], "fset": [92, 222, 381], "fdel": [92, 222, 381], "getx": [92, 222], "__x": 92, "delx": [92, 222], "descrobject": 92, "prop": [92, 457, 470, 479], "intervent": [92, 365, 421], "spreadsheet": [92, 461], "b10": 92, "recalcul": [92, 120, 264, 421], "recalc": 92, "_valu": [92, 193, 202], "seamless": 92, "classobject": [92, 469, 479], "__func__": [92, 110, 252, 341, 424, 436, 464, 465], "__self__": [92, 252, 341, 424, 436, 464, 479], "func_descr_get": 92, "funcobject": [92, 469, 479], "0x00c45070": 92, "0x00b18c90": 92, "0x1012e1f98": 92, "recap": 92, "chart": [92, 106], "experiment": [92, 244, 268, 365, 367, 406, 430, 452, 461, 466, 467, 469, 470, 471, 476, 477, 479], "averag": [92, 139, 258, 290, 305, 315, 341, 345, 363, 372, 378, 430, 447, 466, 473, 477, 479], "conceptu": [92, 94, 99, 118, 139, 191, 193, 197, 202, 250, 342, 382, 396, 428, 476], "dataset": [92, 164, 223, 462, 477, 479], "9332": 92, "unexcit": 92, "pystaticmethod_typ": 92, "dict_fromkey": 92, "dictobject": [92, 463, 479], "pyclassmethod_typ": 92, "vehicl": 92, "id_numb": 92, "id_nubm": 92, "vye483814lqex": 92, "_dept": 92, "dept": [92, 436, 467, 471], "botani": 92, "watney": 92, "pirat": 92, "mar": [92, 93, 94, 180, 340, 430, 437, 460, 464], "48": [92, 232, 340, 341, 378, 394, 468, 479], "152": 92, "flyweight": 92, "35": [92, 94, 183, 222, 315, 340, 399, 431, 461, 462, 463, 464, 470, 471, 475, 477, 478, 479], "m1": [92, 258, 344, 469], "100_000": [92, 340], "faith": [92, 205, 342, 349], "_slotvalu": 92, "clsname": 92, "descr_new": 92, "member_get": 92, "member_set": 92, "member_delet": 92, "member_repr": 92, "mcls": [92, 378], "pytypereadi": 92, "add_method": 92, "slot_nam": 92, "object_new": 92, "empty_slot": 92, "_pyobject_genericsetattrwithdict": 92, "0x7fb5d302f9d0": 92, "slot_valu": 92, "xz": [92, 267, 329, 354, 382, 471, 472, 474, 479], "week": [93, 148, 180, 263, 362, 458, 477, 479], "upper_cas": [93, 479], "from_dat": 93, "plot": [93, 462], "chore": [93, 458], "first_week_day": 93, "weekend": 93, "96": [93, 97, 108, 256, 341, 378, 475, 476, 477, 478, 479], "chores_for_ethan": 93, "dish": [93, 341], "show_chor": 93, "alias_for_squar": 93, "unimport": [93, 208], "autonam": 93, "north": [93, 180, 372, 380, 465, 467, 479], "south": [93, 155, 316, 372, 380, 464, 467], "east": [93, 180, 362, 372, 380, 383, 436, 462], "west": [93, 180, 362, 372, 380, 436, 467], "__members__": [93, 208, 460, 466], "recreat": [93, 155, 187, 295, 334, 390, 395, 398, 424, 472, 476, 479], "vast": [93, 327, 477, 478, 479], "mood": 93, "funki": [93, 164], "favorite_mood": 93, "enumnam": 93, "morecolor": 93, "pink": [93, 380], "some_behavior": 93, "creaturedatamixin": 93, "leg": 93, "creatur": 93, "beetl": 93, "dog": [93, 103, 157, 316, 436, 471, 474], "test_enum": 93, "fruit": [93, 304, 424, 438], "tomato": [93, 337], "picklabl": [93, 163, 252, 280, 296, 474, 479], "myenum": 93, "pickle_by_enum_nam": 93, "ant": [93, 147], "bee": 93, "closer": [93, 328, 386, 396, 465, 466, 474, 479], "somedata": [93, 232, 301], "newenumnam": 93, "chartreus": 93, "sea_green": 93, "rosemari": 93, "rwx": [93, 329], "floatenum": 93, "_value_": [93, 208], "px": [93, 272], "km": [93, 340], "vx": 93, "vy": 93, "member_nam": [93, 208, 468], "_name_": [93, 208], "_order_": [93, 208, 479], "enumclass": [93, 479], "earth": [93, 337, 340, 437], "jupit": [93, 340], "mercuri": [93, 340, 471, 473, 479], "neptun": [93, 340], "saturn": [93, 340], "uranus": [93, 340], "venus": [93, 340, 437], "radius": [93, 153, 272, 337, 380], "surface_grav": 93, "compris": [93, 120, 285, 299, 345, 426, 431, 432, 464], "_convert_": [93, 479], "some_enum_var": 93, "renumb": [93, 245, 424], "autonumb": 93, "swatch": 93, "panton": 93, "auburn": 93, "3497": 93, "1246": 93, "bleached_cor": 93, "grade": [93, 105, 145, 222, 340, 341, 380, 461, 479], "grene": 93, "303e": 93, "4397e6": 93, "869e": 93, "0518e6": 93, "976e": 93, "37814e6": 93, "421e": 93, "3972e6": 93, "9e": 93, "27": [93, 108, 180, 233, 254, 290, 316, 334, 338, 340, 363, 374, 431, 442, 445, 458, 461, 467, 468, 471, 472, 476, 477, 478, 479], "1492e7": 93, "688e": 93, "0268e7": 93, "686e": 93, "5559e7": 93, "024e": 93, "4746e7": 93, "kilogram": 93, "gravit": [93, 380], "m3": [93, 362, 469], "kg": 93, "67300e": 93, "6378140": 93, "802652743337129": 93, "367": 93, "day_": 93, "day_0": 93, "day_1": [93, 263], "day_365": 93, "365": [93, 180, 338, 340, 362], "day_366": 93, "tour": [94, 460, 461], "subclaus": 94, "ml": [94, 461], "ocaml": 94, "haskel": [94, 258, 437, 458, 461], "emphas": [94, 190, 281, 423, 479], "discourag": [94, 103, 137, 155, 178, 191, 222, 247, 285, 316, 331, 338, 341, 354, 358, 424, 460, 463, 479], "puriti": [94, 390], "constraint": [94, 120, 183, 188, 208, 264, 290, 296, 304, 341, 382, 390, 423, 425, 427, 428, 463, 464, 466, 470, 479], "conclud": [94, 99, 103], "rigor": 94, "aros": 94, "onward": [94, 100, 183, 218, 252, 330, 337, 341, 479], "impract": 94, "enorm": 94, "daili": [94, 460, 479], "proven": [94, 190, 380, 461], "synthes": [94, 190, 382], "jan": [94, 180, 338, 345, 401, 460, 465, 468, 469, 471, 474, 475, 476, 477, 478, 479], "apr": [94, 451, 460, 463], "jun": [94, 220, 362, 460], "jul": [94, 220, 460, 471], "nov": [94, 180, 206, 220, 242, 338, 362, 460, 475], "itali": 94, "rome": 94, "franc": 94, "pari": [94, 103, 421, 445], "washington": [94, 245], "dc": [94, 258, 409, 463], "genexp": [94, 427], "concis": [94, 97, 164, 289, 337, 424, 458, 462, 471, 475, 479], "line_list": 94, "stripped_it": 94, "stripped_list": 94, "sequence1": [94, 458], "condition1": 94, "expr2": [94, 426, 458], "sequence2": [94, 458], "condition2": 94, "expr3": [94, 426], "sequence3": 94, "condition3": 94, "exprn": [94, 458], "sequencen": [94, 458], "conditionn": 94, "obj_tot": 94, "list_all_object": [94, 462], "expr1": [94, 426, 458], "seq1": [94, 288, 458], "doubtless": [94, 459, 460, 461], "weren": [94, 103, 120, 232, 459, 460, 461, 462, 463, 465], "generate_int": [94, 460, 461], "gen": [94, 252, 258, 426, 460, 461, 471, 474, 479], "messier": [94, 103, 460, 461, 465], "test_gener": [94, 460, 461, 479], "inord": [94, 460, 461], "queen": [94, 315, 316, 460, 461], "nxn": [94, 460, 461], "board": [94, 98, 174, 460, 461], "threaten": [94, 460, 461], "knight": [94, 106, 304, 422, 438, 442, 460, 461, 477], "rout": [94, 107, 209, 381, 403, 448, 460, 461, 465, 473], "chessboard": [94, 460, 461], "messi": [94, 461, 465], "becam": [94, 147, 210, 290, 332, 349, 362, 382, 458, 464, 465, 474, 477, 478, 479], "cumul": [94, 215, 223, 272, 305, 340, 376, 378, 451, 463, 471, 473, 474, 479], "itera": 94, "iterb": 94, "sentenc": [94, 223, 316, 360, 460, 461, 464, 479], "fragment": [94, 139, 311, 341, 390, 391, 408, 409, 463, 465, 471, 472, 479], "is_even": [94, 415], "verb": [94, 290], "10000": [94, 305, 330, 363, 380, 461, 472, 479], "rand_list": 94, "769": 94, "7953": 94, "9828": 94, "6431": 94, "8442": 94, "9878": 94, "6213": 94, "2207": 94, "shortest": [94, 192, 222, 258, 458, 463, 465, 466, 467, 471], "broad": [94, 180, 289, 382, 390, 460, 463, 465, 472, 479], "interv": [94, 99, 174, 180, 244, 266, 290, 305, 315, 330, 340, 349, 358, 361, 362, 372, 380, 462, 464, 471, 475, 477, 479], "elem": [94, 145, 157, 222, 223, 258, 341, 409, 438, 463, 465, 469, 471], "endless": [94, 258, 458, 460, 462, 463, 479], "rubi": [94, 340, 448], "less_than_10": 94, "aba": 94, "relax": [94, 180, 241, 471, 478, 479], "key_func": 94, "city_list": 94, "decatur": 94, "huntsvill": 94, "selma": 94, "anchorag": 94, "ak": 94, "nome": 94, "flagstaff": 94, "az": 94, "phoenix": 94, "tucson": 94, "city_st": 94, "kwarg1": [94, 463], "value1": [94, 164, 463, 478], "kwarg2": [94, 463], "value2": [94, 164, 463, 478], "server_log": [94, 463], "initial_valu": [94, 255], "abbc": 94, "stripped_lin": 94, "existing_fil": 94, "file_list": 94, "anonym": [94, 173, 220, 265, 275, 290, 380, 423, 426, 458, 471, 479], "adder": 94, "print_assign": 94, "multiway": 94, "disentangl": 94, "heck": 94, "essenc": 94, "disagre": [94, 374, 458], "assist": [94, 106, 261, 275, 281, 356, 381, 395, 424, 460, 461, 462, 463, 464, 465, 476, 479], "draft": [94, 106, 149, 268, 293, 406, 458, 459, 460, 461, 462, 463, 464, 465, 470, 475, 476, 479], "ian": [94, 403, 469], "bick": [94, 403], "nick": [94, 97, 102, 106, 321, 424, 460, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 479], "coghlan": [94, 97, 102, 106, 321, 462, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 479], "efford": 94, "jewett": [94, 462, 464], "mike": [94, 460, 462, 463, 464, 469, 479], "krell": 94, "leandro": 94, "lameiro": 94, "jussi": 94, "salmela": 94, "collin": [94, 464, 465, 474, 479], "winter": [94, 222, 464, 465], "blake": [94, 232], "winton": 94, "typo": [94, 149, 382, 385, 426, 460, 479], "tutor": 94, "harold": [94, 342], "abelson": 94, "gerald": 94, "jay": [94, 459, 471, 479], "sussman": 94, "mitpress": 94, "mit": [94, 248, 304, 422], "sicp": 94, "classic": [94, 164, 181, 200, 227, 268, 365, 380, 386, 445, 460, 461, 463, 465, 466, 471, 479], "textbook": [94, 103, 316, 463, 464], "scienc": [94, 103, 340, 361, 474], "defmacro": 94, "rambl": 94, "wikipedia": [94, 106, 157, 232, 268, 338, 344, 380, 463, 471, 472, 479], "functional_program": 94, "partial_appl": 94, "curri": 94, "gnosi": 94, "cx": [94, 258, 461], "tpip": 94, "mertz": 94, "ibm": [94, 155, 174, 183, 344, 418, 461, 463, 472, 479], "developerwork": 94, "malcolm": [96, 316, 465, 471, 475, 479], "ukasz": [96, 285, 471, 473, 474, 475, 476, 477, 478, 479], "langa": [96, 285, 471, 473, 474, 475, 476, 477, 478, 479], "yum": 96, "sdt": 96, "sudo": [96, 100], "29564": [96, 479], "python18035": 96, "_pyeval_evalframedefault": [96, 101, 479], "29565": 96, "dtrace_function_entri": 96, "29566": [96, 479], "29567": 96, "dtrace_function_return": 96, "29568": [96, 479], "29569": 96, "29570": 96, "29571": [96, 479], "maybe_dtrace_lin": 96, "stapsdt": 96, "readelf": [96, 479], "0000000000000000": 96, "00308d78": 96, "libpython3": [96, 479], "3dm": 96, "00365b68": 96, "0x00000254": 96, "0x00000020": [96, 173], "0x00000010": 96, "nt_gnu_abi_tag": 96, "0x00000274": 96, "0x00000024": 96, "0x00000014": 96, "nt_gnu_build_id": 96, "bitstr": 96, "df924a2b08a7e89f6e11251d4602022977af2670": 96, "0x002d6c30": 96, "0x00000144": 96, "0x00000031": 96, "nt_stapsdt": 96, "gc__start": 96, "0x00000000004371c3": 96, "0x0000000000630ce2": 96, "0x00000000008d6bf6": 96, "ebx": 96, "0x00000030": 96, "gc__done": 96, "0x00000000004374e1": 96, "0x00000000008d6bf8": 96, "rax": 96, "0x00000045": 96, "function__entri": 96, "0x000000000053db6c": 96, "0x00000000008d6be8": 96, "rbp": 96, "r12": 96, "eax": 96, "0x00000046": 96, "function__return": 96, "0x000000000053dba8": 96, "0x00000000008d6bea": 96, "strateg": 96, "copyinstr": 96, "probenam": 96, "arg0": [96, 290], "call_stack": 96, "156641360502280": 96, "156641360518804": 96, "156641360532797": 96, "function_3": 96, "156641360546807": 96, "156641360563367": 96, "156641360578365": 96, "156641360591757": 96, "156641360605556": 96, "156641360617482": 96, "156641360629814": 96, "156641360642285": 96, "156641360656770": 96, "156641360669707": 96, "156641360687853": 96, "function_4": 96, "156641360700719": 96, "156641360719640": 96, "function_5": 96, "156641360732567": 96, "156641360747370": 96, "user_str": 96, "thread_ind": 96, "stap": 96, "stp": 96, "11408": 96, "8274": 96, "_abcol": 96, "11414": 96, "425": [96, 238, 478, 479], "11418": 96, "490": 96, "11424": 96, "11428": 96, "426": [96, 238], "11433": 96, "libpython": [96, 452, 468, 469, 477, 479], "6dm": 96, "begun": [96, 361, 461, 462], "import__find__load__start": [96, 476], "import__find__load__don": [96, 476], "find_and_load": 96, "frameptr": 96, "arg4": 96, "probepoint": 96, "fn_call": 96, "033": [96, 174, 479], "1h": [96, 465], "6s": [96, 100, 187], "80s": 96, "30s": 96, "foreach": 96, "6d": [96, 100], "moodi": [97, 472, 473, 474], "192": [97, 100, 240, 256, 264, 342], "db8": [97, 256], "3221225985": [97, 256], "42540766411282592856903984951653826561": 97, "3221225984": 97, "42540766411282592856903984951653826560": 97, "firewal": [97, 244, 280, 405, 459, 472], "router": [97, 256, 334], "hybrid": [97, 180, 473], "ipv": [97, 479], "intuit": [97, 98, 99, 103, 149, 183, 187, 258, 371, 426, 458, 459, 460, 473], "addr4": 97, "addr6": [97, 474], "host4": 97, "host6": 97, "net4": 97, "net6": 97, "4294967296": [97, 256, 466], "254": [97, 479], "ffff": [97, 256, 458, 472], "0db8": 97, "0001": [97, 180, 431, 476, 479], "explos": [97, 409], "lend": [97, 460], "agnost": [97, 341, 382], "168": [97, 100, 240, 256, 264, 342], "octet": [97, 197, 203, 256, 302, 342, 390, 394, 479], "concern": [97, 99, 108, 124, 131, 155, 164, 266, 296, 311, 338, 358, 386, 422, 459, 460, 465, 475, 476, 477, 478, 479], "safer": [98, 190, 296, 297, 461, 462, 470, 479], "evolv": [98, 254, 265, 428], "granular": [98, 100, 247, 290, 349, 479], "old_binascii": 98, "stringent": [98, 473], "qwertyuiop": 98, "boo": 98, "circuit": [98, 341, 438], "led": [98, 164, 290, 459, 472, 475, 479], "price": [98, 157, 218, 316, 408, 445, 462, 463, 474, 477, 479], "xxlimit": [98, 479], "my_struct": 98, "pay": [98, 100, 103, 190, 457, 473], "myattribut": 98, "rewrit": [98, 102, 120, 197, 215, 290, 374, 458, 461, 463, 465, 466, 474, 477, 479], "unintent": [98, 100, 112, 264, 345, 471, 479], "pickleabl": [98, 266, 479], "blueprint": 98, "py_tp_travers": 98, "tedious": [98, 106, 108, 120, 126, 149, 380, 385, 458, 463, 477], "roadblock": 98, "get_defining_class": 98, "get_type_of_self": 98, "example_method": 98, "example_method_doc": 98, "my_method": 98, "module_def": 98, "capi": [98, 465], "iron": 98, "vinay": [99, 100, 461, 462, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478], "sajip": [99, 100, 461, 462, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478], "vinay_sajip": [99, 100], "dove": [99, 100], "investig": [99, 341], "confirm": [99, 186, 294, 382, 391, 396, 457, 479], "serious": [99, 124, 190, 210, 232, 385], "told": [99, 382, 395, 424, 461], "resund": 99, "malm": 99, "threshold": [99, 100, 264, 341, 463], "loglevel": 99, "numeric_level": 99, "afresh": [99, 166, 264], "mylib": [99, 384], "do_someth": [99, 100, 149, 338, 384, 426], "levelnam": [99, 100, 264, 265, 266, 280, 462, 465, 471], "2010": [99, 100, 106, 264, 329, 342, 349, 386, 465, 471], "41": [99, 258, 304, 315, 316, 340, 415, 447, 464, 478, 479], "iso8601": [99, 415], "3339": 99, "datefmt": [99, 100, 264, 265], "46": [99, 157, 315, 341, 448, 468, 477, 478, 479], "am": [99, 100, 180, 263, 296, 362, 430], "invest": 99, "favourit": 99, "beverag": 99, "hereaft": [99, 108, 305], "diagram": [99, 190, 222, 335, 460], "threefold": 99, "baz": [99, 100, 101, 118, 164, 244, 247, 259, 264, 265, 280, 290, 308, 316, 358, 381, 384, 385, 386, 403, 428, 432], "bam": [99, 264], "descend": [99, 105, 120, 160, 193, 202, 252, 264, 280, 293, 305, 339, 365, 372, 384, 406, 407, 409, 463, 465, 479], "ancestor": [99, 100, 174, 264, 265, 280, 293, 338, 372, 385, 386, 409, 424, 461, 479], "deconfigur": 99, "fmt": [99, 100, 180, 198, 256, 264, 292, 301, 358, 448, 464, 479], "millisecond": [99, 124, 174, 180, 244, 264, 325, 372, 380, 402, 471, 475, 478, 479], "tack": 99, "simple_exampl": [99, 100], "simple_logging_modul": 99, "2005": [99, 100, 180, 268, 422, 462, 463, 464], "03": [99, 100, 180, 183, 338, 342, 362, 447, 461, 463, 479], "618": [99, 258, 468, 479], "620": [99, 462], "697": [99, 470, 479], "773": 99, "conf": [99, 100, 103, 293, 448, 461, 471, 479], "simpleexampl": [99, 100], "consolehandl": 99, "simpleformatt": 99, "logger_root": [99, 265], "logger_simpleexampl": 99, "handler_consolehandl": 99, "formatter_simpleformatt": 99, "simple_logging_config": 99, "38": [99, 100, 187, 222, 264, 334, 378, 461, 468, 477, 478, 479], "977": [99, 285], "979": 99, "56": [99, 101, 180, 183, 222, 255, 280, 334, 340, 438, 440, 471, 474, 479], "054": 99, "055": 99, "130": [99, 256, 340, 465], "noncod": 99, "disable_existing_logg": [99, 100, 265], "mypackag": 99, "myhandl": [99, 100, 265], "superset": [99, 303, 341, 426, 458, 461, 479], "yaml": [99, 118, 248, 259, 265, 465, 468, 471], "ext": [99, 100, 155, 188, 197, 265, 273, 291, 294, 448, 461, 462, 471, 479], "raiseexcept": [99, 100, 264, 266, 471], "resort": [99, 181, 263, 264, 460], "absenc": [99, 107, 113, 252, 262, 264, 316, 338, 361, 403, 424, 479], "organis": [99, 100, 264], "orgnam": 99, "advis": [99, 166, 173, 245, 280, 285, 290, 361, 396, 421, 422, 424, 426, 471, 477, 479], "prerog": 99, "audienc": [99, 304, 396, 430, 461, 466], "interfer": [99, 130, 164, 223, 263, 294, 479], "deliv": [99, 107, 131, 180, 222, 325, 330, 332, 372, 386, 426, 464, 479], "desk": 99, "staff": [99, 329, 354], "convinc": [99, 263], "xp": [99, 266, 372, 461, 474], "criteria": [99, 172, 245, 264, 305], "reopen": [99, 266, 296, 337, 355, 356, 465, 475, 479], "provis": [99, 299, 338, 422, 426], "trailer": [99, 290, 420, 427, 479], "swallow": [99, 100, 137, 448, 458, 465, 471, 477, 479], "misconfigur": [99, 244, 479], "altogeth": [99, 100, 149, 210, 418, 424, 471], "expensive_func1": 99, "expensive_func2": 99, "deepli": [99, 358, 385, 405, 431, 458, 464, 479], "recomput": [99, 325, 326, 330, 362, 473, 479], "_srcfile": 99, "logthread": 99, "logprocess": 99, "logmultiprocess": 99, "logasynciotask": 99, "somelogg": 100, "auxiliary_modul": 100, "spam_appl": 100, "fh": 100, "auxiliari": [100, 258, 471, 479], "some_funct": [100, 385, 386], "module_logg": 100, "47": [100, 180, 206, 258, 315, 316, 420, 438, 447, 464, 468, 479], "663": 100, "665": 100, "668": [100, 329], "669": [100, 157, 479], "670": [100, 469], "671": 100, "672": [100, 218], "hi": [100, 145, 173, 301, 341, 365, 382, 479], "relativecr": [100, 264], "threadnam": [100, 264], "mainthread": [100, 479], "505": [100, 107, 238], "1007": 100, "1507": [100, 464], "1508": 100, "2258": 100, "2512": 100, "3009": 100, "3013": 100, "3515": 100, "3761": 100, "4017": 100, "4513": 100, "4518": 100, "quota": [100, 209, 245], "dormant": 100, "12s": 100, "8s": [100, 264, 265, 465, 471], "jackdaw": 100, "quartz": 100, "logger1": 100, "area1": 100, "logger2": 100, "area2": 100, "zephyr": 100, "blow": [100, 149, 289, 471, 479], "vex": [100, 459], "daft": 100, "jump": [100, 188, 190, 244, 267, 294, 380, 424, 437, 461, 463, 466, 469, 475, 476, 479], "zebra": [100, 157, 296], "jail": 100, "zesti": 100, "vixen": 100, "quack": [100, 464], "wizard": [100, 460], "warnings_and_below": 100, "filter_mak": 100, "levelno": [100, 264], "9999": [100, 101, 131, 180, 244, 335, 471, 476, 479], "data_to_send": 100, "culprit": 100, "sluggish": 100, "poor": [100, 147, 302, 305, 316, 459, 460, 479], "infrastructur": [100, 155, 338, 396, 464, 465, 473, 476, 479], "capac": [100, 174, 266, 290, 340, 361, 463, 465], "precaut": 100, "eat": [100, 272, 479], "que": 100, "queue_handl": 100, "respect_handler_level": [100, 266, 474, 479], "rootlogg": 100, "default_tcp_logging_port": [100, 265], "unformat": [100, 259, 316], "logrecordstreamhandl": 100, "slen": 100, "handlelogrecord": 100, "lognam": [100, 226, 290], "wast": [100, 106, 466, 479], "bandwidth": [100, 106, 437, 465, 468], "logrecordsocketreceiv": 100, "serve_until_stop": 100, "rd": [100, 338, 341], "wr": [100, 459, 479], "5d": 100, "15s": [100, 264, 265, 465, 471], "69": [100, 362, 409, 468], "supervisor": 100, "gist": 100, "bone": [100, 455], "bash": [100, 153, 293, 328, 395, 443, 449, 479], "ensure_app": 100, "log_listen": 100, "webapp": 100, "unzip": [100, 108, 222, 417, 419, 461, 479], "bottl": [100, 173, 464], "supervisorctl": 100, "tweak": [100, 289, 386, 459, 462, 475, 479], "customadapt": 100, "connid": 100, "some_conn_id": 100, "threadloc": 100, "contextfilt": 100, "inject": [100, 124, 135, 264, 269, 328, 337, 345, 354, 382, 405, 451, 463, 474, 479], "sheila": 100, "ips": [100, 479], "231": 100, "5s": 100, "a1": [100, 225, 479], "a2": [100, 225, 316], "lvl": 100, "lvlname": 100, "webapplib": 100, "11s": 100, "appnam": [100, 266], "9s": 100, "4s": 100, "ctx_request": 100, "ctx_appnam": 100, "injectingfilt": 100, "num_request": 100, "adhf": 100, "ap": 100, "aa": [100, 157, 258, 316, 438, 465], "app1": 100, "app2": 100, "49": [100, 242, 258, 264, 280, 378, 438, 442, 445, 468, 477, 478, 479], "wc": 100, "153": 100, "147": [100, 477], "600": [100, 180, 475, 479], "issue3770": 100, "listener_configur": 100, "mptest": 100, "processnam": [100, 264, 280], "10s": [100, 344], "listener_process": 100, "worker_configur": 100, "worker_process": 100, "orchestr": 100, "logger_thread": 100, "qh": 100, "ham": [100, 157, 167, 187, 222, 252, 276, 318, 426, 428, 437, 474], "egg": [100, 157, 172, 187, 215, 222, 223, 248, 255, 293, 304, 316, 318, 327, 341, 345, 354, 377, 381, 382, 385, 386, 391, 409, 418, 428, 437, 439, 442, 445, 458, 479], "mplog": 100, "foofil": 100, "wp": 100, "lp": [100, 267, 469], "max_work": [100, 124, 163, 471, 479], "log_filenam": 100, "logging_rotatingfile_exampl": 100, "my_logg": 100, "mylogg": [100, 264], "maxbyt": [100, 265, 266, 465], "backupcount": [100, 265, 266, 465], "logfil": [100, 149], "bf": [100, 316, 447], "df": [100, 465], "924": 100, "494": [100, 475], "833": 100, "recal": [100, 244, 382], "bracemessag": 100, "dollarmessag": 100, "unwieldi": 100, "palat": 100, "brethren": 100, "2f": [100, 132, 218, 342, 390, 440, 464, 465, 467, 479], "penalti": [100, 178, 213, 458, 471], "trip": [100, 120, 147, 240, 374, 464, 466, 467, 479], "sugar": [100, 166, 222, 241, 247, 258, 337, 437, 466], "xxxmessag": 100, "styleadapt": 100, "_log": [100, 264], "interrog": [100, 202, 386], "old_factori": [100, 264], "record_factori": [100, 264], "custom_attribut": [100, 264], "0xdecafbad": [100, 264], "born": [100, 341], "zmq": 100, "pyzmq": 100, "sock": [100, 103, 104, 124, 131, 134, 239, 305, 326, 334, 335, 338, 358, 471, 474, 476, 479], "pub": [100, 122, 220, 329, 456], "5556": 100, "zeromqsockethandl": [100, 479], "send_json": 100, "socktyp": [100, 266, 334, 358, 465], "zeromqsocketlisten": [100, 479], "setsockopt_str": 100, "recv_json": 100, "django": [100, 157, 294, 299, 385, 465, 472], "specialfilt": 100, "mail_admin": 100, "adminemailhandl": 100, "myproject": [100, 384], "runnabl": [100, 124, 395, 479], "gz": [100, 108, 215, 231, 273, 293, 329, 354, 395, 420, 449, 456, 458, 463, 470, 471, 479], "f_in": [100, 231], "f_out": [100, 231], "rh": 100, "six": [100, 102, 169, 180, 222, 223, 296, 315, 316, 337, 372, 390, 394, 418, 464, 471, 473, 476, 477, 479], "zcat": 100, "02": [100, 101, 108, 180, 183, 264, 280, 329, 362, 419, 447, 458, 460, 461, 462, 471, 475, 479], "767": [100, 402], "996": 100, "997": 100, "998": 100, "stop_ev": 100, "initialis": [100, 240, 266, 321, 349, 385, 424, 451, 473, 475, 479], "heterogen": [100, 341, 466, 479], "bunch": [100, 126, 197, 204, 289, 458, 459, 460, 461, 464, 479], "config_initi": 100, "config_work": 100, "config_listen": 100, "hang": [100, 104, 107, 133, 280, 325, 330, 358, 461, 471, 479], "5424": [100, 266], "compliant": [100, 110, 124, 144, 180, 191, 192, 193, 195, 198, 199, 200, 204, 205, 206, 212, 232, 259, 268, 308, 328, 337, 362, 390, 403, 405, 422, 426, 460, 463, 465, 470, 472, 475, 476, 479], "ufeffunicod": 100, "feff": [100, 106, 155], "xef": [100, 144, 390, 431], "xbb": [100, 431], "xbf": [100, 431], "readili": [100, 255, 280, 355, 473, 479], "parseabl": [100, 300, 328], "serialis": [100, 155, 321, 409, 479], "structuredmessag": 100, "fnum": 100, "specialis": [100, 107, 337, 341, 382, 427, 479], "unicode_escap": [100, 155], "set_valu": 100, "snowman": [100, 470], "u2603": 100, "owned_file_handl": 100, "creator": [100, 280, 290, 329, 407, 418, 419, 424, 430, 479], "puls": 100, "chowntest": 100, "resid": [100, 108, 197, 227, 268, 290, 310, 319, 339, 428, 458, 479], "orthogon": 100, "cater": [100, 190, 265, 266], "myfilt": [100, 471], "noshow": 100, "onelineexceptionformatt": 100, "exc_text": [100, 264, 266, 479], "configure_log": 100, "2015": [100, 180, 323, 452, 474, 479], "07": [100, 180, 264, 268, 316, 342, 362, 374, 421, 463, 464, 475, 478, 479], "logtest7": 100, "nzerodivisionerror": 100, "simplist": [100, 385], "render": [100, 106, 124, 186, 195, 198, 335, 372, 377, 407, 424, 457, 461, 464, 465, 477, 479], "audibl": [100, 174], "speech": [100, 292], "tts": 100, "frequenc": [100, 115, 362, 397, 402, 411, 464], "swamp": 100, "spoken": 100, "espeak": 100, "ttshandler": 100, "femal": [100, 340], "voic": [100, 333, 460], "s150": 100, "ven": 100, "f3": [100, 118], "goodby": [100, 138, 220, 296, 365, 439], "parameteris": [100, 382, 469], "log_if_error": 100, "target_handl": 100, "flush_level": 100, "flushlevel": [100, 266], "write_lin": 100, "decorated_foo": 100, "har": [100, 153, 384, 471, 473, 479], "bufferingsmtphandl": 100, "mailhost": [100, 265, 266], "password": [100, 107, 170, 226, 230, 232, 245, 266, 280, 283, 285, 290, 302, 307, 323, 332, 336, 338, 355, 357, 390, 391, 415, 418, 463, 464, 465, 472, 473, 474, 475, 479], "mailport": 100, "nto": [100, 332], "nsubject": 100, "addresse": [100, 266], "102": [100, 183, 238, 258, 340, 465, 471, 477, 478], "eleven": 100, "eleventh": 100, "utcformatt": 100, "console1": 100, "console2": 100, "501": [100, 107, 238, 242, 290, 471], "sat": [100, 148, 180, 338, 340], "loggingcontext": 100, "old_level": 100, "ev": [100, 338], "logctx": 100, "generalis": 100, "scriptnam": 100, "subpars": [100, 118, 471, 476, 479], "start_cmd": 100, "add_pars": [100, 118, 471], "stop_cmd": 100, "restart_cmd": 100, "log_level": 100, "plural": [100, 227, 465, 476, 479], "ui": [100, 403, 457, 458, 479], "pyside2": 100, "pyqt5": 100, "qthandler": 100, "qthread": 100, "qtcore": 100, "qtgui": 100, "qtwidget": 100, "pyqtsign": 100, "pyqtslot": 100, "qobject": 100, "slotfunc": 100, "ctname": 100, "currentthread": [100, 187, 361, 468, 479], "objectnam": 100, "kick": 100, "qthreadnam": 100, "isinterruptionrequest": 100, "1f": [100, 315, 378, 479], "qwidget": 100, "orang": [100, 157, 288, 380, 438, 479], "textedit": 100, "te": 100, "qplaintextedit": 100, "monospac": [100, 244, 360], "qfont": 100, "nosuchfont": 100, "setstylehint": 100, "setfont": 100, "setreadon": 100, "pb": [100, 267], "qpushbutton": 100, "work_button": 100, "log_button": 100, "clear_button": 100, "update_status": 100, "abouttoquit": 100, "force_quit": 100, "lay": [100, 212], "qvboxlayout": 100, "addwidget": 100, "setfixeds": 100, "900": [100, 445], "click": [100, 149, 174, 186, 244, 290, 354, 380, 395, 422, 457, 472, 475, 476, 477, 479], "manual_upd": 100, "clear_display": 100, "seten": 100, "worker_thread": 100, "setobjectnam": 100, "workerthread": 100, "movetothread": 100, "kill_thread": 100, "requestinterrupt": 100, "isrun": 100, "appendhtml": 100, "qapplic": 100, "exec_": 100, "2009": [100, 180, 316, 337, 386, 422, 459, 465, 467], "3164": 100, "hail": 100, "2003": [100, 180, 264, 409, 419, 447, 461, 464, 479], "widespread": [100, 102, 199, 430, 459, 471], "sysloghandler5424": 100, "tz_offset": 100, "msgid": [100, 197, 206], "has_offset": 100, "hrs": 100, "hostnam": [100, 107, 124, 134, 140, 149, 155, 181, 206, 220, 239, 245, 256, 266, 280, 285, 290, 302, 310, 332, 334, 338, 390, 391, 415, 445, 458, 461, 465, 470, 471, 472, 473, 476, 479], "procid": 100, "sdata": 100, "structured_data": 100, "sd": 100, "sdid": 100, "dv": [100, 358], "specir": 100, "12345": [100, 173, 222, 436, 438, 461, 467, 475, 479], "bozz": [100, 265], "fizz": 100, "buzz": 100, "54321": [100, 438], "rab": 100, "zab": 100, "zzif": 100, "loggerwrit": 100, "info_fp": 100, "debug_fp": 100, "merci": [100, 424], "slghtli": 100, "bufferingloggerwrit": 100, "52": [100, 101, 103, 137, 180, 272, 315, 316, 338, 340, 342, 378, 438, 440, 462, 465, 479], "unhelp": [100, 458, 479], "garbl": [100, 479], "circumv": [100, 405], "pointless": [100, 479], "pablo": [101, 465, 468, 469, 470, 474, 476, 477, 478, 479], "galindo": [101, 468, 469, 470, 476, 477, 478, 479], "vibrant": 101, "ecosystem": [101, 296], "interpos": 101, "teach": [101, 227, 337, 460, 477, 479], "have_perf_trampolin": 101, "1000000": [101, 164, 180, 218, 222, 280, 305, 363, 437, 465, 475, 479], "hertz": [101, 402], "my_script": 101, "analyz": [101, 102, 172, 276, 296, 297, 316, 328, 338, 378, 382, 422, 431, 463, 464, 465, 471, 479], "91": [101, 340], "08": [101, 180, 206, 242, 264, 338, 362, 421, 478, 479], "_start": 101, "90": [101, 102, 108, 145, 153, 258, 280, 315, 340, 380, 477], "71": [101, 378, 470, 479], "__libc_start_main": 101, "88": [101, 180, 340, 378, 474], "pymain_run_python": [101, 479], "constprop": 101, "_pyrun_anyfileobject": 101, "_pyrun_simplefileobject": 101, "run_mod": 101, "54": [101, 137, 315, 329, 340, 419, 461, 468, 469], "65": [101, 285, 315, 329, 340, 341, 445, 458, 464, 465, 474, 479], "_pyeval_vector": [101, 479], "_pylong_add": 101, "97": [101, 106, 120, 222, 275, 341, 465, 471], "_pyobject_malloc": [101, 479], "_py_eval_evalframedefault": 101, "58": [101, 155, 315, 340, 342, 479], "89": [101, 145, 183, 223, 334, 340, 437, 445, 446, 467, 471], "86": [101, 170, 218, 340, 342, 378, 380], "43": [101, 157, 170, 180, 220, 338, 341, 363, 437, 471, 477, 478], "62": [101, 183, 235, 237, 378], "77": [101, 145, 183, 378, 380, 471], "do_profiled_stuff": 101, "non_profiled_stuff": 101, "fno": [101, 452, 468, 479], "mno": 101, "leaf": [101, 232, 290, 373, 382, 479], "dwarf": [101, 424], "brett": [102, 305, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "cannon": [102, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "caniusepython3": 102, "tox": 102, "cleaner": [102, 341, 458, 467, 472, 474, 479], "clarifi": [102, 103, 341, 385, 463, 464, 471, 473, 479], "feel": [102, 186, 289, 372, 386, 437, 460, 461, 464, 468], "worst": [102, 103, 104, 173, 185, 187, 424, 428, 451, 462, 475, 476, 479], "overal": [102, 120, 180, 191, 265, 281, 289, 305, 316, 342, 344, 363, 378, 424, 440, 465, 473, 474], "freeli": [102, 190, 341, 422], "commonplac": [102, 471], "trove": [102, 461], "classifi": [102, 248, 304, 340, 461, 465, 479], "oldest": [102, 137, 224, 266, 361, 378, 398, 465, 471, 476, 479], "cheat": [102, 382], "sheet": [102, 148, 380, 382, 479], "pariti": [102, 479], "conserv": [102, 459, 462], "accustom": [102, 183], "diff": [102, 110, 141, 187, 190, 384, 459, 462, 465, 471, 479], "2002": [102, 106, 108, 180, 256, 422, 460, 461], "confluenc": 102, "brittl": 102, "pronounc": [102, 471], "blind": [102, 341, 473], "predat": [102, 175, 187, 280, 390], "pose": [102, 124, 458, 462], "difficulti": [102, 280, 458, 461], "dichotomi": 102, "outdat": [102, 173, 247, 365, 464, 470, 471, 476, 479], "x00": [102, 173, 232, 255, 256, 281, 316, 334, 341, 344, 394, 479], "indexbyt": 102, "inevit": 102, "importlib2": 102, "absolute_import": [102, 111, 432, 463], "print_funct": [102, 110, 111, 432, 464], "werror": [102, 451, 452, 479], "lint": [102, 403, 470, 479], "amk": [103, 316, 461, 464, 465], "regex": [103, 160, 217, 263, 299, 316, 355, 384, 459, 463, 464, 471, 473, 476, 479], "tex": 103, "automata": 103, "devot": 103, "akm": 103, "complement": [103, 316, 341, 380, 424, 472, 476, 478, 479], "elsewher": [103, 112, 137, 154, 164, 269, 280, 321, 382, 390, 406, 423, 428, 431, 470, 473, 479], "za": [103, 106, 170, 316, 341, 431, 460], "z0": [103, 106, 170, 316, 342, 431], "9_": [103, 106, 316, 431], "ct": [103, 104], "caaat": 103, "repetit": [103, 118, 147, 232, 258, 267, 272, 316, 341, 363, 377, 384, 386, 396, 424, 426, 430, 460, 479], "fewer": [103, 120, 172, 244, 255, 258, 316, 337, 372, 428, 461, 463, 466, 473, 475, 476, 477, 479], "bcd": [103, 258], "abcbd": 103, "abcb": 103, "bc": [103, 148, 157, 244, 258, 341, 458], "quantifi": [103, 258, 311, 316, 469, 479], "brew": 103, "homebrew": 103, "ab": [103, 147, 157, 187, 231, 258, 267, 289, 306, 316, 341, 413, 422, 431, 438, 458, 461], "reductionist": 103, "bent": 103, "shorter": [103, 199, 222, 232, 258, 289, 297, 344, 426, 458, 459, 462, 464, 465, 470, 471, 479], "bloat": 103, "latex": [103, 464, 478], "stage": [103, 361, 391, 396, 406, 458, 478, 479], "tempo": 103, "drummer": 103, "drum": 103, "piper": 103, "lord": 103, "cook": [103, 174, 355, 479], "callable_iter": 103, "fromag": 103, "thu": [103, 148, 362], "0130": [103, 316], "0131": [103, 316], "dotless": [103, 316], "017f": [103, 316], "212a": [103, 316], "kelvin": [103, 316], "pam": [103, 479], "french": [103, 106, 362, 474, 476], "unreli": [103, 174, 316, 479], "cultur": [103, 105, 227, 263, 316], "charref": 103, "9a": [103, 316], "fa": [103, 316], "crow": 103, "servo": 103, "cro": 103, "ervo": 103, "etern": [103, 137], "recit": 103, "bclass": 103, "declassifi": 103, "subtleti": [103, 180, 240], "collis": [103, 232, 286, 327, 457, 468, 473, 478, 479], "x08class": 103, "x08": [103, 344, 394], "dissect": [103, 459, 460], "822": [103, 106, 197, 199, 227, 239, 332, 362, 460], "agent": [103, 107, 268, 269, 332, 349, 391, 392, 460, 464], "thunderbird": 103, "x11": [103, 365, 372, 391, 399, 479], "20061227": 103, "ababababab": 103, "upward": [103, 174, 293, 296, 380, 385], "parenthesi": [103, 110, 120, 244, 423, 427, 462, 479], "abcd": [103, 106, 157, 187, 258, 461, 464, 468], "backrefer": [103, 316, 479], "spring": [103, 180, 222], "keystrok": [103, 153, 174, 330, 458, 465], "chose": [103, 247, 430, 463], "subexpress": [103, 479], "jane": [103, 105], "internald": [103, 245], "mon": [103, 148, 180, 206, 461], "sec": [103, 362, 363, 474, 479], "zonen": 103, "zoneh": 103, "zonem": 103, "news": [103, 181, 191, 223, 266, 285, 390, 460, 461, 462, 463, 464, 465, 466, 471, 472, 473, 474, 479, 480], "rc": [103, 173, 205, 293, 345, 351, 358, 395, 407], "autoexec": 103, "sweet": [103, 258], "p2": [103, 173, 258, 281, 345, 423, 437, 462, 468, 469, 474], "leftmost": [103, 145, 157, 187, 190, 223, 232, 316, 426, 462, 476, 477], "shoe": 103, "adjac": [103, 180, 187, 249, 267, 279, 316, 384, 406, 431, 457, 473, 476, 479], "abxd": [103, 316, 476], "carriag": [103, 175, 204, 205, 255, 316, 328, 341, 360, 403, 415, 431, 461, 463], "hexrepl": 103, "65490": 103, "49152": 103, "0xffd2": 103, "0xc000": 103, "bbbb": 103, "deed": 103, "swordfish": 103, "sdeedfish": 103, "bword": 103, "superstit": 103, "insuper": 103, "resist": [103, 232, 329, 459, 465, 472, 479], "temptat": [103, 384, 459], "backtrack": [103, 316, 479], "balanc": [103, 105, 157, 338, 473], "pain": [103, 263, 458, 463, 479], "dirti": 103, "terribl": 103, "neat": [103, 166, 460, 465], "pat": [103, 186, 474], "unclear": [103, 470], "jeffrey": [103, 316, 338, 422, 464, 465, 468, 469, 471, 479], "friedl": [103, 316], "reilli": [103, 316, 363, 450, 460, 474, 479], "flavour": [103, 106, 247, 293, 354, 386, 463, 479], "inet": [104, 334], "scoket": 104, "berkeley": [104, 181, 466], "serversocket": 104, "snmp": 104, "clientsocket": 104, "client_thread": 104, "peer": [104, 131, 209, 210, 285, 325, 338, 479], "mysocket": [104, 259], "clariti": [104, 112, 289, 362, 423, 471, 479], "mysend": 104, "totals": 104, "msglen": [104, 334], "myrec": 104, "bytes_recd": 104, "2048": [104, 338, 401, 479], "x86": [104, 173, 297, 344, 452, 457, 464, 469, 476, 479], "amd64": [104, 300, 344, 351, 479], "arm": [104, 474, 479], "risc": [104, 479], "recycl": [104, 113, 361, 479], "screw": 104, "indistinguish": [104, 280, 305], "tcp_nodelay": [104, 124, 465, 475, 476, 479], "nut": 104, "crazi": 104, "suck": 104, "brain": [104, 462], "cake": 104, "ready_to_read": 104, "ready_to_writ": 104, "in_error": 104, "potential_read": 104, "potential_writ": 104, "potential_err": 104, "sensibl": [104, 107, 118, 124, 164, 180, 232, 252, 289, 361, 385, 386, 390, 426, 462, 465, 475, 476, 479], "healthi": 104, "outbound": 104, "decent": 104, "andrew": [105, 106, 174, 422, 458, 460, 461, 462, 463, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479], "dalk": [105, 422, 460, 461, 463], "student_tupl": 105, "student": [105, 112, 172, 223, 344, 380, 382, 436, 457, 469, 471], "student_object": 105, "secondari": [105, 124, 244, 258, 305, 349, 465, 466, 479], "multisort": 105, "xs": 105, "timsort": [105, 471], "dsu": 105, "lexicograph": [105, 258, 341, 426, 438, 463], "schwartzian": 105, "scale": [105, 130, 315, 325, 372, 382, 458, 461, 464, 475, 476, 479], "lighter": 105, "heavier": 105, "standard_way": 105, "double_revers": 105, "newgrad": 105, "japanes": [106, 155, 263, 462, 476], "hebrew": [106, 155], "russian": [106, 155], "emoji": [106, 471, 477, 479], "0x10ffff": [106, 222, 349, 472], "million": [106, 340, 363, 437], "265e": 106, "0x265e": 106, "0061": 106, "0062": 106, "0063": 106, "007b": 106, "2167": 106, "2168": 106, "nine": [106, 183, 351, 473, 479], "265f": 106, "pawn": 106, "1f600": 106, "grin": 106, "1f609": 106, "wink": 106, "paper": [106, 118, 152, 334, 380, 461, 479], "glyph": [106, 205, 244], "diagon": [106, 437, 468], "stroke": [106, 460], "horizont": [106, 174, 175, 371, 372, 380, 431], "toolkit": [106, 244, 258, 365, 435, 458], "114": [106, 120, 222], "111": [106, 222, 258, 340, 342, 457], "0x50": 106, "79": [106, 378, 437], "74": [106, 340, 448, 477, 478], "68": [106, 183, 222, 315, 362, 409, 477], "6f": 106, "6e": [106, 218], "0x00": [106, 175, 188], "ram": [106, 183, 463, 479], "gigabyt": [106, 405], "factor": [106, 139, 158, 190, 232, 258, 289, 311, 341, 382, 384, 426, 427, 437, 460, 465, 472, 476, 478, 479], "intoler": 106, "strcpi": 106, "resynchron": [106, 472], "consortium": [106, 406], "glossari": [106, 178, 479], "chronolog": [106, 124, 475], "computerphil": 106, "youtub": [106, 258], "tom": [106, 375, 460, 463, 468, 471, 473, 479], "scott": [106, 461, 463, 477, 479], "jukka": [106, 474], "korpela": 106, "introductori": [106, 334, 380, 463], "joel": [106, 475, 479], "spolski": 106, "rudiment": 106, "fichier": 106, "trouv": 106, "pertoir": 106, "greek": [106, 155], "u0394": 106, "u00000394": 106, "xnn": 106, "x80abc": 106, "ufffdabc": 106, "iso_8859_1": 106, "57344": 106, "ue000": 106, "xmlcharrefreplac": [106, 155, 222, 255, 341, 461, 479], "unnnn": 106, "namereplac": [106, 155, 222, 255, 474, 479], "40960": 106, "1972": [106, 337, 461, 462, 463], "xea": 106, "x80": [106, 297, 460], "x80abcd": 106, "xde": 106, "xb4": 106, "ua000": 106, "ua000abcd": 106, "u07b4": 106, "yi": 106, "syllabl": 106, "comfort": [106, 190], "xac": 106, "u1234": [106, 155, 259], "u20ac": [106, 466, 474], "u00008000": 106, "172": [106, 472], "4660": 106, "8364": [106, 222], "32768": [106, 217, 338, 344, 420, 479], "dose": 106, "accent": [106, 328], "inspir": [106, 164, 197, 258, 259, 422, 423, 458, 459, 461, 464, 471, 472, 479], "fifth": [106, 174, 244, 341, 362, 479], "233": [106, 223, 437, 445, 446], "0x0bf2": 106, "3972": [106, 465], "6000": [106, 232, 280], "13231": 106, "00e9": 106, "acut": 106, "0bf2": 106, "tamil": 106, "0f84": 106, "mn": [106, 431], "tibetan": 106, "halanta": 106, "1770": 106, "lo": [106, 145, 341, 382, 431, 467], "tagbanwa": 106, "sa": [106, 180, 334], "33af": 106, "rad": [106, 461], "subcategori": 106, "nonspac": [106, 431], "00ea": 106, "0065": 106, "0302": 106, "german": [106, 155, 263, 341, 380, 473, 479], "00df": 106, "street": [106, 118, 316], "rzenichstra": 106, "rzenichstrass": 106, "inequ": [106, 183, 192, 199, 384, 426, 464, 471], "compare_str": 106, "nfd": [106, 383], "single_char": 106, "multiple_char": 106, "strs": [106, 382], "nfc": [106, 383, 477], "nfkc": [106, 343, 383, 390, 431, 479], "nfkd": [106, 383], "caseless": [106, 341, 472], "compare_caseless": 106, "57": [106, 180, 461, 477, 478, 479], "thai": [106, 155, 422], "arab": [106, 155, 183, 341, 458, 465, 471], "u0e55": 106, "u0e57": 106, "pragmat": 106, "ned": [106, 465, 471, 473, 478, 479], "batcheld": [106, 479], "marc": [106, 227, 337, 458, 459, 460, 461, 463, 472, 479], "andr": [106, 227, 337, 458, 459, 460, 461, 463, 479], "lemburg": [106, 227, 337, 458, 459, 460, 461, 463], "gave": [106, 384, 465, 471, 479], "slide": [106, 407], "europython": 106, "transmiss": [106, 175, 205, 266, 297, 403], "gib": [106, 267, 303, 354, 358, 418, 458, 461, 463, 479], "u4500": 106, "blah": [106, 267, 289], "autodetect": [106, 301, 354, 391, 459, 463], "converg": 106, "u4500abc": 106, "xe4": 106, "x94": [106, 232], "occas": [106, 107, 294, 310, 330, 344, 358, 463, 473], "untrust": [106, 120, 187, 259, 265, 280, 296, 297, 309, 311, 324, 327, 329, 338, 354, 405, 407, 408, 409, 410, 415, 416, 418, 461, 464, 479], "attack": [106, 120, 124, 170, 222, 232, 241, 259, 265, 329, 337, 341, 354, 382, 405, 463, 465, 469, 472, 473, 474, 479], "bytestream": 106, "transpar": [106, 118, 147, 155, 173, 174, 199, 200, 215, 238, 244, 255, 267, 296, 354, 372, 380, 457, 459, 461, 462, 472, 473, 475, 476, 479], "new_f": 106, "beazley": [106, 460, 471], "gut": [106, 149, 479], "benjamin": [106, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479], "peterson": [106, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477], "alexand": [106, 464, 465, 467, 470, 471, 474, 475, 476, 479], "belopolski": [106, 464, 465, 467, 470, 471, 474, 475, 476, 479], "brandl": [106, 463, 464, 465, 467, 471, 472, 474, 475, 479], "ezio": [106, 465, 471, 472, 473, 474], "melotti": [106, 465, 471, 472, 473, 474], "ric": [106, 469, 472, 473, 477, 479], "araujo": [106, 469, 472, 473, 477, 479], "nichola": [106, 461, 468], "bastin": [106, 462], "marius": [106, 458], "gedmina": 106, "kent": [106, 338, 358, 384, 459, 463, 464], "johnson": [106, 463, 464, 479], "ken": [106, 365, 468, 469, 470, 475, 476, 477, 478, 479], "krugler": 106, "martin": [106, 227, 285, 458, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 475, 477, 479], "von": [106, 227, 315, 424, 458, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477], "wis": [106, 227, 285, 458, 460, 461, 462, 463, 464, 465, 471, 472, 473, 477], "terri": [106, 438, 468, 469, 474, 475, 476, 477, 478, 479], "reedi": [106, 461, 468, 469, 474, 475, 476, 477, 478, 479], "serhiy": [106, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "storchaka": [106, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "eryk": [106, 469, 479], "chad": [106, 461, 463, 464, 479], "whitacr": 106, "graham": [106, 438, 464, 469, 479], "wideman": 106, "michael": [107, 437, 438, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 477, 478, 479], "foord": [107, 465, 471], "2616": [107, 239, 389, 391, 403, 471], "tmp_file": 107, "the_pag": 107, "transmit": [107, 124, 131, 139, 239, 285, 332, 334, 357, 403, 405, 415, 462, 477], "someserv": 107, "northampton": 107, "upload": [107, 149, 459, 463, 465, 474, 476, 478, 479], "submiss": [107, 149, 280, 311, 422, 458], "hundredweight": 107, "tin": [107, 268, 479], "door": [107, 118, 339], "somebodi": 107, "url_valu": 107, "dislik": [107, 385], "user_ag": 107, "win64": [107, 458, 474, 479], "x64": [107, 464], "pretend_serv": 107, "404": [107, 149, 238, 239, 242, 259, 391, 403, 415, 416, 437, 468, 474], "403": [107, 238, 242, 437, 468], "401": [107, 238, 391, 437, 468, 474, 479], "299": [107, 220, 238], "599": [107, 220, 238, 285], "shortmessag": [107, 242], "101": [107, 118, 238, 258, 315, 340, 342, 378, 385, 440, 457, 465, 471], "obey": [107, 328, 341, 345, 361, 424, 464], "201": [107, 238, 258, 365, 458], "202": [107, 180, 232, 238], "203": [107, 238], "204": [107, 238, 242, 380], "206": [107, 238], "304": [107, 238, 242, 476], "unauthor": [107, 238], "402": [107, 238, 378], "payment": [107, 258], "charg": [107, 247, 422], "406": [107, 238], "407": [107, 238], "408": [107, 238], "410": [107, 238], "precondit": [107, 338, 460, 471], "413": [107, 238, 479], "415": [107, 238], "media": [107, 151, 278, 290, 316, 422], "416": [107, 238, 378], "417": [107, 238, 242], "502": [107, 238, 462], "503": [107, 238], "504": [107, 238, 341], "respond": [107, 239, 242, 244, 266, 310, 334, 338, 349, 365, 385, 403, 415, 416, 465, 479], "fish": [107, 296, 385, 386, 395, 449, 473, 479], "dtd": [107, 237, 311, 391, 405, 410, 411, 412, 477, 479], "w3": [107, 237, 311, 391, 407, 409, 422, 479], "tr": [107, 174, 237, 298, 311, 391, 407, 409, 422, 479], "xhtml1": [107, 391], "someurl": 107, "brief": [107, 108, 118, 190, 202, 222, 223, 265, 289, 299, 305, 316, 319, 341, 345, 376, 422, 458, 460, 462, 463, 466, 471, 479], "lift": [107, 380, 470, 475, 476, 477], "some_handler_inst": 107, "realm": [107, 205, 391, 479], "cpanel": 107, "password_mgr": [107, 391], "knew": [107, 466], "top_level_url": 107, "a_url": 107, "http_proxi": [107, 391, 479], "8080": [107, 239, 240, 334, 391, 415], "userinfo": [107, 391], "joe": [107, 149, 231, 380, 391, 474, 477, 479], "proxy_support": 107, "request_method": [107, 391, 403, 479], "voidspac": [107, 465], "uk": [107, 163, 240, 341, 362, 465, 479], "review": [107, 141, 166, 232, 337, 461, 466, 475, 477, 479], "lee": [107, 422, 462, 463, 465, 469, 471, 476, 479], "snif": 107, "msie": [107, 241], "sv1": 107, "clr": 107, "4322": 107, "ie": [107, 202, 215, 237, 240, 245, 275, 289, 391, 415, 474, 479], "aspn": [107, 272], "ward": [108, 458, 460, 461, 462, 463, 474, 479], "distro": [108, 479], "onto": [108, 166, 172, 174, 188, 210, 245, 296, 304, 328, 343, 380, 382, 384, 386, 428, 440, 458, 464, 470, 479], "promin": [108, 422, 466, 479], "readm": [108, 185, 220, 244, 255, 293, 452, 456, 457, 458, 471, 475, 476, 479], "accessori": 108, "gunzip": [108, 231], "xf": [108, 289, 436], "cd": [108, 115, 118, 187, 258, 292, 384, 413, 464], "winzip": 108, "pkunzip": 108, "privileg": [108, 149, 285, 290, 334, 336, 339, 362, 401, 472, 475, 479], "pristin": 108, "pybuild": 108, "6a1": [108, 464], "distnam": 108, "python32": [108, 471], "heavili": [108, 181, 247, 332, 423, 459, 475, 476], "painless": 108, "platbas": [108, 471], "userbas": [108, 471], "build_ext": [108, 474, 479], "rpath": [108, 452, 456, 468, 479], "stash": 108, "typist": 108, "sitecustom": [108, 331, 350, 434, 465, 473, 479], "mental": [108, 479], "trifl": 108, "mnt": 108, "immateri": [108, 428], "purelib": [108, 351, 395, 471], "platlib": [108, 351, 471, 479], "wind": [108, 289], "pth": [108, 299, 331, 349, 350, 451, 458, 475, 479], "20000731": 108, "112": [108, 183, 340, 378, 468, 477, 478, 479], "linux2": [108, 349, 472], "dynload": [108, 349, 350, 452, 479], "stock": [108, 337, 463, 471, 479], "ver": [108, 479], "pydistutil": 108, "python1": 108, "userprofil": [108, 291, 477, 479], "homedr": [108, 291], "homepath": [108, 291], "forcibl": [108, 222, 472, 473], "blib": 108, "implic": [108, 247, 280, 296, 390, 405, 426, 479], "inappropri": [108, 210, 335, 343, 424, 479], "foreseen": 108, "sourcefil": 108, "cpparg": 108, "judg": 108, "cc": [108, 157, 200, 206, 258, 268, 332, 357, 452, 461, 470, 472, 479], "foomodul": 108, "libm": [108, 173, 452, 479], "xcompil": 108, "o32": 108, "omf": 108, "coff": 108, "python25": 108, "coff2omf": 108, "python25_bcpp": 108, "eg": [108, 210, 240, 245, 290, 338, 423, 479], "_bcpp": 108, "foo_bcpp": 108, "bcpp": 108, "builder": [108, 395, 406, 407, 409], "mingw32": 108, "inferior": 108, "binutil": [108, 477], "20030111": 108, "pexport": 108, "dlltool": [108, 477], "dllname": [108, 266, 477], "libpython25": 108, "sourcewar": 108, "cygwin1": 108, "virtualenv": [109, 457, 472, 479], "somepackag": 109, "greet": [110, 302, 332, 337, 382, 474], "beneath": [110, 409, 479], "py3": [110, 316, 449, 467, 471, 479], "mycod": 110, "failunlessequ": [110, 469, 470], "failifequ": [110, 469, 470], "failunless": [110, 469, 470], "assert_": [110, 469, 470, 471, 479], "failif": [110, 469, 470], "failunlessrais": [110, 469, 470], "cal": [110, 148, 391, 392], "failunlessalmostequ": [110, 469, 470], "failifalmostequ": [110, 469, 470], "basestr": [110, 461, 466, 473], "viewitem": [110, 465], "viewkey": [110, 465], "viewvalu": [110, 465], "execfil": [110, 461, 462, 466, 479], "exitfunc": [110, 458, 462, 466], "funcattr": 110, "my_funct": [110, 437], "func_closur": [110, 466], "__closure__": [110, 424, 466, 479], "new_featur": 110, "getcwdu": [110, 461], "someclass": [110, 296, 382, 385, 386, 458], "some_iter": 110, "imports2": 110, "itertools_import": 110, "ifilt": [110, 461], "izip": [110, 462], "ifilterfals": 110, "__metaclass__": [110, 460, 464, 466], "methodattr": 110, "im_func": [110, 464], "__nonzero__": [110, 466], "numliter": 110, "iscal": [110, 465, 466, 479], "sequenceinclud": [110, 465, 466], "issequencetyp": 110, "ismappingtyp": 110, "isnumbertyp": 110, "irepeat": 110, "maxint": [110, 466], "backtick": [110, 144, 393, 466, 476], "set_liter": 110, "standarderror": [110, 464, 466], "sys_exc": 110, "exc_valu": [110, 337, 349, 358, 361, 377, 424, 465, 466, 469, 479], "exc_traceback": [110, 349, 358, 361, 377, 466, 469, 479], "tuple_param": 110, "urllib2": [110, 391, 462, 464, 465, 466], "ws_comma": 110, "xrang": [110, 459, 460, 461, 462, 466], "xreadlin": [110, 459, 461, 462], "peg": [110, 427, 468, 469, 470, 478, 479], "617": [110, 427, 468, 469, 470, 478, 479], "parsabl": [110, 472, 478, 479], "libcst": [110, 120, 478], "parso": [110, 120, 478], "featurenam": [111, 412], "optionalreleas": 111, "mandatoryreleas": [111, 479], "compilerflag": 111, "0a3": [111, 479], "getoptionalreleas": 111, "getmandatoryreleas": 111, "compiler_flag": [111, 222], "nested_scop": [111, 432, 459, 460], "0b1": [111, 479], "0a1": [111, 479], "0a2": [111, 479], "with_stat": [111, 432, 463, 464], "unicode_liter": [111, 432, 464], "generator_stop": [111, 210, 432, 474, 479], "tbd": [111, 479], "steer": [111, 380, 459, 462, 469, 471, 479], "council": [111, 479], "649": [111, 425], "helloworld": [112, 431], "tim": [112, 342, 363, 457, 458, 459, 460, 461, 462, 463, 465, 469, 470, 473, 474, 475, 478, 479], "beauti": [112, 187], "phrase": [112, 238, 239, 245, 269, 289, 391, 426, 430, 431, 461, 464, 472, 474, 479], "proactiv": 112, "exemplifi": [112, 265, 437], "hypothet": [112, 289, 334, 458], "bandclass": 112, "teacher": [112, 380], "search_stud": 112, "student_nam": 112, "fenc": 112, "did_user_define_their_nam": 112, "my_nam": [112, 385], "print_user_nam": 112, "dinsdal": 112, "uncom": [112, 197, 244, 460, 470], "jabberwocki": 112, "light": [113, 173, 174, 464, 465, 467, 479], "weight": [113, 157, 173, 199, 315, 340, 342, 368, 475, 479], "netbsd": [113, 300, 334, 361, 362, 469, 476, 479], "dragonflybsd": [113, 334, 361, 479], "768": [113, 361], "a_lock": 113, "surviv": [113, 173, 398], "myabc": 114, "get_iter": 114, "myiter": [114, 382], "my_abstract_method": 114, "my_abstract_classmethod": 114, "my_abstract_staticmethod": 114, "my_abstract_properti": 114, "_get_x": 114, "_set_x": 114, "__isabstractmethod__": [114, 472], "_fget": 114, "_fset": 114, "_fdel": 114, "594": [115, 139, 149, 150, 151, 170, 246, 269, 278, 284, 285, 292, 298, 333, 336, 346, 355, 393, 404, 469, 470, 479], "mono": [115, 139, 292, 397], "stereo": [115, 139, 292, 397], "quadro": 115, "nchannel": [115, 139, 292, 333, 346, 397], "samples": 115, "framer": [115, 333, 346, 397], "qualiti": [115, 190, 290, 292, 302, 422, 424, 471, 479], "44": [115, 157, 183, 281, 315, 325, 383, 468, 472, 477, 478], "44100": [115, 292], "176": 115, "ahead": [115, 258, 355, 362, 399, 406, 427, 462, 479], "sampwidth": [115, 333, 346, 397], "nframe": [115, 333, 346, 378, 397, 451], "comptyp": [115, 346, 397], "compnam": [115, 346, 397], "uncompress": [115, 147, 231, 267, 329, 354, 397, 417, 418, 471, 479], "ulaw": [115, 333, 346], "alaw": [115, 346], "g722": 115, "programnam": 118, "store_const": [118, 289, 479], "append_const": [118, 289, 479], "helpformatt": [118, 289, 479], "myprogram": 118, "parent_pars": 118, "foo_pars": 118, "bar_pars": 118, "yyy": [118, 428], "nbar": 118, "foonley": 118, "store_fals": [118, 289], "foon": 118, "_storeact": 118, "option_str": 118, "absent": [118, 174, 265, 294, 334, 342, 391, 471, 479], "f1": [118, 187, 213, 265, 280, 341, 423, 436, 479], "f2": [118, 187, 213, 280, 341, 423, 479], "f4": [118, 460], "booleanoptionalact": [118, 470, 479], "fooaction": 118, "xx": [118, 316, 327, 390, 479], "yy": 118, "_io": [118, 185, 471, 475, 479], "code_point": 118, "source_fil": 118, "dest_fil": 118, "datapath": 118, "short_titl": 118, "tale": 118, "citi": [118, 338, 392, 422, 479], "downstream": [118, 421, 479], "scissor": 118, "frobbl": 118, "foo_bar": [118, 289, 386], "xyzz": 118, "badger": 118, "inher": [118, 361, 395, 409, 479], "cautious": [118, 259, 268, 390], "1s": [118, 479], "bacon": [118, 157, 187, 247, 276, 341, 377, 391, 424], "bac": 118, "mmm": [118, 245], "ba": [118, 252, 258, 418, 474], "parser_class": 118, "svn": [118, 160, 351, 390, 461, 463, 464, 465, 471, 479], "cmd1": 118, "cmd2": 118, "parser_a": 118, "parser_b": 118, "parser_foo": 118, "parser_bar": 118, "xyzyx": 118, "subparser_nam": 118, "subparser1": 118, "subparser2": 118, "dat": [118, 181, 457], "group1": [118, 316, 439], "group2": [118, 439], "exclusive_group": 118, "736": 118, "arg_lin": 118, "myargumentpars": 118, "errorcatchingargumentpars": 118, "doit": 118, "monkey": [118, 382, 385, 386, 470, 479], "callback_": 118, "unicodestr": 119, "enc": [119, 338], "u2641": 119, "asdl": [120, 463, 468, 478, 479], "stmt": [120, 337, 363, 464, 479], "decorator_list": 120, "type_param": [120, 382, 423, 427, 432, 479], "orels": [120, 464], "finalbodi": 120, "elt": 120, "cmpop": 120, "expr_context": 120, "ifs": 120, "posonlyarg": [120, 479], "vararg": [120, 252, 479], "kwonlyarg": [120, 252], "kw_default": 120, "asnam": 120, "context_expr": 120, "optional_var": 120, "kwd_attr": 120, "kwd_pattern": 120, "typeignor": [120, 479], "_ast": [120, 463, 471, 479], "source_lin": 120, "nameconst": [120, 470, 477, 479], "extslic": [120, 478, 479], "fantast": 120, "snake": [120, 157], "contributor": [120, 422, 466, 479], "func_typ": [120, 427, 477], "115": [120, 258, 342, 378, 479], "collaps": [120, 193, 256, 293, 360, 473, 479], "walrus": [120, 426, 477, 479], "soc": 120, "otherexcept": [120, 210], "subpattern": [120, 423, 437, 479], "point2d": [120, 382], "point3d": [120, 157, 382], "ts": [120, 174, 229, 380, 382, 423, 463, 470, 479], "outermost": [120, 252, 341, 361, 479], "decorator1": 120, "decorator2": 120, "3115": [120, 381, 423, 424, 466, 472], "base1": [120, 436], "base2": [120, 436], "other_func": 120, "feature_vers": [120, 373, 477, 479], "misplac": [120, 479], "ast_obj": 120, "node_or_str": 120, "oneself": 120, "denial": [120, 222, 259, 341, 354, 405, 424, 451, 469, 479], "new_nod": 120, "old_nod": 120, "visit_num": [120, 477, 479], "visit_str": [120, 477, 479], "visit_byt": [120, 477], "visit_nameconst": [120, 477], "visit_ellipsi": [120, 477], "visit_const": [120, 477, 479], "rewritenam": 120, "visit_nam": 120, "new_tre": 120, "yourtransform": 120, "annotate_field": 120, "include_attribut": 120, "asttoken": 120, "leoast": 120, "codemod": 120, "recoveri": [120, 198, 245, 391, 427], "emscripten": [121, 149, 160, 163, 170, 207, 212, 220, 226, 230, 239, 242, 245, 254, 275, 280, 284, 285, 290, 302, 307, 319, 325, 326, 330, 332, 334, 335, 336, 338, 345, 349, 352, 355, 361, 391, 395, 399, 415, 416, 421, 452, 469, 479], "wasi": [121, 149, 160, 163, 170, 207, 209, 210, 212, 220, 226, 230, 239, 242, 245, 254, 275, 280, 284, 285, 290, 302, 307, 319, 325, 326, 330, 332, 334, 335, 336, 338, 345, 349, 352, 355, 361, 391, 395, 399, 415, 416, 421, 452, 469, 479], "wasm32": [121, 149, 160, 163, 170, 207, 212, 220, 226, 230, 239, 242, 245, 254, 275, 280, 284, 285, 290, 302, 307, 319, 325, 326, 330, 332, 334, 335, 336, 338, 345, 349, 352, 355, 361, 391, 395, 399, 415, 416, 421, 452, 469, 479], "fifo": [122, 132, 157, 258, 280, 290, 293, 313, 326, 339, 354, 475, 476, 479], "pythonasynciodebug": [123, 124, 185, 451, 479], "threadsaf": [123, 223, 258, 264, 315, 479], "slow_callback_dur": 123, "fut": [123, 127], "coro_func": 123, "coro": [123, 124, 126, 133, 137, 474, 479], "321": [123, 183], "source_traceback": 123, "base_ev": [124, 349, 426, 479], "prefac": [124, 131], "idempot": [124, 131, 164, 223, 470, 476, 479], "irrevers": 124, "567": [124, 127, 167, 183, 342, 448, 467, 476, 479], "protocol_factori": [124, 131], "local_addr": [124, 131, 134], "ssl_handshake_timeout": [124, 134, 476], "ssl_shutdown_timeout": [124, 134, 479], "happy_eyeballs_delay": [124, 134, 477, 479], "interleav": [124, 134, 190, 280, 465, 471, 476, 477, 479], "synopsi": [124, 310, 338, 479], "eyebal": [124, 477, 479], "8305": 124, "250": [124, 220, 305, 332, 337, 380, 465], "local_host": 124, "local_port": 124, "handshak": [124, 134, 338, 473, 474, 475, 476, 477, 479], "60": [124, 134, 145, 153, 163, 180, 183, 193, 258, 304, 315, 338, 340, 362, 377, 378, 380, 394, 431, 461, 463, 469, 471, 475, 477, 479], "dual": [124, 334, 338, 422, 431, 479], "undesir": [124, 338, 459, 463, 479], "datatrack": 124, "ietf": [124, 232, 256, 338, 344], "rfc6555": 124, "remote_addr": [124, 131], "reuse_port": [124, 134, 334], "allow_broadcast": 124, "remote_host": 124, "remote_port": 124, "endpoint": [124, 131, 209, 239, 334, 380, 471, 479], "so_reuseport": [124, 334, 358, 479], "broadcast": [124, 256, 334, 479], "preexist": 124, "reuse_address": [124, 134, 469, 475, 476, 477, 478, 479], "so_reuseaddr": [124, 334, 358, 469, 475, 476, 477, 478, 479], "incom": [124, 131, 210, 242, 259, 280, 335, 338, 408, 470, 471, 479], "packet": [124, 131, 139, 256, 266, 334, 335, 415, 465, 479], "af_unspec": [124, 134, 334], "ai_pass": [124, 134, 334], "backlog": [124, 134, 280, 334, 474, 479], "time_wait": [124, 334], "syscal": [124, 210, 290, 319, 329, 474, 475, 477, 479], "coder": [124, 139], "sporad": [124, 290], "sockaddr": [124, 140, 334], "uncatch": 124, "blocking_io": [124, 137], "cpu_bound": 124, "asyncgen": 124, "universal_newlin": [124, 135, 345, 462, 476, 479], "srv": [124, 167, 476], "client_connect": 124, "trsock": [124, 479], "transportsocket": [124, 479], "mypolici": [124, 472], "iocp": [124, 479], "msdn": [124, 290], "hello_world": 124, "display_d": [124, 137], "end_tim": [124, 137], "rsock": [124, 131, 134], "wsock": [124, 131, 134], "recept": [124, 131, 134], "ask_exit": 124, "signam": [124, 330], "3600": [124, 131, 137, 166, 180], "baseeventloop": [126, 479], "successor": [126, 229], "_make_socket_transport": 126, "base_futur": 127, "_asyncio_future_block": 127, "set_aft": 127, "excutor": 128, "water": [128, 325, 474, 479], "proactor_ev": 129, "windows_ev": [129, 479], "windows_util": [129, 476, 479], "hpet": 129, "prohibit": [130, 190, 255, 259, 338, 403, 426, 476, 477, 478, 479], "inact": [130, 135, 437, 464, 479], "disrupt": [130, 470, 479], "reap": [130, 479], "pidfd": [130, 330, 479], "goldilock": 130, "launch": [130, 183, 280, 290, 345, 349, 358, 394, 399, 457, 458, 471, 472, 473, 477, 479], "myeventlooppolici": 130, "eventloop": [130, 479], "extent": [131, 153, 232, 255, 275, 372, 380, 422, 467, 479], "outgo": [131, 197, 334, 338, 470, 471, 472], "peernam": [131, 134], "socknam": [131, 479], "peercert": 131, "ssl_object": 131, "watermark": [131, 134], "opportun": [131, 137, 155, 322, 386, 457, 479], "list_of_data": 131, "addr": [131, 134, 149, 167, 256, 326, 334, 338, 358, 416, 471, 474, 479], "terminateprocess": [131, 135, 140, 280, 290, 345, 464, 465], "unidirect": [131, 280], "reassembl": 131, "sizehint": [131, 155, 325, 479], "recipi": [131, 197, 205, 206, 332, 335, 422], "undeliver": 131, "echoserverprotocol": 131, "8888": [131, 134], "echoclientprotocol": 131, "on_con_lost": 131, "myprotocol": 131, "dateprotocol": 131, "exit_futur": 131, "unblock": [132, 136, 280, 330, 479], "priority_numb": [132, 313], "sleep_for": 132, "slept": 132, "workload": [132, 478, 479], "total_sleep_tim": 132, "started_at": 132, "total_slept_for": 132, "return_except": [132, 137, 479], "loop_factori": [133, 470, 479], "tcp_echo_cli": 134, "client_connected_cb": 134, "feed_eof": [134, 479], "handle_echo": 134, "print_http_head": 134, "wait_for_data": 134, "base_subprocess": 135, "proc": [135, 237, 290, 345, 475, 479], "zzz": [135, 428], "stdout_data": [135, 345, 462], "stderr_data": [135, 345, 462], "creationflag": [135, 345, 462], "waiter": [136, 361, 479], "waiter_task": 136, "codit": 136, "sem": 136, "example_barri": 136, "housekeep": [136, 361], "0x1053bb7c8": 137, "say_aft": 137, "task1": [137, 448], "task2": [137, 448], "tg": 137, "function_that_returns_a_future_object": 137, "some_python_coroutin": 137, "leverag": [137, 249, 280, 473, 478], "mid": [137, 479], "background_task": 137, "some_coro": 137, "forev": [137, 306, 325, 459, 460, 461, 462, 472, 479], "misbehav": [137, 479], "another_coro": 137, "bubbl": [137, 423, 479], "aws": 137, "aggreg": [137, 258, 337, 384, 469, 479], "stronger": [137, 386, 479], "subtask": 137, "employ": [137, 149, 280, 290, 408, 428, 472], "custom_task_constructor": 137, "aw": [137, 479], "long_running_task": 137, "deadlin": [137, 322], "overdu": 137, "new_deadlin": 137, "yay": [137, 445], "return_when": [137, 163], "all_complet": [137, 163], "first_complet": [137, 163], "first_except": [137, 163], "earliest": [137, 148, 180, 187, 362], "earliest_result": 137, "took": [137, 166, 305, 363, 458, 479], "eager_start": 137, "newest": 137, "deni": [137, 209, 335, 424, 461, 479], "cancel_m": 137, "ineffect": [137, 473], "make_request_with_timeout": 137, "make_request": 137, "make_another_request": 137, "unrelated_cod": 137, "fashion": [137, 167, 231, 259, 280, 305, 316, 334, 377, 382, 409, 423, 424, 426, 462, 465, 472, 473, 479], "suppres": 137, "unregistr": [138, 326], "counterfil": 138, "_count": 138, "incrcount": 138, "savecount": 138, "adject": [138, 442], "donni": 138, "sector": 138, "law": [139, 232, 333, 340, 346, 362, 422, 463, 479], "dvi": 139, "adpcm": 139, "fragment1": 139, "fragment2": 139, "adpcmfrag": 139, "newstat": 139, "proport": [139, 164, 315, 340, 479], "energi": 139, "maxim": [139, 187, 188, 193, 232, 244, 358, 436, 479], "wherebi": [139, 149, 265, 296], "ima": 139, "newwidth": 139, "new_fram": 139, "old_width": 139, "inrat": 139, "outrat": 139, "weighta": 139, "weightb": [139, 479], "newfrag": 139, "s_i": 139, "lfactor": 139, "rfactor": 139, "recombin": [139, 472], "mul_stereo": 139, "lsampl": 139, "rsampl": 139, "toler": [139, 152, 256, 272, 474, 476, 479], "loss": [139, 183, 222, 240, 255, 268, 272, 362, 391, 417, 422, 426, 440, 460, 462, 464, 471, 475, 476, 477, 479], "predict": [139, 222, 255, 349, 409, 424, 451, 457, 471, 478, 479], "misinterpret": 139, "energet": 139, "echocancel": 139, "outputdata": 139, "inputdata": 139, "800": [139, 232, 267, 463, 465, 468, 471, 475, 479], "out_test": 139, "in_test": 139, "ipo": 139, "prefil": 139, "postfil": 139, "run_fil": [140, 451], "run_interactivehook": [140, 349], "run_startup": [140, 451], "run_stdin": [140, 451], "call_funct": [140, 173, 469, 475, 479], "func_point": 140, "cdata": [140, 173, 311, 406, 411, 412, 479], "dlopen": [140, 173, 290, 349, 452, 460, 463, 479], "dlsym": [140, 173], "code_object": [140, 222, 479], "whenc": [140, 151, 212, 255, 275, 442, 460], "root_dir": [140, 228, 329, 468, 470, 479], "dir_fd": [140, 222, 228, 290, 329, 468, 469, 472, 479], "putlin": [140, 285, 302, 479], "topdown": [140, 290], "onerror": [140, 290, 299, 329, 470, 476, 479], "follow_symlink": [140, 290, 293, 329, 468, 472, 479], "pgid": [140, 290], "src_dir_fd": [140, 290], "dst_dir_fd": [140, 290], "show_cmd": [140, 290], "ns": [140, 290, 311, 378, 381, 394, 409, 469, 479], "followlink": [140, 290, 464], "base_nam": [140, 329], "extract_dir": [140, 329], "thread_id": [140, 330, 362], "signalnum": [140, 330], "servicenam": [140, 334], "protocolnam": [140, 334], "connection_handl": [140, 337], "set_asyncgen_hooks_fin": [140, 349], "set_asyncgen_hooks_firstit": [140, 349], "logopt": [140, 352], "maskpri": [140, 352], "fullpath": [140, 356], "fullurl": [140, 391], "computer_nam": [140, 401], "sub_key": [140, 401], "file_nam": [140, 401], "value_nam": [140, 401], "_winapi": [140, 479], "createfil": 140, "desired_access": 140, "share_mod": 140, "creation_disposit": 140, "flags_and_attribut": 140, "createjunct": 140, "src_path": 140, "dst_path": 140, "createnamedpip": 140, "open_mod": 140, "pipe_mod": 140, "createpip": 140, "createprocess": [140, 345], "application_nam": 140, "command_lin": [140, 345], "current_directori": 140, "openprocess": 140, "process_id": [140, 334], "exit_cod": [140, 210], "pyobj_fromptr": 140, "4648": [141, 324, 479], "ascii85": [141, 473, 479], "76": [141, 199, 340, 378, 380, 415], "2045": [141, 191, 193, 199, 200, 202, 415], "altchar": 141, "map01": 141, "oh": 141, "eye": [141, 183, 187, 463, 470, 474, 477], "foldspac": 141, "wrapcol": 141, "adob": [141, 473, 479], "btoa": 141, "ignorechar": 141, "x0b": [141, 341, 394], "zgf0ysb0bybizsblbmnvzgvk": 141, "1521": [141, 314], "multipurpos": 141, "botfram": 142, "stopfram": 142, "returnfram": 142, "c_call": [142, 349], "c_return": [142, 349], "c_except": [142, 349], "module_nam": [142, 247, 280, 358, 468, 476, 479], "argument_list": [142, 423, 426], "dispatch_": 142, "frame_lineno": 142, "lprefix": 142, "a2b_": [144, 472], "strict_mod": [144, 479], "3548": [144, 462], "quotetab": [144, 155, 314], "istext": 144, "1522": [144, 314], "linefe": [144, 205, 328, 342, 431, 461], "ccitt": [144, 346], "polynomi": [144, 258, 272], "0x1021": 144, "binhex4": [144, 478, 479], "010x": 144, "bytes_per_sep": [144, 341], "xb9": 144, "x01": [144, 255, 256, 281, 334, 344, 394], "b901ef": 144, "b9": 144, "ef": [144, 157, 258, 390, 413], "b9_01ef": 144, "b901": 144, "hexstr": 144, "invers": [144, 148, 152, 180, 183, 198, 206, 208, 222, 241, 256, 272, 288, 296, 328, 337, 340, 341, 362, 426, 427, 464, 470, 477, 479], "liber": [144, 190], "85": [144, 151, 285, 340, 474], "domin": [145, 240, 479], "sortedcollect": 145, "find_lt": 145, "find_l": 145, "find_gt": 145, "find_g": 145, "score": [145, 187, 337, 340, 448], "70": [145, 180, 183, 315, 340, 360, 378, 437, 447, 448, 479], "fdcba": 145, "titan": 145, "bird": 145, "1963": 145, "hitchcock": 145, "alien": [145, 361], "1986": [145, 180], "1960": 145, "by_year": 145, "romanc": 145, "hiller": 145, "_f": 146, "compresslevel": [147, 231, 354, 418, 476, 478, 479], "xb": [147, 231, 267], "wt": [147, 222, 231, 267, 340], "compressor": [147, 267, 479], "decompressor": [147, 267, 479], "max_length": [147, 267, 420, 474, 479], "donec": 147, "rhoncus": 147, "qui": 147, "sapien": 147, "sit": [147, 371, 413], "amet": 147, "molesti": 147, "fusc": 147, "scelerisqu": 147, "vel": 147, "augu": 147, "nec": 147, "ullamcorp": 147, "nam": 147, "rutrum": 147, "pretium": 147, "placerat": 147, "aliquam": 147, "tristiqu": 147, "lorem": 147, "cursus": 147, "interdum": 147, "laoreet": 147, "ultric": 147, "purus": 147, "pulvinar": 147, "gravida": 147, "euismod": 147, "magna": 147, "varius": 147, "justo": 147, "tincidunt": 147, "feugiat": 147, "pharetra": 147, "lacus": 147, "risus": 147, "vehicula": 147, "maecena": 147, "feli": 147, "pellentesqu": 147, "semper": 147, "nunc": 147, "nibh": 147, "ac": [147, 157, 258, 422, 452, 461, 479], "elementum": 147, "dolor": 147, "luctus": 147, "curabitur": 147, "lacinia": 147, "ornar": 147, "consectetur": 147, "vestibulum": 147, "513595166163142": 147, "gen_data": 147, "chunksiz": [147, 163, 280, 300, 474, 479], "nonrandom": 147, "myfil": [147, 255, 290, 384, 418, 436, 439, 448], "european": [148, 155, 465], "gregorian": [148, 180], "indefinit": [148, 174, 180, 242, 258, 262, 266, 268, 330, 355, 465, 473, 474, 479], "prolept": [148, 180], "dershowitz": [148, 180], "reingold": [148, 180], "calendr": [148, 180], "prescrib": 148, "8601": [148, 180, 187, 263, 337, 415, 469, 475, 479], "theyear": 148, "themonth": 148, "withyear": 148, "css": [148, 237, 471, 476, 479], "cascad": [148, 479], "tue": [148, 180], "wed": [148, 180, 362], "fri": [148, 206, 471, 472, 479], "formatmonthnam": [148, 479], "singular": [148, 227, 479], "customhtmlc": 148, "nowrap": 148, "formatweekday": [148, 479], "y1": [148, 426, 437, 468, 470, 479], "y2": [148, 222, 437, 468, 470, 479], "centuri": [148, 180, 362, 471, 479], "epoch": [148, 206, 240, 245, 268, 285, 337, 338, 354, 362, 415, 459, 479], "multipart": [149, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 479], "isindex": 149, "goodi": 149, "h1": [149, 232, 237, 239, 265, 416], "logdir": [149, 150], "keep_blank_valu": [149, 390], "minifieldstorag": [149, 479], "fileitem": 149, "userfil": 149, "linecount": 149, "strict_pars": [149, 390], "pdict": 149, "megabyt": 149, "rfcs": [149, 155, 191, 193, 198, 199, 200, 202, 205, 206, 302, 338, 461, 474, 479], "hole": [149, 290, 328, 465, 468, 479], "hacker": [149, 315], "exploit": [149, 267, 290, 354, 405, 424, 451, 473, 479], "gullibl": 149, "trust": [149, 265, 280, 296, 299, 302, 338, 345, 354, 390, 456, 457, 464, 465, 473, 477, 479], "dash": [149, 155, 174, 193, 202, 316, 328, 403], "0o755": 149, "0755": [149, 479], "0o644": 149, "0o666": [149, 181, 290, 293, 393], "everybodi": [149, 241], "cryptic": [149, 479], "yourhostnam": 149, "suspect": [149, 458, 479], "userid": [149, 266, 382, 475], "suexec": 149, "liabil": [149, 422], "excerpt": [150, 183, 477], "ea": 151, "rmff": 151, "bigendian": 151, "inclhead": 151, "jerri": 151, "morrison": [151, 473], "electron": [151, 338, 422], "art": [151, 152, 157, 190], "1985": [151, 337], "kahan": 152, "elementari": [152, 174, 380], "annex": [152, 272, 383, 431, 464], "lie": [152, 180, 239, 247, 266, 280, 341, 372, 382, 424, 432, 460, 461], "4142135623730951j": 152, "cartesian": [152, 258, 337, 464, 467, 474], "modulus": [152, 286, 341, 349, 464, 471, 477], "phi": [152, 272], "counterclockwis": [152, 380], "141592653589793": [152, 440, 471], "arc": [152, 272, 380, 464, 465, 467, 471, 479], "cosin": [152, 183, 272], "sine": [152, 183, 272], "tangent": [152, 272, 380], "rel_tol": [152, 272, 474], "1e": [152, 222, 272, 342, 344, 426, 474, 479], "abs_tol": [152, 272, 474], "curv": [152, 338, 380, 472, 479], "enlighten": 152, "ado": 152, "iserl": 152, "powel": [152, 479], "eds": 152, "clarendon": 152, "1987": [152, 155, 180, 404], "pp165": 152, "211": [152, 285, 472], "completekey": [153, 294], "banner": [153, 154, 479], "do_help": [153, 479], "do_shel": 153, "complete_foo": 153, "begidx": 153, "endidx": 153, "help_bar": 153, "help_": 153, "undocu": [153, 223, 264, 294, 358, 384, 418, 470, 472, 473, 474, 475, 476, 478, 479], "nonempti": [153, 188, 316, 341, 380, 399, 424], "complete_": 153, "displaywidth": 153, "solicit": 153, "drawn": [153, 174, 264, 290, 380, 479], "do_forward": 153, "playback": [153, 292], "do_playback": 153, "turtleshel": 153, "do_right": 153, "do_left": 153, "do_goto": 153, "do_hom": 153, "do_circl": 153, "do_posit": 153, "do_color": 153, "do_undo": 153, "do_reset": 153, "do_by": 153, "do_record": 153, "rose": [153, 258, 475, 479], "spiral": 153, "180": [153, 232, 340, 380, 471], "__console__": 154, "readfunc": 154, "exitmsg": 154, "stuf": 154, "data_encod": 155, "file_encod": 155, "transcod": [155, 403, 471], "base64_codec": 155, "rot_13": 155, "xdf": [155, 232, 301], "u266c": 155, "223": 155, "9836": 155, "xhh": [155, 431, 479], "uxxxx": [155, 431], "uxxxxxxxx": [155, 431], "d800": 155, "dfff": 155, "error_handl": [155, 410], "utf_8": [155, 479], "rescan": [155, 299], "recov": [155, 187, 210, 218, 349, 393, 411, 465, 470, 471], "firstlin": [155, 185], "huge": [155, 255, 458, 473, 479], "reposit": [155, 255], "resp": [155, 263, 285, 304, 474], "frontend": 155, "backend": [155, 174, 337, 349, 358, 386, 452], "adher": [155, 164, 242, 259, 266, 280, 430], "0x0": 155, "00ff": [155, 471, 472, 479], "charmap": 155, "fffe": 155, "ligatur": 155, "2060": [155, 245], "joiner": [155, 474, 479], "role": [155, 338, 409, 466, 471, 477, 479], "payload": [155, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 239, 248, 465, 479], "00000000": 155, "0000007f": 155, "0xxxxxxx": 155, "00000080": 155, "000007ff": 155, "110xxxxx": 155, "10xxxxxx": 155, "00000800": 155, "0000ffff": 155, "1110xxxx": 155, "00010000": 155, "0010ffff": 155, "11110xxx": 155, "invent": [155, 268, 361, 430, 461, 465], "notepad": [155, 431], "0xef": 155, "0xbb": 155, "0xbf": 155, "improb": 155, "diaeresi": 155, "quotat": [155, 345, 464, 479], "iso8859": 155, "utf16": 155, "utf32": 155, "euro": [155, 465, 466], "ebcdic": [155, 473], "pc": [155, 174, 271, 402, 418, 431, 452, 457, 464, 469, 479], "big5": [155, 462], "csbig5": 155, "big5hksc": [155, 462], "hkscs": 155, "cp037": 155, "ibm037": 155, "ibm039": 155, "cp273": [155, 473], "ibm273": 155, "csibm273": 155, "cp424": 155, "he": [155, 294, 316, 361, 431, 458, 475], "ibm424": 155, "cp437": [155, 418], "437": 155, "ibm437": 155, "cp500": 155, "ibm500": 155, "western": [155, 362], "europ": [155, 163, 362, 421, 465], "cp720": [155, 465, 471], "cp737": 155, "cp775": 155, "ibm775": 155, "baltic": 155, "cp850": 155, "850": [155, 465], "ibm850": 155, "cp852": 155, "852": 155, "ibm852": 155, "central": [155, 180, 191, 202, 284, 340, 458, 459, 460, 461, 463, 471, 479], "eastern": [155, 180, 362, 475], "cp855": 155, "855": [155, 218], "ibm855": 155, "bulgarian": 155, "byelorussian": 155, "macedonian": 155, "serbian": 155, "cp856": 155, "cp857": 155, "857": 155, "ibm857": 155, "cp858": [155, 465], "858": 155, "ibm858": 155, "cp860": 155, "860": 155, "ibm860": 155, "portugues": [155, 479], "cp861": 155, "861": [155, 293], "ibm861": 155, "iceland": [155, 463], "cp862": 155, "862": 155, "ibm862": 155, "cp863": 155, "863": 155, "ibm863": 155, "cp864": 155, "ibm864": 155, "cp865": 155, "865": 155, "ibm865": 155, "danish": 155, "cp866": 155, "866": [155, 187, 477], "ibm866": 155, "cp869": 155, "869": 155, "gr": [155, 463, 468, 469, 477, 479], "ibm869": 155, "cp874": 155, "cp875": 155, "cp932": [155, 462], "932": 155, "ms932": 155, "mskanji": 155, "kanji": 155, "cp949": [155, 462], "949": 155, "ms949": 155, "uhc": 155, "cp950": [155, 462], "950": 155, "ms950": 155, "cp1006": 155, "urdu": 155, "cp1026": 155, "ibm1026": 155, "cp1125": [155, 473], "1125": 155, "ibm1125": 155, "cp866u": 155, "ruscii": 155, "cp1140": 155, "ibm1140": 155, "cp1250": [155, 164], "1250": 155, "cp1251": 155, "1251": 155, "1252": [155, 444, 448], "cp1253": 155, "1253": 155, "cp1254": 155, "1254": [155, 316], "cp1255": 155, "1255": 155, "cp1256": 155, "1256": 155, "cp1257": 155, "1257": 155, "cp1258": 155, "1258": 155, "euc_jp": 155, "eucjp": 155, "uji": 155, "jis": [155, 462], "euc_jis_2004": 155, "jisx0213": [155, 462], "eucjis2004": 155, "euc_jisx0213": 155, "eucjisx0213": 155, "euc_kr": 155, "euckr": 155, "korean": [155, 462, 476, 479], "ksc5601": 155, "ks_c": 155, "5601": 155, "ksx1001": 155, "ks_x": 155, "gb2312": [155, 383, 462, 472], "chines": [155, 462, 479], "csiso58gb231280": 155, "euc": [155, 192, 462], "cn": 155, "euccn": 155, "eucgb2312": 155, "1980": [155, 187, 418, 479], "ir": 155, "gbk": [155, 462], "936": 155, "cp936": 155, "ms936": 155, "gb18030": [155, 462, 479], "hz": [155, 462, 472, 479], "hzgb": 155, "gb": [155, 338, 479], "2312": 155, "iso2022_jp": 155, "csiso2022jp": 155, "iso2022jp": 155, "2022": [155, 180, 192, 232, 444, 447, 462, 469, 479], "jp": [155, 192, 422, 462], "iso2022_jp_1": 155, "iso2022_jp_2": 155, "iso2022_jp_2004": 155, "iso2022_jp_3": 155, "iso2022_jp_ext": 155, "iso2022_kr": 155, "csiso2022kr": 155, "iso2022kr": 155, "kr": [155, 462], "latin_1": [155, 192, 479], "cp819": 155, "iso8859_2": 155, "latin2": 155, "iso8859_3": 155, "latin3": 155, "l3": 155, "esperanto": 155, "maltes": 155, "iso8859_4": 155, "latin4": 155, "l4": 155, "iso8859_5": 155, "cyril": 155, "iso8859_6": 155, "iso8859_7": 155, "greek8": 155, "iso8859_8": 155, "iso8859_9": 155, "latin5": 155, "l5": 155, "iso8859_10": 155, "latin6": 155, "l6": [155, 472], "nordic": 155, "iso8859_11": 155, "iso8859_13": 155, "latin7": 155, "l7": 155, "iso8859_14": 155, "latin8": 155, "l8": 155, "celtic": 155, "iso8859_15": 155, "latin9": 155, "l9": 155, "iso8859_16": 155, "latin10": 155, "l10": 155, "johab": [155, 462], "cp1361": 155, "ms1361": 155, "koi8_r": 155, "koi8_t": [155, 474, 479], "tajik": [155, 474], "koi8_u": 155, "kz1048": [155, 474, 479], "kz_1048": 155, "strk1048_2002": 155, "rk1048": 155, "kazakh": [155, 474], "mac_cyril": 155, "maccyril": 155, "mac_greek": 155, "macgreek": 155, "mac_iceland": 155, "maciceland": 155, "mac_latin2": [155, 479], "maclatin2": 155, "maccentraleurop": 155, "mac_centeuro": [155, 479], "mac_roman": 155, "macroman": 155, "mac_turkish": 155, "macturkish": 155, "ptcp154": 155, "csptcp154": 155, "pt154": 155, "cp154": 155, "asian": [155, 383, 462], "shift_ji": 155, "csshiftji": 155, "shiftji": 155, "sjis": 155, "s_jis": 155, "shift_jis_2004": 155, "shiftjis2004": 155, "sjis_2004": 155, "sjis2004": 155, "shift_jisx0213": 155, "shiftjisx0213": 155, "sjisx0213": 155, "s_jisx0213": 155, "utf_32": 155, "u32": 155, "utf_32_b": 155, "32be": 155, "utf_32_l": 155, "32le": 155, "utf_16": 155, "u16": 155, "utf_16_b": 155, "16be": 155, "utf_16_l": 155, "16le": 155, "utf_7": 155, "u7": 155, "u8": 155, "cp65001": [155, 472, 479], "asymmetr": 155, "3490": [155, 461], "oem": [155, 475, 479], "cp_oemcp": [155, 475], "palmo": 155, "3492": [155, 461], "raw_unicode_escap": 155, "bewar": [155, 210, 218, 259, 280, 327, 337, 338, 428, 447, 466], "unicode_intern": [155, 472, 477, 479], "base_64": 155, "bz2_codec": [155, 473], "hex_codec": [155, 473], "quopri_codec": 155, "quotedprint": 155, "quoted_print": 155, "uu_codec": [155, 479], "zlib_codec": 155, "rot13": [155, 473, 479], "caesar": 155, "cypher": 155, "encrypt": [155, 170, 230, 245, 265, 285, 302, 332, 336, 338, 418, 458, 460, 461, 465, 471, 472, 473, 479], "idn": [155, 338, 476, 479], "5891": 155, "5895": 155, "alliancefran": [155, 461], "ais": [155, 461], "nu": [155, 461], "ace": [155, 315, 316, 461], "xn": [155, 338, 461, 476], "alliancefranais": [155, 461], "npb": [155, 461], "allowunassign": 155, "usestd3asciirul": 155, "outcom": [156, 164, 382, 384, 385, 423, 479], "subcontext": 157, "baselin": [157, 363, 368], "bach": 157, "rembrandt": 157, "gogh": 157, "opera": [157, 399, 463, 479], "carmen": 157, "584": [157, 290, 381, 398, 478, 479], "enthought": [157, 457], "codetool": 157, "multicontext": 157, "pylookup": 157, "guest": [157, 334, 479], "command_line_arg": 157, "deepchainmap": 157, "inner": [157, 166, 188, 232, 234, 252, 316, 337, 341, 380, 382, 409, 423, 425, 462, 465, 471, 472, 479], "eleph": 157, "lion": 157, "topmost": [157, 349, 463, 479], "talli": [157, 465, 471, 472], "cnt": 157, "hamlet": [157, 458], "1143": 157, "966": 157, "762": 157, "631": 157, "546": [157, 378], "514": [157, 266, 457, 461, 469, 479], "bag": [157, 197, 423, 436], "multiset": [157, 471], "gallahad": [157, 438, 467], "sausag": [157, 222, 341], "list_of_pair": 157, "knuth": [157, 183], "donald": [157, 338, 465, 473], "deck": [157, 315], "ghi": [157, 173, 264, 328, 462], "jkl": 157, "pyshel": [157, 183, 244, 316, 475, 476, 477, 479], "moving_averag": 157, "39": [157, 180, 190, 280, 290, 362, 452, 462, 468, 472, 477, 478, 479], "roundrobin": [157, 258], "delete_nth": 157, "rot": [157, 460, 479], "roll": [157, 180, 266, 337, 358, 384, 436, 463, 464, 479], "mississippi": [157, 341], "constant_factori": 157, "ran": [157, 190, 210, 345, 384, 464, 465, 470, 479], "typenam": [157, 304, 337, 464, 479], "field_nam": [157, 342], "_1": [157, 465, 467], "_3": 157, "_sourc": [157, 476, 479], "employeerecord": 157, "depart": [157, 222, 341], "paygrad": 157, "emp": 157, "employe": [157, 382, 436, 479], "companydata": 157, "partnum": 157, "inventori": [157, 178, 288], "newpric": 157, "pixel": [157, 365, 368, 372, 380, 479], "premium": 157, "000": [157, 173, 180, 183, 232, 258, 279, 305, 457, 470, 471, 472], "714": 157, "018": 157, "hardcov": 157, "isbn": [157, 365, 450], "part_numb": 157, "lru": [157, 223, 479], "k1": [157, 398], "k2": [157, 398], "od": [157, 465, 468, 471, 479], "acdeb": 157, "bacd": 157, "od1": [157, 465], "od2": [157, 465], "lastupdatedordereddict": 157, "timeboundedlru": 157, "maxag": 157, "multihitlrucach": 157, "maxrequest": 157, "cache_aft": 157, "uncached_key": 157, "request_count": 157, "cached_key": 157, "function_result": 157, "uncach": [157, 290, 471, 479], "initialdata": 157, "_collections_abc": 158, "gencoro": 158, "myvar": 158, "listbasedset": 158, "lst": [158, 294], "abcdef": [158, 173, 255, 258, 316, 465, 473], "defghi": [158, 258], "_from_iter": 158, "_hash": [158, 479], "orderedset": 158, "yiq": [159, 473], "hls": 159, "hsv": 159, "poynton": 159, "colorfaq": 159, "cambridgeincolour": 159, "htm": [159, 180, 242, 460, 461, 462, 463, 464, 465, 466], "qq": 160, "destdir": [160, 479], "strip_prefix": 160, "prepend_prefix": 160, "coexist": 160, "uncheck": [160, 428, 451, 476, 479], "source_date_epoch": [160, 308, 476, 479], "hardlink": [160, 354, 478, 479], "dupe": [160, 478], "consolid": [160, 281, 461, 472, 475, 479], "multilevel": [160, 479], "ddir": [160, 479], "rx": [160, 316], "invalidation_mod": [160, 308, 476, 479], "stripdir": [160, 478, 479], "prependdir": [160, 478, 479], "limit_sl_dest": [160, 478, 479], "hardlink_dup": [160, 478], "fullnam": [160, 247, 249, 250, 299, 419, 461], "skip_curdir": 160, "323": [163, 475], "1235": 163, "cancel_futur": [163, 478, 479], "src1": [163, 471], "dest1": [163, 471], "src2": [163, 471], "dest2": [163, 471], "src3": [163, 471], "dest3": [163, 471], "src4": 163, "dest4": [163, 471], "wait_on_b": 163, "wait_on_a": 163, "wait_on_futur": 163, "thread_name_prefix": [163, 475, 479], "initarg": [163, 280, 476], "grace": [163, 316, 330, 361, 426, 465, 471, 476, 479], "foxnew": 163, "cnn": [163, 181], "wsj": 163, "nonexist": [163, 403, 479], "subdomain": 163, "load_url": 163, "future_to_url": 163, "mp_context": [163, 280, 476, 479], "max_tasks_per_child": [163, 479], "61": [163, 341, 362, 462, 479], "start_method": 163, "112272535095293": 163, "112582705942171": 163, "115280095190773": 163, "115797848077099": 163, "1099726899285419": 163, "is_prim": 163, "sqrt_n": 163, "not_don": 163, "serveraliveinterv": 164, "compressionlevel": 164, "forwardx11": 164, "forg": 164, "hg": [164, 293, 338, 461, 465, 471, 479], "topsecret": 164, "50022": 164, "configfil": 164, "another_config": 164, "nport": 164, "48484": 164, "21212": 164, "3des": [164, 338, 475, 479], "cbc": [164, 334], "monster": [164, 360], "batchmod": 164, "14159265359": [164, 440, 442], "chorus": 164, "lumberjack": [164, 304, 377], "night": 164, "key_without_valu": 164, "harm": [164, 223, 289, 417, 471, 479], "can_values_be_as_wel": 164, "does_that_mean_anything_speci": 164, "multiline_valu": 164, "home_dir": 164, "my_dir": 164, "my_pictur": 164, "zc": 164, "buildout": [164, 471], "library_dir": 164, "system_dir": 164, "macports_dir": 164, "arthur": [164, 341, 477, 479], "nicknam": 164, "shed": 164, "last_nam": [164, 172, 316], "jackson": [164, 473], "twosh": 164, "python_dir": 164, "defaultsect": 164, "section_nam": 164, "section_proxi": 164, "dict_typ": [164, 301], "section1": 164, "key1": [164, 423, 478], "key2": [164, 423, 478], "key3": [164, 478], "value3": [164, 478], "section2": 164, "keya": 164, "valuea": 164, "keyb": 164, "valueb": 164, "keyc": 164, "valuec": 164, "section3": 164, "allow_no_valu": [164, 465], "sample_config": [164, 465], "mysqld": [164, 465], "mysql": [164, 220, 465], "old_password": 164, "acid": [164, 460, 470], "innodb": 164, "space_around_delimit": 164, "comment_prefix": 164, "inline_comment_prefix": 164, "enabled_extens": 164, "another_extens": 164, "disabled_by_com": 164, "yet_another_extens": 164, "empty_lines_in_valu": 164, "gotcha": 164, "she": 164, "default_sect": 164, "parser_inst": 164, "getdecim": 164, "unsuit": [164, 324, 409, 459, 465, 479], "anotherkey": 164, "larch": 164, "optcr": 164, "downright": 164, "counterintuit": 164, "an_int": 164, "a_bool": 164, "a_float": 164, "1415": [164, 183, 464], "evil": [164, 465, 479], "intrins": [164, 188, 296, 424, 467, 479], "fileobject": [164, 468], "cfgparser": 164, "footnot": 164, "managed_resourc": 166, "acquire_resourc": 166, "release_resourc": 166, "trap": [166, 183, 363, 460, 462, 472, 479], "get_connect": 166, "acquire_db_connect": 166, "release_db_connect": 166, "get_all_us": 166, "my_gener": 166, "enter_result": 166, "ignore_except": 166, "process_fil": 166, "file_or_path": 166, "send_http": 166, "aiohttp": 166, "clientsess": 166, "somefil": [166, 201, 227, 290, 328, 376], "someotherfil": 166, "new_target": [166, 367], "relinquish": [166, 281, 290, 361, 362], "mycontext": 166, "contextbaseclass": 166, "close_fil": 166, "need_special_resourc": 166, "acquire_special_resourc": 166, "release_special_resourc": 166, "acquisit": [166, 212, 264, 361, 471, 479], "resourcemanag": 166, "check_resource_ok": 166, "_cleanup_on_error": 166, "exc_detail": 166, "cleanup_need": 166, "perform_oper": 166, "cleanup_resourc": 166, "cb": [166, 258], "track_entry_and_exit": [166, 471], "exc_tb": [166, 330, 341], "load_widget": [166, 471], "singleus": 166, "write_to_stream": 166, "innermost": [166, 190, 311, 349, 382, 426, 473, 479], "outer_stack": 166, "inner_stack": 166, "bleed": 167, "client_addr_var": 167, "client_addr": 167, "render_goodby": 167, "8081": 167, "memo": [168, 296, 297, 427, 475, 479], "copied_list": 168, "original_list": 168, "__copy__": [168, 470, 479], "__deepcopy__": [168, 479], "constructor_ob": 169, "pickle_c": 169, "passlib": 170, "des": [170, 307], "crack": [170, 187], "salt": [170, 232, 323, 424, 451, 471, 472, 479], "sha": [170, 232, 394, 463, 464, 468, 471, 472, 475, 479], "strongest": [170, 465], "blowfish": [170, 476, 479], "weakest": 170, "method_": 170, "perturb": 170, "999_999_999": 170, "5000": [170, 183], "2_147_483_648": 170, "exposur": [170, 472], "compare_hash": 170, "cryptedpasswd": 170, "cleartext": [170, 266], "plaintext": [170, 245, 472], "4180": [172, 479], "csvfile": 172, "fmtparam": 172, "spamread": 172, "bake": [172, 316], "bean": [172, 316], "stringifi": [172, 377, 469, 479], "spamwrit": 172, "new_limit": [172, 463], "restkey": 172, "restval": 172, "first_nam": [172, 316], "clees": [172, 409, 437, 477], "extrasact": [172, 479], "putat": 172, "heurist": [172, 187, 194, 200, 222, 467, 471, 479], "recognis": [172, 210, 265, 299, 328, 337, 385, 424, 479], "quote_": 172, "passwd": [172, 220, 293, 307, 357, 384, 391, 462, 463, 464], "someiter": 172, "unixpwd": 172, "linend": 172, "cdecl": 173, "stdcall": 173, "kernel32": [173, 349, 479], "libc": [173, 254, 300, 345, 452, 463, 479], "getmodulehandlea": 173, "myownfunct": 173, "239": 173, "_stdcallfuncptr": 173, "user32": 173, "getmodulehandl": 173, "hmodul": 173, "lpcstr": 173, "lpmodulenam": 173, "getmodulehandlew": 173, "lpcwstr": 173, "yapaxi": 173, "310": 173, "rand": [173, 338], "1804289383": 173, "0x1d000000": 173, "erron": [173, 289, 380, 405, 421, 458, 473, 474, 476, 478, 479], "_bool": [173, 344, 464], "__int64": 173, "time_t": [173, 479], "140018365411392": 173, "65533": 173, "c_s": 173, "139966785747344": 173, "139966783348904": 173, "x00lo": 173, "c_buffer": 173, "beer": [173, 479], "1234": [173, 183, 256, 310, 326, 341, 374, 394, 438, 464, 468, 474, 479], "140000": [173, 342], "arm64": [173, 478, 479], "inhibit": [173, 247, 311], "_as_parameter_": 173, "200000": [173, 363], "37": [173, 242, 315, 341, 342, 378, 402, 447, 462, 465, 467, 468, 469, 476, 477, 478, 479], "000000": [173, 180, 460], "typecheck": [173, 382, 479], "1150640792": 173, "strchr": 173, "8059983": 173, "validhandl": 173, "486539264": 173, "silli": [173, 289, 386], "126": [173, 256, 378, 477], "sscanf": 173, "1400001049": 173, "upperleft": 173, "lowerright": 173, "ofs": 173, "pragma": [173, 479], "first_16": 173, "second_16": 173, "tenpointsarraytyp": 173, "artifici": [173, 409, 424, 470, 473, 479], "mystruct": [173, 280], "point_array": 173, "arr": [173, 280, 440], "pt": 173, "teninteg": 173, "c_long_array_10": 173, "oor": 173, "scene": [173, 380, 457], "lp_c_long": 173, "null_ptr": 173, "dereferenc": [173, 398, 472, 479], "c_byte_array_4": 173, "c1": [173, 341], "c2": 173, "qsort": 173, "intarray5": 173, "ia": 173, "cmpfunc": 173, "py_cmp_func": 173, "cmp_func": 173, "pythonapi": [173, 463], "0x30c00a0": 173, "struct_frozen": 173, "frozent": 173, "_pyimport_frozenbootstrap": 173, "_frozen_importlib": [173, 280, 479], "31764": [173, 479], "_frozen_importlib_extern": [173, 479], "41499": 173, "__hello__": [173, 479], "p1": [173, 258, 281, 345, 423, 462, 469, 474], "hm": 173, "temp0": 173, "temp1": 173, "short_array": 173, "dylib": [173, 479], "ldconfig": [173, 479], "objdump": 173, "ld_library_path": [173, 475, 479], "libbz2": 173, "agl": 173, "default_mod": 173, "use_errno": [173, 464], "use_last_error": [173, 464], "winmod": [173, 477], "dumpbin": 173, "manpag": [173, 290, 334, 475, 479], "setlasterror": 173, "hijack": 173, "prefabr": 173, "dlltype": 173, "func_spec": 173, "paramflag": 173, "name_or_ordin": 173, "vtbl_index": 173, "iid": [173, 372, 479], "messageboxw": 173, "winuserapi": 173, "winapi": [173, 329, 345, 479], "hwnd": 173, "lptext": 173, "lpcaption": 173, "uint": 173, "utyp": 173, "wintyp": [173, 479], "caption": 173, "getwindowrect": 173, "lprect": 173, "obj_or_typ": 173, "init_or_s": 173, "_ctype": [173, 422, 465, 476, 479], "lasterror": [173, 464], "enlarg": [173, 479], "writeabl": [173, 222, 255, 338, 345, 479], "wparam": 173, "dword": 173, "pnext": 173, "_u": 173, "lptdesc": 173, "typedesc": 173, "lpadesc": 173, "arraydesc": 173, "hreftyp": 173, "vartyp": 173, "td": [173, 180], "vt_ptr": 173, "some_typ": 173, "facto": [174, 240, 249, 354, 390, 415], "driver": [174, 190, 209, 227, 290, 292, 334, 358, 401, 402, 412, 461, 479], "color_numb": 174, "a_": 174, "ground": 174, "cup": 174, "cud": 174, "cud1": 174, "cuu1": 174, "cuu": 174, "vpa": 174, "confin": [174, 190], "bell": [174, 175, 365, 431, 463, 479], "bstate": 174, "button5_": [174, 468, 479], "256color": [174, 479], "region": [174, 244, 275, 279, 281, 290, 316, 365, 372, 380, 436, 464, 467, 479], "fg": [174, 258, 341, 365, 372], "bg": [174, 365, 372, 380, 479], "nline": [174, 185], "ncol": 174, "deiniti": 174, "terminfo": 174, "elaps": [174, 266, 280, 290, 305, 326, 334, 361, 362, 384, 471, 479], "availmask": 174, "oldmask": 174, "pminrow": 174, "pmincol": 174, "sminrow": 174, "smincol": 174, "smaxrow": 174, "smaxcol": 174, "vertic": [174, 175, 294, 341, 342, 360, 365, 368, 370, 371, 372, 380, 423, 430, 431], "intr": 174, "susp": 174, "tput": 174, "putchar": 174, "capnam": 174, "4h": [174, 344], "breakout": 174, "newterm": 174, "subwindow": 174, "20190511": 174, "stuck": 174, "tl": 174, "bl": 174, "vertch": 174, "horch": 174, "repaint": 174, "degrad": [174, 471, 479], "wrefresh": 174, "movement": [174, 380, 464, 471, 479], "new_i": 174, "new_x": 174, "destwin": 174, "dminrow": 174, "dmincol": 174, "dmaxrow": 174, "dmaxcol": 174, "beg": 174, "rendit": 174, "dim": 174, "key_": 174, "keycap": 174, "arrow": [174, 244, 294, 371, 372, 380], "redo": [174, 244, 479], "key_f1": 174, "key_f2": 174, "key_f3": 174, "key_f4": 174, "twelv": [174, 372], "vt100": 174, "crude": 174, "acs": 174, "solid": [174, 472, 473], "bullet": [174, 296], "stippl": 174, "lantern": 174, "crossov": 174, "pound": [174, 187], "sterl": 174, "greenish": 174, "purplish": 174, "bbedit": [174, 455], "framemak": 174, "uli": 174, "ulx": 174, "lri": 174, "lrx": 174, "land": [174, 479], "enquiri": 175, "xon": 175, "xoff": 175, "mnemon": [175, 265, 338, 372, 460], "teleprint": 175, "0x1f": [175, 468, 470], "0x7f": [175, 341], "thirti": [175, 313], "557": [178, 378, 476, 479], "inventoryitem": 178, "unit_pric": 178, "quantity_on_hand": 178, "total_cost": 178, "unsafe_hash": [178, 382, 479], "match_arg": [178, 382, 479], "weakref_slot": [178, 479], "dunder": [178, 431, 477, 479], "nonetheless": [178, 245], "__weakref__": [178, 398, 424, 479], "contribut": [178, 227, 232, 305, 316, 393, 422, 428, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "class_or_inst": 178, "initvar": [178, 479], "dict_factori": [178, 337, 479], "tuple_factori": 178, "cls_name": [178, 208], "add_on": 178, "forewarn": 178, "is_dataclass_inst": 178, "databasetyp": 178, "my_databas": 178, "intconversiondescriptor": 178, "_default": 178, "zone": [180, 206, 256, 334, 362, 421, 422, 452, 461, 463, 465, 478, 479], "categor": [180, 289, 316, 396, 426], "polit": [180, 458], "metr": 180, "mile": 180, "est": [180, 362, 471, 475], "edt": [180, 362, 472, 475], "customiz": [180, 365, 465, 479], "29000": [180, 479], "29156": 180, "tiebreak": 180, "t1": [180, 183, 258, 382, 395], "t2": [180, 183, 258, 382, 395], "t3": [180, 183, 289, 382], "quotient": [180, 183, 272, 305, 341, 426, 445], "uuuuuu": 180, "68400": 180, "delta1": 180, "delta2": 180, "270": [180, 380], "accuraci": [180, 222, 258, 272, 305, 363, 440, 462, 470, 479], "another_year": 180, "84": [180, 340, 475, 477, 479], "31536000": 180, "ten_year": 180, "3650": 180, "nine_year": 180, "3285": 180, "three_year": 180, "1095": [180, 285], "2038": [180, 362, 479], "date_str": 180, "yyyi": [180, 245], "ddd": 180, "2019": [180, 340, 451, 477, 479], "20191204": 180, "2021": [180, 464, 468, 479], "w01": 180, "dd": [180, 245, 258, 289], "date2": 180, "date1": 180, "comparand": 180, "yday": 180, "isocalendard": 180, "2007": [180, 365, 422, 464, 479], "my_birthday": 180, "time_to_birthday": 180, "730920": 180, "730920th": 180, "70th": 180, "ic": [180, 344, 464], "tz": [180, 358, 362, 421, 470, 479], "gettimeofday": [180, 362, 479], "formula": [180, 227, 341, 479], "2011": [180, 200, 338, 409, 422, 424, 451, 471], "20111104": 180, "04t00": 180, "23z": 180, "20111104t000523": 180, "2t00": 180, "283000": 180, "14400": 180, "datetime2": 180, "datetime1": 180, "astz": 180, "dt": [180, 206, 415, 421, 478], "magnitud": [180, 183, 259, 272, 341, 342, 405, 440, 458, 472], "tm_isdst": [180, 362], "spill": 180, "timespec": [180, 475, 479], "ddthh": 180, "ffffff": [180, 380], "hh": [180, 245, 362, 431], "132263": 180, "18t15": 180, "27t00": 180, "000100": 180, "25t00": 180, "01t12": 180, "79043": 180, "79060": 180, "tt": 180, "325": [180, 183, 463], "30pm": 180, "kabul": 180, "afghanistan": 180, "1945": 180, "thereaft": [180, 244, 263, 391], "kabultz": 180, "utc_move_d": 180, "1944": 180, "pep495": 180, "tz1": 180, "dt1": 180, "dt2": 180, "dt3": 180, "midnight": [180, 266, 464, 471, 474], "obscur": [180, 190, 385, 464, 473, 474, 476, 479], "13936": [180, 474, 479], "time_str": 180, "t04": 180, "t042301": 180, "000384": 180, "01z": 180, "123456": 180, "geograph": 180, "dston": 180, "dstoff": 180, "america": [180, 421, 422, 465, 478], "york": 180, "repli": [180, 200, 242, 268, 280, 285, 332, 391, 479], "straddl": 180, "dtoff": 180, "dtdst": 180, "tzinfo_exampl": 180, "_time": 180, "stdoffset": 180, "dstoffset": 180, "dstdiff": 180, "localtimezon": 180, "dst_diff": 180, "_isdst": 180, "first_sunday_on_or_aft": 180, "days_to_go": 180, "olson": [180, 479], "pytz": 180, "twinsun": 180, "2am": 180, "dststart_2007": 180, "dstend_2007": 180, "dststart_1987_2006": 180, "dstend_1987_2006": 180, "1967": [180, 380, 465], "dststart_1967_1986": 180, "dstend_1967_1986": 180, "us_dst_rang": 180, "dststart": 180, "dstend": 180, "1966": 180, "ustimezon": 180, "reprnam": 180, "stdname": [180, 305], "dstname": [180, 329], "gap": [180, 266, 268, 471, 479], "std_time": 180, "dst_time": 180, "cst": 180, "cdt": 180, "mountain": 180, "mst": 180, "mdt": 180, "pacif": [180, 421], "pst": [180, 421, 478], "pdt": [180, 421, 478], "0500": [180, 206], "u0": [180, 475], "mimic": [180, 252, 264, 344, 377, 380, 465, 467, 479], "bring": [180, 244, 258, 342, 371, 385, 473, 474, 477, 478, 479], "tzdata": [180, 421, 478, 479], "globe": 180, "civil": 180, "59pm": 180, "en_us": [180, 474, 479], "mo": [180, 227, 316, 341, 461, 475, 477, 479], "de_d": [180, 263, 474], "sonntag": 180, "montag": 180, "samstag": 180, "dez": 180, "januar": 180, "februar": 180, "dezemb": 180, "0002": 180, "2014": [180, 234, 338, 464, 465, 473, 479], "9998": [180, 475, 479], "000001": 180, "hhmm": [180, 245, 362], "0400": [180, 472], "1030": 180, "063415": 180, "030712": 180, "345216": 180, "002": [180, 305, 341], "1988": [180, 187, 354, 464], "di": [180, 463], "c89": [180, 464], "01t00": 180, "0330": 180, "japan": [180, 263], "jst": 180, "gent": 180, "oracl": [181, 337, 463, 472, 479], "unread": [181, 296, 391, 467, 474, 479], "prevail": [181, 426, 479], "cabl": 181, "open_flag": 181, "unwritten": [181, 479], "pag": 181, "bottleneck": [182, 223, 467], "paramount": 183, "school": [183, 344, 461], "3000000000000003": 183, "5511151231257827e": 183, "017": 183, "customari": [183, 360, 422, 451], "monetari": [183, 263, 463, 476, 479], "schoolbook": 183, "multiplicand": 183, "5600": 183, "prec": [183, 448, 462, 463, 464], "142857": [183, 190], "1428571428571428571428571429": [183, 462], "modest": [183, 479], "prejudic": 183, "unround": 183, "coeffici": [183, 258, 272, 340, 341, 342, 461, 473, 479], "differenti": [183, 317, 391, 471, 472, 475, 478, 479], "sticki": [183, 339, 354, 372], "emin": [183, 472], "emax": [183, 472], "140000000000000124344978758017532527446746826171875": 183, "4142135623730951": 183, "414213562373095048801688724": 183, "1415926535": 183, "7182818285": 183, "85987": 183, "85988": 183, "1e9999999999999999999": 183, "circus": [183, 222, 435], "87": [183, 245, 340, 345], "5058": 183, "718281828459045235360287471": [183, 464], "302585092994045684017991455": 183, "myothercontext": 183, "142857142857142857142857142857142857142857142857142857142857": 183, "142857143": [183, 462], "143": [183, 245, 378, 380, 460], "355": [183, 218], "113": [183, 218, 445], "14159292": 183, "snan": [183, 465], "devan": 183, "gar": [183, 293], "fullwidth": 183, "uff10": 183, "uff19": 183, "100000000000000088817841970012523233890533447265625": [183, 467, 471], "00000": 183, "321e": 183, "157": [183, 475], "decimaltupl": 183, "unequ": [183, 341, 424, 426, 462, 463, 466, 472, 479], "unaffect": [183, 329, 362, 424, 432, 451, 461, 464, 475, 479], "compli": [183, 259, 268, 311, 422, 464, 479], "561702493119680037517373933e": 183, "139": [183, 378, 460], "0x1": [183, 341, 440, 464, 467, 468, 470], "999999999999ap": 183, "1000000000000000055511151231257827021181583404541015625": [183, 440, 465], "fuse": 183, "closest": [183, 218, 222, 272, 423, 464, 465, 470, 479], "321000e": 183, "41421356": 183, "123e": 183, "23e": 183, "calculate_someth": 183, "halt": [183, 209, 289, 293, 384, 473], "02e": 183, "weaker": [183, 459], "999": [183, 281], "23e999": 183, "23000e": 183, "4445": 183, "0023": 183, "recount": 183, "qnan": 183, "msd": 183, "scientif": [183, 342, 450, 457, 464], "425000000": [183, 472], "999999999999999999": [183, 472], "849999999": 183, "1999999999999999997": 183, "inward": 183, "outward": 183, "stricter": [183, 385, 458, 459, 463, 472, 474, 476, 479], "amplifi": 183, "breakdown": 183, "seminumer": 183, "11111113": 183, "11111111": [183, 341], "51111111": 183, "5111111": 183, "20000": [183, 363], "0000003": 183, "0060000": 183, "affin": [183, 479], "indetermin": [183, 349, 372, 396, 404], "854": [183, 355], "0e": 183, "1000026": 183, "interf": [183, 280, 363, 426, 473], "applicationwid": 183, "moneyfmt": 183, "curr": 183, "dp": [183, 479], "trailneg": 183, "money": [183, 345, 422], "1234567": [183, 218, 448, 467], "8901": [183, 478, 479], "568": 183, "123456789": 183, "141592653589793238462643383": 183, "na": [183, 323, 459, 468, 469, 470, 477, 478, 479], "da": [183, 258, 316], "389056098930650227230427461": 183, "38905609893": 183, "0j": [183, 222, 341, 415, 479], "taylor": [183, 464, 479], "8775825618903727161162815826": 183, "87758256189": 183, "4794255386042030002732879352": 183, "479425538604": 183, "twoplac": 183, "214": [183, 305], "72": [183, 244, 258, 340, 380, 462, 463, 479], "105": [183, 340], "4314": 183, "2e2": 183, "2e": [183, 479], "philosophi": [183, 193, 466], "1416": [183, 438], "00005": 183, "remove_expon": 183, "5e": [183, 344], "141592653589793115997963468544185161590576171875": 183, "spurious": [183, 330, 467, 479], "anomali": 183, "ill": [183, 301, 471, 476, 479], "104": [183, 340, 471, 477, 478], "23456789": 183, "2345678": 183, "2345": 183, "pypy3": 183, "karatsuba": [183, 461], "bignum": [183, 341, 472], "904625697166532776746648320380374280103671755200316906558262375061821325312": 183, "overalloc": [183, 341, 477, 479], "8gb": 183, "500mb": 183, "maxdigit": [183, 349], "524288112": 183, "tighter": [183, 423, 462, 472], "269": [185, 479], "unclos": [185, 244, 337, 471, 475, 479], "rst": [185, 293, 452, 456, 476, 479], "18748": [185, 477, 479], "modal": [186, 366, 369], "initialdir": 186, "initialfil": 186, "defaultextens": 186, "mustexist": 186, "dir_or_fil": 186, "ratcliff": 187, "obershelp": 187, "gestalt": 187, "longest": [187, 256, 258, 431, 460, 463, 474], "cubic": 187, "autojunk": 187, "intralin": 187, "intra": 187, "wrapcolumn": 187, "linejunk": 187, "charjunk": 187, "fromlin": 187, "tolin": 187, "fromdesc": 187, "todesc": 187, "numlin": 187, "hyperlink": [187, 479], "fromfiled": 187, "tofiled": 187, "lineterm": 187, "eggi": 187, "hamster": 187, "cutoff": [187, 479], "appel": 187, "ape": 187, "peach": 187, "puppi": 187, "pineappl": 187, "constitut": [187, 256, 328, 390, 422, 479], "nois": [187, 289, 290, 340, 479], "ntwo": 187, "nthree": 187, "ntree": 187, "nemu": 187, "emu": 187, "dfunc": 187, "metzen": 187, "dr": [187, 220, 360, 471], "dobb": 187, "journal": 187, "isjunk": 187, "synch": 187, "bjunk": [187, 473], "bpopular": [187, 473], "b2j": 187, "alo": 187, "ahi": 187, "blo": 187, "bhi": 187, "abxcd": 187, "j1": [187, 456, 479], "j2": 187, "qabxcd": 187, "abycdf": 187, "cluster": [187, 222, 334, 451, 464], "tide": [187, 371], "diet": 187, "bcde": [187, 258, 465], "volatil": [187, 281, 479], "text1": 187, "text2": 187, "flat": [187, 198, 201, 365, 372, 408], "interlin": 187, "file_mtim": 187, "fromdat": 187, "todat": 187, "tf": [187, 471], "file1": [187, 465], "file2": [187, 465], "r1": [187, 239, 380, 390], "r2": [187, 239, 380, 390], "ndiff_output": 187, "file1_or_file2": 187, "sed": [187, 479], "gripe": 187, "spray": 187, "fcompar": 187, "f1name": 187, "f2name": 187, "qr": 187, "noisi": [187, 289, 479], "qseen": 187, "rseen": 187, "whichfil": 187, "vms": [188, 289, 472, 473], "accompani": [188, 268, 332, 334, 424, 459, 471, 479], "show_cach": [188, 479], "alist": [188, 301, 424], "load_glob": [188, 477, 479], "load_fast": [188, 473, 479], "current_offset": [188, 473], "analys": 188, "lasti": [188, 479], "co_lin": [188, 468, 479], "co_firstlineno": [188, 252, 424, 479], "co_lnotab": [188, 252, 424, 468, 470, 475, 479], "oparg": [188, 470, 479], "nop": [188, 355, 437, 479], "pop_top": [188, 479], "end_for": 188, "quicken": [188, 479], "unary_neg": 188, "unary_not": 188, "unary_invert": 188, "get_it": 188, "get_yield_from_it": [188, 479], "binary_op": [188, 469, 479], "rhs": [188, 472], "lhs": 188, "binary_subscr": [188, 479], "store_subscr": [188, 479], "delete_subscr": 188, "binary_slic": [188, 479], "store_slic": [188, 479], "get_await": [188, 479], "get_ait": 188, "get_anext": 188, "end_async_for": [188, 477, 479], "cleanup_throw": 188, "before_async_with": 188, "set_add": 188, "list_append": [188, 462], "map_add": [188, 477], "return_const": [188, 479], "consti": 188, "co_const": [188, 252, 424, 479], "yield_valu": [188, 479], "setup_annot": [188, 475], "pop_except": 188, "push_exc_info": [188, 469], "check_exc_match": [188, 469, 479], "check_eg_match": [188, 469, 479], "with_except_start": [188, 479], "context_manag": 188, "load_assertion_error": [188, 478], "load_build_class": 188, "__build_class__": [188, 446, 479], "before_with": [188, 469], "get_len": 188, "match_map": 188, "match_sequ": 188, "match_key": [188, 469], "store_nam": [188, 338], "namei": 188, "co_nam": [188, 252, 424, 474, 479], "store_fast": [188, 479], "store_glob": 188, "delete_nam": 188, "unpack_sequ": [188, 479], "unpack_ex": 188, "leftov": [188, 289], "extended_arg": [188, 479], "store_attr": [188, 479], "delete_attr": 188, "delete_glob": 188, "load_const": [188, 471, 473, 479], "load_nam": [188, 471], "load_loc": [188, 470, 479], "load_from_dict_or_deref": [188, 470], "load_from_dict_or_glob": [188, 470], "build_tupl": [188, 479], "build_list": [188, 479], "build_set": [188, 479], "build_map": [188, 479], "build_const_key_map": [188, 475, 479], "build_str": [188, 475, 479], "list_extend": [188, 479], "set_upd": [188, 479], "dict_upd": [188, 479], "dict_merg": [188, 479], "load_attr": [188, 468, 470, 479], "load_super_attr": [188, 470, 479], "compare_op": [188, 471, 478, 479], "is_op": [188, 478, 479], "contains_op": [188, 478, 479], "import_nam": [188, 427], "import_from": [188, 427], "jump_forward": [188, 479], "jump_backward": [188, 469, 479], "jump_backward_no_interrupt": [188, 469, 479], "pop_jump_if_tru": [188, 469, 479], "pop_jump_if_fals": [188, 469, 471, 479], "pop_jump_if_not_non": [188, 479], "pop_jump_if_non": [188, 479], "for_it": [188, 479], "var_num": 188, "load_fast_check": [188, 479], "load_fast_and_clear": [188, 470], "delete_fast": 188, "make_cel": [188, 469, 479], "load_closur": [188, 479], "co_fastlocalnam": [188, 479], "load_deref": 188, "load_classderef": [188, 470, 473], "store_deref": [188, 479], "delete_deref": 188, "copy_free_var": [188, 469, 479], "raise_vararg": 188, "kw_name": [188, 469, 479], "ascend": [188, 305, 341], "call_function_ex": [188, 475, 479], "push_nul": [188, 469, 479], "load_method": [188, 470, 476, 479], "make_funct": [188, 468, 475, 479], "0x02": [188, 475], "0x08": [188, 424], "build_slic": 188, "format_valu": [188, 475, 479], "fmt_spec": 188, "match_class": [188, 469], "return_gener": [188, 469, 479], "have_argu": [188, 470], "call_intrinsic_1": 188, "intrinsic_1_invalid": 188, "intrinsic_print": 188, "intrinsic_import_star": 188, "intrinsic_stopiteration_error": 188, "intrinsic_async_gen_wrap": 188, "aync": 188, "intrinsic_unary_posit": 188, "intrinsic_list_to_tupl": 188, "intrinsic_typevar": 188, "intrinsic_paramspec": 188, "intrinsic_typevartupl": 188, "intrinsic_subscript_gener": 188, "intrinsic_typealia": 188, "call_intrinsic_2": [188, 479], "intrinsic_2_invalid": 188, "intrinsic_prep_reraise_star": 188, "intrinsic_typevar_with_bound": 188, "intrinsic_typevar_with_constraint": 188, "intrinsic_set_function_type_param": 188, "setup_fin": [188, 469, 479], "setup_cleanup": 188, "setup_with": [188, 469], "pop_block": [188, 469], "jump_no_interrupt": [188, 479], "undirect": 188, "min_pseudo_opcod": 188, "expositori": 190, "265252859812191058636308480000000": 190, "ridicul": 190, "1e100": [190, 272, 426, 431], "1e300": 190, "test_doctest": [190, 479], "giant": 190, "720": [190, 471, 477], "__test__": 190, "blanklin": [190, 462], "trial": [190, 315, 340, 363, 461], "crumb": 190, "your_dict": 190, "rapid": [190, 305, 477, 479], "verbatim": [190, 345, 405], "ndetail": 190, "transcript": 190, "oop": [190, 439], "my_flag": 190, "directive_opt": 190, "on_or_off": 190, "directive_option_nam": 190, "hermion": 190, "harri": [190, 463], "7948648": 190, "0x00ac18f0": 190, "14285714285714285": [190, 442], "142857142857": 190, "contriv": [190, 479], "utter": [190, 466], "module_rel": 190, "optionflag": [190, 358], "extraglob": 190, "raise_on_error": 190, "failure_count": [190, 358], "test_count": [190, 358], "slate": [190, 354, 428, 473, 474, 479], "mortem": [190, 294, 349, 436, 470], "exclude_empti": 190, "nonam": [190, 418], "compileflag": 190, "systemat": [190, 479], "my_module_with_doctest": 190, "tear": [190, 384], "test_find": 190, "doctestcas": 190, "docfilecas": 190, "runtest": [190, 384], "revolv": 190, "testrunn": [190, 384], "clear_glob": 190, "report_": 190, "cont": 190, "sketch": [190, 240, 437, 463, 464], "grown": [190, 325], "invalu": [190, 316], "amaz": [190, 460], "skimp": 190, "prose": 190, "attitud": 190, "coher": [190, 223], "narrat": 190, "blur": [190, 258], "_regrtest_top": 190, "2821": 191, "5322": [191, 193, 196, 198, 200, 202, 204, 205, 332], "6532": [191, 202, 204, 205, 474, 476, 479], "2046": [191, 194, 199], "2047": [191, 199, 200, 205, 206, 232, 471], "2183": [191, 193, 202, 479], "2231": [191, 193, 199, 202, 206], "subcompon": 191, "forego": [191, 422], "promot": [191, 422, 464, 479], "offic": [191, 422], "default_charset": 192, "outright": 192, "qp": 192, "7bit": [192, 194, 195, 198, 200, 205, 268, 471, 472, 479], "maxlength": [192, 280], "header_enc": 192, "body_enc": 192, "codecnam": 192, "rfc822": [193, 194, 201, 202, 203, 204, 245, 460, 462], "envelop": [193, 198, 202, 204, 245, 268, 332, 479], "from_": [193, 268, 372, 479], "unixfrom": [193, 198, 202, 473, 479], "maxheaderlen": [193, 198, 202, 473], "invalidbase64paddingdefect": [193, 196], "invalidbase64charactersdefect": [193, 196], "8bit": [193, 194, 195, 198, 199, 200, 204, 205, 471, 472], "2822": [193, 199, 206, 239, 242, 268, 362, 447, 460], "contravent": 193, "mymessag": [193, 202], "extant": [193, 202, 479], "roolz": [193, 202], "failobj": [193, 202], "_param": [193, 202, 203, 403], "disposit": [193, 194, 200, 202, 245, 290, 330, 396, 403, 474], "bud": [193, 202, 403], "gif": [193, 202, 203, 228, 246, 365, 380, 403, 463, 479], "fu": [193, 202], "baller": [193, 202], "ppt": [193, 202], "dfballer": 193, "subpart": [193, 195, 196, 198, 201, 202, 203, 204], "rawparam": 193, "requot": [193, 202], "make_": 193, "add_": [193, 194], "deliveri": [193, 197, 202, 204, 268, 290, 330, 334, 479], "armor": [193, 202], "typ": [194, 245, 382, 470, 479], "typekey": 194, "cid": [194, 197, 334], "headernam": 194, "headervalu": 194, "_subtyp": [195, 203], "_charset": [195, 203, 227, 479], "unprint": [195, 479], "drawback": [195, 249, 289, 476], "add_payload": 196, "messagedefect": 196, "noboundaryinmultipartdefect": 196, "startboundarynotfounddefect": 196, "closeboundarynotfounddefect": 196, "firstheaderlineiscontinuationdefect": 196, "misplacedenvelopeheaderdefect": 196, "missingheaderbodyseparatordefect": 196, "malformedheaderdefect": 196, "multipartinvariantviolationdefect": [196, 204, 479], "invalidbase64lengthdefect": 196, "invaliddatedefect": 196, "textfil": 197, "messagefil": 197, "uncommon": [197, 247, 440, 463, 479], "someone_els": 197, "reunion": 197, "pngfile": 197, "img_data": 197, "png": [197, 203, 237, 246, 365], "msgfile": 197, "sanit": [197, 452, 479], "03d": [197, 264, 341], "ayon": 197, "asperg": 197, "pour": 197, "jeuner": 197, "pew": 197, "pepe": 197, "penelop": 197, "pussycat": 197, "fabrett": 197, "salut": 197, "cela": 197, "ressembl": 197, "yumm": 197, "roast": 197, "asparagus": 197, "epicuri": 197, "203718": 197, "asparagus_cid": 197, "href": [197, 235, 237, 239, 409, 465], "img": [197, 237], "peel": 197, "jpg": [197, 255, 291, 415, 448, 463], "jpeg": [197, 203, 246, 365, 442, 464, 479], "magic_html_pars": 197, "html_text": 197, "partfil": 197, "preview": [197, 254, 479], "useless": [197, 385, 407, 477, 479], "preferencelist": [197, 202], "ans": 197, "richest": 197, "matthew": [197, 469, 473, 479], "dixon": 197, "cowl": 197, "necess": [198, 479], "smime": 198, "outfp": 198, "refold": [198, 205, 472], "rewrap": [198, 223], "manheaderlen": 198, "craft": [198, 296, 428, 471, 479], "amessag": 198, "transfer_encod": 198, "part_info": 198, "_mangle_from_": 198, "worldwid": [199, 232, 422], "slew": 199, "xf6stal": 199, "f6stal": 199, "maxlinelen": 199, "header_nam": [199, 391, 403], "continuation_w": 199, "straight": [199, 203, 222, 280, 349, 384, 398, 407, 440, 458, 466, 477, 479], "splitchar": 199, "decoded_str": 199, "decoded_seq": 199, "headerdefect": 200, "_myattr": 200, "myattr": 200, "unstructur": 200, "wild": [200, 432, 458, 479], "uniqueunstructuredhead": 200, "supplement": [200, 210, 290, 457, 464, 473, 479], "base_class": 200, "default_class": 200, "use_default_map": 200, "uniquedatehead": 200, "resent": [200, 206, 268, 332], "uniquesingleaddresshead": 200, "uniqueaddresshead": 200, "bcc": [200, 332], "contenttransferencodinghead": 200, "messageidhead": 200, "5321": [200, 472], "include_default": 201, "6531": [202, 205, 332, 474, 479], "ordinarili": [203, 328], "dice": 203, "_maintyp": 203, "nonmultipart": [203, 479], "_subpart": 203, "_data": [203, 223], "_encod": 203, "_audiodata": 203, "_imagedata": 203, "tiff": [203, 246, 365, 463], "pbm": [203, 246], "pgm": [203, 246, 365], "ppm": [203, 246, 365, 371], "rast": [203, 246], "xbm": [203, 246, 365, 371], "bmp": [203, 244, 246, 365, 472, 473, 476, 477, 479], "webp": [203, 246, 365, 474, 479], "exr": [203, 246], "_msg": 203, "_text": 203, "cloth": 204, "conduc": 204, "_factori": 204, "stitch": 204, "fed": [204, 232, 280, 311, 409, 463], "_class": 204, "headerson": [204, 479], "mybyt": 204, "edness": 204, "dispar": 205, "settabl": [205, 244, 396, 458, 460, 479], "mymsg": [205, 473], "compat_smtp": 205, "compat_strict": 205, "compat_strict_smtp": 205, "commut": 205, "policy100": 205, "policy80": 205, "apolici": 205, "78": [205, 281, 472, 479], "disciplin": 205, "sourcelin": 205, "unfold": 205, "stype": 205, "rejoin": 205, "refold_head": 205, "traffic": [205, 334, 338, 460, 471, 479], "somepolici": 205, "isdst": [206, 470, 479], "idstr": 206, "strengthen": [206, 479], "constitu": [206, 248, 406], "realnam": [206, 479], "email_address": 206, "fieldvalu": 206, "tos": [206, 468, 479], "ccs": [206, 338], "resent_to": 206, "resent_cc": 206, "all_recipi": 206, "mailer": 206, "greenwich": [206, 362], "timev": [206, 479], "usegmt": 206, "fallback_charset": 206, "uninstal": [207, 211, 278, 378, 449, 457, 473, 479], "rational": [207, 210, 232, 290, 325, 326, 330, 334, 354, 362, 398, 424, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 473, 474, 475, 477, 479], "pipx": [207, 465, 473], "altinstal": [207, 452, 456, 465, 471, 473], "default_pip": 207, "nomenclatur": [208, 349], "some_var": 208, "powersofthre": 208, "otherstyl": 208, "something_els": 208, "crimson": 208, "neon": 208, "0x18": 208, "strictflag": 208, "0b0": 208, "10100": 208, "00111": 208, "conformflag": 208, "ejectflag": 208, "keepflag": 208, "myintenum": 208, "typewrit": 209, "csi": 209, "anod": 209, "advertis": [209, 285, 332, 338, 422, 464, 473, 474, 477, 479], "srmount": 209, "multihop": 209, "rfs": 209, "stale": [209, 247, 473, 479], "nfs": [209, 290, 479], "xenix": 209, "new_exc": 210, "original_exc": 210, "3134": [210, 466, 479], "someexcept": [210, 384, 466], "rescu": 210, "unqualifi": [210, 345, 436, 473, 479], "perror": 210, "abandon": [210, 365, 411, 471], "upcom": [210, 223, 322, 479], "dubious": [210, 396, 479], "mygroup": [210, 338], "apport": 211, "sigaltstack": [211, 479], "catastroph": [211, 471, 479], "all_thread": 211, "watchdog": 211, "0x00007fb899f39700": [211, 472], "f_add_seal": 212, "f_get_seal": 212, "f_seal_": 212, "f_getpath": [212, 479], "f_ofd_getlk": [212, 478, 479], "f_ofd_setlk": [212, 478, 479], "f_ofd_setlkw": [212, 478, 479], "f_getpipe_sz": [212, 479], "f_setpipe_sz": [212, 479], "f_dup2fd": [212, 469, 479], "f_dup2fd_cloexec": [212, 469, 479], "fd_cloexec": [212, 469], "ficlon": [212, 479], "ficlonerang": [212, 479], "reflink": [212, 290], "btrfs": [212, 290], "ocfs2": 212, "xfs": [212, 290], "mutate_flag": 212, "simplif": [212, 479], "13341": 212, "tiocgpgrp": 212, "lock_un": 212, "lock_sh": 212, "lock_ex": 212, "lock_nb": 212, "svr4": 212, "f_setfl": 212, "lockdata": 212, "hhllhh": 212, "f_wrlck": 212, "f_setlkw": 212, "dir1": 213, "dir2": 213, "mydircmp": 213, "print_diff_fil": 213, "dcmp": 213, "sub_dcmp": 213, "openhook": [215, 463, 479], "inplac": [215, 479], "bak": 215, "fi": [215, 222], "reobj": 217, "other_fract": 218, "414213": 218, "1414213": 218, "125": [218, 258, 442, 445, 464], "7e": 218, "2476979795053773": [218, 471], "2251799813685248": [218, 471], "flt": 218, "max_denomin": 218, "1415926535897932": 218, "4503599627370497": 218, "9007199254740992": 218, "greatest": [218, 272, 341], "ndigit": [218, 222, 424, 440, 479], "40g": 218, "1428571428571428571428571428571428571429": 218, "1_234_567": 218, "141593e": 218, "old_pric": 218, "new_pric": 218, "499": [218, 220, 238, 285], "tower": [218, 380, 464, 466, 479], "959": 220, "2640": [220, 478, 479], "1176": 220, "1063": 220, "sr": 220, "226": [220, 238], "221": 220, "acct": 220, "source_address": [220, 239, 332, 334, 465, 471, 472], "ftp1": [220, 471], "proftpd": [220, 471], "154": [220, 281, 378, 462, 471], "cento": [220, 469, 471, 476, 479], "fedora": [220, 349, 452, 456, 468, 471, 478, 479], "4217": 220, "keyfil": [220, 245, 266, 278, 302, 332, 338, 458, 470, 475, 479], "certfil": [220, 245, 302, 332, 338, 458, 470, 475, 479], "ftps": 220, "pureftpd": 220, "6jack": 220, "antilink": 220, "blogbench": 220, "bsdcam": 220, "clockspe": 220, "djbdns": 220, "jedi": 220, "eacceler": 220, "favicon": 220, "ico": [220, 479], "francoton": 220, "fugu": 220, "libpuzzl": 220, "metalog": 220, "minidentd": 220, "udf": [220, 479], "php": [220, 415, 458, 460], "jenkin": [220, 384], "skein": [220, 232], "webdav": [220, 238], "phpaudit": 220, "phpbench": 220, "pincast": 220, "ping": [220, 458, 459, 460, 463], "posto": 220, "public_key": 220, "ftpd": 220, "qscan": 220, "qtc": 220, "shared": 220, "skycach": 220, "ucarp": 220, "stor": 220, "eprt": 220, "passiv": [220, 252, 457, 459], "epsv": 220, "pasv": [220, 479], "3659": 220, "fromnam": 220, "tonam": 220, "nat": [220, 334, 472], "async_iter": 222, "0b11": 222, "0b1010": [222, 466], "0b1110": 222, "1110": 222, "pythonbreakpoint": [222, 349, 451, 476], "dont_inherit": [222, 473], "pycf_": 222, "__initializing__": 222, "_clearcach": 222, "perimet": 222, "season": 222, "summer": [222, 362, 463, 464], "floatvalu": 222, "digitpart": [222, 431], "floatnumb": [222, 426, 431], "003": [222, 424, 442, 451], "1e6": 222, "0x2a": [222, 342], "010": [222, 258, 358], "classinfo": 222, "mydata": [222, 361, 407, 448, 471], "process_block": 222, "iterat": 222, "keyfunc": [222, 258], "0o70": 222, "0o12": 222, "nnn": [222, 237, 391], "untransl": [222, 255], "somedir": 222, "spamspam": 222, "3j": [222, 286, 465], "inv_bas": 222, "_x": [222, 256, 464, 475], "_voltag": 222, "salari": [222, 341, 436], "argn": 222, "regular_funct": 222, "summat": [222, 272, 440, 470, 479], "object_or_typ": 222, "type2": [222, 382], "spice": 222, "transpos": [222, 258, 438, 462], "fo": [222, 225, 460], "manifest": [222, 358, 465, 479], "x2": [222, 426, 437, 468, 470, 479], "attain": 222, "till": [222, 280, 305, 338, 355, 478, 479], "saus": 222, "_temp": 222, "pythoncaseok": [222, 451, 459, 478, 479], "user_funct": 223, "evict": 223, "3628800": 223, "479001600": 223, "sequence_of_numb": [223, 477], "unaccept": [223, 296, 334, 409, 432], "count_vowel": 223, "vowel": 223, "aeiouaeiou": 223, "cache_paramet": [223, 479], "cache_info": [223, 471], "currsiz": [223, 471], "cache_clear": [223, 471], "predictor": 223, "impur": 223, "get_pep": 223, "290": 223, "320": [223, 384], "9991": 223, "cacheinfo": [223, 471], "fib": [223, 437, 446], "377": [223, 437, 445, 446], "610": [223, 437, 445, 446], "_is_valid_operand": 223, "lastnam": [223, 337, 471, 477], "firstnam": [223, 337, 471], "unrecognis": [223, 265, 472], "farg": 223, "fkeyword": 223, "newkeyword": 223, "basetwo": 223, "10010": 223, "_aliv": 223, "set_stat": 223, "set_dead": 223, "strength": [223, 469], "eh": [223, 469], "fun_num": 223, "615": [223, 421, 478, 479], "0x1035a2840": 223, "0x103fe0000": 223, "dict_key": [223, 465, 479], "wrapper_assign": 223, "wrapper_upd": 223, "17482": 223, "my_decor": [223, 463], "uncollect": [224, 471, 479], "threshold0": 224, "threshold1": 224, "threshold2": 224, "count0": 224, "count1": 224, "count2": 224, "lazarus": 224, "gc_ref": 224, "unfamiliar": [225, 264, 289, 463, 464], "shortopt": 225, "longopt": 225, "frob": [225, 386], "posixly_correct": 225, "cfoo": 225, "optlist": 225, "ho": [225, 479], "lname": 226, "i18n": [227, 342, 458, 465, 479], "l10n": [227, 458], "monolingu": 227, "localedir": 227, "unimpl": [227, 240], "myapplic": 227, "class_": 227, "lgettext": [227, 469, 477, 479], "lngettext": [227, 469, 477], "_info": 227, "_fallback": 227, "albeit": [227, 382], "gnome": [227, 340, 462, 472, 479], "jame": [227, 419, 422, 458, 461, 463, 465, 469, 470, 476, 479], "henstridg": [227, 458, 465], "habit": [227, 268], "mylog": [227, 467, 471], "xgettext": [227, 479], "fran": [227, 472, 473, 474], "ois": [227, 472, 473, 474], "pinard": 227, "xpot": 227, "pygettext": [227, 474, 479], "msgfmt": [227, 465], "lang1": 227, "lang2": 227, "fr": [227, 268, 315, 431, 461, 476], "lang3": 227, "language1": 227, "mollusk": 227, "albatross": 227, "rat": 227, "penguin": [227, 423], "n_": 227, "markthisstringfortransl": 227, "funk": [227, 458], "juan": [227, 465], "ib": 227, "ez": 227, "palomar": 227, "barri": [227, 458, 459, 460, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 479], "warsaw": [227, 458, 459, 460, 462, 463, 464, 470, 471, 472, 473, 474, 476, 477, 479], "gustavo": [227, 460, 461, 462, 463, 479], "niemey": [227, 460, 461, 462, 463], "redhat": [227, 479], "subshel": [228, 290], "include_hidden": [228, 479], "unc": [228, 290, 291, 293, 418, 479], "sharepoint": [228, 418], "quo": 228, "vadi": 228, "card": [228, 292, 315, 316, 432], "topolog": [229, 461, 478, 479], "vertex": [229, 380], "acycl": 229, "predecessor": [229, 461, 471], "topological_sort": 229, "task_queu": [229, 280], "finalized_tasks_queu": 229, "node_group": 229, "ts2": 229, "gr_name": [230, 461], "gr_passwd": 230, "gr_gid": [230, 345, 461], "gr_mem": 230, "yp": 230, "discern": 231, "slowest": [231, 358, 380, 384, 470, 479], "unseek": [231, 397, 418, 471, 473, 474, 479], "wbit": [231, 420, 479], "file_cont": [231, 267], "s_in": 231, "s_out": 231, "fip": [232, 338, 479], "rsa": [232, 338, 468, 479], "1321": 232, "seealso": 232, "sha3": [232, 452, 469, 478, 479], "keccak": [232, 469, 475, 479], "usedforsecur": [232, 324, 479], "insecur": [232, 324, 327, 337, 338, 463, 470, 471, 479], "sha2": [232, 338, 478, 479], "hacl": [232, 479], "spammish": 232, "x03": [232, 281, 334, 341, 344, 394], "x1e": [232, 341], "xdd": 232, "ae": 232, "x15": [232, 344], "x93": 232, "xc5": 232, "xfe": 232, "x00o": 232, "xa5u": 232, "xfd": 232, "xf7": 232, "xbcn": 232, "x84": [232, 464], "xa6": 232, "xaf": [232, 464], "x0c": [232, 341, 394], "x95": 232, "x0fk": 232, "x06": [232, 394], "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 232, "condens": [232, 265, 463, 479], "upstream": [232, 337, 477, 479], "incept": 232, "length_in_bit": 232, "44709d6fcb83d92a76dcb0b668c98e1b1d3dafe7": 232, "socketio": 232, "mac1": 232, "digestmod": [232, 234, 473, 477, 479], "mac2": 232, "stretch": [232, 244, 372, 380, 406, 476], "brute": 232, "tunabl": [232, 290, 471], "hash_nam": 232, "dklen": 232, "pkcs": [232, 338, 473, 479], "pseudorandom": [232, 315, 338], "appendix": [232, 422], "nist": [232, 461], "132": 232, "stackexchang": 232, "pbkdf2": [232, 468], "our_app_it": 232, "500_000": [232, 341], "dk": 232, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 232, "maxmem": 232, "7914": 232, "mib": [232, 267, 280, 329, 469, 477, 479], "7693": 232, "fanout": 232, "leaf_siz": [232, 479], "node_offset": [232, 479], "node_depth": 232, "inner_s": 232, "last_nod": 232, "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 232, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 232, "6fa1d8fcfd719046d762": 232, "eb6ec15daf9546254f0809": 232, "1bf21a98c78a1c376ae9": 232, "567004bf96e4a25773ebf4": 232, "indifferenti": 232, "3d363ff7401e02026f4a4687d4863c": 232, "symmetr": [232, 281, 338, 341, 424, 426, 458, 460, 461, 462, 472, 479], "tamper": [232, 296], "secret_key": 232, "auth_siz": 232, "good_sig": 232, "alic": 232, "43b3c982cf697e0c5ab22172d1ca7421": 232, "bob": [232, 280, 382, 455, 463, 464, 465, 467, 472], "0102030405060708090a0b0c0d0e0f00": 232, "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 232, "signer": 232, "likelihood": [232, 340, 477], "106": [232, 258, 340, 457, 460], "salt1": 232, "salt2": 232, "h2": [232, 239, 265, 407], "summarili": 232, "files_hash_person": 232, "block_hash_person": 232, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 232, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 232, "orig_key": 232, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 232, "khy6h21km": 232, "enc_key": 232, "kencrypt": 232, "mac_key": 232, "kmac": 232, "rbpb15s": 232, "z9t": 232, "agffno5wuhb77vbri6f9iv2qixu7whw": 232, "g9gthfe1yluxy1zwplyk1": 232, "nwfu0wseb0krcjhdep": 232, "h00": 232, "h01": 232, "h10": 232, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 232, "jean": [232, 422, 464, 465, 472], "philipp": [232, 422, 463, 468, 479], "aumasson": [232, 422], "samuel": [232, 334, 422, 461, 463, 475, 478, 479], "neve": [232, 422, 475], "zooko": [232, 422], "wilcox": 232, "hearn": 232, "christian": [232, 422, 458, 462, 464, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479], "winnerlein": 232, "finalist": 232, "henzen": 232, "willi": 232, "meier": 232, "raphael": 232, "phan": 232, "chacha": 232, "daniel": [232, 461, 464, 465, 468, 469, 471, 473, 474, 475, 479], "bernstein": [232, 422, 464, 479], "pyblake2": 232, "dmitri": [232, 462, 474, 475, 479], "chestnykh": [232, 475], "heim": [232, 422, 464, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479], "neighbor": [232, 409, 460, 461], "warranti": [232, 422, 477], "cc0": 232, "creativecommon": 232, "publicdomain": 232, "alexandr": [232, 464, 465, 467, 471, 473, 479], "sokolovskiy": 232, "nvlpub": 232, "gov": [232, 240, 461], "nistpub": 232, "csrc": 232, "cryptographic_hash_funct": 232, "rfc8018": 232, "cryptographi": [232, 334], "nistspecialpublication800": 232, "heapsort": 233, "prioritizeditem": [233, 313], "pq": [233, 316], "entry_find": 233, "add_task": 233, "remove_task": 233, "pop_task": 233, "midi": 233, "digest_con": [234, 479], "crypto_memcmp": [234, 479], "x3e": [235, 237], "lenient": 235, "html4": [236, 237, 479], "whatwg": [236, 390, 479], "multipag": 236, "convert_charref": [237, 473, 474, 479], "myhtmlpars": 237, "xnnn": 237, "condcom": 237, "ie9": 237, "decl": 237, "sgml": [237, 270, 413, 464], "ent": 237, "logo": [237, 380, 422], "buff": 237, "ere": 237, "pan": [237, 479], "soup": 237, "switching_protocol": 238, "7231": 238, "2518": 238, "103": [238, 258, 340, 341, 378, 457, 465, 471, 478, 479], "early_hint": [238, 478, 479], "8297": [238, 479], "non_authoritative_inform": 238, "no_cont": 238, "reset_cont": 238, "partial_cont": 238, "7233": 238, "multi_status": 238, "4918": 238, "already_report": 238, "5842": 238, "im_us": 238, "3229": 238, "multiple_choic": 238, "moved_perman": [238, 462], "see_oth": 238, "not_modifi": 238, "7232": [238, 465], "use_proxi": 238, "temporary_redirect": 238, "permanent_redirect": 238, "7238": 238, "bad_request": 238, "7235": 238, "payment_requir": 238, "not_found": [238, 239, 479], "method_not_allow": 238, "not_accept": 238, "proxy_authentication_requir": 238, "request_timeout": 238, "length_requir": 238, "precondition_fail": 238, "request_entity_too_larg": 238, "request_uri_too_long": 238, "unsupported_media_typ": 238, "requested_range_not_satisfi": 238, "expectation_fail": 238, "418": [238, 437, 468, 472, 478, 479], "im_a_teapot": [238, 478], "htcpcp": 238, "2324": 238, "misdirected_request": 238, "7540": 238, "422": 238, "unprocessable_ent": 238, "423": 238, "424": [238, 473], "failed_depend": 238, "too_ear": [238, 478, 479], "8470": 238, "upgrade_requir": 238, "428": [238, 293, 473], "precondition_requir": 238, "6585": 238, "429": [238, 473], "too_many_request": 238, "431": 238, "request_header_fields_too_larg": 238, "unavailable_for_legal_reason": [238, 479], "obstacl": [238, 479], "7725": 238, "internal_server_error": 238, "not_impl": 238, "bad_gateway": 238, "service_unavail": 238, "gateway_timeout": 238, "http_version_not_support": 238, "506": [238, 323, 475, 479], "variant_also_negoti": 238, "2295": 238, "507": 238, "insufficient_storag": 238, "508": 238, "loop_detect": 238, "510": 238, "not_extend": 238, "2774": 238, "511": [238, 418, 475], "network_authentication_requir": 238, "is_inform": 238, "199": 238, "is_success": [238, 479], "is_redirect": 238, "399": [238, 479], "is_client_error": 238, "is_server_error": 238, "5789": 238, "h3": 239, "h4": 239, "_create_unverified_context": [239, 465, 473], "cert_fil": [239, 391, 470, 479], "alpn": [239, 338, 391, 468, 474, 479], "key_fil": [239, 391, 470, 479], "encode_chunk": 239, "reconnect": [239, 474, 479], "tunnel": [239, 471, 479], "skip_host": 239, "skip_accept_encod": 239, "message_bodi": 239, "7230": [239, 391], "amt": 239, "data1": 239, "data2": 239, "12524": 239, "issue12524": 239, "filecont": 239, "2965": [240, 391, 479], "2109": [240, 241], "cookie2": 240, "secure_protocol": [240, 479], "wss": [240, 390, 479], "websocket": [240, 254, 479], "downgrad": 240, "curl": [240, 456, 457, 479], "cookie_spec": 240, "kristol": 240, "errata": [240, 259], "unfinish": [240, 280, 479], "2964": 240, "get_origin_req_host": [240, 391, 473], "approv": [240, 285, 304, 457, 458, 465, 479], "ignore_discard": 240, "ignore_expir": 240, "wipe": 240, "lynx": [240, 399, 462], "clobber": [240, 289, 479], "libwww": [240, 462], "cookie3": 240, "mycookiepolici": 240, "i_dont_want_to_store_this_cooki": 240, "tighten": [240, 458, 465, 471], "loos": [240, 361, 479], "benign": 240, "blocklist": 240, "allowlist": [240, 390], "coyot": 240, "193": [240, 380, 466], "nz": 240, "acm": [240, 315], "rocket_launch": 240, "expiri": [240, 479], "began": [240, 247, 264, 358, 458, 459, 479], "cj": 240, "ads": 240, "serializ": [241, 259], "2068": [241, 362], "real_valu": 241, "rawdata": 241, "http_cooki": 241, "httpon": [241, 464, 479], "samesit": [241, 479], "csrf": 241, "lax": [241, 463, 479], "fig": 241, "newton": [241, 316], "wafer": 241, "rocki": [241, 464], "chip": [241, 422, 465], "ahoy": 241, "vienna": 241, "finger": [241, 466], "keebler": 241, "fudg": 241, "012": [241, 258, 341, 459], "oreo": 241, "doublestuff": 241, "twix": 241, "server_class": [242, 403], "handler_class": [242, 403], "8000": [242, 292, 330, 403, 415, 416, 463, 477, 479], "httpd": [242, 273, 330, 403, 463], "server_nam": [242, 403, 416], "server_port": [242, 403], "do_spam": 242, "3986": [242, 390, 465, 474, 476, 479], "hier": 242, "basehttp": 242, "1xx": 242, "1994": [242, 422], "simplehttp": 242, "list_directori": 242, "webserv": 242, "index_pag": [242, 479], "9000": [242, 382, 426], "empt": 242, "htbin": 242, "scrub": 242, "nefari": 242, "smart": [244, 460, 479], "namag": 244, "aqua": [244, 455, 479], "unsav": 244, "undon": [244, 380, 385, 386], "clipboard": [244, 365, 475, 476, 477, 479], "reformat": [244, 268, 289, 461, 479], "tabifi": 244, "untabifi": 244, "toggl": [244, 334, 372, 477, 478, 479], "chitespac": 244, "autosav": 244, "wake": [244, 325, 330, 361, 464, 479], "pane": [244, 371, 372, 479], "zoom": [244, 479], "momentarili": [244, 268, 479], "deiconifi": 244, "idlerc": [244, 479], "squeez": [244, 475, 476, 477, 479], "leftarrow": 244, "rightarrow": 244, "expres": 244, "pageup": 244, "pagedown": 244, "popup": [244, 358, 479], "100000000": 244, "uncolor": 244, "idlestartup": [244, 479], "pythonstartup": [244, 317, 331, 349, 434, 451, 473, 479], "masquerad": [244, 385, 479], "tcpconnect": 244, "irv": [244, 438], "6543": 244, "tcplisten": 244, "antivirus": [244, 358], "taught": 244, "mis": [244, 479], "admin": 244, "zombi": [244, 280, 335, 358, 463, 472, 479], "pythonw": [244, 280, 331, 349, 455, 457, 460, 475, 476, 479], "dismiss": [244, 380], "glitch": 244, "pyw": [244, 434, 457, 460, 479], "plane": [244, 272, 468, 479], "x02": [244, 256, 281, 334, 344, 394], "x07": [244, 281, 394], "x08c": 244, "loopback": [244, 256, 358], "transient": [244, 265, 337, 479], "f5": [244, 458], "mousewheel": [244, 479], "scrollbar": [244, 365, 370, 372, 380, 479], "toc": [244, 479], "dock": [244, 479], "zzdummi": [244, 479], "imap4rev1": 245, "1730": 245, "imap4_port": 245, "d25if65hy903weo": 245, "imap4_ssl_port": 245, "ssl_context": [245, 285, 470, 479], "993": 245, "datestr": 245, "flagstr": 245, "uw": 245, "message_set": 245, "authobject": [245, 332], "checkpoint": [245, 349], "new_mailbox": 245, "acl": [245, 329], "5161": [245, 474, 479], "6855": [245, 474, 479], "message_part": 245, "cyrus": [245, 479], "rfc2087": 245, "folder": [245, 268, 395, 457, 479], "cram": [245, 332], "2342": [245, 460], "message_num": 245, "authoris": 245, "oldmailbox": 245, "newmailbox": 245, "criterion": [245, 296, 424, 458], "msgnum": 245, "ldj": 245, "inbox": [245, 268], "sort_criteria": 245, "search_criterion": 245, "flag_list": 245, "3501": 245, "gmail": [245, 479], "threading_algorithm": 245, "sgi": 246, "imglib": 246, "87a": 246, "89a": 246, "graymap": 246, "pixmap": [246, 371], "raster": 246, "jfif": [246, 479], "exif": [246, 479], "openexr": [246, 474, 479], "bass": [246, 333], "comprehend": 247, "3120": [247, 431, 466], "subpkg": 247, "rebound": [247, 425, 432], "redefinit": [247, 424, 479], "educ": [247, 258, 380], "get_resource_read": [247, 249, 250, 476, 479], "sourceless": [247, 472, 474], "allevi": [247, 458], "loader_detail": 247, "namespaceload": [247, 473, 479], "path_find": 247, "my_namespac": 247, "debug_overrid": [247, 474], "get_tag": [247, 470, 471], "source_byt": 247, "disable_check": [247, 479], "mulitpl": 247, "lazy_load": 247, "file_path": 247, "lazy_import": 247, "lazy_typ": 247, "spammetapathfind": 247, "spampathentryfind": 247, "absolute_nam": 247, "parent_nam": 247, "child_nam": 247, "parent_modul": 247, "pkg_resourc": [248, 249, 470, 479], "discover": [248, 309, 457, 473, 479], "package_distribut": 248, "importlib_metadata": [248, 468, 478, 479], "entrypoint": [248, 337, 468, 470, 479], "console_script": 248, "entry_point": [248, 479], "eps": 248, "setup_keyword": [248, 461], "egg_info": 248, "0x103528488": 248, "entry_points_select": 248, "wheel_metadata": 248, "packagemetadata": [248, 479], "566": [248, 479], "requires_python": [248, 304], "quickest": 248, "packagepath": [248, 477], "859": 248, "_hook": 248, "pathdistribut": [248, 479], "0x101e0cef0": 248, "filehash": 248, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 248, "text_typ": 248, "gustav": 248, "always_iter": 248, "pytest": [248, 384], "cov": 248, "packages_distribut": [248, 468, 479], "pyyaml": [248, 465, 467], "jaraco": 248, "find_distribut": 248, "distributionfind": 248, "artifact": [249, 250, 292, 472, 479], "pycach": [249, 349], "akin": [249, 341, 428], "importlib_resourc": [249, 476, 478, 479], "priori": 250, "__code__": [252, 341, 424, 466, 477, 479], "__defaults__": [252, 424, 466, 479], "__kwdefaults__": [252, 424, 473], "tb_frame": [252, 381, 424, 479], "tb_lasti": [252, 381, 424], "tb_lineno": [252, 377, 381, 424], "tb_next": [252, 377, 381, 424, 476, 479], "f_back": [252, 377, 424, 469, 479], "f_code": [252, 424, 461, 469, 479], "f_lineno": [252, 424, 461, 468, 469, 475, 479], "f_trace": [252, 349, 424, 469, 479], "co_argcount": [252, 424, 479], "co_flag": [252, 424, 479], "co_": [252, 479], "co_posonlyargcount": [252, 424, 477, 479], "co_kwonlyargcount": [252, 424], "co_nloc": [252, 424], "co_stacks": [252, 424], "gi_fram": [252, 463], "gi_run": 252, "gi_cod": [252, 464, 474, 479], "gi_yieldfrom": [252, 474, 479], "cr_await": [252, 479], "cr_frame": [252, 479], "cr_run": 252, "cr_code": 252, "cr_origin": [252, 349, 479], "gen_coro": 252, "follow_wrap": [252, 474, 479], "eval_str": 252, "omiss": [252, 311, 334, 479], "new_sig": 252, "anno": 252, "globaln": [252, 382, 479], "localn": [252, 382, 479], "mysignatur": 252, "implicit0": [252, 475, 479], "keyword_on": 252, "positional_on": 252, "var_posit": 252, "var_keyword": 252, "fullargspec": 252, "varkw": 252, "kwonlydefault": 252, "getargspec": [252, 469, 473, 474, 475, 479], "arginfo": 252, "formatarg": 252, "formatvararg": 252, "formatvarkw": 252, "formatvalu": 252, "closurevar": 252, "__signature__": [252, 473, 479], "conting": 252, "lifespan": 252, "handle_stackframe_without_leak": 252, "_foo": 252, "slot_descriptor": 252, "getset_descriptor": 252, "wrapper_descriptor": [252, 462], "descriptor_typ": 252, "gen_creat": [252, 471], "gen_run": 252, "gen_suspend": [252, 471], "gen_clos": [252, 471], "coro_cr": 252, "coro_run": 252, "coro_suspend": 252, "coro_clos": 252, "ag_run": [252, 478, 479], "ag_fram": 252, "agen_cr": 252, "agen_run": 252, "agen_suspend": 252, "agen_clos": 252, "glibc": [254, 256, 290, 319, 469, 473, 477, 478, 479], "sandbox": [254, 321, 349, 479], "sdk": [254, 452, 478, 479], "wasm": [254, 452, 479], "nodej": 254, "wasmtim": [254, 479], "pyodid": [254, 469, 479], "pyscript": 254, "xmlhttprequest": 254, "markdown": [255, 468], "md": 255, "long_descript": 255, "686": [255, 290], "597": [255, 468, 479], "pythonwarndefaultencod": [255, 451, 468, 479], "blksize": [255, 403], "stacklevel": [255, 264, 396, 463, 479], "unoptim": [255, 474], "seek_": 255, "seek_hol": [255, 290, 472], "seek_data": [255, 290, 472], "immin": 255, "latenc": [255, 266, 290, 437, 465, 468, 475], "initial_byt": 255, "ab56ef": 255, "nsecond": [255, 445], "reconstruct": [255, 296, 304, 374, 403, 479], "downsid": [256, 457, 472, 476], "3232235521": [256, 342], "xc0": [256, 460], "xa8": 256, "arpa": [256, 355, 474], "ip6": [256, 474], "multicast": [256, 334, 358, 394, 479], "3171": 256, "2373": 256, "5735": 256, "3330": 256, "3927": 256, "0b11000000101010000000000000000001": 256, "2001_0db8_0000_0000_0000_0000_0000_1000": 256, "_n": 256, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 256, "longhand": 256, "4291": [256, 479], "0abc": 256, "0007": 256, "0def": 256, "4007": 256, "fe80": 256, "ff02": 256, "5678": [256, 394], "3879": 256, "4193": 256, "6to4": 256, "3056": 256, "4380": 256, "nbit": 256, "ff00": 256, "cisco": [256, 479], "wholli": [256, 409], "n1": 256, "n2": 256, "prefixlen_diff": 256, "new_prefix": 256, "db00": 256, "anycast": 256, "ipaddr": 256, "sortabl": [256, 266], "apl": [258, 467, 471], "sml": 258, "recast": [258, 471], "algebra": [258, 464, 479], "tabul": [258, 341, 407], "vector": [258, 272, 345, 363, 380, 382, 405, 470, 479], "vec1": 258, "vec2": [258, 382], "p0": 258, "plast": 258, "p_n": 258, "abcdefg": [258, 288, 469, 479], "q0": 258, "q1": 258, "pred": [258, 395], "it1": 258, "it2": 258, "itn": [258, 479], "ax": 258, "ad": [258, 422, 461], "bd": 258, "addabl": 258, "110": [258, 302, 340, 342, 437], "amort": 258, "1296": 258, "loan": 258, "annual": [258, 478], "account_upd": 258, "bal": 258, "pmt": 258, "1_000": [258, 479], "960": [258, 479], "918": 258, "874": 258, "828": 258, "779": [258, 378], "728": [258, 301], "674": 258, "559": 258, "497": 258, "flattened_data": 258, "violet": [258, 380], "unflatten": 258, "013": 258, "023": 258, "uniq": [258, 462], "uniquekey": 258, "aaaabbbccdaabbb": 258, "aaaabbbccd": 258, "aaaa": [258, 316, 465], "bbb": 258, "tgtkey": 258, "currkey": 258, "currvalu": 258, "_grouper": 258, "nexti": 258, "021": 258, "210": 258, "odomet": 258, "ay": 258, "bx": 258, "cy": 258, "dx": [258, 340], "dy": 258, "011": 258, "mydequ": 258, "newval": 258, "uneven": 258, "num_act": 258, "incub": 258, "sliding_window": 258, "iter_index": 258, "superior": 258, "repeatfunc": 258, "list_of_list": 258, "ncycl": 258, "all_equ": 258, "first_tru": 258, "aabcadeaf": 258, "seq_index": 258, "iter_except": 258, "grouper": 258, "gxx": 258, "cdef": 258, "defg": 258, "sakki": [258, 465], "is_odd": 258, "subslic": 258, "before_and_aft": 258, "abcdefghi": 258, "all_upp": 258, "true_iter": 258, "remainder_iter": 258, "unique_everseen": 258, "abbccad": 258, "dedupl": [258, 479], "unique_justseen": 258, "powerset": 258, "siev": 258, "1_000_000_000_000_007": 258, "360620266859": 258, "1_000_000_000_000_403": 258, "1000000000000403": 258, "sum_of_squar": 258, "1400": 258, "m2": [258, 460, 465, 469, 472], "matric": [258, 285, 459], "convolv": 258, "convolut": 258, "betterexplain": 258, "kuxjwb4lzsa": 258, "padded_sign": 258, "windowed_sign": 258, "polynomial_from_root": 258, "4x": [258, 289, 470, 472, 473, 475, 479], "17x": [258, 468, 479], "polynomial_ev": 258, "horner": 258, "polynomial_deriv": 258, "3x": [258, 473, 479], "8x": [258, 479], "nth_combin": 258, "7159": [259, 474, 479], "4627": [259, 479], "ecma": 259, "sort_key": [259, 301, 471], "x08ar": 259, "as_complex": 259, "dct": 259, "object_hook": [259, 479], "parse_float": [259, 375], "complexencod": 259, "unord": [259, 280, 341, 424], "skipkey": [259, 301, 479], "ensure_ascii": [259, 474, 479], "check_circular": 259, "allow_nan": [259, 479], "item_separ": 259, "key_separ": 259, "parse_int": 259, "parse_const": 259, "object_pairs_hook": [259, 465, 467], "num_str": [259, 375], "extran": [259, 305, 365, 479], "bigobject": 259, "forbid": [259, 296, 338, 341, 405, 465, 479], "unpair": 259, "weird_json": 259, "voluntarili": [259, 290], "mp_film": 259, "1971": [259, 337, 340], "holi": [259, 337, 342, 438], "grail": [259, 337, 399, 438, 470, 479], "2028": 259, "2029": 259, "ecmascript": [259, 406], "module_glob": [262, 396, 479], "_local": [263, 478, 479], "decimal_point": [263, 341, 479], "thousands_sep": [263, 341, 479], "int_curr_symbol": 263, "currency_symbol": [263, 448], "p_cs_preced": 263, "n_cs_preced": 263, "p_sep_by_spac": 263, "n_sep_by_spac": 263, "mon_decimal_point": 263, "frac_digit": [263, 448], "int_frac_digit": 263, "mon_thousands_sep": 263, "mon_group": 263, "positive_sign": 263, "negative_sign": 263, "p_sign_posn": 263, "n_sign_posn": 263, "day_7": 263, "abday_1": 263, "abday_7": 263, "mon_1": 263, "mon_12": 263, "abmon_1": 263, "abmon_12": 263, "emperor": 263, "reign": 263, "envvar": [263, 358], "1766": 263, "lc_": 263, "do_setlocal": [263, 290], "localenam": 263, "string1": [263, 337, 438], "string2": [263, 337, 438], "loc": 263, "xe4n": 263, "umlaut": 263, "bind_textdomain_codeset": [263, 462, 469, 477], "grip": [264, 372], "stack_info": [264, 479], "clientip": 264, "fblogg": 264, "hdlr": 264, "lno": 264, "sinfo": 264, "tidi": [264, 384, 461, 463, 464, 479], "emiss": [264, 358, 479], "preparatori": 264, "uuu": 264, "default_time_format": 264, "default_msec_format": 264, "linefmt": 264, "footer": [264, 338, 479], "pertin": [264, 322], "msec": [264, 363, 474], "004": 264, "896": [264, 340], "la": [264, 463, 469], "tasknam": [264, 479], "entrant": [264, 479], "throttl": 264, "28524": 264, "reinstat": [264, 479], "attrdict": [264, 479], "reconstitut": [264, 296], "klass": 264, "inabl": [265, 290, 422], "dictconfigur": 265, "dictconfigclass": 265, "uncustom": 265, "default_logging_config_port": 265, "decrypt": [265, 338, 418], "victim": 265, "customis": [265, 380], "allow_foo": 265, "logconfig": 265, "compel": [265, 465], "customformatterfactori": 265, "_after_": 265, "my_app": 265, "tld": 265, "support_team": 265, "dev_team": 265, "houston": 265, "mykey": 265, "config_dict": 265, "baseconfigur": 265, "qhand": 265, "queue_factori": 265, "customlisten": 265, "hand_name_1": 265, "hand_name_2": 265, "log01": 265, "logger_log01": 265, "hand01": 265, "handler_hand01": 265, "form01": 265, "formatter_form01": 265, "log02": 265, "log03": 265, "log04": 265, "log05": 265, "log06": 265, "log07": 265, "hand02": 265, "hand03": 265, "hand04": 265, "hand05": 265, "hand06": 265, "hand07": 265, "hand08": 265, "hand09": 265, "form02": 265, "form03": 265, "form04": 265, "form05": 265, "form06": 265, "form07": 265, "form08": 265, "form09": 265, "logger_pars": 265, "_defaultformatt": 265, "handler_hand02": 265, "handler_hand03": 265, "handler_hand04": 265, "default_udp_logging_port": 265, "handler_hand05": 265, "syslog_udp_port": [265, 266], "log_us": [265, 266, 352], "handler_hand06": 265, "handler_hand07": 265, "user1": [265, 469], "user2": [265, 469], "handler_hand08": 265, "handler_hand09": 265, "9022": 265, "typifi": 265, "customfield": 265, "42378": [266, 479], "newsyslog": 266, "logrot": 266, "precursor": 266, "rollov": [266, 356, 473, 479], "default_nam": [266, 424], "predetermin": 266, "attim": [266, 473], "w0": 266, "w6": 266, "w1": [266, 436], "d_": 266, "record_attr_dict": 266, "datalen": 266, "retrystart": 266, "retryfactor": 266, "retrymax": 266, "rsyslog": 266, "monterey": [266, 479], "gh": [266, 281, 316, 345, 382, 468, 469, 470, 479], "91070": 266, "12168": 266, "append_nul": [266, 472], "12419": 266, "log_": 266, "log_alert": [266, 352], "crit": 266, "log_crit": [266, 352], "log_debug": [266, 352], "emerg": [266, 458], "panic": [266, 461], "log_emerg": [266, 352], "log_err": [266, 352], "log_info": [266, 352], "log_notic": [266, 352], "log_warn": [266, 352], "log_auth": [266, 352], "authpriv": 266, "log_authpriv": [266, 352], "cron": 266, "log_cron": [266, 352], "log_daemon": [266, 352], "log_ftp": 266, "kern": 266, "log_kern": [266, 352], "lpr": 266, "log_lpr": [266, 352], "log_mail": [266, 352], "log_new": [266, 352], "log_syslog": [266, 352], "uucp": [266, 422], "log_uucp": [266, 352], "local0": 266, "log_local0": [266, 352], "local1": 266, "log_local1": 266, "local2": 266, "log_local2": 266, "local3": 266, "log_local3": 266, "local4": 266, "log_local4": 266, "local5": 266, "log_local5": 266, "local6": 266, "log_local6": 266, "local7": 266, "log_local7": [266, 352], "hammond": [266, 457, 458, 460, 461, 472, 479], "logtyp": 266, "win32servic": 266, "slimmer": 266, "credenti": [266, 285, 334, 391, 457, 474, 479], "flushonclos": [266, 479], "format_xz": 267, "format_alon": [267, 479], "format_raw": 267, "format_auto": 267, "check_non": 267, "check_crc32": 267, "check_crc64": 267, "check_sha256": 267, "preset_extrem": 267, "preset_default": 267, "memlimit": 267, "check_unknown": 267, "liblzma": [267, 469], "filter_lzma1": 267, "filter_lzma2": 267, "filter_delta": 267, "bcj": 267, "filter_x86": 267, "filter_ia64": 267, "filter_arm": 267, "filter_armthumb": 267, "filter_powerpc": 267, "filter_sparc": 267, "dict_siz": 267, "lc": 267, "mode_fast": 267, "mode_norm": 267, "nice_len": 267, "mf": 267, "mf_hc3": 267, "mf_hc4": 267, "mf_bt2": 267, "mf_bt3": 267, "mf_bt4": 267, "start_offset": 267, "data_in": 267, "data_out": 267, "lzc": 267, "out1": 267, "out2": 267, "out3": 267, "out4": 267, "lzf": 267, "my_filt": 267, "noteworthi": [268, 458, 459], "advisori": [268, 424, 451, 458, 479], "qmail": 268, "courier": [268, 365, 368, 479], "deserv": [268, 458], "remark": [268, 380, 386, 458, 462, 479], "inventor": 268, "perceiv": 268, "shortcom": [268, 461], "mboxo": 268, "mh_sequenc": 268, "mh_profil": 268, "nmh": 268, "gpl": [268, 422, 460], "rmail": 268, "037": 268, "014": 268, "abridg": 268, "attract": [268, 464, 466], "multichannel": 268, "memorandum": 268, "newsread": 268, "insofar": [268, 432], "composit": [268, 349, 372, 383, 428, 479], "bounc": [268, 458], "unseen": 268, "mua": [268, 338, 476], "time_": 268, "list_nam": 268, "list_id": 268, "mpeg": 269, "xmpeg": 269, "1524": 269, "multimedia": [269, 292], "cap": [269, 479], "showparti": 269, "tmp1223": 269, "unmarsh": [271, 469], "binomi": [272, 315, 340, 479], "mantissa": [272, 315, 462, 464], "halfway": [272, 466], "denorm": [272, 349, 479], "epsilon": [272, 349, 464], "cube": [272, 340, 445, 479], "718281": 272, "0000050000069649e": 272, "0000050000166668e": 272, "quadrant": 272, "euclidean": [272, 477, 479], "qx": 272, "norm": [272, 479], "hypotenus": 272, "triangl": [272, 380], "pythagorean": 272, "theorem": [272, 340, 341], "hyperbola": 272, "complementari": [272, 315, 404, 465, 471], "141592": 272, "283185": 272, "circumfer": 272, "vi": [272, 317], "hart": 272, "celebr": 272, "pie": [272, 337], "rebuilt": [273, 472, 474, 479], "recognit": 273, "tgz": [273, 456], "access_read": 275, "access_writ": 275, "access_copi": 275, "access_default": [275, 479], "prot": 275, "allocationgranular": 275, "prot_writ": 275, "prot_read": 275, "lieu": [275, 422], "pages": 275, "advic": [275, 290, 457, 470, 479], "pagefil": 275, "pkg_name": [276, 358, 378], "oldnam": 276, "newnam": [276, 448], "replace_path": 276, "oldpath": 276, "newpath": 276, "baconhamegg": 276, "globalnam": 276, "badmodul": 276, "_type": 276, "_inverted_registri": 276, "_slotnam": [276, 479], "_compil": [276, 305], "isstr": 276, "_sre": [276, 474, 479], "_optimize_unicod": 276, "_constant": [276, 341, 479], "repeat_on": 276, "makedict": 276, "at_end_lin": 276, "_expand": 276, "_parser": [276, 305], "_patternend": 276, "sre_flag_unicod": 276, "inttyp": [276, 479], "typetyp": 276, "msi": [278, 457, 463, 474, 476, 479], "cabinet": [278, 479], "cabnam": 278, "mszip": 278, "uuidtostr": 278, "msiopendatabas": 278, "msidbopen_createdirect": 278, "msidbopen_cr": 278, "msidbopen_direct": 278, "msidbopen_readon": 278, "msidbopen_transact": 278, "msidbopen_patchfil": 278, "msicreaterecord": 278, "productnam": 278, "productcod": 278, "productvers": 278, "manufactur": 278, "_validation_record": 278, "_stream": 278, "msidatabaseopenview": 278, "msidatabasecommit": 278, "msigetsummaryinform": 278, "msiclosehandl": 278, "msiviewexecut": 278, "msiviewgetcolumninfo": 278, "msicolinfo_nam": 278, "msicolinfo_typ": 278, "msiviewfetch": 278, "msiviewmodifi": 278, "msimodify_seek": 278, "msimodify_refresh": 278, "msimodify_insert": 278, "msimodify_upd": 278, "msimodify_assign": 278, "msimodify_replac": 278, "msimodify_merg": 278, "msimodify_delet": 278, "msimodify_insert_temporari": 278, "msimodify_valid": 278, "msimodify_validate_new": 278, "msimodify_validate_field": 278, "msimodify_validate_delet": 278, "msiviewclos": 278, "msisummaryinfogetproperti": 278, "pid_codepag": 278, "pid_titl": 278, "pid_subject": 278, "pid_author": 278, "pid_keyword": 278, "pid_com": 278, "pid_templ": 278, "pid_lastauthor": 278, "pid_revnumb": 278, "pid_lastprint": 278, "pid_create_dtm": 278, "pid_lastsave_dtm": 278, "pid_pagecount": 278, "pid_wordcount": 278, "pid_charcount": 278, "pid_appnam": 278, "pid_secur": 278, "msisummaryinfogetpropertycount": 278, "msisummaryinfosetproperti": 278, "msisummaryinfopersist": 278, "msirecordgetfieldcount": 278, "msirecordsetstr": 278, "msirecordsetstream": 278, "msirecordsetinteg": 278, "msirecordcleardata": 278, "msierror": [278, 479], "basedir": 278, "componentflag": 278, "defaultdir": 278, "keypath": 278, "featurecompon": 278, "dlg": 278, "controlev": 278, "eventmap": 278, "controlcondit": 278, "radio": [278, 371, 479], "control_next": 278, "next_control": 278, "radiobutton": [278, 371, 372, 479], "adminexecutesequ": 278, "adminuisequ": 278, "advtexecutesequ": 278, "installexecutesequ": 278, "installuisequ": 278, "uitext": 278, "actiontext": 278, "lk_": 279, "xe0": 279, "keycod": [279, 365], "unicode_char": 279, "33725": [280, 477, 479], "reboot": [280, 293, 473], "mp": [280, 461], "duplex": [280, 292], "parent_conn": 280, "child_conn": 280, "liabl": [280, 398, 422], "1415927": 280, "offload": 280, "multiple_result": 280, "patienc": 280, "poolwork": 280, "orphan": [280, 479], "waitforsingleobject": 280, "waitformultipleobject": [280, 479], "infinitesim": 280, "conn1": 280, "conn2": 280, "feeder": [280, 382, 479], "sem_getvalu": [280, 479], "allow_exit_without_flush": 280, "3770": 280, "cpus": [280, 290, 344, 473, 474, 479], "allow_non": [280, 415, 416, 461], "arr1": 280, "arr2": 280, "solitari": 280, "unown": [280, 479], "sem_timedwait": [280, 479], "typecode_or_typ": 280, "get_lock": 280, "size_or_initi": 280, "get_obj": 280, "875": 280, "375": [280, 340], "1111111111111111": 280, "515625": 280, "0625": [280, 445], "640625": 280, "shutdown_timeout": [280, 479], "xmlrpclib": [280, 460, 461, 462, 463, 464, 465, 466, 479], "50000": [280, 363], "typeid": [280, 477], "method_to_typeid": 280, "create_method": 280, "_exposed_": 280, "_method_to_typeid_": 280, "_z": 280, "mathsclass": 280, "mymanag": 280, "queuemanag": 280, "get_queu": 280, "listproxi": [280, 479], "l_outer": 280, "d_first_inn": 280, "lproxi": 280, "remoteerror": 280, "deregist": 280, "maxtasksperchild": [280, 465, 479], "apach": [280, 338, 415, 422, 449, 458, 475, 479], "mod_wsgi": [280, 345], "error_callback": 280, "chop": [280, 458, 462, 466], "lazier": 280, "outstand": [280, 422], "af_pip": 280, "object_list": 280, "waitabl": [280, 290, 325, 362, 469, 479], "1729": 280, "pipenam": 280, "servernam": 280, "doom": [280, 463], "mainprocess": 280, "pymp": 280, "_bootstrap": [280, 378, 479], "_pid": 280, "5155": 280, "5313": 280, "5331": 280, "_h": 280, "generatorproxi": 280, "get_operator_modul": 280, "foo1": [280, 316], "foo2": [280, 316], "94": [280, 315, 465], "calculatestar": 280, "pow3": 280, "imap_it": 280, "imap_unordered_it": 280, "tgot": 280, "imapiter": 280, "applyresult": 280, "number_of_process": 280, "tasks1": 280, "tasks2": 280, "done_queu": 280, "multicor": 281, "smp": 281, "novel": [281, 460, 461, 463], "shm_a": 281, "shm_b": 281, "howdi": 281, "ndarray": 281, "np": [281, 472], "dtype": [281, 382], "psm_21467_46075": 281, "existing_shm": 281, "int64": 281, "888": 281, "smm": 281, "psm_6572_7512": 281, "raw_shm": 281, "another_sl": 281, "psm_6572_12221": 281, "depict": 281, "do_work": [281, 290], "total_result": 281, "storabl": 281, "10m": 281, "106939": 281, "nul_bug_demo": 281, "deserialized_sl": 281, "mapnam": 284, "default_domain": 284, "joy": [284, 380], "nntlib": 285, "poster": 285, "3977": 285, "2980": 285, "gmane": [285, 472, 479], "committ": [285, 472], "1096": 285, "1087": 285, "1088": 285, "1089": 285, "1090": 285, "1091": 285, "1092": 285, "ssh": [285, 328, 329, 390, 479], "1093": 285, "1094": 285, "fellow": 285, "240": [285, 380], "119": [285, 340, 378, 477], "readermod": 285, "usenetrc": 285, "authinfo": 285, "1755": [285, 472], "nntps": 285, "4642": 285, "disclaim": [285, 346, 397, 422], "groupinfo": 285, "tor": 285, "group_pattern": [285, 423, 427], "offlin": [285, 378, 457], "grouppattern": 285, "wildmat": 285, "295": [285, 470, 479], "biopython": 285, "elid": 285, "message_spec": 285, "article_numb": 285, "art_num": 285, "117216": 285, "xref": 285, "ik1hcnrpbib2libmw7z3axmi": 285, "loewi": 285, "message_id": 285, "9099": 285, "20030112190404": 285, "ge29873": 285, "metaslash": 285, "neal": [285, 461, 463, 464], "norwitz": [285, 461, 463, 464], "hdr": 285, "header_str": 285, "e9buter_en_python": 285, "buter": 285, "chjvymzdqg1ligrlig1hdhjpy2u": 285, "probl": 285, "myfoo": 286, "myintegr": 286, "do_my_adding_stuff": 286, "othertypeiknowabout": 286, "do_my_other_adding_stuff": 286, "_operator_fallback": 286, "monomorphic_oper": 286, "fallback_oper": 286, "__r": 286, "_add": 286, "66": [288, 385, 438, 459, 464], "tuppl": 288, "resolve_attr": 288, "cdefg": 288, "soldier": 288, "rank": [288, 340, 409, 470], "captain": [288, 475], "dotterbart": 288, "banana": [288, 341, 438, 447], "pear": [288, 438, 447], "yourscript": 289, "foutfil": 289, "qfoutfil": 289, "acquaint": 289, "pf": [289, 372], "ffoo": 289, "controversi": [289, 460], "contradictori": 289, "whatsoev": [289, 322, 422], "mutant": 289, "oddbal": 289, "humbl": 289, "mission": 289, "overwhelm": 289, "opt_str": 289, "jam": 289, "n42": 289, "vewwi": 289, "wabbit": 289, "novic": 289, "bland": [289, 463, 464], "clue": 289, "optioncontain": 289, "add_option_group": 289, "suppress_usag": 289, "option_list": 289, "standard_option_list": 289, "option_class": 289, "indentedhelpformatt": 289, "titledhelpformatt": 289, "add_help_opt": 289, "make_opt": 289, "irrelev": [289, 465, 479], "suppress_help": 289, "fbar": 289, "mypkg": [289, 384], "check_choic": 289, "poke": 289, "set_conflict_handl": 289, "intellig": [289, 292, 294], "whittl": 289, "overkil": 289, "rarg": 289, "optionvalu": 289, "record_foo_seen": 289, "saw_foo": 289, "check_ord": 289, "moon": 289, "check_moon": 289, "is_moon_ful": 289, "store_valu": 289, "hairi": 289, "intricaci": 289, "stab": 289, "vararg_callback": 289, "floatabl": 289, "vararg_attr": 289, "check_mytyp": 289, "sillier": 289, "check_complex": 289, "myoption": 289, "take_act": 289, "ding": [289, 478, 479], "dong": [289, 468, 469, 470, 477, 478, 479], "ensure_valu": 289, "optparse_pars": 289, "valv": 289, "threat": 290, "inaccess": [290, 391, 424, 458, 461, 473, 479], "dcxx": 290, "nonsens": [290, 473], "macosx_deployment_target": [290, 479], "ruid": 290, "euid": 290, "suid": 290, "rgid": 290, "egid": 290, "sgid": 290, "superus": 290, "nstype": 290, "reassoci": 290, "clone_new": 290, "pgrp": 290, "sysnam": [290, 300], "disassoci": 290, "clone_": 290, "decept": [290, 461], "fd_low": [290, 479], "fd_high": [290, 479], "offset_src": 290, "offset_dst": 290, "procf": [290, 479], "sysf": 290, "fd2": 290, "filedescriptor": 290, "95": [290, 311, 315, 340, 378, 461, 464], "98": [290, 334, 341, 401, 464, 465, 471], "_commit": 290, "leader": [290, 328, 479], "0o777": [290, 293], "sc_iov_max": [290, 334], "out_fd": [290, 479], "in_fd": [290, 479], "pg": 290, "stdout_fileno": 290, "close_fd": [290, 345, 462, 471, 476, 477, 479], "faccessat": 290, "effective_id": [290, 472], "xxxxxxxx": [290, 431], "xxxx": [290, 431, 479], "xxxxxxxxxxxx": 290, "vista": [290, 372, 479], "repars": [290, 477, 479], "junction": [290, 291, 293, 329, 470, 477, 479], "exist_ok": [290, 293, 474, 479], "21082": [290, 479], "rendezv": [290, 471], "0o600": 290, "prune": [290, 293, 479], "opendir": [290, 479], "readdir": [290, 474], "findfirstfilew": [290, 479], "findnextfilew": 290, "scandir_path": 290, "dirent": 290, "d_type": 290, "dt_unknown": 290, "statinfo": 290, "33188": 290, "7876932": 290, "234881026": 290, "264": [290, 344, 460], "1297230295": 290, "1297230027": 290, "fat32": [290, 479], "dwfileattribut": [290, 474], "by_handle_file_inform": [290, 474], "getfileinformationbyhandl": [290, 474], "file_attribute_": 290, "io_reparse_tag_": 290, "f_bsize": 290, "f_frsize": 290, "f_block": 290, "f_bfree": 290, "f_bavail": 290, "f_file": 290, "f_ffree": 290, "f_favail": 290, "f_flag": 290, "f_namemax": 290, "f_fsid": [290, 479], "st_rdon": 290, "st_nosuid": 290, "st_nodev": 290, "st_noexec": 290, "st_synchron": 290, "st_mandlock": 290, "st_write": 290, "st_append": 290, "st_immut": 290, "st_noatim": 290, "st_nodiratim": 290, "st_relatim": 290, "atim": 290, "target_is_directori": [290, 293, 472], "morph": 290, "unprivileg": 290, "secreatesymboliclinkprivileg": 290, "unelev": 290, "atime_n": 290, "mtime_n": 290, "dirpath": [290, 293], "resumpt": [290, 475, 479], "cvs": [290, 458, 459, 460, 461, 462, 463, 479], "dirfd": 290, "rootfd": 290, "mfd_": 290, "memfd": [290, 479], "mfd_huge": 290, "initv": 290, "efc_cloexec": 290, "adddlldirectori": 290, "exit_success": 290, "retryabl": 290, "cygwin": [290, 349, 356, 457, 459, 461, 477, 479], "file_act": [290, 479], "setpgroup": [290, 479], "resetid": [290, 479], "setsigmask": [290, 479], "setsigdef": [290, 479], "new_fd": 290, "posix_spawn_file_actions_addopen": 290, "posix_spawn_file_actions_addclos": 290, "posix_spawn_file_actions_adddup2": 290, "posix_spawn_setpgroup": 290, "posix_spawn_resetid": 290, "posix_spawn_setsid": 290, "posix_spawn_setsid_np": 290, "posix_spawn_setsigmask": 290, "sigdef": 290, "posix_spawn_setsigdef": 290, "posix_spawn_setschedparam": 290, "posix_spawn_setschedul": 290, "after_in_par": 290, "after_in_child": 290, "shellexecut": [290, 479], "comspec": [290, 345, 472, 473], "children_us": 290, "children_system": 290, "getprocesstim": 290, "idtyp": 290, "siginfo_t": [290, 330, 479], "si_pid": [290, 330], "si_uid": [290, 330], "si_signo": [290, 330], "si_status": [290, 330], "si_cod": [290, 330, 478, 479], "ptrace": [290, 479], "robin": [290, 409, 438, 477, 479], "quantum": 290, "undetermin": 290, "unobtain": 290, "sc_minsigstksz": [290, 479], "entropi": [290, 338, 475, 479], "environment": [290, 391, 451, 479], "unnecessarili": [290, 479], "524": [290, 475, 479], "bcryptgenrandom": [290, 469, 479], "getentropi": [290, 474, 479], "cryptgenrandom": [290, 469, 479], "ntpath": [291, 476, 479], "getvolumepathnam": 291, "std": [291, 349, 362, 463, 479], "1003": 291, "path1": 291, "path2": 291, "fp1": 291, "fp2": 291, "stat1": 291, "stat2": 291, "cshrc": [291, 455], "soundcard": 292, "audiodev": [292, 464], "dsp": 292, "player": [292, 316, 342, 380], "linuxaudiodev": [292, 458, 461, 464], "mixerdev": 292, "sndctl_dsp_setfmt": 292, "sndctl_dsp_sync": 292, "afmt_mu_law": 292, "afmt_a_law": 292, "afmt_ima_adpcm": 292, "afmt_u8": 292, "afmt_s16_l": 292, "afmt_s16_b": 292, "68k": 292, "powerpc": [292, 462, 463, 464, 479], "afmt_s8": 292, "afmt_u16_l": 292, "afmt_u16_b": 292, "afmt_queri": 292, "monophon": 292, "stereophon": 292, "sampler": 292, "11025": 292, "22050": 292, "96000": 292, "dvd": 292, "mixabl": 292, "sound_mixer_pcm": 292, "sound_mixer_synth": 292, "sound_mixer_": 292, "pcm": [292, 397], "sound_mixer_volum": 292, "gravi": 292, "ultrasound": 292, "left_volum": 292, "right_volum": 292, "microphon": 292, "setrecsrc": 292, "sound_mixer_m": 292, "test_pathlib": [293, 479], "pathseg": 293, "lib64": [293, 349, 350, 452, 478, 479], "apache2": 293, "an_absolute_path": 293, "regroup": 293, "case_sensit": [293, 470, 479], "walk_up": [293, 470, 479], "941": 293, "error_messag": 293, "subpath": [293, 419], "antoin": [293, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "751": 293, "851": 293, "mypath": 293, "session_id": 293, "798": 293, "unrepresent": [293, 477, 479], "956": 293, "1327883547": 293, "852554": 293, "33277": 293, "0o444": 293, "33060": 293, "nonexistentfil": 293, "film": [293, 382], "inordin": 293, "_templat": 293, "_build": 293, "_static": [293, 479], "top_down": 293, "on_error": [293, 382], "mimick": 293, "my_binary_fil": 293, "my_text_fil": 293, "mylink": 293, "other_path": 293, "missing_ok": [293, 479], "abnorm": [294, 349, 390, 471], "pdbrc": [294, 469, 471, 475, 478, 479], "nosigint": [294, 471], "readrc": [294, 475, 479], "elp": 294, "hel": 294, "_frame": [294, 479], "_retval": 294, "_except": 294, "reak": 294, "tbreak": 294, "ear": 294, "bpnumber": 294, "some_vari": 294, "tep": 294, "unt": 294, "il": [294, 338, 430], "eturn": 294, "ont": 294, "inu": 294, "ump": 294, "ist": 294, "longlist": 294, "rgs": 294, "whati": [294, 479], "undisplay": [294, 471], "classinst": 294, "ps": [294, 305, 345, 395], "unalia": 294, "list_opt": 294, "uit": 294, "retval": [294, 459], "tackl": [296, 458], "3154": [296, 473, 479], "574": [296, 378, 477, 479], "buffer_callback": 296, "therein": 296, "superflu": [296, 334, 337, 479], "referenti": 296, "elig": [296, 426, 471], "picklestr": [296, 297], "worthwhil": [296, 463, 472], "list_of_item": 296, "sixth": [296, 460, 477], "memorecord": 296, "dbpickler": 296, "dbunpickl": 296, "type_tag": 296, "key_id": 296, "fight": [296, 471], "italian": [296, 380], "disturb": [296, 479], "reduce_someclass": 296, "mypickl": 296, "textread": 296, "new_read": 296, "myclass": [296, 424, 436], "my_attribut": 296, "unpickled_class": 296, "massiv": [296, 462, 463, 474, 479], "eschew": 296, "reconstructor": 296, "zerocopybytearray": 296, "_reconstruct": 296, "unseri": [296, 471], "new_b": 296, "nsystem": 296, "ntr": 296, "inoffens": 296, "safe_builtin": 296, "restrictedunpickl": 296, "restricted_load": 296, "cbuiltin": [296, 467], "neval": 296, "4j": [296, 423, 431, 438, 464], "intim": 297, "binint1": 297, "tuple2": 297, "binput": [297, 479], "indentlevel": 297, "opcodeinfo": 297, "pipefil": 298, "module_find": 299, "ispkg": 299, "path_item": 299, "module_or_nam": 299, "12915": [299, 479], "pyramid": 299, "is_64bit": 300, "amdk6": 300, "buildno": 300, "builddat": [300, 479], "scm": 300, "dega": 300, "vminfo": 300, "osinfo": 300, "vm_name": 300, "vm_releas": 300, "vm_vendor": 300, "os_nam": 300, "os_vers": 300, "os_arch": 300, "csd": 300, "uniprocessor": 300, "enterpris": [300, 479], "iotuap": 300, "serverstandard": 300, "nanoserv": 300, "iot": [300, 479], "versioninfo": 300, "dev_stag": 300, "non_release_vers": 300, "16384": 300, "freedesktop": [300, 468, 472, 479], "pretty_nam": 300, "id_lik": 300, "version_id": 300, "variant_id": 300, "get_like_distro": 300, "ios": 301, "nskeyedarchiv": [301, 477], "nskeyedunarchiv": 301, "invalidfileexcept": [301, 479], "pl": 301, "astr": 301, "doodah": 301, "afloat": 301, "anint": 301, "adict": 301, "anotherstr": 301, "athirdstr": 301, "xe4ssig": 301, "ma": [301, 468, 469, 479], "atruevalu": 301, "afalsevalu": 301, "gunk": 301, "somemoredata": 301, "adat": 301, "1939": 302, "2595": 302, "obsolesc": 302, "mailserv": 302, "pop3_port": 302, "pop3_ssl_port": 302, "995": [302, 475], "fetchmail": 302, "noncompli": 302, "2449": 302, "mesg_num": 302, "eudora": 302, "qpop": 302, "disconnect": [302, 332, 337, 401, 477, 479], "signoff": 302, "howmuch": 302, "mesgnum": 302, "6856": [302, 465, 471, 474, 479], "nummessag": 302, "off_t": 303, "getconf": 303, "lfs_cflag": 303, "d_largefile64_sourc": 303, "d_file_offset_bit": 303, "sort_dict": [304, 477, 479], "underscore_numb": [304, 468, 479], "tup": [304, 380, 382], "sampleproject": 304, "project_info": 304, "author_email": [304, 479], "pypa": [304, 395, 455], "googlegroup": 304, "bugtrack_url": 304, "osi": 304, "webpag": 304, "description_content_typ": 304, "docs_url": 304, "download_url": [304, 463], "last_day": 304, "last_month": 304, "last_week": 304, "home_pag": 304, "maintainer_email": [304, 479], "package_url": 304, "project_url": 304, "homepag": 304, "release_url": 304, "requires_dist": 304, "pstat": [305, 447, 459, 463, 479], "lsprof": 305, "rosen": 305, "ted": 305, "czotter": 305, "imit": [305, 464], "ncall": [305, 479], "tottim": 305, "percal": 305, "cumtim": [305, 479], "759": 305, "937": 305, "598": 305, "_code": 305, "435": [305, 473], "_parse_sub": 305, "induc": [305, 421], "subfunct": [305, 472], "restat": 305, "output_fil": 305, "sort_ord": 305, "sortkey": 305, "cull": 305, "timeunit": 305, "subcal": 305, "pr": [305, 458, 479], "sortbi": 305, "coalesc": 305, "printout": [305, 479], "pcall": 305, "nfl": 305, "percentag": [305, 342, 442, 464, 479], "statsprofil": [305, 479], "functionprofil": [305, 479], "tick": [305, 319, 362], "lag": 305, "calibr": 305, "probabilist": 305, "god": 305, "8ghz": 305, "i5": 305, "04e": 305, "your_computed_bia": 305, "your_time_func": 305, "lone": [305, 332, 426, 479], "cleanest": 305, "your_integer_time_func": 305, "_lsprof": [305, 479], "thorough": [306, 316, 334, 341, 471, 479], "master_read": 306, "stdin_read": 306, "baffl": 306, "pseudotermin": 306, "typescript": 306, "use_python": 306, "pw_name": 307, "pw_passwd": 307, "pw_uid": [307, 345], "pw_gid": 307, "pw_geco": 307, "pw_dir": 307, "pw_shell": 307, "dfile": 308, "dorais": 308, "filen": 308, "pagin": 310, "pager": [310, 479], "pythondoc": [310, 479], "pyexpat": [311, 405, 422, 452, 458, 461, 463, 464, 465, 479], "unauthent": [311, 338, 405, 407, 408, 409, 410, 415, 416, 479], "namespace_separ": 311, "repertoir": [311, 332, 371, 464], "xmlns": [311, 391, 409, 465, 479], "elem1": [311, 463], "elem2": [311, 463], "isfin": 311, "xml_param_entity_parsing_nev": 311, "xml_param_entity_parsing_unless_standalon": 311, "xml_param_entity_parsing_alway": 311, "handlernam": 311, "doctypenam": 311, "has_internal_subset": 311, "elnam": 311, "attnam": 311, "idref": 311, "entitynam": 311, "notationnam": 311, "ndata": [311, 411], "is_parameter_ent": 311, "some_xml_docu": 311, "start_el": [311, 408], "end_el": [311, 408], "char_data": 311, "child1": [311, 385], "child2": [311, 385], "xml_ctype_ani": 311, "xml_ctype_choic": 311, "xml_ctype_empti": 311, "xml_ctype_mix": 311, "xml_ctype_nam": 311, "xml_ctype_seq": 311, "xml_cquant_non": 311, "xml_cquant_opt": 311, "xml_cquant_plus": 311, "xml_cquant_rep": 311, "xml_error_": 311, "constant_nam": 311, "undeclar": 311, "amplif": 311, "breach": [311, 422], "rec": [311, 407, 409], "xml11": [311, 407, 409], "20060816": [311, 407, 409], "encodingdecl": [311, 407, 409], "mise": 315, "19937": 315, "matsumoto": [315, 422], "nishimura": [315, 422], "equidistribut": 315, "vol": 315, "cum_weight": 315, "2080": 315, "10000000": 315, "lambd": [315, 479], "mu": [315, 340, 477, 479], "sigma": [315, 340, 477], "kappa": 315, "pareto": 315, "weibul": 315, "seeder": 315, "37444887175646646": 315, "1800146073117523": 315, "148957571865031": 315, "roulett": 315, "spin": [315, 479], "jack": [315, 316, 341, 393, 422, 438, 442, 460, 461, 463, 467, 479], "king": [315, 316, 458, 477, 479], "coin": 315, "settl": [315, 464], "10_000": [315, 340], "4169": 315, "quartil": [315, 340, 477], "2_500": 315, "7_500": 315, "7958": 315, "thoughtco": 315, "3126155": 315, "73": [315, 378, 448, 462, 477, 478], "denni": [315, 468, 469, 478, 479], "shasha": 315, "manda": 315, "wilson": [315, 461, 462, 474, 478, 479], "drug": 315, "placebo": 315, "observed_diff": 315, "new_diff": 315, "reshuffl": 315, "4f": 315, "hypothesi": [315, 479], "average_arrival_interv": 315, "average_service_tim": 315, "stdev_service_tim": 315, "num_serv": 315, "arrival_tim": 315, "1_000_000": [315, 475, 479], "next_server_avail": 315, "service_dur": 315, "service_complet": 315, "jake": [315, 465, 467, 477, 479], "vanderpla": 315, "econom": 315, "norvig": 315, "random_product": 315, "random_permut": 315, "random_combin": 315, "random_combination_with_replac": 315, "05954861408025609": 315, "fullrandom": 315, "0x10_0000_0000_0000": 315, "87925541791544": 315, "allen": [315, 338, 471, 479], "downey": 315, "frie09": 316, "gentler": 316, "nfoo2": 316, "possess": [316, 341, 401, 469, 479], "aaaab": 316, "aaab": 316, "aaaaaa": 316, "ailmsux": 316, "imsx": 316, "x7f": 316, "isaac": 316, "asimov": 316, "lookbehind": [316, 474, 479], "theth": 316, "bfoo": 316, "foo3": 316, "py2": [316, 449, 471, 479], "typographi": 316, "nicer": [316, 386, 479], "0a3b9": 316, "foot": [316, 340, 447], "fell": [316, 437, 447, 459, 460, 461], "z_": [316, 431], "z_0": 316, "npy_": 316, "npy_myfunc": 316, "dashrepl": 316, "matchobj": 316, "pro": 316, "gram": [316, 427], "sand": 316, "unmatch": [316, 342, 390, 474, 479], "new_str": 316, "number_of_subs_mad": 316, "legal_char": 316, "abcdefghijklmnopqrstuvwxyz0123456789": 316, "digits_r": 316, "ogr": 316, "doggi": 316, "og": [316, 358, 479], "groupn": 316, "physicist": 316, "reynold": 316, "a1b2c3": 316, "c3": [316, 390, 424, 461, 472], "1632": 316, "cba": 316, "remove_thi": 316, "toni": [316, 464, 479], "tiremove_thisg": 316, "tiger": 316, "displaymatch": 316, "poker": [316, 380], "9tjqk": 316, "akt5q": 316, "akt5": 316, "akt": 316, "727ak": 316, "717ak": 316, "7s": 316, "717": 316, "718ak": 316, "354aa": 316, "5c": 316, "ee": [316, 341, 467], "nb": [316, 466], "nx": 316, "ross": [316, 465, 467, 472, 478, 479], "mcfluff": 316, "834": 316, "345": [316, 462, 467], "155": 316, "elm": 316, "ronald": [316, 463, 464, 465, 471, 473, 478], "heathmor": 316, "892": 316, "3428": 316, "finley": 316, "avenu": [316, 422, 460], "frank": [316, 479], "burger": 316, "925": 316, "541": 316, "7625": 316, "662": 316, "dogwood": 316, "heather": 316, "albrecht": 316, "548": 316, "326": 316, "4584": 316, "919": 316, "park": 316, "telephon": 316, "hous": [316, 475], "inner_word": 316, "professor": 316, "abdolmalek": 316, "poefsrosr": 316, "aealmlobdk": 316, "pslaee": 316, "reorpt": 316, "abnsec": 316, "plmrptoy": 316, "pofsros": 316, "aodlambelk": 316, "plase": 316, "reoprt": 316, "yuor": 316, "asnebc": 316, "potlmrpi": 316, "disguis": [316, 424], "polic": 316, "ly": 316, "02d": 316, "scanner": [316, 353, 374, 473, 479], "gosub": 316, "token_specif": 316, "tok_regex": 316, "line_start": 316, "inputrc": [317, 479], "libedit": [317, 479], "editlin": [317, 452, 479], "editrc": [317, 479], "rl_complet": 317, "rl_parse_and_bind": 317, "rl_read_init_fil": 317, "rl_line_buff": 317, "rl_insert_text": 317, "rl_redisplay": 317, "read_histori": 317, "write_histori": [317, 479], "nelement": 317, "append_histori": 317, "history_truncate_fil": 317, "history_get": 317, "remove_histori": 317, "replace_history_entri": 317, "rl_startup_hook": 317, "rl_pre_input_hook": 317, "entry_func": 317, "rl_completion_match": 317, "rl_attempted_completion_funct": 317, "rl_completion_typ": 317, "libreadlin": [317, 479], "rl_completer_word_break_charact": 317, "rl_completion_display_matches_hook": 317, "longest_match_length": 317, "python_histori": [317, 331, 443], "histfil": 317, "unruli": 317, "h_len": 317, "prev_h_len": 317, "new_h_len": 317, "historyconsol": 317, "init_histori": 317, "save_histori": 317, "repr_typ": 318, "subobj": 318, "myrepr": 318, "repr_textiowrapp": 318, "cap_sys_resourc": 319, "sigxcpu": 319, "rlim_cur": 319, "mbuf": 319, "overcommit": 319, "sysctl": 319, "rusage_": 319, "ru_utim": 319, "ru_stim": 319, "ru_maxrss": 319, "ru_ixrss": 319, "ru_idrss": 319, "ru_isrss": 319, "ru_minflt": 319, "ru_majflt": 319, "ru_nswap": 319, "ru_inblock": 319, "ru_oublock": 319, "ru_msgsnd": 319, "ru_msgrcv": 319, "ru_nsign": 319, "ru_nvcsw": 319, "voluntari": 319, "ru_nivcsw": 319, "involuntari": 319, "mod_nam": 321, "init_glob": 321, "run_nam": 321, "alter_si": 321, "path_nam": 321, "snow": [321, 469, 470, 472, 473, 474, 475, 476, 477], "timefunc": [322, 472], "delayfunc": 322, "print_tim": 322, "print_some_tim": 322, "1_650_000_000": 322, "1652342830": 322, "3640375": 322, "3642538": 322, "3643398": 322, "1652342835": 322, "3694863": 322, "3696074": 322, "1652342840": 322, "369612": 322, "3697174": 322, "soonest": [322, 472], "xebr": 323, "x17d": 323, "xae": 323, "xd4": 323, "xe3": [323, 464], "xb6": 323, "xe2": [323, 464], "xebp1": 323, "x8b": 323, "f9bf78b9a18ce6d46a0cd2b0b86df9da": 323, "drmhze6epcv0fn_81bj": 323, "token_": 323, "xkcd": 323, "passphras": 323, "epoll_create1": 325, "epoll_cloexec": 325, "kq_filter_read": 325, "kq_ev_add": 325, "rlist": 325, "wlist": 325, "xlist": 325, "parameterless": 325, "winsock": [325, 334, 479], "eventmask": [325, 464], "pollin": 325, "pollpri": 325, "pollout": 325, "epollin": 325, "epollout": 325, "epollpri": 325, "urgent": 325, "epollerr": 325, "assoc": 325, "epollhup": 325, "epollet": 325, "epolloneshot": 325, "epollexclus": [325, 479], "epollrdhup": [325, 479], "epollrdnorm": 325, "epollrdband": 325, "epollwrnorm": 325, "epollwrband": 325, "epollmsg": 325, "maxev": 325, "scalabl": [325, 458], "fds": [325, 334, 479], "pollerr": 325, "pollhup": 325, "hung": 325, "pollrdhup": [325, 479], "pollnval": 325, "changelist": 325, "max_ev": 325, "eventlist": 325, "sektion": 325, "kq_filter_writ": 325, "kq_filter_aio": 325, "aio": 325, "kq_filter_vnod": 325, "kq_filter_proc": 325, "kq_filter_netdev": 325, "kq_filter_sign": 325, "kq_filter_tim": 325, "kq_ev_delet": 325, "kq_ev_en": 325, "permitscontrol": 325, "kq_ev_dis": 325, "disablesev": 325, "kq_ev_oneshot": 325, "kq_ev_clear": 325, "kq_ev_sysflag": 325, "kq_ev_flag1": 325, "kq_ev_eof": 325, "kq_ev_error": 325, "kq_note_lowat": 325, "kq_note_delet": 325, "kq_note_writ": 325, "kq_note_extend": 325, "kq_note_attrib": 325, "kq_note_link": 325, "kq_note_renam": 325, "kq_note_revok": 325, "revok": 325, "kq_note_exit": 325, "kq_note_fork": 325, "kq_note_exec": 325, "kq_note_pctrlmask": 325, "kq_note_pdatamask": 325, "kq_note_track": 325, "kq_note_child": 325, "note_track": 325, "kq_note_trackerr": 325, "kq_note_linkup": 325, "kq_note_linkdown": 325, "kq_note_linkinv": 325, "sel": [326, 330], "writeback": 327, "handier": 327, "keyencod": 327, "set_loc": 327, "bsddb": [327, 461, 464, 465], "pybsddb": [327, 461, 464, 465, 466], "hashopen": 327, "btopen": 327, "rnopen": 327, "klist": 327, "minilanguag": 328, "split_command": 328, "boom": [328, 385, 386], "plug": [328, 479], "remote_command": 328, "pushback": 328, "newstream": 328, "newfil": 328, "lexer": 328, "beginn": 328, "donotsepar": 328, "fsrc": 329, "fdst": 329, "uncontrol": 329, "copy_funct": [329, 471, 474, 479], "ignore_dangling_symlink": [329, 471, 479], "dirs_exist_ok": [329, 477, 479], "onexc": [329, 470, 479], "suscept": [329, 457, 479], "excinfo": 329, "mv": [329, 472], "needcurrentdirectoryforexepathw": [329, 470], "nodefaultcurrentdirectoryinexepath": 329, "python33": 329, "srcname": 329, "33671": [329, 477, 479], "userspac": [329, 472, 477], "outfd": [329, 477], "infd": [329, 477], "fcopyfil": [329, 479], "_logpath": 329, "reattempt": 329, "remove_readon": 329, "xztar": [329, 474, 479], "dry_run": [329, 358], "gztar": [329, 471, 475, 479], "bztar": [329, 471], "pax": [329, 354, 464, 477, 479], "extra_arg": [329, 471], "supports_root_dir": 329, "archive_nam": 329, "myarchiv": [329, 448, 471], "tarek": [329, 351, 464, 465, 471, 474, 479], "tzvf": 329, "drwx": 329, "609": 329, "authorized_key": 329, "id_dsa": 329, "1675": 329, "id_rsa": 329, "37192": 329, "known_host": 329, "please_add": 329, "do_not_add": 329, "my_arch": 329, "uninterrupt": 330, "air": 330, "ctrl_": 330, "sigprocmask": 330, "sigquit": [330, 345], "bus": [330, 401], "hangup": 330, "death": [330, 472], "coprocessor": 330, "sigvtalrm": 330, "sigprof": 330, "siginfo": 330, "sigstop": 330, "warn_on_full_buff": [330, 476, 479], "wakeup": [330, 472, 476, 479], "sigset": [330, 479], "si_errno": 330, "si_band": [330, 479], "ttys0": 330, "spamcontext": 330, "exc_val": [330, 341], "interrupt_read": 330, "interrupt_writ": 330, "subsubdirectori": 331, "bletch": 331, "usercustom": [331, 350, 434, 473, 479], "appdata": [331, 457, 464], "pythonuserbas": [331, 451, 464], "sitedir": 331, "known_path": 331, "esmtp": 332, "821": 332, "1869": 332, "local_hostnam": 332, "fqdn": 332, "lmtp_port": 332, "smtp_code": 332, "smtp_error": 332, "helo_resp": 332, "ehlo_resp": 332, "does_esmtp": 332, "esmtp_featur": 332, "vrfi": 332, "foil": 332, "spammer": 332, "initial_response_ok": [332, 479], "4954": [332, 479], "auth_cram_md5": 332, "auth_plain": 332, "auth_login": [332, 479], "from_addr": [332, 471], "to_addr": [332, 471], "mail_opt": [332, 474, 479], "rcpt_option": 332, "8bitmim": [332, 474, 479], "dsn": 332, "rcpt": 332, "smtpnotsupport": 332, "hcom": 333, "sndr": 333, "sndt": 333, "voc": 333, "8svx": 333, "sb": [333, 355], "ub": 333, "ul": [333, 407, 460], "sampling_r": 333, "bits_per_sampl": 333, "sndtool": 333, "lab": [333, 422, 436, 458, 460, 461], "waveform": [333, 397, 402], "transliter": 334, "dare": 334, "inaddr_ani": 334, "inaddr_broadcast": 334, "flowinfo": 334, "sin6_flowinfo": 334, "sin6_scope_id": 334, "sockaddr_in6": 334, "af_netlink": [334, 463], "tipc": [334, 464], "af_tipc": 334, "addr_typ": 334, "v2": [334, 344, 422, 463, 464, 479], "tipc_addr_nameseq": 334, "tipc_addr_nam": 334, "tipc_addr_id": 334, "tipc_zone_scop": 334, "tipc_cluster_scop": 334, "tipc_node_scop": 334, "can0": 334, "rx_addr": 334, "tx_addr": 334, "pgn": 334, "ecu": 334, "sysproto_control": 334, "pf_system": [334, 472], "af_bluetooth": [334, 479], "btproto_l2cap": 334, "bdaddr": 334, "psm": 334, "bluetooth": [334, 479], "btproto_rfcomm": 334, "btproto_hci": 334, "device_id": 334, "btproto_sco": 334, "feat": 334, "aead": [334, 338], "skcipher": 334, "rng": 334, "aes": [334, 338, 461], "drbg_nopr_ctr_aes256": 334, "32bit": [334, 460, 479], "vsock": 334, "ifnam": 334, "pkttype": 334, "hatyp": 334, "ethernet": 334, "ethertype_": [334, 479], "packet_host": 334, "packet_broadcast": 334, "packet_multicast": 334, "packet_otherhost": 334, "promiscu": 334, "packet_outgo": 334, "arp": [334, 479], "qualcomm": [334, 479], "ipproto_udplit": [334, 479], "udplite_send_cscov": [334, 479], "udplite_recv_cscov": [334, 479], "hyper": [334, 479], "vm_id": 334, "service_id": 334, "vmid": 334, "v6": 334, "nondeterminist": 334, "h_errno": 334, "hstrerror": 334, "gai_strerror": 334, "eai_": 334, "af_": [334, 473], "sock_": [334, 473, 479], "addressfamili": 334, "socketkind": 334, "so_": 334, "msg_": 334, "sol_": 334, "scm_": 334, "ipproto_": 334, "ipport_": 334, "inaddr_": 334, "ip_": [334, 479], "ipv6_": 334, "ai_": 334, "ni_": 334, "tcp_": [334, 479], "so_domain": [334, 475], "so_protocol": [334, 475], "so_peersec": [334, 475], "so_passsec": [334, 475], "tcp_user_timeout": [334, 475, 476, 479], "tcp_congest": [334, 475, 476, 479], "tcp_fastopen": [334, 479], "tcp_keepcnt": [334, 479], "tcp_notsent_lowat": [334, 476, 479], "tcp_keepidl": [334, 479], "tcp_keepintvl": [334, 479], "ip_recvto": [334, 468, 479], "tcp_keepal": [334, 479], "tcp_connection_info": [334, 479], "tcp_info": 334, "so_rtabl": [334, 479], "so_user_cooki": [334, 479], "so_mark": 334, "tcp_md5sig": [334, 479], "tcp_thin_linear_timeout": [334, 479], "tcp_thin_dupack": [334, 479], "tcp_repair": [334, 479], "tcp_repair_queu": [334, 479], "tcp_queue_seq": [334, 479], "tcp_repair_opt": [334, 479], "tcp_timestamp": [334, 479], "tcp_cc_info": [334, 479], "tcp_save_syn": [334, 479], "tcp_saved_syn": [334, 479], "tcp_repair_window": [334, 479], "tcp_fastopen_connect": [334, 479], "tcp_ulp": [334, 479], "tcp_md5sig_ext": [334, 479], "tcp_fastopen_key": [334, 479], "tcp_fastopen_no_cooki": [334, 479], "tcp_zerocopy_rec": [334, 479], "tcp_inq": [334, 479], "tcp_tx_delay": [334, 479], "ip_pktinfo": [334, 479], "ip_unblock_sourc": 334, "ip_block_sourc": 334, "ip_add_source_membership": 334, "ip_drop_source_membership": 334, "sol_can_": 334, "can_": 334, "can_bcm_": 334, "bcm": [334, 479], "can_bcm_can_fd_fram": 334, "can_raw": 334, "15765": 334, "sae": 334, "j1939": [334, 479], "divert": [334, 479], "packet_": 334, "rds_": 334, "rcvall_": 334, "wsaioctl": [334, 464], "tipc_": 334, "alg_": [334, 475], "vmaddr": 334, "so_vm": 334, "so_passcr": 334, "802": 334, "overrul": 334, "ipproto_mptcp": [334, 468, 479], "global_default": 334, "dualstack_ipv6": 334, "ai_numerichost": 334, "canonnam": 334, "ai_canonnam": 334, "ipproto_tcp": 334, "2606": 334, "2800": 334, "220": [334, 338, 437], "248": 334, "1893": 334, "25c8": 334, "1946": 334, "93": [334, 477, 478], "184": 334, "216": [334, 442, 445], "aliaslist": 334, "ipaddrlist": 334, "icmp": 334, "ip_str": 334, "quad": [334, 460, 479], "in_addr": 334, "packed_ip": 334, "in6_addr": 334, "5aef": 334, "2b": [334, 475], "ancillari": [334, 472, 479], "3542": [334, 479], "fb605b73": 334, "aac2": 334, "49a6": 334, "9a2f": 334, "25416aea0573": 334, "ethernet_32770": 334, "vethernet": 334, "if_nam": 334, "if_index": 334, "scm_right": 334, "maxfd": 334, "optnam": [334, 475], "ancbufs": 334, "ancdata": 334, "msg_flag": 334, "cmsg_level": 334, "cmsg_type": 334, "cmsg_data": 334, "unconnect": [334, 464], "sol_socket": 334, "scatter": [334, 460, 461, 465], "b1": [334, 380], "b2": [334, 380], "0123456789": [334, 341, 342], "b3": 334, "lamb": [334, 437, 470], "iv": 334, "assoclen": 334, "optlen": [334, 475], "optval": 334, "halv": [334, 462, 465], "shut_rd": 334, "shut_wr": 334, "shut_rdwr": [334, 338, 479], "50007": 334, "af": 334, "ipproto_ip": 334, "ip_hdrincl": 334, "rcvall_on": 334, "65565": 334, "rcvall_off": 334, "can_fram": 334, "can_frame_fmt": 334, "ib3x8": 334, "can_frame_s": 334, "build_can_fram": 334, "can_id": 334, "can_dlc": 334, "dissect_can_fram": 334, "vcan0": 334, "3bsd": 334, "stuart": 334, "sechrest": 334, "leffler": 334, "supplementari": 334, "3493": 334, "bind_and_activ": [335, 416, 464], "infrequ": [335, 479], "abrupt": [335, 338, 356, 361, 479], "daemon_thread": 335, "autonom": [335, 422], "block_on_clos": [335, 476, 479], "deaf": [335, 471], "poll_interv": 335, "mytcphandl": 335, "tcpclient": 335, "myudphandl": 335, "threadedtcprequesthandl": 335, "cur_thread": 335, "threadedtcpserv": 335, "server_thread": 335, "sp_namp": 336, "sp_pwdp": 336, "sp_lstchg": 336, "sp_min": 336, "sp_max": 336, "sp_warn": 336, "sp_inact": 336, "sp_expir": 336, "sp_flag": 336, "nonstandard": [337, 452, 463], "postgresql": [337, 463], "gerhard": [337, 460, 463, 464, 465], "ring": [337, 460, 463, 464, 465], "249": [337, 463, 470, 479], "w3school": 337, "sqlite_mast": 337, "hollywood": 337, "bowl": 337, "1982": [337, 340, 362], "1983": [337, 340], "brian": [337, 430, 458, 461, 462, 464, 465, 471, 472, 473, 476, 479], "1979": [337, 340], "new_con": 337, "new_cur": 337, "detect_typ": 337, "check_same_thread": 337, "cached_stat": 337, "evil_trac": 337, "authorizer_callback": 337, "qmark": 337, "sqlite_threadsaf": 337, "pysqlit": [337, 463, 465, 471], "c3ref": 337, "c_dbconfig_defens": 337, "rowid": 337, "zeroblob": 337, "sql_script": 337, "md5sum": [337, 479], "acbd18db4cc2f85cedef654fccc4a4d8": 337, "n_arg": 337, "aggregate_class": 337, "mysum": 337, "num_param": 337, "windowfunct": 337, "udfwinfunc": 337, "windowsumint": 337, "sumint": 337, "sum_i": 337, "collate_revers": 337, "4th": 337, "5th": 337, "progress_handl": 337, "trace_callback": 337, "fulltext": [337, 471], "fts3": 337, "ingredi": 337, "broccoli": 337, "stew": 337, "pepper": 337, "chees": [337, 437, 450], "pumpkin": 337, "onion": 337, "garlic": 337, "celeri": 337, "flour": 337, "butter": 337, "1000000000": 337, "sqlite_limit_sql_length": [337, 479], "sqlite_limit_attach": 337, "sqlite_dbconfig": 337, "uncommit": [337, 471], "austria": [337, 409], "sterreich": 337, "barfoo": 337, "dml": [337, 479], "statment": 337, "row1": 337, "row2": 337, "blob_col": 337, "246": [337, 464, 479], "first_appear": 337, "1957": 337, "__conform__": [337, 479], "adapt_point": 337, "convert_point": 337, "adapt_date_iso": 337, "adapt_datetime_iso": 337, "adapt_datetime_epoch": 337, "convert_d": 337, "convert_datetim": 337, "convert_timestamp": 337, "1984": 337, "varchar": 337, "nosuchdb": 337, "mem1": 337, "con1": 337, "con2": 337, "6378": 337, "namedtuple_factori": 337, "ddl": [337, 475, 479], "644": [338, 468, 470, 479], "ssock": 338, "cert": [338, 456, 465, 473, 479], "cabundl": 338, "pem": [338, 456, 473, 479], "certchain": 338, "8443": 338, "cafil": [338, 391, 465, 473], "capath": [338, 391, 473], "cadata": [338, 473, 479], "rc4": [338, 479], "sslkeylogfil": [338, 479], "ssl3": 338, "chacha20": [338, 475, 479], "poly1305": [338, 475, 479], "superimpos": 338, "x509": [338, 391], "certificate_verify_fail": 338, "prng": 338, "csprng": [338, 479], "rand_egd": [338, 468, 479], "1750": 338, "cert_tim": 338, "notbefor": 338, "notaft": 338, "2018": [338, 469, 476, 479], "1515144883": 338, "5280": [338, 474, 479], "ca_cert": 338, "der_cert_byt": 338, "der": [338, 394, 464, 473, 479], "pem_cert_str": 338, "defaultverifypath": 338, "openssl_cafile_env": 338, "openssl_cafil": 338, "openssl_capath_env": 338, "openssl_capath": 338, "cert_byt": 338, "encoding_typ": 338, "x509_asn": 338, "509": [338, 464, 473, 479], "asn": 338, "pkcs_7_asn": 338, "oid": [338, 394, 398, 479], "trustworthi": 338, "crls": [338, 473], "cert_": 338, "revoc": [338, 473, 479], "crl": [338, 473, 479], "issuer": 338, "cas": 338, "verify_": 338, "ssl_op_al": 338, "sslv2": [338, 471], "renegoti": [338, 465], "hellorequest": 338, "clienthello": 338, "0h": [338, 479], "dh": [338, 468, 479], "secreci": [338, 479], "ecdh": [338, 479], "op_": 338, "ticket": [338, 479], "unpatch": [338, 385, 418, 479], "7301": [338, 465, 471, 474], "ellipt": [338, 472, 479], "diffi": [338, 472], "hellman": [338, 472], "distributor": [338, 421, 475, 479], "6066": 338, "2k": [338, 479], "268443839": 338, "0x100020bf": 338, "alert_description_": 338, "5246": 338, "ssl_error_": 338, "atop": [338, 463, 464], "diverg": [338, 460], "ssl_read_ex": [338, 479], "ssl_write_ex": [338, 479], "unencrypt": [338, 479], "match_hostnam": [338, 468, 470, 471, 473, 474, 476, 479], "binary_form": 338, "amongst": 338, "3280": 338, "subjectaltnam": 338, "rdns": 338, "rdn": 338, "countrynam": 338, "organizationnam": 338, "startcom": 338, "organizationalunitnam": 338, "commonnam": 338, "serialnumb": 338, "95f0": 338, "571208": 338, "sle257ohy9fvq07z": 338, "stateorprovincenam": 338, "california": [338, 422], "localitynam": 338, "san": [338, 392], "francisco": [338, 392, 479], "frontier": 338, "eff": 338, "emailaddress": 338, "hostmast": 338, "x509v3": [338, 473], "crldistributionpoint": [338, 473], "caissuer": 338, "ocsp": [338, 473], "cb_type": 338, "5929": 338, "npn": [338, 468, 479], "pha": 338, "certificaterequest": 338, "pythn": [338, 476], "pyth": [338, 476], "protocol_": 338, "sslv23": 338, "ecc": [338, 468, 479], "224": [338, 463, 479], "x509_ca": 338, "aesgcm": 338, "ecdsa": [338, 471, 479], "alg_bit": 338, "aes256": [338, 479], "gcm": 338, "kx": 338, "50380848": 338, "kea": 338, "strength_bit": 338, "aes128": 338, "50380847": 338, "spdi": 338, "agre": [338, 344, 422, 479], "openssl_no_tlsext": 338, "server_name_callback": 338, "dhfile": 338, "curve_nam": 338, "prime256v1": [338, 479], "vincent": [338, 469, 474, 475, 479], "bernat": 338, "do_handshake_on_connect": 338, "suppress_ragged_eof": [338, 479], "sni": [338, 470, 473, 476, 479], "ssl_sock": 338, "verisign": 338, "keylog": [338, 479], "nss": 338, "wireshark": 338, "2197947391": 338, "op_no_ssl": [338, 479], "op_no_tl": 338, "1k": [338, 479], "satisfact": 338, "1422": 338, "agenc": [338, 422], "buy": [338, 463], "keyout": 338, "dn": [338, 394, 479], "provinc": 338, "mystat": 338, "compani": [338, 457, 463, 464, 469, 479], "widgit": 338, "myserv": 338, "myorgan": 338, "digicert": 338, "cacert": 338, "digicertsha2extendedvalidationserverca": 338, "crl3": 338, "g1": [338, 380], "crl4": 338, "01bb6f00122b177f36cab49cea8b6b26": 338, "businesscategori": 338, "311": 338, "delawar": 338, "3359300": 338, "streetaddress": 338, "postalcod": 338, "03894": 338, "4801": 338, "nh": 338, "wolfeboro": 338, "testpypi": 338, "pythonhost": 338, "nhost": 338, "linuxfr": 338, "nginx": 338, "sameorigin": 338, "45679": [338, 479], "varnish": 338, "2188": 338, "lcy1134": 338, "lci": 338, "63072000": 338, "includesubdomain": 338, "mycertfil": 338, "mykeyfil": 338, "bindsocket": 338, "myaddr": 338, "10023": 338, "newsocket": 338, "connstream": 338, "deal_with_cli": 338, "client_context": 338, "disjunct": [338, 427], "rekey": 338, "steve": [338, 459, 464, 470, 474, 475, 476, 477, 478, 479], "4086": 338, "schiller": 338, "dierk": 338, "eastlak": 338, "7525": [338, 479], "dtls": 338, "whiteout": 339, "s_is": 339, "walktre": 339, "visitfil": 339, "rwxrwxrwx": [339, 472], "v7": [339, 354], "scipi": [340, 440, 447, 450, 457], "minitab": 340, "sas": 340, "matlab": 340, "input_data": 340, "nomial": 340, "pearson": [340, 468, 479], "spearman": [340, 470, 479], "625": [340, 440, 477], "5625": [340, 445], "outlier": 340, "tendenc": 340, "unbias": 340, "92": [340, 477, 478], "83": [340, 378, 447, 473], "reciproc": 340, "frederick": 340, "gravett": 340, "wallnau": 340, "8th": 340, "gnumer": 340, "ssmedian": 340, "aabbbbccddddeeffffgg": 340, "986893273527251": 340, "815": 340, "xbar": [340, 479], "0810874155219827": 340, "3720238095238095": [340, 447], "01875": 340, "108": [340, 378, 457], "bessel": 340, "percentil": [340, 477], "decil": [340, 477], "empir": 340, "129": 340, "109": [340, 378, 457], "121": [340, 465], "107": [340, 457], "joint": [340, 422], "kepler": 340, "orbital_period": 340, "225": [340, 380, 458], "687": [340, 479], "4331": [340, 473], "10_756": 340, "30_687": 340, "60_190": 340, "dist_from_sun": 340, "150": [340, 380, 384, 461, 465], "228": 340, "778": 340, "1_400": 340, "2_900": 340, "4_500": 340, "imperfect": [340, 360], "9882": 340, "orbit": 340, "period_squar": 340, "dist_cub": 340, "slope": 340, "films_tot": 340, "densiti": 340, "temperature_februari": 340, "celsius": 340, "fahrenheit": [340, 477], "birth_weight": 340, "drug_effect": 340, "1060": [340, 477, 479], "195": [340, 475], "1100": [340, 467], "1200": [340, 452], "928": 340, "1192": 340, "810": 340, "958": 340, "1011": [340, 342], "1109": 340, "1162": 340, "1224": 340, "1310": 340, "mont": 340, "carlo": [340, 469], "3652260728": 340, "4582495471": 340, "6582483453": 340, "4591308524824727": 340, "8035946855390597": 340, "175091447274739": 340, "750": 340, "8402": [340, 473], "8675309": 340, "8398": 340, "bayesian": 340, "height_mal": 340, "height_femal": 340, "weight_mal": 340, "170": [340, 380], "weight_femal": 340, "foot_size_mal": 340, "foot_size_femal": 340, "posterior": 340, "prior_mal": 340, "prior_femal": 340, "posterior_mal": 340, "posterior_femal": 340, "posteriori": 340, "male": 340, "unadorn": 341, "widen": [341, 479], "0b100101": [341, 465, 467], "100101": 341, "0b10011": 341, "x04": [341, 394, 460], "xff": [341, 472], "xfc": 341, "xe8": 341, "x10": [341, 460], "64512": 341, "16711680": 341, "little_ord": 341, "tohexstr": 341, "0x3": 341, "a7p10": 341, "3740": 341, "d380000000000p": 341, "invmod": 341, "hash_fract": 341, "coprim": 341, "hash_valu": 341, "fermat": 341, "hash_float": 341, "hash_complex": 341, "breadth": [341, 380, 448], "gg": 341, "haunt": 341, "economi": 341, "subrang": 341, "linspac": 341, "zoot": 341, "digraph": 341, "fillchar": 341, "t012": 341, "t0123": 341, "t01234": 341, "0123": 341, "01234": 341, "ideograph": 341, "007f": [341, 431], "0660": [341, 458], "superscript": 341, "kharosthi": 341, "numeric_typ": 341, "2155": 341, "vulgar": 341, "zs": 341, "ws": [341, 390, 415], "uncas": 341, "justifi": [341, 365, 372, 464], "spacious": 341, "cmowz": 341, "testhook": 341, "basetestcas": 341, "misctest": 341, "tmpdirmixin": 341, "ipz": 341, "mississ": 341, "x1c": 341, "x1d": 341, "x85": 341, "u2028": 341, "u2029": 341, "nde": [341, 471], "rkl": 341, "kl": 341, "comment_str": 341, "apostroph": [341, 467], "bill": [341, 442, 458, 464], "00042": 341, "0042": 341, "sprintf": [341, 458, 460], "parenthesis": [341, 479], "somenam": 341, "1e50": 341, "ieee754": 341, "emphasis": 341, "2ef0": 341, "f1f2": 341, "xf0": 341, "xf1": 341, "xf2": 341, "f0f1f2": 341, "f0": 341, "f0_f1f2": 341, "uuddlrlrab": 341, "55554444": 341, "4c524c52": 341, "4142": 341, "aeiou": 341, "ths": 341, "shrt": 341, "fillbyt": 341, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [341, 465], "abcabc1": 341, "abc1": 341, "abcabc": 341, "abcdefghijklmnopqrstuvwxyz": [341, 342, 465], "subview": 341, "abcefg": 341, "0x7f3ddc9f4350": 341, "bce": 341, "22222222": 341, "33333333": 341, "44444444": 341, "zbcefg": 341, "z123fg": 341, "rvalu": 341, "z1spam": 341, "ce": [341, 457, 458, 479], "bepoint": 341, "616263": 341, "byte_length": 341, "new_items": 341, "1d": [341, 479], "zyz": 341, "ayz": 341, "3d": [341, 442], "2d": [341, 442, 479], "32000": 341, "32001": 341, "32002": [341, 479], "sjoerd": [341, 442, 458, 464], "cardin": 341, "disjoint": 341, "cbs": 341, "4098": [341, 438, 442], "4127": [341, 438, 442], "salad": 341, "juic": 341, "mappingproxi": 341, "synchronis": [341, 472], "send_post_request": 341, "union_object": 341, "whoami": 341, "_namedintconst": 341, "2020": [341, 421, 422, 465, 469, 478, 479], "10735": [341, 469], "5432": 341, "i_squar": 341, "7144": 341, "578966293710682886880994035146873798396722250538762761564": 341, "9252925514383915483333812743580549779436104706260696366600": 341, "571186405732": 341, "upper_bound": [341, 426], "68000": 341, "lower_bound": [341, 426], "4004": 341, "current_limit": 341, "0123456789abcdefabcdef": 342, "01234567": 342, "formfe": [342, 360, 431], "repack": 342, "literal_text": 342, "used_key": 342, "used_arg": 342, "arg_nam": 342, "attribute_nam": 342, "element_index": 342, "index_str": 342, "thou": [342, 471], "shalt": [342, 471], "quest": [342, 438], "ton": 342, "grouping_opt": 342, "000000120": 342, "682": [342, 469], "insignific": [342, 479], "significand": [342, 349], "abra": 342, "cad": 342, "24n": 342, "81w": 342, "coord": [342, 470, 479], "5j": [342, 445], "test1": [342, 423], "test2": [342, 423], "2a": [342, 479], "101010": 342, "0o52": [342, 464], "0b101010": 342, "1234567890": [342, 464], "890": 342, "02x": 342, "c0a80001": 342, "dxob": 342, "1010": [342, 477], "flufl": 342, "noun": [342, 479], "ific": 342, "kung": 342, "pao": 342, "idpattern": [342, 479], "_a": 342, "braceidpattern": [342, 479], "unbrac": 342, "3454": [343, 461, 479], "mkstringprep": [343, 461], "tablea": 343, "tableb": 343, "tablec": 343, "1700": 344, "10c": 344, "cccccccccc": 344, "0s": 344, "0c": 344, "hhhh": [344, 458], "bhl": 344, "99999": 344, "3s": 344, "x32": 344, "x12": [344, 394], "serialnum": 344, "gradelevel": 344, "10shhb": 344, "4658": 344, "ci": [344, 457, 476, 477, 479], "0x12131415": 344, "x14": 344, "x13": 344, "llh0l": 344, "lhl": 344, "llh": 344, "revisit": [344, 479], "qh6xq": 344, "qqh": 344, "qqh6x": 344, "capture_output": [345, 476, 479], "other_popen_kwarg": 345, "crw": [345, 474], "systemroot": 345, "system32": [345, 457], "symmetri": [345, 458], "preexec_fn": [345, 462, 477, 479], "restore_sign": 345, "start_new_sess": [345, 477, 479], "pass_fd": [345, 477, 479], "extra_group": [345, 479], "pipes": [345, 479], "process_group": [345, 479], "lpapplicationnam": 345, "lpcommandlin": 345, "vike": 345, "seldom": 345, "handle_list": 345, "sigxfz": 345, "sigxfsz": 345, "ifconfig": [345, 479], "qemu": [345, 477, 479], "hadn": [345, 479], "ncmdshow": 345, "showwindow": 345, "sw_showdefault": 345, "startupinfoex": 345, "updateprocthreadattribut": 345, "error_invalid_paramet": 345, "conin": 345, "conout": 345, "realtim": 345, "non_existent_fil": 345, "mycmd": 345, "myarg": 345, "dmesg": 345, "hda": 345, "retcod": 345, "child_stdin": 345, "child_stdout": 345, "child_stderr": 345, "child_stdout_and_stderr": 345, "popen4": 345, "somestr": 345, "capturestderr": 345, "_use_vfork": 345, "nnnnnn": 345, "_use_posix_spawn": 345, "knob": 345, "snd": 346, "711": 346, "compile_typ": 348, "some_func": 348, "unobserv": 349, "__cantrace__": 349, "emscripten_vers": 349, "js": [349, 452], "v14": 349, "underdevelop": 349, "no_user_sit": [349, 471], "ignore_environ": [349, 471, 479], "hash_random": [349, 479], "division_warn": [349, 471, 472], "1999": [349, 362, 391, 422], "iec": 349, "dbl_epsilon": 349, "dig": 349, "dbl_dig": 349, "mant_dig": [349, 464], "dbl_mant_dig": 349, "dbl_max_exp": 349, "max_10_exp": 349, "dbl_max_10_exp": 349, "min_exp": 349, "dbl_min_exp": 349, "min_10_exp": 349, "dbl_min_10_exp": 349, "flt_radix": 349, "flt_round": 349, "character": 349, "14159265358979": 349, "15g": 349, "9876543211234567": 349, "16g": 349, "9876543211234568": 349, "rtld_xxx": 349, "unidentifi": 349, "service_pack": [349, 465], "service_pack_minor": [349, 465], "service_pack_major": [349, 465], "suite_mask": [349, 465], "product_typ": [349, 465], "platform_vers": [349, 475, 479], "ver_platform_win32_nt": 349, "ver_nt_workst": 349, "workstat": 349, "ver_nt_domain_control": 349, "ver_nt_serv": 349, "getversionex": [349, 479], "osversioninfoex": 349, "asyncgen_hook": 349, "firstit": 349, "hash_bit": 349, "seed_bit": 349, "0x010502f0": 349, "bits_per_digit": [349, 452, 465, 467], "sizeof_digit": [349, 465, 467], "engag": 349, "0xffff": [349, 472, 479], "find_modul": [349, 419, 428, 461, 468, 469, 470, 472, 473, 476, 479], "freebsd8": 349, "linux3": [349, 472], "aix5": 349, "aix7": [349, 477, 479], "coarser": 349, "suse": [349, 452, 478, 479], "profilefunc": 349, "timeslic": 349, "tracefunc": 349, "lnotab_not": [349, 475], "releaselevel": [349, 465, 467], "xa": 349, "2a3": 349, "9899": 349, "jtc1": 349, "sc22": 349, "wg14": 349, "n1256": 349, "nuanc": 350, "landmark": [350, 457, 475, 479], "majorvers": 350, "minorvers": 350, "python311": 350, "alongsid": [350, 371, 417, 422, 431, 457], "py_enable_shar": 351, "libdir": [351, 456], "ar": [351, 452, 479], "posix_prefix": [351, 471, 479], "posix_hom": [351, 471], "posix_us": [351, 471, 479], "posix_venv": [351, 469, 479], "nt_user": [351, 471], "nt_venv": [351, 469, 479], "ether": 351, "osx_framework_us": 351, "platstdlib": [351, 471], "platinclud": [351, 471], "_get_default_schem": 351, "redistributor": [351, 465], "_install_schem": 351, "i586": [351, 471], "sun4u": 351, "64bit": [351, 470, 479], "intel64": [351, 479], "em64t": 351, "macosx": [351, 399, 455, 469, 470, 471, 479], "ppc": [351, 455, 464, 471], "ppc64": [351, 479], "i386": [351, 456, 457, 474], "fat": [351, 401], "ac_apple_universal_build": 351, "aix_genuine_cplusplus": 351, "arflag": 351, "log_mask": 352, "pri": 352, "log_upto": 352, "log_pid": 352, "log_con": 352, "log_ndelay": 352, "log_odelay": 352, "log_nowait": 352, "log_perror": 352, "file_or_dir": 353, "ustar": [354, 464, 479], "longlink": 354, "10240": 354, "tape": 354, "ignore_zero": [354, 479], "numeric_own": [354, 474, 479], "set_attr": 354, "fully_trust": 354, "arcnam": [354, 418], "regtyp": 354, "aregtyp": 354, "lnktype": 354, "symtyp": 354, "dirtyp": 354, "fifotyp": 354, "conttyp": 354, "chrtype": 354, "blktype": 354, "gnutype_spars": 354, "new_tarinfo": 354, "old_tarinfo": 354, "706": [354, 470], "crucial": [354, 428, 458], "abus": [354, 405, 432, 471, 479], "tinker": 354, "my_tarfil": 354, "warn_the_us": 354, "statefulfilt": 354, "filter_func": 354, "file_count": 354, "brian_1979": [354, 418], "source1": [354, 418], "sourcen": [354, 418], "output_dir": [354, 418], "filternam": 354, "py_fil": 354, "quux": 354, "bsdtar": 354, "libarch": 354, "unmaintain": [354, 371, 471, 473, 475], "ancient": [354, 463, 479], "seventh": 354, "miscalcul": [354, 479], "nowaday": 354, "telopt_": 355, "iac": 355, "dont": 355, "wont": 355, "subnegoti": 355, "dm": 355, "brk": 355, "ao": 355, "ayt": 355, "ec": [355, 479], "ga": 355, "read_": 355, "tn": 355, "midst": 355, "subopt": 355, "uncompil": 355, "delete_on_clos": [356, 470, 479], "max_siz": [356, 382], "spool": 356, "_file": 356, "ignore_cleanup_error": [356, 479], "tmpdir": [356, 479], "tmpdirnam": [356, 471], "tmptjujjt": 356, "iflag": 357, "oflag": 357, "lflag": 357, "ispe": 357, "ospe": 357, "vmin": 357, "vtime": 357, "tcsanow": 357, "tcsadrain": 357, "tcsaflush": [357, 379], "tciflush": 357, "tcoflush": 357, "tcioflush": 357, "tcooff": 357, "tcoon": 357, "tcioff": 357, "tcion": 357, "ws_row": 357, "ws_col": 357, "tiocgwinsz": 357, "tiocgsiz": 357, "winsiz": [357, 479], "tiocswinsz": 357, "tiocssiz": 357, "regrtest": [358, 378, 461, 465, 479], "test_": [358, 418, 479], "pyunit": [358, 459], "mytestcase1": 358, "test_feature_on": 358, "test_feature_two": 358, "mytestcase2": 358, "whitebox": 358, "blackbox": 358, "improp": [358, 390, 424, 458, 470, 473, 479], "crop": 358, "anomal": 358, "testfuncacceptssequencesmixin": 358, "mysuperwhammyfunct": 358, "test_func": 358, "acceptlist": 358, "acceptstr": 358, "accepttupl": 358, "beck": [358, 384, 459], "test_main": [358, 479], "test_spam": 358, "uall": [358, 461], "largefil": [358, 479], "pcbuild": [358, 457, 464, 479], "buildbot": [358, 384, 452, 479], "with_doc_str": [358, 452], "init_delay": 358, "max_delay": 358, "backoff": [358, 479], "o0": [358, 479], "_testcapi": [358, 452, 479], "accept_pattern": 358, "new_val": 358, "catstr": 358, "min_vers": 358, "memus": 358, "bigmem": 358, "_4g": 358, "errtext": 358, "hog": 358, "refleak": [358, 470, 479], "pkg_dir": 358, "standard_test": [358, 384], "ref_api": 358, "other_api": 358, "test_inst": 358, "object_to_patch": 358, "cmd_name": 358, "test_cas": [358, 384], "name_of_modul": 358, "not_export": [358, 479], "_csv": [358, 479], "misctestcas": 358, "test__all__": 358, "othertestcas": 358, "bar_const": 358, "foo_const": 358, "_bar": 358, "max_digit": 358, "seterrormod": 358, "coredump": [358, 479], "elicit": 358, "ephemer": [358, 398], "s_server": 358, "so_exclusiveaddrus": 358, "resource_nam": 358, "assert_python": 358, "pythonusersit": 358, "env_var": 358, "__isol": 358, "__cleanenv": 358, "__cwd": 358, "script_dir": 358, "script_basenam": 358, "omit_suffix": 358, "zip_dir": 358, "zip_basenam": 358, "script_nam": [358, 403], "name_in_zip": 358, "init_sourc": 358, "_unspecifi": 358, "original_valu": 358, "xattr": [358, 479], "tempcwd": 358, "reinsert": [358, 372, 465, 467], "py_warn": 358, "_warn": [358, 468, 479], "c_warn": 358, "required_on": 358, "oldmodul": 358, "warning_help": 358, "test_suppress_warn": 358, "regexp": [358, 471, 479], "warningcategori": 358, "warningrecord": 358, "hey": 358, "thello": 360, "nworld": 360, "frankenstein": 360, "insec": 360, "camelcas": 361, "overcom": [361, 471, 479], "activecount": [361, 464, 468, 479], "_threading_loc": 361, "threadgroup": 361, "tid": [361, 479], "awaken": 361, "cv": [361, 380], "an_item_is_avail": 361, "get_an_available_item": 361, "make_an_item_avail": 361, "notifyal": [361, 468, 479], "dutch": [361, 431], "scientist": 361, "edsger": 361, "dijkstra": 361, "awoken": 361, "maxconnect": 361, "pool_sema": 361, "connectdb": 361, "isset": [361, 468, 479], "accept_connect": 361, "process_server_connect": 361, "make_connect": [361, 415], "process_client_connect": 361, "awri": 361, "some_lock": 361, "1969": 362, "acronym": 362, "compromis": [362, 394], "wisdom": 362, "tm_gmtoff": [362, 475, 479], "tm_zone": [362, 475, 479], "tm": [362, 371], "1993": [362, 479], "clk_id": 362, "ntp": 362, "suspens": [362, 424, 426], "clock_nanosleep": [362, 469, 479], "nanosleep": [362, 469, 479], "tm_year": [362, 460], "tm_mon": 362, "tm_mday": 362, "tm_hour": 362, "tm_min": 362, "tm_sec": 362, "tm_wday": 362, "tm_yday": 362, "335": 362, "meridian": 362, "julian": [362, 473, 474, 479], "05edt": 362, "m4": [362, 479], "m10": 362, "aest": 362, "10aedt": 362, "tzfile": 362, "datafil": [362, 461], "australia": 362, "melbourn": 362, "egypt": 362, "eet": 362, "eest": 362, "discontinu": [362, 479], "settimeofday": 362, "nonadjust": 362, "ptp": 362, "uptim": [362, 476, 479], "asleep": 362, "1123": [362, 467], "usec": [363, 474], "3018611848820001": 363, "2727368790656328": 363, "23702679807320237": 363, "19665591977536678": 363, "time_taken": 363, "wallclock": 363, "nsec": 363, "5000000": 363, "0877": 363, "41440500499993504": 363, "7246671520006203": 363, "3955516149999312": 363, "40183617287970225": 363, "37027556854118704": 363, "38344867356679524": 363, "3712595970846668": 363, "37866875250654886": 363, "9138244460009446": 363, "5829014980008651": 363, "04215312199994514": 363, "08588060699912603": 363, "stupid": 363, "woefulli": 365, "tkdoc": [365, 479], "roseman": [365, 468, 478, 479], "978": 365, "1999149567": 365, "alan": [365, 463, 464, 470, 476, 479], "moor": [365, 460, 461, 464, 473, 474, 476, 479], "1788835886": 365, "lutz": 365, "0596158101": 365, "ousterhout": 365, "jone": [365, 461, 463, 473, 474], "0321336330": 365, "multitask": 365, "bridg": [365, 471], "xlib": 365, "cocoa": [365, 455, 471, 479], "gdi": 365, "screennam": [365, 371], "usetk": 365, "argv0": 365, "winfo_id": 365, "winfo_par": 365, "loadtk": 365, "frm": 365, "grid": [365, 370, 372], "applicaton": 365, "lbl": 365, "btn": [365, 372, 380], "winfo_x": 365, "winfo_height": 365, "winfo_view": 365, "winfo": 365, "reenter": 365, "idiosyncrat": 365, "relief": [365, 372], "groov": 365, "placer": 365, "qualit": 365, "183": 365, "parcel": [365, 372], "ipadx": 365, "ipadi": 365, "padx": 365, "padi": 365, "textvari": [365, 372], "onvalu": 365, "offvalu": 365, "stringvar": [365, 372], "intvar": [365, 479], "doublevar": 365, "booleanvar": [365, 479], "entrythingi": 365, "print_cont": 365, "wm": 365, "icon": [365, 457, 460, 461, 479], "_root": 365, "compass": 365, "sw": 365, "nw": 365, "gray25": 365, "gray50": 365, "hourglass": 365, "questhead": 365, "contrib": 365, "gumbi": 365, "print_it": 365, "rrggbb": 365, "rrrgggbbb": 365, "rrrrggggbbbb": 365, "160": [365, 378, 380, 422], "cursorfont": 365, "xc_": 365, "xc_hand2": 365, "hand2": 365, "179": 365, "centimetr": 365, "millimetr": 365, "5i": 365, "widthxheight": 365, "200x100": 365, "3i": 365, "2i": 365, "4c": 365, "43c": 365, "sunken": 365, "ridg": 365, "scrollcommand": [365, 372], "3tk": 365, "turn_r": 365, "activeforeground": 365, "send_ev": 365, "keysym": 365, "keysym_num": 365, "x_root": 365, "y_root": 365, "entryconfig": 365, "bitmapimag": 365, "photoimag": [365, 477, 479], "pillow": [365, 446], "maxbytecount": 365, "picker": 366, "buttonpress": 367, "dnd_accept": 367, "old_target": 367, "dnd_leav": 367, "dnd_enter": 367, "dnd_commit": 367, "dnd_end": 367, "buttonreleas": 367, "slant": [368, 458], "emphasi": 368, "overstrik": 368, "strikeout": 368, "displayof": 368, "ascent": 368, "descent": 368, "linespac": 368, "tixinspect": 371, "inspector": 371, "combo": [371, 372], "subwidget": 371, "mega": 371, "tk_popup": 371, "motif": 371, "tixexfileselectdialog": 371, "checkbutton": [371, 372, 479], "tixnotebook": 371, "xpm": 371, "cnf": [371, 456], "tix_librari": 371, "dlgclass": 371, "fileselectdialog": 371, "monochrom": 371, "newschem": 371, "newfontset": 371, "newscmprio": 371, "fontset": 371, "resetopt": 371, "tix_config": 371, "anti": [372, 380, 386, 479], "menubutton": 372, "tile": [372, 380, 465], "monograph": 372, "bw": 372, "tlabel": 372, "ttkstyle": 372, "bindtag": 372, "viewabl": 372, "xscrollcommand": 372, "yscrollcommand": 372, "statespec": 372, "inquir": [372, 474], "icursor": 372, "exportselect": 372, "selection_get": 372, "postcommand": 372, "dropdown": 372, "comboboxselect": 372, "newindex": 372, "tab_id": 372, "notebooktabchang": 372, "unmanag": 372, "autoincr": [372, 479], "recur": 372, "southeast": 372, "displaycolumn": 372, "selectmod": 372, "treeviewselect": 372, "treeviewopen": 372, "treeviewclos": 372, "offscreen": 372, "newchildren": 372, "minwidth": 372, "imagenam": 372, "winfo_class": 372, "somewidget": 372, "confer": [372, 459, 463], "query_opt": 372, "tbutton": 372, "colored_btn": 372, "layoutspec": 372, "tmenubutton": 372, "mbtn": 372, "elementnam": 372, "etyp": [372, 377, 468], "vsapi": 372, "6a": 372, "imagespec": 372, "interior": [372, 380, 459, 460], "themenam": 372, "tcombobox": 372, "green2": 372, "green4": 372, "fieldbackground": 372, "green3": 372, "olivedrab1": 372, "olivedrab2": 372, "themechang": [372, 479], "caviti": 372, "whichsid": 372, "nswe": 372, "sublayout": 372, "exact_typ": 374, "srow": 374, "scol": 374, "erow": 374, "ecol": 374, "decistmt": 374, "3e": 374, "007": 374, "13th": 374, "21716034272e": 374, "217160342717258261933904529e": 374, "toknum": 374, "tokval": 374, "say_hello": 374, "pyproject": [375, 479], "toml_str": 375, "listfunc": 376, "coverdir": 376, "trackcal": 376, "countfunc": 376, "countcal": 376, "ignoremod": 376, "ignoredir": 376, "show_miss": 376, "extracted_list": 377, "lookup_lin": 377, "capture_loc": [377, 479], "max_group_width": [377, 479], "max_group_depth": [377, 479], "frame_gen": 377, "frame_summari": 377, "run_user_cod": 377, "envdir": 377, "bright_side_of_lif": 377, "formatted_lin": 377, "another_funct": 377, "lumberstack": 377, "an_error": 377, "top_stat": 378, "716": 378, "4855": 378, "39328": 378, "284": 378, "521": 378, "3199": 378, "167": 378, "368": 378, "244": 378, "2315": 378, "381": 378, "185": [378, 467], "243": [378, 459], "133": 378, "347": [378, 463], "262": 378, "1446": 378, "911": 378, "1454": 378, "2131": 378, "148": 378, "344": 378, "snapshot1": 378, "snapshot2": 378, "8173": 378, "4428": 378, "71332": 378, "39369": [378, 479], "117": [378, 459], "940": 378, "8106": 378, "571": 378, "298": 378, "589": [378, 382, 477, 479], "1005": 378, "166": 378, "7423": 378, "1526": 378, "1334": 378, "848": 378, "1465": 378, "784": 378, "491": 378, "969": 378, "903": 378, "870": 378, "1036": 378, "934": 378, "1068": 378, "619": 378, "1581": 378, "1614": 378, "938": 378, "1728": 378, "test_pickletool": 378, "1276": 378, "test_runn": 378, "976": 378, "display_failur": 378, "761": 378, "1563": 378, "main_in_temp_cwd": 378, "run_glob": 378, "display_top": 378, "key_typ": 378, "419": [378, 467], "_b85chars2": 378, "_b85char": 378, "306": 378, "_a85chars2": 378, "_a85char": 378, "class_definit": 378, "testmethod": 378, "_hexdig": 378, "_weakrefset": 378, "142": [378, 438, 442], "_b32tab2": 378, "_b32tab": 378, "6220": 378, "3602": 378, "5303": 378, "large_sum": 378, "first_siz": 378, "first_peak": 378, "small_sum": 378, "second_s": 378, "second_peak": 378, "664": 378, "3592984": 378, "804": 378, "29704": [378, 479], "optimis": [378, 424, 479], "old_snapshot": 378, "most_recent_first": [378, 476, 479], "geometr": [380, 469], "walli": 380, "feurzeig": 380, "seymour": 380, "papert": 380, "cynthia": 380, "solomon": [380, 479], "learner": 380, "classroom": [380, 479], "clockwis": 380, "anew": [380, 428, 478, 479], "whom": [380, 422], "360": 380, "337": 380, "fill_gap": 380, "polygon": 380, "travel": 380, "to_angl": 380, "inscrib": 380, "semicircl": 380, "colorstr": 380, "diamet": 380, "canva": [380, 464, 470, 477, 479], "stamp_id": 380, "stampid": 380, "astamp": 380, "unused_stamp_id": 380, "undobuff": 380, "speedstr": 380, "speedvalu": 380, "440": 380, "27876": 380, "60254": 380, "fullcircl": 380, "grad": 380, "gon": [380, 472], "gradian": 380, "5707963267948966": 380, "thick": 380, "turtleshap": 380, "pendict": 380, "nores": 380, "stretchfactor": 380, "penstat": 380, "33cc8c": 380, "brown": [380, 464, 479], "5490196078431373": 380, "140": [380, 465, 479], "32c18f": 380, "colorstring1": 380, "colorstring2": 380, "g2": 380, "285078": 380, "a0c8f0": 380, "fillstat": 380, "arial": 380, "fontnam": 380, "fontsiz": 380, "fonttyp": 380, "shapenam": 380, "rmode": 380, "outlinewidth": 380, "stretch_wid": 380, "stretch_len": 380, "perpendicular": 380, "shear": 380, "t11": 380, "t12": 380, "t21": 380, "t22": 380, "myturtl": 380, "glow": 380, "unglow": 380, "handdraw": 380, "myfavouriteshap": 380, "mick": [380, 458, 461, 463], "pet": 380, "_screen": 380, "poly1": 380, "poly2": 380, "shapelist": 380, "myshap": 380, "800080": 380, "picnam": 380, "nopic": 380, "backgroundimag": 380, "landscap": [380, 464], "canvwidth": 380, "canvheight": 380, "canvaswidth": 380, "canvasheight": 380, "1500": [380, 479], "llx": 380, "urx": 380, "distort": 380, "octagon": 380, "acceler": [380, 458, 459, 463, 466, 472, 473, 479], "xdummi": 380, "ydummi": 380, "nim": 380, "minval": 380, "maxval": 380, "stake": 380, "cmode": 380, "turtlegraphicserror": 380, "thusli": 380, "480": 380, "turtlegraph": 380, "using_idl": 380, "_cfg": 380, "startx": 380, "leftright": 380, "starti": 380, "topbottom": 380, "200x200": 380, "titlebar": 380, "zoo": [380, 423], "playground": 380, "type_": 380, "poli": [380, 458], "tooltip": [380, 479], "backgroundcolor": 380, "turtle_docstringdict": 380, "turtle_docstringdict_german": 380, "glingl": 380, "aon": 380, "undobuffers": 380, "exampleturtl": 380, "examplescreen": 380, "docstringdict": 380, "turtle_docstringdict_italian": 380, "bytedesign": 380, "sourcecod": 380, "chao": 380, "verhulst": 380, "colormix": 380, "forest": 380, "fractalcurv": 380, "hilbert": 380, "koch": 380, "lindenmay": 380, "ethnomathemat": 380, "indian": 380, "kolam": 380, "minimal_hanoi": 380, "hanoi": 380, "disc": 380, "nimstick": 380, "minimalist": 380, "peac": 380, "penros": [380, 479], "aperiod": 380, "kite": 380, "dart": 380, "planet_and_moon": 380, "rosett": [380, 479], "round_danc": 380, "danc": [380, 438], "sorting_anim": 380, "two_canvas": 380, "canvas": 380, "yinyang": 380, "tdemo_nim": 380, "tdemo_round_d": 380, "exec_bodi": 381, "__prepare__": [381, 385, 424, 473, 475, 479], "laid": 381, "__orig_bases__": [381, 470, 479], "listiter": 381, "t_origin": 381, "t_arg": 381, "guidanc": [381, 465, 470, 479], "gen_func": [381, 479], "typing_extens": 382, "standardis": 382, "544": [382, 477, 479], "586": [382, 468, 477, 478, 479], "591": [382, 477, 479], "593": [382, 478, 479], "new_vector": 382, "connectionopt": 382, "broadcast_messag": 382, "some_id": [382, 475], "524313": [382, 475], "get_user_nam": 382, "user_id": 382, "user_a": 382, "42351": 382, "user_b": 382, "23413": 382, "54341": 382, "some_valu": 382, "adminuserid": 382, "prouserid": 382, "get_next_item": 382, "async_queri": 382, "on_success": 382, "on_upd": 382, "batch_proc": 382, "cb_result": 382, "good_cb": 382, "bad_cb": 382, "maxitem": 382, "paramspecvari": 382, "returntyp": 382, "arg1typ": 382, "arg2typ": 382, "notify_by_email": 382, "prouser": 382, "teamus": 382, "make_new_us": 382, "user_class": 382, "new_non_team_us": 382, "basicus": 382, "loggedvar": 382, "zero_all_var": 382, "weirdtrio": 382, "oldt": 382, "contravari": 382, "oldb": 382, "oldweirdtrio": 382, "linkedlist": 382, "vec": [382, 438], "inproduct": 382, "type1": 382, "aesthet": 382, "legacy_pars": 382, "hatch": [382, 465], "hash_a": 382, "hash_b": 382, "typesaf": 382, "unpython": 382, "bucket": [382, 424], "enjoy": [382, 409], "unconstrain": 382, "greet_bad": 382, "greet_prop": 382, "run_queri": [382, 469], "arbitrary_str": [382, 469], "literal_str": 382, "never_call_m": 382, "int_or_str": 382, "return_self": 382, "subclassoffoo": 382, "returns_egg": 382, "boxofstr": 382, "make_box_of_str": 382, "with_lock": 382, "my_lock": 382, "sum_threadsaf": 382, "validate_simpl": 382, "open_help": 382, "starship": [382, 463, 475], "enterprise_d": 382, "fastconnector": 382, "__metadata__": 382, "valuerang": 382, "ann1": 382, "include_extra": [382, 478, 479], "is_str": 382, "is_str_list": 382, "typea": 382, "typeb": 382, "kt": 382, "lookup_nam": 382, "infer_vari": 382, "strsequenc": 382, "strorbytessequ": 382, "print_capit": 382, "stringsubclass": 382, "print_ab": 382, "move_first_element_to_last": 382, "get_shap": 382, "happili": 382, "array2": 382, "float_array_1d": 382, "int_array_2d": 382, "yup": 382, "intfunc": [382, 470], "add_log": 382, "add_two": 382, "listorset": [382, 423], "notgener": 382, "_field_typ": [382, 477, 478, 479], "first_us": 382, "genproto": 382, "poni": 382, "closabl": 382, "checkabl": [382, 470, 479], "complex_funct": 382, "eq_default": 382, "order_default": 382, "kw_only_default": 382, "frozen_default": [382, 470, 479], "field_specifi": 382, "create_model": [382, 469], "customermodel": [382, 469], "modelbas": 382, "modelmeta": 382, "__dataclass_transform__": 382, "meanwhil": 382, "__final__": [382, 469, 479], "log_status": 382, "__override__": 382, "fetch_respons": 382, "unsubscript": 382, "expensive_mod": 382, "sometyp": [382, 474], "local_var": 382, "anothertyp": 382, "other_fun": 382, "count_word": 382, "keep_posit": 382, "t_co": 382, "ct_co": 382, "add_unicode_checkmark": 382, "u2713": 382, "kt_co": 382, "vt_co": 382, "get_position_in_index": 382, "word_list": 382, "_vt_co": 382, "yieldtyp": 382, "sendtyp": 382, "echo_round": 382, "infinite_stream": 382, "38291": [382, 468, 479], "undecid": 382, "91896": [382, 470, 479], "92332": [382, 469, 470, 479], "94309": [382, 470, 479], "ucd": [383, 431, 472, 473, 479], "unistr": [383, 458], "00c7": [383, 426], "cedilla": [383, 426], "0043": [383, 426], "0327": [383, 426], "2160": 383, "0049": 383, "kd": 383, "kc": 383, "solidus": 383, "etter": 383, "ppercas": 383, "u0660": [383, 458], "rabic": 383, "umber": 383, "namealias": [383, 431], "namedsequ": 383, "junit": [384, 459, 479], "taxonomi": 384, "unittestgui": 384, "appveyor": 384, "teststringmethod": 384, "test_upp": 384, "test_isupp": 384, "test_split": 384, "000s": 384, "001s": 384, "test_module1": 384, "test_module2": 384, "test_modul": [384, 386], "testclass": 384, "test_method": 384, "test_someth": [384, 385, 386, 476], "foo_test": [384, 476], "sometest": [384, 476], "bar_test": [384, 476], "test_foo": [384, 386, 476], "footest": [384, 476], "project_directori": 384, "_test": [384, 471], "proj": [384, 479], "test_mypkg": 384, "defaultwidgetsizetestcas": 384, "test_default_widget_s": 384, "widgettestcas": 384, "test_widget_res": 384, "suffer": [384, 385, 459, 460, 461], "test_widget": [384, 479], "testsometh": 384, "makesometh": 384, "makesomethingdb": 384, "deletesomethingdb": 384, "mytestcas": 384, "test_noth": 384, "test_format": 384, "test_windows_support": 384, "test_maybe_skip": 384, "external_resource_avail": 384, "005s": 384, "myskippedtestcas": 384, "test_not_run": 384, "expectedfailuretestcas": 384, "test_fail": 384, "skipunlesshasattr": 384, "numberstest": [384, 473], "test_even": [384, 473], "the_except": 384, "error_cod": 384, "assertraisesregexp": [384, 465, 467, 469, 470], "somewarn": 384, "legacy_funct": [384, 471], "frobnic": [384, 398], "assertregexpmatch": [384, 465, 469, 470, 471], "seq_typ": 384, "assertxyy": 384, "_async_connect": 384, "asyncconnect": [384, 477], "test_respons": 384, "status_cod": [384, 477], "on_cleanup": 384, "testfunc": 384, "_removetestatindex": [384, 473], "synthet": [384, 470, 479], "testcaseclass": 384, "unoffici": [384, 474], "use_load_test": [384, 470, 474, 479], "sampletest": 384, "sampletestcas": 384, "test_on": [384, 386], "test_two": [384, 386], "test_thre": 384, "start_dir": [384, 479], "top_level_dir": 384, "loadtestsfrom": 384, "formatted_err": 384, "resultclass": 384, "wd": [384, 396, 463, 465, 473, 475], "wa": 384, "defaulttest": [384, 473], "catchbreak": 384, "testprogram": [384, 470], "testcase1": 384, "testcase2": 384, "testcase3": 384, "test_class": 384, "this_dir": 384, "package_test": 384, "basetestsuit": 384, "_errorhold": 384, "_connect": [384, 415], "createexpensiveconnectionobject": 384, "createconnect": 384, "closeconnect": 384, "test_signal_handl": 384, "replay": 385, "productionclass": [385, 386], "classname2": [385, 386], "classname1": [385, 386], "mockclass1": [385, 386], "mockclass2": [385, 386], "mock_method": [385, 386], "newkey": [385, 386], "newvalu": [385, 386], "foobarbaz": 385, "wheeeeee": 385, "specc": [385, 386], "autospec": [385, 386, 479], "mock_funct": 385, "fishi": 385, "new_cal": 385, "spec_set": [385, 386], "assret": [385, 479], "asert": [385, 479], "aseert": [385, 479], "assrt": [385, 479], "wow": 385, "any_ord": [385, 386], "some_mock": 385, "w00t": 385, "140161580456576": [385, 386], "mock_foo": [385, 386], "mockiti": 385, "this_foo": 385, "async_func": 385, "asyncmockmixin": 385, "_mock_cal": 385, "exampleclass": 385, "sync_foo": 385, "async_foo": 385, "a_mock": 385, "coroutine_mock": 385, "bang": 385, "not_a_child": 385, "thing1": 385, "thing2": 385, "normal_argu": 385, "mock_class": 385, "mockclass": 385, "mock_th": 385, "mock_stdout": 385, "non_existing_attribut": 385, "honour": [385, 479], "class_method": 385, "in_dict": 385, "testsampl": 385, "test_sampl": 385, "patched_foo": 385, "first_patch": 385, "second_patch": 385, "test_funct": 385, "mock_exit": 385, "new_mock": [385, 386], "mytest": [385, 386], "patcher1": 385, "patcher2": 385, "fiddlier": [385, 386], "bonus": [385, 459], "mock_ord": 385, "foo_on": 385, "foo_two": 385, "static_method": [385, 386], "mock1": 385, "mock2": 385, "foobl": [385, 386], "__getinitargs__": 385, "__getformat__": [385, 479], "kall": [385, 462, 479], "abstracthttphandl": [385, 475, 479], "_noncallablemock__get_return_valu": 385, "_noncallablemock__get_side_effect": 385, "_noncallablemock__return_value_doc": 385, "_noncallablemock__set_return_valu": 385, "_noncallablemock__set_side_effect": 385, "my_mock": 385, "irrespect": 385, "read_data": [385, 442, 479], "deplet": 385, "rewound": 385, "fidd": 385, "bibbl": 385, "assret_called_once_with": 385, "dandi": 385, "assret_called_with": 385, "has_data": [385, 391, 473], "mock_request": 385, "somethingfortest": 385, "submock": 385, "attribute1": 385, "not_submock": 385, "sample_nam": 385, "new_attribut": 385, "attribute2": 385, "mock_inst": 386, "some_method": [386, 415], "old_method": 386, "smarter": [386, 467, 471, 479], "file_handl": 386, "testabl": 386, "backendprovid": 386, "get_endpoint": 386, "create_cal": 386, "start_cal": 386, "mock_backend": 386, "mock_respons": 386, "mock_dat": 386, "mocksomeclass": 386, "not_a_test": 386, "whilst": [386, 479], "nuisanc": 386, "grob": 386, "mock_frob": 386, "copy_call_arg": 386, "copyingmock": 386, "mock_bar": 386, "mock_spam": 386, "create_patch": 386, "my_dict": 386, "mymock": 386, "has_been_cal": 386, "adaptor": 386, "blip": 386, "expected_cal": 386, "fifti": [386, 422], "some_obj": 386, "match_foo": 386, "match_wrong": 386, "pyhamcrest": 386, "hamcrest": 386, "match_equ": 386, "gopher": 390, "hdl": [390, 422], "mailto": [390, 422], "mms": 390, "prospero": 390, "rsync": 390, "rtsp": 390, "rtsps": [390, 479], "rtspu": 390, "sftp": 390, "shttp": 390, "snew": 390, "wai": 390, "urlstr": 390, "allow_frag": 390, "netloc": [390, 465, 471], "1808": [390, 474, 479], "7eguido": 390, "max_num_field": [390, 479], "doseq": 390, "2396": [390, 465, 474, 476, 479], "c0": [390, 479], "defens": [390, 479], "unreserv": 390, "20ni": 390, "b1o": 390, "2fel": 390, "quote_via": [390, 474, 479], "std66": 390, "2732": [390, 465, 471], "2368": 390, "1738": 390, "cadefault": 391, "_proxi": [391, 479], "handler_ord": 391, "firefox": [391, 399, 463, 470, 479], "i686": 391, "gecko": 391, "20071127": 391, "camel": [391, 464, 471], "request_host": 391, "no_proxi": [391, 479], "cern": 391, "ncsa": 391, "uiuc": 391, "basicauth": 391, "passwd_mgr": 391, "40x": 391, "unredirect": 391, "header_valu": 391, "get_host": [391, 473], "get_selector": [391, 473], "is_unverifi": [391, 473], "http_error_404": 391, "_open": [391, 479], "http_error_": 391, "_error": 391, "_request": 391, "_respons": 391, "adopt": [391, 428, 459, 460, 461, 464, 478, 479], "newurl": 391, "http_error_30": 391, "authuri": 391, "authreq": 391, "2397": 391, "equiv": 391, "xhtm": 391, "ngot": 391, "auth_handl": 391, "pdq": 391, "mahler": 391, "8092": 391, "klem": 391, "kadidd": 391, "ehopp": 391, "proxy_handl": 391, "3128": 391, "proxy_auth_handl": 391, "contact": [391, 403, 479], "addhead": 391, "musi": [391, 392], "requestb": 391, "xrbl82xr": 391, "reporthook": 391, "local_filenam": 391, "30x": [391, 472], "maxtri": 391, "550": 391, "_urlopen": 391, "robotstxt": 392, "userag": 392, "crawl": [392, 475, 479], "requestr": 392, "sitemap": 392, "rp": 392, "rrate": 392, "lanc": [393, 422], "ellinghous": [393, 422], "jansen": [393, 422, 460, 461, 474, 479], "in_fil": 393, "out_fil": [393, 409, 479], "relay": [394, 476, 479], "time_low": 394, "time_mid": 394, "time_hi_vers": 394, "clock_seq_hi_vari": 394, "clock_seq_low": 394, "12345678": 394, "567812345678": 394, "12345678123456781234567812345678": 394, "x34": 394, "x56": [394, 458], "x78": 394, "0x12345678": 394, "0x1234": 394, "0x5678": 394, "0x12": 394, "0x34": 394, "0x567812345678": 394, "0x12345678123456781234567812345678": 394, "clock_seq": 394, "administ": [394, 458, 464, 476, 479], "ncs": 394, "x500": 394, "a8098c1a": [394, 463], "f86e": [394, 463], "11da": [394, 463], "bd1a": [394, 463], "00112444be1e": [394, 463], "6fa459ea": [394, 463], "ee8a": [394, 463], "3ca4": [394, 463], "894e": [394, 463], "db77e160355": [394, 463], "16fd2706": [394, 463], "8baf": [394, 463], "433b": [394, 463], "82eb": [394, 463], "8c7fada847da": [394, 463], "886313e1": [394, 463], "3b8a": [394, 463], "5372": [394, 463], "9b90": [394, 463], "0c9aee199e5d": [394, 463], "00010203": 394, "0405": 394, "0607": 394, "0809": 394, "0a0b0c0d0e0f": 394, "x05": 394, "x0e": 394, "x0f": 394, "python35": [395, 449], "myenv": 395, "dep": [395, 479], "env_dir": 395, "powershel": [395, 457, 477, 479], "executionpolici": 395, "remotesign": 395, "currentus": 395, "zsh": 395, "csh": [395, 449, 473], "tcsh": [395, 462], "virtual_env": [395, 474], "system_site_packag": 395, "with_pip": [395, 473], "upgrade_dep": 395, "__venv_dir__": 395, "env_nam": 395, "__venv_name__": [395, 478], "__venv_prompt__": [395, 478, 479], "inc_path": 395, "lib_path": 395, "bin_path": 395, "bin_nam": 395, "__venv_bin_name__": 395, "env_ex": 395, "__venv_python__": 395, "env_exec_cmd": 395, "redirector": [395, 476, 479], "extendedenvbuild": 395, "easy_instal": [395, 470], "nodist": 395, "nopip": 395, "install_setuptool": 395, "install_pip": 395, "binpath": 395, "distpath": 395, "ez_setup": 395, "system_sit": 395, "use_symlink": 395, "warrant": [396, 466], "user_n": 396, "fxn": 396, "skip_file_prefix": [396, 479], "deprecated_api": 396, "_warn_skip": 396, "one_way": 396, "r_luxury_yacht": 396, "t_wobbler_mangrov": 396, "another_way": 396, "__warningregistry__": [396, 479], "wave_format_extens": [397, 479], "ksdataformat_subtype_pcm": 397, "defici": 397, "0x7fc859830220": 398, "lifecycl": [398, 465, 473], "do_something_us": 398, "extendedref": 398, "__counter": 398, "_id2obj_dict": 398, "id2obj": 398, "kenni": [398, 473], "newobj": [398, 479], "_final": 398, "unloading_modul": 398, "autorais": [399, 463], "epiphani": 399, "kfmclient": 399, "konqueror": [399, 463, 479], "kfm": 399, "genericbrows": 399, "elink": [399, 463], "w3m": 399, "windowsdefault": 399, "macosxosascript": [399, 479], "safari": 399, "chrome": [399, 472, 479], "chromium": [399, 472], "kde": 399, "kdedir": 399, "mosaic": [399, 470, 479], "galeon": [399, 470, 479], "skipston": [399, 470, 479], "iceap": [399, 470, 479], "neglect": 401, "hkey": 401, "computernam": 401, "subkey": [401, 457], "wow64": 401, "windir": 401, "flusher": 401, "se_restore_privileg": 401, "regloadkey": 401, "1601": 401, "querykey": 401, "sebackupprivileg": 401, "security_attribut": 401, "dsiablereflectionkey": 401, "subordin": [401, 465], "standard_rights_requir": 401, "standard_rights_writ": 401, "standard_rights_read": 401, "speaker": 402, "systemasterisk": 402, "systemexclam": 402, "systemhand": 402, "systemquest": 402, "systemdefault": 402, "url_schem": 403, "fastcgi": 403, "include_queri": 403, "path_info": 403, "query_str": [403, 469], "http_host": 403, "simple_app": 403, "start_respons": [403, 471, 479], "ret": 403, "hop": 403, "filelik": 403, "base_environ": 403, "middlewar": 403, "nonconform": 403, "validator_app": 403, "run_onc": 403, "allowpathinfo": 403, "metabas": 403, "allowpathinfoforscriptmap": 403, "path_transl": 403, "vhost": 403, "iis7": 403, "scgi": 403, "retarget": 403, "spit": 403, "file_wrapp": [403, 479], "hello_world_app": 403, "mime_typ": 403, "1014": 404, "microsystem": 404, "1832": 404, "pack_typ": 404, "pack_uint": 404, "pack_int": 404, "pack_enum": 404, "pack_bool": 404, "pack_uhyp": 404, "pack_hyp": 404, "pack_item": 404, "unpack_typ": 404, "unpack_item": 404, "billion": [405, 479], "laugh": [405, 472, 479], "blowup": 405, "bomb": [405, 418, 479], "relianc": [405, 479], "expat_vers": 405, "unexpand": 405, "countermeasur": 405, "omg": [406, 407], "python_dom": 406, "qualifiednam": 406, "element_nod": 406, "attribute_nod": 406, "text_nod": [406, 407], "cdata_section_nod": 406, "entity_nod": 406, "processing_instruction_nod": [406, 407], "comment_nod": 406, "document_nod": 406, "document_type_nod": 406, "notation_nod": 406, "uncontroversi": 406, "newchild": 406, "refchild": 406, "oldchild": 406, "oldattr": 406, "newattr": [406, 460], "removenameditem": 406, "domstring_size_err": 406, "hierarchy_request_err": 406, "index_size_err": 406, "inuse_attribute_err": 406, "invalid_access_err": 406, "invalid_character_err": 406, "invalid_modification_err": 406, "invalid_state_err": 406, "namespace_err": 406, "not_found_err": 406, "not_supported_err": 406, "no_data_allowed_err": 406, "no_modification_allowed_err": 406, "syntax_err": 406, "wrong_document_err": 406, "domstr": [406, 407], "somevalu": 406, "anothervalu": 406, "_get_somevalu": 406, "_get_anothervalu": 406, "_set_anothervalu": 406, "corba": 406, "profici": 407, "dom1": 407, "datasourc": 407, "dom2": 407, "dom3": 407, "myxml": 407, "filename_or_fil": 407, "grasp": 407, "newdoc": 407, "some_tag": 407, "top_el": 407, "addind": 407, "newl": 407, "subnod": 407, "prologu": 407, "slideshow": 407, "handleslideshow": 407, "handleslideshowtitl": 407, "handletoc": 407, "handleslid": 407, "handleslidetitl": 407, "handlepoint": 407, "_get_foo": 407, "_set_foo": 407, "domtimestamp": 407, "entityrefer": 407, "sales_item": 408, "start_docu": 408, "end_docu": 408, "processing_instruct": 408, "ignorable_whitespac": 408, "documentfactori": 408, "stream_or_str": 408, "celementtre": [409, 463, 471, 472, 479], "liechtenstein": 409, "gdppc": 409, "141100": 409, "switzerland": 409, "singapor": 409, "59900": 409, "malaysia": 409, "panama": 409, "13600": 409, "costa": 409, "rica": 409, "colombia": 409, "country_data": 409, "country_data_as_str": 409, "mytag": 409, "sometext": 409, "0x7fa66db2be58": 409, "new_rank": 409, "sometag": 409, "fiction": 409, "actor": [409, 437, 477], "lancelot": [409, 438], "archi": 409, "leach": 409, "sir": [409, 437, 467, 477], "gunther": 409, "clement": [409, 475, 479], "xml_text": 409, "real_person": 409, "countrydata": 409, "grand": 409, "dublin": 409, "purl": 409, "grandchildren": [409, 479], "xml_data": 409, "normalis": [409, 479], "freedom": [409, 432], "c14n_output": 409, "inputfil": 409, "with_com": 409, "strip_text": 409, "rewrite_prefix": 409, "qname_aware_tag": 409, "qname_aware_attr": 409, "exclude_attr": 409, "exclude_tag": 409, "xml_declar": [409, 465, 479], "default_namespac": [409, 465, 479], "short_empty_el": [409, 413, 473], "xi": 409, "xpointer": 409, "para": 409, "base_url": 409, "max_depth": 409, "unprefix": [409, 479], "convey": 409, "perceptu": 409, "reorder_attribut": 409, "0xb77e6fac": 409, "0xb77ec26c": 409, "0xb77ec2ac": 409, "0xb77ec1cc": 409, "text_or_uri": 409, "element_factori": 409, "comment_factori": 409, "pi_factori": 409, "insert_com": 409, "insert_pi": 409, "pis": 409, "pubid": 409, "attrs_dict": 409, "maxdepth": 409, "examplexml": 409, "parser_list": [410, 479], "create_pars": [410, 412], "filename_or_stream": 410, "confront": [410, 461], "focal": 410, "sax2lib": 411, "declhandl": 411, "documenthandl": [411, 412], "unrecover": [411, 479], "recover": 411, "public_id": 411, "system_id": [411, 412], "propertynam": 412, "formed": 412, "bytefil": 412, "charfil": 412, "amp": [413, 471], "use_datetim": [415, 463], "use_builtin_typ": [415, 416, 478], "safetransport": [415, 479], "ontosi": 415, "i4": 415, "i8": [415, 464], "biginteg": 415, "2147483648": 415, "2147483647": [415, 431, 463], "nil": [415, 461], "bigdecim": 415, "python_logo": 415, "fetched_python_logo": 415, "boxcar": 415, "methodrespons": 415, "betti": 415, "userland": 415, "getstatenam": 415, "proxiedtransport": 415, "proxy_head": 415, "requesthandl": 416, "logrequest": 416, "allow_dotted_nam": 416, "_dispatch": 416, "intrud": 416, "rpc2": [416, 463], "adder_funct": 416, "exampleservic": 416, "getdata": 416, "currenttim": 416, "getcurrenttim": 416, "nkeyboard": 416, "request_text": 416, "server_titl": 416, "server_document": 416, "pyz": [417, 474, 479], "mainfn": 417, "deflat": [417, 420, 479], "old_arch": 417, "new_arch": 417, "virtu": [417, 479], "pyzw": [417, 479], "pkzip": [418, 419, 458], "zip64": [418, 463, 479], "phil": [418, 419, 464, 479], "katz": [418, 419], "allowzip64": [418, 473, 479], "strict_timestamp": [418, 479], "metadata_encod": [418, 479], "2107": [418, 479], "myzip": 418, "force_zip64": [418, 479], "zipextfil": [418, 471, 479], "appreci": [418, 422], "zinfo_or_arcnam": 418, "zinfo_or_directori": 418, "grandchild": 418, "zipp": [418, 479], "filterfunc": [418, 473], "zf": 418, "myprog": 418, "notest": 418, "testal": [418, 464], "bogus": [418, 465, 479], "ahlstrom": [419, 458, 461], "archivepath": 419, "8467": [419, 461], "jwzthread": [419, 461], "adler": [420, 422], "max_wbit": 420, "z_best_spe": 420, "z_best_compress": 420, "z_no_compress": 420, "z_default_compress": 420, "memlevel": 420, "def_mem_level": 420, "z_default_strategi": 420, "zdict": [420, 479], "z_filter": 420, "z_huffman_on": 420, "z_rle": 420, "z_fix": 420, "def_buf_s": 420, "z_no_flush": 420, "z_partial_flush": 420, "z_sync_flush": 420, "z_full_flush": 420, "z_block": 420, "z_finish": 420, "los_angel": [421, 478], "dt_add": 421, "dt_utc": 421, "pythontzpath": 421, "fobj": [421, 434], "only_key": 421, "new_york": 421, "asia": 421, "tokyo": 421, "cldr": 421, "kwajalein": 421, "01t03": 421, "europe_berlin_pkl": 421, "berlin": 421, "europe_berlin_pkl_nc": 421, "posixrul": 421, "cautionari": [421, 462], "1990": 422, "reston": 422, "pythonlab": [422, 458, 460], "opensourc": 422, "agreement": [422, 458, 477], "license": 422, "herebi": 422, "nonexclus": 422, "royalti": 422, "herein": 422, "merchant": 422, "infring": 422, "consequenti": 422, "partnership": 422, "ventur": 422, "trademark": 422, "endors": [422, 479], "saratoga": 422, "santa": 422, "clara": 422, "95051": 422, "1895": 422, "preston": [422, 476], "20191": [422, 479], "1013": 422, "feder": 422, "intellectu": 422, "commonwealth": 422, "virginia": 422, "notwithstand": [422, 458], "netherland": 422, "profit": 422, "tortious": 422, "_random": [422, 479], "sci": 422, "hiroshima": 422, "mat": [422, 465, 478, 479], "mt": 422, "mt2002": 422, "emt19937ar": 422, "mt19937": 422, "takuji": 422, "makoto": [422, 479], "init_genrand": 422, "init_by_array": 422, "init_key": 422, "key_length": 422, "redistribut": [422, 479], "holder": [422, 465, 479], "exemplari": 422, "procur": 422, "tort": 422, "emt": 422, "1996": 422, "rush": [422, 458], "timothi": 422, "malley": [422, 461], "timo": [422, 479], "alum": 422, "industri": 422, "whielacronx": 422, "mojam": 422, "montanaro": [422, 458, 461, 462, 463, 464], "bioreason": 422, "automatrix": 422, "cathedr": 422, "republ": 422, "laboratori": 422, "sublicens": 422, "sell": [422, 463], "furnish": 422, "noninfring": 422, "doug": [422, 479], "pyhash": [422, 452, 479], "marek": 422, "majkowski": 422, "dan": [422, 462, 463, 471, 472, 473, 474, 478, 479], "popcount": 422, "majek": 422, "csiphash": 422, "supercop": 422, "crypto_auth": 422, "djb": 422, "little2": 422, "131002": 422, "siphash": [422, 473, 479], "gay": [422, 465, 467, 468, 473, 475, 476, 479], "20220517033456": 422, "netlib": 422, "lucent": 422, "reproduct": 422, "licensor": 422, "authorship": 422, "editori": [422, 458], "verbal": 422, "conspicu": 422, "perpetu": [422, 473], "irrevoc": 422, "patent": 422, "institut": 422, "litig": 422, "counterclaim": 422, "lawsuit": 422, "alleg": 422, "contributori": 422, "addendum": 422, "constru": 422, "grossli": 422, "goodwil": 422, "stoppag": 422, "malfunct": 422, "indemn": 422, "oblig": [422, 458], "indemnifi": 422, "defend": [422, 479], "clark": [422, 472, 479], "loup": 422, "gailli": 422, "misrepres": 422, "jloup": 422, "madler": 422, "alumni": 422, "caltech": 422, "owen": 422, "_decim": [422, 452, 472, 479], "stefan": [422, 465, 469, 472, 473, 474, 475, 476, 477, 478, 479], "krah": [422, 465, 472, 475, 479], "xmltestdata": 422, "c14n2": 422, "ercim": 422, "keio": 422, "beihang": 422, "g771": 422, "sox": 422, "adlib": 422, "blaster": 422, "fm": [422, 464], "1992": 422, "jlee": 422, "smylex": 422, "consent": 422, "incarn": 423, "if_stmt": [423, 427], "while_stmt": [423, 427], "for_stmt": [423, 427], "try_stmt": [423, 427], "with_stmt": [423, 427], "match_stmt": [423, 427], "funcdef": 423, "async_with_stmt": 423, "async_for_stmt": 423, "async_funcdef": 423, "stmt_list": [423, 433], "compound_stmt": [423, 427, 433], "simple_stmt": [423, 427], "assignment_express": [423, 426, 427], "target_list": [423, 426, 432], "starred_list": [423, 426], "try1_stmt": 423, "try2_stmt": 423, "try3_stmt": 423, "with_stmt_cont": 423, "with_item": [423, 427], "hit_except": 423, "subject_expr": [423, 427], "case_block": [423, 427], "star_named_express": [423, 427], "named_express": [423, 427], "prerequisit": [423, 466, 479], "636": [423, 437, 468], "ebnf": [423, 427], "open_sequence_pattern": [423, 427], "as_pattern": [423, 427], "or_pattern": [423, 427], "literal_pattern": [423, 427], "capture_pattern": [423, 427], "wildcard_pattern": [423, 427], "value_pattern": [423, 427], "sequence_pattern": [423, 427], "mapping_pattern": [423, 427], "class_pattern": [423, 427], "closed_pattern": [423, 427], "signed_numb": [423, 427], "name_or_attr": [423, 427], "name1": [423, 463], "name2": [423, 463], "maybe_sequence_pattern": [423, 427], "maybe_star_pattern": [423, 427], "star_pattern": [423, 427], "p3": 423, "items_pattern": [423, 427], "key_value_pattern": [423, 427], "double_star_pattern": [423, 427], "pattern_argu": 423, "positional_pattern": [423, 427], "keyword_pattern": [423, 427], "parameter_list": [423, 426], "defparamet": 423, "parameter_list_no_poson": 423, "parameter_list_stararg": 423, "614": [423, 478, 479], "whats_on_the_telli": 423, "570": [423, 477, 479], "3107": [423, 437, 466, 474, 476], "param1": 423, "param2": 423, "do_stuff": 423, "some_coroutin": 423, "suite2": 423, "aenter": 423, "aexit": 423, "amax": 423, "overly_gener": 423, "simpletypevar": 423, "typevarwithbound": 423, "typevarwithconstraint": 423, "simpletypevartupl": 423, "simpleparamspec": 423, "type_params_of_func": 423, "liberti": 423, "some_default": 423, "default_of_arg": 423, "bound_of_t": 423, "type_params_of_bag": 423, "type_params_of_listorset": 423, "value_of_listorset": 423, "neumann": 424, "illus": [424, 471], "affix": [424, 479], "cell_cont": 424, "0x2000": 424, "0x10": 424, "0x1000": 424, "precari": 424, "parentclass": 424, "ocert": [424, 451], "asymmetri": 424, "verbosemodul": 424, "__objclass__": 424, "unlist": 424, "philosoph": 424, "australianphilosoph": 424, "bruce": [424, 479], "mysubclass": 424, "__classcell__": [424, 475, 477, 479], "3135": [424, 465, 466], "boundless": 424, "class_of_obj": 424, "breakfast": 424, "enummeta": [424, 469, 470, 479], "a_tupl": 424, "unbind": [425, 479], "simpleexpr": 425, "repair": [425, 457, 479], "offend": [425, 459], "bnf": [426, 430, 459], "othernam": [426, 458], "enclosur": 426, "parenth_form": 426, "list_display": 426, "dict_display": 426, "set_display": 426, "generator_express": 426, "yield_atom": 426, "__spam": [426, 436], "_ham__spam": 426, "stringliter": 426, "bytesliter": 426, "imagnumb": 426, "starred_express": [426, 427, 432], "unparenthes": [426, 478, 479], "comp_for": 426, "or_test": 426, "comp_it": 426, "comp_if": 426, "dict_item_list": 426, "dict_comprehens": 426, "dict_item": 426, "or_expr": [426, 431], "yield_express": [426, 431, 432], "expression_list": [426, 432, 433], "subiter": [426, 472], "yield_from": [426, 469, 479], "attributeref": [426, 432], "slice_list": 426, "slice_item": 426, "proper_slic": 426, "positional_argu": 426, "starred_and_keyword": 426, "keywords_argu": 426, "positional_item": 426, "keyword_item": 426, "x1": [426, 437, 468, 470, 479], "x3": 426, "x4": 426, "ym": 426, "await_expr": 426, "u_expr": 426, "m_expr": 426, "a_expr": 426, "shift_expr": [426, 427], "and_expr": 426, "xor_expr": 426, "comp_oper": 426, "op1": 426, "op2": 426, "opn": 426, "reflex": 426, "and_test": 426, "not_test": 426, "conditional_express": [426, 431], "lambda_expr": 426, "starred_item": 426, "expr4": 426, "expr5": 426, "roundoff": 426, "0041": 426, "precompos": 426, "u00c7": 426, "u0043": 426, "u0327": 426, "_pypegen_pars": 427, "reserved_keyword": 427, "n_keyword_list": 427, "start_rul": 427, "file_rul": 427, "interactive_rul": 427, "eval_rul": 427, "py_func_type_input": 427, "func_type_rul": 427, "py_fstring_input": 427, "fstring_rul": 427, "grammat": [427, 479], "invalid_": 427, "rule_nam": 427, "e1": [427, 471], "e2": 427, "first_alt": 427, "second_alt": 427, "mod_ti": [427, 468, 479], "_pypegen_make_modul": 427, "statement_newlin": 427, "_pyast_interact": 427, "_pyast_express": 427, "type_express": 427, "_pyast_functiontyp": 427, "fstring": [427, 479], "expr_ti": 427, "star_express": 427, "asdl_stmt_seq": 427, "_pypegen_seq_flatten": 427, "_pypegen_singleton_seq": 427, "stmt_ti": 427, "_pyast_pass": 427, "_pypegen_interactive_exit": 427, "type_alia": 427, "_pyast_expr": 427, "return_stmt": [427, 432], "import_stmt": [427, 432], "raise_stmt": [427, 432], "del_stmt": [427, 432], "yield_stmt": [427, 432], "assert_stmt": [427, 432], "_pyast_break": 427, "_pyast_continu": 427, "global_stmt": [427, 432], "nonlocal_stmt": [427, 432], "function_def": 427, "class_def": 427, "annotated_rh": 427, "yield_expr": 427, "check_vers": 427, "_pyast_annassign": 427, "_pypegen_set_expr_context": 427, "single_target": 427, "single_subscript_attribute_target": 427, "asdl_expr_seq": 427, "star_target": 427, "tc": 427, "_pyast_assign": 427, "new_type_com": 427, "_pyast_augassign": 427, "invalid_assign": 427, "augoper": 427, "_pypegen_augoper": 427, "_pyast_return": 427, "_pyast_rais": 427, "_pyast_glob": 427, "asdl_identifier_seq": 427, "_pypegen_map_names_to_id": 427, "_pyast_nonloc": 427, "del_target": 427, "_pyast_delet": 427, "invalid_del_stmt": 427, "_pyast_assert": 427, "invalid_import": 427, "dotted_as_nam": 427, "_pyast_import": 427, "dotted_nam": 427, "import_from_target": 427, "_pyast_importfrom": 427, "_pypegen_seq_count_dot": 427, "asdl_alias_seq": 427, "import_from_as_nam": 427, "alias_ti": 427, "_pypegen_alias_for_star": 427, "invalid_import_from_target": 427, "_pyast_alia": 427, "_pypegen_join_names_with_dot": 427, "invalid_block": 427, "class_def_raw": 427, "_pypegen_class_def_decor": 427, "invalid_class_def_raw": 427, "_pyast_classdef": 427, "function_def_raw": 427, "_pypegen_function_def_decor": 427, "invalid_def_raw": 427, "func_type_com": 427, "_pyast_functiondef": 427, "arguments_ti": 427, "_pypegen_empty_argu": 427, "_pyast_asyncfunctiondef": 427, "invalid_paramet": 427, "slash_no_default": 427, "asdl_arg_seq": 427, "param_no_default": 427, "param_with_default": 427, "star_etc": 427, "_pypegen_make_argu": 427, "slash_with_default": 427, "slashwithdefault": 427, "_pypegen_slash_with_default": 427, "staretc": 427, "invalid_star_etc": 427, "param_maybe_default": 427, "_pypegen_star_etc": 427, "param_no_default_star_annot": 427, "arg_ti": 427, "invalid_kwd": 427, "_pypegen_add_type_comment_to_arg": 427, "param_star_annot": 427, "namedefaultpair": 427, "_pypegen_name_default_pair": 427, "_pyast_arg": 427, "star_annot": 427, "invalid_default": 427, "invalid_if_stmt": 427, "elif_stmt": 427, "_pyast_if": 427, "else_block": 427, "invalid_elif_stmt": 427, "invalid_else_stmt": 427, "invalid_while_stmt": 427, "_pyast_whil": 427, "invalid_for_stmt": 427, "_pyast_for": 427, "_pyast_asyncfor": 427, "invalid_for_target": 427, "invalid_with_stmt_ind": 427, "asdl_withitem_seq": 427, "_pyast_with": 427, "_pyast_asyncwith": 427, "invalid_with_stmt": 427, "withitem_ti": 427, "_pyast_withitem": 427, "invalid_with_item": 427, "invalid_try_stmt": 427, "finally_block": 427, "_pyast_tri": 427, "asdl_excepthandler_seq": 427, "except_block": 427, "except_star_block": 427, "_pyast_trystar": 427, "excepthandler_ti": 427, "invalid_except_stmt_ind": 427, "_pyast_excepthandl": 427, "invalid_except_stmt": 427, "invalid_except_star_stmt_ind": 427, "invalid_finally_stmt": 427, "asdl_match_case_seq": 427, "_pyast_match": 427, "invalid_match_stmt": 427, "_pyast_tupl": 427, "_pypegen_seq_insert_in_front": 427, "match_case_ti": 427, "invalid_case_block": 427, "_pyast_match_cas": 427, "pattern_ti": 427, "asdl_pattern_seq": 427, "_pyast_matchsequ": 427, "pattern_capture_target": 427, "_pyast_matcha": 427, "invalid_as_pattern": 427, "asdl_seq_len": 427, "asdl_seq_get": 427, "_pyast_matchor": 427, "_pyast_matchvalu": 427, "complex_numb": 427, "_pyast_matchsingleton": 427, "literal_expr": 427, "_pyast_const": 427, "signed_real_numb": 427, "imaginary_numb": 427, "_pyast_binop": 427, "_pyast_unaryop": 427, "real_numb": 427, "_pypegen_ensure_r": 427, "_pypegen_ensure_imaginari": 427, "_pyast_attribut": 427, "asdl_seq": 427, "_pyast_matchstar": 427, "_pyast_matchmap": 427, "_pypegen_get_pattern_key": 427, "_pypegen_get_pattern": 427, "keypatternpair": 427, "_pypegen_key_pattern_pair": 427, "_pyast_matchclass": 427, "invalid_class_pattern": 427, "_pyast_typealia": 427, "asdl_type_param_seq": 427, "type_param_seq": 427, "type_param_ti": 427, "type_param_bound": 427, "_pyast_typevar": 427, "raise_syntax_error_starting_from": 427, "tuple_kind": 427, "_pyast_typevartupl": 427, "_pyast_paramspec": 427, "invalid_express": 427, "invalid_legacy_express": 427, "_pyast_ifexp": 427, "lambdef": 427, "_pyast_yieldfrom": 427, "_pyast_yield": 427, "bitwise_or": 427, "_pyast_star": 427, "_pyast_namedexpr": 427, "invalid_named_express": 427, "_pyast_boolop": 427, "compare_op_bitwise_or_pair": 427, "_pyast_compar": 427, "asdl_int_seq": 427, "_pypegen_get_cmpop": 427, "_pypegen_get_expr": 427, "cmpopexprpair": 427, "eq_bitwise_or": 427, "noteq_bitwise_or": 427, "lte_bitwise_or": 427, "lt_bitwise_or": 427, "gte_bitwise_or": 427, "gt_bitwise_or": 427, "notin_bitwise_or": 427, "in_bitwise_or": 427, "isnot_bitwise_or": 427, "is_bitwise_or": 427, "_pypegen_cmpop_expr_pair": 427, "tok": 427, "_pypegen_check_barry_as_flufl": 427, "bitwise_xor": 427, "bitwise_and": 427, "await_primari": 427, "_pyast_await": 427, "_pyast_cal": 427, "_pyast_subscript": 427, "_pyast_slic": 427, "invalid_group": 427, "lambda_param": 427, "_pyast_lambda": 427, "invalid_lambda_paramet": 427, "lambda_paramet": 427, "lambda_slash_no_default": 427, "lambda_param_no_default": 427, "lambda_param_with_default": 427, "lambda_star_etc": 427, "lambda_slash_with_default": 427, "invalid_lambda_star_etc": 427, "lambda_param_maybe_default": 427, "lambda_kwd": 427, "invalid_lambda_kwd": 427, "fstring_replacement_field": 427, "_pypegen_constant_from_token": 427, "debug_expr": 427, "fstring_convers": 427, "fstring_full_format_spec": 427, "_pypegen_formatted_valu": 427, "invalid_replacement_field": 427, "resulttokenwithmetadata": 427, "conv_token": 427, "conv": [427, 448, 474], "_pypegen_check_fstring_convers": 427, "fstring_format_spec": 427, "_pypegen_setup_full_format_spec": 427, "_pypegen_decoded_constant_from_token": 427, "_pypegen_joined_str": 427, "_pypegen_constant_from_str": 427, "_pypegen_concatenate_str": 427, "_pyast_list": 427, "_pyast_set": 427, "double_starred_kvpair": 427, "_pyast_dict": 427, "_pypegen_get_key": 427, "_pypegen_get_valu": 427, "invalid_double_starred_kvpair": 427, "keyvaluepair": 427, "_pypegen_key_value_pair": 427, "kvpair": 427, "for_if_claus": 427, "asdl_comprehension_seq": 427, "comprehension_ti": 427, "_pyast_comprehens": 427, "_pyast_listcomp": 427, "invalid_comprehens": 427, "_pyast_setcomp": 427, "_pyast_generatorexp": 427, "_pyast_dictcomp": 427, "invalid_dict_comprehens": 427, "invalid_argu": 427, "_pypegen_collect_call_seq": 427, "_pypegen_dummy_nam": 427, "check_null_allow": 427, "_pypegen_seq_extract_starred_expr": 427, "asdl_keyword_seq": 427, "_pypegen_seq_delete_starred_expr": 427, "kwarg_or_star": 427, "kwarg_or_double_star": 427, "_pypegen_join_sequ": 427, "invalid_starred_express": 427, "keywordorstar": 427, "invalid_kwarg": 427, "_pypegen_keyword_or_star": 427, "keyword_ti": 427, "_pyast_keyword": 427, "star_targets_list_seq": 427, "star_targets_tuple_seq": 427, "target_with_star_atom": 427, "t_primari": 427, "t_lookahead": 427, "star_atom": 427, "del_t_atom": 427, "_pypegen_seq_append_to_end": 427, "invalid_double_type_com": 427, "raise_syntax_error_known_loc": 427, "raise_syntax_error_known_rang": 427, "_pypegen_get_last_comprehension_item": 427, "pypegen_last_item": 427, "_pypegen_nonparen_genexp_in_cal": 427, "_pypegen_arguments_parsing_error": 427, "_without_invalid": 427, "expression_without_invalid": 427, "_pypegen_check_legacy_stmt": 427, "kf": 427, "dsfsdf": 427, "forgot": [427, 468, 470], "_pypegen_get_expr_nam": 427, "invalid_ann_assign_target": 427, "raise_syntax_error_invalid_target": 427, "raise_indentation_error": 427, "invalid_parameters_help": 427, "raise_syntax_error": 427, "invalid_lambda_parameters_help": 427, "for_target": 427, "invalid_class_argument_pattern": 427, "pypegen_first_item": 427, "invalid_kvpair": 427, "raise_error_known_loc": 427, "raise_syntax_error_on_next_token": 427, "invalid_conversion_charact": 427, "reinitialis": 428, "mpf": 428, "_init_module_attr": 428, "atyp": 428, "module_repr": [428, 468, 469, 470, 473, 479], "searchabl": [428, 479], "subpackage1": 428, "modulex": 428, "moduley": 428, "subpackage2": 428, "modulez": 428, "modulea": 428, "volunt": [430, 464], "lloyd": 430, "hugunin": 430, "lc_letter": 430, "vim": [431, 455, 473], "fileencod": 431, "bram": [431, 460], "moolenaar": 431, "2100": 431, "maart": 431, "mei": 431, "juni": 431, "augustus": 431, "oktob": 431, "unwis": 431, "uax": 431, "3131": [431, 466, 479], "xid_start": 431, "xid_continu": 431, "other_id_start": 431, "id_start": 431, "mc": [431, 479], "other_id_continu": 431, "id_continu": 431, "connector": 431, "proplist": 431, "normat": 431, "derivedcoreproperti": 431, "breakag": [431, 458, 459, 461, 470, 476, 479], "stringprefix": 431, "shortstr": 431, "longstr": 431, "shortstringitem": 431, "longstringitem": 431, "shortstringchar": 431, "stringescapeseq": 431, "longstringchar": 431, "bytesprefix": 431, "shortbyt": 431, "longbyt": 431, "shortbytesitem": 431, "longbytesitem": 431, "shortbyteschar": 431, "bytesescapeseq": 431, "longbyteschar": 431, "ur": [431, 466, 479], "reintroduc": [431, 479], "codebas": [431, 473, 474, 479], "ooo": 431, "0o377": [431, 469, 470, 479], "mistyp": 431, "literal_char": 431, "replacement_field": 431, "f_express": 431, "abc5": 431, "34567": [431, 475], "0x400": 431, "mill": 431, "decinteg": 431, "bininteg": 431, "octinteg": 431, "hexinteg": 431, "nonzerodigit": 431, "bindigit": 431, "0o177": 431, "0b100110111": 431, "79228162514264337593543950336": 431, "0xdeadbeef": 431, "100_000_000_000": 431, "0b_1110_0101": 431, "pointfloat": 431, "exponentfloat": 431, "077e010": 431, "77e10": 431, "14e": 431, "0e0": 431, "14_15_93": 431, "14j": 431, "10j": 431, "001j": 431, "1e100j": 431, "14_15_93j": 431, "expression_stmt": 432, "assignment_stmt": 432, "augmented_assignment_stmt": 432, "annotated_assignment_stmt": 432, "pass_stmt": 432, "break_stmt": 432, "continue_stmt": 432, "future_stmt": 432, "type_stmt": 432, "3132": [432, 466], "augtarget": 432, "augop": 432, "expression1": 432, "expression2": 432, "tracebackobj": 432, "relative_modul": 432, "fbb": 432, "subpkg2": 432, "subpkg1": 432, "3104": [432, 466], "value_of_point": 432, "pythonrc": 434, "startup_fil": 434, "awk": [435, 458], "smalltak": 436, "pyhon": [436, 446], "the_answ": 436, "scope_test": 436, "do_loc": 436, "do_nonloc": 436, "do_glob": 436, "realpart": 436, "imagpart": 436, "canin": 436, "fido": 436, "buddi": 436, "add_trick": 436, "warehous": [436, 471], "w2": 436, "addtwic": 436, "derivedclassnam": 436, "baseclassnam": 436, "base3": 436, "_spam": 436, "items_list": 436, "__updat": 436, "mappingsubclass": 436, "_mapping__upd": 436, "_mappingsubclass__upd": 436, "str_iter": 436, "0x10c90e650": 436, "rev": 436, "0x00a1db50": 436, "golf": 436, "xvec": 436, "yvec": 436, "260": [436, 457, 465, 475], "unique_word": 436, "valedictorian": 436, "gpa": 436, "graduat": [436, 474, 477], "defenestr": 437, "han": [437, 461, 468, 479], "onor": 437, "active_us": 437, "myemptyclass": 437, "initlog": 437, "rust": 437, "http_error": [437, 468], "teapot": [437, 468, 479], "where_i": 437, "grass": [437, 468], "987": [437, 445, 446], "1597": 437, "10042ed0": 437, "fib2": [437, 446], "f100": 437, "ask_ok": 437, "ye": [437, 469, 479], "vooooom": 437, "bereft": 437, "daisi": 437, "cheeseshop": 437, "limburg": 437, "runni": 437, "shopkeep": 437, "palin": 437, "shop": [437, 450], "pos1": 437, "pos2": 437, "pos_or_kwd": 437, "kwd1": 437, "kwd2": 437, "standard_arg": 437, "pos_only_arg": 437, "kwd_only_arg": 437, "combined_exampl": 437, "pos_on": 437, "kwd_on": 437, "write_multiple_item": 437, "bleedin": 437, "demis": 437, "make_incrementor": 437, "uppercamelcas": 437, "lowercase_with_underscor": 437, "kiwi": 438, "tangerin": 438, "grape": 438, "7j": 438, "freshfruit": 438, "loganberri": 438, "passion": 438, "weapon": 438, "14159": [438, 440], "comprehes": 438, "3x4": 438, "transposed_row": 438, "88888": 438, "basket": 438, "crabgrass": 438, "alacazam": [438, 462], "tel": 438, "sape": 438, "4139": 438, "brave": 438, "tic": 438, "tac": 438, "toe": 438, "raw_data": 438, "filtered_data": 438, "string3": 438, "trondheim": 438, "hammer": [438, 458], "non_nul": 438, "this_fail": 439, "hither": 439, "flew": 439, "bool_return": 439, "0001100110011001100110011001100110011001100110011": 440, "3602879701896397": 440, "10000000000000001": 440, "12g": [440, 458], "peril": 440, "3537115888337719": 440, "1125899906842624": 440, "921f9f01b866ep": 440, "10430216751806065": 440, "266310978": 440, "67179024": 440, "143401161448607": 440, "143401161400469": 440, "266262841": 440, "31058735": 440, "003244936839808227": 440, "042173697819788e": 440, "042178034628478e": 440, "0051575902860057365": 440, "7205759403792794": 440, "17f": 440, "36028797018963968": 440, "referendum": 442, "yes_vot": 442, "42_572_654": 442, "no_vot": 442, "43_132_495": 442, "vote": [442, 458, 463, 471], "42572654": 442, "40000": [442, 479], "dcab": 442, "7678": 442, "phone": [442, 471], "10d": 442, "eel": 442, "hovercraft": 442, "roach": [442, 475, 477, 479], "horribl": 442, "manfr": 442, "8637678": 442, "4d": 442, "729": 442, "00012": 442, "workfil": 442, "0123456789abcdef": 442, "6th": [442, 479], "korn": 443, "ipython": [443, 464, 468], "bpython": 443, "the_world_is_flat": 444, "666666666666667": 445, "rabbit": 445, "ame": [445, 475], "thingi": 445, "ium": 445, "unununium": 445, "tho": 445, "supercalifragilisticexpialidoci": [445, 448], "fibo": 446, "itemnam": 446, "yuck": 446, "ufs": 446, "_framework": 446, "_git": [446, 479], "_home": 446, "callstat": [446, 476, 478, 479], "wavread": 446, "wavwrit": 446, "aiffread": 446, "aiffwrit": 446, "auread": 446, "auwrit": 446, "vocod": 446, "karaok": 446, "echofilt": 446, "atten": 446, "subitem": 446, "subsubitem": 446, "specific_submodul": 446, "python312": [447, 448], "accesslog": 447, "installdir": [447, 452], "tea": 447, "70710678118654757": 447, "17970987693706186": 447, "6071428571428572": 447, "worldtimeapi": 447, "01t01": 447, "689215": 447, "soothsay": 447, "jcaesar": 447, "1964": 447, "14368": 447, "witch": 447, "wrist": 447, "226805979": 447, "57535828626024577": 447, "54962537085770791": 447, "teststatisticalfunct": 447, "test_averag": 447, "batteri": 447, "sqllite3": 447, "english_unit": 448, "villag": 448, "folk": 448, "nottingham": 448, "ditch": 448, "fund": [448, 458, 463], "nottinghamfolk": 448, "unladen": [448, 471], "photofil": 448, "img_1074": 448, "img_1076": 448, "img_1077": 448, "batchrenam": 448, "seqnum": 448, "ashley_": 448, "ashley_0": 448, "ashley_1": 448, "ashley_2": 448, "iiihh": 448, "comp_siz": 448, "uncomp_s": 448, "filenames": 448, "decoupl": [448, 474, 476], "asynczip": 448, "4000": 448, "700": 448, "22222": 448, "26932": [448, 479], "task3": 448, "task4": 448, "unsearch": 448, "starting_nod": 448, "breadth_first_search": 448, "gen_mov": 448, "is_goal": 448, "lua": 448, "09999999999999995": 448, "142857142857142857142857142857142857": 448, "nova": 449, "136kb": 449, "whl": 449, "kenneth": 449, "reitz": 449, "kennethreitz": 449, "akuchl": 449, "596": [450, 478], "00797": 450, "pyvideo": 450, "bbdehiioqssuvvwx": 451, "0b2": [451, 479], "0c076caaa8": 451, "20161005": 451, "wdefault": [451, 465, 471, 479], "walway": [451, 461], "wmodul": 451, "wonc": 451, "wignor": 451, "wi": 451, "frozen_modul": [451, 479], "importlib_bootstrap": 451, "importlib_bootstrap_extern": 451, "showalloccount": [451, 475, 478, 479], "oldpars": [451, 478, 479], "qualif": [451, 473], "selftest": 451, "4294967295": [451, 475], "encodingnam": 451, "pythondumprefsfil": [451, 479], "c11": [452, 469, 472, 479], "stdint": [452, 479], "_sqlite": [452, 479], "pylong_bits_in_digit": [452, 469, 479], "dbmlibord": [452, 465], "py_coerce_c_local": 452, "freelist": [452, 469, 479], "_bundl": [452, 468, 479], "pystat": [452, 479], "py_stat": 452, "summarize_stat": 452, "memf": 452, "noderawf": 452, "retriv": 452, "eprefix": 452, "bolt": [452, 470, 479], "profile_task": [452, 478, 479], "clang": [452, 470, 473, 475, 479], "llvm": [452, 475, 479], "profdata": [452, 479], "interposit": [452, 468, 479], "testtimeout": [452, 479], "gold": 452, "thinlto": [452, 469, 470, 479], "fdata": 452, "bolt_instrument_flag": [452, 479], "bolt_apply_flag": [452, 479], "gprof": [452, 462], "fstrict": 452, "gettotalrefcount": [452, 479], "__lltrace__": [452, 479], "_pyobject_assert": 452, "ndebug": 452, "py_safe_downcast": 452, "valgrind": [452, 465, 471, 475, 479], "addresssanit": [452, 479], "asan": 452, "memorysanit": 452, "msan": 452, "undefinedbehaviorsanit": 452, "ubsan": [452, 479], "libpythonmajor": [452, 468, 479], "lib1": 452, "mpdec": 452, "with_editlin": 452, "have_libreadlin": 452, "fnv": [452, 473], "siphash13": [452, 469, 479], "universalsdk": [452, 463, 478, 479], "sdkdir": 452, "arch": [452, 464, 479], "universal2": [452, 478, 479], "config_sit": [452, 479], "aarch64": [452, 479], "ac_cv_buggy_getaddrinfo": 452, "ac_cv_file__dev_ptmx": 452, "ac_cv_file__dev_ptc": 452, "makesetup": [452, 469, 479], "buildbottest": 452, "autoconf": [452, 470, 479], "distclean": [452, 479], "py_build_core_builtin": 452, "_asyncio": [452, 479], "py_build_core_modul": [452, 479], "pyapi_api": 452, "pyport": [452, 458, 479], "py_exported_symbol": 452, "py_imported_symbol": 452, "pyinit_xxx": [452, 479], "configure_cppflag": 452, "cppflag": [452, 461, 479], "basecppflag": 452, "py_cppflag": 452, "cflags_nodist": [452, 479], "21121": [452, 479], "harden": [452, 479], "heighten": 452, "compileall_opt": [452, 470, 479], "j0": [452, 470, 479], "extra_cflag": 452, "configure_cflag": 452, "configure_cflags_nodist": 452, "basecflag": 452, "cflags_alias": 452, "ccshare": 452, "fpic": [452, 479], "cflagsforshar": 452, "py_cflag": [452, 479], "py_cflags_nodist": [452, 479], "py_stdmodule_cflag": [452, 479], "py_core_cflag": 452, "dpy_build_cor": [452, 479], "py_builtin_module_cflag": 452, "dpy_build_core_builtin": 452, "_testemb": [452, 479], "configure_ldflag": 452, "stomp": 452, "ldflags_nodist": 452, "35257": [452, 479], "configure_ldflags_nodist": 452, "lrt": 452, "ldshare": 452, "py_ldflag": 452, "bldshare": 452, "py_core_ldflag": 452, "py_ldflags_nodist": 452, "savag": 455, "bobsavag": 455, "pythonlaunch": 455, "textwrangl": 455, "barebon": 455, "textmat": [455, 473], "macrom": 455, "gvim": 455, "macvim": 455, "aquamac": 455, "qa1067": 455, "hashcollis": 455, "hkn": 455, "idle_intro": 455, "pyobjc": 455, "wxpython": 455, "riverbankcomput": 455, "pythonmac": 455, "maint": 456, "opensus": 456, "portal": 456, "fedoraproject": 456, "fedora_draft_document": 456, "rpm_guid": 456, "rpms": 456, "slackbook": 456, "slackwar": 456, "pkg_add": 456, "1p2": 456, "pki": 456, "install_sw": 456, "xzf": 456, "pushd": 456, "openssldir": 456, "j8": 456, "popd": 456, "team": [457, 458, 459, 460, 465, 473, 478, 479], "longpathsen": 457, "currentcontrolset": 457, "installallus": 457, "targetdir": [457, 479], "defaultalluserstargetdir": 457, "programfil": 457, "defaultjustformetargetdir": 457, "localappdata": 457, "defaultcustomtargetdir": 457, "associatefil": 457, "prependpath": [457, 469], "appendpath": [457, 469], "include_doc": 457, "include_debug": 457, "include_dev": 457, "include_ex": 457, "include_launch": 457, "installlauncherallus": 457, "include_lib": 457, "include_pip": 457, "include_symbol": 457, "include_tcltk": 457, "include_test": 457, "include_tool": 457, "launcheron": 457, "simpleinstal": 457, "simpleinstalldescript": 457, "elev": [457, 479], "unattend": [457, 479], "pythonsoftwarefound": 457, "8_qbz5n2kfra8p0": 457, "localcach": 457, "windowsapp": 457, "package_nam": 457, "vfs": 457, "systemx86": 457, "test_fil": 457, "hklm": 457, "msix": 457, "uwp": 457, "nugetclidl": 457, "excludevers": 457, "outputdirectori": 457, "pythonx86": 457, "msbuild": [457, 479], "python37": 457, "ucrtbas": [457, 479], "profession": [457, 467], "anaconda": 457, "panda": 457, "conda": 457, "canopi": 457, "winpython": 457, "prebuilt": 457, "my_python_lib": 457, "procthread": 457, "set_1": 457, "wsl": [457, 479], "pythoncor": [457, 469, 479], "insenit": 457, "oneith": 457, "pylauncher_no_search_path": 457, "xpython": 457, "py_python": 457, "py_python3": 457, "pylauncher_debug": 457, "pylauncher_dryrun": 457, "pylauncher_allow_instal": [457, 479], "pylauncher_always_instal": 457, "rc_bad_venv_cfg": 457, "rc_create_process": 457, "rc_instal": 457, "rc_internal_error": 457, "rc_no_commandlin": 457, "rc_no_python": 457, "rc_no_venv_cfg": 457, "hive": 457, "hkcu": 457, "apploc": 457, "pythonxx": 457, "mfc": 457, "golden": [457, 473], "ongo": [457, 476], "mosh": [458, 459, 460, 462], "zadka": [458, 459, 460, 462], "steadi": 458, "paid": 458, "contractu": 458, "evolut": [458, 459], "6final": 458, "0beta1": 458, "fourfold": 458, "schneider": [458, 479], "kamp": 458, "checkin": 458, "submitt": 458, "ka": [458, 459, 460, 463], "yee": [458, 459, 460, 463], "scraper": 458, "indiffer": 458, "him": 458, "consensus": 458, "dissent": 458, "lockstep": 458, "elementwis": [458, 459], "objectwis": 458, "536": 458, "countless": 458, "stormi": 458, "uhhhh": 458, "xhhhh": 458, "01ff": 458, "777": [458, 474], "setdefaultencod": 458, "unichr": [458, 460, 463], "encode_func": 458, "decode_func": 458, "stream_read": 458, "stream_writ": 458, "ustr": 458, "u2000ab": 458, "utf8_encod": 458, "utf8_decod": 458, "utf8_streamread": 458, "utf8_streamwrit": 458, "sre": [458, 460], "workhors": 458, "ewe": [458, 472], "argu": [458, 460, 465], "lengthier": [458, 459], "thoma": [458, 459, 462, 463, 464, 465, 468, 469, 470, 473, 474, 475, 476, 479], "wouter": [458, 459, 462, 463, 464, 465, 474, 477, 479], "strop": 458, "hlinuxtnam": 458, "joke": [458, 479], "jpython": 458, "realis": 458, "myself": 458, "afford": 458, "tobi": [458, 479], "kelsey": 458, "tiedemann": 458, "neil": [458, 459, 460, 461, 463, 465, 471, 474, 475, 476, 477, 479], "schemenau": [458, 459, 460, 461, 463, 465, 474, 477], "overrod": [458, 479], "tismer": [458, 473], "rewrot": [458, 461, 479], "jeremi": [458, 459, 460, 461, 462, 463, 464, 465, 479], "hylton": [458, 459, 460, 461, 462, 463, 464, 465], "isomorph": 458, "trashcan": [458, 469, 478, 479], "__cmp__": [458, 459, 461, 464, 465, 466], "itanium": [458, 474], "trent": [458, 461, 463, 473], "pythonc": 458, "dyld": [458, 479], "wart": [458, 466], "291": 458, "1beta1": 458, "runaway": 458, "gpf": 458, "find_recursionlimit": 458, "listobject": 458, "no_strict_list_append": 458, "0alpha1": 458, "gvr": [458, 460, 461, 462, 465, 475], "reaction": [458, 459], "x123456": 458, "3l": 458, "abcabcabc": 458, "4l": 458, "18446744073709551616": [458, 465], "subtlest": 458, "longval": 458, "17g": [458, 467], "0999999999999996": 458, "fulton": [458, 462, 475, 479], "extensionclass": 458, "myextensionclass": 458, "importdl": 458, "reorganis": 458, "dynload_": 458, "vladimir": [458, 459, 461, 468, 470, 477, 479], "marangozov": [458, 459, 461], "pymem": [458, 463], "objimpl": 458, "gusi": 458, "unthread": 458, "yakov": 458, "markovitch": 458, "charl": [458, 465, 470, 472, 473, 474, 475, 476, 479], "waldman": 458, "affair": 458, "arduous": 458, "ritual": 458, "shepherd": [458, 461], "tarbal": [458, 479], "py_modul": 458, "module1": 458, "module2": 458, "expat_extens": 458, "define_macro": 458, "xml_ns": 458, "include_dir": 458, "xmltok": 458, "xmlpars": 458, "xmlrole": 458, "sdist": [458, 459, 463, 465, 475, 476, 479], "bdist_rpm": [458, 479], "bdist_wininst": [458, 468, 477, 478, 479], "xmllib": 458, "mullend": [458, 464], "tag1": 458, "perslist": 458, "persona": 458, "claudius": 458, "denmark": 458, "son": 458, "nephew": 458, "20th": 458, "4dom": 458, "fourthought": 458, "xmlproc": 458, "lar": [458, 461, 462, 463, 464, 465, 471, 472], "garshol": 458, "sgmlop": 458, "gallew": 458, "httplib": [458, 461, 462, 464, 465, 466, 479], "create_lin": 458, "create_polygon": 458, "oliv": [458, 479], "andrich": 458, "hewlett": 458, "packard": 458, "cmpcach": 458, "macmillan": 458, "twin": 458, "sunaudiodev": [458, 464], "bosch": 458, "prescod": [458, 459, 460, 463], "spider": 458, "fetchabl": 458, "browsercontrol": 458, "_winreg": [458, 464, 465, 466], "tutt": 458, "imputil": [458, 461, 465], "ihook": [458, 461, 464, 465], "vanilla": 458, "stdwin": 458, "packmail": 458, "whatsound": 458, "zmod": 458, "bolen": [458, 460], "gregg": 458, "hauser": 458, "detlef": [458, 461], "lannert": [458, 461], "aahz": [458, 462, 463], "maruch": 458, "tobia": 458, "polzin": 458, "russ": 458, "schmidt": 458, "sizabl": [459, 460], "pace": [459, 464], "clumsier": [459, 460], "list_attribut": [459, 460], "unknow": [459, 460], "gradual": [459, 460], "compulsori": [459, 460, 461], "crunch": 459, "tp_richcmp": 459, "ascher": 459, "spare": 459, "toolbox": [459, 460, 461], "aycock": 459, "spark": [459, 479], "135143996": 459, "py_tpflags_checktyp": 459, "middleton": 459, "vault": 459, "parnassus": 459, "retir": [459, 479], "wayback": 459, "catalogu": 459, "bdist_": 459, "sean": [459, 461, 462, 463, 465, 479], "reifschneid": [459, 461, 462, 463, 465], "addict": 459, "purcel": 459, "gellekum": 459, "ninth": 459, "edward": [459, 460, 462, 463], "136": 459, "underestim": [459, 460, 461, 462, 463, 464], "afoul": [459, 461], "getc": 459, "jeff": [459, 461, 473, 475, 479], "epler": 459, "fuller": 459, "preliminari": [459, 476, 479], "ben": [459, 463, 469, 474, 479], "wolfson": 459, "vestigi": [459, 479], "ancestri": 459, "shrunk": [459, 479], "340k": 459, "majewski": 459, "jason": [459, 461, 464, 470, 473, 477, 478, 479], "tishler": [459, 461, 479], "risco": [459, 466], "dietmar": 459, "schwertberg": 459, "unixwar": 459, "billi": 459, "alli": 459, "graem": 459, "goodger": [459, 460, 462], "grave": 459, "hudson": [459, 460, 461, 463, 479], "irregular": 460, "dark": [460, 479], "safeguard": 460, "esoter": [460, 463], "lockablefil": 460, "posixfil": [460, 464], "__methods__": [460, 466, 479], "inaccur": [460, 462, 479], "defstat": 460, "eiffel": 460, "postcondit": 460, "eiffelmethod": 460, "pre_f": 460, "post_f": 460, "zodb": 460, "get_par": 460, "__coerce__": [460, 465], "get_siz": 460, "set_siz": 460, "new_attr": 460, "whet": 460, "appetit": 460, "corp": 460, "0x8116870": 460, "crew": [460, 461, 463], "0x8117f90": [460, 461], "www2": [460, 461], "cs": [460, 461], "arizona": [460, 461], "ipd266": [460, 461], "harbor": [460, 461], "magnus": [460, 461], "hetland": [460, 461], "1234567890123": 460, "1234567890123l": 460, "18446744073709551616l": 460, "herald": 460, "erupt": 460, "storm": 460, "sarcast": 460, "110000": 460, "261": [460, 479], "x9c": 460, "xc9": 460, "xc1": 460, "nand": 460, "666": 460, "5r92": 460, "qe": 460, "ee8v4": 460, "v8": 460, "f5d": 460, "6yd86yt": 460, "f5r": 460, "f5r8f": 460, "s92p": 460, "86yd": 460, "5t": 460, "71i": 460, "5x": [460, 470, 475, 476, 479], "sheesh": 460, "furrfu": 460, "__unicode__": [460, 465], "headlin": 460, "oreillynet": 460, "meerkat": 460, "getchannel": 460, "freshmeat": 460, "4549": 460, "3dgamer": 460, "52719": 460, "xsl": 460, "html2fo": 460, "2104": 460, "memberst_mtim": 460, "mathewson": 460, "ichiro": 460, "itojun": 460, "hagino": 460, "bigcharset": 460, "2487": 460, "pier": [460, 461], "lauder": [460, 461], "anthoni": [460, 462, 463, 476, 477, 478, 479], "baxter": [460, 462, 463], "michel": [460, 461, 472, 473, 474, 475, 476, 477, 478, 479], "pelleti": 460, "rfc2822": [460, 479], "grunt": 460, "generator": 460, "itamar": [460, 470], "shtull": 460, "traur": 460, "implementor": [460, 465, 475], "py_tpflags_gc": 460, "pytpflags_have_gc": 460, "pyobject_gc_init": 460, "pyobject_gc_fini": 460, "pygc_head_s": 460, "pyobject_as_gc": 460, "pyobject_from_gc": 460, "untyp": 460, "vsprintf": 460, "overrun": [460, 465, 479], "527": 460, "683": [460, 470, 479], "82": 460, "blown": 460, "osa": 460, "quicktim": 460, "cleanfutur": 460, "gpled": 460, "ftpmirror": 460, "romberg": 460, "pyrange_new": [460, 463], "sneakili": 460, "rhythm": 460, "borland": [460, 479], "stephen": [460, 469, 479], "hansen": [460, 478, 479], "generous": 460, "installermast": 460, "0a": 460, "stolk": 460, "bremmer": 460, "keith": 460, "brigg": 460, "carel": [460, 479], "felling": 460, "mclay": 460, "donnel": 460, "joona": 460, "paalasma": 460, "jen": [460, 479], "reinhardt": 460, "welbourn": 460, "polish": [461, 479], "berkeleydb": [461, 464, 465, 479], "immutableset": [461, 462], "union_upd": 461, "ungain": 461, "martelli": [461, 464], "suzuki": 461, "hisao": 461, "nyman": 461, "inadequ": 461, "hodgson": 461, "irrit": 461, "__builtin__": [461, 466, 467], "walter": [461, 462, 463, 464, 477], "rwald": [461, 462, 463, 477], "heart": [461, 470], "quixot": 461, "richard": [461, 463, 464, 472, 473, 479], "toss": 461, "sundri": 461, "kevin": [461, 462, 464, 465, 470, 471, 479], "alti": 461, "cole": [461, 462, 471, 479], "mcnamara": [461, 463], "cliff": [461, 465], "cpickl": [461, 463, 465, 466], "fanciest": 461, "__safe_for_unpickling__": 461, "rip": 461, "dcba": 461, "innocu": 461, "welter": 461, "fakeseq": 461, "calc_item": 461, "underw": [461, 462, 463, 464], "dylan": 461, "simionato": 461, "029035": 461, "pedroni": [461, 463], "setcheckinterv": [461, 478, 479], "getcheckinterv": [461, 478, 479], "_socket": [461, 479], "u4000": 461, "u4001abc": 461, "simon": [461, 479], "brun": 461, "0045": 461, "goofi": 461, "0goofi": 461, "oren": [461, 472, 476, 479], "tirosh": [461, 472], "christoph": [461, 474, 479], "craig": [461, 479], "set_lineno": 461, "idiosyncrasi": [461, 479], "hotspot": 461, "pyston": [461, 462, 463, 466, 479], "orendorff": [461, 464], "bsddb185": 461, "db2pickl": 461, "pickle2db": 461, "bsddb3": [461, 466], "sampmodul": 461, "samp": 461, "cpp": [461, 479], "robert": [461, 463, 464, 465, 474, 476, 479], "weber": [461, 474, 479], "strand": [461, 462], "lg": 461, "xlinux": 461, "dad": 461, "priorityqu": 461, "connor": [461, 473, 475, 479], "idlefork": 461, "tino": 461, "deg": 461, "loadavg": 461, "geert": [461, 474, 479], "otkidach": 461, "stat_float_tim": [461, 463, 472, 476, 479], "1034791200": 461, "6335014": 461, "fitzroy": 461, "dale": [461, 472], "tu": 461, "sn": 461, "nos": 461, "3407": 461, "3805": 461, "1505": 461, "7023": 461, "2401": 461, "2267": 461, "9733": 461, "8083": 461, "9195": 461, "rexec": 461, "bastion": 461, "rotor": [461, 462], "gilfix": 461, "collabor": 461, "exc_clear": [461, 466], "gust": [461, 462, 463, 464, 465, 471, 472], "whit": 461, "defi": 461, "auguri": 461, "sparrow": 461, "tis": [461, 462, 479], "companion": 461, "dummy_thread": [461, 476, 478, 479], "timer1": 461, "timer2": 461, "laptop": 461, "36831796169281006": 461, "37441694736480713": 461, "35304892063140869": 461, "17574405670166016": 461, "18193507194519043": 461, "17565798759460449": 461, "031107": 461, "tcl_obj": [461, 479], "wantobject": [461, 479], "tkapp": [461, 479], "dictmixin": 461, "seqdict": 461, "lookalik": 461, "keylist": [461, 462], "valuelist": 461, "quinlan": [461, 462, 465, 471], "3491": [461, 479], "30t21": 461, "994956": 461, "827738": 461, "optik": [461, 462, 463], "0x400cad4c": 461, "0x400cad2c": 461, "iinput": 461, "llength": 461, "undistinguish": 461, "pymemcompat": 461, "libpython2": 461, "ondrej": 461, "palkovski": 461, "dl_export": 461, "dl_import": 461, "pyapi_data": [461, 479], "pyarg_noarg": 461, "pystring_new": 461, "test_bufio": 461, "emx": 461, "macintyr": [461, 463], "weaklink": [461, 478, 479], "atheo": [461, 479], "hurd": [461, 479], "openvm": 461, "mist": 461, "nifti": 461, "richi": 461, "hindl": 461, "0xffffffff": [461, 475, 479], "0xffffffffl": 461, "get_distutil_opt": 461, "bauer": 461, "chermsid": 461, "fraser": 461, "kelli": [461, 472, 473], "gerber": 461, "chris": [461, 463, 464, 472, 474, 475, 479], "lambert": [461, 473], "lalo": 461, "netzer": 461, "nowak": 461, "francesco": 461, "ricciardi": 461, "suzi": 461, "radic": 462, "481": 462, "arbcd": 462, "wxi": 462, "unif": 462, "8589934592": 462, "svensson": 462, "get_all_link": 462, "jiwon": [462, 472], "seo": [462, 472], "hye": [462, 463], "shik": [462, 463], "untrain": 462, "deco": 462, "0x402ef0d4": 462, "require_int": 462, "_deco": 462, "bend": 462, "func_nam": [462, 466], "smith": [462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "979728": 462, "russel": 462, "pythondecoratorlibrari": 462, "dpkg": 462, "deb": 462, "unawar": 462, "0001100110011": 462, "inaccuraci": [462, 465], "1000000000000001": [462, 467], "magnifi": 462, "dodg": 462, "12f": 462, "100000000000": 462, "7956": 462, "64739884393063583815028902": 462, "1275": 462, "9184": 462, "123456789012": 462, "351364": 462, "18288201344": 462, "18288201344j": 462, "1828820134592177245001": 462, "facundo": [462, 464], "batista": [462, 464], "lahey": 462, "speleotrov": 462, "cowlishaw": 462, "rexx": 462, "resolve_dotted_attribut": 462, "dima": 462, "dorfman": 462, "gtk": [462, 464], "pyos_ascii_strtod": [462, 465, 467], "pyos_ascii_atof": [462, 465, 467], "pyos_ascii_formatd": 462, "buf_len": 462, "glib": 462, "relicens": 462, "donat": 462, "rei": 462, "carneiro": 462, "colormap": 462, "overflowwarn": 462, "method_descriptor": 462, "armin": [462, 463, 464, 465, 467, 471, 472, 473, 479], "rigo": [462, 463, 464, 479], "vasiliev": 462, "cjkcodec": [462, 479], "prc": 462, "roc": 462, "roman8": [462, 479], "iso_8859": 462, "pctp": 462, "belmont": [462, 468, 469, 479], "rg": 462, "lehmann": 462, "gass": 462, "tenfold": 462, "eland": 462, "yves": [462, 469], "dionn": 462, "arnaud": [462, 472], "mazin": 462, "key_val": 462, "0x402c2080": 462, "0x402c2090": 462, "bookmark": 462, "rgen": [462, 479], "erhard": 462, "extractor": 462, "cryptoapi": 462, "trevor": 462, "perrin": [462, 468], "beni": 462, "cherniavski": 462, "raynor": 462, "hector": 462, "urtubia": 462, "30000": 462, "sidestep": 462, "unlucki": [462, 479], "mpz": 462, "jar": 462, "loper": 462, "ambiti": 462, "objn": 462, "py_is_nan": 462, "tsc": 462, "pentium": 462, "misnam": [462, 471], "tracebackobject": 462, "pytracebackobject": 462, "dircach": [462, 464], "koray": 462, "dyck": 462, "hurt": 462, "hamish": 462, "lawson": 462, "sadruddin": 462, "rejeb": 462, "356": 463, "458": 463, "true_valu": 463, "false_valu": 463, "voter": 463, "true_v": 463, "false_v": 463, "rarer": 463, "pygtk": 463, "open_item": 463, "open_func": 463, "item_path": 463, "popup_menu": 463, "pypackag": 463, "numarray": 463, "oldpackag": 463, "gpg": 463, "unclean": [463, 479], "holger": 463, "krekel": 463, "tidier": 463, "pylib": 463, "pycheck": 463, "exception1": 463, "exception2": 463, "hackish": 463, "trivia": 463, "phillip": [463, 464, 467, 471, 475, 479], "ebi": [463, 464, 467, 471], "288": 463, "20160321211320": 463, "sidh": 463, "000178": 463, "sugalski": 463, "db_connect": [463, 464], "databaseconnect": [463, 464], "flawless": [463, 464], "db_transact": [463, 464], "mgr1": [463, 464], "mgr2": [463, 464], "version2": 463, "whatsnew": [463, 479], "lp64_wp": 463, "travi": [463, 464, 465, 479], "oliph": [463, 464, 465], "zerodict": 463, "is_image_fil": 463, "lynn": 463, "bethard": [463, 465, 471, 474, 479], "puzzl": 463, "newbi": [463, 465], "needforspe": 463, "sprint": [463, 464], "reykjavik": 463, "ewt": 463, "llc": 463, "ccp": 463, "mcintyr": [463, 464], "ippolito": [463, 464, 465, 467], "diederich": [463, 467], "immisch": 463, "nel": 463, "mezzo": 463, "cammin": 463, "nostra": 463, "vita": 463, "ritrovai": 463, "una": 463, "selva": 463, "oscura": 463, "che": 463, "diritta": 463, "smarrita": 463, "init_lett": 463, "hotshot": 463, "josh": [463, 464, 474, 475, 477, 478, 479], "spoerri": 463, "bjorn": [463, 479], "tillenius": 463, "sweep": 463, "gregori": [463, 464, 465, 467, 468, 469, 470, 473, 475, 476, 477, 479], "schroeder": [463, 479], "antti": 463, "louko": 463, "diego": [463, 477], "petten": 463, "goir": 463, "pybench": [463, 479], "regsub": 463, "statcach": 463, "tzpars": 463, "whrandom": 463, "kiendl": 463, "biondi": 463, "netlink": 463, "linuxjourn": 463, "7356": 463, "group_mask": 463, "getfamili": 463, "getproto": 463, "ih3": 463, "187": 463, "blai": 463, "subvers": [463, 464, 465, 471, 476, 479], "45313": 463, "45315": 463, "45355": 463, "45356m": 463, "iterkeyref": 463, "itervalueref": 463, "oleg": [463, 470, 479], "broytmann": 463, "oussoren": [463, 464, 465, 471, 473, 478], "atle": [463, 479], "heller": [463, 464, 465], "dl": [463, 464, 479], "strfri": 463, "71828": 463, "1783957616": 463, "20180410025338": 463, "theller": 463, "elementpath": [463, 476], "20201124024954": 463, "effbot": [463, 465], "textnod": 463, "rss10": 463, "svg": 463, "10px": 463, "320px": 463, "tran": 463, "qti": 463, "rhat": 463, "msoft": 463, "140000000000001": 463, "wsgi_app": 463, "20160331090247": 463, "supervis": 463, "market": 463, "for_loop": 463, "339": 463, "pyparser_astfromstr": [463, 468, 479], "pyparser_astfromfil": [463, 468, 479], "pyast_compil": [463, 468, 479], "ehresman": [463, 479], "kurt": 463, "kaiser": [463, 479], "evan": [463, 478, 479], "256k": 463, "py_loc": 463, "py_local_inlin": 463, "py_local_aggress": 463, "pyerr_warn": 463, "lll": [463, 479], "2573": 463, "pymem_": 463, "_malloc": 463, "_free": 463, "ralf": [463, 464], "gross": [463, 479], "kunstlev": 463, "iain": 463, "pryor": 463, "rovner": 463, "weikart": 463, "361": 464, "redesign": [464, 465, 473], "259": [464, 479], "py3kwarn": 464, "py_py3kwarningflag": 464, "3xxx": 464, "3100": 464, "committe": 464, "jira": 464, "launchpad": 464, "trac": 464, "upfront": 464, "stellenbosch": 464, "africa": 464, "1980s": 464, "1990s": [464, 479], "ream": 464, "toolchain": [464, 475, 479], "dozen": [464, 471, 479], "python26": 464, "39916800": 464, "51090942171709440000": 464, "8222838654177922817725562880000000": 464, "33452526613163807108170062053440751665152000000000": 464, "mgr": 464, "15511187532873822802242430164693032110632597200169861120000": 464, "jess": [464, 467, 474, 475, 476, 479], "noller": [464, 467], "oudkerk": [464, 472, 473, 479], "last_login": 464, "npython": 464, "61261m": 464, "5367": 464, "mp4": 464, "banquet": 464, "invoic": 464, "750000e": 464, "6564": 464, "talin": 464, "u751f": 464, "u3080": 464, "u304": 464, "u3000": 464, "u3054": 464, "u3081": 464, "u305f": 464, "u307": 464, "pystringobject": 464, "u21ef": 464, "u3244": 464, "x87": 464, "x89": 464, "u31ef": 464, "ttys": 464, "cstringio": [464, 466], "stutzbach": [464, 465, 471], "verdon": 464, "doerwald": 464, "lownd": 464, "pybuf_lock": 464, "carl": [464, 465, 470, 471, 472, 477, 478, 479], "bank": 464, "vagu": 464, "printabletyp": 464, "drawabl": 464, "draw_doubl": 464, "aranguren": 464, "0o21": 464, "0b101111": 464, "052": 464, "173": 464, "0b10101101": 464, "1101": 464, "0b1101": 464, "patrick": [464, 468, 479], "maupin": 464, "undergo": 464, "yasskin": [464, 465, 471], "guil": 464, "r5rs": 464, "66666666666666663": 464, "40000000000000002": 464, "7074029114692207l": 464, "2251799813685248l": 464, "6004799503160661l": 464, "18014398509481984l": 464, "andi": [464, 467, 479], "chu": [464, 467], "1739468": [464, 467, 474], "2196": 464, "ud": 464, "1686487": 464, "amauri": [464, 465, 467, 471, 479], "forgeot": [464, 465, 467, 471, 479], "3473": 464, "2719": 464, "abc123": 464, "cdf246": 464, "1635": 464, "1640": 464, "3008": 464, "e000000000000p": 464, "5555555555555p": 464, "niceti": 464, "dickinson": [464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "2235": 464, "austin": 464, "1537": 464, "1473257": 464, "1444529": 464, "cplx": 464, "1491866": 464, "bengt": 464, "richter": 464, "1193128": 464, "1591665": 464, "im_self": 464, "1631171": 464, "jacob": [464, 469, 470, 479], "1700288": 464, "py_tpflags_have_version_tag": [464, 479], "1878": 464, "pitrou": [464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "1819": 464, "jvm": 464, "josiah": [464, 472], "carlson": [464, 472], "1736190": 464, "jes": [464, 465, 472, 475, 476, 479], "cea": [464, 465, 472, 475, 476, 479], "avi": [464, 465, 472, 475, 476, 479], "jcea": [464, 465, 466], "programacion": [464, 466], "dbshelv": 464, "barn": [464, 476, 479], "fiori": 464, "nubi": 464, "1817": 464, "600362": 464, "1381": 464, "var_typ": 464, "amplitud": 464, "dq": 464, "arvin": 464, "schnell": 464, "1638033": 464, "fabian": 464, "kreutz": 464, "insert_mod": 464, "1158": 464, "7182818": 464, "9999999895305022877376682436": 464, "1221598": 464, "1739906": 464, "1001604": 464, "iter1": 464, "iter2": 464, "getmoduleinfo": [464, 475, 479], "getarg": [464, 479], "izip_longest": 464, "2n": [464, 479], "2138": 464, "brouwer": 464, "2819": 464, "711019": 464, "lenton": 464, "wine": [464, 479], "petrosyan": 464, "inst_nam": 464, "_helper": 464, "levinson": 464, "1663329": 464, "horcicka": 464, "1181": 464, "1273829": 464, "1115886": 464, "barran": 464, "1339796": 464, "957650": 464, "1393667": 464, "1106316": 464, "exception_hierarchi": 464, "2439": 464, "achim": 464, "gaedk": 464, "1137": 464, "shawn": 464, "ligocki": 464, "1727780": 464, "wladmir": 464, "laan": 464, "1681432": 464, "hoyt": [464, 474, 479], "schmitt": 464, "846388": 464, "3487": 464, "lorenz": [464, 479], "2250": 464, "1861": 464, "pollobj": 464, "1657": 464, "ziad": [464, 465, 471, 474, 479], "2663": 464, "woken": 464, "1583": 464, "guilherm": [464, 465, 467, 473, 475, 476, 479], "polo": [464, 465, 467, 473, 475, 476, 479], "2240": 464, "2033": 464, "leif": 464, "hedstrom": 464, "957003": 464, "3207": 464, "fenner": 464, "829951": 464, "alberto": [464, 472], "bertog": 464, "1646": 464, "pomran": 464, "pedro": 464, "werneck": 464, "742598": 464, "1193577": 464, "remahl": 464, "1534": 464, "schuppeni": 464, "2898": 464, "1648": 464, "damien": [464, 473], "miller": [464, 473], "1537850": 464, "dustin": [464, 479], "mitchel": [464, 469, 479], "test_support": [464, 466], "transientresourc": 464, "sf": 464, "3781": 464, "wrec": 464, "dwayn": 464, "bailey": 464, "1581073": 464, "2871": 464, "erik": [464, 469, 470, 476, 479], "demain": 464, "1533909": 464, "2906": 464, "gregor": 464, "lingl": 464, "1513695": 464, "ftpwrapper": [464, 479], "3811": 464, "1599845": 464, "_send_traceback_head": 464, "1330538": 464, "riku": 464, "lindblad": 464, "2985": 464, "251": 464, "sysmodul": 464, "467924": 464, "horler": 464, "1775025": 464, "alexey": [464, 473, 474, 479], "borzenkov": 464, "1734346": 464, "ronach": [464, 465, 467, 471, 472, 473], "abcdefghijklm": 464, "stararg": [464, 479], "iterable1": 464, "__hex__": [464, 466], "__oct__": [464, 466], "in_json": 464, "simplejson": [464, 465], "data_struct": 464, "lastaccess": 464, "plist_str": 464, "writeplisttostr": 464, "new_struct": 464, "readplistfromstr": 464, "writeplist": [464, 473], "readplist": [464, 473, 476, 479], "1649190": 464, "outset": 464, "1798": 464, "janssen": 464, "bgenloc": 464, "buildtool": 464, "bundlebuild": [464, 479], "fpformat": 464, "gensuitemodul": 464, "imageop": 464, "imgfil": 464, "mhlib": 464, "mimetool": 464, "multifil": 464, "toaiff": 464, "gopherlib": [464, 466], "mimewrit": 464, "mimifi": 464, "rgbimg": 464, "duncan": 464, "grisbi": 464, "pyfile_incusecount": 464, "pyfile_decusecount": 464, "1675423": 464, "1629": 464, "1530959": 464, "free_list": [464, 479], "numfre": 464, "_maxfreelist": 464, "patchcheck": [464, 479], "nt4": 464, "sp4": 464, "1753245": 464, "flori": 464, "bruynoogh": 464, "2125": 464, "macf": 464, "macostool": 464, "1490190": 464, "_builtinsuit": 464, "aepack": 464, "aetool": 464, "aetyp": 464, "applesingl": 464, "appletrawmain": 464, "appletrunn": 464, "argvemul": 464, "audio_mac": 464, "autogil": 464, "carbon": [464, 471], "cfmfile": 464, "codewarrior": 464, "colorpick": 464, "easydialog": 464, "findertool": 464, "icglu": 464, "icopen": 464, "macerror": 464, "macresourc": 464, "miniaefram": 464, "nav": [464, 479], "osaterminolog": 464, "pimp": 464, "pixmapwrapp": 464, "stdsuit": 464, "systemev": 464, "terminalcommand": 464, "cddb": 464, "cdplayer": 464, "fl": 464, "flp": 464, "glws": 464, "gl": 464, "panelpars": 464, "readcd": 464, "sv": 464, "torgb": 464, "videoread": 464, "1683368": 464, "conversionsyntax": 464, "1706815": 464, "dict1": 464, "dict2": 464, "ralph": 464, "corderoy": 464, "lambach": 464, "michlmayr": 464, "warner": 464, "373": 465, "7319": 465, "reenabl": 465, "qwarn": 465, "744": 465, "073": [465, 479], "551": 465, "616": [465, 478, 479], "is_verbos": 465, "bore": 465, "1mb": 465, "configdict": 465, "netlog": 465, "netlogg": 465, "vk": 465, "revamp": [465, 471], "vassalotti": [465, 467, 471, 473, 479], "0x37f850": 465, "0x37f080": 465, "122": [465, 475], "mb": [465, 479], "2335": 465, "aaa": 465, "aaaaa": 465, "2333": 465, "codereview": 465, "appspot": [465, 467, 471], "53094": [465, 467, 471], "icc": [465, 467, 479], "suncc": 465, "7117": 465, "295147905179352891391": 465, "9514790517935283e": 465, "65535l": 465, "9514790517935289e": 465, "3166": 465, "1811": 465, "meador": [465, 472, 479], "5211": 465, "5237": [465, 467], "1588": 465, "7988": 465, "3382": 465, "7994": [465, 473], "124": [465, 467, 471, 473], "johansson": [465, 467], "victor": [465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "stinner": [465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "3439": [465, 467], "7902": 465, "1583863": 465, "4759": 465, "5982": 465, "7604": 465, "belchenko": 465, "1616979": [465, 471], "8016": 465, "kaliszewski": 465, "4764": 465, "5677": 465, "lingard": 465, "7362": 465, "8268": 465, "7140": 465, "curtin": [465, 471, 472, 473, 476], "survivor": 465, "4074": 465, "4688": [465, 467], "long_info": 465, "4258": [465, 467, 477], "5260": 465, "5512": 465, "1087418": 465, "5176": 465, "4715": 465, "gawain": [465, 471], "bolton": [465, 471], "6713": [465, 471], "florent": [465, 471], "xicluna": [465, 471], "7462": [465, 471], "7622": [465, 471], "mcguir": [465, 467], "5084": [465, 467], "5670": 465, "maru": 465, "senthil": [465, 468, 471, 473, 474, 475, 476, 477, 478, 479], "kumaran": [465, 468, 471, 473, 474, 475, 476, 477, 478, 479], "5142": 465, "7703": 465, "2devel9": 465, "8156": 465, "hagen": [465, 479], "rstenau": [465, 479], "3860": 465, "1696199": [465, 467], "field1": 465, "field2": 465, "_2": [465, 467], "1818": [465, 467], "8729": 465, "kindahl": 465, "7005": 465, "3924": 465, "1515": 465, "4606": 465, "klose": [465, 472, 475], "8142": 465, "5788": 465, "strive": 465, "4796": 465, "2531": [465, 471], "8257": [465, 471], "6595": 465, "jos": [465, 479], "conti": 465, "7633": 465, "6857": 465, "7279": 465, "anatoli": [465, 479], "techtonik": [465, 479], "7585": 465, "8688": 465, "lennart": [465, 479], "regebro": [465, 479], "7490": 465, "murray": [465, 471, 473, 474, 475, 479], "1368247": 465, "5812": 465, "8294": [465, 471], "oversight": [465, 472, 474, 476, 479], "giampaolo": [465, 470, 471, 472, 474, 476, 477, 479], "rodola": [465, 470, 471, 474, 476, 479], "2054": 465, "mouzo": 465, "6845": 465, "5479": 465, "nir": [465, 471, 472, 476, 479], "7471": [465, 471], "jacqu": 465, "frechet": 465, "4272": 465, "tadek": 465, "pietraszek": 465, "2846": [465, 471], "chenet": [465, 471], "7418": [465, 471], "kristj": [465, 471, 473], "valur": [465, 471, 473], "nsson": [465, 471, 473], "4879": 465, "eldon": 465, "ziegler": 465, "derek": [465, 467], "morr": [465, 467], "1655": [465, 467], "_pyio": [465, 467, 470, 479], "4991": 465, "chambon": 465, "6939": 465, "5032": 465, "4816": 465, "4136": [465, 467], "5381": 465, "1607951": 465, "6896": 465, "nirina": 465, "raseliarison": 465, "3366": 465, "lekma": 465, "5585": 465, "cazabon": 465, "6963": 465, "1664": [465, 467], "6508": 465, "calderon": [465, 472], "7333": 465, "zsolt": [465, 479], "cserna": [465, 479], "7242": 465, "matt": [465, 473, 474, 479], "giuca": 465, "5827": 465, "3426": [465, 479], "laban": [465, 467], "4739": [465, 467], "6816": 465, "3002": 465, "francoi": 465, "natali": [465, 472, 473, 474], "8354": 465, "6693": [465, 471], "8104": 465, "nagl": [465, 479], "disable_nagle_algorithm": 465, "6192": 465, "6267": 465, "7133": 465, "ssl_mode_auto_retri": 465, "8222": 465, "8322": [465, 471], "beda": 465, "kosata": 465, "8484": [465, 471], "8321": [465, 471], "bbhhiillqq": 465, "1523": 465, "8300": 465, "disk0s2": 465, "52g": 465, "49g": 465, "0g": [465, 479], "1068268": 465, "8451": 465, "4285": [465, 467], "7766": 465, "unnot": 465, "7357": 465, "lesher": [465, 479], "1674032": 465, "unihan": 465, "ander": [465, 468, 476, 479], "chrigstr": 465, "1571184": 465, "8024": 465, "2987": [465, 471], "1080": 465, "200c": 465, "417a": 465, "ampersand": 465, "stylesheet": [465, 479], "style1": 465, "muller": 465, "2746": 465, "encode_threshold": 465, "5511": 465, "kuba": 465, "wieczorek": 465, "4710": 465, "7610": [465, 471], "gabriel": [465, 469, 479], "genellina": 465, "4756": 465, "6003": 465, "anydbm": [465, 466], "file_util": [465, 479], "distutils2": 465, "tck": 465, "tcl8": 465, "tkcmd": 465, "ttk_intro": 465, "screenshot": 465, "2983": [465, 467], "franklin": 465, "walzer": [465, 471, 479], "2618": 465, "unittest2": 465, "nose": 465, "6001": 465, "impati": 465, "dyer": 465, "8074": 465, "1034053": 465, "5663": 465, "4444": 465, "5679": 465, "2578": 465, "7031": 465, "assertnotregexpmatch": [465, 469, 470], "8038": 465, "assertitemsequ": 465, "assertdictcontainssubset": [465, 467, 470, 471, 479], "roddi": 465, "6866": 465, "fern": 465, "ndez": 465, "3379": 465, "5728": 465, "awkward": [465, 477], "20210619163128": 465, "shtml": 465, "getiter": [465, 471, 477, 478, 479], "childless": 465, "20200703234532": 465, "6472": [465, 471], "bt": [465, 479], "8032": 465, "3632": 465, "4293": 465, "7033": [465, 471], "horsen": 465, "7528": 465, "7767": [465, 471], "trojan": 465, "hors": 465, "5753": [465, 471], "py_isalnum": 465, "py_isalpha": 465, "py_isdigit": 465, "py_islow": 465, "py_isspac": 465, "py_isupp": 465, "py_isxdigit": 465, "py_tolow": 465, "py_toupp": 465, "5793": 465, "pyeval_callobject": [465, 471, 478, 479], "8276": [465, 471], "pyformat_fromstr": 465, "pyformat_fromstringv": 465, "7228": 465, "1590864": 465, "_shutdown": [465, 479], "1722344": 465, "t_string_inplac": 465, "3102": [465, 466], "arfrev": [465, 471, 479], "freht": [465, 471, 479], "taifersar": [465, 471, 479], "arahesi": [465, 471, 479], "7609": 465, "2422": [465, 471], "6491": 465, "x87_double_round": 465, "2937": 465, "ldcxxshare": 465, "1222585": 465, "clinton": 465, "roy": [465, 479], "3585": 465, "6094": 465, "ucnhash_capi": [465, 468, 479], "pycobject": [465, 467, 471], "vtabl": 465, "pycobject_asvoidptr": 465, "cobject": 465, "5630": [465, 467], "crtassem": 465, "crt_assembly_vers": 465, "vc_assembly_publickeytoken": 465, "libraries_assembly_name_prefix": 465, "cournapeau": 465, "4365": 465, "7347": 465, "_beginthreadex": 465, "3582": 465, "miki": [465, 471], "tebeka": [465, 471], "1220212": 465, "hirokazu": [465, 472, 479], "yamamoto": [465, 472, 476, 479], "5913": 465, "mimelib": 465, "4969": 465, "4865": 465, "28440": [465, 479], "so_setfib": 465, "kyle": [465, 468, 475, 476, 477, 478, 479], "vanderbeek": 465, "8235": 465, "iobench": 465, "ccbench": 465, "throughput": [465, 476, 479], "5464": 465, "ziga": 465, "seilnacht": 465, "1180193": 465, "randse": 465, "6152": [465, 474], "7312": 465, "piotr": 465, "arowski": 465, "8233": 465, "1533": 465, "5920": 465, "6101": 465, "7853": 465, "leander": 465, "anand": [465, 471], "pillai": [465, 471], "7150": 465, "7348": 465, "5080": 465, "exempt": 465, "pythonshowrefcount": 465, "31733": 465, "count_alloc": [465, 475, 478, 479], "pythonshowalloccount": 465, "31692": 465, "gaynor": [465, 468, 474, 479], "21306": 465, "1g": [465, 479], "zachari": [465, 473, 474, 476, 479], "ware": [465, 473, 474, 476, 479], "21462": 465, "21304": 465, "21671": 465, "0224": 465, "tls1": 465, "reid": [465, 471], "21308": 465, "21305": 465, "21307": 465, "stufft": [465, 473], "deili": [465, 471, 473, 478], "pythonhttpsverifi": 465, "_https_verify_certif": 465, "autotool": [465, 474, 475], "pregener": [465, 474, 475, 479], "23404": [465, 474, 475, 479], "philip": [465, 470, 471, 475, 479], "jenvey": [465, 471], "ryan": [465, 472, 473, 475, 476, 479], "lovett": 465, "hugh": 465, "secker": 465, "walker": 465, "cruft": 466, "wealth": 466, "softspac": [466, 479], "retrain": 466, "corollari": 466, "incompar": 466, "0720": 466, "0o720": 466, "loud": 466, "unixi": 466, "3138": 466, "some_sequ": 466, "274": 466, "vindic": 466, "3109": 466, "crutch": 466, "item1": 466, "item2": 466, "3113": 466, "b_c": 466, "3108": 466, "beo": 466, "instabl": 466, "disobey": 466, "copy_reg": 466, "markupbas": 466, "_markupbas": [466, 468, 479], "dbhash": 466, "htmlentitydef": 466, "basehttpserv": 466, "cgihttpserv": [466, 479], "simplehttpserv": [466, 479], "acquire_lock": [466, 470], "release_lock": [466, 470], "jumpahead": 466, "tmpnam": 466, "tempnam": 466, "tmpfile": 466, "scoop": 466, "secondaryexcept": 466, "primary_except": 466, "__getslice__": 466, "__setslice__": 466, "__delslice__": 466, "3114": 466, "func_x": 466, "__x__": 466, "wit": [466, 479], "func_cod": 466, "func_default": 466, "func_dict": 466, "func_doc": 466, "func_glob": 466, "3111": 466, "tru64": 466, "3123": 466, "pynumber_coerc": 466, "pynumber_coerceex": 466, "pymember_get": 466, "pymember_set": 466, "nb_nonzero": 466, "with_cycle_gc": 466, "contort": 466, "8901234": 467, "12j": 467, "600000": 467, "901": 467, "120000j": 467, "underway": 467, "camelot": 467, "5675": [467, 471], "mattia": [467, 471], "ndstr": [467, 471], "4707": 467, "199999999999ap": 467, "1580": 467, "dickinso": 467, "grew": [467, 471], "namesak": 467, "lv": 467, "ov": 467, "oe": 467, "_0": 467, "query_field": 467, "userqueri": 467, "sale": [467, 471], "4384": 467, "vajda": 467, "4195": 467, "4201": 467, "5228": 467, "testgizmo": 467, "test_gizmo_on_window": 467, "test_gimzo_without_required_librari": 467, "builtout": 467, "test_division_by_zero": 467, "confound": 467, "remap": 467, "c__builtin__": 467, "nset": 467, "np0": 467, "lp1": 467, "nl1l": 467, "nal2l": 467, "nal3l": 467, "natp2": 467, "nrp3": 467, "6137": 467, "sunpro": 467, "4753": 467, "4868": 467, "roger": [467, 478, 479], "serwi": [467, 479], "5150": [467, 471], "lisandro": 467, "dalcrin": 467, "5175": 467, "pynumber_int": 467, "4910": 467, "5914": 467, "7182818284590451": 467, "718281828459045": 467, "salgado": [468, 469, 474, 477, 478, 479], "635": 468, "12782": 468, "632": [468, 470, 479], "wstr": [468, 470], "624": [468, 469, 479], "ctxmanag": 468, "ctxmanager1": 468, "ctxmanager2": 468, "example1": 468, "example2": 468, "ctxmanager3": 468, "example3": 468, "lysandro": [468, 470, 478, 479], "nikolaou": [468, 470, 478, 479], "40334": [468, 478, 479], "some_other_cod": 468, "eol": [468, 479], "42864": [468, 479], "batuhan": [468, 469, 470, 478, 479], "taskaya": [468, 469, 470, 478, 479], "40176": [468, 479], "43914": [468, 479], "rocket": 468, "event_horizon": 468, "42997": [468, 479], "43017": [468, 479], "43822": [468, 479], "build_dyson_spher": 468, "notenoughscienceerror": 468, "notenoughresourceserror": 468, "43149": [468, 479], "43823": [468, 479], "44305": [468, 479], "43797": [468, 479], "all_black_hol": 468, "revel": 468, "41064": [468, 479], "lel": 468, "namedtoplo": 468, "38530": [468, 479], "schwarzschild_black_hol": 468, "schwarschild_black_hol": 468, "pattern_1": 468, "action_1": 468, "pattern_2": 468, "action_2": 468, "pattern_3": 468, "action_3": 468, "action_wildcard": 468, "scala": 468, "elixir": 468, "imper": 468, "test_vari": 468, "maggi": [468, 477], "moss": 468, "prado": 468, "41428": [468, 479], "yurii": [468, 469, 478, 479], "karaba": [468, 469, 478, 479], "44490": [468, 479], "jin": [468, 469, 470, 475, 476, 477, 478, 479], "41559": [468, 479], "jell": [468, 469, 470, 475, 476, 479], "zijlstra": [468, 469, 470, 475, 476, 479], "43783": 468, "mendoza": [468, 469], "unannot": 468, "strcach": 468, "log_prefix": 468, "mikhail": 468, "golubev": 468, "41923": [468, 479], "43766": [468, 479], "traut": [468, 469, 470, 479], "nikla": [468, 469, 479], "fieka": [468, 479], "29882": [468, 479], "sweeney": [468, 469, 478, 479], "40890": [468, 479], "37999": [468, 479], "shkop": [468, 479], "38302": [468, 479], "shannon": [468, 469, 470, 472, 476, 477, 478, 479], "42990": [468, 479], "joshua": [468, 474, 479], "bronson": [468, 477, 479], "pope": [468, 479], "justin": [468, 472, 479], "wang": [468, 476, 479], "31861": [468, 479], "43682": [468, 479], "42737": [468, 479], "43901": [468, 479], "42725": [468, 479], "43475": [468, 479], "hee": [468, 469, 470, 477, 478, 479], "45000": [468, 479], "nholm": [468, 469, 477], "41332": [468, 479], "9694": [468, 479], "lorentsen": [468, 476, 479], "zackeri": [468, 469, 477, 478, 479], "spytz": [468, 469, 477, 478, 479], "31956": [468, 479], "clearbreakpoint": 468, "irit": [468, 469, 470, 479], "katriel": [468, 469, 470, 479], "24160": [468, 479], "4356": [468, 479], "hai": [468, 469], "shi": [468, 469], "41842": [468, 479], "42195": [468, 478, 479], "joongi": [468, 479], "kim": [468, 479], "41229": [468, 479], "gringauz": 468, "41543": [468, 479], "kintscher": [468, 479], "petter": [468, 477, 479], "jansson": 468, "36982": [468, 479], "39273": [468, 479], "42269": [468, 479], "43532": [468, 479], "42802": [468, 479], "42133": [468, 479], "normalize_encod": [468, 478, 479], "39337": [468, 479], "enum_nam": 468, "ethan": [468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479], "furman": [468, 470, 472, 473, 474, 475, 476, 479], "40066": [468, 479], "41816": [468, 479], "inada": [468, 469, 470, 474, 475, 476, 477, 478, 479], "naoki": [468, 469, 470, 474, 475, 476, 477, 478, 479], "43712": [468, 479], "5758": 468, "44466": [468, 479], "43439": [468, 479], "38144": [468, 479], "43669": [468, 479], "38820": [468, 479], "43880": [468, 479], "40645": [468, 479], "hilton": [468, 469, 470, 478, 479], "43008": [468, 478, 479], "40468": [468, 478, 479], "33962": [468, 478, 479], "tal": [468, 474, 475, 476, 477, 479], "einat": [468, 474, 475, 476, 477, 479], "37903": [468, 479], "37892": [468, 479], "44010": [468, 479], "pyi": [468, 469, 478, 479], "waygood": [468, 469, 470, 478, 479], "45447": [468, 469, 478, 479], "95191": [468, 469, 479], "from_funct": [468, 469, 474, 479], "43817": [468, 479], "38200": [468, 479], "rtos": [468, 479], "peix": [468, 479], "xin": [468, 479], "41440": [468, 479], "eventfd2": 468, "41001": [468, 479], "41625": [468, 479], "43106": [468, 479], "barney": [468, 470, 479], "gale": [468, 470, 479], "43757": 468, "35498": [468, 479], "yaroslav": [468, 479], "pankovych": [468, 479], "21041": [468, 479], "link_to": [468, 469, 477, 479], "39950": [468, 479], "39906": [468, 479], "28468": [468, 479], "sblondon": 468, "42914": [468, 479], "lewi": [468, 479], "gaul": [468, 479], "43080": [468, 479], "schevchenko": [468, 479], "38731": [468, 479], "readline_ex": 468, "avir": [468, 479], "srivastava": [468, 479], "38307": [468, 479], "34204": [468, 479], "tymoteusz": [468, 479], "wo": [468, 479], "ko": [468, 475, 476, 479], "38490": [468, 479], "42413": [468, 479], "mptcp": [468, 479], "rui": 468, "cunha": 468, "43571": [468, 479], "dscp": [468, 479], "ecn": [468, 479], "sauthoff": 468, "44077": [468, 479], "43794": [468, 479], "43788": [468, 479], "43791": [468, 479], "43799": [468, 479], "43920": [468, 479], "43789": [468, 479], "43811": [468, 479], "hynek": [468, 472, 473, 479], "schlawack": [468, 472, 473, 479], "43998": [468, 479], "31870": [468, 479], "42333": [468, 479], "l0x": 468, "40849": [468, 479], "erlend": [468, 469, 470, 479], "aasland": [468, 469, 470, 479], "43762": [468, 479], "23427": [468, 479], "42955": [468, 479], "43356": [468, 479], "mario": [468, 476, 479], "corchero": [468, 476, 479], "42251": [468, 479], "42308": [468, 479], "bussonni": [468, 476, 477, 479], "26389": [468, 479], "bas": 468, "beek": 468, "41810": [468, 479], "42345": [468, 478, 479], "41792": [468, 479], "38908": [468, 479], "sebastian": [468, 469, 479], "rittau": [468, 469], "kit": [468, 479], "yan": [468, 479], "choi": [468, 479], "39385": [468, 479], "goldschmidt": [468, 475, 476, 477, 478, 479], "42967": [468, 475, 476, 477, 478, 479], "jonathan": [468, 472, 474, 477, 479], "gossag": 468, "35018": [468, 479], "42131": [468, 479], "desmond": [468, 479], "cheong": [468, 479], "14678": [468, 479], "41334": [468, 479], "41006": [468, 479], "41718": 468, "yuri": [468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "selivanov": [468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "42093": [468, 479], "42927": [468, 479], "micropython": [468, 479], "38980": [468, 479], "_compress": [468, 479], "decompressread": [468, 479], "09x": 468, "20x": [468, 470], "32x": 468, "11x": 468, "18x": 468, "lin": [468, 469, 479], "41486": [468, 479], "42202": [468, 479], "str1": [468, 479], "str2": [468, 479], "crochemor": 468, "41972": [468, 479], "dino": [468, 475, 478, 479], "viehland": [468, 475, 478, 479], "43452": [468, 479], "jeroen": [468, 475, 477, 478, 479], "demey": [468, 475, 477, 478, 479], "43575": [468, 479], "43287": [468, 479], "41922": [468, 479], "41873": [468, 479], "41870": [468, 479], "43785": [468, 479], "0in": [468, 470], "1or": [468, 470], "0if": [468, 470], "1els": [468, 470], "0x1for": [468, 470], "43833": [468, 479], "concert": [468, 471], "37319": 468, "26131": [468, 479], "zimport": 468, "42134": [468, 479], "43672": [468, 479], "42135": [468, 479], "set_package_wrapp": [468, 469], "set_loader_wrapp": [468, 469], "module_for_load": [468, 469, 473, 479], "impimport": [468, 469, 470, 479], "impload": [468, 469, 470, 479], "43720": [468, 479], "42137": [468, 479], "frozenload": [468, 469], "builtinload": [468, 469], "42136": [468, 479], "optimizedunicod": [468, 469, 470, 479], "42264": [468, 479], "enable_shared_cach": [468, 469, 470, 479], "24464": [468, 479], "87889": 468, "41139": [468, 479], "sslsslcontext": 468, "protocol_sslv2": 468, "rand_pseudo_byt": [468, 470, 472, 479], "pythonthreaddebug": [468, 469, 479], "44584": [468, 479], "41974": [468, 479], "parserbas": [468, 479], "berker": [468, 473, 474, 475, 476, 477, 479], "peksag": [468, 473, 474, 475, 476, 477, 479], "31844": [468, 479], "_pyunicode_name_capi": [468, 479], "42157": [468, 479], "graminit": 468, "pyparser_simpleparsestringflag": [468, 478], "pyparser_simpleparsestringflagsfilenam": [468, 478], "pyparser_simpleparsefileflag": [468, 478], "pynode_compil": [468, 478], "42299": [468, 479], "pymodule_getwarningsmodul": 468, "42599": 468, "37324": [468, 479], "svetlov": [468, 469, 473, 476, 477, 478, 479], "stanley": [468, 475, 476, 477, 478, 479], "42392": [468, 479], "42639": [468, 479], "42393": [468, 479], "_node": [468, 479], "io_modul": 468, "import_importmodul": 468, "source_bytes_object": 468, "source_buf": 468, "wordcod": [468, 475, 479], "36020": [468, 479], "sergey": [468, 469, 478, 479], "fedoseev": [468, 478, 479], "40744": [468, 479], "40810": [468, 479], "xavier": [468, 473, 475, 476, 479], "petazzoni": [468, 479], "27640": [468, 479], "42856": [468, 479], "43103": [468, 479], "tcltk": [468, 469, 471, 478, 479], "manoli": 468, "stamatogiannaki": 468, "42603": [468, 479], "43466": [468, 479], "petr": [468, 469, 470, 474, 476, 477, 478, 479], "viktorin": [468, 469, 470, 474, 477, 478, 479], "43795": [468, 479], "40792": [468, 479], "30155": [468, 479], "matveev": [468, 470, 477, 479], "41756": [468, 479], "41784": [468, 479], "1635741": [468, 479], "42262": [468, 479], "42423": [468, 479], "41832": [468, 479], "41073": [468, 479], "43277": [468, 479], "36465": [468, 477, 479], "43688": [468, 479], "43753": [468, 479], "43916": [468, 479], "43908": [468, 469, 479], "40943": [468, 479], "new_refcnt": 468, "0x030900a4": [468, 469], "39573": [468, 469, 479], "40839": [468, 479], "pyunicode_fromunicod": [468, 469, 470, 472, 478, 479], "36346": [468, 478, 479], "42260": [468, 479], "30459": [468, 479], "odictobject": [468, 479], "parser_interfac": [468, 479], "picklebufobject": [468, 479], "pyarena": [468, 479], "pyctyp": [468, 479], "pyfp": [468, 478, 479], "pytim": [468, 479], "sim": 468, "35134": [468, 469, 477, 479], "py_frozenmain": [468, 479], "26241": 468, "pyunicode_internimmort": [468, 469, 470, 479], "41692": [468, 479], "py_unicode_str": [468, 479], "41123": [468, 469, 479], "py_unicode_strlen": [468, 472], "py_unicode_strcat": [468, 472], "py_unicode_strcpi": [468, 472], "py_unicode_strncpi": [468, 472], "py_unicode_strcmp": [468, 472], "py_unicode_strncmp": [468, 472], "py_unicode_strchr": [468, 472], "py_unicode_strrchr": [468, 472], "pyunicode_getmax": [468, 472, 479], "41103": [468, 479], "pylong_fromunicod": [468, 479], "pyunicode_asunicodecopi": [468, 472, 479], "_py_checkrecursionlimit": [468, 478, 479], "ceval": [468, 479], "recursion_limit": [468, 469, 479], "41834": [468, 479], "py_allow_recurs": [468, 479], "py_end_allow_recurs": [468, 479], "recursion_rit": 468, "41936": [468, 479], "pyos_initinterrupt": [468, 479], "41713": [468, 479], "pyast_valid": [468, 479], "43244": [468, 479], "pyst_getscop": [468, 479], "pysymtable_build": [468, 479], "pysymtable_buildobject": [468, 479], "pysymtable_fre": [468, 479], "py_symtablestr": [468, 479], "py_symtablestringobject": [468, 479], "43868": [468, 479], "winbas": [468, 479], "_mod": [468, 479], "pyast_compileex": [468, 479], "pyast_compileobject": [468, 479], "pyfuture_fromast": [468, 479], "pyfuture_fromastobject": [468, 479], "pyparser_astfromfileobject": [468, 479], "pyparser_astfromfilenam": [468, 479], "pyparser_astfromstringobject": [468, 479], "pyarena_new": [468, 479], "pyarena_fre": [468, 479], "pyarena_malloc": [468, 479], "pyarena_addpyobject": [468, 479], "use_trac": [468, 469], "43760": [468, 469, 479], "25x": 469, "680": [469, 479], "manhattan_dist": 469, "point_1": 469, "point_2": 469, "magic_arithmet": 469, "add_count": 469, "query_us": 469, "query_count": 469, "ammar": [469, 475, 476, 477, 479], "askar": [469, 475, 476, 477, 479], "43950": [469, 479], "45292": [469, 479], "45607": [469, 479], "zac": [469, 479], "hatfield": [469, 479], "dodd": [469, 479], "otherpython": 469, "tensorflow": 469, "rahtz": 469, "43224": [469, 479], "pradeep": 469, "kumar": [469, 470, 479], "srinivasan": 469, "sile": 469, "panther": 469, "foster": [469, 479], "47087": [469, 479], "mylock": 469, "myint": 469, "balf": [469, 470, 479], "46534": [469, 479], "table_nam": 469, "47088": [469, 479], "bleaney": 469, "91860": [469, 479], "bont": [469, 470], "counsil": 469, "46725": 469, "33346": [469, 479], "12022": [469, 479], "44471": [469, 479], "26579": [469, 479], "57684": [469, 479], "90153": 469, "grainger": [469, 479], "91181": 469, "24234": [469, 479], "29410": [469, 479], "45711": [469, 479], "_pyerr_stackitem": [469, 479], "bastian": 469, "neuburg": 469, "44934": [469, 479], "46142": [469, 479], "tane": 469, "hukkinen": 469, "40059": [469, 479], "42012": [469, 479], "90908": 469, "90927": 469, "91218": 469, "duprat": 469, "87518": 469, "34975": [469, 479], "46805": [469, 479], "filip": [469, 472, 473, 477, 479], "25625": [469, 479], "44674": [469, 479], "kabir": [469, 479], "kwatra": [469, 479], "91973": 469, "ganssl": [469, 470, 476, 477, 478, 479], "80010": [469, 479], "aflag": 469, "kirpichev": [469, 479], "44258": [469, 479], "some_fract": 469, "44547": [469, 479], "46014": [469, 479], "libb2": [469, 479], "47095": [469, 479], "_sha3": [469, 479], "tiny_sha3": [469, 479], "47098": [469, 479], "89313": 469, "weipeng": [469, 477, 479], "hong": [469, 477, 479], "30533": [469, 479], "hakan": [469, 479], "elik": [469, 479], "29418": [469, 479], "88116": [469, 479], "andrei": 469, "kulakovin": 469, "88024": 469, "kiril": 469, "pinchuk": 469, "88457": 469, "gideon": 469, "45917": [469, 479], "ajith": 469, "ramachandran": 469, "44357": [469, 479], "44339": [469, 479], "46917": [469, 479], "antoni": [469, 479], "44019": [469, 479], "44611": [469, 479], "eisuk": [469, 479], "kawasima": 469, "22276": [469, 479], "33392": 469, "433030": [469, 479], "46245": [469, 479], "klausner": 469, "30512": [469, 479], "29980": 469, "44491": [469, 479], "44688": [469, 479], "aviv": [469, 475, 477, 479], "palivoda": [469, 475, 477, 479], "shahaf": [469, 474, 479], "16379": [469, 479], "24139": [469, 479], "45243": [469, 479], "45613": [469, 479], "45828": [469, 479], "44092": [469, 479], "41930": [469, 479], "34916": 469, "24905": [469, 479], "keho": 469, "90465": 469, "46328": [469, 479], "miro": [469, 479], "hron": [469, 479], "45413": [469, 479], "carey": [469, 479], "metcalf": [469, 479], "70363": 469, "sem_clockwait": [469, 479], "41710": [469, 479], "sz": [469, 479], "ke": [469, 479], "21302": [469, 479], "45429": [469, 479], "info_patchlevel": [469, 479], "91827": [469, 479], "44569": [469, 479], "33809": [469, 479], "90633": [469, 479], "90572": 469, "90638": 469, "samodya": 469, "abeysiriwardan": 469, "89026": 469, "43923": 469, "shantanu": [469, 470, 479], "jain": [469, 470, 479], "91154": 469, "90500": 469, "89263": 469, "adrian": [469, 470, 476, 479], "garcia": [469, 470, 479], "badarasco": 469, "88970": 469, "91137": 469, "_type_check": 469, "beauregard": [469, 479], "90802": 469, "rosenstein": 469, "85542": 469, "nikita": [469, 470, 479], "sobolev": [469, 470, 479], "90353": 469, "90711": 469, "90729": 469, "45190": [469, 479], "45046": [469, 479], "47074": 469, "turnbul": [469, 479], "28080": [469, 479], "ezeh": 469, "49083": 469, "miguel": [469, 479], "brito": [469, 479], "88261": 469, "28307": [469, 479], "90564": 469, "behnel": [469, 473, 474, 476, 477, 479], "68264": 469, "91165": 469, "272": [469, 479], "46845": [469, 479], "msoxzw": 469, "91487": [469, 479], "37295": [469, 479], "90415": 469, "44987": [469, 479], "pyperform": [469, 479], "ubuntu": [469, 476, 479], "aditya": [469, 470, 479], "44590": [469, 479], "45256": [469, 479], "superinstruct": [469, 479], "brunthal": 469, "brandt": [469, 478, 479], "bucher": [469, 478, 479], "45947": [469, 479], "45340": [469, 479], "40116": [469, 479], "40222": [469, 479], "91404": [469, 479], "bloomberg": 469, "async_gen_wrap": [469, 479], "prep_reraise_star": [469, 479], "binary_": [469, 479], "inplace_": [469, 479], "call_function_kw": [469, 475, 479], "call_method": [469, 476, 479], "precal": [469, 479], "dup_top": [469, 479], "dup_top_two": [469, 479], "rot_two": [469, 479], "rot_thre": [469, 479], "rot_four": [469, 477, 479], "rot_n": [469, 479], "jump_if_not_exc_match": [469, 478, 479], "jump_absolut": [469, 479], "pop_jump_backward_if_": 469, "pop_jump_forward_if_": 469, "not_non": 469, "setup_async_with": 469, "jump_if_true_or_pop": [469, 470, 479], "jump_if_false_or_pop": [469, 470, 479], "89874": [469, 470], "copy_dict_without_key": 469, "gen_start": [469, 479], "19072": [469, 479], "89519": [469, 470, 479], "81548": [469, 479], "44977": [469, 479], "47061": [469, 479], "68966": [469, 479], "hugo": [469, 470, 473, 478, 479], "kemenad": [469, 470, 478, 479], "47022": [469, 479], "40360": [469, 478, 479], "sre_compil": [469, 479], "sre_const": [469, 474, 479], "sre_pars": [469, 479], "47152": [469, 479], "safeconfigpars": [469, 470, 471, 479], "45173": [469, 479], "legacyinterpol": [469, 470, 479], "46607": [469, 479], "90817": [469, 470, 479], "91760": [469, 470, 479], "92728": [469, 479], "45837": [469, 479], "jingchen": [469, 479], "90224": 469, "42255": [469, 479], "findtestcas": [469, 470, 479], "makesuit": [469, 470, 479], "5846": [469, 479], "usageexit": [469, 470, 479], "dam": 469, "zio": 469, "67048": [469, 470], "illia": [469, 479], "volochii": [469, 479], "43216": [469, 479], "corowrapp": [469, 479], "45129": [469, 479], "binhex": [469, 478, 479], "a2b_hqx": [469, 478, 479], "b2a_hqx": [469, 478, 479], "rlecode_hqx": [469, 478, 479], "rldecode_hqx": 469, "45085": [469, 479], "bdist_msi": [469, 478, 479], "45124": [469, 479], "45132": [469, 479], "ldgettext": [469, 477], "ldngettext": [469, 477], "set_output_charset": [469, 477], "44235": [469, 479], "formatargspec": [469, 474, 479], "from_builtin": [469, 474, 479], "45320": [469, 479], "46483": [469, 479], "mailmanproxi": [469, 478, 479], "35800": [469, 478, 479], "tkapptyp": [469, 478, 479], "38371": [469, 478, 479], "23882": [469, 479], "__set_format__": [469, 479], "__setformat__": [469, 479], "46852": [469, 479], "experimental_isolated_subinterpret": [469, 479], "pynch": [469, 479], "37330": [469, 479], "93351": [469, 479], "43234": [469, 479], "46659": [469, 479], "sriniva": [469, 476, 479], "reddi": [469, 476, 479], "thatiparthi": [469, 476, 479], "41137": [469, 479], "40465": [469, 478, 479], "47066": [469, 479], "35859": [469, 479], "84461": [469, 479], "90473": [469, 479], "95085": [469, 479], "46656": [469, 479], "45440": [469, 479], "46640": [469, 479], "py_no_nan": [469, 479], "46996": [469, 479], "libnsl": [469, 479], "libsqlite3": 469, "libcrypt": [469, 479], "egeberg": 469, "45847": [469, 479], "45747": [469, 479], "45763": [469, 479], "gilbert": 469, "45433": [469, 479], "holman": [469, 479], "44340": [469, 479], "45522": [469, 479], "45548": [469, 479], "45570": [469, 479], "45571": [469, 479], "43974": [469, 479], "tcltk_cflag": 469, "tcltk_lib": 469, "rhel": [469, 476, 479], "ltk8": 469, "ltkstub8": 469, "ltcl8": 469, "rhel7": 469, "sizeof_void_p": 469, "45569": [469, 479], "42035": [469, 479], "tornetta": [469, 479], "43931": [469, 479], "pybuffer_copydata": 469, "45459": [469, 479], "46613": [469, 479], "46906": [469, 479], "46343": [469, 479], "89653": 469, "46608": [469, 479], "exception_t": 469, "46841": [469, 479], "92154": [469, 479], "94936": [469, 479], "py_trashcan_safe_begin": [469, 478, 479], "py_trashcan_safe_end": [469, 478, 479], "py_trashcan_begin": [469, 478, 479], "py_trashcan_end": [469, 478, 479], "mytype_dealloc": 469, "0x03080000": [469, 477], "cpy_trashcan_begin": 469, "cpy_trashcan_end": 469, "44263": [469, 479], "new_typ": 469, "_py_set_typ": 469, "_py_set_s": 469, "0x030b0000": [469, 479], "45434": [469, 479], "cellobject": [469, 479], "genobject": [469, 479], "longintrepr": [469, 479], "pyunicode_check_intern": [469, 479], "46007": [469, 479], "93937": [469, 479], "f_blockstack": 469, "f_gen": 469, "f_iblock": 469, "f_stackdepth": 469, "f_state": [469, 479], "f_frame": 469, "f_localsplus": 469, "localsplus": 469, "f_valuestack": 469, "pyframe_fasttolocalswitherror": [469, 479], "pyframe_localstofast": [469, 479], "0x030900b1": 469, "pythoncap_compat": 469, "40429": [469, 479], "recursion_depth": [469, 478, 479], "recursion_remain": 469, "stackcheck_count": 469, "0x030b00a2": 469, "0x030a00a1": 469, "cframe": 469, "c_tracefunc": 469, "c_profilefunc": 469, "pythoncap": 469, "_py_setprogramfullpath": [469, 479], "88279": [469, 479], "ob_shash": [469, 479], "46864": [469, 479], "pyunicode_as_data": [469, 470, 472, 479], "pyunicode_as_unicod": [469, 470, 472, 479], "pyunicode_asunicodeands": [469, 470, 472, 478, 479], "pyunicode_asunicod": [469, 470, 472, 478, 479], "pyunicode_get_data_s": [469, 470, 472, 479], "pyunicode_get_s": [469, 470, 472, 479], "pyunicode_gets": [469, 470, 472], "pyunicode_is_compact": 469, "pyunicode_is_readi": 469, "py_unicode_wstr_length": 469, "_pyunicode_asunicod": [469, 478], "pyframe_blocksetup": 469, "pyframe_blockpop": 469, "py_adjust_erange1": [469, 479], "py_adjust_erange2": [469, 479], "py_overflow": [469, 479], "py_set_erange_if_overflow": [469, 479], "py_set_errno_on_math_error": [469, 479], "45412": [469, 479], "py_unicode_copi": [469, 472, 478, 479], "py_unicode_fil": [469, 472, 478, 479], "pystrhex": [469, 479], "py_force_doubl": [469, 479], "py_is_infin": [469, 479], "45474": [469, 479], "pyheaptype_get_memb": [469, 479], "40170": [469, 478, 479], "have_py_set_53bit_precis": [469, 479], "pyunicode_encod": [469, 472, 479], "pyunicode_encodeascii": [469, 472], "pyunicode_encodelatin1": [469, 472, 479], "pyunicode_encodeutf7": [469, 472, 479], "pyunicode_encodeutf8": [469, 472, 479], "pyunicode_encodeutf16": [469, 472, 479], "pyunicode_encodeutf32": [469, 472, 479], "pyunicode_encodeunicodeescap": [469, 472, 479], "pyunicode_encoderawunicodeescap": [469, 472, 479], "pyunicode_encodecharmap": [469, 472, 479], "pyunicode_translatecharmap": [469, 472, 479], "pyunicode_encodedecim": [469, 472, 479], "pyunicode_transformdecimaltoascii": [469, 472, 479], "44029": [469, 479], "98254": [470, 479], "99139": [470, 479], "blech": 470, "somethin": 470, "98931": [470, 479], "91058": [470, 479], "eden": 470, "alkalin": 470, "ascension": 470, "playlist": 470, "sky": 470, "cristi": 470, "maureira": 470, "frede": 470, "marta": [470, 479], "mez": [470, 479], "102856": [470, 479], "2x": [470, 472, 475, 479], "meyer": [470, 472, 477, 478, 479], "102500": [470, 479], "interpet": 470, "_xxsubinterpretersmodul": 470, "anticip": [470, 475, 479], "104210": 470, "franek": 470, "magiera": 470, "103629": [470, 479], "get_color": 470, "goodchild": 470, "badchild": 470, "get_colour": 470, "troxler": [470, 479], "101561": [470, 479], "labeledtupl": 470, "hashablesequ": 470, "intorstrsequ": 470, "103764": 470, "96123": 470, "87995": [470, 479], "90751": [470, 479], "96670": [470, 479], "breaker": [470, 479], "97922": [470, 479], "98401": [470, 479], "60203": 470, "some_it": [470, 479], "100581": 470, "bradshaw": [470, 479], "furkan": [470, 479], "onder": [470, 479], "101264": 470, "neumaier": 470, "100425": [470, 479], "77757": [470, 479], "103590": [470, 479], "98658": [470, 479], "91166": [470, 479], "bower": [470, 479], "102853": 470, "104140": 470, "104138": 470, "98024": 470, "94597": [470, 479], "99388": [470, 479], "6x": [470, 479], "ostrich": 470, "pranav": 470, "thulasiram": 470, "bhat": 470, "100344": [470, 479], "102748": [470, 479], "78530": [470, 479], "princ": 470, "roshan": 470, "103636": [470, 479], "94216": [470, 479], "100161": 470, "carlton": 470, "gibson": 470, "99247": 470, "krennwalln": [470, 479], "35759": 470, "103193": [470, 479], "98363": [470, 479], "100485": [470, 479], "goergen": 470, "94906": [470, 479], "93312": [470, 479], "machalow": 470, "99547": [470, 479], "dower": [470, 474, 475, 476, 477, 478], "102519": [470, 479], "99726": [470, 479], "triad": 470, "101000": [470, 479], "stanislav": 470, "zmiev": 470, "90385": [470, 479], "domenico": 470, "ragusa": 470, "40358": [470, 479], "tian": [470, 479], "gao": [470, 479], "103693": [470, 479], "81620": [470, 479], "100234": [470, 479], "74696": [470, 479], "triplet": [470, 479], "102828": [470, 479], "103179": 470, "77617": [470, 479], "83638": [470, 479], "103015": [470, 479], "103489": [470, 479], "95861": [470, 479], "102778": [470, 479], "103176": [470, 479], "evgeni": [470, 478, 479], "zorin": 470, "58451": 470, "93503": [470, 479], "create_": 470, "94473": [470, 479], "101827": 470, "102433": [470, 479], "hasx": 470, "fourteen": 470, "74690": [470, 479], "badaracco": [470, 479], "103699": [470, 479], "99957": [470, 479], "96734": [470, 479], "test_thread": [470, 479], "210s": 470, "test_timeout": 470, "barriertest": 470, "003s": 470, "test_default_timeout": 470, "518s": 470, "eventtest": 470, "158": 470, "869s": 470, "4080": 470, "chhina": 470, "88597": [470, 479], "wstr_length": 470, "92536": [470, 479], "modzelewski": 470, "90536": [470, 479], "101525": 470, "91524": [470, 479], "103793": [470, 479], "103497": 470, "93429": [470, 479], "102859": [470, 479], "101441": 470, "97681": [470, 479], "97669": [470, 479], "100160": [470, 479], "103857": [470, 479], "90016": [470, 479], "101698": 470, "ofey": [470, 479], "chan": [470, 479], "65961": [470, 479], "699": [470, 479], "ma_version_tag": [470, 479], "ramvikram": 470, "101193": 470, "hoffmann": [470, 479], "103487": 470, "90765": 470, "50096": 470, "86421": 470, "92248": [470, 479], "90953": 470, "william": [470, 473, 479], "72346": [470, 479], "coomb": [470, 473, 477, 478], "93963": [470, 479], "101588": [470, 479], "bsds": 470, "84559": 470, "97850": [470, 479], "master_open": [470, 479], "slave_open": [470, 479], "ceas": [470, 479], "97879": 470, "101866": 470, "87999": [470, 479], "96580": 470, "89336": [470, 479], "92584": [470, 479], "pradyun": 470, "gedam": 470, "95299": [470, 479], "95083": 470, "94172": [470, 479], "94196": [470, 479], "94199": [470, 479], "set_packag": [470, 473, 479], "98040": [470, 479], "nullimport": [470, 472], "get_mag": [470, 473], "get_suffix": 470, "new_modul": 470, "load_sourc": 470, "init_builtin": 470, "load_compil": 470, "load_dynam": [470, 479], "load_packag": [470, 479], "lock_held": 470, "search_error": 470, "py_sourc": 470, "c_extens": 470, "py_resourc": 470, "pkg_directori": 470, "c_builtin": 470, "py_frozen": 470, "py_coderesourc": 470, "imp_hook": 470, "openwrapp": [470, 479], "94169": [470, 479], "94226": [470, 479], "aiosmtpd": [470, 479], "iarygin": [470, 479], "93243": [470, 479], "92548": 470, "cwe": [470, 479], "isident": 470, "teyit": 470, "modernis": 470, "_texttestresult": [470, 479], "45162": [470, 479], "firebird": [470, 479], "102871": [470, 479], "94383": [470, 479], "94379": [470, 479], "suspici": [470, 479], "rstlint": [470, 479], "julien": [470, 476], "palard": [470, 476], "98179": 470, "1e25": 470, "86388": [470, 479], "94352": [470, 479], "98393": [470, 479], "99127": [470, 479], "fsring_middl": 470, "consecu": 470, "93939": [470, 479], "va_start": [470, 479], "93207": [470, 479], "89536": 470, "99289": [470, 479], "loongarch": [470, 479], "loongarch64": [470, 479], "gnusf": [470, 479], "gnuf32": [470, 479], "zhang": [470, 475, 476, 477, 479], "90656": [470, 479], "python_for_regen": [470, 479], "acloc": [470, 479], "89886": [470, 479], "pyunstable_": 470, "101101": 470, "103509": [470, 479], "wenzel": 470, "jakob": 470, "93012": [470, 479], "93274": [470, 479], "98586": [470, 479], "frost": 470, "92257": 470, "91052": [470, 479], "91051": [470, 479], "91054": [470, 479], "91248": [470, 479], "101578": [470, 479], "_pyerr_chainexceptions1": [470, 479], "_pyerr_chainexcept": [470, 479], "102755": [470, 479], "_py_immortal_refcnt": 470, "_py_isimmort": 470, "py_build_cor": [470, 479], "sstate_interned_immort": [470, 479], "sstate_interned_immortal_stat": 470, "eddi": [470, 477], "elizondo": [470, 477], "84436": [470, 479], "104110": 470, "105387": [470, 479], "98836": [470, 479], "95781": [470, 479], "georgi": [470, 479], "95504": [470, 479], "95589": [470, 479], "_pyobject_visitmanageddict": [470, 479], "_pyobject_clearmanageddict": [470, 479], "98724": [470, 479], "_py_reftot": 470, "_py_getglobalreftot": 470, "104668": [470, 479], "pylong_": 470, "ericsnowcurr": 470, "77782": [470, 479], "t_doubl": 470, "quirki": 470, "47146": [470, 479], "braun": [470, 479], "102192": [470, 479], "92651": [470, 479], "85858": [470, 479], "99482": [470, 479], "_use_broken_old_ctypes_structure_semantics_": [470, 479], "99285": 470, "392": 471, "sneezi": 471, "sleepi": 471, "skycaptain": 471, "manage_cloud": 471, "helm": 471, "parser_l": 471, "missil": 471, "torpedo": 471, "parser_m": 471, "vessel": 471, "console_prior": 471, "694": 471, "compet": 471, "unladen10": 471, "py32": 471, "pyload": [471, 473], "pypycload": [471, 473], "pyshar": 471, "32m": 471, "33md": 471, "soabi": [471, 479], "32mu": 471, "ext_suffix": [471, 473, 479], "salient": 471, "pathway": [471, 479], "0o24": 471, "0f": [471, 479], "7094": 471, "shl": 471, "project_nam": 471, "lowercaseddict": 471, "lcd": 471, "placeholderdict": 471, "6081": 471, "marcin": 471, "wojdyr": 471, "1772833": 471, "9666": 471, "9337": 471, "abcdefgh": [471, 473], "9757": 471, "4617": 471, "8413": 471, "10093": 471, "477863": 471, "9213": 471, "2690": 471, "10889": 471, "10518": 471, "aggrav": 471, "9425": 471, "undergon": 471, "4661": 471, "10321": 471, "get_phone_numb": 471, "phonenumb": 471, "phonelist": 471, "user_request": 471, "4805": 471, "980": 471, "baker": 471, "498245": 471, "577479": 471, "10586": 471, "10593": 471, "terrenc": 471, "9567": 471, "3445": 471, "8814": 471, "prob_dist": 471, "satur": 471, "renew": 471, "resequenc": 471, "simsalabim": 471, "get_vot": 471, "ballot": 471, "conduct_elect": 471, "all_polls_clos": 471, "lockbox": 471, "seal_ballot": 471, "elect": 471, "deposit": 471, "8777": 471, "923754": 471, "accept2dyear": [471, 472], "guesswork": 471, "1289118": 471, "5094": 471, "6641": 471, "2706": 471, "1777412": 471, "8013": 471, "10827": 471, "013671875": 471, "013765762467652909": 471, "gaussian": 471, "682689492137086": 471, "31731050786291404": 471, "gamma_funct": 471, "801": 471, "4551": 471, "950730698041": 471, "temperatur": 471, "from_fahrenheit": 471, "from_celsius": 471, "urban": [471, 473, 479], "5867": 471, "rec_len": 471, "loc_start": 471, "loc_len": 471, "change_loc": 471, "record_numb": 471, "byte_stream": 471, "g3805": 471, "storeroom": 471, "chassi": 471, "x7899": 471, "cog": 471, "l6988": 471, "sprocket": 471, "showroom": 471, "5506": 471, "9826": 471, "9840": 471, "susan": [471, 479], "salesl": 471, "talbot": 471, "5975": 471, "abraham": [471, 479], "1537721": 471, "duti": 471, "9110": 471, "8188": 471, "2305843009213693951": 471, "314159": 471, "1000003": 471, "8540": [471, 472], "log1": 471, "rodol": [471, 472, 477], "4972": [471, 474], "8046": 471, "1286": 471, "8806": 471, "7461": 471, "10554": 471, "bastien": [471, 473], "sabl": 471, "9862": 471, "3488": 471, "9962": 471, "1675951": 471, "redact": 471, "902": 471, "general_quest": 471, "3514": 471, "prion": 471, "py_todo": 471, "1399": 471, "semaphore_not": 471, "md2": 471, "dsawithsha": 471, "mdc2": 471, "md4": 471, "ripemd160": 471, "dsa": 471, "dsaencrypt": 471, "0x101739a10": 471, "sehensw": 471, "rdigkeiten": 471, "xc3": 471, "xbcrdigkeiten": 471, "bzip": 471, "in_transit": 471, "shashwat": 471, "8845": 471, "8524": 471, "9794": 471, "2818": 471, "8850": 471, "1589": 471, "5639": 471, "4870": 471, "dysfunct": 471, "9360": 471, "vant": 471, "1926": 471, "9003": 471, "lorenzo": [471, 473], "catucci": [471, 473], "4471": 471, "10980": 471, "10620": 471, "my_proj_dir": 471, "9754": 471, "test_anagram": 471, "volumin": 471, "ups": [471, 479], "9424": 471, "misimpl": 471, "optic": 471, "9025": 471, "8807": 471, "handle_accept": 471, "6706": 471, "schedulenau": 471, "5178": 471, "rodolfo": 471, "eckhardt": 471, "10220": 471, "0x1022bd788": 471, "pydoc3": 471, "ron": 471, "newloc": 471, "nofre": 471, "_randbelow": 471, "binary_modulo": 471, "binary_multipli": [471, 479], "binary_add": [471, 473, 479], "binary_floor_divid": 471, "9147": 471, "ray": [471, 473, 479], "9523": 471, "raymondhetting": 471, "os2": 471, "os2_hom": 471, "bindir": 471, "binlibdest": 471, "includepi": 471, "libdest": 471, "projectbas": 471, "py_version_nodot": 471, "py_version_short": 471, "antonio": 471, "cuni": 471, "ilya": [471, 476, 479], "sandler": 471, "pluggabl": [471, 473, 475], "ambv": 471, "zope9": 471, "plone": 471, "zope9instal": 471, "zope9inst": 471, "beef": 471, "cafe": 471, "5417": 471, "aff": 471, "8fa3": 471, "telenovela": 471, "elisa": 471, "bfd": 471, "f3nde": 471, "mahn": 471, "5468": 471, "9873": 471, "steffen": 471, "daod": 471, "nurpmeso": 471, "9124": 471, "10199": 471, "7316": 471, "torsten": [471, 472, 479], "landschoff": [471, 472, 479], "850728": 471, "kleckner": 471, "8844": 471, "6690": 471, "9410": 471, "3873": 471, "9915": 471, "7451": 471, "10314": 471, "10x": [471, 472, 473, 476, 479], "15x": [471, 478, 479], "3001": 471, "stringlib": 471, "differenc": [471, 479], "andress": 471, "bennett": 471, "8685": 471, "1569291": 471, "3709": [471, 472], "schaaf": [471, 472], "sped": [471, 474, 477, 478, 479], "10160": 471, "christo": 471, "georgiou": 471, "7113": 471, "mobil": 471, "kannada": 471, "0cf1": 471, "0cf2": 471, "tai": 471, "lue": 471, "19da": 471, "disqualifi": 471, "cheatsheet": 471, "jog": 471, "adjunct": 471, "9528": 471, "7962": 471, "aquatk": 471, "6075": 471, "changeset": [471, 473, 479], "385": 471, "workflow": [471, 479], "10679": 471, "bupjo": 471, "5127": 471, "9203": 471, "wctype": 471, "9210": 471, "9778": 471, "py_va_copi": 471, "va_copi": 471, "2443": 471, "8837": 471, "buildscript": [471, 479], "8990": 471, "setfilesystemencod": 471, "6shhbbb": 471, "gif87a": 471, "10783": 471, "10711": 471, "10272": 471, "398": 472, "segreg": 472, "13411": 472, "10181": 472, "u0010ffff": 472, "udbff": 472, "udfff": 472, "13054": 472, "becker": 472, "3561": 472, "gather_t": 472, "acc": [472, 479], "renaud": [472, 479], "blanch": [472, 479], "zbigniew": [472, 479], "drzejewski": [472, 479], "szmek": [472, 479], "_extra_attribut": 472, "0x7f46b9fe31e0": 472, "amend": [472, 479], "2377": 472, "13959": 472, "14605": 472, "14646": 472, "growth": [472, 479], "delin": 472, "12753": 472, "13201": 472, "petri": [472, 479], "lehtinen": 472, "12170": 472, "12380": 472, "10516": 472, "11388": 472, "13748": 472, "gruszczi": [472, 473, 477, 479], "ski": [472, 473, 477, 479], "13521": 472, "clumsi": 472, "9260": 472, "4966": 472, "3144": 472, "nadeem": [472, 473], "vawda": [472, 473], "yvind": 472, "karlsen": [472, 479], "6715": 472, "darren": 472, "11610": 472, "10868": 472, "1172711": 472, "ywjj": 472, "catalin": [472, 479], "iacob": [472, 479], "13641": 472, "13637": 472, "5863": 472, "pbzip2": 472, "1625": 472, "13216": 472, "65001": [472, 479], "cp_utf8": [472, 479], "chcp": [472, 479], "cjk": [472, 479], "12016": 472, "u52ff": 472, "u65bd": 472, "u65bc": 472, "u4eba": 472, "u3002": 472, "npj": 472, "l6hk": 472, "hk": 472, "12100": 472, "11089": 472, "11297": 472, "11085": 472, "13121": 472, "13585": 472, "10924": 472, "ncursesw": [472, 479], "waddwstr": 472, "igo": 472, "serna": 472, "6755": 472, "15006": 472, "7652": 472, "100x": 472, "bytereef": 472, "mpdecim": [472, 479], "quickstart": 472, "02s": 472, "345s": 472, "120x": 472, "telco": 472, "19s": 472, "68s": 472, "psycopg": 472, "57s": 472, "29s": 472, "12x": 472, "watchexp": [472, 479], "465484": 472, "72000": 472, "89ric": 472, "pal": 472, "salli": 472, "bonzo": 472, "bonz": 472, "ought": 472, "8594": 472, "12139": 472, "11072": 472, "13227": 472, "15061": 472, "13295": 472, "kuhn": 472, "13464": 472, "htmlparseerror": 472, "15114": [472, 473, 474, 479], "14538": 472, "13993": 472, "13960": 472, "13358": 472, "1745761": 472, "755670": 472, "13357": 472, "12629": 472, "1200313": 472, "670664": 472, "13273": 472, "12888": 472, "7311": 472, "11113": 472, "15156": 472, "sijin": 472, "joseph": [472, 475, 479], "8808": 472, "13062": 472, "15153": 472, "townshend": 472, "12760": 472, "11888": 472, "12021": 472, "12328": 472, "4892": 472, "6064": 472, "12708": 472, "9795": 472, "lagerwal": 472, "10882": 472, "4761": 472, "10755": 472, "14626": 472, "supports_follows_symlink": 472, "10784": 472, "8828": 472, "14127": 472, "13609": 472, "12720": 472, "9344": 472, "dlfcn": [472, 475, 479], "13226": 472, "14210": 472, "14166": 472, "3665": 472, "13449": 472, "8684": 472, "delayfunct": 472, "13245": 472, "6397": 472, "12442": 472, "sandro": 472, "tosi": 472, "12191": 472, "15238": 472, "12715": 472, "niehof": 472, "9993": 472, "4489": 472, "8407": 472, "1870": 472, "elho": 472, "trevino": 472, "juhana": 472, "jauhiainen": 472, "orr": [472, 473, 477, 478, 479], "boswel": 472, "8739": 472, "paulo": [472, 479], "scardin": 472, "11281": 472, "11289": 472, "kasun": 472, "herath": 472, "8809": 472, "watson": 472, "6560": 472, "heiko": 472, "wundram": 472, "socketcan": [472, 479], "lwn": 472, "253425": 472, "10141": 472, "fuch": [472, 477, 479], "tiago": 472, "alv": 472, "reliable_datagram_socket": 472, "rds": [472, 479], "goderbau": 472, "13777": 472, "10866": 472, "warkentin": 472, "11109": 472, "11688": 472, "12049": 472, "11183": 472, "simpkin": 472, "12803": 472, "13626": 472, "13627": 472, "scram": 472, "jacek": [472, 475, 479], "konieczni": 472, "12551": 472, "13634": 472, "colin": [472, 479], "14204": 472, "14837": 472, "11811": 472, "13635": 472, "14807": 472, "3163": 472, "8513": 472, "5870": 472, "11223": 472, "5689": 472, "9957": 472, "13857": 472, "10968": 472, "clock_xxx": 472, "10278": 472, "14386": 472, "14588": 472, "winston": 472, "ewert": 472, "10775": 472, "1673007": 472, "xdg": [472, 479], "gvfs": [472, 479], "calmett": 472, "13620": 472, "14493": 472, "12646": 472, "12306": 472, "14624": 472, "14738": 472, "15026": 472, "osf": 472, "9856": 472, "11377": 472, "13374": 472, "13988": 472, "py_unicode_match": [472, 478, 479], "pyunicode_encodembc": [472, 479], "12326": 472, "13847": 472, "14180": 472, "longstand": [472, 479], "1079": 472, "1690608": 472, "11291": 472, "assertsameel": 472, "_clamp": 472, "sslfakefil": 472, "13550": 472, "smalltabl": 472, "pymemoryviewobject": [472, 474], "memoryobject": [472, 474], "xxxmodul": 472, "14040": 472, "10998": 472, "11591": 472, "rdmurray": 473, "bitdanc": 473, "16499": 473, "16475": 473, "3156": 473, "450": 473, "454": 473, "8713": 473, "18891": 473, "18214": 473, "unvers": 473, "pip3": 473, "hex_decod": 473, "bz2_encod": 473, "68656c6c6f": 473, "7475": 473, "17827": 473, "17828": 473, "19619": 473, "stone": 473, "everyon": 473, "berman": 473, "18111": 473, "18416": 473, "kang": [473, 479], "hao": 473, "12892": 473, "bierenfeld": 473, "1097797": 473, "ukrainian": [473, 476], "19668": 473, "15958": 473, "16772": 473, "17934": 473, "claudiu": [473, 474, 479], "popa": [473, 474, 479], "18690": 473, "19078": 473, "16148": 473, "declin": 473, "eli": [473, 475, 479], "benderski": 473, "aprano": [473, 475, 477], "16832": 473, "bruno": [473, 474, 479], "dupui": 473, "16049": 473, "17818": 473, "storchacha": 473, "16486": 473, "8311": 473, "maystr": 473, "11175": 473, "12866": 473, "19641": 473, "16685": 473, "17839": 473, "a85": 473, "17618": 473, "16613": 473, "fcc": 473, "ntsc": 473, "lander": [473, 476], "14323": 473, "15806": 473, "piraeus": 473, "19266": 473, "inflex": [473, 474], "15805": 473, "19282": 473, "kluyver": [473, 474, 475, 479], "11816": 473, "17916": 473, "19722": 473, "16522": 473, "11390": 473, "3158": 473, "18600": 473, "email6": 473, "levitt": 473, "18149": 473, "15442": 473, "horev": 473, "kati": [473, 479], "10042": 473, "thorn": 473, "12428": 473, "16351": 473, "18582": 473, "18532": 473, "jona": [473, 476, 479], "borgstr": 473, "18240": 473, "17276": 473, "247": 473, "18775": 473, "2927": 473, "invit": 473, "13633": 473, "karl": [473, 478, 479], "cow": 473, "12921": 473, "malt": 473, "swart": 473, "17764": 473, "15627": 473, "18072": 473, "18193": 473, "18192": 473, "18194": 473, "18058": 473, "19152": 473, "18626": 473, "unravel": 473, "aaron": [473, 479], "ile": 473, "13266": 473, "18929": 473, "19030": 473, "broader": 473, "17481": 473, "17159": 473, "routeabl": 473, "17400": 473, "9556": 473, "ce46195b56a9": 473, "16110": 473, "15452": 473, "bump": [473, 479], "19219": 473, "valeri": 473, "4885": 473, "18999": 473, "19946": 473, "16694": 473, "nelson": 473, "yogesh": 473, "chaudhari": 473, "17914": 473, "11939": 473, "9035": 473, "uapi": 473, "18673": 473, "16596": 473, "osborn": 473, "18764": 473, "14455": 473, "4473": 473, "19132": 473, "17150": 473, "19674": 473, "20710": 473, "barnett": [473, 479], "16203": 473, "lope": 473, "tavar": 473, "13592": 473, "17087": 473, "16595": 473, "19324": 473, "19343": 473, "16488": 473, "18794": 473, "13896": 473, "atsuo": 473, "ishimoto": 473, "1492704": 473, "smtpserver": [473, 474, 475, 479], "smtpchannel": [473, 474, 475, 479], "async_chat": [473, 479], "11959": 473, "2118": 473, "15359": 473, "7171": 473, "poq": 473, "13773": 473, "16692": 473, "19689": 473, "18138": 473, "18143": 473, "18147": 473, "christien": 473, "8813": 473, "19292": 473, "17134": 473, "8109": 473, "calissu": 473, "18379": 473, "_stat": [473, 479], "11016": 473, "hiem": 473, "17804": 473, "zack": 473, "weinberg": 473, "16624": 473, "getstatus": 473, "10197": 473, "18901": 473, "18878": 473, "19261": 473, "13390": 473, "5845": 473, "13477": 473, "18585": 473, "18725": 473, "18882": 473, "1565525": 473, "mathia": 473, "panzenb": 473, "ck": 473, "16423": 473, "18978": 473, "kachayev": [473, 474, 479], "16464": 473, "wozniak": 473, "17485": 473, "brecht": [473, 474, 475, 479], "17272": 473, "15701": 473, "16997": 473, "jyrki": 473, "pulliainen": 473, "15132": 473, "zach": [473, 479], "16935": 473, "melin": 473, "ramnani": 473, "16709": 473, "wardil": 473, "mcclure": 473, "11798": 473, "18937": 473, "17457": 473, "17015": 473, "toshio": 473, "kuratomi": 473, "17467": 473, "15417": 473, "19552": 473, "17487": 473, "17616": 473, "5202": 473, "14631": 473, "15528": 473, "17643": 473, "17741": 473, "ariel": 473, "poliak": 473, "14377": 473, "19274": 473, "mallard": 473, "17201": 473, "14621": 473, "dsl": [473, 479], "17162": 473, "montagn": 473, "16129": 473, "1772673": 473, "ysj": [473, 479], "7330": 473, "dhiru": 473, "kholia": 473, "18596": 473, "16632": 473, "18338": 473, "18920": 473, "18922": 473, "18569": 473, "gcov": 473, "lcov": 473, "clav": 473, "milauer": 473, "16421": 473, "17853": 473, "pyfailmalloc": 473, "18408": 473, "18520": 473, "18807": [473, 479], "18818": 473, "heaney": [473, 474], "vajraski": [473, 474, 479], "kok": [473, 474, 479], "19201": 473, "19222": [473, 474], "19223": 473, "14625": 473, "linear_prob": 473, "18771": 473, "19218": 473, "19209": 473, "19205": 473, "9548": 473, "16034": 473, "16674": 473, "15596": 473, "15758": 473, "bryant": 473, "18020": 473, "18756": 473, "xxxloader": 473, "set_load": [473, 479], "endtim": [473, 479], "readplistfrombyt": [473, 476, 479], "writeplisttobyt": 473, "18823": 473, "19375": 473, "16135": 473, "e52df05b496a": 473, "14470": 473, "16136": 473, "shlib_suffix": 473, "16754": 473, "tick_count": 473, "19199": 473, "tara": 473, "lyapun": 473, "15641": 473, "type_int64": [473, 479], "riti": 473, "15480": 473, "isbjunk": 473, "isbpopular": 473, "sm": 473, "13248": [473, 475, 479], "_gestalt": 473, "_mac_ver_lookup": 473, "_mac_ver_gstalt": 473, "_bcd2str": 473, "18393": 473, "17323": 473, "17115": 473, "module_to_load": 473, "19413": 473, "18065": 473, "is_frozen": 473, "felt": [473, 477, 479], "interstiti": 473, "17434": 473, "b32": 473, "18011": 473, "9177": 473, "14794": 473, "16290": 473, "16967": 473, "17094": 473, "20625": 473, "19555": 473, "15204": 473, "16333": 473, "20784": 473, "16742": 473, "f_tstate": 473, "14432": 473, "elvi": [474, 475, 476, 477, 478, 479], "pranskevichus": [474, 475, 476, 477, 478, 479], "478": 474, "441": [474, 479], "arnon": [474, 479], "yaari": [474, 479], "9951": [474, 479], "23632": [474, 479], "benno": [474, 479], "lesli": [474, 479], "24450": [474, 479], "19235": [474, 479], "lc_type": [474, 479], "19977": [474, 479], "streamlin": [474, 479], "22638": [474, 479], "22796": [474, 479], "rudimentari": 474, "http_get": 474, "nathaniel": [474, 476, 479], "landau": 474, "girdhar": [474, 475, 479], "detract": 474, "500000": 474, "evid": 474, "lehtosalo": 474, "intermitt": [474, 479], "conceal": 474, "unguard": 474, "pernici": 474, "angelico": [474, 475, 479], "99998": 474, "00003": 474, "00001": 474, "barker": [474, 479], "19676": [474, 479], "22286": [474, 479], "23681": [474, 479], "22682": [474, 479], "22681": [474, 479], "24064": [474, 479], "17636": [474, 479], "23491": [474, 479], "paugh": [474, 479], "j3": [474, 476, 479], "eriksson": [474, 479], "14910": [474, 479], "proactor": [474, 479], "22560": 474, "21326": [474, 479], "yann": [474, 475, 479], "sionneau": [474, 475], "uvloop": [474, 475, 479], "korenberg": [474, 475], "jiryu": [474, 475, 479], "davi": [474, 475, 479], "nikolaus": [474, 479], "rath": [474, 479], "15955": [474, 479], "20289": [474, 479], "24270": [474, 479], "17442": [474, 479], "16991": [474, 479], "19505": [474, 479], "23704": [474, 479], "coodin": 474, "abscissa": 474, "jevnik": [474, 477, 479], "22189": [474, 479], "devin": [474, 479], "jeanpierr": [474, 479], "23086": [474, 479], "24018": [474, 479], "24184": [474, 479], "16104": 474, "19628": [474, 479], "21338": [474, 479], "11271": [474, 479], "21527": [474, 479], "18159": 474, "22389": [474, 479], "23171": [474, 479], "4254": [474, 479], "18039": [474, 479], "2052": [474, 479], "17445": [474, 479], "5309": [474, 479], "bdist": 474, "16314": [474, 479], "glenn": 474, "15916": [474, 479], "milan": [474, 476, 479], "oberkirch": [474, 476, 479], "20098": [474, 479], "abhilash": [474, 479], "raj": [474, 479], "21083": 474, "24211": [474, 479], "claud": [474, 479], "paroz": [474, 479], "16324": [474, 479], "21706": 474, "wei": [474, 479], "wu": [474, 479], "23566": [474, 479], "14373": [474, 479], "13968": [474, 479], "55555": 474, "6666": 474, "13742": [474, 479], "demian": [474, 475, 479], "21793": [474, 479], "panter": [474, 475, 479], "3566": 474, "maciej": [474, 479], "szulik": 474, "21800": [474, 479], "vignali": 474, "20295": [474, 479], "fabric": [474, 479], "anech": [474, 479], "20197": [474, 479], "17621": [474, 479], "21156": [474, 479], "20383": [474, 479], "20726": [474, 479], "20334": [474, 479], "24190": [474, 479], "17373": [474, 479], "20691": [474, 479], "24017": [474, 479], "24400": [474, 479], "16808": [474, 479], "20578": 474, "16531": [474, 479], "leon": [474, 479], "20480": [474, 479], "21650": [474, 479], "19361": [474, 479], "17911": [474, 479], "dric": [474, 477, 479], "krier": [474, 477, 479], "13918": [474, 479], "20537": [474, 479], "22788": [474, 479], "23185": [474, 479], "22486": [474, 478, 479], "21565": 474, "rosenberg": [474, 478, 479], "22955": [474, 479], "21176": [474, 479], "22524": [474, 479], "21719": [474, 479], "22181": [474, 479], "22054": [474, 479], "23668": [474, 479], "rafik": [474, 479], "draoui": [474, 479], "10395": [474, 479], "19775": [474, 479], "21539": [474, 479], "19776": [474, 479], "mayank": [474, 479], "tripathi": [474, 479], "19777": [474, 479], "spam42": 474, "welborn": 474, "20218": [474, 479], "23611": [474, 479], "21804": [474, 479], "aac": [474, 479], "sre_match": 474, "9179": [474, 479], "22437": [474, 479], "1519638": [474, 479], "22578": [474, 479], "cauet": [474, 479], "22940": [474, 479], "18931": [474, 479], "19840": 474, "5411": [474, 479], "22018": [474, 479], "21076": [474, 479], "decode_data": [474, 475, 479], "process_messag": [474, 475], "19662": 474, "21795": [474, 479], "21725": [474, 479], "14758": 474, "15014": [474, 479], "gavin": 474, "chappel": 474, "16914": [474, 479], "22027": [474, 479], "18615": [474, 479], "22043": [474, 479], "17552": [474, 479], "23853": [474, 479], "21455": [474, 479], "21965": [474, 479], "suboptim": 474, "20188": [474, 479], "20421": [474, 479], "20951": [474, 479], "akira": [474, 479], "19940": [474, 479], "23186": [474, 479], "23239": [474, 479], "10203": [474, 479], "sinclair": 474, "jessica": [474, 479], "mckellar": 474, "13583": [474, 479], "23342": [474, 479], "set_coroutine_wrapp": [474, 476, 477, 479], "get_coroutine_wrapp": [474, 476, 477, 479], "22696": [474, 479], "23437": [474, 479], "21717": [474, 479], "vogt": [474, 479], "23193": [474, 479], "21549": [474, 479], "gindi": [474, 479], "18983": [474, 479], "2527": [474, 479], "_fix": [474, 479], "20035": [474, 479], "kazakov": [474, 479], "22619": [474, 479], "16662": [474, 479], "19746": [474, 479], "22936": [474, 479], "kushal": [474, 475, 479], "das": [474, 475, 479], "21238": [474, 479], "21262": [474, 479], "johann": [474, 479], "baiter": [474, 479], "20968": [474, 479], "kan": [474, 479], "vdahl": [474, 479], "23581": [474, 479], "23568": [474, 479], "17660": 474, "matej": [474, 479], "cepl": [474, 478, 479], "19494": [474, 479], "akshit": 474, "khurana": [474, 476, 479], "samwys": 474, "13866": [474, 479], "22366": [474, 479], "22118": [474, 479], "torr": [474, 479], "navarret": [474, 479], "silentghost": [474, 475, 479], "5800": [474, 479], "20627": [474, 479], "22960": [474, 479], "2175": [474, 479], "10590": [474, 479], "23252": [474, 479], "23001": [474, 479], "findfirstfil": 474, "findnextfil": 474, "23605": [474, 479], "21233": [474, 479], "albert": [474, 476, 479], "markus": [474, 479], "21486": [474, 479], "21487": [474, 479], "20826": [474, 479], "23266": [474, 479], "23133": [474, 479], "15381": [474, 479], "22003": [474, 479], "20416": [474, 479], "23344": [474, 479], "15027": [474, 479], "19380": [474, 479], "23206": [474, 479], "22540": [474, 479], "22847": [474, 479], "23488": [474, 479], "23910": [474, 479], "22464": 474, "23573": [474, 479], "_py_char2wchar": [474, 479], "_py_wchar2char": [474, 479], "18395": [474, 479], "18711": [474, 479], "24268": [474, 479], "amd": [474, 475], "gnu32": 474, "win_amd64": [474, 479], "win_ia64": 474, "win_arm": 474, "_d": 474, "legalchar": 474, "23671": [474, 479], "linux_distribut": [474, 479], "1322": [474, 479], "24248": [474, 479], "20438": 474, "22407": [474, 479], "23622": [474, 479], "chaput": [474, 479], "6623": [474, 479], "23464": [474, 479], "21205": [474, 479], "htmlparsererror": [474, 479], "21047": [474, 479], "16518": [474, 479], "22834": [474, 479], "23014": 474, "22818": [474, 479], "2211": [474, 479], "nnnn": [474, 479], "pot": [474, 479], "24284": [474, 479], "15582": [474, 479], "7830": [474, 479], "22453": [474, 479], "20204": [474, 479], "python36": 475, "gonzalez": [475, 476], "ivan": [475, 476, 477, 479], "levkivskyi": [475, 476, 477, 479], "lisa": [475, 477, 479], "1_000_000_000_000_000": 475, "1000000000000000": 475, "0x_ff_ff_ff_ff": 475, "ffff_ffff": 475, "ticker": 475, "pluginbas": 475, "plugin1": 475, "plugin2": 475, "teichmann": [475, 479], "intfield": 475, "int_field": 475, "some_fil": 475, "dusti": [475, 479], "koo": 475, "zevenhoven": 475, "27350": [475, 479], "0x7fbcd41666f8": 475, "forbiddenbyt": [475, 479], "0x7fbcd41666fc": 475, "ouch": 475, "1233329": 475, "1a": 475, "test_byt": 475, "648": 475, "0x00007fbcdbd32700": 475, "test_hex": 475, "26516": [475, 479], "26564": [475, 479], "21590": [475, 479], "nikhil": 475, "benesch": 475, "barnert": [475, 479], "25958": [475, 479], "emanuel": [475, 479], "26823": [475, 479], "15767": 475, "23722": [475, 477, 479], "26492": [475, 479], "26146": [475, 479], "28613": [475, 479], "27041": [475, 479], "27040": [475, 479], "28370": [475, 479], "25593": [475, 479], "26221": 475, "27392": [475, 479], "27456": [475, 476, 479], "28003": [475, 479], "26081": [475, 479], "28544": [475, 479], "25357": [475, 479], "628": [475, 479], "23229": [475, 479], "27598": [475, 479], "25987": 475, "28720": [475, 479], "17941": [475, 479], "25628": [475, 479], "26482": [475, 479], "27664": [475, 479], "25609": [475, 479], "24773": [475, 479], "ashley": 475, "anderson": 475, "12006": 475, "alessandro": 475, "cucci": 475, "19475": [475, 479], "27661": [475, 479], "25928": [475, 479], "27819": [475, 479], "24277": [475, 479], "27331": [475, 479], "20476": 475, "27959": [475, 479], "23591": [475, 479], "23848": [475, 479], "hackman": [475, 479], "25788": [475, 479], "26470": [475, 479], "26798": [475, 479], "16113": [475, 479], "bertoni": 475, "joan": 475, "daemen": 475, "micha": [475, 479], "peeter": 475, "gill": 475, "assch": 475, "ronni": 475, "keer": 475, "27928": [475, 479], "rolf": [475, 479], "krahl": 475, "12319": [475, 479], "tkfont": 475, "swiegart": 475, "24225": [475, 479], "autocomplet": [475, 476, 479], "louie": [475, 476, 479], "15786": [475, 476, 479], "cheryl": [475, 476, 477, 479], "sabella": [475, 476, 477, 479], "1612262": [475, 476, 479], "wohlgang": [475, 476, 479], "27099": [475, 476, 479], "13802": [475, 476, 479], "31860": [475, 476, 479], "maxlin": [475, 476, 479], "33642": [475, 476, 479], "33768": [475, 476, 479], "33679": [475, 476, 479], "dpi": [475, 476, 479], "sharper": [475, 476, 479], "33656": [475, 476, 479], "1529353": [475, 476, 477, 479], "19611": [475, 479], "churn": 475, "richer": 475, "27172": [475, 479], "17909": [475, 479], "marian": [475, 479], "horban": 475, "24884": 475, "davin": [475, 477, 479], "pott": [475, 477, 479], "6766": [475, 479], "25994": [475, 479], "27186": [475, 479], "24164": [475, 479], "25382": [475, 479], "8637": [475, 479], "24879": [475, 479], "18844": [475, 479], "ython": 475, "433028": [475, 479], "24454": [475, 479], "xiang": [475, 476, 477, 479], "27177": [475, 479], "tyler": [475, 479], "crompton": [475, 479], "26870": [475, 479], "25011": [475, 479], "25209": [475, 479], "1521950": 475, "wolfgang": [475, 479], "langner": 475, "26587": [475, 479], "lordthorsen": [475, 479], "16864": [475, 479], "stoke": [475, 479], "26536": [475, 479], "26907": 475, "27744": [475, 479], "crypto": [475, 479], "omar": [475, 476, 479], "sandov": [475, 476, 479], "26273": [475, 476, 479], "26404": [475, 479], "26721": [475, 479], "27850": [475, 479], "27766": [475, 479], "28043": [475, 479], "19500": [475, 479], "warhawk": 475, "28025": [475, 479], "28085": 475, "27181": [475, 477, 479], "11734": [475, 479], "26741": [475, 479], "6135": [475, 479], "27781": [475, 479], "27932": [475, 479], "phane": [475, 476, 479], "wirtel": [475, 476, 479], "25485": [475, 479], "6422": [475, 479], "23552": [475, 479], "trace_add": [475, 479], "trace_remov": [475, 479], "trace_info": [475, 479], "trace_vari": [475, 479], "trace_vdelet": [475, 479], "trace_vinfo": [475, 479], "22115": [475, 479], "26588": [475, 479], "280": 475, "189": 475, "amit": [475, 479], "saha": [475, 479], "26323": [475, 479], "21271": [475, 479], "nikolay": [475, 479], "bogoychev": [475, 479], "16099": [475, 479], "balcerzak": 475, "22829": 475, "26568": 475, "26567": [475, 479], "rouault": [475, 479], "23026": [475, 479], "27982": [475, 479], "26885": [475, 479], "26039": [475, 479], "26243": [475, 479], "16764": [475, 479], "demur": [475, 479], "rume": [475, 479], "26647": [475, 479], "28050": 475, "24870": 475, "25227": [475, 479], "25267": [475, 479], "25301": [475, 479], "25349": [475, 479], "25399": [475, 479], "25401": [475, 479], "snider": [475, 479], "26574": [475, 479], "26249": [475, 479], "27056": [475, 479], "27574": [475, 479], "25596": [475, 479], "26032": [475, 479], "25638": [475, 479], "25873": [475, 479], "25869": [475, 479], "25971": [475, 479], "py_long_long": 475, "17884": [475, 479], "ndk": [475, 479], "lollipop": 475, "26865": 475, "alecsandru": [475, 479], "patrascu": [475, 479], "26359": [475, 479], "5319": [475, 479], "26282": [475, 479], "0b4": [475, 479], "223967b49e49": 475, "27243": [475, 479], "27364": [475, 479], "25791": [475, 479], "mariatta": [475, 479], "25002": 475, "21708": [475, 479], "extra_path": [475, 479], "27919": [475, 479], "26129": [475, 479], "26754": [475, 479], "22493": [475, 479], "28022": [475, 479], "25154": [475, 479], "ffi": [475, 479], "fullmodnam": 475, "find_lines_from_cod": 475, "find_lin": 475, "find_str": 475, "find_executable_lin": 475, "tk_menubar": [475, 479], "tk_bindfortravers": [475, 479], "cdrom": [475, 479], "cdio": [475, 479], "stropt": [475, 479], "chronic": 475, "h2pi": [475, 479], "show_track_count": [475, 479], "23034": [475, 479], "balogh": [475, 479], "2091": [475, 479], "25768": [475, 479], "20059": [475, 479], "taddei": [475, 479], "odziej": [475, 479], "23883": [475, 479], "18018": [475, 479], "23430": [475, 479], "26685": [475, 479], "18726": [475, 479], "holden": [475, 479], "27842": [475, 479], "25287": [475, 479], "lita": [475, 479], "cho": [475, 479], "21815": [475, 479], "jakub": [475, 479], "stasiak": [475, 479], "26335": [475, 479], "ramchandra": [475, 479], "17211": 475, "25953": [475, 479], "plugin": 475, "25483": 475, "27078": [475, 479], "27140": [475, 479], "build_map_unpack_with_cal": [475, 479], "build_tuple_unpack_with_cal": [475, 479], "call_function_var": 475, "call_function_var_kw": 475, "make_closur": [475, 479], "27095": [475, 479], "27213": [475, 479], "28257": [475, 479], "store_annot": [475, 476, 479], "27985": [475, 479], "pyexc_recursionerrorinst": [475, 476, 479], "22898": [475, 476, 479], "30697": [475, 476, 479], "31900": [475, 476, 479], "33899": [475, 476, 477, 479], "37228": [475, 476, 477, 478, 479], "advent": 476, "uncov": [476, 479], "glare": 476, "advers": 476, "from_str": 476, "validate_b": 476, "bray": [476, 479], "masayuki": [476, 479], "coars": 476, "ja": 476, "12844": [476, 479], "18896": [476, 479], "xiao": [476, 479], "28927": [476, 479], "32677": [476, 479], "29546": [476, 479], "30024": [476, 479], "28974": [476, 479], "30579": [476, 479], "33053": [476, 479], "31415": [476, 479], "32248": [476, 479], "14191": [476, 479], "32314": [476, 477, 479], "32436": [476, 479], "32311": [476, 479], "23749": [476, 479], "31819": [476, 479], "32250": [476, 479], "32251": [476, 479], "32269": [476, 479], "32391": [476, 479], "32410": [476, 479], "32415": [476, 479], "32418": [476, 479], "32662": [476, 479], "32741": [476, 479], "quentin": [476, 479], "dawan": 476, "31245": [476, 479], "create_accepted_socket": 476, "aspinal": 476, "29970": [476, 479], "marat": [476, 479], "sharafutdinov": [476, 479], "31943": [476, 479], "32193": [476, 479], "32356": [476, 479], "32066": [476, 479], "30508": [476, 479], "33792": [476, 479], "30103": [476, 479], "oz": 476, "tiram": 476, "30095": 476, "32320": [476, 479], "31650": [476, 479], "21423": [476, 479], "moreau": 476, "31540": [476, 479], "bakker": [476, 479], "10049": [476, 479], "29679": 476, "30241": [476, 479], "mohr": [476, 479], "kulakov": [476, 479], "29302": [476, 479], "sanyam": [476, 479], "21862": [476, 479], "31664": [476, 479], "31702": [476, 479], "15873": [476, 479], "5288": [476, 479], "32630": [476, 479], "11822": [476, 479], "11913": [476, 479], "31801": [476, 479], "33217": [476, 479], "32227": [476, 479], "zekun": 476, "31558": [476, 479], "32433": [476, 479], "soffer": [476, 479], "31945": [476, 479], "pierr": [476, 477, 479], "quentel": [476, 479], "29654": [476, 479], "28707": 476, "31639": [476, 479], "5680": [476, 477, 479], "37627": [476, 477, 479], "saimadhav": [476, 477, 479], "heblikar": [476, 477, 479], "17535": [476, 477, 479], "garvit": [476, 479], "khatri": [476, 479], "29851": [476, 479], "30436": [476, 479], "30526": [476, 479], "15216": [476, 479], "20825": [476, 479], "30537": [476, 479], "10379": [476, 479], "30520": [476, 479], "30522": [476, 479], "31080": [476, 479], "29962": [476, 479], "nitish": [476, 479], "chandra": [476, 479], "22589": [476, 479], "20486": [476, 479], "30596": [476, 479], "vitor": [476, 479], "pereira": [476, 479], "30794": [476, 479], "18966": [476, 479], "28682": [476, 479], "25996": [476, 479], "16500": [476, 479], "31368": [476, 479], "19930": [476, 479], "32441": [476, 479], "32659": [476, 479], "ry": [476, 479], "30897": [476, 479], "31389": [476, 479], "32206": [476, 479], "bernhard": 476, "wiedemann": 476, "29708": [476, 479], "feanil": 476, "patel": 476, "31128": [476, 479], "14976": [476, 479], "31690": [476, 479], "25054": [476, 479], "30215": [476, 479], "30349": [476, 479], "10076": [476, 479], "30050": [476, 479], "32373": [476, 479], "32454": [476, 479], "29728": [476, 479], "cathi": 476, "averi": 476, "27584": [476, 479], "28134": [476, 479], "lele": [476, 479], "gaifax": [476, 479], "27645": [476, 479], "31843": [476, 479], "31399": [476, 479], "libssl": 476, "libressl": [476, 479], "32185": [476, 479], "mandeep": [476, 479], "singh": [476, 479], "23033": [476, 479], "blacklist": [476, 479], "whitelist": [476, 479], "31429": [476, 479], "28414": [476, 479], "32947": [476, 479], "20995": [476, 479], "29136": [476, 479], "30622": [476, 479], "33618": [476, 479], "32951": [476, 479], "32609": 476, "1198569": [476, 479], "bo": [476, 477, 479], "bayl": [476, 477, 479], "32102": [476, 477, 479], "clegg": [476, 479], "31756": [476, 479], "segev": [476, 479], "19764": [476, 479], "25942": [476, 479], "31353": [476, 479], "28740": [476, 479], "32591": [476, 479], "32025": [476, 479], "32585": [476, 479], "32121": [476, 479], "manuel": [476, 479], "krebber": [476, 479], "29377": [476, 479], "32265": [476, 479], "32717": 476, "haag": 476, "32071": [476, 479], "20804": [476, 479], "30541": [476, 479], "theun": [476, 479], "ratnadeep": [476, 479], "debnath": [476, 479], "16285": [476, 479], "22807": [476, 479], "32107": [476, 479], "20361": [476, 479], "32043": [476, 479], "32230": [476, 479], "31975": [476, 479], "31648": [476, 479], "simplexmlrpcdispatch": [476, 479], "7769": [476, 479], "irmen": 476, "jong": 476, "31072": [476, 479], "zhime": 476, "31638": [476, 479], "21417": [476, 479], "30693": [476, 479], "25658": [476, 479], "28411": [476, 479], "victorin": 476, "23699": [476, 479], "31338": [476, 479], "30054": 476, "31574": [476, 479], "28761": [476, 479], "28769": [476, 479], "milman": [476, 479], "28280": [476, 479], "27867": [476, 479], "10381": [476, 479], "30708": [476, 479], "abid": 476, "29102": [476, 479], "29240": [476, 479], "28822": [476, 479], "31370": [476, 479], "27979": [476, 479], "30450": [476, 479], "29300": 476, "29507": 476, "29452": 476, "29286": 476, "29585": [476, 479], "31333": [476, 479], "26110": [476, 479], "32296": [476, 479], "32348": [476, 479], "32355": [476, 479], "32351": [476, 479], "31970": [476, 479], "32226": [476, 479], "elliot": [476, 479], "gorokhovski": [476, 479], "28685": [476, 479], "31179": [476, 479], "32544": [476, 479], "24821": [476, 479], "28638": [476, 479], "32403": [476, 479], "28564": [476, 479], "30285": [476, 479], "31671": [476, 479], "30014": [476, 479], "eugen": [476, 479], "toder": [476, 479], "29469": [476, 479], "11549": 476, "70x": [476, 479], "wielgosik": [476, 479], "24700": [476, 479], "26121": [476, 479], "31344": [476, 479], "32305": [476, 479], "32303": [476, 479], "32690": [476, 479], "32304": [476, 479], "10544": [476, 477, 479], "28894": 476, "openfp": [476, 478, 479], "31985": [476, 479], "32253": [476, 479], "25988": [476, 479], "28847": [476, 479], "28692": [476, 479], "29576": [476, 479], "chi": [476, 479], "hsuan": [476, 479], "yen": [476, 479], "9850": [476, 479], "_dummy_thread": [476, 478, 479], "28332": [476, 479], "28124": [476, 479], "28799": [476, 479], "nix": 476, "jessi": 476, "trusti": 476, "lts": 476, "xenial": 476, "sles": 476, "sp3": 476, "splitunc": [476, 479], "_internaldict": [476, 479], "_overlap": [476, 479], "install_misc": [476, 479], "vander": [476, 479], "weel": [476, 479], "29218": [476, 479], "fpectl": [476, 479], "29137": [476, 479], "30291": [476, 479], "0p": [476, 479], "30362": [476, 479], "30406": [476, 479], "32670": [476, 479], "31709": [476, 479], "32012": [476, 479], "32023": [476, 479], "31233": [476, 479], "33540": [476, 479], "31151": [476, 479], "24744": [476, 479], "29193": [476, 479], "29192": [476, 479], "21071": [476, 479], "29979": [476, 479], "30399": [476, 479], "utkarsh": 476, "upadhyay": 476, "30302": [476, 479], "32308": [476, 479], "29995": [476, 479], "32331": [476, 479], "33169": [476, 479], "32327": [476, 479], "sottil": [476, 477, 478, 479], "26510": [476, 479], "31778": [476, 479], "28292": [476, 479], "32792": [476, 479], "nemec": 476, "33097": [476, 479], "tocknel": [476, 479], "23835": [476, 479], "32550": [476, 479], "28137": [476, 479], "latent": 476, "22257": [476, 479], "25612": [476, 479], "34247": 476, "affection": 477, "tusk": 477, "discount": 477, "clean_nam": 477, "allowed_nam": 477, "emili": [477, 479], "morehous": [477, 479], "35224": [477, 479], "impair": 477, "36540": [477, 479], "33499": [477, 479], "21536": [477, 479], "36722": [477, 479], "36721": [477, 479], "eric_idl": 477, "member_sinc": 477, "075": 477, "theta": 477, "36817": [477, 479], "_pyruntimest": [477, 479], "36763": [477, 479], "36974": [477, 478, 479], "36785": [477, 479], "32489": [477, 479], "33073": [477, 479], "37819": [477, 479], "20092": [477, 479], "copyright_year_pattern": 477, "eunic": [477, 479], "30688": [477, 479], "lapeyr": [477, 478, 479], "33462": [477, 479], "34641": [477, 479], "simpson": 477, "homer": 477, "marg": 477, "bart": 477, "cuthbert": [477, 479], "jordan": [477, 479], "32117": [477, 479], "15248": [477, 479], "32417": [477, 479], "1054041": [477, 479], "37032": [477, 479], "137": 477, "diophantin": 477, "equat": 477, "369": 477, "36027": [477, 479], "rn": 477, "heissler": 477, "glaser": [477, 479], "olivi": [477, 479], "grisel": [477, 479], "35900": [477, 479], "chardet": 477, "34632": [477, 479], "33416": [477, 479], "35766": [477, 479], "37028": [477, 479], "32528": [477, 479], "34687": [477, 479], "meili": [477, 479], "29883": [477, 479], "23057": [477, 479], "36999": [477, 479], "34270": [477, 479], "twisteroid": 477, "ambassador": 477, "33530": [477, 479], "34616": [477, 479], "remedi": 477, "35864": [477, 479], "sanderson": [477, 479], "29235": [477, 479], "selik": [477, 479], "34003": [477, 479], "31680": [477, 479], "36085": [477, 479], "36004": [477, 479], "36772": [477, 479], "21145": [477, 479], "taskmanag": 477, "32380": [477, 479], "36016": [477, 479], "franz": [477, 479], "glasner": 477, "2504": [477, 479], "guo": [477, 479], "teo": [477, 479], "34898": [477, 479], "6584": [477, 479], "13153": [477, 479], "4603": [477, 478], "johnni": [477, 478, 479], "najera": [477, 478, 479], "38944": [477, 478, 479], "37765": [477, 478, 479], "audioclip": 477, "bit_rat": 477, "kilohertz": 477, "36326": [477, 479], "1015": 477, "1045": 477, "34659": [477, 479], "31553": [477, 479], "jupyt": 477, "33897": [477, 479], "33089": [477, 479], "35606": [477, 479], "yash": [477, 479], "aggarw": [477, 479], "keller": [477, 479], "37128": [477, 479], "37178": [477, 479], "35431": [477, 479], "650320427": 477, "650320426": 477, "36887": [477, 479], "33083": [477, 479], "32941": [477, 479], "35813": [477, 479], "26836": [477, 479], "37834": [477, 479], "33721": [477, 479], "36264": [477, 479], "joannah": [477, 478, 479], "nanjeky": [477, 478, 479], "26978": [477, 479], "jon": [477, 478, 479], "janzen": [477, 478], "26707": [477, 479], "30670": [477, 479], "22640": [477, 479], "20849": [477, 479], "gerlach": [477, 479], "30661": 477, "17561": [477, 479], "37007": [477, 479], "34670": [477, 479], "35904": [477, 479], "35892": 477, "equiprob": 477, "36546": [477, 479], "36018": [477, 479], "temperature_feb": 477, "356099432828281": 477, "3184678262814532": 477, "2039930378537762": 477, "el_ni": 477, "climat": 477, "830080526611674": 477, "294144947901014": 477, "672102882379219": 477, "000027119750287": 477, "647488369766392": 477, "36829": [477, 479], "36268": [477, 479], "1230540": [477, 479], "tesler": 477, "36084": [477, 479], "selection_from": [477, 479], "selection_pres": [477, 479], "selection_rang": [477, 479], "selection_to": [477, 479], "juliett": [477, 479], "monsel": [477, 479], "34829": [477, 479], "moveto": [477, 479], "23831": [477, 479], "transparency_get": 477, "transparency_set": 477, "25451": [477, 479], "35702": [477, 479], "lat_long": 477, "grid_squar": 477, "xy_coordin": 477, "get_status": 477, "1415926536": 477, "belang": 477, "euresti": 477, "32285": [477, 479], "37966": [477, 479], "26467": [477, 479], "24412": [477, 479], "strandmark": [477, 479], "35047": [477, 479], "32972": [477, 479], "testrequest": 477, "test_get": 477, "32718": [477, 479], "36669": [477, 479], "17239": [477, 479], "28238": [477, 479], "13611": [477, 479], "36676": [477, 479], "36673": [477, 479], "35153": [477, 479], "35537": [477, 479], "smb": [477, 479], "33695": [477, 479], "pygc_head": [477, 478, 479], "33597": [477, 479], "bolsterle": [477, 479], "30977": [477, 479], "35664": [477, 479], "32492": [477, 479], "33234": [477, 479], "36012": [477, 479], "23867": 477, "35582": 477, "36127": 477, "26219": [477, 479], "36707": [477, 479], "8m": 477, "37m": 477, "35081": [477, 479], "pyobject_init_var": [477, 478, 479], "_py_dealloc": 477, "35059": [477, 479], "pybytearray_init": [477, 479], "pybytearray_fini": [477, 479], "35713": [477, 479], "33818": [477, 479], "dualiti": 477, "32430": [477, 479], "36048": [477, 479], "35810": [477, 478, 479], "37221": [477, 479], "38234": [477, 479], "37481": [477, 479], "29209": [477, 479], "34075": [477, 479], "9372": [477, 479], "36320": [477, 479], "32892": [477, 479], "36917": [477, 479], "36921": [477, 479], "34790": [477, 478, 479], "33710": [477, 479], "isal": [477, 478, 479], "35283": [477, 479], "sharedmemoryserv": 477, "36492": [477, 479], "36952": [477, 479], "35471": [477, 479], "35345": [477, 479], "36895": [477, 479], "25427": [477, 479], "36297": [477, 479], "30262": [477, 479], "36933": [477, 479], "34850": [477, 479], "35459": 477, "36793": [477, 479], "aix3": [477, 479], "36588": [477, 479], "36475": [477, 479], "37412": [477, 479], "34651": [477, 479], "37951": [477, 479], "36348": [477, 479], "31508": [477, 479], "roja": 477, "34160": [477, 479], "32749": [477, 479], "pycore_pyst": [477, 479], "35886": [477, 479], "2122": [477, 479], "33106": [477, 479], "32751": [477, 478, 479], "37027": [477, 479], "kb2533623": 477, "pgen": [477, 479], "36623": [477, 479], "pyeval_reinitthread": [477, 479], "36728": [477, 479], "36381": [477, 479], "foo_struct": [477, 478], "foo_new": 477, "33407": [477, 479], "32388": [477, 479], "pynode_addchild": 477, "pyparser_addtoken": 477, "libpython38": [477, 479], "mingw": [477, 479], "python38": 477, "gendef": 477, "37351": [477, 479], "unrol": [477, 479], "break_loop": [477, 479], "continue_loop": [477, 479], "setup_loop": [477, 479], "setup_except": [477, 479], "begin_fin": [477, 479], "call_fin": [477, 479], "pop_fin": [477, 479], "end_fin": [477, 479], "with_cleanup_start": [477, 479], "17611": [477, 479], "33041": [477, 479], "var_access_benchmark": [477, 478, 479], "35884": [477, 479], "read_loc": [477, 478], "read_nonloc": [477, 478], "read_glob": [477, 478], "read_builtin": [477, 478], "read_classvar_from_class": [477, 478], "read_classvar_from_inst": [477, 478], "read_instancevar": [477, 478], "read_instancevar_slot": [477, 478], "read_namedtupl": [477, 478], "read_boundmethod": [477, 478], "write_loc": [477, 478], "write_nonloc": [477, 478], "write_glob": [477, 478], "write_classvar": [477, 478], "write_instancevar": [477, 478], "write_instancevar_slot": [477, 478], "read_list": [477, 478], "read_dequ": [477, 478], "read_strdict": [477, 478], "write_list": [477, 478], "write_dequ": [477, 478], "write_dict": [477, 478], "write_strdict": [477, 478], "list_append_pop": [477, 478], "deque_append_pop": [477, 478], "deque_append_popleft": [477, 478], "loop_overhead": [477, 478], "i7": [477, 478], "4960hq": [477, 478], "36384": [477, 478, 479], "achraf": 477, "merzouki": 477, "_abc": [478, 479], "_bz2": [478, 479], "_codec": [478, 479], "_contextvar": [478, 479], "_crypt": [478, 479], "_functool": [478, 479], "_json": [478, 479], "multiphas": [478, 479], "_hashlib": [478, 479], "_posixsubprocess": [478, 479], "36144": [478, 479], "39939": [478, 479], "greet_al": 478, "ta": [478, 479], "kaya": [478, 479], "39481": [478, 479], "pythonoldpars": [478, 479], "ngalim": [478, 479], "siregar": [478, 479], "37444": [478, 479], "20443": [478, 479], "37388": [478, 479], "28029": [478, 479], "39702": [478, 479], "40257": [478, 479], "30773": [478, 479], "40824": [478, 479], "41848": 478, "43755": [478, 479], "17005": [478, 479], "37995": [478, 479], "38870": [478, 479], "39638": [478, 479], "34037": [478, 479], "38692": [478, 479], "32309": [478, 479], "typererror": [478, 479], "ido": [478, 479], "37404": [478, 479], "lum": 478, "frenzi": 478, "balhar": 478, "40495": [478, 479], "38112": [478, 479], "39349": [478, 479], "39812": [478, 479], "39207": [478, 479], "38312": [478, 479], "24416": [478, 479], "40698": [478, 479], "38602": [478, 479], "39259": [478, 479], "38379": [478, 479], "39322": [478, 479], "xof": [478, 479], "37630": [478, 479], "40479": [478, 479], "39509": [478, 479], "rhode": [478, 479], "39507": [478, 479], "38615": [478, 479], "40375": [478, 479], "39336": [478, 479], "39791": [478, 479], "36350": [478, 479], "39775": [478, 479], "oleksandr": [478, 479], "pavliuk": [478, 479], "34788": [478, 479], "39648": [478, 479], "ananthakrishnan": 478, "39479": [478, 479], "39288": [478, 479], "39310": [478, 479], "30966": [478, 479], "38493": [478, 479], "38713": [478, 479], "39413": [478, 479], "39395": [478, 479], "40094": [478, 479], "girt": [478, 479], "folkmani": [478, 479], "30618": [478, 479], "hopper": [478, 479], "lidral": [478, 479], "porter": [478, 479], "20523": [478, 479], "bordum": [478, 479], "37376": [478, 479], "40286": [478, 479], "38712": [478, 479], "39329": [478, 479], "tatschner": 478, "25780": [478, 479], "40291": [478, 479], "shinya": [478, 479], "okano": [478, 479], "28724": [478, 479], "thread_cputim": [478, 479], "40192": [478, 479], "jek": [478, 479], "charalampo": [478, 479], "strataki": [478, 479], "1294959": [478, 479], "jendrik": [478, 479], "seipp": [478, 479], "13601": [478, 479], "huon": 478, "40630": 478, "varoquaux": [478, 479], "konstantin": [478, 479], "kashin": [478, 479], "39926": [478, 479], "37663": [478, 479], "eoln": 478, "mefistot": 478, "39011": [478, 479], "32856": [478, 479], "40010": [478, 479], "closefrom": [478, 479], "mast": [478, 479], "conrad": [478, 479], "kubilay": [478, 479], "kocak": [478, 479], "38061": [478, 479], "87x": 478, "37986": [478, 479], "37207": [478, 479], "kapun": [478, 479], "8425": [478, 479], "thrash": [478, 479], "37257": [478, 479], "39434": [478, 479], "37348": [478, 479], "39586": [478, 479], "37315": [478, 479], "35712": [478, 479], "28286": [478, 479], "splitlist": [478, 479], "hexbin4": [478, 479], "rledecode_hqx": [478, 479], "39353": [478, 479], "34822": [478, 479], "augload": [478, 479], "augstor": [478, 479], "39639": [478, 479], "39969": [478, 479], "39988": [478, 479], "39877": [478, 479], "33262": [478, 479], "colvin": [478, 479], "xgtitl": [478, 479], "39366": [478, 479], "38916": [478, 479], "call_profil": [478, 479], "37414": [478, 479], "37392": [478, 479], "pyimport_cleanup": 478, "36710": 478, "37312": [478, 479], "37320": [478, 479], "37804": [478, 479], "36543": [478, 479], "36409": [478, 479], "pygen_needsfin": [478, 479], "15088": [478, 479], "39351": [478, 479], "39350": [478, 479], "39357": [478, 479], "39377": [478, 479], "34793": [478, 479], "39489": [478, 479], "40182": [478, 479], "has_exec": [478, 479], "40208": [478, 479], "40967": [478, 479], "39239": [478, 479], "39562": [478, 479], "34538": 478, "37742": [478, 479], "aiudi": [478, 479], "34775": [478, 479], "latex_latin1": 478, "jordon": 478, "xu": [478, 479], "37751": [478, 479], "foo_travers": 478, "0x03090000": 478, "29548": [478, 479], "34880": [478, 479], "39156": [478, 479], "setenv": [478, 479], "10945": [478, 479], "isysroot": [478, 479], "34956": [478, 479], "33125": [478, 479], "36044": [478, 479], "37707": [478, 479], "marcel": [478, 479], "plch": [478, 479], "38787": [478, 479], "40421": [478, 479], "39947": [478, 479], "37194": [478, 479], "38644": [478, 479], "39542": [478, 479], "40024": [478, 479], "40241": [478, 479], "_pyobject_functionstr": [478, 479], "37645": [478, 479], "37483": [478, 479], "38500": [478, 479], "39984": [478, 479], "38650": [478, 479], "pycore_gc": 478, "pyunicode_wstr_length": [478, 479], "39882": [478, 479], "37540": [478, 479], "pyobject_new_var": [478, 479], "pyobject_get_weakrefs_listptr": [478, 479], "pyfpe_start_protect": [478, 479], "pyfpe_end_protect": [478, 479], "38835": [478, 479], "37878": [478, 479], "_py_newrefer": [478, 479], "_py_forgetrefer": [478, 479], "_pytracemalloc_newrefer": [478, 479], "_py_getreftot": [478, 479], "pytrash_unwind_level": [478, 479], "py_trashcan_begin_condit": [478, 479], "_pydebug_printtotalref": 478, "_py_printrefer": 478, "_py_printreferenceaddress": 478, "_py_tracemalloc_config": 478, "_py_addtoallobject": 478, "getfram": [478, 479], "_pythreadstate_getfram": [478, 479], "pythreadframegett": [478, 479], "39946": [478, 479], "37340": [478, 479], "38896": [478, 479], "40428": [478, 479], "pyasyncgen_clearfreelist": [478, 479], "pycontext_clearfreelist": [478, 479], "pydict_clearfreelist": [478, 479], "pyfloat_clearfreelist": [478, 479], "pyframe_clearfreelist": [478, 479], "pylist_clearfreelist": [478, 479], "pymethod_clearfreelist": [478, 479], "pycfunction_clearfreelist": [478, 479], "pyset_clearfreelist": [478, 479], "pytuple_clearfreelist": [478, 479], "pyunicode_clearfreelist": [478, 479], "_pyunicode_clearstaticstr": [478, 479], "39465": [478, 479], "_pybytes_insertthousandsgroupinglocal": [478, 479], "_pybytes_insertthousandsgroup": [478, 479], "_py_initializefromarg": [478, 479], "_py_initializefromwidearg": [478, 479], "_pyfloat_repr": [478, 479], "_pyfloat_digit": [478, 479], "_pyfloat_digitsinit": [478, 479], "pyframe_extendstack": [478, 479], "_pyaiterwrapper_typ": [478, 479], "pynullimporter_typ": [478, 479], "pycmpwrapper_typ": [478, 479], "pysortwrapper_typ": [478, 479], "pynoargsfunct": [478, 479], "39372": [478, 479], "lawrenc": [478, 479], "anna": 478, "41100": [478, 479], "107774": 479, "register_callback": 479, "107724": 479, "rc1": 479, "py_throw": 479, "106684": 479, "106052": 479, "107814": 479, "find_python": 479, "107810": 479, "102988": 479, "12beta4": 479, "106669": 479, "102509": 479, "ob_digit": 479, "107263": 479, "104432": 479, "unalign": 479, "fsanizit": 479, "chavez": 479, "106898": 479, "py_unind": 479, "py_unwind": 479, "hanld": 479, "106895": 479, "funtion": 479, "106897": 479, "104621": 479, "106917": 479, "105699": 479, "initialz": 479, "106092": 479, "frame_dealloc": 479, "106719": 479, "106723": 479, "105235": 479, "107077": 479, "ssl_error_syscal": 479, "ssl_error_ssl": 479, "err_lib_ssl": 479, "ssl_r_certificate_verify_fail": 479, "appropi": 479, "107576": 479, "46376": 479, "62519": 479, "83006": 479, "106186": 479, "105002": 479, "106831": 479, "d2i_ssl_sess": 479, "_ssl": 479, "106774": 479, "106752": 479, "106602": 479, "106530": 479, "106403": 479, "106350": 479, "libtommath": 479, "mp_init": 479, "106263": 479, "signaldict": 479, "charli": 479, "zhao": 479, "105626": 479, "18319": 479, "107305": 479, "nearbi": 479, "107008": 479, "106948": 479, "nitpick_ignor": 479, "54738": 479, "107237": 479, "test_log": 479, "test_udp_reconnect": 479, "106714": 479, "test_capi": 479, "test_no_fatalerror_infinite_loop": 479, "104090": 479, "test_zipfil": 479, "_path": 479, "106881": 479, "106962": 479, "mpi": 479, "101538": 479, "takashi": 479, "99079": 479, "106970": 479, "103186": 479, "config_arg": 479, "ijtaba": 479, "hussain": 479, "107226": 479, "27043": 479, "_parseaddr": 479, "addresslist": 479, "106396": 479, "106145": 479, "105979": 479, "_imp": 479, "get_frozen_object": 479, "105908": 479, "99111": 479, "barry_as_flufl": 479, "105340": 479, "105486": 479, "101006": 479, "106524": 479, "106510": 479, "106503": 479, "_selectorsockettransport": 479, "_write_readi": 479, "105497": 479, "90876": 479, "106292": 479, "106330": 479, "102541": 479, "106152": 479, "106075": 479, "105987": 479, "105974": 479, "96145": 479, "104554": 479, "94777": 479, "106232": 479, "101634": 479, "jn": 479, "testn": 479, "106118": 479, "12b1": 479, "103295": 479, "104692": 479, "commoninstal": 479, "bininstal": 479, "106359": 479, "splat": 479, "105227": 479, "105840": 479, "105831": 479, "105800": 479, "105587": 479, "_pystaticobject_checkrefcnt": 479, "105564": 479, "artificil": 479, "105549": 479, "105588": 479, "105375": 479, "105435": 479, "105390": 479, "104812": 479, "ergo": 479, "105808": 479, "101251": 479, "zip_mod": 479, "104799": 479, "105745": 479, "_unpickler_setinputstream": 479, "105605": 479, "_datetim": 479, "_elementtre": 479, "105332": 479, "104310": 479, "allowing_all_extens": 479, "104996": 479, "105084": 479, "wheel_pkg_dir": 479, "105436": 479, "105603": 479, "own_gil": 479, "103968": 479, "103142": 479, "1u": 479, "cves": 479, "99108": 479, "105259": 479, "105324": 479, "98963": 479, "12beta1": 479, "105194": 479, "105162": 479, "105164": 479, "105035": 479, "105017": 479, "105013": 479, "104976": 479, "tokeninfo": 479, "104972": 479, "104955": 479, "104690": 479, "104879": 479, "104825": 479, "105280": 479, "105239": 479, "105080": 479, "105144": 479, "105113": 479, "103631": 479, "104947": 479, "104935": 479, "104874": 479, "104797": 479, "104372": 479, "104399": 479, "mp_to_unsigned_bin_n": 479, "mp_unsigned_bin_s": 479, "102024": 479, "_idle_semaphor": 479, "_worker": 479, "89455": 479, "89412": 479, "104943": 479, "90005": 479, "libbsd": 479, "105146": 479, "103646": 479, "unwrit": 479, "88745": 479, "copyfile2": 479, "104820": 479, "exfat": 479, "104803": 479, "104719": 479, "105115": 479, "beta1": 479, "105071": 479, "99889": 479, "104049": 479, "102153": 479, "24329": 479, "104615": 479, "104572": 479, "104482": 479, "102818": 479, "104405": 479, "103082": 479, "104263": 479, "mip": 479, "py_infin": 479, "berg": 479, "99113": 479, "104108": 479, "104142": 479, "104078": 479, "104066": 479, "104028": 479, "104018": 479, "102213": 479, "103895": 479, "103907": 479, "103899": 479, "103845": 479, "103763": 479, "load_classdict_or_glob": 479, "load_classdict_or_deref": 479, "103801": 479, "ruff": 479, "102310": 479, "103650": 479, "sunmy2019": 479, "100530": 479, "101517": 479, "103492": 479, "87729": 479, "103488": 479, "82012": 479, "103333": 479, "103242": 479, "103323": 479, "tstate_curr": 479, "102700": 479, "88691": 479, "97933": 479, "99184": 479, "98003": 479, "39610": 479, "mem_0d": 479, "31821": 479, "104600": 479, "104340": 479, "104555": 479, "104484": 479, "75367": 479, "104536": 479, "stracktrac": 479, "101520": 479, "104392": 479, "_paramspec_tvar": 479, "102613": 479, "103000": 479, "elli": 479, "104301": 479, "104139": 479, "unsplit": 479, "itm": 479, "104307": 479, "87695": 479, "104265": 479, "0a4": 479, "23224": 479, "14935": 479, "radislav": 479, "chugunov": 479, "65772": 479, "90208": 479, "104144": 479, "fututr": 479, "104114": 479, "104104": 479, "104102": 479, "103822": 479, "103963": 479, "call_intrinsic_": 479, "104035": 479, "103987": 479, "103977": 479, "88773": 479, "liam": 479, "gersten": 479, "103935": 479, "68968": 479, "100370": 479, "102628": 479, "103583": 479, "_multibytecodec": 479, "103848": 479, "ipvfutur": 479, "103872": 479, "99944": 479, "74940": 479, "103861": 479, "103839": 479, "tommath": 479, "103791": 479, "90750": 479, "103685": 479, "tclerror": 479, "81403": 479, "endtransf": 479, "voidresp": 479, "89415": 479, "rees": 479, "hyde": 479, "103673": 479, "berri": 479, "84976": 479, "_pydatetim": 479, "103596": 479, "103584": 479, "stipul": 479, "typesh": 479, "9620": 479, "103578": 479, "103556": 479, "103559": 479, "103548": 479, "103538": 479, "tk_aqua": 479, "103533": 479, "103525": 479, "103365": 479, "103472": 479, "103462": 479, "103449": 479, "103092": 479, "_collect": 479, "103357": 479, "harel": 479, "_protocolmeta": 479, "_is_callable_members_on": 479, "_get_protocol_attr": 479, "103256": 479, "103285": 479, "103225": 479, "93910": 479, "memmber": 479, "102978": 479, "100479": 479, "103220": 479, "103204": 479, "75586": 479, "103143": 479, "102953": 479, "97696": 479, "81079": 479, "101819": 479, "101362": 479, "102114": 479, "62432": 479, "78079": 479, "85984": 479, "101688": 479, "101640": 479, "83861": 479, "89550": 479, "99353": 479, "96522": 479, "96534": 479, "87474": 479, "gorgen": 479, "51574": 479, "94518": 479, "fork_exec": 479, "92184": 479, "46797": 479, "44844": 479, "45606": 479, "23041": 479, "24964": 479, "17258": 479, "39744": 479, "22708": 479, "67056": 479, "48241": 479, "86094": 479, "yeojin": 479, "andrea": 479, "giudiceandrea": 479, "99202": 479, "104494": 479, "test_pack_configure_in": 479, "test_place_configure_in": 479, "104461": 479, "test_configure_screen": 479, "86275": 479, "103329": 479, "102795": 479, "test_control_and_wait": 479, "75729": 479, "101282": 479, "99017": 479, "104490": 479, "phoni": 479, "104106": 479, "mkfifoat": 479, "mknodat": 479, "103532": 479, "tkinter_protect_loadtk": 479, "91152": 479, "99069": 479, "static_assert": 479, "100220": 479, "104623": 479, "82814": 479, "103088": 479, "102997": 479, "88013": 479, "99834": 479, "103545": 479, "104180": 479, "schott": 479, "60436": 479, "104499": 479, "104496": 479, "someday": 479, "88496": 479, "104389": 479, "101291": 479, "104109": 479, "103743": 479, "103091": 479, "101408": 479, "prehead": 479, "96803": 479, "89987": 479, "101975": 479, "stacktop": 479, "100982": 479, "compare_and_branch": 479, "102701": 479, "102594": 479, "90997": 479, "102491": 479, "ironlanguag": 479, "ironpython3": 479, "1667": 479, "rearrag": 479, "2s": 479, "102397": 479, "102406": 479, "102281": 479, "nullptr": 479, "fileutil": 479, "bachmann": 479, "102300": 479, "102255": 479, "xbox": 479, "102027": 479, "sse2": 479, "sse3": 479, "_blake2": 479, "101865": 479, "moham": 479, "koubaa": 479, "103085": 479, "103068": 479, "102549": 479, "103056": 479, "103046": 479, "103023": 479, "102947": 479, "102780": 479, "102839": 479, "88965": 479, "76846": 479, "102670": 479, "102615": 479, "100112": 479, "102578": 479, "74468": 479, "102378": 479, "_signature_strip_non_python_syntax": 479, "79940": 479, "102103": 479, "102069": 479, "102038": 479, "98886": 479, "101673": 479, "101313": 479, "100372": 479, "89727": 479, "100131": 479, "48330": 479, "98169": 479, "96931": 479, "95495": 479, "close_notifi": 479, "94684": 479, "94440": 479, "36305": 479, "103112": 479, "102980": 479, "102537": 479, "test_zoneinfo": 479, "tzpathtest": 479, "python_tzpath_context": 479, "101377": 479, "test_locale_calendar_formatweekday": 479, "102973": 479, "dockerfil": 479, "102711": 479, "wstrict": 479, "102690": 479, "102809": 479, "102013": 479, "pyunstable_visitobject": 479, "101727": 479, "1t": 479, "0286": 479, "4303": 479, "libtomcrypt": 479, "101283": 479, "102493": 479, "102416": 479, "102356": 479, "102336": 479, "102250": 479, "102126": 479, "getcurrentprocessid": 479, "102056": 479, "for_iter_rang": 479, "101967": 479, "positional_only_passed_as_keyword": 479, "101952": 479, "74895": 479, "sai_servic": 479, "101799": 479, "101857": 479, "musl": 479, "84783": 479, "87849": 479, "101765": 479, "101430": 479, "presiz": 479, "101696": 479, "_pystatictype_dealloc": 479, "101632": 479, "100719": 479, "98627": 479, "102302": 479, "101979": 479, "91038": 479, "81652": 479, "102179": 479, "101961": 479, "hookcompress": 479, "gihwan": 479, "101936": 479, "vo": 479, "101566": 479, "97930": 479, "multiplexedpath": 479, "265": 479, "101997": 479, "_sha2": 479, "_sha256": 479, "_sha512": 479, "101892": 479, "87634": 479, "97786": 479, "101773": 479, "_normal": 479, "101693": 479, "101446": 479, "63301": 479, "101360": 479, "101277": 479, "100809": 479, "99138": 479, "96764": 479, "88233": 479, "leakag": 479, "85417": 479, "97725": 479, "102019": 479, "test_current_": 479, "89792": 479, "test_tool": 479, "99942": 479, "100221": 479, "sharedinstal": 479, "96821": 479, "102344": 479, "101881": 479, "101849": 479, "101763": 479, "101759": 479, "101614": 479, "python3_d": 479, "101196": 479, "101907": 479, "99293": 479, "91744": 479, "689": 479, "92173": 479, "59956": 479, "101400": 479, "101372": 479, "101266": 479, "pylongvalu": 479, "101046": 479, "101037": 479, "underalloc": 479, "100762": 479, "100942": 479, "100923": 479, "100892": 479, "91351": 479, "100726": 479, "100712": 479, "enable_speci": 479, "32780": 479, "pep3118": 479, "101541": 479, "psuedo": 479, "101570": 479, "101323": 479, "_zlibdecompressor": 479, "101317": 479, "101326": 479, "futureit": 479, "92123": 479, "100795": 479, "freeaddrinfo": 479, "brester": 479, "101143": 479, "_add_callback": 479, "101144": 479, "stress": 479, "supplimentari": 479, "101015": 479, "100573": 479, "39615": 479, "100750": 479, "96290": 479, "99952": 479, "undercount": 479, "67790": 479, "99266": 479, "86682": 479, "60580": 479, "38941": 479, "40077": 479, "29847": 479, "77772": 479, "hoelzl": 479, "88324": 479, "reword": 479, "101334": 479, "test_tarfil": 479, "configr": 479, "depreact": 479, "101522": 479, "77532": 479, "platformtoolset": 479, "clangcl": 479, "101152": 479, "100340": 479, "wno": 479, "101060": 479, "98705": 479, "98636": 479, "gdbm_compat": 479, "_gdbm": 479, "96305": 479, "_aix_support": 479, "_bootsubprocess": 479, "101543": 479, "101467": 479, "101135": 479, "82052": 479, "32k": 479, "mojibak": 479, "100320": 479, "100247": 479, "100776": 479, "99005": 479, "unary_posit": 479, "list_to_tupl": 479, "call_instrinsic_1": 479, "import_star": 479, "print_expr": 479, "stopiteration_error": 479, "100288": 479, "load_attr_method_with_dict": 479, "100720": 479, "_pyframe_numslotsforcodeobject": 479, "co_nplaincellvar": 479, "100637": 479, "100649": 479, "native_thread_id": 479, "100126": 479, "87447": 479, "100268": 479, "100374": 479, "socular": 479, "100357": 479, "100117": 479, "90043": 479, "100222": 479, "_py_codeunit": 479, "pun": 479, "99955": 479, "100188": 479, "binary_subscr_list_int": 479, "binary_subscr_tuple_int": 479, "99110": 479, "pyframe_new": 479, "94155": 479, "99540": 479, "100143": 479, "xpystat": 479, "100146": 479, "_pylist_fromarrayst": 479, "100110": 479, "100050": 479, "92216": 479, "99582": 479, "_bootstrap_python": 479, "99554": 479, "98522": 479, "94603": 479, "89051": 479, "32782": 479, "100833": 479, "100805": 479, "100813": 479, "100792": 479, "91851": 479, "microoptim": 479, "90104": 479, "100689": 479, "pyexpat_capi": 479, "100740": 479, "91219": 479, "100690": 479, "called_onc": 479, "86508": 479, "shim": 479, "100585": 479, "100562": 479, "100519": 479, "eff_request_host": 479, "100287": 479, "100488": 479, "100474": 479, "100363": 479, "78878": 479, "cfield": 479, "100348": 479, "_read_ready_cb": 479, "100272": 479, "83076": 479, "100228": 479, "100039": 479, "100133": 479, "44592": 479, "100098": 479, "85432": 479, "98778": 479, "99925": 479, "94943": 479, "83035": 479, "99576": 479, "94912": 479, "99509": 479, "99433": 479, "85267": 479, "__text_signatur": 479, "98030": 479, "88500": 479, "96127": 479, "95882": 479, "78707": 479, "92122": 479, "24132": 479, "40447": 479, "36880": 479, "100616": 479, "100472": 479, "25377": 479, "100454": 479, "100086": 479, "libregrtest": 479, "93018": 479, "libexpat": 479, "100540": 479, "dusing_apple_os_libffi": 479, "88267": 479, "41916": 479, "ac_cv_cxx_thread": 479, "100180": 479, "99191": 479, "_msvc_lang": 479, "202002l": 479, "_msc_ver": 479, "1929": 479, "_wmimodul": 479, "79218": 479, "ms_win64": 479, "w64": 479, "99941": 479, "43984": 479, "34816": 479, "100342": 479, "99947": 479, "99240": 479, "100001": 479, "87604": 479, "99891": 479, "99729": 479, "99708": 479, "99578": 479, "create_builtin": 479, "99581": 479, "caract": 479, "99553": 479, "99370": 479, "99377": 479, "98686": 479, "binary_op_gener": 479, "compare_op_gener": 479, "99298": 479, "91053": 479, "90994": 479, "45026": 479, "31718": 479, "38031": 479, "ambigui": 479, "79033": 479, "51524": 479, "99645": 479, "99508": 479, "_bootstrap_extern": 479, "66285": 479, "wakeupfd": 479, "97001": 479, "92647": 479, "99341": 479, "99382": 479, "99379": 479, "99344": 479, "99284": 479, "untest": 479, "99201": 479, "have_dynamic_load": 479, "str_convert": 479, "post_pars": 479, "64490": 479, "99029": 479, "nake": 479, "98253": 479, "resili": 479, "exacerb": 479, "98458": 479, "93453": 479, "basedefaulteventlooppolici": 479, "97966": 479, "uname_result": 479, "98248": 479, "98108": 479, "98098": 479, "82836": 479, "96828": 479, "ktls": 479, "88863": 479, "91078": 479, "47220": 479, "ogam": 479, "44817": 479, "error_bad_netpath": 479, "error_network_access_deni": 479, "161": 479, "error_bad_pathnam": 479, "41260": 479, "15999": 479, "99931": 479, "sphinxext": 479, "opengraph": 479, "89682": 479, "88330": 479, "92892": 479, "41825": 479, "99892": 479, "test_norm": 479, "test_unicodedata": 479, "normalizationtest": 479, "pythontest": 479, "99934": 479, "test_marsh": 479, "test_determinist": 479, "99741": 479, "630": 479, "_xxsubinterpret": 479, "99659": 479, "test_sqlite3": 479, "99593": 479, "96002": 479, "99086": 479, "wimplicit": 479, "99337": 479, "98872": 479, "88226": 479, "target_": 479, "use_computed_goto": 479, "99345": 479, "98629": 479, "99442": 479, "40882": 479, "87235": 479, "98940": 479, "_pyarg_unpackkeywordswithvararg": 479, "noptarg": 479, "98680": 479, "pybuf_": 479, "99612": 479, "98433": 479, "3xx": 479, "5894": 479, "98739": 479, "81057": 479, "99254": 479, "99205": 479, "99181": 479, "99204": 479, "96055": 479, "99153": 479, "unquicken": 479, "extended_arg_quick": 479, "warmup": 479, "99103": 479, "96793": 479, "98852": 479, "98925": 479, "98783": 479, "98811": 479, "imped": 479, "98762": 479, "unbox": 479, "99257": 479, "93143": 479, "96421": 479, "frame_owned_by_cstack": 479, "98415": 479, "chaim": 479, "sander": 479, "92119": 479, "90716": 479, "_pylong": 479, "asymptot": 479, "longobject": 479, "95389": 479, "noam": 479, "cohen": 479, "93696": 479, "99418": 479, "99305": 479, "74044": 479, "99275": 479, "__initsubclass__": 479, "99277": 479, "_sslprotocoltransport": 479, "sslproto": 479, "99248": 479, "99155": 479, "93464": 479, "99134": 479, "98999": 479, "83004": 479, "_zoneinfo": 479, "98897": 479, "98878": 479, "98139": 479, "90352": 479, "_selectordatagramtransport": 479, "98793": 479, "wsaconnect": 479, "wsasendto": 479, "98744": 479, "98740": 479, "98703": 479, "98624": 479, "98284": 479, "96151": 479, "98086": 479, "72719": 479, "96192": 479, "92452": 479, "91803": 479, "38523": 479, "36267": 479, "98832": 479, "98903": 479, "98713": 479, "87390": 479, "96853": 479, "34272": 479, "pthread_scope_system": 479, "99016": 479, "97731": 479, "docclean": 479, "98949": 479, "98989": 479, "98831": 479, "cases_gener": 479, "generated_cas": 479, "98817": 479, "pyproj": 479, "98776": 479, "levenshtein": 479, "98707": 479, "98689": 479, "37434": 479, "inflategethead": 479, "98790": 479, "98745": 479, "98692": 479, "94328": 479, "98978": 479, "benedikt": 479, "reinartz": 479, "98410": 479, "98610": 479, "_py_newinterpreterfromconfig": 479, "98608": 479, "_pyinterpreterconfig": 479, "_py_newinterpret": 479, "isolated_subinterpret": 479, "97616": 479, "limor": 479, "97514": 479, "escal": 479, "42919": 479, "87389": 479, "hamza": 479, "avvan": 479, "79096": 479, "92888": 479, "98374": 479, "98461": 479, "98354": 479, "98398": 479, "98390": 479, "97997": 479, "97973": 479, "96078": 479, "97955": 479, "97912": 479, "97002": 479, "97943": 479, "erad": 479, "86298": 479, "97779": 479, "97752": 479, "97591": 479, "97670": 479, "getdxp": 479, "analyze_dxp": 479, "dxp": 479, "dynamic_execution_profil": 479, "dxpair": 479, "94526": 479, "96975": 479, "96848": 479, "95921": 479, "_testcapimodul": 479, "95778": 479, "96387": 479, "mingliang": 479, "96864": 479, "96678": 479, "96754": 479, "backtrac": 479, "96751": 479, "64373": 479, "96641": 479, "keywrapp": 479, "96636": 479, "setrac": 479, "96572": 479, "96611": 479, "96612": 479, "90230": 479, "96587": 479, "96569": 479, "behavoir": 479, "96582": 479, "_pythread_currentfram": 479, "91079": 479, "93911": 479, "96348": 479, "95196": 479, "96364": 479, "96352": 479, "93554": 479, "fallthrough": 479, "backward_target": 479, "next_block": 479, "pop_jump_forward_if_tru": 479, "pop_jump_backward_if_tru": 479, "pop_jump_forward_if_fals": 479, "pop_jump_backward_if_fals": 479, "pop_jump_forward_if_non": 479, "pop_jump_backward_if_non": 479, "pop_jump_forward_if_not_non": 479, "pop_jump_backward_if_not_non": 479, "96268": 479, "96237": 479, "f_func": 479, "f_funcobj": 479, "96187": 479, "96143": 479, "96071": 479, "96046": 479, "ht_cached_key": 479, "96005": 479, "pyenv": 479, "93678": 479, "_testinternalcapi": 479, "optimize_cfg": 479, "cfgoptimizationtestcas": 479, "95245": 479, "weakreflist": 479, "95977": 479, "91210": 479, "95922": 479, "eliminate_empty_basic_block": 479, "95818": 479, "95876": 479, "_pypegen_raise_error_known_loc": 479, "95605": 479, "95150": 479, "91146": 479, "87092": 479, "codegen": 479, "95355": 479, "_pypegen_parser_new": 479, "honglin": 479, "zhu": 479, "90081": 479, "slowdown": 479, "95324": 479, "cfg_builder": 479, "95185": 479, "absurd": 479, "94438": 479, "95060": 479, "addrq": 479, "95113": 479, "91409": 479, "95023": 479, "94036": 479, "94938": 479, "94996": 479, "94739": 479, "94949": 479, "94947": 479, "91256": 479, "94869": 479, "94893": 479, "94822": 479, "91153": 479, "90699": 479, "94694": 479, "93252": 479, "94215": 479, "92228": 479, "94485": 479, "91719": 479, "94329": 479, "1000s": 479, "94360": 479, "int_min": 479, "94262": 479, "94192": 479, "93883": 479, "94163": 479, "94021": 479, "93955": 479, "93841": 479, "_stats_on": 479, "_stats_off": 479, "_stats_clear": 479, "_stats_dump": 479, "93516": 479, "traceabl": 479, "89828": 479, "93671": 479, "93662": 479, "93461": 479, "93621": 479, "93533": 479, "93444": 479, "basicblock": 479, "b_nofallthrough": 479, "b_exit": 479, "b_return": 479, "93418": 479, "93382": 479, "93359": 479, "93356": 479, "93354": 479, "93283": 479, "93345": 479, "93223": 479, "84694": 479, "91924": 479, "93040": 479, "93061": 479, "93065": 479, "hamt": 479, "libman": 479, "magicstack": 479, "93021": 479, "89914": 479, "92955": 479, "92930": 479, "90690": 479, "92914": 479, "92858": 479, "92804": 479, "92777": 479, "92658": 479, "92236": 479, "91102": 479, "92619": 479, "88750": 479, "92261": 479, "91432": 479, "91399": 479, "unicodetype_db": 479, "91578": 479, "47091": 479, "42316": 479, "89237": 479, "97928": 479, "98331": 479, "98307": 479, "96035": 479, "98257": 479, "98251": 479, "98178": 479, "44098": 479, "87730": 479, "98023": 479, "90985": 479, "harsh": 479, "undeprec": 479, "97646": 479, "9239": 479, "97837": 479, "97825": 479, "97008": 479, "82711": 479, "friedrich": 479, "bolz": 479, "tereick": 479, "97799": 479, "97781": 479, "mutablil": 479, "96827": 479, "95534": 479, "97592": 479, "97639": 479, "97545": 479, "73588": 479, "96865": 479, "97005": 479, "85760": 479, "96704": 479, "96819": 479, "resource_track": 479, "95865": 479, "96741": 479, "96735": 479, "46412": 479, "ndb": 479, "96652": 479, "68163": 479, "96538": 479, "96465": 479, "96079": 479, "_annotatedalia": 479, "96415": 479, "_cell_factori": 479, "95987": 479, "96388": 479, "96385": 479, "__typing_prepare_subst__": 479, "96142": 479, "_dataclassparam": 479, "96073": 479, "overeag": 479, "89258": 479, "96346": 479, "96349": 479, "90467": 479, "streamreaderprotocol": 479, "96172": 479, "96159": 479, "96175": 479, "96052": 479, "96125": 479, "96019": 479, "makeunicodedata": 479, "95463": 479, "69142": 479, "tzoffset": 479, "95899": 479, "95736": 479, "95804": 479, "95704": 479, "95149": 479, "95609": 479, "95289": 479, "manger": 479, "94909": 479, "95385": 479, "83901": 479, "95339": 479, "95045": 479, "95231": 479, "95097": 479, "95087": 479, "95199": 479, "95194": 479, "93899": 479, "95166": 479, "95132": 479, "11a1": 479, "24421": 479, "85128": 479, "93157": 479, "91212": 479, "shin": 479, "myoung": 479, "serp": 479, "95077": 479, "95109": 479, "95105": 479, "95066": 479, "95005": 479, "_pyaccu": 479, "_pyunicodewrit": 479, "90085": 479, "94857": 479, "94821": 479, "94736": 479, "_multiprocess": 479, "semlock": 479, "74116": 479, "87822": 479, "priorit": 479, "88050": 479, "94637": 479, "ssl_ctx_set_default_verify_path": 479, "92546": 479, "94607": 479, "94619": 479, "93896": 479, "94343": 479, "94382": 479, "78724": 479, "94510": 479, "92336": 479, "94398": 479, "94318": 479, "89988": 479, "94254": 479, "93259": 479, "from_nam": 479, "93096": 479, "test_codec": 479, "encodedfiletest": 479, "94207": 479, "_struct": 479, "test_base64": 479, "legacybase64testcas": 479, "test_encodebyt": 479, "94214": 479, "94182": 479, "91742": 479, "94101": 479, "84753": 479, "mehdi": 479, "abaakouk": 479, "94028": 479, "27884": 479, "93973": 479, "93858": 479, "93820": 479, "93847": 479, "83499": 479, "79512": 479, "91389": 479, "93626": 479, "90494": 479, "90549": 479, "93521": 479, "79579": 479, "93421": 479, "93475": 479, "93370": 479, "91810": 479, "91162": 479, "93353": 479, "83658": 479, "88123": 479, "93297": 479, "gced": 479, "85308": 479, "93156": 479, "93162": 479, "92886": 479, "90155": 479, "91513": 479, "93033": 479, "0x0100": 479, "0x00010000": 479, "89973": 479, "93044": 479, "93010": 479, "invalidheadererror": 479, "invalidheaderdefect": 479, "92986": 479, "92932": 479, "92675": 479, "87901": 479, "11b1": 479, "91922": 479, "92869": 479, "92839": 479, "89325": 479, "92734": 479, "92671": 479, "91581": 479, "92550": 479, "92591": 479, "92445": 479, "92547": 479, "92530": 479, "92531": 479, "84131": 479, "92391": 479, "mueller": 479, "91968": 479, "81790": 479, "90622": 479, "91577": 479, "91539": 479, "getproxies_environ": 479, "91447": 479, "91456": 479, "47231": 479, "39064": 479, "41287": 479, "32547": 479, "35540": 479, "47063": 479, "47025": 479, "46951": 479, "42777": 479, "46755": 479, "45393": 479, "46642": 479, "46364": 479, "28249": 479, "46197": 479, "45924": 479, "44173": 479, "42627": 479, "42047": 479, "dragonfli": 479, "carlier": 479, "14243": 479, "41246": 479, "iocpproactor": 479, "39264": 479, "38693": 479, "38267": 479, "34828": 479, "32990": 479, "26253": 479, "85525": 479, "86404": 479, "spinx": 479, "97741": 479, "96432": 479, "96098": 479, "95957": 479, "95588": 479, "unfix": 479, "91207": 479, "chm": 479, "htmlhelp": 479, "95454": 479, "documenti": 479, "shea": 479, "95451": 479, "95415": 479, "94321": 479, "86128": 479, "61162": 479, "87260": 479, "86986": 479, "88831": 479, "86438": 479, "93031": 479, "92240": 479, "47161": 479, "40838": 479, "43689": 479, "38056": 479, "overhaul": 479, "13553": 479, "95027": 479, "96624": 479, "test_unittest": 479, "test_dotted_but_module_not_load": 479, "95243": 479, "testsocknam": 479, "burton": 479, "95573": 479, "test_asyncio": 479, "test_ssl": 479, "fb11063974": 479, "fantix": 479, "95280": 479, "test_get_ciph": 479, "pfs": 479, "95212": 479, "test_shared_memory_recr": 479, "95218": 479, "test_importlib": 479, "94675": 479, "exponent": 479, "rjsmin": 479, "91330": 479, "94208": 479, "94315": 479, "dac": 479, "54781": 479, "test_tk": 479, "test_tkint": 479, "test_ttk_guion": 479, "test_ttk": 479, "93839": 479, "test_ctyp": 479, "93951": 479, "test_bdb": 479, "statetestcas": 479, "test_skip": 479, "93957": 479, "test_venv": 479, "ensurepiptest": 479, "test_with_pip": 479, "93884": 479, "93852": 479, "test_socket": 479, "test_socketserv": 479, "run_test": 479, "hostrunn": 479, "93616": 479, "test_modulefind": 479, "modulefindertest": 479, "93575": 479, "test_unicod": 479, "test_raisememerror": 479, "57539": 479, "openat2": 479, "resolve_beneath": 479, "89858": 479, "test_emb": 479, "test_imaplib": 479, "test_zipimport": 479, "test_py_compil": 479, "test_sys_settrac": 479, "_test_multiprocess": 479, "92670": 479, "test_shutil": 479, "testcopi": 479, "test_copyfile_nonexistent_dir": 479, "92514": 479, "basictestrunn": 479, "47016": 479, "turner": 479, "96761": 479, "96883": 479, "85936": 479, "96729": 479, "buildreleas": 479, "96269": 479, "module_dep": 479, "exportsym": 479, "95973": 479, "dsymutil": 479, "93744": 479, "maincc": 479, "94801": 479, "94802": 479, "95145": 479, "wasix": 479, "95174": 479, "netdb": 479, "94847": 479, "94841": 479, "1932": 479, "zlib_cflag": 479, "zlib_lib": 479, "94773": 479, "deepfreez": 479, "unsort": 479, "94682": 479, "1q": 479, "termcap": 479, "tinfo": 479, "_dbm": 479, "94404": 479, "94280": 479, "pegen": 479, "93584": 479, "93491": 479, "69093": 479, "_sqlite3": 479, "93202": 479, "34449": 479, "ux": 479, "osipov": 479, "98360": 479, "98414": 479, "97728": 479, "90989": 479, "97649": 479, "96965": 479, "96577": 479, "96559": 479, "94781": 479, "89545": 479, "wmi": 479, "95733": 479, "95656": 479, "95587": 479, "94399": 479, "95445": 479, "95359": 479, "95285": 479, "90844": 479, "94772": 479, "94018": 479, "93824": 479, "43414": 479, "92817": 479, "92984": 479, "92841": 479, "46907": 479, "91061": 479, "42658": 479, "lcmapstringex": 479, "38704": 479, "97897": 479, "97527": 479, "2288": 479, "65802": 479, "95511": 479, "95471": 479, "95411": 479, "89610": 479, "68686": 479, "ptag": 479, "eptag": 479, "95853": 479, "wasm_build": 479, "emsdk": 479, "95731": 479, "check_modul": 479, "94538": 479, "94430": 479, "86087": 479, "parseent": 479, "95756": 479, "96512": 479, "92678": 479, "95388": 479, "94930": 479, "94731": 479, "wold": 479, "wzero": 479, "91321": 479, "91731": 479, "89546": 479, "93442": 479, "_py_cast_impl": 479, "_py_cast": 479, "93466": 479, "92898": 479, "serg": 479, "guelton": 479, "93103": 479, "92913": 479, "92781": 479, "c90": 479, "92193": 479, "59121": 479, "45383": 479, "92345": 479, "43857": 479, "92245": 479, "11a7": 479, "92203": 479, "91173": 479, "92114": 479, "92112": 479, "92063": 479, "precall_method_descriptor_fast_with_keyword": 479, "92031": 479, "deoptim": 479, "_pycode_quicken": 479, "92036": 479, "92032": 479, "91869": 479, "91603": 479, "89373": 479, "91632": 479, "generic_alias_iter": 479, "encodingmap": 479, "91636": 479, "91625": 479, "78607": 479, "lltrace": 479, "__ltrace__": 479, "91576": 479, "89279": 479, "91502": 479, "_pyframe_isentryfram": 479, "91266": 479, "91479": 479, "__note__": 479, "46055": 479, "xinhang": 479, "91462": 479, "91421": 479, "_py_decodeutf8ex": 479, "91428": 479, "_pyopcode_opnam": 479, "47120": 479, "45317": 479, "47197": 479, "mishandl": 479, "47177": 479, "prev_instr": 479, "46961": 479, "46962": 479, "testcapi": 479, "recursinginfinitelyerror": 479, "46942": 479, "46764": 479, "43464": 479, "46721": 479, "46509": 479, "chase": 479, "46045": 479, "36819": 479, "34093": 479, "flag_ref": 479, "92356": 479, "92301": 479, "close_rang": 479, "67248": 479, "92210": 479, "cinder": 479, "92118": 479, "90887": 479, "copyfile_stat": 479, "copyfile_acl": 479, "copyfile_xattr": 479, "91215": 479, "92128": 479, "92049": 479, "92062": 479, "88089": 479, "91996": 479, "91984": 479, "test_argpars": 479, "91952": 479, "91954": 479, "47029": 479, "91928": 479, "91401": 479, "64783": 479, "sigrtmin": 479, "sigrtmax": 479, "91910": 479, "91832": 479, "91821": 479, "test_from_tupl": 479, "test_decim": 479, "91217": 479, "90623": 479, "91734": 479, "91700": 479, "91231": 479, "91621": 479, "90568": 479, "91670": 479, "91616": 479, "47256": 479, "823": 479, "91595": 479, "write_repr": 479, "yu": 479, "liu": 479, "74166": 479, "91575": 479, "89022": 479, "sqlite_misus": 479, "91526": 479, "91276": 479, "47000": 479, "91230": 479, "47260": 479, "seccomp": 479, "47227": 479, "47211": 479, "47135": 479, "43323": 479, "46681": 479, "45100": 479, "44807": 479, "46787": 479, "46720": 479, "par": 479, "46696": 479, "46053": 479, "45639": 479, "avif": 479, "46285": 479, "44791": 479, "46547": 479, "46415": 479, "46075": 479, "45995": 479, "26175": 479, "45138": 479, "40318": 479, "44863": 479, "44587": 479, "43827": 479, "43218": 479, "rodrigu": 479, "38435": 479, "42066": 479, "iman": 479, "kermani": 479, "40617": 479, "40676": 479, "39716": 479, "36073": 479, "kawashima": 479, "91888": 479, "91783": 479, "91547": 479, "91298": 479, "44347": 479, "36329": 479, "htmlview": 479, "47189": 479, "38668": 479, "47115": 479, "26792": 479, "brezovski": 479, "92169": 479, "import_deprec": 479, "91904": 479, "pythonregrtest_unicode_guard": 479, "91752": 479, "test_freez": 479, "testfreez": 479, "91607": 479, "test_concurrent_futur": 479, "40280": 479, "47109": 479, "macholib": 479, "29890": 479, "louisom": 479, "89452": 479, "47103": 479, "pginstrument": 479, "47239": 479, "46785": 479, "win32_xstat_impl": 479, "40859": 479, "91583": 479, "generate_re_casefix": 479, "91551": 479, "gitlab": 479, "91320": 479, "reinterpret_cast": 479, "static_cast": 479, "80527": 479, "91768": 479, "91020": 479, "47169": 479, "47212": 479, "matthieu": 479, "dartiailh": 479, "47186": 479, "jump_if_not_eg_match": 479, "47176": 479, "py_emscriptensignalbuff": 479, "sharedarraybuff": 479, "py_emscripten_signal_handl": 479, "47182": 479, "47162": 479, "py_call_trampolin": 479, "46775": 479, "47129": 479, "47117": 479, "47127": 479, "42197": 479, "47070": 479, "array_inplace_repeat": 479, "unicodeobject": 479, "_pybytes_repeat": 479, "47053": 479, "binary_op_inplace_add_unicod": 479, "47045": 479, "46968": 479, "auxv": 479, "46329": 479, "47012": 479, "47009": 479, "47005": 479, "bytearray_repeat": 479, "bytearray_irepeat": 479, "46829": 479, "46993": 479, "39829": 479, "jeremiah": 479, "pascual": 479, "46944": 479, "46881": 479, "46838": 479, "43721": 479, "47208": 479, "ctypes_max_argcount": 479, "23689": 479, "47167": 479, "47151": 479, "4833": 479, "27929": 479, "14265": 479, "39622": 479, "47101": 479, "ossl": 479, "47099": 479, "open_ftp": 479, "42885": 479, "23691": 479, "47067": 479, "42369": 479, "_sharedfil": 479, "38256": 479, "4gib": 479, "odditi": 479, "39394": 479, "47062": 479, "46382": 479, "ari": 479, "bovenberg": 479, "47057": 479, "fastcal": 479, "47039": 479, "2604": 479, "45150": 479, "34861": 479, "45997": 479, "aquir": 479, "43253": 479, "fdset": 479, "47004": 479, "46998": 479, "46995": 479, "46994": 479, "46981": 479, "46985": 479, "getauxv": 479, "at_minsigstksz": 479, "amx_til": 479, "sapphir": 479, "xeon": 479, "isa": 479, "46955": 479, "zabka": 479, "23325": 479, "46932": 479, "46933": 479, "464471": 479, "tvrtkovi": 479, "46644": 479, "typeform": 479, "46581": 479, "46557": 479, "41370": 479, "26120": 479, "46480": 479, "46421": 479, "22859": 479, "46170": 479, "40296": 479, "20392": 479, "46030": 479, "44439": 479, "45171": 479, "24959": 479, "44859": 479, "44493": 479, "sockaddr_un": 479, "33178": 479, "43352": 479, "45099": 479, "47126": 479, "676": 479, "47040": 479, "compatibl": 479, "46033": 479, "45790": 479, "42340": 479, "41233": 479, "yyyyyyyan": 479, "orest": 479, "47205": 479, "46126": 479, "47104": 479, "47037": 479, "4y": 479, "46587": 479, "47015": 479, "main_modul": 479, "side_modul": 479, "46023": 479, "wasm64": 479, "47032": 479, "47024": 479, "1n": 479, "46973": 479, "quay": 479, "tiran": 479, "cpython_autoconf": 479, "45774": 479, "47194": 479, "25032": 479, "47171": 479, "46566": 479, "47086": 479, "44549": 479, "3189": 479, "12900": 479, "46948": 479, "26488": 479, "46890": 479, "46850": 479, "_pyeval_calltrac": 479, "_pyeval_getcoroutineorigintrackingdepth": 479, "_pyeval_getasyncgenfirstit": 479, "_pyeval_getasyncgenfin": 479, "_pyeval_setasyncgenfirstit": 479, "_pyeval_setasyncgenfin": 479, "46987": 479, "_pysys_getobjectid": 479, "_pysys_setobjectid": 479, "46940": 479, "46927": 479, "46921": 479, "46903": 479, "11alpha": 479, "46891": 479, "test_float": 479, "46712": 479, "46430": 479, "45107": 479, "44337": 479, "46729": 479, "45885": 479, "46794": 479, "46823": 479, "load_fast__load_attr_instance_valu": 479, "46820": 479, "1not": 479, "46808": 479, "precall_funct": 479, "precall_method": 479, "46762": 479, "46730": 479, "46724": 479, "46732": 479, "46072": 479, "46707": 479, "46323": 479, "45923": 479, "46702": 479, "46675": 479, "va_end": 479, "_hashopenssl": 479, "46615": 479, "setobject": 479, "30496": 479, "25707": 479, "46877": 479, "46848": 479, "46736": 479, "44886": 479, "46827": 479, "46811": 479, "46252": 479, "46784": 479, "46786": 479, "wbr": 479, "39327": 479, "virtualbox": 479, "45390": 479, "46756": 479, "46737": 479, "46752": 479, "trio": 479, "nurseri": 479, "46333": 479, "46643": 479, "45863": 479, "unarchiv": 479, "46066": 479, "46676": 479, "_argtypes_": 479, "46672": 479, "46655": 479, "45948": 479, "discrep": 479, "46626": 479, "ip_bind_address_no_port": 479, "46521": 479, "46571": 479, "46400": 479, "46556": 479, "46522": 479, "46475": 479, "46246": 479, "deprecatedlist": 479, "46232": 479, "46195": 479, "31369": 479, "45898": 479, "ffi_type_": 479, "decad": 479, "44953": 479, "44289": 479, "44011": 479, "41086": 479, "methodwrapp": 479, "14156": 479, "42238": 479, "46913": 479, "test_faulthandl": 479, "test_sigfp": 479, "faulthandler_sigfp": 479, "46760": 479, "test_di": 479, "46708": 479, "46678": 479, "46623": 479, "test_pair": 479, "test_speech128": 479, "test_zlib": 479, "s390x": 479, "46860": 479, "__builtin_nan": 479, "kb": 479, "setr": 479, "gu": 479, "cound": 479, "46744": 479, "46567": 479, "46638": 479, "46630": 479, "46748": 479, "stdbool": 479, "46836": 479, "pycore_fram": 479, "pybuff": 479, "conflit": 479, "accesss": 479, "45773": 479, "46564": 479, "46458": 479, "46527": 479, "46528": 479, "precall_funt": 479, "46503": 479, "46431": 479, "46476": 479, "46481": 479, "46417": 479, "add_subclass": 479, "43683": 479, "46407": 479, "vivian": 479, "46409": 479, "46406": 479, "46383": 479, "module_fre": 479, "46361": 479, "46161": 479, "46028": 479, "46091": 479, "44024": 479, "46624": 479, "46591": 479, "clickabl": 479, "46565": 479, "46553": 479, "46544": 479, "uspac": 479, "46487": 479, "46539": 479, "46510": 479, "46491": 479, "46436": 479, "41403": 479, "46474": 479, "46470": 479, "_remove_dups_flatten": 479, "46469": 479, "41906": 479, "46422": 479, "46434": 479, "43869": 479, "46414": 479, "46316": 479, "29688": 479, "43012": 479, "_accessor": 479, "terrain": 479, "46258": 479, "46242": 479, "_member_names_": 479, "43118": 479, "26552": 479, "21987": 479, "46124": 479, "46103": 479, "46080": 479, "felix": 479, "fontein": 479, "46463": 479, "escape4chm": 479, "43478": 479, "46616": 479, "test_window": 479, "44359": 479, "test_ftplib": 479, "46600": 479, "test_gdb": 479, "test_pycfunct": 479, "46542": 479, "test_lib2to3": 479, "46576": 479, "test_peg_gener": 479, "test_json": 479, "infinite_recurs": 479, "13886": 479, "test_builtin": 479, "requires_fork": 479, "requires_subprocess": 479, "46602": 479, "conftest": 479, "38472": 479, "46513": 479, "ac_c_char_unsign": 479, "__char_unsigned__": 479, "46471": 479, "46443": 479, "46429": 479, "45925": 479, "43112": 479, "46362": 479, "com1": 479, "lpt1": 479, "45296": 479, "_py_getallocatedblock": 479, "_pyobject_debugmallocstat": 479, "46433": 479, "_pytype_getmodulebydef": 479, "14916": 479, "46070": 479, "46347": 479, "46339": 479, "46331": 479, "46314": 479, "11a4": 479, "46289": 479, "46297": 479, "bootup": 479, "derzsi": 479, "niel": 479, "46237": 479, "46263": 479, "use_frozen_modul": 479, "46006": 479, "_pyunicode_equaltoasciiid": 479, "update_slot": 479, "46208": 479, "46240": 479, "46009": 479, "46235": 479, "46221": 479, "46202": 479, "pop_except_and_rerais": 479, "46085": 479, "pylong_bas": 479, "46110": 479, "46107": 479, "44525": 479, "call_method_kw": 479, "call_no_kw": 479, "call_kw": 479, "46039": 479, "45635": 479, "_pyerr_display": 479, "46054": 479, "46042": 479, "46049": 479, "46048": 479, "37971": 479, "46031": 479, "45654": 479, "46025": 479, "46000": 479, "42918": 479, "45953": 479, "43413": 479, "46342": 479, "46307": 479, "46306": 479, "46244": 479, "46278": 479, "call_": 479, "46269": 479, "46266": 479, "46257": 479, "41011": 479, "46239": 479, "46238": 479, "46222": 479, "46176": 479, "43424": 479, "45321": 479, "46125": 479, "46118": 479, "37578": 479, "20369": 479, "46105": 479, "44893": 479, "22815": 479, "22047": 479, "26952": 479, "45615": 479, "16594": 479, "allow_reuse_port": 479, "27718": 479, "46032": 479, "27062": 479, "46018": 479, "46016": 479, "45755": 479, "45874": 479, "25066": 479, "45643": 479, "46196": 479, "46120": 479, "46109": 479, "19737": 479, "46296": 479, "_use_args_": 479, "_member_type_": 479, "46205": 479, "runtest_mp": 479, "jemalloc": 479, "46262": 479, "46150": 479, "fakenam": 479, "posixpathtest": 479, "test_expandus": 479, "46129": 479, "23819": 479, "46114": 479, "0xmnn00pp0l": 479, "44133": 479, "46315": 479, "have_featur": 479, "45723": 479, "multiarch": 479, "46106": 479, "1m": 479, "46088": 479, "asset": 479, "45949": 479, "freeze_modul": 479, "46217": 479, "40477": 479, "46236": 479, "46140": 479, "45855": 479, "46004": 479, "_pyerr_chainstackitem": 479, "45915": 479, "is_valid_fd": 479, "f_getfd": 479, "44530": 479, "42268": 479, "45727": 479, "45786": 479, "45614": 479, "45813": 479, "45811": 479, "45848": 479, "45709": 479, "45829": 479, "45826": 479, "45822": 479, "45820": 479, "45636": 479, "42540": 479, "45738": 479, "45753": 479, "45764": 479, "45609": 479, "45582": 479, "45450": 479, "27946": 479, "13236": 479, "37658": 479, "45876": 479, "44649": 479, "45803": 479, "45831": 479, "41735": 479, "45235": 479, "45754": 479, "11a2": 479, "sqlite_limit_length": 479, "45766": 479, "45765": 479, "45757": 479, "45644": 479, "wessel": 479, "45703": 479, "45535": 479, "45664": 479, "45663": 479, "45662": 479, "43137": 479, "gio": 479, "45514": 479, "45507": 479, "45359": 479, "44733": 479, "28806": 479, "43498": 479, "42158": 479, "notation3": 479, "trig": 479, "45840": 479, "45640": 479, "milchior": 479, "45788": 479, "45772": 479, "45392": 479, "45250": 479, "25381": 479, "43905": 479, "45695": 479, "19460": 479, "45835": 479, "test_queu": 479, "45783": 479, "45745": 479, "findleak": 479, "45701": 479, "test_functool": 479, "44035": 479, "45950": 479, "45881": 479, "sys_shutdown": 479, "ac_cv_func_shutdown": 479, "fork1": 479, "33393": 479, "45866": 479, "pygen": 479, "41498": 479, "sigset_t": 479, "yurchak": 479, "45886": 479, "45873": 479, "py_stdlib_mod": 479, "addext": 479, "save_env": 479, "restore_env": 479, "with_save_env": 479, "45573": 479, "45816": 479, "v143": 479, "45800": 479, "45798": 479, "45743": 479, "search_paths_first": 479, "xcode": 479, "stdc_header": 479, "ac_header_tim": 479, "45731": 479, "py_sqlite_enable_load_extens": 479, "ac_cache_check": 479, "45696": 479, "45561": 479, "smelli": 479, "45901": 479, "45616": 479, "45850": 479, "45732": 479, "45720": 479, "shlwapi": 479, "39026": 479, "45716": 479, "45688": 479, "_scproxi": 479, "45379": 479, "keyowrd": 479, "45530": 479, "45526": 479, "address_bit": 479, "30570": 479, "45521": 479, "45494": 479, "45445": 479, "45408": 479, "45385": 479, "descr_check": 479, "45367": 479, "binary_multiply_int": 479, "binary_multiply_float": 479, "21736": 479, "unfrozen": 479, "45020": 479, "orignam": 479, "45324": 479, "44050": 479, "call_function_builtin_o": 479, "call_function_builtin_fast": 479, "call_function_len": 479, "call_function_isinst": 479, "44511": 479, "43706": 479, "42064": 479, "45438": 479, "45574": 479, "print_escap": 479, "45581": 479, "45557": 479, "kreusada": 479, "42174": 479, "35673": 479, "_namespaceload": 479, "45515": 479, "45475": 479, "43787": 479, "45489": 479, "42222": 479, "45428": 479, "45467": 479, "45461": 479, "45239": 479, "45417": 479, "45249": 479, "45416": 479, "20028": 479, "44904": 479, "45406": 479, "getabsfil": 479, "45411": 479, "subtitl": 479, "srt": 479, "vtt": 479, "10716": 479, "serverhtmldoc": 479, "27580": 479, "45262": 479, "45386": 479, "45343": 479, "45328": 479, "45192": 479, "_infer_return_typ": 479, "kyungmin": 479, "45160": 479, "24444": 479, "40321": 479, "7538": 479, "jochem": 479, "schulenklopp": 479, "41374": 479, "35970": 479, "kuska": 479, "45726": 479, "45680": 479, "45618": 479, "olko": 479, "45655": 479, "45604": 479, "45516": 479, "45464": 479, "45449": 479, "20692": 479, "45678": 479, "45578": 479, "45668": 479, "45577": 479, "45566": 479, "test_frozen_pickl": 479, "test_dataclass": 479, "43592": 479, "39679": 479, "45410": 479, "45402": 479, "test_sundri": 479, "45403": 479, "test_si": 479, "test_stdlib_dir": 479, "45400": 479, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 479, "test_except": 479, "10572": 479, "test_sqlit": 479, "43158": 479, "_uuid": 479, "libuuid": 479, "45666": 479, "swprintf": 479, "45595": 479, "have_expat_config_h": 479, "use_pyexpat_capi": 479, "xml_poor_entropi": 479, "expat_config": 479, "45532": 479, "jeong": 479, "yunwon": 479, "45536": 479, "45221": 479, "45405": 479, "bohman": 479, "43652": 479, "45337": 479, "43851": 479, "sqlite_omit_autoinit": 479, "44828": 479, "culler": 479, "45495": 479, "29103": 479, "interpreteridobject": 479, "45395": 479, "44220": 479, "42278": 479, "44600": 479, "burkland": 479, "41180": 479, "44394": 479, "0340": 479, "43124": 479, "putcmd": 479, "44022": 479, "45061": 479, "24076": 479, "45167": 479, "45155": 479, "44219": 479, "44959": 479, "45121": 479, "44348": 479, "45123": 479, "1514420": 479, "41031": 479, "45083": 479, "34561": 479, "munro": 479, "powersort": 479, "45056": 479, "45012": 479, "fstatat": 479, "stani": 479, "skonieczni": 479, "45018": 479, "44963": 479, "anext_await": 479, "44962": 479, "44954": 479, "8p": 479, "1074": 479, "44947": 479, "44945": 479, "binary_add_adapt": 479, "binary_add_float": 479, "binary_add_int": 479, "binary_add_unicod": 479, "binary_add_unicode_inplace_fast": 479, "44929": 479, "44914": 479, "44698": 479, "44895": 479, "44900": 479, "44889": 479, "load_method_cach": 479, "load_method_modul": 479, "load_method_class": 479, "44890": 479, "44885": 479, "44878": 479, "44874": 479, "44872": 479, "33930": 479, "augusto": 479, "goulart": 479, "25782": 479, "44856": 479, "update_bas": 479, "44826": 479, "store_attr_slot": 479, "store_attr_split_key": 479, "store_attr_with_hint": 479, "44838": 479, "44821": 479, "44792": 479, "34013": 479, "44732": 479, "44725": 479, "_opcod": 479, "get_specialization_stat": 479, "44717": 479, "44653": 479, "44676": 479, "44633": 479, "44661": 479, "property_descr_set": 479, "44662": 479, "44655": 479, "44646": 479, "44636": 479, "44635": 479, "26280": 479, "binary_subscr_dict": 479, "44589": 479, "44606": 479, "42073": 479, "fastsearch": 479, "43895": 479, "ish": 479, "dynload_shlib": 479, "levarag": 479, "44562": 479, "44553": 479, "44523": 479, "44483": 479, "44486": 479, "44472": 479, "ltrace": 479, "44297": 479, "44456": 479, "44409": 479, "44396": 479, "44376": 479, "44313": 479, "44338": 479, "load_global_modul": 479, "load_global_builtin": 479, "44368": 479, "44349": 479, "load_attr_slot": 479, "load_attr_split_key": 479, "load_attr_with_hint": 479, "load_attr_modul": 479, "44335": 479, "43693": 479, "44317": 479, "44304": 479, "43667": 479, "44232": 479, "winner": 479, "44201": 479, "co_fastlocalkind": 479, "44184": 479, "44187": 479, "44180": 479, "44168": 479, "44156": 479, "44143": 479, "44032": 479, "datastack": 479, "44114": 479, "dictkeys_revers": 479, "dictitems_revers": 479, "broke": 479, "44110": 479, "branchless": 479, "43918": 479, "43879": 479, "17792": 479, "28146": 479, "11105": 479, "39091": 479, "noah": 479, "oxer": 479, "45371": 479, "unixccompil": 479, "45329": 479, "1596321": 479, "45274": 479, "45238": 479, "36674": 479, "45183": 479, "45234": 479, "45228": 479, "45225": 479, "genexpr": 479, "25169": 479, "20524": 479, "45168": 479, "35474": 479, "45166": 479, "20499": 479, "30856": 479, "45034": 479, "25894": 479, "45081": 479, "45075": 479, "format_fram": 479, "31299": 479, "41620": 479, "45021": 479, "43913": 479, "lesser": 479, "45030": 479, "45001": 479, "45010": 479, "__div__": 479, "39218": 479, "43613": 479, "37596": 479, "44955": 479, "39039": 479, "44935": 479, "44911": 479, "41322": 479, "44524": 479, "38956": 479, "44860": 479, "unicodencodeerror": 479, "44581": 479, "44849": 479, "44605": 479, "wherein": 479, "specialform": 479, "44839": 479, "44822": 479, "44801": 479, "44806": 479, "27275": 479, "44793": 479, "44784": 479, "44667": 479, "44771": 479, "44752": 479, "rcomplet": 479, "44747": 479, "44720": 479, "44704": 479, "44666": 479, "lzl": 479, "44690": 479, "binacii": 479, "42854": 479, "_sslsocket": 479, "44686": 479, "_import": 479, "44353": 479, "44682": 479, "44678": 479, "40897": 479, "44638": 479, "44648": 479, "44608": 479, "_flatten": 479, "44594": 479, "flight": 479, "42799": 479, "41928": 479, "44566": 479, "44558": 479, "41249": 479, "44554": 479, "34798": 479, "44539": 479, "44461": 479, "43625": 479, "44516": 479, "42892": 479, "44468": 479, "43977": 479, "44482": 479, "44404": 479, "41546": 479, "44458": 479, "buffer_block_s": 479, "lmza": 479, "44464": 479, "flake8": 479, "44446": 479, "44434": 479, "pthread_exit": 479, "libgcc_": 479, "42972": 479, "44422": 479, "37880": 479, "44389": 479, "27827": 479, "44395": 479, "34266": 479, "44362": 479, "44342": 479, "44356": 479, "44351": 479, "parse_makefil": 479, "44242": 479, "44246": 479, "43858": 479, "44260": 479, "44254": 479, "33693": 479, "44241": 479, "simplepath": 479, "44210": 479, "_meta": 479, "43643": 479, "27334": 479, "4928": 479, "44154": 479, "33433": 479, "44150": 479, "44142": 479, "44145": 479, "hmac_upd": 479, "44095": 479, "ds": 479, "congest": 479, "37788": 479, "44089": 479, "44081": 479, "44061": 479, "44059": 479, "serenityo": 479, "36515": 479, "44018": 479, "38352": 479, "44002": 479, "90s": 479, "43972": 479, "28528": 479, "checklin": 479, "43853": 479, "43666": 479, "wpar": 479, "fileset": 479, "bos": 479, "rte": 479, "mp64": 479, "odm": 479, "9988": 479, "43650": 479, "_unpack_zipfil": 479, "igor": 479, "bolshakov": 479, "43612": 479, "43392": 479, "_find_and_load": 479, "43318": 479, "43232": 479, "30077": 479, "sowt": 479, "42971": 479, "43086": 479, "scrict_mod": 479, "43024": 479, "42862": 479, "41818": 479, "soumendra": 479, "ganguli": 479, "40497": 479, "37449": 479, "40956": 479, "41730": 479, "20684": 479, "_signature_get_bound_param": 479, "41402": 479, "32695": 479, "24391": 479, "40563": 479, "henri": 479, "aud": 479, "oud": 479, "34990": 479, "y2k38": 479, "39549": 479, "37022": 479, "38840": 479, "test___all__": 479, "39359": 479, "38741": 479, "38415": 479, "30256": 479, "manager_own": 479, "autoproxi": 479, "27513": 479, "26228": 479, "33349": 479, "29298": 479, "45216": 479, "45024": 479, "44957": 479, "16580": 479, "44903": 479, "othergui": 479, "33479": 479, "36700": 479, "44740": 479, "44693": 479, "35183": 479, "30511": 479, "44561": 479, "44651": 479, "42958": 479, "44631": 479, "_environ": 479, "44613": 479, "44544": 479, "38062": 479, "40620": 479, "controlflow": 479, "43066": 479, "39452": 479, "broaden": 479, "13814": 479, "27752": 479, "44453": 479, "44392": 479, "44322": 479, "44195": 479, "traversableread": 479, "41963": 479, "44072": 479, "43558": 479, "44025": 479, "41706": 479, "41621": 479, "41576": 479, "21760": 479, "39498": 479, "40173": 479, "45280": 479, "45269": 479, "c_make_encod": 479, "45128": 479, "test_multiprocessing_fork": 479, "45209": 479, "_testsharedmemori": 479, "test_shared_memory_cleaned_after_process_termin": 479, "45185": 479, "testenumer": 479, "45195": 479, "test_readlin": 479, "test_nonascii": 479, "45156": 479, "45125": 479, "sharablelist": 479, "test_sysconfig": 479, "test_user_similar": 479, "45052": 479, "withprocessestestsharedmemori": 479, "test_shared_memory_bas": 479, "sms": 479, "sms2": 479, "unskip": 479, "45042": 479, "hashlib_help": 479, "requires_hashdigest": 479, "25130": 479, "45011": 479, "44949": 479, "44891": 479, "44852": 479, "wholesal": 479, "40928": 479, "spew": 479, "44734": 479, "44708": 479, "42095": 479, "interop": 479, "plutil": 479, "44647": 479, "44515": 479, "44287": 479, "test_popen": 479, "test_windows_util": 479, "militari": 479, "battl": 479, "44451": 479, "test_metadata_api": 479, "apitest": 479, "test_entry_points_by_index": 479, "44363": 479, "44364": 479, "43921": 479, "test_wrong_cert_tls13": 479, "test_pha_required_nocert": 479, "44131": 479, "test_frozenmain": 479, "31904": 479, "test_file_not_exist": 479, "42083": 479, "35753": 479, "unwrapp": 479, "dictproxi": 479, "45220": 479, "defaultwindowssdkvers": 479, "commandlin": 479, "45188": 479, "45163": 479, "haiku": 479, "45067": 479, "extended_color_cont": 479, "island": 479, "t20170401": 479, "20170401": 479, "45019": 479, "44535": 479, "43298": 479, "44381": 479, "enablecontrolflowguard": 479, "41282": 479, "45375": 479, "unnormalis": 479, "45022": 479, "45007": 479, "44848": 479, "44572": 479, "44582": 479, "41299": 479, "jitter": 479, "42686": 479, "40263": 479, "issue26903": 479, "34602": 479, "quadrupl": 479, "44689": 479, "43109": 479, "34932": 479, "shane": 479, "harvey": 479, "45193": 479, "40128": 479, "update_idletask": 479, "41611": 479, "autocompletewindow": 479, "winconfig_ev": 479, "44026": 479, "44786": 479, "44967": 479, "44978": 479, "43425": 479, "test2to3": 479, "44074": 479, "20291": 479, "44687": 479, "45116": 479, "45094": 479, "44751": 479, "42747": 479, "py_tpflags_have_am_send": 479, "44441": 479, "_pytrash_deposit_object": 479, "_pytrash_destroy_chain": 479, "_pytrash_thread_deposit_object": 479, "_pytrash_thread_destroy_chain": 479, "_tstate": 479, "trash_delete_nest": 479, "40939": 479, "pyparser_": 479, "44378": 479, "44113": 479, "44094": 479, "pyerr_setfromerrnowithunicodefilenam": 479, "pyerr_setfromwindowserrwithunicodefilenam": 479, "pyerr_setexcfromwindowserrwithunicodefilenam": 479, "pyunicodeencodeerror_cr": 479, "pyunicodetranslateerror_cr": 479, "43434": 479, "43882": 479, "43472": 479, "43362": 479, "43756": 479, "43075": 479, "42800": 479, "37363": 479, "43892": 479, "43933": 479, "kweyword": 479, "43963": 479, "_signal": 479, "42739": 479, "pylinetable_initaddressrang": 479, "43754": 479, "consistut": 479, "38605": 479, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 479, "pile": 479, "43859": 479, "41323": 479, "43846": 479, "43798": 479, "43751": 479, "ait": 479, "42128": 479, "43105": 479, "42609": 479, "44015": 479, "25478": 479, "43733": 479, "43979": 479, "zwerschk": 479, "43993": 479, "43957": 479, "42904": 479, "43945": 479, "43937": 479, "43930": 479, "43907": 479, "43926": 479, "43607": 479, "43284": 479, "_syscmd_ver": 479, "43867": 479, "serve_cli": 479, "40443": 479, "43820": 479, "43680": 479, "41515": 479, "43776": 479, "42248": 479, "_missing__": 479, "43744": 479, "43772": 479, "43764": 479, "openssl_api_compat": 479, "make_ssl_data": 479, "25264": 479, "43780": 479, "43731": 479, "38659": 479, "simple_enum": 479, "test_simple_enum": 479, "43752": 479, "24723": 479, "43655": 479, "43723": 479, "2135": 479, "43534": 479, "43522": 479, "hostflag": 479, "ssl_ctx": 479, "8978": 479, "43296": 479, "sqlite3_value_blob": 479, "sqlite_nomem": 479, "43312": 479, "43265": 479, "43176": 479, "39529": 479, "18369": 479, "privatekey": 479, "36470": 479, "x509_v_flag_partial_chain": 479, "35114": 479, "39899": 479, "36076": 479, "33731": 479, "32745": 479, "43987": 479, "43959": 479, "43938": 479, "43778": 479, "glossary_search": 479, "43739": 479, "43961": 479, "test_namer_rotator_inherit": 479, "43842": 479, "43843": 479, "env_chang": 479, "ccach": 479, "tlsv1_alert_internal_error": 479, "43567": 479, "35306": 479, "43538": 479, "38822": 479, "26227": 479, "40432": 479, "43745": 479, "mislabel": 479, "1i": 479, "43492": 479, "30555": 479, "windowsconsoleio": 479, "42119": 479, "sdks": 479, "iossupport": 479, "43568": 479, "44009": 479, "rosetta": 479, "42235": 479, "sidebar": 479, "43981": 479, "test_sidebar": 479, "test_squeez": 479, "43774": 479, "43962": 479, "_pyinterpreterstate_idincref": 479, "_pyinterpreterstate_idinitref": 479, "id_refcount": 479, "get_curr": 479, "interpreterid": 479, "28254": 479, "42988": 479, "schw": 479, "rer": 479, "43285": 479, "trust_server_pasv_ipv4_address": 479, "27129": 479, "43660": 479, "43555": 479, "43517": 479, "misdetect": 479, "43497": 479, "39316": 479, "35883": 479, "43410": 479, "43406": 479, "43390": 479, "sa_onstack": 479, "friendlier": 479, "golang": 479, "cgo": 479, "37448": 479, "address_in_rang": 479, "ultra": 479, "unsanitari": 479, "_py_no_sanitize_address": 479, "_py_no_sanitize_thread": 479, "_py_no_sanitize_memori": 479, "dwith_pymalloc_radix_tre": 479, "29988": 479, "43433": 479, "35930": 479, "41369": 479, "43422": 479, "41324": 479, "43577": 479, "43542": 479, "heic": 479, "heif": 479, "43510": 479, "43521": 479, "41361": 479, "43423": 479, "27820": 479, "_always_": 479, "43445": 479, "43245": 479, "29982": 479, "43428": 479, "43332": 479, "43420": 479, "43399": 479, "43369": 479, "sqlite3_column_text": 479, "sqlite3_column_blob": 479, "43368": 479, "24562": 479, "mariusz": 479, "felisiak": 479, "42129": 479, "43295": 479, "43125": 479, "base64mim": 479, "43084": 479, "42994": 479, "opus": 479, "3gpp": 479, "3gpp2": 479, "42782": 479, "membernam": 479, "26053": 479, "40701": 479, "39342": 479, "x509_v_flag_allow_proxy_cert": 479, "man1": 479, "man7": 479, "jab": 479, "lordmauv": 479, "justin39": 479, "43199": 479, "43407": 479, "43354": 479, "41933": 479, "37945": 479, "test_getsetlocale_issue1813": 479, "test_local": 479, "41561": 479, "43179": 479, "alignof_x": 479, "sizeof_x": 479, "43631": 479, "43617": 479, "43372": 479, "_freeze_importlib": 479, "42246": 479, "877df851": 479, "test_frozent": 479, "43440": 479, "42225": 479, "43541": 479, "poison": 479, "43321": 479, "43121": 479, "42819": 479, "x1b": 479, "2004h": 479, "42808": 479, "42217": 479, "co_linet": 479, "40692": 479, "43316": 479, "43317": 479, "43146": 479, "43260": 479, "43258": 479, "needless": 479, "43251": 479, "sqlite3_column_nam": 479, "23838": 479, "43172": 479, "irreconcil": 479, "43163": 479, "43162": 479, "43102": 479, "42960": 479, "42151": 479, "_elementre": 479, "29753": 479, "shrank": 479, "27646": 479, "43288": 479, "43174": 479, "13501": 479, "39448": 479, "43155": 479, "41837": 479, "43283": 479, "43278": 479, "43270": 479, "_pyerr_occur": 479, "43239": 479, "fvisibl": 479, "43181": 479, "42938": 479, "pyeval_": 479, "_pyeval_evalcodewithnam": 479, "38631": 479, "42986": 479, "42924": 479, "42882": 479, "_pyunicode_fromid": 479, "_py_identifi": 479, "unicode_id": 479, "next_index": 479, "42827": 479, "42823": 479, "41994": 479, "27772": 479, "43108": 479, "43077": 479, "43014": 479, "42323": 479, "42944": 479, "42934": 479, "42931": 479, "38250": 479, "42877": 479, "42923": 479, "42848": 479, "42901": 479, "_proto_memb": 479, "42780": 479, "42866": 479, "getcodec": 479, "42846": 479, "_codecs_cn": 479, "_codecs_hk": 479, "_codecs_iso2022": 479, "_codecs_jp": 479, "_codecs_kr": 479, "_codecs_tw": 479, "42851": 479, "42834": 479, "41748": 479, "dubost": 479, "42384": 479, "42383": 479, "42005": 479, "41604": 479, "user_ptr": 479, "set_panel_userptr": 479, "41149": 479, "stratford": 479, "33289": 479, "40304": 479, "bori": 479, "verkhovskiy": 479, "42811": 479, "yair": 479, "frid": 479, "40823": 479, "checktracecallbackcont": 479, "43031": 479, "36143": 479, "42874": 479, "add_cross_compiling_path": 479, "42584": 479, "42504": 479, "33065": 479, "23544": 479, "32631": 479, "42979": 479, "43030": 479, "42814": 479, "genericaliasobject": 479, "42806": 479, "40631": 479, "27794": 479, "42745": 479, "32381": 479, "30858": 479, "42615": 479, "resulttyp": 479, "40137": 479, "42008": 479, "40521": 479, "42257": 479, "42772": 479, "42759": 479, "42756": 479, "23328": 479, "envar": 479, "42740": 479, "42655": 479, "42727": 479, "38308": 479, "42721": 479, "nodefaultroot": 479, "tempor": 479, "25246": 479, "35728": 479, "15303": 479, "42681": 479, "42685": 479, "37961": 479, "42630": 479, "_run_exitfunc": 479, "42644": 479, "loge": 479, "36541": 479, "pgen2": 479, "42382": 479, "41877": 479, "autospect": 479, "auto_spec": 479, "set_spec": 479, "39717": 479, "42385": 479, "thread_stack_s": 479, "34750": 479, "_enumdict": 479, "42517": 479, "42678": 479, "28964": 479, "42470": 479, "42388": 479, "34463": 479, "harmon": 479, "42163": 479, "42090": 479, "42059": 479, "41960": 479, "41907": 479, "41891": 479, "24792": 479, "41462": 479, "40219": 479, "labeledscal": 479, "37193": 479, "39068": 479, "brandon": 479, "stansburi": 479, "17140": 479, "34398": 479, "42794": 479, "test_nntplib": 479, "aioe": 479, "42641": 479, "test_select": 479, "_test_all_chown_common": 479, "42199": 479, "41443": 479, "test_posix": 479, "41439": 479, "test_uuid": 479, "42692": 479, "__builtin_avail": 479, "42604": 479, "310d": 479, "42598": 479, "29076": 479, "42361": 479, "rc2": 479, "42726": 479, "42613": 479, "prope": 479, "42591": 479, "_py_fopen": 479, "_py_wfopen": 479, "_py_fopen_obj": 479, "42111": 479, "40052": 479, "40791": 479, "42576": 479, "42536": 479, "42500": 479, "42435": 479, "bytarray": 479, "41686": 479, "_pyos_sigintev": 479, "42381": 479, "42374": 479, "42349": 479, "42296": 479, "42332": 479, "42282": 479, "42266": 479, "42233": 479, "5054": 479, "run_cgi": 479, "http_accept": 479, "getallmatchinghead": 479, "42562": 479, "17735": 479, "findsourc": 479, "co_lineno": 479, "42116": 479, "42532": 479, "spec_arg": 479, "test_master_read": 479, "42487": 479, "42482": 479, "test_openpti": 479, "test_bas": 479, "15450": 479, "42406": 479, "whichmodul": 479, "42403": 479, "42375": 479, "37205": 479, "42328": 479, "42318": 479, "42350": 479, "42014": 479, "42237": 479, "illumo": 479, "42249": 479, "42236": 479, "41754": 479, "42183": 479, "42140": 479, "39825": 479, "platform_tag": 479, "cp38": 479, "41889": 479, "41861": 479, "40624": 479, "28850": 479, "_safe_repr": 479, "34215": 479, "12800": 479, "40968": 479, "40816": 479, "40550": 479, "39411": 479, "tentat": 479, "42153": 479, "41028": 479, "switcher": 479, "docsbuild": 479, "41473": 479, "bugzilla": 479, "show_bug": 479, "1866884": 479, "42553": 479, "test_call_lat": 479, "test_netrc": 479, "test_getaddrinfo_ipv6_scopeid_symbol": 479, "test_getnameinfo_ipv6_scopeid_symbol": 479, "test_test": 479, "test_mailcap": 479, "test_pip": 479, "40754": 479, "test_min_max_version_mismatch": 479, "libnet": 479, "detect_socket": 479, "42398": 479, "moveov": 479, "41617": 479, "pycore_bitutil": 479, "__builtin_bswap16": 479, "38823": 479, "ctypes_unicod": 479, "42087": 479, "40680": 479, "40998": 479, "42120": 479, "_copysign": 479, "38506": 479, "41116": 479, "unixxcompil": 479, "find_library_fil": 479, "42232": 479, "38443": 479, "42508": 479, "42426": 479, "searchengin": 479, "42415": 479, "42212": 479, "36310": 479, "_posixshmem": 479, "_queue": 479, "_pytrash_cond": 479, "42171": 479, "42085": 479, "42103": 479, "42051": 479, "42218": 479, "42214": 479, "42206": 479, "41796": 479, "42143": 479, "yonatan": 479, "41659": 479, "42150": 479, "42123": 479, "42030": 479, "41984": 479, "41993": 479, "41979": 479, "41902": 479, "41894": 479, "41435": 479, "35455": 479, "gethrvtim": 479, "kulik": 479, "26789": 479, "42146": 479, "uid_t": 479, "gid_t": 479, "41490": 479, "certifi": 479, "41052": 479, "42089": 479, "packagenotfounderror": 479, "41491": 479, "42065": 479, "charmap_decod": 479, "41966": 479, "dean": 479, "inwood": 479, "19270": 479, "28660": 479, "35823": 479, "42043": 479, "42021": 479, "39101": 479, "41976": 479, "triy": 479, "41943": 479, "41905": 479, "23706": 479, "41876": 479, "41831": 479, "41747": 479, "30681": 479, "toth": 479, "41586": 479, "16396": 479, "40592": 479, "40492": 479, "27321": 479, "38976": 479, "42061": 479, "41910": 479, "42010": 479, "41805": 479, "39693": 479, "39416": 479, "41739": 479, "test_race_between_set_target_and_flush": 479, "41970": 479, "41944": 479, "41306": 479, "scaletest": 479, "38439": 479, "38252": 479, "39107": 479, "41557": 479, "38324": 479, "41471": 479, "33987": 479, "40511": 479, "clover": 479, "42015": 479, "40423": 479, "41845": 479, "40422": 479, "_py_closerang": 479, "41986": 479, "41304": 479, "python3x": 479, "29778": 479, "15801": 479, "41162": 479, "15523": 479, "41004": 479, "39603": 479, "41909": 479, "_bisect": 479, "39934": 479, "41780": 479, "41690": 479, "_curses_panel": 479, "41681": 479, "41675": 479, "41670": 479, "41654": 479, "41631": 479, "_oper": 479, "1653741": 479, "41533": 479, "va_build_stack": 479, "do_mkstack": 479, "small_stack": 479, "41531": 479, "41525": 479, "_sha1": 479, "_md5": 479, "41431": 479, "41340": 479, "strdup": 479, "38156": 479, "pyos_stdioreadlin": 479, "41342": 479, "41295": 479, "41247": 479, "set_running_loop": 479, "41252": 479, "_servername_callback": 479, "41215": 479, "xlc": 479, "41218": 479, "41175": 479, "bytearrayobject": 479, "41094": 479, "39960": 479, "hackcheck": 479, "sneak": 479, "41084": 479, "41076": 479, "41056": 479, "41061": 479, "hashtabl": 479, "pypegen": 479, "pypars": 479, "35975": 479, "40636": 479, "40985": 479, "40958": 479, "40957": 479, "40950": 479, "40947": 479, "40847": 479, "threw": 479, "40889": 479, "40904": 479, "40903": 479, "40880": 479, "40883": 479, "40870": 479, "40854": 479, "40826": 479, "pyos_readlin": 479, "19468": 479, "nder": 479, "40780": 479, "38964": 479, "40750": 479, "40696": 479, "40679": 479, "29590": 479, "4022": 479, "_lzma": 479, "19569": 479, "_py_comp_diag_push": 479, "_py_comp_diag_ignore_depr_decl": 479, "_py_comp_diag_pop": 479, "26680": 479, "41900": 479, "41887": 479, "41773": 479, "41840": 479, "40564": 479, "40670": 479, "misindent": 479, "41833": 479, "41817": 479, "eventtyp": 479, "41815": 479, "mccormick": 479, "41517": 479, "39587": 479, "41789": 479, "32218": 479, "39651": 479, "mashal": 479, "_string": 479, "41732": 479, "41720": 479, "41696": 479, "41687": 479, "41662": 479, "39010": 479, "41638": 479, "41513": 479, "41609": 479, "39994": 479, "40782": 479, "41520": 479, "41528": 479, "41503": 479, "41497": 479, "41467": 479, "41425": 479, "41421": 479, "41316": 479, "41384": 479, "41317": 479, "41364": 479, "35328": 479, "virtual_env_prompt": 479, "41341": 479, "41344": 479, "41333": 479, "41288": 479, "newobj_ex": 479, "39017": 479, "20907": 479, "41273": 479, "_proactorreadpipetransport": 479, "41235": 479, "41207": 479, "distutilsexecerror": 479, "29727": 479, "39168": 479, "41194": 479, "41195": 479, "41193": 479, "41182": 479, "41161": 479, "40874": 479, "41138": 479, "31082": 479, "31938": 479, "41068": 479, "41058": 479, "find_funct": 479, "41048": 479, "41043": 479, "41025": 479, "41002": 479, "merri": 479, "40448": 479, "krzysztof": 479, "konopko": 479, "40924": 479, "devis": 479, "40955": 479, "40855": 479, "33689": 479, "40884": 479, "asaf": 479, "40876": 479, "40807": 479, "_maybe_compil": 479, "32604": 479, "39314": 479, "40834": 479, "with_xxsubinterpret": 479, "channel_send": 479, "40755": 479, "26407": 479, "39384": 479, "40777": 479, "pydatetime_isocalendardatetyp": 479, "38488": 479, "40767": 479, "wayland": 479, "wayland_display": 479, "attali": 479, "40795": 479, "16995": 479, "30008": 479, "30064": 479, "40759": 479, "40756": 479, "37129": 479, "40737": 479, "40726": 479, "40695": 479, "9216": 479, "evp": 479, "test_hashlib": 479, "test_smtplib": 479, "40614": 479, "40626": 479, "h5": 479, "hdf5": 479, "hdf": 479, "schwab": 479, "25920": 479, "201311": 479, "40671": 479, "40611": 479, "39881": 479, "13097": 479, "23082": 479, "40105": 479, "mazur": 479, "40084": 479, "31122": 479, "39728": 479, "39244": 479, "39040": 479, "35714": 479, "26543": 479, "12178": 479, "itay": 479, "elbirt": 479, "36290": 479, "33944": 479, "35078": 479, "29620": 479, "runtimeexcept": 479, "kernc": 479, "34226": 479, "content_length": 479, "duran": 479, "33660": 479, "28557": 479, "rawio": 479, "41774": 479, "35293": 479, "removedinsphinx40warn": 479, "37149": 479, "shipman": 479, "nmt": 479, "41726": 479, "41624": 479, "40204": 479, "c_allow_pre_v3": 479, "c_warn_on_allowed_pre_v3": 479, "41045": 479, "41314": 479, "40979": 479, "40552": 479, "39883": 479, "bsd0": 479, "37703": 479, "41939": 479, "test_sit": 479, "test_license_exists_at_url": 479, "41731": 479, "test_cmd_line_script": 479, "41602": 479, "41521": 479, "41477": 479, "test_genericalia": 479, "41085": 479, "41069": 479, "38377": 479, "41009": 479, "require_": 479, "_version": 479, "41003": 479, "test_copyreg": 479, "pickletest": 479, "40964": 479, "cmu": 479, "40927": 479, "test_binhex": 479, "38169": 479, "34401": 479, "38249": 479, "pin": 479, "40684": 479, "40683": 479, "41744": 479, "41627": 479, "41526": 479, "41492": 479, "uac": 479, "40948": 479, "41412": 479, "ucrt": 479, "40741": 479, "41142": 479, "41074": 479, "41039": 479, "40164": 479, "39631": 479, "40677": 479, "37556": 479, "39580": 479, "rick": 479, "heil": 479, "41005": 479, "41775": 479, "35764": 479, "40181": 479, "41468": 479, "41373": 479, "41300": 479, "41152": 479, "41144": 479, "39885": 479, "40723": 479, "test_idl": 479, "recursion_crit": 479, "41689": 479, "41524": 479, "40989": 479, "pyerror": 479, "40910": 479, "40724": 479, "_pyeval_evalcod": 479, "40703": 479, "py_tp_getset": 479, "39583": 479, "40501": 479, "rpcrt4": 479, "40663": 479, "40596": 479, "40593": 479, "40585": 479, "40566": 479, "40502": 479, "n_col_offset": 479, "40527": 479, "40523": 479, "40246": 479, "d00": 479, "fca": 479, "40417": 479, "rouhani": 479, "40408": 479, "29587": 479, "40328": 479, "40228": 479, "38880": 479, "40662": 479, "40665": 479, "40536": 479, "40637": 479, "blake1": 479, "alpha2": 479, "40607": 479, "skurikhin": 479, "40612": 479, "40597": 479, "40571": 479, "40503": 479, "40397": 479, "40549": 479, "31033": 479, "40541": 479, "40515": 479, "40504": 479, "40559": 479, "40480": 479, "futil": 479, "40457": 479, "40355": 479, "curti": 479, "40459": 479, "39435": 479, "39305": 479, "_nntpbase": 479, "32494": 479, "gdbm_count": 479, "40453": 479, "40394": 479, "39995": 479, "_threadwakeup": 479, "39966": 479, "25597": 479, "40389": 479, "40273": 479, "39075": 479, "40025": 479, "onstott": 479, "39058": 479, "40561": 479, "40499": 479, "39705": 479, "40055": 479, "40436": 479, "pythoninfo": 479, "40653": 479, "_dirnamew": 479, "have_symlink": 479, "40514": 479, "40650": 479, "winsock2": 479, "40458": 479, "39148": 479, "35569": 479, "multissltest": 479, "40431": 479, "40163": 479, "pycfunction_checkexact": 479, "pycmethod_checkexact": 479, "pycmethod_check": 479, "40545": 479, "_pyerr_gettopmostexcept": 479, "40412": 479, "nullifi": 479, "inittab_copi": 479, "szorc": 479, "40121": 479, "39073": 479, "39503": 479, "8492": 479, "schwager": 479, "40313": 479, "40267": 479, "39522": 479, "40082": 479, "pyscannerobject": 479, "40141": 479, "40067": 479, "henriqu": 479, "silva": 479, "20526": 479, "40020": 479, "parsetok": 479, "codepath": 479, "32894": 479, "40398": 479, "40396": 479, "_sc_open_max": 479, "fdescf": 479, "emast": 479, "cem": 479, "kevan": 479, "koob": 479, "242274": 479, "40138": 479, "39942": 479, "40275": 479, "40330": 479, "40148": 479, "40325": 479, "40287": 479, "40290": 479, "40282": 479, "40277": 479, "40270": 479, "json_object": 479, "29255": 479, "40260": 479, "40234": 479, "40091": 479, "_at_fork_reinit": 479, "40149": 479, "_abc_data": 479, "40196": 479, "40190": 479, "_sc_aix_realmem": 479, "36517": 479, "40126": 479, "40108": 479, "incorr": 479, "40089": 479, "_after_fork": 479, "_mainthread": 479, "_main_thread": 479, "_dummythread": 479, "_reset_internal_lock": 479, "_register_atexit": 479, "40050": 479, "40014": 479, "ngroup": 479, "40017": 479, "40016": 479, "39953": 479, "38891": 479, "39682": 479, "38410": 479, "35967": 479, "35113": 479, "karthikeyan": 479, "singaravelan": 479, "31758": 479, "27635": 479, "39879": 479, "sami": 479, "lahfa": 479, "38387": 479, "13743": 479, "test_c_locale_coercion": 479, "40162": 479, "40146": 479, "azur": 479, "40003": 479, "bisect_cmd": 479, "verbose2": 479, "39380": 479, "39793": 479, "1812": 479, "doni": 479, "38360": 479, "40158": 479, "38527": 479, "38329": 479, "icn": 479, "38689": 479, "40385": 479, "checkpyc": 479, "40179": 479, "38576": 479, "18348": 479, "_heapq": 479, "tracing_poss": 479, "_statist": 479, "39968": 479, "get_module_st": 479, "39965": 479, "38373": 479, "19466": 479, "38894": 479, "wozniski": 479, "39871": 479, "39776": 479, "39778": 479, "38091": 479, "39087": 479, "39520": 479, "39220": 479, "22490": 479, "39830": 479, "39999": 479, "39991": 479, "39656": 479, "39360": 479, "experienc": 479, "35370": 479, "39936": 479, "aix_platform": 479, "39652": 479, "39915": 479, "38662": 479, "38075": 479, "39916": 479, "39850": 479, "36287": 479, "39889": 479, "39828": 479, "13487": 479, "39674": 479, "28577": 479, "39826": 479, "getconnect": 479, "39763": 479, "39794": 479, "39517": 479, "39678": 479, "queue_manag": 479, "39764": 479, "pyasyncgenobject": 479, "39769": 479, "38691": 479, "39719": 479, "39667": 479, "39609": 479, "39548": 479, "qop": 479, "39495": 479, "38971": 479, "38641": 479, "vlad": 479, "emelianov": 479, "37534": 479, "prolog": 479, "39868": 479, "13790": 479, "17422": 479, "39530": 479, "39718": 479, "39677": 479, "40019": 479, "27807": 479, "test_startup_import": 479, "26067": 479, "test_chown": 479, "39855": 479, "test_subprocess": 479, "test_us": 479, "39761": 479, "dflag": 479, "39930": 479, "vcruntime140": 479, "39847": 479, "hibern": 479, "38597": 479, "38380": 479, "39789": 479, "34803": 479, "27115": 479, "39852": 479, "39781": 479, "36184": 479, "take_gil": 479, "pthread_cond_timedwait": 479, "38080": 479, "fix_urllib": 479, "roberto": 479, "meza": 479, "cabrera": 479, "_pyarg_nokwnam": 479, "_pytrash_begin": 479, "_pytrash_end": 479, "39884": 479, "38643": 479, "39824": 479, "38913": 479, "whwn": 479, "39184": 479, "39401": 479, "39382": 479, "39619": 479, "39606": 479, "39386": 479, "39579": 479, "ast_for_dotted_nam": 479, "39510": 479, "39502": 479, "1902": 479, "39492": 479, "39453": 479, "39320": 479, "build_map_unpack": 479, "39219": 479, "36051": 479, "38960": 479, "30566": 479, "39649": 479, "39681": 479, "35950": 479, "39104": 479, "processpoolexcutor": 479, "39627": 479, "39474": 479, "21016": 479, "39590": 479, "39595": 479, "39567": 479, "39559": 479, "38149": 479, "39546": 479, "39450": 479, "stripe": 479, "39493": 479, "39491": 479, "39485": 479, "38932": 479, "vegard": 479, "stikbakk": 479, "39082": 479, "39432": 479, "18819": 479, "devmajor": 479, "devminor": 479, "39274": 479, "35727": 479, "32173": 479, "39572": 479, "39654": 479, "39153": 479, "39392": 479, "impress": 479, "9056": 479, "38325": 479, "test_winconsoleio": 479, "test_add_file_after_2107": 479, "39553": 479, "sxs": 479, "39439": 479, "39393": 479, "unresolv": 479, "38883": 479, "39185": 479, "39663": 479, "find_good_parse_start": 479, "39600": 479, "30780": 479, "configdialog": 479, "39388": 479, "38792": 479, "bytes_method": 479, "pycore_bytes_method": 479, "pydoc_strvar_shar": 479, "pycore_dtoa": 479, "39500": 479, "39511": 479, "38076": 479, "39245": 479, "pyobject_fastcalldict": 479, "39427": 479, "39421": 479, "build_list_unpack": 479, "build_tuple_unpack": 479, "build_set_unpack": 479, "39048": 479, "39235": 479, "39209": 479, "39216": 479, "39215": 479, "39200": 479, "39166": 479, "39114": 479, "38588": 479, "38610": 479, "32021": 479, "brot": 479, "39430": 479, "39390": 479, "39406": 479, "39396": 479, "29435": 479, "woodruff": 479, "39389": 479, "39313": 479, "exec_funct": 479, "refactoringtool": 479, "39297": 479, "38901": 479, "39242": 479, "35292": 479, "38907": 479, "39152": 479, "giovanni": 479, "lombardo": 479, "39198": 479, "stopit": 479, "39191": 479, "38871": 479, "39142": 479, "convertingtupl": 479, "39158": 479, "39129": 479, "39057": 479, "proxy_bypass_environ": 479, "39056": 479, "39055": 479, "21600": 479, "39019": 479, "38914": 479, "juergen": 479, "gmach": 479, "38878": 479, "35182": 479, "andriy": 479, "maletski": 479, "38630": 479, "38536": 479, "eur": 479, "38473": 479, "38361": 479, "38293": 479, "37958": 479, "get_profile_dict": 479, "28367": 479, "b500000": 479, "b576000": 479, "b921600": 479, "b1000000": 479, "b1152000": 479, "b1500000": 479, "b2000000": 479, "b2500000": 479, "b3000000": 479, "b3500000": 479, "b4000000": 479, "andrey": 479, "smirnov": 479, "39381": 479, "38918": 479, "3530": 479, "39160": 479, "39144": 479, "ctag": 479, "etag": 479, "39050": 479, "34118": 479, "etcetera": 479, "32989": 479, "newline_and_indent_ev": 479, "39164": 479, "_pyerr_getexcinfo": 479, "38945": 479, "38804": 479, "39028": 479, "39080": 479, "39031": 479, "39008": 479, "38673": 479, "38922": 479, "38920": 479, "38892": 479, "38852": 479, "38858": 479, "nsmallnegint": 479, "nsmallposint": 479, "36854": 479, "38328": 479, "38707": 479, "38629": 479, "27145": 479, "hongweipeng": 479, "38021": 479, "pep425": 479, "35409": 479, "33387": 479, "with_cleanup_finish": 479, "39033": 479, "39022": 479, "39006": 479, "38708": 479, "38698": 479, "invalidmessageid": 479, "38994": 479, "38979": 479, "38978": 479, "38986": 479, "taskwakeupmethwrapp": 479, "38982": 479, "38529": 479, "27413": 479, "38634": 479, "33684": 479, "parse_message_id": 479, "38927": 479, "26730": 479, "38881": 479, "38876": 479, "binget": 479, "long_binget": 479, "38688": 479, "kinoshita": 479, "38863": 479, "is_cgi": 479, "37838": 479, "38859": 479, "38857": 479, "38834": 479, "38821": 479, "federico": 479, "bond": 479, "38811": 479, "toke": 479, "iland": 479, "rgensen": 479, "38686": 479, "38348": 479, "37523": 479, "38045": 479, "_decompos": 479, "36820": 479, "36406": 479, "34776": 479, "20928": 479, "29636": 479, "38928": 479, "38899": 479, "fishshel": 479, "cmds": 479, "22377": 479, "38546": 479, "test_ressources_gced_in_work": 479, "38614": 479, "38547": 479, "test_pti": 479, "38992": 479, "38991": 479, "strip_python_stderr": 479, "38965": 479, "_stack_overflow": 479, "38875": 479, "38841": 479, "test_create_datagram_endpoint_existing_sock_unix": 479, "test_pidfd_open": 479, "38839": 479, "38669": 479, "37957": 479, "36500": 479, "39007": 479, "37931": 479, "beno": 479, "38943": 479, "38862": 479, "38636": 479, "38722": 479, "killen": 479, "38622": 479, "38418": 479, "38243": 479, "38174": 479, "15903": 479, "37764": 479, "_header_value_pars": 479, "get_unstructur": 479, "ashwin": 479, "ramaswami": 479, "37461": 479, "37463": 479, "37364": 479, "34631": 479, "1c": 479, "34155": 479, "maxk": 479, "jpic": 479, "38639": 479, "38640": 479, "38613": 479, "38535": 479, "38525": 479, "38465": 479, "38469": 479, "38437": 479, "gc_debug": 479, "38392": 479, "38210": 479, "38402": 479, "crypt_r": 479, "37474": 479, "fedisableexcept": 479, "38006": 479, "38317": 479, "38310": 479, "36871": 479, "11410": 479, "minimis": 479, "38219": 479, "38236": 479, "38013": 479, "async_generator_athrow": 479, "38124": 479, "38116": 479, "38113": 479, "38074": 479, "38073": 479, "38072": 479, "38069": 479, "38071": 479, "38005": 479, "channelid": 479, "36946": 479, "37994": 479, "37947": 479, "37812": 479, "check_small_int": 479, "37830": 479, "20490": 479, "37840": 479, "37802": 479, "37409": 479, "32912": 479, "37757": 479, "targetscopeerror": 479, "36279": 479, "36311": 479, "2gib": 479, "37648": 479, "needl": 479, "37619": 479, "37593": 479, "37543": 479, "37537": 479, "_pyobject_fre": 479, "37467": 479, "37433": 479, "37417": 479, "check_interv": 479, "24214": 479, "37316": 479, "37300": 479, "37269": 479, "37231": 479, "37213": 479, "37219": 479, "15913": 479, "36922": 479, "37160": 479, "37077": 479, "36781": 479, "34556": 479, "35551": 479, "tis260": 479, "tacti": 479, "dumpleton": 479, "27575": 479, "su": 479, "ag": 479, "36589": 479, "38807": 479, "38724": 479, "doroschenko": 479, "38786": 479, "python273": 479, "38785": 479, "38723": 479, "27805": 479, "38438": 479, "38761": 479, "38716": 479, "rotatinghandl": 479, "eponym": 479, "38334": 479, "38586": 479, "38565": 479, "34679": 479, "asynci": 479, "31202": 479, "36321": 479, "38521": 479, "38478": 479, "33604": 479, "38378": 479, "38417": 479, "38449": 479, "15522": 479, "38431": 479, "38109": 479, "38422": 479, "38405": 479, "38332": 479, "_encoded_word": 479, "38341": 479, "38319": 479, "38242": 479, "38019": 479, "38163": 479, "38161": 479, "_awaitev": 479, "38216": 479, "30458": 479, "38108": 479, "38265": 479, "38248": 479, "38237": 479, "34002": 479, "38191": 479, "_typenam": 479, "38155": 479, "tahia": 479, "khan": 479, "38185": 479, "38136": 479, "37828": 479, "toriz": 479, "cruz": 479, "38175": 479, "33936": 479, "34706": 479, "38153": 479, "blake2b512": 479, "38115": 479, "38148": 479, "38142": 479, "36991": 479, "38134": 479, "pbkdf2_hmac_fast": 479, "38132": 479, "38008": 479, "37405": 479, "38121": 479, "38110": 479, "closewalk": 479, "fdwalk": 479, "38093": 479, "37488": 479, "35640": 479, "38086": 479, "37251": 479, "38037": 479, "38066": 479, "feed_data": 479, "set_transport": 479, "38059": 479, "38049": 479, "37953": 479, "forwardrefer": 479, "38026": 479, "35923": 479, "_origin": 479, "38010": 479, "34410": 479, "37140": 479, "37587": 479, "scanstr": 479, "10978": 479, "37972": 479, "blhsing": 479, "37965": 479, "ccompil": 479, "has_funct": 479, "37964": 479, "37960": 479, "36205": 479, "rusag": 479, "37950": 479, "methodi": 479, "37798": 479, "test_statist": 479, "26589": 479, "37915": 479, "32554": 479, "9938": 479, "37851": 479, "32793": 479, "37885": 479, "37868": 479, "__dataclass_fields__": 479, "37811": 479, "37863": 479, "21131": 479, "sigstksz": 479, "fastpath": 479, "14465": 479, "37810": 479, "37772": 479, "ancestr": 479, "18578": 479, "37785": 479, "34488": 479, "18049": 479, "thread_pthread": 479, "37738": 479, "setcchar": 479, "37723": 479, "vaginay": 479, "35943": 479, "32178": 479, "37268": 479, "11953": 479, "wsa": 479, "37685": 479, "37697": 479, "37695": 479, "37689": 479, "29553": 479, "nester": 479, "37691": 479, "37354": 479, "37664": 479, "37642": 479, "36161": 479, "ttyname_r": 479, "36324": 479, "37555": 479, "_call_match": 479, "_call": 479, "_spec_signatur": 479, "elizabeth": 479, "uselton": 479, "29446": 479, "16970": 479, "leender": 479, "34443": 479, "__qualnam": 479, "37491": 479, "marco": 479, "paolini": 479, "18378": 479, "_parse_localenam": 479, "37579": 479, "21478": 479, "37531": 479, "37482": 479, "36993": 479, "hillier": 479, "37502": 479, "37520": 479, "18374": 479, "37424": 479, "37421": 479, "get_temp_dir": 479, "37479": 479, "37440": 479, "37437": 479, "37428": 479, "ssl_verify_post_handshak": 479, "37420": 479, "37406": 479, "29412": 479, "37394": 479, "26967": 479, "37212": 479, "37372": 479, "blanchard": 479, "37345": 479, "udplit": 479, "gabe": 479, "appleton": 479, "37358": 479, "37347": 479, "aleksandr": 479, "balezin": 479, "37163": 479, "37085": 479, "37328": 479, "37305": 479, "webmanifest": 479, "33972": 479, "37280": 479, "37279": 479, "19865": 479, "37266": 479, "37210": 479, "21872": 479, "35922": 479, "36607": 479, "36402": 479, "37206": 479, "37111": 479, "12144": 479, "34886": 479, "37173": 479, "37165": 479, "_count_el": 479, "34767": 479, "37158": 479, "34282": 479, "37150": 479, "_actionscontain": 479, "35621": 479, "36520": 479, "30835": 479, "donnellan": 479, "31163": 479, "25068": 479, "26185": 479, "micka": 479, "schoentgen": 479, "21315": 479, "rfc2047": 479, "test_datetim": 479, "35805": 479, "35070": 479, "ngroups_max": 479, "31783": 479, "36582": 479, "32424": 479, "hemsley": 479, "36564": 479, "36302": 479, "36250": 479, "36046": 479, "mclean": 479, "32627": 479, "35168": 479, "8538": 479, "20504": 479, "11122": 479, "rpmbuild": 479, "34749": 479, "34519": 479, "28009": 479, "32498": 479, "33348": 479, "32689": 479, "maxwel": 479, "13b": 479, "mckinnon": 479, "32820": 479, "27657": 479, "4963": 479, "21767": 479, "38816": 479, "38351": 479, "38778": 479, "38592": 479, "brazilian": 479, "38294": 479, "38053": 479, "26868": 479, "36797": 479, "37977": 479, "37979": 479, "isopars": 479, "12707": 479, "37937": 479, "37759": 479, "37726": 479, "32910": 479, "37256": 479, "37284": 479, "30088": 479, "sviatoslav": 479, "sydorenko": 479, "37521": 479, "mintz": 479, "37456": 479, "37487": 479, "mexico": 479, "tech": 479, "37478": 479, "34903": 479, "gleen": 479, "36260": 479, "37004": 479, "36960": 479, "brad": 479, "36487": 479, "23460": 479, "tuoma": 479, "suutari": 479, "35803": 479, "34293": 479, "25237": 479, "test_commun": 479, "38502": 479, "35998": 479, "test_start_tls_server_1": 479, "serverproto": 479, "38470": 479, "test_compileal": 479, "test_compile_dir_maxlevel": 479, "38239": 479, "38275": 479, "38271": 479, "38270": 479, "37123": 479, "test_mymanag": 479, "_finalize_manag": 479, "38212": 479, "test_queue_feeder_donot_stop_onexc": 479, "38117": 479, "38018": 479, "37805": 479, "37876": 479, "36833": 479, "pydatetime_xxx_get_xxx": 479, "37558": 479, "37526": 479, "test_distutil": 479, "test_build_ext": 479, "_run_fin": 479, "37472": 479, "outstanding_bug": 479, "37199": 479, "19696": 479, "test_pkg_import": 479, "37335": 479, "37411": 479, "test_wsgiref": 479, "testenviron": 479, "37400": 479, "test_o": 479, "test_chown_gid": 479, "37359": 479, "test_python_": 479, "cleantest": 479, "37362": 479, "37278": 479, "proactorloopctrlc": 479, "37261": 479, "37069": 479, "37252": 479, "test_clos": 479, "test_events_mask_overflow": 479, "37169": 479, "_pyobject_isfre": 479, "37153": 479, "test_multiprocess": 479, "34001": 479, "36919": 479, "test_source_encod": 479, "test_issue2301": 479, "30202": 479, "test_abc": 479, "macaddr": 479, "34596": 479, "uncal": 479, "naitre": 479, "38809": 479, "38684": 479, "38468": 479, "getvar": 479, "37415": 479, "stdatom": 479, "atomic_uintptr_t": 479, "38301": 479, "d_reentrant": 479, "36002": 479, "ac_path_tool": 479, "ac_path_target_tool": 479, "37936": 479, "gitignor": 479, "repo": 479, "37760": 479, "37725": 479, "37468": 479, "wininst": 479, "37189": 479, "pyrun_xxx": 479, "25361": 479, "36210": 479, "asi": 479, "libcurs": 479, "38589": 479, "38453": 479, "38519": 479, "38492": 479, "38344": 479, "38359": 479, "38355": 479, "38092": 479, "38133": 479, "38114": 479, "32592": 479, "36634": 479, "38081": 479, "38087": 479, "test_ntpath": 479, "38088": 479, "v142": 479, "37283": 479, "38030": 479, "38020": 479, "37705": 479, "winerror_to_errno": 479, "37549": 479, "1311": 479, "9949": 479, "36266": 479, "_pyimport_findsharedfuncptrwindow": 479, "nyayapati": 479, "25172": 479, "37778": 479, "37734": 479, "37702": 479, "37672": 479, "pip_us": 479, "37445": 479, "format_message_ignore_insert": 479, "formatmessagew": 479, "37369": 479, "37380": 479, "_activ": 479, "ruslan": 479, "kuprieiev": 479, "35360": 479, "37267": 479, "36779": 479, "cp_utf7": 479, "32587": 479, "28269": 479, "strcasecmp": 479, "_stricmp": 479, "minmin": 479, "gong": 479, "36590": 479, "rfcomm": 479, "38089": 479, "5mb": 479, "16mb": 479, "26353": 479, "4630": 479, "38598": 479, "36698": 479, "35379": 479, "editorwindow": 479, "38183": 479, "38077": 479, "38041": 479, "35771": 479, "hover_delay": 479, "test_tooltip": 479, "37824": 479, "37929": 479, "37902": 479, "37849": 479, "36419": 479, "37748": 479, "37692": 479, "37628": 479, "33610": 479, "37530": 479, "27452": 479, "removefil": 479, "createconfighandl": 479, "37325": 479, "37321": 479, "26806": 479, "37177": 479, "37039": 479, "35763": 479, "obtrus": 479, "36390": 479, "38118": 479, "38347": 479, "pathfix": 479, "37803": 479, "37942": 479, "argumentclin": 479, "37704": 479, "37675": 479, "37034": 479, "37064": 479, "pathscript": 479, "37633": 479, "38540": 479, "38395": 479, "36389": 479, "_pyobject_checkconsist": 479, "visit_decref": 479, "38266": 479, "38303": 479, "kieft": 479, "38205": 479, "38140": 479, "37926": 479, "37879": 479, "subtype_dealloc": 479, "37151": 479, "21120": 479, "37337": 479, "28805": 479, "positon": 479, "37215": 479, "36842": 479, "37170": 479, "35381": 479, "direntrytyp": 479, "scandiriteratortyp": 479, "34331": 479, "35907": 479, "9948": 479, "local_fil": 479, "33529": 479, "33164": 479, "35814": 479, "37126": 479, "37122": 479, "37087": 479, "37072": 479, "pyast_fromnodeobject": 479, "37029": 479, "26423": 479, "wrap_lenfunc": 479, "37050": 479, "expr_text": 479, "22385": 479, "36878": 479, "e1000": 479, "2180": 479, "36907": 479, "36826": 479, "namedexpress": 479, "ast_unpars": 479, "1875": 479, "36861": 479, "28866": 479, "36851": 479, "27639": 479, "blahay": 479, "erick": 479, "cervant": 479, "vaultah": 479, "36737": 479, "pyruntimest": 479, "24048": 479, "remove_modul": 479, "27987": 479, "36601": 479, "main_pid": 479, "36594": 479, "36045": 479, "36035": 479, "35983": 479, "20602": 479, "26826": 479, "31862": 479, "37120": 479, "12202": 479, "26835": 479, "29262": 479, "12639": 479, "35246": 479, "35279": 479, "37076": 479, "37054": 479, "_buffer": 479, "37058": 479, "37047": 479, "37049": 479, "37046": 479, "37045": 479, "37035": 479, "pollut": 479, "37001": 479, "36996": 479, "37008": 479, "27737": 479, "36969": 479, "36983": 479, "36972": 479, "36949": 479, "36948": 479, "33524": 479, "licht": 479, "takeuchi": 479, "24564": 479, "ying": 479, "36888": 479, "25652": 479, "36916": 479, "36889": 479, "writeon": 479, "readwrit": 479, "connect_unix": 479, "streamserv": 479, "flowcontrolmix": 479, "36845": 479, "23378": 479, "36867": 479, "23896": 479, "pygram": 479, "35545": 479, "36778": 479, "semaphore_track": 479, "24538": 479, "36832": 479, "36814": 479, "33110": 479, "26903": 479, "36813": 479, "36806": 479, "36802": 479, "36801": 479, "36748": 479, "8138": 479, "simpleserv": 479, "29183": 479, "36548": 479, "36542": 479, "36533": 479, "35252": 479, "36368": 479, "27497": 479, "ashish": 479, "nitin": 479, "patil": 479, "36239": 479, "keyedarch": 479, "35125": 479, "35721": 479, "31855": 479, "26660": 479, "34271": 479, "33569": 479, "34424": 479, "troeger": 479, "34303": 479, "33361": 479, "22454": 479, "31922": 479, "24882": 479, "31961": 479, "33123": 479, "buchholz": 479, "22102": 479, "facioni": 479, "32515": 479, "32299": 479, "vadim": 479, "tsander": 479, "27141": 479, "31829": 479, "x1a": 479, "23395": 479, "36896": 479, "36686": 479, "36984": 479, "36868": 479, "host_flag": 479, "35924": 479, "36783": 479, "time_fromtimeandfold": 479, "edison": 479, "abahurir": 479, "22865": 479, "35397": 479, "32995": 479, "33519": 479, "33482": 479, "25735": 479, "20285": 479, "test_coroutin": 479, "test_cprofil": 479, "test_rais": 479, "test_yield_from": 479, "37098": 479, "test_memfd_cr": 479, "37081": 479, "36915": 479, "36719": 479, "child_error": 479, "36816": 479, "selfsigned_pythontestdotnet": 479, "35925": 479, "36782": 479, "36342": 479, "sem_open": 479, "36786": 479, "36965": 479, "status_control_c_exit": 479, "35926": 479, "1b": 479, "36231": 479, "35610": 479, "context_use_ps1": 479, "prompt_last_lin": 479, "31858": 479, "37038": 479, "36958": 479, "36807": 479, "usb": 479, "32411": 479, "37053": 479, "chih": 479, "36379": 479, "37107": 479, "_pyobject_callmethodidobjarg": 479, "_pyobject_getmethod": 479, "sullivan": 479, "36742": 479, "9740": 479, "35755": 479, "cs_path": 479, "32849": 479, "20180": 479, "36611": 479, "serialno": 479, "36549": 479, "36504": 479, "pycarraytype_new": 479, "20844": 479, "36452": 479, "36459": 479, "tok_nextc": 479, "36433": 479, "classmethoddescr_cal": 479, "36430": 479, "36440": 479, "parsererror": 479, "skrobov": 479, "18372": 479, "35952": 479, "1613500": 479, "36734": 479, "stack_t": 479, "current_stack": 479, "36650": 479, "28552": 479, "project_bas": 479, "find_execut": 479, "25430": 479, "ipnetwork": 479, "30485": 479, "36613": 479, "36598": 479, "36575": 479, "33461": 479, "36559": 479, "lean": 479, "34373": 479, "36232": 479, "rougeth": 479, "36050": 479, "36522": 479, "houglum": 479, "30427": 479, "maier": 479, "36385": 479, "36434": 479, "36407": 479, "surjaninov": 479, "36366": 479, "unstart": 479, "test_tim": 479, "faiur": 479, "36227": 479, "35936": 479, "35376": 479, "17396": 479, "35934": 479, "23078": 479, "felip": 479, "ochoa": 479, "35416": 479, "35082": 479, "34547": 479, "31658": 479, "34139": 479, "33291": 479, "31310": 479, "31292": 479, "36625": 479, "30840": 479, "36523": 479, "36425": 479, "36345": 479, "literalinclud": 479, "36157": 479, "33043": 479, "35581": 479, "33832": 479, "32913": 479, "36725": 479, "36454": 479, "test_monoton": 479, "test_cyclic_gc": 479, "36635": 479, "36629": 479, "test_imap4_host_default_valu": 479, "test_getallocatedblock": 479, "36560": 479, "36565": 479, "test_resourc": 479, "test_tabnanni": 479, "36436": 479, "pymem_buffer_overflow": 479, "test_utf8_mod": 479, "36341": 479, "36747": 479, "scriptsinstal": 479, "36618": 479, "fmax": 479, "movap": 479, "movup": 479, "36605": 479, "36577": 479, "36544": 479, "36146": 479, "36508": 479, "36503": 479, "aix4": 479, "35920": 479, "arm32": 479, "36649": 479, "34144": 479, "mend": 479, "36509": 479, "35941": 479, "36441": 479, "36010": 479, "29515": 479, "ipproto_ah": 479, "ipproto_cbt": 479, "ipproto_dstopt": 479, "ipproto_egp": 479, "ipproto_esp": 479, "ipproto_frag": 479, "ipproto_ggp": 479, "ipproto_hopopt": 479, "ipproto_iclfxbm": 479, "ipproto_icmpv6": 479, "ipproto_idp": 479, "ipproto_igmp": 479, "ipproto_igp": 479, "ipproto_ipv4": 479, "ipproto_ipv6": 479, "ipproto_l2tp": 479, "ipproto_max": 479, "ipproto_nd": 479, "ipproto_non": 479, "ipproto_pgm": 479, "ipproto_pim": 479, "ipproto_pup": 479, "ipproto_rdp": 479, "ipproto_rout": 479, "ipproto_sctp": 479, "ipproto_st": 479, "35947": 479, "34060": 479, "kloth": 479, "31512": 479, "18075": 479, "36429": 479, "14546": 479, "36641": 479, "pydoc_var": 479, "cleanbyt": 479, "deaddyt": 479, "36443": 479, "_py_preiniti": 479, "_pypreconfig": 479, "36025": 479, "36216": 479, "35121": 479, "36421": 479, "36412": 479, "36398": 479, "structseq_repr": 479, "36256": 479, "parsermodul": 479, "dfa": 479, "36365": 479, "36374": 479, "merge_consts_recurs": 479, "36236": 479, "36352": 479, "36301": 479, "36333": 479, "_pyruntimestate_fini": 479, "36332": 479, "36282": 479, "30040": 479, "36262": 479, "_py_dg_strtod": 479, "36252": 479, "36218": 479, "36188": 479, "vestig": 479, "martijn": 479, "pieter": 479, "36124": 479, "35808": 479, "36401": 479, "34745": 479, "_fields_default": 479, "36298": 479, "36285": 479, "stephan": 479, "hohe": 479, "36272": 479, "36280": 479, "35931": 479, "36251": 479, "stderrprint": 479, "36235": 479, "customize_compil": 479, "35807": 479, "36139": 479, "36179": 479, "36169": 479, "36103": 479, "36130": 479, "35652": 479, "35178": 479, "tashrif": 479, "billah": 479, "36106": 479, "sinpi": 479, "dmitrii": 479, "pasechnik": 479, "36091": 479, "chen": 479, "36043": 479, "35899": 479, "21269": 479, "akshay": 479, "35843": 479, "_namespacepath": 479, "35802": 479, "35715": 479, "librat": 479, "_process_work": 479, "35493": 479, "35661": 479, "35198": 479, "36138": 479, "21314": 479, "36234": 479, "posixuidgidtest": 479, "test_r": 479, "test_locale_flag": 479, "36123": 479, "36356": 479, "test_extens": 479, "36312": 479, "50220": 479, "50221": 479, "50222": 479, "50225": 479, "50227": 479, "50229": 479, "57002": 479, "57011": 479, "65000": 479, "24643": 479, "_timezon": 479, "36405": 479, "36396": 479, "fgbg": 479, "gethighlight": 479, "36176": 479, "darken": 479, "23205": 479, "23216": 479, "36152": 479, "colordeleg": 479, "close_when_don": 479, "32129": 479, "blurri": 479, "36096": 479, "30348": 479, "35132": 479, "gdb7": 479, "32217": 479, "36142": 479, "coreconfig": 479, "pycore_coreconfig": 479, "36052": 479, "35942": 479, "35992": 479, "35993": 479, "35991": 479, "_randommodul": 479, "35961": 479, "slice_richcompar": 479, "35911": 479, "12822": 479, "pthread_condattr_setclock": 479, "31506": 479, "35724": 479, "33608": 479, "_py_addpendingcal": 479, "33989": 479, "35512": 479, "35918": 479, "18283": 479, "35960": 479, "35500": 479, "24209": 479, "35321": 479, "nina": 479, "zakharenko": 479, "35378": 479, "34294": 479, "35615": 479, "34572": 479, "burgess": 479, "36083": 479, "36007": 479, "22062": 479, "27313": 479, "comboboxtest": 479, "36019": 479, "36037": 479, "rhel8": 479, "35798": 479, "35505": 479, "35917": 479, "shareabl": 479, "35704": 479, "test_unpack_archive_xztar": 479, "maxdata": 479, "0x20000000": 479, "aixtool": 479, "34720": 479, "m_state": 479, "35976": 479, "35692": 479, "35872": 479, "35873": 479, "35299": 479, "24310": 479, "35833": 479, "35689": 479, "35746": 479, "5010": 479, "deref": 479, "talo": 479, "0758": 479, "nicola": 479, "edet": 479, "34812": 479, "34791": 479, "domreg": 479, "34623": 479, "14647": 479, "_py_hashsecret": 479, "34405": 479, "0i": 479, "33871": 479, "32533": 479, "33136": 479, "8970": 479, "x509_verify_param_set1_host": 479, "namelen": 479, "33001": 479, "32981": 479, "1061": 479, "jami": 479, "35877": 479, "typed_ast": 479, "35720": 479, "pymain_parse_cmdline_impl": 479, "35634": 479, "35623": 479, "35214": 479, "test_io": 479, "35560": 479, "35552": 479, "35504": 479, "35494": 479, "unbalanc": 479, "35444": 479, "35436": 479, "35423": 479, "35357": 479, "magicproxi": 479, "from_kal": 479, "_mock_": 479, "35372": 479, "35336": 479, "31241": 479, "33954": 479, "35269": 479, "35193": 479, "35169": 479, "34022": 479, "28401": 479, "stefano": 479, "rivera": 479, "29341": 479, "35050": 479, "29743": 479, "16806": 479, "35029": 479, "34983": 479, "34974": 479, "34939": 479, "34973": 479, "34876": 479, "34879": 479, "bytesobject": 479, "34784": 479, "structsequ": 479, "34854": 479, "34824": 479, "30156": 479, "property_descr_get": 479, "34751": 479, "xxhash": 479, "34735": 479, "timemodul": 479, "34683": 479, "34653": 479, "pyparser_simpleparsestringfilenam": 479, "32236": 479, "34637": 479, "1621": 479, "34588": 479, "34485": 479, "_bootlocal": 479, "34527": 479, "34403": 479, "34523": 479, "12458": 479, "34408": 479, "34400": 479, "34377": 479, "_pyobject_realloc": 479, "34353": 479, "34320": 479, "34113": 479, "constantin": 479, "petrisor": 479, "34100": 479, "34151": 479, "34170": 479, "33237": 479, "34149": 479, "34125": 479, "34141": 479, "34126": 479, "24618": 479, "34068": 479, "34087": 479, "34080": 479, "34066": 479, "34042": 479, "33418": 479, "33985": 479, "33956": 479, "24596": 479, "33451": 479, "1617161": 479, "33824": 479, "33803": 479, "33738": 479, "33786": 479, "30167": 479, "33706": 479, "gohlk": 479, "30654": 479, "kerl": 479, "33622": 479, "25711": 479, "33509": 479, "31849": 479, "33475": 479, "20104": 479, "33391": 479, "set_symmetric_differ": 479, "33363": 479, "28055": 479, "eik": 479, "33128": 479, "33331": 479, "33312": 479, "_dictkeysobject": 479, "33305": 479, "33306": 479, "33270": 479, "30455": 479, "33176": 479, "33231": 479, "normalizestr": 479, "33205": 479, "round_up_to_power_2": 479, "hashtable_s": 479, "29922": 479, "33199": 479, "33138": 479, "copyabl": 479, "33018": 479, "25750": 479, "33026": 479, "33005": 479, "_pygilstate_reinit": 479, "_pyinterpreterstate_en": 479, "32911": 479, "29463": 479, "7a1": 479, "17288": 479, "32946": 479, "32932": 479, "32925": 479, "32889": 479, "py_address_in_rang": 479, "32836": 479, "31356": 479, "ensure_dis": 479, "32711": 479, "32583": 479, "31902": 479, "25862": 479, "21983": 479, "31577": 479, "29832": 479, "getsockaddrarg": 479, "35845": 479, "35847": 479, "ctypes_pass_by_ref_hack": 479, "test_pass_by_valu": 479, "35780": 479, "misord": 479, "23846": 479, "34323": 479, "35674": 479, "35733": 479, "35726": 479, "35719": 479, "35717": 479, "35699": 479, "32710": 479, "readfil": 479, "wsasend": 479, "35682": 479, "35643": 479, "35619": 479, "28503": 479, "35614": 479, "35568": 479, "35588": 479, "35585": 479, "30561": 479, "35526": 479, "35523": 479, "selinux": 479, "31784": 479, "1e9": 479, "35513": 479, "35502": 479, "35348": 479, "35491": 479, "baseprocess": 479, "35477": 479, "31446": 479, "createprocessw": 479, "35052": 479, "20239": 479, "17185": 479, "35445": 479, "35415": 479, "35424": 479, "35330": 479, "35346": 479, "rhapsodi": 479, "10496": 479, "check_environ": 479, "35389": 479, "cs_gnu_libc_vers": 479, "35394": 479, "35310": 479, "oran": 479, "avraham": 479, "35380": 479, "35341": 479, "ismo": 479, "toijala": 479, "35371": 479, "35066": 479, "35344": 479, "35312": 479, "35308": 479, "24746": 479, "jairo": 479, "trad": 479, "28604": 479, "35277": 479, "35226": 479, "35189": 479, "fnctl": 479, "calcel": 479, "35186": 479, "bdist_dumb": 479, "35152": 479, "35062": 479, "35065": 479, "_untrack_read": 479, "35079": 479, "sequencemanag": 479, "35017": 479, "35024": 479, "agren": 479, "31047": 479, "35053": 479, "34794": 479, "34909": 479, "35022": 479, "35008": 479, "23420": 479, "33947": 479, "34890": 479, "34521": 479, "recvfd": 479, "31522": 479, "34970": 479, "34969": 479, "16965": 479, "34966": 479, "34926": 479, "asthana": 479, "34941": 479, "32680": 479, "34769": 479, "34936": 479, "selection_el": 479, "34911": 479, "34922": 479, "34925": 479, "34900": 479, "oliveira": 479, "34844": 479, "strformatstyl": 479, "percentstyl": 479, "stringtemplatestyl": 479, "34897": 479, "34871": 479, "28441": 479, "34866": 479, "34711": 479, "34872": 479, "34849": 479, "34819": 479, "34758": 479, "34789": 479, "delfino": 479, "34334": 479, "5950": 479, "34728": 479, "34738": 479, "29577": 479, "31177": 479, "34672": 479, "34666": 479, "awrit": 479, "6721": 479, "34658": 479, "after_par": 479, "34652": 479, "34638": 479, "34536": 479, "34636": 479, "34630": 479, "32490": 479, "34363": 479, "34625": 479, "32270": 479, "34622": 479, "34610": 479, "34421": 479, "34604": 479, "grzybowski": 479, "34574": 479, "8110": 479, "34530": 479, "34563": 479, "peeknamedpip": 479, "34558": 479, "_aix": 479, "22872": 479, "34515": 479, "13312": 479, "34472": 479, "sila": 479, "sewel": 479, "34454": 479, "izbyshev": 479, "6700": 479, "34171": 479, "34441": 479, "34427": 479, "34412": 479, "31715": 479, "mjs": 479, "34384": 479, "22602": 479, "2152": 479, "34341": 479, "34333": 479, "18540": 479, "26502": 479, "34318": 479, "33613": 479, "34248": 479, "34246": 479, "blum": 479, "aguiar": 479, "woellert": 479, "32321": 479, "wright": 479, "34263": 479, "34035": 479, "32215": 479, "34251": 479, "19891": 479, "homedir": 479, "34228": 479, "13041": 479, "zbyszek": 479, "34213": 479, "34052": 479, "34197": 479, "32788": 479, "__adapt__": 479, "21446": 479, "940286": 479, "showtop": 479, "34164": 479, "33729": 479, "34097": 479, "34108": 479, "34070": 479, "27494": 479, "33967": 479, "34041": 479, "34056": 479, "34054": 479, "34043": 479, "34044": 479, "34010": 479, "34019": 479, "bumsik": 479, "33978": 479, "14117": 479, "33974": 479, "27500": 479, "24567": 479, "25007": 479, "33929": 479, "popen_spawn_win32": 479, "33916": 479, "32568": 479, "33833": 479, "proactorsockettransport": 479, "33663": 479, "26544": 479, "33843": 479, "33842": 479, "33805": 479, "33687": 479, "furrer": 479, "33812": 479, "32108": 479, "27397": 479, "33578": 479, "30805": 479, "33476": 479, "enriqu": 479, "perez": 479, "terron": 479, "33694": 479, "32493": 479, "uuid_enc_b": 479, "33274": 479, "33778": 479, "33165": 479, "33770": 479, "33769": 479, "ssltransport": 479, "33767": 479, "33734": 479, "31014": 479, "33197": 479, "_parameterkind": 479, "32684": 479, "33654": 479, "33674": 479, "512mib": 479, "sslprotocol": 479, "31647": 479, "32610": 479, "33469": 479, "33672": 479, "33652": 479, "33238": 479, "haydaman": 479, "33625": 479, "33623": 479, "sigsgv": 479, "11874": 479, "wrappabl": 479, "30877": 479, "fos": 479, "7062": 479, "33582": 479, "33570": 479, "pre6": 479, "28556": 479, "12486": 479, "33548": 479, "_candidate_tempdir_list": 479, "33109": 479, "33541": 479, "_strptime": 479, "localetim": 479, "__pad": 479, "_localetime__pad": 479, "33536": 479, "33542": 479, "get_nod": 479, "duid": 479, "zvi": 479, "effron": 479, "26819": 479, "33516": 479, "28612": 479, "ladi": 479, "wirtz": 479, "28167": 479, "33504": 479, "33505": 479, "33497": 479, "amber": 479, "33495": 479, "26103": 479, "hall": 479, "33453": 479, "prs": 479, "paulius": 479, "arka": 479, "dombrova": 479, "33365": 479, "strigl": 479, "20087": 479, "33422": 479, "33281": 479, "33311": 479, "blondon": 479, "27300": 479, "32933": 479, "fluri": 479, "33383": 479, "33375": 479, "33336": 479, "6851": 479, "32455": 479, "27485": 479, "33332": 479, "sigfillset": 479, "33251": 479, "33329": 479, "33334": 479, "991266": 479, "33131": 479, "33308": 479, "line_info": 479, "col_info": 479, "23403": 479, "33266": 479, "11594": 479, "33254": 479, "33265": 479, "33263": 479, "starostin": 479, "33256": 479, "33144": 479, "33185": 479, "0b3": 479, "29613": 479, "33203": 479, "33224": 479, "mdiff": 479, "33209": 479, "32861": 479, "lazar": 479, "33175": 479, "33141": 479, "33096": 479, "32873": 479, "33134": 479, "33127": 479, "32505": 479, "33078": 479, "33116": 479, "32896": 479, "33100": 479, "32953": 479, "32968": 479, "33061": 479, "33064": 479, "33056": 479, "33021": 479, "31804": 479, "33034": 479, "eaton": 479, "30249": 479, "33037": 479, "27683": 479, "22674": 479, "32999": 479, "33009": 479, "32969": 479, "32056": 479, "32970": 479, "32844": 479, "32960": 479, "32713": 479, "joffrey": 479, "fuhrer": 479, "32257": 479, "32929": 479, "32146": 479, "32922": 479, "32759": 479, "32859": 479, "dup3": 479, "32556": 479, "_getfinalpathnam": 479, "_getvolumepathnam": 479, "_getdiskusag": 479, "21060": 479, "32857": 479, "after_cancel": 479, "32852": 479, "_abc_registri": 479, "_abc_cach": 479, "_abc_negative_cach": 479, "_dump_registri": 479, "_abc_registry_clear": 479, "_abc_caches_clear": 479, "32841": 479, "32819": 479, "19675": 479, "32394": 479, "31787": 479, "30157": 479, "32775": 479, "32622": 479, "32777": 479, "32647": 479, "libdl": 479, "32691": 479, "mod_spec": 479, "32734": 479, "32727": 479, "31453": 479, "20180309043602": 479, "ssl_ctx_set_min_proto_vers": 479, "24334": 479, "31848": 479, "aifc_read": 479, "initfp": 479, "ssnd": 479, "32512": 479, "8525": 479, "29877": 479, "32221": 479, "scopeid": 479, "32147": 479, "31908": 479, "31608": 479, "31425": 479, "gps": 479, "andersson": 479, "22005": 479, "16865": 479, "29456": 479, "hangul": 479, "u1176": 479, "u11a7": 479, "u11c3": 479, "21257": 479, "34764": 479, "35564": 479, "master_doc": 479, "35511": 479, "10536": 479, "35089": 479, "35038": 479, "unexist": 479, "f_restrict": 479, "35042": 479, "35044": 479, "35035": 479, "34967": 479, "add_object_typ": 479, "description_unit": 479, "34913": 479, "32174": 479, "charat": 479, "11233": 479, "34552": 479, "28617": 479, "stdtype": 479, "20177": 479, "34065": 479, "33460": 479, "33847": 479, "33409": 479, "versionad": 479, "parameterkind": 479, "17045": 479, "33736": 479, "23859": 479, "33594": 479, "33503": 479, "33421": 479, "33487": 479, "33378": 479, "33276": 479, "33201": 479, "33195": 479, "33126": 479, "27212": 479, "28247": 479, "18802": 479, "27428": 479, "himanshu": 479, "lakhara": 479, "17232": 479, "32800": 479, "11015": 479, "32613": 479, "8722": 479, "32614": 479, "20709": 479, "gehrck": 479, "32722": 479, "31972": 479, "30607": 479, "8243": 479, "32337": 479, "25041": 479, "31432": 479, "35772": 479, "tmpfs": 479, "ppc64le": 479, "punch": 479, "35045": 479, "unbreak": 479, "test_min_max_vers": 479, "test_sendfil": 479, "33717": 479, "35488": 479, "31731": 479, "check_interrupted_writ": 479, "test_multiprocessing_main_handl": 479, "35519": 479, "test_xmlrpc": 479, "34279": 479, "testdidnotrun": 479, "35412": 479, "test_future4": 479, "26704": 479, "35352": 479, "35317": 479, "test_email": 479, "test_localtime_daylight_true_dst_tru": 479, "test_localtime_daylight_false_dst_tru": 479, "21263": 479, "34962": 479, "docstest": 479, "23596": 479, "34537": 479, "test_str": 479, "34587": 479, "rdstest": 479, "testcongest": 479, "34661": 479, "34200": 479, "flaki": 479, "test_pkg": 479, "scari": 479, "module_cleanup": 479, "34569": 479, "34594": 479, "34579": 479, "34542": 479, "3072": 479, "11193": 479, "test_undecodable_env": 479, "34347": 479, "test_cmd_lin": 479, "34490": 479, "34391": 479, "11192": 479, "inet_pton6_zon": 479, "34399": 479, "test_mktim": 479, "test_pthread_getcpuclickid": 479, "_pytime_localtim": 479, "11191": 479, "test_search_cpp": 479, "33746": 479, "33901": 479, "test_dbm_gnu": 479, "33873": 479, "huntrleak": 479, "33562": 479, "33655": 479, "test_posix_falloc": 479, "zfs": 479, "32962": 479, "mcet": 479, "fcf": 479, "33358": 479, "test_pre_initialization_sys_opt": 479, "32872": 479, "32517": 479, "32663": 479, "smtputf8simtest": 479, "27643": 479, "test_c": 479, "19417": 479, "31809": 479, "secp": 479, "34691": 479, "35683": 479, "35642": 479, "asynciomodul": 479, "vcxproj": 479, "35550": 479, "__sun": 479, "__svr4": 479, "35499": 479, "35351": 479, "35139": 479, "inlinefunctionexpans": 479, "onlyexplicitinlin": 479, "ob1": 479, "35011": 479, "pyexpatn": 479, "28015": 479, "34765": 479, "automak": 479, "34585": 479, "34710": 479, "pedant": 479, "34582": 479, "devop": 479, "34081": 479, "34555": 479, "have_linux_vm_sockets_h": 479, "have_sockaddr_alg": 479, "33015": 479, "34245": 479, "34121": 479, "30345": 479, "5755": 479, "33614": 479, "33648": 479, "33522": 479, "visualstudio": 479, "33512": 479, "33483": 479, "33394": 479, "33377": 479, "r6": 479, "riscv": 479, "32232": 479, "33182": 479, "33163": 479, "v39": 479, "33012": 479, "32898": 479, "29442": 479, "35890": 479, "wcstok": 479, "32560": 479, "35854": 479, "35811": 479, "35797": 479, "35758": 479, "29734": 479, "35596": 479, "35402": 479, "35401": 479, "34977": 479, "35067": 479, "_distutils_findv": 479, "vswhere": 479, "32557": 479, "34770": 479, "pyshellext": 479, "34603": 479, "34581": 479, "socketmodul": 479, "34532": 479, "34062": 479, "34225": 479, "34011": 479, "34006": 479, "31546": 479, "matplotlib": 479, "30237": 479, "readconsol": 479, "cancelsynchronousio": 479, "33895": 479, "29097": 479, "86400": 479, "33316": 479, "33184": 479, "32890": 479, "33016": 479, "32903": 479, "32901": 479, "31966": 479, "32409": 479, "32457": 479, "32370": 479, "ipconfig": 479, "29248": 479, "printnameoffset": 479, "holmquist": 479, "sse4": 479, "1104": 479, "summaryinfo": 479, "35025": 479, "24658": 479, "33635": 479, "_recursivewildcardselector": 479, "_iterate_directori": 479, "13631": 479, "32726": 479, "activetcl": 479, "31903": 479, "systemconfigur": 479, "35770": 479, "35769": 479, "untitl": 479, "35660": 479, "35641": 479, "34055": 479, "35591": 479, "35196": 479, "squeezer": 479, "35598": 479, "config_key": 479, "28097": 479, "35208": 479, "35555": 479, "gray": 479, "35521": 479, "22703": 479, "35213": 479, "34864": 479, "35202": 479, "33000": 479, "overfil": 479, "23220": 479, "35099": 479, "stdxxx": 479, "35097": 479, "35093": 479, "35088": 479, "copy_str": 479, "35087": 479, "34548": 479, "unsqueez": 479, "34047": 479, "34275": 479, "34120": 479, "unrespons": 479, "33975": 479, "htest": 479, "33905": 479, "stackview": 479, "stackbrows": 479, "33924": 479, "mainmenu": 479, "menudef": 479, "33906": 479, "33917": 479, "idle_test": 479, "33904": 479, "rstripextens": 479, "33907": 479, "calltip_w": 479, "calltipwindow": 479, "33856": 479, "33839": 479, "33855": 479, "33763": 479, "33664": 479, "slider": 479, "33628": 479, "codecontext": 479, "33564": 479, "21474": 479, "33204": 479, "32984": 479, "32940": 479, "stringtranslatepseudomap": 479, "32916": 479, "32905": 479, "32874": 479, "32837": 479, "32826": 479, "test_help_about": 479, "test_file_button": 479, "32831": 479, "32765": 479, "34989": 479, "20260": 479, "read_var": 479, "33189": 479, "31920": 479, "krasnikov": 479, "29673": 479, "pystackv": 479, "pystack": 479, "32885": 479, "32222": 479, "harradin": 479, "31583": 479, "33817": 479, "35322": 479, "35296": 479, "pycore_": 479, "35259": 479, "neufeld": 479, "34725": 479, "34910": 479, "34193": 479, "34127": 479, "23927": 479, "pycompile_opcodestackeffectwithjump": 479, "34008": 479, "32500": 479, "33042": 479, "32374": 479, "30863": 479, "33851": 479, "33932": 479, "7b1": 479, "threadedhttpserv": 479, "32703": 479, "32650": 479, "32685": 479, "32697": 479, "26163": 479, "24340": 479, "18533": 479, "20891": 479, "32028": 479, "31113": 479, "30306": 479, "32513": 479, "32660": 479, "fionread": 479, "fionclex": 479, "fioclex": 479, "fioasync": 479, "fionbio": 479, "27931": 479, "32643": 479, "_step": 479, "_wakeup": 479, "_schedule_callback": 479, "32502": 479, "32596": 479, "32576": 479, "32574": 479, "melero": 479, "32521": 479, "32467": 479, "32473": 479, "libtirpc": 479, "32503": 479, "29237": 479, "32404": 479, "32228": 479, "22908": 479, "31853": 479, "x509_verify_param_set1_ip": 479, "32724": 479, "32649": 479, "17799": 479, "32721": 479, "32602": 479, "32549": 479, "32635": 479, "libxcrypt": 479, "32598": 479, "ax_check_openssl": 479, "32593": 479, "32588": 479, "29911": 479, "32507": 479, "32681": 479, "timzon": 479, "32399": 479, "rfc4122": 479, "uuid_creat": 479, "32390": 479, "32143": 479, "32379": 479, "32259": 479, "27169": 479, "22091": 479, "32329": 479, "30416": 479, "32282": 479, "versionhelp": 479, "32260": 479, "32225": 479, "31901": 479, "32506": 479, "32279": 479, "32278": 479, "32499": 479, "32468": 479, "32422": 479, "31721": 479, "_log_traceback": 479, "26133": 479, "32363": 479, "32357": 479, "python_coroutin": 479, "cython_coroutin": 479, "32323": 479, "32302": 479, "v140": 479, "29711": 479, "stop_serv": 479, "17852": 479, "misunderstand": 479, "_py_pyatexit": 479, "_get_running_loop": 479, "32255": 479, "32277": 479, "32273": 479, "test_util": 479, "32272": 479, "classify_class_attr": 479, "ouput": 479, "32199": 479, "26439": 479, "31993": 479, "31802": 479, "31699": 479, "abstractserv": 479, "32252": 479, "faulthandler_suppress_crash_report": 479, "24960": 479, "32030": 479, "29084": 479, "32264": 479, "pygetopt": 479, "32241": 479, "wchar": 479, "32176": 479, "co_nofre": 479, "32137": 479, "32096": 479, "_pyruntime_initi": 479, "28180": 479, "_py_setlocalefromenv": 479, "31949": 479, "30696": 479, "20047": 479, "21720": 479, "31845": 479, "28936": 479, "31825": 479, "escape_decod": 479, "31618": 479, "28603": 479, "zane": 479, "bitter": 479, "31786": 479, "31781": 479, "31626": 479, "30817": 479, "32214": 479, "27240": 479, "30788": 479, "31831": 479, "32182": 479, "rfc2231": 479, "32186": 479, "32101": 479, "32154": 479, "32089": 479, "preferenti": 479, "12239": 479, "vt_empti": 479, "mahon": 479, "28334": 479, "dimitri": 479, "merejkowski": 479, "31325": 479, "wellner": 479, "12382": 479, "ter": 479, "19610": 479, "28684": 479, "32110": 479, "27535": 479, "32088": 479, "1647489": 479, "32072": 479, "32069": 479, "32046": 479, "32018": 479, "32037": 479, "32034": 479, "32015": 479, "32011": 479, "28369": 479, "31976": 479, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 479, "9678": 479, "takayuki": 479, "shimizukawa": 479, "30057": 479, "31933": 479, "poolexecutor": 479, "31927": 479, "27666": 479, "chtype": 479, "mmask_t": 479, "fink": 479, "31917": 479, "31897": 479, "25720": 479, "31893": 479, "kqueue_ev": 479, "31891": 479, "31884": 479, "28281": 479, "gollahon": 479, "30639": 479, "30768": 479, "intr_flag": 479, "31854": 479, "31834": 479, "ssse3": 479, "28416": 479, "31653": 479, "28326": 479, "superset_of": 479, "31827": 479, "31457": 479, "31806": 479, "31803": 479, "31800": 479, "30143": 479, "31770": 479, "31752": 479, "31620": 479, "poller": 479, "31632": 479, "15037": 479, "31307": 479, "31334": 479, "riccardo": 479, "coccioli": 479, "31308": 479, "immun": 479, "30553": 479, "misdirect": 479, "32105": 479, "31380": 479, "test_httpserv": 479, "test_undecodable_fil": 479, "apf": 479, "31705": 479, "test_sha256": 479, "enokey": 479, "32138": 479, "requires_android_level": 479, "32136": 479, "28668": 479, "requires_multiprocessing_queu": 479, "32126": 479, "test_get_event_loop_new_process": 479, "test_ev": 479, "31174": 479, "test_unpars": 479, "directorytestcas": 479, "28538": 479, "28762": 479, "29040": 479, "r14": 479, "32059": 479, "detect_modul": 479, "sysroot": 479, "31957": 479, "31609": 479, "31934": 479, "31926": 479, "28791": 479, "28643": 479, "31866": 479, "1102": 479, "error_no_more_item": 479, "tuininga": 479, "31944": 479, "31857": 479, "31392": 479, "2m": 479, "32207": 479, "32164": 479, "tabbedpag": 479, "tabbedpageset": 479, "32100": 479, "pathbrows": 479, "31836": 479, "test_code_modul": 479, "ditto": 479, "32159": 479, "svneol": 479, "treesync": 479, "30722": 479, "redemo": 479, "sarnowski": 479, "32125": 479, "py_useclassexceptionsflag": 479, "31642": 479, "31708": 479, "30404": 479, "31619": 479, "31602": 479, "31592": 479, "31588": 479, "31566": 479, "31505": 479, "make_encod": 479, "31492": 479, "31478": 479, "31336": 479, "31410": 479, "31315": 479, "create_dynam": 479, "31311": 479, "31293": 479, "31285": 479, "30058": 479, "31672": 479, "31701": 479, "31728": 479, "bm_regex_compil": 479, "30397": 479, "31675": 479, "31673": 479, "adderrorinfo": 479, "30806": 479, "25351": 479, "20519": 479, "28293": 479, "31596": 479, "30347": 479, "30346": 479, "31556": 479, "31516": 479, "31525": 479, "sqlite3_prepare_v2": 479, "27541": 479, "31351": 479, "31537": 479, "30085": 479, "31696": 479, "31625": 479, "ranlib": 479, "31624": 479, "22140": 479, "31569": 479, "31536": 479, "31460": 479, "flist": 479, "31649": 479, "_htest": 479, "_utest": 479, "31559": 479, "test_brows": 479, "31459": 479, "yesterday": 479, "31500": 479, "hidpi": 479, "31532": 479, "29781": 479, "29505": 479, "fuzz": 479, "30947": 479, "30730": 479, "30694": 479, "9233": 479, "9063": 479, "0718": 479, "0876": 479, "flood": 479, "5300": 479, "xml_sethashsalt": 479, "30500": 479, "splithost": 479, "29591": 479, "4472": 479, "537": 479, "31490": 479, "31471": 479, "31418": 479, "31416": 479, "defaultact": 479, "31411": 479, "onceregistri": 479, "31373": 479, "demot": 479, "30465": 479, "30860": 479, "31347": 479, "_pyobject_fastcall_prepend": 479, "31343": 479, "sysmacro": 479, "libray": 479, "31291": 479, "31271": 479, "31243": 479, "30721": 479, "31070": 479, "_get_module_lock": 479, "30747": 479, "_py_atomic_stor": 479, "_py_atomic_load": 479, "31095": 479, "31071": 479, "30978": 479, "30808": 479, "_py_atom": 479, "30876": 479, "reimport": 479, "30703": 479, "30765": 479, "pthread_mutex_lock": 479, "31161": 479, "30814": 479, "30736": 479, "30604": 479, "co_extra_freefunc": 479, "30597": 479, "30682": 479, "30501": 479, "30486": 479, "25324": 479, "29104": 479, "27945": 479, "duan": 479, "griffin": 479, "25794": 479, "30039": 479, "12414": 479, "29839": 479, "29914": 479, "29949": 479, "29935": 479, "29816": 479, "29894": 479, "29859": 479, "pthread_": 479, "29849": 479, "28856": 479, "29723": 479, "29139": 479, "29714": 479, "29695": 479, "28893": 479, "28876": 479, "29683": 479, "coleman": 479, "29684": 479, "segv": 479, "28598": 479, "29607": 479, "29602": 479, "29347": 479, "29438": 479, "29478": 479, "mircea": 479, "cosbuc": 479, "29319": 479, "runmainfromimport": 479, "29337": 479, "29327": 479, "29034": 479, "path_convert": 479, "29159": 479, "29049": 479, "28932": 479, "25677": 479, "layzel": 479, "28596": 479, "26919": 479, "28991": 479, "28147": 479, "28739": 479, "28512": 479, "28918": 479, "28797": 479, "pyeval_getcallstat": 479, "28782": 479, "28774": 479, "28731": 479, "_pydict_newpres": 479, "28532": 479, "27100": 479, "ellington": 479, "28746": 479, "26920": 479, "langinfo": 479, "28648": 479, "astral": 479, "28665": 479, "19398": 479, "28621": 479, "28580": 479, "28583": 479, "28128": 479, "28509": 479, "28426": 479, "28517": 479, "28214": 479, "23782": 479, "_pytraceback_add": 479, "28183": 479, "28379": 479, "28376": 479, "range_iter": 479, "26906": 479, "18287": 479, "koep": 479, "24098": 479, "28201": 479, "28350": 479, "26617": 479, "27942": 479, "28289": 479, "21578": 479, "28203": 479, "soumya": 479, "sharma": 479, "28086": 479, "unscath": 479, "27955": 479, "28192": 479, "27441": 479, "27222": 479, "long_rshift": 479, "28131": 479, "compile_sourc": 479, "28126": 479, "py_memcpi": 479, "28120": 479, "26182": 479, "28721": 479, "31499": 479, "31482": 479, "mitar": 479, "31544": 479, "31234": 479, "31431": 479, "approx": 479, "31400": 479, "27629": 479, "28958": 479, "28182": 479, "27340": 479, "31178": 479, "31350": 479, "31170": 479, "31326": 479, "27144": 479, "31281": 479, "10746": 479, "22536": 479, "29741": 479, "31249": 479, "workitem": 479, "31247": 479, "31238": 479, "serverthread": 479, "docserv": 479, "serve_until_quit": 479, "5001": 479, "31109": 479, "30102": 479, "openssl_add_all_algorithms_noconf": 479, "power8": 479, "serra": 479, "scalet": 479, "31183": 479, "diagnosi": 479, "luciano": 479, "ramalho": 479, "uninform": 479, "convert_to_error": 479, "31169": 479, "drallensmith": 479, "31185": 479, "include_fil": 479, "31135": 479, "31107": 479, "31061": 479, "30987": 479, "30502": 479, "30919": 479, "26732": 479, "29403": 479, "gallagh": 479, "30961": 479, "19896": 479, "30946": 479, "25684": 479, "30886": 479, "29854": 479, "30319": 479, "30828": 479, "cfutur": 479, "30807": 479, "30441": 479, "29293": 479, "sleeper": 479, "30532": 479, "9146": 479, "29169": 479, "30119": 479, "30879": 479, "30746": 479, "30664": 479, "29212": 479, "y_n": 479, "29755": 479, "30616": 479, "30038": 479, "23894": 479, "24484": 479, "30589": 479, "28994": 479, "30645": 479, "alexandru": 479, "ardelean": 479, "30624": 479, "30595": 479, "30605": 479, "29870": 479, "sgha": 479, "er": 479, "27585": 479, "mathieu": 479, "sornay": 479, "30418": 479, "30463": 479, "30557": 479, "30245": 479, "yuan": 479, "30378": 479, "30470": 479, "wijaya": 479, "30414": 479, "_feed": 479, "30003": 479, "30149": 479, "30301": 479, "30375": 479, "30329": 479, "wsaeinval": 479, "10022": 479, "29196": 479, "30299": 479, "30048": 479, "30266": 479, "30340": 479, "30298": 479, "weaken": 479, "subsequenti": 479, "29990": 479, "30243": 479, "30185": 479, "fasaraki": 479, "hilliard": 479, "30205": 479, "30228": 479, "30190": 479, "30101": 479, "29822": 479, "nate": 479, "soar": 479, "29960": 479, "bryan": 479, "30070": 479, "22352": 479, "30061": 479, "sizeabl": 479, "30218": 479, "30068": 479, "_iobas": 479, "29694": 479, "29692": 479, "unchain": 479, "siddharth": 479, "velankar": 479, "26187": 479, "9303": 479, "30017": 479, "29998": 479, "29649": 479, "29931": 479, "sanjay": 479, "sundaresan": 479, "29953": 479, "29942": 479, "10030": 479, "29204": 479, "27863": 479, "28699": 479, "23890": 479, "29901": 479, "25803": 479, "29861": 479, "29884": 479, "zeitouni": 479, "25455": 479, "29800": 479, "seifert": 479, "8256": 479, "29619": 479, "28298": 479, "intabl": 479, "29645": 479, "28231": 479, "26915": 479, "29623": 479, "_v2": 479, "28963": 479, "subprocessstreamprotocol": 479, "29271": 479, "29703": 479, "29615": 479, "motejlek": 479, "29376": 479, "28624": 479, "sayan": 479, "chowdhuri": 479, "28518": 479, "29742": 479, "29532": 479, "29110": 479, "29534": 479, "_pydecim": 479, "29100": 479, "29416": 479, "29444": 479, "wgh": 479, "29368": 479, "29338": 479, "29335": 479, "29290": 479, "28735": 479, "magickmock": 479, "29197": 479, "29210": 479, "29219": 479, "29195": 479, "28969": 479, "29142": 479, "28961": 479, "jiajun": 479, "huang": 479, "15812": 479, "brees": 479, "28985": 479, "dingyuan": 479, "29079": 479, "13051": 479, "tycho": 479, "andersen": 479, "9770": 479, "28427": 479, "28923": 479, "28871": 479, "19542": 479, "16255": 479, "28779": 479, "26937": 479, "27030": 479, "28835": 479, "28752": 479, "28727": 479, "sre_pattern": 479, "18383": 479, "20572": 479, "25659": 479, "28548": 479, "19717": 479, "28563": 479, "28387": 479, "cufr": 479, "27517": 479, "fogl": 479, "28549": 479, "ncurses6": 479, "28449": 479, "23262": 479, "broytman": 479, "24241": 479, "27939": 479, "28255": 479, "prweek": 479, "20491": 479, "kaarl": 479, "ritvanen": 479, "28353": 479, "28430": 479, "27025": 479, "25464": 479, "header_exist": 479, "addin": 479, "28488": 479, "28469": 479, "28115": 479, "18219": 479, "28448": 479, "23214": 479, "28480": 479, "28240": 479, "24452": 479, "20766": 479, "27998": 479, "28317": 479, "28380": 479, "28229": 479, "28321": 479, "28225": 479, "28227": 479, "27358": 479, "28322": 479, "leitch": 479, "28228": 479, "28226": 479, "28314": 479, "28148": 479, "localtime_r": 479, "schouten": 479, "28253": 479, "28275": 479, "27897": 479, "18893": 479, "madison": 479, "27611": 479, "displaystyl": 479, "27348": 479, "5a2": 479, "25651": 479, "27778": 479, "28200": 479, "25400": 479, "_sendfile_use_sendfil": 479, "28075": 479, "error_access_deni": 479, "25270": 479, "escape_encod": 479, "28181": 479, "antigrav": 479, "kaartic": 479, "sivaraam": 479, "25895": 479, "gerg": 479, "imreh": 479, "holtermann": 479, "28114": 479, "parse_envlist": 479, "27599": 479, "27906": 479, "conway": 479, "28174": 479, "larson": 479, "26654": 479, "iceboy": 479, "26909": 479, "28176": 479, "selectorloop": 479, "27759": 479, "28325": 479, "macurl2path": 479, "28368": 479, "28371": 479, "28372": 479, "28399": 479, "27972": 479, "24142": 479, "florian": 479, "29581": 479, "25532": 479, "30177": 479, "pietri": 479, "31294": 479, "21649": 479, "30803": 479, "thomassen": 479, "30176": 479, "30052": 479, "26985": 479, "19824": 479, "20314": 479, "12518": 479, "28929": 479, "25008": 479, "26355": 479, "29349": 479, "28513": 479, "29639": 479, "hostv4": 479, "hostv6": 479, "31320": 479, "31346": 479, "25674": 479, "tbs": 479, "30715": 479, "30822": 479, "extralargefil": 479, "test_zipfile64": 479, "30695": 479, "set_nomemori": 479, "remove_mem_hook": 479, "30357": 479, "grzegorz": 479, "grzywacz": 479, "30197": 479, "24932": 479, "28950": 479, "28683": 479, "26936": 479, "28666": 479, "23839": 479, "26944": 479, "28409": 479, "28217": 479, "_testconsol": 479, "26939": 479, "armv7": 479, "31354": 479, "21st": 479, "31341": 479, "30854": 479, "30687": 479, "vcvarsal": 479, "20210": 479, "29941": 479, "28787": 479, "29243": 479, "29643": 479, "27593": 479, "29572": 479, "27659": 479, "29384": 479, "26851": 479, "28768": 479, "_setmod": 479, "29080": 479, "23903": 479, "r13": 479, "20211": 479, "28849": 479, "_multiarch": 479, "10656": 479, "tristan": 479, "haubenwalln": 479, "optimi": 479, "28444": 479, "28208": 479, "28248": 479, "21124": 479, "13756": 479, "roumen": 479, "petrov": 479, "21085": 479, "rebas": 479, "28258": 479, "estonian": 479, "26661": 479, "15819": 479, "28676": 479, "gareth": 479, "ree": 479, "30389": 479, "31358": 479, "31340": 479, "v141": 479, "30581": 479, "30916": 479, "30731": 479, "gadget": 479, "23451": 479, "29579": 479, "25778": 479, "28896": 479, "28522": 479, "getpathp": 479, "28402": 479, "28333": 479, "28251": 479, "28110": 479, "28161": 479, "28162": 479, "28163": 479, "_open_osfhandl": 479, "28164": 479, "_pyio_get_console_typ": 479, "28138": 479, "31493": 479, "31488": 479, "parenmatch": 479, "31477": 479, "31480": 479, "31421": 479, "31414": 479, "31051": 479, "genpag": 479, "30617": 479, "outwin": 479, "31287": 479, "test_configdialog": 479, "keyset": 479, "31206": 479, "highpag": 479, "31001": 479, "31205": 479, "keyspag": 479, "31130": 479, "31002": 479, "19903": 479, "31083": 479, "tabpag": 479, "31050": 479, "31004": 479, "fontpag": 479, "30781": 479, "31060": 479, "30853": 479, "vartrac": 479, "31003": 479, "30993": 479, "causal": 479, "create_font_tab": 479, "set_sampl": 479, "var_changed_font": 479, "test_font_set": 479, "test_indent_scal": 479, "30981": 479, "28523": 479, "30917": 479, "idleconf": 479, "30934": 479, "30913": 479, "30899": 479, "30881": 479, "30851": 479, "30870": 479, "8231": 479, "getusercfgdir": 479, "30779": 479, "configchang": 479, "changes_class_v4": 479, "test_config": 479, "changestest": 479, "configdialog_tests_v1": 479, "msg297804": 479, "30777": 479, "30495": 479, "textview": 479, "pep8": 479, "30723": 479, "30674": 479, "21519": 479, "29910": 479, "30728": 479, "6739": 479, "25514": 479, "subsubsect": 479, "30642": 479, "30290": 479, "30303": 479, "29071": 479, "28572": 479, "30983": 479, "polaco": 479, "penteado": 479, "29748": 479, "24037": 479, "29367": 479, "wrapperobject": 479, "28023": 479, "15369": 479, "microbenchmark": 479, "28102": 479, "30832": 479, "py_have_native_tl": 479, "29083": 479, "29058": 479, "28808": 479, "28748": 479, "_py_packagecontext": 479, "2o": 479, "29706": 479, "30353": 479, "32555": 479, "31518": 479, "sslv23_method": 479, "4rc1": 479, "31852": 479, "31641": 479, "3rc1": 479, "31662": 479, "uploadreleas": 479, "31423": 479, "29600": 479, "2159": 479, "26293": 479, "29094": 479, "29519": 479, "29316": 479, "29011": 479, "29203": 479, "29085": 479, "29061": 479, "brendan": 479, "donegan": 479, "29119": 479, "andra": 479, "bogildea": 479, "29055": 479, "neaten": 479, "29326": 479, "29409": 479, "29392": 479, "28087": 479, "test_asyncor": 479, "test_eintr": 479, "28990": 479, "hoho": 479, "28770": 479, "28898": 479, "have_long_long": 479, "28843": 479, "28600": 479, "28634": 479, "28639": 479, "mayfield": 479, "28652": 479, "28653": 479, "28703": 479, "28704": 479, "28471": 479, "28492": 479, "28500": 479, "26923": 479, "ebk": 479, "26796": 479, "lawrenz": 479, "25221": 479, "27080": 479, "27199": 479, "27948": 479, "x7b": 479, "x7d": 479, "28046": 479, "28071": 479, "25758": 479, "25856": 479, "26331": 479, "27999": 479, "26058": 479, "27911": 479, "exec_builtin_or_dynam": 479, "27961": 479, "27355": 479, "27870": 479, "25402": 479, "27214": 479, "long_invert": 479, "long_add": 479, "27506": 479, "27812": 479, "27811": 479, "27587": 479, "pvs": 479, "_pystate_addmodul": 479, "27792": 479, "26984": 479, "25604": 479, "24254": 479, "27662": 479, "list_new": 479, "py_size_max": 479, "27782": 479, "py_create_mod": 479, "27936": 479, "27487": 479, "27157": 479, "27558": 479, "28008": 479, "28732": 479, "28485": 479, "28037": 479, "sqlite3_get_autocommit": 479, "intransact": 479, "25283": 479, "10740": 479, "28070": 479, "24693": 479, "27137": 479, "1703178": 479, "28019": 479, "18401": 479, "matusiak": 479, "kimbrel": 479, "25969": 479, "14977": 479, "1542": 479, "28082": 479, "24594": 479, "17582": 479, "28047": 479, "27576": 479, "28027": 479, "27445": 479, "22450": 479, "pgen3": 479, "load_grammar": 479, "28005": 479, "26667": 479, "27570": 479, "22233": 479, "27988": 479, "tautolog": 479, "27776": 479, "27691": 479, "gen_rid": 479, "25761": 479, "sweet32": 479, "25387": 479, "27866": 479, "11620": 479, "12885": 479, "27881": 479, "27861": 479, "19884": 479, "27706": 479, "nofar": 479, "schnider": 479, "10513": 479, "_get_type_var": 479, "_eval_typ": 479, "27832": 479, "27539": 479, "21718": 479, "ctes": 479, "2466": 479, "27573": 479, "27930": 479, "andrad": 479, "21201": 479, "wojciech": 479, "walczak": 479, "15308": 479, "bayard": 479, "randel": 479, "27922": 479, "27891": 479, "17642": 479, "25564": 479, "27821": 479, "26900": 479, "26027": 479, "27427": 479, "couzo": 479, "27953": 479, "26040": 479, "test_math": 479, "test_cmath": 479, "rigour": 479, "27787": 479, "27566": 479, "27705": 479, "validate_ucrtbas": 479, "27976": 479, "27983": 479, "26307": 479, "27917": 479, "25825": 479, "libpl": 479, "2a4": 479, "21122": 479, "17128": 479, "27952": 479, "fixcid": 479, "28065": 479, "25144": 479, "1602": 479, "27731": 479, "aliasmbc": 479, "20366": 479, "27756": 479, "cherri": 479, "27883": 479, "27704": 479, "22557": 479, "17596": 479, "wincrypt": 479, "gw": 479, "17599": 479, "reparse_data_buff": 479, "27507": 479, "27581": 479, "27419": 479, "27083": 479, "27514": 479, "27366": 479, "27524": 479, "27736": 479, "27038": 479, "27773": 479, "26750": 479, "descriptortyp": 479, "26800": 479, "26981": 479, "27783": 479, "27774": 479, "27760": 479, "27758": 479, "27568": 479, "httpoxi": 479, "1000110": 479, "7063": 479, "chuck": 479, "27656": 479, "sched_": 479, "27130": 479, "27567": 479, "27533": 479, "_isdir": 479, "17711": 479, "27522": 479, "27512": 479, "27714": 479, "text_textview": 479, "test_autocomplet": 479, "27621": 479, "27620": 479, "27609": 479, "25507": 479, "27173": 479, "confighandl": 479, "25805": 479, "test_pkgutil": 479, "27472": 479, "27369": 479, "test_pyexpat": 479, "27594": 479, "test_ast": 479, "27647": 479, "27610": 479, "27469": 479, "27309": 479, "27713": 479, "27453": 479, "27641": 479, "26662": 479, "python_for_gen": 479, "10910": 479, "freedbsd": 479, "27278": 479, "22636": 479, "27473": 479, "27443": 479, "27007": 479, "26844": 479, "lev": 479, "maximov": 479, "23804": 479, "27466": 479, "time2netscap": 479, "27319": 479, "27079": 479, "27294": 479, "27048": 479, "27330": 479, "27238": 479, "27122": 479, "issue25782": 479, "26386": 479, "16182": 479, "27477": 479, "test_help": 479, "27380": 479, "sectionnam": 479, "helpsourc": 479, "itw": 479, "27372": 479, "27365": 479, "27245": 479, "24137": 479, "27310": 479, "28066": 479, "27442": 479, "android_api_level": 479, "27434": 479, "26930": 479, "2h": 479, "23968": 479, "machdep": 479, "platform_triplet": 479, "ldversion": 479, "_sysconfigdata": 479, "27332": 479, "27418": 479, "importbench": 479, "19489": 479, "27285": 479, "pierci": 479, "27027": 479, "26556": 479, "1283": 479, "0772": 479, "oststrom": 479, "26839": 479, "colm": 479, "buckley": 479, "27190": 479, "sawyer": 479, "27286": 479, "27066": 479, "26983": 479, "27097": 479, "23275": 479, "20508": 479, "21386": 479, "07a5610bae9d": 479, "luethi": 479, "27029": 479, "20900": 479, "ingrid": 479, "25738": 479, "susumu": 479, "koshiba": 479, "21313": 479, "27164": 479, "24291": 479, "serverhandl": 479, "21272": 479, "26809": 479, "26373": 479, "flip": 479, "sigiot": 479, "27167": 479, "25931": 479, "21776": 479, "26526": 479, "27114": 479, "_load_windows_store_cert": 479, "5124": 479, "24750": 479, "24759": 479, "27239": 479, "isxyztk": 479, "27262": 479, "27196": 479, "20567": 479, "27156": 479, "27117": 479, "26673": 479, "21939": 479, "percol": 479, "21676": 479, "18410": 479, "westley": 479, "mart": 479, "nez": 479, "21703": 479, "27044": 479, "remove_var_callback": 479, "23977": 479, "test_deleg": 479, "16484": 479, "rodman": 479, "kaushik": 479, "nadikud": 479, "24136": 479, "22558": 479, "yoni": 479, "lavi": 479, "25285": 479, "27064": 479, "17500": 479, "pythondotorg": 479, "945": 479, "27229": 479, "26657": 479, "hagemeist": 479, "26313": 479, "baji": 479, "25939": 479, "20041": 479, "26168": 479, "26991": 479, "27039": 479, "23640": 479, "27005": 479, "18531": 479, "26811": 479, "20120": 479, "26802": 479, "26659": 479, "26718": 479, "27138": 479, "27147": 479, "25339": 479, "26494": 479, "26581": 479, "19711": 479, "21099": 479, "26563": 479, "26558": 479, "26464": 479, "22836": 479, "26302": 479, "26136": 479, "anish": 479, "shah": 479, "26204": 479, "4806": 479, "23601": 479, "25843": 479, "26107": 479, "26154": 479, "_pythreadstate_uncheckedget": 479, "_pythreadstate_curr": 479, "22995": 479, "_pyobject_getst": 479, "25961": 479, "25973": 479, "20440": 479, "25766": 479, "25421": 479, "25709": 479, "24097": 479, "24731": 479, "25630": 479, "23564": 479, "fds_to_pass": 479, "25388": 479, "25462": 479, "24802": 479, "overread": 479, "25555": 479, "24726": 479, "25449": 479, "25395": 479, "_pybyteswrit": 479, "25274": 479, "24402": 479, "24806": 479, "24848": 479, "misform": 479, "25280": 479, "25003": 479, "9232": 479, "24965": 479, "26478": 479, "26171": 479, "25660": 479, "26288": 479, "26289": 479, "26315": 479, "25887": 479, "27057": 479, "eaccess": 479, "bednarski": 479, "27014": 479, "tuur": 479, "27031": 479, "14132": 479, "janech": 479, "17214": 479, "27033": 479, "27034": 479, "26892": 479, "22274": 479, "26807": 479, "yolanda": 479, "robla": 479, "25745": 479, "26977": 479, "26002": 479, "upendra": 479, "kuma": 479, "25974": 479, "26996": 479, "26881": 479, "23815": 479, "17765": 479, "26873": 479, "responseerror": 479, "26711": 479, "24114": 479, "crle": 479, "kee": 479, "26864": 479, "24902": 479, "26634": 479, "26804": 479, "lower_cas": 479, "mixed_cas": 479, "26837": 479, "26041": 479, "kumaripaba": 479, "miyurusara": 479, "athukorala": 479, "26822": 479, "26733": 479, "26801": 479, "24838": 479, "26717": 479, "ize": 479, "26782": 479, "26735": 479, "024": 479, "26585": 479, "_quote_html": 479, "16329": 479, "webm": 479, "13952": 479, "26709": 479, "y2038": 479, "23735": 479, "25951": 479, "26586": 479, "26676": 479, "22854": 479, "26641": 479, "docfiletest": 479, "25195": 479, "3603bae63c13": 479, "plummer": 479, "26644": 479, "26616": 479, "26637": 479, "21925": 479, "26530": 479, "_pytracemalloc_track": 479, "_pytracemalloc_untrack": 479, "_pytracemalloc_gettraceback": 479, "_tracemalloc": 479, "24266": 479, "26590": 479, "18787": 479, "26560": 479, "inglesbi": 479, "_showwarnmsg": 479, "26569": 479, "26499": 479, "ghost": 479, "25320": 479, "den": 479, "elzen": 479, "16181": 479, "http2time": 479, "26513": 479, "23718": 479, "tam": 479, "benc": 479, "gedai": 479, "20589": 479, "26177": 479, "15068": 479, "2202": 479, "get_algorithm_impl": 479, "dupuy": 479, "26167": 479, "25718": 479, "26475": 479, "26457": 479, "26385": 479, "26402": 479, "25913": 479, "swati": 479, "jaiswal": 479, "26186": 479, "26367": 479, "26309": 479, "25995": 479, "23992": 479, "mapresult": 479, "26117": 479, "25949": 479, "25911": 479, "26045": 479, "12923": 479, "brazil": 479, "rocco": 479, "25945": 479, "26202": 479, "23076": 479, "nyberg": 479, "19883": 479, "26099": 479, "26147": 479, "25935": 479, "16620": 479, "26013": 479, "25850": 479, "25822": 479, "22642": 479, "24705": 479, "_parse_makefil": 479, "26069": 479, "22138": 479, "mcculli": 479, "25672": 479, "ssl_mode_release_buff": 479, "26012": 479, "24120": 479, "ulrich": 479, "25447": 479, "25802": 479, "24103": 479, "25860": 479, "samson": 479, "25914": 479, "25902": 479, "22227": 479, "25717": 479, "5a1": 479, "24903": 479, "25764": 479, "25771": 479, "6478": 479, "14285": 479, "19771": 479, "25177": 479, "10131": 479, "ganisin": 479, "7990": 479, "santoso": 479, "25725": 479, "25663": 479, "25688": 479, "23914": 479, "25691": 479, "25624": 479, "25626": 479, "uint_max": 479, "25583": 479, "6973": 479, "mauro": 479, "25590": 479, "25498": 479, "eryksun": 479, "25584": 479, "25446": 479, "18010": 479, "25554": 479, "18973": 479, "25510": 479, "ryosuk": 479, "ito": 479, "25503": 479, "vandenberg": 479, "25515": 479, "21827": 479, "25390": 479, "25441": 479, "25410": 479, "25411": 479, "simon04": 479, "25407": 479, "25406": 479, "25364": 479, "25328": 479, "enable_smtputf8": 479, "25316": 479, "distutilsplatformerror": 479, "25380": 479, "stack_glob": 479, "23972": 479, "reuseport": 479, "reuseaddr": 479, "25304": 479, "25232": 479, "cgirequesthandl": 479, "24657": 479, "23600": 479, "25203": 479, "22241": 479, "23517": 479, "24633": 479, "24874": 479, "24360": 479, "23426": 479, "run_setup": 479, "13938": 479, "stringtyp": 479, "8585": 479, "zipimporter2": 479, "18622": 479, "palumbo": 479, "laurent": 479, "buyst": 479, "24426": 479, "23661": 479, "ignacio": 479, "rossi": 479, "25578": 479, "getpeerc": 479, "25530": 479, "25569": 479, "25471": 479, "25319": 479, "26050": 479, "25924": 479, "26406": 479, "26848": 479, "20640": 479, "confighelpsourceedit": 479, "iobind": 479, "25905": 479, "15348": 479, "24455": 479, "15347": 479, "vwait": 479, "25313": 479, "currentthem": 479, "24782": 479, "22726": 479, "24820": 479, "cobalt": 479, "25224": 479, "24972": 479, "24570": 479, "24988": 479, "scrolledlist": 479, "24801": 479, "25173": 479, "25198": 479, "pitch": 479, "blueish": 479, "25225": 479, "21995": 479, "22820": 479, "25219": 479, "24861": 479, "idleib": 479, "25199": 479, "16893": 479, "helpdialog": 479, "helt": 479, "24199": 479, "idlev": 479, "24790": 479, "26736": 479, "6953": 479, "23606": 479, "24952": 479, "mattip": 479, "26014": 479, "21916": 479, "loys": 479, "26295": 479, "testdir": 479, "26523": 479, "26015": 479, "26325": 479, "25940": 479, "25616": 479, "test_collect": 479, "test_ordered_dict": 479, "25188": 479, "22806": 479, "18174": 479, "25260": 479, "26583": 479, "test_timestamp_overflow": 479, "test_import": 479, "21277": 479, "ffi_conveni": 479, "26884": 479, "rtld_": 479, "22359": 479, "21668": 479, "_ctypes_test": 479, "25702": 479, "26624": 479, "17603": 479, "fileblock": 479, "26079": 479, "bjoern": 479, "thiel": 479, "26465": 479, "2g": 479, "25348": 479, "build_pgo": 479, "25827": 479, "25696": 479, "j9": 479, "24986": 479, "_math": 479, "26268": 479, "25136": 479, "24324": 479, "27053": 479, "make_zip": 479, "prepare_ssl": 479, "26071": 479, "26073": 479, "26065": 479, "25022": 479, "example_nt": 479, "26799": 479, "ilsch": 479, "26271": 479, "shaulov": 479, "26489": 479, "26316": 479, "25440": 479, "26312": 479, "26198": 479, "32551": 479, "6rc1": 479, "30657": 479, "1000158": 479, "bosamiya": 479, "29537": 479, "30383": 479, "30523": 479, "matchfil": 479, "30540": 479, "warm": 479, "30675": 479, "29073": 479, "28189": 479, "dictitems_contain": 479, "26020": 479, "19003": 479, "26664": 479, "ld_so_aix": 479, "26867": 479, "26194": 479, "17633": 479, "27223": 479, "_read_readi": 479, "_conn_lost": 479, "22970": 479, "25500": 479, "25715": 479, "25182": 479, "stdprinter": 479, "25131": 479, "25150": 479, "_py_atomic_xxx": 479, "openmp": 479, "24483": 479, "22958": 479, "22609": 479, "25111": 479, "25262": 479, "binbytes8": 479, "binunicode8": 479, "25034": 479, "anthon": 479, "neut": 479, "25233": 479, "23329": 479, "_unpickler_read": 479, "25047": 479, "25135": 479, "deque_clear": 479, "19143": 479, "25092": 479, "25155": 479, "25108": 479, "25118": 479, "24684": 479, "25060": 479, "24857": 479, "kaptur": 479, "23144": 479, "24982": 479, "25019": 479, "16180": 479, "24891": 479, "24992": 479, "24881": 479, "21112": 479, "24764": 479, "read_multi": 479, "landri": 479, "24913": 479, "bryce": 479, "darl": 479, "24774": 479, "chiu": 479, "hsiang": 479, "hsu": 479, "21159": 479, "20362": 479, "ilia": 479, "kurenkov": 479, "23572": 479, "12067": 479, "23725": 479, "24808": 479, "weston": 479, "22812": 479, "mca": 479, "nulti": 479, "25099": 479, "23919": 479, "24915": 479, "24910": 479, "msis": 479, "25450": 479, "25164": 479, "25143": 479, "25163": 479, "25089": 479, "25165": 479, "25112": 479, "25102": 479, "25081": 479, "25091": 479, "25126": 479, "25213": 479, "requestedexecutionlevel": 479, "25071": 479, "25029": 479, "test_strptim": 479, "25027": 479, "24305": 479, "24912": 479, "24975": 479, "24917": 479, "time_strftim": 479, "24748": 479, "24635": 479, "24989": 479, "24769": 479, "21167": 479, "24492": 479, "24847": 479, "24839": 479, "24867": 479, "24667": 479, "odict": 479, "24824": 479, "24634": 479, "24798": 479, "_msvccompil": 479, "4395": 479, "23973": 479, "23004": 479, "hill": 479, "23888": 479, "23652": 479, "22932": 479, "shachnev": 479, "23779": 479, "23319": 479, "gautier": 479, "23254": 479, "19450": 479, "17527": 479, "sbardella": 479, "24791": 479, "23672": 479, "mohd": 479, "sanad": 479, "zaki": 479, "rizvi": 479, "24745": 479, "tkfixedfont": 479, "fontxxx": 479, "21192": 479, "adnan": 479, "umer": 479, "13884": 479, "tearoff": 479, "24129": 479, "20769": 479, "dorian": 479, "pula": 479, "23589": 479, "yongzhi": 479, "24729": 479, "24751": 479, "24569": 479, "24583": 479, "24407": 479, "24619": 479, "24687": 479, "15944": 479, "23441": 479, "sekera": 479, "24683": 479, "21697": 479, "eduardo": 479, "seabra": 479, "24695": 479, "24620": 479, "22485": 479, "22153": 479, "evilzero": 479, "24580": 479, "24206": 479, "24631": 479, "24608": 479, "18684": 479, "24259": 479, "24669": 479, "kai": 479, "groner": 479, "24688": 479, "24603": 479, "24467": 479, "24345": 479, "py_tp_fin": 479, "21750": 479, "24552": 479, "24514": 479, "19176": 479, "20387": 479, "24456": 479, "24336": 479, "24522": 479, "24489": 479, "24408": 479, "24347": 479, "24348": 479, "24359": 479, "24368": 479, "24362": 479, "24377": 479, "24369": 479, "24373": 479, "_testmultiphas": 479, "16690": 479, "24458": 479, "24351": 479, "24432": 479, "24115": 479, "_pydict_contain": 479, "24328": 479, "11205": 479, "24285": 479, "23247": 479, "5633": 479, "24326": 479, "23934": 479, "24276": 479, "23955": 479, "24257": 479, "22939": 479, "23985": 479, "24102": 479, "7x": 479, "23290": 479, "set_merg": 479, "2292": 479, "24096": 479, "23996": 479, "23911": 479, "24192": 479, "24022": 479, "22906": 479, "24230": 479, "24244": 479, "15836": 479, "wagner": 479, "9858": 479, "laura": 479, "rupprecht": 479, "22107": 479, "23780": 479, "6598": 479, "24091": 479, "21931": 479, "fci": 479, "armstrong": 479, "mangle_from": 479, "18682": 479, "23796": 479, "hergenroed": 479, "24155": 479, "20274": 479, "24134": 479, "23880": 479, "getdoubl": 479, "24094": 479, "9246": 479, "1025": 479, "23917": 479, "23008": 479, "23908": 479, "23728": 479, "23887": 479, "24178": 479, "24179": 479, "22547": 479, "23898": 479, "bayer": 479, "24298": 479, "23184": 479, "sweigart": 479, "21520": 479, "9517": 479, "christi": 479, "22155": 479, "24029": 479, "24077": 479, "24000": 479, "24001": 479, "23330": 479, "24031": 479, "22980": 479, "kfreebsd": 479, "22631": 479, "courtesi": 479, "23731": 479, "23726": 479, "23309": 479, "22977": 479, "23466": 479, "24044": 479, "21354": 479, "23840": 479, "23703": 479, "901e4e52b20a": 479, "_curs": 479, "19933": 479, "calledprocess": 479, "21217": 479, "balling": 479, "allison": 479, "24521": 479, "22931": 479, "23811": 479, "21116": 479, "boquien": 479, "22982": 479, "23529": 479, "21859": 479, "23865": 479, "23400": 479, "10838": 479, "23411": 479, "23881": 479, "22721": 479, "15133": 479, "23338": 479, "kato": 479, "16840": 479, "23834": 479, "23618": 479, "21526": 479, "23836": 479, "18473": 479, "3to2": 479, "23485": 479, "23752": 479, "23745": 479, "22117": 479, "23310": 479, "kasia": 479, "jachim": 479, "23817": 479, "sovers": 479, "23501": 479, "23799": 479, "22390": 479, "18128": 479, "23935": 479, "23944": 479, "20586": 479, "23492": 479, "23500": 479, "23998": 479, "pyimport_reinitlock": 479, "23753": 479, "23192": 479, "23629": 479, "14260": 479, "23792": 479, "pipepag": 479, "23775": 479, "23765": 479, "isbadstringptr": 479, "22364": 479, "23742": 479, "21802": 479, "23502": 479, "17530": 479, "22687": 479, "tetxtwrap": 479, "4727": 479, "23657": 479, "23688": 479, "23647": 479, "23539": 479, "22351": 479, "23715": 479, "23646": 479, "23136": 479, "carrol": 479, "23700": 479, "bohuslav": 479, "kabrda": 479, "22903": 479, "23631": 479, "rdivmod": 479, "23138": 479, "23051": 479, "diamant": 479, "22928": 479, "23615": 479, "23585": 479, "23583": 479, "22289": 479, "test_urllib2net": 479, "22826": 479, "bkfile": 479, "23571": 479, "23103": 479, "23476": 479, "x509_v_flag_trusted_first": 479, "23576": 479, "stall": 479, "23504": 479, "23563": 479, "19980": 479, "23521": 479, "21619": 479, "6639": 479, "814253": 479, "23215": 479, "aleksi": 479, "torhamo": 479, "5700": 479, "23374": 479, "23481": 479, "21548": 479, "apropo": 479, "22885": 479, "23146": 479, "23096": 479, "19105": 479, "23421": 479, "wdv4758h": 479, "23367": 479, "23361": 479, "19705": 479, "yeo": 479, "23801": 479, "23445": 479, "23686": 479, "23465": 479, "23285": 479, "22735": 479, "22896": 479, "21295": 479, "16795": 479, "22986": 479, "15859": 479, "campbel": 479, "barton": 479, "21408": 479, "23321": 479, "23253": 479, "22038": 479, "pyatom": 479, "lima": 479, "templ": 479, "20284": 479, "23048": 479, "20335": 479, "22869": 479, "pylifecycl": 479, "22335": 479, "0x7fffffff": 479, "22653": 479, "22643": 479, "22604": 479, "21052": 479, "22470": 479, "22520": 479, "22519": 479, "22518": 479, "1764286": 479, "18554": 479, "21391": 479, "11471": 479, "22215": 479, "22258": 479, "f_setfd": 479, "21389": 479, "22206": 479, "20184": 479, "22116": 479, "builtin_function_or_method": 479, "22077": 479, "20179": 479, "22082": 479, "slotdef": 479, "21897": 479, "21669": 479, "21642": 479, "42els": 479, "21523": 479, "pessimist": 479, "21418": 479, "21425": 479, "21435": 479, "21377": 479, "20355": 479, "21274": 479, "path_max": 479, "20904": 479, "fpu": 479, "m68k": 479, "21209": 479, "21193": 479, "21134": 479, "19537": 479, "20929": 479, "20731": 479, "20637": 479, "ingebretson": 479, "19995": 479, "19655": 479, "12546": 479, "13598": 479, "elson": 479, "8931": 479, "23165": 479, "23399": 479, "13128": 479, "23099": 479, "23326": 479, "23363": 479, "23364": 479, "23366": 479, "23369": 479, "encode_basestring_ascii": 479, "23353": 479, "why_yield": 479, "why_return": 479, "14099": 479, "tellabl": 479, "18518": 479, "23094": 479, "23268": 479, "19996": 479, "23248": 479, "23098": 479, "dev_t": 479, "21817": 479, "23250": 479, "23063": 479, "23209": 479, "23225": 479, "23143": 479, "23132": 479, "23112": 479, "23093": 479, "23111": 479, "22585": 479, "19104": 479, "23071": 479, "22783": 479, "15513": 479, "19858": 479, "22095": 479, "23016": 479, "21775": 479, "vfat": 479, "1218234": 479, "21740": 479, "23009": 479, "22959": 479, "16043": 479, "gzip_decod": 479, "1753": 479, "22966": 479, "pyc_compil": 479, "21971": 479, "21032": 479, "22902": 479, "pach": 479, "21356": 479, "bernard": 479, "spil": 479, "22915": 479, "22921": 479, "22894": 479, "22370": 479, "22841": 479, "ludov": 479, "gasc": 479, "httpbasicpriorauthhandl": 479, "22849": 479, "12728": 479, "22821": 479, "22824": 479, "22406": 479, "17293": 479, "netstat": 479, "aivar": 479, "kalv": 479, "22769": 479, "22417": 479, "22775": 479, "22776": 479, "22665": 479, "17381": 479, "22410": 479, "22759": 479, "8876": 479, "22217": 479, "22457": 479, "18216": 479, "22676": 479, "18853": 479, "__nain__": 479, "9351": 479, "7559": 479, "21991": 479, "22641": 479, "17401": 479, "compile_": 479, "20152": 479, "18643": 479, "22435": 479, "13096": 479, "11694": 479, "22462": 479, "21173": 479, "11866": 479, "21905": 479, "21883": 479, "22219": 479, "22449": 479, "ssl_cert_dir": 479, "ssl_cert_fil": 479, "22508": 479, "20076": 479, "20079": 479, "22396": 479, "22517": 479, "23392": 479, "10510": 479, "oshmyan": 479, "22448": 479, "oliva": 479, "22427": 479, "22362": 479, "20912": 479, "21866": 479, "22278": 479, "issue22118": 479, "22415": 479, "groupref_exist": 479, "22423": 479, "21332": 479, "21091": 479, "21079": 479, "22247": 479, "22419": 479, "bobrov": 479, "22384": 479, "22168": 479, "21147": 479, "21951": 479, "22338": 479, "12410": 479, "21270": 479, "22226": 479, "19524": 479, "19546": 479, "22051": 479, "21933": 479, "21597": 479, "kani": 479, "18132": 479, "22216": 479, "22098": 479, "22185": 479, "zongker": 479, "22287": 479, "_pytime_gettimeofday": 479, "librt": 479, "22182": 479, "move_fil": 479, "22042": 479, "22236": 479, "15696": 479, "22068": 479, "22165": 479, "8797": 479, "bull": 479, "20729": 479, "21448": 479, "22184": 479, "17923": 479, "delhallt": 479, "22176": 479, "elf": 479, "abiv2": 479, "21975": 479, "20170": 479, "exists_ok": 479, "22127": 479, "22085": 479, "21580": 479, "17172": 479, "21704": 479, "20173": 479, "22033": 479, "21947": 479, "16133": 479, "handle_read": 479, "22044": 479, "call_tzinfo_method": 479, "flanagan": 479, "1034h": 479, "4350": 479, "6167": 479, "15275": 479, "21888": 479, "22032": 479, "22031": 479, "21044": 479, "21966": 479, "19076": 479, "16382": 479, "21932": 479, "21942": 479, "11259": 479, "set_termin": 479, "12523": 479, "21707": 479, "replace_paths_in_cod": 479, "20639": 479, "tikhonov": 479, "21714": 479, "21151": 479, "21090": 479, "21781": 479, "21679": 479, "21863": 479, "11453": 479, "21858": 479, "21476": 479, "21729": 479, "21491": 479, "21832": 479, "21722": 479, "dengler": 479, "21723": 479, "21711": 479, "21766": 479, "21310": 479, "21256": 479, "21677": 479, "nonnorm": 479, "11709": 479, "21515": 479, "13223": 479, "writedoc": 479, "21463": 479, "21618": 479, "21552": 479, "14315": 479, "sapin": 479, "21402": 479, "3015": 479, "21513": 479, "21137": 479, "21538": 479, "21525": 479, "22166": 479, "_forget_codec": 479, "10744": 479, "nontrivi": 479, "13916": 479, "20998": 479, "21075": 479, "21226": 479, "21398": 479, "21424": 479, "heaqp": 479, "nmsmallest": 479, "21396": 479, "18314": 479, "sman": 479, "21088": 479, "21407": 479, "10650": 479, "21469": 479, "19414": 479, "21421": 479, "21101": 479, "21321": 479, "anton": 479, "afanasyev": 479, "21057": 479, "9815": 479, "13204": 479, "19385": 479, "21207": 479, "21291": 479, "21127": 479, "str_": 479, "15002": 479, "_temporaryfilewrapp": 479, "_temporaryfileclos": 479, "12220": 479, "mindom": 479, "21068": 479, "21276": 479, "use_xattr": 479, "incas": 479, "20896": 479, "21239": 479, "21203": 479, "jure": 479, "koren": 479, "21222": 479, "21197": 479, "17498": 479, "17826": 479, "7776": 479, "21529": 479, "vranken": 479, "4616": 479, "21169": 479, "21171": 479, "20539": 479, "21172": 479, "21155": 479, "21136": 479, "20636": 479, "21149": 479, "21058": 479, "21200": 479, "21013": 479, "20145": 479, "20633": 479, "20980": 479, "20990": 479, "21015": 479, "21000": 479, "20884": 479, "21499": 479, "test_api": 479, "19165": 479, "20574": 479, "20879": 479, "19157": 479, "usuabl": 479, "11599": 479, "distutils_debug": 479, "4931": 479, "grok_environment_error": 479, "20875": 479, "11558": 479, "20283": 479, "20778": 479, "20791": 479, "otten": 479, "19748": 479, "outsiz": 479, "2037": 479, "19573": 479, "20378": 479, "20816": 479, "lowin": 479, "20817": 479, "6676": 479, "gutteridg": 479, "21117": 479, "gi_": 479, "163": 479, "21311": 479, "_osx_support": 479, "szakmeist": 479, "11571": 479, "21801": 479, "21923": 479, "_config_var": 479, "21323": 479, "19435": 479, "byrn": 479, "22733": 479, "ffi_prep_arg": 479, "23302": 479, "mss": 479, "20577": 479, "formatparagraph": 479, "3068": 479, "16233": 479, "4832": 479, "21986": 479, "17390": 479, "14105": 479, "21765": 479, "hyperpars": 479, "21940": 479, "widgetredirector": 479, "18592": 479, "searchdialogbas": 479, "webster": 479, "21694": 479, "21686": 479, "12387": 479, "21695": 479, "18910": 479, "18292": 479, "autoexpand": 479, "saihadhav": 479, "18409": 479, "21477": 479, "18104": 479, "21139": 479, "21284": 479, "17654": 479, "23180": 479, "15506": 479, "pkg_prog_pkg_config": 479, "22935": 479, "22592": 479, "22591": 479, "djgpp": 479, "16537": 479, "hosmer": 479, "21958": 479, "have_round": 479, "18093": 479, "15759": 479, "linkcheck": 479, "21141": 479, "build_ssl": 479, "21037": 479, "19962": 479, "21285": 479, "15234": 479, "17861": 479, "generate_opcode_h": 479, "20644": 479, "20022": 479, "15968": 479, "17095": 479, "21811": 479, "21166": 479, "18096": 479, "17219": 479, "22919": 479, "21236": 479, "_msi": 479, "14203": 479, "bytearray_getbuff": 479, "bytesiobuf_getbuff": 479, "array_buffer_getbuf": 479, "22445": 479, "npy_relaxed_strides_check": 479, "22079": 479, "_pyobject_gc_calloc": 479, "20942": 479, "init_frozen": 479, "19548": 479, "22394": 479, "21514": 479, "21777": 479, "6916": 479, "17386": 479, "21312": 479, "thread_foobar": 479, "mccracken": 479, "21043": 479, "20765": 479, "19407": 479, "19697": 479, "18982": 479, "22838": 479, "22173": 479, "16000": 479, "test_curs": 479, "21456": 479, "remi": 479, "pointel": 479, "20746": 479, "test_pdb": 479, "22060": 479, "22104": 479, "22111": 479, "22002": 479, "21976": 479, "21918": 479, "9554": 479, "coneybear": 479, "radu": 479, "voicila": 479, "20155": 479, "19493": 479, "18492": 479, "21634": 479, "21605": 479, "21493": 479, "19925": 479, "21522": 479, "itemconfigur": 479, "paneconfigur": 479, "entryconfigur": 479, "17756": 479, "test_cod": 479, "17752": 479, "18604": 479, "21275": 479, "21223": 479, "20635": 479, "20743": 479, "test_tcl": 479, "21097": 479, "test_namespace_pkg": 479, "21503": 479, "test_both": 479, "20939": 479, "20668": 479, "21093": 479, "test_macholib": 479, "libz": 479, "22770": 479, "23211": 479, "23345": 479, "8zc": 479, "22314": 479, "22615": 479, "makelocalealia": 479, "22201": 479, "22120": 479, "18974": 479, "21906": 479, "21629": 479, "16047": 479, "11824": 479, "20535": 479, "23260": 479, "17896": 479, "17717": 479, "nasm": 479, "21907": 479, "22644": 479, "10747": 479, "kilburn": 479, "cp35": 479}, "objects": {"": [[65, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [57, 1, 1, "c.METH_CLASS", "METH_CLASS"], [57, 1, 1, "c.METH_COEXIST", "METH_COEXIST"], [57, 1, 1, "c.METH_FASTCALL", "METH_FASTCALL"], [57, 1, 1, "c.METH_KEYWORDS", "METH_KEYWORDS"], [57, 1, 1, "c.METH_METHOD", "METH_METHOD"], [57, 1, 1, "c.METH_NOARGS", "METH_NOARGS"], [57, 1, 1, "c.METH_O", "METH_O"], [57, 1, 1, "c.METH_STATIC", "METH_STATIC"], [57, 1, 1, "c.METH_VARARGS", "METH_VARARGS"], [41, 1, 1, "c.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [41, 1, 1, "c.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [41, 1, 1, "c.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [35, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [63, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [54, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [54, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [62, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [6, 0, 1, "c.PyBool_Type", "PyBool_Type"], [62, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [57, 4, 1, "c.PyCFunction", "PyCFunction"], [57, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [57, 4, 1, "c.PyCMethod", "PyCMethod"], [36, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [36, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [36, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeEvent", "PyCodeEvent"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_AddWatcher", "PyCode_AddWatcher"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Addr2Location", "PyCode_Addr2Location"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_ClearWatcher", "PyCode_ClearWatcher"], [13, 2, 1, "c.PyCode_GetCellvars", "PyCode_GetCellvars"], [13, 2, 1, "c.PyCode_GetCode", "PyCode_GetCode"], [13, 2, 1, "c.PyCode_GetFreevars", "PyCode_GetFreevars"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_GetVarnames", "PyCode_GetVarnames"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [13, 4, 1, "c.PyCode_WatchCallback", "PyCode_WatchCallback"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [63, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [65, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [33, 4, 1, "c.PyConfig", "PyConfig"], [33, 2, 1, "c.PyConfig_Clear", "PyConfig_Clear"], [33, 2, 1, "c.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [33, 2, 1, "c.PyConfig_Read", "PyConfig_Read"], [33, 2, 1, "c.PyConfig_SetArgv", "PyConfig_SetArgv"], [33, 2, 1, "c.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [33, 2, 1, "c.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [33, 2, 1, "c.PyConfig_SetString", "PyConfig_SetString"], [33, 2, 1, "c.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_AddWatcher", "PyDict_AddWatcher"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_ClearWatcher", "PyDict_ClearWatcher"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Unwatch", "PyDict_Unwatch"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [22, 2, 1, "c.PyDict_Watch", "PyDict_Watch"], [22, 4, 1, "c.PyDict_WatchCallback", "PyDict_WatchCallback"], [22, 4, 1, "c.PyDict_WatchEvent", "PyDict_WatchEvent"], [34, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [34, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_DisplayException", "PyErr_DisplayException"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GetHandledException", "PyErr_GetHandledException"], [23, 2, 1, "c.PyErr_GetRaisedException", "PyErr_GetRaisedException"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetHandledException", "PyErr_SetHandledException"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetRaisedException", "PyErr_SetRaisedException"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [32, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [32, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [65, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [65, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [65, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [65, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [52, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [52, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [52, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [52, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [52, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [52, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [32, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [65, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [32, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [32, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [32, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [32, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [32, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [32, 2, 1, "c.PyEval_SetProfileAllThreads", "PyEval_SetProfileAllThreads"], [32, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [32, 2, 1, "c.PyEval_SetTraceAllThreads", "PyEval_SetTraceAllThreads"], [32, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetArgs", "PyException_GetArgs"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetArgs", "PyException_SetArgs"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 2, 1, "c.PyFloat_Pack2", "PyFloat_Pack2"], [25, 2, 1, "c.PyFloat_Pack4", "PyFloat_Pack4"], [25, 2, 1, "c.PyFloat_Pack8", "PyFloat_Pack8"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [25, 2, 1, "c.PyFloat_Unpack2", "PyFloat_Unpack2"], [25, 2, 1, "c.PyFloat_Unpack4", "PyFloat_Unpack4"], [25, 2, 1, "c.PyFloat_Unpack8", "PyFloat_Unpack8"], [26, 4, 1, "c.PyFrameObject", "PyFrameObject"], [26, 2, 1, "c.PyFrame_Check", "PyFrame_Check"], [26, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [26, 2, 1, "c.PyFrame_GetBuiltins", "PyFrame_GetBuiltins"], [26, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [26, 2, 1, "c.PyFrame_GetGenerator", "PyFrame_GetGenerator"], [26, 2, 1, "c.PyFrame_GetGlobals", "PyFrame_GetGlobals"], [26, 2, 1, "c.PyFrame_GetLasti", "PyFrame_GetLasti"], [26, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [26, 2, 1, "c.PyFrame_GetLocals", "PyFrame_GetLocals"], [26, 2, 1, "c.PyFrame_GetVar", "PyFrame_GetVar"], [26, 2, 1, "c.PyFrame_GetVarString", "PyFrame_GetVarString"], [26, 0, 1, "c.PyFrame_Type", "PyFrame_Type"], [54, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [54, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [54, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [54, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [27, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [27, 2, 1, "c.PyFunction_AddWatcher", "PyFunction_AddWatcher"], [27, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [27, 2, 1, "c.PyFunction_ClearWatcher", "PyFunction_ClearWatcher"], [27, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [27, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [27, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [27, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [27, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [27, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [27, 2, 1, "c.PyFunction_New", "PyFunction_New"], [27, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [27, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [27, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [27, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [27, 2, 1, "c.PyFunction_SetVectorcall", "PyFunction_SetVectorcall"], [27, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [27, 4, 1, "c.PyFunction_WatchCallback", "PyFunction_WatchCallback"], [27, 4, 1, "c.PyFunction_WatchEvent", "PyFunction_WatchEvent"], [28, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [28, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [28, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [28, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [32, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [32, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [32, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [32, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [29, 4, 1, "c.PyGenObject", "PyGenObject"], [29, 2, 1, "c.PyGen_Check", "PyGen_Check"], [29, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [29, 2, 1, "c.PyGen_New", "PyGen_New"], [29, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [29, 0, 1, "c.PyGen_Type", "PyGen_Type"], [57, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [30, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [30, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [30, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [30, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [30, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [30, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [30, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [30, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [30, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [30, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [30, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [30, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [30, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [30, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [30, 2, 1, "c.PyImport_Import", "PyImport_Import"], [30, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [30, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [30, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [30, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [30, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [30, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [30, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [30, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [46, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [70, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [43, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [43, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [43, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [43, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [43, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [32, 4, 1, "c.PyInterpreterConfig", "PyInterpreterConfig"], [32, 1, 1, "c.PyInterpreterConfig_DEFAULT_GIL", "PyInterpreterConfig_DEFAULT_GIL"], [32, 1, 1, "c.PyInterpreterConfig_OWN_GIL", "PyInterpreterConfig_OWN_GIL"], [32, 1, 1, "c.PyInterpreterConfig_SHARED_GIL", "PyInterpreterConfig_SHARED_GIL"], [32, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [32, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [32, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [32, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [32, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [32, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [32, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [32, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [32, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [32, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [32, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [35, 2, 1, "c.PyIter_Check", "PyIter_Check"], [35, 2, 1, "c.PyIter_Next", "PyIter_Next"], [35, 2, 1, "c.PyIter_Send", "PyIter_Send"], [37, 4, 1, "c.PyListObject", "PyListObject"], [37, 2, 1, "c.PyList_Append", "PyList_Append"], [37, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [37, 2, 1, "c.PyList_Check", "PyList_Check"], [37, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [37, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [37, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [37, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [37, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [37, 2, 1, "c.PyList_Insert", "PyList_Insert"], [37, 2, 1, "c.PyList_New", "PyList_New"], [37, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [37, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [37, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [37, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [37, 2, 1, "c.PyList_Size", "PyList_Size"], [37, 2, 1, "c.PyList_Sort", "PyList_Sort"], [37, 0, 1, "c.PyList_Type", "PyList_Type"], [38, 4, 1, "c.PyLongObject", "PyLongObject"], [38, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [38, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [38, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [38, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [38, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [38, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [38, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [38, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [38, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [38, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [38, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [38, 2, 1, "c.PyLong_Check", "PyLong_Check"], [38, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [38, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [38, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [38, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [38, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [38, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [38, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [38, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [38, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [38, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [38, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [38, 0, 1, "c.PyLong_Type", "PyLong_Type"], [62, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [39, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [39, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [39, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [39, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [39, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [39, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [39, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [39, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [39, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [39, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [39, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [39, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [40, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [40, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [40, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [40, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [40, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [41, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [41, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [41, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [41, 2, 1, "c.PyMem_Del", "PyMem_Del"], [41, 2, 1, "c.PyMem_Free", "PyMem_Free"], [41, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [41, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [41, 1, 1, "c.PyMem_New", "PyMem_New"], [41, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [41, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [41, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [41, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [41, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [41, 1, 1, "c.PyMem_Resize", "PyMem_Resize"], [41, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [41, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [57, 4, 1, "c.PyMemberDef", "PyMemberDef"], [57, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [57, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [42, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [42, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [42, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [42, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [42, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [42, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [42, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [57, 4, 1, "c.PyMethodDef", "PyMethodDef"], [43, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [43, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [43, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [43, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [43, 2, 1, "c.PyMethod_New", "PyMethod_New"], [43, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [43, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [44, 4, 1, "c.PyModuleDef", "PyModuleDef"], [44, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [44, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [44, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [44, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [44, 1, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [44, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [44, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [44, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [44, 1, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [44, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [44, 2, 1, "c.PyModule_Check", "PyModule_Check"], [44, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [44, 2, 1, "c.PyModule_Create", "PyModule_Create"], [44, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [44, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [44, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [44, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [44, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [44, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [44, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [44, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [44, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [44, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [44, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [44, 2, 1, "c.PyModule_New", "PyModule_New"], [44, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [44, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [44, 0, 1, "c.PyModule_Type", "PyModule_Type"], [62, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [46, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [46, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [46, 2, 1, "c.PyNumber_And", "PyNumber_And"], [46, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [46, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [46, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [46, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [46, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [46, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [46, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [46, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [46, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [46, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [46, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [46, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [46, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [46, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [46, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [46, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [46, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [46, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [46, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [46, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [46, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [46, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [46, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [46, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [46, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [46, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [46, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [46, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [46, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [46, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [46, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [46, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [46, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [58, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [58, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [58, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [58, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [58, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [58, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [65, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [65, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [58, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [58, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [57, 4, 1, "c.PyObject", "PyObject"], [41, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [48, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [47, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [47, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [47, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [48, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [41, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [47, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [66, 2, 1, "c.PyObject_ClearWeakRefs", "PyObject_ClearWeakRefs"], [7, 2, 1, "c.PyObject_CopyData", "PyObject_CopyData"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [48, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [48, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [48, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [48, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [48, 2, 1, "c.PyObject_Format", "PyObject_Format"], [41, 2, 1, "c.PyObject_Free", "PyObject_Free"], [28, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [28, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [28, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [28, 1, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [28, 1, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [28, 2, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [28, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [28, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [48, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [48, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [48, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [48, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [48, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [41, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [48, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [48, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [48, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [48, 2, 1, "c.PyObject_GetItemData", "PyObject_GetItemData"], [48, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [48, 2, 1, "c.PyObject_GetTypeData", "PyObject_GetTypeData"], [57, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [57, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [48, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [48, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [48, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [48, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [28, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [48, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [48, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [48, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [48, 2, 1, "c.PyObject_Length", "PyObject_Length"], [48, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [41, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 1, 1, "c.PyObject_New", "PyObject_New"], [3, 1, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [48, 2, 1, "c.PyObject_Not", "PyObject_Not"], [48, 2, 1, "c.PyObject_Print", "PyObject_Print"], [41, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [48, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [48, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [48, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [41, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [48, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [48, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [48, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [48, 2, 1, "c.PyObject_Size", "PyObject_Size"], [48, 2, 1, "c.PyObject_Str", "PyObject_Str"], [48, 2, 1, "c.PyObject_Type", "PyObject_Type"], [48, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [57, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [33, 4, 1, "c.PyPreConfig", "PyPreConfig"], [33, 2, 1, "c.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [33, 2, 1, "c.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [65, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [65, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [65, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [65, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [65, 2, 1, "c.PyRun_File", "PyRun_File"], [65, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [65, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [65, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [65, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [65, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [65, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [65, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [65, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [65, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [65, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [65, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [65, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [65, 2, 1, "c.PyRun_String", "PyRun_String"], [65, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [35, 4, 1, "c.PySendResult", "PySendResult"], [36, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [36, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [36, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [62, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [53, 2, 1, "c.PySequence_Check", "PySequence_Check"], [53, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [53, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [53, 2, 1, "c.PySequence_Count", "PySequence_Count"], [53, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [53, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [53, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [53, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [53, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [53, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [53, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [53, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [53, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [53, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [53, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [53, 2, 1, "c.PySequence_Index", "PySequence_Index"], [53, 2, 1, "c.PySequence_Length", "PySequence_Length"], [53, 2, 1, "c.PySequence_List", "PySequence_List"], [53, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [53, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [53, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [53, 2, 1, "c.PySequence_Size", "PySequence_Size"], [53, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [54, 4, 1, "c.PySetObject", "PySetObject"], [54, 2, 1, "c.PySet_Add", "PySet_Add"], [54, 2, 1, "c.PySet_Check", "PySet_Check"], [54, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [54, 2, 1, "c.PySet_Clear", "PySet_Clear"], [54, 2, 1, "c.PySet_Contains", "PySet_Contains"], [54, 2, 1, "c.PySet_Discard", "PySet_Discard"], [54, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [54, 2, 1, "c.PySet_New", "PySet_New"], [54, 2, 1, "c.PySet_Pop", "PySet_Pop"], [54, 2, 1, "c.PySet_Size", "PySet_Size"], [54, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [55, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [55, 2, 1, "c.PySlice_Check", "PySlice_Check"], [55, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [55, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [55, 2, 1, "c.PySlice_New", "PySlice_New"], [55, 0, 1, "c.PySlice_Type", "PySlice_Type"], [55, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [44, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [44, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [44, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [33, 4, 1, "c.PyStatus", "PyStatus"], [33, 2, 1, "c.PyStatus_Error", "PyStatus_Error"], [33, 2, 1, "c.PyStatus_Exception", "PyStatus_Exception"], [33, 2, 1, "c.PyStatus_Exit", "PyStatus_Exit"], [33, 2, 1, "c.PyStatus_IsError", "PyStatus_IsError"], [33, 2, 1, "c.PyStatus_IsExit", "PyStatus_IsExit"], [33, 2, 1, "c.PyStatus_NoMemory", "PyStatus_NoMemory"], [33, 2, 1, "c.PyStatus_Ok", "PyStatus_Ok"], [59, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [59, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [59, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [59, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [59, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [59, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [59, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [59, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [59, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [59, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [59, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [58, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [58, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [58, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [58, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [58, 2, 1, "c.PySys_Audit", "PySys_Audit"], [58, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [58, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [58, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [58, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [58, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [32, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [32, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [58, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [58, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [58, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [58, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [32, 4, 1, "c.PyThreadState", "PyThreadState"], [32, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [32, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [32, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [32, 2, 1, "c.PyThreadState_EnterTracing", "PyThreadState_EnterTracing"], [32, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [32, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [32, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [32, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [32, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [32, 2, 1, "c.PyThreadState_LeaveTracing", "PyThreadState_LeaveTracing"], [32, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [32, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [32, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [32, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [32, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [32, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [32, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [32, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [32, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [32, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [32, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [32, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [32, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [32, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [32, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [32, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [32, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [41, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [41, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [32, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [32, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [32, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [32, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [32, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [32, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [32, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [32, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [59, 4, 1, "c.PyTupleObject", "PyTupleObject"], [59, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [59, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [59, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [59, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [59, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [59, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [59, 2, 1, "c.PyTuple_New", "PyTuple_New"], [59, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [59, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [59, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [59, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [59, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [60, 4, 1, "c.PyTypeObject", "PyTypeObject"], [60, 2, 1, "c.PyType_AddWatcher", "PyType_AddWatcher"], [60, 2, 1, "c.PyType_Check", "PyType_Check"], [60, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [60, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [60, 2, 1, "c.PyType_ClearWatcher", "PyType_ClearWatcher"], [60, 2, 1, "c.PyType_FromMetaclass", "PyType_FromMetaclass"], [60, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [60, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [60, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [60, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [60, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [60, 2, 1, "c.PyType_GetDict", "PyType_GetDict"], [60, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [60, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [60, 2, 1, "c.PyType_GetModuleByDef", "PyType_GetModuleByDef"], [60, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [60, 2, 1, "c.PyType_GetName", "PyType_GetName"], [60, 2, 1, "c.PyType_GetQualName", "PyType_GetQualName"], [60, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [48, 2, 1, "c.PyType_GetTypeDataSize", "PyType_GetTypeDataSize"], [60, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [60, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [60, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [60, 2, 1, "c.PyType_Modified", "PyType_Modified"], [60, 2, 1, "c.PyType_Ready", "PyType_Ready"], [60, 4, 1, "c.PyType_Slot", "PyType_Slot"], [60, 4, 1, "c.PyType_Spec", "PyType_Spec"], [60, 0, 1, "c.PyType_Type", "PyType_Type"], [60, 2, 1, "c.PyType_Watch", "PyType_Watch"], [60, 4, 1, "c.PyType_WatchCallback", "PyType_WatchCallback"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [63, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [63, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [63, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [63, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [63, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [63, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [63, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [63, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [63, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [63, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [63, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [63, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [63, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [63, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [63, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [63, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [63, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [63, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [63, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [63, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [63, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [63, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [63, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [63, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [63, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [63, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [63, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [63, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [63, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [63, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [63, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [63, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [63, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [63, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [63, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [63, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [63, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [63, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [63, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [63, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [63, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [63, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [63, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [63, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [63, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [63, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [63, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [63, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [63, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [63, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [63, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [63, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [63, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [63, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [63, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [63, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [63, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [63, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [63, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [63, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [63, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [63, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [63, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [63, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [63, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [63, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [63, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [63, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [63, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [63, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [63, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [63, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [63, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [63, 2, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [63, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [63, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [63, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [63, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [63, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [63, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [63, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [63, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [63, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [63, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [63, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [63, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [63, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [63, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [63, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [13, 2, 1, "c.PyUnstable_Code_GetExtra", "PyUnstable_Code_GetExtra"], [13, 2, 1, "c.PyUnstable_Code_New", "PyUnstable_Code_New"], [13, 2, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "PyUnstable_Code_NewWithPosOnlyArgs"], [13, 2, 1, "c.PyUnstable_Code_SetExtra", "PyUnstable_Code_SetExtra"], [13, 2, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "PyUnstable_Eval_RequestCodeExtraIndex"], [23, 2, 1, "c.PyUnstable_Exc_PrepReraiseStar", "PyUnstable_Exc_PrepReraiseStar"], [28, 2, 1, "c.PyUnstable_GC_VisitObjects", "PyUnstable_GC_VisitObjects"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetCode", "PyUnstable_InterpreterFrame_GetCode"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "PyUnstable_InterpreterFrame_GetLasti"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLine", "PyUnstable_InterpreterFrame_GetLine"], [38, 2, 1, "c.PyUnstable_Long_CompactValue", "PyUnstable_Long_CompactValue"], [38, 2, 1, "c.PyUnstable_Long_IsCompact", "PyUnstable_Long_IsCompact"], [28, 2, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "PyUnstable_Object_GC_NewWithExtraData"], [50, 2, 1, "c.PyUnstable_PerfMapState_Fini", "PyUnstable_PerfMapState_Fini"], [50, 2, 1, "c.PyUnstable_PerfMapState_Init", "PyUnstable_PerfMapState_Init"], [60, 2, 1, "c.PyUnstable_Type_AssignVersionTag", "PyUnstable_Type_AssignVersionTag"], [50, 2, 1, "c.PyUnstable_WritePerfMapEntry", "PyUnstable_WritePerfMapEntry"], [57, 4, 1, "c.PyVarObject", "PyVarObject"], [57, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [66, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [66, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [66, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [66, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [66, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [66, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [66, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [33, 4, 1, "c.PyWideStringList", "PyWideStringList"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [34, 1, 1, "c.Py_ABS", "Py_ABS"], [34, 1, 1, "c.Py_ALWAYS_INLINE", "Py_ALWAYS_INLINE"], [57, 1, 1, "c.Py_AUDIT_READ", "Py_AUDIT_READ"], [32, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [58, 2, 1, "c.Py_AtExit", "Py_AtExit"], [32, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [32, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [65, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [32, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [34, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [51, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [65, 2, 1, "c.Py_CompileString", "Py_CompileString"], [65, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [65, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [65, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [51, 2, 1, "c.Py_DECREF", "Py_DECREF"], [34, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [32, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [51, 2, 1, "c.Py_DecRef", "Py_DecRef"], [58, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [32, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [32, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [62, 1, 1, "c.Py_EQ", "Py_EQ"], [55, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [58, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [32, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [58, 2, 1, "c.Py_Exit", "Py_Exit"], [33, 2, 1, "c.Py_ExitStatusException", "Py_ExitStatusException"], [6, 0, 1, "c.Py_False", "Py_False"], [58, 2, 1, "c.Py_FatalError", "Py_FatalError"], [58, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [32, 2, 1, "c.Py_Finalize", "Py_Finalize"], [32, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [32, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [62, 1, 1, "c.Py_GE", "Py_GE"], [34, 1, 1, "c.Py_GETENV", "Py_GETENV"], [62, 1, 1, "c.Py_GT", "Py_GT"], [61, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [61, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [33, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [32, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [32, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [32, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [32, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [32, 2, 1, "c.Py_GetPath", "Py_GetPath"], [32, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [32, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [32, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [32, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [32, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [32, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [32, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [51, 2, 1, "c.Py_INCREF", "Py_INCREF"], [57, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [32, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [51, 2, 1, "c.Py_IncRef", "Py_IncRef"], [32, 2, 1, "c.Py_Initialize", "Py_Initialize"], [32, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [33, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [32, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [32, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [57, 2, 1, "c.Py_Is", "Py_Is"], [57, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [32, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [57, 2, 1, "c.Py_IsNone", "Py_IsNone"], [57, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [32, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [62, 1, 1, "c.Py_LE", "Py_LE"], [56, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [62, 1, 1, "c.Py_LT", "Py_LT"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [32, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [32, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [34, 1, 1, "c.Py_MAX", "Py_MAX"], [34, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [34, 1, 1, "c.Py_MIN", "Py_MIN"], [65, 2, 1, "c.Py_Main", "Py_Main"], [62, 1, 1, "c.Py_NE", "Py_NE"], [34, 1, 1, "c.Py_NO_INLINE", "Py_NO_INLINE"], [32, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [32, 2, 1, "c.Py_NewInterpreterFromConfig", "Py_NewInterpreterFromConfig"], [51, 2, 1, "c.Py_NewRef", "Py_NewRef"], [32, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [32, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [45, 0, 1, "c.Py_None", "Py_None"], [48, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [32, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [33, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [33, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [33, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [32, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [57, 1, 1, "c.Py_READONLY", "Py_READONLY"], [51, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [57, 1, 1, "c.Py_RELATIVE_OFFSET", "Py_RELATIVE_OFFSET"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [45, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [48, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [62, 1, 1, "c.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [33, 2, 1, "c.Py_RunMain", "Py_RunMain"], [51, 1, 1, "c.Py_SETREF", "Py_SETREF"], [51, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [57, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [57, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [57, 2, 1, "c.Py_SIZE", "Py_SIZE"], [34, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [32, 2, 1, "c.Py_SetPath", "Py_SetPath"], [32, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [32, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [32, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [62, 1, 1, "c.Py_TPFLAGS_BASETYPE", "Py_TPFLAGS_BASETYPE"], [62, 1, 1, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_BYTES_SUBCLASS", "Py_TPFLAGS_BYTES_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_DEFAULT", "Py_TPFLAGS_DEFAULT"], [62, 1, 1, "c.Py_TPFLAGS_DICT_SUBCLASS", "Py_TPFLAGS_DICT_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_FINALIZE", "Py_TPFLAGS_HAVE_FINALIZE"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_GC", "Py_TPFLAGS_HAVE_GC"], [62, 1, 1, "c.Py_TPFLAGS_HAVE_VECTORCALL", "Py_TPFLAGS_HAVE_VECTORCALL"], [62, 1, 1, "c.Py_TPFLAGS_HEAPTYPE", "Py_TPFLAGS_HEAPTYPE"], [62, 1, 1, "c.Py_TPFLAGS_IMMUTABLETYPE", "Py_TPFLAGS_IMMUTABLETYPE"], [62, 1, 1, "c.Py_TPFLAGS_ITEMS_AT_END", "Py_TPFLAGS_ITEMS_AT_END"], [62, 1, 1, "c.Py_TPFLAGS_LIST_SUBCLASS", "Py_TPFLAGS_LIST_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_LONG_SUBCLASS", "Py_TPFLAGS_LONG_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_MANAGED_DICT", "Py_TPFLAGS_MANAGED_DICT"], [62, 1, 1, "c.Py_TPFLAGS_MANAGED_WEAKREF", "Py_TPFLAGS_MANAGED_WEAKREF"], [62, 1, 1, "c.Py_TPFLAGS_MAPPING", "Py_TPFLAGS_MAPPING"], [62, 1, 1, "c.Py_TPFLAGS_METHOD_DESCRIPTOR", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [62, 1, 1, "c.Py_TPFLAGS_READY", "Py_TPFLAGS_READY"], [62, 1, 1, "c.Py_TPFLAGS_READYING", "Py_TPFLAGS_READYING"], [62, 1, 1, "c.Py_TPFLAGS_SEQUENCE", "Py_TPFLAGS_SEQUENCE"], [62, 1, 1, "c.Py_TPFLAGS_TUPLE_SUBCLASS", "Py_TPFLAGS_TUPLE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_TYPE_SUBCLASS", "Py_TPFLAGS_TYPE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_UNICODE_SUBCLASS", "Py_TPFLAGS_UNICODE_SUBCLASS"], [62, 1, 1, "c.Py_TPFLAGS_VALID_VERSION_TAG", "Py_TPFLAGS_VALID_VERSION_TAG"], [57, 2, 1, "c.Py_TYPE", "Py_TYPE"], [57, 1, 1, "c.Py_T_BOOL", "Py_T_BOOL"], [57, 1, 1, "c.Py_T_BYTE", "Py_T_BYTE"], [57, 1, 1, "c.Py_T_CHAR", "Py_T_CHAR"], [57, 1, 1, "c.Py_T_DOUBLE", "Py_T_DOUBLE"], [57, 1, 1, "c.Py_T_FLOAT", "Py_T_FLOAT"], [57, 1, 1, "c.Py_T_INT", "Py_T_INT"], [57, 1, 1, "c.Py_T_LONG", "Py_T_LONG"], [57, 1, 1, "c.Py_T_LONGLONG", "Py_T_LONGLONG"], [57, 1, 1, "c.Py_T_OBJECT_EX", "Py_T_OBJECT_EX"], [57, 1, 1, "c.Py_T_PYSSIZET", "Py_T_PYSSIZET"], [57, 1, 1, "c.Py_T_SHORT", "Py_T_SHORT"], [57, 1, 1, "c.Py_T_STRING", "Py_T_STRING"], [57, 1, 1, "c.Py_T_STRING_INPLACE", "Py_T_STRING_INPLACE"], [57, 1, 1, "c.Py_T_UBYTE", "Py_T_UBYTE"], [57, 1, 1, "c.Py_T_UINT", "Py_T_UINT"], [57, 1, 1, "c.Py_T_ULONG", "Py_T_ULONG"], [57, 1, 1, "c.Py_T_ULONGLONG", "Py_T_ULONGLONG"], [57, 1, 1, "c.Py_T_USHORT", "Py_T_USHORT"], [6, 0, 1, "c.Py_True", "Py_True"], [63, 4, 1, "c.Py_UCS1", "Py_UCS1"], [63, 4, 1, "c.Py_UCS2", "Py_UCS2"], [63, 4, 1, "c.Py_UCS4", "Py_UCS4"], [32, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [63, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [63, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [63, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [63, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [63, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [63, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [63, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [63, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [63, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [63, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [63, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [63, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [63, 2, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [63, 2, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [63, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [63, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [63, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [63, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [63, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [63, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [34, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [34, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [32, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [28, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [32, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [4, 0, 1, "c.Py_Version", "Py_Version"], [51, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [51, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [51, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [51, 1, 1, "c.Py_XSETREF", "Py_XSETREF"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [65, 0, 1, "c.Py_eval_input", "Py_eval_input"], [65, 0, 1, "c.Py_file_input", "Py_file_input"], [44, 1, 1, "c.Py_mod_create", "Py_mod_create"], [44, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [44, 1, 1, "c.Py_mod_multiple_interpreters", "Py_mod_multiple_interpreters"], [65, 0, 1, "c.Py_single_input", "Py_single_input"], [34, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [32, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [32, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [32, 4, 1, "c.Py_tss_t", "Py_tss_t"], [57, 1, 1, "c.T_NONE", "T_NONE"], [57, 1, 1, "c.T_OBJECT", "T_OBJECT"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [57, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [57, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [32, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [26, 5, 1, "c._PyInterpreterFrame", "_PyInterpreterFrame"], [32, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [32, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [48, 2, 1, "c._PyObject_GetDictPtr", "_PyObject_GetDictPtr"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [59, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [33, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [30, 5, 1, "c._frozen", "_frozen"], [30, 5, 1, "c._inittab", "_inittab"], [62, 4, 1, "c.allocfunc", "allocfunc"], [62, 4, 1, "c.binaryfunc", "binaryfunc"], [62, 4, 1, "c.descrgetfunc", "descrgetfunc"], [62, 4, 1, "c.descrsetfunc", "descrsetfunc"], [62, 4, 1, "c.destructor", "destructor"], [62, 4, 1, "c.freefunc", "freefunc"], [28, 4, 1, "c.gcvisitobjects_t", "gcvisitobjects_t"], [62, 4, 1, "c.getattrfunc", "getattrfunc"], [62, 4, 1, "c.getattrofunc", "getattrofunc"], [62, 4, 1, "c.getbufferproc", "getbufferproc"], [62, 4, 1, "c.getiterfunc", "getiterfunc"], [62, 4, 1, "c.hashfunc", "hashfunc"], [62, 4, 1, "c.initproc", "initproc"], [28, 4, 1, "c.inquiry", "inquiry"], [62, 4, 1, "c.iternextfunc", "iternextfunc"], [62, 4, 1, "c.lenfunc", "lenfunc"], [62, 4, 1, "c.newfunc", "newfunc"], [62, 4, 1, "c.objobjargproc", "objobjargproc"], [62, 4, 1, "c.objobjproc", "objobjproc"], [62, 4, 1, "c.releasebufferproc", "releasebufferproc"], [62, 4, 1, "c.reprfunc", "reprfunc"], [62, 4, 1, "c.richcmpfunc", "richcmpfunc"], [62, 4, 1, "c.sendfunc", "sendfunc"], [62, 4, 1, "c.setattrfunc", "setattrfunc"], [62, 4, 1, "c.setattrofunc", "setattrofunc"], [62, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [62, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [62, 4, 1, "c.ternaryfunc", "ternaryfunc"], [28, 4, 1, "c.traverseproc", "traverseproc"], [62, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [28, 4, 1, "c.visitproc", "visitproc"], [210, 6, 1, "", "ArithmeticError"], [210, 6, 1, "", "AssertionError"], [210, 6, 1, "", "AttributeError"], [210, 6, 1, "", "BaseException"], [210, 6, 1, "", "BaseExceptionGroup"], [210, 6, 1, "", "BlockingIOError"], [210, 6, 1, "", "BrokenPipeError"], [210, 6, 1, "", "BufferError"], [210, 6, 1, "", "BytesWarning"], [210, 6, 1, "", "ChildProcessError"], [210, 6, 1, "", "ConnectionAbortedError"], [210, 6, 1, "", "ConnectionError"], [210, 6, 1, "", "ConnectionRefusedError"], [210, 6, 1, "", "ConnectionResetError"], [210, 6, 1, "", "DeprecationWarning"], [210, 6, 1, "", "EOFError"], [165, 9, 1, "", "Ellipsis"], [210, 6, 1, "", "EncodingWarning"], [210, 6, 1, "", "EnvironmentError"], [210, 6, 1, "", "Exception"], [210, 6, 1, "", "ExceptionGroup"], [165, 9, 1, "", "False"], [210, 6, 1, "", "FileExistsError"], [210, 6, 1, "", "FileNotFoundError"], [210, 6, 1, "", "FloatingPointError"], [210, 6, 1, "", "FutureWarning"], [210, 6, 1, "", "GeneratorExit"], [210, 6, 1, "", "IOError"], [210, 6, 1, "", "ImportError"], [210, 6, 1, "", "ImportWarning"], [210, 6, 1, "", "IndentationError"], [210, 6, 1, "", "IndexError"], [210, 6, 1, "", "InterruptedError"], [210, 6, 1, "", "IsADirectoryError"], [210, 6, 1, "", "KeyError"], [210, 6, 1, "", "KeyboardInterrupt"], [210, 6, 1, "", "LookupError"], [210, 6, 1, "", "MemoryError"], [210, 6, 1, "", "ModuleNotFoundError"], [210, 6, 1, "", "NameError"], [165, 9, 1, "", "None"], [210, 6, 1, "", "NotADirectoryError"], [165, 9, 1, "", "NotImplemented"], [210, 6, 1, "", "NotImplementedError"], [210, 6, 1, "", "OSError"], [210, 6, 1, "", "OverflowError"], [210, 6, 1, "", "PendingDeprecationWarning"], [210, 6, 1, "", "PermissionError"], [210, 6, 1, "", "ProcessLookupError"], [210, 6, 1, "", "RecursionError"], [210, 6, 1, "", "ReferenceError"], [210, 6, 1, "", "ResourceWarning"], [210, 6, 1, "", "RuntimeError"], [210, 6, 1, "", "RuntimeWarning"], [210, 6, 1, "", "StopAsyncIteration"], [210, 6, 1, "", "StopIteration"], [210, 6, 1, "", "SyntaxError"], [210, 6, 1, "", "SyntaxWarning"], [210, 6, 1, "", "SystemError"], [210, 6, 1, "", "SystemExit"], [210, 6, 1, "", "TabError"], [210, 6, 1, "", "TimeoutError"], [165, 9, 1, "", "True"], [210, 6, 1, "", "TypeError"], [210, 6, 1, "", "UnboundLocalError"], [210, 6, 1, "", "UnicodeDecodeError"], [210, 6, 1, "", "UnicodeEncodeError"], [210, 6, 1, "", "UnicodeError"], [210, 6, 1, "", "UnicodeTranslateError"], [210, 6, 1, "", "UnicodeWarning"], [210, 6, 1, "", "UserWarning"], [210, 6, 1, "", "ValueError"], [210, 6, 1, "", "Warning"], [210, 6, 1, "", "WindowsError"], [210, 6, 1, "", "ZeroDivisionError"], [428, 7, 1, "cached__", "__cached__"], [165, 9, 1, "debug__", "__debug__"], [428, 7, 1, "file__", "__file__"], [111, 10, 0, "-", "__future__"], [222, 11, 1, "import__", "__import__"], [428, 7, 1, "loader__", "__loader__"], [112, 10, 0, "-", "__main__"], [428, 7, 1, "name__", "__name__"], [428, 7, 1, "package__", "__package__"], [428, 7, 1, "path__", "__path__"], [428, 7, 1, "spec__", "__spec__"], [113, 10, 0, "-", "_thread"], [114, 10, 0, "-", "abc"], [222, 11, 1, "", "abs"], [115, 10, 0, "-", "aifc"], [222, 11, 1, "", "aiter"], [222, 11, 1, "", "all"], [222, 11, 1, "", "anext"], [222, 11, 1, "", "any"], [118, 10, 0, "-", "argparse"], [119, 10, 0, "-", "array"], [222, 11, 1, "", "ascii"], [120, 10, 0, "-", "ast"], [121, 10, 0, "-", "asyncio"], [138, 10, 0, "-", "atexit"], [139, 10, 0, "-", "audioop"], [141, 10, 0, "-", "base64"], [142, 10, 0, "-", "bdb"], [222, 11, 1, "", "bin"], [144, 10, 0, "-", "binascii"], [145, 10, 0, "-", "bisect"], [222, 12, 1, "", "bool"], [222, 11, 1, "", "breakpoint"], [146, 10, 0, "-", "builtins"], [341, 12, 1, "", "bytearray"], [341, 12, 1, "", "bytes"], [147, 10, 0, "-", "bz2"], [305, 10, 0, "-", "cProfile"], [148, 10, 0, "-", "calendar"], [222, 11, 1, "", "callable"], [149, 10, 0, "-", "cgi"], [150, 10, 0, "-", "cgitb"], [222, 11, 1, "", "chr"], [151, 10, 0, "-", "chunk"], [222, 11, 1, "", "classmethod"], [89, 10, 0, "-", "clinic"], [152, 10, 0, "-", "cmath"], [153, 10, 0, "-", "cmd"], [154, 10, 0, "-", "code"], [155, 10, 0, "-", "codecs"], [156, 10, 0, "-", "codeop"], [157, 10, 0, "-", "collections"], [159, 10, 0, "-", "colorsys"], [222, 11, 1, "", "compile"], [160, 10, 0, "-", "compileall"], [222, 12, 1, "", "complex"], [164, 10, 0, "-", "configparser"], [166, 10, 0, "-", "contextlib"], [167, 10, 0, "-", "contextvars"], [168, 10, 0, "-", "copy"], [169, 10, 0, "-", "copyreg"], [165, 9, 1, "", "copyright"], [165, 9, 1, "", "credits"], [170, 10, 0, "-", "crypt"], [172, 10, 0, "-", "csv"], [173, 10, 0, "-", "ctypes"], [174, 10, 0, "-", "curses"], [178, 10, 0, "-", "dataclasses"], [180, 10, 0, "-", "datetime"], [181, 10, 0, "-", "dbm"], [183, 10, 0, "-", "decimal"], [222, 11, 1, "", "delattr"], [341, 12, 1, "", "dict"], [187, 10, 0, "-", "difflib"], [222, 11, 1, "", "dir"], [188, 10, 0, "-", "dis"], [222, 11, 1, "", "divmod"], [190, 10, 0, "-", "doctest"], [191, 10, 0, "-", "email"], [207, 10, 0, "-", "ensurepip"], [208, 10, 0, "-", "enum"], [222, 11, 1, "", "enumerate"], [209, 10, 0, "-", "errno"], [222, 11, 1, "", "eval"], [222, 11, 1, "", "exec"], [165, 9, 1, "", "exit"], [211, 10, 0, "-", "faulthandler"], [212, 10, 0, "-", "fcntl"], [213, 10, 0, "-", "filecmp"], [215, 10, 0, "-", "fileinput"], [222, 11, 1, "", "filter"], [222, 12, 1, "", "float"], [217, 10, 0, "-", "fnmatch"], [222, 11, 1, "", "format"], [218, 10, 0, "-", "fractions"], [341, 12, 1, "", "frozenset"], [220, 10, 0, "-", "ftplib"], [223, 10, 0, "-", "functools"], [224, 10, 0, "-", "gc"], [222, 11, 1, "", "getattr"], [225, 10, 0, "-", "getopt"], [226, 10, 0, "-", "getpass"], [227, 10, 0, "-", "gettext"], [228, 10, 0, "-", "glob"], [222, 11, 1, "", "globals"], [229, 10, 0, "-", "graphlib"], [230, 10, 0, "-", "grp"], [231, 10, 0, "-", "gzip"], [222, 11, 1, "", "hasattr"], [222, 11, 1, "", "hash"], [232, 10, 0, "-", "hashlib"], [233, 10, 0, "-", "heapq"], [222, 11, 1, "", "help"], [222, 11, 1, "", "hex"], [234, 10, 0, "-", "hmac"], [235, 10, 0, "-", "html"], [238, 10, 0, "-", "http"], [222, 11, 1, "", "id"], [244, 10, 0, "-", "idlelib"], [245, 10, 0, "-", "imaplib"], [246, 10, 0, "-", "imghdr"], [247, 10, 0, "-", "importlib"], [222, 11, 1, "", "input"], [252, 10, 0, "-", "inspect"], [222, 12, 1, "", "int"], [255, 10, 0, "-", "io"], [256, 10, 0, "-", "ipaddress"], [222, 11, 1, "", "isinstance"], [222, 11, 1, "", "issubclass"], [222, 11, 1, "", "iter"], [258, 10, 0, "-", "itertools"], [259, 10, 0, "-", "json"], [260, 10, 0, "-", "keyword"], [222, 11, 1, "", "len"], [110, 10, 0, "-", "lib2to3"], [165, 9, 1, "", "license"], [262, 10, 0, "-", "linecache"], [341, 12, 1, "", "list"], [263, 10, 0, "-", "locale"], [222, 11, 1, "", "locals"], [264, 10, 0, "-", "logging"], [267, 10, 0, "-", "lzma"], [268, 10, 0, "-", "mailbox"], [269, 10, 0, "-", "mailcap"], [222, 11, 1, "", "map"], [271, 10, 0, "-", "marshal"], [272, 10, 0, "-", "math"], [222, 11, 1, "", "max"], [341, 12, 1, "", "memoryview"], [273, 10, 0, "-", "mimetypes"], [222, 11, 1, "", "min"], [275, 10, 0, "-", "mmap"], [276, 10, 0, "-", "modulefinder"], [278, 10, 0, "-", "msilib"], [279, 10, 0, "-", "msvcrt"], [280, 10, 0, "-", "multiprocessing"], [283, 10, 0, "-", "netrc"], [222, 11, 1, "", "next"], [284, 10, 0, "-", "nis"], [285, 10, 0, "-", "nntplib"], [286, 10, 0, "-", "numbers"], [222, 12, 1, "", "object"], [222, 11, 1, "", "oct"], [222, 11, 1, "", "open"], [288, 10, 0, "-", "operator"], [289, 10, 0, "-", "optparse"], [222, 11, 1, "", "ord"], [290, 10, 0, "-", "os"], [292, 10, 0, "-", "ossaudiodev"], [293, 10, 0, "-", "pathlib"], [294, 10, 0, "-", "pdb"], [296, 10, 0, "-", "pickle"], [297, 10, 0, "-", "pickletools"], [298, 10, 0, "-", "pipes"], [299, 10, 0, "-", "pkgutil"], [300, 10, 0, "-", "platform"], [301, 10, 0, "-", "plistlib"], [302, 10, 0, "-", "poplib"], [303, 10, 0, "-", "posix"], [222, 11, 1, "", "pow"], [304, 10, 0, "-", "pprint"], [222, 11, 1, "", "print"], [305, 10, 0, "-", "profile"], [222, 12, 1, "", "property"], [305, 10, 0, "-", "pstats"], [306, 10, 0, "-", "pty"], [307, 10, 0, "-", "pwd"], [308, 10, 0, "-", "py_compile"], [309, 10, 0, "-", "pyclbr"], [310, 10, 0, "-", "pydoc"], [313, 10, 0, "-", "queue"], [165, 9, 1, "", "quit"], [314, 10, 0, "-", "quopri"], [315, 10, 0, "-", "random"], [341, 12, 1, "", "range"], [316, 10, 0, "-", "re"], [317, 10, 0, "-", "readline"], [222, 11, 1, "", "repr"], [318, 10, 0, "-", "reprlib"], [319, 10, 0, "-", "resource"], [222, 11, 1, "", "reversed"], [320, 10, 0, "-", "rlcompleter"], [222, 11, 1, "", "round"], [321, 10, 0, "-", "runpy"], [322, 10, 0, "-", "sched"], [323, 10, 0, "-", "secrets"], [325, 10, 0, "-", "select"], [326, 10, 0, "-", "selectors"], [341, 12, 1, "", "set"], [222, 11, 1, "", "setattr"], [327, 10, 0, "-", "shelve"], [328, 10, 0, "-", "shlex"], [329, 10, 0, "-", "shutil"], [330, 10, 0, "-", "signal"], [331, 10, 0, "-", "site"], [222, 12, 1, "", "slice"], [332, 10, 0, "-", "smtplib"], [333, 10, 0, "-", "sndhdr"], [334, 10, 0, "-", "socket"], [335, 10, 0, "-", "socketserver"], [222, 11, 1, "", "sorted"], [336, 10, 0, "-", "spwd"], [337, 10, 0, "-", "sqlite3"], [338, 10, 0, "-", "ssl"], [339, 10, 0, "-", "stat"], [222, 11, 1, "", "staticmethod"], [340, 10, 0, "-", "statistics"], [341, 12, 1, "", "str"], [342, 10, 0, "-", "string"], [343, 10, 0, "-", "stringprep"], [344, 10, 0, "-", "struct"], [345, 10, 0, "-", "subprocess"], [222, 11, 1, "", "sum"], [346, 10, 0, "-", "sunau"], [222, 12, 1, "", "super"], [348, 10, 0, "-", "symtable"], [349, 10, 0, "-", "sys"], [351, 10, 0, "-", "sysconfig"], [352, 10, 0, "-", "syslog"], [353, 10, 0, "-", "tabnanny"], [354, 10, 0, "-", "tarfile"], [355, 10, 0, "-", "telnetlib"], [356, 10, 0, "-", "tempfile"], [357, 10, 0, "-", "termios"], [358, 10, 0, "-", "test"], [360, 10, 0, "-", "textwrap"], [361, 10, 0, "-", "threading"], [362, 10, 0, "-", "time"], [363, 10, 0, "-", "timeit"], [365, 10, 0, "-", "tkinter"], [373, 10, 0, "-", "token"], [374, 10, 0, "-", "tokenize"], [375, 10, 0, "-", "tomllib"], [376, 10, 0, "-", "trace"], [377, 10, 0, "-", "traceback"], [378, 10, 0, "-", "tracemalloc"], [379, 10, 0, "-", "tty"], [341, 12, 1, "", "tuple"], [380, 10, 0, "-", "turtle"], [380, 10, 0, "-", "turtledemo"], [222, 12, 1, "", "type"], [381, 10, 0, "-", "types"], [382, 10, 0, "-", "typing"], [383, 10, 0, "-", "unicodedata"], [384, 10, 0, "-", "unittest"], [388, 10, 0, "-", "urllib"], [393, 10, 0, "-", "uu"], [394, 10, 0, "-", "uuid"], [222, 11, 1, "", "vars"], [395, 10, 0, "-", "venv"], [396, 10, 0, "-", "warnings"], [397, 10, 0, "-", "wave"], [398, 10, 0, "-", "weakref"], [399, 10, 0, "-", "webbrowser"], [401, 10, 0, "-", "winreg"], [402, 10, 0, "-", "winsound"], [403, 10, 0, "-", "wsgiref"], [404, 10, 0, "-", "xdrlib"], [405, 10, 0, "-", "xml"], [222, 11, 1, "", "zip"], [417, 10, 0, "-", "zipapp"], [418, 10, 0, "-", "zipfile"], [419, 10, 0, "-", "zipimport"], [420, 10, 0, "-", "zlib"], [421, 10, 0, "-", "zoneinfo"], [294, 13, 1, "pdbcommand-0", "!"], [452, 14, 1, "cmdoption-build", "--build"], [451, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [452, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [452, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [452, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [452, 14, 1, "cmdoption-enable-bolt", "--enable-bolt"], [452, 14, 1, "cmdoption-enable-framework", "--enable-framework"], [452, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [452, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [452, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [452, 14, 1, "cmdoption-enable-pystats", "--enable-pystats"], [452, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [452, 14, 1, "cmdoption-enable-universalsdk", "--enable-universalsdk"], [452, 14, 1, "cmdoption-enable-wasm-dynamic-linking", "--enable-wasm-dynamic-linking"], [452, 14, 1, "cmdoption-enable-wasm-pthreads", "--enable-wasm-pthreads"], [452, 14, 1, "cmdoption-exec-prefix", "--exec-prefix"], [451, 14, 1, "cmdoption-help", "--help"], [451, 14, 1, "cmdoption-help-all", "--help-all"], [451, 14, 1, "cmdoption-help-env", "--help-env"], [451, 14, 1, "cmdoption-help-xoptions", "--help-xoptions"], [452, 14, 1, "cmdoption-host", "--host"], [452, 14, 1, "cmdoption-prefix", "--prefix"], [451, 14, 1, "cmdoption-version", "--version"], [452, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [452, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [452, 14, 1, "cmdoption-with-build-python", "--with-build-python"], [452, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [452, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [452, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [452, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [452, 14, 1, "cmdoption-with-emscripten-target", "--with-emscripten-target"], [452, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [452, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [452, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [452, 14, 1, "cmdoption-with-libc", "--with-libc"], [452, 14, 1, "cmdoption-with-libm", "--with-libm"], [452, 14, 1, "cmdoption-with-libs", "--with-libs"], [452, 14, 1, "cmdoption-with-lto", "--with-lto"], [452, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [452, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [452, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [452, 14, 1, "cmdoption-with-pkg-config", "--with-pkg-config"], [452, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [452, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [452, 14, 1, "cmdoption-with-readline", "--with-readline"], [452, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [452, 14, 1, "cmdoption-with-strict-overflow", "--with-strict-overflow"], [452, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [452, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [452, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [452, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [452, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [452, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [452, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [452, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [452, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [452, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [452, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [452, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [452, 14, 1, "cmdoption-without-freelists", "--without-freelists"], [452, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [452, 14, 1, "cmdoption-without-readline", "--without-readline"], [452, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [451, 14, 1, "cmdoption-0", "-?"], [451, 14, 1, "cmdoption-B", "-B"], [451, 14, 1, "cmdoption-E", "-E"], [451, 14, 1, "cmdoption-I", "-I"], [451, 14, 1, "cmdoption-J", "-J"], [451, 14, 1, "cmdoption-O", "-O"], [451, 14, 1, "cmdoption-OO", "-OO"], [451, 14, 1, "cmdoption-P", "-P"], [451, 14, 1, "cmdoption-R", "-R"], [451, 14, 1, "cmdoption-S", "-S"], [451, 14, 1, "cmdoption-V", "-V"], [451, 14, 1, "cmdoption-W", "-W"], [451, 14, 1, "cmdoption-X", "-X"], [451, 14, 1, "cmdoption-b", "-b"], [451, 14, 1, "cmdoption-c", "-c"], [451, 14, 1, "cmdoption-d", "-d"], [451, 14, 1, "cmdoption-h", "-h"], [451, 14, 1, "cmdoption-i", "-i"], [451, 14, 1, "cmdoption-m", "-m"], [451, 14, 1, "cmdoption-q", "-q"], [451, 14, 1, "cmdoption-s", "-s"], [451, 14, 1, "cmdoption-u", "-u"], [451, 14, 1, "cmdoption-v", "-v"], [451, 14, 1, "cmdoption-x", "-x"], [452, 15, 1, "-", "BASECFLAGS"], [452, 15, 1, "-", "BASECPPFLAGS"], [188, 16, 1, "-", "BEFORE_ASYNC_WITH"], [188, 16, 1, "-", "BEFORE_WITH"], [188, 16, 1, "-", "BINARY_OP"], [188, 16, 1, "-", "BINARY_SLICE"], [188, 16, 1, "-", "BINARY_SUBSCR"], [452, 15, 1, "-", "BLDSHARED"], [188, 16, 1, "-", "BUILD_CONST_KEY_MAP"], [188, 16, 1, "-", "BUILD_LIST"], [188, 16, 1, "-", "BUILD_MAP"], [188, 16, 1, "-", "BUILD_SET"], [188, 16, 1, "-", "BUILD_SLICE"], [188, 16, 1, "-", "BUILD_STRING"], [188, 16, 1, "-", "BUILD_TUPLE"], [188, 16, 1, "-", "CACHE"], [188, 16, 1, "-", "CALL"], [188, 16, 1, "-", "CALL_FUNCTION_EX"], [188, 16, 1, "-", "CALL_INTRINSIC_1"], [188, 16, 1, "-", "CALL_INTRINSIC_2"], [452, 15, 1, "-", "CC"], [452, 15, 1, "-", "CCSHARED"], [452, 15, 1, "-", "CFLAGS"], [452, 15, 1, "-", "CFLAGSFORSHARED"], [452, 15, 1, "-", "CFLAGS_ALIASING"], [452, 15, 1, "-", "CFLAGS_NODIST"], [188, 16, 1, "-", "CHECK_EG_MATCH"], [188, 16, 1, "-", "CHECK_EXC_MATCH"], [188, 16, 1, "-", "CLEANUP_THROW"], [188, 16, 1, "-", "COMPARE_OP"], [452, 15, 1, "-", "COMPILEALL_OPTS"], [452, 15, 1, "-", "CONFIGURE_CFLAGS"], [452, 15, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [452, 15, 1, "-", "CONFIGURE_CPPFLAGS"], [452, 15, 1, "-", "CONFIGURE_LDFLAGS"], [452, 15, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [452, 14, 1, "cmdoption-arg-CONFIG_SITE", "CONFIG_SITE"], [188, 16, 1, "-", "CONTAINS_OP"], [188, 16, 1, "-", "COPY"], [188, 16, 1, "-", "COPY_FREE_VARS"], [452, 15, 1, "-", "CPPFLAGS"], [452, 15, 1, "-", "CXX"], [188, 16, 1, "-", "DELETE_ATTR"], [188, 16, 1, "-", "DELETE_DEREF"], [188, 16, 1, "-", "DELETE_FAST"], [188, 16, 1, "-", "DELETE_GLOBAL"], [188, 16, 1, "-", "DELETE_NAME"], [188, 16, 1, "-", "DELETE_SUBSCR"], [188, 16, 1, "-", "DICT_MERGE"], [188, 16, 1, "-", "DICT_UPDATE"], [188, 16, 1, "-", "END_ASYNC_FOR"], [188, 16, 1, "-", "END_FOR"], [188, 16, 1, "-", "EXTENDED_ARG"], [452, 15, 1, "-", "EXTRA_CFLAGS"], [188, 16, 1, "-", "FORMAT_VALUE"], [188, 16, 1, "-", "FOR_ITER"], [188, 16, 1, "-", "GET_AITER"], [188, 16, 1, "-", "GET_ANEXT"], [188, 16, 1, "-", "GET_AWAITABLE"], [188, 16, 1, "-", "GET_ITER"], [188, 16, 1, "-", "GET_LEN"], [188, 16, 1, "-", "GET_YIELD_FROM_ITER"], [188, 16, 1, "-", "HAVE_ARGUMENT"], [188, 16, 1, "-", "IMPORT_FROM"], [188, 16, 1, "-", "IMPORT_NAME"], [188, 16, 1, "-", "IS_OP"], [188, 16, 1, "-", "JUMP"], [188, 16, 1, "-", "JUMP_BACKWARD"], [188, 16, 1, "-", "JUMP_BACKWARD_NO_INTERRUPT"], [188, 16, 1, "-", "JUMP_FORWARD"], [188, 16, 1, "-", "JUMP_NO_INTERRUPT"], [188, 16, 1, "-", "KW_NAMES"], [452, 15, 1, "-", "LDFLAGS"], [452, 15, 1, "-", "LDFLAGS_NODIST"], [452, 15, 1, "-", "LDSHARED"], [452, 15, 1, "-", "LIBS"], [452, 15, 1, "-", "LINKCC"], [188, 16, 1, "-", "LIST_APPEND"], [188, 16, 1, "-", "LIST_EXTEND"], [188, 16, 1, "-", "LOAD_ASSERTION_ERROR"], [188, 16, 1, "-", "LOAD_ATTR"], [188, 16, 1, "-", "LOAD_BUILD_CLASS"], [188, 16, 1, "-", "LOAD_CLOSURE"], [188, 16, 1, "-", "LOAD_CONST"], [188, 16, 1, "-", "LOAD_DEREF"], [188, 16, 1, "-", "LOAD_FAST"], [188, 16, 1, "-", "LOAD_FAST_AND_CLEAR"], [188, 16, 1, "-", "LOAD_FAST_CHECK"], [188, 16, 1, "-", "LOAD_FROM_DICT_OR_DEREF"], [188, 16, 1, "-", "LOAD_FROM_DICT_OR_GLOBALS"], [188, 16, 1, "-", "LOAD_GLOBAL"], [188, 16, 1, "-", "LOAD_LOCALS"], [188, 16, 1, "-", "LOAD_METHOD"], [188, 16, 1, "-", "LOAD_NAME"], [188, 16, 1, "-", "LOAD_SUPER_ATTR"], [188, 16, 1, "-", "MAKE_CELL"], [188, 16, 1, "-", "MAKE_FUNCTION"], [188, 16, 1, "-", "MAP_ADD"], [188, 16, 1, "-", "MATCH_CLASS"], [188, 16, 1, "-", "MATCH_KEYS"], [188, 16, 1, "-", "MATCH_MAPPING"], [188, 16, 1, "-", "MATCH_SEQUENCE"], [188, 16, 1, "-", "NOP"], [452, 15, 1, "-", "OPT"], [188, 16, 1, "-", "POP_BLOCK"], [188, 16, 1, "-", "POP_EXCEPT"], [188, 16, 1, "-", "POP_JUMP_IF_FALSE"], [188, 16, 1, "-", "POP_JUMP_IF_NONE"], [188, 16, 1, "-", "POP_JUMP_IF_NOT_NONE"], [188, 16, 1, "-", "POP_JUMP_IF_TRUE"], [188, 16, 1, "-", "POP_TOP"], [452, 15, 1, "-", "PROFILE_TASK"], [452, 15, 1, "-", "PURIFY"], [188, 16, 1, "-", "PUSH_EXC_INFO"], [188, 16, 1, "-", "PUSH_NULL"], [451, 15, 1, "-", "PYTHONASYNCIODEBUG"], [451, 15, 1, "-", "PYTHONBREAKPOINT"], [451, 15, 1, "-", "PYTHONCASEOK"], [451, 15, 1, "-", "PYTHONCOERCECLOCALE"], [451, 15, 1, "-", "PYTHONDEBUG"], [451, 15, 1, "-", "PYTHONDEVMODE"], [451, 15, 1, "-", "PYTHONDONTWRITEBYTECODE"], [451, 15, 1, "-", "PYTHONDUMPREFS"], [451, 15, 1, "envvar-PYTHONDUMPREFSFILE-FILENAME", "PYTHONDUMPREFSFILE=FILENAME"], [451, 15, 1, "-", "PYTHONEXECUTABLE"], [451, 15, 1, "-", "PYTHONFAULTHANDLER"], [451, 15, 1, "-", "PYTHONHASHSEED"], [451, 15, 1, "-", "PYTHONHOME"], [451, 15, 1, "-", "PYTHONINSPECT"], [451, 15, 1, "-", "PYTHONINTMAXSTRDIGITS"], [451, 15, 1, "-", "PYTHONIOENCODING"], [451, 15, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [451, 15, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [451, 15, 1, "-", "PYTHONMALLOC"], [451, 15, 1, "-", "PYTHONMALLOCSTATS"], [451, 15, 1, "-", "PYTHONNODEBUGRANGES"], [451, 15, 1, "-", "PYTHONNOUSERSITE"], [451, 15, 1, "-", "PYTHONOPTIMIZE"], [451, 15, 1, "-", "PYTHONPATH"], [451, 15, 1, "-", "PYTHONPERFSUPPORT"], [451, 15, 1, "-", "PYTHONPLATLIBDIR"], [451, 15, 1, "-", "PYTHONPROFILEIMPORTTIME"], [451, 15, 1, "-", "PYTHONPYCACHEPREFIX"], [451, 15, 1, "-", "PYTHONSAFEPATH"], [451, 15, 1, "-", "PYTHONSTARTUP"], [451, 15, 1, "-", "PYTHONTRACEMALLOC"], [421, 15, 1, "-", "PYTHONTZPATH"], [451, 15, 1, "-", "PYTHONUNBUFFERED"], [451, 15, 1, "-", "PYTHONUSERBASE"], [451, 15, 1, "-", "PYTHONUTF8"], [451, 15, 1, "-", "PYTHONVERBOSE"], [451, 15, 1, "-", "PYTHONWARNDEFAULTENCODING"], [451, 15, 1, "-", "PYTHONWARNINGS"], [452, 15, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [452, 15, 1, "-", "PY_CFLAGS"], [452, 15, 1, "-", "PY_CFLAGS_NODIST"], [452, 15, 1, "-", "PY_CORE_CFLAGS"], [452, 15, 1, "-", "PY_CORE_LDFLAGS"], [452, 15, 1, "-", "PY_CPPFLAGS"], [452, 15, 1, "-", "PY_LDFLAGS"], [452, 15, 1, "-", "PY_LDFLAGS_NODIST"], [452, 15, 1, "-", "PY_STDMODULE_CFLAGS"], [188, 16, 1, "-", "RAISE_VARARGS"], [188, 16, 1, "-", "RERAISE"], [188, 16, 1, "-", "RESUME"], [188, 16, 1, "-", "RETURN_CONST"], [188, 16, 1, "-", "RETURN_GENERATOR"], [188, 16, 1, "-", "RETURN_VALUE"], [188, 16, 1, "-", "SEND"], [188, 16, 1, "-", "SETUP_ANNOTATIONS"], [188, 16, 1, "-", "SETUP_CLEANUP"], [188, 16, 1, "-", "SETUP_FINALLY"], [188, 16, 1, "-", "SETUP_WITH"], [188, 16, 1, "-", "SET_ADD"], [188, 16, 1, "-", "SET_UPDATE"], [188, 16, 1, "-", "STORE_ATTR"], [188, 16, 1, "-", "STORE_DEREF"], [188, 16, 1, "-", "STORE_FAST"], [188, 16, 1, "-", "STORE_GLOBAL"], [188, 16, 1, "-", "STORE_NAME"], [188, 16, 1, "-", "STORE_SLICE"], [188, 16, 1, "-", "STORE_SUBSCR"], [188, 16, 1, "-", "SWAP"], [188, 16, 1, "-", "UNARY_INVERT"], [188, 16, 1, "-", "UNARY_NEGATIVE"], [188, 16, 1, "-", "UNARY_NOT"], [188, 16, 1, "-", "UNPACK_EX"], [188, 16, 1, "-", "UNPACK_SEQUENCE"], [188, 16, 1, "-", "WITH_EXCEPT_START"], [188, 16, 1, "-", "YIELD_VALUE"], [294, 13, 1, "-", "alias"], [110, 17, 1, "to3fixer-apply", "apply"], [294, 13, 1, "-", "args"], [110, 17, 1, "to3fixer-asserts", "asserts"], [110, 17, 1, "to3fixer-basestring", "basestring"], [294, 13, 1, "-", "break"], [110, 17, 1, "to3fixer-buffer", "buffer"], [294, 13, 1, "-", "clear"], [294, 13, 1, "-", "commands"], [294, 13, 1, "-", "condition"], [294, 13, 1, "-", "continue"], [294, 13, 1, "-", "debug"], [110, 17, 1, "to3fixer-dict", "dict"], [294, 13, 1, "-", "disable"], [294, 13, 1, "-", "display"], [294, 13, 1, "-", "down"], [294, 13, 1, "-", "enable"], [110, 17, 1, "to3fixer-except", "except"], [110, 17, 1, "to3fixer-exec", "exec"], [110, 17, 1, "to3fixer-execfile", "execfile"], [110, 17, 1, "to3fixer-exitfunc", "exitfunc"], [110, 17, 1, "to3fixer-filter", "filter"], [110, 17, 1, "to3fixer-funcattrs", "funcattrs"], [110, 17, 1, "to3fixer-future", "future"], [110, 17, 1, "to3fixer-getcwdu", "getcwdu"], [110, 17, 1, "to3fixer-has_key", "has_key"], [294, 13, 1, "-", "help"], [110, 17, 1, "to3fixer-idioms", "idioms"], [294, 13, 1, "-", "ignore"], [110, 17, 1, "to3fixer-import", "import"], [110, 17, 1, "to3fixer-imports", "imports"], [110, 17, 1, "to3fixer-imports2", "imports2"], [110, 17, 1, "to3fixer-input", "input"], [294, 13, 1, "-", "interact"], [110, 17, 1, "to3fixer-intern", "intern"], [110, 17, 1, "to3fixer-isinstance", "isinstance"], [110, 17, 1, "to3fixer-itertools", "itertools"], [110, 17, 1, "to3fixer-itertools_imports", "itertools_imports"], [294, 13, 1, "-", "jump"], [294, 13, 1, "-", "list"], [294, 13, 1, "-", "ll"], [110, 17, 1, "to3fixer-long", "long"], [110, 17, 1, "to3fixer-map", "map"], [110, 17, 1, "to3fixer-metaclass", "metaclass"], [110, 17, 1, "to3fixer-methodattrs", "methodattrs"], [110, 17, 1, "to3fixer-ne", "ne"], [110, 17, 1, "to3fixer-next", "next"], [294, 13, 1, "-", "next"], [110, 17, 1, "to3fixer-nonzero", "nonzero"], [110, 17, 1, "to3fixer-numliterals", "numliterals"], [110, 17, 1, "to3fixer-operator", "operator"], [294, 13, 1, "-", "p"], [110, 17, 1, "to3fixer-paren", "paren"], [294, 13, 1, "-", "pp"], [110, 17, 1, "to3fixer-print", "print"], [294, 13, 1, "-", "quit"], [110, 17, 1, "to3fixer-raise", "raise"], [110, 17, 1, "to3fixer-raw_input", "raw_input"], [110, 17, 1, "to3fixer-reduce", "reduce"], [110, 17, 1, "to3fixer-reload", "reload"], [110, 17, 1, "to3fixer-renames", "renames"], [110, 17, 1, "to3fixer-repr", "repr"], [294, 13, 1, "-", "restart"], [294, 13, 1, "-", "return"], [294, 13, 1, "-", "retval"], [294, 13, 1, "-", "run"], [110, 17, 1, "to3fixer-set_literal", "set_literal"], [294, 13, 1, "-", "source"], [110, 17, 1, "to3fixer-standarderror", "standarderror"], [294, 13, 1, "-", "step"], [110, 17, 1, "to3fixer-sys_exc", "sys_exc"], [294, 13, 1, "-", "tbreak"], [110, 17, 1, "to3fixer-throw", "throw"], [110, 17, 1, "to3fixer-tuple_params", "tuple_params"], [110, 17, 1, "to3fixer-types", "types"], [294, 13, 1, "-", "unalias"], [294, 13, 1, "-", "undisplay"], [110, 17, 1, "to3fixer-unicode", "unicode"], [294, 13, 1, "-", "until"], [294, 13, 1, "-", "up"], [110, 17, 1, "to3fixer-urllib", "urllib"], [294, 13, 1, "-", "whatis"], [294, 13, 1, "-", "where"], [110, 17, 1, "to3fixer-ws_comma", "ws_comma"], [110, 17, 1, "to3fixer-xrange", "xrange"], [110, 17, 1, "to3fixer-xreadlines", "xreadlines"], [110, 17, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[35, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[54, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[54, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[62, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [62, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [62, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [62, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[62, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [62, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCallIter_Check": [[36, 3, 1, "c.PyCallIter_Check", "op"]], "PyCallIter_New": [[36, 3, 1, "c.PyCallIter_New", "callable"], [36, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_Check": [[12, 3, 1, "c.PyCell_Check", "ob"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_AddWatcher": [[13, 3, 1, "c.PyCode_AddWatcher", "callback"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Addr2Location": [[13, 3, 1, "c.PyCode_Addr2Location", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Location", "co"], [13, 3, 1, "c.PyCode_Addr2Location", "end_column"], [13, 3, 1, "c.PyCode_Addr2Location", "end_line"], [13, 3, 1, "c.PyCode_Addr2Location", "start_column"], [13, 3, 1, "c.PyCode_Addr2Location", "start_line"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_ClearWatcher": [[13, 3, 1, "c.PyCode_ClearWatcher", "watcher_id"]], "PyCode_GetCellvars": [[13, 3, 1, "c.PyCode_GetCellvars", "co"]], "PyCode_GetCode": [[13, 3, 1, "c.PyCode_GetCode", "co"]], "PyCode_GetFreevars": [[13, 3, 1, "c.PyCode_GetFreevars", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_GetVarnames": [[13, 3, 1, "c.PyCode_GetVarnames", "co"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[65, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [65, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[33, 0, 1, "c.PyConfig.argv", "argv"], [33, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [33, 0, 1, "c.PyConfig.base_executable", "base_executable"], [33, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [33, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [33, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [33, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [33, 0, 1, "c.PyConfig.code_debug_ranges", "code_debug_ranges"], [33, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [33, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [33, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [33, 0, 1, "c.PyConfig.executable", "executable"], [33, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [33, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [33, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [33, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [33, 0, 1, "c.PyConfig.home", "home"], [33, 0, 1, "c.PyConfig.import_time", "import_time"], [33, 0, 1, "c.PyConfig.inspect", "inspect"], [33, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [33, 0, 1, "c.PyConfig.int_max_str_digits", "int_max_str_digits"], [33, 0, 1, "c.PyConfig.interactive", "interactive"], [33, 0, 1, "c.PyConfig.isolated", "isolated"], [33, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [33, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [33, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [33, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [33, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [33, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [33, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [33, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [33, 0, 1, "c.PyConfig.perf_profiling", "perf_profiling"], [33, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [33, 0, 1, "c.PyConfig.prefix", "prefix"], [33, 0, 1, "c.PyConfig.program_name", "program_name"], [33, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [33, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [33, 0, 1, "c.PyConfig.quiet", "quiet"], [33, 0, 1, "c.PyConfig.run_command", "run_command"], [33, 0, 1, "c.PyConfig.run_filename", "run_filename"], [33, 0, 1, "c.PyConfig.run_module", "run_module"], [33, 0, 1, "c.PyConfig.safe_path", "safe_path"], [33, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [33, 0, 1, "c.PyConfig.site_import", "site_import"], [33, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [33, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [33, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [33, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [33, 0, 1, "c.PyConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [33, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [33, 0, 1, "c.PyConfig.verbose", "verbose"], [33, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [33, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [33, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [33, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig_Clear": [[33, 3, 1, "c.PyConfig_Clear", "config"]], "PyConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyConfig_InitIsolatedConfig", "config"]], "PyConfig_InitPythonConfig": [[33, 3, 1, "c.PyConfig_InitPythonConfig", "config"]], "PyConfig_Read": [[33, 3, 1, "c.PyConfig_Read", "config"]], "PyConfig_SetArgv": [[33, 3, 1, "c.PyConfig_SetArgv", "argc"], [33, 3, 1, "c.PyConfig_SetArgv", "argv"], [33, 3, 1, "c.PyConfig_SetArgv", "config"]], "PyConfig_SetBytesArgv": [[33, 3, 1, "c.PyConfig_SetBytesArgv", "argc"], [33, 3, 1, "c.PyConfig_SetBytesArgv", "argv"], [33, 3, 1, "c.PyConfig_SetBytesArgv", "config"]], "PyConfig_SetBytesString": [[33, 3, 1, "c.PyConfig_SetBytesString", "config"], [33, 3, 1, "c.PyConfig_SetBytesString", "config_str"], [33, 3, 1, "c.PyConfig_SetBytesString", "str"]], "PyConfig_SetString": [[33, 3, 1, "c.PyConfig_SetString", "config"], [33, 3, 1, "c.PyConfig_SetString", "config_str"], [33, 3, 1, "c.PyConfig_SetString", "str"]], "PyConfig_SetWideStringList": [[33, 3, 1, "c.PyConfig_SetWideStringList", "config"], [33, 3, 1, "c.PyConfig_SetWideStringList", "items"], [33, 3, 1, "c.PyConfig_SetWideStringList", "length"], [33, 3, 1, "c.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_AddWatcher": [[22, 3, 1, "c.PyDict_AddWatcher", "callback"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_ClearWatcher": [[22, 3, 1, "c.PyDict_ClearWatcher", "watcher_id"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Unwatch": [[22, 3, 1, "c.PyDict_Unwatch", "dict"], [22, 3, 1, "c.PyDict_Unwatch", "watcher_id"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyDict_Watch": [[22, 3, 1, "c.PyDict_Watch", "dict"], [22, 3, 1, "c.PyDict_Watch", "watcher_id"]], "PyErr_DisplayException": [[23, 3, 1, "c.PyErr_DisplayException", "exc"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetHandledException": [[23, 3, 1, "c.PyErr_SetHandledException", "exc"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetRaisedException": [[23, 3, 1, "c.PyErr_SetRaisedException", "exc"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[32, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[65, 3, 1, "c.PyEval_EvalCode", "co"], [65, 3, 1, "c.PyEval_EvalCode", "globals"], [65, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[65, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "args"], [65, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [65, 3, 1, "c.PyEval_EvalCodeEx", "co"], [65, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [65, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [65, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [65, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[65, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[65, 3, 1, "c.PyEval_EvalFrameEx", "f"], [65, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[52, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[52, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[65, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[32, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[32, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[32, 3, 1, "c.PyEval_SetProfile", "func"], [32, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetProfileAllThreads": [[32, 3, 1, "c.PyEval_SetProfileAllThreads", "func"], [32, 3, 1, "c.PyEval_SetProfileAllThreads", "obj"]], "PyEval_SetTrace": [[32, 3, 1, "c.PyEval_SetTrace", "func"], [32, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyEval_SetTraceAllThreads": [[32, 3, 1, "c.PyEval_SetTraceAllThreads", "func"], [32, 3, 1, "c.PyEval_SetTraceAllThreads", "obj"]], "PyException_GetArgs": [[23, 3, 1, "c.PyException_GetArgs", "ex"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetArgs": [[23, 3, 1, "c.PyException_SetArgs", "args"], [23, 3, 1, "c.PyException_SetArgs", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFloat_Pack2": [[25, 3, 1, "c.PyFloat_Pack2", "le"], [25, 3, 1, "c.PyFloat_Pack2", "p"], [25, 3, 1, "c.PyFloat_Pack2", "x"]], "PyFloat_Pack4": [[25, 3, 1, "c.PyFloat_Pack4", "le"], [25, 3, 1, "c.PyFloat_Pack4", "p"], [25, 3, 1, "c.PyFloat_Pack4", "x"]], "PyFloat_Pack8": [[25, 3, 1, "c.PyFloat_Pack8", "le"], [25, 3, 1, "c.PyFloat_Pack8", "p"], [25, 3, 1, "c.PyFloat_Pack8", "x"]], "PyFloat_Unpack2": [[25, 3, 1, "c.PyFloat_Unpack2", "le"], [25, 3, 1, "c.PyFloat_Unpack2", "p"]], "PyFloat_Unpack4": [[25, 3, 1, "c.PyFloat_Unpack4", "le"], [25, 3, 1, "c.PyFloat_Unpack4", "p"]], "PyFloat_Unpack8": [[25, 3, 1, "c.PyFloat_Unpack8", "le"], [25, 3, 1, "c.PyFloat_Unpack8", "p"]], "PyFrame_Check": [[26, 3, 1, "c.PyFrame_Check", "obj"]], "PyFrame_GetBack": [[26, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetBuiltins": [[26, 3, 1, "c.PyFrame_GetBuiltins", "frame"]], "PyFrame_GetCode": [[26, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetGenerator": [[26, 3, 1, "c.PyFrame_GetGenerator", "frame"]], "PyFrame_GetGlobals": [[26, 3, 1, "c.PyFrame_GetGlobals", "frame"]], "PyFrame_GetLasti": [[26, 3, 1, "c.PyFrame_GetLasti", "frame"]], "PyFrame_GetLineNumber": [[26, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrame_GetLocals": [[26, 3, 1, "c.PyFrame_GetLocals", "frame"]], "PyFrame_GetVar": [[26, 3, 1, "c.PyFrame_GetVar", "frame"], [26, 3, 1, "c.PyFrame_GetVar", "name"]], "PyFrame_GetVarString": [[26, 3, 1, "c.PyFrame_GetVarString", "frame"], [26, 3, 1, "c.PyFrame_GetVarString", "name"]], "PyFrozenSet_Check": [[54, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[54, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[54, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_AddWatcher": [[27, 3, 1, "c.PyFunction_AddWatcher", "callback"]], "PyFunction_Check": [[27, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_ClearWatcher": [[27, 3, 1, "c.PyFunction_ClearWatcher", "watcher_id"]], "PyFunction_GetAnnotations": [[27, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[27, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[27, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[27, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[27, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[27, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[27, 3, 1, "c.PyFunction_New", "code"], [27, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[27, 3, 1, "c.PyFunction_NewWithQualName", "code"], [27, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [27, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[27, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [27, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[27, 3, 1, "c.PyFunction_SetClosure", "closure"], [27, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[27, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [27, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyFunction_SetVectorcall": [[27, 3, 1, "c.PyFunction_SetVectorcall", "func"], [27, 3, 1, "c.PyFunction_SetVectorcall", "vectorcall"]], "PyGen_Check": [[29, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[29, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[29, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[29, 3, 1, "c.PyGen_NewWithQualName", "frame"], [29, 3, 1, "c.PyGen_NewWithQualName", "name"], [29, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyGetSetDef": [[57, 0, 1, "c.PyGetSetDef.closure", "closure"], [57, 0, 1, "c.PyGetSetDef.doc", "doc"], [57, 0, 1, "c.PyGetSetDef.get", "get"], [57, 0, 1, "c.PyGetSetDef.name", "name"], [57, 0, 1, "c.PyGetSetDef.set", "set"]], "PyImport_AddModule": [[30, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[30, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[30, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [30, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[30, 3, 1, "c.PyImport_ExecCodeModule", "co"], [30, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[30, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[30, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [30, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[30, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[30, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[30, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[30, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[30, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[30, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[30, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[30, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [30, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[30, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[30, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [30, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[30, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[30, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[46, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[43, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[43, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[43, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[43, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterConfig": [[32, 0, 1, "c.PyInterpreterConfig.allow_daemon_threads", "allow_daemon_threads"], [32, 0, 1, "c.PyInterpreterConfig.allow_exec", "allow_exec"], [32, 0, 1, "c.PyInterpreterConfig.allow_fork", "allow_fork"], [32, 0, 1, "c.PyInterpreterConfig.allow_threads", "allow_threads"], [32, 0, 1, "c.PyInterpreterConfig.check_multi_interp_extensions", "check_multi_interp_extensions"], [32, 0, 1, "c.PyInterpreterConfig.gil", "gil"], [32, 0, 1, "c.PyInterpreterConfig.use_main_obmalloc", "use_main_obmalloc"]], "PyInterpreterState_Clear": [[32, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[32, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[32, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[32, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[32, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[32, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[35, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[35, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[35, 3, 1, "c.PyIter_Send", "arg"], [35, 3, 1, "c.PyIter_Send", "iter"], [35, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[37, 3, 1, "c.PyList_Append", "item"], [37, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[37, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[37, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[37, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[37, 3, 1, "c.PyList_GET_ITEM", "i"], [37, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[37, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[37, 3, 1, "c.PyList_GetItem", "index"], [37, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[37, 3, 1, "c.PyList_GetSlice", "high"], [37, 3, 1, "c.PyList_GetSlice", "list"], [37, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[37, 3, 1, "c.PyList_Insert", "index"], [37, 3, 1, "c.PyList_Insert", "item"], [37, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[37, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[37, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[37, 3, 1, "c.PyList_SET_ITEM", "i"], [37, 3, 1, "c.PyList_SET_ITEM", "list"], [37, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[37, 3, 1, "c.PyList_SetItem", "index"], [37, 3, 1, "c.PyList_SetItem", "item"], [37, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[37, 3, 1, "c.PyList_SetSlice", "high"], [37, 3, 1, "c.PyList_SetSlice", "itemlist"], [37, 3, 1, "c.PyList_SetSlice", "list"], [37, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[37, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[37, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[38, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[38, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[38, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [38, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[38, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[38, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[38, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[38, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[38, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[38, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[38, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[38, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[38, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[38, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[38, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[38, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[38, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[38, 3, 1, "c.PyLong_FromString", "base"], [38, 3, 1, "c.PyLong_FromString", "pend"], [38, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[38, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [38, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[38, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[38, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[38, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[62, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [62, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [62, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[39, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[39, 3, 1, "c.PyMapping_DelItem", "key"], [39, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[39, 3, 1, "c.PyMapping_DelItemString", "key"], [39, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[39, 3, 1, "c.PyMapping_GetItemString", "key"], [39, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[39, 3, 1, "c.PyMapping_HasKey", "key"], [39, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[39, 3, 1, "c.PyMapping_HasKeyString", "key"], [39, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[39, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[39, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[39, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[39, 3, 1, "c.PyMapping_SetItemString", "key"], [39, 3, 1, "c.PyMapping_SetItemString", "o"], [39, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[39, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[39, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[40, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[40, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[40, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [40, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[40, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[40, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[40, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[40, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [40, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMem_Calloc": [[41, 3, 1, "c.PyMem_Calloc", "elsize"], [41, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[41, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[41, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[41, 3, 1, "c.PyMem_GetAllocator", "allocator"], [41, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[41, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_RawCalloc": [[41, 3, 1, "c.PyMem_RawCalloc", "elsize"], [41, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[41, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[41, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[41, 3, 1, "c.PyMem_RawRealloc", "n"], [41, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[41, 3, 1, "c.PyMem_Realloc", "n"], [41, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_SetAllocator": [[41, 3, 1, "c.PyMem_SetAllocator", "allocator"], [41, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMemberDef": [[57, 0, 1, "c.PyMemberDef.doc", "doc"], [57, 0, 1, "c.PyMemberDef.flags", "flags"], [57, 0, 1, "c.PyMemberDef.name", "name"], [57, 0, 1, "c.PyMemberDef.offset", "offset"], [57, 0, 1, "c.PyMemberDef.type", "type"]], "PyMember_GetOne": [[57, 3, 1, "c.PyMember_GetOne", "m"], [57, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[57, 3, 1, "c.PyMember_SetOne", "m"], [57, 3, 1, "c.PyMember_SetOne", "o"], [57, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[42, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[42, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[42, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [42, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [42, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[42, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[42, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[42, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[42, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [42, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethodDef": [[57, 0, 1, "c.PyMethodDef.ml_doc", "ml_doc"], [57, 0, 1, "c.PyMethodDef.ml_flags", "ml_flags"], [57, 0, 1, "c.PyMethodDef.ml_meth", "ml_meth"], [57, 0, 1, "c.PyMethodDef.ml_name", "ml_name"]], "PyMethod_Check": [[43, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[43, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[43, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[43, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[43, 3, 1, "c.PyMethod_New", "func"], [43, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[43, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[44, 0, 1, "c.PyModuleDef.m_base", "m_base"], [44, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [44, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [44, 0, 1, "c.PyModuleDef.m_free", "m_free"], [44, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [44, 0, 1, "c.PyModuleDef.m_name", "m_name"], [44, 0, 1, "c.PyModuleDef.m_size", "m_size"], [44, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [44, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[44, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[44, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[44, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [44, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[44, 3, 1, "c.PyModule_AddFunctions", "functions"], [44, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[44, 3, 1, "c.PyModule_AddIntConstant", "module"], [44, 3, 1, "c.PyModule_AddIntConstant", "name"], [44, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddObject": [[44, 3, 1, "c.PyModule_AddObject", "module"], [44, 3, 1, "c.PyModule_AddObject", "name"], [44, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[44, 3, 1, "c.PyModule_AddObjectRef", "module"], [44, 3, 1, "c.PyModule_AddObjectRef", "name"], [44, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[44, 3, 1, "c.PyModule_AddStringConstant", "module"], [44, 3, 1, "c.PyModule_AddStringConstant", "name"], [44, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddType": [[44, 3, 1, "c.PyModule_AddType", "module"], [44, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[44, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[44, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[44, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[44, 3, 1, "c.PyModule_Create2", "def"], [44, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[44, 3, 1, "c.PyModule_ExecDef", "def"], [44, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[44, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[44, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [44, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[44, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[44, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[44, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[44, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[44, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[44, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[44, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[44, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[44, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[44, 3, 1, "c.PyModule_SetDocString", "docstring"], [44, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[62, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [62, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [62, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [62, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [62, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [62, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [62, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [62, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [62, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [62, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [62, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [62, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [62, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [62, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [62, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [62, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [62, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [62, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [62, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [62, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [62, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [62, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [62, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[46, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[46, 3, 1, "c.PyNumber_Add", "o1"], [46, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[46, 3, 1, "c.PyNumber_And", "o1"], [46, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[46, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [46, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[46, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[46, 3, 1, "c.PyNumber_Divmod", "o1"], [46, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[46, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[46, 3, 1, "c.PyNumber_FloorDivide", "o1"], [46, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[46, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[46, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [46, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[46, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[46, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [46, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[46, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [46, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[46, 3, 1, "c.PyNumber_InPlacePower", "o1"], [46, 3, 1, "c.PyNumber_InPlacePower", "o2"], [46, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[46, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[46, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [46, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[46, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [46, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [46, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[46, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [46, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[46, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[46, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[46, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[46, 3, 1, "c.PyNumber_Lshift", "o1"], [46, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[46, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [46, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[46, 3, 1, "c.PyNumber_Multiply", "o1"], [46, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[46, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[46, 3, 1, "c.PyNumber_Or", "o1"], [46, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[46, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[46, 3, 1, "c.PyNumber_Power", "o1"], [46, 3, 1, "c.PyNumber_Power", "o2"], [46, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[46, 3, 1, "c.PyNumber_Remainder", "o1"], [46, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[46, 3, 1, "c.PyNumber_Rshift", "o1"], [46, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[46, 3, 1, "c.PyNumber_Subtract", "o1"], [46, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[46, 3, 1, "c.PyNumber_ToBase", "base"], [46, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[46, 3, 1, "c.PyNumber_TrueDivide", "o1"], [46, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[46, 3, 1, "c.PyNumber_Xor", "o1"], [46, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[58, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[58, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[58, 3, 1, "c.PyOS_setsig", "h"], [58, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[62, 0, 1, "c.PyObject._ob_next", "_ob_next"], [62, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [62, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [62, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[48, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[47, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[47, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [47, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[48, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[41, 3, 1, "c.PyObject_Calloc", "elsize"], [41, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[47, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_ClearWeakRefs": [[66, 3, 1, "c.PyObject_ClearWeakRefs", "object"]], "PyObject_CopyData": [[7, 3, 1, "c.PyObject_CopyData", "dest"], [7, 3, 1, "c.PyObject_CopyData", "src"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[48, 3, 1, "c.PyObject_DelAttr", "attr_name"], [48, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[48, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [48, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[48, 3, 1, "c.PyObject_DelItem", "key"], [48, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[48, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Format": [[48, 3, 1, "c.PyObject_Format", "format_spec"], [48, 3, 1, "c.PyObject_Format", "obj"]], "PyObject_Free": [[41, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[28, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[28, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[28, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_Resize": [[28, 3, 1, "c.PyObject_GC_Resize", "newsize"], [28, 3, 1, "c.PyObject_GC_Resize", "op"]], "PyObject_GC_Track": [[28, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[28, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[48, 3, 1, "c.PyObject_GenericGetAttr", "name"], [48, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[48, 3, 1, "c.PyObject_GenericGetDict", "context"], [48, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[48, 3, 1, "c.PyObject_GenericSetAttr", "name"], [48, 3, 1, "c.PyObject_GenericSetAttr", "o"], [48, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[48, 3, 1, "c.PyObject_GenericSetDict", "context"], [48, 3, 1, "c.PyObject_GenericSetDict", "o"], [48, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[48, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[41, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[48, 3, 1, "c.PyObject_GetAttr", "attr_name"], [48, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[48, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[48, 3, 1, "c.PyObject_GetItem", "key"], [48, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetItemData": [[48, 3, 1, "c.PyObject_GetItemData", "o"]], "PyObject_GetIter": [[48, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_GetTypeData": [[48, 3, 1, "c.PyObject_GetTypeData", "cls"], [48, 3, 1, "c.PyObject_GetTypeData", "o"]], "PyObject_HasAttr": [[48, 3, 1, "c.PyObject_HasAttr", "attr_name"], [48, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[48, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [48, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[48, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[48, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[28, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[48, 3, 1, "c.PyObject_IsInstance", "cls"], [48, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[48, 3, 1, "c.PyObject_IsSubclass", "cls"], [48, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[48, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[48, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[48, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [48, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[41, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_Not": [[48, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[48, 3, 1, "c.PyObject_Print", "flags"], [48, 3, 1, "c.PyObject_Print", "fp"], [48, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[41, 3, 1, "c.PyObject_Realloc", "n"], [41, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[48, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[48, 3, 1, "c.PyObject_RichCompare", "o1"], [48, 3, 1, "c.PyObject_RichCompare", "o2"], [48, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[48, 3, 1, "c.PyObject_RichCompareBool", "o1"], [48, 3, 1, "c.PyObject_RichCompareBool", "o2"], [48, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[41, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[48, 3, 1, "c.PyObject_SetAttr", "attr_name"], [48, 3, 1, "c.PyObject_SetAttr", "o"], [48, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[48, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [48, 3, 1, "c.PyObject_SetAttrString", "o"], [48, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[48, 3, 1, "c.PyObject_SetItem", "key"], [48, 3, 1, "c.PyObject_SetItem", "o"], [48, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[48, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[48, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[48, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[48, 3, 1, "c.PyObject_TypeCheck", "o"], [48, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[33, 0, 1, "c.PyPreConfig.allocator", "allocator"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [33, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [33, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [33, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [33, 0, 1, "c.PyPreConfig.isolated", "isolated"], [33, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [33, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [33, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [33, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig_InitIsolatedConfig": [[33, 3, 1, "c.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig_InitPythonConfig": [[33, 3, 1, "c.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[65, 3, 1, "c.PyRun_AnyFile", "filename"], [65, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[65, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [65, 3, 1, "c.PyRun_AnyFileEx", "filename"], [65, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[65, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [65, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[65, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [65, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [65, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[65, 3, 1, "c.PyRun_File", "filename"], [65, 3, 1, "c.PyRun_File", "fp"], [65, 3, 1, "c.PyRun_File", "globals"], [65, 3, 1, "c.PyRun_File", "locals"], [65, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[65, 3, 1, "c.PyRun_FileEx", "closeit"], [65, 3, 1, "c.PyRun_FileEx", "filename"], [65, 3, 1, "c.PyRun_FileEx", "fp"], [65, 3, 1, "c.PyRun_FileEx", "globals"], [65, 3, 1, "c.PyRun_FileEx", "locals"], [65, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[65, 3, 1, "c.PyRun_FileExFlags", "closeit"], [65, 3, 1, "c.PyRun_FileExFlags", "filename"], [65, 3, 1, "c.PyRun_FileExFlags", "flags"], [65, 3, 1, "c.PyRun_FileExFlags", "fp"], [65, 3, 1, "c.PyRun_FileExFlags", "globals"], [65, 3, 1, "c.PyRun_FileExFlags", "locals"], [65, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[65, 3, 1, "c.PyRun_FileFlags", "filename"], [65, 3, 1, "c.PyRun_FileFlags", "flags"], [65, 3, 1, "c.PyRun_FileFlags", "fp"], [65, 3, 1, "c.PyRun_FileFlags", "globals"], [65, 3, 1, "c.PyRun_FileFlags", "locals"], [65, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[65, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [65, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[65, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [65, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [65, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[65, 3, 1, "c.PyRun_InteractiveOne", "filename"], [65, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[65, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [65, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [65, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[65, 3, 1, "c.PyRun_SimpleFile", "filename"], [65, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[65, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [65, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [65, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[65, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [65, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[65, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[65, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [65, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[65, 3, 1, "c.PyRun_String", "globals"], [65, 3, 1, "c.PyRun_String", "locals"], [65, 3, 1, "c.PyRun_String", "start"], [65, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[65, 3, 1, "c.PyRun_StringFlags", "flags"], [65, 3, 1, "c.PyRun_StringFlags", "globals"], [65, 3, 1, "c.PyRun_StringFlags", "locals"], [65, 3, 1, "c.PyRun_StringFlags", "start"], [65, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_Check": [[36, 3, 1, "c.PySeqIter_Check", "op"]], "PySeqIter_New": [[36, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[62, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [62, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [62, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [62, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [62, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [62, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [62, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [62, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[53, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[53, 3, 1, "c.PySequence_Concat", "o1"], [53, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[53, 3, 1, "c.PySequence_Contains", "o"], [53, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[53, 3, 1, "c.PySequence_Count", "o"], [53, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[53, 3, 1, "c.PySequence_DelItem", "i"], [53, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[53, 3, 1, "c.PySequence_DelSlice", "i1"], [53, 3, 1, "c.PySequence_DelSlice", "i2"], [53, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[53, 3, 1, "c.PySequence_Fast", "m"], [53, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[53, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [53, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[53, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[53, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[53, 3, 1, "c.PySequence_GetItem", "i"], [53, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[53, 3, 1, "c.PySequence_GetSlice", "i1"], [53, 3, 1, "c.PySequence_GetSlice", "i2"], [53, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[53, 3, 1, "c.PySequence_ITEM", "i"], [53, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[53, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [53, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[53, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [53, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[53, 3, 1, "c.PySequence_Index", "o"], [53, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[53, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[53, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[53, 3, 1, "c.PySequence_Repeat", "count"], [53, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[53, 3, 1, "c.PySequence_SetItem", "i"], [53, 3, 1, "c.PySequence_SetItem", "o"], [53, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[53, 3, 1, "c.PySequence_SetSlice", "i1"], [53, 3, 1, "c.PySequence_SetSlice", "i2"], [53, 3, 1, "c.PySequence_SetSlice", "o"], [53, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[53, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[53, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[54, 3, 1, "c.PySet_Add", "key"], [54, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[54, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[54, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[54, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[54, 3, 1, "c.PySet_Contains", "anyset"], [54, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[54, 3, 1, "c.PySet_Discard", "key"], [54, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[54, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[54, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[54, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[54, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[55, 3, 1, "c.PySlice_AdjustIndices", "length"], [55, 3, 1, "c.PySlice_AdjustIndices", "start"], [55, 3, 1, "c.PySlice_AdjustIndices", "step"], [55, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[55, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[55, 3, 1, "c.PySlice_GetIndices", "length"], [55, 3, 1, "c.PySlice_GetIndices", "slice"], [55, 3, 1, "c.PySlice_GetIndices", "start"], [55, 3, 1, "c.PySlice_GetIndices", "step"], [55, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[55, 3, 1, "c.PySlice_GetIndicesEx", "length"], [55, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [55, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [55, 3, 1, "c.PySlice_GetIndicesEx", "start"], [55, 3, 1, "c.PySlice_GetIndicesEx", "step"], [55, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[55, 3, 1, "c.PySlice_New", "start"], [55, 3, 1, "c.PySlice_New", "step"], [55, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[55, 3, 1, "c.PySlice_Unpack", "slice"], [55, 3, 1, "c.PySlice_Unpack", "start"], [55, 3, 1, "c.PySlice_Unpack", "step"], [55, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[44, 3, 1, "c.PyState_AddModule", "def"], [44, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[44, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[44, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[33, 0, 1, "c.PyStatus.err_msg", "err_msg"], [33, 0, 1, "c.PyStatus.exitcode", "exitcode"], [33, 0, 1, "c.PyStatus.func", "func"]], "PyStatus_Error": [[33, 3, 1, "c.PyStatus_Error", "err_msg"]], "PyStatus_Exception": [[33, 3, 1, "c.PyStatus_Exception", "status"]], "PyStatus_Exit": [[33, 3, 1, "c.PyStatus_Exit", "exitcode"]], "PyStatus_IsError": [[33, 3, 1, "c.PyStatus_IsError", "status"]], "PyStatus_IsExit": [[33, 3, 1, "c.PyStatus_IsExit", "status"]], "PyStructSequence_Desc": [[59, 0, 1, "c.PyStructSequence_Desc.doc", "doc"], [59, 0, 1, "c.PyStructSequence_Desc.fields", "fields"], [59, 0, 1, "c.PyStructSequence_Desc.n_in_sequence", "n_in_sequence"], [59, 0, 1, "c.PyStructSequence_Desc.name", "name"]], "PyStructSequence_Field": [[59, 0, 1, "c.PyStructSequence_Field.doc", "doc"], [59, 0, 1, "c.PyStructSequence_Field.name", "name"]], "PyStructSequence_GET_ITEM": [[59, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [59, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[59, 3, 1, "c.PyStructSequence_GetItem", "p"], [59, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[59, 3, 1, "c.PyStructSequence_InitType", "desc"], [59, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[59, 3, 1, "c.PyStructSequence_InitType2", "desc"], [59, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[59, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[59, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[59, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [59, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [59, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[59, 3, 1, "c.PyStructSequence_SetItem", "o"], [59, 3, 1, "c.PyStructSequence_SetItem", "p"], [59, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[58, 3, 1, "c.PySys_AddAuditHook", "hook"], [58, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[58, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[58, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[58, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[58, 3, 1, "c.PySys_Audit", "event"], [58, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[58, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[58, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[58, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[32, 3, 1, "c.PySys_SetArgv", "argc"], [32, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[32, 3, 1, "c.PySys_SetArgvEx", "argc"], [32, 3, 1, "c.PySys_SetArgvEx", "argv"], [32, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[58, 3, 1, "c.PySys_SetObject", "name"], [58, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[58, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[58, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[58, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState": [[32, 0, 1, "c.PyThreadState.interp", "interp"]], "PyThreadState_Clear": [[32, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[32, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_EnterTracing": [[32, 3, 1, "c.PyThreadState_EnterTracing", "tstate"]], "PyThreadState_GetFrame": [[32, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[32, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[32, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_LeaveTracing": [[32, 3, 1, "c.PyThreadState_LeaveTracing", "tstate"]], "PyThreadState_New": [[32, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[32, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[32, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [32, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[32, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[32, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[32, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[32, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[32, 3, 1, "c.PyThread_set_key_value", "key"], [32, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[32, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[32, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[32, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[32, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[32, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[32, 3, 1, "c.PyThread_tss_set", "key"], [32, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[41, 3, 1, "c.PyTraceMalloc_Track", "domain"], [41, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [41, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[41, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [41, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[59, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[59, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[59, 3, 1, "c.PyTuple_GET_ITEM", "p"], [59, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[59, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[59, 3, 1, "c.PyTuple_GetItem", "p"], [59, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[59, 3, 1, "c.PyTuple_GetSlice", "high"], [59, 3, 1, "c.PyTuple_GetSlice", "low"], [59, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[59, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[59, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[59, 3, 1, "c.PyTuple_SET_ITEM", "o"], [59, 3, 1, "c.PyTuple_SET_ITEM", "p"], [59, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[59, 3, 1, "c.PyTuple_SetItem", "o"], [59, 3, 1, "c.PyTuple_SetItem", "p"], [59, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[59, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[62, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [62, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [62, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [62, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [62, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [62, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [62, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [62, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [62, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [62, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [62, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [62, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [62, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [62, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [62, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [62, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [62, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [62, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [62, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [62, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [62, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [62, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [62, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [62, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [62, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [62, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [62, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [62, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [62, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [62, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [62, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [62, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [62, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [62, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [62, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [62, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [62, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [62, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [62, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [62, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [62, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [62, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [62, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [62, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [62, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [62, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [62, 0, 1, "c.PyTypeObject.tp_watched", "tp_watched"], [62, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [62, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyType_AddWatcher": [[60, 3, 1, "c.PyType_AddWatcher", "callback"]], "PyType_Check": [[60, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[60, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_ClearWatcher": [[60, 3, 1, "c.PyType_ClearWatcher", "watcher_id"]], "PyType_FromMetaclass": [[60, 3, 1, "c.PyType_FromMetaclass", "bases"], [60, 3, 1, "c.PyType_FromMetaclass", "metaclass"], [60, 3, 1, "c.PyType_FromMetaclass", "module"], [60, 3, 1, "c.PyType_FromMetaclass", "spec"]], "PyType_FromModuleAndSpec": [[60, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [60, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [60, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[60, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[60, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [60, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[60, 3, 1, "c.PyType_GenericAlloc", "nitems"], [60, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[60, 3, 1, "c.PyType_GenericNew", "args"], [60, 3, 1, "c.PyType_GenericNew", "kwds"], [60, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetDict": [[60, 3, 1, "c.PyType_GetDict", "type"]], "PyType_GetFlags": [[60, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[60, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleByDef": [[60, 3, 1, "c.PyType_GetModuleByDef", "def"], [60, 3, 1, "c.PyType_GetModuleByDef", "type"]], "PyType_GetModuleState": [[60, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetName": [[60, 3, 1, "c.PyType_GetName", "type"]], "PyType_GetQualName": [[60, 3, 1, "c.PyType_GetQualName", "type"]], "PyType_GetSlot": [[60, 3, 1, "c.PyType_GetSlot", "slot"], [60, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_GetTypeDataSize": [[48, 3, 1, "c.PyType_GetTypeDataSize", "cls"]], "PyType_HasFeature": [[60, 3, 1, "c.PyType_HasFeature", "feature"], [60, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[60, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[60, 3, 1, "c.PyType_IsSubtype", "a"], [60, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[60, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[60, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot": [[60, 0, 1, "c.PyType_Slot.pfunc", "pfunc"], [60, 0, 1, "c.PyType_Slot.slot", "slot"]], "PyType_Spec": [[60, 0, 1, "c.PyType_Spec.basicsize", "basicsize"], [60, 0, 1, "c.PyType_Spec.flags", "flags"], [60, 0, 1, "c.PyType_Spec.itemsize", "itemsize"], [60, 0, 1, "c.PyType_Spec.name", "name"], [60, 0, 1, "c.PyType_Spec.slots", "slots"]], "PyType_Watch": [[60, 3, 1, "c.PyType_Watch", "type"], [60, 3, 1, "c.PyType_Watch", "watcher_id"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[63, 3, 1, "c.PyUnicode_1BYTE_DATA", "o"]], "PyUnicode_2BYTE_DATA": [[63, 3, 1, "c.PyUnicode_2BYTE_DATA", "o"]], "PyUnicode_4BYTE_DATA": [[63, 3, 1, "c.PyUnicode_4BYTE_DATA", "o"]], "PyUnicode_AsASCIIString": [[63, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[63, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [63, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[63, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [63, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [63, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[63, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[63, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[63, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[63, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [63, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [63, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [63, 3, 1, "c.PyUnicode_AsUCS4", "u"]], "PyUnicode_AsUCS4Copy": [[63, 3, 1, "c.PyUnicode_AsUCS4Copy", "u"]], "PyUnicode_AsUTF16String": [[63, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[63, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[63, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[63, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [63, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[63, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[63, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[63, 3, 1, "c.PyUnicode_AsWideChar", "size"], [63, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [63, 3, 1, "c.PyUnicode_AsWideChar", "w"]], "PyUnicode_AsWideCharString": [[63, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [63, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[63, 3, 1, "c.PyUnicode_Check", "o"]], "PyUnicode_CheckExact": [[63, 3, 1, "c.PyUnicode_CheckExact", "o"]], "PyUnicode_Compare": [[63, 3, 1, "c.PyUnicode_Compare", "left"], [63, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[63, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [63, 3, 1, "c.PyUnicode_CompareWithASCIIString", "uni"]], "PyUnicode_Concat": [[63, 3, 1, "c.PyUnicode_Concat", "left"], [63, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[63, 3, 1, "c.PyUnicode_Contains", "container"], [63, 3, 1, "c.PyUnicode_Contains", "element"]], "PyUnicode_CopyCharacters": [[63, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [63, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[63, 3, 1, "c.PyUnicode_Count", "end"], [63, 3, 1, "c.PyUnicode_Count", "start"], [63, 3, 1, "c.PyUnicode_Count", "str"], [63, 3, 1, "c.PyUnicode_Count", "substr"]], "PyUnicode_DATA": [[63, 3, 1, "c.PyUnicode_DATA", "o"]], "PyUnicode_Decode": [[63, 3, 1, "c.PyUnicode_Decode", "encoding"], [63, 3, 1, "c.PyUnicode_Decode", "errors"], [63, 3, 1, "c.PyUnicode_Decode", "s"], [63, 3, 1, "c.PyUnicode_Decode", "size"]], "PyUnicode_DecodeASCII": [[63, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [63, 3, 1, "c.PyUnicode_DecodeASCII", "s"], [63, 3, 1, "c.PyUnicode_DecodeASCII", "size"]], "PyUnicode_DecodeCharmap": [[63, 3, 1, "c.PyUnicode_DecodeCharmap", "data"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [63, 3, 1, "c.PyUnicode_DecodeCharmap", "size"]], "PyUnicode_DecodeFSDefault": [[63, 3, 1, "c.PyUnicode_DecodeFSDefault", "s"]], "PyUnicode_DecodeFSDefaultAndSize": [[63, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "s"], [63, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"]], "PyUnicode_DecodeLatin1": [[63, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLatin1", "s"], [63, 3, 1, "c.PyUnicode_DecodeLatin1", "size"]], "PyUnicode_DecodeLocale": [[63, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "len"], [63, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[63, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [63, 3, 1, "c.PyUnicode_DecodeMBCS", "s"], [63, 3, 1, "c.PyUnicode_DecodeMBCS", "size"]], "PyUnicode_DecodeMBCSStateful": [[63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"]], "PyUnicode_DecodeRawUnicodeEscape": [[63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "s"], [63, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"]], "PyUnicode_DecodeUTF16": [[63, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF16", "size"]], "PyUnicode_DecodeUTF16Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"]], "PyUnicode_DecodeUTF32": [[63, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF32", "size"]], "PyUnicode_DecodeUTF32Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"]], "PyUnicode_DecodeUTF7": [[63, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF7", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF7", "size"]], "PyUnicode_DecodeUTF7Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"]], "PyUnicode_DecodeUTF8": [[63, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF8", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF8", "size"]], "PyUnicode_DecodeUTF8Stateful": [[63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "s"], [63, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"]], "PyUnicode_DecodeUnicodeEscape": [[63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "s"], [63, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"]], "PyUnicode_EncodeCodePage": [[63, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [63, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [63, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[63, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLocale": [[63, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [63, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_FSConverter": [[63, 3, 1, "c.PyUnicode_FSConverter", "obj"], [63, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[63, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [63, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[63, 3, 1, "c.PyUnicode_Fill", "fill_char"], [63, 3, 1, "c.PyUnicode_Fill", "length"], [63, 3, 1, "c.PyUnicode_Fill", "start"], [63, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[63, 3, 1, "c.PyUnicode_Find", "direction"], [63, 3, 1, "c.PyUnicode_Find", "end"], [63, 3, 1, "c.PyUnicode_Find", "start"], [63, 3, 1, "c.PyUnicode_Find", "str"], [63, 3, 1, "c.PyUnicode_Find", "substr"]], "PyUnicode_FindChar": [[63, 3, 1, "c.PyUnicode_FindChar", "ch"], [63, 3, 1, "c.PyUnicode_FindChar", "direction"], [63, 3, 1, "c.PyUnicode_FindChar", "end"], [63, 3, 1, "c.PyUnicode_FindChar", "start"], [63, 3, 1, "c.PyUnicode_FindChar", "str"]], "PyUnicode_Format": [[63, 3, 1, "c.PyUnicode_Format", "args"], [63, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[63, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [63, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [63, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[63, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[63, 3, 1, "c.PyUnicode_FromFormatV", "format"], [63, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[63, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [63, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [63, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[63, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[63, 3, 1, "c.PyUnicode_FromString", "u"]], "PyUnicode_FromStringAndSize": [[63, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [63, 3, 1, "c.PyUnicode_FromStringAndSize", "u"]], "PyUnicode_FromWideChar": [[63, 3, 1, "c.PyUnicode_FromWideChar", "size"], [63, 3, 1, "c.PyUnicode_FromWideChar", "w"]], "PyUnicode_GET_LENGTH": [[63, 3, 1, "c.PyUnicode_GET_LENGTH", "o"]], "PyUnicode_GetLength": [[63, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_InternFromString": [[63, 3, 1, "c.PyUnicode_InternFromString", "v"]], "PyUnicode_InternInPlace": [[63, 3, 1, "c.PyUnicode_InternInPlace", "string"]], "PyUnicode_IsIdentifier": [[63, 3, 1, "c.PyUnicode_IsIdentifier", "o"]], "PyUnicode_Join": [[63, 3, 1, "c.PyUnicode_Join", "separator"], [63, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[63, 3, 1, "c.PyUnicode_KIND", "o"]], "PyUnicode_MAX_CHAR_VALUE": [[63, 3, 1, "c.PyUnicode_MAX_CHAR_VALUE", "o"]], "PyUnicode_New": [[63, 3, 1, "c.PyUnicode_New", "maxchar"], [63, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[63, 3, 1, "c.PyUnicode_READ", "data"], [63, 3, 1, "c.PyUnicode_READ", "index"], [63, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[63, 3, 1, "c.PyUnicode_READY", "o"]], "PyUnicode_READ_CHAR": [[63, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [63, 3, 1, "c.PyUnicode_READ_CHAR", "o"]], "PyUnicode_ReadChar": [[63, 3, 1, "c.PyUnicode_ReadChar", "index"], [63, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[63, 3, 1, "c.PyUnicode_Replace", "maxcount"], [63, 3, 1, "c.PyUnicode_Replace", "replstr"], [63, 3, 1, "c.PyUnicode_Replace", "str"], [63, 3, 1, "c.PyUnicode_Replace", "substr"]], "PyUnicode_RichCompare": [[63, 3, 1, "c.PyUnicode_RichCompare", "left"], [63, 3, 1, "c.PyUnicode_RichCompare", "op"], [63, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[63, 3, 1, "c.PyUnicode_Split", "maxsplit"], [63, 3, 1, "c.PyUnicode_Split", "s"], [63, 3, 1, "c.PyUnicode_Split", "sep"]], "PyUnicode_Splitlines": [[63, 3, 1, "c.PyUnicode_Splitlines", "keepend"], [63, 3, 1, "c.PyUnicode_Splitlines", "s"]], "PyUnicode_Substring": [[63, 3, 1, "c.PyUnicode_Substring", "end"], [63, 3, 1, "c.PyUnicode_Substring", "start"], [63, 3, 1, "c.PyUnicode_Substring", "str"]], "PyUnicode_Tailmatch": [[63, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [63, 3, 1, "c.PyUnicode_Tailmatch", "end"], [63, 3, 1, "c.PyUnicode_Tailmatch", "start"], [63, 3, 1, "c.PyUnicode_Tailmatch", "str"], [63, 3, 1, "c.PyUnicode_Tailmatch", "substr"]], "PyUnicode_Translate": [[63, 3, 1, "c.PyUnicode_Translate", "errors"], [63, 3, 1, "c.PyUnicode_Translate", "str"], [63, 3, 1, "c.PyUnicode_Translate", "table"]], "PyUnicode_WRITE": [[63, 3, 1, "c.PyUnicode_WRITE", "data"], [63, 3, 1, "c.PyUnicode_WRITE", "index"], [63, 3, 1, "c.PyUnicode_WRITE", "kind"], [63, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[63, 3, 1, "c.PyUnicode_WriteChar", "character"], [63, 3, 1, "c.PyUnicode_WriteChar", "index"], [63, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyUnstable_Code_GetExtra": [[13, 3, 1, "c.PyUnstable_Code_GetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "index"]], "PyUnstable_Code_New": [[13, 3, 1, "c.PyUnstable_Code_New", "argcount"], [13, 3, 1, "c.PyUnstable_Code_New", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_New", "code"], [13, 3, 1, "c.PyUnstable_Code_New", "consts"], [13, 3, 1, "c.PyUnstable_Code_New", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_New", "filename"], [13, 3, 1, "c.PyUnstable_Code_New", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_New", "flags"], [13, 3, 1, "c.PyUnstable_Code_New", "freevars"], [13, 3, 1, "c.PyUnstable_Code_New", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_New", "linetable"], [13, 3, 1, "c.PyUnstable_Code_New", "name"], [13, 3, 1, "c.PyUnstable_Code_New", "names"], [13, 3, 1, "c.PyUnstable_Code_New", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_New", "qualname"], [13, 3, 1, "c.PyUnstable_Code_New", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_New", "varnames"]], "PyUnstable_Code_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "linetable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "qualname"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "varnames"]], "PyUnstable_Code_SetExtra": [[13, 3, 1, "c.PyUnstable_Code_SetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "index"]], "PyUnstable_Eval_RequestCodeExtraIndex": [[13, 3, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "free"]], "PyUnstable_Exc_PrepReraiseStar": [[23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "excs"], [23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "orig"]], "PyUnstable_GC_VisitObjects": [[28, 3, 1, "c.PyUnstable_GC_VisitObjects", "arg"], [28, 3, 1, "c.PyUnstable_GC_VisitObjects", "callback"]], "PyUnstable_InterpreterFrame_GetCode": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetCode", "frame"]], "PyUnstable_InterpreterFrame_GetLasti": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "frame"]], "PyUnstable_InterpreterFrame_GetLine": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLine", "frame"]], "PyUnstable_Long_CompactValue": [[38, 3, 1, "c.PyUnstable_Long_CompactValue", "op"]], "PyUnstable_Long_IsCompact": [[38, 3, 1, "c.PyUnstable_Long_IsCompact", "op"]], "PyUnstable_Object_GC_NewWithExtraData": [[28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "extra_size"], [28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "type"]], "PyUnstable_Type_AssignVersionTag": [[60, 3, 1, "c.PyUnstable_Type_AssignVersionTag", "type"]], "PyUnstable_WritePerfMapEntry": [[50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_addr"], [50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_size"], [50, 3, 1, "c.PyUnstable_WritePerfMapEntry", "entry_name"]], "PyVarObject": [[62, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_Check": [[66, 3, 1, "c.PyWeakref_Check", "ob"]], "PyWeakref_CheckProxy": [[66, 3, 1, "c.PyWeakref_CheckProxy", "ob"]], "PyWeakref_CheckRef": [[66, 3, 1, "c.PyWeakref_CheckRef", "ob"]], "PyWeakref_GET_OBJECT": [[66, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[66, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[66, 3, 1, "c.PyWeakref_NewProxy", "callback"], [66, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[66, 3, 1, "c.PyWeakref_NewRef", "callback"], [66, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[33, 2, 1, "c.PyWideStringList.PyWideStringList_Append", "PyWideStringList_Append"], [33, 2, 1, "c.PyWideStringList.PyWideStringList_Insert", "PyWideStringList_Insert"], [33, 0, 1, "c.PyWideStringList.items", "items"], [33, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList.PyWideStringList_Append": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Append", "list"]], "PyWideStringList.PyWideStringList_Insert": [[33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "index"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "item"], [33, 3, 1, "c.PyWideStringList.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[32, 3, 1, "c.Py_AddPendingCall", "arg"], [32, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[58, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[65, 3, 1, "c.Py_BytesMain", "argc"], [65, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[51, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[65, 3, 1, "c.Py_CompileString", "filename"], [65, 3, 1, "c.Py_CompileString", "start"], [65, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[65, 3, 1, "c.Py_CompileStringExFlags", "filename"], [65, 3, 1, "c.Py_CompileStringExFlags", "flags"], [65, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [65, 3, 1, "c.Py_CompileStringExFlags", "start"], [65, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[65, 3, 1, "c.Py_CompileStringFlags", "filename"], [65, 3, 1, "c.Py_CompileStringFlags", "flags"], [65, 3, 1, "c.Py_CompileStringFlags", "start"], [65, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[65, 3, 1, "c.Py_CompileStringObject", "filename"], [65, 3, 1, "c.Py_CompileStringObject", "flags"], [65, 3, 1, "c.Py_CompileStringObject", "optimize"], [65, 3, 1, "c.Py_CompileStringObject", "start"], [65, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[51, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[51, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[58, 3, 1, "c.Py_DecodeLocale", "arg"], [58, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[58, 3, 1, "c.Py_EncodeLocale", "error_pos"], [58, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[32, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[58, 3, 1, "c.Py_Exit", "status"]], "Py_ExitStatusException": [[33, 3, 1, "c.Py_ExitStatusException", "status"]], "Py_FatalError": [[58, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[58, 3, 1, "c.Py_FdIsInteractive", "filename"], [58, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[61, 3, 1, "c.Py_GenericAlias", "args"], [61, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[33, 3, 1, "c.Py_GetArgcArgv", "argc"], [33, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[51, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[57, 3, 1, "c.Py_IS_TYPE", "o"], [57, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[51, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[32, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[33, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[57, 3, 1, "c.Py_Is", "x"], [57, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[57, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[57, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[57, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[65, 3, 1, "c.Py_Main", "argc"], [65, 3, 1, "c.Py_Main", "argv"]], "Py_NewInterpreterFromConfig": [[32, 3, 1, "c.Py_NewInterpreterFromConfig", "config"], [32, 3, 1, "c.Py_NewInterpreterFromConfig", "tstate_p"]], "Py_NewRef": [[51, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[33, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[33, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [33, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[51, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[51, 3, 1, "c.Py_SET_REFCNT", "o"], [51, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[57, 3, 1, "c.Py_SET_SIZE", "o"], [57, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[57, 3, 1, "c.Py_SET_TYPE", "o"], [57, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[57, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[32, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[32, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[32, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [32, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[57, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[63, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[63, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[63, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[63, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[63, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[63, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[63, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[63, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[63, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[63, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[63, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_IS_HIGH_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "ch"]], "Py_UNICODE_IS_LOW_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "ch"]], "Py_UNICODE_IS_SURROGATE": [[63, 3, 1, "c.Py_UNICODE_IS_SURROGATE", "ch"]], "Py_UNICODE_JOIN_SURROGATES": [[63, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "high"], [63, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "low"]], "Py_UNICODE_TODECIMAL": [[63, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[63, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[63, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[63, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[63, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[63, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[28, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[51, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[51, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[51, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[44, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[44, 3, 1, "c.Py_mod_create.create_module", "def"], [44, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[44, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[44, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "Py_mod_multiple_interpreters": [[44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"], [44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"], [44, 1, 1, "c.Py_mod_multiple_interpreters.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED", "Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [32, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_GetDictPtr": [[48, 3, 1, "c._PyObject_GetDictPtr", "obj"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[59, 3, 1, "c._PyTuple_Resize", "newsize"], [59, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "_inittab": [[30, 0, 1, "c._inittab.name", "name"]], "BaseException": [[210, 7, 1, "", "__notes__"], [210, 8, 1, "", "add_note"], [210, 7, 1, "", "args"], [210, 8, 1, "", "with_traceback"]], "BaseExceptionGroup": [[210, 8, 1, "", "derive"], [210, 7, 1, "", "exceptions"], [210, 7, 1, "", "message"], [210, 8, 1, "", "split"], [210, 8, 1, "", "subgroup"]], "BlockingIOError": [[210, 7, 1, "", "characters_written"]], "OSError": [[210, 7, 1, "", "errno"], [210, 7, 1, "", "filename"], [210, 7, 1, "", "filename2"], [210, 7, 1, "", "strerror"], [210, 7, 1, "", "winerror"]], "SyntaxError": [[210, 7, 1, "", "end_lineno"], [210, 7, 1, "", "end_offset"], [210, 7, 1, "", "filename"], [210, 7, 1, "", "lineno"], [210, 7, 1, "", "offset"], [210, 7, 1, "", "text"]], "SystemExit": [[210, 7, 1, "", "code"]], "UnicodeError": [[210, 7, 1, "", "encoding"], [210, 7, 1, "", "end"], [210, 7, 1, "", "object"], [210, 7, 1, "", "reason"], [210, 7, 1, "", "start"]], "_thread": [[113, 9, 1, "thread.LockType", "LockType"], [113, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [113, 11, 1, "thread.allocate_lock", "allocate_lock"], [113, 6, 1, "thread.error", "error"], [113, 11, 1, "thread.exit", "exit"], [113, 11, 1, "thread.get_ident", "get_ident"], [113, 11, 1, "thread.get_native_id", "get_native_id"], [113, 11, 1, "thread.interrupt_main", "interrupt_main"], [113, 11, 1, "thread.stack_size", "stack_size"], [113, 11, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[113, 8, 1, "thread.lock.acquire", "acquire"], [113, 8, 1, "thread.lock.locked", "locked"], [113, 8, 1, "thread.lock.release", "release"]], "abc": [[114, 12, 1, "", "ABC"], [114, 12, 1, "", "ABCMeta"], [114, 11, 1, "", "abstractclassmethod"], [114, 11, 1, "", "abstractmethod"], [114, 11, 1, "", "abstractproperty"], [114, 11, 1, "", "abstractstaticmethod"], [114, 11, 1, "", "get_cache_token"], [114, 11, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[114, 8, 1, "", "__subclasshook__"], [114, 8, 1, "", "register"]], "agen": [[426, 8, 1, "", "__anext__"], [426, 8, 1, "", "aclose"], [426, 8, 1, "", "asend"], [426, 8, 1, "", "athrow"]], "aifc.aifc": [[115, 8, 1, "", "aifc"], [115, 8, 1, "", "aiff"], [115, 8, 1, "", "close"], [115, 8, 1, "", "getcompname"], [115, 8, 1, "", "getcomptype"], [115, 8, 1, "", "getframerate"], [115, 8, 1, "", "getmark"], [115, 8, 1, "", "getmarkers"], [115, 8, 1, "", "getnchannels"], [115, 8, 1, "", "getnframes"], [115, 8, 1, "", "getparams"], [115, 8, 1, "", "getsampwidth"], [115, 8, 1, "", "readframes"], [115, 8, 1, "", "rewind"], [115, 8, 1, "", "setcomptype"], [115, 8, 1, "", "setframerate"], [115, 8, 1, "", "setmark"], [115, 8, 1, "", "setnchannels"], [115, 8, 1, "", "setnframes"], [115, 8, 1, "", "setparams"], [115, 8, 1, "", "setpos"], [115, 8, 1, "", "setsampwidth"], [115, 8, 1, "", "tell"], [115, 8, 1, "", "writeframes"], [115, 8, 1, "", "writeframesraw"]], "aifc": [[115, 11, 1, "", "open"]], "argparse": [[118, 12, 1, "", "Action"], [118, 12, 1, "", "ArgumentDefaultsHelpFormatter"], [118, 6, 1, "", "ArgumentError"], [118, 12, 1, "", "ArgumentParser"], [118, 6, 1, "", "ArgumentTypeError"], [118, 12, 1, "", "FileType"], [118, 12, 1, "", "MetavarTypeHelpFormatter"], [118, 12, 1, "", "Namespace"], [118, 12, 1, "", "RawDescriptionHelpFormatter"], [118, 12, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[118, 8, 1, "", "add_argument"], [118, 8, 1, "", "add_argument_group"], [118, 8, 1, "", "add_mutually_exclusive_group"], [118, 8, 1, "", "add_subparsers"], [118, 8, 1, "", "convert_arg_line_to_args"], [118, 8, 1, "", "error"], [118, 8, 1, "", "exit"], [118, 8, 1, "", "format_help"], [118, 8, 1, "", "format_usage"], [118, 8, 1, "", "get_default"], [118, 8, 1, "", "parse_args"], [118, 8, 1, "", "parse_intermixed_args"], [118, 8, 1, "", "parse_known_args"], [118, 8, 1, "", "parse_known_intermixed_args"], [118, 8, 1, "", "print_help"], [118, 8, 1, "", "print_usage"], [118, 8, 1, "", "set_defaults"]], "array": [[119, 12, 1, "", "array"], [119, 9, 1, "", "typecodes"]], "array.array": [[119, 8, 1, "", "append"], [119, 8, 1, "", "buffer_info"], [119, 8, 1, "", "byteswap"], [119, 8, 1, "", "count"], [119, 8, 1, "", "extend"], [119, 8, 1, "", "frombytes"], [119, 8, 1, "", "fromfile"], [119, 8, 1, "", "fromlist"], [119, 8, 1, "", "fromunicode"], [119, 8, 1, "", "index"], [119, 8, 1, "", "insert"], [119, 7, 1, "", "itemsize"], [119, 8, 1, "", "pop"], [119, 8, 1, "", "remove"], [119, 8, 1, "", "reverse"], [119, 8, 1, "", "tobytes"], [119, 8, 1, "", "tofile"], [119, 8, 1, "", "tolist"], [119, 8, 1, "", "tounicode"], [119, 7, 1, "", "typecode"]], "ast": [[120, 12, 1, "", "AST"], [120, 12, 1, "", "Add"], [120, 12, 1, "", "And"], [120, 12, 1, "", "AnnAssign"], [120, 12, 1, "", "Assert"], [120, 12, 1, "", "Assign"], [120, 12, 1, "", "AsyncFor"], [120, 12, 1, "", "AsyncFunctionDef"], [120, 12, 1, "", "AsyncWith"], [120, 12, 1, "", "Attribute"], [120, 12, 1, "", "AugAssign"], [120, 12, 1, "", "Await"], [120, 12, 1, "", "BinOp"], [120, 12, 1, "", "BitAnd"], [120, 12, 1, "", "BitOr"], [120, 12, 1, "", "BitXor"], [120, 12, 1, "", "BoolOp"], [120, 12, 1, "", "Break"], [120, 12, 1, "", "Call"], [120, 12, 1, "", "ClassDef"], [120, 12, 1, "", "Compare"], [120, 12, 1, "", "Constant"], [120, 12, 1, "", "Continue"], [120, 12, 1, "", "Del"], [120, 12, 1, "", "Delete"], [120, 12, 1, "", "Dict"], [120, 12, 1, "", "DictComp"], [120, 12, 1, "", "Div"], [120, 12, 1, "", "Eq"], [120, 12, 1, "", "ExceptHandler"], [120, 12, 1, "", "Expr"], [120, 12, 1, "", "Expression"], [120, 12, 1, "", "FloorDiv"], [120, 12, 1, "", "For"], [120, 12, 1, "", "FormattedValue"], [120, 12, 1, "", "FunctionDef"], [120, 12, 1, "", "FunctionType"], [120, 12, 1, "", "GeneratorExp"], [120, 12, 1, "", "Global"], [120, 12, 1, "", "Gt"], [120, 12, 1, "", "GtE"], [120, 12, 1, "", "If"], [120, 12, 1, "", "IfExp"], [120, 12, 1, "", "Import"], [120, 12, 1, "", "ImportFrom"], [120, 12, 1, "", "In"], [120, 12, 1, "", "Interactive"], [120, 12, 1, "", "Invert"], [120, 12, 1, "", "Is"], [120, 12, 1, "", "IsNot"], [120, 12, 1, "", "JoinedStr"], [120, 12, 1, "", "LShift"], [120, 12, 1, "", "Lambda"], [120, 12, 1, "", "List"], [120, 12, 1, "", "ListComp"], [120, 12, 1, "", "Load"], [120, 12, 1, "", "Lt"], [120, 12, 1, "", "LtE"], [120, 12, 1, "", "MatMult"], [120, 12, 1, "", "Match"], [120, 12, 1, "", "MatchAs"], [120, 12, 1, "", "MatchClass"], [120, 12, 1, "", "MatchMapping"], [120, 12, 1, "", "MatchOr"], [120, 12, 1, "", "MatchSequence"], [120, 12, 1, "", "MatchSingleton"], [120, 12, 1, "", "MatchStar"], [120, 12, 1, "", "MatchValue"], [120, 12, 1, "", "Mod"], [120, 12, 1, "", "Module"], [120, 12, 1, "", "Mult"], [120, 12, 1, "", "Name"], [120, 12, 1, "", "NamedExpr"], [120, 12, 1, "", "NodeTransformer"], [120, 12, 1, "", "NodeVisitor"], [120, 12, 1, "", "Nonlocal"], [120, 12, 1, "", "Not"], [120, 12, 1, "", "NotEq"], [120, 12, 1, "", "NotIn"], [120, 12, 1, "", "Or"], [120, 12, 1, "", "ParamSpec"], [120, 12, 1, "", "Pass"], [120, 12, 1, "", "Pow"], [120, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [120, 9, 1, "", "PyCF_ONLY_AST"], [120, 9, 1, "", "PyCF_TYPE_COMMENTS"], [120, 12, 1, "", "RShift"], [120, 12, 1, "", "Raise"], [120, 12, 1, "", "Return"], [120, 12, 1, "", "Set"], [120, 12, 1, "", "SetComp"], [120, 12, 1, "", "Slice"], [120, 12, 1, "", "Starred"], [120, 12, 1, "", "Store"], [120, 12, 1, "", "Sub"], [120, 12, 1, "", "Subscript"], [120, 12, 1, "", "Try"], [120, 12, 1, "", "TryStar"], [120, 12, 1, "", "Tuple"], [120, 12, 1, "", "TypeAlias"], [120, 12, 1, "", "TypeVar"], [120, 12, 1, "", "TypeVarTuple"], [120, 12, 1, "", "UAdd"], [120, 12, 1, "", "USub"], [120, 12, 1, "", "UnaryOp"], [120, 12, 1, "", "While"], [120, 12, 1, "", "With"], [120, 12, 1, "", "Yield"], [120, 12, 1, "", "YieldFrom"], [120, 12, 1, "", "alias"], [120, 12, 1, "", "arg"], [120, 12, 1, "", "arguments"], [120, 12, 1, "", "comprehension"], [120, 11, 1, "", "copy_location"], [120, 11, 1, "", "dump"], [120, 11, 1, "", "fix_missing_locations"], [120, 11, 1, "", "get_docstring"], [120, 11, 1, "", "get_source_segment"], [120, 11, 1, "", "increment_lineno"], [120, 11, 1, "", "iter_child_nodes"], [120, 11, 1, "", "iter_fields"], [120, 12, 1, "", "keyword"], [120, 11, 1, "", "literal_eval"], [120, 12, 1, "", "match_case"], [120, 11, 1, "", "parse"], [120, 11, 1, "", "unparse"], [120, 11, 1, "", "walk"], [120, 12, 1, "", "withitem"], [120, 14, 1, "cmdoption-ast-h", "--help"], [120, 14, 1, "cmdoption-ast-a", "--include-attributes"], [120, 14, 1, "cmdoption-ast-indent", "--indent"], [120, 14, 1, "cmdoption-ast-mode", "--mode"], [120, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [120, 14, 1, "cmdoption-ast-a", "-a"], [120, 14, 1, "cmdoption-ast-h", "-h"], [120, 14, 1, "cmdoption-ast-i", "-i"], [120, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[120, 7, 1, "", "_fields"], [120, 7, 1, "", "col_offset"], [120, 7, 1, "", "end_col_offset"], [120, 7, 1, "", "end_lineno"], [120, 7, 1, "", "lineno"]], "ast.Assign": [[120, 7, 1, "", "type_comment"]], "ast.For": [[120, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[120, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[120, 8, 1, "", "generic_visit"], [120, 8, 1, "", "visit"]], "ast.With": [[120, 7, 1, "", "type_comment"]], "ast.arg": [[120, 7, 1, "", "type_comment"]], "asyncio": [[130, 12, 1, "", "AbstractChildWatcher"], [124, 12, 1, "", "AbstractEventLoop"], [130, 12, 1, "", "AbstractEventLoopPolicy"], [136, 12, 1, "", "Barrier"], [131, 12, 1, "", "BaseProtocol"], [131, 12, 1, "", "BaseTransport"], [136, 12, 1, "", "BoundedSemaphore"], [136, 6, 1, "", "BrokenBarrierError"], [131, 12, 1, "", "BufferedProtocol"], [125, 6, 1, "", "CancelledError"], [136, 12, 1, "", "Condition"], [131, 12, 1, "", "DatagramProtocol"], [131, 12, 1, "", "DatagramTransport"], [130, 12, 1, "", "DefaultEventLoopPolicy"], [136, 12, 1, "", "Event"], [130, 12, 1, "", "FastChildWatcher"], [127, 12, 1, "", "Future"], [124, 12, 1, "", "Handle"], [125, 6, 1, "", "IncompleteReadError"], [125, 6, 1, "", "InvalidStateError"], [132, 12, 1, "", "LifoQueue"], [125, 6, 1, "", "LimitOverrunError"], [136, 12, 1, "", "Lock"], [130, 12, 1, "", "MultiLoopChildWatcher"], [130, 12, 1, "", "PidfdChildWatcher"], [132, 12, 1, "", "PriorityQueue"], [124, 12, 1, "", "ProactorEventLoop"], [131, 12, 1, "", "Protocol"], [132, 12, 1, "", "Queue"], [132, 6, 1, "", "QueueEmpty"], [132, 6, 1, "", "QueueFull"], [131, 12, 1, "", "ReadTransport"], [133, 12, 1, "", "Runner"], [130, 12, 1, "", "SafeChildWatcher"], [124, 12, 1, "", "SelectorEventLoop"], [136, 12, 1, "", "Semaphore"], [125, 6, 1, "", "SendfileNotAvailableError"], [124, 12, 1, "", "Server"], [134, 12, 1, "", "StreamReader"], [134, 12, 1, "", "StreamWriter"], [131, 12, 1, "", "SubprocessProtocol"], [131, 12, 1, "", "SubprocessTransport"], [137, 12, 1, "", "Task"], [137, 12, 1, "", "TaskGroup"], [130, 12, 1, "", "ThreadedChildWatcher"], [137, 12, 1, "", "Timeout"], [125, 6, 1, "", "TimeoutError"], [124, 12, 1, "", "TimerHandle"], [131, 12, 1, "", "Transport"], [130, 12, 1, "", "WindowsProactorEventLoopPolicy"], [130, 12, 1, "", "WindowsSelectorEventLoopPolicy"], [131, 12, 1, "", "WriteTransport"], [126, 11, 1, "", "_enter_task"], [126, 11, 1, "", "_leave_task"], [126, 11, 1, "", "_register_task"], [126, 11, 1, "", "_unregister_task"], [137, 11, 1, "", "all_tasks"], [137, 11, 1, "", "as_completed"], [137, 11, 1, "", "create_eager_task_factory"], [135, 11, 1, "", "create_subprocess_exec"], [135, 11, 1, "", "create_subprocess_shell"], [137, 11, 1, "", "create_task"], [137, 11, 1, "", "current_task"], [137, 11, 1, "", "eager_task_factory"], [127, 11, 1, "", "ensure_future"], [137, 11, 1, "", "gather"], [130, 11, 1, "", "get_child_watcher"], [124, 11, 1, "", "get_event_loop"], [130, 11, 1, "", "get_event_loop_policy"], [124, 11, 1, "", "get_running_loop"], [137, 11, 1, "", "iscoroutine"], [127, 11, 1, "", "isfuture"], [124, 11, 1, "", "new_event_loop"], [134, 11, 1, "", "open_connection"], [134, 11, 1, "", "open_unix_connection"], [133, 11, 1, "", "run"], [137, 11, 1, "", "run_coroutine_threadsafe"], [130, 11, 1, "", "set_child_watcher"], [124, 11, 1, "", "set_event_loop"], [130, 11, 1, "", "set_event_loop_policy"], [137, 11, 1, "", "shield"], [137, 11, 1, "", "sleep"], [134, 11, 1, "", "start_server"], [134, 11, 1, "", "start_unix_server"], [137, 11, 1, "", "timeout"], [137, 11, 1, "", "timeout_at"], [137, 11, 1, "", "to_thread"], [137, 11, 1, "", "wait"], [137, 11, 1, "", "wait_for"], [127, 11, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[130, 8, 1, "", "add_child_handler"], [130, 8, 1, "", "attach_loop"], [130, 8, 1, "", "close"], [130, 8, 1, "", "is_active"], [130, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[130, 8, 1, "", "get_child_watcher"], [130, 8, 1, "", "get_event_loop"], [130, 8, 1, "", "new_event_loop"], [130, 8, 1, "", "set_child_watcher"], [130, 8, 1, "", "set_event_loop"]], "asyncio.Barrier": [[136, 8, 1, "", "abort"], [136, 7, 1, "", "broken"], [136, 7, 1, "", "n_waiting"], [136, 7, 1, "", "parties"], [136, 8, 1, "", "reset"], [136, 8, 1, "", "wait"]], "asyncio.BaseProtocol": [[131, 8, 1, "", "connection_lost"], [131, 8, 1, "", "connection_made"], [131, 8, 1, "", "pause_writing"], [131, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[131, 8, 1, "", "close"], [131, 8, 1, "", "get_extra_info"], [131, 8, 1, "", "get_protocol"], [131, 8, 1, "", "is_closing"], [131, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[131, 8, 1, "", "buffer_updated"], [131, 8, 1, "", "eof_received"], [131, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "notify"], [136, 8, 1, "", "notify_all"], [136, 8, 1, "", "release"], [136, 8, 1, "", "wait"], [136, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[131, 8, 1, "", "datagram_received"], [131, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[131, 8, 1, "", "abort"], [131, 8, 1, "", "sendto"]], "asyncio.Event": [[136, 8, 1, "", "clear"], [136, 8, 1, "", "is_set"], [136, 8, 1, "", "set"], [136, 8, 1, "", "wait"]], "asyncio.Future": [[126, 8, 1, "", "__init__"], [127, 8, 1, "", "add_done_callback"], [127, 8, 1, "", "cancel"], [127, 8, 1, "", "cancelled"], [127, 8, 1, "", "done"], [127, 8, 1, "", "exception"], [127, 8, 1, "", "get_loop"], [127, 8, 1, "", "remove_done_callback"], [127, 8, 1, "", "result"], [127, 8, 1, "", "set_exception"], [127, 8, 1, "", "set_result"]], "asyncio.Handle": [[124, 8, 1, "", "cancel"], [124, 8, 1, "", "cancelled"], [124, 8, 1, "", "get_context"]], "asyncio.IncompleteReadError": [[125, 7, 1, "", "expected"], [125, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[125, 7, 1, "", "consumed"]], "asyncio.Lock": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "release"]], "asyncio.Protocol": [[131, 8, 1, "", "data_received"], [131, 8, 1, "", "eof_received"]], "asyncio.Queue": [[132, 8, 1, "", "empty"], [132, 8, 1, "", "full"], [132, 8, 1, "", "get"], [132, 8, 1, "", "get_nowait"], [132, 8, 1, "", "join"], [132, 7, 1, "", "maxsize"], [132, 8, 1, "", "put"], [132, 8, 1, "", "put_nowait"], [132, 8, 1, "", "qsize"], [132, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[131, 8, 1, "", "is_reading"], [131, 8, 1, "", "pause_reading"], [131, 8, 1, "", "resume_reading"]], "asyncio.Runner": [[133, 8, 1, "", "close"], [133, 8, 1, "", "get_loop"], [133, 8, 1, "", "run"]], "asyncio.Semaphore": [[136, 8, 1, "", "acquire"], [136, 8, 1, "", "locked"], [136, 8, 1, "", "release"]], "asyncio.Server": [[124, 8, 1, "", "close"], [124, 8, 1, "", "get_loop"], [124, 8, 1, "", "is_serving"], [124, 8, 1, "", "serve_forever"], [124, 7, 1, "", "sockets"], [124, 8, 1, "", "start_serving"], [124, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[134, 8, 1, "", "at_eof"], [134, 8, 1, "", "read"], [134, 8, 1, "", "readexactly"], [134, 8, 1, "", "readline"], [134, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[134, 8, 1, "", "can_write_eof"], [134, 8, 1, "", "close"], [134, 8, 1, "", "drain"], [134, 8, 1, "", "get_extra_info"], [134, 8, 1, "", "is_closing"], [134, 8, 1, "", "start_tls"], [134, 7, 1, "", "transport"], [134, 8, 1, "", "wait_closed"], [134, 8, 1, "", "write"], [134, 8, 1, "", "write_eof"], [134, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[131, 8, 1, "", "pipe_connection_lost"], [131, 8, 1, "", "pipe_data_received"], [131, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[131, 8, 1, "", "close"], [131, 8, 1, "", "get_pid"], [131, 8, 1, "", "get_pipe_transport"], [131, 8, 1, "", "get_returncode"], [131, 8, 1, "", "kill"], [131, 8, 1, "", "send_signal"], [131, 8, 1, "", "terminate"]], "asyncio.Task": [[126, 8, 1, "", "__init__"], [137, 8, 1, "", "add_done_callback"], [137, 8, 1, "", "cancel"], [137, 8, 1, "", "cancelled"], [137, 8, 1, "", "cancelling"], [137, 8, 1, "", "done"], [137, 8, 1, "", "exception"], [137, 8, 1, "", "get_context"], [137, 8, 1, "", "get_coro"], [137, 8, 1, "", "get_name"], [137, 8, 1, "", "get_stack"], [137, 8, 1, "", "print_stack"], [137, 8, 1, "", "remove_done_callback"], [137, 8, 1, "", "result"], [137, 8, 1, "", "set_name"], [137, 8, 1, "", "uncancel"]], "asyncio.TaskGroup": [[137, 8, 1, "", "create_task"]], "asyncio.Timeout": [[137, 8, 1, "", "expired"], [137, 8, 1, "", "reschedule"], [137, 8, 1, "", "when"]], "asyncio.TimerHandle": [[124, 8, 1, "", "when"]], "asyncio.WriteTransport": [[131, 8, 1, "", "abort"], [131, 8, 1, "", "can_write_eof"], [131, 8, 1, "", "get_write_buffer_limits"], [131, 8, 1, "", "get_write_buffer_size"], [131, 8, 1, "", "set_write_buffer_limits"], [131, 8, 1, "", "write"], [131, 8, 1, "", "write_eof"], [131, 8, 1, "", "writelines"]], "asyncio.loop": [[124, 8, 1, "", "add_reader"], [124, 8, 1, "", "add_signal_handler"], [124, 8, 1, "", "add_writer"], [124, 8, 1, "", "call_at"], [124, 8, 1, "", "call_exception_handler"], [124, 8, 1, "", "call_later"], [124, 8, 1, "", "call_soon"], [124, 8, 1, "", "call_soon_threadsafe"], [124, 8, 1, "", "close"], [124, 8, 1, "", "connect_accepted_socket"], [124, 8, 1, "", "connect_read_pipe"], [124, 8, 1, "", "connect_write_pipe"], [124, 8, 1, "", "create_connection"], [124, 8, 1, "", "create_datagram_endpoint"], [124, 8, 1, "", "create_future"], [124, 8, 1, "", "create_server"], [124, 8, 1, "", "create_task"], [124, 8, 1, "", "create_unix_connection"], [124, 8, 1, "", "create_unix_server"], [124, 8, 1, "", "default_exception_handler"], [124, 8, 1, "", "get_debug"], [124, 8, 1, "", "get_exception_handler"], [124, 8, 1, "", "get_task_factory"], [124, 8, 1, "", "getaddrinfo"], [124, 8, 1, "", "getnameinfo"], [124, 8, 1, "", "is_closed"], [124, 8, 1, "", "is_running"], [124, 8, 1, "", "remove_reader"], [124, 8, 1, "", "remove_signal_handler"], [124, 8, 1, "", "remove_writer"], [124, 8, 1, "", "run_forever"], [124, 8, 1, "", "run_in_executor"], [124, 8, 1, "", "run_until_complete"], [124, 8, 1, "", "sendfile"], [124, 8, 1, "", "set_debug"], [124, 8, 1, "", "set_default_executor"], [124, 8, 1, "", "set_exception_handler"], [124, 8, 1, "", "set_task_factory"], [124, 8, 1, "", "shutdown_asyncgens"], [124, 8, 1, "", "shutdown_default_executor"], [124, 8, 1, "", "sock_accept"], [124, 8, 1, "", "sock_connect"], [124, 8, 1, "", "sock_recv"], [124, 8, 1, "", "sock_recv_into"], [124, 8, 1, "", "sock_recvfrom"], [124, 8, 1, "", "sock_recvfrom_into"], [124, 8, 1, "", "sock_sendall"], [124, 8, 1, "", "sock_sendfile"], [124, 8, 1, "", "sock_sendto"], [124, 8, 1, "", "start_tls"], [124, 8, 1, "", "stop"], [124, 8, 1, "", "subprocess_exec"], [124, 8, 1, "", "subprocess_shell"], [124, 8, 1, "", "time"]], "asyncio.subprocess": [[135, 9, 1, "", "DEVNULL"], [135, 9, 1, "", "PIPE"], [135, 12, 1, "", "Process"], [135, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[135, 8, 1, "", "communicate"], [135, 8, 1, "", "kill"], [135, 7, 1, "", "pid"], [135, 7, 1, "", "returncode"], [135, 8, 1, "", "send_signal"], [135, 7, 1, "", "stderr"], [135, 7, 1, "", "stdin"], [135, 7, 1, "", "stdout"], [135, 8, 1, "", "terminate"], [135, 8, 1, "", "wait"]], "atexit": [[138, 11, 1, "", "register"], [138, 11, 1, "", "unregister"]], "audioop": [[139, 11, 1, "", "add"], [139, 11, 1, "", "adpcm2lin"], [139, 11, 1, "", "alaw2lin"], [139, 11, 1, "", "avg"], [139, 11, 1, "", "avgpp"], [139, 11, 1, "", "bias"], [139, 11, 1, "", "byteswap"], [139, 11, 1, "", "cross"], [139, 6, 1, "", "error"], [139, 11, 1, "", "findfactor"], [139, 11, 1, "", "findfit"], [139, 11, 1, "", "findmax"], [139, 11, 1, "", "getsample"], [139, 11, 1, "", "lin2adpcm"], [139, 11, 1, "", "lin2alaw"], [139, 11, 1, "", "lin2lin"], [139, 11, 1, "", "lin2ulaw"], [139, 11, 1, "", "max"], [139, 11, 1, "", "maxpp"], [139, 11, 1, "", "minmax"], [139, 11, 1, "", "mul"], [139, 11, 1, "", "ratecv"], [139, 11, 1, "", "reverse"], [139, 11, 1, "", "rms"], [139, 11, 1, "", "tomono"], [139, 11, 1, "", "tostereo"], [139, 11, 1, "", "ulaw2lin"]], "base64": [[141, 11, 1, "", "a85decode"], [141, 11, 1, "", "a85encode"], [141, 11, 1, "", "b16decode"], [141, 11, 1, "", "b16encode"], [141, 11, 1, "", "b32decode"], [141, 11, 1, "", "b32encode"], [141, 11, 1, "", "b32hexdecode"], [141, 11, 1, "", "b32hexencode"], [141, 11, 1, "", "b64decode"], [141, 11, 1, "", "b64encode"], [141, 11, 1, "", "b85decode"], [141, 11, 1, "", "b85encode"], [141, 11, 1, "", "decode"], [141, 11, 1, "", "decodebytes"], [141, 11, 1, "", "encode"], [141, 11, 1, "", "encodebytes"], [141, 11, 1, "", "standard_b64decode"], [141, 11, 1, "", "standard_b64encode"], [141, 11, 1, "", "urlsafe_b64decode"], [141, 11, 1, "", "urlsafe_b64encode"]], "bdb": [[142, 12, 1, "", "Bdb"], [142, 6, 1, "", "BdbQuit"], [142, 12, 1, "", "Breakpoint"], [142, 11, 1, "", "checkfuncname"], [142, 11, 1, "", "effective"], [142, 11, 1, "", "set_trace"]], "bdb.Bdb": [[142, 8, 1, "", "break_anywhere"], [142, 8, 1, "", "break_here"], [142, 8, 1, "", "canonic"], [142, 8, 1, "", "clear_all_breaks"], [142, 8, 1, "", "clear_all_file_breaks"], [142, 8, 1, "", "clear_bpbynumber"], [142, 8, 1, "", "clear_break"], [142, 8, 1, "", "dispatch_call"], [142, 8, 1, "", "dispatch_exception"], [142, 8, 1, "", "dispatch_line"], [142, 8, 1, "", "dispatch_return"], [142, 8, 1, "", "do_clear"], [142, 8, 1, "", "format_stack_entry"], [142, 8, 1, "", "get_all_breaks"], [142, 8, 1, "", "get_bpbynumber"], [142, 8, 1, "", "get_break"], [142, 8, 1, "", "get_breaks"], [142, 8, 1, "", "get_file_breaks"], [142, 8, 1, "", "get_stack"], [142, 8, 1, "", "is_skipped_line"], [142, 8, 1, "", "reset"], [142, 8, 1, "", "run"], [142, 8, 1, "", "runcall"], [142, 8, 1, "", "runctx"], [142, 8, 1, "", "runeval"], [142, 8, 1, "", "set_break"], [142, 8, 1, "", "set_continue"], [142, 8, 1, "", "set_next"], [142, 8, 1, "", "set_quit"], [142, 8, 1, "", "set_return"], [142, 8, 1, "", "set_step"], [142, 8, 1, "", "set_trace"], [142, 8, 1, "", "set_until"], [142, 8, 1, "", "stop_here"], [142, 8, 1, "", "trace_dispatch"], [142, 8, 1, "", "user_call"], [142, 8, 1, "", "user_exception"], [142, 8, 1, "", "user_line"], [142, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[142, 7, 1, "", "bpbynumber"], [142, 8, 1, "", "bpformat"], [142, 7, 1, "", "bplist"], [142, 8, 1, "", "bpprint"], [142, 7, 1, "", "cond"], [142, 8, 1, "", "deleteMe"], [142, 8, 1, "", "disable"], [142, 8, 1, "", "enable"], [142, 7, 1, "", "enabled"], [142, 7, 1, "", "file"], [142, 7, 1, "", "funcname"], [142, 7, 1, "", "hits"], [142, 7, 1, "", "ignore"], [142, 7, 1, "", "line"], [142, 7, 1, "", "temporary"]], "binascii": [[144, 6, 1, "", "Error"], [144, 6, 1, "", "Incomplete"], [144, 11, 1, "", "a2b_base64"], [144, 11, 1, "", "a2b_hex"], [144, 11, 1, "", "a2b_qp"], [144, 11, 1, "", "a2b_uu"], [144, 11, 1, "", "b2a_base64"], [144, 11, 1, "", "b2a_hex"], [144, 11, 1, "", "b2a_qp"], [144, 11, 1, "", "b2a_uu"], [144, 11, 1, "", "crc32"], [144, 11, 1, "", "crc_hqx"], [144, 11, 1, "", "hexlify"], [144, 11, 1, "", "unhexlify"]], "bisect": [[145, 11, 1, "", "bisect"], [145, 11, 1, "", "bisect_left"], [145, 11, 1, "", "bisect_right"], [145, 11, 1, "", "insort"], [145, 11, 1, "", "insort_left"], [145, 11, 1, "", "insort_right"]], "bytearray": [[341, 8, 1, "", "capitalize"], [341, 8, 1, "", "center"], [341, 8, 1, "", "count"], [341, 8, 1, "", "decode"], [341, 8, 1, "", "endswith"], [341, 8, 1, "", "expandtabs"], [341, 8, 1, "", "find"], [341, 8, 1, "", "fromhex"], [341, 8, 1, "", "hex"], [341, 8, 1, "", "index"], [341, 8, 1, "", "isalnum"], [341, 8, 1, "", "isalpha"], [341, 8, 1, "", "isascii"], [341, 8, 1, "", "isdigit"], [341, 8, 1, "", "islower"], [341, 8, 1, "", "isspace"], [341, 8, 1, "", "istitle"], [341, 8, 1, "", "isupper"], [341, 8, 1, "", "join"], [341, 8, 1, "", "ljust"], [341, 8, 1, "", "lower"], [341, 8, 1, "", "lstrip"], [341, 8, 1, "", "maketrans"], [341, 8, 1, "", "partition"], [341, 8, 1, "", "removeprefix"], [341, 8, 1, "", "removesuffix"], [341, 8, 1, "", "replace"], [341, 8, 1, "", "rfind"], [341, 8, 1, "", "rindex"], [341, 8, 1, "", "rjust"], [341, 8, 1, "", "rpartition"], [341, 8, 1, "", "rsplit"], [341, 8, 1, "", "rstrip"], [341, 8, 1, "", "split"], [341, 8, 1, "", "splitlines"], [341, 8, 1, "", "startswith"], [341, 8, 1, "", "strip"], [341, 8, 1, "", "swapcase"], [341, 8, 1, "", "title"], [341, 8, 1, "", "translate"], [341, 8, 1, "", "upper"], [341, 8, 1, "", "zfill"]], "bytes": [[341, 8, 1, "", "capitalize"], [341, 8, 1, "", "center"], [341, 8, 1, "", "count"], [341, 8, 1, "", "decode"], [341, 8, 1, "", "endswith"], [341, 8, 1, "", "expandtabs"], [341, 8, 1, "", "find"], [341, 8, 1, "", "fromhex"], [341, 8, 1, "", "hex"], [341, 8, 1, "", "index"], [341, 8, 1, "", "isalnum"], [341, 8, 1, "", "isalpha"], [341, 8, 1, "", "isascii"], [341, 8, 1, "", "isdigit"], [341, 8, 1, "", "islower"], [341, 8, 1, "", "isspace"], [341, 8, 1, "", "istitle"], [341, 8, 1, "", "isupper"], [341, 8, 1, "", "join"], [341, 8, 1, "", "ljust"], [341, 8, 1, "", "lower"], [341, 8, 1, "", "lstrip"], [341, 8, 1, "", "maketrans"], [341, 8, 1, "", "partition"], [341, 8, 1, "", "removeprefix"], [341, 8, 1, "", "removesuffix"], [341, 8, 1, "", "replace"], [341, 8, 1, "", "rfind"], [341, 8, 1, "", "rindex"], [341, 8, 1, "", "rjust"], [341, 8, 1, "", "rpartition"], [341, 8, 1, "", "rsplit"], [341, 8, 1, "", "rstrip"], [341, 8, 1, "", "split"], [341, 8, 1, "", "splitlines"], [341, 8, 1, "", "startswith"], [341, 8, 1, "", "strip"], [341, 8, 1, "", "swapcase"], [341, 8, 1, "", "title"], [341, 8, 1, "", "translate"], [341, 8, 1, "", "upper"], [341, 8, 1, "", "zfill"]], "bz2": [[147, 12, 1, "", "BZ2Compressor"], [147, 12, 1, "", "BZ2Decompressor"], [147, 12, 1, "", "BZ2File"], [147, 11, 1, "", "compress"], [147, 11, 1, "", "decompress"], [147, 11, 1, "", "open"]], "bz2.BZ2Compressor": [[147, 8, 1, "", "compress"], [147, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[147, 8, 1, "", "decompress"], [147, 7, 1, "", "eof"], [147, 7, 1, "", "needs_input"], [147, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[147, 8, 1, "", "peek"]], "calendar": [[148, 12, 1, "", "Calendar"], [148, 12, 1, "", "Day"], [148, 9, 1, "", "FRIDAY"], [148, 12, 1, "", "HTMLCalendar"], [148, 12, 1, "", "LocaleHTMLCalendar"], [148, 12, 1, "", "LocaleTextCalendar"], [148, 9, 1, "", "MONDAY"], [148, 12, 1, "", "Month"], [148, 9, 1, "", "SATURDAY"], [148, 9, 1, "", "SUNDAY"], [148, 9, 1, "", "THURSDAY"], [148, 9, 1, "", "TUESDAY"], [148, 12, 1, "", "TextCalendar"], [148, 9, 1, "", "WEDNESDAY"], [148, 11, 1, "", "calendar"], [148, 9, 1, "", "day_abbr"], [148, 9, 1, "", "day_name"], [148, 11, 1, "", "firstweekday"], [148, 11, 1, "", "isleap"], [148, 11, 1, "", "leapdays"], [148, 11, 1, "", "month"], [148, 9, 1, "", "month_abbr"], [148, 9, 1, "", "month_name"], [148, 11, 1, "", "monthcalendar"], [148, 11, 1, "", "monthrange"], [148, 11, 1, "", "prcal"], [148, 11, 1, "", "prmonth"], [148, 11, 1, "", "setfirstweekday"], [148, 11, 1, "", "timegm"], [148, 11, 1, "", "weekday"], [148, 11, 1, "", "weekheader"]], "calendar.Calendar": [[148, 8, 1, "", "itermonthdates"], [148, 8, 1, "", "itermonthdays"], [148, 8, 1, "", "itermonthdays2"], [148, 8, 1, "", "itermonthdays3"], [148, 8, 1, "", "itermonthdays4"], [148, 8, 1, "", "iterweekdays"], [148, 8, 1, "", "monthdatescalendar"], [148, 8, 1, "", "monthdays2calendar"], [148, 8, 1, "", "monthdayscalendar"], [148, 8, 1, "", "yeardatescalendar"], [148, 8, 1, "", "yeardays2calendar"], [148, 8, 1, "", "yeardayscalendar"]], "calendar.Day": [[148, 7, 1, "", "FRIDAY"], [148, 7, 1, "", "MONDAY"], [148, 7, 1, "", "SATURDAY"], [148, 7, 1, "", "SUNDAY"], [148, 7, 1, "", "THURSDAY"], [148, 7, 1, "", "TUESDAY"], [148, 7, 1, "", "WEDNESDAY"]], "calendar.HTMLCalendar": [[148, 7, 1, "", "cssclass_month"], [148, 7, 1, "", "cssclass_month_head"], [148, 7, 1, "", "cssclass_noday"], [148, 7, 1, "", "cssclass_year"], [148, 7, 1, "", "cssclass_year_head"], [148, 7, 1, "", "cssclasses"], [148, 7, 1, "", "cssclasses_weekday_head"], [148, 8, 1, "", "formatmonth"], [148, 8, 1, "", "formatyear"], [148, 8, 1, "", "formatyearpage"]], "calendar.Month": [[148, 7, 1, "", "APRIL"], [148, 7, 1, "", "AUGUST"], [148, 7, 1, "", "DECEMBER"], [148, 7, 1, "", "FEBRUARY"], [148, 7, 1, "", "JANUARY"], [148, 7, 1, "", "JULY"], [148, 7, 1, "", "JUNE"], [148, 7, 1, "", "MARCH"], [148, 7, 1, "", "MAY"], [148, 7, 1, "", "NOVEMBER"], [148, 7, 1, "", "OCTOBER"], [148, 7, 1, "", "SEPTEMBER"]], "calendar.TextCalendar": [[148, 8, 1, "", "formatmonth"], [148, 8, 1, "", "formatyear"], [148, 8, 1, "", "prmonth"], [148, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[149, 8, 1, "", "getfirst"], [149, 8, 1, "", "getlist"]], "cgi": [[149, 11, 1, "", "parse"], [149, 11, 1, "", "parse_header"], [149, 11, 1, "", "parse_multipart"], [149, 11, 1, "", "print_directory"], [149, 11, 1, "", "print_environ"], [149, 11, 1, "", "print_environ_usage"], [149, 11, 1, "", "print_form"], [149, 11, 1, "", "test"]], "cgitb": [[150, 11, 1, "", "enable"], [150, 11, 1, "", "handler"], [150, 11, 1, "", "html"], [150, 11, 1, "", "text"]], "chunk": [[151, 12, 1, "", "Chunk"]], "chunk.Chunk": [[151, 8, 1, "", "close"], [151, 8, 1, "", "getname"], [151, 8, 1, "", "getsize"], [151, 8, 1, "", "isatty"], [151, 8, 1, "", "read"], [151, 8, 1, "", "seek"], [151, 8, 1, "", "skip"], [151, 8, 1, "", "tell"]], "class": [[341, 7, 1, "", "__bases__"], [424, 8, 1, "", "__instancecheck__"], [341, 7, 1, "", "__mro__"], [424, 8, 1, "", "__subclasscheck__"], [341, 8, 1, "", "__subclasses__"], [341, 8, 1, "", "mro"]], "clinic": [[89, 12, 1, "", "CConverter"]], "clinic.CConverter": [[89, 7, 1, "", "c_default"], [89, 7, 1, "", "c_ignored_default"], [89, 7, 1, "", "converter"], [89, 7, 1, "", "default"], [89, 7, 1, "", "impl_by_reference"], [89, 7, 1, "", "parse_by_reference"], [89, 7, 1, "", "py_default"], [89, 7, 1, "", "type"]], "cmath": [[152, 11, 1, "", "acos"], [152, 11, 1, "", "acosh"], [152, 11, 1, "", "asin"], [152, 11, 1, "", "asinh"], [152, 11, 1, "", "atan"], [152, 11, 1, "", "atanh"], [152, 11, 1, "", "cos"], [152, 11, 1, "", "cosh"], [152, 9, 1, "", "e"], [152, 11, 1, "", "exp"], [152, 9, 1, "", "inf"], [152, 9, 1, "", "infj"], [152, 11, 1, "", "isclose"], [152, 11, 1, "", "isfinite"], [152, 11, 1, "", "isinf"], [152, 11, 1, "", "isnan"], [152, 11, 1, "", "log"], [152, 11, 1, "", "log10"], [152, 9, 1, "", "nan"], [152, 9, 1, "", "nanj"], [152, 11, 1, "", "phase"], [152, 9, 1, "", "pi"], [152, 11, 1, "", "polar"], [152, 11, 1, "", "rect"], [152, 11, 1, "", "sin"], [152, 11, 1, "", "sinh"], [152, 11, 1, "", "sqrt"], [152, 11, 1, "", "tan"], [152, 11, 1, "", "tanh"], [152, 9, 1, "", "tau"]], "cmd": [[153, 12, 1, "", "Cmd"]], "cmd.Cmd": [[153, 8, 1, "", "cmdloop"], [153, 7, 1, "", "cmdqueue"], [153, 8, 1, "", "columnize"], [153, 8, 1, "", "completedefault"], [153, 8, 1, "", "default"], [153, 7, 1, "", "doc_header"], [153, 8, 1, "", "emptyline"], [153, 7, 1, "", "identchars"], [153, 7, 1, "", "intro"], [153, 7, 1, "", "lastcmd"], [153, 7, 1, "", "misc_header"], [153, 8, 1, "", "onecmd"], [153, 8, 1, "", "postcmd"], [153, 8, 1, "", "postloop"], [153, 8, 1, "", "precmd"], [153, 8, 1, "", "preloop"], [153, 7, 1, "", "prompt"], [153, 7, 1, "", "ruler"], [153, 7, 1, "", "undoc_header"], [153, 7, 1, "", "use_rawinput"]], "code": [[154, 12, 1, "", "InteractiveConsole"], [154, 12, 1, "", "InteractiveInterpreter"], [154, 11, 1, "", "compile_command"], [154, 11, 1, "", "interact"]], "code.InteractiveConsole": [[154, 8, 1, "", "interact"], [154, 8, 1, "", "push"], [154, 8, 1, "", "raw_input"], [154, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[154, 8, 1, "", "runcode"], [154, 8, 1, "", "runsource"], [154, 8, 1, "", "showsyntaxerror"], [154, 8, 1, "", "showtraceback"], [154, 8, 1, "", "write"]], "codecs": [[155, 9, 1, "", "BOM"], [155, 9, 1, "", "BOM_BE"], [155, 9, 1, "", "BOM_LE"], [155, 9, 1, "", "BOM_UTF16"], [155, 9, 1, "", "BOM_UTF16_BE"], [155, 9, 1, "", "BOM_UTF16_LE"], [155, 9, 1, "", "BOM_UTF32"], [155, 9, 1, "", "BOM_UTF32_BE"], [155, 9, 1, "", "BOM_UTF32_LE"], [155, 9, 1, "", "BOM_UTF8"], [155, 12, 1, "", "CodecInfo"], [155, 11, 1, "", "EncodedFile"], [155, 12, 1, "", "IncrementalDecoder"], [155, 12, 1, "", "IncrementalEncoder"], [155, 12, 1, "", "StreamReader"], [155, 12, 1, "", "StreamReaderWriter"], [155, 12, 1, "", "StreamRecoder"], [155, 12, 1, "", "StreamWriter"], [155, 11, 1, "", "backslashreplace_errors"], [155, 11, 1, "", "decode"], [155, 11, 1, "", "encode"], [155, 11, 1, "", "getdecoder"], [155, 11, 1, "", "getencoder"], [155, 11, 1, "", "getincrementaldecoder"], [155, 11, 1, "", "getincrementalencoder"], [155, 11, 1, "", "getreader"], [155, 11, 1, "", "getwriter"], [155, 11, 1, "", "ignore_errors"], [155, 11, 1, "", "iterdecode"], [155, 11, 1, "", "iterencode"], [155, 11, 1, "", "lookup"], [155, 11, 1, "", "lookup_error"], [155, 11, 1, "", "namereplace_errors"], [155, 11, 1, "", "open"], [155, 11, 1, "", "register"], [155, 11, 1, "", "register_error"], [155, 11, 1, "", "replace_errors"], [155, 11, 1, "", "strict_errors"], [155, 11, 1, "", "unregister"], [155, 11, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[155, 8, 1, "", "decode"], [155, 8, 1, "", "encode"]], "codecs.CodecInfo": [[155, 7, 1, "", "decode"], [155, 7, 1, "", "encode"], [155, 7, 1, "", "incrementaldecoder"], [155, 7, 1, "", "incrementalencoder"], [155, 7, 1, "", "name"], [155, 7, 1, "", "streamreader"], [155, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[155, 8, 1, "", "decode"], [155, 8, 1, "", "getstate"], [155, 8, 1, "", "reset"], [155, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[155, 8, 1, "", "encode"], [155, 8, 1, "", "getstate"], [155, 8, 1, "", "reset"], [155, 8, 1, "", "setstate"]], "codecs.StreamReader": [[155, 8, 1, "", "read"], [155, 8, 1, "", "readline"], [155, 8, 1, "", "readlines"], [155, 8, 1, "", "reset"]], "codecs.StreamWriter": [[155, 8, 1, "", "reset"], [155, 8, 1, "", "write"], [155, 8, 1, "", "writelines"]], "codeobject": [[424, 8, 1, "", "co_positions"]], "codeop": [[156, 12, 1, "", "CommandCompiler"], [156, 12, 1, "", "Compile"], [156, 11, 1, "", "compile_command"]], "collections": [[157, 12, 1, "", "ChainMap"], [157, 12, 1, "", "Counter"], [157, 12, 1, "", "OrderedDict"], [157, 12, 1, "", "UserDict"], [157, 12, 1, "", "UserList"], [157, 12, 1, "", "UserString"], [158, 10, 0, "-", "abc"], [157, 12, 1, "", "defaultdict"], [157, 12, 1, "", "deque"], [157, 11, 1, "", "namedtuple"]], "collections.ChainMap": [[157, 7, 1, "", "maps"], [157, 8, 1, "", "new_child"], [157, 7, 1, "", "parents"]], "collections.Counter": [[157, 8, 1, "", "elements"], [157, 8, 1, "", "fromkeys"], [157, 8, 1, "", "most_common"], [157, 8, 1, "", "subtract"], [157, 8, 1, "", "total"], [157, 8, 1, "", "update"]], "collections.OrderedDict": [[157, 8, 1, "", "move_to_end"], [157, 8, 1, "", "popitem"]], "collections.UserDict": [[157, 7, 1, "", "data"]], "collections.UserList": [[157, 7, 1, "", "data"]], "collections.UserString": [[157, 7, 1, "", "data"]], "collections.abc": [[158, 12, 1, "", "AsyncGenerator"], [158, 12, 1, "", "AsyncIterable"], [158, 12, 1, "", "AsyncIterator"], [158, 12, 1, "", "Awaitable"], [158, 12, 1, "", "Buffer"], [158, 12, 1, "", "ByteString"], [158, 12, 1, "", "Callable"], [158, 12, 1, "", "Collection"], [158, 12, 1, "", "Container"], [158, 12, 1, "", "Coroutine"], [158, 12, 1, "", "Generator"], [158, 12, 1, "", "Hashable"], [158, 12, 1, "", "ItemsView"], [158, 12, 1, "", "Iterable"], [158, 12, 1, "", "Iterator"], [158, 12, 1, "", "KeysView"], [158, 12, 1, "", "Mapping"], [158, 12, 1, "", "MappingView"], [158, 12, 1, "", "MutableMapping"], [158, 12, 1, "", "MutableSequence"], [158, 12, 1, "", "MutableSet"], [158, 12, 1, "", "Reversible"], [158, 12, 1, "", "Sequence"], [158, 12, 1, "", "Set"], [158, 12, 1, "", "Sized"], [158, 12, 1, "", "ValuesView"]], "collections.defaultdict": [[157, 8, 1, "", "__missing__"], [157, 7, 1, "", "default_factory"]], "collections.deque": [[157, 8, 1, "", "append"], [157, 8, 1, "", "appendleft"], [157, 8, 1, "", "clear"], [157, 8, 1, "", "copy"], [157, 8, 1, "", "count"], [157, 8, 1, "", "extend"], [157, 8, 1, "", "extendleft"], [157, 8, 1, "", "index"], [157, 8, 1, "", "insert"], [157, 7, 1, "", "maxlen"], [157, 8, 1, "", "pop"], [157, 8, 1, "", "popleft"], [157, 8, 1, "", "remove"], [157, 8, 1, "", "reverse"], [157, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[157, 8, 1, "", "_asdict"], [157, 7, 1, "", "_field_defaults"], [157, 7, 1, "", "_fields"], [157, 8, 1, "", "_make"], [157, 8, 1, "", "_replace"]], "colorsys": [[159, 11, 1, "", "hls_to_rgb"], [159, 11, 1, "", "hsv_to_rgb"], [159, 11, 1, "", "rgb_to_hls"], [159, 11, 1, "", "rgb_to_hsv"], [159, 11, 1, "", "rgb_to_yiq"], [159, 11, 1, "", "yiq_to_rgb"]], "compileall": [[160, 11, 1, "", "compile_dir"], [160, 11, 1, "", "compile_file"], [160, 11, 1, "", "compile_path"], [160, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [160, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [160, 14, 1, "cmdoption-compileall-b", "-b"], [160, 14, 1, "cmdoption-compileall-d", "-d"], [160, 14, 1, "cmdoption-compileall-e", "-e"], [160, 14, 1, "cmdoption-compileall-f", "-f"], [160, 14, 1, "cmdoption-compileall-i", "-i"], [160, 14, 1, "cmdoption-compileall-j", "-j"], [160, 14, 1, "cmdoption-compileall-l", "-l"], [160, 14, 1, "cmdoption-compileall-o", "-o"], [160, 14, 1, "cmdoption-compileall-p", "-p"], [160, 14, 1, "cmdoption-compileall-q", "-q"], [160, 14, 1, "cmdoption-compileall-r", "-r"], [160, 14, 1, "cmdoption-compileall-s", "-s"], [160, 14, 1, "cmdoption-compileall-x", "-x"], [160, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [160, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[163, 10, 0, "-", "futures"]], "concurrent.futures": [[163, 6, 1, "", "BrokenExecutor"], [163, 6, 1, "", "CancelledError"], [163, 12, 1, "", "Executor"], [163, 12, 1, "", "Future"], [163, 6, 1, "", "InvalidStateError"], [163, 12, 1, "", "ProcessPoolExecutor"], [163, 12, 1, "", "ThreadPoolExecutor"], [163, 6, 1, "", "TimeoutError"], [163, 11, 1, "", "as_completed"], [163, 11, 1, "", "wait"]], "concurrent.futures.Executor": [[163, 8, 1, "", "map"], [163, 8, 1, "", "shutdown"], [163, 8, 1, "", "submit"]], "concurrent.futures.Future": [[163, 8, 1, "", "add_done_callback"], [163, 8, 1, "", "cancel"], [163, 8, 1, "", "cancelled"], [163, 8, 1, "", "done"], [163, 8, 1, "", "exception"], [163, 8, 1, "", "result"], [163, 8, 1, "", "running"], [163, 8, 1, "", "set_exception"], [163, 8, 1, "", "set_result"], [163, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[163, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[163, 6, 1, "", "BrokenThreadPool"]], "configparser": [[164, 12, 1, "", "BasicInterpolation"], [164, 12, 1, "", "ConfigParser"], [164, 6, 1, "", "DuplicateOptionError"], [164, 6, 1, "", "DuplicateSectionError"], [164, 6, 1, "", "Error"], [164, 12, 1, "", "ExtendedInterpolation"], [164, 6, 1, "", "InterpolationDepthError"], [164, 6, 1, "", "InterpolationError"], [164, 6, 1, "", "InterpolationMissingOptionError"], [164, 6, 1, "", "InterpolationSyntaxError"], [164, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [164, 6, 1, "", "MissingSectionHeaderError"], [164, 6, 1, "", "NoOptionError"], [164, 6, 1, "", "NoSectionError"], [164, 6, 1, "", "ParsingError"], [164, 12, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[164, 7, 1, "", "BOOLEAN_STATES"], [164, 7, 1, "", "SECTCRE"], [164, 8, 1, "", "add_section"], [164, 8, 1, "", "defaults"], [164, 8, 1, "", "get"], [164, 8, 1, "", "getboolean"], [164, 8, 1, "", "getfloat"], [164, 8, 1, "", "getint"], [164, 8, 1, "", "has_option"], [164, 8, 1, "", "has_section"], [164, 8, 1, "", "items"], [164, 8, 1, "", "options"], [164, 8, 1, "", "optionxform"], [164, 8, 1, "", "read"], [164, 8, 1, "", "read_dict"], [164, 8, 1, "", "read_file"], [164, 8, 1, "", "read_string"], [164, 8, 1, "", "remove_option"], [164, 8, 1, "", "remove_section"], [164, 8, 1, "", "sections"], [164, 8, 1, "", "set"], [164, 8, 1, "", "write"]], "configparser.RawConfigParser": [[164, 8, 1, "", "add_section"], [164, 8, 1, "", "set"]], "container": [[341, 8, 1, "", "__iter__"]], "contextlib": [[166, 12, 1, "", "AbstractAsyncContextManager"], [166, 12, 1, "", "AbstractContextManager"], [166, 12, 1, "", "AsyncContextDecorator"], [166, 12, 1, "", "AsyncExitStack"], [166, 12, 1, "", "ContextDecorator"], [166, 12, 1, "", "ExitStack"], [166, 11, 1, "", "aclosing"], [166, 11, 1, "", "asynccontextmanager"], [166, 11, 1, "", "chdir"], [166, 11, 1, "", "closing"], [166, 11, 1, "", "contextmanager"], [166, 11, 1, "", "nullcontext"], [166, 11, 1, "", "redirect_stderr"], [166, 11, 1, "", "redirect_stdout"], [166, 11, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[166, 8, 1, "", "aclose"], [166, 8, 1, "", "enter_async_context"], [166, 8, 1, "", "push_async_callback"], [166, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[166, 8, 1, "", "callback"], [166, 8, 1, "", "close"], [166, 8, 1, "", "enter_context"], [166, 8, 1, "", "pop_all"], [166, 8, 1, "", "push"]], "contextmanager": [[341, 8, 1, "", "__enter__"], [341, 8, 1, "", "__exit__"]], "contextvars": [[167, 12, 1, "", "Context"], [167, 12, 1, "", "ContextVar"], [167, 12, 1, "", "Token"], [167, 11, 1, "", "copy_context"]], "contextvars.Context": [[167, 8, 1, "", "copy"], [167, 8, 1, "", "get"], [167, 8, 1, "", "items"], [167, 8, 1, "", "keys"], [167, 8, 1, "", "run"], [167, 8, 1, "", "values"]], "contextvars.ContextVar": [[167, 8, 1, "", "get"], [167, 7, 1, "", "name"], [167, 8, 1, "", "reset"], [167, 8, 1, "", "set"]], "contextvars.Token": [[167, 7, 1, "", "MISSING"], [167, 7, 1, "", "old_value"], [167, 7, 1, "", "var"]], "copy": [[168, 6, 1, "", "Error"], [168, 11, 1, "", "copy"], [168, 11, 1, "", "deepcopy"]], "copyreg": [[169, 11, 1, "", "constructor"], [169, 11, 1, "", "pickle"]], "coroutine": [[424, 8, 1, "", "close"], [424, 8, 1, "", "send"], [424, 8, 1, "", "throw"]], "crypt": [[170, 9, 1, "", "METHOD_BLOWFISH"], [170, 9, 1, "", "METHOD_CRYPT"], [170, 9, 1, "", "METHOD_MD5"], [170, 9, 1, "", "METHOD_SHA256"], [170, 9, 1, "", "METHOD_SHA512"], [170, 11, 1, "", "crypt"], [170, 7, 1, "", "methods"], [170, 11, 1, "", "mksalt"]], "csv": [[172, 12, 1, "", "Dialect"], [172, 12, 1, "", "DictReader"], [172, 12, 1, "", "DictWriter"], [172, 6, 1, "", "Error"], [172, 9, 1, "", "QUOTE_ALL"], [172, 9, 1, "", "QUOTE_MINIMAL"], [172, 9, 1, "", "QUOTE_NONE"], [172, 9, 1, "", "QUOTE_NONNUMERIC"], [172, 9, 1, "", "QUOTE_NOTNULL"], [172, 9, 1, "", "QUOTE_STRINGS"], [172, 12, 1, "", "Sniffer"], [172, 12, 1, "", "excel"], [172, 12, 1, "", "excel_tab"], [172, 11, 1, "", "field_size_limit"], [172, 11, 1, "", "get_dialect"], [172, 11, 1, "", "list_dialects"], [172, 11, 1, "", "reader"], [172, 11, 1, "", "register_dialect"], [172, 12, 1, "", "unix_dialect"], [172, 11, 1, "", "unregister_dialect"], [172, 11, 1, "", "writer"]], "csv.Dialect": [[172, 7, 1, "", "delimiter"], [172, 7, 1, "", "doublequote"], [172, 7, 1, "", "escapechar"], [172, 7, 1, "", "lineterminator"], [172, 7, 1, "", "quotechar"], [172, 7, 1, "", "quoting"], [172, 7, 1, "", "skipinitialspace"], [172, 7, 1, "", "strict"]], "csv.DictReader": [[172, 7, 1, "", "fieldnames"]], "csv.DictWriter": [[172, 8, 1, "", "writeheader"]], "csv.Sniffer": [[172, 8, 1, "", "has_header"], [172, 8, 1, "", "sniff"]], "csv.csvreader": [[172, 8, 1, "", "__next__"], [172, 7, 1, "", "dialect"], [172, 7, 1, "", "line_num"]], "csv.csvwriter": [[172, 7, 1, "", "dialect"], [172, 8, 1, "", "writerow"], [172, 8, 1, "", "writerows"]], "ctypes": [[173, 6, 1, "", "ArgumentError"], [173, 12, 1, "", "Array"], [173, 12, 1, "", "BigEndianStructure"], [173, 12, 1, "", "BigEndianUnion"], [173, 12, 1, "", "CDLL"], [173, 11, 1, "", "CFUNCTYPE"], [173, 11, 1, "", "DllCanUnloadNow"], [173, 11, 1, "", "DllGetClassObject"], [173, 11, 1, "", "FormatError"], [173, 11, 1, "", "GetLastError"], [173, 12, 1, "", "HRESULT"], [173, 12, 1, "", "LibraryLoader"], [173, 12, 1, "", "LittleEndianStructure"], [173, 12, 1, "", "LittleEndianUnion"], [173, 12, 1, "", "OleDLL"], [173, 11, 1, "", "POINTER"], [173, 11, 1, "", "PYFUNCTYPE"], [173, 12, 1, "", "PyDLL"], [173, 12, 1, "", "Structure"], [173, 12, 1, "", "Union"], [173, 11, 1, "", "WINFUNCTYPE"], [173, 12, 1, "", "WinDLL"], [173, 11, 1, "", "WinError"], [173, 12, 1, "", "_CData"], [173, 12, 1, "", "_FuncPtr"], [173, 12, 1, "", "_Pointer"], [173, 12, 1, "", "_SimpleCData"], [173, 11, 1, "", "addressof"], [173, 11, 1, "", "alignment"], [173, 11, 1, "", "byref"], [173, 12, 1, "", "c_bool"], [173, 12, 1, "", "c_byte"], [173, 12, 1, "", "c_char"], [173, 12, 1, "", "c_char_p"], [173, 12, 1, "", "c_double"], [173, 12, 1, "", "c_float"], [173, 12, 1, "", "c_int"], [173, 12, 1, "", "c_int16"], [173, 12, 1, "", "c_int32"], [173, 12, 1, "", "c_int64"], [173, 12, 1, "", "c_int8"], [173, 12, 1, "", "c_long"], [173, 12, 1, "", "c_longdouble"], [173, 12, 1, "", "c_longlong"], [173, 12, 1, "", "c_short"], [173, 12, 1, "", "c_size_t"], [173, 12, 1, "", "c_ssize_t"], [173, 12, 1, "", "c_time_t"], [173, 12, 1, "", "c_ubyte"], [173, 12, 1, "", "c_uint"], [173, 12, 1, "", "c_uint16"], [173, 12, 1, "", "c_uint32"], [173, 12, 1, "", "c_uint64"], [173, 12, 1, "", "c_uint8"], [173, 12, 1, "", "c_ulong"], [173, 12, 1, "", "c_ulonglong"], [173, 12, 1, "", "c_ushort"], [173, 12, 1, "", "c_void_p"], [173, 12, 1, "", "c_wchar"], [173, 12, 1, "", "c_wchar_p"], [173, 11, 1, "", "cast"], [173, 11, 1, "", "create_string_buffer"], [173, 11, 1, "", "create_unicode_buffer"], [173, 11, 1, "", "get_errno"], [173, 11, 1, "", "get_last_error"], [173, 11, 1, "", "memmove"], [173, 11, 1, "", "memset"], [173, 11, 1, "", "pointer"], [173, 12, 1, "", "py_object"], [173, 11, 1, "", "resize"], [173, 11, 1, "", "set_errno"], [173, 11, 1, "", "set_last_error"], [173, 11, 1, "", "sizeof"], [173, 11, 1, "", "string_at"], [173, 11, 1, "", "wstring_at"]], "ctypes.Array": [[173, 7, 1, "", "_length_"], [173, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[173, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[173, 7, 1, "", "_handle"], [173, 7, 1, "", "_name"]], "ctypes.Structure": [[173, 7, 1, "", "_anonymous_"], [173, 7, 1, "", "_fields_"], [173, 7, 1, "", "_pack_"]], "ctypes._CData": [[173, 7, 1, "", "_b_base_"], [173, 7, 1, "", "_b_needsfree_"], [173, 7, 1, "", "_objects"], [173, 8, 1, "", "from_address"], [173, 8, 1, "", "from_buffer"], [173, 8, 1, "", "from_buffer_copy"], [173, 8, 1, "", "from_param"], [173, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[173, 7, 1, "", "argtypes"], [173, 7, 1, "", "errcheck"], [173, 7, 1, "", "restype"]], "ctypes._Pointer": [[173, 7, 1, "", "_type_"], [173, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[173, 7, 1, "", "value"]], "ctypes.util": [[173, 11, 1, "", "find_library"], [173, 11, 1, "", "find_msvcrt"]], "curses": [[174, 9, 1, "", "ACS_BBSS"], [174, 9, 1, "", "ACS_BLOCK"], [174, 9, 1, "", "ACS_BOARD"], [174, 9, 1, "", "ACS_BSBS"], [174, 9, 1, "", "ACS_BSSB"], [174, 9, 1, "", "ACS_BSSS"], [174, 9, 1, "", "ACS_BTEE"], [174, 9, 1, "", "ACS_BULLET"], [174, 9, 1, "", "ACS_CKBOARD"], [174, 9, 1, "", "ACS_DARROW"], [174, 9, 1, "", "ACS_DEGREE"], [174, 9, 1, "", "ACS_DIAMOND"], [174, 9, 1, "", "ACS_GEQUAL"], [174, 9, 1, "", "ACS_HLINE"], [174, 9, 1, "", "ACS_LANTERN"], [174, 9, 1, "", "ACS_LARROW"], [174, 9, 1, "", "ACS_LEQUAL"], [174, 9, 1, "", "ACS_LLCORNER"], [174, 9, 1, "", "ACS_LRCORNER"], [174, 9, 1, "", "ACS_LTEE"], [174, 9, 1, "", "ACS_NEQUAL"], [174, 9, 1, "", "ACS_PI"], [174, 9, 1, "", "ACS_PLMINUS"], [174, 9, 1, "", "ACS_PLUS"], [174, 9, 1, "", "ACS_RARROW"], [174, 9, 1, "", "ACS_RTEE"], [174, 9, 1, "", "ACS_S1"], [174, 9, 1, "", "ACS_S3"], [174, 9, 1, "", "ACS_S7"], [174, 9, 1, "", "ACS_S9"], [174, 9, 1, "", "ACS_SBBS"], [174, 9, 1, "", "ACS_SBSB"], [174, 9, 1, "", "ACS_SBSS"], [174, 9, 1, "", "ACS_SSBB"], [174, 9, 1, "", "ACS_SSBS"], [174, 9, 1, "", "ACS_SSSB"], [174, 9, 1, "", "ACS_SSSS"], [174, 9, 1, "", "ACS_STERLING"], [174, 9, 1, "", "ACS_TTEE"], [174, 9, 1, "", "ACS_UARROW"], [174, 9, 1, "", "ACS_ULCORNER"], [174, 9, 1, "", "ACS_URCORNER"], [174, 9, 1, "", "ACS_VLINE"], [174, 9, 1, "", "A_ALTCHARSET"], [174, 9, 1, "", "A_ATTRIBUTES"], [174, 9, 1, "", "A_BLINK"], [174, 9, 1, "", "A_BOLD"], [174, 9, 1, "", "A_CHARTEXT"], [174, 9, 1, "", "A_COLOR"], [174, 9, 1, "", "A_DIM"], [174, 9, 1, "", "A_HORIZONTAL"], [174, 9, 1, "", "A_INVIS"], [174, 9, 1, "", "A_ITALIC"], [174, 9, 1, "", "A_LEFT"], [174, 9, 1, "", "A_LOW"], [174, 9, 1, "", "A_NORMAL"], [174, 9, 1, "", "A_PROTECT"], [174, 9, 1, "", "A_REVERSE"], [174, 9, 1, "", "A_RIGHT"], [174, 9, 1, "", "A_STANDOUT"], [174, 9, 1, "", "A_TOP"], [174, 9, 1, "", "A_UNDERLINE"], [174, 9, 1, "", "A_VERTICAL"], [174, 9, 1, "", "BUTTON_ALT"], [174, 9, 1, "", "BUTTON_CTRL"], [174, 9, 1, "", "BUTTON_SHIFT"], [174, 9, 1, "", "BUTTONn_CLICKED"], [174, 9, 1, "", "BUTTONn_DOUBLE_CLICKED"], [174, 9, 1, "", "BUTTONn_PRESSED"], [174, 9, 1, "", "BUTTONn_RELEASED"], [174, 9, 1, "", "BUTTONn_TRIPLE_CLICKED"], [174, 9, 1, "", "COLORS"], [174, 9, 1, "", "COLOR_BLACK"], [174, 9, 1, "", "COLOR_BLUE"], [174, 9, 1, "", "COLOR_CYAN"], [174, 9, 1, "", "COLOR_GREEN"], [174, 9, 1, "", "COLOR_MAGENTA"], [174, 9, 1, "", "COLOR_PAIRS"], [174, 9, 1, "", "COLOR_RED"], [174, 9, 1, "", "COLOR_WHITE"], [174, 9, 1, "", "COLOR_YELLOW"], [174, 9, 1, "", "COLS"], [174, 9, 1, "", "ERR"], [174, 9, 1, "", "KEY_A1"], [174, 9, 1, "", "KEY_A3"], [174, 9, 1, "", "KEY_B2"], [174, 9, 1, "", "KEY_BACKSPACE"], [174, 9, 1, "", "KEY_BEG"], [174, 9, 1, "", "KEY_BREAK"], [174, 9, 1, "", "KEY_BTAB"], [174, 9, 1, "", "KEY_C1"], [174, 9, 1, "", "KEY_C3"], [174, 9, 1, "", "KEY_CANCEL"], [174, 9, 1, "", "KEY_CATAB"], [174, 9, 1, "", "KEY_CLEAR"], [174, 9, 1, "", "KEY_CLOSE"], [174, 9, 1, "", "KEY_COMMAND"], [174, 9, 1, "", "KEY_COPY"], [174, 9, 1, "", "KEY_CREATE"], [174, 9, 1, "", "KEY_CTAB"], [174, 9, 1, "", "KEY_DC"], [174, 9, 1, "", "KEY_DL"], [174, 9, 1, "", "KEY_DOWN"], [174, 9, 1, "", "KEY_EIC"], [174, 9, 1, "", "KEY_END"], [174, 9, 1, "", "KEY_ENTER"], [174, 9, 1, "", "KEY_EOL"], [174, 9, 1, "", "KEY_EOS"], [174, 9, 1, "", "KEY_EXIT"], [174, 9, 1, "", "KEY_F0"], [174, 9, 1, "", "KEY_FIND"], [174, 9, 1, "", "KEY_Fn"], [174, 9, 1, "", "KEY_HELP"], [174, 9, 1, "", "KEY_HOME"], [174, 9, 1, "", "KEY_IC"], [174, 9, 1, "", "KEY_IL"], [174, 9, 1, "", "KEY_LEFT"], [174, 9, 1, "", "KEY_LL"], [174, 9, 1, "", "KEY_MARK"], [174, 9, 1, "", "KEY_MAX"], [174, 9, 1, "", "KEY_MESSAGE"], [174, 9, 1, "", "KEY_MIN"], [174, 9, 1, "", "KEY_MOUSE"], [174, 9, 1, "", "KEY_MOVE"], [174, 9, 1, "", "KEY_NEXT"], [174, 9, 1, "", "KEY_NPAGE"], [174, 9, 1, "", "KEY_OPEN"], [174, 9, 1, "", "KEY_OPTIONS"], [174, 9, 1, "", "KEY_PPAGE"], [174, 9, 1, "", "KEY_PREVIOUS"], [174, 9, 1, "", "KEY_PRINT"], [174, 9, 1, "", "KEY_REDO"], [174, 9, 1, "", "KEY_REFERENCE"], [174, 9, 1, "", "KEY_REFRESH"], [174, 9, 1, "", "KEY_REPLACE"], [174, 9, 1, "", "KEY_RESET"], [174, 9, 1, "", "KEY_RESIZE"], [174, 9, 1, "", "KEY_RESTART"], [174, 9, 1, "", "KEY_RESUME"], [174, 9, 1, "", "KEY_RIGHT"], [174, 9, 1, "", "KEY_SAVE"], [174, 9, 1, "", "KEY_SBEG"], [174, 9, 1, "", "KEY_SCANCEL"], [174, 9, 1, "", "KEY_SCOMMAND"], [174, 9, 1, "", "KEY_SCOPY"], [174, 9, 1, "", "KEY_SCREATE"], [174, 9, 1, "", "KEY_SDC"], [174, 9, 1, "", "KEY_SDL"], [174, 9, 1, "", "KEY_SELECT"], [174, 9, 1, "", "KEY_SEND"], [174, 9, 1, "", "KEY_SEOL"], [174, 9, 1, "", "KEY_SEXIT"], [174, 9, 1, "", "KEY_SF"], [174, 9, 1, "", "KEY_SFIND"], [174, 9, 1, "", "KEY_SHELP"], [174, 9, 1, "", "KEY_SHOME"], [174, 9, 1, "", "KEY_SIC"], [174, 9, 1, "", "KEY_SLEFT"], [174, 9, 1, "", "KEY_SMESSAGE"], [174, 9, 1, "", "KEY_SMOVE"], [174, 9, 1, "", "KEY_SNEXT"], [174, 9, 1, "", "KEY_SOPTIONS"], [174, 9, 1, "", "KEY_SPREVIOUS"], [174, 9, 1, "", "KEY_SPRINT"], [174, 9, 1, "", "KEY_SR"], [174, 9, 1, "", "KEY_SREDO"], [174, 9, 1, "", "KEY_SREPLACE"], [174, 9, 1, "", "KEY_SRESET"], [174, 9, 1, "", "KEY_SRIGHT"], [174, 9, 1, "", "KEY_SRSUME"], [174, 9, 1, "", "KEY_SSAVE"], [174, 9, 1, "", "KEY_SSUSPEND"], [174, 9, 1, "", "KEY_STAB"], [174, 9, 1, "", "KEY_SUNDO"], [174, 9, 1, "", "KEY_SUSPEND"], [174, 9, 1, "", "KEY_UNDO"], [174, 9, 1, "", "KEY_UP"], [174, 9, 1, "", "LINES"], [174, 9, 1, "", "OK"], [174, 9, 1, "", "__version__"], [175, 10, 0, "-", "ascii"], [174, 11, 1, "", "baudrate"], [174, 11, 1, "", "beep"], [174, 11, 1, "", "can_change_color"], [174, 11, 1, "", "cbreak"], [174, 11, 1, "", "color_content"], [174, 11, 1, "", "color_pair"], [174, 11, 1, "", "curs_set"], [174, 11, 1, "", "def_prog_mode"], [174, 11, 1, "", "def_shell_mode"], [174, 11, 1, "", "delay_output"], [174, 11, 1, "", "doupdate"], [174, 11, 1, "", "echo"], [174, 11, 1, "", "endwin"], [174, 11, 1, "", "erasechar"], [174, 6, 1, "", "error"], [174, 11, 1, "", "filter"], [174, 11, 1, "", "flash"], [174, 11, 1, "", "flushinp"], [174, 11, 1, "", "get_escdelay"], [174, 11, 1, "", "get_tabsize"], [174, 11, 1, "", "getmouse"], [174, 11, 1, "", "getsyx"], [174, 11, 1, "", "getwin"], [174, 11, 1, "", "halfdelay"], [174, 11, 1, "", "has_colors"], [174, 11, 1, "", "has_extended_color_support"], [174, 11, 1, "", "has_ic"], [174, 11, 1, "", "has_il"], [174, 11, 1, "", "has_key"], [174, 11, 1, "", "init_color"], [174, 11, 1, "", "init_pair"], [174, 11, 1, "", "initscr"], [174, 11, 1, "", "is_term_resized"], [174, 11, 1, "", "isendwin"], [174, 11, 1, "", "keyname"], [174, 11, 1, "", "killchar"], [174, 11, 1, "", "longname"], [174, 11, 1, "", "meta"], [174, 11, 1, "", "mouseinterval"], [174, 11, 1, "", "mousemask"], [174, 11, 1, "", "napms"], [174, 9, 1, "", "ncurses_version"], [174, 11, 1, "", "newpad"], [174, 11, 1, "", "newwin"], [174, 11, 1, "", "nl"], [174, 11, 1, "", "nocbreak"], [174, 11, 1, "", "noecho"], [174, 11, 1, "", "nonl"], [174, 11, 1, "", "noqiflush"], [174, 11, 1, "", "noraw"], [174, 11, 1, "", "pair_content"], [174, 11, 1, "", "pair_number"], [176, 10, 0, "-", "panel"], [174, 11, 1, "", "putp"], [174, 11, 1, "", "qiflush"], [174, 11, 1, "", "raw"], [174, 11, 1, "", "reset_prog_mode"], [174, 11, 1, "", "reset_shell_mode"], [174, 11, 1, "", "resetty"], [174, 11, 1, "", "resize_term"], [174, 11, 1, "", "resizeterm"], [174, 11, 1, "", "savetty"], [174, 11, 1, "", "set_escdelay"], [174, 11, 1, "", "set_tabsize"], [174, 11, 1, "", "setsyx"], [174, 11, 1, "", "setupterm"], [174, 11, 1, "", "start_color"], [174, 11, 1, "", "termattrs"], [174, 11, 1, "", "termname"], [174, 10, 0, "-", "textpad"], [174, 11, 1, "", "tigetflag"], [174, 11, 1, "", "tigetnum"], [174, 11, 1, "", "tigetstr"], [174, 11, 1, "", "tparm"], [174, 11, 1, "", "typeahead"], [174, 11, 1, "", "unctrl"], [174, 11, 1, "", "unget_wch"], [174, 11, 1, "", "ungetch"], [174, 11, 1, "", "ungetmouse"], [174, 11, 1, "", "update_lines_cols"], [174, 11, 1, "", "use_default_colors"], [174, 11, 1, "", "use_env"], [174, 9, 1, "", "version"], [174, 11, 1, "", "wrapper"]], "curses.ascii": [[175, 9, 1, "", "ACK"], [175, 9, 1, "", "BEL"], [175, 9, 1, "", "BS"], [175, 9, 1, "", "CAN"], [175, 9, 1, "", "CR"], [175, 9, 1, "", "DC1"], [175, 9, 1, "", "DC2"], [175, 9, 1, "", "DC3"], [175, 9, 1, "", "DC4"], [175, 9, 1, "", "DEL"], [175, 9, 1, "", "DLE"], [175, 9, 1, "", "EM"], [175, 9, 1, "", "ENQ"], [175, 9, 1, "", "EOT"], [175, 9, 1, "", "ESC"], [175, 9, 1, "", "ETB"], [175, 9, 1, "", "ETX"], [175, 9, 1, "", "FF"], [175, 9, 1, "", "FS"], [175, 9, 1, "", "GS"], [175, 9, 1, "", "HT"], [175, 9, 1, "", "LF"], [175, 9, 1, "", "NAK"], [175, 9, 1, "", "NL"], [175, 9, 1, "", "NUL"], [175, 9, 1, "", "RS"], [175, 9, 1, "", "SI"], [175, 9, 1, "", "SO"], [175, 9, 1, "", "SOH"], [175, 9, 1, "", "SP"], [175, 9, 1, "", "STX"], [175, 9, 1, "", "SUB"], [175, 9, 1, "", "SYN"], [175, 9, 1, "", "TAB"], [175, 9, 1, "", "US"], [175, 9, 1, "", "VT"], [175, 11, 1, "", "alt"], [175, 11, 1, "", "ascii"], [175, 9, 1, "", "controlnames"], [175, 11, 1, "", "ctrl"], [175, 11, 1, "", "isalnum"], [175, 11, 1, "", "isalpha"], [175, 11, 1, "", "isascii"], [175, 11, 1, "", "isblank"], [175, 11, 1, "", "iscntrl"], [175, 11, 1, "", "isctrl"], [175, 11, 1, "", "isdigit"], [175, 11, 1, "", "isgraph"], [175, 11, 1, "", "islower"], [175, 11, 1, "", "ismeta"], [175, 11, 1, "", "isprint"], [175, 11, 1, "", "ispunct"], [175, 11, 1, "", "isspace"], [175, 11, 1, "", "isupper"], [175, 11, 1, "", "isxdigit"], [175, 11, 1, "", "unctrl"]], "curses.panel.Panel": [[176, 8, 1, "", "above"], [176, 8, 1, "", "below"], [176, 8, 1, "", "bottom"], [176, 8, 1, "", "hidden"], [176, 8, 1, "", "hide"], [176, 8, 1, "", "move"], [176, 8, 1, "", "replace"], [176, 8, 1, "", "set_userptr"], [176, 8, 1, "", "show"], [176, 8, 1, "", "top"], [176, 8, 1, "", "userptr"], [176, 8, 1, "", "window"]], "curses.panel": [[176, 11, 1, "", "bottom_panel"], [176, 11, 1, "", "new_panel"], [176, 11, 1, "", "top_panel"], [176, 11, 1, "", "update_panels"]], "curses.textpad": [[174, 12, 1, "", "Textbox"], [174, 11, 1, "", "rectangle"]], "curses.textpad.Textbox": [[174, 8, 1, "", "do_command"], [174, 8, 1, "", "edit"], [174, 8, 1, "", "gather"], [174, 7, 1, "", "stripspaces"]], "curses.window": [[174, 8, 1, "", "addch"], [174, 8, 1, "", "addnstr"], [174, 8, 1, "", "addstr"], [174, 8, 1, "", "attroff"], [174, 8, 1, "", "attron"], [174, 8, 1, "", "attrset"], [174, 8, 1, "", "bkgd"], [174, 8, 1, "", "bkgdset"], [174, 8, 1, "", "border"], [174, 8, 1, "", "box"], [174, 8, 1, "", "chgat"], [174, 8, 1, "", "clear"], [174, 8, 1, "", "clearok"], [174, 8, 1, "", "clrtobot"], [174, 8, 1, "", "clrtoeol"], [174, 8, 1, "", "cursyncup"], [174, 8, 1, "", "delch"], [174, 8, 1, "", "deleteln"], [174, 8, 1, "", "derwin"], [174, 8, 1, "", "echochar"], [174, 8, 1, "", "enclose"], [174, 7, 1, "", "encoding"], [174, 8, 1, "", "erase"], [174, 8, 1, "", "get_wch"], [174, 8, 1, "", "getbegyx"], [174, 8, 1, "", "getbkgd"], [174, 8, 1, "", "getch"], [174, 8, 1, "", "getkey"], [174, 8, 1, "", "getmaxyx"], [174, 8, 1, "", "getparyx"], [174, 8, 1, "", "getstr"], [174, 8, 1, "", "getyx"], [174, 8, 1, "", "hline"], [174, 8, 1, "", "idcok"], [174, 8, 1, "", "idlok"], [174, 8, 1, "", "immedok"], [174, 8, 1, "", "inch"], [174, 8, 1, "", "insch"], [174, 8, 1, "", "insdelln"], [174, 8, 1, "", "insertln"], [174, 8, 1, "", "insnstr"], [174, 8, 1, "", "insstr"], [174, 8, 1, "", "instr"], [174, 8, 1, "", "is_linetouched"], [174, 8, 1, "", "is_wintouched"], [174, 8, 1, "", "keypad"], [174, 8, 1, "", "leaveok"], [174, 8, 1, "", "move"], [174, 8, 1, "", "mvderwin"], [174, 8, 1, "", "mvwin"], [174, 8, 1, "", "nodelay"], [174, 8, 1, "", "notimeout"], [174, 8, 1, "", "noutrefresh"], [174, 8, 1, "", "overlay"], [174, 8, 1, "", "overwrite"], [174, 8, 1, "", "putwin"], [174, 8, 1, "", "redrawln"], [174, 8, 1, "", "redrawwin"], [174, 8, 1, "", "refresh"], [174, 8, 1, "", "resize"], [174, 8, 1, "", "scroll"], [174, 8, 1, "", "scrollok"], [174, 8, 1, "", "setscrreg"], [174, 8, 1, "", "standend"], [174, 8, 1, "", "standout"], [174, 8, 1, "", "subpad"], [174, 8, 1, "", "subwin"], [174, 8, 1, "", "syncdown"], [174, 8, 1, "", "syncok"], [174, 8, 1, "", "syncup"], [174, 8, 1, "", "timeout"], [174, 8, 1, "", "touchline"], [174, 8, 1, "", "touchwin"], [174, 8, 1, "", "untouchwin"], [174, 8, 1, "", "vline"]], "dataclasses": [[178, 12, 1, "", "Field"], [178, 6, 1, "", "FrozenInstanceError"], [178, 9, 1, "", "KW_ONLY"], [178, 9, 1, "", "MISSING"], [178, 11, 1, "", "__post_init__"], [178, 11, 1, "", "asdict"], [178, 11, 1, "", "astuple"], [178, 11, 1, "", "dataclass"], [178, 11, 1, "", "field"], [178, 11, 1, "", "fields"], [178, 11, 1, "", "is_dataclass"], [178, 11, 1, "", "make_dataclass"], [178, 11, 1, "", "replace"]], "datetime": [[180, 9, 1, "", "MAXYEAR"], [180, 9, 1, "", "MINYEAR"], [180, 7, 1, "", "UTC"], [180, 12, 1, "", "date"], [180, 12, 1, "", "datetime"], [180, 12, 1, "", "time"], [180, 12, 1, "", "timedelta"], [180, 12, 1, "", "timezone"], [180, 12, 1, "", "tzinfo"]], "datetime.date": [[180, 8, 1, "", "__format__"], [180, 8, 1, "", "__str__"], [180, 8, 1, "", "ctime"], [180, 7, 1, "", "day"], [180, 8, 1, "", "fromisocalendar"], [180, 8, 1, "", "fromisoformat"], [180, 8, 1, "", "fromordinal"], [180, 8, 1, "", "fromtimestamp"], [180, 8, 1, "", "isocalendar"], [180, 8, 1, "", "isoformat"], [180, 8, 1, "", "isoweekday"], [180, 7, 1, "", "max"], [180, 7, 1, "", "min"], [180, 7, 1, "", "month"], [180, 8, 1, "", "replace"], [180, 7, 1, "", "resolution"], [180, 8, 1, "", "strftime"], [180, 8, 1, "", "timetuple"], [180, 8, 1, "", "today"], [180, 8, 1, "", "toordinal"], [180, 8, 1, "", "weekday"], [180, 7, 1, "", "year"]], "datetime.datetime": [[180, 8, 1, "", "__format__"], [180, 8, 1, "", "__str__"], [180, 8, 1, "", "astimezone"], [180, 8, 1, "", "combine"], [180, 8, 1, "", "ctime"], [180, 8, 1, "", "date"], [180, 7, 1, "", "day"], [180, 8, 1, "", "dst"], [180, 7, 1, "", "fold"], [180, 8, 1, "", "fromisocalendar"], [180, 8, 1, "", "fromisoformat"], [180, 8, 1, "", "fromordinal"], [180, 8, 1, "", "fromtimestamp"], [180, 7, 1, "", "hour"], [180, 8, 1, "", "isocalendar"], [180, 8, 1, "", "isoformat"], [180, 8, 1, "", "isoweekday"], [180, 7, 1, "", "max"], [180, 7, 1, "", "microsecond"], [180, 7, 1, "", "min"], [180, 7, 1, "", "minute"], [180, 7, 1, "", "month"], [180, 8, 1, "", "now"], [180, 8, 1, "", "replace"], [180, 7, 1, "", "resolution"], [180, 7, 1, "", "second"], [180, 8, 1, "", "strftime"], [180, 8, 1, "", "strptime"], [180, 8, 1, "", "time"], [180, 8, 1, "", "timestamp"], [180, 8, 1, "", "timetuple"], [180, 8, 1, "", "timetz"], [180, 8, 1, "", "today"], [180, 8, 1, "", "toordinal"], [180, 7, 1, "", "tzinfo"], [180, 8, 1, "", "tzname"], [180, 8, 1, "", "utcfromtimestamp"], [180, 8, 1, "", "utcnow"], [180, 8, 1, "", "utcoffset"], [180, 8, 1, "", "utctimetuple"], [180, 8, 1, "", "weekday"], [180, 7, 1, "", "year"]], "datetime.time": [[180, 8, 1, "", "__format__"], [180, 8, 1, "", "__str__"], [180, 8, 1, "", "dst"], [180, 7, 1, "", "fold"], [180, 8, 1, "", "fromisoformat"], [180, 7, 1, "", "hour"], [180, 8, 1, "", "isoformat"], [180, 7, 1, "", "max"], [180, 7, 1, "", "microsecond"], [180, 7, 1, "", "min"], [180, 7, 1, "", "minute"], [180, 8, 1, "", "replace"], [180, 7, 1, "", "resolution"], [180, 7, 1, "", "second"], [180, 8, 1, "", "strftime"], [180, 7, 1, "", "tzinfo"], [180, 8, 1, "", "tzname"], [180, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[180, 7, 1, "", "max"], [180, 7, 1, "", "min"], [180, 7, 1, "", "resolution"], [180, 8, 1, "", "total_seconds"]], "datetime.timezone": [[180, 8, 1, "", "dst"], [180, 8, 1, "", "fromutc"], [180, 8, 1, "", "tzname"], [180, 7, 1, "", "utc"], [180, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[180, 8, 1, "", "dst"], [180, 8, 1, "", "fromutc"], [180, 8, 1, "", "tzname"], [180, 8, 1, "", "utcoffset"]], "dbm": [[181, 10, 0, "-", "dumb"], [181, 6, 1, "", "error"], [181, 10, 0, "-", "gnu"], [181, 10, 0, "-", "ndbm"], [181, 11, 1, "", "open"], [181, 11, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[181, 8, 1, "", "close"], [181, 8, 1, "", "sync"]], "dbm.dumb": [[181, 6, 1, "", "error"], [181, 11, 1, "", "open"]], "dbm.gnu": [[181, 6, 1, "", "error"], [181, 11, 1, "", "open"]], "dbm.gnu.gdbm": [[181, 8, 1, "", "close"], [181, 8, 1, "", "firstkey"], [181, 8, 1, "", "nextkey"], [181, 8, 1, "", "reorganize"], [181, 8, 1, "", "sync"]], "dbm.ndbm": [[181, 6, 1, "", "error"], [181, 9, 1, "", "library"], [181, 11, 1, "", "open"]], "dbm.ndbm.ndbm": [[181, 8, 1, "", "close"]], "decimal": [[183, 12, 1, "", "BasicContext"], [183, 12, 1, "", "Clamped"], [183, 12, 1, "", "Context"], [183, 12, 1, "", "Decimal"], [183, 12, 1, "", "DecimalException"], [183, 12, 1, "", "DefaultContext"], [183, 12, 1, "", "DivisionByZero"], [183, 12, 1, "", "ExtendedContext"], [183, 12, 1, "", "FloatOperation"], [183, 9, 1, "", "HAVE_CONTEXTVAR"], [183, 9, 1, "", "HAVE_THREADS"], [183, 12, 1, "", "Inexact"], [183, 12, 1, "", "InvalidOperation"], [183, 9, 1, "", "MAX_EMAX"], [183, 9, 1, "", "MAX_PREC"], [183, 9, 1, "", "MIN_EMIN"], [183, 9, 1, "", "MIN_ETINY"], [183, 12, 1, "", "Overflow"], [183, 9, 1, "", "ROUND_05UP"], [183, 9, 1, "", "ROUND_CEILING"], [183, 9, 1, "", "ROUND_DOWN"], [183, 9, 1, "", "ROUND_FLOOR"], [183, 9, 1, "", "ROUND_HALF_DOWN"], [183, 9, 1, "", "ROUND_HALF_EVEN"], [183, 9, 1, "", "ROUND_HALF_UP"], [183, 9, 1, "", "ROUND_UP"], [183, 12, 1, "", "Rounded"], [183, 12, 1, "", "Subnormal"], [183, 12, 1, "", "Underflow"], [183, 11, 1, "", "getcontext"], [183, 11, 1, "", "localcontext"], [183, 11, 1, "", "setcontext"]], "decimal.Context": [[183, 8, 1, "", "Etiny"], [183, 8, 1, "", "Etop"], [183, 8, 1, "", "abs"], [183, 8, 1, "", "add"], [183, 8, 1, "", "canonical"], [183, 8, 1, "", "clear_flags"], [183, 8, 1, "", "clear_traps"], [183, 8, 1, "", "compare"], [183, 8, 1, "", "compare_signal"], [183, 8, 1, "", "compare_total"], [183, 8, 1, "", "compare_total_mag"], [183, 8, 1, "", "copy"], [183, 8, 1, "", "copy_abs"], [183, 8, 1, "", "copy_decimal"], [183, 8, 1, "", "copy_negate"], [183, 8, 1, "", "copy_sign"], [183, 8, 1, "", "create_decimal"], [183, 8, 1, "", "create_decimal_from_float"], [183, 8, 1, "", "divide"], [183, 8, 1, "", "divide_int"], [183, 8, 1, "", "divmod"], [183, 8, 1, "", "exp"], [183, 8, 1, "", "fma"], [183, 8, 1, "", "is_canonical"], [183, 8, 1, "", "is_finite"], [183, 8, 1, "", "is_infinite"], [183, 8, 1, "", "is_nan"], [183, 8, 1, "", "is_normal"], [183, 8, 1, "", "is_qnan"], [183, 8, 1, "", "is_signed"], [183, 8, 1, "", "is_snan"], [183, 8, 1, "", "is_subnormal"], [183, 8, 1, "", "is_zero"], [183, 8, 1, "", "ln"], [183, 8, 1, "", "log10"], [183, 8, 1, "", "logb"], [183, 8, 1, "", "logical_and"], [183, 8, 1, "", "logical_invert"], [183, 8, 1, "", "logical_or"], [183, 8, 1, "", "logical_xor"], [183, 8, 1, "", "max"], [183, 8, 1, "", "max_mag"], [183, 8, 1, "", "min"], [183, 8, 1, "", "min_mag"], [183, 8, 1, "", "minus"], [183, 8, 1, "", "multiply"], [183, 8, 1, "", "next_minus"], [183, 8, 1, "", "next_plus"], [183, 8, 1, "", "next_toward"], [183, 8, 1, "", "normalize"], [183, 8, 1, "", "number_class"], [183, 8, 1, "", "plus"], [183, 8, 1, "", "power"], [183, 8, 1, "", "quantize"], [183, 8, 1, "", "radix"], [183, 8, 1, "", "remainder"], [183, 8, 1, "", "remainder_near"], [183, 8, 1, "", "rotate"], [183, 8, 1, "", "same_quantum"], [183, 8, 1, "", "scaleb"], [183, 8, 1, "", "shift"], [183, 8, 1, "", "sqrt"], [183, 8, 1, "", "subtract"], [183, 8, 1, "", "to_eng_string"], [183, 8, 1, "", "to_integral_exact"], [183, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[183, 8, 1, "", "adjusted"], [183, 8, 1, "", "as_integer_ratio"], [183, 8, 1, "", "as_tuple"], [183, 8, 1, "", "canonical"], [183, 8, 1, "", "compare"], [183, 8, 1, "", "compare_signal"], [183, 8, 1, "", "compare_total"], [183, 8, 1, "", "compare_total_mag"], [183, 8, 1, "", "conjugate"], [183, 8, 1, "", "copy_abs"], [183, 8, 1, "", "copy_negate"], [183, 8, 1, "", "copy_sign"], [183, 8, 1, "", "exp"], [183, 8, 1, "", "fma"], [183, 8, 1, "", "from_float"], [183, 8, 1, "", "is_canonical"], [183, 8, 1, "", "is_finite"], [183, 8, 1, "", "is_infinite"], [183, 8, 1, "", "is_nan"], [183, 8, 1, "", "is_normal"], [183, 8, 1, "", "is_qnan"], [183, 8, 1, "", "is_signed"], [183, 8, 1, "", "is_snan"], [183, 8, 1, "", "is_subnormal"], [183, 8, 1, "", "is_zero"], [183, 8, 1, "", "ln"], [183, 8, 1, "", "log10"], [183, 8, 1, "", "logb"], [183, 8, 1, "", "logical_and"], [183, 8, 1, "", "logical_invert"], [183, 8, 1, "", "logical_or"], [183, 8, 1, "", "logical_xor"], [183, 8, 1, "", "max"], [183, 8, 1, "", "max_mag"], [183, 8, 1, "", "min"], [183, 8, 1, "", "min_mag"], [183, 8, 1, "", "next_minus"], [183, 8, 1, "", "next_plus"], [183, 8, 1, "", "next_toward"], [183, 8, 1, "", "normalize"], [183, 8, 1, "", "number_class"], [183, 8, 1, "", "quantize"], [183, 8, 1, "", "radix"], [183, 8, 1, "", "remainder_near"], [183, 8, 1, "", "rotate"], [183, 8, 1, "", "same_quantum"], [183, 8, 1, "", "scaleb"], [183, 8, 1, "", "shift"], [183, 8, 1, "", "sqrt"], [183, 8, 1, "", "to_eng_string"], [183, 8, 1, "", "to_integral"], [183, 8, 1, "", "to_integral_exact"], [183, 8, 1, "", "to_integral_value"]], "definition": [[341, 7, 1, "", "__name__"], [341, 7, 1, "", "__qualname__"], [341, 7, 1, "", "__type_params__"]], "dict": [[341, 8, 1, "", "clear"], [341, 8, 1, "", "copy"], [341, 8, 1, "", "fromkeys"], [341, 8, 1, "", "get"], [341, 8, 1, "", "items"], [341, 8, 1, "", "keys"], [341, 8, 1, "", "pop"], [341, 8, 1, "", "popitem"], [341, 8, 1, "", "setdefault"], [341, 8, 1, "", "update"], [341, 8, 1, "", "values"]], "difflib": [[187, 12, 1, "", "Differ"], [187, 12, 1, "", "HtmlDiff"], [187, 11, 1, "", "IS_CHARACTER_JUNK"], [187, 11, 1, "", "IS_LINE_JUNK"], [187, 12, 1, "", "SequenceMatcher"], [187, 11, 1, "", "context_diff"], [187, 11, 1, "", "diff_bytes"], [187, 11, 1, "", "get_close_matches"], [187, 11, 1, "", "ndiff"], [187, 11, 1, "", "restore"], [187, 11, 1, "", "unified_diff"]], "difflib.Differ": [[187, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[187, 8, 1, "", "__init__"], [187, 8, 1, "", "make_file"], [187, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[187, 8, 1, "", "find_longest_match"], [187, 8, 1, "", "get_grouped_opcodes"], [187, 8, 1, "", "get_matching_blocks"], [187, 8, 1, "", "get_opcodes"], [187, 8, 1, "", "quick_ratio"], [187, 8, 1, "", "ratio"], [187, 8, 1, "", "real_quick_ratio"], [187, 8, 1, "", "set_seq1"], [187, 8, 1, "", "set_seq2"], [187, 8, 1, "", "set_seqs"]], "dis": [[188, 12, 1, "", "Bytecode"], [188, 12, 1, "", "Instruction"], [188, 12, 1, "", "Positions"], [188, 9, 1, "", "cmp_op"], [188, 11, 1, "", "code_info"], [188, 11, 1, "", "dis"], [188, 11, 1, "", "disassemble"], [188, 11, 1, "", "disco"], [188, 11, 1, "", "distb"], [188, 11, 1, "", "findlabels"], [188, 11, 1, "", "findlinestarts"], [188, 11, 1, "", "get_instructions"], [188, 9, 1, "", "hasarg"], [188, 9, 1, "", "hascompare"], [188, 9, 1, "", "hasconst"], [188, 9, 1, "", "hasexc"], [188, 9, 1, "", "hasfree"], [188, 9, 1, "", "hasjabs"], [188, 9, 1, "", "hasjrel"], [188, 9, 1, "", "haslocal"], [188, 9, 1, "", "hasname"], [188, 9, 1, "", "opmap"], [188, 9, 1, "", "opname"], [188, 11, 1, "", "show_code"], [188, 11, 1, "", "stack_effect"]], "dis.Bytecode": [[188, 9, 1, "", "codeobj"], [188, 8, 1, "", "dis"], [188, 9, 1, "", "first_line"], [188, 8, 1, "", "from_traceback"], [188, 8, 1, "", "info"]], "dis.Instruction": [[188, 9, 1, "", "arg"], [188, 9, 1, "", "argrepr"], [188, 9, 1, "", "argval"], [188, 9, 1, "", "is_jump_target"], [188, 9, 1, "", "offset"], [188, 9, 1, "", "opcode"], [188, 9, 1, "", "opname"], [188, 9, 1, "", "positions"], [188, 9, 1, "", "starts_line"]], "dis.Positions": [[188, 9, 1, "", "col_offset"], [188, 9, 1, "", "end_col_offset"], [188, 9, 1, "", "end_lineno"], [188, 9, 1, "", "lineno"]], "doctest": [[190, 9, 1, "", "COMPARISON_FLAGS"], [190, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [190, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [190, 12, 1, "", "DebugRunner"], [190, 11, 1, "", "DocFileSuite"], [190, 12, 1, "", "DocTest"], [190, 6, 1, "", "DocTestFailure"], [190, 12, 1, "", "DocTestFinder"], [190, 12, 1, "", "DocTestParser"], [190, 12, 1, "", "DocTestRunner"], [190, 11, 1, "", "DocTestSuite"], [190, 9, 1, "", "ELLIPSIS"], [190, 12, 1, "", "Example"], [190, 9, 1, "", "FAIL_FAST"], [190, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [190, 9, 1, "", "NORMALIZE_WHITESPACE"], [190, 12, 1, "", "OutputChecker"], [190, 9, 1, "", "REPORTING_FLAGS"], [190, 9, 1, "", "REPORT_CDIFF"], [190, 9, 1, "", "REPORT_NDIFF"], [190, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [190, 9, 1, "", "REPORT_UDIFF"], [190, 9, 1, "", "SKIP"], [190, 6, 1, "", "UnexpectedException"], [190, 11, 1, "", "debug"], [190, 11, 1, "", "debug_src"], [190, 11, 1, "", "register_optionflag"], [190, 11, 1, "", "run_docstring_examples"], [190, 11, 1, "", "script_from_examples"], [190, 11, 1, "", "set_unittest_reportflags"], [190, 11, 1, "", "testfile"], [190, 11, 1, "", "testmod"], [190, 11, 1, "", "testsource"]], "doctest.DocTest": [[190, 7, 1, "", "docstring"], [190, 7, 1, "", "examples"], [190, 7, 1, "", "filename"], [190, 7, 1, "", "globs"], [190, 7, 1, "", "lineno"], [190, 7, 1, "", "name"]], "doctest.DocTestFailure": [[190, 7, 1, "", "example"], [190, 7, 1, "", "got"], [190, 7, 1, "", "test"]], "doctest.DocTestFinder": [[190, 8, 1, "", "find"]], "doctest.DocTestParser": [[190, 8, 1, "", "get_doctest"], [190, 8, 1, "", "get_examples"], [190, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[190, 8, 1, "", "report_failure"], [190, 8, 1, "", "report_start"], [190, 8, 1, "", "report_success"], [190, 8, 1, "", "report_unexpected_exception"], [190, 8, 1, "", "run"], [190, 8, 1, "", "summarize"]], "doctest.Example": [[190, 7, 1, "", "exc_msg"], [190, 7, 1, "", "indent"], [190, 7, 1, "", "lineno"], [190, 7, 1, "", "options"], [190, 7, 1, "", "source"], [190, 7, 1, "", "want"]], "doctest.OutputChecker": [[190, 8, 1, "", "check_output"], [190, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[190, 7, 1, "", "example"], [190, 7, 1, "", "exc_info"], [190, 7, 1, "", "test"]], "email": [[192, 10, 0, "-", "charset"], [194, 10, 0, "-", "contentmanager"], [195, 10, 0, "-", "encoders"], [196, 10, 0, "-", "errors"], [198, 10, 0, "-", "generator"], [199, 10, 0, "-", "header"], [200, 10, 0, "-", "headerregistry"], [201, 10, 0, "-", "iterators"], [202, 10, 0, "-", "message"], [204, 11, 1, "", "message_from_binary_file"], [204, 11, 1, "", "message_from_bytes"], [204, 11, 1, "", "message_from_file"], [204, 11, 1, "", "message_from_string"], [203, 10, 0, "-", "mime"], [204, 10, 0, "-", "parser"], [205, 10, 0, "-", "policy"], [206, 10, 0, "-", "utils"]], "email.charset": [[192, 12, 1, "", "Charset"], [192, 11, 1, "", "add_alias"], [192, 11, 1, "", "add_charset"], [192, 11, 1, "", "add_codec"]], "email.charset.Charset": [[192, 8, 1, "", "__eq__"], [192, 8, 1, "", "__ne__"], [192, 8, 1, "", "__str__"], [192, 8, 1, "", "body_encode"], [192, 7, 1, "", "body_encoding"], [192, 8, 1, "", "get_body_encoding"], [192, 8, 1, "", "get_output_charset"], [192, 8, 1, "", "header_encode"], [192, 8, 1, "", "header_encode_lines"], [192, 7, 1, "", "header_encoding"], [192, 7, 1, "", "input_charset"], [192, 7, 1, "", "input_codec"], [192, 7, 1, "", "output_charset"], [192, 7, 1, "", "output_codec"]], "email.contentmanager": [[194, 12, 1, "", "ContentManager"], [194, 8, 1, "", "get_content"], [194, 9, 1, "", "raw_data_manager"], [194, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[194, 8, 1, "", "add_get_handler"], [194, 8, 1, "", "add_set_handler"], [194, 8, 1, "", "get_content"], [194, 8, 1, "", "set_content"]], "email.encoders": [[195, 11, 1, "", "encode_7or8bit"], [195, 11, 1, "", "encode_base64"], [195, 11, 1, "", "encode_noop"], [195, 11, 1, "", "encode_quopri"]], "email.errors": [[196, 6, 1, "", "BoundaryError"], [196, 6, 1, "", "HeaderParseError"], [196, 6, 1, "", "MessageError"], [196, 6, 1, "", "MessageParseError"], [196, 6, 1, "", "MultipartConversionError"]], "email.generator": [[198, 12, 1, "", "BytesGenerator"], [198, 12, 1, "", "DecodedGenerator"], [198, 12, 1, "", "Generator"]], "email.generator.BytesGenerator": [[198, 8, 1, "", "clone"], [198, 8, 1, "", "flatten"], [198, 8, 1, "", "write"]], "email.generator.Generator": [[198, 8, 1, "", "clone"], [198, 8, 1, "", "flatten"], [198, 8, 1, "", "write"]], "email.header": [[199, 12, 1, "", "Header"], [199, 11, 1, "", "decode_header"], [199, 11, 1, "", "make_header"]], "email.header.Header": [[199, 8, 1, "", "__eq__"], [199, 8, 1, "", "__ne__"], [199, 8, 1, "", "__str__"], [199, 8, 1, "", "append"], [199, 8, 1, "", "encode"]], "email.headerregistry": [[200, 12, 1, "", "Address"], [200, 12, 1, "", "AddressHeader"], [200, 12, 1, "", "BaseHeader"], [200, 12, 1, "", "ContentDispositionHeader"], [200, 12, 1, "", "ContentTransferEncoding"], [200, 12, 1, "", "ContentTypeHeader"], [200, 12, 1, "", "DateHeader"], [200, 12, 1, "", "Group"], [200, 12, 1, "", "HeaderRegistry"], [200, 12, 1, "", "MIMEVersionHeader"], [200, 12, 1, "", "ParameterizedMIMEHeader"], [200, 12, 1, "", "SingleAddressHeader"], [200, 12, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[200, 8, 1, "", "__str__"], [200, 7, 1, "", "addr_spec"], [200, 7, 1, "", "display_name"], [200, 7, 1, "", "domain"], [200, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[200, 7, 1, "", "addresses"], [200, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[200, 7, 1, "", "defects"], [200, 8, 1, "", "fold"], [200, 7, 1, "", "max_count"], [200, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[200, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[200, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[200, 7, 1, "", "content_type"], [200, 7, 1, "", "maintype"], [200, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[200, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[200, 8, 1, "", "__str__"], [200, 7, 1, "", "addresses"], [200, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[200, 8, 1, "", "__call__"], [200, 8, 1, "", "__getitem__"], [200, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[200, 7, 1, "", "major"], [200, 7, 1, "", "minor"], [200, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[200, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[200, 7, 1, "", "address"]], "email.iterators": [[201, 11, 1, "", "_structure"], [201, 11, 1, "", "body_line_iterator"], [201, 11, 1, "", "typed_subpart_iterator"]], "email.message": [[202, 12, 1, "", "EmailMessage"], [202, 12, 1, "", "MIMEPart"], [193, 12, 1, "", "Message"]], "email.message.EmailMessage": [[202, 8, 1, "", "__bytes__"], [202, 8, 1, "", "__contains__"], [202, 8, 1, "", "__delitem__"], [202, 8, 1, "", "__getitem__"], [202, 8, 1, "", "__len__"], [202, 8, 1, "", "__setitem__"], [202, 8, 1, "", "__str__"], [202, 8, 1, "", "add_alternative"], [202, 8, 1, "", "add_attachment"], [202, 8, 1, "", "add_header"], [202, 8, 1, "", "add_related"], [202, 8, 1, "", "as_bytes"], [202, 8, 1, "", "as_string"], [202, 8, 1, "", "clear"], [202, 8, 1, "", "clear_content"], [202, 7, 1, "", "defects"], [202, 8, 1, "", "del_param"], [202, 7, 1, "", "epilogue"], [202, 8, 1, "", "get"], [202, 8, 1, "", "get_all"], [202, 8, 1, "", "get_body"], [202, 8, 1, "", "get_boundary"], [202, 8, 1, "", "get_charsets"], [202, 8, 1, "", "get_content"], [202, 8, 1, "", "get_content_charset"], [202, 8, 1, "", "get_content_disposition"], [202, 8, 1, "", "get_content_maintype"], [202, 8, 1, "", "get_content_subtype"], [202, 8, 1, "", "get_content_type"], [202, 8, 1, "", "get_default_type"], [202, 8, 1, "", "get_filename"], [202, 8, 1, "", "get_unixfrom"], [202, 8, 1, "", "is_attachment"], [202, 8, 1, "", "is_multipart"], [202, 8, 1, "", "items"], [202, 8, 1, "", "iter_attachments"], [202, 8, 1, "", "iter_parts"], [202, 8, 1, "", "keys"], [202, 8, 1, "", "make_alternative"], [202, 8, 1, "", "make_mixed"], [202, 8, 1, "", "make_related"], [202, 7, 1, "", "preamble"], [202, 8, 1, "", "replace_header"], [202, 8, 1, "", "set_boundary"], [202, 8, 1, "", "set_content"], [202, 8, 1, "", "set_default_type"], [202, 8, 1, "", "set_param"], [202, 8, 1, "", "set_unixfrom"], [202, 8, 1, "", "values"], [202, 8, 1, "", "walk"]], "email.message.Message": [[193, 8, 1, "", "__bytes__"], [193, 8, 1, "", "__contains__"], [193, 8, 1, "", "__delitem__"], [193, 8, 1, "", "__getitem__"], [193, 8, 1, "", "__len__"], [193, 8, 1, "", "__setitem__"], [193, 8, 1, "", "__str__"], [193, 8, 1, "", "add_header"], [193, 8, 1, "", "as_bytes"], [193, 8, 1, "", "as_string"], [193, 8, 1, "", "attach"], [193, 7, 1, "", "defects"], [193, 8, 1, "", "del_param"], [193, 7, 1, "", "epilogue"], [193, 8, 1, "", "get"], [193, 8, 1, "", "get_all"], [193, 8, 1, "", "get_boundary"], [193, 8, 1, "", "get_charset"], [193, 8, 1, "", "get_charsets"], [193, 8, 1, "", "get_content_charset"], [193, 8, 1, "", "get_content_disposition"], [193, 8, 1, "", "get_content_maintype"], [193, 8, 1, "", "get_content_subtype"], [193, 8, 1, "", "get_content_type"], [193, 8, 1, "", "get_default_type"], [193, 8, 1, "", "get_filename"], [193, 8, 1, "", "get_param"], [193, 8, 1, "", "get_params"], [193, 8, 1, "", "get_payload"], [193, 8, 1, "", "get_unixfrom"], [193, 8, 1, "", "is_multipart"], [193, 8, 1, "", "items"], [193, 8, 1, "", "keys"], [193, 7, 1, "", "preamble"], [193, 8, 1, "", "replace_header"], [193, 8, 1, "", "set_boundary"], [193, 8, 1, "", "set_charset"], [193, 8, 1, "", "set_default_type"], [193, 8, 1, "", "set_param"], [193, 8, 1, "", "set_payload"], [193, 8, 1, "", "set_type"], [193, 8, 1, "", "set_unixfrom"], [193, 8, 1, "", "values"], [193, 8, 1, "", "walk"]], "email.mime.application": [[203, 12, 1, "", "MIMEApplication"]], "email.mime.audio": [[203, 12, 1, "", "MIMEAudio"]], "email.mime.base": [[203, 12, 1, "", "MIMEBase"]], "email.mime.image": [[203, 12, 1, "", "MIMEImage"]], "email.mime.message": [[203, 12, 1, "", "MIMEMessage"]], "email.mime.multipart": [[203, 12, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[203, 12, 1, "", "MIMENonMultipart"]], "email.mime.text": [[203, 12, 1, "", "MIMEText"]], "email.parser": [[204, 12, 1, "", "BytesFeedParser"], [204, 12, 1, "", "BytesHeaderParser"], [204, 12, 1, "", "BytesParser"], [204, 12, 1, "", "FeedParser"], [204, 12, 1, "", "HeaderParser"], [204, 12, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[204, 8, 1, "", "close"], [204, 8, 1, "", "feed"]], "email.parser.BytesParser": [[204, 8, 1, "", "parse"], [204, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[204, 8, 1, "", "parse"], [204, 8, 1, "", "parsestr"]], "email.policy": [[205, 12, 1, "", "Compat32"], [205, 12, 1, "", "EmailPolicy"], [205, 9, 1, "", "HTTP"], [205, 12, 1, "", "Policy"], [205, 9, 1, "", "SMTP"], [205, 9, 1, "", "SMTPUTF8"], [205, 9, 1, "", "compat32"], [205, 9, 1, "", "default"], [205, 9, 1, "", "strict"]], "email.policy.Compat32": [[205, 8, 1, "", "fold"], [205, 8, 1, "", "fold_binary"], [205, 8, 1, "", "header_fetch_parse"], [205, 8, 1, "", "header_source_parse"], [205, 8, 1, "", "header_store_parse"], [205, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[205, 7, 1, "", "content_manager"], [205, 8, 1, "", "fold"], [205, 8, 1, "", "fold_binary"], [205, 7, 1, "", "header_factory"], [205, 8, 1, "", "header_fetch_parse"], [205, 8, 1, "", "header_max_count"], [205, 8, 1, "", "header_source_parse"], [205, 8, 1, "", "header_store_parse"], [205, 7, 1, "", "refold_source"], [205, 7, 1, "", "utf8"]], "email.policy.Policy": [[205, 8, 1, "", "clone"], [205, 7, 1, "", "cte_type"], [205, 8, 1, "", "fold"], [205, 8, 1, "", "fold_binary"], [205, 8, 1, "", "handle_defect"], [205, 8, 1, "", "header_fetch_parse"], [205, 8, 1, "", "header_max_count"], [205, 8, 1, "", "header_source_parse"], [205, 8, 1, "", "header_store_parse"], [205, 7, 1, "", "linesep"], [205, 7, 1, "", "mangle_from_"], [205, 7, 1, "", "max_line_length"], [205, 7, 1, "", "message_factory"], [205, 7, 1, "", "raise_on_defect"], [205, 8, 1, "", "register_defect"]], "email.utils": [[206, 11, 1, "", "collapse_rfc2231_value"], [206, 11, 1, "", "decode_params"], [206, 11, 1, "", "decode_rfc2231"], [206, 11, 1, "", "encode_rfc2231"], [206, 11, 1, "", "format_datetime"], [206, 11, 1, "", "formataddr"], [206, 11, 1, "", "formatdate"], [206, 11, 1, "", "getaddresses"], [206, 11, 1, "", "localtime"], [206, 11, 1, "", "make_msgid"], [206, 11, 1, "", "mktime_tz"], [206, 11, 1, "", "parseaddr"], [206, 11, 1, "", "parsedate"], [206, 11, 1, "", "parsedate_to_datetime"], [206, 11, 1, "", "parsedate_tz"], [206, 11, 1, "", "quote"], [206, 11, 1, "", "unquote"]], "encodings": [[155, 10, 0, "-", "idna"], [155, 10, 0, "-", "mbcs"], [155, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[155, 11, 1, "", "ToASCII"], [155, 11, 1, "", "ToUnicode"], [155, 11, 1, "", "nameprep"]], "ensurepip": [[207, 11, 1, "", "bootstrap"], [207, 11, 1, "", "version"]], "enum": [[208, 12, 1, "", "Enum"], [208, 12, 1, "", "EnumCheck"], [208, 12, 1, "", "EnumType"], [208, 12, 1, "", "Flag"], [208, 12, 1, "", "FlagBoundary"], [208, 12, 1, "", "IntEnum"], [208, 12, 1, "", "IntFlag"], [208, 12, 1, "", "ReprEnum"], [208, 12, 1, "", "StrEnum"], [208, 12, 1, "", "auto"], [208, 11, 1, "", "global_enum"], [208, 11, 1, "", "member"], [208, 11, 1, "", "nonmember"], [208, 11, 1, "", "property"], [208, 11, 1, "", "show_flag_values"], [208, 11, 1, "", "unique"], [208, 11, 1, "", "verify"]], "enum.Enum": [[208, 8, 1, "", "__dir__"], [208, 8, 1, "", "__format__"], [208, 8, 1, "", "__init_subclass__"], [208, 8, 1, "", "__repr__"], [208, 8, 1, "", "__str__"], [208, 8, 1, "", "_generate_next_value_"], [208, 7, 1, "", "_ignore_"], [208, 8, 1, "", "_missing_"], [208, 7, 1, "", "name"], [208, 7, 1, "", "value"]], "enum.EnumCheck": [[208, 7, 1, "", "CONTINUOUS"], [208, 7, 1, "", "NAMED_FLAGS"], [208, 7, 1, "", "UNIQUE"]], "enum.EnumType": [[208, 8, 1, "", "__call__"], [208, 8, 1, "", "__contains__"], [208, 8, 1, "", "__dir__"], [208, 8, 1, "", "__getitem__"], [208, 8, 1, "", "__iter__"], [208, 8, 1, "", "__len__"], [208, 8, 1, "", "__reversed__"]], "enum.Flag": [[208, 8, 1, "", "__and__"], [208, 8, 1, "", "__contains__"], [208, 8, 1, "", "__or__"], [208, 8, 1, "", "__xor__"], [208, 8, 1, "", "_numeric_repr_"]], "enum.FlagBoundary": [[208, 7, 1, "", "CONFORM"], [208, 7, 1, "", "EJECT"], [208, 7, 1, "", "KEEP"], [208, 7, 1, "", "STRICT"]], "errno": [[209, 9, 1, "", "E2BIG"], [209, 9, 1, "", "EACCES"], [209, 9, 1, "", "EADDRINUSE"], [209, 9, 1, "", "EADDRNOTAVAIL"], [209, 9, 1, "", "EADV"], [209, 9, 1, "", "EAFNOSUPPORT"], [209, 9, 1, "", "EAGAIN"], [209, 9, 1, "", "EALREADY"], [209, 9, 1, "", "EBADE"], [209, 9, 1, "", "EBADF"], [209, 9, 1, "", "EBADFD"], [209, 9, 1, "", "EBADMSG"], [209, 9, 1, "", "EBADR"], [209, 9, 1, "", "EBADRQC"], [209, 9, 1, "", "EBADSLT"], [209, 9, 1, "", "EBFONT"], [209, 9, 1, "", "EBUSY"], [209, 9, 1, "", "ECHILD"], [209, 9, 1, "", "ECHRNG"], [209, 9, 1, "", "ECOMM"], [209, 9, 1, "", "ECONNABORTED"], [209, 9, 1, "", "ECONNREFUSED"], [209, 9, 1, "", "ECONNRESET"], [209, 9, 1, "", "EDEADLK"], [209, 9, 1, "", "EDEADLOCK"], [209, 9, 1, "", "EDESTADDRREQ"], [209, 9, 1, "", "EDOM"], [209, 9, 1, "", "EDOTDOT"], [209, 9, 1, "", "EDQUOT"], [209, 9, 1, "", "EEXIST"], [209, 9, 1, "", "EFAULT"], [209, 9, 1, "", "EFBIG"], [209, 9, 1, "", "EHOSTDOWN"], [209, 9, 1, "", "EHOSTUNREACH"], [209, 9, 1, "", "EIDRM"], [209, 9, 1, "", "EILSEQ"], [209, 9, 1, "", "EINPROGRESS"], [209, 9, 1, "", "EINTR"], [209, 9, 1, "", "EINVAL"], [209, 9, 1, "", "EIO"], [209, 9, 1, "", "EISCONN"], [209, 9, 1, "", "EISDIR"], [209, 9, 1, "", "EISNAM"], [209, 9, 1, "", "EL2HLT"], [209, 9, 1, "", "EL2NSYNC"], [209, 9, 1, "", "EL3HLT"], [209, 9, 1, "", "EL3RST"], [209, 9, 1, "", "ELIBACC"], [209, 9, 1, "", "ELIBBAD"], [209, 9, 1, "", "ELIBEXEC"], [209, 9, 1, "", "ELIBMAX"], [209, 9, 1, "", "ELIBSCN"], [209, 9, 1, "", "ELNRNG"], [209, 9, 1, "", "ELOOP"], [209, 9, 1, "", "EMFILE"], [209, 9, 1, "", "EMLINK"], [209, 9, 1, "", "EMSGSIZE"], [209, 9, 1, "", "EMULTIHOP"], [209, 9, 1, "", "ENAMETOOLONG"], [209, 9, 1, "", "ENAVAIL"], [209, 9, 1, "", "ENETDOWN"], [209, 9, 1, "", "ENETRESET"], [209, 9, 1, "", "ENETUNREACH"], [209, 9, 1, "", "ENFILE"], [209, 9, 1, "", "ENOANO"], [209, 9, 1, "", "ENOBUFS"], [209, 9, 1, "", "ENOCSI"], [209, 9, 1, "", "ENODATA"], [209, 9, 1, "", "ENODEV"], [209, 9, 1, "", "ENOENT"], [209, 9, 1, "", "ENOEXEC"], [209, 9, 1, "", "ENOLCK"], [209, 9, 1, "", "ENOLINK"], [209, 9, 1, "", "ENOMEM"], [209, 9, 1, "", "ENOMSG"], [209, 9, 1, "", "ENONET"], [209, 9, 1, "", "ENOPKG"], [209, 9, 1, "", "ENOPROTOOPT"], [209, 9, 1, "", "ENOSPC"], [209, 9, 1, "", "ENOSR"], [209, 9, 1, "", "ENOSTR"], [209, 9, 1, "", "ENOSYS"], [209, 9, 1, "", "ENOTBLK"], [209, 9, 1, "", "ENOTCAPABLE"], [209, 9, 1, "", "ENOTCONN"], [209, 9, 1, "", "ENOTDIR"], [209, 9, 1, "", "ENOTEMPTY"], [209, 9, 1, "", "ENOTNAM"], [209, 9, 1, "", "ENOTSOCK"], [209, 9, 1, "", "ENOTTY"], [209, 9, 1, "", "ENOTUNIQ"], [209, 9, 1, "", "ENXIO"], [209, 9, 1, "", "EOPNOTSUPP"], [209, 9, 1, "", "EOVERFLOW"], [209, 9, 1, "", "EPERM"], [209, 9, 1, "", "EPFNOSUPPORT"], [209, 9, 1, "", "EPIPE"], [209, 9, 1, "", "EPROTO"], [209, 9, 1, "", "EPROTONOSUPPORT"], [209, 9, 1, "", "EPROTOTYPE"], [209, 9, 1, "", "EQFULL"], [209, 9, 1, "", "ERANGE"], [209, 9, 1, "", "EREMCHG"], [209, 9, 1, "", "EREMOTE"], [209, 9, 1, "", "EREMOTEIO"], [209, 9, 1, "", "ERESTART"], [209, 9, 1, "", "EROFS"], [209, 9, 1, "", "ESHUTDOWN"], [209, 9, 1, "", "ESOCKTNOSUPPORT"], [209, 9, 1, "", "ESPIPE"], [209, 9, 1, "", "ESRCH"], [209, 9, 1, "", "ESRMNT"], [209, 9, 1, "", "ESTALE"], [209, 9, 1, "", "ESTRPIPE"], [209, 9, 1, "", "ETIME"], [209, 9, 1, "", "ETIMEDOUT"], [209, 9, 1, "", "ETOOMANYREFS"], [209, 9, 1, "", "ETXTBSY"], [209, 9, 1, "", "EUCLEAN"], [209, 9, 1, "", "EUNATCH"], [209, 9, 1, "", "EUSERS"], [209, 9, 1, "", "EWOULDBLOCK"], [209, 9, 1, "", "EXDEV"], [209, 9, 1, "", "EXFULL"], [209, 9, 1, "", "errorcode"]], "faulthandler": [[211, 11, 1, "", "cancel_dump_traceback_later"], [211, 11, 1, "", "disable"], [211, 11, 1, "", "dump_traceback"], [211, 11, 1, "", "dump_traceback_later"], [211, 11, 1, "", "enable"], [211, 11, 1, "", "is_enabled"], [211, 11, 1, "", "register"], [211, 11, 1, "", "unregister"]], "fcntl": [[212, 11, 1, "", "fcntl"], [212, 11, 1, "", "flock"], [212, 11, 1, "", "ioctl"], [212, 11, 1, "", "lockf"]], "filecmp": [[213, 7, 1, "", "DEFAULT_IGNORES"], [213, 11, 1, "", "clear_cache"], [213, 11, 1, "", "cmp"], [213, 11, 1, "", "cmpfiles"], [213, 12, 1, "", "dircmp"]], "filecmp.dircmp": [[213, 7, 1, "", "common"], [213, 7, 1, "", "common_dirs"], [213, 7, 1, "", "common_files"], [213, 7, 1, "", "common_funny"], [213, 7, 1, "", "diff_files"], [213, 7, 1, "", "funny_files"], [213, 7, 1, "", "left"], [213, 7, 1, "", "left_list"], [213, 7, 1, "", "left_only"], [213, 8, 1, "", "report"], [213, 8, 1, "", "report_full_closure"], [213, 8, 1, "", "report_partial_closure"], [213, 7, 1, "", "right"], [213, 7, 1, "", "right_list"], [213, 7, 1, "", "right_only"], [213, 7, 1, "", "same_files"], [213, 7, 1, "", "subdirs"]], "fileinput": [[215, 12, 1, "", "FileInput"], [215, 11, 1, "", "close"], [215, 11, 1, "", "filelineno"], [215, 11, 1, "", "filename"], [215, 11, 1, "", "fileno"], [215, 11, 1, "", "hook_compressed"], [215, 11, 1, "", "hook_encoded"], [215, 11, 1, "", "input"], [215, 11, 1, "", "isfirstline"], [215, 11, 1, "", "isstdin"], [215, 11, 1, "", "lineno"], [215, 11, 1, "", "nextfile"]], "float": [[341, 8, 1, "", "as_integer_ratio"], [341, 8, 1, "", "fromhex"], [341, 8, 1, "", "hex"], [341, 8, 1, "", "is_integer"]], "fnmatch": [[217, 11, 1, "", "filter"], [217, 11, 1, "", "fnmatch"], [217, 11, 1, "", "fnmatchcase"], [217, 11, 1, "", "translate"]], "fractions": [[218, 12, 1, "", "Fraction"]], "fractions.Fraction": [[218, 8, 1, "", "__ceil__"], [218, 8, 1, "", "__floor__"], [218, 8, 1, "", "__format__"], [218, 8, 1, "", "__round__"], [218, 8, 1, "", "as_integer_ratio"], [218, 7, 1, "", "denominator"], [218, 8, 1, "", "from_decimal"], [218, 8, 1, "", "from_float"], [218, 8, 1, "", "is_integer"], [218, 8, 1, "", "limit_denominator"], [218, 7, 1, "", "numerator"]], "frame": [[424, 8, 1, "", "clear"]], "frozenset": [[341, 8, 1, "", "add"], [341, 8, 1, "", "clear"], [341, 8, 1, "", "copy"], [341, 8, 1, "", "difference"], [341, 8, 1, "", "difference_update"], [341, 8, 1, "", "discard"], [341, 8, 1, "", "intersection"], [341, 8, 1, "", "intersection_update"], [341, 8, 1, "", "isdisjoint"], [341, 8, 1, "", "issubset"], [341, 8, 1, "", "issuperset"], [341, 8, 1, "", "pop"], [341, 8, 1, "", "remove"], [341, 8, 1, "", "symmetric_difference"], [341, 8, 1, "", "symmetric_difference_update"], [341, 8, 1, "", "union"], [341, 8, 1, "", "update"]], "ftplib": [[220, 12, 1, "", "FTP"], [220, 9, 1, "", "all_errors"], [220, 6, 1, "", "error_perm"], [220, 6, 1, "", "error_proto"], [220, 6, 1, "", "error_reply"], [220, 6, 1, "", "error_temp"]], "ftplib.FTP": [[220, 8, 1, "", "abort"], [220, 8, 1, "", "close"], [220, 8, 1, "", "connect"], [220, 8, 1, "", "cwd"], [220, 8, 1, "", "delete"], [220, 8, 1, "", "dir"], [220, 8, 1, "", "getwelcome"], [220, 8, 1, "", "login"], [220, 8, 1, "", "mkd"], [220, 8, 1, "", "mlsd"], [220, 8, 1, "", "nlst"], [220, 8, 1, "", "ntransfercmd"], [220, 8, 1, "", "pwd"], [220, 8, 1, "", "quit"], [220, 8, 1, "", "rename"], [220, 8, 1, "", "retrbinary"], [220, 8, 1, "", "retrlines"], [220, 8, 1, "", "rmd"], [220, 8, 1, "", "sendcmd"], [220, 8, 1, "", "set_debuglevel"], [220, 8, 1, "", "set_pasv"], [220, 8, 1, "", "size"], [220, 8, 1, "", "storbinary"], [220, 8, 1, "", "storlines"], [220, 8, 1, "", "transfercmd"], [220, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[220, 8, 1, "", "auth"], [220, 8, 1, "", "ccc"], [220, 8, 1, "", "prot_c"], [220, 8, 1, "", "prot_p"], [220, 7, 1, "", "ssl_version"]], "functools": [[223, 11, 1, "", "cache"], [223, 11, 1, "", "cached_property"], [223, 11, 1, "", "cmp_to_key"], [223, 11, 1, "", "lru_cache"], [223, 11, 1, "", "partial"], [223, 12, 1, "", "partialmethod"], [223, 11, 1, "", "reduce"], [223, 11, 1, "", "singledispatch"], [223, 12, 1, "", "singledispatchmethod"], [223, 11, 1, "", "total_ordering"], [223, 11, 1, "", "update_wrapper"], [223, 11, 1, "", "wraps"]], "functools.partial": [[223, 7, 1, "", "args"], [223, 7, 1, "", "func"], [223, 7, 1, "", "keywords"]], "gc": [[224, 9, 1, "", "DEBUG_COLLECTABLE"], [224, 9, 1, "", "DEBUG_LEAK"], [224, 9, 1, "", "DEBUG_SAVEALL"], [224, 9, 1, "", "DEBUG_STATS"], [224, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [224, 9, 1, "", "callbacks"], [224, 11, 1, "", "collect"], [224, 11, 1, "", "disable"], [224, 11, 1, "", "enable"], [224, 11, 1, "", "freeze"], [224, 9, 1, "", "garbage"], [224, 11, 1, "", "get_count"], [224, 11, 1, "", "get_debug"], [224, 11, 1, "", "get_freeze_count"], [224, 11, 1, "", "get_objects"], [224, 11, 1, "", "get_referents"], [224, 11, 1, "", "get_referrers"], [224, 11, 1, "", "get_stats"], [224, 11, 1, "", "get_threshold"], [224, 11, 1, "", "is_finalized"], [224, 11, 1, "", "is_tracked"], [224, 11, 1, "", "isenabled"], [224, 11, 1, "", "set_debug"], [224, 11, 1, "", "set_threshold"], [224, 11, 1, "", "unfreeze"]], "generator": [[426, 8, 1, "", "__next__"], [426, 8, 1, "", "close"], [426, 8, 1, "", "send"], [426, 8, 1, "", "throw"]], "genericalias": [[341, 7, 1, "", "__args__"], [341, 7, 1, "", "__origin__"], [341, 7, 1, "", "__parameters__"], [341, 7, 1, "", "__unpacked__"]], "getopt": [[225, 6, 1, "", "GetoptError"], [225, 6, 1, "", "error"], [225, 11, 1, "", "getopt"], [225, 11, 1, "", "gnu_getopt"]], "getpass": [[226, 6, 1, "", "GetPassWarning"], [226, 11, 1, "", "getpass"], [226, 11, 1, "", "getuser"]], "gettext": [[227, 12, 1, "", "GNUTranslations"], [227, 12, 1, "", "NullTranslations"], [227, 11, 1, "", "bindtextdomain"], [227, 11, 1, "", "dgettext"], [227, 11, 1, "", "dngettext"], [227, 11, 1, "", "dnpgettext"], [227, 11, 1, "", "dpgettext"], [227, 11, 1, "", "find"], [227, 11, 1, "", "gettext"], [227, 11, 1, "", "install"], [227, 11, 1, "", "ngettext"], [227, 11, 1, "", "npgettext"], [227, 11, 1, "", "pgettext"], [227, 11, 1, "", "textdomain"], [227, 11, 1, "", "translation"]], "gettext.GNUTranslations": [[227, 8, 1, "", "gettext"], [227, 8, 1, "", "ngettext"], [227, 8, 1, "", "npgettext"], [227, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[227, 8, 1, "", "_parse"], [227, 8, 1, "", "add_fallback"], [227, 8, 1, "", "charset"], [227, 8, 1, "", "gettext"], [227, 8, 1, "", "info"], [227, 8, 1, "", "install"], [227, 8, 1, "", "ngettext"], [227, 8, 1, "", "npgettext"], [227, 8, 1, "", "pgettext"]], "glob": [[228, 11, 1, "", "escape"], [228, 11, 1, "", "glob"], [228, 11, 1, "", "iglob"]], "graphlib": [[229, 6, 1, "", "CycleError"], [229, 12, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[229, 8, 1, "", "add"], [229, 8, 1, "", "done"], [229, 8, 1, "", "get_ready"], [229, 8, 1, "", "is_active"], [229, 8, 1, "", "prepare"], [229, 8, 1, "", "static_order"]], "grp": [[230, 11, 1, "", "getgrall"], [230, 11, 1, "", "getgrgid"], [230, 11, 1, "", "getgrnam"]], "gzip": [[231, 6, 1, "", "BadGzipFile"], [231, 12, 1, "", "GzipFile"], [231, 11, 1, "", "compress"], [231, 11, 1, "", "decompress"], [231, 11, 1, "", "open"], [231, 14, 1, "cmdoption-gzip-best", "--best"], [231, 14, 1, "cmdoption-gzip-d", "--decompress"], [231, 14, 1, "cmdoption-gzip-fast", "--fast"], [231, 14, 1, "cmdoption-gzip-h", "--help"], [231, 14, 1, "cmdoption-gzip-d", "-d"], [231, 14, 1, "cmdoption-gzip-h", "-h"], [231, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[231, 7, 1, "", "mtime"], [231, 7, 1, "", "name"], [231, 8, 1, "", "peek"]], "hashlib": [[232, 9, 1, "", "algorithms_available"], [232, 9, 1, "", "algorithms_guaranteed"], [232, 11, 1, "", "blake2b"], [232, 11, 1, "", "blake2s"], [232, 11, 1, "", "file_digest"], [232, 11, 1, "", "md5"], [232, 11, 1, "", "new"], [232, 11, 1, "", "pbkdf2_hmac"], [232, 11, 1, "", "scrypt"], [232, 11, 1, "", "sha1"], [232, 11, 1, "", "sha224"], [232, 11, 1, "", "sha256"], [232, 11, 1, "", "sha384"], [232, 11, 1, "", "sha3_224"], [232, 11, 1, "", "sha3_256"], [232, 11, 1, "", "sha3_384"], [232, 11, 1, "", "sha3_512"], [232, 11, 1, "", "sha512"], [232, 11, 1, "", "shake_128"], [232, 11, 1, "", "shake_256"]], "hashlib.blake2b": [[232, 9, 1, "", "MAX_DIGEST_SIZE"], [232, 9, 1, "", "MAX_KEY_SIZE"], [232, 9, 1, "", "PERSON_SIZE"], [232, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[232, 9, 1, "", "MAX_DIGEST_SIZE"], [232, 9, 1, "", "MAX_KEY_SIZE"], [232, 9, 1, "", "PERSON_SIZE"], [232, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[232, 9, 1, "", "block_size"], [232, 8, 1, "", "copy"], [232, 8, 1, "", "digest"], [232, 9, 1, "", "digest_size"], [232, 8, 1, "", "hexdigest"], [232, 7, 1, "", "name"], [232, 8, 1, "", "update"]], "hashlib.shake": [[232, 8, 1, "", "digest"], [232, 8, 1, "", "hexdigest"]], "heapq": [[233, 11, 1, "", "heapify"], [233, 11, 1, "", "heappop"], [233, 11, 1, "", "heappush"], [233, 11, 1, "", "heappushpop"], [233, 11, 1, "", "heapreplace"], [233, 11, 1, "", "merge"], [233, 11, 1, "", "nlargest"], [233, 11, 1, "", "nsmallest"]], "hmac.HMAC": [[234, 7, 1, "", "block_size"], [234, 8, 1, "", "copy"], [234, 8, 1, "", "digest"], [234, 7, 1, "", "digest_size"], [234, 8, 1, "", "hexdigest"], [234, 7, 1, "", "name"], [234, 8, 1, "", "update"]], "hmac": [[234, 11, 1, "", "compare_digest"], [234, 11, 1, "", "digest"], [234, 11, 1, "", "new"]], "html": [[236, 10, 0, "-", "entities"], [235, 11, 1, "", "escape"], [237, 10, 0, "-", "parser"], [235, 11, 1, "", "unescape"]], "html.entities": [[236, 9, 1, "", "codepoint2name"], [236, 9, 1, "", "entitydefs"], [236, 9, 1, "", "html5"], [236, 9, 1, "", "name2codepoint"]], "html.parser": [[237, 12, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[237, 8, 1, "", "close"], [237, 8, 1, "", "feed"], [237, 8, 1, "", "get_starttag_text"], [237, 8, 1, "", "getpos"], [237, 8, 1, "", "handle_charref"], [237, 8, 1, "", "handle_comment"], [237, 8, 1, "", "handle_data"], [237, 8, 1, "", "handle_decl"], [237, 8, 1, "", "handle_endtag"], [237, 8, 1, "", "handle_entityref"], [237, 8, 1, "", "handle_pi"], [237, 8, 1, "", "handle_startendtag"], [237, 8, 1, "", "handle_starttag"], [237, 8, 1, "", "reset"], [237, 8, 1, "", "unknown_decl"]], "http": [[238, 12, 1, "", "HTTPMethod"], [238, 12, 1, "", "HTTPStatus"], [239, 10, 0, "-", "client"], [240, 10, 0, "-", "cookiejar"], [241, 10, 0, "-", "cookies"], [242, 10, 0, "-", "server"]], "http.client": [[239, 6, 1, "", "BadStatusLine"], [239, 6, 1, "", "CannotSendHeader"], [239, 6, 1, "", "CannotSendRequest"], [239, 12, 1, "", "HTTPConnection"], [239, 6, 1, "", "HTTPException"], [239, 12, 1, "", "HTTPResponse"], [239, 12, 1, "", "HTTPSConnection"], [239, 9, 1, "", "HTTPS_PORT"], [239, 9, 1, "", "HTTP_PORT"], [239, 6, 1, "", "ImproperConnectionState"], [239, 6, 1, "", "IncompleteRead"], [239, 6, 1, "", "InvalidURL"], [239, 6, 1, "", "LineTooLong"], [239, 6, 1, "", "NotConnected"], [239, 6, 1, "", "RemoteDisconnected"], [239, 6, 1, "", "ResponseNotReady"], [239, 6, 1, "", "UnimplementedFileMode"], [239, 6, 1, "", "UnknownProtocol"], [239, 6, 1, "", "UnknownTransferEncoding"], [239, 11, 1, "", "parse_headers"], [239, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[239, 7, 1, "", "blocksize"], [239, 8, 1, "", "close"], [239, 8, 1, "", "connect"], [239, 8, 1, "", "endheaders"], [239, 8, 1, "", "get_proxy_response_headers"], [239, 8, 1, "", "getresponse"], [239, 8, 1, "", "putheader"], [239, 8, 1, "", "putrequest"], [239, 8, 1, "", "request"], [239, 8, 1, "", "send"], [239, 8, 1, "", "set_debuglevel"], [239, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[239, 7, 1, "", "closed"], [239, 7, 1, "", "debuglevel"], [239, 8, 1, "", "fileno"], [239, 8, 1, "", "getcode"], [239, 8, 1, "", "getheader"], [239, 8, 1, "", "getheaders"], [239, 8, 1, "", "geturl"], [239, 7, 1, "", "headers"], [239, 8, 1, "", "info"], [239, 7, 1, "", "msg"], [239, 8, 1, "", "read"], [239, 8, 1, "", "readinto"], [239, 7, 1, "", "reason"], [239, 7, 1, "", "status"], [239, 7, 1, "", "url"], [239, 7, 1, "", "version"]], "http.cookiejar": [[240, 12, 1, "", "Cookie"], [240, 12, 1, "", "CookieJar"], [240, 12, 1, "", "CookiePolicy"], [240, 12, 1, "", "DefaultCookiePolicy"], [240, 12, 1, "", "FileCookieJar"], [240, 12, 1, "", "LWPCookieJar"], [240, 6, 1, "", "LoadError"], [240, 12, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[240, 7, 1, "", "comment"], [240, 7, 1, "", "comment_url"], [240, 7, 1, "", "discard"], [240, 7, 1, "", "domain_initial_dot"], [240, 7, 1, "", "domain_specified"], [240, 7, 1, "", "expires"], [240, 8, 1, "", "get_nonstandard_attr"], [240, 8, 1, "", "has_nonstandard_attr"], [240, 8, 1, "", "is_expired"], [240, 7, 1, "", "name"], [240, 7, 1, "", "path"], [240, 7, 1, "", "port"], [240, 7, 1, "", "port_specified"], [240, 7, 1, "", "rfc2109"], [240, 7, 1, "", "secure"], [240, 8, 1, "", "set_nonstandard_attr"], [240, 7, 1, "", "value"], [240, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[240, 8, 1, "", "add_cookie_header"], [240, 8, 1, "", "clear"], [240, 8, 1, "", "clear_session_cookies"], [240, 8, 1, "", "extract_cookies"], [240, 8, 1, "", "make_cookies"], [240, 8, 1, "", "set_cookie"], [240, 8, 1, "", "set_cookie_if_ok"], [240, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[240, 8, 1, "", "domain_return_ok"], [240, 7, 1, "", "hide_cookie2"], [240, 7, 1, "", "netscape"], [240, 8, 1, "", "path_return_ok"], [240, 8, 1, "", "return_ok"], [240, 7, 1, "", "rfc2965"], [240, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[240, 7, 1, "", "DomainLiberal"], [240, 7, 1, "", "DomainRFC2965Match"], [240, 7, 1, "", "DomainStrict"], [240, 7, 1, "", "DomainStrictNoDots"], [240, 7, 1, "", "DomainStrictNonDomain"], [240, 8, 1, "", "allowed_domains"], [240, 8, 1, "", "blocked_domains"], [240, 8, 1, "", "is_blocked"], [240, 8, 1, "", "is_not_allowed"], [240, 7, 1, "", "rfc2109_as_netscape"], [240, 8, 1, "", "set_allowed_domains"], [240, 8, 1, "", "set_blocked_domains"], [240, 7, 1, "", "strict_domain"], [240, 7, 1, "", "strict_ns_domain"], [240, 7, 1, "", "strict_ns_set_initial_dollar"], [240, 7, 1, "", "strict_ns_set_path"], [240, 7, 1, "", "strict_ns_unverifiable"], [240, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[240, 7, 1, "", "delayload"], [240, 7, 1, "", "filename"], [240, 8, 1, "", "load"], [240, 8, 1, "", "revert"], [240, 8, 1, "", "save"]], "http.cookies": [[241, 12, 1, "", "BaseCookie"], [241, 6, 1, "", "CookieError"], [241, 12, 1, "", "Morsel"], [241, 12, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[241, 8, 1, "", "js_output"], [241, 8, 1, "", "load"], [241, 8, 1, "", "output"], [241, 8, 1, "", "value_decode"], [241, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[241, 8, 1, "", "OutputString"], [241, 7, 1, "", "coded_value"], [241, 8, 1, "", "copy"], [241, 8, 1, "", "isReservedKey"], [241, 8, 1, "", "js_output"], [241, 7, 1, "", "key"], [241, 8, 1, "", "output"], [241, 8, 1, "", "set"], [241, 8, 1, "", "setdefault"], [241, 8, 1, "", "update"], [241, 7, 1, "", "value"]], "http.server": [[242, 12, 1, "", "BaseHTTPRequestHandler"], [242, 12, 1, "", "CGIHTTPRequestHandler"], [242, 12, 1, "", "HTTPServer"], [242, 12, 1, "", "SimpleHTTPRequestHandler"], [242, 12, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[242, 7, 1, "", "MessageClass"], [242, 8, 1, "", "address_string"], [242, 7, 1, "", "client_address"], [242, 7, 1, "", "close_connection"], [242, 7, 1, "", "command"], [242, 8, 1, "", "date_time_string"], [242, 8, 1, "", "end_headers"], [242, 7, 1, "", "error_content_type"], [242, 7, 1, "", "error_message_format"], [242, 8, 1, "", "flush_headers"], [242, 8, 1, "", "handle"], [242, 8, 1, "", "handle_expect_100"], [242, 8, 1, "", "handle_one_request"], [242, 7, 1, "", "headers"], [242, 8, 1, "", "log_date_time_string"], [242, 8, 1, "", "log_error"], [242, 8, 1, "", "log_message"], [242, 8, 1, "", "log_request"], [242, 7, 1, "", "path"], [242, 7, 1, "", "protocol_version"], [242, 7, 1, "", "request_version"], [242, 7, 1, "", "requestline"], [242, 7, 1, "", "responses"], [242, 7, 1, "", "rfile"], [242, 8, 1, "", "send_error"], [242, 8, 1, "", "send_header"], [242, 8, 1, "", "send_response"], [242, 8, 1, "", "send_response_only"], [242, 7, 1, "", "server"], [242, 7, 1, "", "server_version"], [242, 7, 1, "", "sys_version"], [242, 8, 1, "", "version_string"], [242, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[242, 7, 1, "", "cgi_directories"], [242, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[242, 8, 1, "", "do_GET"], [242, 8, 1, "", "do_HEAD"], [242, 7, 1, "", "extensions_map"], [242, 7, 1, "", "server_version"]], "imaplib": [[245, 12, 1, "", "IMAP4"], [245, 12, 1, "", "IMAP4_SSL"], [245, 12, 1, "", "IMAP4_stream"], [245, 11, 1, "", "Int2AP"], [245, 11, 1, "", "Internaldate2tuple"], [245, 11, 1, "", "ParseFlags"], [245, 11, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[245, 7, 1, "", "PROTOCOL_VERSION"], [245, 6, 1, "", "abort"], [245, 8, 1, "", "append"], [245, 8, 1, "", "authenticate"], [245, 8, 1, "", "check"], [245, 8, 1, "", "close"], [245, 8, 1, "", "copy"], [245, 8, 1, "", "create"], [245, 7, 1, "", "debug"], [245, 8, 1, "", "delete"], [245, 8, 1, "", "deleteacl"], [245, 8, 1, "", "enable"], [245, 6, 1, "", "error"], [245, 8, 1, "", "expunge"], [245, 8, 1, "", "fetch"], [245, 8, 1, "", "getacl"], [245, 8, 1, "", "getannotation"], [245, 8, 1, "", "getquota"], [245, 8, 1, "", "getquotaroot"], [245, 8, 1, "", "list"], [245, 8, 1, "", "login"], [245, 8, 1, "", "login_cram_md5"], [245, 8, 1, "", "logout"], [245, 8, 1, "", "lsub"], [245, 8, 1, "", "myrights"], [245, 8, 1, "", "namespace"], [245, 8, 1, "", "noop"], [245, 8, 1, "", "open"], [245, 8, 1, "", "partial"], [245, 8, 1, "", "proxyauth"], [245, 8, 1, "", "read"], [245, 8, 1, "", "readline"], [245, 6, 1, "", "readonly"], [245, 8, 1, "", "recent"], [245, 8, 1, "", "rename"], [245, 8, 1, "", "response"], [245, 8, 1, "", "search"], [245, 8, 1, "", "select"], [245, 8, 1, "", "send"], [245, 8, 1, "", "setacl"], [245, 8, 1, "", "setannotation"], [245, 8, 1, "", "setquota"], [245, 8, 1, "", "shutdown"], [245, 8, 1, "", "socket"], [245, 8, 1, "", "sort"], [245, 8, 1, "", "starttls"], [245, 8, 1, "", "status"], [245, 8, 1, "", "store"], [245, 8, 1, "", "subscribe"], [245, 8, 1, "", "thread"], [245, 8, 1, "", "uid"], [245, 8, 1, "", "unselect"], [245, 8, 1, "", "unsubscribe"], [245, 7, 1, "", "utf8_enabled"], [245, 8, 1, "", "xatom"]], "imghdr": [[246, 9, 1, "", "tests"], [246, 11, 1, "", "what"]], "importlib": [[247, 11, 1, "", "__import__"], [247, 10, 0, "-", "abc"], [247, 11, 1, "", "import_module"], [247, 11, 1, "", "invalidate_caches"], [247, 10, 0, "-", "machinery"], [248, 10, 0, "-", "metadata"], [247, 11, 1, "", "reload"], [249, 10, 0, "-", "resources"], [247, 10, 0, "-", "util"]], "importlib.abc": [[247, 12, 1, "", "ExecutionLoader"], [247, 12, 1, "", "FileLoader"], [247, 12, 1, "", "InspectLoader"], [247, 12, 1, "", "Loader"], [247, 12, 1, "", "MetaPathFinder"], [247, 12, 1, "", "PathEntryFinder"], [247, 12, 1, "", "ResourceLoader"], [247, 12, 1, "", "SourceLoader"]], "importlib.abc.ExecutionLoader": [[247, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[247, 8, 1, "", "get_data"], [247, 8, 1, "", "get_filename"], [247, 8, 1, "", "load_module"], [247, 7, 1, "", "name"], [247, 7, 1, "", "path"]], "importlib.abc.InspectLoader": [[247, 8, 1, "", "exec_module"], [247, 8, 1, "", "get_code"], [247, 8, 1, "", "get_source"], [247, 8, 1, "", "is_package"], [247, 8, 1, "", "load_module"], [247, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[247, 8, 1, "", "create_module"], [247, 8, 1, "", "exec_module"], [247, 8, 1, "", "load_module"]], "importlib.abc.MetaPathFinder": [[247, 8, 1, "", "find_spec"], [247, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[247, 8, 1, "", "find_spec"], [247, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[247, 8, 1, "", "get_data"]], "importlib.abc.SourceLoader": [[247, 8, 1, "", "exec_module"], [247, 8, 1, "", "get_code"], [247, 8, 1, "", "get_source"], [247, 8, 1, "", "is_package"], [247, 8, 1, "", "load_module"], [247, 8, 1, "", "path_mtime"], [247, 8, 1, "", "path_stats"], [247, 8, 1, "", "set_data"]], "importlib.machinery": [[247, 7, 1, "", "BYTECODE_SUFFIXES"], [247, 12, 1, "", "BuiltinImporter"], [247, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [247, 7, 1, "", "EXTENSION_SUFFIXES"], [247, 12, 1, "", "ExtensionFileLoader"], [247, 12, 1, "", "FileFinder"], [247, 12, 1, "", "FrozenImporter"], [247, 12, 1, "", "ModuleSpec"], [247, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [247, 12, 1, "", "PathFinder"], [247, 7, 1, "", "SOURCE_SUFFIXES"], [247, 12, 1, "", "SourceFileLoader"], [247, 12, 1, "", "SourcelessFileLoader"], [247, 12, 1, "", "WindowsRegistryFinder"], [247, 11, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[247, 8, 1, "", "create_module"], [247, 8, 1, "", "exec_module"], [247, 8, 1, "", "get_code"], [247, 8, 1, "", "get_filename"], [247, 8, 1, "", "get_source"], [247, 8, 1, "", "is_package"], [247, 7, 1, "", "name"], [247, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[247, 8, 1, "", "find_spec"], [247, 8, 1, "", "invalidate_caches"], [247, 7, 1, "", "path"], [247, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[247, 7, 1, "", "cached"], [247, 7, 1, "", "has_location"], [247, 7, 1, "", "loader"], [247, 7, 1, "", "loader_state"], [247, 7, 1, "", "name"], [247, 7, 1, "", "origin"], [247, 7, 1, "", "parent"], [247, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[247, 8, 1, "", "find_spec"], [247, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[247, 8, 1, "", "is_package"], [247, 8, 1, "", "load_module"], [247, 7, 1, "", "name"], [247, 7, 1, "", "path"], [247, 8, 1, "", "path_stats"], [247, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[247, 8, 1, "", "get_code"], [247, 8, 1, "", "get_source"], [247, 8, 1, "", "is_package"], [247, 8, 1, "", "load_module"], [247, 7, 1, "", "name"], [247, 7, 1, "", "path"]], "importlib.resources": [[249, 9, 1, "", "Anchor"], [249, 9, 1, "", "Package"], [249, 9, 1, "", "Resource"], [250, 10, 0, "-", "abc"], [249, 11, 1, "", "as_file"], [249, 11, 1, "", "contents"], [249, 11, 1, "", "files"], [249, 11, 1, "", "is_resource"], [249, 11, 1, "", "open_binary"], [249, 11, 1, "", "open_text"], [249, 11, 1, "", "path"], [249, 11, 1, "", "read_binary"], [249, 11, 1, "", "read_text"]], "importlib.resources.abc": [[250, 12, 1, "", "ResourceReader"], [250, 12, 1, "", "Traversable"], [250, 12, 1, "", "TraversableResources"]], "importlib.resources.abc.ResourceReader": [[250, 8, 1, "", "contents"], [250, 8, 1, "", "is_resource"], [250, 8, 1, "", "open_resource"], [250, 8, 1, "", "resource_path"]], "importlib.resources.abc.Traversable": [[250, 8, 1, "", "__truediv__"], [250, 8, 1, "", "is_dir"], [250, 8, 1, "", "is_file"], [250, 8, 1, "", "iterdir"], [250, 8, 1, "", "joinpath"], [250, 7, 1, "", "name"], [250, 8, 1, "", "open"], [250, 8, 1, "", "read_bytes"], [250, 8, 1, "", "read_text"]], "importlib.resources.abc.TraversableResources": [[250, 8, 1, "", "files"]], "importlib.util": [[247, 12, 1, "", "LazyLoader"], [247, 7, 1, "", "MAGIC_NUMBER"], [247, 11, 1, "", "_incompatible_extension_module_restrictions"], [247, 11, 1, "", "cache_from_source"], [247, 11, 1, "", "decode_source"], [247, 11, 1, "", "find_spec"], [247, 11, 1, "", "module_from_spec"], [247, 11, 1, "", "resolve_name"], [247, 11, 1, "", "source_from_cache"], [247, 11, 1, "", "source_hash"], [247, 11, 1, "", "spec_from_file_location"], [247, 11, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[247, 8, 1, "", "factory"]], "inspect": [[252, 12, 1, "", "BoundArguments"], [252, 12, 1, "", "BufferFlags"], [252, 9, 1, "", "CO_ASYNC_GENERATOR"], [252, 9, 1, "", "CO_COROUTINE"], [252, 9, 1, "", "CO_GENERATOR"], [252, 9, 1, "", "CO_ITERABLE_COROUTINE"], [252, 9, 1, "", "CO_NESTED"], [252, 9, 1, "", "CO_NEWLOCALS"], [252, 9, 1, "", "CO_OPTIMIZED"], [252, 9, 1, "", "CO_VARARGS"], [252, 9, 1, "", "CO_VARKEYWORDS"], [252, 12, 1, "", "FrameInfo"], [252, 12, 1, "", "Parameter"], [252, 12, 1, "", "Signature"], [252, 12, 1, "", "Traceback"], [252, 11, 1, "", "cleandoc"], [252, 11, 1, "", "currentframe"], [252, 11, 1, "", "formatargvalues"], [252, 11, 1, "", "get_annotations"], [252, 11, 1, "", "getargvalues"], [252, 11, 1, "", "getasyncgenlocals"], [252, 11, 1, "", "getasyncgenstate"], [252, 11, 1, "", "getattr_static"], [252, 11, 1, "", "getcallargs"], [252, 11, 1, "", "getclasstree"], [252, 11, 1, "", "getclosurevars"], [252, 11, 1, "", "getcomments"], [252, 11, 1, "", "getcoroutinelocals"], [252, 11, 1, "", "getcoroutinestate"], [252, 11, 1, "", "getdoc"], [252, 11, 1, "", "getfile"], [252, 11, 1, "", "getframeinfo"], [252, 11, 1, "", "getfullargspec"], [252, 11, 1, "", "getgeneratorlocals"], [252, 11, 1, "", "getgeneratorstate"], [252, 11, 1, "", "getinnerframes"], [252, 11, 1, "", "getmembers"], [252, 11, 1, "", "getmembers_static"], [252, 11, 1, "", "getmodule"], [252, 11, 1, "", "getmodulename"], [252, 11, 1, "", "getmro"], [252, 11, 1, "", "getouterframes"], [252, 11, 1, "", "getsource"], [252, 11, 1, "", "getsourcefile"], [252, 11, 1, "", "getsourcelines"], [252, 11, 1, "", "isabstract"], [252, 11, 1, "", "isasyncgen"], [252, 11, 1, "", "isasyncgenfunction"], [252, 11, 1, "", "isawaitable"], [252, 11, 1, "", "isbuiltin"], [252, 11, 1, "", "isclass"], [252, 11, 1, "", "iscode"], [252, 11, 1, "", "iscoroutine"], [252, 11, 1, "", "iscoroutinefunction"], [252, 11, 1, "", "isdatadescriptor"], [252, 11, 1, "", "isframe"], [252, 11, 1, "", "isfunction"], [252, 11, 1, "", "isgenerator"], [252, 11, 1, "", "isgeneratorfunction"], [252, 11, 1, "", "isgetsetdescriptor"], [252, 11, 1, "", "ismemberdescriptor"], [252, 11, 1, "", "ismethod"], [252, 11, 1, "", "ismethoddescriptor"], [252, 11, 1, "", "ismethodwrapper"], [252, 11, 1, "", "ismodule"], [252, 11, 1, "", "isroutine"], [252, 11, 1, "", "istraceback"], [252, 11, 1, "", "markcoroutinefunction"], [252, 11, 1, "", "signature"], [252, 11, 1, "", "stack"], [252, 11, 1, "", "trace"], [252, 11, 1, "", "unwrap"], [252, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[252, 8, 1, "", "apply_defaults"], [252, 7, 1, "", "args"], [252, 7, 1, "", "arguments"], [252, 7, 1, "", "kwargs"], [252, 7, 1, "", "signature"]], "inspect.BufferFlags": [[252, 7, 1, "", "ANY_CONTIGUOUS"], [252, 7, 1, "", "CONTIG"], [252, 7, 1, "", "CONTIG_RO"], [252, 7, 1, "", "C_CONTIGUOUS"], [252, 7, 1, "", "FORMAT"], [252, 7, 1, "", "FULL"], [252, 7, 1, "", "FULL_RO"], [252, 7, 1, "", "F_CONTIGUOUS"], [252, 7, 1, "", "INDIRECT"], [252, 7, 1, "", "ND"], [252, 7, 1, "", "READ"], [252, 7, 1, "", "RECORDS"], [252, 7, 1, "", "RECORDS_RO"], [252, 7, 1, "", "SIMPLE"], [252, 7, 1, "", "STRIDED"], [252, 7, 1, "", "STRIDED_RO"], [252, 7, 1, "", "STRIDES"], [252, 7, 1, "", "WRITABLE"], [252, 7, 1, "", "WRITE"]], "inspect.FrameInfo": [[252, 7, 1, "", "code_context"], [252, 7, 1, "", "filename"], [252, 7, 1, "", "frame"], [252, 7, 1, "", "function"], [252, 7, 1, "", "index"], [252, 7, 1, "", "lineno"], [252, 7, 1, "", "positions"]], "inspect.Parameter": [[252, 7, 1, "", "annotation"], [252, 7, 1, "", "default"], [252, 7, 1, "", "empty"], [252, 7, 1, "", "kind"], [252, 7, 1, "", "name"], [252, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[252, 7, 1, "", "description"]], "inspect.Signature": [[252, 8, 1, "", "bind"], [252, 8, 1, "", "bind_partial"], [252, 7, 1, "", "empty"], [252, 8, 1, "", "from_callable"], [252, 7, 1, "", "parameters"], [252, 8, 1, "", "replace"], [252, 7, 1, "", "return_annotation"]], "inspect.Traceback": [[252, 7, 1, "", "code_context"], [252, 7, 1, "", "filename"], [252, 7, 1, "", "function"], [252, 7, 1, "", "index"], [252, 7, 1, "", "lineno"], [252, 7, 1, "", "positions"]], "instance": [[341, 7, 1, "", "__class__"]], "int": [[341, 8, 1, "", "as_integer_ratio"], [341, 8, 1, "", "bit_count"], [341, 8, 1, "", "bit_length"], [341, 8, 1, "", "from_bytes"], [341, 8, 1, "", "is_integer"], [341, 8, 1, "", "to_bytes"]], "io": [[255, 6, 1, "", "BlockingIOError"], [255, 12, 1, "", "BufferedIOBase"], [255, 12, 1, "", "BufferedRWPair"], [255, 12, 1, "", "BufferedRandom"], [255, 12, 1, "", "BufferedReader"], [255, 12, 1, "", "BufferedWriter"], [255, 12, 1, "", "BytesIO"], [255, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [255, 12, 1, "", "FileIO"], [255, 12, 1, "", "IOBase"], [255, 12, 1, "", "IncrementalNewlineDecoder"], [255, 12, 1, "", "RawIOBase"], [255, 12, 1, "", "StringIO"], [255, 12, 1, "", "TextIOBase"], [255, 12, 1, "", "TextIOWrapper"], [255, 6, 1, "", "UnsupportedOperation"], [255, 11, 1, "", "open"], [255, 11, 1, "", "open_code"], [255, 11, 1, "", "text_encoding"]], "io.BufferedIOBase": [[255, 8, 1, "", "detach"], [255, 7, 1, "", "raw"], [255, 8, 1, "", "read"], [255, 8, 1, "", "read1"], [255, 8, 1, "", "readinto"], [255, 8, 1, "", "readinto1"], [255, 8, 1, "", "write"]], "io.BufferedReader": [[255, 8, 1, "", "peek"], [255, 8, 1, "", "read"], [255, 8, 1, "", "read1"]], "io.BufferedWriter": [[255, 8, 1, "", "flush"], [255, 8, 1, "", "write"]], "io.BytesIO": [[255, 8, 1, "", "getbuffer"], [255, 8, 1, "", "getvalue"], [255, 8, 1, "", "read1"], [255, 8, 1, "", "readinto1"]], "io.FileIO": [[255, 7, 1, "", "mode"], [255, 7, 1, "", "name"]], "io.IOBase": [[255, 8, 1, "", "__del__"], [255, 8, 1, "", "close"], [255, 7, 1, "", "closed"], [255, 8, 1, "", "fileno"], [255, 8, 1, "", "flush"], [255, 8, 1, "", "isatty"], [255, 8, 1, "", "readable"], [255, 8, 1, "", "readline"], [255, 8, 1, "", "readlines"], [255, 8, 1, "", "seek"], [255, 8, 1, "", "seekable"], [255, 8, 1, "", "tell"], [255, 8, 1, "", "truncate"], [255, 8, 1, "", "writable"], [255, 8, 1, "", "writelines"]], "io.RawIOBase": [[255, 8, 1, "", "read"], [255, 8, 1, "", "readall"], [255, 8, 1, "", "readinto"], [255, 8, 1, "", "write"]], "io.StringIO": [[255, 8, 1, "", "getvalue"]], "io.TextIOBase": [[255, 7, 1, "", "buffer"], [255, 8, 1, "", "detach"], [255, 7, 1, "", "encoding"], [255, 7, 1, "", "errors"], [255, 7, 1, "", "newlines"], [255, 8, 1, "", "read"], [255, 8, 1, "", "readline"], [255, 8, 1, "", "seek"], [255, 8, 1, "", "tell"], [255, 8, 1, "", "write"]], "io.TextIOWrapper": [[255, 7, 1, "", "line_buffering"], [255, 8, 1, "", "reconfigure"], [255, 7, 1, "", "write_through"]], "ipaddress": [[256, 6, 1, "", "AddressValueError"], [256, 12, 1, "", "IPv4Address"], [256, 12, 1, "", "IPv4Interface"], [256, 12, 1, "", "IPv4Network"], [256, 12, 1, "", "IPv6Address"], [256, 12, 1, "", "IPv6Interface"], [256, 12, 1, "", "IPv6Network"], [256, 6, 1, "", "NetmaskValueError"], [256, 11, 1, "", "collapse_addresses"], [256, 11, 1, "", "get_mixed_type_key"], [256, 11, 1, "", "ip_address"], [256, 11, 1, "", "ip_interface"], [256, 11, 1, "", "ip_network"], [256, 11, 1, "", "summarize_address_range"], [256, 11, 1, "", "v4_int_to_packed"], [256, 11, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[256, 8, 1, "", "__format__"], [256, 7, 1, "", "compressed"], [256, 7, 1, "", "exploded"], [256, 7, 1, "", "is_global"], [256, 7, 1, "", "is_link_local"], [256, 7, 1, "", "is_loopback"], [256, 7, 1, "", "is_multicast"], [256, 7, 1, "", "is_private"], [256, 7, 1, "", "is_reserved"], [256, 7, 1, "", "is_unspecified"], [256, 7, 1, "", "max_prefixlen"], [256, 7, 1, "", "packed"], [256, 7, 1, "", "reverse_pointer"], [256, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[256, 7, 1, "", "ip"], [256, 7, 1, "", "network"], [256, 7, 1, "", "with_hostmask"], [256, 7, 1, "", "with_netmask"], [256, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[256, 8, 1, "", "address_exclude"], [256, 7, 1, "", "broadcast_address"], [256, 8, 1, "", "compare_networks"], [256, 7, 1, "", "compressed"], [256, 7, 1, "", "exploded"], [256, 7, 1, "", "hostmask"], [256, 8, 1, "", "hosts"], [256, 7, 1, "", "is_link_local"], [256, 7, 1, "", "is_loopback"], [256, 7, 1, "", "is_multicast"], [256, 7, 1, "", "is_private"], [256, 7, 1, "", "is_reserved"], [256, 7, 1, "", "is_unspecified"], [256, 7, 1, "", "max_prefixlen"], [256, 7, 1, "", "netmask"], [256, 7, 1, "", "network_address"], [256, 7, 1, "", "num_addresses"], [256, 8, 1, "", "overlaps"], [256, 7, 1, "", "prefixlen"], [256, 8, 1, "", "subnet_of"], [256, 8, 1, "", "subnets"], [256, 8, 1, "", "supernet"], [256, 8, 1, "", "supernet_of"], [256, 7, 1, "", "version"], [256, 7, 1, "", "with_hostmask"], [256, 7, 1, "", "with_netmask"], [256, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[256, 8, 1, "", "__format__"], [256, 7, 1, "", "compressed"], [256, 7, 1, "", "exploded"], [256, 7, 1, "", "ipv4_mapped"], [256, 7, 1, "", "is_global"], [256, 7, 1, "", "is_link_local"], [256, 7, 1, "", "is_loopback"], [256, 7, 1, "", "is_multicast"], [256, 7, 1, "", "is_private"], [256, 7, 1, "", "is_reserved"], [256, 7, 1, "", "is_site_local"], [256, 7, 1, "", "is_unspecified"], [256, 7, 1, "", "max_prefixlen"], [256, 7, 1, "", "packed"], [256, 7, 1, "", "reverse_pointer"], [256, 7, 1, "", "scope_id"], [256, 7, 1, "", "sixtofour"], [256, 7, 1, "", "teredo"], [256, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[256, 7, 1, "", "ip"], [256, 7, 1, "", "network"], [256, 7, 1, "", "with_hostmask"], [256, 7, 1, "", "with_netmask"], [256, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[256, 8, 1, "", "address_exclude"], [256, 7, 1, "", "broadcast_address"], [256, 8, 1, "", "compare_networks"], [256, 7, 1, "", "compressed"], [256, 7, 1, "", "exploded"], [256, 7, 1, "", "hostmask"], [256, 8, 1, "", "hosts"], [256, 7, 1, "", "is_link_local"], [256, 7, 1, "", "is_loopback"], [256, 7, 1, "", "is_multicast"], [256, 7, 1, "", "is_private"], [256, 7, 1, "", "is_reserved"], [256, 7, 1, "", "is_site_local"], [256, 7, 1, "", "is_unspecified"], [256, 7, 1, "", "max_prefixlen"], [256, 7, 1, "", "netmask"], [256, 7, 1, "", "network_address"], [256, 7, 1, "", "num_addresses"], [256, 8, 1, "", "overlaps"], [256, 7, 1, "", "prefixlen"], [256, 8, 1, "", "subnet_of"], [256, 8, 1, "", "subnets"], [256, 8, 1, "", "supernet"], [256, 8, 1, "", "supernet_of"], [256, 7, 1, "", "version"], [256, 7, 1, "", "with_hostmask"], [256, 7, 1, "", "with_netmask"], [256, 7, 1, "", "with_prefixlen"]], "iterator": [[341, 8, 1, "", "__iter__"], [341, 8, 1, "", "__next__"]], "itertools": [[258, 11, 1, "", "accumulate"], [258, 11, 1, "", "batched"], [258, 11, 1, "", "chain"], [258, 11, 1, "", "combinations"], [258, 11, 1, "", "combinations_with_replacement"], [258, 11, 1, "", "compress"], [258, 11, 1, "", "count"], [258, 11, 1, "", "cycle"], [258, 11, 1, "", "dropwhile"], [258, 11, 1, "", "filterfalse"], [258, 11, 1, "", "groupby"], [258, 11, 1, "", "islice"], [258, 11, 1, "", "pairwise"], [258, 11, 1, "", "permutations"], [258, 11, 1, "", "product"], [258, 11, 1, "", "repeat"], [258, 11, 1, "", "starmap"], [258, 11, 1, "", "takewhile"], [258, 11, 1, "", "tee"], [258, 11, 1, "", "zip_longest"]], "itertools.chain": [[258, 8, 1, "", "from_iterable"]], "json": [[259, 6, 1, "", "JSONDecodeError"], [259, 12, 1, "", "JSONDecoder"], [259, 12, 1, "", "JSONEncoder"], [259, 11, 1, "", "dump"], [259, 11, 1, "", "dumps"], [259, 11, 1, "", "load"], [259, 11, 1, "", "loads"], [259, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[259, 7, 1, "", "colno"], [259, 7, 1, "", "doc"], [259, 7, 1, "", "lineno"], [259, 7, 1, "", "msg"], [259, 7, 1, "", "pos"]], "json.JSONDecoder": [[259, 8, 1, "", "decode"], [259, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[259, 8, 1, "", "default"], [259, 8, 1, "", "encode"], [259, 8, 1, "", "iterencode"]], "keyword": [[260, 11, 1, "", "iskeyword"], [260, 11, 1, "", "issoftkeyword"], [260, 9, 1, "", "kwlist"], [260, 9, 1, "", "softkwlist"]], "linecache": [[262, 11, 1, "", "checkcache"], [262, 11, 1, "", "clearcache"], [262, 11, 1, "", "getline"], [262, 11, 1, "", "lazycache"]], "list": [[341, 8, 1, "", "sort"]], "locale": [[263, 9, 1, "", "ALT_DIGITS"], [263, 9, 1, "", "CHAR_MAX"], [263, 9, 1, "", "CODESET"], [263, 9, 1, "", "CRNCYSTR"], [263, 9, 1, "", "D_FMT"], [263, 9, 1, "", "D_T_FMT"], [263, 9, 1, "", "ERA"], [263, 9, 1, "", "ERA_D_FMT"], [263, 9, 1, "", "ERA_D_T_FMT"], [263, 9, 1, "", "ERA_T_FMT"], [263, 6, 1, "", "Error"], [263, 9, 1, "", "LC_ALL"], [263, 9, 1, "", "LC_COLLATE"], [263, 9, 1, "", "LC_CTYPE"], [263, 9, 1, "", "LC_MESSAGES"], [263, 9, 1, "", "LC_MONETARY"], [263, 9, 1, "", "LC_NUMERIC"], [263, 9, 1, "", "LC_TIME"], [263, 9, 1, "", "NOEXPR"], [263, 9, 1, "", "RADIXCHAR"], [263, 9, 1, "", "THOUSEP"], [263, 9, 1, "", "T_FMT"], [263, 9, 1, "", "T_FMT_AMPM"], [263, 9, 1, "", "YESEXPR"], [263, 11, 1, "", "atof"], [263, 11, 1, "", "atoi"], [263, 11, 1, "", "bindtextdomain"], [263, 11, 1, "", "currency"], [263, 11, 1, "", "dcgettext"], [263, 11, 1, "", "delocalize"], [263, 11, 1, "", "dgettext"], [263, 11, 1, "", "format_string"], [263, 11, 1, "", "getdefaultlocale"], [263, 11, 1, "", "getencoding"], [263, 11, 1, "", "getlocale"], [263, 11, 1, "", "getpreferredencoding"], [263, 11, 1, "", "gettext"], [263, 11, 1, "", "localeconv"], [263, 11, 1, "", "localize"], [263, 11, 1, "", "nl_langinfo"], [263, 11, 1, "", "normalize"], [263, 11, 1, "", "resetlocale"], [263, 11, 1, "", "setlocale"], [263, 11, 1, "", "str"], [263, 11, 1, "", "strcoll"], [263, 11, 1, "", "strxfrm"], [263, 11, 1, "", "textdomain"]], "logging": [[264, 12, 1, "", "BufferingFormatter"], [264, 9, 1, "", "CRITICAL"], [264, 9, 1, "", "DEBUG"], [264, 9, 1, "", "ERROR"], [266, 12, 1, "", "FileHandler"], [264, 12, 1, "", "Filter"], [264, 12, 1, "", "Formatter"], [264, 12, 1, "", "Handler"], [264, 9, 1, "", "INFO"], [264, 12, 1, "", "LogRecord"], [264, 12, 1, "", "Logger"], [264, 12, 1, "", "LoggerAdapter"], [264, 9, 1, "", "NOTSET"], [266, 12, 1, "", "NullHandler"], [266, 12, 1, "", "StreamHandler"], [264, 9, 1, "", "WARNING"], [264, 11, 1, "", "addLevelName"], [264, 11, 1, "", "basicConfig"], [264, 11, 1, "", "captureWarnings"], [265, 10, 0, "-", "config"], [264, 11, 1, "", "critical"], [264, 11, 1, "", "debug"], [264, 11, 1, "", "disable"], [264, 11, 1, "", "error"], [264, 11, 1, "", "exception"], [264, 11, 1, "", "getHandlerByName"], [264, 11, 1, "", "getHandlerNames"], [264, 11, 1, "", "getLevelName"], [264, 11, 1, "", "getLevelNamesMapping"], [264, 11, 1, "", "getLogRecordFactory"], [264, 11, 1, "", "getLogger"], [264, 11, 1, "", "getLoggerClass"], [266, 10, 0, "-", "handlers"], [264, 11, 1, "", "info"], [264, 7, 1, "", "lastResort"], [264, 11, 1, "", "log"], [264, 11, 1, "", "makeLogRecord"], [264, 11, 1, "", "setLogRecordFactory"], [264, 11, 1, "", "setLoggerClass"], [264, 11, 1, "", "shutdown"], [264, 11, 1, "", "warning"]], "logging.BufferingFormatter": [[264, 8, 1, "", "format"], [264, 8, 1, "", "formatFooter"], [264, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[266, 8, 1, "", "close"], [266, 8, 1, "", "emit"]], "logging.Filter": [[264, 8, 1, "", "filter"]], "logging.Formatter": [[264, 8, 1, "", "format"], [264, 8, 1, "", "formatException"], [264, 8, 1, "", "formatStack"], [264, 8, 1, "", "formatTime"]], "logging.Handler": [[264, 8, 1, "", "__init__"], [264, 8, 1, "", "acquire"], [264, 8, 1, "", "addFilter"], [264, 8, 1, "", "close"], [264, 8, 1, "", "createLock"], [264, 8, 1, "", "emit"], [264, 8, 1, "", "filter"], [264, 8, 1, "", "flush"], [264, 8, 1, "", "format"], [264, 8, 1, "", "handle"], [264, 8, 1, "", "handleError"], [264, 8, 1, "", "release"], [264, 8, 1, "", "removeFilter"], [264, 8, 1, "", "setFormatter"], [264, 8, 1, "", "setLevel"]], "logging.LogRecord": [[264, 8, 1, "", "getMessage"]], "logging.Logger": [[264, 8, 1, "", "addFilter"], [264, 8, 1, "", "addHandler"], [264, 8, 1, "", "critical"], [264, 8, 1, "", "debug"], [264, 8, 1, "", "error"], [264, 8, 1, "", "exception"], [264, 8, 1, "", "filter"], [264, 8, 1, "", "findCaller"], [264, 8, 1, "", "getChild"], [264, 8, 1, "", "getChildren"], [264, 8, 1, "", "getEffectiveLevel"], [264, 8, 1, "", "handle"], [264, 8, 1, "", "hasHandlers"], [264, 8, 1, "", "info"], [264, 8, 1, "", "isEnabledFor"], [264, 8, 1, "", "log"], [264, 8, 1, "", "makeRecord"], [264, 7, 1, "", "propagate"], [264, 8, 1, "", "removeFilter"], [264, 8, 1, "", "removeHandler"], [264, 8, 1, "", "setLevel"], [264, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[264, 8, 1, "", "process"]], "logging.NullHandler": [[266, 8, 1, "", "createLock"], [266, 8, 1, "", "emit"], [266, 8, 1, "", "handle"]], "logging.StreamHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "flush"], [266, 8, 1, "", "setStream"], [266, 7, 1, "", "terminator"]], "logging.config": [[265, 11, 1, "", "dictConfig"], [265, 11, 1, "", "fileConfig"], [265, 11, 1, "", "listen"], [265, 11, 1, "", "stopListening"]], "logging.handlers": [[266, 12, 1, "", "BaseRotatingHandler"], [266, 12, 1, "", "BufferingHandler"], [266, 12, 1, "", "DatagramHandler"], [266, 12, 1, "", "HTTPHandler"], [266, 12, 1, "", "MemoryHandler"], [266, 12, 1, "", "NTEventLogHandler"], [266, 12, 1, "", "QueueHandler"], [266, 12, 1, "", "QueueListener"], [266, 12, 1, "", "RotatingFileHandler"], [266, 12, 1, "", "SMTPHandler"], [266, 12, 1, "", "SocketHandler"], [266, 12, 1, "", "SysLogHandler"], [266, 12, 1, "", "TimedRotatingFileHandler"], [266, 12, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[266, 7, 1, "", "namer"], [266, 8, 1, "", "rotate"], [266, 8, 1, "", "rotation_filename"], [266, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "flush"], [266, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "makeSocket"], [266, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[266, 8, 1, "", "close"], [266, 8, 1, "", "flush"], [266, 8, 1, "", "setTarget"], [266, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[266, 8, 1, "", "close"], [266, 8, 1, "", "emit"], [266, 8, 1, "", "getEventCategory"], [266, 8, 1, "", "getEventType"], [266, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "enqueue"], [266, 7, 1, "", "listener"], [266, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[266, 8, 1, "", "dequeue"], [266, 8, 1, "", "enqueue_sentinel"], [266, 8, 1, "", "handle"], [266, 8, 1, "", "prepare"], [266, 8, 1, "", "start"], [266, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[266, 8, 1, "", "doRollover"], [266, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[266, 8, 1, "", "close"], [266, 8, 1, "", "createSocket"], [266, 8, 1, "", "emit"], [266, 8, 1, "", "handleError"], [266, 8, 1, "", "makePickle"], [266, 8, 1, "", "makeSocket"], [266, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[266, 8, 1, "", "close"], [266, 8, 1, "", "createSocket"], [266, 8, 1, "", "emit"], [266, 8, 1, "", "encodePriority"], [266, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[266, 8, 1, "", "doRollover"], [266, 8, 1, "", "emit"], [266, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[266, 8, 1, "", "emit"], [266, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[99, 8, 1, "", "__init__"]], "lzma": [[267, 12, 1, "", "LZMACompressor"], [267, 12, 1, "", "LZMADecompressor"], [267, 6, 1, "", "LZMAError"], [267, 12, 1, "", "LZMAFile"], [267, 11, 1, "", "compress"], [267, 11, 1, "", "decompress"], [267, 11, 1, "", "is_check_supported"], [267, 11, 1, "", "open"]], "lzma.LZMACompressor": [[267, 8, 1, "", "compress"], [267, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[267, 7, 1, "", "check"], [267, 8, 1, "", "decompress"], [267, 7, 1, "", "eof"], [267, 7, 1, "", "needs_input"], [267, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[267, 8, 1, "", "peek"]], "mailbox": [[268, 12, 1, "", "Babyl"], [268, 12, 1, "", "BabylMessage"], [268, 6, 1, "", "Error"], [268, 6, 1, "", "ExternalClashError"], [268, 6, 1, "", "FormatError"], [268, 12, 1, "", "MH"], [268, 12, 1, "", "MHMessage"], [268, 12, 1, "", "MMDF"], [268, 12, 1, "", "MMDFMessage"], [268, 12, 1, "", "Mailbox"], [268, 12, 1, "", "Maildir"], [268, 12, 1, "", "MaildirMessage"], [268, 12, 1, "", "Message"], [268, 6, 1, "", "NoSuchMailboxError"], [268, 6, 1, "", "NotEmptyError"], [268, 12, 1, "", "mbox"], [268, 12, 1, "", "mboxMessage"]], "mailbox.Babyl": [[268, 8, 1, "", "get_file"], [268, 8, 1, "", "get_labels"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[268, 8, 1, "", "add_label"], [268, 8, 1, "", "get_labels"], [268, 8, 1, "", "get_visible"], [268, 8, 1, "", "remove_label"], [268, 8, 1, "", "set_labels"], [268, 8, 1, "", "set_visible"], [268, 8, 1, "", "update_visible"]], "mailbox.MH": [[268, 8, 1, "", "__delitem__"], [268, 8, 1, "", "add_folder"], [268, 8, 1, "", "close"], [268, 8, 1, "", "discard"], [268, 8, 1, "", "flush"], [268, 8, 1, "", "get_file"], [268, 8, 1, "", "get_folder"], [268, 8, 1, "", "get_sequences"], [268, 8, 1, "", "list_folders"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "pack"], [268, 8, 1, "", "remove"], [268, 8, 1, "", "remove_folder"], [268, 8, 1, "", "set_sequences"], [268, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[268, 8, 1, "", "add_sequence"], [268, 8, 1, "", "get_sequences"], [268, 8, 1, "", "remove_sequence"], [268, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[268, 8, 1, "", "get_file"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[268, 8, 1, "", "add_flag"], [268, 8, 1, "", "get_flags"], [268, 8, 1, "", "get_from"], [268, 8, 1, "", "remove_flag"], [268, 8, 1, "", "set_flags"], [268, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[268, 8, 1, "", "__contains__"], [268, 8, 1, "", "__delitem__"], [268, 8, 1, "", "__getitem__"], [268, 8, 1, "", "__iter__"], [268, 8, 1, "", "__len__"], [268, 8, 1, "", "__setitem__"], [268, 8, 1, "", "add"], [268, 8, 1, "", "clear"], [268, 8, 1, "", "close"], [268, 8, 1, "", "discard"], [268, 8, 1, "", "flush"], [268, 8, 1, "", "get"], [268, 8, 1, "", "get_bytes"], [268, 8, 1, "", "get_file"], [268, 8, 1, "", "get_message"], [268, 8, 1, "", "get_string"], [268, 8, 1, "", "items"], [268, 8, 1, "", "iteritems"], [268, 8, 1, "", "iterkeys"], [268, 8, 1, "", "itervalues"], [268, 8, 1, "", "keys"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "pop"], [268, 8, 1, "", "popitem"], [268, 8, 1, "", "remove"], [268, 8, 1, "", "unlock"], [268, 8, 1, "", "update"], [268, 8, 1, "", "values"]], "mailbox.Maildir": [[268, 8, 1, "", "__setitem__"], [268, 8, 1, "", "add"], [268, 8, 1, "", "add_folder"], [268, 8, 1, "", "clean"], [268, 8, 1, "", "close"], [268, 8, 1, "", "flush"], [268, 8, 1, "", "get_file"], [268, 8, 1, "", "get_folder"], [268, 8, 1, "", "list_folders"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "remove_folder"], [268, 8, 1, "", "unlock"], [268, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[268, 8, 1, "", "add_flag"], [268, 8, 1, "", "get_date"], [268, 8, 1, "", "get_flags"], [268, 8, 1, "", "get_info"], [268, 8, 1, "", "get_subdir"], [268, 8, 1, "", "remove_flag"], [268, 8, 1, "", "set_date"], [268, 8, 1, "", "set_flags"], [268, 8, 1, "", "set_info"], [268, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[268, 8, 1, "", "get_file"], [268, 8, 1, "", "lock"], [268, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[268, 8, 1, "", "add_flag"], [268, 8, 1, "", "get_flags"], [268, 8, 1, "", "get_from"], [268, 8, 1, "", "remove_flag"], [268, 8, 1, "", "set_flags"], [268, 8, 1, "", "set_from"]], "mailcap": [[269, 11, 1, "", "findmatch"], [269, 11, 1, "", "getcaps"]], "marshal": [[271, 11, 1, "", "dump"], [271, 11, 1, "", "dumps"], [271, 11, 1, "", "load"], [271, 11, 1, "", "loads"], [271, 9, 1, "", "version"]], "math": [[272, 11, 1, "", "acos"], [272, 11, 1, "", "acosh"], [272, 11, 1, "", "asin"], [272, 11, 1, "", "asinh"], [272, 11, 1, "", "atan"], [272, 11, 1, "", "atan2"], [272, 11, 1, "", "atanh"], [272, 11, 1, "", "cbrt"], [272, 11, 1, "", "ceil"], [272, 11, 1, "", "comb"], [272, 11, 1, "", "copysign"], [272, 11, 1, "", "cos"], [272, 11, 1, "", "cosh"], [272, 11, 1, "", "degrees"], [272, 11, 1, "", "dist"], [272, 9, 1, "", "e"], [272, 11, 1, "", "erf"], [272, 11, 1, "", "erfc"], [272, 11, 1, "", "exp"], [272, 11, 1, "", "exp2"], [272, 11, 1, "", "expm1"], [272, 11, 1, "", "fabs"], [272, 11, 1, "", "factorial"], [272, 11, 1, "", "floor"], [272, 11, 1, "", "fmod"], [272, 11, 1, "", "frexp"], [272, 11, 1, "", "fsum"], [272, 11, 1, "", "gamma"], [272, 11, 1, "", "gcd"], [272, 11, 1, "", "hypot"], [272, 9, 1, "", "inf"], [272, 11, 1, "", "isclose"], [272, 11, 1, "", "isfinite"], [272, 11, 1, "", "isinf"], [272, 11, 1, "", "isnan"], [272, 11, 1, "", "isqrt"], [272, 11, 1, "", "lcm"], [272, 11, 1, "", "ldexp"], [272, 11, 1, "", "lgamma"], [272, 11, 1, "", "log"], [272, 11, 1, "", "log10"], [272, 11, 1, "", "log1p"], [272, 11, 1, "", "log2"], [272, 11, 1, "", "modf"], [272, 9, 1, "", "nan"], [272, 11, 1, "", "nextafter"], [272, 11, 1, "", "perm"], [272, 9, 1, "", "pi"], [272, 11, 1, "", "pow"], [272, 11, 1, "", "prod"], [272, 11, 1, "", "radians"], [272, 11, 1, "", "remainder"], [272, 11, 1, "", "sin"], [272, 11, 1, "", "sinh"], [272, 11, 1, "", "sqrt"], [272, 11, 1, "", "sumprod"], [272, 11, 1, "", "tan"], [272, 11, 1, "", "tanh"], [272, 9, 1, "", "tau"], [272, 11, 1, "", "trunc"], [272, 11, 1, "", "ulp"]], "memoryview": [[341, 8, 1, "", "__eq__"], [341, 7, 1, "", "c_contiguous"], [341, 8, 1, "", "cast"], [341, 7, 1, "", "contiguous"], [341, 7, 1, "", "f_contiguous"], [341, 7, 1, "", "format"], [341, 8, 1, "", "hex"], [341, 7, 1, "", "itemsize"], [341, 7, 1, "", "nbytes"], [341, 7, 1, "", "ndim"], [341, 7, 1, "", "obj"], [341, 7, 1, "", "readonly"], [341, 8, 1, "", "release"], [341, 7, 1, "", "shape"], [341, 7, 1, "", "strides"], [341, 7, 1, "", "suboffsets"], [341, 8, 1, "", "tobytes"], [341, 8, 1, "", "tolist"], [341, 8, 1, "", "toreadonly"]], "mimetypes": [[273, 12, 1, "", "MimeTypes"], [273, 11, 1, "", "add_type"], [273, 9, 1, "", "common_types"], [273, 9, 1, "", "encodings_map"], [273, 11, 1, "", "guess_all_extensions"], [273, 11, 1, "", "guess_extension"], [273, 11, 1, "", "guess_type"], [273, 11, 1, "", "init"], [273, 9, 1, "", "inited"], [273, 9, 1, "", "knownfiles"], [273, 11, 1, "", "read_mime_types"], [273, 9, 1, "", "suffix_map"], [273, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[273, 7, 1, "", "encodings_map"], [273, 8, 1, "", "guess_all_extensions"], [273, 8, 1, "", "guess_extension"], [273, 8, 1, "", "guess_type"], [273, 8, 1, "", "read"], [273, 8, 1, "", "read_windows_registry"], [273, 8, 1, "", "readfp"], [273, 7, 1, "", "suffix_map"], [273, 7, 1, "", "types_map"], [273, 7, 1, "", "types_map_inv"]], "mmap": [[275, 9, 1, "", "MADV_AUTOSYNC"], [275, 9, 1, "", "MADV_CORE"], [275, 9, 1, "", "MADV_DODUMP"], [275, 9, 1, "", "MADV_DOFORK"], [275, 9, 1, "", "MADV_DONTDUMP"], [275, 9, 1, "", "MADV_DONTFORK"], [275, 9, 1, "", "MADV_DONTNEED"], [275, 9, 1, "", "MADV_FREE"], [275, 9, 1, "", "MADV_FREE_REUSABLE"], [275, 9, 1, "", "MADV_FREE_REUSE"], [275, 9, 1, "", "MADV_HUGEPAGE"], [275, 9, 1, "", "MADV_HWPOISON"], [275, 9, 1, "", "MADV_MERGEABLE"], [275, 9, 1, "", "MADV_NOCORE"], [275, 9, 1, "", "MADV_NOHUGEPAGE"], [275, 9, 1, "", "MADV_NORMAL"], [275, 9, 1, "", "MADV_NOSYNC"], [275, 9, 1, "", "MADV_PROTECT"], [275, 9, 1, "", "MADV_RANDOM"], [275, 9, 1, "", "MADV_REMOVE"], [275, 9, 1, "", "MADV_SEQUENTIAL"], [275, 9, 1, "", "MADV_SOFT_OFFLINE"], [275, 9, 1, "", "MADV_UNMERGEABLE"], [275, 9, 1, "", "MADV_WILLNEED"], [275, 9, 1, "", "MAP_ALIGNED_SUPER"], [275, 9, 1, "", "MAP_ANON"], [275, 9, 1, "", "MAP_ANONYMOUS"], [275, 9, 1, "", "MAP_CONCEAL"], [275, 9, 1, "", "MAP_DENYWRITE"], [275, 9, 1, "", "MAP_EXECUTABLE"], [275, 9, 1, "", "MAP_POPULATE"], [275, 9, 1, "", "MAP_PRIVATE"], [275, 9, 1, "", "MAP_SHARED"], [275, 9, 1, "", "MAP_STACK"], [275, 12, 1, "", "mmap"]], "mmap.mmap": [[275, 8, 1, "", "close"], [275, 7, 1, "", "closed"], [275, 8, 1, "", "find"], [275, 8, 1, "", "flush"], [275, 8, 1, "", "madvise"], [275, 8, 1, "", "move"], [275, 8, 1, "", "read"], [275, 8, 1, "", "read_byte"], [275, 8, 1, "", "readline"], [275, 8, 1, "", "resize"], [275, 8, 1, "", "rfind"], [275, 8, 1, "", "seek"], [275, 8, 1, "", "size"], [275, 8, 1, "", "tell"], [275, 8, 1, "", "write"], [275, 8, 1, "", "write_byte"]], "modulefinder": [[276, 11, 1, "", "AddPackagePath"], [276, 12, 1, "", "ModuleFinder"], [276, 11, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[276, 7, 1, "", "modules"], [276, 8, 1, "", "report"], [276, 8, 1, "", "run_script"]], "msilib": [[278, 12, 1, "", "Binary"], [278, 12, 1, "", "CAB"], [278, 12, 1, "", "Control"], [278, 11, 1, "", "CreateRecord"], [278, 12, 1, "", "Dialog"], [278, 12, 1, "", "Directory"], [278, 11, 1, "", "FCICreate"], [278, 12, 1, "", "Feature"], [278, 11, 1, "", "OpenDatabase"], [278, 12, 1, "", "RadioButtonGroup"], [278, 11, 1, "", "UuidCreate"], [278, 11, 1, "", "add_data"], [278, 11, 1, "", "add_stream"], [278, 11, 1, "", "add_tables"], [278, 11, 1, "", "gen_uuid"], [278, 11, 1, "", "init_database"], [278, 9, 1, "", "schema"], [278, 9, 1, "", "sequence"], [278, 9, 1, "", "text"]], "msilib.CAB": [[278, 8, 1, "", "append"], [278, 8, 1, "", "commit"]], "msilib.Control": [[278, 8, 1, "", "condition"], [278, 8, 1, "", "event"], [278, 8, 1, "", "mapping"]], "msilib.Database": [[278, 8, 1, "", "Close"], [278, 8, 1, "", "Commit"], [278, 8, 1, "", "GetSummaryInformation"], [278, 8, 1, "", "OpenView"]], "msilib.Dialog": [[278, 8, 1, "", "bitmap"], [278, 8, 1, "", "checkbox"], [278, 8, 1, "", "control"], [278, 8, 1, "", "line"], [278, 8, 1, "", "pushbutton"], [278, 8, 1, "", "radiogroup"], [278, 8, 1, "", "text"]], "msilib.Directory": [[278, 8, 1, "", "add_file"], [278, 8, 1, "", "glob"], [278, 8, 1, "", "remove_pyc"], [278, 8, 1, "", "start_component"]], "msilib.Feature": [[278, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[278, 8, 1, "", "add"]], "msilib.Record": [[278, 8, 1, "", "ClearData"], [278, 8, 1, "", "GetFieldCount"], [278, 8, 1, "", "GetInteger"], [278, 8, 1, "", "GetString"], [278, 8, 1, "", "SetInteger"], [278, 8, 1, "", "SetStream"], [278, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[278, 8, 1, "", "GetProperty"], [278, 8, 1, "", "GetPropertyCount"], [278, 8, 1, "", "Persist"], [278, 8, 1, "", "SetProperty"]], "msilib.View": [[278, 8, 1, "", "Close"], [278, 8, 1, "", "Execute"], [278, 8, 1, "", "Fetch"], [278, 8, 1, "", "GetColumnInfo"], [278, 8, 1, "", "Modify"]], "msvcrt": [[279, 9, 1, "", "LK_LOCK"], [279, 9, 1, "", "LK_NBLCK"], [279, 9, 1, "", "LK_NBRLCK"], [279, 9, 1, "", "LK_RLCK"], [279, 9, 1, "", "LK_UNLCK"], [279, 11, 1, "", "get_osfhandle"], [279, 11, 1, "", "getch"], [279, 11, 1, "", "getche"], [279, 11, 1, "", "getwch"], [279, 11, 1, "", "getwche"], [279, 11, 1, "", "heapmin"], [279, 11, 1, "", "kbhit"], [279, 11, 1, "", "locking"], [279, 11, 1, "", "open_osfhandle"], [279, 11, 1, "", "putch"], [279, 11, 1, "", "putwch"], [279, 11, 1, "", "setmode"], [279, 11, 1, "", "ungetch"], [279, 11, 1, "", "ungetwch"]], "multiprocessing": [[280, 11, 1, "", "Array"], [280, 6, 1, "", "AuthenticationError"], [280, 12, 1, "", "Barrier"], [280, 12, 1, "", "BoundedSemaphore"], [280, 6, 1, "", "BufferTooShort"], [280, 12, 1, "", "Condition"], [280, 12, 1, "", "Event"], [280, 12, 1, "", "JoinableQueue"], [280, 12, 1, "", "Lock"], [280, 11, 1, "", "Manager"], [280, 11, 1, "", "Pipe"], [280, 12, 1, "", "Process"], [280, 6, 1, "", "ProcessError"], [280, 12, 1, "", "Queue"], [280, 12, 1, "", "RLock"], [280, 12, 1, "", "Semaphore"], [280, 12, 1, "", "SimpleQueue"], [280, 6, 1, "", "TimeoutError"], [280, 11, 1, "", "Value"], [280, 11, 1, "", "active_children"], [280, 10, 0, "-", "connection"], [280, 11, 1, "", "cpu_count"], [280, 11, 1, "", "current_process"], [280, 10, 0, "-", "dummy"], [280, 11, 1, "", "freeze_support"], [280, 11, 1, "", "get_all_start_methods"], [280, 11, 1, "", "get_context"], [280, 11, 1, "", "get_logger"], [280, 11, 1, "", "get_start_method"], [280, 11, 1, "", "log_to_stderr"], [280, 10, 0, "-", "managers"], [280, 11, 1, "", "parent_process"], [280, 10, 0, "-", "pool"], [280, 11, 1, "", "set_executable"], [280, 11, 1, "", "set_forkserver_preload"], [280, 11, 1, "", "set_start_method"], [281, 10, 0, "-", "shared_memory"], [280, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[280, 8, 1, "", "join"], [280, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[280, 8, 1, "", "acquire"], [280, 8, 1, "", "release"]], "multiprocessing.Process": [[280, 7, 1, "", "authkey"], [280, 8, 1, "", "close"], [280, 7, 1, "", "daemon"], [280, 7, 1, "", "exitcode"], [280, 8, 1, "", "is_alive"], [280, 8, 1, "", "join"], [280, 8, 1, "", "kill"], [280, 7, 1, "", "name"], [280, 7, 1, "", "pid"], [280, 8, 1, "", "run"], [280, 7, 1, "", "sentinel"], [280, 8, 1, "", "start"], [280, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[280, 8, 1, "", "cancel_join_thread"], [280, 8, 1, "", "close"], [280, 8, 1, "", "empty"], [280, 8, 1, "", "full"], [280, 8, 1, "", "get"], [280, 8, 1, "", "get_nowait"], [280, 8, 1, "", "join_thread"], [280, 8, 1, "", "put"], [280, 8, 1, "", "put_nowait"], [280, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[280, 8, 1, "", "acquire"], [280, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[280, 8, 1, "", "close"], [280, 8, 1, "", "empty"], [280, 8, 1, "", "get"], [280, 8, 1, "", "put"]], "multiprocessing.connection": [[280, 11, 1, "", "Client"], [280, 12, 1, "", "Connection"], [280, 12, 1, "", "Listener"], [280, 11, 1, "", "answer_challenge"], [280, 11, 1, "", "deliver_challenge"], [280, 11, 1, "", "wait"]], "multiprocessing.connection.Connection": [[280, 8, 1, "", "close"], [280, 8, 1, "", "fileno"], [280, 8, 1, "", "poll"], [280, 8, 1, "", "recv"], [280, 8, 1, "", "recv_bytes"], [280, 8, 1, "", "recv_bytes_into"], [280, 8, 1, "", "send"], [280, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[280, 8, 1, "", "accept"], [280, 7, 1, "", "address"], [280, 8, 1, "", "close"], [280, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[280, 12, 1, "", "BaseManager"], [280, 12, 1, "", "BaseProxy"], [280, 12, 1, "", "Namespace"], [281, 12, 1, "", "SharedMemoryManager"], [280, 12, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[280, 7, 1, "", "address"], [280, 8, 1, "", "connect"], [280, 8, 1, "", "get_server"], [280, 8, 1, "", "register"], [280, 8, 1, "", "shutdown"], [280, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[280, 8, 1, "", "__repr__"], [280, 8, 1, "", "__str__"], [280, 8, 1, "", "_callmethod"], [280, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[281, 8, 1, "", "ShareableList"], [281, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[280, 8, 1, "", "Array"], [280, 8, 1, "", "Barrier"], [280, 8, 1, "", "BoundedSemaphore"], [280, 8, 1, "", "Condition"], [280, 8, 1, "", "Event"], [280, 8, 1, "", "Lock"], [280, 8, 1, "", "Namespace"], [280, 8, 1, "", "Queue"], [280, 8, 1, "", "RLock"], [280, 8, 1, "", "Semaphore"], [280, 8, 1, "", "Value"], [280, 8, 1, "", "dict"], [280, 8, 1, "", "list"]], "multiprocessing.pool": [[280, 12, 1, "", "AsyncResult"], [280, 12, 1, "", "Pool"], [280, 12, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[280, 8, 1, "", "get"], [280, 8, 1, "", "ready"], [280, 8, 1, "", "successful"], [280, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[280, 8, 1, "", "apply"], [280, 8, 1, "", "apply_async"], [280, 8, 1, "", "close"], [280, 8, 1, "", "imap"], [280, 8, 1, "", "imap_unordered"], [280, 8, 1, "", "join"], [280, 8, 1, "", "map"], [280, 8, 1, "", "map_async"], [280, 8, 1, "", "starmap"], [280, 8, 1, "", "starmap_async"], [280, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[281, 12, 1, "", "ShareableList"], [281, 12, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[281, 8, 1, "", "count"], [281, 7, 1, "", "format"], [281, 8, 1, "", "index"], [281, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[281, 7, 1, "", "buf"], [281, 8, 1, "", "close"], [281, 7, 1, "", "name"], [281, 7, 1, "", "size"], [281, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[280, 11, 1, "", "Array"], [280, 11, 1, "", "RawArray"], [280, 11, 1, "", "RawValue"], [280, 11, 1, "", "Value"], [280, 11, 1, "", "copy"], [280, 11, 1, "", "synchronized"]], "netrc": [[283, 6, 1, "", "NetrcParseError"], [283, 12, 1, "", "netrc"]], "netrc.NetrcParseError": [[283, 7, 1, "", "filename"], [283, 7, 1, "", "lineno"], [283, 7, 1, "", "msg"]], "netrc.netrc": [[283, 8, 1, "", "__repr__"], [283, 8, 1, "", "authenticators"], [283, 7, 1, "", "hosts"], [283, 7, 1, "", "macros"]], "nis": [[284, 11, 1, "", "cat"], [284, 6, 1, "", "error"], [284, 11, 1, "", "get_default_domain"], [284, 11, 1, "", "maps"], [284, 11, 1, "", "match"]], "nntplib": [[285, 12, 1, "", "NNTP"], [285, 6, 1, "", "NNTPDataError"], [285, 6, 1, "", "NNTPError"], [285, 6, 1, "", "NNTPPermanentError"], [285, 6, 1, "", "NNTPProtocolError"], [285, 6, 1, "", "NNTPReplyError"], [285, 6, 1, "", "NNTPTemporaryError"], [285, 12, 1, "", "NNTP_SSL"], [285, 11, 1, "", "decode_header"]], "nntplib.NNTP": [[285, 8, 1, "", "article"], [285, 8, 1, "", "body"], [285, 8, 1, "", "date"], [285, 8, 1, "", "description"], [285, 8, 1, "", "descriptions"], [285, 8, 1, "", "getcapabilities"], [285, 8, 1, "", "getwelcome"], [285, 8, 1, "", "group"], [285, 8, 1, "", "head"], [285, 8, 1, "", "help"], [285, 8, 1, "", "ihave"], [285, 8, 1, "", "last"], [285, 8, 1, "", "list"], [285, 8, 1, "", "login"], [285, 8, 1, "", "newgroups"], [285, 8, 1, "", "newnews"], [285, 8, 1, "", "next"], [285, 7, 1, "", "nntp_implementation"], [285, 7, 1, "", "nntp_version"], [285, 8, 1, "", "over"], [285, 8, 1, "", "post"], [285, 8, 1, "", "quit"], [285, 8, 1, "", "set_debuglevel"], [285, 8, 1, "", "slave"], [285, 8, 1, "", "starttls"], [285, 8, 1, "", "stat"], [285, 8, 1, "", "xhdr"], [285, 8, 1, "", "xover"]], "nntplib.NNTPError": [[285, 7, 1, "", "response"]], "numbers": [[286, 12, 1, "", "Complex"], [286, 12, 1, "", "Integral"], [286, 12, 1, "", "Number"], [286, 12, 1, "", "Rational"], [286, 12, 1, "", "Real"]], "numbers.Complex": [[286, 8, 1, "", "conjugate"], [286, 7, 1, "", "imag"], [286, 7, 1, "", "real"]], "numbers.Rational": [[286, 7, 1, "", "denominator"], [286, 7, 1, "", "numerator"]], "object": [[424, 8, 1, "", "__abs__"], [424, 8, 1, "", "__add__"], [424, 8, 1, "", "__aenter__"], [424, 8, 1, "", "__aexit__"], [424, 8, 1, "", "__aiter__"], [424, 8, 1, "", "__and__"], [424, 8, 1, "", "__anext__"], [424, 8, 1, "", "__await__"], [424, 8, 1, "", "__bool__"], [424, 8, 1, "", "__buffer__"], [424, 8, 1, "", "__bytes__"], [424, 8, 1, "", "__call__"], [424, 8, 1, "", "__ceil__"], [424, 8, 1, "", "__class_getitem__"], [424, 8, 1, "", "__complex__"], [424, 8, 1, "", "__contains__"], [424, 8, 1, "", "__del__"], [424, 8, 1, "", "__delattr__"], [424, 8, 1, "", "__delete__"], [424, 8, 1, "", "__delitem__"], [341, 7, 1, "", "__dict__"], [424, 8, 1, "", "__dir__"], [424, 8, 1, "", "__divmod__"], [424, 8, 1, "", "__enter__"], [424, 8, 1, "", "__eq__"], [424, 8, 1, "", "__exit__"], [424, 8, 1, "", "__float__"], [424, 8, 1, "", "__floor__"], [424, 8, 1, "", "__floordiv__"], [424, 8, 1, "", "__format__"], [424, 8, 1, "", "__ge__"], [424, 8, 1, "", "__get__"], [424, 8, 1, "", "__getattr__"], [424, 8, 1, "", "__getattribute__"], [424, 8, 1, "", "__getitem__"], [296, 8, 1, "", "__getnewargs__"], [296, 8, 1, "", "__getnewargs_ex__"], [296, 8, 1, "", "__getstate__"], [424, 8, 1, "", "__gt__"], [424, 8, 1, "", "__hash__"], [424, 8, 1, "", "__iadd__"], [424, 8, 1, "", "__iand__"], [424, 8, 1, "", "__ifloordiv__"], [424, 8, 1, "", "__ilshift__"], [424, 8, 1, "", "__imatmul__"], [424, 8, 1, "", "__imod__"], [424, 8, 1, "", "__imul__"], [424, 8, 1, "", "__index__"], [424, 8, 1, "", "__init__"], [424, 8, 1, "", "__init_subclass__"], [424, 8, 1, "", "__int__"], [424, 8, 1, "", "__invert__"], [424, 8, 1, "", "__ior__"], [424, 8, 1, "", "__ipow__"], [424, 8, 1, "", "__irshift__"], [424, 8, 1, "", "__isub__"], [424, 8, 1, "", "__iter__"], [424, 8, 1, "", "__itruediv__"], [424, 8, 1, "", "__ixor__"], [424, 8, 1, "", "__le__"], [424, 8, 1, "", "__len__"], [424, 8, 1, "", "__length_hint__"], [424, 8, 1, "", "__lshift__"], [424, 8, 1, "", "__lt__"], [424, 9, 1, "", "__match_args__"], [424, 8, 1, "", "__matmul__"], [424, 8, 1, "", "__missing__"], [424, 8, 1, "", "__mod__"], [424, 8, 1, "", "__mro_entries__"], [424, 8, 1, "", "__mul__"], [424, 8, 1, "", "__ne__"], [424, 8, 1, "", "__neg__"], [424, 8, 1, "", "__new__"], [424, 8, 1, "", "__or__"], [424, 8, 1, "", "__pos__"], [424, 8, 1, "", "__pow__"], [424, 8, 1, "", "__radd__"], [424, 8, 1, "", "__rand__"], [424, 8, 1, "", "__rdivmod__"], [296, 8, 1, "", "__reduce__"], [296, 8, 1, "", "__reduce_ex__"], [424, 8, 1, "", "__release_buffer__"], [424, 8, 1, "", "__repr__"], [424, 8, 1, "", "__reversed__"], [424, 8, 1, "", "__rfloordiv__"], [424, 8, 1, "", "__rlshift__"], [424, 8, 1, "", "__rmatmul__"], [424, 8, 1, "", "__rmod__"], [424, 8, 1, "", "__rmul__"], [424, 8, 1, "", "__ror__"], [424, 8, 1, "", "__round__"], [424, 8, 1, "", "__rpow__"], [424, 8, 1, "", "__rrshift__"], [424, 8, 1, "", "__rshift__"], [424, 8, 1, "", "__rsub__"], [424, 8, 1, "", "__rtruediv__"], [424, 8, 1, "", "__rxor__"], [424, 8, 1, "", "__set__"], [424, 8, 1, "", "__set_name__"], [424, 8, 1, "", "__setattr__"], [424, 8, 1, "", "__setitem__"], [296, 8, 1, "", "__setstate__"], [424, 9, 1, "", "__slots__"], [424, 8, 1, "", "__str__"], [424, 8, 1, "", "__sub__"], [424, 8, 1, "", "__truediv__"], [424, 8, 1, "", "__trunc__"], [424, 8, 1, "", "__xor__"]], "operator": [[288, 11, 1, "", "__abs__"], [288, 11, 1, "", "__add__"], [288, 11, 1, "", "__and__"], [288, 11, 1, "", "__call__"], [288, 11, 1, "", "__concat__"], [288, 11, 1, "", "__contains__"], [288, 11, 1, "", "__delitem__"], [288, 11, 1, "", "__eq__"], [288, 11, 1, "", "__floordiv__"], [288, 11, 1, "", "__ge__"], [288, 11, 1, "", "__getitem__"], [288, 11, 1, "", "__gt__"], [288, 11, 1, "", "__iadd__"], [288, 11, 1, "", "__iand__"], [288, 11, 1, "", "__iconcat__"], [288, 11, 1, "", "__ifloordiv__"], [288, 11, 1, "", "__ilshift__"], [288, 11, 1, "", "__imatmul__"], [288, 11, 1, "", "__imod__"], [288, 11, 1, "", "__imul__"], [288, 11, 1, "", "__index__"], [288, 11, 1, "", "__inv__"], [288, 11, 1, "", "__invert__"], [288, 11, 1, "", "__ior__"], [288, 11, 1, "", "__ipow__"], [288, 11, 1, "", "__irshift__"], [288, 11, 1, "", "__isub__"], [288, 11, 1, "", "__itruediv__"], [288, 11, 1, "", "__ixor__"], [288, 11, 1, "", "__le__"], [288, 11, 1, "", "__lshift__"], [288, 11, 1, "", "__lt__"], [288, 11, 1, "", "__matmul__"], [288, 11, 1, "", "__mod__"], [288, 11, 1, "", "__mul__"], [288, 11, 1, "", "__ne__"], [288, 11, 1, "", "__neg__"], [288, 11, 1, "", "__not__"], [288, 11, 1, "", "__or__"], [288, 11, 1, "", "__pos__"], [288, 11, 1, "", "__pow__"], [288, 11, 1, "", "__rshift__"], [288, 11, 1, "", "__setitem__"], [288, 11, 1, "", "__sub__"], [288, 11, 1, "", "__truediv__"], [288, 11, 1, "", "__xor__"], [288, 11, 1, "", "abs"], [288, 11, 1, "", "add"], [288, 11, 1, "", "and_"], [288, 11, 1, "", "attrgetter"], [288, 11, 1, "", "call"], [288, 11, 1, "", "concat"], [288, 11, 1, "", "contains"], [288, 11, 1, "", "countOf"], [288, 11, 1, "", "delitem"], [288, 11, 1, "", "eq"], [288, 11, 1, "", "floordiv"], [288, 11, 1, "", "ge"], [288, 11, 1, "", "getitem"], [288, 11, 1, "", "gt"], [288, 11, 1, "", "iadd"], [288, 11, 1, "", "iand"], [288, 11, 1, "", "iconcat"], [288, 11, 1, "", "ifloordiv"], [288, 11, 1, "", "ilshift"], [288, 11, 1, "", "imatmul"], [288, 11, 1, "", "imod"], [288, 11, 1, "", "imul"], [288, 11, 1, "", "index"], [288, 11, 1, "", "indexOf"], [288, 11, 1, "", "inv"], [288, 11, 1, "", "invert"], [288, 11, 1, "", "ior"], [288, 11, 1, "", "ipow"], [288, 11, 1, "", "irshift"], [288, 11, 1, "", "is_"], [288, 11, 1, "", "is_not"], [288, 11, 1, "", "isub"], [288, 11, 1, "", "itemgetter"], [288, 11, 1, "", "itruediv"], [288, 11, 1, "", "ixor"], [288, 11, 1, "", "le"], [288, 11, 1, "", "length_hint"], [288, 11, 1, "", "lshift"], [288, 11, 1, "", "lt"], [288, 11, 1, "", "matmul"], [288, 11, 1, "", "methodcaller"], [288, 11, 1, "", "mod"], [288, 11, 1, "", "mul"], [288, 11, 1, "", "ne"], [288, 11, 1, "", "neg"], [288, 11, 1, "", "not_"], [288, 11, 1, "", "or_"], [288, 11, 1, "", "pos"], [288, 11, 1, "", "pow"], [288, 11, 1, "", "rshift"], [288, 11, 1, "", "setitem"], [288, 11, 1, "", "sub"], [288, 11, 1, "", "truediv"], [288, 11, 1, "", "truth"], [288, 11, 1, "", "xor"]], "optparse": [[289, 6, 1, "", "AmbiguousOptionError"], [289, 6, 1, "", "BadOptionError"], [289, 12, 1, "", "Option"], [289, 6, 1, "", "OptionConflictError"], [289, 6, 1, "", "OptionError"], [289, 12, 1, "", "OptionGroup"], [289, 12, 1, "", "OptionParser"], [289, 6, 1, "", "OptionValueError"], [289, 12, 1, "", "Values"]], "optparse.Option": [[289, 7, 1, "", "ACTIONS"], [289, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [289, 7, 1, "", "STORE_ACTIONS"], [289, 7, 1, "", "TYPED_ACTIONS"], [289, 7, 1, "", "TYPES"], [289, 7, 1, "", "TYPE_CHECKER"], [289, 7, 1, "", "action"], [289, 7, 1, "", "callback"], [289, 7, 1, "", "callback_args"], [289, 7, 1, "", "callback_kwargs"], [289, 7, 1, "", "choices"], [289, 7, 1, "", "const"], [289, 7, 1, "", "default"], [289, 7, 1, "", "dest"], [289, 7, 1, "", "help"], [289, 7, 1, "", "metavar"], [289, 7, 1, "", "nargs"], [289, 7, 1, "", "type"]], "optparse.OptionParser": [[289, 8, 1, "", "add_option"], [289, 8, 1, "", "disable_interspersed_args"], [289, 8, 1, "", "enable_interspersed_args"], [289, 8, 1, "", "get_option"], [289, 8, 1, "", "get_option_group"], [289, 8, 1, "", "get_usage"], [289, 8, 1, "", "get_version"], [289, 8, 1, "", "has_option"], [289, 8, 1, "", "parse_args"], [289, 8, 1, "", "print_usage"], [289, 8, 1, "", "print_version"], [289, 8, 1, "", "remove_option"], [289, 8, 1, "", "set_defaults"], [289, 8, 1, "", "set_usage"]], "os": [[290, 9, 1, "", "CLD_CONTINUED"], [290, 9, 1, "", "CLD_DUMPED"], [290, 9, 1, "", "CLD_EXITED"], [290, 9, 1, "", "CLD_KILLED"], [290, 9, 1, "", "CLD_STOPPED"], [290, 9, 1, "", "CLD_TRAPPED"], [290, 9, 1, "", "CLONE_FILES"], [290, 9, 1, "", "CLONE_FS"], [290, 9, 1, "", "CLONE_NEWCGROUP"], [290, 9, 1, "", "CLONE_NEWIPC"], [290, 9, 1, "", "CLONE_NEWNET"], [290, 9, 1, "", "CLONE_NEWNS"], [290, 9, 1, "", "CLONE_NEWPID"], [290, 9, 1, "", "CLONE_NEWTIME"], [290, 9, 1, "", "CLONE_NEWUSER"], [290, 9, 1, "", "CLONE_NEWUTS"], [290, 9, 1, "", "CLONE_SIGHAND"], [290, 9, 1, "", "CLONE_SYSVSEM"], [290, 9, 1, "", "CLONE_THREAD"], [290, 9, 1, "", "CLONE_VM"], [290, 12, 1, "", "DirEntry"], [290, 9, 1, "", "EFD_CLOEXEC"], [290, 9, 1, "", "EFD_NONBLOCK"], [290, 9, 1, "", "EFD_SEMAPHORE"], [290, 9, 1, "", "EX_CANTCREAT"], [290, 9, 1, "", "EX_CONFIG"], [290, 9, 1, "", "EX_DATAERR"], [290, 9, 1, "", "EX_IOERR"], [290, 9, 1, "", "EX_NOHOST"], [290, 9, 1, "", "EX_NOINPUT"], [290, 9, 1, "", "EX_NOPERM"], [290, 9, 1, "", "EX_NOTFOUND"], [290, 9, 1, "", "EX_NOUSER"], [290, 9, 1, "", "EX_OK"], [290, 9, 1, "", "EX_OSERR"], [290, 9, 1, "", "EX_OSFILE"], [290, 9, 1, "", "EX_PROTOCOL"], [290, 9, 1, "", "EX_SOFTWARE"], [290, 9, 1, "", "EX_TEMPFAIL"], [290, 9, 1, "", "EX_UNAVAILABLE"], [290, 9, 1, "", "EX_USAGE"], [290, 9, 1, "", "F_LOCK"], [290, 9, 1, "", "F_OK"], [290, 9, 1, "", "F_TEST"], [290, 9, 1, "", "F_TLOCK"], [290, 9, 1, "", "F_ULOCK"], [290, 9, 1, "", "GRND_NONBLOCK"], [290, 9, 1, "", "GRND_RANDOM"], [290, 9, 1, "", "MFD_ALLOW_SEALING"], [290, 9, 1, "", "MFD_CLOEXEC"], [290, 9, 1, "", "MFD_HUGETLB"], [290, 9, 1, "", "MFD_HUGE_16GB"], [290, 9, 1, "", "MFD_HUGE_16MB"], [290, 9, 1, "", "MFD_HUGE_1GB"], [290, 9, 1, "", "MFD_HUGE_1MB"], [290, 9, 1, "", "MFD_HUGE_256MB"], [290, 9, 1, "", "MFD_HUGE_2GB"], [290, 9, 1, "", "MFD_HUGE_2MB"], [290, 9, 1, "", "MFD_HUGE_32MB"], [290, 9, 1, "", "MFD_HUGE_512KB"], [290, 9, 1, "", "MFD_HUGE_512MB"], [290, 9, 1, "", "MFD_HUGE_64KB"], [290, 9, 1, "", "MFD_HUGE_8MB"], [290, 9, 1, "", "MFD_HUGE_MASK"], [290, 9, 1, "", "MFD_HUGE_SHIFT"], [290, 9, 1, "", "O_APPEND"], [290, 9, 1, "", "O_ASYNC"], [290, 9, 1, "", "O_BINARY"], [290, 9, 1, "", "O_CLOEXEC"], [290, 9, 1, "", "O_CREAT"], [290, 9, 1, "", "O_DIRECT"], [290, 9, 1, "", "O_DIRECTORY"], [290, 9, 1, "", "O_DSYNC"], [290, 9, 1, "", "O_EVTONLY"], [290, 9, 1, "", "O_EXCL"], [290, 9, 1, "", "O_EXLOCK"], [290, 9, 1, "", "O_FSYNC"], [290, 9, 1, "", "O_NDELAY"], [290, 9, 1, "", "O_NOATIME"], [290, 9, 1, "", "O_NOCTTY"], [290, 9, 1, "", "O_NOFOLLOW"], [290, 9, 1, "", "O_NOFOLLOW_ANY"], [290, 9, 1, "", "O_NOINHERIT"], [290, 9, 1, "", "O_NONBLOCK"], [290, 9, 1, "", "O_PATH"], [290, 9, 1, "", "O_RANDOM"], [290, 9, 1, "", "O_RDONLY"], [290, 9, 1, "", "O_RDWR"], [290, 9, 1, "", "O_RSYNC"], [290, 9, 1, "", "O_SEQUENTIAL"], [290, 9, 1, "", "O_SHLOCK"], [290, 9, 1, "", "O_SHORT_LIVED"], [290, 9, 1, "", "O_SYMLINK"], [290, 9, 1, "", "O_SYNC"], [290, 9, 1, "", "O_TEMPORARY"], [290, 9, 1, "", "O_TEXT"], [290, 9, 1, "", "O_TMPFILE"], [290, 9, 1, "", "O_TRUNC"], [290, 9, 1, "", "O_WRONLY"], [290, 9, 1, "", "PIDFD_NONBLOCK"], [290, 9, 1, "", "POSIX_FADV_DONTNEED"], [290, 9, 1, "", "POSIX_FADV_NOREUSE"], [290, 9, 1, "", "POSIX_FADV_NORMAL"], [290, 9, 1, "", "POSIX_FADV_RANDOM"], [290, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [290, 9, 1, "", "POSIX_FADV_WILLNEED"], [290, 9, 1, "", "POSIX_SPAWN_CLOSE"], [290, 9, 1, "", "POSIX_SPAWN_DUP2"], [290, 9, 1, "", "POSIX_SPAWN_OPEN"], [290, 9, 1, "", "PRIO_DARWIN_BG"], [290, 9, 1, "", "PRIO_DARWIN_NONUI"], [290, 9, 1, "", "PRIO_DARWIN_PROCESS"], [290, 9, 1, "", "PRIO_DARWIN_THREAD"], [290, 9, 1, "", "PRIO_PGRP"], [290, 9, 1, "", "PRIO_PROCESS"], [290, 9, 1, "", "PRIO_USER"], [290, 9, 1, "", "P_ALL"], [290, 9, 1, "", "P_DETACH"], [290, 9, 1, "", "P_NOWAIT"], [290, 9, 1, "", "P_NOWAITO"], [290, 9, 1, "", "P_OVERLAY"], [290, 9, 1, "", "P_PGID"], [290, 9, 1, "", "P_PID"], [290, 9, 1, "", "P_PIDFD"], [290, 9, 1, "", "P_WAIT"], [290, 12, 1, "", "PathLike"], [290, 9, 1, "", "RTLD_DEEPBIND"], [290, 9, 1, "", "RTLD_GLOBAL"], [290, 9, 1, "", "RTLD_LAZY"], [290, 9, 1, "", "RTLD_LOCAL"], [290, 9, 1, "", "RTLD_NODELETE"], [290, 9, 1, "", "RTLD_NOLOAD"], [290, 9, 1, "", "RTLD_NOW"], [290, 9, 1, "", "RWF_APPEND"], [290, 9, 1, "", "RWF_DSYNC"], [290, 9, 1, "", "RWF_HIPRI"], [290, 9, 1, "", "RWF_NOWAIT"], [290, 9, 1, "", "RWF_SYNC"], [290, 9, 1, "", "R_OK"], [290, 9, 1, "", "SCHED_BATCH"], [290, 9, 1, "", "SCHED_FIFO"], [290, 9, 1, "", "SCHED_IDLE"], [290, 9, 1, "", "SCHED_OTHER"], [290, 9, 1, "", "SCHED_RESET_ON_FORK"], [290, 9, 1, "", "SCHED_RR"], [290, 9, 1, "", "SCHED_SPORADIC"], [290, 9, 1, "", "SEEK_CUR"], [290, 9, 1, "", "SEEK_END"], [290, 9, 1, "", "SEEK_SET"], [290, 9, 1, "", "SF_MNOWAIT"], [290, 9, 1, "", "SF_NOCACHE"], [290, 9, 1, "", "SF_NODISKIO"], [290, 9, 1, "", "SF_SYNC"], [290, 9, 1, "", "SPLICE_F_MORE"], [290, 9, 1, "", "SPLICE_F_MOVE"], [290, 9, 1, "", "SPLICE_F_NONBLOCK"], [290, 9, 1, "", "WCONTINUED"], [290, 11, 1, "", "WCOREDUMP"], [290, 9, 1, "", "WEXITED"], [290, 11, 1, "", "WEXITSTATUS"], [290, 11, 1, "", "WIFCONTINUED"], [290, 11, 1, "", "WIFEXITED"], [290, 11, 1, "", "WIFSIGNALED"], [290, 11, 1, "", "WIFSTOPPED"], [290, 9, 1, "", "WNOHANG"], [290, 9, 1, "", "WNOWAIT"], [290, 9, 1, "", "WSTOPPED"], [290, 11, 1, "", "WSTOPSIG"], [290, 11, 1, "", "WTERMSIG"], [290, 9, 1, "", "WUNTRACED"], [290, 9, 1, "", "W_OK"], [290, 9, 1, "", "XATTR_CREATE"], [290, 9, 1, "", "XATTR_REPLACE"], [290, 9, 1, "", "XATTR_SIZE_MAX"], [290, 9, 1, "", "X_OK"], [290, 11, 1, "", "_exit"], [290, 11, 1, "", "abort"], [290, 11, 1, "", "access"], [290, 11, 1, "", "add_dll_directory"], [290, 9, 1, "", "altsep"], [290, 11, 1, "", "chdir"], [290, 11, 1, "", "chflags"], [290, 11, 1, "", "chmod"], [290, 11, 1, "", "chown"], [290, 11, 1, "", "chroot"], [290, 11, 1, "", "close"], [290, 11, 1, "", "closerange"], [290, 11, 1, "", "confstr"], [290, 9, 1, "", "confstr_names"], [290, 11, 1, "", "copy_file_range"], [290, 11, 1, "", "cpu_count"], [290, 11, 1, "", "ctermid"], [290, 9, 1, "", "curdir"], [290, 9, 1, "", "defpath"], [290, 11, 1, "", "device_encoding"], [290, 9, 1, "", "devnull"], [290, 11, 1, "", "dup"], [290, 11, 1, "", "dup2"], [290, 9, 1, "", "environ"], [290, 9, 1, "", "environb"], [290, 6, 1, "", "error"], [290, 11, 1, "", "eventfd"], [290, 11, 1, "", "eventfd_read"], [290, 11, 1, "", "eventfd_write"], [290, 11, 1, "", "execl"], [290, 11, 1, "", "execle"], [290, 11, 1, "", "execlp"], [290, 11, 1, "", "execlpe"], [290, 11, 1, "", "execv"], [290, 11, 1, "", "execve"], [290, 11, 1, "", "execvp"], [290, 11, 1, "", "execvpe"], [290, 9, 1, "", "extsep"], [290, 11, 1, "", "fchdir"], [290, 11, 1, "", "fchmod"], [290, 11, 1, "", "fchown"], [290, 11, 1, "", "fdatasync"], [290, 11, 1, "", "fdopen"], [290, 11, 1, "", "fork"], [290, 11, 1, "", "forkpty"], [290, 11, 1, "", "fpathconf"], [290, 11, 1, "", "fsdecode"], [290, 11, 1, "", "fsencode"], [290, 11, 1, "", "fspath"], [290, 11, 1, "", "fstat"], [290, 11, 1, "", "fstatvfs"], [290, 11, 1, "", "fsync"], [290, 11, 1, "", "ftruncate"], [290, 11, 1, "", "fwalk"], [290, 11, 1, "", "get_blocking"], [290, 11, 1, "", "get_exec_path"], [290, 11, 1, "", "get_handle_inheritable"], [290, 11, 1, "", "get_inheritable"], [290, 11, 1, "", "get_terminal_size"], [290, 11, 1, "", "getcwd"], [290, 11, 1, "", "getcwdb"], [290, 11, 1, "", "getegid"], [290, 11, 1, "", "getenv"], [290, 11, 1, "", "getenvb"], [290, 11, 1, "", "geteuid"], [290, 11, 1, "", "getgid"], [290, 11, 1, "", "getgrouplist"], [290, 11, 1, "", "getgroups"], [290, 11, 1, "", "getloadavg"], [290, 11, 1, "", "getlogin"], [290, 11, 1, "", "getpgid"], [290, 11, 1, "", "getpgrp"], [290, 11, 1, "", "getpid"], [290, 11, 1, "", "getppid"], [290, 11, 1, "", "getpriority"], [290, 11, 1, "", "getrandom"], [290, 11, 1, "", "getresgid"], [290, 11, 1, "", "getresuid"], [290, 11, 1, "", "getsid"], [290, 11, 1, "", "getuid"], [290, 11, 1, "", "getxattr"], [290, 11, 1, "", "initgroups"], [290, 11, 1, "", "isatty"], [290, 11, 1, "", "kill"], [290, 11, 1, "", "killpg"], [290, 11, 1, "", "lchflags"], [290, 11, 1, "", "lchmod"], [290, 11, 1, "", "lchown"], [290, 9, 1, "", "linesep"], [290, 11, 1, "", "link"], [290, 11, 1, "", "listdir"], [290, 11, 1, "", "listdrives"], [290, 11, 1, "", "listmounts"], [290, 11, 1, "", "listvolumes"], [290, 11, 1, "", "listxattr"], [290, 11, 1, "", "lockf"], [290, 11, 1, "", "login_tty"], [290, 11, 1, "", "lseek"], [290, 11, 1, "", "lstat"], [290, 11, 1, "", "major"], [290, 11, 1, "", "makedev"], [290, 11, 1, "", "makedirs"], [290, 11, 1, "", "memfd_create"], [290, 11, 1, "", "minor"], [290, 11, 1, "", "mkdir"], [290, 11, 1, "", "mkfifo"], [290, 11, 1, "", "mknod"], [290, 9, 1, "", "name"], [290, 11, 1, "", "nice"], [290, 11, 1, "", "open"], [290, 11, 1, "", "openpty"], [290, 9, 1, "", "pardir"], [291, 10, 0, "-", "path"], [290, 11, 1, "", "pathconf"], [290, 9, 1, "", "pathconf_names"], [290, 9, 1, "", "pathsep"], [290, 11, 1, "", "pidfd_open"], [290, 11, 1, "", "pipe"], [290, 11, 1, "", "pipe2"], [290, 11, 1, "", "plock"], [290, 11, 1, "", "popen"], [290, 11, 1, "", "posix_fadvise"], [290, 11, 1, "", "posix_fallocate"], [290, 11, 1, "", "posix_spawn"], [290, 11, 1, "", "posix_spawnp"], [290, 11, 1, "", "pread"], [290, 11, 1, "", "preadv"], [290, 11, 1, "", "putenv"], [290, 11, 1, "", "pwrite"], [290, 11, 1, "", "pwritev"], [290, 11, 1, "", "read"], [290, 11, 1, "", "readlink"], [290, 11, 1, "", "readv"], [290, 11, 1, "", "register_at_fork"], [290, 11, 1, "", "remove"], [290, 11, 1, "", "removedirs"], [290, 11, 1, "", "removexattr"], [290, 11, 1, "", "rename"], [290, 11, 1, "", "renames"], [290, 11, 1, "", "replace"], [290, 11, 1, "", "rmdir"], [290, 11, 1, "", "scandir"], [290, 11, 1, "", "sched_get_priority_max"], [290, 11, 1, "", "sched_get_priority_min"], [290, 11, 1, "", "sched_getaffinity"], [290, 11, 1, "", "sched_getparam"], [290, 11, 1, "", "sched_getscheduler"], [290, 12, 1, "", "sched_param"], [290, 11, 1, "", "sched_rr_get_interval"], [290, 11, 1, "", "sched_setaffinity"], [290, 11, 1, "", "sched_setparam"], [290, 11, 1, "", "sched_setscheduler"], [290, 11, 1, "", "sched_yield"], [290, 11, 1, "", "sendfile"], [290, 9, 1, "", "sep"], [290, 11, 1, "", "set_blocking"], [290, 11, 1, "", "set_handle_inheritable"], [290, 11, 1, "", "set_inheritable"], [290, 11, 1, "", "setegid"], [290, 11, 1, "", "seteuid"], [290, 11, 1, "", "setgid"], [290, 11, 1, "", "setgroups"], [290, 11, 1, "", "setns"], [290, 11, 1, "", "setpgid"], [290, 11, 1, "", "setpgrp"], [290, 11, 1, "", "setpriority"], [290, 11, 1, "", "setregid"], [290, 11, 1, "", "setresgid"], [290, 11, 1, "", "setresuid"], [290, 11, 1, "", "setreuid"], [290, 11, 1, "", "setsid"], [290, 11, 1, "", "setuid"], [290, 11, 1, "", "setxattr"], [290, 11, 1, "", "spawnl"], [290, 11, 1, "", "spawnle"], [290, 11, 1, "", "spawnlp"], [290, 11, 1, "", "spawnlpe"], [290, 11, 1, "", "spawnv"], [290, 11, 1, "", "spawnve"], [290, 11, 1, "", "spawnvp"], [290, 11, 1, "", "spawnvpe"], [290, 11, 1, "", "splice"], [290, 11, 1, "", "startfile"], [290, 11, 1, "", "stat"], [290, 12, 1, "", "stat_result"], [290, 11, 1, "", "statvfs"], [290, 11, 1, "", "strerror"], [290, 9, 1, "", "supports_bytes_environ"], [290, 9, 1, "", "supports_dir_fd"], [290, 9, 1, "", "supports_effective_ids"], [290, 9, 1, "", "supports_fd"], [290, 9, 1, "", "supports_follow_symlinks"], [290, 11, 1, "", "symlink"], [290, 11, 1, "", "sync"], [290, 11, 1, "", "sysconf"], [290, 9, 1, "", "sysconf_names"], [290, 11, 1, "", "system"], [290, 11, 1, "", "tcgetpgrp"], [290, 11, 1, "", "tcsetpgrp"], [290, 12, 1, "", "terminal_size"], [290, 11, 1, "", "times"], [290, 11, 1, "", "truncate"], [290, 11, 1, "", "ttyname"], [290, 11, 1, "", "umask"], [290, 11, 1, "", "uname"], [290, 11, 1, "", "unlink"], [290, 11, 1, "", "unsetenv"], [290, 11, 1, "", "unshare"], [290, 11, 1, "", "urandom"], [290, 11, 1, "", "utime"], [290, 11, 1, "", "wait"], [290, 11, 1, "", "wait3"], [290, 11, 1, "", "wait4"], [290, 11, 1, "", "waitid"], [290, 11, 1, "", "waitpid"], [290, 11, 1, "", "waitstatus_to_exitcode"], [290, 11, 1, "", "walk"], [290, 11, 1, "", "write"], [290, 11, 1, "", "writev"]], "os.DirEntry": [[290, 8, 1, "", "inode"], [290, 8, 1, "", "is_dir"], [290, 8, 1, "", "is_file"], [290, 8, 1, "", "is_junction"], [290, 8, 1, "", "is_symlink"], [290, 7, 1, "", "name"], [290, 7, 1, "", "path"], [290, 8, 1, "", "stat"]], "os.PathLike": [[290, 8, 1, "", "__fspath__"]], "os.path": [[291, 11, 1, "", "abspath"], [291, 11, 1, "", "basename"], [291, 11, 1, "", "commonpath"], [291, 11, 1, "", "commonprefix"], [291, 11, 1, "", "dirname"], [291, 11, 1, "", "exists"], [291, 11, 1, "", "expanduser"], [291, 11, 1, "", "expandvars"], [291, 11, 1, "", "getatime"], [291, 11, 1, "", "getctime"], [291, 11, 1, "", "getmtime"], [291, 11, 1, "", "getsize"], [291, 11, 1, "", "isabs"], [291, 11, 1, "", "isdevdrive"], [291, 11, 1, "", "isdir"], [291, 11, 1, "", "isfile"], [291, 11, 1, "", "isjunction"], [291, 11, 1, "", "islink"], [291, 11, 1, "", "ismount"], [291, 11, 1, "", "join"], [291, 11, 1, "", "lexists"], [291, 11, 1, "", "normcase"], [291, 11, 1, "", "normpath"], [291, 11, 1, "", "realpath"], [291, 11, 1, "", "relpath"], [291, 11, 1, "", "samefile"], [291, 11, 1, "", "sameopenfile"], [291, 11, 1, "", "samestat"], [291, 11, 1, "", "split"], [291, 11, 1, "", "splitdrive"], [291, 11, 1, "", "splitext"], [291, 11, 1, "", "splitroot"], [291, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[290, 8, 1, "", "close"]], "os.sched_param": [[290, 7, 1, "", "sched_priority"]], "os.stat_result": [[290, 7, 1, "", "st_atime"], [290, 7, 1, "", "st_atime_ns"], [290, 7, 1, "", "st_birthtime"], [290, 7, 1, "", "st_birthtime_ns"], [290, 7, 1, "", "st_blksize"], [290, 7, 1, "", "st_blocks"], [290, 7, 1, "", "st_creator"], [290, 7, 1, "", "st_ctime"], [290, 7, 1, "", "st_ctime_ns"], [290, 7, 1, "", "st_dev"], [290, 7, 1, "", "st_file_attributes"], [290, 7, 1, "", "st_flags"], [290, 7, 1, "", "st_fstype"], [290, 7, 1, "", "st_gen"], [290, 7, 1, "", "st_gid"], [290, 7, 1, "", "st_ino"], [290, 7, 1, "", "st_mode"], [290, 7, 1, "", "st_mtime"], [290, 7, 1, "", "st_mtime_ns"], [290, 7, 1, "", "st_nlink"], [290, 7, 1, "", "st_rdev"], [290, 7, 1, "", "st_reparse_tag"], [290, 7, 1, "", "st_rsize"], [290, 7, 1, "", "st_size"], [290, 7, 1, "", "st_type"], [290, 7, 1, "", "st_uid"]], "os.terminal_size": [[290, 7, 1, "", "columns"], [290, 7, 1, "", "lines"]], "ossaudiodev": [[292, 6, 1, "", "OSSAudioError"], [292, 11, 1, "", "open"], [292, 11, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[292, 8, 1, "", "bufsize"], [292, 8, 1, "", "channels"], [292, 8, 1, "", "close"], [292, 7, 1, "", "closed"], [292, 8, 1, "", "fileno"], [292, 8, 1, "", "getfmts"], [292, 7, 1, "", "mode"], [292, 7, 1, "", "name"], [292, 8, 1, "", "nonblock"], [292, 8, 1, "", "obufcount"], [292, 8, 1, "", "obuffree"], [292, 8, 1, "", "post"], [292, 8, 1, "", "read"], [292, 8, 1, "", "reset"], [292, 8, 1, "", "setfmt"], [292, 8, 1, "", "setparameters"], [292, 8, 1, "", "speed"], [292, 8, 1, "", "sync"], [292, 8, 1, "", "write"], [292, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[292, 8, 1, "", "close"], [292, 8, 1, "", "controls"], [292, 8, 1, "", "fileno"], [292, 8, 1, "", "get"], [292, 8, 1, "", "get_recsrc"], [292, 8, 1, "", "reccontrols"], [292, 8, 1, "", "set"], [292, 8, 1, "", "set_recsrc"], [292, 8, 1, "", "stereocontrols"]], "pathlib": [[293, 12, 1, "", "Path"], [293, 12, 1, "", "PosixPath"], [293, 12, 1, "", "PurePath"], [293, 12, 1, "", "PurePosixPath"], [293, 12, 1, "", "PureWindowsPath"], [293, 12, 1, "", "WindowsPath"]], "pathlib.Path": [[293, 8, 1, "", "absolute"], [293, 8, 1, "", "chmod"], [293, 8, 1, "", "cwd"], [293, 8, 1, "", "exists"], [293, 8, 1, "", "expanduser"], [293, 8, 1, "", "glob"], [293, 8, 1, "", "group"], [293, 8, 1, "", "hardlink_to"], [293, 8, 1, "", "home"], [293, 8, 1, "", "is_block_device"], [293, 8, 1, "", "is_char_device"], [293, 8, 1, "", "is_dir"], [293, 8, 1, "", "is_fifo"], [293, 8, 1, "", "is_file"], [293, 8, 1, "", "is_junction"], [293, 8, 1, "", "is_mount"], [293, 8, 1, "", "is_socket"], [293, 8, 1, "", "is_symlink"], [293, 8, 1, "", "iterdir"], [293, 8, 1, "", "lchmod"], [293, 8, 1, "", "lstat"], [293, 8, 1, "", "mkdir"], [293, 8, 1, "", "open"], [293, 8, 1, "", "owner"], [293, 8, 1, "", "read_bytes"], [293, 8, 1, "", "read_text"], [293, 8, 1, "", "readlink"], [293, 8, 1, "", "rename"], [293, 8, 1, "", "replace"], [293, 8, 1, "", "resolve"], [293, 8, 1, "", "rglob"], [293, 8, 1, "", "rmdir"], [293, 8, 1, "", "samefile"], [293, 8, 1, "", "stat"], [293, 8, 1, "", "symlink_to"], [293, 8, 1, "", "touch"], [293, 8, 1, "", "unlink"], [293, 8, 1, "", "walk"], [293, 8, 1, "", "write_bytes"], [293, 8, 1, "", "write_text"]], "pathlib.PurePath": [[293, 7, 1, "", "anchor"], [293, 8, 1, "", "as_posix"], [293, 8, 1, "", "as_uri"], [293, 7, 1, "", "drive"], [293, 8, 1, "", "is_absolute"], [293, 8, 1, "", "is_relative_to"], [293, 8, 1, "", "is_reserved"], [293, 8, 1, "", "joinpath"], [293, 8, 1, "", "match"], [293, 7, 1, "", "name"], [293, 7, 1, "", "parent"], [293, 7, 1, "", "parents"], [293, 7, 1, "", "parts"], [293, 8, 1, "", "relative_to"], [293, 7, 1, "", "root"], [293, 7, 1, "", "stem"], [293, 7, 1, "", "suffix"], [293, 7, 1, "", "suffixes"], [293, 8, 1, "", "with_name"], [293, 8, 1, "", "with_segments"], [293, 8, 1, "", "with_stem"], [293, 8, 1, "", "with_suffix"]], "pdb": [[294, 12, 1, "", "Pdb"], [294, 11, 1, "", "pm"], [294, 11, 1, "", "post_mortem"], [294, 11, 1, "", "run"], [294, 11, 1, "", "runcall"], [294, 11, 1, "", "runeval"], [294, 11, 1, "", "set_trace"]], "pdb.Pdb": [[294, 8, 1, "", "run"], [294, 8, 1, "", "runcall"], [294, 8, 1, "", "runeval"], [294, 8, 1, "", "set_trace"]], "pickle": [[296, 9, 1, "", "DEFAULT_PROTOCOL"], [296, 9, 1, "", "HIGHEST_PROTOCOL"], [296, 12, 1, "", "PickleBuffer"], [296, 6, 1, "", "PickleError"], [296, 12, 1, "", "Pickler"], [296, 6, 1, "", "PicklingError"], [296, 12, 1, "", "Unpickler"], [296, 6, 1, "", "UnpicklingError"], [296, 11, 1, "", "dump"], [296, 11, 1, "", "dumps"], [296, 11, 1, "", "load"], [296, 11, 1, "", "loads"]], "pickle.PickleBuffer": [[296, 8, 1, "", "raw"], [296, 8, 1, "", "release"]], "pickle.Pickler": [[296, 7, 1, "", "dispatch_table"], [296, 8, 1, "", "dump"], [296, 7, 1, "", "fast"], [296, 8, 1, "", "persistent_id"], [296, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[296, 8, 1, "", "find_class"], [296, 8, 1, "", "load"], [296, 8, 1, "", "persistent_load"]], "pickletools": [[297, 11, 1, "", "dis"], [297, 11, 1, "", "genops"], [297, 11, 1, "", "optimize"], [297, 14, 1, "cmdoption-pickletools-a", "--annotate"], [297, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [297, 14, 1, "cmdoption-pickletools-m", "--memo"], [297, 14, 1, "cmdoption-pickletools-o", "--output"], [297, 14, 1, "cmdoption-pickletools-p", "--preamble"], [297, 14, 1, "cmdoption-pickletools-a", "-a"], [297, 14, 1, "cmdoption-pickletools-l", "-l"], [297, 14, 1, "cmdoption-pickletools-m", "-m"], [297, 14, 1, "cmdoption-pickletools-o", "-o"], [297, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[298, 12, 1, "", "Template"]], "pipes.Template": [[298, 8, 1, "", "append"], [298, 8, 1, "", "clone"], [298, 8, 1, "", "copy"], [298, 8, 1, "", "debug"], [298, 8, 1, "", "open"], [298, 8, 1, "", "prepend"], [298, 8, 1, "", "reset"]], "pkgutil": [[299, 12, 1, "", "ModuleInfo"], [299, 11, 1, "", "extend_path"], [299, 11, 1, "", "find_loader"], [299, 11, 1, "", "get_data"], [299, 11, 1, "", "get_importer"], [299, 11, 1, "", "get_loader"], [299, 11, 1, "", "iter_importers"], [299, 11, 1, "", "iter_modules"], [299, 11, 1, "", "resolve_name"], [299, 11, 1, "", "walk_packages"]], "platform": [[300, 11, 1, "", "architecture"], [300, 11, 1, "", "freedesktop_os_release"], [300, 11, 1, "", "java_ver"], [300, 11, 1, "", "libc_ver"], [300, 11, 1, "", "mac_ver"], [300, 11, 1, "", "machine"], [300, 11, 1, "", "node"], [300, 11, 1, "", "platform"], [300, 11, 1, "", "processor"], [300, 11, 1, "", "python_branch"], [300, 11, 1, "", "python_build"], [300, 11, 1, "", "python_compiler"], [300, 11, 1, "", "python_implementation"], [300, 11, 1, "", "python_revision"], [300, 11, 1, "", "python_version"], [300, 11, 1, "", "python_version_tuple"], [300, 11, 1, "", "release"], [300, 11, 1, "", "system"], [300, 11, 1, "", "system_alias"], [300, 11, 1, "", "uname"], [300, 11, 1, "", "version"], [300, 11, 1, "", "win32_edition"], [300, 11, 1, "", "win32_is_iot"], [300, 11, 1, "", "win32_ver"]], "plistlib": [[301, 9, 1, "", "FMT_BINARY"], [301, 9, 1, "", "FMT_XML"], [301, 12, 1, "", "UID"], [301, 11, 1, "", "dump"], [301, 11, 1, "", "dumps"], [301, 11, 1, "", "load"], [301, 11, 1, "", "loads"]], "poplib": [[302, 12, 1, "", "POP3"], [302, 12, 1, "", "POP3_SSL"], [302, 6, 1, "", "error_proto"]], "poplib.POP3": [[302, 8, 1, "", "apop"], [302, 8, 1, "", "capa"], [302, 8, 1, "", "dele"], [302, 8, 1, "", "getwelcome"], [302, 8, 1, "", "list"], [302, 8, 1, "", "noop"], [302, 8, 1, "", "pass_"], [302, 8, 1, "", "quit"], [302, 8, 1, "", "retr"], [302, 8, 1, "", "rpop"], [302, 8, 1, "", "rset"], [302, 8, 1, "", "set_debuglevel"], [302, 8, 1, "", "stat"], [302, 8, 1, "", "stls"], [302, 8, 1, "", "top"], [302, 8, 1, "", "uidl"], [302, 8, 1, "", "user"], [302, 8, 1, "", "utf8"]], "posix": [[303, 9, 1, "", "environ"]], "pprint": [[304, 12, 1, "", "PrettyPrinter"], [304, 11, 1, "", "isreadable"], [304, 11, 1, "", "isrecursive"], [304, 11, 1, "", "pformat"], [304, 11, 1, "", "pp"], [304, 11, 1, "", "pprint"], [304, 11, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[304, 8, 1, "", "format"], [304, 8, 1, "", "isreadable"], [304, 8, 1, "", "isrecursive"], [304, 8, 1, "", "pformat"], [304, 8, 1, "", "pprint"]], "profile": [[305, 12, 1, "", "Profile"], [305, 11, 1, "", "run"], [305, 11, 1, "", "runctx"]], "profile.Profile": [[305, 8, 1, "", "create_stats"], [305, 8, 1, "", "disable"], [305, 8, 1, "", "dump_stats"], [305, 8, 1, "", "enable"], [305, 8, 1, "", "print_stats"], [305, 8, 1, "", "run"], [305, 8, 1, "", "runcall"], [305, 8, 1, "", "runctx"]], "pstats": [[305, 12, 1, "", "Stats"]], "pstats.Stats": [[305, 8, 1, "", "add"], [305, 8, 1, "", "dump_stats"], [305, 8, 1, "", "get_stats_profile"], [305, 8, 1, "", "print_callees"], [305, 8, 1, "", "print_callers"], [305, 8, 1, "", "print_stats"], [305, 8, 1, "", "reverse_order"], [305, 8, 1, "", "sort_stats"], [305, 8, 1, "", "strip_dirs"]], "pty": [[306, 11, 1, "", "fork"], [306, 11, 1, "", "openpty"], [306, 11, 1, "", "spawn"]], "pwd": [[307, 11, 1, "", "getpwall"], [307, 11, 1, "", "getpwnam"], [307, 11, 1, "", "getpwuid"]], "py_compile": [[308, 6, 1, "", "PyCompileError"], [308, 12, 1, "", "PycInvalidationMode"], [308, 11, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[308, 7, 1, "", "CHECKED_HASH"], [308, 7, 1, "", "TIMESTAMP"], [308, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr.Class": [[309, 7, 1, "", "children"], [309, 7, 1, "", "file"], [309, 7, 1, "", "lineno"], [309, 7, 1, "", "methods"], [309, 7, 1, "", "module"], [309, 7, 1, "", "name"], [309, 7, 1, "", "parent"], [309, 7, 1, "", "super"]], "pyclbr.Function": [[309, 7, 1, "", "children"], [309, 7, 1, "", "file"], [309, 7, 1, "", "is_async"], [309, 7, 1, "", "lineno"], [309, 7, 1, "", "module"], [309, 7, 1, "", "name"], [309, 7, 1, "", "parent"]], "pyclbr": [[309, 11, 1, "", "readmodule"], [309, 11, 1, "", "readmodule_ex"]], "queue": [[313, 6, 1, "", "Empty"], [313, 6, 1, "", "Full"], [313, 12, 1, "", "LifoQueue"], [313, 12, 1, "", "PriorityQueue"], [313, 12, 1, "", "Queue"], [313, 12, 1, "", "SimpleQueue"]], "queue.Queue": [[313, 8, 1, "", "empty"], [313, 8, 1, "", "full"], [313, 8, 1, "", "get"], [313, 8, 1, "", "get_nowait"], [313, 8, 1, "", "join"], [313, 8, 1, "", "put"], [313, 8, 1, "", "put_nowait"], [313, 8, 1, "", "qsize"], [313, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[313, 8, 1, "", "empty"], [313, 8, 1, "", "get"], [313, 8, 1, "", "get_nowait"], [313, 8, 1, "", "put"], [313, 8, 1, "", "put_nowait"], [313, 8, 1, "", "qsize"]], "quopri": [[314, 11, 1, "", "decode"], [314, 11, 1, "", "decodestring"], [314, 11, 1, "", "encode"], [314, 11, 1, "", "encodestring"]], "random": [[315, 12, 1, "", "Random"], [315, 12, 1, "", "SystemRandom"], [315, 11, 1, "", "betavariate"], [315, 11, 1, "", "binomialvariate"], [315, 11, 1, "", "choice"], [315, 11, 1, "", "choices"], [315, 11, 1, "", "expovariate"], [315, 11, 1, "", "gammavariate"], [315, 11, 1, "", "gauss"], [315, 11, 1, "", "getrandbits"], [315, 11, 1, "", "getstate"], [315, 11, 1, "", "lognormvariate"], [315, 11, 1, "", "normalvariate"], [315, 11, 1, "", "paretovariate"], [315, 11, 1, "", "randbytes"], [315, 11, 1, "", "randint"], [315, 11, 1, "", "random"], [315, 11, 1, "", "randrange"], [315, 11, 1, "", "sample"], [315, 11, 1, "", "seed"], [315, 11, 1, "", "setstate"], [315, 11, 1, "", "shuffle"], [315, 11, 1, "", "triangular"], [315, 11, 1, "", "uniform"], [315, 11, 1, "", "vonmisesvariate"], [315, 11, 1, "", "weibullvariate"]], "range": [[341, 7, 1, "", "start"], [341, 7, 1, "", "step"], [341, 7, 1, "", "stop"]], "re": [[316, 9, 1, "", "A"], [316, 9, 1, "", "ASCII"], [316, 9, 1, "", "DEBUG"], [316, 9, 1, "", "DOTALL"], [316, 9, 1, "", "I"], [316, 9, 1, "", "IGNORECASE"], [316, 9, 1, "", "L"], [316, 9, 1, "", "LOCALE"], [316, 9, 1, "", "M"], [316, 9, 1, "", "MULTILINE"], [316, 9, 1, "", "NOFLAG"], [316, 12, 1, "", "RegexFlag"], [316, 9, 1, "", "S"], [316, 9, 1, "", "U"], [316, 9, 1, "", "UNICODE"], [316, 9, 1, "", "VERBOSE"], [316, 9, 1, "", "X"], [316, 11, 1, "", "compile"], [316, 6, 1, "", "error"], [316, 11, 1, "", "escape"], [316, 11, 1, "", "findall"], [316, 11, 1, "", "finditer"], [316, 11, 1, "", "fullmatch"], [316, 11, 1, "", "match"], [316, 11, 1, "", "purge"], [316, 11, 1, "", "search"], [316, 11, 1, "", "split"], [316, 11, 1, "", "sub"], [316, 11, 1, "", "subn"]], "re.Match": [[316, 8, 1, "", "__getitem__"], [316, 8, 1, "", "end"], [316, 7, 1, "", "endpos"], [316, 8, 1, "", "expand"], [316, 8, 1, "", "group"], [316, 8, 1, "", "groupdict"], [316, 8, 1, "", "groups"], [316, 7, 1, "", "lastgroup"], [316, 7, 1, "", "lastindex"], [316, 7, 1, "", "pos"], [316, 7, 1, "", "re"], [316, 8, 1, "", "span"], [316, 8, 1, "", "start"], [316, 7, 1, "", "string"]], "re.Pattern": [[316, 8, 1, "", "findall"], [316, 8, 1, "", "finditer"], [316, 7, 1, "", "flags"], [316, 8, 1, "", "fullmatch"], [316, 7, 1, "", "groupindex"], [316, 7, 1, "", "groups"], [316, 8, 1, "", "match"], [316, 7, 1, "", "pattern"], [316, 8, 1, "", "search"], [316, 8, 1, "", "split"], [316, 8, 1, "", "sub"], [316, 8, 1, "", "subn"]], "re.error": [[316, 7, 1, "", "colno"], [316, 7, 1, "", "lineno"], [316, 7, 1, "", "msg"], [316, 7, 1, "", "pattern"], [316, 7, 1, "", "pos"]], "readline": [[317, 11, 1, "", "add_history"], [317, 11, 1, "", "append_history_file"], [317, 11, 1, "", "clear_history"], [317, 11, 1, "", "get_begidx"], [317, 11, 1, "", "get_completer"], [317, 11, 1, "", "get_completer_delims"], [317, 11, 1, "", "get_completion_type"], [317, 11, 1, "", "get_current_history_length"], [317, 11, 1, "", "get_endidx"], [317, 11, 1, "", "get_history_item"], [317, 11, 1, "", "get_history_length"], [317, 11, 1, "", "get_line_buffer"], [317, 11, 1, "", "insert_text"], [317, 11, 1, "", "parse_and_bind"], [317, 11, 1, "", "read_history_file"], [317, 11, 1, "", "read_init_file"], [317, 11, 1, "", "redisplay"], [317, 11, 1, "", "remove_history_item"], [317, 11, 1, "", "replace_history_item"], [317, 11, 1, "", "set_auto_history"], [317, 11, 1, "", "set_completer"], [317, 11, 1, "", "set_completer_delims"], [317, 11, 1, "", "set_completion_display_matches_hook"], [317, 11, 1, "", "set_history_length"], [317, 11, 1, "", "set_pre_input_hook"], [317, 11, 1, "", "set_startup_hook"], [317, 11, 1, "", "write_history_file"]], "reprlib": [[318, 12, 1, "", "Repr"], [318, 9, 1, "", "aRepr"], [318, 11, 1, "", "recursive_repr"], [318, 11, 1, "", "repr"]], "reprlib.Repr": [[318, 7, 1, "", "fillvalue"], [318, 7, 1, "", "indent"], [318, 7, 1, "", "maxarray"], [318, 7, 1, "", "maxdeque"], [318, 7, 1, "", "maxdict"], [318, 7, 1, "", "maxfrozenset"], [318, 7, 1, "", "maxlevel"], [318, 7, 1, "", "maxlist"], [318, 7, 1, "", "maxlong"], [318, 7, 1, "", "maxother"], [318, 7, 1, "", "maxset"], [318, 7, 1, "", "maxstring"], [318, 7, 1, "", "maxtuple"], [318, 8, 1, "", "repr"], [318, 8, 1, "", "repr1"]], "resource": [[319, 9, 1, "", "RLIMIT_AS"], [319, 9, 1, "", "RLIMIT_CORE"], [319, 9, 1, "", "RLIMIT_CPU"], [319, 9, 1, "", "RLIMIT_DATA"], [319, 9, 1, "", "RLIMIT_FSIZE"], [319, 9, 1, "", "RLIMIT_KQUEUES"], [319, 9, 1, "", "RLIMIT_MEMLOCK"], [319, 9, 1, "", "RLIMIT_MSGQUEUE"], [319, 9, 1, "", "RLIMIT_NICE"], [319, 9, 1, "", "RLIMIT_NOFILE"], [319, 9, 1, "", "RLIMIT_NPROC"], [319, 9, 1, "", "RLIMIT_NPTS"], [319, 9, 1, "", "RLIMIT_OFILE"], [319, 9, 1, "", "RLIMIT_RSS"], [319, 9, 1, "", "RLIMIT_RTPRIO"], [319, 9, 1, "", "RLIMIT_RTTIME"], [319, 9, 1, "", "RLIMIT_SBSIZE"], [319, 9, 1, "", "RLIMIT_SIGPENDING"], [319, 9, 1, "", "RLIMIT_STACK"], [319, 9, 1, "", "RLIMIT_SWAP"], [319, 9, 1, "", "RLIMIT_VMEM"], [319, 9, 1, "", "RLIM_INFINITY"], [319, 9, 1, "", "RUSAGE_BOTH"], [319, 9, 1, "", "RUSAGE_CHILDREN"], [319, 9, 1, "", "RUSAGE_SELF"], [319, 9, 1, "", "RUSAGE_THREAD"], [319, 6, 1, "", "error"], [319, 11, 1, "", "getpagesize"], [319, 11, 1, "", "getrlimit"], [319, 11, 1, "", "getrusage"], [319, 11, 1, "", "prlimit"], [319, 11, 1, "", "setrlimit"]], "rlcompleter.Completer": [[320, 8, 1, "", "complete"]], "runpy": [[321, 11, 1, "", "run_module"], [321, 11, 1, "", "run_path"]], "sched": [[322, 12, 1, "", "scheduler"]], "sched.scheduler": [[322, 8, 1, "", "cancel"], [322, 8, 1, "", "empty"], [322, 8, 1, "", "enter"], [322, 8, 1, "", "enterabs"], [322, 7, 1, "", "queue"], [322, 8, 1, "", "run"]], "secrets": [[323, 12, 1, "", "SystemRandom"], [323, 11, 1, "", "choice"], [323, 11, 1, "", "compare_digest"], [323, 11, 1, "", "randbelow"], [323, 11, 1, "", "randbits"], [323, 11, 1, "", "token_bytes"], [323, 11, 1, "", "token_hex"], [323, 11, 1, "", "token_urlsafe"]], "select": [[325, 7, 1, "", "PIPE_BUF"], [325, 11, 1, "", "devpoll"], [325, 11, 1, "", "epoll"], [325, 6, 1, "", "error"], [325, 11, 1, "", "kevent"], [325, 11, 1, "", "kqueue"], [325, 11, 1, "", "poll"], [325, 11, 1, "", "select"]], "select.devpoll": [[325, 8, 1, "", "close"], [325, 7, 1, "", "closed"], [325, 8, 1, "", "fileno"], [325, 8, 1, "", "modify"], [325, 8, 1, "", "poll"], [325, 8, 1, "", "register"], [325, 8, 1, "", "unregister"]], "select.epoll": [[325, 8, 1, "", "close"], [325, 7, 1, "", "closed"], [325, 8, 1, "", "fileno"], [325, 8, 1, "", "fromfd"], [325, 8, 1, "", "modify"], [325, 8, 1, "", "poll"], [325, 8, 1, "", "register"], [325, 8, 1, "", "unregister"]], "select.kevent": [[325, 7, 1, "", "data"], [325, 7, 1, "", "fflags"], [325, 7, 1, "", "filter"], [325, 7, 1, "", "flags"], [325, 7, 1, "", "ident"], [325, 7, 1, "", "udata"]], "select.kqueue": [[325, 8, 1, "", "close"], [325, 7, 1, "", "closed"], [325, 8, 1, "", "control"], [325, 8, 1, "", "fileno"], [325, 8, 1, "", "fromfd"]], "select.poll": [[325, 8, 1, "", "modify"], [325, 8, 1, "", "poll"], [325, 8, 1, "", "register"], [325, 8, 1, "", "unregister"]], "selectors": [[326, 12, 1, "", "BaseSelector"], [326, 12, 1, "", "DefaultSelector"], [326, 12, 1, "", "DevpollSelector"], [326, 9, 1, "", "EVENT_READ"], [326, 9, 1, "", "EVENT_WRITE"], [326, 12, 1, "", "EpollSelector"], [326, 12, 1, "", "KqueueSelector"], [326, 12, 1, "", "PollSelector"], [326, 12, 1, "", "SelectSelector"], [326, 12, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[326, 8, 1, "", "close"], [326, 8, 1, "", "get_key"], [326, 8, 1, "", "get_map"], [326, 8, 1, "", "modify"], [326, 8, 1, "", "register"], [326, 8, 1, "", "select"], [326, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[326, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[326, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[326, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[326, 7, 1, "", "data"], [326, 7, 1, "", "events"], [326, 7, 1, "", "fd"], [326, 7, 1, "", "fileobj"]], "shelve": [[327, 12, 1, "", "BsdDbShelf"], [327, 12, 1, "", "DbfilenameShelf"], [327, 12, 1, "", "Shelf"], [327, 11, 1, "", "open"]], "shelve.Shelf": [[327, 8, 1, "", "close"], [327, 8, 1, "", "sync"]], "shlex": [[328, 11, 1, "", "join"], [328, 11, 1, "", "quote"], [328, 12, 1, "", "shlex"], [328, 11, 1, "", "split"]], "shlex.shlex": [[328, 7, 1, "", "commenters"], [328, 7, 1, "", "debug"], [328, 7, 1, "", "eof"], [328, 8, 1, "", "error_leader"], [328, 7, 1, "", "escape"], [328, 7, 1, "", "escapedquotes"], [328, 8, 1, "", "get_token"], [328, 7, 1, "", "infile"], [328, 7, 1, "", "instream"], [328, 7, 1, "", "lineno"], [328, 8, 1, "", "pop_source"], [328, 7, 1, "", "punctuation_chars"], [328, 8, 1, "", "push_source"], [328, 8, 1, "", "push_token"], [328, 7, 1, "", "quotes"], [328, 8, 1, "", "read_token"], [328, 7, 1, "", "source"], [328, 8, 1, "", "sourcehook"], [328, 7, 1, "", "token"], [328, 7, 1, "", "whitespace"], [328, 7, 1, "", "whitespace_split"], [328, 7, 1, "", "wordchars"]], "shutil": [[329, 6, 1, "", "Error"], [329, 6, 1, "", "SameFileError"], [329, 11, 1, "", "chown"], [329, 11, 1, "", "copy"], [329, 11, 1, "", "copy2"], [329, 11, 1, "", "copyfile"], [329, 11, 1, "", "copyfileobj"], [329, 11, 1, "", "copymode"], [329, 11, 1, "", "copystat"], [329, 11, 1, "", "copytree"], [329, 11, 1, "", "disk_usage"], [329, 11, 1, "", "get_archive_formats"], [329, 11, 1, "", "get_terminal_size"], [329, 11, 1, "", "get_unpack_formats"], [329, 11, 1, "", "ignore_patterns"], [329, 11, 1, "", "make_archive"], [329, 11, 1, "", "move"], [329, 11, 1, "", "register_archive_format"], [329, 11, 1, "", "register_unpack_format"], [329, 11, 1, "", "rmtree"], [329, 11, 1, "", "unpack_archive"], [329, 11, 1, "", "unregister_archive_format"], [329, 11, 1, "", "unregister_unpack_format"], [329, 11, 1, "", "which"]], "shutil.rmtree": [[329, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[330, 9, 1, "", "CTRL_BREAK_EVENT"], [330, 9, 1, "", "CTRL_C_EVENT"], [330, 12, 1, "", "Handlers"], [330, 9, 1, "", "ITIMER_PROF"], [330, 9, 1, "", "ITIMER_REAL"], [330, 9, 1, "", "ITIMER_VIRTUAL"], [330, 6, 1, "", "ItimerError"], [330, 9, 1, "", "NSIG"], [330, 9, 1, "", "SIGABRT"], [330, 9, 1, "", "SIGALRM"], [330, 9, 1, "", "SIGBREAK"], [330, 9, 1, "", "SIGBUS"], [330, 9, 1, "", "SIGCHLD"], [330, 9, 1, "", "SIGCLD"], [330, 9, 1, "", "SIGCONT"], [330, 9, 1, "", "SIGFPE"], [330, 9, 1, "", "SIGHUP"], [330, 9, 1, "", "SIGILL"], [330, 9, 1, "", "SIGINT"], [330, 9, 1, "", "SIGKILL"], [330, 9, 1, "", "SIGPIPE"], [330, 9, 1, "", "SIGSEGV"], [330, 9, 1, "", "SIGSTKFLT"], [330, 9, 1, "", "SIGTERM"], [330, 9, 1, "", "SIGUSR1"], [330, 9, 1, "", "SIGUSR2"], [330, 9, 1, "", "SIGWINCH"], [330, 9, 1, "", "SIG_BLOCK"], [330, 9, 1, "", "SIG_DFL"], [330, 9, 1, "", "SIG_IGN"], [330, 9, 1, "", "SIG_SETMASK"], [330, 9, 1, "", "SIG_UNBLOCK"], [330, 12, 1, "", "Sigmasks"], [330, 12, 1, "", "Signals"], [330, 11, 1, "", "alarm"], [330, 11, 1, "", "getitimer"], [330, 11, 1, "", "getsignal"], [330, 11, 1, "", "pause"], [330, 11, 1, "", "pidfd_send_signal"], [330, 11, 1, "", "pthread_kill"], [330, 11, 1, "", "pthread_sigmask"], [330, 11, 1, "", "raise_signal"], [330, 11, 1, "", "set_wakeup_fd"], [330, 11, 1, "", "setitimer"], [330, 11, 1, "", "siginterrupt"], [330, 11, 1, "", "signal"], [330, 11, 1, "", "sigpending"], [330, 11, 1, "", "sigtimedwait"], [330, 11, 1, "", "sigwait"], [330, 11, 1, "", "sigwaitinfo"], [330, 11, 1, "", "strsignal"], [330, 11, 1, "", "valid_signals"]], "site": [[331, 9, 1, "", "ENABLE_USER_SITE"], [331, 9, 1, "", "PREFIXES"], [331, 9, 1, "", "USER_BASE"], [331, 9, 1, "", "USER_SITE"], [331, 11, 1, "", "addsitedir"], [331, 11, 1, "", "getsitepackages"], [331, 11, 1, "", "getuserbase"], [331, 11, 1, "", "getusersitepackages"], [331, 11, 1, "", "main"], [331, 14, 1, "cmdoption-site-user-base", "--user-base"], [331, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[424, 8, 1, "", "indices"]], "smtplib": [[332, 12, 1, "", "LMTP"], [332, 12, 1, "", "SMTP"], [332, 6, 1, "", "SMTPAuthenticationError"], [332, 6, 1, "", "SMTPConnectError"], [332, 6, 1, "", "SMTPDataError"], [332, 6, 1, "", "SMTPException"], [332, 6, 1, "", "SMTPHeloError"], [332, 6, 1, "", "SMTPNotSupportedError"], [332, 6, 1, "", "SMTPRecipientsRefused"], [332, 6, 1, "", "SMTPResponseException"], [332, 6, 1, "", "SMTPSenderRefused"], [332, 6, 1, "", "SMTPServerDisconnected"], [332, 12, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[332, 8, 1, "", "auth"], [332, 8, 1, "", "connect"], [332, 8, 1, "", "docmd"], [332, 8, 1, "", "ehlo"], [332, 8, 1, "", "ehlo_or_helo_if_needed"], [332, 8, 1, "", "has_extn"], [332, 8, 1, "", "helo"], [332, 8, 1, "", "login"], [332, 8, 1, "", "quit"], [332, 8, 1, "", "send_message"], [332, 8, 1, "", "sendmail"], [332, 8, 1, "", "set_debuglevel"], [332, 8, 1, "", "starttls"], [332, 8, 1, "", "verify"]], "sndhdr": [[333, 9, 1, "", "tests"], [333, 11, 1, "", "what"], [333, 11, 1, "", "whathdr"]], "socket": [[334, 9, 1, "", "AF_ALG"], [334, 9, 1, "", "AF_CAN"], [334, 9, 1, "", "AF_DIVERT"], [334, 9, 1, "", "AF_HYPERV"], [334, 9, 1, "", "AF_INET"], [334, 9, 1, "", "AF_INET6"], [334, 9, 1, "", "AF_LINK"], [334, 9, 1, "", "AF_PACKET"], [334, 9, 1, "", "AF_QIPCRTR"], [334, 9, 1, "", "AF_RDS"], [334, 9, 1, "", "AF_UNIX"], [334, 9, 1, "", "AF_VSOCK"], [334, 9, 1, "", "BDADDR_ANY"], [334, 9, 1, "", "BDADDR_LOCAL"], [334, 9, 1, "", "CAN_BCM"], [334, 9, 1, "", "CAN_ISOTP"], [334, 9, 1, "", "CAN_J1939"], [334, 9, 1, "", "CAN_RAW_FD_FRAMES"], [334, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [334, 11, 1, "", "CMSG_LEN"], [334, 11, 1, "", "CMSG_SPACE"], [334, 9, 1, "", "ETHERTYPE_ARP"], [334, 9, 1, "", "ETHERTYPE_IP"], [334, 9, 1, "", "ETHERTYPE_IPV6"], [334, 9, 1, "", "ETHERTYPE_VLAN"], [334, 9, 1, "", "ETH_P_ALL"], [334, 9, 1, "", "HCI_DATA_DIR"], [334, 9, 1, "", "HCI_FILTER"], [334, 9, 1, "", "HCI_TIME_STAMP"], [334, 9, 1, "", "HVSOCKET_ADDRESS_FLAG_PASSTHRU"], [334, 9, 1, "", "HVSOCKET_CONNECTED_SUSPEND"], [334, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT"], [334, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT_MAX"], [334, 9, 1, "", "HV_GUID_BROADCAST"], [334, 9, 1, "", "HV_GUID_CHILDREN"], [334, 9, 1, "", "HV_GUID_LOOPBACK"], [334, 9, 1, "", "HV_GUID_PARENT"], [334, 9, 1, "", "HV_GUID_WILDCARD"], [334, 9, 1, "", "HV_GUID_ZERO"], [334, 9, 1, "", "HV_PROTOCOL_RAW"], [334, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [334, 9, 1, "", "LOCAL_CREDS"], [334, 9, 1, "", "LOCAL_CREDS_PERSISTENT"], [334, 9, 1, "", "PF_CAN"], [334, 9, 1, "", "PF_DIVERT"], [334, 9, 1, "", "PF_PACKET"], [334, 9, 1, "", "PF_RDS"], [334, 9, 1, "", "SCM_CREDS2"], [334, 9, 1, "", "SIO_KEEPALIVE_VALS"], [334, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [334, 9, 1, "", "SIO_RCVALL"], [334, 9, 1, "", "SOCK_CLOEXEC"], [334, 9, 1, "", "SOCK_DGRAM"], [334, 9, 1, "", "SOCK_NONBLOCK"], [334, 9, 1, "", "SOCK_RAW"], [334, 9, 1, "", "SOCK_RDM"], [334, 9, 1, "", "SOCK_SEQPACKET"], [334, 9, 1, "", "SOCK_STREAM"], [334, 9, 1, "", "SOL_ALG"], [334, 9, 1, "", "SOL_RDS"], [334, 9, 1, "", "SOMAXCONN"], [334, 9, 1, "", "SO_INCOMING_CPU"], [334, 9, 1, "", "SocketType"], [334, 11, 1, "", "close"], [334, 11, 1, "", "create_connection"], [334, 11, 1, "", "create_server"], [334, 6, 1, "", "error"], [334, 11, 1, "", "fromfd"], [334, 11, 1, "", "fromshare"], [334, 6, 1, "", "gaierror"], [334, 11, 1, "", "getaddrinfo"], [334, 11, 1, "", "getdefaulttimeout"], [334, 11, 1, "", "getfqdn"], [334, 11, 1, "", "gethostbyaddr"], [334, 11, 1, "", "gethostbyname"], [334, 11, 1, "", "gethostbyname_ex"], [334, 11, 1, "", "gethostname"], [334, 11, 1, "", "getnameinfo"], [334, 11, 1, "", "getprotobyname"], [334, 11, 1, "", "getservbyname"], [334, 11, 1, "", "getservbyport"], [334, 11, 1, "", "has_dualstack_ipv6"], [334, 9, 1, "", "has_ipv6"], [334, 6, 1, "", "herror"], [334, 11, 1, "", "htonl"], [334, 11, 1, "", "htons"], [334, 11, 1, "", "if_indextoname"], [334, 11, 1, "", "if_nameindex"], [334, 11, 1, "", "if_nametoindex"], [334, 11, 1, "", "inet_aton"], [334, 11, 1, "", "inet_ntoa"], [334, 11, 1, "", "inet_ntop"], [334, 11, 1, "", "inet_pton"], [334, 11, 1, "", "ntohl"], [334, 11, 1, "", "ntohs"], [334, 11, 1, "", "recv_fds"], [334, 11, 1, "", "send_fds"], [334, 11, 1, "", "setdefaulttimeout"], [334, 11, 1, "", "sethostname"], [334, 12, 1, "", "socket"], [334, 11, 1, "", "socketpair"], [334, 6, 1, "", "timeout"]], "socket.socket": [[334, 8, 1, "", "accept"], [334, 8, 1, "", "bind"], [334, 8, 1, "", "close"], [334, 8, 1, "", "connect"], [334, 8, 1, "", "connect_ex"], [334, 8, 1, "", "detach"], [334, 8, 1, "", "dup"], [334, 7, 1, "", "family"], [334, 8, 1, "", "fileno"], [334, 8, 1, "", "get_inheritable"], [334, 8, 1, "", "getblocking"], [334, 8, 1, "", "getpeername"], [334, 8, 1, "", "getsockname"], [334, 8, 1, "", "getsockopt"], [334, 8, 1, "", "gettimeout"], [334, 8, 1, "", "ioctl"], [334, 8, 1, "", "listen"], [334, 8, 1, "", "makefile"], [334, 7, 1, "", "proto"], [334, 8, 1, "", "recv"], [334, 8, 1, "", "recv_into"], [334, 8, 1, "", "recvfrom"], [334, 8, 1, "", "recvfrom_into"], [334, 8, 1, "", "recvmsg"], [334, 8, 1, "", "recvmsg_into"], [334, 8, 1, "", "send"], [334, 8, 1, "", "sendall"], [334, 8, 1, "", "sendfile"], [334, 8, 1, "", "sendmsg"], [334, 8, 1, "", "sendmsg_afalg"], [334, 8, 1, "", "sendto"], [334, 8, 1, "", "set_inheritable"], [334, 8, 1, "", "setblocking"], [334, 8, 1, "", "setsockopt"], [334, 8, 1, "", "settimeout"], [334, 8, 1, "", "share"], [334, 8, 1, "", "shutdown"], [334, 7, 1, "", "type"]], "socketserver": [[335, 12, 1, "", "BaseRequestHandler"], [335, 12, 1, "", "BaseServer"], [335, 12, 1, "", "DatagramRequestHandler"], [335, 12, 1, "", "ForkingMixIn"], [335, 12, 1, "", "ForkingTCPServer"], [335, 12, 1, "", "ForkingUDPServer"], [335, 12, 1, "", "ForkingUnixDatagramServer"], [335, 12, 1, "", "ForkingUnixStreamServer"], [335, 12, 1, "", "StreamRequestHandler"], [335, 12, 1, "", "TCPServer"], [335, 12, 1, "", "ThreadingMixIn"], [335, 12, 1, "", "ThreadingTCPServer"], [335, 12, 1, "", "ThreadingUDPServer"], [335, 12, 1, "", "ThreadingUnixDatagramServer"], [335, 12, 1, "", "ThreadingUnixStreamServer"], [335, 12, 1, "", "UDPServer"], [335, 12, 1, "", "UnixDatagramServer"], [335, 12, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[335, 8, 1, "", "finish"], [335, 8, 1, "", "handle"], [335, 8, 1, "", "setup"]], "socketserver.BaseServer": [[335, 7, 1, "", "RequestHandlerClass"], [335, 7, 1, "", "address_family"], [335, 7, 1, "", "allow_reuse_address"], [335, 8, 1, "", "fileno"], [335, 8, 1, "", "finish_request"], [335, 8, 1, "", "get_request"], [335, 8, 1, "", "handle_error"], [335, 8, 1, "", "handle_request"], [335, 8, 1, "", "handle_timeout"], [335, 8, 1, "", "process_request"], [335, 7, 1, "", "request_queue_size"], [335, 8, 1, "", "serve_forever"], [335, 8, 1, "", "server_activate"], [335, 7, 1, "", "server_address"], [335, 8, 1, "", "server_bind"], [335, 8, 1, "", "server_close"], [335, 8, 1, "", "service_actions"], [335, 8, 1, "", "shutdown"], [335, 7, 1, "", "socket"], [335, 7, 1, "", "socket_type"], [335, 7, 1, "", "timeout"], [335, 8, 1, "", "verify_request"]], "spwd": [[336, 11, 1, "", "getspall"], [336, 11, 1, "", "getspnam"]], "sqlite3": [[337, 12, 1, "", "Blob"], [337, 12, 1, "", "Connection"], [337, 12, 1, "", "Cursor"], [337, 6, 1, "", "DataError"], [337, 6, 1, "", "DatabaseError"], [337, 6, 1, "", "Error"], [337, 6, 1, "", "IntegrityError"], [337, 6, 1, "", "InterfaceError"], [337, 6, 1, "", "InternalError"], [337, 9, 1, "", "LEGACY_TRANSACTION_CONTROL"], [337, 6, 1, "", "NotSupportedError"], [337, 6, 1, "", "OperationalError"], [337, 9, 1, "", "PARSE_COLNAMES"], [337, 9, 1, "", "PARSE_DECLTYPES"], [337, 12, 1, "", "PrepareProtocol"], [337, 6, 1, "", "ProgrammingError"], [337, 12, 1, "", "Row"], [337, 9, 1, "", "SQLITE_DBCONFIG_DEFENSIVE"], [337, 9, 1, "", "SQLITE_DBCONFIG_DQS_DDL"], [337, 9, 1, "", "SQLITE_DBCONFIG_DQS_DML"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FKEY"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_QPSG"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_TRIGGER"], [337, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_VIEW"], [337, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"], [337, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"], [337, 9, 1, "", "SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"], [337, 9, 1, "", "SQLITE_DBCONFIG_RESET_DATABASE"], [337, 9, 1, "", "SQLITE_DBCONFIG_TRIGGER_EQP"], [337, 9, 1, "", "SQLITE_DBCONFIG_TRUSTED_SCHEMA"], [337, 9, 1, "", "SQLITE_DBCONFIG_WRITABLE_SCHEMA"], [337, 9, 1, "", "SQLITE_DENY"], [337, 9, 1, "", "SQLITE_IGNORE"], [337, 9, 1, "", "SQLITE_OK"], [337, 6, 1, "", "Warning"], [337, 9, 1, "", "apilevel"], [337, 11, 1, "", "complete_statement"], [337, 11, 1, "", "connect"], [337, 11, 1, "", "enable_callback_tracebacks"], [337, 9, 1, "", "paramstyle"], [337, 11, 1, "", "register_adapter"], [337, 11, 1, "", "register_converter"], [337, 9, 1, "", "sqlite_version"], [337, 9, 1, "", "sqlite_version_info"], [337, 9, 1, "", "threadsafety"], [337, 9, 1, "", "version"], [337, 9, 1, "", "version_info"]], "sqlite3.Blob": [[337, 8, 1, "", "close"], [337, 8, 1, "", "read"], [337, 8, 1, "", "seek"], [337, 8, 1, "", "tell"], [337, 8, 1, "", "write"]], "sqlite3.Connection": [[337, 7, 1, "", "autocommit"], [337, 8, 1, "", "backup"], [337, 8, 1, "", "blobopen"], [337, 8, 1, "", "close"], [337, 8, 1, "", "commit"], [337, 8, 1, "", "create_aggregate"], [337, 8, 1, "", "create_collation"], [337, 8, 1, "", "create_function"], [337, 8, 1, "", "create_window_function"], [337, 8, 1, "", "cursor"], [337, 8, 1, "", "deserialize"], [337, 8, 1, "", "enable_load_extension"], [337, 8, 1, "", "execute"], [337, 8, 1, "", "executemany"], [337, 8, 1, "", "executescript"], [337, 8, 1, "", "getconfig"], [337, 8, 1, "", "getlimit"], [337, 7, 1, "", "in_transaction"], [337, 8, 1, "", "interrupt"], [337, 7, 1, "", "isolation_level"], [337, 8, 1, "", "iterdump"], [337, 8, 1, "", "load_extension"], [337, 8, 1, "", "rollback"], [337, 7, 1, "", "row_factory"], [337, 8, 1, "", "serialize"], [337, 8, 1, "", "set_authorizer"], [337, 8, 1, "", "set_progress_handler"], [337, 8, 1, "", "set_trace_callback"], [337, 8, 1, "", "setconfig"], [337, 8, 1, "", "setlimit"], [337, 7, 1, "", "text_factory"], [337, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[337, 7, 1, "", "arraysize"], [337, 8, 1, "", "close"], [337, 7, 1, "", "connection"], [337, 7, 1, "", "description"], [337, 8, 1, "", "execute"], [337, 8, 1, "", "executemany"], [337, 8, 1, "", "executescript"], [337, 8, 1, "", "fetchall"], [337, 8, 1, "", "fetchmany"], [337, 8, 1, "", "fetchone"], [337, 7, 1, "", "lastrowid"], [337, 7, 1, "", "row_factory"], [337, 7, 1, "", "rowcount"], [337, 8, 1, "", "setinputsizes"], [337, 8, 1, "", "setoutputsize"]], "sqlite3.Error": [[337, 7, 1, "", "sqlite_errorcode"], [337, 7, 1, "", "sqlite_errorname"]], "sqlite3.Row": [[337, 8, 1, "", "keys"]], "ssl": [[338, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [338, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [338, 12, 1, "", "AlertDescription"], [338, 9, 1, "", "CERT_NONE"], [338, 9, 1, "", "CERT_OPTIONAL"], [338, 9, 1, "", "CERT_REQUIRED"], [338, 9, 1, "", "CHANNEL_BINDING_TYPES"], [338, 6, 1, "", "CertificateError"], [338, 11, 1, "", "DER_cert_to_PEM_cert"], [338, 9, 1, "", "HAS_ALPN"], [338, 9, 1, "", "HAS_ECDH"], [338, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [338, 9, 1, "", "HAS_NPN"], [338, 9, 1, "", "HAS_SNI"], [338, 9, 1, "", "HAS_SSLv2"], [338, 9, 1, "", "HAS_SSLv3"], [338, 9, 1, "", "HAS_TLSv1"], [338, 9, 1, "", "HAS_TLSv1_1"], [338, 9, 1, "", "HAS_TLSv1_2"], [338, 9, 1, "", "HAS_TLSv1_3"], [338, 12, 1, "", "MemoryBIO"], [338, 9, 1, "", "OPENSSL_VERSION"], [338, 9, 1, "", "OPENSSL_VERSION_INFO"], [338, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [338, 9, 1, "", "OP_ALL"], [338, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [338, 9, 1, "", "OP_ENABLE_KTLS"], [338, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [338, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [338, 9, 1, "", "OP_LEGACY_SERVER_CONNECT"], [338, 9, 1, "", "OP_NO_COMPRESSION"], [338, 9, 1, "", "OP_NO_RENEGOTIATION"], [338, 9, 1, "", "OP_NO_SSLv2"], [338, 9, 1, "", "OP_NO_SSLv3"], [338, 9, 1, "", "OP_NO_TICKET"], [338, 9, 1, "", "OP_NO_TLSv1"], [338, 9, 1, "", "OP_NO_TLSv1_1"], [338, 9, 1, "", "OP_NO_TLSv1_2"], [338, 9, 1, "", "OP_NO_TLSv1_3"], [338, 9, 1, "", "OP_SINGLE_DH_USE"], [338, 9, 1, "", "OP_SINGLE_ECDH_USE"], [338, 12, 1, "", "Options"], [338, 11, 1, "", "PEM_cert_to_DER_cert"], [338, 9, 1, "", "PROTOCOL_SSLv23"], [338, 9, 1, "", "PROTOCOL_SSLv3"], [338, 9, 1, "", "PROTOCOL_TLS"], [338, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [338, 9, 1, "", "PROTOCOL_TLS_SERVER"], [338, 9, 1, "", "PROTOCOL_TLSv1"], [338, 9, 1, "", "PROTOCOL_TLSv1_1"], [338, 9, 1, "", "PROTOCOL_TLSv1_2"], [338, 11, 1, "", "RAND_add"], [338, 11, 1, "", "RAND_bytes"], [338, 11, 1, "", "RAND_status"], [338, 6, 1, "", "SSLCertVerificationError"], [338, 12, 1, "", "SSLContext"], [338, 6, 1, "", "SSLEOFError"], [338, 6, 1, "", "SSLError"], [338, 12, 1, "", "SSLErrorNumber"], [338, 12, 1, "", "SSLObject"], [338, 12, 1, "", "SSLSession"], [338, 12, 1, "", "SSLSocket"], [338, 6, 1, "", "SSLSyscallError"], [338, 6, 1, "", "SSLWantReadError"], [338, 6, 1, "", "SSLWantWriteError"], [338, 6, 1, "", "SSLZeroReturnError"], [338, 12, 1, "", "TLSVersion"], [338, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [338, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [338, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [338, 9, 1, "", "VERIFY_DEFAULT"], [338, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [338, 9, 1, "", "VERIFY_X509_STRICT"], [338, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [338, 12, 1, "", "VerifyFlags"], [338, 12, 1, "", "VerifyMode"], [338, 11, 1, "", "cert_time_to_seconds"], [338, 11, 1, "", "create_default_context"], [338, 11, 1, "", "enum_certificates"], [338, 11, 1, "", "enum_crls"], [338, 11, 1, "", "get_default_verify_paths"], [338, 11, 1, "", "get_server_certificate"]], "ssl.MemoryBIO": [[338, 7, 1, "", "eof"], [338, 7, 1, "", "pending"], [338, 8, 1, "", "read"], [338, 8, 1, "", "write"], [338, 8, 1, "", "write_eof"]], "ssl.Purpose": [[338, 9, 1, "", "CLIENT_AUTH"], [338, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[338, 7, 1, "", "verify_code"], [338, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[338, 8, 1, "", "cert_store_stats"], [338, 7, 1, "", "check_hostname"], [338, 8, 1, "", "get_ca_certs"], [338, 8, 1, "", "get_ciphers"], [338, 7, 1, "", "hostname_checks_common_name"], [338, 7, 1, "", "keylog_filename"], [338, 8, 1, "", "load_cert_chain"], [338, 8, 1, "", "load_default_certs"], [338, 8, 1, "", "load_dh_params"], [338, 8, 1, "", "load_verify_locations"], [338, 7, 1, "", "maximum_version"], [338, 7, 1, "", "minimum_version"], [338, 7, 1, "", "num_tickets"], [338, 7, 1, "", "options"], [338, 7, 1, "", "post_handshake_auth"], [338, 7, 1, "", "protocol"], [338, 7, 1, "", "security_level"], [338, 8, 1, "", "session_stats"], [338, 8, 1, "", "set_alpn_protocols"], [338, 8, 1, "", "set_ciphers"], [338, 8, 1, "", "set_default_verify_paths"], [338, 8, 1, "", "set_ecdh_curve"], [338, 8, 1, "", "set_npn_protocols"], [338, 7, 1, "", "set_servername_callback"], [338, 7, 1, "", "sni_callback"], [338, 7, 1, "", "sslobject_class"], [338, 7, 1, "", "sslsocket_class"], [338, 7, 1, "", "verify_flags"], [338, 7, 1, "", "verify_mode"], [338, 8, 1, "", "wrap_bio"], [338, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[338, 7, 1, "", "library"], [338, 7, 1, "", "reason"]], "ssl.SSLSession": [[338, 7, 1, "", "has_ticket"], [338, 7, 1, "", "id"], [338, 7, 1, "", "ticket_lifetime_hint"], [338, 7, 1, "", "time"], [338, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[338, 8, 1, "", "cipher"], [338, 8, 1, "", "compression"], [338, 7, 1, "", "context"], [338, 8, 1, "", "do_handshake"], [338, 8, 1, "", "get_channel_binding"], [338, 8, 1, "", "getpeercert"], [338, 8, 1, "", "pending"], [338, 8, 1, "", "read"], [338, 8, 1, "", "selected_alpn_protocol"], [338, 8, 1, "", "selected_npn_protocol"], [338, 7, 1, "", "server_hostname"], [338, 7, 1, "", "server_side"], [338, 7, 1, "", "session"], [338, 7, 1, "", "session_reused"], [338, 8, 1, "", "shared_ciphers"], [338, 8, 1, "", "unwrap"], [338, 8, 1, "", "verify_client_post_handshake"], [338, 8, 1, "", "version"], [338, 8, 1, "", "write"]], "ssl.TLSVersion": [[338, 7, 1, "", "MAXIMUM_SUPPORTED"], [338, 7, 1, "", "MINIMUM_SUPPORTED"], [338, 7, 1, "", "SSLv3"], [338, 7, 1, "", "TLSv1"], [338, 7, 1, "", "TLSv1_1"], [338, 7, 1, "", "TLSv1_2"], [338, 7, 1, "", "TLSv1_3"]], "stat": [[339, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [339, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [339, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [339, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [339, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [339, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [339, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [339, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [339, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [339, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [339, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [339, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [339, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [339, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [339, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [339, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [339, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [339, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [339, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [339, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [339, 9, 1, "", "SF_APPEND"], [339, 9, 1, "", "SF_ARCHIVED"], [339, 9, 1, "", "SF_IMMUTABLE"], [339, 9, 1, "", "SF_NOUNLINK"], [339, 9, 1, "", "SF_SNAPSHOT"], [339, 9, 1, "", "ST_ATIME"], [339, 9, 1, "", "ST_CTIME"], [339, 9, 1, "", "ST_DEV"], [339, 9, 1, "", "ST_GID"], [339, 9, 1, "", "ST_INO"], [339, 9, 1, "", "ST_MODE"], [339, 9, 1, "", "ST_MTIME"], [339, 9, 1, "", "ST_NLINK"], [339, 9, 1, "", "ST_SIZE"], [339, 9, 1, "", "ST_UID"], [339, 9, 1, "", "S_ENFMT"], [339, 9, 1, "", "S_IEXEC"], [339, 9, 1, "", "S_IFBLK"], [339, 9, 1, "", "S_IFCHR"], [339, 9, 1, "", "S_IFDIR"], [339, 9, 1, "", "S_IFDOOR"], [339, 9, 1, "", "S_IFIFO"], [339, 9, 1, "", "S_IFLNK"], [339, 11, 1, "", "S_IFMT"], [339, 9, 1, "", "S_IFPORT"], [339, 9, 1, "", "S_IFREG"], [339, 9, 1, "", "S_IFSOCK"], [339, 9, 1, "", "S_IFWHT"], [339, 11, 1, "", "S_IMODE"], [339, 9, 1, "", "S_IREAD"], [339, 9, 1, "", "S_IRGRP"], [339, 9, 1, "", "S_IROTH"], [339, 9, 1, "", "S_IRUSR"], [339, 9, 1, "", "S_IRWXG"], [339, 9, 1, "", "S_IRWXO"], [339, 9, 1, "", "S_IRWXU"], [339, 11, 1, "", "S_ISBLK"], [339, 11, 1, "", "S_ISCHR"], [339, 11, 1, "", "S_ISDIR"], [339, 11, 1, "", "S_ISDOOR"], [339, 11, 1, "", "S_ISFIFO"], [339, 9, 1, "", "S_ISGID"], [339, 11, 1, "", "S_ISLNK"], [339, 11, 1, "", "S_ISPORT"], [339, 11, 1, "", "S_ISREG"], [339, 11, 1, "", "S_ISSOCK"], [339, 9, 1, "", "S_ISUID"], [339, 9, 1, "", "S_ISVTX"], [339, 11, 1, "", "S_ISWHT"], [339, 9, 1, "", "S_IWGRP"], [339, 9, 1, "", "S_IWOTH"], [339, 9, 1, "", "S_IWRITE"], [339, 9, 1, "", "S_IWUSR"], [339, 9, 1, "", "S_IXGRP"], [339, 9, 1, "", "S_IXOTH"], [339, 9, 1, "", "S_IXUSR"], [339, 9, 1, "", "UF_APPEND"], [339, 9, 1, "", "UF_COMPRESSED"], [339, 9, 1, "", "UF_HIDDEN"], [339, 9, 1, "", "UF_IMMUTABLE"], [339, 9, 1, "", "UF_NODUMP"], [339, 9, 1, "", "UF_NOUNLINK"], [339, 9, 1, "", "UF_OPAQUE"], [339, 11, 1, "", "filemode"]], "statistics": [[340, 12, 1, "", "NormalDist"], [340, 6, 1, "", "StatisticsError"], [340, 11, 1, "", "correlation"], [340, 11, 1, "", "covariance"], [340, 11, 1, "", "fmean"], [340, 11, 1, "", "geometric_mean"], [340, 11, 1, "", "harmonic_mean"], [340, 11, 1, "", "linear_regression"], [340, 11, 1, "", "mean"], [340, 11, 1, "", "median"], [340, 11, 1, "", "median_grouped"], [340, 11, 1, "", "median_high"], [340, 11, 1, "", "median_low"], [340, 11, 1, "", "mode"], [340, 11, 1, "", "multimode"], [340, 11, 1, "", "pstdev"], [340, 11, 1, "", "pvariance"], [340, 11, 1, "", "quantiles"], [340, 11, 1, "", "stdev"], [340, 11, 1, "", "variance"]], "statistics.NormalDist": [[340, 8, 1, "", "cdf"], [340, 8, 1, "", "from_samples"], [340, 8, 1, "", "inv_cdf"], [340, 7, 1, "", "mean"], [340, 7, 1, "", "median"], [340, 7, 1, "", "mode"], [340, 8, 1, "", "overlap"], [340, 8, 1, "", "pdf"], [340, 8, 1, "", "quantiles"], [340, 8, 1, "", "samples"], [340, 7, 1, "", "stdev"], [340, 7, 1, "", "variance"], [340, 8, 1, "", "zscore"]], "str": [[341, 8, 1, "", "capitalize"], [341, 8, 1, "", "casefold"], [341, 8, 1, "", "center"], [341, 8, 1, "", "count"], [341, 8, 1, "", "encode"], [341, 8, 1, "", "endswith"], [341, 8, 1, "", "expandtabs"], [341, 8, 1, "", "find"], [341, 8, 1, "", "format"], [341, 8, 1, "", "format_map"], [341, 8, 1, "", "index"], [341, 8, 1, "", "isalnum"], [341, 8, 1, "", "isalpha"], [341, 8, 1, "", "isascii"], [341, 8, 1, "", "isdecimal"], [341, 8, 1, "", "isdigit"], [341, 8, 1, "", "isidentifier"], [341, 8, 1, "", "islower"], [341, 8, 1, "", "isnumeric"], [341, 8, 1, "", "isprintable"], [341, 8, 1, "", "isspace"], [341, 8, 1, "", "istitle"], [341, 8, 1, "", "isupper"], [341, 8, 1, "", "join"], [341, 8, 1, "", "ljust"], [341, 8, 1, "", "lower"], [341, 8, 1, "", "lstrip"], [341, 8, 1, "", "maketrans"], [341, 8, 1, "", "partition"], [341, 8, 1, "", "removeprefix"], [341, 8, 1, "", "removesuffix"], [341, 8, 1, "", "replace"], [341, 8, 1, "", "rfind"], [341, 8, 1, "", "rindex"], [341, 8, 1, "", "rjust"], [341, 8, 1, "", "rpartition"], [341, 8, 1, "", "rsplit"], [341, 8, 1, "", "rstrip"], [341, 8, 1, "", "split"], [341, 8, 1, "", "splitlines"], [341, 8, 1, "", "startswith"], [341, 8, 1, "", "strip"], [341, 8, 1, "", "swapcase"], [341, 8, 1, "", "title"], [341, 8, 1, "", "translate"], [341, 8, 1, "", "upper"], [341, 8, 1, "", "zfill"]], "string": [[342, 12, 1, "", "Formatter"], [342, 12, 1, "", "Template"], [342, 9, 1, "", "ascii_letters"], [342, 9, 1, "", "ascii_lowercase"], [342, 9, 1, "", "ascii_uppercase"], [342, 11, 1, "", "capwords"], [342, 9, 1, "", "digits"], [342, 9, 1, "", "hexdigits"], [342, 9, 1, "", "octdigits"], [342, 9, 1, "", "printable"], [342, 9, 1, "", "punctuation"], [342, 9, 1, "", "whitespace"]], "string.Formatter": [[342, 8, 1, "", "check_unused_args"], [342, 8, 1, "", "convert_field"], [342, 8, 1, "", "format"], [342, 8, 1, "", "format_field"], [342, 8, 1, "", "get_field"], [342, 8, 1, "", "get_value"], [342, 8, 1, "", "parse"], [342, 8, 1, "", "vformat"]], "string.Template": [[342, 8, 1, "", "get_identifiers"], [342, 8, 1, "", "is_valid"], [342, 8, 1, "", "safe_substitute"], [342, 8, 1, "", "substitute"], [342, 7, 1, "", "template"]], "stringprep": [[343, 11, 1, "", "in_table_a1"], [343, 11, 1, "", "in_table_b1"], [343, 11, 1, "", "in_table_c11"], [343, 11, 1, "", "in_table_c11_c12"], [343, 11, 1, "", "in_table_c12"], [343, 11, 1, "", "in_table_c21"], [343, 11, 1, "", "in_table_c21_c22"], [343, 11, 1, "", "in_table_c22"], [343, 11, 1, "", "in_table_c3"], [343, 11, 1, "", "in_table_c4"], [343, 11, 1, "", "in_table_c5"], [343, 11, 1, "", "in_table_c6"], [343, 11, 1, "", "in_table_c7"], [343, 11, 1, "", "in_table_c8"], [343, 11, 1, "", "in_table_c9"], [343, 11, 1, "", "in_table_d1"], [343, 11, 1, "", "in_table_d2"], [343, 11, 1, "", "map_table_b2"], [343, 11, 1, "", "map_table_b3"]], "struct": [[344, 12, 1, "", "Struct"], [344, 11, 1, "", "calcsize"], [344, 6, 1, "", "error"], [344, 11, 1, "", "iter_unpack"], [344, 11, 1, "", "pack"], [344, 11, 1, "", "pack_into"], [344, 11, 1, "", "unpack"], [344, 11, 1, "", "unpack_from"]], "struct.Struct": [[344, 7, 1, "", "format"], [344, 8, 1, "", "iter_unpack"], [344, 8, 1, "", "pack"], [344, 8, 1, "", "pack_into"], [344, 7, 1, "", "size"], [344, 8, 1, "", "unpack"], [344, 8, 1, "", "unpack_from"]], "subprocess": [[345, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [345, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [345, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [345, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [345, 9, 1, "", "CREATE_NEW_CONSOLE"], [345, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [345, 9, 1, "", "CREATE_NO_WINDOW"], [345, 6, 1, "", "CalledProcessError"], [345, 12, 1, "", "CompletedProcess"], [345, 9, 1, "", "DETACHED_PROCESS"], [345, 9, 1, "", "DEVNULL"], [345, 9, 1, "", "HIGH_PRIORITY_CLASS"], [345, 9, 1, "", "IDLE_PRIORITY_CLASS"], [345, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [345, 9, 1, "", "PIPE"], [345, 12, 1, "", "Popen"], [345, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [345, 9, 1, "", "STARTF_USESHOWWINDOW"], [345, 9, 1, "", "STARTF_USESTDHANDLES"], [345, 12, 1, "", "STARTUPINFO"], [345, 9, 1, "", "STDOUT"], [345, 9, 1, "", "STD_ERROR_HANDLE"], [345, 9, 1, "", "STD_INPUT_HANDLE"], [345, 9, 1, "", "STD_OUTPUT_HANDLE"], [345, 9, 1, "", "SW_HIDE"], [345, 6, 1, "", "SubprocessError"], [345, 6, 1, "", "TimeoutExpired"], [345, 11, 1, "", "call"], [345, 11, 1, "", "check_call"], [345, 11, 1, "", "check_output"], [345, 11, 1, "", "getoutput"], [345, 11, 1, "", "getstatusoutput"], [345, 11, 1, "", "run"]], "subprocess.CalledProcessError": [[345, 7, 1, "", "cmd"], [345, 7, 1, "", "output"], [345, 7, 1, "", "returncode"], [345, 7, 1, "", "stderr"], [345, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[345, 7, 1, "", "args"], [345, 8, 1, "", "check_returncode"], [345, 7, 1, "", "returncode"], [345, 7, 1, "", "stderr"], [345, 7, 1, "", "stdout"]], "subprocess.Popen": [[345, 7, 1, "", "args"], [345, 8, 1, "", "communicate"], [345, 8, 1, "", "kill"], [345, 7, 1, "", "pid"], [345, 8, 1, "", "poll"], [345, 7, 1, "", "returncode"], [345, 8, 1, "", "send_signal"], [345, 7, 1, "", "stderr"], [345, 7, 1, "", "stdin"], [345, 7, 1, "", "stdout"], [345, 8, 1, "", "terminate"], [345, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[345, 7, 1, "", "dwFlags"], [345, 7, 1, "", "hStdError"], [345, 7, 1, "", "hStdInput"], [345, 7, 1, "", "hStdOutput"], [345, 7, 1, "", "lpAttributeList"], [345, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[345, 7, 1, "", "cmd"], [345, 7, 1, "", "output"], [345, 7, 1, "", "stderr"], [345, 7, 1, "", "stdout"], [345, 7, 1, "", "timeout"]], "sunau": [[346, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [346, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [346, 9, 1, "", "AUDIO_FILE_MAGIC"], [346, 6, 1, "", "Error"], [346, 11, 1, "", "open"]], "sunau.AU_read": [[346, 8, 1, "", "close"], [346, 8, 1, "", "getcompname"], [346, 8, 1, "", "getcomptype"], [346, 8, 1, "", "getframerate"], [346, 8, 1, "", "getmark"], [346, 8, 1, "", "getmarkers"], [346, 8, 1, "", "getnchannels"], [346, 8, 1, "", "getnframes"], [346, 8, 1, "", "getparams"], [346, 8, 1, "", "getsampwidth"], [346, 8, 1, "", "readframes"], [346, 8, 1, "", "rewind"], [346, 8, 1, "", "setpos"], [346, 8, 1, "", "tell"]], "sunau.AU_write": [[346, 8, 1, "", "close"], [346, 8, 1, "", "setcomptype"], [346, 8, 1, "", "setframerate"], [346, 8, 1, "", "setnchannels"], [346, 8, 1, "", "setnframes"], [346, 8, 1, "", "setparams"], [346, 8, 1, "", "setsampwidth"], [346, 8, 1, "", "tell"], [346, 8, 1, "", "writeframes"], [346, 8, 1, "", "writeframesraw"]], "symtable": [[348, 12, 1, "", "Class"], [348, 12, 1, "", "Function"], [348, 12, 1, "", "Symbol"], [348, 12, 1, "", "SymbolTable"], [348, 11, 1, "", "symtable"]], "symtable.Class": [[348, 8, 1, "", "get_methods"]], "symtable.Function": [[348, 8, 1, "", "get_frees"], [348, 8, 1, "", "get_globals"], [348, 8, 1, "", "get_locals"], [348, 8, 1, "", "get_nonlocals"], [348, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[348, 8, 1, "", "get_name"], [348, 8, 1, "", "get_namespace"], [348, 8, 1, "", "get_namespaces"], [348, 8, 1, "", "is_annotated"], [348, 8, 1, "", "is_assigned"], [348, 8, 1, "", "is_declared_global"], [348, 8, 1, "", "is_free"], [348, 8, 1, "", "is_global"], [348, 8, 1, "", "is_imported"], [348, 8, 1, "", "is_local"], [348, 8, 1, "", "is_namespace"], [348, 8, 1, "", "is_nonlocal"], [348, 8, 1, "", "is_parameter"], [348, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[348, 8, 1, "", "get_children"], [348, 8, 1, "", "get_id"], [348, 8, 1, "", "get_identifiers"], [348, 8, 1, "", "get_lineno"], [348, 8, 1, "", "get_name"], [348, 8, 1, "", "get_symbols"], [348, 8, 1, "", "get_type"], [348, 8, 1, "", "has_children"], [348, 8, 1, "", "is_nested"], [348, 8, 1, "", "is_optimized"], [348, 8, 1, "", "lookup"]], "sys": [[349, 9, 1, "", "__breakpointhook__"], [349, 9, 1, "", "__displayhook__"], [349, 9, 1, "", "__excepthook__"], [349, 9, 1, "", "__interactivehook__"], [349, 9, 1, "", "__stderr__"], [349, 9, 1, "", "__stdin__"], [349, 9, 1, "", "__stdout__"], [349, 9, 1, "", "__unraisablehook__"], [349, 11, 1, "", "_clear_type_cache"], [349, 11, 1, "", "_current_exceptions"], [349, 11, 1, "", "_current_frames"], [349, 11, 1, "", "_debugmallocstats"], [349, 9, 1, "", "_emscripten_info"], [349, 11, 1, "", "_enablelegacywindowsfsencoding"], [349, 11, 1, "", "_getframe"], [349, 11, 1, "", "_getframemodulename"], [349, 9, 1, "", "_xoptions"], [349, 9, 1, "", "abiflags"], [349, 11, 1, "", "activate_stack_trampoline"], [349, 11, 1, "", "addaudithook"], [349, 9, 1, "", "api_version"], [349, 9, 1, "", "argv"], [349, 11, 1, "", "audit"], [349, 9, 1, "", "base_exec_prefix"], [349, 9, 1, "", "base_prefix"], [349, 11, 1, "", "breakpointhook"], [349, 9, 1, "", "builtin_module_names"], [349, 9, 1, "", "byteorder"], [349, 11, 1, "", "call_tracing"], [349, 9, 1, "", "copyright"], [349, 11, 1, "", "deactivate_stack_trampoline"], [349, 11, 1, "", "displayhook"], [349, 9, 1, "", "dllhandle"], [349, 9, 1, "", "dont_write_bytecode"], [349, 11, 1, "", "exc_info"], [349, 11, 1, "", "excepthook"], [349, 11, 1, "", "exception"], [349, 9, 1, "", "exec_prefix"], [349, 9, 1, "", "executable"], [349, 11, 1, "", "exit"], [349, 9, 1, "", "flags"], [349, 9, 1, "", "float_info"], [349, 9, 1, "", "float_repr_style"], [349, 11, 1, "", "get_asyncgen_hooks"], [349, 11, 1, "", "get_coroutine_origin_tracking_depth"], [349, 11, 1, "", "get_int_max_str_digits"], [349, 11, 1, "", "getallocatedblocks"], [349, 11, 1, "", "getandroidapilevel"], [349, 11, 1, "", "getdefaultencoding"], [349, 11, 1, "", "getdlopenflags"], [349, 11, 1, "", "getfilesystemencodeerrors"], [349, 11, 1, "", "getfilesystemencoding"], [349, 11, 1, "", "getprofile"], [349, 11, 1, "", "getrecursionlimit"], [349, 11, 1, "", "getrefcount"], [349, 11, 1, "", "getsizeof"], [349, 11, 1, "", "getswitchinterval"], [349, 11, 1, "", "gettrace"], [349, 11, 1, "", "getunicodeinternedsize"], [349, 11, 1, "", "getwindowsversion"], [349, 9, 1, "", "hash_info"], [349, 9, 1, "", "hexversion"], [349, 9, 1, "", "implementation"], [349, 9, 1, "", "int_info"], [349, 11, 1, "", "intern"], [349, 11, 1, "", "is_finalizing"], [349, 11, 1, "", "is_stack_trampoline_active"], [349, 9, 1, "", "last_exc"], [349, 9, 1, "", "last_traceback"], [349, 9, 1, "", "last_type"], [349, 9, 1, "", "last_value"], [349, 9, 1, "", "maxsize"], [349, 9, 1, "", "maxunicode"], [349, 9, 1, "", "meta_path"], [349, 9, 1, "", "modules"], [349, 9, 1, "", "orig_argv"], [349, 9, 1, "", "path"], [349, 9, 1, "", "path_hooks"], [349, 9, 1, "", "path_importer_cache"], [349, 9, 1, "", "platform"], [349, 9, 1, "", "platlibdir"], [349, 9, 1, "", "prefix"], [349, 9, 1, "", "ps1"], [349, 9, 1, "", "ps2"], [349, 9, 1, "", "pycache_prefix"], [349, 11, 1, "", "set_asyncgen_hooks"], [349, 11, 1, "", "set_coroutine_origin_tracking_depth"], [349, 11, 1, "", "set_int_max_str_digits"], [349, 11, 1, "", "setdlopenflags"], [349, 11, 1, "", "setprofile"], [349, 11, 1, "", "setrecursionlimit"], [349, 11, 1, "", "setswitchinterval"], [349, 11, 1, "", "settrace"], [349, 9, 1, "", "stderr"], [349, 9, 1, "", "stdin"], [349, 9, 1, "", "stdlib_module_names"], [349, 9, 1, "", "stdout"], [349, 9, 1, "", "thread_info"], [349, 9, 1, "", "tracebacklimit"], [349, 11, 1, "", "unraisablehook"], [349, 9, 1, "", "version"], [349, 9, 1, "", "version_info"], [349, 9, 1, "", "warnoptions"], [349, 9, 1, "", "winver"]], "sysconfig": [[351, 11, 1, "", "_get_preferred_schemes"], [351, 11, 1, "", "get_config_h_filename"], [351, 11, 1, "", "get_config_var"], [351, 11, 1, "", "get_config_vars"], [351, 11, 1, "", "get_default_scheme"], [351, 11, 1, "", "get_makefile_filename"], [351, 11, 1, "", "get_path"], [351, 11, 1, "", "get_path_names"], [351, 11, 1, "", "get_paths"], [351, 11, 1, "", "get_platform"], [351, 11, 1, "", "get_preferred_scheme"], [351, 11, 1, "", "get_python_version"], [351, 11, 1, "", "get_scheme_names"], [351, 11, 1, "", "is_python_build"], [351, 11, 1, "", "parse_config_h"]], "syslog": [[352, 11, 1, "", "closelog"], [352, 11, 1, "", "openlog"], [352, 11, 1, "", "setlogmask"], [352, 11, 1, "", "syslog"]], "tabnanny": [[353, 6, 1, "", "NannyNag"], [353, 11, 1, "", "check"], [353, 9, 1, "", "filename_only"], [353, 11, 1, "", "process_tokens"], [353, 9, 1, "", "verbose"]], "tarfile": [[354, 6, 1, "", "AbsoluteLinkError"], [354, 6, 1, "", "AbsolutePathError"], [354, 6, 1, "", "CompressionError"], [354, 9, 1, "", "DEFAULT_FORMAT"], [354, 9, 1, "", "ENCODING"], [354, 6, 1, "", "ExtractError"], [354, 6, 1, "", "FilterError"], [354, 9, 1, "", "GNU_FORMAT"], [354, 6, 1, "", "HeaderError"], [354, 6, 1, "", "LinkOutsideDestinationError"], [354, 6, 1, "", "OutsideDestinationError"], [354, 9, 1, "", "PAX_FORMAT"], [354, 6, 1, "", "ReadError"], [354, 6, 1, "", "SpecialFileError"], [354, 6, 1, "", "StreamError"], [354, 6, 1, "", "TarError"], [354, 12, 1, "", "TarFile"], [354, 12, 1, "", "TarInfo"], [354, 9, 1, "", "USTAR_FORMAT"], [354, 11, 1, "", "data_filter"], [354, 11, 1, "", "fully_trusted_filter"], [354, 11, 1, "", "is_tarfile"], [354, 11, 1, "", "open"], [354, 11, 1, "", "tar_filter"], [354, 14, 1, "cmdoption-tarfile-create", "--create"], [354, 14, 1, "cmdoption-tarfile-extract", "--extract"], [354, 14, 1, "cmdoption-tarfile-filter", "--filter"], [354, 14, 1, "cmdoption-tarfile-list", "--list"], [354, 14, 1, "cmdoption-tarfile-test", "--test"], [354, 14, 1, "cmdoption-tarfile-v", "--verbose"], [354, 14, 1, "cmdoption-tarfile-c", "-c"], [354, 14, 1, "cmdoption-tarfile-e", "-e"], [354, 14, 1, "cmdoption-tarfile-l", "-l"], [354, 14, 1, "cmdoption-tarfile-t", "-t"], [354, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.FilterError": [[354, 7, 1, "", "tarinfo"]], "tarfile.TarFile": [[354, 8, 1, "", "add"], [354, 8, 1, "", "addfile"], [354, 8, 1, "", "close"], [354, 7, 1, "", "errorlevel"], [354, 8, 1, "", "extract"], [354, 8, 1, "", "extractall"], [354, 8, 1, "", "extractfile"], [354, 7, 1, "", "extraction_filter"], [354, 8, 1, "", "getmember"], [354, 8, 1, "", "getmembers"], [354, 8, 1, "", "getnames"], [354, 8, 1, "", "gettarinfo"], [354, 8, 1, "", "list"], [354, 8, 1, "", "next"], [354, 8, 1, "", "open"], [354, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[354, 8, 1, "", "frombuf"], [354, 8, 1, "", "fromtarfile"], [354, 7, 1, "", "gid"], [354, 7, 1, "", "gname"], [354, 8, 1, "", "isblk"], [354, 8, 1, "", "ischr"], [354, 8, 1, "", "isdev"], [354, 8, 1, "", "isdir"], [354, 8, 1, "", "isfifo"], [354, 8, 1, "", "isfile"], [354, 8, 1, "", "islnk"], [354, 8, 1, "", "isreg"], [354, 8, 1, "", "issym"], [354, 7, 1, "", "linkname"], [354, 7, 1, "", "mode"], [354, 7, 1, "", "mtime"], [354, 7, 1, "", "name"], [354, 7, 1, "", "pax_headers"], [354, 7, 1, "", "size"], [354, 8, 1, "", "tobuf"], [354, 7, 1, "", "type"], [354, 7, 1, "", "uid"], [354, 7, 1, "", "uname"]], "telnetlib": [[355, 12, 1, "", "Telnet"]], "telnetlib.Telnet": [[355, 8, 1, "", "close"], [355, 8, 1, "", "expect"], [355, 8, 1, "", "fileno"], [355, 8, 1, "", "get_socket"], [355, 8, 1, "", "interact"], [355, 8, 1, "", "msg"], [355, 8, 1, "", "mt_interact"], [355, 8, 1, "", "open"], [355, 8, 1, "", "read_all"], [355, 8, 1, "", "read_eager"], [355, 8, 1, "", "read_lazy"], [355, 8, 1, "", "read_sb_data"], [355, 8, 1, "", "read_some"], [355, 8, 1, "", "read_until"], [355, 8, 1, "", "read_very_eager"], [355, 8, 1, "", "read_very_lazy"], [355, 8, 1, "", "set_debuglevel"], [355, 8, 1, "", "set_option_negotiation_callback"], [355, 8, 1, "", "write"]], "tempfile": [[356, 11, 1, "", "NamedTemporaryFile"], [356, 12, 1, "", "SpooledTemporaryFile"], [356, 12, 1, "", "TemporaryDirectory"], [356, 11, 1, "", "TemporaryFile"], [356, 11, 1, "", "gettempdir"], [356, 11, 1, "", "gettempdirb"], [356, 11, 1, "", "gettempprefix"], [356, 11, 1, "", "gettempprefixb"], [356, 11, 1, "", "mkdtemp"], [356, 11, 1, "", "mkstemp"], [356, 11, 1, "", "mktemp"], [356, 9, 1, "", "tempdir"]], "termios": [[357, 11, 1, "", "tcdrain"], [357, 11, 1, "", "tcflow"], [357, 11, 1, "", "tcflush"], [357, 11, 1, "", "tcgetattr"], [357, 11, 1, "", "tcgetwinsize"], [357, 11, 1, "", "tcsendbreak"], [357, 11, 1, "", "tcsetattr"], [357, 11, 1, "", "tcsetwinsize"]], "test": [[358, 10, 0, "-", "support"]], "test.support": [[358, 9, 1, "", "ALWAYS_EQ"], [358, 9, 1, "", "HAVE_DOCSTRINGS"], [358, 9, 1, "", "INTERNET_TIMEOUT"], [358, 9, 1, "", "LARGEST"], [358, 9, 1, "", "LONG_TIMEOUT"], [358, 9, 1, "", "LOOPBACK_TIMEOUT"], [358, 9, 1, "", "MAX_Py_ssize_t"], [358, 9, 1, "", "MISSING_C_DOCSTRINGS"], [358, 12, 1, "", "Matcher"], [358, 9, 1, "", "NEVER_EQ"], [358, 9, 1, "", "PGO"], [358, 9, 1, "", "PIPE_MAX_SIZE"], [358, 9, 1, "", "Py_DEBUG"], [358, 6, 1, "", "ResourceDenied"], [358, 9, 1, "", "SHORT_TIMEOUT"], [358, 9, 1, "", "SMALLEST"], [358, 9, 1, "", "SOCK_MAX_SIZE"], [358, 12, 1, "", "SaveSignals"], [358, 12, 1, "", "SuppressCrashReport"], [358, 9, 1, "", "TEST_DATA_DIR"], [358, 9, 1, "", "TEST_HOME_DIR"], [358, 9, 1, "", "TEST_HTTP_URL"], [358, 9, 1, "", "TEST_SUPPORT_DIR"], [358, 6, 1, "", "TestFailed"], [358, 11, 1, "", "adjust_int_max_str_digits"], [358, 11, 1, "", "anticipate_failure"], [358, 11, 1, "", "args_from_interpreter_flags"], [358, 11, 1, "", "bigaddrspacetest"], [358, 11, 1, "", "bigmemtest"], [358, 11, 1, "", "busy_retry"], [358, 10, 0, "-", "bytecode_helper"], [358, 11, 1, "", "calcobjsize"], [358, 11, 1, "", "calcvobjsize"], [358, 11, 1, "", "captured_stderr"], [358, 11, 1, "", "captured_stdin"], [358, 11, 1, "", "captured_stdout"], [358, 11, 1, "", "catch_unraisable_exception"], [358, 11, 1, "", "check__all__"], [358, 11, 1, "", "check_disallow_instantiation"], [358, 11, 1, "", "check_free_after_iterating"], [358, 11, 1, "", "check_impl_detail"], [358, 11, 1, "", "check_syntax_error"], [358, 11, 1, "", "checksizeof"], [358, 11, 1, "", "cpython_only"], [358, 11, 1, "", "detect_api_mismatch"], [358, 11, 1, "", "disable_faulthandler"], [358, 11, 1, "", "disable_gc"], [358, 11, 1, "", "findfile"], [358, 11, 1, "", "flush_std_streams"], [358, 11, 1, "", "gc_collect"], [358, 11, 1, "", "get_attribute"], [358, 11, 1, "", "get_original_stdout"], [358, 11, 1, "", "get_pagesize"], [358, 11, 1, "", "impl_detail"], [358, 10, 0, "-", "import_helper"], [358, 9, 1, "", "is_android"], [358, 9, 1, "", "is_jython"], [358, 11, 1, "", "is_resource_enabled"], [358, 11, 1, "", "load_package_tests"], [358, 11, 1, "", "match_test"], [358, 9, 1, "", "max_memuse"], [358, 11, 1, "", "missing_compiler_executable"], [358, 11, 1, "", "no_tracing"], [358, 11, 1, "", "open_urlresource"], [358, 11, 1, "", "optim_args_from_interpreter_flags"], [358, 10, 0, "-", "os_helper"], [358, 11, 1, "", "patch"], [358, 11, 1, "", "print_warning"], [358, 11, 1, "", "python_is_optimized"], [358, 9, 1, "", "real_max_memuse"], [358, 11, 1, "", "reap_children"], [358, 11, 1, "", "record_original_stdout"], [358, 11, 1, "", "refcount_test"], [358, 11, 1, "", "requires"], [358, 11, 1, "", "requires_IEEE_754"], [358, 11, 1, "", "requires_bz2"], [358, 11, 1, "", "requires_docstrings"], [358, 11, 1, "", "requires_freebsd_version"], [358, 11, 1, "", "requires_gzip"], [358, 11, 1, "", "requires_limited_api"], [358, 11, 1, "", "requires_linux_version"], [358, 11, 1, "", "requires_lzma"], [358, 11, 1, "", "requires_mac_version"], [358, 11, 1, "", "requires_resource"], [358, 11, 1, "", "requires_zlib"], [358, 11, 1, "", "run_doctest"], [358, 11, 1, "", "run_in_subinterp"], [358, 11, 1, "", "run_unittest"], [358, 11, 1, "", "run_with_locale"], [358, 11, 1, "", "run_with_tz"], [358, 10, 0, "-", "script_helper"], [358, 11, 1, "", "set_match_tests"], [358, 11, 1, "", "set_memlimit"], [358, 11, 1, "", "setswitchinterval"], [358, 11, 1, "", "skip_if_broken_multiprocessing_synchronize"], [358, 11, 1, "", "sleeping_retry"], [358, 10, 0, "-", "socket_helper"], [358, 11, 1, "", "sortdict"], [358, 11, 1, "", "swap_attr"], [358, 11, 1, "", "swap_item"], [358, 11, 1, "", "system_must_validate_cert"], [358, 10, 0, "-", "threading_helper"], [358, 9, 1, "", "unix_shell"], [358, 9, 1, "", "verbose"], [358, 11, 1, "", "wait_process"], [358, 10, 0, "-", "warnings_helper"], [358, 11, 1, "", "with_pymalloc"]], "test.support.Matcher": [[358, 8, 1, "", "match_value"], [358, 8, 1, "", "matches"]], "test.support.SaveSignals": [[358, 8, 1, "", "restore"], [358, 8, 1, "", "save"]], "test.support.bytecode_helper": [[358, 12, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[358, 8, 1, "", "assertInBytecode"], [358, 8, 1, "", "assertNotInBytecode"], [358, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[358, 12, 1, "", "CleanImport"], [358, 12, 1, "", "DirsOnSysPath"], [358, 11, 1, "", "forget"], [358, 11, 1, "", "import_fresh_module"], [358, 11, 1, "", "import_module"], [358, 11, 1, "", "make_legacy_pyc"], [358, 11, 1, "", "modules_cleanup"], [358, 11, 1, "", "modules_setup"], [358, 11, 1, "", "unload"]], "test.support.os_helper": [[358, 12, 1, "", "EnvironmentVarGuard"], [358, 9, 1, "", "FS_NONASCII"], [358, 12, 1, "", "FakePath"], [358, 9, 1, "", "SAVEDCWD"], [358, 9, 1, "", "TESTFN"], [358, 9, 1, "", "TESTFN_NONASCII"], [358, 9, 1, "", "TESTFN_UNDECODABLE"], [358, 9, 1, "", "TESTFN_UNENCODABLE"], [358, 9, 1, "", "TESTFN_UNICODE"], [358, 11, 1, "", "can_symlink"], [358, 11, 1, "", "can_xattr"], [358, 11, 1, "", "change_cwd"], [358, 11, 1, "", "create_empty_file"], [358, 11, 1, "", "fd_count"], [358, 11, 1, "", "fs_is_case_insensitive"], [358, 11, 1, "", "make_bad_fd"], [358, 11, 1, "", "rmdir"], [358, 11, 1, "", "rmtree"], [358, 11, 1, "", "skip_unless_symlink"], [358, 11, 1, "", "skip_unless_xattr"], [358, 11, 1, "", "temp_cwd"], [358, 11, 1, "", "temp_dir"], [358, 11, 1, "", "temp_umask"], [358, 11, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[358, 8, 1, "", "set"], [358, 8, 1, "", "unset"]], "test.support.script_helper": [[358, 11, 1, "", "assert_python_failure"], [358, 11, 1, "", "assert_python_ok"], [358, 11, 1, "", "interpreter_requires_environment"], [358, 11, 1, "", "kill_python"], [358, 11, 1, "", "make_pkg"], [358, 11, 1, "", "make_script"], [358, 11, 1, "", "make_zip_pkg"], [358, 11, 1, "", "make_zip_script"], [358, 11, 1, "", "run_python_until_end"], [358, 11, 1, "", "spawn_python"]], "test.support.socket_helper": [[358, 9, 1, "", "IPV6_ENABLED"], [358, 11, 1, "", "bind_port"], [358, 11, 1, "", "bind_unix_socket"], [358, 11, 1, "", "find_unused_port"], [358, 11, 1, "", "skip_unless_bind_unix_socket"], [358, 11, 1, "", "transient_internet"]], "test.support.threading_helper": [[358, 11, 1, "", "catch_threading_exception"], [358, 11, 1, "", "join_thread"], [358, 11, 1, "", "reap_threads"], [358, 11, 1, "", "start_threads"], [358, 11, 1, "", "threading_cleanup"], [358, 11, 1, "", "threading_setup"], [358, 11, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[358, 12, 1, "", "WarningsRecorder"], [358, 11, 1, "", "check_no_resource_warning"], [358, 11, 1, "", "check_syntax_warning"], [358, 11, 1, "", "check_warnings"], [358, 11, 1, "", "ignore_warnings"]], "textwrap": [[360, 12, 1, "", "TextWrapper"], [360, 11, 1, "", "dedent"], [360, 11, 1, "", "fill"], [360, 11, 1, "", "indent"], [360, 11, 1, "", "shorten"], [360, 11, 1, "", "wrap"]], "textwrap.TextWrapper": [[360, 7, 1, "", "break_long_words"], [360, 7, 1, "", "break_on_hyphens"], [360, 7, 1, "", "drop_whitespace"], [360, 7, 1, "", "expand_tabs"], [360, 8, 1, "", "fill"], [360, 7, 1, "", "fix_sentence_endings"], [360, 7, 1, "", "initial_indent"], [360, 7, 1, "", "max_lines"], [360, 7, 1, "", "placeholder"], [360, 7, 1, "", "replace_whitespace"], [360, 7, 1, "", "subsequent_indent"], [360, 7, 1, "", "tabsize"], [360, 7, 1, "", "width"], [360, 8, 1, "", "wrap"]], "threading": [[361, 12, 1, "", "Barrier"], [361, 12, 1, "", "BoundedSemaphore"], [361, 6, 1, "", "BrokenBarrierError"], [361, 12, 1, "", "Condition"], [361, 12, 1, "", "Event"], [361, 12, 1, "", "Lock"], [361, 12, 1, "", "RLock"], [361, 12, 1, "", "Semaphore"], [361, 9, 1, "", "TIMEOUT_MAX"], [361, 12, 1, "", "Thread"], [361, 12, 1, "", "Timer"], [361, 9, 1, "", "__excepthook__"], [361, 11, 1, "", "active_count"], [361, 11, 1, "", "current_thread"], [361, 11, 1, "", "enumerate"], [361, 11, 1, "", "excepthook"], [361, 11, 1, "", "get_ident"], [361, 11, 1, "", "get_native_id"], [361, 11, 1, "", "getprofile"], [361, 11, 1, "", "gettrace"], [361, 12, 1, "", "local"], [361, 11, 1, "", "main_thread"], [361, 11, 1, "", "setprofile"], [361, 11, 1, "", "setprofile_all_threads"], [361, 11, 1, "", "settrace"], [361, 11, 1, "", "settrace_all_threads"], [361, 11, 1, "", "stack_size"]], "threading.Barrier": [[361, 8, 1, "", "abort"], [361, 7, 1, "", "broken"], [361, 7, 1, "", "n_waiting"], [361, 7, 1, "", "parties"], [361, 8, 1, "", "reset"], [361, 8, 1, "", "wait"]], "threading.Condition": [[361, 8, 1, "", "acquire"], [361, 8, 1, "", "notify"], [361, 8, 1, "", "notify_all"], [361, 8, 1, "", "release"], [361, 8, 1, "", "wait"], [361, 8, 1, "", "wait_for"]], "threading.Event": [[361, 8, 1, "", "clear"], [361, 8, 1, "", "is_set"], [361, 8, 1, "", "set"], [361, 8, 1, "", "wait"]], "threading.Lock": [[361, 8, 1, "", "acquire"], [361, 8, 1, "", "locked"], [361, 8, 1, "", "release"]], "threading.RLock": [[361, 8, 1, "", "acquire"], [361, 8, 1, "", "release"]], "threading.Semaphore": [[361, 8, 1, "", "acquire"], [361, 8, 1, "", "release"]], "threading.Thread": [[361, 7, 1, "", "daemon"], [361, 8, 1, "", "getName"], [361, 7, 1, "", "ident"], [361, 8, 1, "", "isDaemon"], [361, 8, 1, "", "is_alive"], [361, 8, 1, "", "join"], [361, 7, 1, "", "name"], [361, 7, 1, "", "native_id"], [361, 8, 1, "", "run"], [361, 8, 1, "", "setDaemon"], [361, 8, 1, "", "setName"], [361, 8, 1, "", "start"]], "threading.Timer": [[361, 8, 1, "", "cancel"]], "time": [[362, 9, 1, "", "CLOCK_BOOTTIME"], [362, 9, 1, "", "CLOCK_HIGHRES"], [362, 9, 1, "", "CLOCK_MONOTONIC"], [362, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [362, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [362, 9, 1, "", "CLOCK_PROF"], [362, 9, 1, "", "CLOCK_REALTIME"], [362, 9, 1, "", "CLOCK_TAI"], [362, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [362, 9, 1, "", "CLOCK_UPTIME"], [362, 9, 1, "", "CLOCK_UPTIME_RAW"], [362, 9, 1, "", "altzone"], [362, 11, 1, "", "asctime"], [362, 11, 1, "", "clock_getres"], [362, 11, 1, "", "clock_gettime"], [362, 11, 1, "", "clock_gettime_ns"], [362, 11, 1, "", "clock_settime"], [362, 11, 1, "", "clock_settime_ns"], [362, 11, 1, "", "ctime"], [362, 9, 1, "", "daylight"], [362, 11, 1, "", "get_clock_info"], [362, 11, 1, "", "gmtime"], [362, 11, 1, "", "localtime"], [362, 11, 1, "", "mktime"], [362, 11, 1, "", "monotonic"], [362, 11, 1, "", "monotonic_ns"], [362, 11, 1, "", "perf_counter"], [362, 11, 1, "", "perf_counter_ns"], [362, 11, 1, "", "process_time"], [362, 11, 1, "", "process_time_ns"], [362, 11, 1, "", "pthread_getcpuclockid"], [362, 11, 1, "", "sleep"], [362, 11, 1, "", "strftime"], [362, 11, 1, "", "strptime"], [362, 12, 1, "", "struct_time"], [362, 11, 1, "", "thread_time"], [362, 11, 1, "", "thread_time_ns"], [362, 11, 1, "", "time"], [362, 11, 1, "", "time_ns"], [362, 9, 1, "", "timezone"], [362, 9, 1, "", "tzname"], [362, 11, 1, "", "tzset"]], "timeit": [[363, 12, 1, "", "Timer"], [363, 11, 1, "", "default_timer"], [363, 11, 1, "", "repeat"], [363, 11, 1, "", "timeit"], [363, 14, 1, "cmdoption-timeit-h", "--help"], [363, 14, 1, "cmdoption-timeit-n", "--number"], [363, 14, 1, "cmdoption-timeit-p", "--process"], [363, 14, 1, "cmdoption-timeit-r", "--repeat"], [363, 14, 1, "cmdoption-timeit-s", "--setup"], [363, 14, 1, "cmdoption-timeit-u", "--unit"], [363, 14, 1, "cmdoption-timeit-v", "--verbose"], [363, 14, 1, "cmdoption-timeit-h", "-h"], [363, 14, 1, "cmdoption-timeit-n", "-n"], [363, 14, 1, "cmdoption-timeit-p", "-p"], [363, 14, 1, "cmdoption-timeit-r", "-r"], [363, 14, 1, "cmdoption-timeit-s", "-s"], [363, 14, 1, "cmdoption-timeit-u", "-u"], [363, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[363, 8, 1, "", "autorange"], [363, 8, 1, "", "print_exc"], [363, 8, 1, "", "repeat"], [363, 8, 1, "", "timeit"]], "tkinter": [[365, 9, 1, "", "EXCEPTION"], [365, 9, 1, "", "READABLE"], [365, 11, 1, "", "Tcl"], [365, 12, 1, "", "Tk"], [365, 9, 1, "", "WRITABLE"], [366, 10, 0, "-", "colorchooser"], [186, 10, 0, "-", "commondialog"], [367, 10, 0, "-", "dnd"], [186, 10, 0, "-", "filedialog"], [368, 10, 0, "-", "font"], [369, 10, 0, "-", "messagebox"], [370, 10, 0, "-", "scrolledtext"], [186, 10, 0, "-", "simpledialog"], [371, 10, 0, "-", "tix"], [372, 10, 0, "-", "ttk"]], "tkinter.Tk": [[365, 7, 1, "", "children"], [365, 7, 1, "", "master"], [365, 7, 1, "", "tk"]], "tkinter.Widget.tk": [[365, 8, 1, "", "createfilehandler"], [365, 8, 1, "", "deletefilehandler"]], "tkinter.colorchooser": [[366, 12, 1, "", "Chooser"], [366, 11, 1, "", "askcolor"]], "tkinter.commondialog": [[186, 12, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[186, 8, 1, "", "show"]], "tkinter.dnd": [[367, 12, 1, "", "DndHandler"], [367, 11, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[367, 8, 1, "", "cancel"], [367, 8, 1, "", "finish"], [367, 8, 1, "", "on_motion"], [367, 8, 1, "", "on_release"]], "tkinter.filedialog": [[186, 12, 1, "", "Directory"], [186, 12, 1, "", "FileDialog"], [186, 12, 1, "", "LoadFileDialog"], [186, 12, 1, "", "Open"], [186, 12, 1, "", "SaveAs"], [186, 12, 1, "", "SaveFileDialog"], [186, 11, 1, "", "askdirectory"], [186, 11, 1, "", "askopenfile"], [186, 11, 1, "", "askopenfilename"], [186, 11, 1, "", "askopenfilenames"], [186, 11, 1, "", "askopenfiles"], [186, 11, 1, "", "asksaveasfile"], [186, 11, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[186, 8, 1, "", "cancel_command"], [186, 8, 1, "", "dirs_double_event"], [186, 8, 1, "", "dirs_select_event"], [186, 8, 1, "", "files_double_event"], [186, 8, 1, "", "files_select_event"], [186, 8, 1, "", "filter_command"], [186, 8, 1, "", "get_filter"], [186, 8, 1, "", "get_selection"], [186, 8, 1, "", "go"], [186, 8, 1, "", "ok_event"], [186, 8, 1, "", "quit"], [186, 8, 1, "", "set_filter"], [186, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[186, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[186, 8, 1, "", "ok_command"]], "tkinter.font": [[368, 9, 1, "", "BOLD"], [368, 12, 1, "", "Font"], [368, 9, 1, "", "ITALIC"], [368, 9, 1, "", "NORMAL"], [368, 9, 1, "", "ROMAN"], [368, 11, 1, "", "families"], [368, 11, 1, "", "names"], [368, 11, 1, "", "nametofont"]], "tkinter.font.Font": [[368, 8, 1, "", "actual"], [368, 8, 1, "", "cget"], [368, 8, 1, "", "config"], [368, 8, 1, "", "copy"], [368, 8, 1, "", "measure"], [368, 8, 1, "", "metrics"]], "tkinter.messagebox": [[369, 12, 1, "", "Message"], [369, 8, 1, "", "askokcancel"], [369, 8, 1, "", "askquestion"], [369, 8, 1, "", "askretrycancel"], [369, 8, 1, "", "askyesno"], [369, 8, 1, "", "askyesnocancel"], [369, 8, 1, "", "showerror"], [369, 8, 1, "", "showinfo"], [369, 8, 1, "", "showwarning"]], "tkinter.scrolledtext": [[370, 12, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[370, 7, 1, "", "frame"], [370, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[186, 12, 1, "", "Dialog"], [186, 11, 1, "", "askfloat"], [186, 11, 1, "", "askinteger"], [186, 11, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[186, 8, 1, "", "body"], [186, 8, 1, "", "buttonbox"]], "tkinter.tix": [[371, 12, 1, "", "Balloon"], [371, 12, 1, "", "ButtonBox"], [371, 12, 1, "", "CheckList"], [371, 12, 1, "", "ComboBox"], [371, 12, 1, "", "Control"], [371, 12, 1, "", "DirList"], [371, 12, 1, "", "DirSelectBox"], [371, 12, 1, "", "DirSelectDialog"], [371, 12, 1, "", "DirTree"], [371, 12, 1, "", "ExFileSelectBox"], [371, 12, 1, "", "FileEntry"], [371, 12, 1, "", "FileSelectBox"], [371, 12, 1, "", "Form"], [371, 12, 1, "", "HList"], [371, 12, 1, "", "InputOnly"], [371, 12, 1, "", "LabelEntry"], [371, 12, 1, "", "LabelFrame"], [371, 12, 1, "", "ListNoteBook"], [371, 12, 1, "", "Meter"], [371, 12, 1, "", "NoteBook"], [371, 12, 1, "", "OptionMenu"], [371, 12, 1, "", "PanedWindow"], [371, 12, 1, "", "PopupMenu"], [371, 12, 1, "", "Select"], [371, 12, 1, "", "StdButtonBox"], [371, 12, 1, "", "TList"], [371, 12, 1, "", "Tk"], [371, 12, 1, "", "Tree"], [371, 12, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[371, 8, 1, "", "tix_addbitmapdir"], [371, 8, 1, "", "tix_cget"], [371, 8, 1, "", "tix_configure"], [371, 8, 1, "", "tix_filedialog"], [371, 8, 1, "", "tix_getbitmap"], [371, 8, 1, "", "tix_getimage"], [371, 8, 1, "", "tix_option_get"], [371, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[372, 12, 1, "", "Combobox"], [372, 12, 1, "", "Notebook"], [372, 12, 1, "", "Progressbar"], [372, 12, 1, "", "Spinbox"], [372, 12, 1, "", "Style"], [372, 12, 1, "", "Treeview"], [372, 12, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[372, 8, 1, "", "current"], [372, 8, 1, "", "get"], [372, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[372, 8, 1, "", "add"], [372, 8, 1, "", "enable_traversal"], [372, 8, 1, "", "forget"], [372, 8, 1, "", "hide"], [372, 8, 1, "", "identify"], [372, 8, 1, "", "index"], [372, 8, 1, "", "insert"], [372, 8, 1, "", "select"], [372, 8, 1, "", "tab"], [372, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[372, 8, 1, "", "start"], [372, 8, 1, "", "step"], [372, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[372, 8, 1, "", "get"], [372, 8, 1, "", "set"]], "tkinter.ttk.Style": [[372, 8, 1, "", "configure"], [372, 8, 1, "", "element_create"], [372, 8, 1, "", "element_names"], [372, 8, 1, "", "element_options"], [372, 8, 1, "", "layout"], [372, 8, 1, "", "lookup"], [372, 8, 1, "", "map"], [372, 8, 1, "", "theme_create"], [372, 8, 1, "", "theme_names"], [372, 8, 1, "", "theme_settings"], [372, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[372, 8, 1, "", "bbox"], [372, 8, 1, "", "column"], [372, 8, 1, "", "delete"], [372, 8, 1, "", "detach"], [372, 8, 1, "", "exists"], [372, 8, 1, "", "focus"], [372, 8, 1, "", "get_children"], [372, 8, 1, "", "heading"], [372, 8, 1, "", "identify"], [372, 8, 1, "", "identify_column"], [372, 8, 1, "", "identify_element"], [372, 8, 1, "", "identify_region"], [372, 8, 1, "", "identify_row"], [372, 8, 1, "", "index"], [372, 8, 1, "", "insert"], [372, 8, 1, "", "item"], [372, 8, 1, "", "move"], [372, 8, 1, "", "next"], [372, 8, 1, "", "parent"], [372, 8, 1, "", "prev"], [372, 8, 1, "", "reattach"], [372, 8, 1, "", "see"], [372, 8, 1, "", "selection"], [372, 8, 1, "", "selection_add"], [372, 8, 1, "", "selection_remove"], [372, 8, 1, "", "selection_set"], [372, 8, 1, "", "selection_toggle"], [372, 8, 1, "", "set"], [372, 8, 1, "", "set_children"], [372, 8, 1, "", "tag_bind"], [372, 8, 1, "", "tag_configure"], [372, 8, 1, "", "tag_has"], [372, 8, 1, "", "xview"], [372, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[372, 8, 1, "", "identify"], [372, 8, 1, "", "instate"], [372, 8, 1, "", "state"]], "token": [[373, 9, 1, "", "AMPER"], [373, 9, 1, "", "AMPEREQUAL"], [373, 9, 1, "", "ASYNC"], [373, 9, 1, "", "AT"], [373, 9, 1, "", "ATEQUAL"], [373, 9, 1, "", "AWAIT"], [373, 9, 1, "", "CIRCUMFLEX"], [373, 9, 1, "", "CIRCUMFLEXEQUAL"], [373, 9, 1, "", "COLON"], [373, 9, 1, "", "COLONEQUAL"], [373, 9, 1, "", "COMMA"], [373, 9, 1, "", "COMMENT"], [373, 9, 1, "", "DEDENT"], [373, 9, 1, "", "DOT"], [373, 9, 1, "", "DOUBLESLASH"], [373, 9, 1, "", "DOUBLESLASHEQUAL"], [373, 9, 1, "", "DOUBLESTAR"], [373, 9, 1, "", "DOUBLESTAREQUAL"], [373, 9, 1, "", "ELLIPSIS"], [373, 9, 1, "", "ENCODING"], [373, 9, 1, "", "ENDMARKER"], [373, 9, 1, "", "EQEQUAL"], [373, 9, 1, "", "EQUAL"], [373, 9, 1, "", "ERRORTOKEN"], [373, 9, 1, "", "EXCLAMATION"], [373, 9, 1, "", "FSTRING_END"], [373, 9, 1, "", "FSTRING_MIDDLE"], [373, 9, 1, "", "FSTRING_START"], [373, 9, 1, "", "GREATER"], [373, 9, 1, "", "GREATEREQUAL"], [373, 9, 1, "", "INDENT"], [373, 11, 1, "", "ISEOF"], [373, 11, 1, "", "ISNONTERMINAL"], [373, 11, 1, "", "ISTERMINAL"], [373, 9, 1, "", "LBRACE"], [373, 9, 1, "", "LEFTSHIFT"], [373, 9, 1, "", "LEFTSHIFTEQUAL"], [373, 9, 1, "", "LESS"], [373, 9, 1, "", "LESSEQUAL"], [373, 9, 1, "", "LPAR"], [373, 9, 1, "", "LSQB"], [373, 9, 1, "", "MINEQUAL"], [373, 9, 1, "", "MINUS"], [373, 9, 1, "", "NAME"], [373, 9, 1, "", "NEWLINE"], [373, 9, 1, "", "NL"], [373, 9, 1, "", "NOTEQUAL"], [373, 9, 1, "", "NT_OFFSET"], [373, 9, 1, "", "NUMBER"], [373, 9, 1, "", "N_TOKENS"], [373, 9, 1, "", "OP"], [373, 9, 1, "", "PERCENT"], [373, 9, 1, "", "PERCENTEQUAL"], [373, 9, 1, "", "PLUS"], [373, 9, 1, "", "PLUSEQUAL"], [373, 9, 1, "", "RARROW"], [373, 9, 1, "", "RBRACE"], [373, 9, 1, "", "RIGHTSHIFT"], [373, 9, 1, "", "RIGHTSHIFTEQUAL"], [373, 9, 1, "", "RPAR"], [373, 9, 1, "", "RSQB"], [373, 9, 1, "", "SEMI"], [373, 9, 1, "", "SLASH"], [373, 9, 1, "", "SLASHEQUAL"], [373, 9, 1, "", "SOFT_KEYWORD"], [373, 9, 1, "", "STAR"], [373, 9, 1, "", "STAREQUAL"], [373, 9, 1, "", "STRING"], [373, 9, 1, "", "TILDE"], [373, 9, 1, "", "TYPE_COMMENT"], [373, 9, 1, "", "TYPE_IGNORE"], [373, 9, 1, "", "VBAR"], [373, 9, 1, "", "VBAREQUAL"], [373, 9, 1, "", "tok_name"]], "tokenize": [[374, 6, 1, "", "TokenError"], [374, 11, 1, "", "detect_encoding"], [374, 11, 1, "", "generate_tokens"], [374, 11, 1, "", "open"], [374, 11, 1, "", "tokenize"], [374, 11, 1, "", "untokenize"], [374, 14, 1, "cmdoption-tokenize-e", "--exact"], [374, 14, 1, "cmdoption-tokenize-h", "--help"], [374, 14, 1, "cmdoption-tokenize-e", "-e"], [374, 14, 1, "cmdoption-tokenize-h", "-h"]], "tomllib": [[375, 6, 1, "", "TOMLDecodeError"], [375, 11, 1, "", "load"], [375, 11, 1, "", "loads"]], "trace": [[376, 12, 1, "", "CoverageResults"], [376, 12, 1, "", "Trace"], [376, 14, 1, "cmdoption-trace-c", "--count"], [376, 14, 1, "cmdoption-trace-C", "--coverdir"], [376, 14, 1, "cmdoption-trace-f", "--file"], [376, 14, 1, "cmdoption-trace-help", "--help"], [376, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [376, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [376, 14, 1, "cmdoption-trace-l", "--listfuncs"], [376, 14, 1, "cmdoption-trace-m", "--missing"], [376, 14, 1, "cmdoption-trace-R", "--no-report"], [376, 14, 1, "cmdoption-trace-r", "--report"], [376, 14, 1, "cmdoption-trace-s", "--summary"], [376, 14, 1, "cmdoption-trace-g", "--timing"], [376, 14, 1, "cmdoption-trace-t", "--trace"], [376, 14, 1, "cmdoption-trace-T", "--trackcalls"], [376, 14, 1, "cmdoption-trace-version", "--version"], [376, 14, 1, "cmdoption-trace-C", "-C"], [376, 14, 1, "cmdoption-trace-R", "-R"], [376, 14, 1, "cmdoption-trace-T", "-T"], [376, 14, 1, "cmdoption-trace-c", "-c"], [376, 14, 1, "cmdoption-trace-f", "-f"], [376, 14, 1, "cmdoption-trace-g", "-g"], [376, 14, 1, "cmdoption-trace-l", "-l"], [376, 14, 1, "cmdoption-trace-m", "-m"], [376, 14, 1, "cmdoption-trace-r", "-r"], [376, 14, 1, "cmdoption-trace-s", "-s"], [376, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[376, 8, 1, "", "update"], [376, 8, 1, "", "write_results"]], "trace.Trace": [[376, 8, 1, "", "results"], [376, 8, 1, "", "run"], [376, 8, 1, "", "runctx"], [376, 8, 1, "", "runfunc"]], "traceback": [[377, 12, 1, "", "FrameSummary"], [377, 12, 1, "", "StackSummary"], [377, 12, 1, "", "TracebackException"], [377, 11, 1, "", "clear_frames"], [377, 11, 1, "", "extract_stack"], [377, 11, 1, "", "extract_tb"], [377, 11, 1, "", "format_exc"], [377, 11, 1, "", "format_exception"], [377, 11, 1, "", "format_exception_only"], [377, 11, 1, "", "format_list"], [377, 11, 1, "", "format_stack"], [377, 11, 1, "", "format_tb"], [377, 11, 1, "", "print_exc"], [377, 11, 1, "", "print_exception"], [377, 11, 1, "", "print_last"], [377, 11, 1, "", "print_stack"], [377, 11, 1, "", "print_tb"], [377, 11, 1, "", "walk_stack"], [377, 11, 1, "", "walk_tb"]], "traceback.StackSummary": [[377, 8, 1, "", "extract"], [377, 8, 1, "", "format"], [377, 8, 1, "", "format_frame_summary"], [377, 8, 1, "", "from_list"]], "traceback.TracebackException": [[377, 7, 1, "", "__cause__"], [377, 7, 1, "", "__context__"], [377, 7, 1, "", "__notes__"], [377, 7, 1, "", "__suppress_context__"], [377, 7, 1, "", "end_lineno"], [377, 7, 1, "", "end_offset"], [377, 7, 1, "", "exc_type"], [377, 7, 1, "", "exceptions"], [377, 7, 1, "", "filename"], [377, 8, 1, "", "format"], [377, 8, 1, "", "format_exception_only"], [377, 8, 1, "", "from_exception"], [377, 7, 1, "", "lineno"], [377, 7, 1, "", "msg"], [377, 7, 1, "", "offset"], [377, 8, 1, "", "print"], [377, 7, 1, "", "stack"], [377, 7, 1, "", "text"]], "tracemalloc": [[378, 12, 1, "", "DomainFilter"], [378, 12, 1, "", "Filter"], [378, 12, 1, "", "Frame"], [378, 12, 1, "", "Snapshot"], [378, 12, 1, "", "Statistic"], [378, 12, 1, "", "StatisticDiff"], [378, 12, 1, "", "Trace"], [378, 12, 1, "", "Traceback"], [378, 11, 1, "", "clear_traces"], [378, 11, 1, "", "get_object_traceback"], [378, 11, 1, "", "get_traceback_limit"], [378, 11, 1, "", "get_traced_memory"], [378, 11, 1, "", "get_tracemalloc_memory"], [378, 11, 1, "", "is_tracing"], [378, 11, 1, "", "reset_peak"], [378, 11, 1, "", "start"], [378, 11, 1, "", "stop"], [378, 11, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[378, 7, 1, "", "domain"], [378, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[378, 7, 1, "", "all_frames"], [378, 7, 1, "", "domain"], [378, 7, 1, "", "filename_pattern"], [378, 7, 1, "", "inclusive"], [378, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[378, 7, 1, "", "filename"], [378, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[378, 8, 1, "", "compare_to"], [378, 8, 1, "", "dump"], [378, 8, 1, "", "filter_traces"], [378, 8, 1, "", "load"], [378, 8, 1, "", "statistics"], [378, 7, 1, "", "traceback_limit"], [378, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[378, 7, 1, "", "count"], [378, 7, 1, "", "size"], [378, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[378, 7, 1, "", "count"], [378, 7, 1, "", "count_diff"], [378, 7, 1, "", "size"], [378, 7, 1, "", "size_diff"], [378, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[378, 7, 1, "", "domain"], [378, 7, 1, "", "size"], [378, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[378, 8, 1, "", "format"], [378, 7, 1, "", "total_nframe"]], "tty": [[379, 11, 1, "", "cfmakecbreak"], [379, 11, 1, "", "cfmakeraw"], [379, 11, 1, "", "setcbreak"], [379, 11, 1, "", "setraw"]], "turtle": [[380, 12, 1, "", "RawPen"], [380, 12, 1, "", "RawTurtle"], [380, 12, 1, "", "Screen"], [380, 12, 1, "", "ScrolledCanvas"], [380, 12, 1, "", "Shape"], [380, 12, 1, "", "Turtle"], [380, 12, 1, "", "TurtleScreen"], [380, 12, 1, "", "Vec2D"], [380, 11, 1, "", "addshape"], [380, 11, 1, "", "back"], [380, 11, 1, "", "backward"], [380, 11, 1, "", "begin_fill"], [380, 11, 1, "", "begin_poly"], [380, 11, 1, "", "bgcolor"], [380, 11, 1, "", "bgpic"], [380, 11, 1, "", "bk"], [380, 11, 1, "", "bye"], [380, 11, 1, "", "circle"], [380, 11, 1, "", "clear"], [380, 11, 1, "", "clearscreen"], [380, 11, 1, "", "clearstamp"], [380, 11, 1, "", "clearstamps"], [380, 11, 1, "", "clone"], [380, 11, 1, "", "color"], [380, 11, 1, "", "colormode"], [380, 11, 1, "", "degrees"], [380, 11, 1, "", "delay"], [380, 11, 1, "", "distance"], [380, 11, 1, "", "done"], [380, 11, 1, "", "dot"], [380, 11, 1, "", "down"], [380, 11, 1, "", "end_fill"], [380, 11, 1, "", "end_poly"], [380, 11, 1, "", "exitonclick"], [380, 11, 1, "", "fd"], [380, 11, 1, "", "fillcolor"], [380, 11, 1, "", "filling"], [380, 11, 1, "", "forward"], [380, 11, 1, "", "get_poly"], [380, 11, 1, "", "get_shapepoly"], [380, 11, 1, "", "getcanvas"], [380, 11, 1, "", "getpen"], [380, 11, 1, "", "getscreen"], [380, 11, 1, "", "getshapes"], [380, 11, 1, "", "getturtle"], [380, 11, 1, "", "goto"], [380, 11, 1, "", "heading"], [380, 11, 1, "", "hideturtle"], [380, 11, 1, "", "home"], [380, 11, 1, "", "ht"], [380, 11, 1, "", "isdown"], [380, 11, 1, "", "isvisible"], [380, 11, 1, "", "left"], [380, 11, 1, "", "listen"], [380, 11, 1, "", "lt"], [380, 11, 1, "", "mainloop"], [380, 11, 1, "", "mode"], [380, 11, 1, "", "numinput"], [380, 11, 1, "", "onclick"], [380, 11, 1, "", "ondrag"], [380, 11, 1, "", "onkey"], [380, 11, 1, "", "onkeypress"], [380, 11, 1, "", "onkeyrelease"], [380, 11, 1, "", "onrelease"], [380, 11, 1, "", "onscreenclick"], [380, 11, 1, "", "ontimer"], [380, 11, 1, "", "pd"], [380, 11, 1, "", "pen"], [380, 11, 1, "", "pencolor"], [380, 11, 1, "", "pendown"], [380, 11, 1, "", "pensize"], [380, 11, 1, "", "penup"], [380, 11, 1, "", "pos"], [380, 11, 1, "", "position"], [380, 11, 1, "", "pu"], [380, 11, 1, "", "radians"], [380, 11, 1, "", "register_shape"], [380, 11, 1, "", "reset"], [380, 11, 1, "", "resetscreen"], [380, 11, 1, "", "resizemode"], [380, 11, 1, "", "right"], [380, 11, 1, "", "rt"], [380, 11, 1, "", "screensize"], [380, 11, 1, "", "seth"], [380, 11, 1, "", "setheading"], [380, 11, 1, "", "setpos"], [380, 11, 1, "", "setposition"], [380, 11, 1, "", "settiltangle"], [380, 11, 1, "", "setundobuffer"], [380, 11, 1, "", "setup"], [380, 11, 1, "", "setworldcoordinates"], [380, 11, 1, "", "setx"], [380, 11, 1, "", "sety"], [380, 11, 1, "", "shape"], [380, 11, 1, "", "shapesize"], [380, 11, 1, "", "shapetransform"], [380, 11, 1, "", "shearfactor"], [380, 11, 1, "", "showturtle"], [380, 11, 1, "", "speed"], [380, 11, 1, "", "st"], [380, 11, 1, "", "stamp"], [380, 11, 1, "", "teleport"], [380, 11, 1, "", "textinput"], [380, 11, 1, "", "tilt"], [380, 11, 1, "", "tiltangle"], [380, 11, 1, "", "title"], [380, 11, 1, "", "towards"], [380, 11, 1, "", "tracer"], [380, 11, 1, "", "turtles"], [380, 11, 1, "", "turtlesize"], [380, 11, 1, "", "undo"], [380, 11, 1, "", "undobufferentries"], [380, 11, 1, "", "up"], [380, 11, 1, "", "update"], [380, 11, 1, "", "width"], [380, 11, 1, "", "window_height"], [380, 11, 1, "", "window_width"], [380, 11, 1, "", "write"], [380, 11, 1, "", "write_docstringdict"], [380, 11, 1, "", "xcor"], [380, 11, 1, "", "ycor"]], "turtle.Shape": [[380, 8, 1, "", "addcomponent"]], "types": [[381, 9, 1, "", "AsyncGeneratorType"], [381, 9, 1, "", "BuiltinFunctionType"], [381, 9, 1, "", "BuiltinMethodType"], [381, 9, 1, "", "CellType"], [381, 9, 1, "", "ClassMethodDescriptorType"], [381, 12, 1, "", "CodeType"], [381, 9, 1, "", "CoroutineType"], [381, 11, 1, "", "DynamicClassAttribute"], [381, 9, 1, "", "EllipsisType"], [381, 9, 1, "", "FrameType"], [381, 9, 1, "", "FunctionType"], [381, 9, 1, "", "GeneratorType"], [381, 12, 1, "", "GenericAlias"], [381, 9, 1, "", "GetSetDescriptorType"], [381, 9, 1, "", "LambdaType"], [381, 12, 1, "", "MappingProxyType"], [381, 9, 1, "", "MemberDescriptorType"], [381, 9, 1, "", "MethodDescriptorType"], [381, 9, 1, "", "MethodType"], [381, 9, 1, "", "MethodWrapperType"], [381, 12, 1, "", "ModuleType"], [381, 9, 1, "", "NoneType"], [381, 9, 1, "", "NotImplementedType"], [381, 12, 1, "", "SimpleNamespace"], [381, 12, 1, "", "TracebackType"], [381, 12, 1, "", "UnionType"], [381, 9, 1, "", "WrapperDescriptorType"], [381, 11, 1, "", "coroutine"], [381, 11, 1, "", "get_original_bases"], [381, 11, 1, "", "new_class"], [381, 11, 1, "", "prepare_class"], [381, 11, 1, "", "resolve_bases"]], "types.CodeType": [[381, 8, 1, "", "replace"]], "types.MappingProxyType": [[381, 8, 1, "", "copy"], [381, 8, 1, "", "get"], [381, 8, 1, "", "items"], [381, 8, 1, "", "keys"], [381, 8, 1, "", "values"]], "types.ModuleType": [[381, 7, 1, "", "__doc__"], [381, 7, 1, "", "__loader__"], [381, 7, 1, "", "__name__"], [381, 7, 1, "", "__package__"], [381, 7, 1, "", "__spec__"]], "typing": [[382, 12, 1, "", "AbstractSet"], [382, 9, 1, "", "Annotated"], [382, 9, 1, "", "Any"], [382, 9, 1, "", "AnyStr"], [382, 12, 1, "", "AsyncContextManager"], [382, 12, 1, "", "AsyncGenerator"], [382, 12, 1, "", "AsyncIterable"], [382, 12, 1, "", "AsyncIterator"], [382, 12, 1, "", "Awaitable"], [382, 12, 1, "", "BinaryIO"], [382, 12, 1, "", "ByteString"], [382, 9, 1, "", "Callable"], [382, 12, 1, "", "ChainMap"], [382, 9, 1, "", "ClassVar"], [382, 12, 1, "", "Collection"], [382, 9, 1, "", "Concatenate"], [382, 12, 1, "", "Container"], [382, 12, 1, "", "ContextManager"], [382, 12, 1, "", "Coroutine"], [382, 12, 1, "", "Counter"], [382, 12, 1, "", "DefaultDict"], [382, 12, 1, "", "Deque"], [382, 12, 1, "", "Dict"], [382, 9, 1, "", "Final"], [382, 12, 1, "", "ForwardRef"], [382, 12, 1, "", "FrozenSet"], [382, 12, 1, "", "Generator"], [382, 12, 1, "", "Generic"], [382, 12, 1, "", "Hashable"], [382, 12, 1, "", "IO"], [382, 12, 1, "", "ItemsView"], [382, 12, 1, "", "Iterable"], [382, 12, 1, "", "Iterator"], [382, 12, 1, "", "KeysView"], [382, 12, 1, "", "List"], [382, 9, 1, "", "Literal"], [382, 9, 1, "", "LiteralString"], [382, 12, 1, "", "Mapping"], [382, 12, 1, "", "MappingView"], [382, 12, 1, "", "Match"], [382, 12, 1, "", "MutableMapping"], [382, 12, 1, "", "MutableSequence"], [382, 12, 1, "", "MutableSet"], [382, 12, 1, "", "NamedTuple"], [382, 9, 1, "", "Never"], [382, 12, 1, "", "NewType"], [382, 9, 1, "", "NoReturn"], [382, 9, 1, "", "NotRequired"], [382, 9, 1, "", "Optional"], [382, 12, 1, "", "OrderedDict"], [382, 12, 1, "", "ParamSpec"], [382, 9, 1, "", "ParamSpecArgs"], [382, 9, 1, "", "ParamSpecKwargs"], [382, 12, 1, "", "Pattern"], [382, 12, 1, "", "Protocol"], [382, 9, 1, "", "Required"], [382, 12, 1, "", "Reversible"], [382, 9, 1, "", "Self"], [382, 12, 1, "", "Sequence"], [382, 12, 1, "", "Set"], [382, 12, 1, "", "Sized"], [382, 12, 1, "", "SupportsAbs"], [382, 12, 1, "", "SupportsBytes"], [382, 12, 1, "", "SupportsComplex"], [382, 12, 1, "", "SupportsFloat"], [382, 12, 1, "", "SupportsIndex"], [382, 12, 1, "", "SupportsInt"], [382, 12, 1, "", "SupportsRound"], [382, 9, 1, "", "TYPE_CHECKING"], [382, 12, 1, "", "Text"], [382, 12, 1, "", "TextIO"], [382, 9, 1, "", "Tuple"], [382, 12, 1, "", "Type"], [382, 9, 1, "", "TypeAlias"], [382, 12, 1, "", "TypeAliasType"], [382, 9, 1, "", "TypeGuard"], [382, 12, 1, "", "TypeVar"], [382, 12, 1, "", "TypeVarTuple"], [382, 12, 1, "", "TypedDict"], [382, 9, 1, "", "Union"], [382, 9, 1, "", "Unpack"], [382, 12, 1, "", "ValuesView"], [382, 11, 1, "", "assert_never"], [382, 11, 1, "", "assert_type"], [382, 11, 1, "", "cast"], [382, 11, 1, "", "clear_overloads"], [382, 11, 1, "", "dataclass_transform"], [382, 11, 1, "", "final"], [382, 11, 1, "", "get_args"], [382, 11, 1, "", "get_origin"], [382, 11, 1, "", "get_overloads"], [382, 11, 1, "", "get_type_hints"], [382, 11, 1, "", "is_typeddict"], [382, 11, 1, "", "no_type_check"], [382, 11, 1, "", "no_type_check_decorator"], [382, 11, 1, "", "overload"], [382, 11, 1, "", "override"], [382, 11, 1, "", "reveal_type"], [382, 11, 1, "", "runtime_checkable"], [382, 11, 1, "", "type_check_only"]], "typing.NewType": [[382, 7, 1, "", "__module__"], [382, 7, 1, "", "__name__"], [382, 7, 1, "", "__supertype__"]], "typing.ParamSpec": [[382, 7, 1, "", "__name__"], [382, 7, 1, "", "args"], [382, 7, 1, "", "kwargs"]], "typing.TypeAliasType": [[382, 7, 1, "", "__module__"], [382, 7, 1, "", "__name__"], [382, 7, 1, "", "__type_params__"], [382, 7, 1, "", "__value__"]], "typing.TypeVar": [[382, 7, 1, "", "__bound__"], [382, 7, 1, "", "__constraints__"], [382, 7, 1, "", "__contravariant__"], [382, 7, 1, "", "__covariant__"], [382, 7, 1, "", "__infer_variance__"], [382, 7, 1, "", "__name__"]], "typing.TypeVarTuple": [[382, 7, 1, "", "__name__"]], "typing.TypedDict": [[382, 7, 1, "", "__optional_keys__"], [382, 7, 1, "", "__required_keys__"], [382, 7, 1, "", "__total__"]], "unicodedata": [[383, 11, 1, "", "bidirectional"], [383, 11, 1, "", "category"], [383, 11, 1, "", "combining"], [383, 11, 1, "", "decimal"], [383, 11, 1, "", "decomposition"], [383, 11, 1, "", "digit"], [383, 11, 1, "", "east_asian_width"], [383, 11, 1, "", "is_normalized"], [383, 11, 1, "", "lookup"], [383, 11, 1, "", "mirrored"], [383, 11, 1, "", "name"], [383, 11, 1, "", "normalize"], [383, 11, 1, "", "numeric"], [383, 9, 1, "", "ucd_3_2_0"], [383, 9, 1, "", "unidata_version"]], "unittest": [[384, 12, 1, "", "FunctionTestCase"], [384, 12, 1, "", "IsolatedAsyncioTestCase"], [384, 6, 1, "", "SkipTest"], [384, 12, 1, "", "TestCase"], [384, 12, 1, "", "TestLoader"], [384, 12, 1, "", "TestResult"], [384, 12, 1, "", "TestSuite"], [384, 12, 1, "", "TextTestResult"], [384, 12, 1, "", "TextTestRunner"], [384, 11, 1, "", "addModuleCleanup"], [384, 9, 1, "", "defaultTestLoader"], [384, 11, 1, "", "doModuleCleanups"], [384, 8, 1, "", "enterModuleContext"], [384, 11, 1, "", "expectedFailure"], [384, 11, 1, "", "installHandler"], [384, 11, 1, "", "main"], [385, 10, 0, "-", "mock"], [384, 11, 1, "", "registerResult"], [384, 11, 1, "", "removeHandler"], [384, 11, 1, "", "removeResult"], [384, 11, 1, "", "skip"], [384, 11, 1, "", "skipIf"], [384, 11, 1, "", "skipUnless"], [384, 14, 1, "cmdoption-unittest-b", "--buffer"], [384, 14, 1, "cmdoption-unittest-c", "--catch"], [384, 14, 1, "cmdoption-unittest-durations", "--durations"], [384, 14, 1, "cmdoption-unittest-f", "--failfast"], [384, 14, 1, "cmdoption-unittest-locals", "--locals"], [384, 14, 1, "cmdoption-unittest-b", "-b"], [384, 14, 1, "cmdoption-unittest-c", "-c"], [384, 14, 1, "cmdoption-unittest-f", "-f"], [384, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[384, 8, 1, "", "addAsyncCleanup"], [384, 8, 1, "", "asyncSetUp"], [384, 8, 1, "", "asyncTearDown"], [384, 8, 1, "", "enterAsyncContext"], [384, 8, 1, "", "run"]], "unittest.TestCase": [[384, 8, 1, "", "addClassCleanup"], [384, 8, 1, "", "addCleanup"], [384, 8, 1, "", "addTypeEqualityFunc"], [384, 8, 1, "", "assertAlmostEqual"], [384, 8, 1, "", "assertCountEqual"], [384, 8, 1, "", "assertDictEqual"], [384, 8, 1, "", "assertEqual"], [384, 8, 1, "", "assertFalse"], [384, 8, 1, "", "assertGreater"], [384, 8, 1, "", "assertGreaterEqual"], [384, 8, 1, "", "assertIn"], [384, 8, 1, "", "assertIs"], [384, 8, 1, "", "assertIsInstance"], [384, 8, 1, "", "assertIsNone"], [384, 8, 1, "", "assertIsNot"], [384, 8, 1, "", "assertIsNotNone"], [384, 8, 1, "", "assertLess"], [384, 8, 1, "", "assertLessEqual"], [384, 8, 1, "", "assertListEqual"], [384, 8, 1, "", "assertLogs"], [384, 8, 1, "", "assertMultiLineEqual"], [384, 8, 1, "", "assertNoLogs"], [384, 8, 1, "", "assertNotAlmostEqual"], [384, 8, 1, "", "assertNotEqual"], [384, 8, 1, "", "assertNotIn"], [384, 8, 1, "", "assertNotIsInstance"], [384, 8, 1, "", "assertNotRegex"], [384, 8, 1, "", "assertRaises"], [384, 8, 1, "", "assertRaisesRegex"], [384, 8, 1, "", "assertRegex"], [384, 8, 1, "", "assertSequenceEqual"], [384, 8, 1, "", "assertSetEqual"], [384, 8, 1, "", "assertTrue"], [384, 8, 1, "", "assertTupleEqual"], [384, 8, 1, "", "assertWarns"], [384, 8, 1, "", "assertWarnsRegex"], [384, 8, 1, "", "countTestCases"], [384, 8, 1, "", "debug"], [384, 8, 1, "", "defaultTestResult"], [384, 8, 1, "", "doClassCleanups"], [384, 8, 1, "", "doCleanups"], [384, 8, 1, "", "enterClassContext"], [384, 8, 1, "", "enterContext"], [384, 8, 1, "", "fail"], [384, 7, 1, "", "failureException"], [384, 8, 1, "", "id"], [384, 7, 1, "", "longMessage"], [384, 7, 1, "", "maxDiff"], [384, 7, 1, "", "output"], [384, 7, 1, "", "records"], [384, 8, 1, "", "run"], [384, 8, 1, "", "setUp"], [384, 8, 1, "", "setUpClass"], [384, 8, 1, "", "shortDescription"], [384, 8, 1, "", "skipTest"], [384, 8, 1, "", "subTest"], [384, 8, 1, "", "tearDown"], [384, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[384, 8, 1, "", "discover"], [384, 7, 1, "", "errors"], [384, 8, 1, "", "getTestCaseNames"], [384, 8, 1, "", "loadTestsFromModule"], [384, 8, 1, "", "loadTestsFromName"], [384, 8, 1, "", "loadTestsFromNames"], [384, 8, 1, "", "loadTestsFromTestCase"], [384, 7, 1, "", "sortTestMethodsUsing"], [384, 7, 1, "", "suiteClass"], [384, 7, 1, "", "testMethodPrefix"], [384, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[384, 8, 1, "", "addDuration"], [384, 8, 1, "", "addError"], [384, 8, 1, "", "addExpectedFailure"], [384, 8, 1, "", "addFailure"], [384, 8, 1, "", "addSkip"], [384, 8, 1, "", "addSubTest"], [384, 8, 1, "", "addSuccess"], [384, 8, 1, "", "addUnexpectedSuccess"], [384, 7, 1, "", "buffer"], [384, 7, 1, "", "collectedDurations"], [384, 7, 1, "", "errors"], [384, 7, 1, "", "expectedFailures"], [384, 7, 1, "", "failfast"], [384, 7, 1, "", "failures"], [384, 7, 1, "", "shouldStop"], [384, 7, 1, "", "skipped"], [384, 8, 1, "", "startTest"], [384, 8, 1, "", "startTestRun"], [384, 8, 1, "", "stop"], [384, 8, 1, "", "stopTest"], [384, 8, 1, "", "stopTestRun"], [384, 7, 1, "", "tb_locals"], [384, 7, 1, "", "testsRun"], [384, 7, 1, "", "unexpectedSuccesses"], [384, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[384, 8, 1, "", "__iter__"], [384, 8, 1, "", "addTest"], [384, 8, 1, "", "addTests"], [384, 8, 1, "", "countTestCases"], [384, 8, 1, "", "debug"], [384, 8, 1, "", "run"]], "unittest.TextTestRunner": [[384, 8, 1, "", "_makeResult"], [384, 8, 1, "", "run"]], "unittest.mock": [[385, 9, 1, "", "ANY"], [385, 12, 1, "", "AsyncMock"], [385, 9, 1, "", "DEFAULT"], [385, 9, 1, "", "FILTER_DIR"], [385, 12, 1, "", "MagicMock"], [385, 12, 1, "", "Mock"], [385, 12, 1, "", "NonCallableMagicMock"], [385, 12, 1, "", "NonCallableMock"], [385, 12, 1, "", "PropertyMock"], [385, 11, 1, "", "call"], [385, 11, 1, "", "create_autospec"], [385, 11, 1, "", "mock_open"], [385, 11, 1, "", "patch"], [385, 11, 1, "", "seal"], [385, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[385, 8, 1, "", "assert_any_await"], [385, 8, 1, "", "assert_awaited"], [385, 8, 1, "", "assert_awaited_once"], [385, 8, 1, "", "assert_awaited_once_with"], [385, 8, 1, "", "assert_awaited_with"], [385, 8, 1, "", "assert_has_awaits"], [385, 8, 1, "", "assert_not_awaited"], [385, 7, 1, "", "await_args"], [385, 7, 1, "", "await_args_list"], [385, 7, 1, "", "await_count"], [385, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[385, 7, 1, "", "__class__"], [385, 8, 1, "", "__dir__"], [385, 8, 1, "", "_get_child_mock"], [385, 8, 1, "", "assert_any_call"], [385, 8, 1, "", "assert_called"], [385, 8, 1, "", "assert_called_once"], [385, 8, 1, "", "assert_called_once_with"], [385, 8, 1, "", "assert_called_with"], [385, 8, 1, "", "assert_has_calls"], [385, 8, 1, "", "assert_not_called"], [385, 8, 1, "", "attach_mock"], [385, 7, 1, "", "call_args"], [385, 7, 1, "", "call_args_list"], [385, 7, 1, "", "call_count"], [385, 7, 1, "", "called"], [385, 8, 1, "", "configure_mock"], [385, 7, 1, "", "method_calls"], [385, 8, 1, "", "mock_add_spec"], [385, 7, 1, "", "mock_calls"], [385, 8, 1, "", "reset_mock"], [385, 7, 1, "", "return_value"], [385, 7, 1, "", "side_effect"]], "unittest.mock.call": [[385, 8, 1, "", "call_list"]], "unittest.mock.patch": [[385, 11, 1, "", "dict"], [385, 11, 1, "", "multiple"], [385, 11, 1, "", "object"], [385, 11, 1, "", "stopall"]], "urllib": [[389, 10, 0, "-", "error"], [390, 10, 0, "-", "parse"], [391, 10, 0, "-", "request"], [391, 10, 0, "-", "response"], [392, 10, 0, "-", "robotparser"]], "urllib.error": [[389, 6, 1, "", "ContentTooShortError"], [389, 6, 1, "", "HTTPError"], [389, 6, 1, "", "URLError"]], "urllib.error.ContentTooShortError": [[389, 7, 1, "", "content"]], "urllib.error.HTTPError": [[389, 7, 1, "", "code"], [389, 7, 1, "", "fp"], [389, 7, 1, "", "headers"], [389, 7, 1, "", "reason"], [389, 7, 1, "", "url"]], "urllib.error.URLError": [[389, 7, 1, "", "reason"]], "urllib.parse": [[390, 12, 1, "", "DefragResult"], [390, 12, 1, "", "DefragResultBytes"], [390, 12, 1, "", "ParseResult"], [390, 12, 1, "", "ParseResultBytes"], [390, 12, 1, "", "SplitResult"], [390, 12, 1, "", "SplitResultBytes"], [390, 11, 1, "", "parse_qs"], [390, 11, 1, "", "parse_qsl"], [390, 11, 1, "", "quote"], [390, 11, 1, "", "quote_from_bytes"], [390, 11, 1, "", "quote_plus"], [390, 11, 1, "", "unquote"], [390, 11, 1, "", "unquote_plus"], [390, 11, 1, "", "unquote_to_bytes"], [390, 11, 1, "", "unwrap"], [390, 11, 1, "", "urldefrag"], [390, 11, 1, "", "urlencode"], [390, 11, 1, "", "urljoin"], [390, 11, 1, "", "urlparse"], [390, 11, 1, "", "urlsplit"], [390, 11, 1, "", "urlunparse"], [390, 11, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[390, 8, 1, "", "geturl"]], "urllib.request": [[391, 12, 1, "", "AbstractBasicAuthHandler"], [391, 12, 1, "", "AbstractDigestAuthHandler"], [391, 12, 1, "", "BaseHandler"], [391, 12, 1, "", "CacheFTPHandler"], [391, 12, 1, "", "DataHandler"], [391, 12, 1, "", "FTPHandler"], [391, 12, 1, "", "FancyURLopener"], [391, 12, 1, "", "FileHandler"], [391, 12, 1, "", "HTTPBasicAuthHandler"], [391, 12, 1, "", "HTTPCookieProcessor"], [391, 12, 1, "", "HTTPDefaultErrorHandler"], [391, 12, 1, "", "HTTPDigestAuthHandler"], [391, 12, 1, "", "HTTPErrorProcessor"], [391, 12, 1, "", "HTTPHandler"], [391, 12, 1, "", "HTTPPasswordMgr"], [391, 12, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [391, 12, 1, "", "HTTPPasswordMgrWithPriorAuth"], [391, 12, 1, "", "HTTPRedirectHandler"], [391, 12, 1, "", "HTTPSHandler"], [391, 12, 1, "", "OpenerDirector"], [391, 12, 1, "", "ProxyBasicAuthHandler"], [391, 12, 1, "", "ProxyDigestAuthHandler"], [391, 12, 1, "", "ProxyHandler"], [391, 12, 1, "", "Request"], [391, 12, 1, "", "URLopener"], [391, 12, 1, "", "UnknownHandler"], [391, 11, 1, "", "build_opener"], [391, 11, 1, "", "getproxies"], [391, 11, 1, "", "install_opener"], [391, 11, 1, "", "pathname2url"], [391, 11, 1, "", "url2pathname"], [391, 11, 1, "", "urlcleanup"], [391, 11, 1, "", "urlopen"], [391, 11, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[391, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[391, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[391, 8, 1, "", "add_parent"], [391, 8, 1, "", "close"], [391, 8, 1, "", "default_open"], [391, 8, 1, "", "http_error_default"], [391, 7, 1, "", "parent"], [391, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[391, 8, 1, "", "setMaxConns"], [391, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[391, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[391, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[391, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[391, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[391, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[391, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[391, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[391, 8, 1, "", "http_response"], [391, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[391, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[391, 8, 1, "", "add_password"], [391, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[391, 8, 1, "", "add_password"], [391, 8, 1, "", "find_user_password"], [391, 8, 1, "", "is_authenticated"], [391, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[391, 8, 1, "", "http_error_301"], [391, 8, 1, "", "http_error_302"], [391, 8, 1, "", "http_error_303"], [391, 8, 1, "", "http_error_307"], [391, 8, 1, "", "http_error_308"], [391, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[391, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[391, 8, 1, "", "add_handler"], [391, 8, 1, "", "error"], [391, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[391, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[391, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[391, 8, 1, "", "add_header"], [391, 8, 1, "", "add_unredirected_header"], [391, 7, 1, "", "data"], [391, 7, 1, "", "full_url"], [391, 8, 1, "", "get_full_url"], [391, 8, 1, "", "get_header"], [391, 8, 1, "", "get_method"], [391, 8, 1, "", "has_header"], [391, 8, 1, "", "header_items"], [391, 7, 1, "", "host"], [391, 7, 1, "", "method"], [391, 7, 1, "", "origin_req_host"], [391, 8, 1, "", "remove_header"], [391, 7, 1, "", "selector"], [391, 8, 1, "", "set_proxy"], [391, 7, 1, "", "type"], [391, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[391, 8, 1, "", "open"], [391, 8, 1, "", "open_unknown"], [391, 8, 1, "", "retrieve"], [391, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[391, 8, 1, "", "unknown_open"]], "urllib.response": [[391, 12, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[391, 7, 1, "", "code"], [391, 8, 1, "", "getcode"], [391, 8, 1, "", "geturl"], [391, 7, 1, "", "headers"], [391, 8, 1, "", "info"], [391, 7, 1, "", "status"], [391, 7, 1, "", "url"]], "urllib.robotparser": [[392, 12, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[392, 8, 1, "", "can_fetch"], [392, 8, 1, "", "crawl_delay"], [392, 8, 1, "", "modified"], [392, 8, 1, "", "mtime"], [392, 8, 1, "", "parse"], [392, 8, 1, "", "read"], [392, 8, 1, "", "request_rate"], [392, 8, 1, "", "set_url"], [392, 8, 1, "", "site_maps"]], "uu": [[393, 6, 1, "", "Error"], [393, 11, 1, "", "decode"], [393, 11, 1, "", "encode"]], "uuid": [[394, 9, 1, "", "NAMESPACE_DNS"], [394, 9, 1, "", "NAMESPACE_OID"], [394, 9, 1, "", "NAMESPACE_URL"], [394, 9, 1, "", "NAMESPACE_X500"], [394, 9, 1, "", "RESERVED_FUTURE"], [394, 9, 1, "", "RESERVED_MICROSOFT"], [394, 9, 1, "", "RESERVED_NCS"], [394, 9, 1, "", "RFC_4122"], [394, 12, 1, "", "SafeUUID"], [394, 12, 1, "", "UUID"], [394, 11, 1, "", "getnode"], [394, 11, 1, "", "uuid1"], [394, 11, 1, "", "uuid3"], [394, 11, 1, "", "uuid4"], [394, 11, 1, "", "uuid5"], [394, 14, 1, "cmdoption-uuid-h", "--help"], [394, 14, 1, "cmdoption-uuid-name", "--name"], [394, 14, 1, "cmdoption-uuid-namespace", "--namespace"], [394, 14, 1, "cmdoption-uuid-uuid", "--uuid"], [394, 14, 1, "cmdoption-uuid-N", "-N"], [394, 14, 1, "cmdoption-uuid-h", "-h"], [394, 14, 1, "cmdoption-uuid-n", "-n"], [394, 14, 1, "cmdoption-uuid-u", "-u"]], "uuid.SafeUUID": [[394, 7, 1, "", "safe"], [394, 7, 1, "", "unknown"], [394, 7, 1, "", "unsafe"]], "uuid.UUID": [[394, 7, 1, "", "bytes"], [394, 7, 1, "", "bytes_le"], [394, 7, 1, "", "fields"], [394, 7, 1, "", "hex"], [394, 7, 1, "", "int"], [394, 7, 1, "", "is_safe"], [394, 7, 1, "", "urn"], [394, 7, 1, "", "variant"], [394, 7, 1, "", "version"]], "venv": [[395, 12, 1, "", "EnvBuilder"], [395, 11, 1, "", "create"]], "venv.EnvBuilder": [[395, 8, 1, "", "create"], [395, 8, 1, "", "create_configuration"], [395, 8, 1, "", "ensure_directories"], [395, 8, 1, "", "install_scripts"], [395, 8, 1, "", "post_setup"], [395, 8, 1, "", "setup_python"], [395, 8, 1, "", "setup_scripts"], [395, 8, 1, "", "upgrade_dependencies"]], "warnings": [[396, 12, 1, "", "catch_warnings"], [396, 11, 1, "", "filterwarnings"], [396, 11, 1, "", "formatwarning"], [396, 11, 1, "", "resetwarnings"], [396, 11, 1, "", "showwarning"], [396, 11, 1, "", "simplefilter"], [396, 11, 1, "", "warn"], [396, 11, 1, "", "warn_explicit"]], "wave": [[397, 6, 1, "", "Error"], [397, 12, 1, "", "Wave_read"], [397, 12, 1, "", "Wave_write"], [397, 11, 1, "", "open"]], "wave.Wave_read": [[397, 8, 1, "", "close"], [397, 8, 1, "", "getcompname"], [397, 8, 1, "", "getcomptype"], [397, 8, 1, "", "getframerate"], [397, 8, 1, "", "getmark"], [397, 8, 1, "", "getmarkers"], [397, 8, 1, "", "getnchannels"], [397, 8, 1, "", "getnframes"], [397, 8, 1, "", "getparams"], [397, 8, 1, "", "getsampwidth"], [397, 8, 1, "", "readframes"], [397, 8, 1, "", "rewind"], [397, 8, 1, "", "setpos"], [397, 8, 1, "", "tell"]], "wave.Wave_write": [[397, 8, 1, "", "close"], [397, 8, 1, "", "setcomptype"], [397, 8, 1, "", "setframerate"], [397, 8, 1, "", "setnchannels"], [397, 8, 1, "", "setnframes"], [397, 8, 1, "", "setparams"], [397, 8, 1, "", "setsampwidth"], [397, 8, 1, "", "tell"], [397, 8, 1, "", "writeframes"], [397, 8, 1, "", "writeframesraw"]], "weakref": [[398, 9, 1, "", "CallableProxyType"], [398, 9, 1, "", "ProxyType"], [398, 9, 1, "", "ProxyTypes"], [398, 9, 1, "", "ReferenceType"], [398, 12, 1, "", "WeakKeyDictionary"], [398, 12, 1, "", "WeakMethod"], [398, 12, 1, "", "WeakSet"], [398, 12, 1, "", "WeakValueDictionary"], [398, 12, 1, "", "finalize"], [398, 11, 1, "", "getweakrefcount"], [398, 11, 1, "", "getweakrefs"], [398, 11, 1, "", "proxy"], [398, 12, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[398, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[398, 8, 1, "", "valuerefs"]], "weakref.finalize": [[398, 8, 1, "", "__call__"], [398, 7, 1, "", "alive"], [398, 7, 1, "", "atexit"], [398, 8, 1, "", "detach"], [398, 8, 1, "", "peek"]], "weakref.ref": [[398, 7, 1, "", "__callback__"]], "webbrowser": [[399, 6, 1, "", "Error"], [399, 11, 1, "", "get"], [399, 7, 1, "", "name"], [399, 11, 1, "", "open"], [399, 11, 1, "", "open_new"], [399, 11, 1, "", "open_new_tab"], [399, 11, 1, "", "register"]], "webbrowser.controller": [[399, 8, 1, "", "open"], [399, 8, 1, "", "open_new"], [399, 8, 1, "", "open_new_tab"]], "winreg": [[401, 11, 1, "", "CloseKey"], [401, 11, 1, "", "ConnectRegistry"], [401, 11, 1, "", "CreateKey"], [401, 11, 1, "", "CreateKeyEx"], [401, 11, 1, "", "DeleteKey"], [401, 11, 1, "", "DeleteKeyEx"], [401, 11, 1, "", "DeleteValue"], [401, 11, 1, "", "DisableReflectionKey"], [401, 11, 1, "", "EnableReflectionKey"], [401, 11, 1, "", "EnumKey"], [401, 11, 1, "", "EnumValue"], [401, 11, 1, "", "ExpandEnvironmentStrings"], [401, 11, 1, "", "FlushKey"], [401, 9, 1, "", "HKEY_CLASSES_ROOT"], [401, 9, 1, "", "HKEY_CURRENT_CONFIG"], [401, 9, 1, "", "HKEY_CURRENT_USER"], [401, 9, 1, "", "HKEY_DYN_DATA"], [401, 9, 1, "", "HKEY_LOCAL_MACHINE"], [401, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [401, 9, 1, "", "HKEY_USERS"], [401, 9, 1, "", "KEY_ALL_ACCESS"], [401, 9, 1, "", "KEY_CREATE_LINK"], [401, 9, 1, "", "KEY_CREATE_SUB_KEY"], [401, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [401, 9, 1, "", "KEY_EXECUTE"], [401, 9, 1, "", "KEY_NOTIFY"], [401, 9, 1, "", "KEY_QUERY_VALUE"], [401, 9, 1, "", "KEY_READ"], [401, 9, 1, "", "KEY_SET_VALUE"], [401, 9, 1, "", "KEY_WOW64_32KEY"], [401, 9, 1, "", "KEY_WOW64_64KEY"], [401, 9, 1, "", "KEY_WRITE"], [401, 11, 1, "", "LoadKey"], [401, 11, 1, "", "OpenKey"], [401, 11, 1, "", "OpenKeyEx"], [401, 11, 1, "", "QueryInfoKey"], [401, 11, 1, "", "QueryReflectionKey"], [401, 11, 1, "", "QueryValue"], [401, 11, 1, "", "QueryValueEx"], [401, 9, 1, "", "REG_BINARY"], [401, 9, 1, "", "REG_DWORD"], [401, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [401, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [401, 9, 1, "", "REG_EXPAND_SZ"], [401, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [401, 9, 1, "", "REG_LINK"], [401, 9, 1, "", "REG_MULTI_SZ"], [401, 9, 1, "", "REG_NONE"], [401, 9, 1, "", "REG_QWORD"], [401, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [401, 9, 1, "", "REG_RESOURCE_LIST"], [401, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [401, 9, 1, "", "REG_SZ"], [401, 11, 1, "", "SaveKey"], [401, 11, 1, "", "SetValue"], [401, 11, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[401, 8, 1, "", "Close"], [401, 8, 1, "", "Detach"], [401, 8, 1, "", "__enter__"], [401, 8, 1, "", "__exit__"]], "winsound": [[402, 11, 1, "", "Beep"], [402, 9, 1, "", "MB_ICONASTERISK"], [402, 9, 1, "", "MB_ICONEXCLAMATION"], [402, 9, 1, "", "MB_ICONHAND"], [402, 9, 1, "", "MB_ICONQUESTION"], [402, 9, 1, "", "MB_OK"], [402, 11, 1, "", "MessageBeep"], [402, 11, 1, "", "PlaySound"], [402, 9, 1, "", "SND_ALIAS"], [402, 9, 1, "", "SND_ASYNC"], [402, 9, 1, "", "SND_FILENAME"], [402, 9, 1, "", "SND_LOOP"], [402, 9, 1, "", "SND_MEMORY"], [402, 9, 1, "", "SND_NODEFAULT"], [402, 9, 1, "", "SND_NOSTOP"], [402, 9, 1, "", "SND_NOWAIT"], [402, 9, 1, "", "SND_PURGE"]], "wsgiref": [[403, 10, 0, "-", "handlers"], [403, 10, 0, "-", "headers"], [403, 10, 0, "-", "simple_server"], [403, 10, 0, "-", "types"], [403, 10, 0, "-", "util"], [403, 10, 0, "-", "validate"]], "wsgiref.handlers": [[403, 12, 1, "", "BaseCGIHandler"], [403, 12, 1, "", "BaseHandler"], [403, 12, 1, "", "CGIHandler"], [403, 12, 1, "", "IISCGIHandler"], [403, 12, 1, "", "SimpleHandler"], [403, 11, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[403, 8, 1, "", "_flush"], [403, 8, 1, "", "_write"], [403, 8, 1, "", "add_cgi_vars"], [403, 7, 1, "", "error_body"], [403, 7, 1, "", "error_headers"], [403, 8, 1, "", "error_output"], [403, 7, 1, "", "error_status"], [403, 8, 1, "", "get_scheme"], [403, 8, 1, "", "get_stderr"], [403, 8, 1, "", "get_stdin"], [403, 7, 1, "", "http_version"], [403, 8, 1, "", "log_exception"], [403, 7, 1, "", "origin_server"], [403, 7, 1, "", "os_environ"], [403, 8, 1, "", "run"], [403, 8, 1, "", "sendfile"], [403, 7, 1, "", "server_software"], [403, 8, 1, "", "setup_environ"], [403, 7, 1, "", "traceback_limit"], [403, 7, 1, "", "wsgi_file_wrapper"], [403, 7, 1, "", "wsgi_multiprocess"], [403, 7, 1, "", "wsgi_multithread"], [403, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[403, 12, 1, "", "Headers"]], "wsgiref.headers.Headers": [[403, 8, 1, "", "add_header"], [403, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[403, 12, 1, "", "WSGIRequestHandler"], [403, 12, 1, "", "WSGIServer"], [403, 11, 1, "", "demo_app"], [403, 11, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[403, 8, 1, "", "get_environ"], [403, 8, 1, "", "get_stderr"], [403, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[403, 8, 1, "", "get_app"], [403, 8, 1, "", "set_app"]], "wsgiref.types": [[403, 12, 1, "", "ErrorStream"], [403, 12, 1, "", "FileWrapper"], [403, 12, 1, "", "InputStream"], [403, 12, 1, "", "StartResponse"], [403, 9, 1, "", "WSGIApplication"], [403, 9, 1, "", "WSGIEnvironment"]], "wsgiref.util": [[403, 12, 1, "", "FileWrapper"], [403, 11, 1, "", "application_uri"], [403, 11, 1, "", "guess_scheme"], [403, 11, 1, "", "is_hop_by_hop"], [403, 11, 1, "", "request_uri"], [403, 11, 1, "", "setup_testing_defaults"], [403, 11, 1, "", "shift_path_info"]], "wsgiref.validate": [[403, 11, 1, "", "validator"]], "xdrlib": [[404, 6, 1, "", "ConversionError"], [404, 6, 1, "", "Error"], [404, 12, 1, "", "Packer"], [404, 12, 1, "", "Unpacker"]], "xdrlib.Packer": [[404, 8, 1, "", "get_buffer"], [404, 8, 1, "", "pack_array"], [404, 8, 1, "", "pack_bytes"], [404, 8, 1, "", "pack_double"], [404, 8, 1, "", "pack_farray"], [404, 8, 1, "", "pack_float"], [404, 8, 1, "", "pack_fopaque"], [404, 8, 1, "", "pack_fstring"], [404, 8, 1, "", "pack_list"], [404, 8, 1, "", "pack_opaque"], [404, 8, 1, "", "pack_string"], [404, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[404, 8, 1, "", "done"], [404, 8, 1, "", "get_buffer"], [404, 8, 1, "", "get_position"], [404, 8, 1, "", "reset"], [404, 8, 1, "", "set_position"], [404, 8, 1, "", "unpack_array"], [404, 8, 1, "", "unpack_bytes"], [404, 8, 1, "", "unpack_double"], [404, 8, 1, "", "unpack_farray"], [404, 8, 1, "", "unpack_float"], [404, 8, 1, "", "unpack_fopaque"], [404, 8, 1, "", "unpack_fstring"], [404, 8, 1, "", "unpack_list"], [404, 8, 1, "", "unpack_opaque"], [404, 8, 1, "", "unpack_string"]], "xml": [[406, 10, 0, "-", "dom"], [410, 10, 0, "-", "sax"]], "xml.dom.Attr": [[406, 7, 1, "", "localName"], [406, 7, 1, "", "name"], [406, 7, 1, "", "prefix"], [406, 7, 1, "", "value"]], "xml.dom.Comment": [[406, 7, 1, "", "data"]], "xml.dom": [[406, 6, 1, "", "DOMException"], [406, 6, 1, "", "DomstringSizeErr"], [406, 9, 1, "", "EMPTY_NAMESPACE"], [406, 6, 1, "", "HierarchyRequestErr"], [406, 6, 1, "", "IndexSizeErr"], [406, 6, 1, "", "InuseAttributeErr"], [406, 6, 1, "", "InvalidAccessErr"], [406, 6, 1, "", "InvalidCharacterErr"], [406, 6, 1, "", "InvalidModificationErr"], [406, 6, 1, "", "InvalidStateErr"], [406, 6, 1, "", "NamespaceErr"], [406, 6, 1, "", "NoDataAllowedErr"], [406, 6, 1, "", "NoModificationAllowedErr"], [406, 6, 1, "", "NotFoundErr"], [406, 6, 1, "", "NotSupportedErr"], [406, 6, 1, "", "SyntaxErr"], [406, 6, 1, "", "WrongDocumentErr"], [406, 9, 1, "", "XHTML_NAMESPACE"], [406, 9, 1, "", "XMLNS_NAMESPACE"], [406, 9, 1, "", "XML_NAMESPACE"], [406, 11, 1, "", "getDOMImplementation"], [407, 10, 0, "-", "minidom"], [408, 10, 0, "-", "pulldom"], [406, 11, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[406, 8, 1, "", "createDocument"], [406, 8, 1, "", "createDocumentType"], [406, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[406, 8, 1, "", "createAttribute"], [406, 8, 1, "", "createAttributeNS"], [406, 8, 1, "", "createComment"], [406, 8, 1, "", "createElement"], [406, 8, 1, "", "createElementNS"], [406, 8, 1, "", "createProcessingInstruction"], [406, 8, 1, "", "createTextNode"], [406, 7, 1, "", "documentElement"], [406, 8, 1, "", "getElementsByTagName"], [406, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[406, 7, 1, "", "entities"], [406, 7, 1, "", "internalSubset"], [406, 7, 1, "", "name"], [406, 7, 1, "", "notations"], [406, 7, 1, "", "publicId"], [406, 7, 1, "", "systemId"]], "xml.dom.Element": [[406, 8, 1, "", "getAttribute"], [406, 8, 1, "", "getAttributeNS"], [406, 8, 1, "", "getAttributeNode"], [406, 8, 1, "", "getAttributeNodeNS"], [406, 8, 1, "", "getElementsByTagName"], [406, 8, 1, "", "getElementsByTagNameNS"], [406, 8, 1, "", "hasAttribute"], [406, 8, 1, "", "hasAttributeNS"], [406, 8, 1, "", "removeAttribute"], [406, 8, 1, "", "removeAttributeNS"], [406, 8, 1, "", "removeAttributeNode"], [406, 8, 1, "", "setAttribute"], [406, 8, 1, "", "setAttributeNS"], [406, 8, 1, "", "setAttributeNode"], [406, 8, 1, "", "setAttributeNodeNS"], [406, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[406, 8, 1, "", "item"], [406, 7, 1, "", "length"]], "xml.dom.Node": [[406, 8, 1, "", "appendChild"], [406, 7, 1, "", "attributes"], [406, 7, 1, "", "childNodes"], [406, 8, 1, "", "cloneNode"], [406, 7, 1, "", "firstChild"], [406, 8, 1, "", "hasAttributes"], [406, 8, 1, "", "hasChildNodes"], [406, 8, 1, "", "insertBefore"], [406, 8, 1, "", "isSameNode"], [406, 7, 1, "", "lastChild"], [406, 7, 1, "", "localName"], [406, 7, 1, "", "namespaceURI"], [406, 7, 1, "", "nextSibling"], [406, 7, 1, "", "nodeName"], [406, 7, 1, "", "nodeType"], [406, 7, 1, "", "nodeValue"], [406, 8, 1, "", "normalize"], [406, 7, 1, "", "parentNode"], [406, 7, 1, "", "prefix"], [406, 7, 1, "", "previousSibling"], [406, 8, 1, "", "removeChild"], [406, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[406, 8, 1, "", "item"], [406, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[406, 7, 1, "", "data"], [406, 7, 1, "", "target"]], "xml.dom.Text": [[406, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[407, 8, 1, "", "toprettyxml"], [407, 8, 1, "", "toxml"], [407, 8, 1, "", "unlink"], [407, 8, 1, "", "writexml"]], "xml.dom.minidom": [[407, 11, 1, "", "parse"], [407, 11, 1, "", "parseString"]], "xml.dom.pulldom": [[408, 12, 1, "", "DOMEventStream"], [408, 12, 1, "", "PullDom"], [408, 12, 1, "", "SAX2DOM"], [408, 9, 1, "", "default_bufsize"], [408, 11, 1, "", "parse"], [408, 11, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[408, 8, 1, "", "expandNode"], [408, 8, 1, "", "getEvent"], [408, 8, 1, "", "reset"]], "xml.etree.ElementInclude": [[409, 11, 1, "", "default_loader"], [409, 11, 1, "", "include"]], "xml.etree": [[409, 10, 0, "-", "ElementTree"]], "xml.etree.ElementTree": [[409, 12, 1, "", "C14NWriterTarget"], [409, 11, 1, "", "Comment"], [409, 12, 1, "", "Element"], [409, 12, 1, "", "ElementTree"], [409, 12, 1, "", "ParseError"], [409, 11, 1, "", "ProcessingInstruction"], [409, 12, 1, "", "QName"], [409, 11, 1, "", "SubElement"], [409, 12, 1, "", "TreeBuilder"], [409, 11, 1, "", "XML"], [409, 11, 1, "", "XMLID"], [409, 12, 1, "", "XMLParser"], [409, 12, 1, "", "XMLPullParser"], [409, 11, 1, "", "canonicalize"], [409, 11, 1, "", "dump"], [409, 11, 1, "", "fromstring"], [409, 11, 1, "", "fromstringlist"], [409, 11, 1, "", "indent"], [409, 11, 1, "", "iselement"], [409, 11, 1, "", "iterparse"], [409, 11, 1, "", "parse"], [409, 11, 1, "", "register_namespace"], [409, 11, 1, "", "tostring"], [409, 11, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[409, 8, 1, "", "append"], [409, 7, 1, "", "attrib"], [409, 8, 1, "", "clear"], [409, 8, 1, "", "extend"], [409, 8, 1, "", "find"], [409, 8, 1, "", "findall"], [409, 8, 1, "", "findtext"], [409, 8, 1, "", "get"], [409, 8, 1, "", "insert"], [409, 8, 1, "", "items"], [409, 8, 1, "", "iter"], [409, 8, 1, "", "iterfind"], [409, 8, 1, "", "itertext"], [409, 8, 1, "", "keys"], [409, 8, 1, "", "makeelement"], [409, 8, 1, "", "remove"], [409, 8, 1, "", "set"], [409, 7, 1, "", "tag"], [409, 7, 1, "", "tail"], [409, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[409, 8, 1, "", "_setroot"], [409, 8, 1, "", "find"], [409, 8, 1, "", "findall"], [409, 8, 1, "", "findtext"], [409, 8, 1, "", "getroot"], [409, 8, 1, "", "iter"], [409, 8, 1, "", "iterfind"], [409, 8, 1, "", "parse"], [409, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[409, 7, 1, "", "code"], [409, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[409, 8, 1, "", "close"], [409, 8, 1, "", "comment"], [409, 8, 1, "", "data"], [409, 8, 1, "", "doctype"], [409, 8, 1, "", "end"], [409, 8, 1, "", "end_ns"], [409, 8, 1, "", "pi"], [409, 8, 1, "", "start"], [409, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[409, 8, 1, "", "close"], [409, 8, 1, "", "feed"]], "xml.etree.ElementTree.XMLPullParser": [[409, 8, 1, "", "close"], [409, 8, 1, "", "feed"], [409, 8, 1, "", "read_events"]], "xml.parsers": [[311, 10, 0, "-", "expat"]], "xml.parsers.expat": [[311, 11, 1, "", "ErrorString"], [311, 6, 1, "", "ExpatError"], [311, 11, 1, "", "ParserCreate"], [311, 9, 1, "", "XMLParserType"], [311, 6, 1, "", "error"], [311, 10, 0, "-", "errors"], [311, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[311, 7, 1, "", "code"], [311, 7, 1, "", "lineno"], [311, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[311, 9, 1, "", "XML_ERROR_ABORTED"], [311, 9, 1, "", "XML_ERROR_AMPLIFICATION_LIMIT_BREACH"], [311, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [311, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [311, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [311, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [311, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [311, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [311, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [311, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [311, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [311, 9, 1, "", "XML_ERROR_FINISHED"], [311, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [311, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [311, 9, 1, "", "XML_ERROR_INVALID_ARGUMENT"], [311, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [311, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [311, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [311, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [311, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [311, 9, 1, "", "XML_ERROR_NO_BUFFER"], [311, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [311, 9, 1, "", "XML_ERROR_NO_MEMORY"], [311, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [311, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [311, 9, 1, "", "XML_ERROR_PUBLICID"], [311, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [311, 9, 1, "", "XML_ERROR_RESERVED_NAMESPACE_URI"], [311, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XML"], [311, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XMLNS"], [311, 9, 1, "", "XML_ERROR_SUSPENDED"], [311, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [311, 9, 1, "", "XML_ERROR_SYNTAX"], [311, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [311, 9, 1, "", "XML_ERROR_TEXT_DECL"], [311, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [311, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [311, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [311, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [311, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [311, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [311, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [311, 9, 1, "", "XML_ERROR_XML_DECL"], [311, 9, 1, "", "codes"], [311, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[311, 8, 1, "", "AttlistDeclHandler"], [311, 8, 1, "", "CharacterDataHandler"], [311, 8, 1, "", "CommentHandler"], [311, 7, 1, "", "CurrentByteIndex"], [311, 7, 1, "", "CurrentColumnNumber"], [311, 7, 1, "", "CurrentLineNumber"], [311, 8, 1, "", "DefaultHandler"], [311, 8, 1, "", "DefaultHandlerExpand"], [311, 8, 1, "", "ElementDeclHandler"], [311, 8, 1, "", "EndCdataSectionHandler"], [311, 8, 1, "", "EndDoctypeDeclHandler"], [311, 8, 1, "", "EndElementHandler"], [311, 8, 1, "", "EndNamespaceDeclHandler"], [311, 8, 1, "", "EntityDeclHandler"], [311, 7, 1, "", "ErrorByteIndex"], [311, 7, 1, "", "ErrorCode"], [311, 7, 1, "", "ErrorColumnNumber"], [311, 7, 1, "", "ErrorLineNumber"], [311, 8, 1, "", "ExternalEntityParserCreate"], [311, 8, 1, "", "ExternalEntityRefHandler"], [311, 8, 1, "", "GetBase"], [311, 8, 1, "", "GetInputContext"], [311, 8, 1, "", "NotStandaloneHandler"], [311, 8, 1, "", "NotationDeclHandler"], [311, 8, 1, "", "Parse"], [311, 8, 1, "", "ParseFile"], [311, 8, 1, "", "ProcessingInstructionHandler"], [311, 8, 1, "", "SetBase"], [311, 8, 1, "", "SetParamEntityParsing"], [311, 8, 1, "", "StartCdataSectionHandler"], [311, 8, 1, "", "StartDoctypeDeclHandler"], [311, 8, 1, "", "StartElementHandler"], [311, 8, 1, "", "StartNamespaceDeclHandler"], [311, 8, 1, "", "UnparsedEntityDeclHandler"], [311, 8, 1, "", "UseForeignDTD"], [311, 8, 1, "", "XmlDeclHandler"], [311, 7, 1, "", "buffer_size"], [311, 7, 1, "", "buffer_text"], [311, 7, 1, "", "buffer_used"], [311, 7, 1, "", "ordered_attributes"], [311, 7, 1, "", "specified_attributes"]], "xml.sax": [[410, 6, 1, "", "SAXException"], [410, 6, 1, "", "SAXNotRecognizedException"], [410, 6, 1, "", "SAXNotSupportedException"], [410, 6, 1, "", "SAXParseException"], [411, 10, 0, "-", "handler"], [410, 11, 1, "", "make_parser"], [410, 11, 1, "", "parse"], [410, 11, 1, "", "parseString"], [413, 10, 0, "-", "saxutils"], [412, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[410, 8, 1, "", "getException"], [410, 8, 1, "", "getMessage"]], "xml.sax.handler": [[411, 12, 1, "", "ContentHandler"], [411, 12, 1, "", "DTDHandler"], [411, 12, 1, "", "EntityResolver"], [411, 12, 1, "", "ErrorHandler"], [411, 12, 1, "", "LexicalHandler"], [411, 9, 1, "", "all_features"], [411, 9, 1, "", "all_properties"], [411, 9, 1, "", "feature_external_ges"], [411, 9, 1, "", "feature_external_pes"], [411, 9, 1, "", "feature_namespace_prefixes"], [411, 9, 1, "", "feature_namespaces"], [411, 9, 1, "", "feature_string_interning"], [411, 9, 1, "", "feature_validation"], [411, 9, 1, "", "property_declaration_handler"], [411, 9, 1, "", "property_dom_node"], [411, 9, 1, "", "property_lexical_handler"], [411, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[411, 8, 1, "", "characters"], [411, 8, 1, "", "endDocument"], [411, 8, 1, "", "endElement"], [411, 8, 1, "", "endElementNS"], [411, 8, 1, "", "endPrefixMapping"], [411, 8, 1, "", "ignorableWhitespace"], [411, 8, 1, "", "processingInstruction"], [411, 8, 1, "", "setDocumentLocator"], [411, 8, 1, "", "skippedEntity"], [411, 8, 1, "", "startDocument"], [411, 8, 1, "", "startElement"], [411, 8, 1, "", "startElementNS"], [411, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[411, 8, 1, "", "notationDecl"], [411, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[411, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[411, 8, 1, "", "error"], [411, 8, 1, "", "fatalError"], [411, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[411, 8, 1, "", "comment"], [411, 8, 1, "", "endCDATA"], [411, 8, 1, "", "endDTD"], [411, 8, 1, "", "startCDATA"], [411, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[413, 12, 1, "", "XMLFilterBase"], [413, 12, 1, "", "XMLGenerator"], [413, 11, 1, "", "escape"], [413, 11, 1, "", "prepare_input_source"], [413, 11, 1, "", "quoteattr"], [413, 11, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[412, 8, 1, "", "getLength"], [412, 8, 1, "", "getNames"], [412, 8, 1, "", "getType"], [412, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[412, 12, 1, "", "AttributesImpl"], [412, 12, 1, "", "AttributesNSImpl"], [412, 12, 1, "", "IncrementalParser"], [412, 12, 1, "", "InputSource"], [412, 12, 1, "", "Locator"], [412, 12, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[412, 8, 1, "", "getNameByQName"], [412, 8, 1, "", "getQNameByName"], [412, 8, 1, "", "getQNames"], [412, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[412, 8, 1, "", "close"], [412, 8, 1, "", "feed"], [412, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[412, 8, 1, "", "getByteStream"], [412, 8, 1, "", "getCharacterStream"], [412, 8, 1, "", "getEncoding"], [412, 8, 1, "", "getPublicId"], [412, 8, 1, "", "getSystemId"], [412, 8, 1, "", "setByteStream"], [412, 8, 1, "", "setCharacterStream"], [412, 8, 1, "", "setEncoding"], [412, 8, 1, "", "setPublicId"], [412, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[412, 8, 1, "", "getColumnNumber"], [412, 8, 1, "", "getLineNumber"], [412, 8, 1, "", "getPublicId"], [412, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[412, 8, 1, "", "getContentHandler"], [412, 8, 1, "", "getDTDHandler"], [412, 8, 1, "", "getEntityResolver"], [412, 8, 1, "", "getErrorHandler"], [412, 8, 1, "", "getFeature"], [412, 8, 1, "", "getProperty"], [412, 8, 1, "", "parse"], [412, 8, 1, "", "setContentHandler"], [412, 8, 1, "", "setDTDHandler"], [412, 8, 1, "", "setEntityResolver"], [412, 8, 1, "", "setErrorHandler"], [412, 8, 1, "", "setFeature"], [412, 8, 1, "", "setLocale"], [412, 8, 1, "", "setProperty"]], "xmlrpc": [[415, 10, 0, "-", "client"], [416, 10, 0, "-", "server"]], "xmlrpc.client": [[415, 12, 1, "", "Binary"], [415, 12, 1, "", "DateTime"], [415, 12, 1, "", "Fault"], [415, 12, 1, "", "MultiCall"], [415, 12, 1, "", "ProtocolError"], [415, 12, 1, "", "ServerProxy"], [415, 11, 1, "", "dumps"], [415, 11, 1, "", "loads"]], "xmlrpc.client.Binary": [[415, 7, 1, "", "data"], [415, 8, 1, "", "decode"], [415, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[415, 8, 1, "", "decode"], [415, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[415, 7, 1, "", "faultCode"], [415, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[415, 7, 1, "", "errcode"], [415, 7, 1, "", "errmsg"], [415, 7, 1, "", "headers"], [415, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[415, 8, 1, "", "listMethods"], [415, 8, 1, "", "methodHelp"], [415, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[416, 12, 1, "", "CGIXMLRPCRequestHandler"], [416, 12, 1, "", "DocCGIXMLRPCRequestHandler"], [416, 12, 1, "", "DocXMLRPCRequestHandler"], [416, 12, 1, "", "DocXMLRPCServer"], [416, 12, 1, "", "SimpleXMLRPCRequestHandler"], [416, 12, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[416, 8, 1, "", "handle_request"], [416, 8, 1, "", "register_function"], [416, 8, 1, "", "register_instance"], [416, 8, 1, "", "register_introspection_functions"], [416, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[416, 8, 1, "", "set_server_documentation"], [416, 8, 1, "", "set_server_name"], [416, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[416, 8, 1, "", "set_server_documentation"], [416, 8, 1, "", "set_server_name"], [416, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[416, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[416, 8, 1, "", "register_function"], [416, 8, 1, "", "register_instance"], [416, 8, 1, "", "register_introspection_functions"], [416, 8, 1, "", "register_multicall_functions"]], "zipapp": [[417, 11, 1, "", "create_archive"], [417, 11, 1, "", "get_interpreter"], [417, 14, 1, "cmdoption-zipapp-c", "--compress"], [417, 14, 1, "cmdoption-zipapp-h", "--help"], [417, 14, 1, "cmdoption-zipapp-info", "--info"], [417, 14, 1, "cmdoption-zipapp-m", "--main"], [417, 14, 1, "cmdoption-zipapp-o", "--output"], [417, 14, 1, "cmdoption-zipapp-p", "--python"], [417, 14, 1, "cmdoption-zipapp-c", "-c"], [417, 14, 1, "cmdoption-zipapp-h", "-h"], [417, 14, 1, "cmdoption-zipapp-m", "-m"], [417, 14, 1, "cmdoption-zipapp-o", "-o"], [417, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[418, 6, 1, "", "BadZipFile"], [418, 6, 1, "", "BadZipfile"], [418, 6, 1, "", "LargeZipFile"], [418, 12, 1, "", "Path"], [418, 12, 1, "", "PyZipFile"], [418, 9, 1, "", "ZIP_BZIP2"], [418, 9, 1, "", "ZIP_DEFLATED"], [418, 9, 1, "", "ZIP_LZMA"], [418, 9, 1, "", "ZIP_STORED"], [418, 12, 1, "", "ZipFile"], [418, 12, 1, "", "ZipInfo"], [418, 11, 1, "", "is_zipfile"], [418, 14, 1, "cmdoption-zipfile-create", "--create"], [418, 14, 1, "cmdoption-zipfile-extract", "--extract"], [418, 14, 1, "cmdoption-zipfile-list", "--list"], [418, 14, 1, "cmdoption-zipfile-metadata-encoding", "--metadata-encoding"], [418, 14, 1, "cmdoption-zipfile-test", "--test"], [418, 14, 1, "cmdoption-zipfile-c", "-c"], [418, 14, 1, "cmdoption-zipfile-e", "-e"], [418, 14, 1, "cmdoption-zipfile-l", "-l"], [418, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[418, 8, 1, "", "exists"], [418, 8, 1, "", "is_dir"], [418, 8, 1, "", "is_file"], [418, 8, 1, "", "iterdir"], [418, 8, 1, "", "joinpath"], [418, 7, 1, "", "name"], [418, 8, 1, "", "open"], [418, 8, 1, "", "read_bytes"], [418, 8, 1, "", "read_text"], [418, 9, 1, "", "stem"], [418, 9, 1, "", "suffix"], [418, 9, 1, "", "suffixes"]], "zipfile.PyZipFile": [[418, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[418, 8, 1, "", "close"], [418, 7, 1, "", "comment"], [418, 7, 1, "", "debug"], [418, 8, 1, "", "extract"], [418, 8, 1, "", "extractall"], [418, 7, 1, "", "filename"], [418, 8, 1, "", "getinfo"], [418, 8, 1, "", "infolist"], [418, 8, 1, "", "mkdir"], [418, 8, 1, "", "namelist"], [418, 8, 1, "", "open"], [418, 8, 1, "", "printdir"], [418, 8, 1, "", "read"], [418, 8, 1, "", "setpassword"], [418, 8, 1, "", "testzip"], [418, 8, 1, "", "write"], [418, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[418, 7, 1, "", "CRC"], [418, 7, 1, "", "comment"], [418, 7, 1, "", "compress_size"], [418, 7, 1, "", "compress_type"], [418, 7, 1, "", "create_system"], [418, 7, 1, "", "create_version"], [418, 7, 1, "", "date_time"], [418, 7, 1, "", "external_attr"], [418, 7, 1, "", "extra"], [418, 7, 1, "", "extract_version"], [418, 7, 1, "", "file_size"], [418, 7, 1, "", "filename"], [418, 7, 1, "", "flag_bits"], [418, 8, 1, "", "from_file"], [418, 7, 1, "", "header_offset"], [418, 7, 1, "", "internal_attr"], [418, 8, 1, "", "is_dir"], [418, 7, 1, "", "reserved"], [418, 7, 1, "", "volume"]], "zipimport": [[419, 6, 1, "", "ZipImportError"], [419, 12, 1, "", "zipimporter"]], "zipimport.zipimporter": [[419, 7, 1, "", "archive"], [419, 8, 1, "", "create_module"], [419, 8, 1, "", "exec_module"], [419, 8, 1, "", "find_spec"], [419, 8, 1, "", "get_code"], [419, 8, 1, "", "get_data"], [419, 8, 1, "", "get_filename"], [419, 8, 1, "", "get_source"], [419, 8, 1, "", "invalidate_caches"], [419, 8, 1, "", "is_package"], [419, 8, 1, "", "load_module"], [419, 7, 1, "", "prefix"]], "zlib.Compress": [[420, 8, 1, "", "compress"], [420, 8, 1, "", "copy"], [420, 8, 1, "", "flush"]], "zlib.Decompress": [[420, 8, 1, "", "copy"], [420, 8, 1, "", "decompress"], [420, 7, 1, "", "eof"], [420, 8, 1, "", "flush"], [420, 7, 1, "", "unconsumed_tail"], [420, 7, 1, "", "unused_data"]], "zlib": [[420, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [420, 9, 1, "", "ZLIB_VERSION"], [420, 11, 1, "", "adler32"], [420, 11, 1, "", "compress"], [420, 11, 1, "", "compressobj"], [420, 11, 1, "", "crc32"], [420, 11, 1, "", "decompress"], [420, 11, 1, "", "decompressobj"], [420, 6, 1, "", "error"]], "zoneinfo": [[421, 6, 1, "", "InvalidTZPathWarning"], [421, 9, 1, "", "TZPATH"], [421, 12, 1, "", "ZoneInfo"], [421, 6, 1, "", "ZoneInfoNotFoundError"], [421, 11, 1, "", "available_timezones"], [421, 11, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[421, 8, 1, "", "clear_cache"], [421, 8, 1, "", "from_file"], [421, 7, 1, "", "key"], [421, 8, 1, "", "no_cache"]], "./Tools/clinic/clinic.py-[-h]-[-f]-[-o-OUTPUT]-[-v]-\\-[--converters]-[--make]-[--srcdir-SRCDIR]-[FILE-...]": [[89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters", "--converters"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f", "--force"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h", "--help"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make", "--make"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o", "--output"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir", "--srcdir"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v", "--verbose"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f", "-f"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h", "-h"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o", "-o"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v", "-v"], [89, 14, 1, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE", "FILE"]], "json.tool": [[259, 14, 1, "cmdoption-json.tool-indent", "--compact"], [259, 14, 1, "cmdoption-json.tool-h", "--help"], [259, 14, 1, "cmdoption-json.tool-indent", "--indent"], [259, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [259, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [259, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [259, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [259, 14, 1, "cmdoption-json.tool-indent", "--tab"], [259, 14, 1, "cmdoption-json.tool-h", "-h"], [259, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [259, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[308, 14, 1, "cmdoption-python-m-py_compile", "-"], [308, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [308, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [308, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql]": [[337, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "--help"], [337, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "--version"], [337, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "-h"], [337, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "-v"]], "unittest-discover": [[384, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [384, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [384, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [384, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [384, 14, 1, "cmdoption-unittest-discover-p", "-p"], [384, 14, 1, "cmdoption-unittest-discover-s", "-s"], [384, 14, 1, "cmdoption-unittest-discover-t", "-t"], [384, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:function", "12": "py:class", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:envvar", "16": "std:opcode", "17": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "function", "Python \u51fd\u5f0f"], "12": ["py", "class", "Python \u985e\u5225"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "16": ["std", "opcode", "opcode"], "17": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 31, 32, 33, 34, 41, 67, 69, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 94, 95, 101, 102, 106, 108, 109, 110, 112, 155, 156, 160, 173, 177, 185, 188, 190, 211, 251, 260, 261, 263, 264, 271, 290, 294, 296, 305, 308, 309, 312, 321, 327, 330, 337, 350, 351, 354, 358, 363, 365, 373, 374, 376, 380, 417, 422, 429, 433, 434, 436, 441, 444, 445, 446, 447, 448, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "bug": [1, 32, 84, 372], "abstract": [2, 74, 98, 120, 158, 247, 250, 464], "object": [2, 8, 9, 17, 23, 24, 26, 27, 41, 43, 48, 49, 54, 55, 57, 59, 60, 62, 63, 74, 78, 83, 84, 87, 92, 93, 97, 98, 99, 100, 118, 124, 130, 137, 154, 172, 174, 176, 180, 183, 187, 200, 203, 205, 223, 232, 252, 256, 259, 264, 265, 278, 280, 290, 292, 293, 296, 298, 309, 316, 318, 320, 322, 325, 327, 335, 337, 338, 341, 345, 355, 361, 380, 382, 385, 386, 391, 394, 398, 399, 401, 404, 406, 409, 412, 415, 418, 424, 461, 462, 464, 465, 469, 472, 473], "layer": [2, 65, 107, 474], "heap": [3, 60, 62, 98, 233], "api": [4, 5, 8, 10, 14, 31, 32, 33, 41, 56, 72, 85, 93, 113, 121, 122, 124, 128, 164, 190, 193, 204, 207, 227, 248, 296, 337, 341, 345, 378, 395, 406, 409, 417, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "abi": [4, 56, 468, 471, 477], "pars": [5, 118, 204, 289, 301, 311, 328, 373, 390, 409, 465, 468, 471, 476, 478], "argument": [5, 84, 88, 89, 118, 173, 289, 290, 345, 386, 424, 437, 457, 473, 475], "string": [5, 63, 77, 83, 84, 93, 103, 106, 256, 289, 316, 341, 342, 343, 344, 345, 421, 431, 437, 442, 458, 461, 462, 464, 466, 469, 470, 472, 475, 476, 477, 478], "and": [5, 7, 23, 25, 32, 57, 63, 70, 71, 72, 74, 75, 76, 78, 84, 87, 89, 91, 92, 93, 94, 96, 98, 100, 103, 105, 106, 107, 108, 118, 120, 123, 124, 126, 130, 131, 137, 144, 149, 152, 155, 158, 166, 172, 173, 180, 183, 191, 196, 203, 208, 212, 213, 223, 227, 232, 240, 244, 247, 249, 252, 253, 256, 257, 259, 263, 265, 267, 272, 280, 289, 290, 293, 296, 301, 305, 310, 316, 321, 325, 329, 330, 334, 337, 338, 341, 344, 354, 360, 361, 362, 365, 367, 378, 380, 381, 382, 384, 385, 386, 397, 403, 406, 407, 409, 415, 421, 424, 425, 426, 428, 431, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "buffer": [5, 7, 47, 62, 100, 131, 252, 255, 296, 317, 424, 470, 472, 477], "build": [5, 70, 72, 76, 108, 382, 408, 409, 452, 459, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "valu": [5, 72, 83, 84, 89, 93, 94, 118, 164, 173, 178, 183, 259, 289, 337, 386, 401, 423, 424, 426], "boolean": [6, 93, 289, 341, 426, 461], "protocol": [7, 10, 39, 46, 47, 48, 53, 74, 92, 98, 131, 164, 239, 245, 253, 302, 332, 338, 384, 428, 470, 472, 474, 475, 477], "structur": [7, 62, 100, 164, 173, 270, 382, 390, 425, 431], "request": [7, 335, 389, 391, 475], "type": [7, 8, 57, 60, 62, 63, 74, 75, 93, 94, 98, 102, 106, 118, 120, 173, 178, 180, 208, 252, 273, 289, 296, 337, 341, 365, 371, 381, 382, 401, 403, 406, 423, 424, 432, 460, 461, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "independ": [7, 462], "field": [7, 173, 178, 382, 468], "readon": 7, "format": [7, 99, 100, 172, 180, 244, 265, 268, 280, 296, 341, 342, 344, 354, 417, 431, 442, 448, 464, 465, 466, 467, 474, 475], "shape": [7, 380], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 380, 423], "complex": [7, 152, 341, 386], "array": [7, 8, 84, 119, 145, 173, 259, 468, 470, 472, 475], "numpi": 7, "style": [7, 84, 100, 225, 341, 357, 372, 437, 463], "pil": 7, "relat": [7, 107, 148, 247, 428, 460, 463, 464, 470], "function": [7, 8, 25, 27, 44, 57, 63, 72, 84, 89, 92, 93, 94, 98, 103, 105, 118, 120, 148, 152, 160, 166, 169, 173, 178, 188, 223, 248, 252, 256, 258, 264, 265, 272, 279, 285, 296, 315, 316, 320, 337, 342, 345, 380, 381, 384, 386, 396, 415, 423, 426, 437, 458, 459, 462, 463, 464, 466, 472, 474, 475, 476], "byte": [8, 9, 106, 160, 173, 341, 344, 390, 431, 464, 474], "check": [8, 84, 102, 190, 247, 289, 316, 386, 403, 424, 478], "macro": [8, 57], "direct": [8, 124, 190, 247, 281, 382, 459], "call": [10, 72, 84, 89, 94, 173, 212, 289, 385, 386, 426, 474, 477], "tp_call": 10, "vectorcal": [10, 477], "capsul": [11, 465], "cell": [12, 174], "extra": 13, "inform": [13, 91, 100, 278, 290, 319, 351], "unicod": [14, 23, 63, 106, 155, 354, 383, 458, 460, 461, 466, 471, 472], "context": [17, 100, 133, 166, 167, 183, 190, 210, 244, 280, 337, 338, 341, 386, 396, 424, 462, 463, 464, 472], "variabl": [17, 32, 84, 89, 99, 120, 166, 167, 173, 178, 232, 289, 290, 351, 365, 457, 465, 475], "coroutin": [19, 137, 252, 381, 423, 424, 474], "datetim": [20, 180, 469, 471, 472, 475, 476, 477, 478], "descriptor": [21, 92, 124, 178, 185, 211, 290, 385, 424, 460, 473, 475], "print": [23, 118, 289, 377, 464, 466], "clear": 23, "rais": [23, 84, 99, 289, 386, 432], "except": [23, 72, 84, 99, 100, 107, 118, 166, 190, 196, 210, 256, 289, 316, 330, 386, 421, 423, 439, 463, 464, 465, 466, 469, 472], "issu": [23, 98, 211, 354, 457, 464], "warn": [23, 190, 264, 358, 396, 421, 459, 465, 469, 475, 476], "queri": [23, 28, 289, 290, 329, 337], "the": [23, 28, 32, 41, 65, 72, 75, 83, 84, 87, 88, 89, 91, 94, 96, 98, 99, 100, 101, 102, 103, 106, 108, 112, 118, 124, 130, 149, 173, 185, 190, 193, 207, 211, 212, 213, 227, 230, 248, 252, 264, 267, 279, 280, 289, 290, 293, 294, 305, 329, 334, 337, 341, 345, 348, 350, 358, 361, 365, 378, 380, 382, 385, 386, 396, 406, 407, 409, 412, 417, 421, 423, 424, 426, 428, 432, 452, 457, 460, 461, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478], "error": [23, 72, 84, 107, 124, 155, 183, 185, 196, 278, 289, 311, 354, 389, 439, 440, 461, 470], "indic": 23, "signal": [23, 83, 124, 183, 211, 330, 384, 472, 474, 476, 478], "handl": [23, 100, 107, 124, 133, 174, 191, 240, 269, 289, 296, 338, 384, 401, 461, 464, 465, 473, 474], "recurs": 23, "control": [23, 28, 75, 120, 337, 357, 380, 396, 399], "standard": [23, 84, 108, 155, 186, 209, 251, 259, 289, 341, 344, 372, 381, 407, 428, 461, 478], "categori": [23, 396], "file": [24, 34, 63, 84, 89, 99, 100, 102, 106, 108, 118, 124, 147, 164, 185, 186, 190, 211, 213, 231, 232, 244, 247, 248, 255, 265, 267, 269, 275, 279, 290, 301, 303, 308, 317, 329, 350, 354, 365, 371, 397, 409, 418, 447, 452, 457, 461, 471, 473, 474, 475, 476, 477], "float": [25, 183, 341, 431, 462], "point": [25, 93, 183, 248, 431], "pack": [25, 344], "unpack": [25, 404, 437, 474], "frame": [26, 378, 469, 475], "intern": [26, 265, 341], "support": [28, 32, 40, 44, 49, 50, 63, 74, 75, 93, 94, 100, 101, 102, 106, 126, 147, 153, 164, 166, 167, 169, 208, 227, 231, 235, 253, 275, 309, 338, 354, 358, 367, 382, 385, 408, 409, 410, 458, 461, 464, 473, 474, 475, 476, 477, 478], "cyclic": [28, 75], "garbag": [28, 75, 98, 224, 458], "collect": [28, 75, 98, 157, 158, 188, 382, 458, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478], "collector": [28, 224], "state": [28, 32, 98, 211, 241, 252, 280, 296, 354, 372, 380], "generat": [29, 77, 89, 94, 198, 252, 289, 301, 310, 338, 341, 348, 358, 386, 426, 436, 460, 461, 462, 463, 474, 475], "initi": [32, 33, 44, 72, 350, 474, 477], "final": [32, 74, 166, 398, 423, 463, 473, 479], "thread": [32, 83, 100, 113, 124, 137, 183, 255, 264, 330, 358, 361, 365, 448, 468, 469, 470, 471, 472, 473, 474, 476, 477], "befor": 32, "global": [32, 83, 84, 98, 296, 421, 432], "configur": [32, 33, 99, 100, 108, 164, 265, 331, 341, 351, 380, 421, 452, 465, 471, 477], "interpret": [32, 98, 153, 154, 177, 252, 339, 344, 381, 417, 460, 463, 464, 465, 470], "process": [32, 58, 98, 100, 124, 130, 178, 270, 280, 281, 290, 338, 359, 458, 464], "wide": 32, "paramet": [32, 72, 84, 89, 100, 120, 172, 173, 178, 290, 365, 382, 423, 437, 470, 477], "lock": [32, 136, 361, 472], "releas": [32, 465, 472, 473, 474, 475, 476, 477, 478, 479], "gil": [32, 470], "from": [32, 72, 78, 83, 84, 92, 98, 99, 100, 137, 152, 166, 173, 203, 215, 279, 345, 380, 386, 418, 419, 457, 461, 464], "extens": [32, 57, 70, 72, 74, 75, 76, 98, 108, 109, 176, 244, 263, 299, 452, 472, 474], "code": [32, 84, 89, 106, 107, 112, 118, 124, 154, 156, 180, 244, 247, 252, 341, 384, 396, 437, 457, 461, 469, 471, 472, 474, 478], "non": [32, 103, 104, 108, 259, 338, 409, 473], "creat": [32, 60, 63, 78, 83, 84, 93, 94, 97, 100, 124, 137, 203, 232, 258, 289, 337, 386, 417, 424, 473], "caution": 32, "about": [32, 84, 149, 190, 458], "fork": 32, "sub": [32, 62, 118], "per": [32, 98, 464, 470], "caveat": [32, 263, 417], "asynchron": [32, 252, 330, 335, 382, 386, 424, 426, 475], "notif": [32, 92], "profil": [32, 101, 305], "trace": [32, 376, 378], "advanc": [32, 88, 89, 99, 190, 464], "debugg": [32, 142, 294], "local": [32, 63, 227, 263, 361, 457, 462, 468, 469, 474, 475, 476], "storag": [32, 476], "specif": [32, 74, 94, 155, 331, 342, 372, 380, 401, 461, 462, 463, 464, 465], "tss": 32, "dynam": [32, 92, 173, 381, 425], "alloc": [32, 41, 60, 74, 378, 461, 473], "tls": [32, 124, 338], "pywidestringlist": 33, "pystatus": 33, "pypreconfig": 33, "preiniti": 33, "with": [33, 70, 77, 78, 83, 84, 91, 93, 96, 97, 98, 100, 124, 135, 155, 166, 173, 183, 211, 240, 252, 264, 296, 328, 329, 337, 345, 361, 373, 382, 386, 398, 409, 417, 418, 423, 424, 425, 463, 464, 472, 474, 476, 477], "pyconfig": 33, "isol": [33, 98], "path": [33, 108, 247, 291, 293, 350, 351, 418, 428, 457, 468, 470, 475, 477], "py_runmain": 33, "py_getargcargv": 33, "multi": [33, 44, 255, 338, 448, 462, 471, 474], "phase": [33, 44, 474], "privat": [33, 126], "provision": [33, 472], "includ": 34, "iter": [36, 84, 93, 94, 201, 215, 256, 258, 341, 384, 386, 424, 426, 436, 460, 462, 466, 474], "list": [37, 77, 84, 94, 97, 145, 317, 341, 423, 426, 437, 438, 445, 448, 458, 464, 466], "map": [39, 50, 62, 63, 164, 248, 273, 275, 341, 406, 423], "data": [40, 75, 84, 93, 94, 99, 102, 106, 107, 143, 173, 178, 208, 267, 295, 296, 304, 344, 361, 365, 421, 424, 448, 457, 462, 466, 469, 477], "marshal": [40, 271, 296, 473], "domain": [41, 155], "raw": [41, 63, 84, 255, 316], "memori": [41, 267, 275, 281, 338, 341, 378, 473, 474], "interfac": [41, 77, 78, 89, 97, 149, 181, 187, 207, 224, 231, 252, 256, 259, 290, 297, 308, 317, 331, 334, 337, 354, 358, 363, 364, 365, 376, 384, 391, 402, 412, 418, 471], "default": [41, 84, 89, 118, 178, 289, 337, 338, 354, 385, 396, 418, 457, 465, 473], "custom": [41, 89, 92, 93, 99, 100, 108, 118, 126, 130, 164, 173, 177, 200, 256, 265, 267, 280, 296, 305, 337, 342, 424, 457, 473, 475, 476], "debug": [41, 94, 124, 149, 190, 244, 452, 465, 477], "hook": [41, 247, 317, 331, 428, 459, 461, 477], "on": [41, 76, 83, 84, 94, 97, 108, 149, 181, 211, 223, 227, 244, 330, 334, 338, 341, 345, 386, 424, 459], "pymalloc": [41, 461], "arena": 41, "tracemalloc": [41, 378, 473, 475, 476, 478], "memoryview": [42, 341, 465, 472], "instanc": [43, 84, 92, 93, 97, 178, 194, 296, 341, 424], "method": [43, 57, 63, 72, 75, 77, 78, 83, 84, 92, 93, 98, 103, 118, 124, 166, 170, 280, 285, 289, 293, 334, 337, 341, 380, 385, 386, 398, 406, 424, 426, 436, 442, 458, 462, 463, 466, 472, 474, 475, 476, 478], "modul": [44, 72, 83, 84, 91, 94, 97, 98, 99, 100, 103, 149, 165, 178, 227, 247, 256, 264, 276, 280, 293, 296, 305, 309, 321, 337, 345, 350, 365, 380, 384, 419, 424, 428, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "singl": [44, 83, 100, 166], "low": [44, 113, 334], "level": [44, 65, 71, 99, 100, 103, 112, 113, 149, 256, 259, 264, 325, 326, 329, 334, 345, 474], "creation": [44, 97, 290, 335, 338, 381, 395, 424, 475], "lookup": [44, 92, 424], "none": 45, "number": [46, 62, 84, 107, 152, 166, 218, 259, 272, 286, 290, 445, 464], "implement": [49, 57, 78, 83, 100, 124, 166, 181, 247, 259, 318, 403, 407, 424, 430, 472, 475, 476], "for": [50, 63, 72, 84, 87, 89, 91, 99, 100, 101, 106, 118, 124, 147, 152, 153, 158, 166, 173, 174, 176, 187, 208, 225, 231, 240, 247, 250, 258, 263, 264, 281, 289, 296, 297, 316, 320, 325, 330, 335, 338, 354, 358, 374, 380, 381, 382, 386, 396, 402, 403, 408, 409, 410, 411, 412, 423, 424, 426, 428, 437, 457, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "perf": [50, 101], "reflect": 52, "sequenc": [53, 59, 62, 84, 341, 345, 423, 438], "set": [54, 124, 130, 192, 244, 247, 330, 338, 341, 365, 380, 386, 426, 438, 457, 461, 462], "ellipsi": [55, 341], "base": [57, 84, 100, 108, 131, 154, 155, 158, 181, 210, 227, 247, 250, 255, 280, 361, 403, 411, 428, 464, 465, 471, 476], "access": [57, 63, 87, 93, 98, 164, 173, 248, 249, 262, 263, 265, 281, 293, 348, 351, 362, 401, 415, 424, 460, 470, 476], "attribut": [57, 74, 75, 84, 91, 92, 93, 100, 232, 252, 264, 289, 290, 337, 341, 385, 386, 412, 424, 426, 428, 459, 460, 475, 476], "of": [57, 83, 84, 87, 89, 92, 93, 94, 97, 98, 99, 100, 102, 108, 147, 164, 166, 178, 180, 181, 185, 252, 256, 276, 280, 290, 296, 329, 330, 341, 345, 350, 378, 380, 382, 386, 395, 396, 415, 418, 424, 425, 431, 452, 457, 458, 465, 466, 470, 472, 473, 474, 475, 476, 477], "member": [57, 92, 93, 252], "flag": [57, 93, 103, 108, 118, 120, 166, 190, 252, 289, 316, 452], "defin": [57, 74, 75, 84, 89, 97, 98, 265, 289, 382, 471], "getter": [57, 98], "setter": [57, 98], "tupl": [59, 77, 84, 157, 341, 382, 438], "struct": [59, 344, 472, 473, 475], "quick": [62, 118, 164, 183, 380, 385], "refer": [62, 72, 74, 84, 89, 94, 106, 173, 280, 289, 305, 337, 365, 380, 398, 403, 409, 426, 428, 448, 459], "tp": 62, "slot": [62, 63, 98], "typedef": 62, "pytypeobject": 62, "definit": [62, 92, 120, 256, 423, 436, 475], "pyobject": 62, "pyvarobject": 62, "static": [62, 84, 92, 96, 98, 102, 252, 403, 469, 470], "async": [62, 120, 423, 474], "charact": [63, 103, 174, 192, 259, 344], "properti": [63, 92, 106, 180, 293, 464], "encod": [63, 106, 155, 195, 259, 390, 431, 444, 461, 468, 475], "system": [63, 71, 149, 209, 212, 290, 310, 345, 418, 428, 452, 459, 472, 473, 474, 475], "wchar_t": 63, "built": [63, 94, 341, 381, 382, 458, 462, 476], "in": [63, 71, 72, 76, 78, 83, 84, 87, 89, 94, 99, 100, 102, 106, 112, 124, 137, 155, 166, 173, 178, 190, 244, 267, 268, 288, 289, 293, 337, 341, 361, 380, 381, 382, 406, 424, 457, 458, 459, 462, 466, 470, 473, 474, 475, 476, 477, 478], "codec": [63, 155, 461, 468, 471, 472, 473], "generic": [63, 74, 341, 382, 423, 424, 451, 469, 476, 478], "utf": [63, 155, 290, 457, 475, 476], "32": 63, "16": 63, "escap": 63, "latin": 63, "ascii": [63, 144, 175, 390], "mbcs": [63, 155], "window": [63, 76, 85, 91, 108, 129, 155, 174, 186, 244, 300, 345, 365, 380, 400, 401, 402, 457, 461, 464, 465, 469, 472, 475, 476, 479], "veri": [65, 71], "high": [65, 71, 326, 329, 345], "setuptool": 70, "app": 71, "embed": [71, 350, 458], "beyond": [71, 118], "an": [71, 72, 78, 83, 84, 87, 92, 100, 106, 133, 166, 180, 191, 193, 202, 247, 259, 345, 386, 395, 409, 457, 465], "overview": [71, 92, 248, 423, 466], "pure": [71, 92], "extend": [71, 84, 89, 126, 248, 289, 290, 395, 458, 461], "compil": [71, 72, 103, 108, 120, 156, 160, 308, 348, 421, 452, 477], "link": [71, 118, 173, 460], "under": 71, "unix": [71, 76, 83, 108, 124, 149, 170, 181, 217, 228, 300, 352, 387, 456], "like": [71, 100, 229], "intermezzo": 72, "tabl": [72, 278, 296, 348], "linkag": 72, "extract": [72, 354, 418], "keyword": [72, 84, 178, 260, 431, 437, 468, 474, 475], "arbitrari": [72, 78, 99, 289, 437, 469], "count": 72, "ownership": 72, "rule": [72, 328, 330, 460], "thin": 72, "ice": 72, "null": [72, 89, 341], "pointer": [72, 173], "write": [72, 84, 89, 106, 126, 131, 267, 316, 337, 354, 358, 397, 463, 464], "provid": [72, 75, 99, 296, 351], "cpython": [73, 77, 96, 468, 469, 470, 473, 475, 476, 477, 478], "runtim": [73, 85, 279, 312, 421, 476, 477], "assort": 74, "topic": 74, "de": [74, 147], "present": [74, 466], "manag": [74, 92, 98, 100, 133, 166, 167, 194, 241, 280, 290, 337, 341, 345, 365, 371, 386, 396, 417, 424, 463, 464], "comparison": [74, 93, 97, 105, 213, 256, 296, 341, 426, 459, 466], "weak": [74, 398, 448, 459], "more": [74, 88, 91, 97, 100, 103, 380, 386, 470], "suggest": 74, "tutori": [75, 89, 92, 99, 173, 183, 289, 337, 380, 409], "basic": [75, 89, 107, 190, 293, 371, 380, 416, 424], "adding": [75, 100, 289, 465, 472, 475], "to": [75, 78, 83, 84, 88, 89, 93, 98, 99, 100, 101, 102, 106, 152, 181, 187, 247, 248, 256, 262, 263, 265, 273, 290, 293, 296, 305, 337, 345, 348, 351, 365, 380, 382, 385, 386, 394, 458, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "exampl": [75, 92, 100, 153, 158, 164, 166, 180, 185, 187, 190, 197, 276, 289, 316, 329, 342, 354, 377, 386, 391, 394, 395, 415], "finer": [75, 93, 472], "over": [75, 84, 215], "subclass": [75, 84, 93, 100, 240, 318, 386, 424], "other": [75, 78, 84, 93, 97, 99, 100, 118, 137, 256, 279, 289, 296, 341, 382, 431, 458, 459, 460, 461, 465, 466, 472, 473, 474, 475, 476], "cookbook": [76, 93, 100], "approach": [76, 466, 468], "differ": [76, 84, 93, 187, 232, 378, 380], "between": [76, 84, 106, 144, 280, 289, 431], "use": [76, 83, 84, 89, 93, 97, 99, 100, 102, 103, 108, 149, 160, 166, 193, 232, 267, 276, 279, 280, 293, 305, 311, 337, 345, 351, 358, 361, 371, 372, 373, 380, 384, 386, 391, 421, 424, 463, 464, 470, 472, 477], "dlls": [76, 173], "practic": [76, 84, 87, 92, 323], "self": [77, 84, 89, 338, 469, 477], "express": [77, 78, 89, 94, 103, 106, 120, 316, 426, 432, 462, 463, 477], "index": [77, 84, 365, 461, 463], "len": 77, "join": [77, 431], "switch": [77, 472], "case": [77, 98, 384, 423, 459], "lambda": [77, 84, 94, 426, 437], "dictionari": [77, 100, 265, 386, 426, 438, 465, 467, 471, 472, 478], "sort": [77, 84, 105], "spec": [77, 428], "goto": 77, "if": [77, 84, 99, 180, 247, 423, 437], "while": [77, 423], "def": 77, "class": [77, 78, 84, 89, 92, 93, 98, 100, 118, 120, 154, 155, 158, 178, 196, 210, 213, 227, 247, 250, 252, 255, 278, 280, 296, 305, 309, 313, 326, 341, 344, 380, 381, 382, 384, 385, 386, 391, 403, 411, 421, 423, 424, 431, 436, 460, 463, 464, 469, 472, 475], "how": [78, 83, 84, 88, 89, 93, 100, 101, 108, 190, 289, 337, 365, 380], "can": [78, 83, 84, 247, 296], "evalu": [78, 425, 426, 475, 476], "py_buildvalu": 78, "pyerr_print": 78, "stdout": [78, 83], "stderr": [78, 83], "do": [78, 83, 84, 365], "make": [78, 84, 98, 102, 316, 380, 458, 465, 470, 474, 475], "linux": [78, 101, 109, 290, 300, 456], "__builtin_new": 78, "__pure_virtu": 78, "some": 78, "through": 78, "inherit": [78, 178, 290, 380, 436, 460, 473], "beta": [79, 479], "www": [79, 83], "org": [79, 457], "monti": 79, "gui": [80, 100, 278, 455], "tkinter": [80, 186, 244, 365, 366, 367, 368, 369, 370, 371, 372, 469, 470, 474, 475, 476, 477], "tk": [80, 364, 365, 371, 372, 465], "key": [80, 105, 232, 244, 280, 338, 472], "bind": [80, 244, 337, 365, 425], "find": [83, 84, 173, 276, 316, 409, 457], "or": [83, 84, 100, 118, 124, 173, 180, 341, 345, 376, 377, 423, 437], "applic": [83, 91, 92, 100, 155, 227, 244, 344, 417, 457, 463, 474], "perform": [83, 84, 103, 255, 296, 452, 466, 472], "task": [83, 122, 124, 126, 137], "math": [83, 272, 469, 470, 471, 472, 474, 475, 476, 477, 478], "py": [83, 102, 112, 469], "socket": [83, 100, 104, 107, 124, 131, 134, 334, 338, 358, 422, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478], "regex": 83, "script": [83, 84, 149, 276, 351, 380, 457, 463], "curs": [83, 91, 174, 175, 176, 468, 472, 474, 477, 478], "termcap": 83, "is": [83, 84, 91, 99, 112, 180, 305, 462, 466], "there": [83, 84], "equival": [83, 84, 92], "onexit": 83, "whi": [83, 84, 462], "don": [83, 84], "my": [83, 84], "handler": [83, 99, 100, 107, 124, 138, 155, 211, 264, 265, 266, 330, 335, 365, 403, 411], "work": [83, 84, 108, 124, 183, 190, 337, 382, 418], "document": [83, 198, 310, 406, 409, 416, 437, 464, 465, 472, 473, 477, 479], "doc": 83, "get": [83, 84, 88, 97, 130, 378, 380, 386], "keypress": [83, 85], "at": 83, "time": [83, 99, 100, 180, 362, 421, 461, 469, 471, 472, 474, 475, 476, 477, 478], "parcel": 83, "out": [83, 98, 296, 477], "among": 83, "bunch": 83, "worker": [83, 280], "what": [83, 84, 91, 99, 112, 190, 289, 296, 305, 365, 458], "kind": [83, 92], "mutat": 83, "are": [83, 84, 93, 190, 289, 473], "safe": [83, 98, 473], "seem": 83, "os": [83, 210, 290, 291, 293, 345, 358, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "read": [83, 98, 106, 124, 131, 249, 267, 354, 397], "pipe": [83, 124, 280, 298], "popen": [83, 345, 471], "rs232": 83, "doesn": 83, "close": [83, 92], "sys": [83, 118, 349, 350, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478], "stdin": 83, "realli": 83, "it": [83, 84, 107, 190, 289], "network": [83, 97, 100, 124, 256, 257, 334, 335, 465], "internet": [83, 253, 343], "cgi": [83, 149, 150, 474], "submiss": 83, "post": [83, 178], "html": [83, 235, 236, 237, 471, 472, 473], "avoid": [83, 100], "block": [83, 100, 102, 104, 338, 378, 409, 423, 466], "connect": [83, 124, 131, 265, 280, 334, 337], "you": [83, 84, 102, 478], "persist": [83, 295, 296, 327], "stand": 84, "alon": 84, "binari": [84, 102, 109, 143, 144, 155, 255, 341, 344, 415, 426, 448], "guid": [84, 89, 289, 337, 385], "program": [84, 91, 106, 133, 174, 227, 263, 280, 365, 425], "core": [84, 118, 458, 476, 479], "languag": [84, 227, 235, 261, 342, 380, 458], "am": 84, "unboundlocalerror": 84, "when": [84, 93, 97, 104], "has": 84, "loop": [84, 124, 126, 131, 258], "all": [84, 280, 289, 316, 378, 386, 465, 474, 475], "return": [84, 89, 92, 173, 386, 432, 457], "same": [84, 100, 386, 477], "result": [84, 101, 339, 390], "share": [84, 173, 280, 281, 472], "across": [84, 100, 281], "best": [84, 87, 101, 323, 338], "import": [84, 112, 120, 208, 247, 248, 264, 265, 266, 358, 365, 386, 419, 428, 432, 446, 459, 461, 462, 463, 464, 469, 472, 473], "pass": [84, 94, 100, 173, 432, 437], "option": [84, 88, 89, 102, 118, 190, 225, 231, 244, 259, 289, 297, 354, 365, 372, 376, 418, 451, 452, 475], "one": [84, 98, 147], "anoth": 84, "output": [84, 88, 89, 100, 244, 329, 448], "by": [84, 89, 173, 276, 391, 465, 473], "higher": [84, 149, 223], "order": [84, 173, 178, 223, 265, 289, 344, 386, 426, 465, 466, 467, 475], "up": [84, 107, 108, 166, 247], "comma": [84, 461], "oper": [84, 94, 105, 223, 240, 256, 279, 288, 290, 329, 338, 341, 342, 426, 431, 460, 466, 469, 472, 473, 474, 478], "preced": [84, 426], "possibl": [84, 380], "obfusc": 84, "liner": 84, "doe": [84, 365], "slash": 84, "mean": 84, "22": 84, "10": [84, 87, 378, 468, 475, 476, 479], "int": [84, 341], "liter": [84, 106, 120, 423, 426, 431, 442, 464, 469, 472, 475], "instead": [84, 89, 102, 466], "syntaxerror": [84, 468], "modifi": [84, 103, 108, 376, 409, 457], "place": [84, 288], "perl": 84, "chomp": 84, "remov": [84, 457, 463, 464, 465, 470, 473, 474, 475, 476, 477, 478], "trail": 84, "newlin": [84, 461], "scanf": [84, 316], "sscanf": 84, "unicodedecodeerror": 84, "unicodeencodeerro": 84, "end": [84, 91, 105], "odd": [84, 105], "backslash": [84, 103], "too": 84, "slow": 84, "speed": 84, "most": 84, "effici": [84, 258, 329], "way": 84, "concaten": [84, 431], "mani": 84, "togeth": [84, 289], "convert": [84, 89, 106, 144, 337, 345], "negat": 84, "revers": [84, 462], "duplic": [84, 93], "multipl": [84, 98, 99, 100, 215, 385, 386, 460, 474], "item": [84, 372], "multidimension": 84, "appli": [84, 386], "a_tupl": 84, "addit": [84, 204, 341, 381, 457, 474], "want": 84, "complic": 84, "schwartzian": 84, "transform": [84, 155, 469], "given": 84, "deleg": [84, 472], "deriv": [84, 93, 232], "that": [84, 92, 93, 94, 100, 263], "organ": [84, 384], "easier": 84, "chang": [84, 89, 98, 99, 227, 380, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "overload": 84, "constructor": [84, 126, 227, 345], "tri": [84, 166, 423, 463], "__spam": 84, "_someclassname__spam": 84, "__del__": [84, 398], "but": 84, "not": [84, 341, 380], "delet": [84, 385, 458], "id": [84, 362], "appear": [84, 380], "be": [84, 247, 296], "uniqu": [84, 93], "reli": 84, "ident": [84, 426], "test": [84, 94, 149, 190, 338, 358, 384, 386, 396, 426, 474, 479], "cach": [84, 428, 477], "pyc": [84, 471, 476], "current": [84, 124, 252, 378], "name": [84, 92, 93, 103, 108, 118, 155, 208, 259, 290, 354, 381, 385, 386, 424, 425, 426, 461, 472], "have": 84, "mutual": [84, 118], "each": 84, "__import__": 84, "edit": [84, 244, 443], "reimport": 84, "show": [84, 476], "this": [84, 98], "happen": [84, 99], "pyd": 85, "dll": 85, "tab": [85, 372, 443], "ms": [85, 279, 400], "win": 85, "crt": 85, "l1": 85, "annot": [87, 341, 382, 425, 432, 437, 475, 476], "dict": [87, 100, 341, 385, 386, 475], "newer": 87, "older": [87, 108, 345, 354], "manual": [87, 167, 305, 338, 365], "un": 87, "stringiz": 87, "__annotations__": 87, "ani": [87, 166, 382, 385], "version": [87, 97, 102, 108, 248, 289, 338, 354, 396, 457, 470, 471], "quirk": 87, "argpars": [88, 118, 465, 468, 471, 473, 474, 476], "short": 88, "littl": 88, "specifi": [88, 102, 173, 267, 382, 417, 465, 467], "ambigu": 88, "conflict": [88, 289], "translat": [88, 227, 380], "clinic": [89, 473], "background": [89, 98, 263, 289], "concept": [89, 365], "terminolog": [89, 289], "command": [89, 118, 120, 153, 160, 187, 207, 225, 231, 244, 252, 259, 289, 290, 294, 297, 308, 331, 337, 345, 354, 358, 374, 376, 384, 394, 418, 457, 465, 471, 472, 473, 475], "line": [89, 118, 120, 153, 160, 187, 207, 215, 225, 231, 244, 252, 259, 262, 289, 290, 297, 308, 317, 331, 337, 354, 358, 374, 376, 384, 394, 418, 431, 457, 462, 465, 471, 472], "renam": 89, "pyarg_unpacktupl": 89, "group": [89, 94, 103, 118, 137, 210, 230, 289, 384, 423], "real": 89, "legaci": [89, 164, 345, 391, 476], "py_buff": 89, "assign": [89, 426, 432, 458, 477], "symbol": [89, 209, 348], "as": [89, 97, 99, 100, 166, 256, 344, 351, 380, 385, 423, 463, 464, 472, 477], "clone": 89, "exist": [89, 131, 386], "meth_o": 89, "meth_noarg": 89, "tp_new": 89, "tp_init": 89, "redirect": [89, 457], "ifdef": 89, "trick": [89, 108], "start": [91, 164, 183, 280, 380, 385, 386], "pad": 91, "display": [91, 99, 124, 174, 378, 426, 459], "text": [91, 102, 155, 174, 190, 244, 262, 316, 341, 359, 360, 370, 406, 466], "color": [91, 244, 366, 380], "user": [91, 108, 211, 244, 265, 305, 364, 382, 464], "input": [91, 174, 186, 215, 374, 380], "howto": [92, 93, 94, 106], "primer": 92, "simpl": [92, 103, 190, 232, 328, 403, 432, 460, 461], "constant": [92, 174, 275, 311, 337, 342, 345, 362, 373, 401], "thought": 92, "complet": [92, 244, 317, 320, 325, 443], "valid": [92, 403], "technic": [92, 180], "introduct": [92, 106, 305], "invoc": [92, 345], "super": 92, "summari": [92, 278, 472, 473, 474, 475, 476, 477, 478], "logic": [92, 183, 256, 431], "automat": [92, 93, 244], "orm": 92, "__slots__": [92, 424, 468], "enum": [93, 208, 468, 469, 473, 474, 475, 476], "programmat": [93, 247, 297, 376], "enumer": [93, 208, 461], "their": [93, 316, 386], "ensur": 93, "allow": 93, "restrict": [93, 296, 327, 391, 425], "dataclass": [93, 178, 468, 469, 476], "pickl": [93, 169, 296, 297, 421, 461, 472, 473, 474, 475, 477], "intenum": 93, "strenum": 93, "intflag": 93, "__new__": 93, "vs": [93, 316, 382, 466], "__init__": [93, 178], "__dunder__": [93, 208], "_sunder_": [93, 208], "_private__nam": 93, "mix": 93, "combin": [93, 338], "minutia": 93, "aka": 93, "omit": 93, "auto": 93, "descript": [93, 158, 311], "orderedenum": 93, "duplicatefreeenum": 93, "planet": 93, "timeperiod": 93, "enumtyp": 93, "formal": [94, 470], "provabl": 94, "modular": 94, "eas": 94, "compos": 94, "comprehens": [94, 120, 438, 458, 470, 475], "into": [94, 100, 380, 390], "itertool": [94, 258, 468, 470, 471, 472, 476, 477], "new": [94, 289, 396, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "element": [94, 406, 409], "select": [94, 100, 186, 325, 338, 422, 471, 472, 473], "combinator": 94, "functool": [94, 223, 469, 471, 472, 473, 474, 476, 477], "small": 94, "revis": 94, "histori": [94, 317, 443], "acknowledg": 94, "general": [94, 148, 289, 330, 452, 474], "instrument": 96, "dtrace": [96, 475], "systemtap": [96, 475], "enabl": [96, 101, 124, 465, 473], "marker": 96, "probe": [96, 475], "avail": [96, 180, 396], "tapset": 96, "ipaddress": [97, 256, 472, 473, 474, 476, 478], "address": [97, 256, 280], "note": [97, 183, 204, 208, 330, 334, 335, 338, 372, 424], "ip": [97, 256], "host": [97, 256], "inspect": [97, 252, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478], "detail": [97, 158, 180, 263, 265], "fail": [97, 474], "who": 98, "should": [98, 478], "enter": 98, "surpris": [98, 173], "edg": [98, 325], "opt": 98, "limit": [98, 259, 319, 341, 418, 457], "regular": [98, 103, 106, 316, 428], "lifetim": [98, 126], "open": [98, 100, 107, 124, 249], "scope": [98, 425, 436, 459, 460], "lossless": 98, "convers": [98, 152, 173, 256, 272, 341, 362, 426, 462], "log": [99, 100, 264, 265, 266, 280, 448, 461, 465, 469, 471, 472, 473, 474, 475, 476, 477], "messag": [99, 100, 193, 202, 204, 227, 232, 263, 268, 369, 470], "date": [99, 124, 180, 461], "next": [99, 479], "step": [99, 452], "flow": [99, 120], "logger": [99, 100, 264], "formatt": [99, 100, 264], "no": [99, 473], "librari": [99, 100, 110, 160, 173, 251, 256, 352, 385, 452, 464, 479], "dure": 99, "optim": [99, 461, 462, 463, 464, 465, 470, 471, 472, 474, 475, 476, 477, 478], "resourc": [99, 100, 249, 250, 319, 418, 472, 473, 476], "destin": 100, "server": [100, 124, 131, 242, 335, 338, 403, 415, 416, 471, 476], "deal": 100, "send": 100, "receiv": 100, "event": [100, 124, 126, 136, 322, 330, 361, 365, 372, 380], "run": [100, 124, 133, 137, 244, 358, 384, 457], "listen": [100, 280], "product": 100, "contextu": 100, "your": [100, 102, 149, 173, 227, 289, 386, 478], "loggeradapt": [100, 264], "impart": 100, "than": 100, "filter": [100, 264, 267, 354, 376, 378, 396], "contextvar": [100, 167, 476], "concurr": [100, 123, 137, 161, 162, 163, 471, 474, 475, 476, 478], "futur": [100, 111, 124, 126, 127, 163, 432, 465, 470, 471, 474, 475, 476, 478], "processpoolexecutor": [100, 163], "deploy": 100, "web": [100, 240, 399, 471], "gunicorn": 100, "uwsgi": 100, "rotat": 100, "altern": [100, 108, 318, 430, 457], "logrecord": [100, 264], "queuehandl": [100, 265, 266], "zeromq": 100, "queuelisten": [100, 265, 266], "namer": 100, "elabor": 100, "multiprocess": [100, 280, 281, 464, 472, 473, 474, 475, 476, 477, 478], "insert": 100, "bom": [100, 155], "sent": 100, "sysloghandl": [100, 266], "dictconfig": 100, "particular": 100, "throughout": 100, "factori": [100, 137, 178, 256, 337], "speak": 100, "them": 100, "condit": [100, 136, 289, 361, 426, 438, 463], "email": [100, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 471, 472, 473, 474, 475], "utc": 100, "gmt": 100, "via": [100, 337, 457], "cli": 100, "starter": 100, "templat": [100, 186, 298, 342, 448], "qt": 100, "syslog": [100, 352], "rfc5424": 100, "treat": 100, "stream": [100, 122, 131, 155, 215, 255, 296], "pattern": [100, 103, 120, 217, 380, 423, 424], "nullhandl": [100, 266], "lot": 100, "obtain": 101, "sure": 102, "proper": 102, "setup": 102, "divis": [102, 460], "versus": [102, 103, 424], "featur": [102, 278, 382, 425, 463, 465, 470, 472, 473, 474, 475, 476, 477, 478], "detect": 102, "prevent": 102, "compat": [102, 328, 372], "regress": [102, 358], "which": [102, 190], "depend": [102, 329, 396], "transit": 102, "updat": [102, 396, 465, 478], "denot": 102, "continu": [102, 173, 432, 437], "integr": [102, 264], "stay": 102, "consid": 102, "match": [103, 118, 120, 217, 316, 386, 423, 424, 437], "repeat": [103, 259], "thing": 103, "plagu": 103, "power": [103, 152, 272, 426], "metacharact": 103, "captur": [103, 423], "lookahead": 103, "assert": [103, 386, 432], "split": [103, 108], "search": [103, 108, 244, 248, 316, 350, 428], "replac": [103, 166, 244, 345, 428], "common": [103, 149, 180, 341, 342, 466], "problem": [103, 149], "greedi": 103, "re": [103, 178, 316, 384, 469, 472, 473, 474, 475, 476], "verbos": [103, 386], "feedback": 103, "ipc": 104, "die": 104, "decor": [105, 166, 208, 385, 386, 462, 464, 470], "undecor": 105, "sourc": [106, 108, 244, 247, 252, 308, 374, 421, 461], "compar": [106, 398], "filenam": [106, 217, 273], "tip": [106, 108, 263], "awar": [106, 180, 474], "unknown": 106, "urllib": [107, 388, 389, 390, 391, 392, 468, 471, 472, 473, 474, 475, 476, 478], "articl": 107, "url": [107, 388, 390, 391], "header": [107, 199, 200, 403, 472], "urlerror": 107, "httperror": 107, "wrap": [107, 360, 365], "info": 107, "geturl": 107, "authent": [107, 280], "proxi": [107, 280, 385], "distutil": [108, 458, 461, 468, 474, 475, 476, 478], "distribut": [108, 248], "instal": [108, 149, 207, 278, 351, 452, 457, 458, 473], "platform": [108, 300, 329, 372, 459, 468, 476], "variat": 108, "job": 108, "scheme": 108, "home": 108, "prefix": [108, 118, 256, 478], "locat": [108, 321, 412], "config": [108, 265], "syntax": [108, 118, 120, 316, 342, 409, 439, 464, 466, 470, 472, 474, 475], "tweak": 108, "linker": [108, 452], "microsoft": [108, 278, 457], "borland": 108, "codegear": 108, "gnu": [108, 181, 227, 317, 320], "cygwin": 108, "mingw": 108, "pip": [109, 207, 449, 465, 473], "2to3": 110, "fixer": 110, "lib2to3": 110, "__future__": [111, 459], "__main__": [112, 428, 476], "top": [112, 259, 378], "environ": [112, 290, 350, 380, 395, 403, 421, 457, 465, 472, 474, 475], "__name__": 112, "idiomat": 112, "usag": [112, 118, 120, 180, 190, 244, 276, 297, 319, 374, 376, 394, 415, 472], "packag": [112, 191, 248, 249, 299, 358, 428, 446, 457, 459, 461, 463, 464, 472], "consider": [112, 141, 242, 265, 324, 338, 345, 428], "_thread": [113, 468], "abc": [114, 158, 247, 250, 286, 382, 468, 471, 472, 473, 474, 478], "aifc": [115, 473, 476], "aiff": 115, "parser": [118, 164, 204, 225, 237, 289, 311, 410, 412, 464, 478], "add_argu": 118, "argumentpars": 118, "prog": 118, "epilog": 118, "parent": 118, "formatter_class": 118, "prefix_char": 118, "fromfile_prefix_char": 118, "argument_default": 118, "allow_abbrev": 118, "conflict_handl": 118, "add_help": 118, "exit_on_error": 118, "action": [118, 289], "narg": 118, "const": 118, "choic": 118, "requir": [118, 173, 248, 452], "metavar": 118, "dest": 118, "parse_arg": 118, "invalid": [118, 428], "contain": [118, 158, 256, 382, 424], "abbrevi": 118, "argv": 118, "namespac": [118, 380, 409, 424, 428, 436, 472], "util": [118, 166, 173, 206, 208, 247, 285, 299, 306, 358, 381, 403, 413], "filetyp": 118, "exclus": 118, "help": [118, 244, 289, 310, 380], "partial": [118, 223, 386, 408, 463], "exit": [118, 138], "intermix": 118, "upgrad": [118, 124], "optpars": [118, 289, 461], "ast": [120, 464, 471, 475, 477, 478], "tree": [120, 232, 373, 408, 409], "grammar": 120, "node": [120, 406], "root": 120, "subscript": [120, 426], "statement": [120, 166, 361, 376, 423, 424, 432, 463, 464], "await": [120, 123, 137, 424, 426, 474], "helper": [120, 187, 342, 345, 382, 385], "asyncio": [121, 123, 133, 167, 468, 469, 470, 473, 474, 475, 476, 477, 478], "hello": [121, 124, 365], "world": [121, 124, 365], "queue": [122, 132, 233, 280, 313, 438, 476], "subprocess": [122, 124, 131, 135, 244, 345, 462, 472, 473, 474, 475, 476], "synchron": [122, 136, 280], "multithread": 123, "never": 123, "retriev": [123, 252, 377], "stop": [124, 385], "schedul": [124, 137, 290, 322], "callback": [124, 173, 289, 461], "delay": 124, "transfer": 124, "watch": 124, "dns": 124, "execut": [124, 161, 190, 244, 321, 330, 358, 376, 417, 424, 425, 457, 463], "pool": [124, 280], "mode": [124, 183, 185, 232, 290, 465, 476], "call_soon": 124, "call_lat": 124, "sigint": 124, "sigterm": 124, "polici": [128, 130, 205, 472], "maco": [129, 244, 300, 452, 478, 479], "watcher": 130, "transport": 131, "hierarchi": [131, 210, 464, 472], "onli": [131, 178, 244, 437, 468, 476, 477], "datagram": 131, "tcp": [131, 134], "echo": [131, 134], "client": [131, 239, 240, 245, 280, 302, 332, 338, 415, 465, 471, 473, 474, 475, 476], "udp": 131, "subprocess_exec": 131, "subprocessprotocol": 131, "prioriti": 132, "lifo": 132, "runner": 133, "keyboard": 133, "interrupt": [133, 418], "streamread": [134, 155], "streamwrit": [134, 155], "http": [134, 238, 239, 240, 241, 242, 403, 465, 471, 472, 473, 474, 475, 476, 478], "interact": [135, 154, 190, 425, 459, 463], "primit": [136, 137, 280, 382], "semaphor": [136, 361], "boundedsemaphor": 136, "barrier": [136, 361], "cancel": 137, "sleep": 137, "eager": 137, "shield": 137, "timeout": [137, 211, 334], "wait": [137, 325], "introspect": [137, 252, 382], "atexit": 138, "audioop": [139, 422, 473], "base64": [141, 468, 472, 473], "base16": 141, "base32": 141, "base85": 141, "secur": [141, 149, 232, 242, 265, 324, 338, 345, 390, 452, 465, 473, 479], "bdb": [142, 468], "framework": [142, 335, 459, 472], "servic": [143, 227, 261, 263, 312], "binascii": [144, 472, 475, 476], "bisect": [145, 468], "algorithm": [145, 248, 267, 380, 473], "builtin": [146, 385, 425, 466, 472, 477, 479], "bz2": [147, 472, 474], "bzip2": 147, "compress": [147, 267], "increment": [147, 155, 265], "shot": 147, "calendar": [148, 470, 476], "care": 149, "solut": 149, "cgitb": 150, "traceback": [150, 211, 377, 378, 468, 469, 473, 474, 475], "chunk": 151, "iff": 151, "cmath": [152, 474, 475], "mathemat": 152, "polar": 152, "coordin": 152, "logarithm": [152, 272], "trigonometr": [152, 272], "hyperbol": [152, 272], "classif": 152, "cmd": 153, "orient": [153, 293, 380], "consol": [154, 279, 475], "registri": [155, 401, 457], "stateless": 155, "decod": [155, 259], "incrementalencod": 155, "incrementaldecod": 155, "streamreaderwrit": 155, "streamrecod": 155, "idna": 155, "internation": [155, 199, 227, 263], "ansi": 155, "codepag": 155, "utf_8_sig": 155, "signatur": [155, 252, 472], "codeop": 156, "chainmap": 157, "counter": 157, "dequ": 157, "defaultdict": 157, "namedtupl": 157, "ordereddict": 157, "userdict": 157, "userlist": 157, "userstr": 157, "recip": [158, 166, 183, 258, 337], "colorsi": [159, 473], "compileal": [160, 474, 476, 478], "public": [160, 380], "executor": 163, "threadpoolexecutor": 163, "configpars": [164, 471, 474], "datatyp": [164, 461], "fallback": 164, "ini": [164, 457], "interpol": 164, "behaviour": 164, "rawconfigpars": 164, "site": [165, 331, 464, 468, 471, 475], "contextlib": [166, 382, 463, 464, 468, 469, 471, 472, 473, 474, 475, 476], "catch": 166, "__enter__": 166, "clean": 166, "reusabl": 166, "reentrant": 166, "copi": [168, 329], "shallow": 168, "deep": 168, "copyreg": 169, "regist": [169, 337], "crypt": [170, 472, 476], "hash": [170, 232, 341, 473, 476], "csv": [172, 470, 471, 474, 477], "dialect": 172, "reader": 172, "writer": [172, 263], "ctype": [173, 280, 463, 464, 471, 477], "foreign": 173, "load": [173, 186, 384, 428], "fundament": 173, "variad": [173, 469], "own": 173, "prototyp": 173, "union": [173, 341], "align": [173, 344], "bit": [173, 252, 401, 466], "incomplet": 173, "export": 173, "size": [173, 232, 290, 329, 344, 378], "termin": [174, 290, 306, 329], "textpad": 174, "widget": [174, 365, 370, 371, 372, 465], "textbox": 174, "panel": 176, "stack": [176, 252, 377, 438], "content": [178, 194, 311], "init": [178, 317], "frozen": [178, 469], "mutabl": [178, 341, 386], "naiv": 180, "determin": [180, 424], "timedelta": 180, "tzinfo": 180, "timezon": [180, 362], "strftime": 180, "strptime": 180, "dbm": [181, 471, 473, 474, 475, 476], "databas": [181, 230, 278, 383], "reinterpret": 181, "ndbm": 181, "dumb": 181, "portabl": 181, "decim": [183, 448, 462, 471, 472, 475, 476], "fix": [183, 289, 459, 460, 461, 465], "arithmet": [183, 256, 426], "operand": 183, "round": 183, "mitig": 183, "off": 183, "increas": 183, "precis": [183, 470], "special": [183, 272, 341, 380, 382, 424, 428, 461, 466], "faq": [183, 469], "develop": [185, 244, 297, 458, 464, 476], "effect": [185, 386], "resourcewarn": 185, "bad": 185, "dialog": [186, 366], "simpledialog": 186, "filedialog": 186, "nativ": [186, 344], "save": 186, "commondialog": 186, "difflib": [187, 474], "comput": [187, 378], "delta": 187, "sequencematch": 187, "ndiff": 187, "dis": [188, 470, 471, 473, 476], "bytecod": [188, 358, 428, 469, 470, 475, 476, 477, 478], "analysi": [188, 328, 431], "instruct": 188, "opcod": [188, 469], "doctest": [190, 462, 468, 473, 474], "docstr": [190, 380], "examin": [190, 348], "recogn": 190, "unittest": [190, 384, 385, 386, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "doctestfind": 190, "doctestpars": 190, "doctestrunn": 190, "outputcheck": 190, "soapbox": 190, "mime": [191, 194, 198, 203, 273, 314], "charset": 192, "repres": [192, 193, 202], "compat32": 193, "contentmanag": 194, "defect": 196, "headerregistri": 200, "scratch": 203, "feedpars": 204, "miscellan": [206, 267, 280, 290, 371, 451, 466], "ensurepip": [207, 465, 473], "bootstrap": [207, 465, 473], "errno": 209, "concret": [210, 293, 382], "faulthandl": [211, 468, 472, 474, 475], "dump": 211, "fault": [211, 415], "after": 211, "fcntl": [212, 469, 478], "ioctl": 212, "filecmp": [213, 473], "directori": [213, 278, 290, 329, 464, 471, 474], "dircmp": 213, "fileinput": [215, 468, 475], "fnmatch": 217, "fraction": [218, 464, 469, 470, 471], "ration": 218, "ftplib": [220, 472, 478], "ftp": [220, 471], "ftp_tls": 220, "callabl": [223, 252, 337, 382, 424], "gc": [224, 468, 472, 473, 476, 477, 478], "getopt": 225, "getpass": 226, "gettext": [227, 476, 477], "multilingu": 227, "nulltransl": 227, "gnutransl": 227, "solari": 227, "catalog": [227, 263], "fli": 227, "defer": 227, "glob": [228, 468, 473, 474], "graphlib": [229, 478], "graph": 229, "grp": [230, 475], "gzip": [231, 420, 471, 474, 477], "hashlib": [232, 463, 468, 469, 471, 473, 475, 478], "digest": 232, "shake": 232, "length": [232, 341], "blake2": 232, "random": [232, 262, 290, 315, 338, 470, 471, 475, 478], "person": 232, "credit": 232, "heapq": [233, 474], "hmac": [234, 468, 472, 473, 476], "hypertext": 235, "markup": [235, 270], "entiti": 236, "xhtml": 237, "htmlparser": 237, "httpconnect": 239, "httprespons": 239, "httpmessag": 239, "cookiejar": 240, "cooki": [240, 241, 422], "filecookiejar": 240, "co": 240, "browser": [240, 309, 399], "cookiepolici": 240, "defaultcookiepolici": 240, "morsel": 241, "idl": [244, 458, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479], "menu": 244, "shell": [244, 298, 328, 345], "editor": 244, "menus": 244, "navig": [244, 365], "indent": [244, 431], "calltip": 244, "startup": [244, 317], "failur": [244, 384], "without": 244, "prefer": 244, "idlelib": [244, 468, 469, 473, 474, 475, 476, 477, 478], "imaplib": [245, 471, 472, 474, 478], "imap4": 245, "imghdr": [246, 474], "importlib": [247, 248, 249, 250, 428, 465, 468, 472, 473, 474, 475, 476, 478], "machineri": 247, "lazi": [247, 425, 469], "approxim": [247, 474], "import_modul": 247, "metadata": [248, 459, 461, 463, 468], "entri": [248, 424, 428], "discoveri": [248, 384], "live": 252, "fetch": 252, "webassembl": [254, 452], "io": [255, 382, 471, 472, 474, 476, 477], "reentranc": 255, "ipv4": 256, "ipv6": 256, "manipul": [256, 268, 289], "conveni": [256, 399, 415], "integ": [256, 341, 431, 460, 462, 464], "net": 256, "mask": 256, "interprocess": 257, "communic": 257, "json": [259, 296, 442, 464, 474, 475, 477], "complianc": 259, "interoper": 259, "infinit": 259, "nan": 259, "within": 259, "linecach": [262, 468, 474], "hint": [263, 354, 382, 470, 474, 478], "emb": 263, "facil": 264, "safeti": 264, "schema": 265, "extern": [265, 296], "resolut": [265, 425, 476], "streamhandl": 266, "filehandl": [266, 391], "watchedfilehandl": 266, "baserotatinghandl": 266, "rotatingfilehandl": 266, "timedrotatingfilehandl": 266, "sockethandl": 266, "datagramhandl": 266, "nteventloghandl": 266, "smtphandler": 266, "memoryhandl": 266, "httphandler": [266, 391], "lzma": [267, 472, 474], "decompress": [267, 418], "chain": [267, 338, 386, 439], "mailbox": [268, 471], "various": 268, "maildir": 268, "mbox": 268, "mh": 268, "babyl": 268, "mmdf": 268, "maildirmessag": 268, "mboxmessag": 268, "mhmessag": 268, "babylmessag": 268, "mmdfmessag": 268, "mailcap": 269, "tool": [270, 293, 297, 358, 403, 465, 470, 477, 479], "theoret": 272, "represent": [272, 421, 440, 472], "angular": 272, "mimetyp": [273, 476], "mmap": [275, 472, 473, 477], "madv_": 275, "map_": 275, "modulefind": 276, "msilib": [278, 476], "view": [278, 341, 465, 466], "record": [278, 378, 448], "cab": 278, "precomput": 278, "msvcrt": 279, "routin": [279, 352], "vc": 279, "parallel": [280, 361, 477], "exchang": 280, "sharedctyp": 280, "remot": 280, "cleanup": [280, 289], "dummi": 280, "guidelin": 280, "spawn": [280, 345], "forkserv": 280, "shared_memori": 281, "netrc": 283, "nis": 284, "sun": [284, 346], "yellow": 284, "page": 284, "nntplib": [285, 472, 478], "nntp": [285, 471], "posit": [289, 316, 380, 424, 437, 477], "understand": [289, 365], "store": [289, 457], "put": 289, "popul": 289, "trivial": 289, "ossaudiodev": 292, "oss": 292, "audio": 292, "devic": 292, "mixer": 292, "pathlib": [293, 468, 469, 470, 473, 474, 475, 476, 477, 478], "filesystem": [293, 475, 477], "individu": 293, "part": 293, "correspond": [293, 380], "pdb": [294, 470, 471, 472, 473, 475, 476, 478], "serial": [296, 421], "relationship": [296, 458], "unpickl": 296, "dispatch": 296, "reduct": 296, "band": [296, 477], "consum": 296, "pickletool": [297, 475], "pipelin": [298, 345], "pkgutil": 299, "java": 300, "plistlib": [301, 464, 473, 477], "appl": [301, 478], "plist": 301, "poplib": [302, 471, 473, 474, 478], "pop3": 302, "posix": [303, 357], "larg": 303, "pprint": [304, 468, 473, 477, 478], "pretti": [304, 378], "printer": 304, "prettyprint": 304, "instant": 305, "cprofil": [305, 476, 477], "stat": [305, 339, 472, 473], "determinist": 305, "timer": [305, 361], "pti": [306, 473], "pseudo": 306, "pwd": 307, "py_compil": [308, 468, 476, 477], "pyclbr": [309, 468], "pydoc": [310, 471, 472, 473, 475, 476, 478], "onlin": 310, "xml": [311, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 422, 458, 468, 472, 473, 474, 476, 477, 478], "expat": [311, 422], "fast": [311, 477], "xmlparser": [311, 409], "expaterror": 311, "model": [311, 365, 406, 424, 425, 459], "simplequeu": 313, "quopri": 314, "bookkeep": 315, "reproduc": 315, "pair": 316, "simul": 316, "phonebook": 316, "mung": 316, "adverb": 316, "notat": [316, 430, 464], "token": [316, 323, 373, 374, 431, 470, 477], "readlin": [317, 320, 331, 474, 475], "reprlib": [318, 471], "repr": [318, 428], "rlcomplet": [320, 475], "runpi": 321, "sched": [322, 472], "secret": [323, 475], "dev": [325, 476], "poll": 325, "trigger": 325, "epol": 325, "kqueue": [325, 422], "kevent": 325, "selector": [326, 371, 473, 474], "multiplex": 326, "shelv": [327, 468, 473], "shlex": [328, 472, 475, 477], "lexic": [328, 431], "improv": [328, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "shutil": [329, 469, 470, 471, 472, 473, 474, 477], "copytre": 329, "rmtree": 329, "archiv": [329, 354, 417, 418, 419, 461], "base_dir": 329, "sigpip": 330, "smtplib": [332, 472, 473, 474, 478], "smtp": 332, "sndhdr": [333, 474], "accept": 334, "socketserv": [335, 472, 475, 476], "tcpserver": 335, "udpserv": 335, "mixin": 335, "spwd": 336, "shadow": 336, "sqlite3": [337, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476], "sqlite": 337, "db": 337, "cursor": 337, "row": 337, "blob": 337, "prepareprotocol": 337, "adapt": 337, "deprec": [337, 382, 458, 461, 462, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "placehold": 337, "sql": 337, "shortcut": 337, "uri": 337, "transact": 337, "autocommit": 337, "isolation_level": 337, "ssl": [338, 464, 468, 471, 472, 473, 474, 475, 476, 477], "wrapper": [338, 368], "certif": [338, 465, 471, 473], "ca": 338, "sign": 338, "side": [338, 386], "bio": [338, 474], "session": 338, "verifi": 338, "cipher": 338, "statist": [340, 378, 468, 470, 473, 475, 477], "spread": 340, "normaldist": 340, "numer": [341, 424, 431, 475], "bitwis": [341, 426], "bool": 341, "rang": [341, 437], "immut": 341, "str": 341, "printf": 341, "bytearray": [341, 474], "frozenset": 341, "alia": 341, "genericalia": 341, "notimpl": 341, "affect": 341, "recommend": 341, "mini": 342, "stringprep": 343, "prepar": [343, 424], "frequent": 345, "bin": 345, "sh": 345, "substitut": [345, 462], "famili": 345, "popen2": 345, "popen3": 345, "disabl": 345, "vfork": 345, "posix_spawn": 345, "sunau": [346, 473, 476], "au": 346, "au_read": 346, "au_writ": 346, "symtabl": 348, "virtual": [350, 372, 395, 457, 472, 474], "_pth": 350, "sysconfig": [351, 465, 469, 471, 474], "tabnanni": 353, "tarfil": [354, 471, 472, 473, 474, 477], "tar": 354, "tarinfo": 354, "further": [354, 386], "verif": [354, 465, 473], "telnetlib": [355, 475], "telnet": 355, "tempfil": [356, 469, 470, 471, 472], "termio": 357, "tti": [357, 379], "unit": 358, "suit": 358, "socket_help": 358, "script_help": 358, "bytecode_help": 358, "correct": 358, "threading_help": 358, "os_help": 358, "import_help": 358, "warnings_help": 358, "textwrap": [360, 472, 473], "fill": [360, 380], "rlock": 361, "clock": 362, "timeit": [363, 474, 475], "graphic": [364, 380], "tcl": 365, "architectur": 365, "life": 365, "preserv": [365, 475], "handi": 365, "packer": [365, 404], "coupl": 365, "imag": [365, 371], "colorchoos": 366, "choos": 366, "dnd": 367, "drag": 367, "drop": 367, "font": 368, "messagebox": 369, "prompt": 369, "scrolledtext": 370, "scroll": 370, "tix": 371, "hierarch": 371, "listbox": 371, "tabular": 371, "form": [371, 382, 426], "geometri": 371, "ttk": [372, 465], "theme": [372, 465], "scrollabl": 372, "label": 372, "combobox": 372, "spinbox": 372, "notebook": 372, "identifi": [372, 426, 431], "progressbar": 372, "separ": [372, 461, 465, 467], "sizegrip": 372, "treeview": 372, "tag": [372, 471], "column": 372, "layout": [372, 448], "tomllib": 375, "toml": 375, "track": [376, 386], "main": [376, 452, 464], "tracebackexcept": 377, "stacksummari": 377, "framesummari": 377, "peak": 378, "domainfilt": 378, "snapshot": 378, "statisticdiff": 378, "turtl": 380, "star": 380, "draw": 380, "pen": 380, "turtlescreen": 380, "screen": 380, "rawturtl": 380, "motion": 380, "tell": 380, "measur": 380, "visibl": [380, 472], "anim": 380, "explan": 380, "turtledemo": [380, 471], "demo": [380, 470, 477, 479], "sinc": 380, "relev": 382, "pep": [382, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "alias": [382, 423], "newtyp": 382, "nomin": 382, "subtyp": 382, "recognis": 382, "timelin": 382, "major": 382, "unicodedata": [383, 469, 470, 474, 475, 476, 477, 478], "old": [384, 460], "skip": 384, "expect": 384, "distinguish": 384, "subtest": 384, "load_test": 384, "fixtur": 384, "setupclass": 384, "teardownclass": 384, "setupmodul": 384, "teardownmodul": 384, "mock": [385, 386, 474, 475, 476], "attach": 385, "patcher": 385, "patch": [385, 386], "test_prefix": 385, "nest": [385, 386, 459, 460], "where": 385, "magicmock": [385, 386], "magic": 385, "sentinel": 385, "create_autospec": 385, "filter_dir": 385, "mock_open": 385, "autospecc": 385, "seal": 385, "everi": 386, "unbound": 386, "cope": 386, "less": 386, "compon": 390, "quot": 390, "openerdirector": 391, "basehandl": 391, "httpredirecthandl": 391, "httpcookieprocessor": 391, "proxyhandl": 391, "httppasswordmgr": 391, "httppasswordmgrwithpriorauth": 391, "abstractbasicauthhandl": 391, "httpbasicauthhandl": 391, "proxybasicauthhandl": 391, "abstractdigestauthhandl": 391, "httpdigestauthhandl": 391, "proxydigestauthhandl": 391, "httpshandler": 391, "datahandl": 391, "ftphandler": 391, "cacheftphandl": 391, "unknownhandl": 391, "httperrorprocessor": 391, "respons": [391, 403], "robotpars": [392, 475], "robot": 392, "txt": 392, "xdrlib": [393, 404], "uuencod": [393, 422], "uuid": [394, 470, 476], "accord": 394, "rfc": 394, "4122": 394, "venv": [395, 469, 473, 475, 477, 478], "envbuild": 395, "describ": 396, "overrid": [396, 470], "temporarili": 396, "suppress": [396, 472], "wave": [397, 473, 476], "wav": 397, "wave_read": 397, "wave_writ": 397, "weakref": [398, 473, 477], "webbrows": [399, 472], "winreg": [401, 475], "hkey_": 401, "right": 401, "64": 401, "winsound": [402, 475], "sound": 402, "play": 402, "wsgiref": [403, 463, 474], "wsgi": 403, "simple_serv": 403, "conform": [403, 406], "checker": 403, "gateway": [403, 471], "xdr": 404, "vulner": 405, "defusedxml": 405, "dom": [406, 407, 408, 458], "domimplement": 406, "nodelist": 406, "documenttyp": 406, "attr": 406, "namednodemap": 406, "comment": [406, 431], "cdatasect": 406, "processinginstruct": 406, "accessor": 406, "minidom": 407, "minim": 407, "pulldom": 408, "domeventstream": 408, "etre": [409, 472, 473, 476], "elementtre": [409, 463, 465, 471, 472], "pull": 409, "interest": 409, "xpath": 409, "xinclud": 409, "qname": 409, "treebuild": 409, "xmlpullpars": 409, "sax": [410, 411, 412, 413, 474], "sax2": [410, 458], "saxexcept": 410, "contenthandl": 411, "dtdhandler": 411, "entityresolv": 411, "errorhandl": 411, "lexicalhandl": 411, "xmlreader": 412, "incrementalpars": 412, "inputsourc": 412, "attributesn": 412, "saxutil": 413, "xmlrpc": [414, 415, 416, 474, 475, 476, 477], "rpc": [415, 416], "serverproxi": 415, "protocolerror": 415, "multical": 415, "simplexmlrpcserv": 416, "cgixmlrpcrequesthandl": 416, "docxmlrpcserv": 416, "doccgixmlrpcrequesthandl": 416, "zipapp": [417, 474, 476], "zip": [417, 418, 419, 461], "standalon": 417, "zipfil": [418, 469, 471, 473, 474, 475, 476], "pyzipfil": 418, "zipinfo": 418, "pitfal": 418, "itself": 418, "behavior": [418, 473, 474, 475, 476, 477], "zipimport": [419, 468], "zlib": [420, 422, 472, 475], "zoneinfo": [421, 478], "iana": 421, "12": [422, 469, 470, 477, 479], "0rc1": 422, "psf": 422, "beopen": 422, "com": 422, "cnri": 422, "cwi": 422, "zero": 422, "claus": [422, 423], "bsd": 422, "mersenn": 422, "twister": 422, "uudecod": 422, "test_epol": 422, "siphash24": 422, "strtod": 422, "dtoa": 422, "openssl": [422, 456], "libffi": 422, "cfuhash": 422, "libmpdec": 422, "w3c": 422, "c14n": 422, "els": [423, 437], "guard": [423, 468], "irrefut": 423, "wildcard": [423, 447, 468], "invok": 424, "metaclass": 424, "resolv": 424, "mro": 424, "appropri": 424, "bodi": 424, "emul": 424, "purpos": 424, "__class_getitem__": 424, "__getitem__": 424, "atom": 426, "parenthes": 426, "yield": [426, 432], "primari": 426, "slice": [426, 461], "unari": 426, "shift": 426, "membership": 426, "finder": 428, "loader": 428, "meta": 428, "submodul": 428, "__path__": 428, "__spec__": 428, "physic": 431, "declar": [431, 468], "explicit": [431, 464, 472, 473], "implicit": [431, 472], "blank": 431, "whitespac": 431, "soft": 431, "reserv": 431, "imaginari": 431, "delimit": 431, "augment": [432, 458], "del": [432, 438], "break": [432, 437], "nonloc": 432, "dir": 446, "cross": 452, "makefil": 452, "target": [452, 465, 474, 475], "preprocessor": 452, "ide": [453, 455], "mac": [455, 464, 465, 478], "macpython": 455, "freebsd": [456, 465], "openbsd": 456, "full": 457, "max_path": 457, "known": 457, "temporari": 457, "nuget": 457, "embedd": 457, "bundl": 457, "excursus": 457, "launcher": [457, 469, 472, 474], "shebang": 457, "diagnost": 457, "dri": 457, "pywin32": 457, "cx_freez": 457, "cycl": 458, "minor": 458, "port": [458, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478], "easi": 458, "pyxml": 458, "227": [459, 460], "236": 459, "207": 459, "rich": 459, "230": 459, "229": 459, "205": 459, "232": 459, "235": 459, "insensit": 459, "217": 459, "208": 459, "coercion": [459, 476], "241": 459, "252": 460, "253": 460, "diamond": 460, "234": 460, "255": [460, 461], "237": [460, 462], "unifi": [460, 462, 463], "long": [460, 462], "238": 460, "218": [461, 462], "263": 461, "273": 461, "277": 461, "nt": 461, "278": 461, "univers": 461, "279": 461, "282": 461, "285": 461, "293": 461, "301": 461, "302": 461, "305": 461, "307": 461, "enhanc": [461, 464, 465, 475], "289": 462, "292": 462, "simpler": [462, 475], "318": 462, "322": 462, "324": 462, "327": 462, "need": 462, "328": [462, 463], "331": 462, "cookielib": 462, "308": 463, "309": 463, "314": 463, "softwar": 463, "v1": [463, 471], "absolut": 463, "338": 463, "341": 463, "342": 463, "343": [463, 464], "352": 463, "353": 463, "ssize_t": 463, "357": 463, "__index__": 463, "tracker": 464, "roundup": 464, "restructuredtext": 464, "sphinx": 464, "366": 464, "370": 464, "371": 464, "3101": [464, 466], "3105": 464, "3110": 464, "3112": 464, "3116": 464, "3118": [464, 472], "3119": 464, "3127": 464, "3129": 464, "3141": 464, "future_builtin": 464, "javascript": 464, "irix": 464, "372": [465, 467], "378": [465, 467], "thousand": [465, 467], "389": [465, 471], "391": [465, 471], "3106": 465, "3137": 465, "added": 465, "mainten": 465, "two": 465, "434": 465, "branch": 465, "466": 465, "477": 465, "backport": 465, "453": [465, 473], "476": [465, 473], "stdlib": [465, 473], "493": 465, "https": 465, "migrat": 465, "regen": [465, 474, 475], "touch": [465, 474, 475], "stumbl": 466, "alreadi": 466, "indentationerror": 468, "attributeerror": 468, "nameerror": 468, "626": 468, "634": 468, "encodingwarn": 468, "604": 468, "612": 468, "613": 468, "typealia": 468, "647": 468, "asynchat": [468, 475], "asyncor": [468, 471, 475], "smtpd": [468, 472, 473, 474], "652": 468, "11": [469, 478, 479], "657": 469, "654": 469, "678": 469, "exe": 469, "646": 469, "655": 469, "typeddict": [469, 470], "673": 469, "675": 469, "681": 469, "563": [469, 476], "cheaper": 469, "659": 469, "jit": 469, "701": 470, "syntact": 470, "709": 470, "inlin": 470, "688": 470, "684": 470, "692": 470, "kwarg": 470, "698": 470, "695": 470, "pend": 470, "13": [470, 475], "14": 470, "384": 471, "stabl": 471, "3148": 471, "3147": 471, "repositori": 471, "3149": 471, "so": 471, "3333": 471, "highlight": [472, 473, 474, 475, 476, 477, 478], "405": 472, "420": 472, "393": 472, "flexibl": 472, "397": 472, "3151": 472, "rework": 472, "380": 472, "subgener": 472, "409": 472, "414": 472, "3155": 472, "qualifi": 472, "412": 472, "362": 472, "421": 472, "simplenamespac": 472, "grain": 472, "unsupport": [472, 474], "446": 473, "newli": 473, "451": 473, "modulespec": 473, "445": 473, "442": 473, "456": 473, "interchang": 473, "436": 473, "longer": 473, "492": 474, "465": 474, "dedic": 474, "infix": 474, "matrix": 474, "448": 474, "461": 474, "percent": 474, "484": 474, "471": 474, "scandir": 474, "better": 474, "faster": 474, "475": 474, "retri": 474, "eintr": 474, "479": 474, "stopiter": 474, "insid": 474, "485": 474, "equal": 474, "486": 474, "488": 474, "elimin": 474, "pyo": 474, "489": 474, "negoti": 474, "notabl": [474, 475, 476, 477, 478], "498": 475, "526": 475, "515": 475, "underscor": 475, "525": 475, "530": 475, "487": 475, "519": 475, "495": 475, "disambigu": 475, "529": 475, "528": 475, "520": 475, "468": 475, "523": 475, "pythonmalloc": 475, "postpon": 476, "538": 476, "540": 476, "forc": 476, "553": 476, "breakpoint": 476, "539": 476, "562": 476, "564": 476, "nanosecond": 476, "565": 476, "deprecationwarn": [476, 478], "560": 476, "552": 476, "545": 476, "uu": 476, "macpath": 476, "578": 477, "audit": 477, "587": 477, "590": 477, "merg": 478, "suffix": 478, "big": 478, "sur": 478, "silicon": 478, "changelog": 479, "candid": 479, "alpha": 479}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"\u8853\u8a9e\u8868": [[86, "glossary"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[77, "design-and-history-faq"]], "\u76ee\u9304": [[77, "id1"], [80, "id1"], [92, "id1"], [85, "id1"], [83, "id1"], [78, "id1"], [84, "id1"], [79, "id1"], [244, "menus"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[77, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[77, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[77, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[77, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[77, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[77, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[77, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[77, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[77, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[77, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[77, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[77, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[77, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[77, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[77, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[77, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[77, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[77, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[77, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[77, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[77, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[77, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[77, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[77, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[77, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[77, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[77, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[77, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[80, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[80, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[80, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[80, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[80, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[80, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[80, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "\u4fee\u98fe\u5668 HowTo \u6307\u5357": [[92, "descriptor-howto-guide"]], "Primer": [[92, "primer"]], "Simple example: A descriptor that returns a constant": [[92, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[92, "dynamic-lookups"]], "Managed attributes": [[92, "managed-attributes"]], "Customized names": [[92, "customized-names"]], "Closing thoughts": [[92, "closing-thoughts"]], "Complete Practical Example": [[92, "complete-practical-example"]], "Validator class": [[92, "validator-class"]], "Custom validators": [[92, "custom-validators"]], "Practical application": [[92, "practical-application"]], "Technical Tutorial": [[92, "technical-tutorial"]], "\u6458\u8981": [[92, "abstract"], [89, null], [87, null], [91, null], [104, null], [103, null], [102, null]], "Definition and introduction": [[92, "definition-and-introduction"]], "Descriptor protocol": [[92, "descriptor-protocol"]], "Overview of descriptor invocation": [[92, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[92, "invocation-from-an-instance"]], "Invocation from a class": [[92, "invocation-from-a-class"]], "Invocation from super": [[92, "invocation-from-super"]], "Summary of invocation logic": [[92, "summary-of-invocation-logic"]], "Automatic name notification": [[92, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[92, "orm-example"]], "Pure Python Equivalents": [[92, "pure-python-equivalents"]], "Properties": [[92, "properties"]], "Functions and methods": [[92, "functions-and-methods"]], "Kinds of methods": [[92, "kinds-of-methods"]], "Static methods": [[92, "static-methods"]], "Class methods": [[92, "class-methods"]], "Member objects and __slots__": [[92, "member-objects-and-slots"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[99, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[99, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[99, "when-to-use-logging"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[99, "a-simple-example"], [72, "a-simple-example"]], "Logging to a file": [[99, "logging-to-a-file"]], "Logging from multiple modules": [[99, "logging-from-multiple-modules"]], "Logging variable data": [[99, "logging-variable-data"]], "Changing the format of displayed messages": [[99, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[99, "displaying-the-date-time-in-messages"]], "Next Steps": [[99, "next-steps"]], "Advanced Logging Tutorial": [[99, "advanced-logging-tutorial"]], "Logging Flow": [[99, "logging-flow"]], "Loggers": [[99, "loggers"]], "Handlers": [[99, "handlers"]], "Formatters": [[99, "formatters"]], "Configuring Logging": [[99, "configuring-logging"]], "What happens if no configuration is provided": [[99, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[99, "configuring-logging-for-a-library"]], "Logging Levels": [[99, "logging-levels"], [264, "logging-levels"]], "Custom Levels": [[99, "custom-levels"]], "Useful Handlers": [[99, "useful-handlers"]], "Exceptions raised during logging": [[99, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[99, "using-arbitrary-objects-as-messages"]], "Optimization": [[99, "optimization"]], "Other resources": [[99, "other-resources"], [100, "other-resources"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[85, "python-on-windows-faq"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[85, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[85, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[85, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[85, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[85, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[85, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[85, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[85, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[85, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "Defining Extension Types: Assorted Topics": [[74, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[74, "finalization-and-de-allocation"]], "Object Presentation": [[74, "object-presentation"]], "Attribute Management": [[74, "attribute-management"]], "Generic Attribute Management": [[74, "generic-attribute-management"]], "Type-specific Attribute Management": [[74, "type-specific-attribute-management"]], "Object Comparison": [[74, "object-comparison"]], "Abstract Protocol Support": [[74, "abstract-protocol-support"]], "Weak Reference Support": [[74, "weak-reference-support"]], "More Suggestions": [[74, "more-suggestions"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[90, "porting-extension-modules-to-python-3"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[72, "extending-python-with-c-or-c"]], "Intermezzo: Errors and Exceptions": [[72, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[72, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[72, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[72, "compilation-and-linkage"]], "Calling Python Functions from C": [[72, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[72, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[72, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[72, "building-arbitrary-values"]], "Reference Counts": [[72, "reference-counts"]], "Reference Counting in Python": [[72, "reference-counting-in-python"]], "Ownership Rules": [[72, "ownership-rules"]], "Thin Ice": [[72, "thin-ice"]], "NULL Pointers": [[72, "null-pointers"]], "Writing Extensions in C++": [[72, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[72, "providing-a-c-api-for-an-extension-module"]], "Logging Cookbook": [[100, "logging-cookbook"]], "Using logging in multiple modules": [[100, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[100, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[100, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[100, "logging-to-multiple-destinations"]], "Custom handling of levels": [[100, "custom-handling-of-levels"]], "Configuration server example": [[100, "configuration-server-example"]], "Dealing with handlers that block": [[100, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[100, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[100, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[100, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[100, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[100, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[100, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[100, "use-of-contextvars"]], "Imparting contextual information in handlers": [[100, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[100, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[100, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[100, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[100, "using-file-rotation"]], "Use of alternative formatting styles": [[100, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[100, "customizing-logrecord"]], "Subclassing QueueHandler - a ZeroMQ example": [[100, "subclassing-queuehandler-a-zeromq-example"]], "Subclassing QueueListener - a ZeroMQ example": [[100, "subclassing-queuelistener-a-zeromq-example"]], "An example dictionary-based configuration": [[100, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[100, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[100, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[100, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[100, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[100, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[100, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[100, "using-logrecord-factories"]], "Using custom message objects": [[100, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[100, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[100, "customized-exception-formatting"]], "Speaking logging messages": [[100, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[100, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[100, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[100, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[100, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[100, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[100, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[100, "logging-to-syslog-with-rfc5424-support"]], "How to treat a logger like an output stream": [[100, "how-to-treat-a-logger-like-an-output-stream"]], "Patterns to avoid": [[100, "patterns-to-avoid"]], "Opening the same log file multiple times": [[100, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[100, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[100, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[100, "creating-a-lot-of-loggers"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[73, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[73, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[73, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[73, "embedding-the-cpython-runtime-in-a-larger-application"]], "\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6": [[70, "building-c-and-c-extensions"]], "Building C and C++ Extensions with setuptools": [[70, "building-c-and-c-extensions-with-setuptools"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[71, "embedding-python-in-another-application"]], "Very High Level Embedding": [[71, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[71, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[71, "pure-embedding"]], "Extending Embedded Python": [[71, "extending-embedded-python"]], "Embedding Python in C++": [[71, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[71, "compiling-and-linking-under-unix-like-systems"]], "Argument Clinic How-To": [[89, "argument-clinic-how-to"]], "Background": [[89, "background"], [98, "background"], [289, "background"]], "Basic concepts": [[89, "basic-concepts"]], "Reference": [[89, "reference"], [409, "reference"], [409, "id4"], [337, "reference"], [280, "reference"]], "Terminology": [[89, "terminology"], [289, "terminology"]], "Command-line interface": [[89, "command-line-interface"], [337, "command-line-interface"]], "Classes for extending Argument Clinic": [[89, "module-clinic"]], "Tutorial": [[89, "tutorial"], [409, "tutorial"], [380, "tutorial"], [337, "tutorial"], [289, "tutorial"]], "How-to guides": [[89, "how-to-guides"], [337, "how-to-guides"]], "How to rename C functions and variables generated by Argument Clinic": [[89, "how-to-rename-c-functions-and-variables-generated-by-argument-clinic"]], "How to convert functions using PyArg_UnpackTuple": [[89, "how-to-convert-functions-using-pyarg-unpacktuple"]], "How to use optional groups": [[89, "how-to-use-optional-groups"]], "How to use real Argument Clinic converters, instead of \"legacy converters\"": [[89, "how-to-use-real-argument-clinic-converters-instead-of-legacy-converters"]], "How to use the Py_buffer converter": [[89, "how-to-use-the-py-buffer-converter"]], "How to use advanced converters": [[89, "how-to-use-advanced-converters"]], "How to assign default values to parameter": [[89, "how-to-assign-default-values-to-parameter"]], "The NULL default value": [[89, "the-null-default-value"]], "Symbolic default values": [[89, "symbolic-default-values"]], "Expressions as default values": [[89, "expressions-as-default-values"]], "How to use return converters": [[89, "how-to-use-return-converters"]], "How to clone existing functions": [[89, "how-to-clone-existing-functions"]], "How to call Python code": [[89, "how-to-call-python-code"]], "How to use the \"self converter\"": [[89, "how-to-use-the-self-converter"]], "How to use the \"defining class\" converter": [[89, "how-to-use-the-defining-class-converter"]], "How to write a custom converter": [[89, "how-to-write-a-custom-converter"]], "How to write a custom return converter": [[89, "how-to-write-a-custom-return-converter"]], "How to convert METH_O and METH_NOARGS functions": [[89, "how-to-convert-meth-o-and-meth-noargs-functions"]], "How to convert tp_new and tp_init functions": [[89, "how-to-convert-tp-new-and-tp-init-functions"]], "How to change and redirect Clinic's output": [[89, "how-to-change-and-redirect-clinic-s-output"]], "How to use the #ifdef trick": [[89, "how-to-use-the-ifdef-trick"]], "How to use Argument Clinic in Python files": [[89, "how-to-use-argument-clinic-in-python-files"]], "Isolating Extension Modules": [[98, "isolating-extension-modules"]], "Abstract": [[98, null]], "Who should read this": [[98, "who-should-read-this"]], "Enter Per-Module State": [[98, "enter-per-module-state"]], "Isolated Module Objects": [[98, "isolated-module-objects"]], "Surprising Edge Cases": [[98, "surprising-edge-cases"]], "Making Modules Safe with Multiple Interpreters": [[98, "making-modules-safe-with-multiple-interpreters"]], "Managing Global State": [[98, "managing-global-state"]], "Managing Per-Module State": [[98, "managing-per-module-state"]], "Opt-Out: Limiting to One Module Object per Process": [[98, "opt-out-limiting-to-one-module-object-per-process"]], "Module State Access from Functions": [[98, "module-state-access-from-functions"]], "Heap Types": [[98, "heap-types"], [62, "heap-types"]], "Changing Static Types to Heap Types": [[98, "changing-static-types-to-heap-types"]], "Defining Heap Types": [[98, "defining-heap-types"]], "Garbage-Collection Protocol": [[98, "garbage-collection-protocol"]], "Module State Access from Classes": [[98, "module-state-access-from-classes"]], "Module State Access from Regular Methods": [[98, "module-state-access-from-regular-methods"]], "Module State Access from Slot Methods, Getters and Setters": [[98, "module-state-access-from-slot-methods-getters-and-setters"]], "Lifetime of the Module State": [[98, "lifetime-of-the-module-state"]], "Open Issues": [[98, "open-issues"]], "Per-Class Scope": [[98, "per-class-scope"]], "Lossless Conversion to Heap Types": [[98, "lossless-conversion-to-heap-types"]], "Instrumenting CPython with DTrace and SystemTap": [[96, "instrumenting-cpython-with-dtrace-and-systemtap"]], "Enabling the static markers": [[96, "enabling-the-static-markers"]], "Static DTrace probes": [[96, "static-dtrace-probes"]], "Static SystemTap markers": [[96, "static-systemtap-markers"]], "Available static markers": [[96, "available-static-markers"]], "SystemTap Tapsets": [[96, "systemtap-tapsets"]], "\u7bc4\u4f8b": [[96, "examples"], [33, "example"], [135, "examples"], [134, "examples"], [131, "examples"], [132, "examples"], [118, "example"], [124, "examples"], [41, "examples"], [62, "examples"], [409, "example"], [409, "id3"], [417, "examples"], [419, "examples"], [394, "example"], [403, "examples"], [398, "example"], [378, "examples"], [375, "examples"], [374, "examples"], [356, "examples"], [363, "examples"], [357, "example"], [344, "examples"], [352, "examples"], [354, "examples"], [335, "examples"], [338, "examples"], [326, "examples"], [311, "example"], [327, "example"], [330, "examples"], [317, "example"], [315, "examples"], [334, "example"], [306, "example"], [296, "example"], [296, "examples"], [280, "examples"], [301, "examples"], [304, "example"], [240, "examples"], [247, "examples"], [239, "examples"], [268, "examples"], [241, "example"], [267, "examples"], [211, "example"], [232, "examples"], [237, "examples"], [172, "examples"], [170, "examples"], [145, "examples"], [169, "example"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[83, "library-and-extension-faq"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[83, "general-library-questions"]], "How do I find a module or application to perform task X?": [[83, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u4f86\u6e90\u6a94\u6848\uff1f": [[83, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[83, "how-do-i-make-a-python-script-executable-on-unix"]], "\u662f\u5426\u6709\u9069\u7528\u65bc Python \u7684 curses/termcap \u5957\u4ef6\uff1f": [[83, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[83, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[83, "why-don-t-my-signal-handlers-work"]], "\u5e38\u898b\u8ab2\u984c": [[83, "common-tasks"]], "\u5982\u4f55\u6e2c\u8a66 Python \u7a0b\u5f0f\u6216\u5143\u4ef6\uff1f": [[83, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[83, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[83, "how-do-i-get-a-single-keypress-at-a-time"]], "\u57f7\u884c\u7dd2": [[83, "threads"]], "\u5982\u4f55\u4f7f\u7528\u57f7\u884c\u7dd2\u7de8\u5beb\u7a0b\u5f0f\uff1f": [[83, "how-do-i-program-using-threads"]], "\u6211\u7684\u57f7\u884c\u7dd2\u4f3c\u4e4e\u90fd\u6c92\u6709\u904b\u884c\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[83, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[83, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[83, "what-kinds-of-global-value-mutation-are-thread-safe"]], "\u4e0d\u80fd\u64fa\u812b\u5168\u5c40\u76f4\u8b6f\u5668\u9396\u55ce\uff1f": [[83, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "\u8f38\u5165\u8207\u8f38\u51fa": [[83, "input-and-output"]], "\u5982\u4f55\u522a\u9664\u6a94\u6848\uff1f\uff08\u4ee5\u53ca\u5176\u4ed6\u6a94\u6848\u554f\u984c...\uff09": [[83, "how-do-i-delete-a-file-and-other-file-questions"]], "\u5982\u4f55\u8907\u88fd\u6a94\u6848\uff1f": [[83, "how-do-i-copy-a-file"]], "\u5982\u4f55\u8b80\u53d6\uff08\u6216\u5beb\u5165\uff09\u4e8c\u9032\u4f4d\u5236\u8cc7\u6599\uff1f": [[83, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[83, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "\u5982\u4f55\u5b58\u53d6\u5e8f\u5217 (RS232) \u9023\u63a5\u57e0\uff1f": [[83, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[83, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "\u7db2\u8def (Network)/\u7db2\u969b\u7db2\u8def (Internet) \u7a0b\u5f0f": [[83, "network-internet-programming"]], "Python \u6709\u54ea\u4e9b WWW \u5de5\u5177\uff1f": [[83, "what-www-tools-are-there-for-python"]], "\u5982\u4f55\u6a21\u64ec CGI \u8868\u55ae\u9001\u51fa (submission) (METHOD=POST)\uff1f": [[83, "how-can-i-mimic-cgi-form-submission-method-post"]], "\u6211\u61c9\u8a72\u4f7f\u7528\u4ec0\u9ebc\u6a21\u7d44\u4f86\u8f14\u52a9\u7522\u751f HTML\uff1f": [[83, "what-module-should-i-use-to-help-with-generating-html"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u767c\u9001\u90f5\u4ef6\uff1f": [[83, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[83, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "\u8cc7\u6599\u5eab": [[83, "databases"]], "Python \u4e2d\u662f\u5426\u6709\u4efb\u4f55\u8cc7\u6599\u5eab\u5957\u4ef6\u7684\u4ecb\u9762\uff1f": [[83, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[83, "how-do-you-implement-persistent-objects-in-python"]], "\u6578\u5b78\u548c\u6578\u503c": [[83, "mathematics-and-numerics"]], "\u5982\u4f55\u5728 Python \u4e2d\u751f\u6210\u96a8\u6a5f\u6578\uff1f": [[83, "how-do-i-generate-random-numbers-in-python"]], "Python \u5e38\u898b\u554f\u984c": [[81, "python-frequently-asked-questions"]], "\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[94, "functional-programming-howto"]], "\u7c21\u4ecb": [[94, "introduction"], [107, "introduction"], [108, "introduction"], [103, "introduction"], [34, "introduction"], [430, "introduction"], [458, "introduction"], [460, "introduction"], [449, "introduction"], [459, "introduction"], [326, "introduction"], [280, "introduction"], [247, "introduction"], [254, "introduction"], [149, "introduction"]], "Formal provability": [[94, "formal-provability"]], "Modularity": [[94, "modularity"]], "Ease of debugging and testing": [[94, "ease-of-debugging-and-testing"]], "Composability": [[94, "composability"]], "Iterators": [[94, "iterators"]], "Data Types That Support Iterators": [[94, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[94, "generator-expressions-and-list-comprehensions"]], "Generators": [[94, "generators"]], "Passing values into a generator": [[94, "passing-values-into-a-generator"]], "Built-in functions": [[94, "built-in-functions"]], "The itertools module": [[94, "the-itertools-module"]], "Creating new iterators": [[94, "creating-new-iterators"]], "Calling functions on elements": [[94, "calling-functions-on-elements"]], "Selecting elements": [[94, "selecting-elements"]], "Combinatoric functions": [[94, "combinatoric-functions"]], "Grouping elements": [[94, "grouping-elements"]], "The functools module": [[94, "the-functools-module"]], "The operator module": [[94, "the-operator-module"]], "Small functions and the lambda expression": [[94, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[94, "revision-history-and-acknowledgements"]], "References": [[94, "references"], [106, "references"], [106, "id2"], [106, "id3"], [428, "references"]], "General": [[94, "general"]], "Python-specific": [[94, "python-specific"]], "Python \u8aaa\u660e\u6587\u4ef6": [[94, "python-documentation"]], "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6": [[78, "extending-embedding-faq"]], "\u6211\u53ef\u4ee5\u5728 C \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[78, "can-i-create-my-own-functions-in-c"]], "\u6211\u53ef\u4ee5\u5728 C++ \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[78, "id2"]], "\u5beb C \u5f88\u96e3\uff1b\u9084\u6709\u5176\u4ed6\u9078\u64c7\u55ce\uff1f": [[78, "writing-c-is-hard-are-there-any-alternatives"]], "\u5982\u4f55\u5f9e C \u57f7\u884c\u4efb\u610f Python \u9673\u8ff0\u5f0f\uff1f": [[78, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[78, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "\u5982\u4f55\u5f9e Python \u7269\u4ef6\u4e2d\u63d0\u53d6 C \u503c\uff1f": [[78, "how-do-i-extract-c-values-from-a-python-object"]], "\u5982\u4f55\u4f7f\u7528 Py_BuildValue() \u5efa\u7acb\u4efb\u610f\u9577\u5ea6\u7684\u5143\u7d44\uff1f": [[78, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "\u5982\u4f55\u5f9e C \u547c\u53eb\u7269\u4ef6\u7684\u65b9\u6cd5\uff1f": [[78, "how-do-i-call-an-object-s-method-from-c"]], "\u6211\u5982\u4f55\u6355\u6349 PyErr_Print() \u7684\u8f38\u51fa\uff08\u6216\u4efb\u4f55\u5370\u51fa\u5230 stdout/stderr \u7684\u6771\u897f\uff09\uff1f": [[78, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "\u5982\u4f55\u5f9e C \u5b58\u53d6\u7528 Python \u7de8\u5beb\u7684\u6a21\u7d44\uff1f": [[78, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[78, "how-do-i-interface-to-c-objects-from-python"]], "\u6211\u4f7f\u7528\u5b89\u88dd\u6a94\u6848\u65b0\u589e\u4e86\u4e00\u500b\u6a21\u7d44\uff0c\u4f46 make \u5931\u6557\u4e86\uff1b\u70ba\u4ec0\u9ebc\uff1f": [[78, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "\u5982\u4f55\u70ba\u64f4\u5145\u5957\u4ef6\u9664\u932f\uff1f": [[78, "how-do-i-debug-an-extension"]], "\u6211\u60f3\u5728\u6211\u7684 Linux \u7cfb\u7d71\u4e0a\u7de8\u8b6f\u4e00\u500b Python \u6a21\u7d44\uff0c\u4f46\u662f\u7f3a\u5c11\u4e00\u4e9b\u6a94\u6848\u3002\u70ba\u4ec0\u9ebc\uff1f": [[78, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "\u5982\u4f55\u5f9e\u300c\u7121\u6548\u8f38\u5165\u300d\u5340\u5206\u51fa\u300c\u4e0d\u5b8c\u6574\u8f38\u5165\u300d\uff1f": [[78, "how-do-i-tell-incomplete-input-from-invalid-input"]], "\u5982\u4f55\u627e\u5230\u672a\u5b9a\u7fa9\u7684 g++ \u7b26\u865f __builtin_new \u6216 __pure_virtual\uff1f": [[78, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[78, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[97, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[97, null]], "Creating Address/Network/Interface objects": [[97, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[97, "a-note-on-ip-versions"]], "IP Host Addresses": [[97, "ip-host-addresses"]], "Defining Networks": [[97, "defining-networks"]], "Host Interfaces": [[97, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[97, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[97, "networks-as-lists-of-addresses"]], "Comparisons": [[97, "comparisons"], [93, "comparisons"], [426, "comparisons"], [341, "comparisons"]], "Using IP Addresses with other modules": [[97, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[97, "getting-more-detail-when-instance-creation-fails"]], "Defining Extension Types: Tutorial": [[75, "defining-extension-types-tutorial"]], "The Basics": [[75, "the-basics"]], "Adding data and methods to the Basic example": [[75, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[75, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[75, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[75, "subclassing-other-types"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[84, "programming-faq"]], "\u5e38\u898b\u554f\u984c": [[84, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[84, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[84, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "How can I create a stand-alone binary from a Python script?": [[84, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Are there coding standards or a style guide for Python programs?": [[84, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "Core Language": [[84, "core-language"]], "Why am I getting an UnboundLocalError when the variable has a value?": [[84, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[84, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[84, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "How do I share global variables across modules?": [[84, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[84, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[84, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[84, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "\u5f15\u6578 (arguments) \u548c\u53c3\u6578 (parameters) \u6709\u4ec0\u9ebc\u5340\u5225\uff1f": [[84, "what-is-the-difference-between-arguments-and-parameters"]], "\u70ba\u4ec0\u9ebc\u66f4\u6539 list 'y' \u4e5f\u6703\u66f4\u6539 list 'x'\uff1f": [[84, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[84, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[84, "how-do-you-make-a-higher-order-function-in-python"]], "\u5982\u4f55\u5728 Python \u4e2d\u8907\u88fd\u7269\u4ef6\uff1f": [[84, "how-do-i-copy-an-object-in-python"]], "\u5982\u4f55\u627e\u5230\u7269\u4ef6\u7684\u65b9\u6cd5\u6216\u5c6c\u6027\uff1f": [[84, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "\u6211\u7684\u7a0b\u5f0f\u78bc\u5982\u4f55\u767c\u73fe\u7269\u4ef6\u7684\u540d\u7a31\uff1f": [[84, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[84, "what-s-up-with-the-comma-operator-s-precedence"]], "\u662f\u5426\u6709\u7b49\u6548\u65bc C \u7684 \"?:\" \u4e09\u5143\u904b\u7b97\u5b50\uff1f": [[84, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[84, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[84, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "\u6578\u5b57\u548c\u5b57\u4e32": [[84, "numbers-and-strings"]], "\u5982\u4f55\u6307\u5b9a\u5341\u516d\u9032\u4f4d\u548c\u516b\u9032\u4f4d\u6574\u6578\uff1f": [[84, "how-do-i-specify-hexadecimal-and-octal-integers"]], "\u70ba\u4ec0\u9ebc -22 // 10 \u56de\u50b3 -3\uff1f": [[84, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[84, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "\u5982\u4f55\u5c07\u5b57\u4e32\u8f49\u63db\u70ba\u6578\u5b57\uff1f": [[84, "how-do-i-convert-a-string-to-a-number"]], "\u5982\u4f55\u5c07\u6578\u5b57\u8f49\u63db\u70ba\u5b57\u4e32\uff1f": [[84, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[84, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[84, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[84, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[84, "is-there-a-scanf-or-sscanf-equivalent"]], "'UnicodeDecodeError' \u6216 'UnicodeEncodeErro' \u932f\u8aa4\u662f\u4ec0\u9ebc\u610f\u601d\uff1f": [[84, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Can I end a raw string with an odd number of backslashes?": [[84, "can-i-end-a-raw-string-with-an-odd-number-of-backslashes"]], "Performance": [[84, "performance"], [466, "performance"], [296, "performance"], [255, "performance"]], "My program is too slow. How do I speed it up?": [[84, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[84, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[84, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[84, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[84, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[84, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[84, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[84, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[84, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[84, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method or function to a sequence of objects?": [[84, "how-do-i-apply-a-method-or-function-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[84, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[84, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[84, "how-can-i-sort-one-list-by-values-from-another-list"]], "\u7269\u4ef6": [[84, "objects"]], "\u4ec0\u9ebc\u662f\u985e\u5225 (class)\uff1f": [[84, "what-is-a-class"]], "\u4ec0\u9ebc\u662f\u65b9\u6cd5 (method)\uff1f": [[84, "what-is-a-method"]], "What is self?": [[84, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[84, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[84, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[84, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[84, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[84, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[84, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[84, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[84, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[84, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[84, "why-does-the-result-of-id-appear-to-be-not-unique"]], "When can I rely on identity tests with the is operator?": [[84, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "\u5b50\u985e\u5225\u5982\u4f55\u63a7\u5236\u4e0d\u53ef\u8b8a\u5be6\u4f8b\u4e2d\u5b58\u5132\u7684\u8cc7\u6599\uff1f": [[84, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[84, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[84, "modules"], [426, "examples"], [469, "modules"], [341, "modules"]], "How do I create a .pyc file?": [[84, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[84, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[84, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') \u56de\u50b3 <module 'x'>\uff0c\u90a3\u6211\u600e\u9ebc\u5f97\u5230 z\uff1f": [[84, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "When I edit an imported module and reimport it, the changes don't show up.  Why does this happen?": [[84, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "\u7248\u6b0a\u5ba3\u544a": [[68, "copyright"]], "Annotations Best Practices": [[87, "annotations-best-practices"]], "Accessing The Annotations Dict Of An Object In Python 3.10 And Newer": [[87, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "Accessing The Annotations Dict Of An Object In Python 3.9 And Older": [[87, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "Manually Un-Stringizing Stringized Annotations": [[87, "manually-un-stringizing-stringized-annotations"]], "Best Practices For __annotations__ In Any Python Version": [[87, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ Quirks": [[87, "annotations-quirks"]], "\u767c\u5e03 Python \u6a21\u7d44": [[69, "distributing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[69, "key-terms"], [109, "key-terms"]], "\u958b\u6e90\u6388\u6b0a\u8207\u5354\u540c\u5408\u4f5c": [[69, "open-source-licensing-and-collaboration"]], "\u5b89\u88dd\u5de5\u5177": [[69, "installing-the-tools"]], "\u95b1\u8b80 Python \u5c01\u88dd\u4f7f\u7528\u8005\u6307\u5357": [[69, "reading-the-python-packaging-user-guide"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[69, "how-do-i"], [109, "how-do-i"]], "...\u70ba\u6211\u7684\u5c08\u6848\u9078\u64c7\u4e00\u500b\u540d\u7a31\uff1f": [[69, "choose-a-name-for-my-project"]], "...\u5efa\u7acb\u548c\u767c\u5e03\u4e8c\u9032\u5236\u64f4\u5145\uff1f": [[69, "create-and-distribute-binary-extensions"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[79, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[79, "general-information"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[79, "what-is-python"], [82, "what-is-python"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[79, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[79, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[79, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[79, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[79, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[79, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[79, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[79, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[79, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[79, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[79, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[79, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[79, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[79, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[79, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[79, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[79, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[79, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[79, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[79, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[79, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[79, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[79, "is-python-a-good-language-for-beginning-programmers"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[82, "why-is-python-installed-on-my-computer-faq"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[82, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[82, "can-i-delete-python"]], "Building C and C++ Extensions on Windows": [[76, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[76, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[76, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[76, "using-dlls-in-practice"]], "Enum HOWTO": [[93, "enum-howto"]], "Programmatic access to enumeration members and their attributes": [[93, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[93, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[93, "ensuring-unique-enumeration-values"]], "Using automatic values": [[93, "using-automatic-values"]], "Iteration": [[93, "iteration"], [256, "iteration"]], "Allowed members and attributes of enumerations": [[93, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[93, "restricted-enum-subclassing"]], "Dataclass support": [[93, "dataclass-support"]], "Pickling": [[93, "pickling"]], "Functional API": [[93, "functional-api"], [248, "functional-api"]], "Derived Enumerations": [[93, "derived-enumerations"]], "IntEnum": [[93, "intenum"]], "StrEnum": [[93, "strenum"]], "IntFlag": [[93, "intflag"]], "Flag": [[93, "flag"]], "Others": [[93, "others"]], "When to use __new__() vs. __init__()": [[93, "when-to-use-new-vs-init"]], "Finer Points": [[93, "finer-points"]], "Supported __dunder__ names": [[93, "supported-dunder-names"], [208, "supported-dunder-names"]], "Supported _sunder_ names": [[93, "supported-sunder-names"], [208, "supported-sunder-names"]], "_Private__names": [[93, "private-names"]], "Enum member type": [[93, "enum-member-type"]], "Creating members that are mixed with other data types": [[93, "creating-members-that-are-mixed-with-other-data-types"]], "Boolean value of Enum classes and members": [[93, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[93, "enum-classes-with-methods"]], "Combining members of Flag": [[93, "combining-members-of-flag"]], "Flag and IntFlag minutia": [[93, "flag-and-intflag-minutia"]], "How are Enums and Flags different?": [[93, "how-are-enums-and-flags-different"]], "Enum Classes": [[93, "enum-classes"]], "Flag Classes": [[93, "flag-classes"]], "Enum Members (aka instances)": [[93, "enum-members-aka-instances"]], "Flag Members": [[93, "flag-members"]], "Enum Cookbook": [[93, "enum-cookbook"]], "Omitting values": [[93, "omitting-values"]], "Using auto": [[93, "using-auto"]], "Using object": [[93, "using-object"]], "Using a descriptive string": [[93, "using-a-descriptive-string"]], "Using a custom __new__()": [[93, "using-a-custom-new"]], "OrderedEnum": [[93, "orderedenum"]], "DuplicateFreeEnum": [[93, "duplicatefreeenum"]], "Planet": [[93, "planet"]], "TimePeriod": [[93, "timeperiod"]], "Subclassing EnumType": [[93, "subclassing-enumtype"]], "Curses Programming with Python": [[91, "curses-programming-with-python"]], "What is curses?": [[91, "what-is-curses"]], "The Python curses module": [[91, "the-python-curses-module"]], "Starting and ending a curses application": [[91, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[91, "windows-and-pads"]], "Displaying Text": [[91, "displaying-text"]], "Attributes and Color": [[91, "attributes-and-color"]], "User Input": [[91, "user-input"]], "For More Information": [[91, "for-more-information"]], "Python support for the Linux perf profiler": [[101, "python-support-for-the-linux-perf-profiler"]], "How to enable perf profiling support": [[101, "how-to-enable-perf-profiling-support"]], "How to obtain the best results": [[101, "how-to-obtain-the-best-results"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[95, "python-howtos"]], "Argparse \u6559\u5b78": [[88, "argparse-tutorial"]], "\u6982\u5ff5": [[88, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[88, "the-basics"], [109, "basic-usage"], [259, "basic-usage"]], "\u4ecb\u7d39\u4f4d\u7f6e\u53c3\u6578": [[88, "introducing-positional-arguments"]], "\u4ecb\u7d39\u9078\u9805\u53c3\u6578": [[88, "introducing-optional-arguments"]], "Short options": [[88, "short-options"]], "\u73fe\u5728\u7d50\u5408\u4f4d\u7f6e\u8207\u9078\u9805\u53c3\u6578": [[88, "combining-positional-and-optional-arguments"]], "Getting a little more advanced": [[88, "getting-a-little-more-advanced"]], "Specifying ambiguous arguments": [[88, "specifying-ambiguous-arguments"]], "Conflicting options": [[88, "conflicting-options"]], "How to translate the argparse output": [[88, "how-to-translate-the-argparse-output"]], "\u7d50\u8ad6": [[88, "conclusion"]], "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [289, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "\u5176\u4ed6\u7269\u4ef6": [[5, "other-objects"], [16, "other-objects"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)": [[9, "bytes-objects"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "\u5177\u9ad4\u7269\u4ef6\u5c64": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [309, "function-objects"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "\u6a94\u6848\u7269\u4ef6 (File Objects)": [[24, "file-objects"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "Frame Objects": [[26, "frame-objects"]], "Internal Frames": [[26, "internal-frames"]], "Supporting Cyclic Garbage Collection": [[28, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[28, "controlling-the-garbage-collector-state"]], "Querying Garbage Collector State": [[28, "querying-garbage-collector-state"]], "Python Initialization Configuration": [[33, "python-initialization-configuration"]], "PyWideStringList": [[33, "pywidestringlist"]], "PyStatus": [[33, "pystatus"]], "PyPreConfig": [[33, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[33, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[33, "pyconfig"]], "Initialization with PyConfig": [[33, "initialization-with-pyconfig"]], "Isolated Configuration": [[33, "isolated-configuration"]], "Python Configuration": [[33, "python-configuration"]], "Python Path Configuration": [[33, "python-path-configuration"]], "Py_RunMain()": [[33, "py-runmain"]], "Py_GetArgcArgv()": [[33, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[33, "multi-phase-initialization-private-provisional-api"]], "\u7a0b\u5f0f\u78bc\u7269\u4ef6": [[13, "code-objects"]], "Extra information": [[13, "extra-information"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "\u5f15\u5165\u6a21\u7d44": [[30, "importing-modules"], [277, "importing-modules"]], "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6": [[3, "allocating-objects-on-the-heap"]], "API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "\u7522\u751f\u5668 (Generator) \u7269\u4ef6": [[29, "generator-objects"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)": [[27, "function-objects"]], "Initialization, Finalization, and Threads": [[32, "initialization-finalization-and-threads"]], "Before Python Initialization": [[32, "before-python-initialization"]], "Global configuration variables": [[32, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[32, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[32, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[32, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[32, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[32, "non-python-created-threads"]], "Cautions about fork()": [[32, "cautions-about-fork"]], "\u9ad8\u968e API": [[32, "high-level-api"], [121, null]], "\u4f4e\u968e API": [[32, "low-level-api"], [121, null]], "Sub-interpreter support": [[32, "sub-interpreter-support"]], "A Per-Interpreter GIL": [[32, "a-per-interpreter-gil"]], "Bugs and caveats": [[32, "bugs-and-caveats"]], "Asynchronous Notifications": [[32, "asynchronous-notifications"]], "Profiling and Tracing": [[32, "profiling-and-tracing"]], "Advanced Debugger Support": [[32, "advanced-debugger-support"]], "Thread Local Storage Support": [[32, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[32, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[32, "dynamic-allocation"]], "\u65b9\u6cd5": [[32, "methods"]], "Thread Local Storage (TLS) API": [[32, "thread-local-storage-tls-api"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f": [[14, "codec-registry-and-support-functions"]], "\u7de8\u89e3\u78bc\u5668\u67e5\u627e API": [[14, "codec-lookup-api"]], "\u7528\u65bc Unicode \u7de8\u78bc\u932f\u8aa4\u8655\u7406\u7a0b\u5f0f\u7684\u8a3b\u518a API": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "Context Variables Objects": [[17, "context-variables-objects"]], "\u4f4d\u5143\u7d44\u4e32\u5217\u7269\u4ef6 (Byte Array Objects)": [[8, "byte-array-objects"]], "Type check macros": [[8, "type-check-macros"]], "Direct API functions": [[8, "direct-api-functions"]], "\u5de8\u96c6": [[8, "macros"]], "\u8907\u6578\u7269\u4ef6": [[15, "complex-number-objects"]], "\u4f5c\u70ba C \u7d50\u69cb\u7684\u8907\u6578": [[15, "complex-numbers-as-c-structures"]], "\u4f5c\u70ba Python \u7269\u4ef6\u7684\u8907\u6578": [[15, "complex-numbers-as-python-objects"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [384, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"], [163, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Pack and Unpack functions": [[25, "pack-and-unpack-functions"]], "Pack functions": [[25, "pack-functions"]], "Unpack functions": [[25, "unpack-functions"]], "Capsules": [[11, "capsules"], [465, "capsules"]], "Python/C API \u53c3\u8003\u624b\u518a": [[31, "python-c-api-reference-manual"]], "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357": [[104, "socket-programming-howto"]], "Sockets": [[104, "sockets"], [422, "sockets"]], "\u6b77\u53f2": [[104, "history"]], "\u5efa\u7acb\u4e00\u500b Socket": [[104, "creating-a-socket"]], "IPC": [[104, "ipc"]], "\u4f7f\u7528\u4e00\u500b Socket": [[104, "using-a-socket"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599": [[104, "binary-data"]], "\u7d50\u675f\u9023\u7dda": [[104, "disconnecting"]], "When Sockets Die": [[104, "when-sockets-die"]], "Non-blocking Sockets": [[104, "non-blocking-sockets"]], "__main__ --- Top-level code environment": [[112, "module-__main__"]], "__name__ == '__main__'": [[112, "name-main"]], "What is the \"top-level code environment\"?": [[112, "what-is-the-top-level-code-environment"]], "Idiomatic Usage": [[112, "idiomatic-usage"], [112, "id1"]], "Packaging Considerations": [[112, "packaging-considerations"]], "__main__.py in Python Packages": [[112, "main-py-in-python-packages"]], "import __main__": [[112, "import-main"]], "\u5b50\u884c\u7a0b": [[135, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[135, "creating-subprocesses"]], "\u5e38\u6578": [[135, "constants"], [401, "constants"], [382, "constant"], [338, "constants"], [334, "constants"], [272, "constants"], [232, "constants"], [183, "constants"], [180, "constants"], [152, "constants"]], "Interacting with Subprocesses": [[135, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[135, "subprocess-and-threads"]], "\u5b89\u88dd Python \u6a21\u7d44": [[109, "installing-python-modules"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[109, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[109, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[109, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[109, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[109, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[109, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[109, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[109, "installing-binary-extensions"]], "\u4e32\u6d41": [[134, "streams"]], "StreamReader": [[134, "streamreader"]], "StreamWriter": [[134, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[134, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[134, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[134, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[134, "register-an-open-socket-to-wait-for-data-using-streams"]], "\u5982\u4f55\u6392\u5e8f": [[105, "sorting-how-to"]], "\u57fa\u790e\u6392\u5e8f": [[105, "sorting-basics"]], "\u9375\u51fd\u5f0f (key functions)": [[105, "key-functions"]], "Operator \u6a21\u7d44\u7684\u51fd\u5f0f": [[105, "operator-module-functions"]], "\u5347\u51aa\u8207\u964d\u51aa": [[105, "ascending-and-descending"]], "\u6392\u5e8f\u7a69\u5b9a\u6027\u8207\u8907\u5408\u6392\u5e8f": [[105, "sort-stability-and-complex-sorts"]], "Decorate-Sort-Undecorate": [[105, "decorate-sort-undecorate"]], "Comparison Functions": [[105, "comparison-functions"]], "Odds and Ends": [[105, "odds-and-ends"]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[107, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[107, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[107, "fetching-urls"]], "Data": [[107, "data"]], "Headers": [[107, "headers"]], "Handling Exceptions": [[107, "handling-exceptions"]], "URLError": [[107, "urlerror"]], "HTTPError": [[107, "httperror"]], "Error Codes": [[107, "error-codes"]], "Wrapping it Up": [[107, "wrapping-it-up"]], "Number 1": [[107, "number-1"]], "Number 2": [[107, "number-2"]], "info and geturl": [[107, "info-and-geturl"]], "Openers and Handlers": [[107, "openers-and-handlers"]], "Basic Authentication": [[107, "id5"]], "Proxies": [[107, "proxies"]], "Sockets and Layers": [[107, "sockets-and-layers"]], "\u8a3b\u89e3": [[107, "footnotes"], [345, "notes"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[121, "module-asyncio"]], "Hello World!": [[121, null]], "\u6307\u5357\u8207\u6559\u5b78": [[121, null]], "\u4f4e\u968e API \u7d22\u5f15": [[128, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[128, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[128, "event-loop-methods"]], "\u50b3\u8f38": [[128, "transports"]], "\u5354\u5b9a": [[128, "protocols"], [382, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[128, "event-loop-policies"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[119, "module-array"]], "__future__ --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9": [[111, "module-__future__"]], "\u5b89\u88dd Python \u6a21\u7d44\uff08\u820a\u7248\uff09": [[108, "installing-python-modules-legacy-version"]], "Distutils based source distributions": [[108, "distutils-based-source-distributions"]], "Standard Build and Install": [[108, "standard-build-and-install"]], "Platform variations": [[108, "platform-variations"]], "Splitting the job up": [[108, "splitting-the-job-up"]], "How building works": [[108, "how-building-works"]], "How installation works": [[108, "how-installation-works"]], "Alternate Installation": [[108, "alternate-installation"]], "Alternate installation: the user scheme": [[108, "alternate-installation-the-user-scheme"]], "Alternate installation: the home scheme": [[108, "alternate-installation-the-home-scheme"]], "Alternate installation: Unix (the prefix scheme)": [[108, "alternate-installation-unix-the-prefix-scheme"]], "Alternate installation: Windows (the prefix scheme)": [[108, "alternate-installation-windows-the-prefix-scheme"]], "Custom Installation": [[108, "custom-installation"]], "Modifying Python's Search Path": [[108, "modifying-python-s-search-path"]], "Distutils Configuration Files": [[108, "distutils-configuration-files"]], "Location and names of config files": [[108, "location-and-names-of-config-files"]], "Syntax of config files": [[108, "syntax-of-config-files"]], "Building Extensions: Tips and Tricks": [[108, "building-extensions-tips-and-tricks"]], "Tweaking compiler/linker flags": [[108, "tweaking-compiler-linker-flags"]], "Using non-Microsoft compilers on Windows": [[108, "using-non-microsoft-compilers-on-windows"]], "Borland/CodeGear C++": [[108, "borland-codegear-c"]], "GNU C / Cygwin / MinGW": [[108, "gnu-c-cygwin-mingw"]], "Older Versions of Python and MinGW": [[108, "older-versions-of-python-and-mingw"]], "Extending": [[126, "extending"]], "Writing a Custom Event Loop": [[126, "writing-a-custom-event-loop"]], "Future and Task private constructors": [[126, "future-and-task-private-constructors"]], "Task lifetime support": [[126, "task-lifetime-support"]], "Transports and Protocols": [[131, "transports-and-protocols"]], "Transports": [[131, "transports"]], "Transports Hierarchy": [[131, "transports-hierarchy"]], "Base Transport": [[131, "base-transport"]], "Read-only Transports": [[131, "read-only-transports"]], "Write-only Transports": [[131, "write-only-transports"]], "Datagram Transports": [[131, "datagram-transports"]], "Subprocess Transports": [[131, "subprocess-transports"]], "Protocols": [[131, "protocols"]], "Base Protocols": [[131, "base-protocols"]], "Base Protocol": [[131, "base-protocol"]], "Streaming Protocols": [[131, "streaming-protocols"]], "Buffered Streaming Protocols": [[131, "buffered-streaming-protocols"]], "Datagram Protocols": [[131, "datagram-protocols"]], "Subprocess Protocols": [[131, "subprocess-protocols"]], "TCP Echo Server": [[131, "tcp-echo-server"]], "TCP Echo Client": [[131, "tcp-echo-client"]], "UDP Echo Server": [[131, "udp-echo-server"]], "UDP Echo Client": [[131, "udp-echo-client"]], "Connecting Existing Sockets": [[131, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[131, "loop-subprocess-exec-and-subprocessprotocol"]], "\u4f47\u5217 (Queues)": [[132, "queues"], [122, "queues"]], "Queue": [[132, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[132, "priority-queue"]], "LIFO Queue": [[132, "lifo-queue"]], "\u4f8b\u5916": [[132, "exceptions"], [125, "exceptions"], [122, "exceptions"], [34, "exceptions"], [409, "exceptions"], [425, "exceptions"], [404, "exceptions"], [406, "exceptions"], [340, "exceptions"], [345, "exceptions"], [338, "exceptions"], [337, "exceptions"], [334, "exceptions"], [259, "exceptions"], [268, "exceptions"], [229, "exceptions"], [164, "exceptions"]], "\u5e73\u81fa\u652f\u63f4": [[129, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[129, "all-platforms"]], "Windows": [[129, "windows"], [479, "windows"], [479, "id18"], [479, "id25"], [479, "id34"], [479, "id44"], [479, "id53"], [479, "id63"], [479, "id69"], [479, "id79"], [479, "id89"], [479, "id98"], [479, "id110"], [479, "id119"], [479, "id128"], [479, "id136"], [479, "id145"], [479, "id153"], [479, "id161"], [479, "id171"], [479, "id182"], [479, "id192"], [479, "id201"], [479, "id211"], [479, "id229"], [479, "id240"], [479, "id250"], [479, "id260"], [479, "id270"], [479, "id281"], [479, "id292"], [479, "id307"], [479, "id317"], [479, "id328"], [479, "id339"], [479, "id350"], [479, "id358"], [479, "id366"], [479, "id377"], [479, "id391"], [479, "id401"], [479, "id412"], [479, "id421"], [479, "id428"], [479, "id436"], [479, "id453"], [479, "id462"], [479, "id475"], [479, "id485"], [479, "id498"], [479, "id511"], [479, "id517"], [479, "id524"], [479, "id538"], [479, "id543"], [479, "id554"], [479, "id559"], [479, "id576"], [479, "id587"], [479, "id600"], [479, "id610"], [479, "id622"], [479, "id625"], [479, "id632"], [479, "id677"], [479, "id686"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[129, "subprocess-support-on-windows"]], "macOS": [[129, "macos"], [479, "macos"], [479, "id26"], [479, "id35"], [479, "id54"], [479, "id70"], [479, "id80"], [479, "id90"], [479, "id99"], [479, "id111"], [479, "id120"], [479, "id137"], [479, "id146"], [479, "id154"], [479, "id162"], [479, "id172"], [479, "id183"], [479, "id202"], [479, "id212"], [479, "id220"], [479, "id230"], [479, "id241"], [479, "id251"], [479, "id261"], [479, "id271"], [479, "id282"], [479, "id308"], [479, "id318"], [479, "id329"], [479, "id340"], [479, "id367"], [479, "id384"], [479, "id392"], [479, "id402"], [479, "id413"], [479, "id422"], [479, "id437"], [479, "id463"], [479, "id476"], [479, "id486"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[118, "module-argparse"]], "\u6559\u5b78": [[118, null]], "Core Functionality": [[118, "core-functionality"]], "Quick Links for add_argument()": [[118, "quick-links-for-add-argument"]], "\u5efa\u7acb\u4e00\u500b\u5256\u6790\u5668": [[118, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[118, "adding-arguments"]], "\u5256\u6790\u5f15\u6578": [[118, "parsing-arguments"]], "ArgumentParser \u7269\u4ef6": [[118, "argumentparser-objects"]], "prog": [[118, "prog"]], "usage": [[118, "usage"]], "\u63cf\u8ff0": [[118, "description"]], "epilog": [[118, "epilog"]], "parents": [[118, "parents"]], "formatter_class": [[118, "formatter-class"]], "prefix_chars": [[118, "prefix-chars"]], "fromfile_prefix_chars": [[118, "fromfile-prefix-chars"]], "argument_default": [[118, "argument-default"]], "allow_abbrev": [[118, "allow-abbrev"]], "conflict_handler": [[118, "conflict-handler"]], "add_help": [[118, "add-help"]], "exit_on_error": [[118, "exit-on-error"]], "The add_argument() method": [[118, "the-add-argument-method"]], "name or flags": [[118, "name-or-flags"]], "action": [[118, "action"]], "nargs": [[118, "nargs"]], "const": [[118, "const"]], "default": [[118, "default"]], "type": [[118, "type"]], "choices": [[118, "choices"]], "required": [[118, "required"]], "\u5e6b\u52a9": [[118, "help"]], "metavar": [[118, "metavar"]], "dest": [[118, "dest"]], "Action classes": [[118, "action-classes"]], "The parse_args() method": [[118, "the-parse-args-method"]], "Option value syntax": [[118, "option-value-syntax"]], "Invalid arguments": [[118, "invalid-arguments"]], "Arguments containing -": [[118, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[118, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[118, "beyond-sys-argv"]], "The Namespace object": [[118, "the-namespace-object"]], "Other utilities": [[118, "other-utilities"]], "Sub-commands": [[118, "sub-commands"]], "FileType \u7269\u4ef6": [[118, "filetype-objects"]], "Argument groups": [[118, "argument-groups"]], "Mutual exclusion": [[118, "mutual-exclusion"]], "Parser defaults": [[118, "parser-defaults"]], "Printing help": [[118, "printing-help"]], "Partial parsing": [[118, "partial-parsing"]], "Customizing file parsing": [[118, "customizing-file-parsing"]], "Exiting methods": [[118, "exiting-methods"]], "Intermixed parsing": [[118, "intermixed-parsing"]], "Upgrading optparse code": [[118, "upgrading-optparse-code"]], "Exceptions": [[118, "exceptions"], [316, "exceptions"], [289, "exceptions"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[110, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[110, "using-2to3"]], "Fixers": [[110, "fixers"]], "lib2to3 --- 2to3's library": [[110, "module-lib2to3"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[116, "generic-operating-system-services"]], "\u9ad8\u968e API \u7d22\u5f15": [[122, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[122, "tasks"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[122, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[122, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[122, "synchronization"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[103, "regular-expression-howto"]], "Simple Patterns": [[103, "simple-patterns"]], "Matching Characters": [[103, "matching-characters"]], "Repeating Things": [[103, "repeating-things"]], "Using Regular Expressions": [[103, "using-regular-expressions"]], "Compiling Regular Expressions": [[103, "compiling-regular-expressions"]], "The Backslash Plague": [[103, "the-backslash-plague"]], "Performing Matches": [[103, "performing-matches"]], "Module-Level Functions": [[103, "module-level-functions"], [264, "module-level-functions"]], "Compilation Flags": [[103, "compilation-flags"]], "More Pattern Power": [[103, "more-pattern-power"]], "More Metacharacters": [[103, "more-metacharacters"]], "Grouping": [[103, "grouping"]], "Non-capturing and Named Groups": [[103, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[103, "lookahead-assertions"]], "Modifying Strings": [[103, "modifying-strings"]], "Splitting Strings": [[103, "splitting-strings"]], "Search and Replace": [[103, "search-and-replace"], [244, "search-and-replace"]], "Common Problems": [[103, "common-problems"]], "Use String Methods": [[103, "use-string-methods"]], "match() versus search()": [[103, "match-versus-search"]], "Greedy versus Non-Greedy": [[103, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[103, "using-re-verbose"]], "Feedback": [[103, "feedback"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[117, "data-compression-and-archiving"]], "Runners": [[133, "runners"]], "Running an asyncio Program": [[133, "running-an-asyncio-program"]], "Runner context manager": [[133, "runner-context-manager"]], "Handling Keyboard Interruption": [[133, "handling-keyboard-interruption"]], "Unicode HOWTO": [[106, "unicode-howto"]], "Introduction to Unicode": [[106, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[106, "definitions"]], "Encodings": [[106, "encodings"]], "Python's Unicode Support": [[106, "python-s-unicode-support"]], "The String Type": [[106, "the-string-type"]], "Converting to Bytes": [[106, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[106, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[106, "unicode-properties"]], "Comparing Strings": [[106, "comparing-strings"]], "Unicode Regular Expressions": [[106, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[106, "reading-and-writing-unicode-data"]], "Unicode filenames": [[106, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[106, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[106, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[106, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[106, "acknowledgements"], [458, "acknowledgements"], [462, "acknowledgements"], [460, "acknowledgements"], [463, "acknowledgements"], [461, "acknowledgements"], [464, "acknowledgements"], [459, "acknowledgements"], [465, "acknowledgements"], [227, "acknowledgements"]], "_thread --- Low-level threading API": [[113, "module-_thread"]], "Futures": [[127, "futures"]], "Future \u51fd\u5f0f": [[127, "future-functions"]], "Future \u7269\u4ef6": [[127, "future-object"], [163, "future-objects"]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[115, "module-aifc"]], "abc --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[114, "module-abc"]], "ast --- Abstract Syntax Trees": [[120, "module-ast"]], "Abstract Grammar": [[120, "abstract-grammar"]], "Node classes": [[120, "node-classes"]], "Root nodes": [[120, "root-nodes"]], "Literals": [[120, "literals"], [431, "literals"], [426, "literals"]], "Variables": [[120, "variables"]], "Expressions": [[120, "expressions"], [426, "expressions"]], "Subscripting": [[120, "subscripting"]], "Comprehensions": [[120, "comprehensions"]], "Statements": [[120, "statements"]], "Imports": [[120, "imports"]], "Control flow": [[120, "control-flow"]], "Pattern matching": [[120, "pattern-matching"]], "Type parameters": [[120, "type-parameters"]], "Function and class definitions": [[120, "function-and-class-definitions"]], "Async and await": [[120, "async-and-await"]], "ast Helpers": [[120, "ast-helpers"]], "Compiler Flags": [[120, "compiler-flags"]], "Command-Line Usage": [[120, "command-line-usage"], [394, "command-line-usage"], [374, "command-line-usage"], [376, "command-line-usage"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[123, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[123, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[123, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[123, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[123, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[123, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[123, "detect-never-retrieved-exceptions"]], "Event Loop": [[124, "event-loop"]], "Event Loop Methods": [[124, "event-loop-methods"]], "Running and stopping the loop": [[124, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[124, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[124, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[124, "creating-futures-and-tasks"]], "Opening network connections": [[124, "opening-network-connections"]], "Creating network servers": [[124, "creating-network-servers"]], "Transferring files": [[124, "transferring-files"]], "TLS Upgrade": [[124, "tls-upgrade"]], "Watching file descriptors": [[124, "watching-file-descriptors"]], "Working with socket objects directly": [[124, "working-with-socket-objects-directly"]], "DNS": [[124, "dns"]], "Working with pipes": [[124, "working-with-pipes"]], "Unix signals": [[124, "unix-signals"]], "Executing code in thread or process pools": [[124, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[124, "error-handling-api"]], "Enabling debug mode": [[124, "enabling-debug-mode"]], "Running Subprocesses": [[124, "running-subprocesses"]], "Callback Handles": [[124, "callback-handles"]], "Server Objects": [[124, "server-objects"], [335, "server-objects"]], "Event Loop Implementations": [[124, "event-loop-implementations"]], "Hello World with call_soon()": [[124, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[124, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[124, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[124, "set-signal-handlers-for-sigint-and-sigterm"]], "Policies": [[130, "policies"]], "Getting and Setting the Policy": [[130, "getting-and-setting-the-policy"]], "Policy Objects": [[130, "policy-objects"]], "Process Watchers": [[130, "process-watchers"]], "Custom Policies": [[130, "custom-policies"]], "Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230Python 3": [[102, "porting-python-2-code-to-python-3"]], "\u7c21\u77ed\u7684\u8aaa\u660e": [[102, "the-short-explanation"]], "\u8a73\u7d30\u7684": [[102, "details"]], "\u5411\u4e0b\u652f\u63f4Python 2.6\u548c\u66f4\u820a\u7684\u7248\u672c": [[102, "drop-support-for-python-2-6-and-older"]], "Make sure you specify the proper version support in your setup.py file": [[102, "make-sure-you-specify-the-proper-version-support-in-your-setup-py-file"]], "\u6709\u597d\u7684\u6e2c\u8a66\u8986\u84cb\u7387": [[102, "have-good-test-coverage"]], "\u77ad\u89e3Python 2 & 3\u7684\u5dee\u7570": [[102, "learn-the-differences-between-python-2-3"]], "\u66f4\u65b0\u4f60\u7684\u7a0b\u5f0f\u78bc": [[102, "update-your-code"]], "Division": [[102, "division"]], "Text versus binary data": [[102, "text-versus-binary-data"]], "Use feature detection instead of version detection": [[102, "use-feature-detection-instead-of-version-detection"]], "Prevent compatibility regressions": [[102, "prevent-compatibility-regressions"]], "Check which dependencies block your transition": [[102, "check-which-dependencies-block-your-transition"]], "Update your setup.py file to denote Python 3 compatibility": [[102, "update-your-setup-py-file-to-denote-python-3-compatibility"]], "Use continuous integration to stay compatible": [[102, "use-continuous-integration-to-stay-compatible"]], "Consider using optional static type checking": [[102, "consider-using-optional-static-type-checking"]], "Number Protocol": [[46, "number-protocol"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[66, "weak-reference-objects"]], "Object Implementation Support": [[49, "object-implementation-support"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[37, "list-objects"]], "Type Objects": [[60, "type-objects"], [341, "type-objects"]], "Creating Heap-Allocated Types": [[60, "creating-heap-allocated-types"]], "None \u7269\u4ef6": [[45, "the-none-object"]], "\u53c3\u7167\u8a08\u6578": [[51, "reference-counting"], [34, "reference-counts"]], "\u5207\u7247\u7269\u4ef6": [[55, "slice-objects"]], "Ellipsis Object": [[55, "ellipsis-object"]], "Set Objects": [[54, "set-objects"]], "Reflection": [[52, "reflection"]], "C API \u7a69\u5b9a\u6027": [[56, "c-api-stability"]], "\u4e0d\u7a69\u5b9a\u7684 C API": [[56, "unstable-c-api"]], "\u7a69\u5b9a\u7684\u61c9\u7528\u7a0b\u5f0f\u4e8c\u9032\u4f4d\u4ecb\u9762": [[56, "stable-application-binary-interface"]], "\u53d7\u9650 C API": [[56, "limited-c-api"]], "\u7a69\u5b9a ABI": [[56, "stable-abi"]], "\u53d7\u9650 API \u7bc4\u570d\u548c\u6027\u80fd": [[56, "limited-api-scope-and-performance"]], "\u53d7\u9650 API \u6ce8\u610f\u4e8b\u9805": [[56, "limited-api-caveats"]], "\u5e73\u53f0\u6ce8\u610f\u4e8b\u9805": [[56, "platform-considerations"]], "\u53d7\u9650 API \u7684\u5167\u5bb9": [[56, "contents-of-limited-api"]], "Data marshalling support": [[40, "data-marshalling-support"]], "\u758a\u4ee3\u5668\u5354\u8b70": [[35, "iterator-protocol"]], "Support for Perf Maps": [[50, "support-for-perf-maps"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[36, "iterator-objects"]], "Mapping Protocol": [[39, "mapping-protocol"]], "\u6574\u6578\u7269\u4ef6": [[38, "integer-objects"]], "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668": [[63, "unicode-objects-and-codecs"]], "Unicode Objects": [[63, "unicode-objects"]], "Unicode Type": [[63, "unicode-type"]], "Unicode Character Properties": [[63, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[63, "creating-and-accessing-unicode-strings"]], "Locale Encoding": [[63, "locale-encoding"]], "File System Encoding": [[63, "file-system-encoding"]], "wchar_t Support": [[63, "wchar-t-support"]], "Built-in Codecs": [[63, "built-in-codecs"]], "Generic Codecs": [[63, "generic-codecs"]], "UTF-8 \u7de8\u89e3\u78bc\u5668": [[63, "utf-8-codecs"]], "UTF-32 \u7de8\u89e3\u78bc\u5668": [[63, "utf-32-codecs"]], "UTF-16 \u7de8\u89e3\u78bc\u5668": [[63, "utf-16-codecs"]], "UTF-7 \u7de8\u89e3\u78bc\u5668": [[63, "utf-7-codecs"]], "Unicode-Escape Codecs": [[63, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[63, "raw-unicode-escape-codecs"]], "Latin-1 \u7de8\u89e3\u78bc\u5668": [[63, "latin-1-codecs"]], "ASCII \u7de8\u89e3\u78bc\u5668": [[63, "ascii-codecs"]], "Character Map Codecs": [[63, "character-map-codecs"]], "MBCS codecs for Windows": [[63, "mbcs-codecs-for-windows"]], "Methods & Slots": [[63, "methods-slots"]], "Methods and Slot Functions": [[63, "methods-and-slot-functions"]], "MemoryView \u7269\u4ef6": [[42, "index-0"]], "\u7de8\u5beb\u6a19\u6e96": [[34, "coding-standards"]], "\u5f15\u5165\u6a94\u6848 (include files)": [[34, "include-files"]], "\u6709\u7528\u7684\u5de8\u96c6": [[34, "useful-macros"]], "\u7269\u4ef6\u3001\u578b\u5225\u548c\u53c3\u7167\u8a08\u6578": [[34, "objects-types-and-reference-counts"]], "\u53c3\u7167\u8a08\u6578\u8a73\u7d30\u8cc7\u8a0a": [[34, "reference-count-details"]], "\u578b\u5225": [[34, "types"]], "\u5d4c\u5165\u5f0fPython": [[34, "embedding-python"]], "\u9664\u932f\u5efa\u7f6e": [[34, "debugging-builds"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[43, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[43, "method-objects"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[57, "common-object-structures"]], "Base object types and macros": [[57, "base-object-types-and-macros"]], "Implementing functions and methods": [[57, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[57, "accessing-attributes-of-extension-types"]], "Member flags": [[57, "member-flags"]], "Member types": [[57, "member-types"]], "Defining Getters and Setters": [[57, "defining-getters-and-setters"]], "\u578b\u5225\u63d0\u793a\u7269\u4ef6": [[61, "objects-for-type-hinting"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[41, "memory-management"]], "\u7e3d\u89bd": [[41, "overview"], [255, "overview"]], "Allocator Domains": [[41, "allocator-domains"]], "Raw Memory Interface": [[41, "raw-memory-interface"]], "Memory Interface": [[41, "memory-interface"]], "Object allocators": [[41, "object-allocators"]], "Default Memory Allocators": [[41, "default-memory-allocators"]], "Customize Memory Allocators": [[41, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[41, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[41, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[41, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[41, "tracemalloc-c-api"]], "\u578b\u5225\u7269\u4ef6": [[62, "type-objects"]], "Quick Reference": [[62, "quick-reference"]], "\"tp slots\"": [[62, "tp-slots"]], "sub-slots": [[62, "sub-slots"]], "slot typedefs": [[62, "slot-typedefs"]], "PyTypeObject Definition": [[62, "pytypeobject-definition"]], "PyObject Slots": [[62, "pyobject-slots"]], "PyVarObject Slots": [[62, "pyvarobject-slots"]], "PyTypeObject Slots": [[62, "pytypeobject-slots"]], "Static Types": [[62, "static-types"]], "Number Object Structures": [[62, "number-object-structures"]], "Mapping Object Structures": [[62, "mapping-object-structures"]], "Sequence Object Structures": [[62, "sequence-object-structures"]], "Buffer Object Structures": [[62, "buffer-object-structures"]], "Async Object Structures": [[62, "async-object-structures"]], "Slot Type typedefs": [[62, "slot-type-typedefs"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[47, "old-buffer-protocol"]], "Sequence Protocol": [[53, "sequence-protocol"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[44, "module-objects"]], "Initializing C modules": [[44, "initializing-c-modules"]], "Single-phase initialization": [[44, "single-phase-initialization"]], "Multi-phase initialization": [[44, "multi-phase-initialization"]], "Low-level module creation functions": [[44, "low-level-module-creation-functions"]], "Support functions": [[44, "support-functions"]], "Module lookup": [[44, "module-lookup"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[58, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[58, "system-functions"]], "\u884c\u7a0b\uff08Process\uff09\u63a7\u5236": [[58, "process-control"]], "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6": [[59, "tuple-objects"]], "Struct Sequence Objects": [[59, "struct-sequence-objects"]], "\u5de5\u5177": [[64, "utilities"]], "Object Protocol": [[48, "object-protocol"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[67, "python-documentation-contents"]], "The Very High Level Layer": [[65, "the-very-high-level-layer"]], "The import system": [[428, "the-import-system"]], "importlib": [[428, "importlib"], [478, "importlib"], [476, "importlib"], [476, "id6"], [475, "importlib"], [475, "id3"], [473, "importlib"], [474, "importlib"]], "Packages": [[428, "packages"]], "Regular packages": [[428, "regular-packages"]], "Namespace packages": [[428, "namespace-packages"]], "Searching": [[428, "searching"]], "The module cache": [[428, "the-module-cache"]], "Finders and loaders": [[428, "finders-and-loaders"]], "Import hooks": [[428, "import-hooks"]], "The meta path": [[428, "the-meta-path"]], "Loading": [[428, "loading"]], "Loaders": [[428, "loaders"]], "Submodules": [[428, "submodules"]], "Module spec": [[428, "module-spec"]], "Import-related module attributes": [[428, "import-related-module-attributes"]], "module.__path__": [[428, "module-path"]], "Module reprs": [[428, "module-reprs"]], "Cached bytecode invalidation": [[428, "cached-bytecode-invalidation"]], "The Path Based Finder": [[428, "the-path-based-finder"]], "Path entry finders": [[428, "path-entry-finders"]], "Path entry finder protocol": [[428, "path-entry-finder-protocol"]], "Replacing the standard import system": [[428, "replacing-the-standard-import-system"]], "Package Relative Imports": [[428, "package-relative-imports"]], "Special considerations for __main__": [[428, "special-considerations-for-main"]], "__main__.__spec__": [[428, "main-spec"]], "xml.etree.ElementTree --- The ElementTree XML API": [[409, "module-xml.etree.ElementTree"]], "XML tree and elements": [[409, "xml-tree-and-elements"]], "Parsing XML": [[409, "parsing-xml"]], "Pull API for non-blocking parsing": [[409, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[409, "finding-interesting-elements"]], "Modifying an XML File": [[409, "modifying-an-xml-file"]], "Building XML documents": [[409, "building-xml-documents"]], "Parsing XML with Namespaces": [[409, "parsing-xml-with-namespaces"]], "XPath support": [[409, "xpath-support"]], "Supported XPath syntax": [[409, "supported-xpath-syntax"]], "\u51fd\u5f0f": [[409, "functions"], [409, "elementinclude-functions"], [421, "functions"], [401, "functions"], [378, "functions"], [362, "functions"], [341, "functions"], [334, "functions"], [247, "functions"], [176, "functions"], [174, "functions"], [149, "functions"]], "XInclude support": [[409, "xinclude-support"]], "Element Objects": [[409, "element-objects"], [406, "element-objects"]], "ElementTree \u7269\u4ef6": [[409, "elementtree-objects"]], "QName \u7269\u4ef6": [[409, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[409, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[409, "xmlparser-objects"], [311, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[409, "xmlpullparser-objects"]], "xml.sax.saxutils --- SAX Utilities": [[413, "module-xml.sax.saxutils"]], "xmlrpc.client --- XML-RPC client access": [[415, "module-xmlrpc.client"]], "ServerProxy \u7269\u4ef6": [[415, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[415, "datetime-objects"]], "Binary Objects": [[415, "binary-objects"]], "Fault Objects": [[415, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[415, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[415, "multicall-objects"]], "Convenience Functions": [[415, "convenience-functions"]], "Example of Client Usage": [[415, "example-of-client-usage"]], "Example of Client and Server Usage": [[415, "example-of-client-and-server-usage"]], "Compound statements": [[423, "compound-statements"]], "The if statement": [[423, "the-if-statement"]], "The while statement": [[423, "the-while-statement"]], "The for statement": [[423, "the-for-statement"]], "The try statement": [[423, "the-try-statement"]], "except clause": [[423, "except-clause"]], "except* clause": [[423, "except-star"]], "else clause": [[423, "else-clause"]], "finally clause": [[423, "finally-clause"]], "The with statement": [[423, "the-with-statement"]], "The match statement": [[423, "the-match-statement"]], "Overview": [[423, "overview"], [248, "overview"]], "Guards": [[423, "guards"]], "Irrefutable Case Blocks": [[423, "irrefutable-case-blocks"]], "Patterns": [[423, "patterns"]], "OR Patterns": [[423, "or-patterns"]], "AS Patterns": [[423, "as-patterns"]], "Literal Patterns": [[423, "literal-patterns"]], "Capture Patterns": [[423, "capture-patterns"]], "Wildcard Patterns": [[423, "wildcard-patterns"]], "Value Patterns": [[423, "value-patterns"]], "Group Patterns": [[423, "group-patterns"]], "Sequence Patterns": [[423, "sequence-patterns"]], "Mapping Patterns": [[423, "mapping-patterns"]], "Class Patterns": [[423, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[423, "function-definitions"]], "Class definitions": [[423, "class-definitions"]], "\u5354\u7a0b": [[423, "coroutines"], [424, "coroutines"], [137, "coroutines"]], "Coroutine function definition": [[423, "coroutine-function-definition"]], "The async for statement": [[423, "the-async-for-statement"]], "The async with statement": [[423, "the-async-with-statement"]], "Type parameter lists": [[423, "type-parameter-lists"]], "Generic functions": [[423, "generic-functions"]], "Generic classes": [[423, "generic-classes"]], "Generic type aliases": [[423, "generic-type-aliases"]], "\u8cc7\u6599\u7d50\u69cb": [[438, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[438, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[438, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[438, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[438, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[438, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[438, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[438, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[438, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[438, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[438, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[438, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[438, "comparing-sequences-and-other-types"]], "Lexical analysis": [[431, "lexical-analysis"]], "Line structure": [[431, "line-structure"]], "Logical lines": [[431, "logical-lines"]], "Physical lines": [[431, "physical-lines"]], "Comments": [[431, "comments"]], "Encoding declarations": [[431, "encoding-declarations"]], "Explicit line joining": [[431, "explicit-line-joining"]], "Implicit line joining": [[431, "implicit-line-joining"]], "Blank lines": [[431, "blank-lines"]], "Indentation": [[431, "indentation"]], "Whitespace between tokens": [[431, "whitespace-between-tokens"]], "Other tokens": [[431, "other-tokens"]], "Identifiers and keywords": [[431, "identifiers"]], "Keywords": [[431, "keywords"]], "Soft Keywords": [[431, "soft-keywords"]], "Reserved classes of identifiers": [[431, "reserved-classes-of-identifiers"]], "String and Bytes literals": [[431, "string-and-bytes-literals"]], "\u8df3\u812b\u5e8f\u5217": [[431, "escape-sequences"]], "String literal concatenation": [[431, "string-literal-concatenation"]], "Formatted string literals": [[431, "formatted-string-literals"]], "Numeric literals": [[431, "numeric-literals"]], "Integer literals": [[431, "integer-literals"]], "Floating point literals": [[431, "floating-point-literals"]], "Imaginary literals": [[431, "imaginary-literals"]], "Operators": [[431, "operators"], [256, "operators"], [256, "id1"], [256, "id2"]], "Delimiters": [[431, "delimiters"]], "\u6dfa\u5617\u6ecb\u5473": [[435, "whetting-your-appetite"]], "zlib --- \u76f8\u5bb9\u65bc gzip \u7684\u58d3\u7e2e": [[420, "module-zlib"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[408, "module-xml.dom.pulldom"]], "DOMEventStream \u7269\u4ef6": [[408, "domeventstream-objects"]], "Arithmetic conversions": [[426, "arithmetic-conversions"]], "Atoms": [[426, "atoms"]], "Identifiers (Names)": [[426, "atom-identifiers"]], "Parenthesized forms": [[426, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[426, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[426, "list-displays"]], "Set displays": [[426, "set-displays"]], "Dictionary displays": [[426, "dictionary-displays"]], "Generator expressions": [[426, "generator-expressions"]], "Yield expressions": [[426, "yield-expressions"]], "Generator-iterator methods": [[426, "generator-iterator-methods"]], "Asynchronous generator functions": [[426, "asynchronous-generator-functions"]], "Asynchronous generator-iterator methods": [[426, "asynchronous-generator-iterator-methods"]], "Primaries": [[426, "primaries"]], "Attribute references": [[426, "attribute-references"]], "Subscriptions": [[426, "subscriptions"]], "Slicings": [[426, "slicings"]], "Calls": [[426, "calls"]], "Await expression": [[426, "await-expression"]], "The power operator": [[426, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[426, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[426, "binary-arithmetic-operations"]], "Shifting operations": [[426, "shifting-operations"]], "Binary bitwise operations": [[426, "binary-bitwise-operations"]], "Value comparisons": [[426, "value-comparisons"]], "Membership test operations": [[426, "membership-test-operations"]], "Identity comparisons": [[426, "is-not"]], "Boolean operations": [[426, "boolean-operations"]], "Assignment expressions": [[426, "assignment-expressions"], [477, "assignment-expressions"]], "Conditional expressions": [[426, "conditional-expressions"]], "Lambdas": [[426, "lambda"]], "Expression lists": [[426, "expression-lists"]], "Evaluation order": [[426, "evaluation-order"]], "Operator precedence": [[426, "operator-precedence"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[422, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[422, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[422, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.12.0rc1 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[422, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[422, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[422, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[422, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.12.0rc1 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[422, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[422, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[422, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[422, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[422, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[422, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[422, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[422, "xml-remote-procedure-calls"]], "test_epoll": [[422, "test-epoll"]], "Select kqueue": [[422, "select-kqueue"]], "SipHash24": [[422, "siphash24"]], "strtod \u8207 dtoa": [[422, "strtod-and-dtoa"]], "OpenSSL": [[422, "openssl"]], "expat": [[422, "expat"]], "libffi": [[422, "libffi"]], "zlib": [[422, "zlib"], [475, "zlib"], [472, "zlib"]], "cfuhash": [[422, "cfuhash"]], "libmpdec": [[422, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[422, "w3c-c14n-test-suite"]], "Audioop": [[422, "audioop"]], "\u9644\u9304": [[434, "appendix"]], "\u4e92\u52d5\u6a21\u5f0f": [[434, "interactive-mode"], [444, "interactive-mode"]], "\u932f\u8aa4\u8655\u7406": [[434, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[434, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[434, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[434, "the-customization-modules"]], "zipfile --- Work with ZIP archives": [[418, "module-zipfile"]], "ZipFile \u7269\u4ef6": [[418, "zipfile-objects"]], "Path Objects": [[418, "path-objects"]], "PyZipFile \u7269\u4ef6": [[418, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[418, "zipinfo-objects"]], "Command-Line Interface": [[418, "command-line-interface"], [354, "command-line-interface"], [308, "command-line-interface"]], "Command-line options": [[418, "command-line-options"], [354, "command-line-options"]], "Decompression pitfalls": [[418, "decompression-pitfalls"]], "From file itself": [[418, "from-file-itself"]], "File System limitations": [[418, "file-system-limitations"]], "Resources limitations": [[418, "resources-limitations"]], "Interruption": [[418, "interruption"]], "Default behaviors of extraction": [[418, "default-behaviors-of-extraction"]], "xml.sax.xmlreader --- Interface for XML parsers": [[412, "module-xml.sax.xmlreader"]], "XMLReader \u7269\u4ef6": [[412, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[412, "incrementalparser-objects"]], "Locator Objects": [[412, "locator-objects"]], "InputSource \u7269\u4ef6": [[412, "inputsource-objects"]], "The Attributes Interface": [[412, "the-attributes-interface"]], "The AttributesNS Interface": [[412, "the-attributesns-interface"]], "zoneinfo --- IANA \u6642\u5340\u652f\u63f4": [[421, "module-zoneinfo"]], "Using ZoneInfo": [[421, "using-zoneinfo"]], "Data sources": [[421, "data-sources"]], "Configuring the data sources": [[421, "configuring-the-data-sources"]], "Compile-time configuration": [[421, "compile-time-configuration"]], "Environment configuration": [[421, "environment-configuration"]], "Runtime configuration": [[421, "runtime-configuration"]], "The ZoneInfo class": [[421, "the-zoneinfo-class"]], "String representations": [[421, "string-representations"]], "Pickle serialization": [[421, "pickle-serialization"]], "Globals": [[421, "globals"]], "Exceptions and warnings": [[421, "exceptions-and-warnings"]], "Data model": [[424, "data-model"]], "Objects, values and types": [[424, "objects-values-and-types"]], "\u6a19\u6e96\u578b\u5225\u968e\u5c64": [[424, "the-standard-type-hierarchy"]], "Special method names": [[424, "special-method-names"]], "Basic customization": [[424, "basic-customization"]], "Customizing attribute access": [[424, "customizing-attribute-access"]], "Customizing module attribute access": [[424, "customizing-module-attribute-access"]], "Implementing Descriptors": [[424, "implementing-descriptors"]], "Invoking Descriptors": [[424, "invoking-descriptors"]], "__slots__": [[424, "slots"], [468, "slots"]], "Notes on using __slots__": [[424, "notes-on-using-slots"]], "Customizing class creation": [[424, "customizing-class-creation"]], "Metaclasses": [[424, "metaclasses"]], "Resolving MRO entries": [[424, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[424, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[424, "preparing-the-class-namespace"]], "Executing the class body": [[424, "executing-the-class-body"]], "Creating the class object": [[424, "creating-the-class-object"]], "Uses for metaclasses": [[424, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[424, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[424, "emulating-generic-types"]], "The purpose of __class_getitem__": [[424, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[424, "class-getitem-versus-getitem"]], "Emulating callable objects": [[424, "emulating-callable-objects"]], "Emulating container types": [[424, "emulating-container-types"]], "Emulating numeric types": [[424, "emulating-numeric-types"]], "With Statement Context Managers": [[424, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[424, "customizing-positional-arguments-in-class-pattern-matching"]], "Emulating buffer types": [[424, "emulating-buffer-types"]], "Special method lookup": [[424, "special-method-lookup"]], "Awaitable Objects": [[424, "awaitable-objects"]], "Coroutine Objects": [[424, "coroutine-objects"]], "Asynchronous Iterators": [[424, "asynchronous-iterators"]], "Asynchronous Context Managers": [[424, "asynchronous-context-managers"]], "Simple statements": [[432, "simple-statements"]], "Expression statements": [[432, "expression-statements"]], "Assignment statements": [[432, "assignment-statements"]], "Augmented assignment statements": [[432, "augmented-assignment-statements"]], "Annotated assignment statements": [[432, "annotated-assignment-statements"]], "The assert statement": [[432, "the-assert-statement"]], "The pass statement": [[432, "the-pass-statement"]], "The del statement": [[432, "the-del-statement"]], "The return statement": [[432, "the-return-statement"]], "The yield statement": [[432, "the-yield-statement"]], "The raise statement": [[432, "the-raise-statement"]], "The break statement": [[432, "the-break-statement"]], "The continue statement": [[432, "the-continue-statement"]], "The import statement": [[432, "the-import-statement"]], "Future statements": [[432, "future-statements"]], "The global statement": [[432, "the-global-statement"]], "The nonlocal statement": [[432, "the-nonlocal-statement"]], "The type statement": [[432, "the-type-statement"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[429, "the-python-language-reference"]], "Execution model": [[425, "execution-model"]], "Structure of a program": [[425, "structure-of-a-program"]], "Naming and binding": [[425, "naming-and-binding"]], "Binding of names": [[425, "binding-of-names"]], "Resolution of names": [[425, "resolution-of-names"]], "Annotation scopes": [[425, "annotation-scopes"]], "Lazy evaluation": [[425, "lazy-evaluation"]], "Builtins and restricted execution": [[425, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[425, "interaction-with-dynamic-features"]], "xml.sax.handler --- Base classes for SAX handlers": [[411, "module-xml.sax.handler"]], "ContentHandler \u7269\u4ef6": [[411, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[411, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[411, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[411, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[411, "lexicalhandler-objects"]], "zipapp --- Manage executable Python zip archives": [[417, "module-zipapp"]], "\u57fa\u672c\u7bc4\u4f8b": [[417, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[417, "command-line-interface"], [363, "command-line-interface"]], "Python API": [[417, "python-api"]], "Specifying the Interpreter": [[417, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[417, "creating-standalone-applications-with-zipapp"]], "Caveats": [[417, "caveats"]], "The Python Zip Application Archive Format": [[417, "the-python-zip-application-archive-format"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[437, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[437, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[437, "for-statements"]], "range() \u51fd\u5f0f": [[437, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[437, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[437, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[437, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[437, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[437, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[437, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[437, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[437, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[437, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[437, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[437, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[437, "function-examples"]], "\u56de\u9867": [[437, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[437, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[437, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[437, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[437, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[437, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[437, "intermezzo-coding-style"]], "Class\uff08\u985e\u5225\uff09": [[436, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[436, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[436, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[436, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[436, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[436, "class-definition-syntax"]], "Class \u7269\u4ef6": [[436, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[436, "instance-objects"]], "Method \u7269\u4ef6": [[436, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[436, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[436, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[436, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[436, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[436, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[436, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[436, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[436, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[436, "generator-expressions"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[440, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[440, "representation-error"]], "xml.sax --- Support for SAX2 parsers": [[410, "module-xml.sax"]], "SAXException \u7269\u4ef6": [[410, "saxexception-objects"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[439, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[439, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[439, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[439, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[439, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[439, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[439, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[439, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[439, "predefined-clean-up-actions"]], "\u5f15\u767c\u53ca\u8655\u7406\u591a\u500b\u7121\u95dc\u7684\u4f8b\u5916": [[439, "raising-and-handling-multiple-unrelated-exceptions"]], "\u7528\u8a3b\u89e3\u4f7f\u4f8b\u5916\u66f4\u8a73\u7d30": [[439, "enriching-exceptions-with-notes"]], "Python \u6559\u5b78": [[441, "the-python-tutorial"]], "\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6": [[433, "top-level-components"]], "\u5b8c\u6574\u7684 Python \u7a0b\u5f0f": [[433, "complete-python-programs"]], "\u6a94\u6848\u8f38\u5165": [[433, "file-input"]], "\u4e92\u52d5\u5f0f\u8f38\u5165": [[433, "interactive-input"]], "\u904b\u7b97\u5f0f\u8f38\u5165": [[433, "expression-input"]], "xmlrpc --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44": [[414, "xmlrpc-xmlrpc-server-and-client-modules"]], "Alternate Implementations": [[430, "alternate-implementations"]], "Notation": [[430, "notation"]], "xmlrpc.server --- Basic XML-RPC servers": [[416, "module-xmlrpc.server"]], "SimpleXMLRPCServer \u7269\u4ef6": [[416, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[416, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[416, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[416, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[416, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[416, "doccgixmlrpcrequesthandler"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[427, "full-grammar-specification"]], "zipimport --- Import modules from Zip archives": [[419, "module-zipimport"]], "zipimporter \u7269\u4ef6": [[419, "zipimporter-objects"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[404, "module-xdrlib"]], "Packer Objects": [[404, "packer-objects"]], "Unpacker Objects": [[404, "unpacker-objects"]], "unittest.mock --- mock object library": [[385, "module-unittest.mock"]], "Quick Guide": [[385, "quick-guide"]], "The Mock Class": [[385, "the-mock-class"]], "Calling": [[385, "calling"]], "Deleting Attributes": [[385, "deleting-attributes"]], "Mock names and the name attribute": [[385, "mock-names-and-the-name-attribute"]], "Attaching Mocks as Attributes": [[385, "attaching-mocks-as-attributes"]], "The patchers": [[385, "the-patchers"]], "patch": [[385, "patch"]], "patch.object": [[385, "patch-object"]], "patch.dict": [[385, "patch-dict"]], "patch.multiple": [[385, "patch-multiple"]], "patch methods: start and stop": [[385, "patch-methods-start-and-stop"]], "patch builtins": [[385, "patch-builtins"]], "TEST_PREFIX": [[385, "test-prefix"]], "Nesting Patch Decorators": [[385, "nesting-patch-decorators"]], "Where to patch": [[385, "where-to-patch"]], "Patching Descriptors and Proxy Objects": [[385, "patching-descriptors-and-proxy-objects"]], "MagicMock and magic method support": [[385, "magicmock-and-magic-method-support"]], "Mocking Magic Methods": [[385, "mocking-magic-methods"]], "Magic Mock": [[385, "magic-mock"]], "Helpers": [[385, "helpers"]], "sentinel": [[385, "sentinel"]], "DEFAULT": [[385, "default"]], "call": [[385, "call"]], "create_autospec": [[385, "create-autospec"]], "ANY": [[385, "any"]], "FILTER_DIR": [[385, "filter-dir"]], "mock_open": [[385, "mock-open"]], "Autospeccing": [[385, "autospeccing"]], "Sealing mocks": [[385, "sealing-mocks"]], "urllib.parse --- Parse URLs into components": [[390, "module-urllib.parse"]], "URL Parsing": [[390, "url-parsing"]], "URL parsing security": [[390, "url-parsing-security"]], "Parsing ASCII Encoded Bytes": [[390, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[390, "structured-parse-results"]], "URL Quoting": [[390, "url-quoting"]], "xml.dom.minidom --- Minimal DOM implementation": [[407, "module-xml.dom.minidom"]], "DOM \u7269\u4ef6": [[407, "dom-objects"]], "DOM \u7bc4\u4f8b": [[407, "dom-example"]], "minidom and the DOM standard": [[407, "minidom-and-the-dom-standard"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[393, "module-uu"]], "MS Windows \u7279\u6709\u670d\u52d9": [[400, "ms-windows-specific-services"]], "uuid --- UUID objects according to RFC 4122": [[394, "module-uuid"]], "Command-Line Example": [[394, "command-line-example"]], "traceback --- Print or retrieve a stack traceback": [[377, "module-traceback"]], "TracebackException \u7269\u4ef6": [[377, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[377, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[377, "framesummary-objects"]], "Traceback Examples": [[377, "traceback-examples"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[391, "module-urllib.request"]], "Request Objects": [[391, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[391, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[391, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[391, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[391, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[391, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[391, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[391, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[391, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[391, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[391, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[391, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[391, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[391, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[391, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[391, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[391, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[391, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[391, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[391, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[391, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[391, "httperrorprocessor-objects"]], "Examples": [[391, "examples"]], "Legacy interface": [[391, "legacy-interface"]], "urllib.request Restrictions": [[391, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[391, "module-urllib.response"]], "types --- Dynamic type creation and names for built-in types": [[381, "module-types"]], "Dynamic Type Creation": [[381, "dynamic-type-creation"]], "Standard Interpreter Types": [[381, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[381, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[381, "coroutine-utility-functions"]], "winreg --- Windows registry access": [[401, "module-winreg"]], "HKEY_* Constants": [[401, "hkey-constants"]], "Access Rights": [[401, "access-rights"]], "64-bit Specific": [[401, "bit-specific"]], "Value Types": [[401, "value-types"]], "Registry Handle Objects": [[401, "registry-handle-objects"]], "wave --- Read and write WAV files": [[397, "module-wave"]], "Wave_read \u7269\u4ef6": [[397, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[397, "wave-write-objects"]], "wsgiref --- WSGI Utilities and Reference Implementation": [[403, "module-wsgiref"]], "wsgiref.util -- WSGI environment utilities": [[403, "module-wsgiref.util"]], "wsgiref.headers -- WSGI response header tools": [[403, "module-wsgiref.headers"]], "wsgiref.simple_server -- a simple WSGI HTTP server": [[403, "module-wsgiref.simple_server"]], "wsgiref.validate --- WSGI conformance checker": [[403, "module-wsgiref.validate"]], "wsgiref.handlers -- server/gateway base classes": [[403, "module-wsgiref.handlers"]], "wsgiref.types -- WSGI types for static type checking": [[403, "module-wsgiref.types"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[392, "module-urllib.robotparser"]], "weakref --- Weak references": [[398, "module-weakref"]], "Weak Reference Objects": [[398, "weak-reference-objects"]], "Finalizer Objects": [[398, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[398, "comparing-finalizers-with-del-methods"]], "turtle --- \u9f9c\u5716\u5b78": [[380, "module-turtle"]], "\u4ecb\u7d39": [[380, "introduction"]], "Turtle star": [[380, null]], "Starting a turtle environment": [[380, "starting-a-turtle-environment"]], "Basic drawing": [[380, "basic-drawing"]], "Pen control": [[380, "pen-control"], [380, "id1"]], "The turtle's position": [[380, "the-turtle-s-position"]], "Making algorithmic patterns": [[380, "making-algorithmic-patterns"]], "How to...": [[380, "how-to"]], "Get started as quickly as possible": [[380, "get-started-as-quickly-as-possible"]], "Use the turtle module namespace": [[380, "use-the-turtle-module-namespace"]], "Use turtle graphics in a script": [[380, "use-turtle-graphics-in-a-script"]], "Use object-oriented turtle graphics": [[380, "use-object-oriented-turtle-graphics"]], "Turtle graphics reference": [[380, "turtle-graphics-reference"]], "Turtle methods": [[380, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[380, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[380, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[380, "turtle-motion"]], "Tell Turtle's state": [[380, "tell-turtle-s-state"]], "Settings for measurement": [[380, "settings-for-measurement"]], "Drawing state": [[380, "drawing-state"]], "Color control": [[380, "color-control"]], "Filling": [[380, "filling"]], "More drawing control": [[380, "more-drawing-control"]], "Turtle state": [[380, "turtle-state"]], "Visibility": [[380, "visibility"]], "Appearance": [[380, "appearance"]], "Using events": [[380, "using-events"]], "Special Turtle methods": [[380, "special-turtle-methods"]], "Compound shapes": [[380, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[380, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[380, "window-control"]], "Animation control": [[380, "animation-control"]], "Using screen events": [[380, "using-screen-events"]], "Input methods": [[380, "input-methods"]], "Settings and special methods": [[380, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[380, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[380, "public-classes"]], "Explanation": [[380, "explanation"]], "Help and configuration": [[380, "help-and-configuration"]], "How to use help": [[380, "how-to-use-help"]], "Translation of docstrings into different languages": [[380, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[380, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[380, "module-turtledemo"]], "Changes since Python 2.6": [[380, "changes-since-python-2-6"]], "Changes since Python 3.0": [[380, "changes-since-python-3-0"]], "tracemalloc --- Trace memory allocations": [[378, "module-tracemalloc"]], "Display the top 10": [[378, "display-the-top-10"]], "Compute differences": [[378, "compute-differences"]], "Get the traceback of a memory block": [[378, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[378, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[378, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "API": [[378, "api"], [395, "api"]], "DomainFilter": [[378, "domainfilter"]], "Filter": [[378, "filter"]], "Frame": [[378, "frame"]], "Snapshot": [[378, "snapshot"]], "Statistic": [[378, "statistic"]], "StatisticDiff": [[378, "statisticdiff"]], "Trace": [[378, "trace"]], "Traceback": [[378, "traceback"]], "unittest.mock --- getting started": [[386, "unittest-mock-getting-started"]], "Using Mock": [[386, "using-mock"]], "Mock Patching Methods": [[386, "mock-patching-methods"]], "Mock for Method Calls on an Object": [[386, "mock-for-method-calls-on-an-object"]], "Mocking Classes": [[386, "mocking-classes"]], "Naming your mocks": [[386, "naming-your-mocks"]], "Tracking all Calls": [[386, "tracking-all-calls"]], "Setting Return Values and Attributes": [[386, "setting-return-values-and-attributes"]], "Raising exceptions with mocks": [[386, "raising-exceptions-with-mocks"]], "Side effect functions and iterables": [[386, "side-effect-functions-and-iterables"]], "Mocking asynchronous iterators": [[386, "mocking-asynchronous-iterators"]], "Mocking asynchronous context manager": [[386, "mocking-asynchronous-context-manager"]], "Creating a Mock from an Existing Object": [[386, "creating-a-mock-from-an-existing-object"]], "Patch Decorators": [[386, "patch-decorators"]], "Further Examples": [[386, "further-examples"]], "Mocking chained calls": [[386, "mocking-chained-calls"]], "Partial mocking": [[386, "partial-mocking"]], "Mocking a Generator Method": [[386, "mocking-a-generator-method"]], "Applying the same patch to every test method": [[386, "applying-the-same-patch-to-every-test-method"]], "Mocking Unbound Methods": [[386, "mocking-unbound-methods"]], "Checking multiple calls with mock": [[386, "checking-multiple-calls-with-mock"]], "Coping with mutable arguments": [[386, "coping-with-mutable-arguments"]], "Nesting Patches": [[386, "nesting-patches"]], "Mocking a dictionary with MagicMock": [[386, "mocking-a-dictionary-with-magicmock"]], "Mock subclasses and their attributes": [[386, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[386, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[386, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[386, "more-complex-argument-matching"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[389, "module-urllib.error"]], "warnings --- Warning control": [[396, "module-warnings"]], "Warning Categories": [[396, "warning-categories"]], "The Warnings Filter": [[396, "the-warnings-filter"]], "Describing Warning Filters": [[396, "describing-warning-filters"]], "Default Warning Filter": [[396, "default-warning-filter"]], "Overriding the default filter": [[396, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[396, "temporarily-suppressing-warnings"]], "Testing Warnings": [[396, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[396, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[396, "available-functions"]], "Available Context Managers": [[396, "available-context-managers"]], "Unix \u7279\u6709\u670d\u52d9": [[387, "unix-specific-services"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[379, "module-tty"]], "tomllib --- \u5256\u6790 TOML \u6a94\u6848": [[375, "module-tomllib"]], "\u8f49\u63db\u8868": [[375, "conversion-table"]], "venv --- Creation of virtual environments": [[395, "module-venv"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[395, "creating-virtual-environments"], [449, "creating-virtual-environments"]], "\u865b\u64ec\u74b0\u5883\u5982\u4f55\u904b\u4f5c": [[395, "how-venvs-work"]], "An example of extending EnvBuilder": [[395, "an-example-of-extending-envbuilder"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[388, "module-urllib"]], "webbrowser --- Convenient web-browser controller": [[399, "module-webbrowser"]], "Browser Controller Objects": [[399, "browser-controller-objects"]], "typing --- Support for type hints": [[382, "typing-support-for-type-hints"]], "Relevant PEPs": [[382, "relevant-peps"]], "Type aliases": [[382, "type-aliases"]], "NewType": [[382, "newtype"]], "Annotating callable objects": [[382, "annotating-callable-objects"]], "Generics": [[382, "generics"]], "Annotating tuples": [[382, "annotating-tuples"]], "The type of class objects": [[382, "the-type-of-class-objects"]], "User-defined generic types": [[382, "user-defined-generic-types"]], "Any \u578b\u5225": [[382, "the-any-type"]], "Nominal vs structural subtyping": [[382, "nominal-vs-structural-subtyping"]], "\u6a21\u7d44\u5167\u5bb9": [[382, "module-contents"], [406, "module-contents"], [316, "module-contents"], [330, "module-contents"], [331, "module-contents"], [334, "module-contents"], [208, "module-contents"], [172, "module-contents"]], "Special typing primitives": [[382, "special-typing-primitives"]], "Special types": [[382, "special-types"]], "Special forms": [[382, "special-forms"]], "Building generic types and type aliases": [[382, "building-generic-types-and-type-aliases"]], "Other special directives": [[382, "other-special-directives"]], "ABCs for working with IO": [[382, "abcs-for-working-with-io"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[382, "functions-and-decorators"]], "Recognised parameters for field specifiers": [[382, "id7"]], "Introspection helpers": [[382, "introspection-helpers"]], "\u68c4\u7528\u7684\u5225\u540d": [[382, "deprecated-aliases"]], "Aliases to built-in types": [[382, "aliases-to-built-in-types"]], "Aliases to types in collections": [[382, "aliases-to-types-in-collections"]], "Aliases to other concrete types": [[382, "aliases-to-other-concrete-types"]], "Aliases to container ABCs in collections.abc": [[382, "aliases-to-container-abcs-in-collections-abc"]], "Aliases to asynchronous ABCs in collections.abc": [[382, "aliases-to-asynchronous-abcs-in-collections-abc"]], "Aliases to other ABCs in collections.abc": [[382, "aliases-to-other-abcs-in-collections-abc"]], "Aliases to contextlib ABCs": [[382, "aliases-to-contextlib-abcs"]], "Deprecation Timeline of Major Features": [[382, "deprecation-timeline-of-major-features"]], "unicodedata --- Unicode Database": [[383, "module-unicodedata"]], "winsound --- Sound-playing interface for Windows": [[402, "module-winsound"]], "tokenize --- Tokenizer for Python source": [[374, "module-tokenize"]], "Tokenizing Input": [[374, "tokenizing-input"]], "trace --- Trace or track Python statement execution": [[376, "module-trace"]], "Main options": [[376, "main-options"]], "Modifiers": [[376, "modifiers"]], "Filters": [[376, "filters"]], "Programmatic Interface": [[376, "programmatic-interface"], [297, "programmatic-interface"]], "XML \u8655\u7406\u6a21\u7d44": [[405, "module-xml"]], "XML vulnerabilities": [[405, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[405, "the-defusedxml-package"]], "xml.dom --- The Document Object Model API": [[406, "module-xml.dom"]], "Objects in the DOM": [[406, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[406, "domimplementation-objects"]], "Node Objects": [[406, "node-objects"]], "NodeList \u7269\u4ef6": [[406, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[406, "documenttype-objects"]], "Document Objects": [[406, "document-objects"]], "Attr Objects": [[406, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[406, "namednodemap-objects"]], "Comment Objects": [[406, "comment-objects"]], "Text and CDATASection Objects": [[406, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[406, "processinginstruction-objects"]], "Conformance": [[406, "conformance"]], "Type Mapping": [[406, "type-mapping"]], "Accessor Methods": [[406, "accessor-methods"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[384, "module-unittest"]], "\u7c21\u55ae\u7bc4\u4f8b": [[384, "basic-example"], [352, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[384, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[384, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[384, "test-discovery"]], "Organizing test code": [[384, "organizing-test-code"]], "Re-using old test code": [[384, "re-using-old-test-code"]], "Skipping tests and expected failures": [[384, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[384, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[384, "classes-and-functions"], [252, "classes-and-functions"]], "Test cases": [[384, "test-cases"]], "Grouping tests": [[384, "grouping-tests"]], "Loading and running tests": [[384, "loading-and-running-tests"]], "load_tests Protocol": [[384, "load-tests-protocol"]], "Class and Module Fixtures": [[384, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[384, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[384, "setupmodule-and-teardownmodule"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[478, "what-s-new-in-python-3-9"]], "Summary -- Release highlights": [[478, "summary-release-highlights"], [477, "summary-release-highlights"], [475, "summary-release-highlights"], [474, "summary-release-highlights"], [472, "summary-release-highlights"]], "You should check for DeprecationWarning in your code": [[478, "you-should-check-for-deprecationwarning-in-your-code"]], "New Features": [[478, "new-features"], [478, "id1"], [477, "new-features"], [476, "new-features"], [475, "new-features"], [473, "new-features"], [474, "new-features"]], "Dictionary Merge & Update Operators": [[478, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[478, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[478, "type-hinting-generics-in-standard-collections"]], "New Parser": [[478, "new-parser"]], "\u5176\u4ed6\u8a9e\u8a00\u66f4\u52d5": [[478, "other-language-changes"], [477, "other-language-changes"], [476, "other-language-changes"], [462, "other-language-changes"], [475, "other-language-changes"], [467, "other-language-changes"], [463, "other-language-changes"], [461, "other-language-changes"], [464, "other-language-changes"], [468, "other-language-changes"], [473, "other-language-changes"], [474, "other-language-changes"], [470, "other-language-changes"], [472, "other-language-changes"], [471, "other-language-changes"], [469, "other-language-changes"], [465, "other-language-changes"]], "\u65b0\u6a21\u7d44": [[478, "new-modules"], [476, "new-modules"], [475, "new-modules"], [468, "new-modules"], [473, "new-modules"], [472, "new-modules"]], "zoneinfo": [[478, "zoneinfo"]], "graphlib": [[478, "graphlib"]], "Improved Modules": [[478, "improved-modules"], [477, "improved-modules"], [476, "improved-modules"], [475, "improved-modules"], [473, "improved-modules"], [474, "improved-modules"], [470, "improved-modules"], [472, "improved-modules"]], "ast": [[478, "ast"], [477, "ast"], [475, "ast"], [471, "ast"]], "asyncio": [[478, "asyncio"], [477, "asyncio"], [476, "asyncio"], [476, "whatsnew37-asyncio-deprecated"], [475, "asyncio"], [468, "asyncio"], [473, "asyncio"], [474, "asyncio"], [470, "asyncio"], [469, "asyncio"]], "compileall": [[478, "compileall"], [476, "compileall"], [474, "compileall"]], "concurrent.futures": [[478, "concurrent-futures"], [476, "concurrent-futures"], [475, "concurrent-futures"], [474, "concurrent-futures"]], "curses": [[478, "curses"], [477, "curses"], [468, "curses"], [474, "curses"], [472, "curses"]], "datetime": [[478, "datetime"], [477, "datetime"], [476, "datetime"], [475, "datetime"], [472, "datetime"], [469, "datetime"]], "distutils": [[478, "distutils"], [476, "distutils"], [475, "distutils"], [475, "id2"], [468, "distutils"], [474, "distutils"]], "fcntl": [[478, "fcntl"], [469, "fcntl"]], "ftplib": [[478, "ftplib"], [472, "ftplib"]], "gc": [[478, "gc"], [477, "gc"], [476, "gc"], [468, "gc"], [473, "gc"], [472, "gc"]], "hashlib": [[478, "hashlib"], [475, "hashlib"], [468, "hashlib"], [473, "hashlib"], [471, "hashlib"], [469, "hashlib"]], "http": [[478, "http"], [473, "http"], [474, "http"], [472, "http"]], "IDLE and idlelib": [[478, "idle-and-idlelib"], [477, "idle-and-idlelib"]], "imaplib": [[478, "imaplib"], [474, "imaplib"], [472, "imaplib"], [471, "imaplib"]], "inspect": [[478, "inspect"], [477, "inspect"], [475, "inspect"], [468, "inspect"], [473, "inspect"], [474, "inspect"], [470, "inspect"], [472, "inspect"], [471, "inspect"], [469, "inspect"]], "ipaddress": [[478, "ipaddress"], [476, "ipaddress"], [473, "ipaddress"], [474, "ipaddress"], [472, "ipaddress"]], "math": [[478, "math"], [477, "math"], [476, "math"], [475, "math"], [474, "math"], [470, "math"], [472, "math"], [471, "math"], [469, "math"]], "multiprocessing": [[478, "multiprocessing"], [477, "multiprocessing"], [476, "multiprocessing"], [475, "multiprocessing"], [473, "multiprocessing"], [474, "multiprocessing"], [472, "multiprocessing"]], "nntplib": [[478, "nntplib"], [472, "nntplib"]], "os": [[478, "os"], [477, "os"], [476, "os"], [475, "os"], [475, "id4"], [468, "os"], [473, "os"], [474, "os"], [470, "os"], [472, "os"], [471, "os"], [469, "os"]], "pathlib": [[478, "pathlib"], [477, "pathlib"], [476, "pathlib"], [475, "pathlib"], [468, "pathlib"], [473, "pathlib"], [474, "pathlib"], [470, "pathlib"], [469, "pathlib"]], "pdb": [[478, "pdb"], [476, "pdb"], [475, "pdb"], [473, "pdb"], [470, "pdb"], [472, "pdb"], [471, "pdb"]], "poplib": [[478, "poplib"], [473, "poplib"], [474, "poplib"], [471, "poplib"]], "pprint": [[478, "pprint"], [477, "pprint"], [468, "pprint"], [473, "pprint"]], "pydoc": [[478, "pydoc"], [476, "pydoc"], [475, "pydoc"], [473, "pydoc"], [472, "pydoc"], [471, "pydoc"]], "random": [[478, "random"], [475, "random"], [470, "random"], [471, "random"]], "signal": [[478, "signal"], [476, "signal"], [474, "signal"], [472, "signal"]], "smtplib": [[478, "smtplib"], [473, "smtplib"], [474, "smtplib"], [472, "smtplib"]], "socket": [[478, "socket"], [477, "socket"], [476, "socket"], [476, "id8"], [475, "socket"], [468, "socket"], [473, "socket"], [474, "socket"], [472, "socket"], [471, "socket"], [469, "socket"]], "time": [[478, "time"], [477, "time"], [476, "time"], [475, "time"], [474, "time"], [472, "time"], [469, "time"]], "sys": [[478, "sys"], [477, "sys"], [476, "sys"], [476, "id10"], [475, "sys"], [468, "sys"], [473, "sys"], [474, "sys"], [470, "sys"], [472, "sys"], [469, "sys"]], "tracemalloc": [[478, "tracemalloc"], [476, "tracemalloc"], [475, "tracemalloc"], [473, "tracemalloc"]], "typing": [[478, "typing"], [478, "id4"], [477, "typing"], [475, "typing"], [468, "typing"], [474, "typing"], [470, "typing"], [469, "typing"]], "unicodedata": [[478, "unicodedata"], [477, "unicodedata"], [476, "unicodedata"], [475, "unicodedata"], [474, "unicodedata"], [470, "unicodedata"], [469, "unicodedata"]], "venv": [[478, "venv"], [477, "venv"], [475, "venv"], [475, "whatsnew36-venv"], [473, "venv"], [469, "venv"]], "xml": [[478, "xml"], [477, "xml"], [468, "xml"]], "Optimizations": [[478, "optimizations"], [477, "optimizations"], [476, "optimizations"], [462, "optimizations"], [475, "optimizations"], [463, "optimizations"], [461, "optimizations"], [464, "optimizations"], [474, "optimizations"], [470, "optimizations"], [472, "optimizations"], [471, "optimizations"], [465, "optimizations"]], "Deprecated": [[478, "deprecated"], [477, "deprecated"], [475, "deprecated"], [473, "deprecated"], [474, "deprecated"], [470, "deprecated"], [470, "id4"], [472, "deprecated"]], "Removed": [[478, "removed"], [478, "id3"], [475, "removed"], [473, "removed"], [474, "removed"], [470, "removed"], [470, "id5"]], "Porting to Python 3.9": [[478, "porting-to-python-3-9"], [478, "id2"]], "Changes in the Python API": [[478, "changes-in-the-python-api"], [477, "changes-in-the-python-api"], [476, "changes-in-the-python-api"], [475, "changes-in-the-python-api"], [474, "changes-in-the-python-api"], [470, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[478, "changes-in-the-c-api"], [477, "changes-in-the-c-api"], [476, "changes-in-the-c-api"], [475, "changes-in-the-c-api"], [468, "changes-in-the-c-api"], [473, "changes-in-the-c-api"], [474, "changes-in-the-c-api"]], "CPython bytecode changes": [[478, "cpython-bytecode-changes"], [477, "cpython-bytecode-changes"], [476, "cpython-bytecode-changes"], [475, "cpython-bytecode-changes"], [470, "cpython-bytecode-changes"]], "Build Changes": [[478, "build-changes"], [476, "build-changes"], [470, "build-changes"]], "C API Changes": [[478, "c-api-changes"], [476, "c-api-changes"], [470, "c-api-changes"]], "Notable changes in Python 3.9.1": [[478, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[478, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Notable changes in Python 3.9.2": [[478, "notable-changes-in-python-3-9-2"]], "collections.abc": [[478, "collections-abc"], [468, "collections-abc"], [474, "collections-abc"]], "urllib.parse": [[478, "urllib-parse"], [476, "urllib-parse"], [468, "urllib-parse"], [471, "urllib-parse"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[477, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[477, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[477, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[477, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[477, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[477, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[477, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[477, "pickle-protocol-5-with-out-of-band-data-buffers"]], "New Modules": [[477, "new-modules"], [474, "new-modules"], [470, "new-modules"]], "builtins\uff08\u5167\u5efa\uff09": [[477, "builtins"]], "collections": [[477, "collections"], [476, "collections"], [476, "id3"], [475, "collections"], [473, "collections"], [474, "collections"], [472, "collections"], [471, "collections"]], "cProfile": [[477, "cprofile"], [476, "cprofile"]], "csv": [[477, "csv"], [474, "csv"], [470, "csv"], [471, "csv"]], "ctypes": [[477, "ctypes"], [471, "ctypes"]], "functools": [[477, "functools"], [476, "functools"], [473, "functools"], [474, "functools"], [472, "functools"], [471, "functools"], [469, "functools"]], "gettext": [[477, "gettext"], [476, "gettext"]], "gzip": [[477, "gzip"], [474, "gzip"]], "io": [[477, "io"], [476, "io"], [474, "io"], [472, "io"], [471, "io"]], "itertools": [[477, "itertools"], [476, "itertools"], [468, "itertools"], [470, "itertools"], [472, "itertools"], [471, "itertools"]], "json.tool": [[477, "json-tool"]], "logging": [[477, "logging"], [476, "logging"], [475, "logging"], [473, "logging"], [474, "logging"], [472, "logging"], [471, "logging"], [469, "logging"]], "mmap": [[477, "mmap"], [473, "mmap"], [472, "mmap"]], "os.path": [[477, "os-path"], [468, "os-path"], [470, "os-path"]], "pickle": [[477, "pickle"], [475, "pickle"], [473, "pickle"], [474, "pickle"], [472, "pickle"]], "plistlib": [[477, "plistlib"], [473, "plistlib"]], "py_compile": [[477, "py-compile"], [476, "py-compile"], [468, "py-compile"]], "shlex": [[477, "shlex"], [475, "shlex"], [472, "shlex"]], "shutil": [[477, "shutil"], [473, "shutil"], [474, "shutil"], [470, "shutil"], [472, "shutil"], [471, "shutil"], [469, "shutil"]], "ssl": [[477, "ssl"], [476, "ssl"], [476, "id9"], [475, "ssl"], [475, "id6"], [468, "ssl"], [473, "ssl"], [474, "ssl"], [472, "ssl"], [471, "ssl"]], "statistics": [[477, "statistics"], [475, "statistics"], [468, "statistics"], [473, "statistics"], [470, "statistics"]], "tarfile": [[477, "tarfile"], [473, "tarfile"], [474, "tarfile"], [472, "tarfile"], [471, "tarfile"]], "threading": [[477, "threading"], [476, "threading"], [468, "threading"], [473, "threading"], [474, "threading"], [470, "threading"], [472, "threading"], [471, "threading"], [469, "threading"]], "tokenize": [[477, "tokenize"], [470, "tokenize"]], "tkinter": [[477, "tkinter"], [476, "tkinter"], [475, "tkinter"], [475, "id7"], [474, "tkinter"], [470, "tkinter"], [469, "tkinter"]], "unittest": [[477, "unittest"], [476, "unittest"], [468, "unittest"], [473, "unittest"], [474, "unittest"], [470, "unittest"], [472, "unittest"], [471, "unittest"], [469, "unittest"]], "weakref": [[477, "weakref"], [473, "weakref"]], "xmlrpc": [[477, "xmlrpc"], [474, "xmlrpc"]], "Build and C API Changes": [[477, "build-and-c-api-changes"], [462, "build-and-c-api-changes"], [475, "build-and-c-api-changes"], [467, "build-and-c-api-changes"], [463, "build-and-c-api-changes"], [461, "build-and-c-api-changes"], [464, "build-and-c-api-changes"], [474, "build-and-c-api-changes"], [472, "build-and-c-api-changes"], [466, "build-and-c-api-changes"], [471, "build-and-c-api-changes"], [465, "build-and-c-api-changes"]], "API and Feature Removals": [[477, "api-and-feature-removals"], [476, "api-and-feature-removals"], [475, "api-and-feature-removals"], [474, "api-and-feature-removals"]], "Porting to Python 3.8": [[477, "porting-to-python-3-8"]], "Changes in Python behavior": [[477, "changes-in-python-behavior"], [474, "changes-in-python-behavior"]], "Demos and Tools": [[477, "demos-and-tools"], [470, "demos-and-tools"]], "Notable changes in Python 3.8.1": [[477, "notable-changes-in-python-3-8-1"]], "Notable changes in Python 3.8.8": [[477, "notable-changes-in-python-3-8-8"]], "Notable changes in Python 3.8.12": [[477, "notable-changes-in-python-3-8-12"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[479, "changelog"]], "Python next": [[479, "python-next"]], "Security": [[479, "security"], [479, "id2"], [479, "id7"], [479, "id20"], [479, "id28"], [479, "id47"], [479, "id56"], [479, "id73"], [479, "id83"], [479, "id92"], [479, "id104"], [479, "id165"], [479, "id176"], [479, "id186"], [479, "id195"], [479, "id205"], [479, "id223"], [479, "id234"], [479, "id244"], [479, "id254"], [479, "id264"], [479, "id275"], [479, "id286"], [479, "id301"], [479, "id311"], [479, "id322"], [479, "id333"], [479, "id344"], [479, "id360"], [479, "id395"], [479, "id406"], [479, "id447"], [479, "id469"], [479, "id492"], [479, "id501"], [479, "id502"], [479, "id561"], [479, "id570"], [479, "id580"], [479, "id590"], [479, "id594"], [479, "id602"], [479, "id615"]], "Core and Builtins": [[479, "core-and-builtins"], [479, "id3"], [479, "id8"], [479, "id15"], [479, "id21"], [479, "id29"], [479, "id39"], [479, "id48"], [479, "id58"], [479, "id64"], [479, "id74"], [479, "id84"], [479, "id93"], [479, "id105"], [479, "id114"], [479, "id123"], [479, "id131"], [479, "id140"], [479, "id148"], [479, "id156"], [479, "id166"], [479, "id177"], [479, "id187"], [479, "id196"], [479, "id206"], [479, "id215"], [479, "id224"], [479, "id235"], [479, "id245"], [479, "id255"], [479, "id265"], [479, "id276"], [479, "id287"], [479, "id295"], [479, "id302"], [479, "id312"], [479, "id323"], [479, "id334"], [479, "id345"], [479, "id354"], [479, "id361"], [479, "id373"], [479, "id379"], [479, "id386"], [479, "id396"], [479, "id407"], [479, "id416"], [479, "id424"], [479, "id431"], [479, "id441"], [479, "id448"], [479, "id457"], [479, "id470"], [479, "id480"], [479, "id493"], [479, "id503"], [479, "id512"], [479, "id514"], [479, "id522"], [479, "id526"], [479, "id531"], [479, "id536"], [479, "id541"], [479, "id547"], [479, "id555"], [479, "id562"], [479, "id571"], [479, "id581"], [479, "id591"], [479, "id595"], [479, "id603"], [479, "id612"], [479, "id616"], [479, "id624"], [479, "id626"], [479, "id637"], [479, "id639"], [479, "id641"], [479, "id646"], [479, "id649"], [479, "id654"], [479, "id656"], [479, "id662"], [479, "id668"], [479, "id673"], [479, "id678"]], "Library": [[479, "library"], [479, "id4"], [479, "id9"], [479, "id16"], [479, "id22"], [479, "id30"], [479, "id40"], [479, "id49"], [479, "id59"], [479, "id65"], [479, "id75"], [479, "id85"], [479, "id94"], [479, "id106"], [479, "id115"], [479, "id124"], [479, "id132"], [479, "id141"], [479, "id149"], [479, "id157"], [479, "id167"], [479, "id178"], [479, "id188"], [479, "id197"], [479, "id207"], [479, "id216"], [479, "id225"], [479, "id236"], [479, "id246"], [479, "id256"], [479, "id266"], [479, "id277"], [479, "id288"], [479, "id296"], [479, "id303"], [479, "id313"], [479, "id324"], [479, "id335"], [479, "id346"], [479, "id355"], [479, "id362"], [479, "id371"], [479, "id374"], [479, "id380"], [479, "id387"], [479, "id397"], [479, "id408"], [479, "id417"], [479, "id425"], [479, "id432"], [479, "id442"], [479, "id449"], [479, "id458"], [479, "id471"], [479, "id481"], [479, "id490"], [479, "id494"], [479, "id504"], [479, "id515"], [479, "id527"], [479, "id532"], [479, "id537"], [479, "id542"], [479, "id548"], [479, "id556"], [479, "id563"], [479, "id572"], [479, "id582"], [479, "id592"], [479, "id593"], [479, "id596"], [479, "id604"], [479, "id617"], [479, "id627"], [479, "id635"], [479, "id638"], [479, "id640"], [479, "id642"], [479, "id647"], [479, "id650"], [479, "id655"], [479, "id657"], [479, "id663"], [479, "id669"], [479, "id674"], [479, "id679"]], "Build": [[479, "build"], [479, "id5"], [479, "id12"], [479, "id24"], [479, "id33"], [479, "id43"], [479, "id52"], [479, "id62"], [479, "id68"], [479, "id78"], [479, "id88"], [479, "id97"], [479, "id109"], [479, "id118"], [479, "id127"], [479, "id135"], [479, "id144"], [479, "id152"], [479, "id160"], [479, "id170"], [479, "id181"], [479, "id191"], [479, "id200"], [479, "id210"], [479, "id219"], [479, "id228"], [479, "id239"], [479, "id249"], [479, "id259"], [479, "id269"], [479, "id280"], [479, "id291"], [479, "id298"], [479, "id306"], [479, "id316"], [479, "id327"], [479, "id338"], [479, "id349"], [479, "id365"], [479, "id376"], [479, "id383"], [479, "id390"], [479, "id400"], [479, "id411"], [479, "id420"], [479, "id435"], [479, "id444"], [479, "id452"], [479, "id461"], [479, "id468"], [479, "id474"], [479, "id484"], [479, "id491"], [479, "id497"], [479, "id507"], [479, "id513"], [479, "id521"], [479, "id525"], [479, "id535"], [479, "id539"], [479, "id545"], [479, "id552"], [479, "id560"], [479, "id566"], [479, "id577"], [479, "id586"], [479, "id599"], [479, "id611"], [479, "id621"], [479, "id631"], [479, "id634"], [479, "id636"], [479, "id648"], [479, "id653"], [479, "id664"], [479, "id670"], [479, "id675"], [479, "id681"]], "C API": [[479, "c-api"], [479, "id6"], [479, "id14"], [479, "id19"], [479, "id27"], [479, "id38"], [479, "id46"], [479, "id55"], [479, "id72"], [479, "id82"], [479, "id91"], [479, "id103"], [479, "id113"], [479, "id122"], [479, "id130"], [479, "id139"], [479, "id147"], [479, "id155"], [479, "id164"], [479, "id175"], [479, "id185"], [479, "id194"], [479, "id204"], [479, "id214"], [479, "id222"], [479, "id233"], [479, "id243"], [479, "id253"], [479, "id263"], [479, "id274"], [479, "id285"], [479, "id294"], [479, "id300"], [479, "id310"], [479, "id321"], [479, "id332"], [479, "id343"], [479, "id353"], [479, "id370"], [479, "id372"], [479, "id405"], [479, "id423"], [479, "id430"], [479, "id440"], [479, "id446"], [479, "id456"], [479, "id466"], [479, "id479"], [479, "id489"], [479, "id506"], [479, "id518"], [479, "id528"], [479, "id544"], [479, "id550"], [479, "id565"], [479, "id578"], [479, "id589"], [479, "id601"], [479, "id606"], [479, "id667"], [479, "id676"], [479, "id682"]], "Python 3.12.0 release candidate 1": [[479, "python-3-12-0-release-candidate-1"]], "Documentation": [[479, "documentation"], [479, "id10"], [479, "id23"], [479, "id31"], [479, "id41"], [479, "id50"], [479, "id60"], [479, "id66"], [479, "id76"], [479, "id86"], [479, "id95"], [479, "id107"], [479, "id116"], [479, "id125"], [479, "id133"], [479, "id142"], [479, "id150"], [479, "id158"], [479, "id168"], [479, "id179"], [479, "id189"], [479, "id198"], [479, "id208"], [479, "id217"], [479, "id226"], [479, "id237"], [479, "id247"], [479, "id257"], [479, "id267"], [479, "id278"], [479, "id289"], [479, "id297"], [479, "id304"], [479, "id314"], [479, "id325"], [479, "id336"], [479, "id347"], [479, "id356"], [479, "id363"], [479, "id375"], [479, "id381"], [479, "id388"], [479, "id398"], [479, "id409"], [479, "id418"], [479, "id426"], [479, "id433"], [479, "id443"], [479, "id450"], [479, "id459"], [479, "id472"], [479, "id482"], [479, "id495"], [479, "id508"], [479, "id519"], [479, "id529"], [479, "id533"], [479, "id568"], [479, "id574"], [479, "id584"], [479, "id597"], [479, "id607"], [479, "id619"], [479, "id629"], [479, "id644"], [479, "id652"], [479, "id660"], [479, "id683"]], "Tests": [[479, "tests"], [479, "id11"], [479, "id17"], [479, "id32"], [479, "id42"], [479, "id51"], [479, "id61"], [479, "id67"], [479, "id77"], [479, "id87"], [479, "id96"], [479, "id108"], [479, "id117"], [479, "id126"], [479, "id134"], [479, "id143"], [479, "id151"], [479, "id159"], [479, "id169"], [479, "id180"], [479, "id190"], [479, "id199"], [479, "id209"], [479, "id218"], [479, "id227"], [479, "id238"], [479, "id248"], [479, "id258"], [479, "id268"], [479, "id279"], [479, "id290"], [479, "id305"], [479, "id315"], [479, "id326"], [479, "id337"], [479, "id348"], [479, "id357"], [479, "id364"], [479, "id382"], [479, "id389"], [479, "id399"], [479, "id410"], [479, "id419"], [479, "id427"], [479, "id434"], [479, "id451"], [479, "id460"], [479, "id467"], [479, "id473"], [479, "id483"], [479, "id496"], [479, "id510"], [479, "id520"], [479, "id534"], [479, "id540"], [479, "id546"], [479, "id551"], [479, "id558"], [479, "id569"], [479, "id575"], [479, "id585"], [479, "id598"], [479, "id608"], [479, "id613"], [479, "id620"], [479, "id630"], [479, "id645"], [479, "id651"], [479, "id659"], [479, "id665"], [479, "id671"], [479, "id684"]], "Tools/Demos": [[479, "tools-demos"], [479, "id13"], [479, "id37"], [479, "id45"], [479, "id71"], [479, "id81"], [479, "id101"], [479, "id112"], [479, "id121"], [479, "id174"], [479, "id221"], [479, "id232"], [479, "id262"], [479, "id273"], [479, "id284"], [479, "id320"], [479, "id331"], [479, "id342"], [479, "id352"], [479, "id369"], [479, "id394"], [479, "id404"], [479, "id415"], [479, "id429"], [479, "id439"], [479, "id455"], [479, "id465"], [479, "id478"], [479, "id488"], [479, "id500"], [479, "id509"], [479, "id523"], [479, "id530"], [479, "id553"], [479, "id567"], [479, "id579"], [479, "id588"], [479, "id609"], [479, "id623"], [479, "id633"], [479, "id661"], [479, "id666"], [479, "id672"], [479, "id685"]], "Python 3.12.0 beta 4": [[479, "python-3-12-0-beta-4"]], "Python 3.12.0 beta 3": [[479, "python-3-12-0-beta-3"]], "Python 3.12.0 beta 2": [[479, "python-3-12-0-beta-2"]], "IDLE": [[479, "idle"], [479, "id36"], [479, "id100"], [479, "id129"], [479, "id138"], [479, "id163"], [479, "id173"], [479, "id184"], [479, "id193"], [479, "id203"], [479, "id213"], [479, "id231"], [479, "id242"], [479, "id252"], [479, "id272"], [479, "id283"], [479, "id293"], [479, "id299"], [479, "id309"], [479, "id319"], [479, "id330"], [479, "id341"], [479, "id351"], [479, "id359"], [479, "id368"], [479, "id378"], [479, "id385"], [479, "id393"], [479, "id403"], [479, "id414"], [479, "id438"], [479, "id445"], [479, "id454"], [479, "id464"], [479, "id477"], [479, "id487"], [479, "id499"], [479, "id505"], [479, "id516"], [479, "id549"], [479, "id557"], [479, "id564"], [479, "id573"], [479, "id583"], [479, "id605"], [479, "id614"], [479, "id618"], [479, "id628"], [479, "id643"], [479, "id658"], [479, "id680"], [467, "idle"], [471, "idle"], [244, "idle"]], "Python 3.12.0 beta 1": [[479, "python-3-12-0-beta-1"]], "Python 3.12.0 alpha 7": [[479, "python-3-12-0-alpha-7"]], "Python 3.12.0 alpha 6": [[479, "python-3-12-0-alpha-6"]], "Python 3.12.0 alpha 5": [[479, "python-3-12-0-alpha-5"]], "Python 3.12.0 alpha 4": [[479, "python-3-12-0-alpha-4"]], "Python 3.12.0 alpha 3": [[479, "python-3-12-0-alpha-3"]], "Python 3.12.0 alpha 2": [[479, "python-3-12-0-alpha-2"]], "Python 3.12.0 alpha 1": [[479, "python-3-12-0-alpha-1"]], "Python 3.11.0 beta 1": [[479, "python-3-11-0-beta-1"]], "Python 3.11.0 alpha 7": [[479, "python-3-11-0-alpha-7"]], "Python 3.11.0 alpha 6": [[479, "python-3-11-0-alpha-6"]], "Python 3.11.0 alpha 5": [[479, "python-3-11-0-alpha-5"]], "Python 3.11.0 alpha 4": [[479, "python-3-11-0-alpha-4"]], "Python 3.11.0 alpha 3": [[479, "python-3-11-0-alpha-3"]], "Python 3.11.0 alpha 2": [[479, "python-3-11-0-alpha-2"]], "Python 3.11.0 alpha 1": [[479, "python-3-11-0-alpha-1"]], "Python 3.10.0 beta 1": [[479, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[479, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[479, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[479, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[479, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[479, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[479, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[479, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[479, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[479, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[479, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[479, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[479, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[479, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[479, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[479, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[479, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[479, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[479, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[479, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[479, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[479, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[479, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[479, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[479, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[479, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[479, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[479, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[479, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[479, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[479, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[479, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[479, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[479, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[479, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[479, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[479, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[479, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[479, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[479, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[479, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[479, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[479, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[479, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[479, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[479, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[479, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[479, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[479, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[479, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[479, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[479, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[479, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[479, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[479, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[479, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[479, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[479, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[479, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[479, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[479, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[479, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[479, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[479, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[479, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[479, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[479, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[479, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[479, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[479, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[479, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[479, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[479, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[479, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[479, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[479, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[479, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[479, "python-3-5-0-alpha-1"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[476, "what-s-new-in-python-3-7"]], "Summary -- Release Highlights": [[476, "summary-release-highlights"], [473, "summary-release-highlights"]], "PEP 563: Postponed Evaluation of Annotations": [[476, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[476, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[476, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[476, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[476, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[476, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[476, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[476, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[476, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[476, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[476, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[476, "python-development-mode-x-dev"]], "contextvars": [[476, "contextvars"]], "dataclasses": [[476, "dataclasses"], [468, "dataclasses"], [469, "dataclasses"]], "importlib.resources": [[476, "importlib-resources"]], "argparse": [[476, "argparse"], [468, "argparse"], [473, "argparse"], [474, "argparse"]], "binascii": [[476, "binascii"], [475, "binascii"], [472, "binascii"]], "calendar": [[476, "calendar"], [470, "calendar"]], "contextlib": [[476, "contextlib"], [475, "contextlib"], [468, "contextlib"], [473, "contextlib"], [474, "contextlib"], [472, "contextlib"], [471, "contextlib"], [469, "contextlib"]], "crypt": [[476, "crypt"], [472, "crypt"]], "dbm": [[476, "dbm"], [476, "id4"], [475, "dbm"], [473, "dbm"], [474, "dbm"], [471, "dbm"]], "decimal": [[476, "decimal"], [475, "decimal"], [472, "decimal"]], "dis": [[476, "dis"], [473, "dis"], [470, "dis"], [471, "dis"]], "enum": [[476, "enum"], [476, "id5"], [475, "enum"], [468, "enum"], [473, "enum"], [474, "enum"], [469, "enum"]], "hmac": [[476, "hmac"], [468, "hmac"], [473, "hmac"], [472, "hmac"]], "http.client": [[476, "http-client"], [475, "http-client"], [474, "http-client"], [471, "http-client"]], "http.server": [[476, "http-server"]], "idlelib and IDLE": [[476, "idlelib-and-idle"], [475, "idlelib-and-idle"], [474, "idlelib-and-idle"]], "locale": [[476, "locale"], [476, "id7"], [474, "locale"], [469, "locale"]], "mimetypes": [[476, "mimetypes"]], "msilib": [[476, "msilib"]], "queue": [[476, "queue"]], "re": [[476, "re"], [475, "re"], [475, "id5"], [473, "re"], [474, "re"], [472, "re"], [469, "re"]], "socketserver": [[476, "socketserver"], [475, "socketserver"], [472, "socketserver"]], "sqlite3": [[476, "sqlite3"], [475, "sqlite3"], [468, "sqlite3"], [473, "sqlite3"], [474, "sqlite3"], [470, "sqlite3"], [472, "sqlite3"], [471, "sqlite3"], [469, "sqlite3"]], "string": [[476, "string"], [469, "string"]], "subprocess": [[476, "subprocess"], [475, "subprocess"], [473, "subprocess"], [474, "subprocess"], [472, "subprocess"]], "types": [[476, "types"], [468, "types"], [473, "types"], [474, "types"], [470, "types"], [472, "types"]], "unittest.mock": [[476, "unittest-mock"], [475, "unittest-mock"], [474, "unittest-mock"]], "uu": [[476, "uu"]], "uuid": [[476, "uuid"], [470, "uuid"]], "warnings": [[476, "warnings"], [475, "warnings"], [469, "warnings"]], "xml.etree": [[476, "xml-etree"], [473, "xml-etree"]], "xmlrpc.server": [[476, "xmlrpc-server"]], "zipapp": [[476, "zipapp"], [474, "zipapp"]], "zipfile": [[476, "zipfile"], [475, "zipfile"], [473, "zipfile"], [474, "zipfile"], [469, "zipfile"]], "Other CPython Implementation Changes": [[476, "other-cpython-implementation-changes"]], "Deprecated Python Behavior": [[476, "deprecated-python-behavior"], [474, "deprecated-python-behavior"]], "Deprecated Python modules, functions and methods": [[476, "deprecated-python-modules-functions-and-methods"], [475, "deprecated-python-modules-functions-and-methods"], [474, "deprecated-python-modules-functions-and-methods"], [472, "deprecated-python-modules-functions-and-methods"]], "aifc": [[476, "aifc"], [473, "aifc"]], "macpath": [[476, "macpath"]], "sunau": [[476, "sunau"], [473, "sunau"]], "wave": [[476, "wave"], [473, "wave"]], "Deprecated functions and types of the C API": [[476, "deprecated-functions-and-types-of-the-c-api"], [475, "deprecated-functions-and-types-of-the-c-api"], [472, "deprecated-functions-and-types-of-the-c-api"]], "Platform Support Removals": [[476, "platform-support-removals"]], "Module Removals": [[476, "module-removals"]], "Windows-only Changes": [[476, "windows-only-changes"], [476, "id12"]], "Porting to Python 3.7": [[476, "porting-to-python-3-7"]], "Changes in Python Behavior": [[476, "changes-in-python-behavior"]], "Other CPython implementation changes": [[476, "id13"]], "Notable changes in Python 3.7.1": [[476, "notable-changes-in-python-3-7-1"]], "Notable changes in Python 3.7.2": [[476, "notable-changes-in-python-3-7-2"]], "Notable changes in Python 3.7.6": [[476, "notable-changes-in-python-3-7-6"]], "Notable changes in Python 3.7.10": [[476, "notable-changes-in-python-3-7-10"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[480, "what-s-new-in-python"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[458, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[458, "what-about-python-1-6"]], "New Development Process": [[458, "new-development-process"]], "Unicode": [[458, "unicode"], [471, "unicode"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[458, "list-comprehensions"]], "Augmented Assignment": [[458, "augmented-assignment"]], "String Methods": [[458, "string-methods"], [341, "string-methods"]], "Garbage Collection of Cycles": [[458, "garbage-collection-of-cycles"]], "Other Core Changes": [[458, "other-core-changes"]], "Minor Language Changes": [[458, "minor-language-changes"]], "Changes to Built-in Functions": [[458, "changes-to-built-in-functions"]], "Porting to 2.0": [[458, "porting-to-2-0"]], "Extending/Embedding Changes": [[458, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[458, "distutils-making-modules-easy-to-install"]], "XML Modules": [[458, "xml-modules"]], "SAX2 Support": [[458, "sax2-support"]], "DOM Support": [[458, "dom-support"]], "Relationship to PyXML": [[458, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[458, "module-changes"]], "New modules": [[458, "new-modules"]], "IDLE Improvements": [[458, "idle-improvements"]], "Deleted and Deprecated Modules": [[458, "deleted-and-deprecated-modules"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[442, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[442, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[442, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[442, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[442, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[442, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[442, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[442, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[442, "saving-structured-data-with-json"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[456, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[456, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[456, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[456, "on-freebsd-and-openbsd"]], "\u5efa\u7f6e Python": [[456, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[456, "python-related-paths-and-files"]], "\u96dc\u9805": [[456, "miscellaneous"], [469, "misc"]], "\u5ba2\u88fd\u5316 OpenSSL": [[456, "custom-openssl"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[462, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[462, "pep-218-built-in-set-objects"]], "PEP 237: Unifying Long Integers and Integers": [[462, "pep-237-unifying-long-integers-and-integers"], [460, "pep-237-unifying-long-integers-and-integers"]], "PEP 289: Generator Expressions": [[462, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[462, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[462, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[462, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[462, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[462, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[462, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[462, "the-decimal-type"]], "Context \u578b\u5225": [[462, "the-context-type"]], "PEP 328: Multi-line Imports": [[462, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[462, "pep-331-locale-independent-float-string-conversions"]], "New, Improved, and Deprecated Modules": [[462, "new-improved-and-deprecated-modules"], [467, "new-improved-and-deprecated-modules"], [461, "new-improved-and-deprecated-modules"], [471, "new-improved-and-deprecated-modules"]], "cookielib": [[462, "cookielib"]], "doctest": [[462, "doctest"], [468, "doctest"], [473, "doctest"], [474, "doctest"]], "Port-Specific Changes": [[462, "port-specific-changes"], [463, "port-specific-changes"], [461, "port-specific-changes"]], "Porting to Python 2.4": [[462, "porting-to-python-2-4"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[475, "what-s-new-in-python-3-6"]], "PEP 498: Formatted string literals": [[475, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[475, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[475, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[475, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[475, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[475, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[475, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[475, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[475, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[475, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[475, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[475, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[475, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[475, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[475, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[475, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[475, "dtrace-and-systemtap-probing-support"]], "secrets": [[475, "secrets"]], "array": [[475, "array"], [468, "array"], [470, "array"], [472, "array"]], "cmath": [[475, "cmath"], [474, "cmath"]], "email": [[475, "email"], [473, "email"], [474, "email"], [472, "email"], [471, "email"]], "encodings": [[475, "encodings"], [468, "encodings"]], "faulthandler": [[475, "faulthandler"], [468, "faulthandler"], [474, "faulthandler"], [472, "faulthandler"]], "fileinput": [[475, "fileinput"], [468, "fileinput"]], "json": [[475, "json"], [474, "json"]], "pickletools": [[475, "pickletools"]], "readline": [[475, "readline"], [474, "readline"]], "rlcompleter": [[475, "rlcompleter"]], "site": [[475, "site"], [468, "site"], [471, "site"]], "struct": [[475, "struct"], [473, "struct"], [472, "struct"]], "telnetlib": [[475, "telnetlib"]], "timeit": [[475, "timeit"], [474, "timeit"]], "traceback": [[475, "traceback"], [468, "traceback"], [473, "traceback"], [474, "traceback"], [469, "traceback"]], "urllib.request": [[475, "urllib-request"]], "urllib.robotparser": [[475, "urllib-robotparser"]], "winreg": [[475, "winreg"]], "winsound": [[475, "winsound"]], "xmlrpc.client": [[475, "xmlrpc-client"]], "Other Improvements": [[475, "other-improvements"], [473, "other-improvements"]], "\u65b0\u95dc\u9375\u5b57": [[475, "new-keywords"]], "Deprecated Python behavior": [[475, "deprecated-python-behavior"]], "asynchat": [[475, "asynchat"]], "asyncore": [[475, "asyncore"], [471, "asyncore"]], "grp": [[475, "grp"]], "Deprecated Build Options": [[475, "deprecated-build-options"]], "Porting to Python 3.6": [[475, "porting-to-python-3-6"]], "Changes in 'python' Command Behavior": [[475, "changes-in-python-command-behavior"], [473, "changes-in-python-command-behavior"]], "Notable changes in Python 3.6.2": [[475, "notable-changes-in-python-3-6-2"]], "New make regen-all build target": [[475, "new-make-regen-all-build-target"], [474, "new-make-regen-all-build-target"], [465, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[475, "removal-of-make-touch-build-target"], [474, "removal-of-make-touch-build-target"], [465, "removal-of-make-touch-build-target"]], "Notable changes in Python 3.6.4": [[475, "notable-changes-in-python-3-6-4"]], "Notable changes in Python 3.6.5": [[475, "notable-changes-in-python-3-6-5"]], "Notable changes in Python 3.6.7": [[475, "notable-changes-in-python-3-6-7"]], "Notable changes in Python 3.6.10": [[475, "notable-changes-in-python-3-6-10"]], "Notable changes in Python 3.6.13": [[475, "notable-changes-in-python-3-6-13"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[467, "pep-372-ordered-dictionaries"]], "PEP 378: Format Specifier for Thousands Separator": [[467, "pep-378-format-specifier-for-thousands-separator"], [465, "pep-378-format-specifier-for-thousands-separator"]], "\u6700\u4f73\u5316": [[467, "optimizations"], [468, "optimizations"], [469, "optimizations"]], "Porting to Python 3.1": [[467, "porting-to-python-3-1"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[460, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[460, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[460, "old-and-new-classes"]], "Descriptors": [[460, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[460, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[460, "attribute-access"]], "Related Links": [[460, "related-links"]], "PEP 234: Iterators": [[460, "pep-234-iterators"]], "PEP 255: Simple Generators": [[460, "pep-255-simple-generators"], [461, "pep-255-simple-generators"]], "PEP 238: Changing the Division Operator": [[460, "pep-238-changing-the-division-operator"]], "Unicode Changes": [[460, "unicode-changes"]], "PEP 227: Nested Scopes": [[460, "pep-227-nested-scopes"], [459, "pep-227-nested-scopes"]], "New and Improved Modules": [[460, "new-and-improved-modules"], [464, "new-and-improved-modules"], [459, "new-and-improved-modules"], [465, "new-and-improved-modules"]], "Interpreter Changes and Fixes": [[460, "interpreter-changes-and-fixes"]], "Other Changes and Fixes": [[460, "other-changes-and-fixes"], [461, "other-changes-and-fixes"], [459, "other-changes-and-fixes"], [465, "other-changes-and-fixes"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[450, "what-now"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[449, "virtual-environments-and-packages"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[449, "managing-packages-with-pip"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[463, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[463, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[463, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[463, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[463, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[463, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[463, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[463, "pep-342-new-generator-features"]], "PEP 343: The 'with' statement": [[463, "pep-343-the-with-statement"], [464, "pep-343-the-with-statement"]], "Writing Context Managers": [[463, "writing-context-managers"], [464, "writing-context-managers"]], "The contextlib module": [[463, "the-contextlib-module"], [464, "the-contextlib-module"]], "PEP 352: Exceptions as New-Style Classes": [[463, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[463, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[463, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[463, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[463, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[463, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[463, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[463, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[463, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[463, "the-wsgiref-package"]], "Porting to Python 2.5": [[463, "porting-to-python-2-5"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[461, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[461, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[461, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[461, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[461, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[461, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[461, "pep-279-enumerate"]], "PEP 282: The logging Package": [[461, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[461, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[461, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[461, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[461, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[461, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[461, "pep-307-pickle-enhancements"]], "Extended Slices": [[461, "extended-slices"]], "String Changes": [[461, "string-changes"]], "Date/Time Type": [[461, "date-time-type"]], "The optparse Module": [[461, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[461, "pymalloc-a-specialized-object-allocator"]], "Porting to Python 2.3": [[461, "porting-to-python-2-3"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[448, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[448, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[448, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[448, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[448, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[448, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[448, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[448, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[448, "decimal-floating-point-arithmetic"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[445, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[445, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[445, "numbers"]], "\u6587\u5b57": [[445, "text"]], "List\uff08\u4e32\u5217\uff09": [[445, "lists"], [341, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[445, "first-steps-towards-programming"]], "Configure Python": [[452, "configure-python"]], "Build Requirements": [[452, "build-requirements"]], "Configure Options": [[452, "configure-options"]], "General Options": [[452, "general-options"]], "WebAssembly Options": [[452, "webassembly-options"]], "Install Options": [[452, "install-options"]], "Performance options": [[452, "performance-options"]], "Python Debug Build": [[452, "python-debug-build"]], "Debug options": [[452, "debug-options"]], "Linker options": [[452, "linker-options"]], "Libraries options": [[452, "libraries-options"]], "Security Options": [[452, "security-options"]], "macOS Options": [[452, "macos-options"]], "Cross Compiling Options": [[452, "cross-compiling-options"]], "Python Build System": [[452, "python-build-system"]], "Main files of the build system": [[452, "main-files-of-the-build-system"]], "Main build steps": [[452, "main-build-steps"]], "Main Makefile targets": [[452, "main-makefile-targets"]], "C extensions": [[452, "c-extensions"]], "Compiler and linker flags": [[452, "compiler-and-linker-flags"]], "Preprocessor flags": [[452, "preprocessor-flags"]], "Compiler flags": [[452, "compiler-flags"]], "Linker flags": [[452, "linker-flags"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[464, "what-s-new-in-python-2-6"]], "Python 3.0": [[464, "python-3-0"]], "Changes to the Development Process": [[464, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[464, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[464, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 366: Explicit Relative Imports From a Main Module": [[464, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[464, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[464, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[464, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[464, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[464, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[464, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[464, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[464, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[464, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[464, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[464, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[464, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[464, "the-fractions-module"]], "Interpreter Changes": [[464, "interpreter-changes"], [465, "interpreter-changes"]], "The ast module": [[464, "the-ast-module"]], "The future_builtins module": [[464, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[464, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[464, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[464, "ctypes-enhancements"]], "Improved SSL Support": [[464, "improved-ssl-support"]], "Deprecations and Removals": [[464, "deprecations-and-removals"]], "Port-Specific Changes: Windows": [[464, "port-specific-changes-windows"], [465, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[464, "port-specific-changes-mac-os-x"], [465, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: IRIX": [[464, "port-specific-changes-irix"]], "Porting to Python 2.6": [[464, "porting-to-python-2-6"]], "\u7de8\u8f2f\u5668\u8207 IDE": [[453, "editors-and-ides"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-3-10"]], "\u6458\u8981 -- \u767c\u5e03\u91cd\u9ede": [[468, "summary-release-highlights"]], "\u65b0\u529f\u80fd": [[468, "new-features"], [468, "id1"]], "\u5e36\u62ec\u865f\u7684\u60c5\u5883\u7ba1\u7406\u5668": [[468, "parenthesized-context-managers"]], "\u66f4\u597d\u7684\u932f\u8aa4\u8a0a\u606f": [[468, "better-error-messages"]], "SyntaxErrors": [[468, "syntaxerrors"]], "IndentationErrors": [[468, "indentationerrors"]], "AttributeErrors": [[468, "attributeerrors"]], "NameErrors": [[468, "nameerrors"]], "PEP 626\uff1a\u7528\u65bc\u9664\u932f\u548c\u5176\u4ed6\u5de5\u5177\u7684\u7cbe\u78ba\u5217\u865f": [[468, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634\uff1a\u7d50\u69cb\u6a21\u5f0f\u5339\u914d": [[468, "pep-634-structural-pattern-matching"]], "\u8a9e\u6cd5\u548c\u64cd\u4f5c": [[468, "syntax-and-operations"]], "\u5ba3\u544a\u5f0f\u65b9\u6cd5 (Declarative approach)": [[468, "declarative-approach"]], "\u7c21\u55ae\u6a21\u5f0f\uff1a\u8207\u5b57\u9762\u503c\u5339\u914d": [[468, "simple-pattern-match-to-a-literal"]], "\u6c92\u6709\u842c\u7528\u5b57\u5143 (wildcard) \u7684\u884c\u70ba": [[468, "behavior-without-the-wildcard"]], "\u5177\u6709\u5b57\u9762\u503c\u548c\u8b8a\u6578\u7684\u6a21\u5f0f": [[468, "patterns-with-a-literal-and-variable"]], "\u6a21\u5f0f\u548c\u985e\u5225": [[468, "patterns-and-classes"]], "\u5177\u6709\u4f4d\u7f6e\u53c3\u6578\u7684\u6a21\u5f0f": [[468, "patterns-with-positional-parameters"]], "\u5de2\u72c0\u6a21\u5f0f": [[468, "nested-patterns"]], "\u8907\u96dc\u6a21\u5f0f\u548c\u842c\u7528\u5b57\u5143": [[468, "complex-patterns-and-the-wildcard"]], "Guard": [[468, "guard"]], "\u5176\u4ed6\u4e3b\u8981\u529f\u80fd": [[468, "other-key-features"]], "\u53ef\u9078\u7684 EncodingWarning \u548c encoding=\"locale\" \u9078\u9805": [[468, "optional-encodingwarning-and-encoding-locale-option"]], "\u8207\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u529f\u80fd": [[468, "new-features-related-to-type-hints"]], "PEP 604\uff1a\u65b0\u578b\u806f\u96c6\u904b\u7b97\u5b50": [[468, "pep-604-new-type-union-operator"]], "PEP 612\uff1a\u53c3\u6578\u898f\u7bc4\u8b8a\u6578": [[468, "pep-612-parameter-specification-variables"]], "PEP 613\uff1a\u578b\u5225\u5225\u540d (TypeAlias)": [[468, "pep-613-typealias"]], "PEP 647\uff1a\u4f7f\u7528\u8005\u5b9a\u7fa9\u7684\u578b\u5225\u9632\u8b77": [[468, "pep-647-user-defined-type-guards"]], "\u6539\u9032\u7684\u6a21\u7d44": [[468, "improved-modules"]], "asynchat, asyncore, smtpd": [[468, "asynchat-asyncore-smtpd"]], "base64": [[468, "base64"], [473, "base64"], [472, "base64"]], "bdb": [[468, "bdb"]], "bisect": [[468, "bisect"]], "codecs": [[468, "codecs"], [472, "codecs"]], "\u50c5\u9650\u95dc\u9375\u5b57\u6b04\u4f4d (Keyword-only fields)": [[468, "keyword-only-fields"]], "glob": [[468, "glob"], [473, "glob"], [474, "glob"]], "IDLE \u548c idlelib": [[468, "idle-and-idlelib"]], "importlib.metadata": [[468, "importlib-metadata"]], "linecache": [[468, "linecache"], [474, "linecache"]], "platform": [[468, "platform"]], "pyclbr": [[468, "pyclbr"]], "shelve": [[468, "shelve"], [473, "shelve"]], "_thread": [[468, "thread"]], "zipimport": [[468, "zipimport"]], "\u5df2\u68c4\u7528": [[468, "deprecated"], [468, "id3"], [469, "deprecated"], [469, "whatsnew311-c-api-deprecated"]], "\u5df2\u522a\u9664": [[468, "removed"], [468, "id4"]], "\u79fb\u690d\u5230 Python 3.10": [[468, "porting-to-python-3-10"], [468, "id2"]], "Python \u8a9e\u6cd5\u7684\u8b8a\u5316": [[468, "changes-in-the-python-syntax"]], "Python API \u7684\u8b8a\u5316": [[468, "changes-in-the-python-api"]], "CPython \u4f4d\u5143\u7d44\u78bc\u66f4\u6539": [[468, "cpython-bytecode-changes"]], "\u5efa\u7f6e\u8b8a\u66f4": [[468, "build-changes"], [469, "build-changes"]], "C API \u8b8a\u66f4": [[468, "c-api-changes"], [469, "c-api-changes"]], "PEP 652\uff1a\u7dad\u8b77\u7a69\u5b9a ABI": [[468, "pep-652-maintaining-the-stable-abi"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[444, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[444, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[444, "argument-passing"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[444, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[444, "source-code-encoding"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[455, "using-python-on-a-mac"]], "\u53d6\u5f97\u548c\u5b89\u88dd MacPython": [[455, "getting-and-installing-macpython"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[455, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[455, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[455, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[455, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[455, "installing-additional-python-packages"]], "\u65bc Mac \u4e0a\u958b\u767c GUI \u7a0b\u5f0f": [[455, "gui-programming-on-the-mac"]], "\u65bc Mac \u4e0a\u767c\u884c Python \u61c9\u7528\u7a0b\u5f0f": [[455, "distributing-python-applications-on-the-mac"]], "\u5176\u4ed6\u8cc7\u6e90": [[455, "other-resources"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[473, "what-s-new-in-python-3-4"], [474, "what-s-new-in-python-3-5"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[473, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "Bootstrapping pip By Default": [[473, "bootstrapping-pip-by-default"], [465, "bootstrapping-pip-by-default"]], "Documentation Changes": [[473, "documentation-changes"], [465, "documentation-changes"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[473, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[473, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[473, "pep-451-a-modulespec-type-for-the-import-system"]], "ensurepip": [[473, "ensurepip"]], "selectors": [[473, "selectors"], [474, "selectors"]], "abc": [[473, "abc"], [472, "abc"], [471, "abc"]], "audioop": [[473, "audioop"]], "colorsys": [[473, "colorsys"]], "filecmp": [[473, "filecmp"]], "html": [[473, "html"], [472, "html"], [471, "html"]], "idlelib \u8207 IDLE": [[473, "idlelib-and-idle"]], "marshal": [[473, "marshal"]], "operator": [[473, "operator"], [474, "operator"], [469, "operator"]], "pty": [[473, "pty"]], "resource": [[473, "resource"]], "select": [[473, "select"], [472, "select"], [471, "select"]], "smtpd": [[473, "smtpd"], [474, "smtpd"], [472, "smtpd"]], "stat": [[473, "stat"], [472, "stat"]], "textwrap": [[473, "textwrap"], [472, "textwrap"]], "urllib": [[473, "urllib"], [474, "urllib"], [472, "urllib"]], "CPython \u5be6\u4f5c\u8b8a\u66f4": [[473, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[473, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[473, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[473, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[473, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[473, "other-build-and-c-api-changes"]], "\u986f\u8457\u6700\u4f73\u5316": [[473, "significant-optimizations"]], "Deprecations in the Python API": [[473, "deprecations-in-the-python-api"]], "\u5df2\u68c4\u7528\u529f\u80fd": [[473, "deprecated-features"]], "Operating Systems No Longer Supported": [[473, "operating-systems-no-longer-supported"]], "API \u8207\u529f\u80fd\u7684\u79fb\u9664": [[473, "api-and-feature-removals"]], "\u7a0b\u5f0f\u78bc\u7684\u6e05\u9664": [[473, "code-cleanups"]], "Porting to Python 3.4": [[473, "porting-to-python-3-4"]], "Python API \u7684\u8b8a\u66f4": [[473, "changes-in-the-python-api"]], "3.4.3 \u4e2d\u7684\u8b8a\u66f4": [[473, "changed-in-3-4-3"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[473, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [465, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "PEP 492 - Coroutines with async and await syntax": [[474, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[474, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[474, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[474, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[474, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[474, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[474, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[474, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[474, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[474, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[474, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[474, "pep-489-multi-phase-extension-module-initialization"]], "bz2": [[474, "bz2"], [472, "bz2"]], "cgi": [[474, "cgi"]], "code": [[474, "code"]], "configparser": [[474, "configparser"], [471, "configparser"]], "difflib": [[474, "difflib"]], "heapq": [[474, "heapq"]], "imghdr": [[474, "imghdr"]], "lzma": [[474, "lzma"], [472, "lzma"]], "sndhdr": [[474, "sndhdr"]], "Memory BIO Support": [[474, "memory-bio-support"], [338, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[474, "application-layer-protocol-negotiation-support"]], "Other Changes": [[474, "other-changes"]], "sysconfig": [[474, "sysconfig"], [471, "sysconfig"], [469, "sysconfig"]], "wsgiref": [[474, "wsgiref"]], "xml.sax": [[474, "xml-sax"]], "Other module-level changes": [[474, "other-module-level-changes"]], "New Keywords": [[474, "new-keywords"]], "Unsupported Operating Systems": [[474, "unsupported-operating-systems"], [472, "unsupported-operating-systems"]], "Porting to Python 3.5": [[474, "porting-to-python-3-5"]], "Notable changes in Python 3.5.4": [[474, "notable-changes-in-python-3-5-4"]], "\u547d\u4ee4\u5217\u8207\u74b0\u5883": [[451, "command-line-and-environment"]], "\u547d\u4ee4\u5217": [[451, "command-line"]], "\u4ecb\u9762\u9078\u9805": [[451, "interface-options"]], "Generic options": [[451, "generic-options"]], "Miscellaneous options": [[451, "miscellaneous-options"]], "\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684\u9078\u9805": [[451, "options-you-shouldn-t-use"]], "\u74b0\u5883\u8b8a\u6578": [[451, "environment-variables"]], "\u9664\u932f\u6a21\u5f0f\u8b8a\u6578": [[451, "debug-mode-variables"]], "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-3-12"]], "\u767c\u5e03\u91cd\u9ede\u6458\u8981": [[470, "summary-release-highlights"], [469, "summary-release-highlights"]], "Improved Error Messages": [[470, "improved-error-messages"]], "\u65b0\u589e\u7279\u6027": [[470, "new-features"], [470, "id2"], [469, "new-features"], [469, "whatsnew311-c-api-new-features"]], "PEP 701: Syntactic formalization of f-strings": [[470, "pep-701-syntactic-formalization-of-f-strings"]], "PEP 709: Comprehension inlining": [[470, "pep-709-comprehension-inlining"]], "PEP 688: Making the buffer protocol accessible in Python": [[470, "pep-688-making-the-buffer-protocol-accessible-in-python"]], "PEP 684: A Per-Interpreter GIL": [[470, "pep-684-a-per-interpreter-gil"]], "New Features Related to Type Hints": [[470, "new-features-related-to-type-hints"]], "PEP 692: Using TypedDict for more precise **kwargs typing": [[470, "pep-692-using-typeddict-for-more-precise-kwargs-typing"]], "PEP 698: Override Decorator for Static Typing": [[470, "pep-698-override-decorator-for-static-typing"]], "PEP 695: Type Parameter Syntax": [[470, "pep-695-type-parameter-syntax"]], "fractions": [[470, "fractions"], [469, "fractions"]], "tempfile": [[470, "tempfile"], [472, "tempfile"], [471, "tempfile"], [469, "tempfile"]], "Pending Removal in Python 3.13": [[470, "pending-removal-in-python-3-13"]], "Pending Removal in Python 3.14": [[470, "pending-removal-in-python-3-14"]], "Pending Removal in Future Versions": [[470, "pending-removal-in-future-versions"]], "Porting to Python 3.12": [[470, "porting-to-python-3-12"], [470, "id3"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-3-3"]], "PEP 405: Virtual Environments": [[472, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[472, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[472, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "Features": [[472, "features"], [472, "id1"], [278, "features"]], "API changes": [[472, "api-changes"], [472, "id2"]], "PEP 393: Flexible String Representation": [[472, "pep-393-flexible-string-representation"]], "Functionality": [[472, "functionality"]], "Performance and resource usage": [[472, "performance-and-resource-usage"]], "PEP 397: Python Launcher for Windows": [[472, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[472, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[472, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[472, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[472, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[472, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[472, "pep-412-key-sharing-dictionary"]], "PEP 362: Function Signature Object": [[472, "pep-362-function-signature-object"]], "PEP 421: Adding sys.implementation": [[472, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[472, "simplenamespace"]], "Using importlib as the Implementation of Import": [[472, "using-importlib-as-the-implementation-of-import"]], "New APIs": [[472, "new-apis"]], "Visible Changes": [[472, "visible-changes"]], "A Finer-Grained Import Lock": [[472, "a-finer-grained-import-lock"]], "Builtin functions and types": [[472, "builtin-functions-and-types"]], "Policy Framework": [[472, "policy-framework"]], "Provisional Policy with New Header API": [[472, "provisional-policy-with-new-header-api"]], "Other API Changes": [[472, "other-api-changes"]], "sched": [[472, "sched"]], "webbrowser": [[472, "webbrowser"]], "xml.etree.ElementTree": [[472, "xml-etree-elementtree"]], "Deprecated features": [[472, "deprecated-features"]], "Porting to Python 3.3": [[472, "porting-to-python-3-3"]], "Porting Python code": [[472, "porting-python-code"]], "Porting C code": [[472, "porting-c-code"]], "Building C extensions": [[472, "building-c-extensions"]], "Command Line Switch Changes": [[472, "command-line-switch-changes"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[447, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[447, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[447, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[447, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[447, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[447, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[447, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[447, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[447, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[447, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[447, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[447, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[447, "batteries-included"]], "\u6a21\u7d44 (Module)": [[446, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[446, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[446, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[446, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[446, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[446, "standard-modules"]], "dir() \u51fd\u5f0f": [[446, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[446, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[446, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[446, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[446, "packages-in-multiple-directories"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[454, "python-setup-and-usage"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[459, "what-s-new-in-python-2-1"]], "PEP 236: __future__ Directives": [[459, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[459, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[459, "pep-230-warning-framework"]], "PEP 229: New Build System": [[459, "pep-229-new-build-system"]], "PEP 205: Weak References": [[459, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[459, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[459, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[459, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[459, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[459, "pep-241-metadata-in-python-packages"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[466, "common-stumbling-blocks"]], "Print Is A Function": [[466, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[466, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[466, "ordering-comparisons"]], "\u6574\u6578": [[466, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[466, "text-vs-data-instead-of-unicode-vs-8-bit"]], "Overview Of Syntax Changes": [[466, "overview-of-syntax-changes"]], "New Syntax": [[466, "new-syntax"]], "\u8a9e\u6cd5\u8b8a\u66f4": [[466, "changed-syntax"]], "\u5df2\u88ab\u79fb\u9664\u7684\u8a9e\u6cd5": [[466, "removed-syntax"]], "Changes Already Present In Python 2.6": [[466, "changes-already-present-in-python-2-6"]], "\u51fd\u5f0f\u5eab\u8b8a\u66f4": [[466, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[466, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[466, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[466, "miscellaneous-other-changes"]], "Operators And Special Methods": [[466, "operators-and-special-methods"]], "Builtins": [[466, "builtins"]], "Porting To Python 3.0": [[466, "porting-to-python-3-0"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[471, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[471, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[471, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[471, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[471, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[471, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[471, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "elementtree": [[471, "elementtree"]], "datetime \u548c time": [[471, "datetime-and-time"]], "reprlib": [[471, "reprlib"]], "decimal and fractions": [[471, "decimal-and-fractions"]], "ftp": [[471, "ftp"]], "popen": [[471, "popen"]], "gzip \u548c zipfile": [[471, "gzip-and-zipfile"]], "nntp": [[471, "nntp"]], "certificates": [[471, "certificates"]], "mailbox": [[471, "mailbox"]], "turtledemo": [[471, "turtledemo"]], "Multi-threading": [[471, "multi-threading"], [255, "multi-threading"]], "Codecs": [[471, "codecs"]], "\u6587\u4ef6": [[471, "documentation"]], "Code Repository": [[471, "code-repository"]], "Porting to Python 3.2": [[471, "porting-to-python-3-2"]], "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-3-11"]], "PEP 657\uff1a\u56de\u6eaf (traceback) \u4e2d\u66f4\u7d30\u7dfb\u7684\u932f\u8aa4\u4f4d\u7f6e": [[469, "pep-657-fine-grained-error-locations-in-tracebacks"]], "PEP 654\uff1a\u4f8b\u5916\u7fa4\u7d44\u8207 except*": [[469, "pep-654-exception-groups-and-except"]], "PEP 678\uff1a\u904b\u7528\u4f8b\u5916\u8a3b\u89e3\u4f7f\u5176\u66f4\u52a0\u8a73\u76e1": [[469, "pep-678-exceptions-can-be-enriched-with-notes"]], "Windows py.exe \u555f\u52d5\u7a0b\u5f0f (launcher) \u7684\u6539\u9032": [[469, "windows-py-exe-launcher-improvements"]], "\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u7279\u6027": [[469, "new-features-related-to-type-hints"]], "PEP 646\uff1a\u53ef\u8b8a\u53c3\u6578\u6cdb\u578b (variadic generics)": [[469, "pep-646-variadic-generics"]], "PEP 655\uff1a\u6a19\u8a18\u7368\u7acb TypedDict \u9805\u76ee\u70ba\u5fc5\u8981\u6216\u4e0d\u5fc5\u8981": [[469, "pep-655-marking-individual-typeddict-items-as-required-or-not-required"]], "PEP 673\uff1aSelf \u578b\u5225": [[469, "pep-673-self-type"]], "PEP 675\uff1a\u4efb\u610f\u7684\u6587\u672c\u5b57\u4e32\u578b\u5225 (Arbitrary literal string type)": [[469, "pep-675-arbitrary-literal-string-type"]], "PEP 681\uff1a\u8cc7\u6599\u985e\u5225\u8f49\u63db (Data class transforms)": [[469, "pep-681-data-class-transforms"]], "PEP 563 \u53ef\u80fd\u4e0d\u662f\u672a\u4f86": [[469, "pep-563-may-not-be-the-future"]], "\u5176\u4ed6 CPython \u5be6\u4f5c\u66f4\u52d5": [[469, "other-cpython-implementation-changes"]], "\u65b0\u589e\u6a21\u7d44": [[469, "new-modules"]], "\u6a21\u7d44\u6539\u9032": [[469, "improved-modules"]], "IDLE \u8207 idlelib": [[469, "whatsnew311-idle"]], "\u66f4\u5feb\u7684 CPython": [[469, "faster-cpython"]], "\u66f4\u5feb\u7684\u555f\u52d5": [[469, "faster-startup"]], "\u51cd\u7d50\u5f15\u5165 (Frozen imports) / \u975c\u614b\u7a0b\u5f0f\u78bc\u7269\u4ef6 (Static code objects)": [[469, "frozen-imports-static-code-objects"]], "\u66f4\u5feb\u7684\u904b\u884c\u7a0b\u5f0f": [[469, "faster-runtime"]], "\u6240\u9700\u8cc7\u6e90\u66f4\u5c11 (cheaper) \u4e14\u60f0\u6027\u7684 (lazy)) Python \u5e40 (frame)": [[469, "cheaper-lazy-python-frames"]], "\u884c\u5167 Python \u51fd\u5f0f\u547c\u53eb": [[469, "inlined-python-function-calls"]], "PEP 659\uff1a\u7279\u5316\u7684\u9069\u61c9\u6027\u76f4\u8b6f\u5668": [[469, "pep-659-specializing-adaptive-interpreter"]], "FAQ": [[469, "faq"]], "\u6211\u8a72\u5982\u4f55\u5728\u7a0b\u5f0f\u78bc\u4e2d\u7372\u53d6\u9019\u4e9b\u52a0\u901f\uff1f": [[469, "how-should-i-write-my-code-to-utilize-these-speedups"]], "Python 3.11 \u6703\u4e0d\u6703\u4f7f\u7528\u66f4\u591a\u8a18\u61b6\u9ad4\uff1f": [[469, "will-cpython-3-11-use-more-memory"]], "\u6211\u5728\u6211\u7684\u7a0b\u5f0f\u7576\u4e2d\u6c92\u611f\u89ba\u5230\u4efb\u4f55\u52a0\u901f\uff0c\u70ba\u4ec0\u9ebc\uff1f": [[469, "i-don-t-see-any-speedups-in-my-workload-why"]], "\u6709\u7528\u5230 JIT \u7de8\u8b6f\u5668\u55ce\uff1f": [[469, "is-there-a-jit-compiler"]], "\u95dc\u65bc": [[469, "about"]], "CPython \u4f4d\u5143\u7d44\u78bc (bytecode) \u8b8a\u66f4": [[469, "cpython-bytecode-changes"]], "\u65b0\u589e opcode": [[469, "new-opcodes"]], "\u88ab\u53d6\u4ee3\u7684\u64cd\u4f5c\u78bc (opcode)": [[469, "replaced-opcodes"]], "\u6709\u66f4\u52d5/\u88ab\u79fb\u9664\u7684 opcode": [[469, "changed-removed-opcodes"]], "\u8a9e\u8a00/\u5167\u5efa": [[469, "language-builtins"]], "\u6a19\u6e96\u51fd\u5f0f\u5eab": [[469, "standard-library"]], "Python 3.12 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[469, "pending-removal-in-python-3-12"], [469, "whatsnew311-c-api-pending-removal"]], "\u5df2\u79fb\u9664": [[469, "removed"], [469, "whatsnew311-c-api-removed"]], "\u79fb\u690d\u81f3 Python 3.11": [[469, "porting-to-python-3-11"], [469, "whatsnew311-c-api-porting"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[457, "using-python-on-windows"]], "The full installer": [[457, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[457, "installation-steps"]], "Removing the MAX_PATH Limitation": [[457, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[457, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[457, "installing-without-downloading"]], "Modifying an install": [[457, "modifying-an-install"]], "The Microsoft Store package": [[457, "the-microsoft-store-package"]], "Known issues": [[457, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[457, "redirection-of-local-data-registry-and-temporary-paths"]], "nuget.org \u5957\u4ef6": [[457, "the-nuget-org-packages"]], "The embeddable package": [[457, "the-embeddable-package"]], "Python Application": [[457, "python-application"]], "\u5d4c\u5165 Python": [[457, "embedding-python"]], "Alternative bundles": [[457, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[457, "configuring-python"]], "Excursus: Setting environment variables": [[457, "excursus-setting-environment-variables"]], "Finding the Python executable": [[457, "finding-the-python-executable"]], "UTF-8 \u6a21\u5f0f": [[457, "utf-8-mode"]], "Python Launcher for Windows": [[457, "python-launcher-for-windows"]], "\u958b\u59cb": [[457, "getting-started"]], "From the command-line": [[457, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[457, "virtual-environments"]], "From a script": [[457, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[457, "from-file-associations"]], "Shebang Lines": [[457, "shebang-lines"]], "Arguments in shebang lines": [[457, "arguments-in-shebang-lines"]], "Customization": [[457, "customization"]], "Customization via INI files": [[457, "customization-via-ini-files"]], "Customizing default Python versions": [[457, "customizing-default-python-versions"]], "Diagnostics": [[457, "diagnostics"]], "Dry Run": [[457, "dry-run"]], "\u5b89\u88dd\u96a8\u9078": [[457, "install-on-demand"]], "Return codes": [[457, "return-codes"]], "Finding modules": [[457, "finding-modules"]], "Additional modules": [[457, "additional-modules"]], "PyWin32": [[457, "pywin32"]], "cx_Freeze": [[457, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[457, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[457, "other-platforms"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[443, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[443, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[443, "alternatives-to-the-interactive-interpreter"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[465, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[465, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[465, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[465, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[465, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 389: The argparse Module for Parsing Command Lines": [[465, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[465, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[465, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[465, "pep-3137-the-memoryview-object"]], "New module: importlib": [[465, "new-module-importlib"]], "New module: sysconfig": [[465, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[465, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[465, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[465, "updated-module-elementtree-1-3"]], "Port-Specific Changes: FreeBSD": [[465, "port-specific-changes-freebsd"]], "Porting to Python 2.7": [[465, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[465, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[465, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[465, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[465, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[465, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[465, "pep-493-https-verification-migration-tools-for-python-2-7"]], "tkinter.font --- Tkinter font wrapper": [[368, "module-tkinter.font"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[370, "module-tkinter.scrolledtext"]], "token --- Constants used with Python parse trees": [[373, "module-token"]], "The initialization of the sys.path module search path": [[350, "the-initialization-of-the-sys-path-module-search-path"]], "Virtual environments": [[350, "virtual-environments"]], "_pth files": [[350, "pth-files"]], "Embedded Python": [[350, "embedded-python"]], "tkinter.colorchooser --- Color choosing dialog": [[366, "module-tkinter.colorchooser"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[346, "module-sunau"]], "AU_read \u7269\u4ef6": [[346, "au-read-objects"]], "AU_write \u7269\u4ef6": [[346, "au-write-objects"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[371, "module-tkinter.tix"]], "Using Tix": [[371, "using-tix"]], "Tix Widgets": [[371, "tix-widgets"]], "Basic Widgets": [[371, "basic-widgets"]], "File Selectors": [[371, "file-selectors"]], "Hierarchical ListBox": [[371, "hierarchical-listbox"]], "Tabular ListBox": [[371, "tabular-listbox"]], "Manager Widgets": [[371, "manager-widgets"]], "Image Types": [[371, "image-types"]], "Miscellaneous Widgets": [[371, "miscellaneous-widgets"]], "Form Geometry Manager": [[371, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[371, "tix-commands"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[356, "module-tempfile"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[356, "deprecated-functions-and-variables"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[355, "module-telnetlib"]], "Telnet Objects": [[355, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[355, "telnet-example"]], "tkinter.ttk --- Tk themed widgets": [[372, "module-tkinter.ttk"]], "Using Ttk": [[372, "using-ttk"]], "Ttk Widgets": [[372, "ttk-widgets"]], "Widget": [[372, "widget"]], "Standard Options": [[372, "standard-options"]], "Scrollable Widget Options": [[372, "scrollable-widget-options"]], "Label Options": [[372, "label-options"]], "Compatibility Options": [[372, "compatibility-options"]], "Widget States": [[372, "widget-states"]], "ttk.Widget": [[372, "ttk-widget"]], "Combobox": [[372, "combobox"]], "Options": [[372, "options"], [372, "id1"], [372, "id3"], [372, "id5"], [372, "id6"], [372, "id7"]], "Virtual events": [[372, "virtual-events"], [372, "id2"]], "ttk.Combobox": [[372, "ttk-combobox"]], "Spinbox": [[372, "spinbox"]], "ttk.Spinbox": [[372, "ttk-spinbox"]], "Notebook": [[372, "notebook"]], "Tab Options": [[372, "tab-options"]], "Tab Identifiers": [[372, "tab-identifiers"]], "Virtual Events": [[372, "id4"], [372, "id8"]], "ttk.Notebook": [[372, "ttk-notebook"]], "Progressbar": [[372, "progressbar"]], "ttk.Progressbar": [[372, "ttk-progressbar"]], "Separator": [[372, "separator"]], "Sizegrip": [[372, "sizegrip"]], "Platform-specific notes": [[372, "platform-specific-notes"]], "Bugs": [[372, "bugs"]], "Treeview": [[372, "treeview"]], "Item Options": [[372, "item-options"]], "Tag Options": [[372, "tag-options"]], "Column Identifiers": [[372, "column-identifiers"]], "ttk.Treeview": [[372, "ttk-treeview"]], "Ttk Styling": [[372, "ttk-styling"]], "Layouts": [[372, "layouts"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[340, "module-statistics"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[340, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[340, "measures-of-spread"]], "\u5169\u500b\u8f38\u5165\u4e4b\u9593\u7684\u95dc\u4fc2\u7d71\u8a08": [[340, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[340, "function-details"]], "NormalDist \u7269\u4ef6": [[340, "normaldist-objects"]], "NormalDist \u7bc4\u4f8b\u8207\u9326\u56ca\u5999\u8a08": [[340, "normaldist-examples-and-recipes"]], "sys --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f": [[349, "module-sys"]], "tkinter.dnd --- Drag and drop support": [[367, "module-tkinter.dnd"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[359, "text-processing-services"]], "tkinter --- Python interface to Tcl/Tk": [[365, "module-tkinter"]], "Architecture": [[365, "architecture"]], "Tkinter Modules": [[365, "tkinter-modules"]], "Tkinter Life Preserver": [[365, "tkinter-life-preserver"]], "A Hello World Program": [[365, "a-hello-world-program"]], "Important Tk Concepts": [[365, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[365, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[365, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[365, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[365, "threading-model"]], "Handy Reference": [[365, "handy-reference"]], "Setting Options": [[365, "setting-options"]], "The Packer": [[365, "the-packer"]], "Packer Options": [[365, "packer-options"]], "Coupling Widget Variables": [[365, "coupling-widget-variables"]], "The Window Manager": [[365, "the-window-manager"]], "Tk Option Data Types": [[365, "tk-option-data-types"]], "Bindings and Events": [[365, "bindings-and-events"]], "The index Parameter": [[365, "the-index-parameter"]], "Images": [[365, "images"]], "File Handlers": [[365, "file-handlers"]], "subprocess --- Subprocess management": [[345, "module-subprocess"]], "Using the subprocess Module": [[345, "using-the-subprocess-module"]], "Frequently Used Arguments": [[345, "frequently-used-arguments"]], "Popen Constructor": [[345, "popen-constructor"]], "Security Considerations": [[345, "security-considerations"], [324, "security-considerations"], [242, "security-considerations"], [141, "security-considerations"]], "Popen Objects": [[345, "popen-objects"]], "Windows Popen Helpers": [[345, "windows-popen-helpers"]], "Windows Constants": [[345, "windows-constants"]], "Older high-level API": [[345, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[345, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[345, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[345, "replacing-shell-pipeline"]], "Replacing os.system()": [[345, "replacing-os-system"]], "Replacing the os.spawn family": [[345, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[345, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[345, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[345, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[345, "converting-an-argument-sequence-to-a-string-on-windows"]], "Disabling use of vfork() or posix_spawn()": [[345, "disabling-use-of-vfork-or-posix-spawn"]], "tkinter.messagebox --- Tkinter message prompts": [[369, "module-tkinter.messagebox"]], "test --- Regression tests package for Python": [[358, "module-test"]], "Writing Unit Tests for the test package": [[358, "writing-unit-tests-for-the-test-package"]], "Running tests using the command-line interface": [[358, "running-tests-using-the-command-line-interface"]], "test.support --- Utilities for the Python test suite": [[358, "module-test.support"]], "test.support.socket_helper --- Utilities for socket tests": [[358, "module-test.support.socket_helper"]], "test.support.script_helper --- Utilities for the Python execution tests": [[358, "module-test.support.script_helper"]], "test.support.bytecode_helper --- Support tools for testing correct bytecode generation": [[358, "module-test.support.bytecode_helper"]], "test.support.threading_helper --- Utilities for threading tests": [[358, "module-test.support.threading_helper"]], "test.support.os_helper --- Utilities for os tests": [[358, "module-test.support.os_helper"]], "test.support.import_helper --- Utilities for import tests": [[358, "module-test.support.import_helper"]], "test.support.warnings_helper --- Utilities for warnings tests": [[358, "module-test.support.warnings_helper"]], "sysconfig --- Provide access to Python's configuration information": [[351, "module-sysconfig"]], "Configuration variables": [[351, "configuration-variables"]], "Installation paths": [[351, "installation-paths"]], "\u5176\u4ed6\u51fd\u5f0f": [[351, "other-functions"], [323, "other-functions"], [334, "other-functions"]], "Using sysconfig as a script": [[351, "using-sysconfig-as-a-script"]], "threading --- Thread-based parallelism": [[361, "module-threading"]], "Thread-Local Data": [[361, "thread-local-data"]], "Thread Objects": [[361, "thread-objects"]], "Lock Objects": [[361, "lock-objects"]], "RLock \u7269\u4ef6": [[361, "rlock-objects"]], "Condition Objects": [[361, "condition-objects"]], "Semaphore Objects": [[361, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[361, "semaphore-example"]], "Event Objects": [[361, "event-objects"]], "Timer Objects": [[361, "timer-objects"]], "Barrier Objects": [[361, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[361, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "timeit --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593": [[363, "module-timeit"]], "\u57fa\u790e\u7bc4\u4f8b": [[363, "basic-examples"], [233, "basic-examples"]], "Python Interface": [[363, "python-interface"]], "termios --- POSIX style tty control": [[357, "module-termios"]], "tabnanny --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392": [[353, "module-tabnanny"]], "time --- Time access and conversions": [[362, "module-time"]], "Clock ID Constants": [[362, "clock-id-constants"]], "Timezone Constants": [[362, "timezone-constants"]], "symtable --- Access to the compiler's symbol tables": [[348, "module-symtable"]], "Generating Symbol Tables": [[348, "generating-symbol-tables"]], "Examining Symbol Tables": [[348, "examining-symbol-tables"]], "stringprep --- Internet String Preparation": [[343, "module-stringprep"]], "struct --- Interpret bytes as packed binary data": [[344, "module-struct"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[344, "functions-and-exceptions"]], "Format Strings": [[344, "format-strings"]], "Byte Order, Size, and Alignment": [[344, "byte-order-size-and-alignment"]], "Format Characters": [[344, "format-characters"]], "Applications": [[344, "applications"]], "Native Formats": [[344, "native-formats"]], "Standard Formats": [[344, "standard-formats"]], "Classes": [[344, "classes"], [326, "classes"]], "string --- Common string operations": [[342, "module-string"]], "String constants": [[342, "string-constants"]], "Custom String Formatting": [[342, "custom-string-formatting"]], "Format String Syntax": [[342, "format-string-syntax"]], "Format Specification Mini-Language": [[342, "format-specification-mini-language"]], "Format examples": [[342, "format-examples"]], "Template strings": [[342, "template-strings"]], "Helper functions": [[342, "helper-functions"]], "syslog --- Unix syslog library routines": [[352, "module-syslog"]], "\u5167\u5efa\u578b\u5225": [[341, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[341, "truth-value-testing"]], "Boolean Operations --- and, or, not": [[341, "boolean-operations-and-or-not"]], "Numeric Types --- int, float, complex": [[341, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[341, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[341, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[341, "additional-methods-on-float"]], "Hashing of numeric types": [[341, "hashing-of-numeric-types"]], "Boolean Type - bool": [[341, "boolean-type-bool"]], "Iterator Types": [[341, "iterator-types"]], "Generator Types": [[341, "generator-types"]], "Sequence Types --- list, tuple, range": [[341, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[341, "common-sequence-operations"]], "Immutable Sequence Types": [[341, "immutable-sequence-types"]], "Mutable Sequence Types": [[341, "mutable-sequence-types"]], "Tuples": [[341, "tuples"]], "Ranges": [[341, "ranges"]], "Text Sequence Type --- str": [[341, "text-sequence-type-str"]], "printf-style String Formatting": [[341, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[341, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytes Objects": [[341, "bytes-objects"]], "Bytearray Objects": [[341, "bytearray-objects"]], "Bytes and Bytearray Operations": [[341, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[341, "printf-style-bytes-formatting"]], "Memory Views": [[341, "memory-views"]], "Set Types --- set, frozenset": [[341, "set-types-set-frozenset"]], "Mapping Types --- dict": [[341, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[341, "dictionary-view-objects"]], "Context Manager Types": [[341, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[341, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[341, "generic-alias-type"]], "Standard Generic Classes": [[341, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[341, "special-attributes-of-genericalias-objects"]], "Union Type": [[341, "union-type"]], "Other Built-in Types": [[341, "other-built-in-types"]], "Classes and Class Instances": [[341, "classes-and-class-instances"]], "Methods": [[341, "methods"], [285, "methods"], [293, "methods"]], "Code Objects": [[341, "code-objects"]], "The Null Object": [[341, "the-null-object"]], "The Ellipsis Object": [[341, "the-ellipsis-object"]], "The NotImplemented Object": [[341, "the-notimplemented-object"]], "Internal Objects": [[341, "internal-objects"]], "Special Attributes": [[341, "special-attributes"]], "Integer string conversion length limitation": [[341, "integer-string-conversion-length-limitation"]], "Affected APIs": [[341, "affected-apis"]], "Configuring the limit": [[341, "configuring-the-limit"]], "Recommended configuration": [[341, "recommended-configuration"]], "textwrap --- Text wrapping and filling": [[360, "module-textwrap"]], "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)": [[364, "graphical-user-interfaces-with-tk"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[347, "superseded-modules"]], "tarfile --- Read and write tar archive files": [[354, "module-tarfile"]], "TarFile \u7269\u4ef6": [[354, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[354, "tarinfo-objects"]], "Extraction filters": [[354, "extraction-filters"]], "Default named filters": [[354, "default-named-filters"]], "Filter errors": [[354, "filter-errors"]], "Hints for further verification": [[354, "hints-for-further-verification"]], "Supporting older Python versions": [[354, "supporting-older-python-versions"]], "Stateful extraction filter example": [[354, "stateful-extraction-filter-example"]], "Supported tar formats": [[354, "supported-tar-formats"]], "Unicode issues": [[354, "unicode-issues"]], "quopri --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599": [[314, "module-quopri"]], "re --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c": [[316, "module-re"]], "Regular Expression Syntax": [[316, "regular-expression-syntax"]], "Flags": [[316, "flags"]], "Functions": [[316, "functions"]], "Regular Expression Objects": [[316, "regular-expression-objects"]], "Match Objects": [[316, "match-objects"]], "Regular Expression Examples": [[316, "regular-expression-examples"]], "Checking for a Pair": [[316, "checking-for-a-pair"]], "Simulating scanf()": [[316, "simulating-scanf"]], "search() vs. match()": [[316, "search-vs-match"]], "Making a Phonebook": [[316, "making-a-phonebook"]], "Text Munging": [[316, "text-munging"]], "Finding all Adverbs": [[316, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[316, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[316, "raw-string-notation"]], "Writing a Tokenizer": [[316, "writing-a-tokenizer"]], "sched --- Event scheduler": [[322, "module-sched"]], "Scheduler Objects": [[322, "scheduler-objects"]], "socketserver --- A framework for network servers": [[335, "module-socketserver"]], "Server Creation Notes": [[335, "server-creation-notes"]], "Request Handler Objects": [[335, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[335, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[335, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[335, "asynchronous-mixins"]], "ssl --- TLS/SSL wrapper for socket objects": [[338, "module-ssl"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[338, "functions-constants-and-exceptions"]], "Socket creation": [[338, "socket-creation"]], "Context creation": [[338, "context-creation"]], "Random generation": [[338, "random-generation"]], "Certificate handling": [[338, "certificate-handling"]], "SSL Sockets": [[338, "ssl-sockets"]], "SSL Contexts": [[338, "ssl-contexts"]], "Certificates": [[338, "certificates"]], "Certificate chains": [[338, "certificate-chains"]], "CA certificates": [[338, "ca-certificates"]], "Combined key and certificate": [[338, "combined-key-and-certificate"]], "Self-signed certificates": [[338, "self-signed-certificates"]], "Testing for SSL support": [[338, "testing-for-ssl-support"]], "Client-side operation": [[338, "client-side-operation"]], "Server-side operation": [[338, "server-side-operation"]], "Notes on non-blocking sockets": [[338, "notes-on-non-blocking-sockets"]], "SSL session": [[338, "ssl-session"]], "Security considerations": [[338, "security-considerations"], [265, "security-considerations"]], "Best defaults": [[338, "best-defaults"]], "Manual settings": [[338, "manual-settings"]], "Verifying certificates": [[338, "verifying-certificates"]], "Protocol versions": [[338, "protocol-versions"]], "Cipher selection": [[338, "cipher-selection"]], "Multi-processing": [[338, "multi-processing"]], "TLS 1.3": [[338, "tls-1-3"]], "selectors --- High-level I/O multiplexing": [[326, "module-selectors"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[323, "module-secrets"]], "\u4e82\u6578": [[323, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[323, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[323, "how-many-bytes-should-tokens-use"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[323, "recipes-and-best-practices"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[311, "module-xml.parsers.expat"]], "ExpatError \u4f8b\u5916": [[311, "expaterror-exceptions"]], "Content Model Descriptions": [[311, "module-xml.parsers.expat.model"]], "Expat error constants": [[311, "module-xml.parsers.expat.errors"]], "shelve --- Python object persistence": [[327, "module-shelve"]], "Restrictions": [[327, "restrictions"]], "signal --- Set handlers for asynchronous events": [[330, "module-signal"]], "General rules": [[330, "general-rules"]], "Execution of Python signal handlers": [[330, "execution-of-python-signal-handlers"]], "Signals and threads": [[330, "signals-and-threads"]], "Note on SIGPIPE": [[330, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[330, "note-on-signal-handlers-and-exceptions"]], "site --- Site-specific configuration hook": [[331, "module-site"]], "Readline configuration": [[331, "readline-configuration"]], "Command Line Interface": [[331, "command-line-interface"], [252, "command-line-interface"], [259, "module-json.tool"], [231, "command-line-interface"]], "rlcompleter --- Completion function for GNU readline": [[320, "module-rlcompleter"]], "Completer Objects": [[320, "completer-objects"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[333, "module-sndhdr"]], "Python Runtime Services": [[312, "python-runtime-services"]], "shutil --- High-level file operations": [[329, "module-shutil"]], "Directory and files operations": [[329, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[329, "platform-dependent-efficient-copy-operations"]], "copytree example": [[329, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[329, "rmtree-example"]], "Archiving operations": [[329, "archiving-operations"]], "Archiving example": [[329, "archiving-example"]], "Archiving example with base_dir": [[329, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[329, "querying-the-size-of-the-output-terminal"]], "resource --- Resource usage information": [[319, "module-resource"]], "Resource Limits": [[319, "resource-limits"]], "Resource Usage": [[319, "resource-usage"]], "stat --- Interpreting stat() results": [[339, "module-stat"]], "smtplib --- SMTP protocol client": [[332, "module-smtplib"]], "SMTP \u7269\u4ef6": [[332, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[332, "smtp-example"]], "pyclbr --- Python module browser support": [[309, "module-pyclbr"]], "Class Objects": [[309, "class-objects"]], "py_compile --- Compile Python source files": [[308, "module-py_compile"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[313, "module-queue"]], "\u4f47\u5217\u7269\u4ef6": [[313, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[313, "simplequeue-objects"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[336, "module-spwd"]], "pwd --- \u5bc6\u78bc\u8cc7\u6599\u5eab": [[307, "module-pwd"]], "readline --- GNU readline interface": [[317, "module-readline"]], "Init file": [[317, "init-file"]], "Line buffer": [[317, "line-buffer"]], "History file": [[317, "history-file"]], "History list": [[317, "history-list"]], "Startup hooks": [[317, "startup-hooks"]], "Completion": [[317, "completion"]], "select --- Waiting for I/O completion": [[325, "module-select"]], "/dev/poll Polling Objects": [[325, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[325, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[325, "polling-objects"]], "Kqueue Objects": [[325, "kqueue-objects"]], "Kevent Objects": [[325, "kevent-objects"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[315, "module-random"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[315, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[315, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[315, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[315, "functions-for-sequences"]], "\u96e2\u6563\u5206\u5e03": [[315, "discrete-distributions"]], "\u5be6\u6578\u5206\u5e03": [[315, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[315, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[315, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[315, "recipes"]], "sqlite3 --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762": [[337, "module-sqlite3"]], "Module functions": [[337, "module-functions"]], "Module constants": [[337, "module-constants"]], "Connection objects": [[337, "connection-objects"]], "Cursor objects": [[337, "cursor-objects"]], "Row objects": [[337, "row-objects"]], "Blob objects": [[337, "blob-objects"]], "PrepareProtocol objects": [[337, "prepareprotocol-objects"]], "SQLite and Python types": [[337, "sqlite-and-python-types"]], "Default adapters and converters (deprecated)": [[337, "default-adapters-and-converters-deprecated"]], "How to use placeholders to bind values in SQL queries": [[337, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[337, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[337, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[337, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[337, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[337, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[337, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[337, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[337, "how-to-work-with-sqlite-uris"]], "How to create and use row factories": [[337, "how-to-create-and-use-row-factories"]], "\u89e3\u91cb": [[337, "explanation"]], "Transaction control": [[337, "transaction-control"]], "Transaction control via the autocommit attribute": [[337, "transaction-control-via-the-autocommit-attribute"]], "Transaction control via the isolation_level attribute": [[337, "transaction-control-via-the-isolation-level-attribute"]], "socket --- Low-level networking interface": [[334, "module-socket"]], "Socket \u7cfb\u5217\u5bb6\u65cf": [[334, "socket-families"]], "\u5efa\u7acb sockets": [[334, "creating-sockets"]], "Socket \u7269\u4ef6": [[334, "socket-objects"]], "Notes on socket timeouts": [[334, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[334, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[334, "timeouts-and-the-accept-method"]], "pty --- Pseudo-terminal utilities": [[306, "module-pty"]], "runpy --- Locating and executing Python modules": [[321, "module-runpy"]], "pydoc --- Documentation generator and online help system": [[310, "module-pydoc"]], "shlex --- Simple lexical analysis": [[328, "module-shlex"]], "shlex \u7269\u4ef6": [[328, "shlex-objects"]], "Parsing Rules": [[328, "parsing-rules"]], "Improved Compatibility with Shells": [[328, "improved-compatibility-with-shells"]], "reprlib --- Alternate repr() implementation": [[318, "module-reprlib"]], "Repr \u7269\u4ef6": [[318, "repr-objects"]], "Subclassing Repr Objects": [[318, "subclassing-repr-objects"]], "posix --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb": [[303, "module-posix"]], "\u5c0d\u5927\u6a94\u6848 (Large File) \u7684\u652f\u63f4": [[303, "large-file-support"]], "\u503c\u5f97\u6ce8\u610f\u7684\u6a21\u7d44\u5167\u5bb9": [[303, "notable-module-contents"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[287, "numeric-and-mathematical-modules"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[284, "module-nis"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[292, "module-ossaudiodev"]], "Audio Device Objects": [[292, "audio-device-objects"]], "Mixer Device Objects": [[292, "mixer-device-objects"]], "multiprocessing.shared_memory --- Shared memory for direct access across processes": [[281, "module-multiprocessing.shared_memory"]], "numbers --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[286, "module-numbers"]], "\u6578\u503c\u7684\u968e\u5c64": [[286, "the-numeric-tower"]], "\u7d66\u578b\u5225\u5be6\u4f5c\u8005\u7684\u8a3b\u8a18": [[286, "notes-for-type-implementors"]], "\u52a0\u5165\u66f4\u591a\u6578\u503c ABC": [[286, "adding-more-numeric-abcs"]], "\u5be6\u4f5c\u7b97\u8853\u64cd\u4f5c": [[286, "implementing-the-arithmetic-operations"]], "pickle --- Python object serialization": [[296, "module-pickle"]], "Relationship to other Python modules": [[296, "relationship-to-other-python-modules"]], "Comparison with marshal": [[296, "comparison-with-marshal"]], "Comparison with json": [[296, "comparison-with-json"]], "Data stream format": [[296, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[296, "module-interface"]], "What can be pickled and unpickled?": [[296, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[296, "pickling-class-instances"]], "Persistence of External Objects": [[296, "persistence-of-external-objects"]], "Dispatch Tables": [[296, "dispatch-tables"]], "Handling Stateful Objects": [[296, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[296, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[296, "out-of-band-buffers"]], "Provider API": [[296, "provider-api"]], "Consumer API": [[296, "consumer-api"]], "Restricting Globals": [[296, "restricting-globals"]], "pkgutil --- Package extension utility": [[299, "module-pkgutil"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[285, "module-nntplib"]], "NNTP \u7269\u4ef6": [[285, "nntp-objects"]], "\u5c6c\u6027": [[285, "attributes"]], "Utility functions": [[285, "utility-functions"], [173, "utility-functions"]], "os --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[290, "module-os"]], "File Names, Command Line Arguments, and Environment Variables": [[290, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[290, "python-utf-8-mode"]], "Process Parameters": [[290, "process-parameters"]], "File Object Creation": [[290, "file-object-creation"]], "File Descriptor Operations": [[290, "file-descriptor-operations"]], "Querying the size of a terminal": [[290, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[290, "inheritance-of-file-descriptors"]], "Files and Directories": [[290, "files-and-directories"]], "Linux extended attributes": [[290, "linux-extended-attributes"]], "Process Management": [[290, "process-management"]], "Interface to the scheduler": [[290, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[290, "miscellaneous-system-information"]], "Random numbers": [[290, "random-numbers"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[272, "module-math"]], "Number-theoretic and representation functions": [[272, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[272, "power-and-logarithmic-functions"], [152, "power-and-logarithmic-functions"]], "Trigonometric functions": [[272, "trigonometric-functions"], [152, "trigonometric-functions"]], "Angular conversion": [[272, "angular-conversion"]], "Hyperbolic functions": [[272, "hyperbolic-functions"], [152, "hyperbolic-functions"]], "Special functions": [[272, "special-functions"]], "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406": [[282, "internet-data-handling"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[279, "module-msvcrt"]], "File Operations": [[279, "file-operations"]], "Console I/O": [[279, "console-i-o"]], "Other Functions": [[279, "other-functions"]], "os.path --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c": [[291, "module-os.path"]], "multiprocessing --- Process-based parallelism": [[280, "module-multiprocessing"]], "The Process class": [[280, "the-process-class"]], "Contexts and start methods": [[280, "contexts-and-start-methods"]], "Exchanging objects between processes": [[280, "exchanging-objects-between-processes"]], "Synchronization between processes": [[280, "synchronization-between-processes"]], "Sharing state between processes": [[280, "sharing-state-between-processes"]], "Using a pool of workers": [[280, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[280, "process-and-exceptions"]], "Pipes and Queues": [[280, "pipes-and-queues"]], "Miscellaneous": [[280, "miscellaneous"], [267, "miscellaneous"]], "Connection Objects": [[280, "connection-objects"]], "Synchronization primitives": [[280, "synchronization-primitives"]], "Shared ctypes Objects": [[280, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[280, "module-multiprocessing.sharedctypes"]], "Managers": [[280, "managers"]], "Customized managers": [[280, "customized-managers"]], "Using a remote manager": [[280, "using-a-remote-manager"]], "Proxy Objects": [[280, "proxy-objects"]], "Cleanup": [[280, "cleanup"], [289, "cleanup"]], "Process Pools": [[280, "module-multiprocessing.pool"]], "Listeners and Clients": [[280, "module-multiprocessing.connection"]], "Address Formats": [[280, "address-formats"]], "Authentication keys": [[280, "authentication-keys"]], "Logging": [[280, "logging"]], "The multiprocessing.dummy module": [[280, "module-multiprocessing.dummy"]], "Programming guidelines": [[280, "programming-guidelines"]], "All start methods": [[280, "all-start-methods"]], "The spawn and forkserver start methods": [[280, "the-spawn-and-forkserver-start-methods"]], "poplib --- POP3 protocol client": [[302, "module-poplib"]], "POP3 \u7269\u4ef6": [[302, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[302, "pop3-example"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[300, "module-platform"]], "\u8de8\u5e73\u53f0": [[300, "cross-platform"]], "Java \u5e73\u53f0": [[300, "java-platform"]], "Windows \u5e73\u53f0": [[300, "windows-platform"]], "macOS \u5e73\u53f0": [[300, "macos-platform"]], "Unix \u5e73\u53f0": [[300, "unix-platforms"]], "Linux \u5e73\u53f0": [[300, "linux-platforms"]], "The Python Profilers": [[305, "the-python-profilers"]], "Introduction to the profilers": [[305, "introduction-to-the-profilers"]], "Instant User's Manual": [[305, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[305, "module-cProfile"]], "The Stats Class": [[305, "the-stats-class"]], "What Is Deterministic Profiling?": [[305, "what-is-deterministic-profiling"]], "\u9650\u5236": [[305, "limitations"]], "\u6821\u6b63": [[305, "calibration"]], "Using a custom timer": [[305, "using-a-custom-timer"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[278, "module-msilib"]], "Database Objects": [[278, "database-objects"]], "View Objects": [[278, "view-objects"]], "Summary Information Objects": [[278, "summary-information-objects"]], "Record Objects": [[278, "record-objects"]], "Errors": [[278, "errors"]], "CAB \u7269\u4ef6": [[278, "cab-objects"]], "Directory Objects": [[278, "directory-objects"]], "GUI classes": [[278, "gui-classes"]], "Precomputed tables": [[278, "precomputed-tables"]], "netrc --- netrc \u6a94\u6848\u8655\u7406": [[283, "module-netrc"]], "netrc \u7269\u4ef6": [[283, "netrc-objects"]], "pathlib --- Object-oriented filesystem paths": [[293, "module-pathlib"]], "Basic use": [[293, "basic-use"]], "\u7d14\u8def\u5f91": [[293, "pure-paths"]], "\u901a\u7528\u7279\u6027": [[293, "general-properties"]], "\u904b\u7b97\u5b50": [[293, "operators"]], "Accessing individual parts": [[293, "accessing-individual-parts"]], "Methods and properties": [[293, "methods-and-properties"]], "Concrete paths": [[293, "concrete-paths"]], "Correspondence to tools in the os module": [[293, "correspondence-to-tools-in-the-os-module"]], "pickletools --- Tools for pickle developers": [[297, "module-pickletools"]], "Command line usage": [[297, "command-line-usage"], [244, "command-line-usage"]], "Command line options": [[297, "command-line-options"], [259, "command-line-options"], [231, "command-line-options"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[288, "module-operator"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[288, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[288, "in-place-operators"]], "\u591a\u5a92\u9ad4\u670d\u52d9": [[274, "multimedia-services"]], "pdb --- The Python Debugger": [[294, "module-pdb"]], "Debugger Commands": [[294, "debugger-commands"]], "mimetypes --- Map filenames to MIME types": [[273, "module-mimetypes"]], "MimeTypes \u7269\u4ef6": [[273, "mimetypes-objects"]], "Data Persistence": [[295, "data-persistence"]], "pipes --- shell pipelines \u4ecb\u9762": [[298, "module-pipes"]], "Template Objects": [[298, "template-objects"]], "plistlib --- Generate and parse Apple .plist files": [[301, "module-plistlib"]], "pprint --- Data pretty printer": [[304, "module-pprint"]], "PrettyPrinter \u7269\u4ef6": [[304, "prettyprinter-objects"]], "mmap --- Memory-mapped file support": [[275, "module-mmap"]], "MADV_* Constants": [[275, "madv-constants"]], "MAP_* \u5e38\u6578": [[275, "map-constants"]], "modulefinder --- Find modules used by a script": [[276, "module-modulefinder"]], "Example usage of ModuleFinder": [[276, "example-usage-of-modulefinder"]], "optparse --- Parser for command line options": [[289, "module-optparse"]], "What are options for?": [[289, "what-are-options-for"]], "What are positional arguments for?": [[289, "what-are-positional-arguments-for"]], "Understanding option actions": [[289, "understanding-option-actions"]], "The store action": [[289, "the-store-action"]], "Handling boolean (flag) options": [[289, "handling-boolean-flag-options"]], "Other actions": [[289, "other-actions"]], "Default values": [[289, "default-values"]], "Generating help": [[289, "generating-help"]], "Grouping Options": [[289, "grouping-options"]], "Printing a version string": [[289, "printing-a-version-string"]], "How optparse handles errors": [[289, "how-optparse-handles-errors"]], "Putting it all together": [[289, "putting-it-all-together"]], "Reference Guide": [[289, "reference-guide"]], "Creating the parser": [[289, "creating-the-parser"]], "Populating the parser": [[289, "populating-the-parser"]], "Defining options": [[289, "defining-options"]], "Option attributes": [[289, "option-attributes"]], "Standard option actions": [[289, "standard-option-actions"]], "Standard option types": [[289, "standard-option-types"]], "Querying and manipulating your option parser": [[289, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[289, "conflicts-between-options"]], "Other methods": [[289, "other-methods"]], "Option Callbacks": [[289, "option-callbacks"]], "Defining a callback option": [[289, "defining-a-callback-option"]], "How callbacks are called": [[289, "how-callbacks-are-called"]], "Raising errors in a callback": [[289, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[289, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[289, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[289, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[289, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[289, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[289, "callback-example-6-variable-arguments"]], "Extending optparse": [[289, "extending-optparse"]], "Adding new types": [[289, "adding-new-types"]], "Adding new actions": [[289, "adding-new-actions"]], "Python Language Services": [[261, "python-language-services"]], "File menu (Shell and Editor)": [[244, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[244, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[244, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[244, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[244, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[244, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[244, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[244, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[244, "help-menu-shell-and-editor"]], "Context menus": [[244, "context-menus"]], "Editing and Navigation": [[244, "editing-and-navigation"]], "Editor windows": [[244, "editor-windows"]], "Key bindings": [[244, "key-bindings"]], "Automatic indentation": [[244, "automatic-indentation"]], "Completions": [[244, "completions"]], "Calltips": [[244, "calltips"]], "Code Context": [[244, "code-context"]], "Shell window": [[244, "shell-window"]], "Text colors": [[244, "text-colors"]], "Startup and Code Execution": [[244, "startup-and-code-execution"]], "Startup failure": [[244, "startup-failure"]], "Running user code": [[244, "running-user-code"]], "User output in Shell": [[244, "user-output-in-shell"]], "Developing tkinter applications": [[244, "developing-tkinter-applications"]], "Running without a subprocess": [[244, "running-without-a-subprocess"]], "Help and Preferences": [[244, "help-and-preferences"]], "Help sources": [[244, "help-sources"]], "Setting preferences": [[244, "setting-preferences"]], "IDLE on macOS": [[244, "idle-on-macos"]], "Extensions": [[244, "extensions"]], "idlelib": [[244, "module-idlelib"]], "logging --- Logging facility for Python": [[264, "module-logging"]], "Important": [[264, "index-0"], [265, null], [266, null], [208, null]], "Logger Objects": [[264, "logger-objects"]], "Handler Objects": [[264, "handler-objects"]], "Formatter Objects": [[264, "formatter-objects"]], "Filter Objects": [[264, "filter-objects"]], "LogRecord \u7269\u4ef6": [[264, "logrecord-objects"]], "LogRecord attributes": [[264, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[264, "loggeradapter-objects"]], "Thread Safety": [[264, "thread-safety"]], "Module-Level Attributes": [[264, "module-level-attributes"]], "Integration with the warnings module": [[264, "integration-with-the-warnings-module"]], "io \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177": [[255, "module-io"]], "\u6587\u5b57 I/O": [[255, "text-i-o"], [255, "id1"], [255, "id3"]], "\u4e8c\u9032\u4f4d (Binary) I/O": [[255, "binary-i-o"], [255, "id2"]], "\u539f\u59cb (Raw) I/O": [[255, "raw-i-o"]], "\u6587\u5b57\u7de8\u78bc": [[255, "text-encoding"]], "\u9078\u64c7\u6027\u52a0\u5165\u7684\u7de8\u78bc\u8b66\u544a": [[255, "opt-in-encodingwarning"]], "\u9ad8\u968e\u6a21\u7d44\u4ecb\u9762": [[255, "high-level-module-interface"]], "\u985e\u5225\u968e\u5c64": [[255, "class-hierarchy"]], "I/O Base Classes": [[255, "i-o-base-classes"]], "Raw File I/O": [[255, "raw-file-i-o"]], "Buffered Streams": [[255, "buffered-streams"]], "Reentrancy": [[255, "reentrancy"]], "mailcap --- Mailcap file handling": [[269, "module-mailcap"]], "http.cookiejar --- Cookie handling for HTTP clients": [[240, "module-http.cookiejar"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[240, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[240, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[240, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[240, "defaultcookiepolicy-objects"]], "Cookie \u7269\u4ef6": [[240, "cookie-objects"], [241, "cookie-objects"]], "importlib.resources -- Package resource reading, opening and access": [[249, "module-importlib.resources"]], "\u5df2\u68c4\u7528\u51fd\u5f0f": [[249, "deprecated-functions"]], "inspect --- Inspect live objects": [[252, "module-inspect"]], "Types and members": [[252, "types-and-members"]], "Retrieving source code": [[252, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[252, "introspecting-callables-with-the-signature-object"]], "The interpreter stack": [[252, "the-interpreter-stack"]], "Fetching attributes statically": [[252, "fetching-attributes-statically"]], "Current State of Generators, Coroutines, and Asynchronous Generators": [[252, "current-state-of-generators-coroutines-and-asynchronous-generators"]], "Code Objects Bit Flags": [[252, "code-objects-bit-flags"]], "Buffer flags": [[252, "buffer-flags"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[246, "module-imghdr"]], "importlib --- import \u7684\u5be6\u4f5c": [[247, "module-importlib"]], "importlib.abc -- Abstract base classes related to import": [[247, "module-importlib.abc"]], "importlib.machinery -- Importers and path hooks": [[247, "module-importlib.machinery"]], "importlib.util -- Utility code for importers": [[247, "module-importlib.util"]], "Importing programmatically": [[247, "importing-programmatically"]], "Checking if a module can be imported": [[247, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[247, "importing-a-source-file-directly"]], "Implementing lazy imports": [[247, "implementing-lazy-imports"]], "Setting up an importer": [[247, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[247, "approximating-importlib-import-module"]], "ipaddress --- IPv4/IPv6 manipulation library": [[256, "module-ipaddress"]], "Convenience factory functions": [[256, "convenience-factory-functions"]], "IP Addresses": [[256, "ip-addresses"]], "Address objects": [[256, "address-objects"]], "Conversion to Strings and Integers": [[256, "conversion-to-strings-and-integers"]], "Comparison operators": [[256, "comparison-operators"]], "Arithmetic operators": [[256, "arithmetic-operators"]], "IP Network definitions": [[256, "ip-network-definitions"]], "Prefix, net mask and host mask": [[256, "prefix-net-mask-and-host-mask"]], "Network objects": [[256, "network-objects"]], "Logical operators": [[256, "logical-operators"], [256, "id3"]], "Networks as containers of addresses": [[256, "networks-as-containers-of-addresses"]], "Interface objects": [[256, "interface-objects"]], "Other Module Level Functions": [[256, "other-module-level-functions"]], "Custom Exceptions": [[256, "custom-exceptions"]], "http --- HTTP \u6a21\u7d44": [[238, "module-http"]], "HTTP \u72c0\u614b\u78bc": [[238, "http-status-codes"]], "HTTP \u72c0\u614b\u5206\u985e": [[238, "http-status-category"]], "HTTP \u65b9\u6cd5": [[238, "http-methods"]], "locale --- Internationalization services": [[263, "module-locale"]], "Background, details, hints, tips and caveats": [[263, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[263, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[263, "access-to-message-catalogs"]], "Structured Markup Processing Tools": [[270, "structured-markup-processing-tools"]], "http.client --- HTTP protocol client": [[239, "module-http.client"]], "HTTPConnection \u7269\u4ef6": [[239, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[239, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[239, "httpmessage-objects"]], "Internet Protocols and Support": [[253, "internet-protocols-and-support"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[251, "the-python-standard-library"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[254, "notes-on-availability"]], "WebAssembly \u5e73\u53f0": [[254, "webassembly-platforms"]], "itertools --- Functions creating iterators for efficient looping": [[258, "module-itertools"]], "Itertool functions": [[258, "itertool-functions"]], "Itertools Recipes": [[258, "itertools-recipes"]], "\u570b\u969b\u5316": [[243, "internationalization"]], "logging.config --- Logging configuration": [[265, "module-logging.config"]], "Configuration functions": [[265, "configuration-functions"]], "Configuration dictionary schema": [[265, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[265, "dictionary-schema-details"]], "Incremental Configuration": [[265, "incremental-configuration"]], "Object connections": [[265, "object-connections"]], "User-defined objects": [[265, "user-defined-objects"]], "Handler configuration order": [[265, "handler-configuration-order"]], "Access to external objects": [[265, "access-to-external-objects"]], "Access to internal objects": [[265, "access-to-internal-objects"]], "Import resolution and custom importers": [[265, "import-resolution-and-custom-importers"]], "Configuring QueueHandler and QueueListener": [[265, "configuring-queuehandler-and-queuelistener"]], "Configuration file format": [[265, "configuration-file-format"]], "imaplib --- IMAP4 protocol client": [[245, "module-imaplib"]], "IMAP4 \u7269\u4ef6": [[245, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[245, "imap4-example"]], "Networking and Interprocess Communication": [[257, "networking-and-interprocess-communication"]], "keyword --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57": [[260, "module-keyword"]], "importlib.metadata -- Accessing package metadata": [[248, "module-importlib.metadata"]], "Entry points": [[248, "entry-points"]], "Distribution metadata": [[248, "distribution-metadata"]], "Distribution versions": [[248, "distribution-versions"]], "Distribution files": [[248, "distribution-files"]], "Distribution requirements": [[248, "distribution-requirements"]], "Mapping import to distribution packages": [[248, "mapping-import-to-distribution-packages"]], "Distributions": [[248, "distributions"]], "Distribution Discovery": [[248, "distribution-discovery"]], "Extending the search algorithm": [[248, "extending-the-search-algorithm"]], "linecache --- Random access to text lines": [[262, "module-linecache"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[271, "module-marshal"]], "json --- JSON encoder and decoder": [[259, "module-json"]], "Encoders and Decoders": [[259, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[259, "standard-compliance-and-interoperability"]], "Character Encodings": [[259, "character-encodings"]], "Infinite and NaN Number Values": [[259, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[259, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[259, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[259, "implementation-limitations"]], "logging.handlers --- Logging handlers": [[266, "module-logging.handlers"]], "StreamHandler": [[266, "streamhandler"]], "FileHandler": [[266, "filehandler"]], "NullHandler": [[266, "nullhandler"]], "WatchedFileHandler": [[266, "watchedfilehandler"]], "BaseRotatingHandler": [[266, "baserotatinghandler"]], "RotatingFileHandler": [[266, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[266, "timedrotatingfilehandler"]], "SocketHandler": [[266, "sockethandler"]], "DatagramHandler": [[266, "datagramhandler"]], "SysLogHandler": [[266, "sysloghandler"]], "NTEventLogHandler": [[266, "nteventloghandler"]], "SMTPHandler": [[266, "smtphandler"]], "MemoryHandler": [[266, "memoryhandler"]], "HTTPHandler": [[266, "httphandler"]], "QueueHandler": [[266, "queuehandler"]], "QueueListener": [[266, "queuelistener"]], "importlib.resources.abc -- Abstract base classes for resources": [[250, "module-importlib.resources.abc"]], "mailbox --- Manipulate mailboxes in various formats": [[268, "module-mailbox"]], "Mailbox \u7269\u4ef6": [[268, "mailbox-objects"]], "Maildir": [[268, "maildir"]], "mbox": [[268, "mbox"]], "MH": [[268, "mh"]], "Babyl": [[268, "babyl"]], "MMDF": [[268, "mmdf"]], "Message \u7269\u4ef6": [[268, "message-objects"]], "MaildirMessage": [[268, "maildirmessage"]], "mboxMessage": [[268, "mboxmessage"]], "MHMessage": [[268, "mhmessage"]], "BabylMessage": [[268, "babylmessage"]], "MMDFMessage": [[268, "mmdfmessage"]], "http.cookies --- HTTP state management": [[241, "module-http.cookies"]], "Morsel \u7269\u4ef6": [[241, "morsel-objects"]], "http.server --- HTTP servers": [[242, "module-http.server"]], "lzma --- Compression using the LZMA algorithm": [[267, "module-lzma"]], "Reading and writing compressed files": [[267, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[267, "compressing-and-decompressing-data-in-memory"]], "Specifying custom filter chains": [[267, "specifying-custom-filter-chains"]], "html --- HyperText Markup Language support": [[235, "module-html"]], "faulthandler --- Dump the Python traceback": [[211, "module-faulthandler"]], "Dumping the traceback": [[211, "dumping-the-traceback"]], "Fault handler state": [[211, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[211, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[211, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[211, "issue-with-file-descriptors"]], "graphlib \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd": [[229, "module-graphlib"]], "hashlib --- Secure hashes and message digests": [[232, "module-hashlib"]], "\u96dc\u6e4a\u6f14\u7b97\u6cd5": [[232, "hash-algorithms"]], "\u7528\u6cd5": [[232, "usage"]], "\u5efa\u69cb\u51fd\u5f0f": [[232, "constructors"]], "Attributes": [[232, "attributes"]], "Hash Objects": [[232, "hash-objects"]], "SHAKE variable length digests": [[232, "shake-variable-length-digests"]], "File hashing": [[232, "file-hashing"]], "Key derivation": [[232, "key-derivation"]], "BLAKE2": [[232, "blake2"]], "Creating hash objects": [[232, "creating-hash-objects"]], "Simple hashing": [[232, "simple-hashing"]], "Using different digest sizes": [[232, "using-different-digest-sizes"]], "Keyed hashing": [[232, "keyed-hashing"]], "Randomized hashing": [[232, "randomized-hashing"]], "Personalization": [[232, "personalization"]], "Tree mode": [[232, "tree-mode"]], "Credits": [[232, "credits"]], "enum --- Support for enumerations": [[208, "module-enum"]], "Data Types": [[208, "data-types"]], "Utilities and Decorators": [[208, "utilities-and-decorators"]], "Notes": [[208, "notes"]], "functools --- Higher-order functions and operations on callable objects": [[223, "module-functools"]], "partial \u7269\u4ef6": [[223, "partial-objects"]], "grp --- The group database": [[230, "module-grp"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[216, "file-and-directory-access"]], "html.parser --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668": [[237, "module-html.parser"]], "HTML \u5256\u6790\u5668\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b": [[237, "example-html-parser-application"]], "HTMLParser \u65b9\u6cd5": [[237, "htmlparser-methods"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[233, "module-heapq"]], "\u512a\u5148\u4f47\u5217\u5be6\u4f5c\u7d30\u7bc0": [[233, "priority-queue-implementation-notes"]], "\u539f\u7406": [[233, "theory"]], "fileinput --- Iterate over lines from multiple input streams": [[215, "module-fileinput"]], "gc --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)": [[224, "module-gc"]], "\u6a94\u6848\u683c\u5f0f": [[214, "file-formats"]], "gettext --- Multilingual internationalization services": [[227, "module-gettext"]], "GNU gettext API": [[227, "gnu-gettext-api"]], "Class-based API": [[227, "class-based-api"]], "The NullTranslations class": [[227, "the-nulltranslations-class"]], "The GNUTranslations class": [[227, "the-gnutranslations-class"]], "Solaris message catalog support": [[227, "solaris-message-catalog-support"]], "The Catalog constructor": [[227, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[227, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[227, "localizing-your-module"]], "Localizing your application": [[227, "localizing-your-application"]], "Changing languages on the fly": [[227, "changing-languages-on-the-fly"]], "Deferred translations": [[227, "deferred-translations"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[210, "built-in-exceptions"]], "Exception context": [[210, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[210, "inheriting-from-built-in-exceptions"]], "Base classes": [[210, "base-classes"]], "Concrete exceptions": [[210, "concrete-exceptions"]], "OS exceptions": [[210, "os-exceptions"]], "\u8b66\u544a": [[210, "warnings"]], "Exception groups": [[210, "exception-groups"]], "Exception hierarchy": [[210, "exception-hierarchy"]], "html.entities --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9": [[236, "module-html.entities"]], "getopt --- C-style parser for command line options": [[225, "module-getopt"]], "errno --- Standard errno system symbols": [[209, "module-errno"]], "ftplib --- FTP \u5354\u5b9a\u7528\u6236\u7aef": [[220, "module-ftplib"]], "FTP \u7269\u4ef6": [[220, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[220, "ftp-tls-objects"]], "email.parser: Parsing email messages": [[204, "module-email.parser"]], "FeedParser API": [[204, "feedparser-api"]], "Parser API": [[204, "parser-api"]], "Additional notes": [[204, "additional-notes"]], "\u5167\u5efa\u51fd\u5f0f": [[222, "built-in-functions"]], "\u7a0b\u5f0f\u6846\u67b6": [[219, "program-frameworks"]], "fcntl --- The fcntl and ioctl system calls": [[212, "module-fcntl"]], "email.policy: Policy Objects": [[205, "module-email.policy"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[226, "module-getpass"]], "fnmatch --- Unix filename pattern matching": [[217, "module-fnmatch"]], "glob --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55": [[228, "module-glob"]], "filecmp --- File and Directory Comparisons": [[213, "module-filecmp"]], "The dircmp class": [[213, "the-dircmp-class"]], "ensurepip --- Bootstrapping the pip installer": [[207, "module-ensurepip"]], "Command line interface": [[207, "command-line-interface"]], "\u6a21\u7d44 API": [[207, "module-api"]], "gzip --- Support for gzip files": [[231, "module-gzip"]], "\u7528\u6cd5\u7bc4\u4f8b": [[231, "examples-of-usage"], [147, "examples-of-usage"]], "fractions --- Rational numbers": [[218, "module-fractions"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[234, "module-hmac"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[221, "functional-programming-modules"]], "email.utils: Miscellaneous utilities": [[206, "module-email.utils"]], "email.iterators: Iterators": [[201, "module-email.iterators"]], "email.encoders: Encoders": [[195, "module-email.encoders"]], "difflib --- Helpers for computing deltas": [[187, "module-difflib"]], "SequenceMatcher \u7269\u4ef6": [[187, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[187, "sequencematcher-examples"]], "Differ Objects": [[187, "differ-objects"]], "Differ Example": [[187, "differ-example"]], "A command-line interface to difflib": [[187, "a-command-line-interface-to-difflib"]], "ndiff \u7bc4\u4f8b\uff1a": [[187, "ndiff-example"]], "doctest --- Test interactive Python examples": [[190, "module-doctest"]], "Simple Usage: Checking Examples in Docstrings": [[190, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[190, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[190, "how-it-works"]], "Which Docstrings Are Examined?": [[190, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[190, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[190, "what-s-the-execution-context"]], "What About Exceptions?": [[190, "what-about-exceptions"]], "Option Flags": [[190, "option-flags"]], "Directives": [[190, "directives"]], "Warnings": [[190, "warnings"]], "Basic API": [[190, "basic-api"]], "Unittest API": [[190, "unittest-api"]], "Advanced API": [[190, "advanced-api"]], "DocTest \u7269\u4ef6": [[190, "doctest-objects"]], "Example \u7269\u4ef6": [[190, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[190, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[190, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[190, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[190, "outputchecker-objects"]], "Debugging": [[190, "debugging"]], "Soapbox": [[190, "soapbox"]], "\u8cc7\u6599\u578b\u5225": [[179, "data-types"]], "csv --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165": [[172, "module-csv"]], "Dialects and Formatting Parameters": [[172, "dialects-and-formatting-parameters"]], "Reader Objects": [[172, "reader-objects"]], "Writer Objects": [[172, "writer-objects"]], "decimal --- Decimal fixed point and floating point arithmetic": [[183, "module-decimal"]], "Quick-start Tutorial": [[183, "quick-start-tutorial"]], "Decimal objects": [[183, "decimal-objects"]], "Logical operands": [[183, "logical-operands"]], "Context objects": [[183, "context-objects"]], "Rounding modes": [[183, "rounding-modes"]], "Signals": [[183, "signals"]], "Floating Point Notes": [[183, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[183, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[183, "special-values"]], "Working with threads": [[183, "working-with-threads"]], "Recipes": [[183, "recipes"]], "Decimal FAQ": [[183, "decimal-faq"]], "email.contentmanager: Managing MIME Content": [[194, "module-email.contentmanager"]], "Content Manager Instances": [[194, "content-manager-instances"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[182, "debugging-and-profiling"]], "email.message: Representing an email message": [[202, "module-email.message"]], "email.headerregistry: Custom Header Objects": [[200, "module-email.headerregistry"]], "ctypes --- A foreign function library for Python": [[173, "module-ctypes"]], "ctypes tutorial": [[173, "ctypes-tutorial"]], "Loading dynamic link libraries": [[173, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[173, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[173, "calling-functions"]], "Fundamental data types": [[173, "fundamental-data-types"], [173, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[173, "calling-functions-continued"]], "Calling variadic functions": [[173, "calling-variadic-functions"]], "Calling functions with your own custom data types": [[173, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[173, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[173, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[173, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[173, "structures-and-unions"]], "Structure/union alignment and byte order": [[173, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[173, "bit-fields-in-structures-and-unions"]], "Arrays": [[173, "arrays"]], "Pointers": [[173, "pointers"]], "Type conversions": [[173, "type-conversions"]], "Incomplete Types": [[173, "incomplete-types"]], "Callback functions": [[173, "callback-functions"]], "Accessing values exported from dlls": [[173, "accessing-values-exported-from-dlls"]], "Surprises": [[173, "surprises"]], "Variable-sized data types": [[173, "variable-sized-data-types"]], "ctypes reference": [[173, "ctypes-reference"]], "Finding shared libraries": [[173, "finding-shared-libraries"]], "Loading shared libraries": [[173, "loading-shared-libraries"]], "Foreign functions": [[173, "foreign-functions"]], "Function prototypes": [[173, "function-prototypes"]], "Data types": [[173, "data-types"]], "Structured data types": [[173, "structured-data-types"]], "Arrays and pointers": [[173, "arrays-and-pointers"]], "\u52a0\u5bc6\u670d\u52d9": [[171, "cryptographic-services"]], "Custom Python Interpreters": [[177, "custom-python-interpreters"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[180, "module-datetime"]], "Aware and Naive Objects": [[180, "aware-and-naive-objects"]], "Available Types": [[180, "available-types"]], "Common Properties": [[180, "common-properties"]], "Determining if an Object is Aware or Naive": [[180, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[180, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[180, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[180, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[180, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[180, "datetime-objects"]], "Examples of Usage: datetime": [[180, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[180, "time-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atime": [[180, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[180, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[180, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[180, "strftime-and-strptime-behavior"]], "strftime() and strptime() Format Codes": [[180, "strftime-and-strptime-format-codes"]], "Technical Detail": [[180, "technical-detail"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[188, "module-dis"]], "Bytecode analysis": [[188, "bytecode-analysis"]], "Analysis functions": [[188, "analysis-functions"]], "Python Bytecode Instructions": [[188, "python-bytecode-instructions"]], "Opcode collections": [[188, "opcode-collections"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[170, "module-crypt"]], "Hashing Methods": [[170, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[170, "module-attributes"]], "\u6a21\u7d44\u51fd\u5f0f": [[170, "module-functions"], [163, "module-functions"]], "email.header: Internationalized headers": [[199, "module-email.header"]], "email.charset: Representing character sets": [[192, "module-email.charset"]], "Python Development Mode": [[185, "python-development-mode"]], "Effects of the Python Development Mode": [[185, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[185, "resourcewarning-example"]], "Bad file descriptor error example": [[185, "bad-file-descriptor-error-example"]], "email: Examples": [[197, "email-examples"]], "curses.ascii --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f": [[175, "module-curses.ascii"]], "email.mime: Creating email and MIME objects from scratch": [[203, "module-email.mime"]], "email.errors: Exception and Defect classes": [[196, "module-email.errors"]], "email --- An email and MIME handling package": [[191, "module-email"]], "dbm --- Interfaces to Unix \"databases\"": [[181, "module-dbm"]], "dbm.gnu --- GNU's reinterpretation of dbm": [[181, "module-dbm.gnu"]], "dbm.ndbm --- Interface based on ndbm": [[181, "module-dbm.ndbm"]], "dbm.dumb --- Portable DBM implementation": [[181, "module-dbm.dumb"]], "email.message.Message: Representing an email message using the compat32 API": [[193, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[189, "software-packaging-and-distribution"]], "\u958b\u767c\u5de5\u5177": [[184, "development-tools"]], "email.generator: Generating MIME documents": [[198, "module-email.generator"]], "curses.panel --- A panel stack extension for curses": [[176, "module-curses.panel"]], "Panel Objects": [[176, "panel-objects"]], "curses --- Terminal handling for character-cell displays": [[174, "module-curses"]], "Window Objects": [[174, "window-objects"]], "Constants": [[174, "constants"]], "curses.textpad --- Text input widget for curses programs": [[174, "module-curses.textpad"]], "Textbox objects": [[174, "textbox-objects"]], "dataclasses --- Data Classes": [[178, "module-dataclasses"]], "Module contents": [[178, "module-contents"]], "Post-init processing": [[178, "post-init-processing"]], "Class variables": [[178, "class-variables"]], "Init-only variables": [[178, "init-only-variables"]], "Frozen instances": [[178, "frozen-instances"]], "Inheritance": [[178, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[178, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[178, "default-factory-functions"]], "Mutable default values": [[178, "mutable-default-values"]], "Descriptor-typed fields": [[178, "descriptor-typed-fields"]], "Tkinter Dialogs": [[186, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[186, "module-tkinter.simpledialog"]], "tkinter.filedialog --- File selection dialogs": [[186, "module-tkinter.filedialog"]], "Native Load/Save Dialogs": [[186, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[186, "module-tkinter.commondialog"]], "calendar --- General calendar-related functions": [[148, "module-calendar"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[141, "module-base64"]], "binascii --- Convert between binary and ASCII": [[144, "module-binascii"]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[136, "synchronization-primitives"]], "Lock": [[136, "lock"]], "Event": [[136, "event"]], "Condition": [[136, "condition"]], "Semaphore": [[136, "semaphore"]], "BoundedSemaphore": [[136, "boundedsemaphore"]], "Barrier": [[136, "barrier"]], "bdb --- Debugger framework": [[142, "module-bdb"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[145, "module-bisect"]], "\u6548\u80fd\u8003\u91cf": [[145, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[145, "searching-sorted-lists"]], "codecs --- Codec registry and base classes": [[155, "module-codecs"]], "Codec Base Classes": [[155, "codec-base-classes"]], "Error Handlers": [[155, "error-handlers"]], "Stateless Encoding and Decoding": [[155, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[155, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[155, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[155, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[155, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[155, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[155, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[155, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[155, "streamrecoder-objects"]], "Encodings and Unicode": [[155, "encodings-and-unicode"]], "Standard Encodings": [[155, "standard-encodings"]], "Python Specific Encodings": [[155, "python-specific-encodings"]], "Text Encodings": [[155, "text-encodings"]], "Binary Transforms": [[155, "binary-transforms"]], "Text Transforms": [[155, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[155, "module-encodings.idna"]], "encodings.mbcs --- Windows ANSI codepage": [[155, "module-encodings.mbcs"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[155, "module-encodings.utf_8_sig"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[163, "module-concurrent.futures"]], "Executor \u7269\u4ef6": [[163, "executor-objects"]], "ThreadPoolExecutor": [[163, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[163, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[163, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[163, "processpoolexecutor-example"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[151, "module-chunk"]], "compileall --- Byte-compile Python libraries": [[160, "module-compileall"]], "Command-line use": [[160, "command-line-use"]], "Public functions": [[160, "public-functions"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[140, "audit-events-table"]], "Coroutines and Tasks": [[137, "coroutines-and-tasks"]], "Awaitables": [[137, "awaitables"]], "Creating Tasks": [[137, "creating-tasks"]], "Task Cancellation": [[137, "task-cancellation"]], "Task Groups": [[137, "task-groups"]], "Sleeping": [[137, "sleeping"]], "Running Tasks Concurrently": [[137, "running-tasks-concurrently"]], "Eager Task Factory": [[137, "eager-task-factory"]], "Shielding From Cancellation": [[137, "shielding-from-cancellation"]], "Timeouts": [[137, "timeouts"]], "Waiting Primitives": [[137, "waiting-primitives"]], "Running in Threads": [[137, "running-in-threads"]], "Scheduling From Other Threads": [[137, "scheduling-from-other-threads"]], "Introspection": [[137, "introspection"]], "Task Object": [[137, "task-object"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[150, "module-cgitb"]], "Binary Data Services": [[143, "binary-data-services"]], "contextvars --- Context Variables": [[167, "module-contextvars"]], "Context Variables": [[167, "context-variables"]], "Manual Context Management": [[167, "manual-context-management"]], "asyncio support": [[167, "asyncio-support"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[149, "module-cgi"]], "Using the cgi module": [[149, "using-the-cgi-module"]], "Higher Level Interface": [[149, "higher-level-interface"]], "Caring about security": [[149, "caring-about-security"]], "Installing your CGI script on a Unix system": [[149, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[149, "testing-your-cgi-script"]], "Debugging CGI scripts": [[149, "debugging-cgi-scripts"]], "Common problems and solutions": [[149, "common-problems-and-solutions"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[161, "concurrent-execution"]], "cmath --- Mathematical functions for complex numbers": [[152, "module-cmath"]], "Conversions to and from polar coordinates": [[152, "conversions-to-and-from-polar-coordinates"]], "Classification functions": [[152, "classification-functions"]], "concurrent \u5957\u4ef6": [[162, "the-concurrent-package"]], "contextlib --- Utilities for with-statement contexts": [[166, "module-contextlib"]], "Utilities": [[166, "utilities"]], "Examples and Recipes": [[166, "examples-and-recipes"], [158, "examples-and-recipes"]], "Supporting a variable number of context managers": [[166, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[166, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[166, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[166, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[166, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[166, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[166, "reentrant-context-managers"]], "Reusable context managers": [[166, "reusable-context-managers"]], "copyreg --- Register pickle support functions": [[169, "module-copyreg"]], "bz2 --- Support for bzip2 compression": [[147, "module-bz2"]], "(De)compression of files": [[147, "de-compression-of-files"]], "Incremental (de)compression": [[147, "incremental-de-compression"]], "One-shot (de)compression": [[147, "one-shot-de-compression"]], "configparser --- Configuration file parser": [[164, "module-configparser"]], "Quick Start": [[164, "quick-start"]], "Supported Datatypes": [[164, "supported-datatypes"]], "Fallback Values": [[164, "fallback-values"]], "Supported INI File Structure": [[164, "supported-ini-file-structure"]], "Interpolation of values": [[164, "interpolation-of-values"]], "Mapping Protocol Access": [[164, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[164, "customizing-parser-behaviour"]], "Legacy API Examples": [[164, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[164, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[164, "rawconfigparser-objects"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[139, "module-audioop"]], "\u5167\u5efa\u5e38\u6578": [[165, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[165, "constants-added-by-the-site-module"]], "codeop --- Compile Python code": [[156, "module-codeop"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[146, "module-builtins"]], "code --- Interpreter base classes": [[154, "module-code"]], "Interactive Interpreter Objects": [[154, "interactive-interpreter-objects"]], "Interactive Console Objects": [[154, "interactive-console-objects"]], "collections.abc --- Abstract Base Classes for Containers": [[158, "module-collections.abc"]], "Collections Abstract Base Classes": [[158, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[158, "collections-abstract-base-classes-detailed-descriptions"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[168, "module-copy"]], "cmd --- Support for line-oriented command interpreters": [[153, "module-cmd"]], "Cmd \u7269\u4ef6": [[153, "cmd-objects"]], "Cmd Example": [[153, "cmd-example"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[159, "module-colorsys"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[157, "module-collections"]], "ChainMap \u7269\u4ef6": [[157, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[157, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[157, "counter-objects"]], "deque \u7269\u4ef6": [[157, "deque-objects"]], "deque \u7528\u6cd5": [[157, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[157, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[157, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[157, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[157, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[157, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[157, "userdict-objects"]], "UserList \u7269\u4ef6": [[157, "userlist-objects"]], "UserString \u7269\u4ef6": [[157, "userstring-objects"]], "atexit --- Exit handlers": [[138, "module-atexit"]], "atexit \u7bc4\u4f8b": [[138, "atexit-example"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c macro)": [[3, "c.PyObject_New"]], "pyobject_newvar (c macro)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "py_version (c var)": [[4, "c.Py_Version"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "pybool_type (c var)": [[6, "c.PyBool_Type"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(\u8acb\u898b\u7de9\u885d\u5354\u5b9a)": [[7, "index-0"]], "c-contiguous\uff08c \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "index-10"]], "fortran contiguous\uff08fortran \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs": [[7, "index-1"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_copydata (c function)": [[7, "c.PyObject_CopyData"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface\uff08\u7de9\u885d\u4ecb\u9762\uff09": [[7, "index-0"]], "buffer object\uff08\u7de9\u885d\u7269\u4ef6\uff09": [[7, "index-0"]], "buffer protocol\uff08\u7de9\u885d\u5354\u5b9a\uff09": [[7, "index-0"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[7, "index-2"], [86, "term-contiguous"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray\uff08\u4f4d\u5143\u7d44\u4e32\u5217\uff09": [[8, "index-0"]], "object\uff08\u7269\u4ef6\uff09": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [13, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [27, "index-0"], [34, "index-3"], [37, "index-0"], [38, "index-0"], [42, "index-0"], [43, "index-0"], [43, "index-1"], [45, "index-0"], [54, "index-0"], [59, "index-0"], [60, "index-0"], [74, "index-0"], [86, "term-object"], [222, "index-12"], [271, "index-1"], [334, "index-0"], [341, "index-11"], [341, "index-19"], [341, "index-22"], [341, "index-23"], [341, "index-25"], [341, "index-26"], [341, "index-27"], [341, "index-28"], [341, "index-29"], [341, "index-40"], [341, "index-41"], [341, "index-42"], [341, "index-51"], [341, "index-52"], [341, "index-56"], [341, "index-59"], [341, "index-61"], [341, "index-62"], [341, "index-8"], [349, "index-8"], [377, "index-0"], [423, "index-11"], [423, "index-28"], [423, "index-40"], [423, "index-6"], [424, "index-0"], [424, "index-10"], [424, "index-11"], [424, "index-13"], [424, "index-14"], [424, "index-15"], [424, "index-17"], [424, "index-20"], [424, "index-22"], [424, "index-23"], [424, "index-26"], [424, "index-27"], [424, "index-28"], [424, "index-29"], [424, "index-30"], [424, "index-32"], [424, "index-33"], [424, "index-35"], [424, "index-40"], [424, "index-41"], [424, "index-42"], [424, "index-45"], [424, "index-49"], [424, "index-51"], [424, "index-55"], [424, "index-57"], [424, "index-6"], [424, "index-60"], [424, "index-63"], [424, "index-7"], [424, "index-77"], [424, "index-8"], [424, "index-9"], [424, "index-96"], [426, "index-15"], [426, "index-16"], [426, "index-17"], [426, "index-20"], [426, "index-22"], [426, "index-31"], [426, "index-35"], [426, "index-40"], [426, "index-42"], [426, "index-45"], [426, "index-47"], [426, "index-52"], [426, "index-53"], [426, "index-54"], [426, "index-55"], [426, "index-7"], [426, "index-80"], [426, "index-92"], [432, "index-10"], [432, "index-11"], [432, "index-28"], [432, "index-3"], [432, "index-4"], [432, "index-9"], [436, "index-0"], [442, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes\uff08\u4f4d\u5143\u7d44\uff09": [[9, "index-0"], [48, "index-3"], [341, "index-31"], [341, "index-40"], [341, "index-41"], [341, "index-43"], [341, "index-45"], [424, "index-21"], [424, "index-74"]], "pep 590": [[10, "index-2"], [468, "index-113"], [469, "index-121"], [477, "index-35"], [478, "index-18"], [478, "index-8"], [479, "index-103"], [479, "index-104"], [479, "index-137"], [479, "index-138"], [479, "index-164"], [479, "index-171"], [479, "index-180"], [479, "index-181"], [479, "index-183"], [479, "index-210"], [479, "index-34"], [479, "index-66"], [479, "index-76"], [479, "index-82"], [479, "index-88"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [26, "index-0"], [30, "index-3"], [32, "index-39"], [32, "index-40"], [32, "index-41"], [32, "index-47"], [32, "index-49"], [32, "index-66"], [32, "index-67"], [33, "index-0"], [33, "index-17"], [33, "index-33"], [33, "index-34"], [33, "index-37"], [33, "index-38"], [33, "index-7"], [34, "index-37"], [34, "index-38"], [34, "index-39"], [34, "index-40"], [44, "index-10"], [44, "index-7"], [44, "index-8"], [48, "index-4"], [48, "index-5"], [56, "index-3"], [58, "index-0"], [62, "index-3"], [62, "index-4"], [62, "index-5"], [63, "index-0"], [63, "index-1"], [63, "index-2"], [63, "index-3"], [63, "index-4"], [63, "index-5"], [65, "index-3"], [67, "index-23"], [69, "index-3"], [70, "index-1"], [72, "index-0"], [74, "index-2"], [77, "index-2"], [79, "index-6"], [79, "index-7"], [79, "index-8"], [84, "index-0"], [84, "index-2"], [84, "index-3"], [85, "index-2"], [86, "index-100"], [86, "index-101"], [86, "index-102"], [86, "index-103"], [86, "index-104"], [86, "index-105"], [86, "index-106"], [86, "index-107"], [86, "index-108"], [86, "index-109"], [86, "index-110"], [86, "index-111"], [86, "index-112"], [86, "index-77"], [86, "index-78"], [86, "index-79"], [86, "index-80"], [86, "index-81"], [86, "index-82"], [86, "index-83"], [86, "index-84"], [86, "index-85"], [86, "index-86"], [86, "index-87"], [86, "index-88"], [86, "index-89"], [86, "index-90"], [86, "index-91"], [86, "index-92"], [86, "index-93"], [86, "index-94"], [86, "index-95"], [86, "index-96"], [86, "index-97"], [86, "index-98"], [86, "index-99"], [87, "index-0"], [89, "index-0"], [89, "index-1"], [89, "index-2"], [89, "index-5"], [94, "index-0"], [94, "index-2"], [94, "index-4"], [106, "index-0"], [110, "index-0"], [110, "index-1"], [111, "index-22"], [111, "index-23"], [111, "index-24"], [111, "index-25"], [111, "index-26"], [111, "index-27"], [111, "index-28"], [111, "index-29"], [111, "index-30"], [111, "index-31"], [111, "index-32"], [114, "index-4"], [114, "index-5"], [115, "index-4"], [120, "index-2"], [120, "index-3"], [120, "index-4"], [120, "index-5"], [120, "index-6"], [120, "index-7"], [124, "index-0"], [124, "index-1"], [124, "index-2"], [127, "index-2"], [139, "index-3"], [140, "index-3"], [149, "index-8"], [150, "index-4"], [151, "index-3"], [152, "index-0"], [155, "index-2"], [155, "index-5"], [157, "index-10"], [157, "index-11"], [157, "index-8"], [157, "index-9"], [158, "index-0"], [158, "index-1"], [158, "index-2"], [158, "index-3"], [158, "index-4"], [158, "index-7"], [160, "index-0"], [160, "index-2"], [160, "index-3"], [163, "index-2"], [166, "index-2"], [167, "index-2"], [170, "index-1"], [172, "index-7"], [178, "index-0"], [178, "index-1"], [178, "index-2"], [188, "index-0"], [207, "index-0"], [210, "index-10"], [210, "index-11"], [210, "index-2"], [210, "index-5"], [210, "index-6"], [210, "index-7"], [210, "index-8"], [210, "index-9"], [218, "index-0"], [222, "index-10"], [222, "index-14"], [222, "index-15"], [222, "index-18"], [223, "index-0"], [224, "index-2"], [244, "index-7"], [246, "index-2"], [247, "index-0"], [247, "index-1"], [247, "index-10"], [247, "index-11"], [247, "index-12"], [247, "index-13"], [247, "index-14"], [247, "index-16"], [247, "index-17"], [247, "index-18"], [247, "index-19"], [247, "index-2"], [247, "index-20"], [247, "index-21"], [247, "index-22"], [247, "index-23"], [247, "index-24"], [247, "index-25"], [247, "index-26"], [247, "index-3"], [247, "index-4"], [247, "index-5"], [247, "index-6"], [247, "index-7"], [247, "index-8"], [247, "index-9"], [248, "index-0"], [252, "index-0"], [252, "index-1"], [252, "index-2"], [252, "index-3"], [255, "index-1"], [255, "index-8"], [262, "index-1"], [264, "index-1"], [269, "index-0"], [272, "index-0"], [278, "index-3"], [284, "index-2"], [285, "index-12"], [286, "index-2"], [290, "index-22"], [290, "index-24"], [290, "index-25"], [290, "index-27"], [290, "index-44"], [290, "index-5"], [290, "index-53"], [290, "index-55"], [290, "index-6"], [290, "index-7"], [292, "index-4"], [293, "index-1"], [296, "index-2"], [296, "index-3"], [296, "index-4"], [296, "index-8"], [298, "index-2"], [299, "index-0"], [299, "index-10"], [299, "index-11"], [299, "index-2"], [299, "index-3"], [299, "index-5"], [299, "index-6"], [299, "index-7"], [308, "index-1"], [308, "index-2"], [308, "index-4"], [308, "index-5"], [319, "index-0"], [321, "index-1"], [321, "index-2"], [321, "index-3"], [321, "index-5"], [321, "index-6"], [321, "index-7"], [321, "index-8"], [323, "index-0"], [325, "index-0"], [325, "index-3"], [325, "index-4"], [325, "index-5"], [325, "index-6"], [325, "index-7"], [326, "index-0"], [329, "index-2"], [330, "index-0"], [330, "index-1"], [331, "index-11"], [333, "index-3"], [334, "index-1"], [334, "index-10"], [334, "index-11"], [334, "index-12"], [334, "index-13"], [334, "index-2"], [334, "index-4"], [334, "index-5"], [334, "index-7"], [334, "index-8"], [334, "index-9"], [336, "index-2"], [337, "index-0"], [337, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-2"], [337, "index-3"], [337, "index-4"], [337, "index-5"], [337, "index-8"], [337, "index-9"], [338, "index-2"], [341, "index-49"], [341, "index-50"], [341, "index-57"], [341, "index-58"], [341, "index-60"], [341, "index-71"], [341, "index-72"], [342, "index-0"], [342, "index-1"], [342, "index-12"], [342, "index-17"], [342, "index-18"], [342, "index-19"], [345, "index-0"], [346, "index-2"], [349, "index-0"], [349, "index-13"], [349, "index-14"], [349, "index-15"], [349, "index-16"], [349, "index-19"], [349, "index-20"], [349, "index-25"], [349, "index-26"], [349, "index-30"], [349, "index-31"], [349, "index-32"], [349, "index-42"], [349, "index-43"], [349, "index-44"], [349, "index-9"], [354, "index-0"], [355, "index-5"], [358, "index-3"], [358, "index-4"], [362, "index-8"], [374, "index-0"], [374, "index-1"], [381, "index-0"], [381, "index-1"], [381, "index-2"], [381, "index-3"], [381, "index-5"], [381, "index-6"], [382, "index-0"], [382, "index-1"], [382, "index-10"], [382, "index-100"], [382, "index-109"], [382, "index-11"], [382, "index-110"], [382, "index-111"], [382, "index-112"], [382, "index-113"], [382, "index-114"], [382, "index-115"], [382, "index-116"], [382, "index-12"], [382, "index-13"], [382, "index-14"], [382, "index-15"], [382, "index-16"], [382, "index-17"], [382, "index-18"], [382, "index-19"], [382, "index-2"], [382, "index-20"], [382, "index-21"], [382, "index-22"], [382, "index-24"], [382, "index-25"], [382, "index-26"], [382, "index-27"], [382, "index-28"], [382, "index-3"], [382, "index-32"], [382, "index-33"], [382, "index-34"], [382, "index-35"], [382, "index-38"], [382, "index-39"], [382, "index-4"], [382, "index-40"], [382, "index-41"], [382, "index-42"], [382, "index-43"], [382, "index-44"], [382, "index-45"], [382, "index-46"], [382, "index-47"], [382, "index-48"], [382, "index-49"], [382, "index-5"], [382, "index-50"], [382, "index-51"], [382, "index-52"], [382, "index-54"], [382, "index-55"], [382, "index-56"], [382, "index-57"], [382, "index-59"], [382, "index-6"], [382, "index-60"], [382, "index-61"], [382, "index-62"], [382, "index-63"], [382, "index-64"], [382, "index-65"], [382, "index-66"], [382, "index-67"], [382, "index-68"], [382, "index-69"], [382, "index-7"], [382, "index-70"], [382, "index-71"], [382, "index-72"], [382, "index-73"], [382, "index-74"], [382, "index-75"], [382, "index-76"], [382, "index-77"], [382, "index-78"], [382, "index-79"], [382, "index-8"], [382, "index-80"], [382, "index-81"], [382, "index-82"], [382, "index-83"], [382, "index-84"], [382, "index-85"], [382, "index-86"], [382, "index-87"], [382, "index-88"], [382, "index-89"], [382, "index-9"], [382, "index-90"], [382, "index-91"], [382, "index-92"], [382, "index-93"], [382, "index-94"], [382, "index-95"], [382, "index-96"], [382, "index-97"], [382, "index-98"], [382, "index-99"], [393, "index-3"], [395, "index-6"], [398, "index-1"], [398, "index-2"], [398, "index-4"], [403, "index-0"], [403, "index-1"], [403, "index-11"], [403, "index-12"], [403, "index-13"], [403, "index-14"], [403, "index-15"], [403, "index-16"], [403, "index-17"], [403, "index-18"], [403, "index-2"], [403, "index-3"], [403, "index-4"], [403, "index-6"], [403, "index-7"], [403, "index-8"], [403, "index-9"], [404, "index-7"], [419, "index-0"], [419, "index-1"], [419, "index-2"], [421, "index-0"], [421, "index-1"], [423, "index-17"], [423, "index-19"], [423, "index-20"], [423, "index-24"], [423, "index-25"], [423, "index-26"], [423, "index-30"], [423, "index-33"], [423, "index-36"], [423, "index-37"], [423, "index-38"], [423, "index-39"], [423, "index-42"], [423, "index-43"], [423, "index-44"], [423, "index-45"], [423, "index-50"], [424, "index-104"], [424, "index-105"], [424, "index-106"], [424, "index-108"], [424, "index-112"], [424, "index-82"], [424, "index-84"], [424, "index-87"], [424, "index-90"], [424, "index-91"], [424, "index-92"], [424, "index-93"], [425, "index-11"], [425, "index-12"], [426, "index-14"], [426, "index-19"], [426, "index-21"], [426, "index-26"], [426, "index-27"], [426, "index-28"], [426, "index-29"], [426, "index-30"], [426, "index-51"], [426, "index-79"], [426, "index-87"], [426, "index-89"], [426, "index-94"], [427, "index-0"], [428, "index-1"], [428, "index-11"], [428, "index-12"], [428, "index-13"], [428, "index-14"], [428, "index-15"], [428, "index-18"], [428, "index-19"], [428, "index-2"], [428, "index-20"], [428, "index-21"], [428, "index-22"], [428, "index-23"], [428, "index-24"], [428, "index-25"], [428, "index-26"], [428, "index-6"], [431, "index-1"], [431, "index-11"], [431, "index-12"], [431, "index-21"], [431, "index-26"], [432, "index-13"], [432, "index-16"], [432, "index-17"], [432, "index-41"], [432, "index-42"], [432, "index-46"], [432, "index-48"], [437, "index-15"], [437, "index-16"], [437, "index-17"], [437, "index-18"], [446, "index-16"], [451, "index-1"], [451, "index-11"], [451, "index-13"], [451, "index-14"], [451, "index-15"], [451, "index-19"], [451, "index-41"], [451, "index-42"], [451, "index-54"], [451, "index-55"], [452, "index-0"], [452, "index-1"], [452, "index-33"], [453, "index-0"], [457, "index-0"], [457, "index-16"], [457, "index-17"], [457, "index-19"], [457, "index-21"], [457, "index-38"], [458, "index-0"], [458, "index-1"], [458, "index-2"], [458, "index-3"], [459, "index-0"], [459, "index-1"], [459, "index-10"], [459, "index-12"], [459, "index-13"], [459, "index-14"], [459, "index-15"], [459, "index-16"], [459, "index-17"], [459, "index-2"], [459, "index-3"], [459, "index-4"], [459, "index-5"], [459, "index-6"], [459, "index-7"], [459, "index-8"], [459, "index-9"], [460, "index-0"], [460, "index-1"], [460, "index-10"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [460, "index-14"], [460, "index-15"], [460, "index-16"], [460, "index-2"], [460, "index-22"], [460, "index-3"], [460, "index-4"], [460, "index-5"], [460, "index-6"], [460, "index-7"], [460, "index-8"], [460, "index-9"], [461, "index-0"], [461, "index-1"], [461, "index-10"], [461, "index-11"], [461, "index-12"], [461, "index-13"], [461, "index-14"], [461, "index-15"], [461, "index-16"], [461, "index-17"], [461, "index-18"], [461, "index-19"], [461, "index-2"], [461, "index-20"], [461, "index-21"], [461, "index-22"], [461, "index-23"], [461, "index-3"], [461, "index-4"], [461, "index-5"], [461, "index-6"], [461, "index-7"], [461, "index-9"], [462, "index-0"], [462, "index-1"], [462, "index-10"], [462, "index-11"], [462, "index-12"], [462, "index-13"], [462, "index-14"], [462, "index-15"], [462, "index-16"], [462, "index-17"], [462, "index-2"], [462, "index-3"], [462, "index-4"], [462, "index-5"], [462, "index-6"], [462, "index-8"], [462, "index-9"], [463, "index-0"], [463, "index-1"], [463, "index-10"], [463, "index-11"], [463, "index-12"], [463, "index-13"], [463, "index-14"], [463, "index-15"], [463, "index-16"], [463, "index-17"], [463, "index-18"], [463, "index-19"], [463, "index-2"], [463, "index-21"], [463, "index-24"], [463, "index-25"], [463, "index-26"], [463, "index-27"], [463, "index-28"], [463, "index-29"], [463, "index-3"], [463, "index-30"], [463, "index-31"], [463, "index-4"], [463, "index-5"], [463, "index-6"], [463, "index-7"], [463, "index-8"], [463, "index-9"], [464, "index-0"], [464, "index-1"], [464, "index-10"], [464, "index-11"], [464, "index-12"], [464, "index-14"], [464, "index-15"], [464, "index-16"], [464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-2"], [464, "index-25"], [464, "index-3"], [464, "index-7"], [464, "index-8"], [464, "index-9"], [465, "index-0"], [465, "index-16"], [465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-20"], [465, "index-21"], [465, "index-22"], [465, "index-23"], [465, "index-24"], [465, "index-25"], [465, "index-26"], [465, "index-3"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-7"], [466, "index-0"], [466, "index-1"], [466, "index-10"], [466, "index-11"], [466, "index-12"], [466, "index-13"], [466, "index-14"], [466, "index-15"], [466, "index-16"], [466, "index-17"], [466, "index-18"], [466, "index-19"], [466, "index-2"], [466, "index-20"], [466, "index-21"], [466, "index-22"], [466, "index-23"], [466, "index-24"], [466, "index-25"], [466, "index-26"], [466, "index-27"], [466, "index-28"], [466, "index-29"], [466, "index-3"], [466, "index-30"], [466, "index-31"], [466, "index-32"], [466, "index-33"], [466, "index-34"], [466, "index-35"], [466, "index-4"], [466, "index-5"], [466, "index-6"], [466, "index-7"], [466, "index-8"], [466, "index-9"], [467, "index-0"], [467, "index-1"], [467, "index-2"], [467, "index-3"], [468, "index-100"], [468, "index-101"], [468, "index-102"], [468, "index-103"], [468, "index-104"], [468, "index-105"], [468, "index-106"], [468, "index-107"], [468, "index-108"], [468, "index-109"], [468, "index-110"], [468, "index-111"], [468, "index-112"], [468, "index-113"], [468, "index-115"], [468, "index-116"], [468, "index-117"], [468, "index-118"], [468, "index-119"], [468, "index-80"], [468, "index-81"], [468, "index-82"], [468, "index-83"], [468, "index-84"], [468, "index-85"], [468, "index-86"], [468, "index-87"], [468, "index-88"], [468, "index-89"], [468, "index-90"], [468, "index-91"], [468, "index-92"], [468, "index-93"], [468, "index-94"], [468, "index-95"], [468, "index-96"], [468, "index-97"], [468, "index-99"], [469, "index-100"], [469, "index-101"], [469, "index-102"], [469, "index-103"], [469, "index-105"], [469, "index-106"], [469, "index-107"], [469, "index-108"], [469, "index-109"], [469, "index-110"], [469, "index-111"], [469, "index-112"], [469, "index-113"], [469, "index-114"], [469, "index-115"], [469, "index-117"], [469, "index-118"], [469, "index-119"], [469, "index-120"], [469, "index-121"], [469, "index-122"], [469, "index-123"], [469, "index-83"], [469, "index-85"], [469, "index-86"], [469, "index-87"], [469, "index-88"], [469, "index-90"], [469, "index-91"], [469, "index-92"], [469, "index-93"], [469, "index-94"], [469, "index-95"], [469, "index-96"], [469, "index-97"], [469, "index-98"], [469, "index-99"], [470, "index-0"], [470, "index-1"], [470, "index-10"], [470, "index-11"], [470, "index-12"], [470, "index-13"], [470, "index-14"], [470, "index-15"], [470, "index-18"], [470, "index-19"], [470, "index-2"], [470, "index-20"], [470, "index-21"], [470, "index-22"], [470, "index-23"], [470, "index-24"], [470, "index-25"], [470, "index-26"], [470, "index-27"], [470, "index-28"], [470, "index-29"], [470, "index-3"], [470, "index-30"], [470, "index-31"], [470, "index-32"], [470, "index-33"], [470, "index-34"], [470, "index-35"], [470, "index-36"], [470, "index-37"], [470, "index-38"], [470, "index-39"], [470, "index-4"], [470, "index-40"], [470, "index-41"], [470, "index-42"], [470, "index-43"], [470, "index-46"], [470, "index-47"], [470, "index-5"], [470, "index-7"], [470, "index-8"], [470, "index-9"], [471, "index-0"], [471, "index-1"], [471, "index-14"], [471, "index-2"], [471, "index-3"], [471, "index-4"], [471, "index-5"], [471, "index-6"], [471, "index-9"], [472, "index-0"], [472, "index-1"], [472, "index-10"], [472, "index-12"], [472, "index-13"], [472, "index-14"], [472, "index-15"], [472, "index-16"], [472, "index-17"], [472, "index-18"], [472, "index-19"], [472, "index-2"], [472, "index-20"], [472, "index-21"], [472, "index-22"], [472, "index-28"], [472, "index-29"], [472, "index-3"], [472, "index-30"], [472, "index-31"], [472, "index-32"], [472, "index-33"], [472, "index-34"], [472, "index-36"], [472, "index-37"], [472, "index-38"], [472, "index-4"], [472, "index-41"], [472, "index-42"], [472, "index-6"], [472, "index-7"], [472, "index-8"], [472, "index-9"], [473, "index-0"], [473, "index-1"], [473, "index-10"], [473, "index-11"], [473, "index-12"], [473, "index-13"], [473, "index-14"], [473, "index-15"], [473, "index-16"], [473, "index-17"], [473, "index-18"], [473, "index-19"], [473, "index-2"], [473, "index-20"], [473, "index-21"], [473, "index-22"], [473, "index-23"], [473, "index-24"], [473, "index-25"], [473, "index-26"], [473, "index-27"], [473, "index-28"], [473, "index-29"], [473, "index-3"], [473, "index-30"], [473, "index-31"], [473, "index-32"], [473, "index-33"], [473, "index-34"], [473, "index-35"], [473, "index-36"], [473, "index-37"], [473, "index-38"], [473, "index-39"], [473, "index-4"], [473, "index-42"], [473, "index-43"], [473, "index-44"], [473, "index-45"], [473, "index-46"], [473, "index-47"], [473, "index-48"], [473, "index-49"], [473, "index-5"], [473, "index-52"], [473, "index-53"], [473, "index-6"], [473, "index-7"], [473, "index-8"], [473, "index-9"], [474, "index-0"], [474, "index-1"], [474, "index-10"], [474, "index-11"], [474, "index-12"], [474, "index-13"], [474, "index-14"], [474, "index-15"], [474, "index-16"], [474, "index-17"], [474, "index-18"], [474, "index-19"], [474, "index-2"], [474, "index-20"], [474, "index-21"], [474, "index-22"], [474, "index-23"], [474, "index-24"], [474, "index-25"], [474, "index-26"], [474, "index-27"], [474, "index-28"], [474, "index-29"], [474, "index-3"], [474, "index-30"], [474, "index-4"], [474, "index-45"], [474, "index-46"], [474, "index-47"], [474, "index-48"], [474, "index-49"], [474, "index-5"], [474, "index-50"], [474, "index-52"], [474, "index-6"], [474, "index-7"], [474, "index-8"], [474, "index-9"], [475, "index-0"], [475, "index-1"], [475, "index-10"], [475, "index-11"], [475, "index-12"], [475, "index-13"], [475, "index-14"], [475, "index-15"], [475, "index-16"], [475, "index-17"], [475, "index-18"], [475, "index-20"], [475, "index-22"], [475, "index-23"], [475, "index-24"], [475, "index-25"], [475, "index-26"], [475, "index-28"], [475, "index-29"], [475, "index-3"], [475, "index-30"], [475, "index-31"], [475, "index-32"], [475, "index-33"], [475, "index-34"], [475, "index-35"], [475, "index-36"], [475, "index-37"], [475, "index-4"], [475, "index-5"], [475, "index-6"], [475, "index-7"], [475, "index-8"], [475, "index-9"], [476, "index-0"], [476, "index-1"], [476, "index-10"], [476, "index-11"], [476, "index-13"], [476, "index-14"], [476, "index-15"], [476, "index-16"], [476, "index-17"], [476, "index-18"], [476, "index-19"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-23"], [476, "index-24"], [476, "index-28"], [476, "index-29"], [476, "index-3"], [476, "index-30"], [476, "index-32"], [476, "index-33"], [476, "index-37"], [476, "index-38"], [476, "index-40"], [476, "index-5"], [476, "index-6"], [476, "index-7"], [476, "index-9"], [477, "index-10"], [477, "index-11"], [477, "index-12"], [477, "index-15"], [477, "index-16"], [477, "index-17"], [477, "index-18"], [477, "index-19"], [477, "index-23"], [477, "index-24"], [477, "index-31"], [477, "index-32"], [477, "index-33"], [477, "index-34"], [477, "index-35"], [477, "index-36"], [477, "index-5"], [477, "index-8"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-11"], [478, "index-12"], [478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-16"], [478, "index-17"], [478, "index-18"], [478, "index-19"], [478, "index-2"], [478, "index-20"], [478, "index-23"], [478, "index-24"], [478, "index-25"], [478, "index-26"], [478, "index-27"], [478, "index-3"], [478, "index-4"], [478, "index-5"], [478, "index-6"], [478, "index-7"], [478, "index-8"], [478, "index-9"], [479, "index-0"], [479, "index-1"], [479, "index-10"], [479, "index-100"], [479, "index-101"], [479, "index-102"], [479, "index-103"], [479, "index-104"], [479, "index-105"], [479, "index-107"], [479, "index-108"], [479, "index-109"], [479, "index-11"], [479, "index-110"], [479, "index-111"], [479, "index-112"], [479, "index-113"], [479, "index-114"], [479, "index-115"], [479, "index-116"], [479, "index-117"], [479, "index-118"], [479, "index-119"], [479, "index-12"], [479, "index-120"], [479, "index-121"], [479, "index-122"], [479, "index-123"], [479, "index-124"], [479, "index-125"], [479, "index-126"], [479, "index-127"], [479, "index-128"], [479, "index-129"], [479, "index-13"], [479, "index-130"], [479, "index-131"], [479, "index-132"], [479, "index-133"], [479, "index-134"], [479, "index-135"], [479, "index-137"], [479, "index-138"], [479, "index-139"], [479, "index-14"], [479, "index-140"], [479, "index-141"], [479, "index-142"], [479, "index-143"], [479, "index-144"], [479, "index-145"], [479, "index-146"], [479, "index-147"], [479, "index-148"], [479, "index-149"], [479, "index-15"], [479, "index-150"], [479, "index-151"], [479, "index-153"], [479, "index-154"], [479, "index-155"], [479, "index-156"], [479, "index-157"], [479, "index-158"], [479, "index-159"], [479, "index-16"], [479, "index-160"], [479, "index-161"], [479, "index-162"], [479, "index-163"], [479, "index-164"], [479, "index-165"], [479, "index-166"], [479, "index-167"], [479, "index-168"], [479, "index-169"], [479, "index-17"], [479, "index-170"], [479, "index-171"], [479, "index-172"], [479, "index-173"], [479, "index-174"], [479, "index-175"], [479, "index-177"], [479, "index-178"], [479, "index-179"], [479, "index-18"], [479, "index-180"], [479, "index-181"], [479, "index-182"], [479, "index-183"], [479, "index-184"], [479, "index-185"], [479, "index-186"], [479, "index-187"], [479, "index-188"], [479, "index-189"], [479, "index-19"], [479, "index-190"], [479, "index-192"], [479, "index-193"], [479, "index-194"], [479, "index-195"], [479, "index-196"], [479, "index-197"], [479, "index-198"], [479, "index-2"], [479, "index-20"], [479, "index-202"], [479, "index-204"], [479, "index-205"], [479, "index-206"], [479, "index-208"], [479, "index-209"], [479, "index-21"], [479, "index-210"], [479, "index-213"], [479, "index-215"], [479, "index-219"], [479, "index-22"], [479, "index-220"], [479, "index-221"], [479, "index-222"], [479, "index-223"], [479, "index-226"], [479, "index-227"], [479, "index-228"], [479, "index-23"], [479, "index-231"], [479, "index-232"], [479, "index-233"], [479, "index-236"], [479, "index-237"], [479, "index-238"], [479, "index-239"], [479, "index-24"], [479, "index-240"], [479, "index-241"], [479, "index-242"], [479, "index-244"], [479, "index-245"], [479, "index-246"], [479, "index-247"], [479, "index-248"], [479, "index-249"], [479, "index-25"], [479, "index-250"], [479, "index-251"], [479, "index-252"], [479, "index-253"], [479, "index-256"], [479, "index-257"], [479, "index-258"], [479, "index-259"], [479, "index-26"], [479, "index-260"], [479, "index-261"], [479, "index-262"], [479, "index-263"], [479, "index-264"], [479, "index-265"], [479, "index-266"], [479, "index-267"], [479, "index-268"], [479, "index-269"], [479, "index-27"], [479, "index-270"], [479, "index-271"], [479, "index-272"], [479, "index-273"], [479, "index-274"], [479, "index-275"], [479, "index-276"], [479, "index-277"], [479, "index-278"], [479, "index-279"], [479, "index-28"], [479, "index-280"], [479, "index-281"], [479, "index-282"], [479, "index-283"], [479, "index-286"], [479, "index-287"], [479, "index-288"], [479, "index-289"], [479, "index-29"], [479, "index-290"], [479, "index-291"], [479, "index-292"], [479, "index-293"], [479, "index-294"], [479, "index-295"], [479, "index-296"], [479, "index-297"], [479, "index-298"], [479, "index-299"], [479, "index-3"], [479, "index-30"], [479, "index-300"], [479, "index-301"], [479, "index-302"], [479, "index-303"], [479, "index-34"], [479, "index-35"], [479, "index-36"], [479, "index-37"], [479, "index-39"], [479, "index-4"], [479, "index-40"], [479, "index-43"], [479, "index-44"], [479, "index-45"], [479, "index-46"], [479, "index-47"], [479, "index-5"], [479, "index-50"], [479, "index-51"], [479, "index-54"], [479, "index-55"], [479, "index-56"], [479, "index-57"], [479, "index-58"], [479, "index-59"], [479, "index-6"], [479, "index-60"], [479, "index-61"], [479, "index-63"], [479, "index-64"], [479, "index-65"], [479, "index-66"], [479, "index-67"], [479, "index-68"], [479, "index-69"], [479, "index-7"], [479, "index-70"], [479, "index-71"], [479, "index-72"], [479, "index-73"], [479, "index-75"], [479, "index-76"], [479, "index-78"], [479, "index-79"], [479, "index-8"], [479, "index-80"], [479, "index-81"], [479, "index-82"], [479, "index-84"], [479, "index-87"], [479, "index-88"], [479, "index-89"], [479, "index-9"], [479, "index-91"], [479, "index-94"], [479, "index-95"], [479, "index-96"], [479, "index-97"], [479, "index-98"], [479, "index-99"], [480, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeevent (c type)": [[13, "c.PyCodeEvent"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addwatcher (c function)": [[13, "c.PyCode_AddWatcher"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_addr2location (c function)": [[13, "c.PyCode_Addr2Location"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_clearwatcher (c function)": [[13, "c.PyCode_ClearWatcher"]], "pycode_getcellvars (c function)": [[13, "c.PyCode_GetCellvars"]], "pycode_getcode (c function)": [[13, "c.PyCode_GetCode"]], "pycode_getfreevars (c function)": [[13, "c.PyCode_GetFreevars"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_getvarnames (c function)": [[13, "c.PyCode_GetVarnames"]], "pycode_new": [[13, "index-1"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs": [[13, "index-2"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "pycode_watchcallback (c type)": [[13, "c.PyCode_WatchCallback"]], "pyunstable_code_getextra (c function)": [[13, "c.PyUnstable_Code_GetExtra"]], "pyunstable_code_new (c function)": [[13, "c.PyUnstable_Code_New"]], "pyunstable_code_newwithposonlyargs (c function)": [[13, "c.PyUnstable_Code_NewWithPosOnlyArgs"]], "pyunstable_code_setextra (c function)": [[13, "c.PyUnstable_Code_SetExtra"]], "pyunstable_eval_requestcodeextraindex (c function)": [[13, "c.PyUnstable_Eval_RequestCodeExtraIndex"]], "_pycode_getextra": [[13, "index-4"]], "_pycode_setextra": [[13, "index-5"]], "_pyeval_requestcodeextraindex": [[13, "index-3"]], "code object\uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\uff09": [[13, "index-0"], [271, "index-1"], [341, "index-62"], [424, "index-55"]], "code\uff08\u7a0b\u5f0f\u78bc\uff09": [[13, "index-0"], [271, "index-1"], [341, "index-62"], [424, "index-55"], [425, "index-0"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number\uff08\u8907\u6578\uff09": [[15, "index-0"], [86, "term-complex-number"], [341, "index-11"], [341, "index-12"]], "mapping\uff08\u5c0d\u6620\uff09": [[16, "index-2"], [86, "term-mapping"], [341, "index-52"], [424, "index-29"], [424, "index-51"], [426, "index-42"], [432, "index-11"]], "numeric\uff08\u6578\u503c\uff09": [[16, "index-0"], [341, "index-11"], [341, "index-12"], [341, "index-14"], [341, "index-15"], [341, "index-8"], [424, "index-51"], [424, "index-9"]], "sequence\uff08\u5e8f\u5217\uff09": [[16, "index-1"], [86, "term-sequence"], [341, "index-18"], [341, "index-19"], [341, "index-20"], [341, "index-22"], [341, "index-23"], [341, "index-24"], [423, "index-6"], [424, "index-15"], [424, "index-51"], [426, "index-42"], [426, "index-45"], [426, "index-80"], [432, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_addwatcher (c function)": [[22, "c.PyDict_AddWatcher"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_clearwatcher (c function)": [[22, "c.PyDict_ClearWatcher"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_unwatch (c function)": [[22, "c.PyDict_Unwatch"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pydict_watch (c function)": [[22, "c.PyDict_Watch"]], "pydict_watchcallback (c type)": [[22, "c.PyDict_WatchCallback"]], "pydict_watchevent (c type)": [[22, "c.PyDict_WatchEvent"]], "pyunicode_fromstring()": [[22, "index-1"]], "built-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[22, "index-2"], [30, "index-1"], [30, "index-2"], [37, "index-1"], [37, "index-2"], [39, "index-0"], [46, "index-0"], [46, "index-1"], [46, "index-2"], [46, "index-3"], [46, "index-4"], [46, "index-5"], [54, "index-1"], [57, "index-0"], [57, "index-1"], [62, "index-1"], [62, "index-2"], [74, "index-3"], [188, "index-1"], [222, "index-2"], [304, "index-1"], [304, "index-2"], [341, "index-13"], [341, "index-20"], [341, "index-22"], [341, "index-52"], [341, "index-63"], [341, "index-64"], [341, "index-65"], [381, "index-4"], [423, "index-8"], [424, "index-1"], [424, "index-100"], [424, "index-101"], [424, "index-102"], [424, "index-15"], [424, "index-19"], [424, "index-26"], [424, "index-29"], [424, "index-40"], [424, "index-53"], [424, "index-66"], [424, "index-74"], [424, "index-75"], [424, "index-77"], [424, "index-83"], [424, "index-95"], [424, "index-97"], [424, "index-98"], [424, "index-99"], [426, "index-53"], [432, "index-3"], [432, "index-44"], [433, "index-6"], [442, "index-0"], [447, "index-0"]], "dictionary\uff08\u5b57\u5178\uff09": [[22, "index-0"], [86, "term-dictionary"], [341, "index-52"], [424, "index-30"], [424, "index-45"], [424, "index-77"], [426, "index-17"], [426, "index-18"], [426, "index-42"], [432, "index-11"]], "len": [[22, "index-2"], [37, "index-1"], [39, "index-0"], [48, "index-8"], [53, "index-0"], [54, "index-1"], [341, "index-20"], [341, "index-52"], [424, "index-15"], [424, "index-26"], [424, "index-29"], [424, "index-95"]], "keyboardinterrupt\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [210, "index-8"], [319, "index-0"], [325, "index-0"], [334, "index-2"], [472, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"]], "pyerr_displayexception (c function)": [[23, "c.PyErr_DisplayException"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_gethandledexception (c function)": [[23, "c.PyErr_GetHandledException"]], "pyerr_getraisedexception (c function)": [[23, "c.PyErr_GetRaisedException"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_sethandledexception (c function)": [[23, "c.PyErr_SetHandledException"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setraisedexception (c function)": [[23, "c.PyErr_SetRaisedException"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror": [[23, "index-4"]], "pyexc_assertionerror": [[23, "index-4"]], "pyexc_attributeerror": [[23, "index-4"]], "pyexc_baseexception": [[23, "index-4"]], "pyexc_blockingioerror": [[23, "index-4"]], "pyexc_brokenpipeerror": [[23, "index-4"]], "pyexc_buffererror": [[23, "index-4"]], "pyexc_byteswarning": [[23, "index-7"]], "pyexc_childprocesserror": [[23, "index-4"]], "pyexc_connectionabortederror": [[23, "index-4"]], "pyexc_connectionerror": [[23, "index-4"]], "pyexc_connectionrefusederror": [[23, "index-4"]], "pyexc_connectionreseterror": [[23, "index-4"]], "pyexc_deprecationwarning": [[23, "index-7"]], "pyexc_eoferror": [[23, "index-4"]], "pyexc_environmenterror": [[23, "index-6"]], "pyexc_exception": [[23, "index-4"]], "pyexc_fileexistserror": [[23, "index-4"]], "pyexc_filenotfounderror": [[23, "index-4"]], "pyexc_floatingpointerror": [[23, "index-4"]], "pyexc_futurewarning": [[23, "index-7"]], "pyexc_generatorexit": [[23, "index-4"]], "pyexc_ioerror": [[23, "index-6"]], "pyexc_importerror": [[23, "index-4"]], "pyexc_importwarning": [[23, "index-7"]], "pyexc_indentationerror": [[23, "index-4"]], "pyexc_indexerror": [[23, "index-4"]], "pyexc_interruptederror": [[23, "index-4"]], "pyexc_isadirectoryerror": [[23, "index-4"]], "pyexc_keyerror": [[23, "index-4"]], "pyexc_keyboardinterrupt": [[23, "index-4"]], "pyexc_lookuperror": [[23, "index-4"]], "pyexc_memoryerror": [[23, "index-4"]], "pyexc_modulenotfounderror": [[23, "index-4"]], "pyexc_nameerror": [[23, "index-4"]], "pyexc_notadirectoryerror": [[23, "index-4"]], "pyexc_notimplementederror": [[23, "index-4"]], "pyexc_oserror": [[23, "index-4"]], "pyexc_overflowerror": [[23, "index-4"]], "pyexc_pendingdeprecationwarning": [[23, "index-7"]], "pyexc_permissionerror": [[23, "index-4"]], "pyexc_processlookuperror": [[23, "index-4"]], "pyexc_recursionerror": [[23, "index-4"]], "pyexc_referenceerror": [[23, "index-4"]], "pyexc_resourcewarning": [[23, "index-7"]], "pyexc_runtimeerror": [[23, "index-4"]], "pyexc_runtimewarning": [[23, "index-7"]], "pyexc_stopasynciteration": [[23, "index-4"]], "pyexc_stopiteration": [[23, "index-4"]], "pyexc_syntaxerror": [[23, "index-4"]], "pyexc_syntaxwarning": [[23, "index-7"]], "pyexc_systemerror": [[23, "index-4"]], "pyexc_systemexit": [[23, "index-4"]], "pyexc_taberror": [[23, "index-4"]], "pyexc_timeouterror": [[23, "index-4"]], "pyexc_typeerror": [[23, "index-4"]], "pyexc_unboundlocalerror": [[23, "index-4"]], "pyexc_unicodedecodeerror": [[23, "index-4"]], "pyexc_unicodeencodeerror": [[23, "index-4"]], "pyexc_unicodeerror": [[23, "index-4"]], "pyexc_unicodetranslateerror": [[23, "index-4"]], "pyexc_unicodewarning": [[23, "index-7"]], "pyexc_userwarning": [[23, "index-7"]], "pyexc_valueerror": [[23, "index-4"]], "pyexc_warning": [[23, "index-7"]], "pyexc_windowserror": [[23, "index-6"]], "pyexc_zerodivisionerror": [[23, "index-4"]], "pyexception_getargs (c function)": [[23, "c.PyException_GetArgs"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setargs (c function)": [[23, "c.PyException_SetArgs"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "pyunstable_exc_prepreraisestar (c function)": [[23, "c.PyUnstable_Exc_PrepReraiseStar"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint": [[23, "index-1"], [23, "index-2"]], "module\uff08\u6a21\u7d44\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [34, "index-18"], [44, "index-0"], [86, "term-module"], [113, "index-2"], [144, "index-0"], [152, "index-1"], [168, "index-0"], [169, "index-0"], [210, "index-4"], [217, "index-1"], [217, "index-3"], [222, "index-13"], [222, "index-8"], [239, "index-1"], [253, "index-1"], [262, "index-0"], [263, "index-0"], [263, "index-6"], [271, "index-0"], [290, "index-23"], [290, "index-30"], [291, "index-2"], [294, "index-1"], [303, "index-0"], [307, "index-0"], [311, "index-1"], [321, "index-0"], [321, "index-4"], [327, "index-0"], [327, "index-1"], [331, "index-0"], [331, "index-5"], [331, "index-6"], [334, "index-14"], [349, "index-21"], [423, "index-11"], [424, "index-25"], [424, "index-31"], [424, "index-4"], [424, "index-42"], [424, "index-43"], [424, "index-53"], [425, "index-10"], [426, "index-40"], [432, "index-34"], [433, "index-2"], [433, "index-3"], [442, "index-1"], [446, "index-0"], [446, "index-4"], [446, "index-7"]], "signal\uff08\u8a0a\u865f\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [113, "index-2"]], "strerror()": [[23, "index-0"]], "eoferror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw": [[24, "index-2"]], "file\uff08\u6a94\u6848\uff09": [[24, "index-0"], [164, "index-0"], [222, "index-6"], [273, "index-2"], [294, "index-2"], [301, "index-0"], [303, "index-1"], [308, "index-0"], [329, "index-0"], [331, "index-4"], [356, "index-0"], [442, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_pack2 (c function)": [[25, "c.PyFloat_Pack2"]], "pyfloat_pack4 (c function)": [[25, "c.PyFloat_Pack4"]], "pyfloat_pack8 (c function)": [[25, "c.PyFloat_Pack8"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "pyfloat_unpack2 (c function)": [[25, "c.PyFloat_Unpack2"]], "pyfloat_unpack4 (c function)": [[25, "c.PyFloat_Unpack4"]], "pyfloat_unpack8 (c function)": [[25, "c.PyFloat_Unpack8"]], "floating point\uff08\u6d6e\u9ede\uff09": [[25, "index-0"], [424, "index-13"]], "pep 523": [[26, "index-0"], [32, "index-39"], [32, "index-40"], [469, "index-120"], [470, "index-39"], [475, "index-25"], [475, "index-26"], [478, "index-24"], [479, "index-252"], [479, "index-257"], [479, "index-265"], [479, "index-4"]], "pyframeobject (c type)": [[26, "c.PyFrameObject"]], "pyframe_check (c function)": [[26, "c.PyFrame_Check"]], "pyframe_getback (c function)": [[26, "c.PyFrame_GetBack"]], "pyframe_getbuiltins (c function)": [[26, "c.PyFrame_GetBuiltins"]], "pyframe_getcode (c function)": [[26, "c.PyFrame_GetCode"]], "pyframe_getgenerator (c function)": [[26, "c.PyFrame_GetGenerator"]], "pyframe_getglobals (c function)": [[26, "c.PyFrame_GetGlobals"]], "pyframe_getlasti (c function)": [[26, "c.PyFrame_GetLasti"]], "pyframe_getlinenumber (c function)": [[26, "c.PyFrame_GetLineNumber"]], "pyframe_getlocals (c function)": [[26, "c.PyFrame_GetLocals"]], "pyframe_getvar (c function)": [[26, "c.PyFrame_GetVar"]], "pyframe_getvarstring (c function)": [[26, "c.PyFrame_GetVarString"]], "pyframe_type (c var)": [[26, "c.PyFrame_Type"]], "pyunstable_interpreterframe_getcode (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetCode"]], "pyunstable_interpreterframe_getlasti (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLasti"]], "pyunstable_interpreterframe_getline (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLine"]], "_pyinterpreterframe (c struct)": [[26, "c._PyInterpreterFrame"]], "methodtype\uff08types \u6a21\u7d44\u4e2d\uff09": [[27, "index-1"], [43, "index-2"], [44, "index-1"]], "pyfunctionobject (c type)": [[27, "c.PyFunctionObject"]], "pyfunction_addwatcher (c function)": [[27, "c.PyFunction_AddWatcher"]], "pyfunction_check (c function)": [[27, "c.PyFunction_Check"]], "pyfunction_clearwatcher (c function)": [[27, "c.PyFunction_ClearWatcher"]], "pyfunction_getannotations (c function)": [[27, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[27, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[27, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[27, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[27, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[27, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[27, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[27, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[27, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[27, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[27, "c.PyFunction_SetDefaults"]], "pyfunction_setvectorcall (c function)": [[27, "c.PyFunction_SetVectorcall"]], "pyfunction_type (c var)": [[27, "c.PyFunction_Type"]], "pyfunction_watchcallback (c type)": [[27, "c.PyFunction_WatchCallback"]], "pyfunction_watchevent (c type)": [[27, "c.PyFunction_WatchEvent"]], "function\uff08\u51fd\u5f0f\uff09": [[27, "index-0"], [86, "term-function"], [437, "index-6"]], "pygc_collect (c function)": [[28, "c.PyGC_Collect"]], "pygc_disable (c function)": [[28, "c.PyGC_Disable"]], "pygc_enable (c function)": [[28, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[28, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[28, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[28, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[28, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c macro)": [[28, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c macro)": [[28, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c function)": [[28, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[28, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[28, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[28, "c.PyObject_IS_GC"]], "pyunstable_gc_visitobjects (c function)": [[28, "c.PyUnstable_GC_VisitObjects"]], "pyunstable_object_gc_newwithextradata (c function)": [[28, "c.PyUnstable_Object_GC_NewWithExtraData"]], "py_visit (c function)": [[28, "c.Py_VISIT"]], "gcvisitobjects_t (c type)": [[28, "c.gcvisitobjects_t"]], "inquiry (c type)": [[28, "c.inquiry"]], "traverseproc (c type)": [[28, "c.traverseproc"]], "visitproc (c type)": [[28, "c.visitproc"]], "pygenobject (c type)": [[29, "c.PyGenObject"]], "pygen_check (c function)": [[29, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[29, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[29, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[29, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[29, "c.PyGen_Type"]], "pep 3147": [[30, "index-3"], [84, "index-3"], [160, "index-0"], [160, "index-2"], [160, "index-3"], [247, "index-11"], [247, "index-21"], [247, "index-23"], [247, "index-24"], [308, "index-1"], [308, "index-4"], [321, "index-2"], [358, "index-3"], [428, "index-13"], [446, "index-16"], [471, "index-5"], [472, "index-18"]], "pyimport_addmodule (c function)": [[30, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[30, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[30, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[30, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[30, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[30, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[30, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[30, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[30, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[30, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[30, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[30, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[30, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[30, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[30, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[30, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[30, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[30, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[30, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[30, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[30, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[30, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[30, "c.PyImport_ReloadModule"]], "__all__": [[30, "index-0"], [446, "index-8"]], "__all__\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[30, "index-0"]], "__import__": [[30, "index-1"]], "_frozen (c struct)": [[30, "c._frozen"]], "_inittab (c struct)": [[30, "c._inittab"]], "_inittab.name (c member)": [[30, "c._inittab.name"]], "compile\uff08\u7de8\u8b6f\uff09": [[30, "index-2"], [341, "index-63"], [381, "index-4"], [432, "index-44"]], "freeze utility\uff08\u51cd\u7d50\u5de5\u5177\uff09": [[30, "index-4"]], "modules\uff08sys \u6a21\u7d44\u4e2d\uff09": [[30, "index-0"], [32, "index-15"]], "package variable\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[30, "index-0"]], "pep 489": [[32, "index-41"], [44, "index-8"], [70, "index-1"], [72, "index-0"], [247, "index-17"], [247, "index-18"], [247, "index-19"], [247, "index-20"], [247, "index-26"], [247, "index-8"], [474, "index-26"], [474, "index-28"], [474, "index-45"], [479, "index-111"], [479, "index-112"], [479, "index-114"], [479, "index-117"], [479, "index-119"], [479, "index-120"], [479, "index-121"], [479, "index-122"], [479, "index-123"], [479, "index-124"], [479, "index-125"], [479, "index-126"], [479, "index-127"], [479, "index-128"], [479, "index-129"], [479, "index-130"], [479, "index-131"], [479, "index-132"], [479, "index-134"], [479, "index-139"], [479, "index-140"], [479, "index-141"], [479, "index-142"], [479, "index-143"], [479, "index-144"], [479, "index-145"], [479, "index-146"], [479, "index-147"], [479, "index-148"], [479, "index-149"], [479, "index-153"], [479, "index-154"], [479, "index-155"], [479, "index-159"], [479, "index-160"], [479, "index-161"], [479, "index-165"], [479, "index-166"], [479, "index-167"], [479, "index-168"], [479, "index-169"], [479, "index-177"], [479, "index-178"], [479, "index-179"], [479, "index-182"], [479, "index-184"], [479, "index-186"], [479, "index-193"], [479, "index-194"], [479, "index-195"], [479, "index-196"], [479, "index-197"], [479, "index-202"], [479, "index-27"]], "pep 528": [[32, "index-67"], [33, "index-17"], [457, "index-16"], [475, "index-22"]], "pep 529": [[32, "index-66"], [63, "index-5"], [290, "index-27"], [349, "index-44"], [349, "index-9"], [451, "index-54"], [457, "index-17"], [475, "index-20"], [477, "index-19"], [479, "index-206"], [479, "index-259"], [479, "index-61"]], "pep 539": [[32, "index-49"], [476, "index-14"], [476, "index-15"], [479, "index-246"]], "pep 554": [[32, "index-47"], [470, "index-10"]], "pythondebug": [[32, "index-61"], [33, "index-22"], [451, "envvar-PYTHONDEBUG"], [451, "index-4"], [452, "index-6"]], "pythondontwritebytecode": [[32, "index-62"], [33, "index-32"], [84, "index-4"], [349, "index-6"], [451, "envvar-PYTHONDONTWRITEBYTECODE"], [451, "index-3"], [464, "index-20"], [464, "index-24"]], "pythonhashseed": [[32, "index-3"], [32, "index-63"], [33, "index-11"], [424, "index-111"], [451, "envvar-PYTHONHASHSEED"], [451, "index-17"], [451, "index-18"], [451, "index-39"], [472, "index-23"], [472, "index-35"], [479, "index-235"]], "pythonhome": [[32, "index-30"], [32, "index-31"], [32, "index-5"], [33, "index-12"], [34, "index-43"], [34, "index-45"], [108, "index-0"], [108, "index-1"], [350, "index-2"], [350, "index-4"], [358, "index-0"], [451, "envvar-PYTHONHOME"], [451, "index-32"], [451, "index-33"], [451, "index-36"], [451, "index-7"], [457, "index-33"], [457, "index-35"], [457, "index-37"], [475, "index-2"]], "pythoninspect": [[32, "index-64"], [33, "index-14"], [451, "envvar-PYTHONINSPECT"], [451, "index-9"], [461, "index-29"]], "pythonioencoding": [[32, "index-17"], [32, "index-18"], [33, "index-26"], [290, "index-1"], [349, "index-35"], [451, "envvar-PYTHONIOENCODING"], [451, "index-45"], [464, "index-21"], [473, "index-54"]], "pythonlegacywindowsfsencoding": [[32, "index-65"], [33, "index-1"], [349, "index-33"], [451, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [475, "index-19"]], "pythonlegacywindowsstdio": [[32, "index-9"], [33, "index-16"], [349, "index-37"], [451, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [451, "index-40"], [475, "index-21"]], "pythonnousersite": [[32, "index-68"], [33, "index-29"], [331, "index-8"], [451, "envvar-PYTHONNOUSERSITE"], [464, "index-6"]], "pythonoptimize": [[32, "index-69"], [33, "index-21"], [451, "envvar-PYTHONOPTIMIZE"], [451, "index-12"]], "pythonpath": [[32, "index-4"], [33, "index-20"], [34, "index-44"], [34, "index-46"], [70, "index-0"], [108, "index-2"], [108, "index-3"], [149, "index-4"], [349, "index-22"], [349, "index-23"], [350, "index-0"], [350, "index-1"], [358, "index-1"], [428, "index-17"], [446, "index-14"], [446, "index-17"], [446, "index-18"], [451, "envvar-PYTHONPATH"], [451, "index-35"], [451, "index-37"], [451, "index-38"], [451, "index-6"], [455, "index-2"], [457, "index-11"], [457, "index-32"], [457, "index-34"], [457, "index-36"], [473, "index-56"], [473, "index-57"]], "pythonunbuffered": [[32, "index-70"], [33, "index-5"], [349, "index-38"], [451, "envvar-PYTHONUNBUFFERED"], [451, "index-52"], [479, "index-203"]], "pythonverbose": [[32, "index-71"], [33, "index-30"], [451, "envvar-PYTHONVERBOSE"], [451, "index-53"]], "pyeval_acquirelock (c function)": [[32, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[32, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[32, "index-37"]], "pyeval_initthreads (c function)": [[32, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[32, "index-15"]], "pyeval_releaselock (c function)": [[32, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[32, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[32, "index-37"]], "pyeval_restorethread (c function)": [[32, "c.PyEval_RestoreThread"]], "pyeval_restorethread()": [[32, "index-36"], [32, "index-37"]], "pyeval_savethread (c function)": [[32, "c.PyEval_SaveThread"]], "pyeval_savethread()": [[32, "index-36"], [32, "index-37"]], "pyeval_setprofile (c function)": [[32, "c.PyEval_SetProfile"]], "pyeval_setprofileallthreads (c function)": [[32, "c.PyEval_SetProfileAllThreads"]], "pyeval_settrace (c function)": [[32, "c.PyEval_SetTrace"]], "pyeval_settraceallthreads (c function)": [[32, "c.PyEval_SetTraceAllThreads"]], "pyeval_threadsinitialized (c function)": [[32, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[32, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[32, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[32, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[32, "c.PyGILState_Release"]], "pyinterpreterconfig (c type)": [[32, "c.PyInterpreterConfig"]], "pyinterpreterconfig.allow_daemon_threads (c member)": [[32, "c.PyInterpreterConfig.allow_daemon_threads"]], "pyinterpreterconfig.allow_exec (c member)": [[32, "c.PyInterpreterConfig.allow_exec"]], "pyinterpreterconfig.allow_fork (c member)": [[32, "c.PyInterpreterConfig.allow_fork"]], "pyinterpreterconfig.allow_threads (c member)": [[32, "c.PyInterpreterConfig.allow_threads"]], "pyinterpreterconfig.check_multi_interp_extensions (c member)": [[32, "c.PyInterpreterConfig.check_multi_interp_extensions"]], "pyinterpreterconfig.gil (c member)": [[32, "c.PyInterpreterConfig.gil"]], "pyinterpreterconfig.use_main_obmalloc (c member)": [[32, "c.PyInterpreterConfig.use_main_obmalloc"]], "pyinterpreterconfig_default_gil (c macro)": [[32, "c.PyInterpreterConfig_DEFAULT_GIL"]], "pyinterpreterconfig_own_gil (c macro)": [[32, "c.PyInterpreterConfig_OWN_GIL"]], "pyinterpreterconfig_shared_gil (c macro)": [[32, "c.PyInterpreterConfig_SHARED_GIL"]], "pyinterpreterstate (c type)": [[32, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[32, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[32, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[32, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[32, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[32, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[32, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[32, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[32, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[32, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[32, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[32, "c.PySys_SetArgv"]], "pysys_setargv()": [[32, "index-15"]], "pysys_setargvex (c function)": [[32, "c.PySys_SetArgvEx"]], "pysys_setargvex()": [[32, "index-15"]], "pythreadstate": [[32, "index-34"]], "pythreadstate (c type)": [[32, "c.PyThreadState"]], "pythreadstate.interp (c member)": [[32, "c.PyThreadState.interp"]], "pythreadstate_clear (c function)": [[32, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[32, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[32, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_entertracing (c function)": [[32, "c.PyThreadState_EnterTracing"]], "pythreadstate_get (c function)": [[32, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[32, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[32, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[32, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[32, "c.PyThreadState_GetInterpreter"]], "pythreadstate_leavetracing (c function)": [[32, "c.PyThreadState_LeaveTracing"]], "pythreadstate_new (c function)": [[32, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[32, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[32, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[32, "c.PyThreadState_Swap"]], "pythread_reinittls (c function)": [[32, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[32, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[32, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[32, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[32, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[32, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[32, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[32, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[32, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[32, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[32, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[32, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[32, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[32, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[32, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[32, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[32, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[32, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[32, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[32, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[32, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[32, "c.Py_AddPendingCall"]], "py_addpendingcall()": [[32, "index-48"]], "py_begin_allow_threads": [[32, "index-35"]], "py_begin_allow_threads (c macro)": [[32, "c.Py_BEGIN_ALLOW_THREADS"]], "py_block_threads (c macro)": [[32, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[32, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[32, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[32, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads": [[32, "index-35"]], "py_end_allow_threads (c macro)": [[32, "c.Py_END_ALLOW_THREADS"]], "py_endinterpreter (c function)": [[32, "c.Py_EndInterpreter"]], "py_fatalerror()": [[32, "index-29"]], "py_finalize (c function)": [[32, "c.Py_Finalize"]], "py_finalizeex (c function)": [[32, "c.Py_FinalizeEx"]], "py_finalizeex()": [[32, "index-15"], [32, "index-43"], [32, "index-46"], [58, "index-2"], [58, "index-3"]], "py_frozenflag (c var)": [[32, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[32, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[32, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[32, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[32, "c.Py_GetExecPrefix"]], "py_getpath (c function)": [[32, "c.Py_GetPath"]], "py_getpath()": [[32, "index-19"], [32, "index-23"], [34, "index-23"]], "py_getplatform (c function)": [[32, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[32, "c.Py_GetPrefix"]], "py_getprogramfullpath (c function)": [[32, "c.Py_GetProgramFullPath"]], "py_getprogramname (c function)": [[32, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[32, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[32, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[32, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[32, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[32, "c.Py_Initialize"]], "py_initialize()": [[32, "index-16"], [32, "index-19"], [32, "index-43"], [34, "index-18"]], "py_initializeex (c function)": [[32, "c.Py_InitializeEx"]], "py_inspectflag (c var)": [[32, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[32, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[32, "c.Py_IsInitialized"]], "py_isolatedflag (c var)": [[32, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[32, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[32, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[32, "c.Py_NewInterpreter"]], "py_newinterpreterfromconfig (c function)": [[32, "c.Py_NewInterpreterFromConfig"]], "py_nositeflag (c var)": [[32, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[32, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[32, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[32, "c.Py_QuietFlag"]], "py_setpath (c function)": [[32, "c.Py_SetPath"]], "py_setpath()": [[32, "index-22"]], "py_setprogramname (c function)": [[32, "c.Py_SetProgramName"]], "py_setprogramname()": [[32, "index-15"], [32, "index-20"], [32, "index-21"], [34, "index-23"]], "py_setpythonhome (c function)": [[32, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[32, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[32, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[32, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[32, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[32, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[32, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[32, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[32, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[32, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[32, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [112, "module-__main__"], [321, "index-0"], [321, "index-4"], [425, "index-10"], [433, "index-2"], [433, "index-3"]], "_thread": [[32, "index-38"], [113, "module-_thread"]], "argv\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-29"]], "builtins\uff08\u5167\u5efa\uff09": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [222, "index-13"], [433, "index-2"], [446, "index-7"]], "close()\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-44"]], "copyright\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-26"]], "executable\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-21"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[32, "index-32"], [86, "term-global-interpreter-lock"]], "interpreter lock\uff08\u76f4\u8b6f\u5668\u9396\uff09": [[32, "index-32"]], "lock, interpreter\uff08\u9396\u3001\u76f4\u8b6f\u5668\uff09": [[32, "index-32"]], "main()": [[32, "index-16"], [32, "index-19"], [32, "index-29"]], "path\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"]], "path\uff08\u8def\u5f91\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"], [262, "index-0"], [291, "index-0"], [293, "index-0"], [331, "index-0"], [331, "index-4"], [349, "index-21"], [428, "index-9"], [446, "index-0"]], "platform\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-25"]], "sdterr": [[32, "index-16"]], "search\uff08\u641c\u5c0b\uff09": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [34, "index-18"], [262, "index-0"], [331, "index-0"], [349, "index-21"], [446, "index-0"]], "setswitchinterval() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-33"]], "stderr\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "stdin": [[32, "index-16"]], "stdin\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "stdout": [[32, "index-16"]], "stdout\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-42"], [32, "index-45"]], "sys": [[32, "index-15"], [32, "index-42"], [32, "index-45"], [34, "index-18"], [222, "index-8"], [349, "module-sys"], [423, "index-11"], [433, "index-2"], [446, "index-4"]], "version\uff08sys \u6a21\u7d44\u4e2d\uff09": [[32, "index-24"], [32, "index-27"], [32, "index-28"]], "\u6a21\u7d44": [[32, "index-15"], [32, "index-22"], [32, "index-23"], [32, "index-38"], [32, "index-42"], [32, "index-45"], [341, "index-15"], [341, "index-33"], [341, "index-40"], [341, "index-65"]], "\u74b0\u5883\u8b8a\u6578": [[32, "index-17"], [32, "index-18"], [32, "index-3"], [32, "index-30"], [32, "index-31"], [32, "index-4"], [32, "index-5"], [32, "index-61"], [32, "index-62"], [32, "index-63"], [32, "index-64"], [32, "index-65"], [32, "index-68"], [32, "index-69"], [32, "index-70"], [32, "index-71"], [32, "index-9"], [33, "index-1"], [33, "index-10"], [33, "index-11"], [33, "index-12"], [33, "index-13"], [33, "index-14"], [33, "index-15"], [33, "index-16"], [33, "index-18"], [33, "index-19"], [33, "index-2"], [33, "index-20"], [33, "index-21"], [33, "index-22"], [33, "index-23"], [33, "index-24"], [33, "index-25"], [33, "index-26"], [33, "index-27"], [33, "index-28"], [33, "index-29"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-32"], [33, "index-35"], [33, "index-36"], [33, "index-4"], [33, "index-5"], [33, "index-6"], [33, "index-8"], [33, "index-9"], [34, "index-41"], [34, "index-42"], [34, "index-43"], [34, "index-44"], [34, "index-45"], [34, "index-46"], [41, "index-1"], [41, "index-2"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [62, "index-0"], [70, "index-0"], [80, "index-4"], [80, "index-5"], [83, "index-0"], [83, "index-1"], [84, "index-4"], [101, "index-0"], [107, "index-3"], [108, "index-0"], [108, "index-1"], [108, "index-10"], [108, "index-2"], [108, "index-3"], [108, "index-4"], [108, "index-5"], [108, "index-6"], [108, "index-7"], [108, "index-8"], [108, "index-9"], [123, "index-2"], [124, "index-5"], [149, "index-3"], [149, "index-4"], [149, "index-6"], [160, "index-1"], [174, "index-0"], [174, "index-1"], [174, "index-2"], [174, "index-3"], [174, "index-4"], [174, "index-5"], [174, "index-6"], [185, "index-0"], [185, "index-1"], [185, "index-2"], [185, "index-3"], [185, "index-4"], [185, "index-5"], [211, "index-0"], [222, "index-1"], [222, "index-16"], [225, "index-0"], [226, "index-10"], [226, "index-11"], [226, "index-8"], [226, "index-9"], [227, "index-0"], [227, "index-1"], [227, "index-2"], [227, "index-3"], [227, "index-5"], [227, "index-6"], [227, "index-7"], [227, "index-8"], [244, "index-5"], [244, "index-6"], [255, "index-9"], [263, "index-1"], [263, "index-2"], [263, "index-3"], [290, "index-1"], [290, "index-10"], [290, "index-11"], [290, "index-2"], [290, "index-3"], [290, "index-33"], [290, "index-34"], [290, "index-35"], [290, "index-36"], [290, "index-39"], [290, "index-4"], [290, "index-40"], [290, "index-41"], [290, "index-42"], [290, "index-43"], [290, "index-52"], [291, "index-16"], [291, "index-17"], [291, "index-18"], [291, "index-19"], [291, "index-20"], [291, "index-21"], [292, "index-1"], [292, "index-2"], [308, "index-3"], [308, "index-6"], [308, "index-7"], [310, "index-1"], [310, "index-2"], [317, "index-0"], [324, "index-2"], [331, "index-10"], [331, "index-3"], [331, "index-7"], [331, "index-8"], [331, "index-9"], [338, "index-3"], [338, "index-4"], [341, "index-67"], [341, "index-68"], [345, "index-2"], [345, "index-3"], [345, "index-4"], [349, "index-17"], [349, "index-18"], [349, "index-22"], [349, "index-23"], [349, "index-24"], [349, "index-3"], [349, "index-33"], [349, "index-35"], [349, "index-36"], [349, "index-37"], [349, "index-38"], [349, "index-4"], [349, "index-5"], [349, "index-6"], [349, "index-7"], [350, "index-0"], [350, "index-1"], [350, "index-2"], [350, "index-3"], [350, "index-4"], [356, "index-7"], [356, "index-8"], [356, "index-9"], [358, "index-0"], [358, "index-1"], [358, "index-2"], [362, "index-13"], [362, "index-14"], [362, "index-15"], [362, "index-16"], [362, "index-17"], [362, "index-18"], [365, "index-0"], [365, "index-1"], [378, "index-0"], [378, "index-1"], [378, "index-2"], [391, "index-18"], [391, "index-4"], [391, "index-9"], [395, "index-2"], [395, "index-3"], [395, "index-4"], [396, "index-1"], [396, "index-2"], [396, "index-3"], [396, "index-4"], [396, "index-5"], [399, "index-0"], [399, "index-1"], [399, "index-2"], [399, "index-3"], [406, "index-0"], [421, "envvar-PYTHONTZPATH"], [421, "index-2"], [424, "index-111"], [424, "index-59"], [434, "index-4"], [434, "index-5"], [446, "index-14"], [446, "index-15"], [446, "index-17"], [446, "index-18"], [451, "envvar-PYTHONASYNCIODEBUG"], [451, "envvar-PYTHONBREAKPOINT"], [451, "envvar-PYTHONCASEOK"], [451, "envvar-PYTHONCOERCECLOCALE"], [451, "envvar-PYTHONDEBUG"], [451, "envvar-PYTHONDEVMODE"], [451, "envvar-PYTHONDONTWRITEBYTECODE"], [451, "envvar-PYTHONDUMPREFS"], [451, "envvar-PYTHONDUMPREFSFILE-FILENAME"], [451, "envvar-PYTHONEXECUTABLE"], [451, "envvar-PYTHONFAULTHANDLER"], [451, "envvar-PYTHONHASHSEED"], [451, "envvar-PYTHONHOME"], [451, "envvar-PYTHONINSPECT"], [451, "envvar-PYTHONINTMAXSTRDIGITS"], [451, "envvar-PYTHONIOENCODING"], [451, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [451, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [451, "envvar-PYTHONMALLOC"], [451, "envvar-PYTHONMALLOCSTATS"], [451, "envvar-PYTHONNODEBUGRANGES"], [451, "envvar-PYTHONNOUSERSITE"], [451, "envvar-PYTHONOPTIMIZE"], [451, "envvar-PYTHONPATH"], [451, "envvar-PYTHONPERFSUPPORT"], [451, "envvar-PYTHONPLATLIBDIR"], [451, "envvar-PYTHONPROFILEIMPORTTIME"], [451, "envvar-PYTHONPYCACHEPREFIX"], [451, "envvar-PYTHONSAFEPATH"], [451, "envvar-PYTHONSTARTUP"], [451, "envvar-PYTHONTRACEMALLOC"], [451, "envvar-PYTHONUNBUFFERED"], [451, "envvar-PYTHONUSERBASE"], [451, "envvar-PYTHONUTF8"], [451, "envvar-PYTHONVERBOSE"], [451, "envvar-PYTHONWARNDEFAULTENCODING"], [451, "envvar-PYTHONWARNINGS"], [451, "index-0"], [451, "index-10"], [451, "index-12"], [451, "index-16"], [451, "index-17"], [451, "index-18"], [451, "index-2"], [451, "index-22"], [451, "index-23"], [451, "index-24"], [451, "index-25"], [451, "index-26"], [451, "index-27"], [451, "index-28"], [451, "index-29"], [451, "index-3"], [451, "index-30"], [451, "index-31"], [451, "index-32"], [451, "index-33"], [451, "index-34"], [451, "index-35"], [451, "index-36"], [451, "index-37"], [451, "index-38"], [451, "index-39"], [451, "index-4"], [451, "index-40"], [451, "index-43"], [451, "index-45"], [451, "index-46"], [451, "index-5"], [451, "index-52"], [451, "index-53"], [451, "index-6"], [451, "index-7"], [451, "index-8"], [451, "index-9"], [452, "envvar-BASECFLAGS"], [452, "envvar-BASECPPFLAGS"], [452, "envvar-BLDSHARED"], [452, "envvar-CC"], [452, "envvar-CCSHARED"], [452, "envvar-CFLAGS"], [452, "envvar-CFLAGSFORSHARED"], [452, "envvar-CFLAGS_ALIASING"], [452, "envvar-CFLAGS_NODIST"], [452, "envvar-COMPILEALL_OPTS"], [452, "envvar-CONFIGURE_CFLAGS"], [452, "envvar-CONFIGURE_CFLAGS_NODIST"], [452, "envvar-CONFIGURE_CPPFLAGS"], [452, "envvar-CONFIGURE_LDFLAGS"], [452, "envvar-CONFIGURE_LDFLAGS_NODIST"], [452, "envvar-CPPFLAGS"], [452, "envvar-CXX"], [452, "envvar-EXTRA_CFLAGS"], [452, "envvar-LDFLAGS"], [452, "envvar-LDFLAGS_NODIST"], [452, "envvar-LDSHARED"], [452, "envvar-LIBS"], [452, "envvar-LINKCC"], [452, "envvar-OPT"], [452, "envvar-PROFILE_TASK"], [452, "envvar-PURIFY"], [452, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [452, "envvar-PY_CFLAGS"], [452, "envvar-PY_CFLAGS_NODIST"], [452, "envvar-PY_CORE_CFLAGS"], [452, "envvar-PY_CORE_LDFLAGS"], [452, "envvar-PY_CPPFLAGS"], [452, "envvar-PY_LDFLAGS"], [452, "envvar-PY_LDFLAGS_NODIST"], [452, "envvar-PY_STDMODULE_CFLAGS"], [452, "index-10"], [452, "index-11"], [452, "index-12"], [452, "index-13"], [452, "index-14"], [452, "index-15"], [452, "index-16"], [452, "index-17"], [452, "index-18"], [452, "index-19"], [452, "index-20"], [452, "index-21"], [452, "index-22"], [452, "index-23"], [452, "index-24"], [452, "index-25"], [452, "index-26"], [452, "index-27"], [452, "index-28"], [452, "index-32"], [452, "index-34"], [452, "index-4"], [452, "index-6"], [452, "index-7"], [452, "index-8"], [452, "index-9"], [455, "index-2"], [456, "index-2"], [457, "index-10"], [457, "index-11"], [457, "index-12"], [457, "index-13"], [457, "index-14"], [457, "index-15"], [457, "index-18"], [457, "index-2"], [457, "index-20"], [457, "index-22"], [457, "index-23"], [457, "index-24"], [457, "index-25"], [457, "index-26"], [457, "index-27"], [457, "index-28"], [457, "index-29"], [457, "index-3"], [457, "index-30"], [457, "index-31"], [457, "index-32"], [457, "index-33"], [457, "index-34"], [457, "index-35"], [457, "index-36"], [457, "index-37"], [457, "index-4"], [457, "index-40"], [457, "index-5"], [457, "index-6"], [457, "index-7"], [457, "index-8"], [457, "index-9"], [459, "index-11"], [461, "index-24"], [461, "index-25"], [461, "index-26"], [461, "index-27"], [461, "index-28"], [461, "index-29"], [464, "index-20"], [464, "index-21"], [464, "index-24"], [464, "index-4"], [464, "index-5"], [464, "index-6"], [465, "index-1"], [465, "index-12"], [465, "index-14"], [465, "index-15"], [465, "index-8"], [465, "index-9"], [468, "index-114"], [468, "index-98"], [469, "index-104"], [469, "index-116"], [469, "index-84"], [469, "index-89"], [470, "index-17"], [471, "index-10"], [472, "index-23"], [472, "index-24"], [472, "index-35"], [473, "index-40"], [473, "index-41"], [473, "index-50"], [473, "index-51"], [473, "index-54"], [473, "index-55"], [473, "index-56"], [473, "index-57"], [473, "index-58"], [473, "index-59"], [475, "index-19"], [475, "index-2"], [475, "index-21"], [475, "index-27"], [475, "index-38"], [476, "index-12"], [476, "index-26"], [476, "index-27"], [476, "index-31"], [476, "index-36"], [476, "index-4"], [476, "index-8"], [477, "index-13"], [477, "index-14"], [477, "index-2"], [477, "index-20"], [477, "index-21"], [477, "index-22"], [477, "index-3"], [478, "index-21"], [479, "index-106"], [479, "index-136"], [479, "index-152"], [479, "index-191"], [479, "index-199"], [479, "index-200"], [479, "index-201"], [479, "index-203"], [479, "index-207"], [479, "index-211"], [479, "index-212"], [479, "index-214"], [479, "index-216"], [479, "index-218"], [479, "index-224"], [479, "index-225"], [479, "index-229"], [479, "index-230"], [479, "index-234"], [479, "index-235"], [479, "index-243"], [479, "index-254"], [479, "index-255"], [479, "index-284"], [479, "index-285"], [479, "index-38"], [479, "index-41"], [479, "index-48"], [479, "index-49"], [479, "index-52"], [479, "index-53"], [479, "index-62"], [479, "index-74"], [479, "index-77"], [479, "index-85"], [479, "index-86"], [479, "index-93"]], "pep 432": [[33, "index-37"], [33, "index-38"], [476, "index-38"], [479, "index-248"]], "pep 538": [[33, "index-33"], [451, "index-55"], [452, "index-33"], [476, "index-10"], [476, "index-3"], [476, "index-6"], [476, "index-7"], [479, "index-222"], [479, "index-226"], [479, "index-247"]], "pep 540": [[33, "index-34"], [290, "index-55"], [476, "index-11"], [476, "index-9"], [479, "index-236"]], "pep 552": [[33, "index-7"], [247, "index-9"], [308, "index-5"], [469, "index-106"], [476, "index-22"], [476, "index-23"], [479, "index-219"], [479, "index-239"]], "pep 587": [[33, "index-0"], [477, "index-34"], [477, "index-5"], [479, "index-204"], [479, "index-209"], [479, "index-94"]], "pythoncoerceclocale": [[33, "index-36"], [290, "index-4"], [451, "envvar-PYTHONCOERCECLOCALE"], [452, "index-32"], [476, "index-4"]], "pythondevmode": [[33, "index-8"], [185, "index-0"], [451, "envvar-PYTHONDEVMODE"], [476, "index-26"]], "pythondumprefs": [[33, "index-9"], [62, "index-0"], [451, "envvar-PYTHONDUMPREFS"], [452, "index-7"], [477, "index-3"], [479, "index-214"]], "pythonexecutable": [[33, "index-23"], [451, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[33, "index-10"], [185, "index-4"], [211, "index-0"], [451, "envvar-PYTHONFAULTHANDLER"], [451, "index-23"], [472, "index-24"]], "pythonintmaxstrdigits": [[33, "index-15"], [341, "index-67"], [341, "index-68"], [349, "index-17"], [451, "envvar-PYTHONINTMAXSTRDIGITS"], [451, "index-25"], [479, "index-38"]], "pythonmallocstats": [[33, "index-18"], [41, "index-2"], [451, "envvar-PYTHONMALLOCSTATS"], [479, "index-285"]], "pythonnodebugranges": [[33, "index-6"], [424, "index-59"], [451, "envvar-PYTHONNODEBUGRANGES"], [451, "index-30"], [469, "index-89"]], "pythonperfsupport": [[33, "index-28"], [101, "index-0"], [451, "envvar-PYTHONPERFSUPPORT"], [451, "index-31"], [470, "index-17"]], "pythonplatlibdir": [[33, "index-19"], [350, "index-3"], [451, "envvar-PYTHONPLATLIBDIR"], [479, "index-152"]], "pythonprofileimporttime": [[33, "index-13"], [451, "envvar-PYTHONPROFILEIMPORTTIME"], [451, "index-26"], [476, "index-27"], [479, "index-243"]], "pythonpycacheprefix": [[33, "index-25"], [349, "index-7"], [451, "envvar-PYTHONPYCACHEPREFIX"], [451, "index-28"], [477, "index-2"], [479, "index-216"]], "pythonsafepath": [[33, "index-3"], [324, "index-2"], [349, "index-24"], [451, "envvar-PYTHONSAFEPATH"], [451, "index-16"], [469, "index-104"], [469, "index-84"], [479, "index-53"]], "pythontracemalloc": [[33, "index-27"], [378, "index-0"], [378, "index-1"], [378, "index-2"], [451, "envvar-PYTHONTRACEMALLOC"], [451, "index-24"]], "pythonutf8": [[33, "index-2"], [33, "index-35"], [290, "index-2"], [290, "index-3"], [349, "index-36"], [451, "envvar-PYTHONUTF8"], [451, "index-27"], [451, "index-46"], [457, "index-15"], [476, "index-8"]], "pythonwarnings": [[33, "index-31"], [185, "index-1"], [396, "index-1"], [396, "index-2"], [396, "index-3"], [396, "index-4"], [396, "index-5"], [451, "envvar-PYTHONWARNINGS"], [451, "index-22"], [465, "index-1"], [465, "index-8"], [471, "index-10"], [476, "index-36"], [479, "index-48"]], "pyconfig (c type)": [[33, "c.PyConfig"]], "pyconfig.argv (c member)": [[33, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[33, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[33, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[33, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[33, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[33, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[33, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.code_debug_ranges (c member)": [[33, "c.PyConfig.code_debug_ranges"]], "pyconfig.configure_c_stdio (c member)": [[33, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[33, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[33, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[33, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[33, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[33, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[33, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[33, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[33, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[33, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[33, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[33, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[33, "c.PyConfig.install_signal_handlers"]], "pyconfig.int_max_str_digits (c member)": [[33, "c.PyConfig.int_max_str_digits"]], "pyconfig.interactive (c member)": [[33, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[33, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[33, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[33, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[33, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[33, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[33, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[33, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[33, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[33, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[33, "c.PyConfig.pathconfig_warnings"]], "pyconfig.perf_profiling (c member)": [[33, "c.PyConfig.perf_profiling"]], "pyconfig.platlibdir (c member)": [[33, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[33, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[33, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[33, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[33, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[33, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[33, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[33, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[33, "c.PyConfig.run_module"]], "pyconfig.safe_path (c member)": [[33, "c.PyConfig.safe_path"]], "pyconfig.show_ref_count (c member)": [[33, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[33, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[33, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[33, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[33, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[33, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[33, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[33, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[33, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[33, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[33, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[33, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[33, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[33, "c.PyConfig.xoptions"]], "pyconfig_clear (c function)": [[33, "c.PyConfig_Clear"]], "pyconfig_initisolatedconfig (c function)": [[33, "c.PyConfig_InitIsolatedConfig"]], "pyconfig_initpythonconfig (c function)": [[33, "c.PyConfig_InitPythonConfig"]], "pyconfig_read (c function)": [[33, "c.PyConfig_Read"]], "pyconfig_setargv (c function)": [[33, "c.PyConfig_SetArgv"]], "pyconfig_setbytesargv (c function)": [[33, "c.PyConfig_SetBytesArgv"]], "pyconfig_setbytesstring (c function)": [[33, "c.PyConfig_SetBytesString"]], "pyconfig_setstring (c function)": [[33, "c.PyConfig_SetString"]], "pyconfig_setwidestringlist (c function)": [[33, "c.PyConfig_SetWideStringList"]], "pypreconfig (c type)": [[33, "c.PyPreConfig"]], "pypreconfig.allocator (c member)": [[33, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[33, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[33, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[33, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[33, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[33, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[33, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[33, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[33, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[33, "c.PyPreConfig.utf8_mode"]], "pypreconfig_initisolatedconfig (c function)": [[33, "c.PyPreConfig_InitIsolatedConfig"]], "pypreconfig_initpythonconfig (c function)": [[33, "c.PyPreConfig_InitPythonConfig"]], "pystatus (c type)": [[33, "c.PyStatus"]], "pystatus.err_msg (c member)": [[33, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[33, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[33, "c.PyStatus.func"]], "pystatus_error (c function)": [[33, "c.PyStatus_Error"]], "pystatus_exception (c function)": [[33, "c.PyStatus_Exception"]], "pystatus_exit (c function)": [[33, "c.PyStatus_Exit"]], "pystatus_iserror (c function)": [[33, "c.PyStatus_IsError"]], "pystatus_isexit (c function)": [[33, "c.PyStatus_IsExit"]], "pystatus_nomemory (c function)": [[33, "c.PyStatus_NoMemory"]], "pystatus_ok (c function)": [[33, "c.PyStatus_Ok"]], "pywidestringlist (c type)": [[33, "c.PyWideStringList"]], "pywidestringlist.pywidestringlist_append (c function)": [[33, "c.PyWideStringList.PyWideStringList_Append"]], "pywidestringlist.pywidestringlist_insert (c function)": [[33, "c.PyWideStringList.PyWideStringList_Insert"]], "pywidestringlist.items (c member)": [[33, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[33, "c.PyWideStringList.length"]], "py_exitstatusexception (c function)": [[33, "c.Py_ExitStatusException"]], "py_getargcargv (c function)": [[33, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[33, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[33, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[33, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[33, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[33, "c.Py_RunMain"]], "_py_initializemain (c function)": [[33, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[33, "index-24"], [33, "index-4"]], "path": [[34, "index-41"], [34, "index-42"], [83, "index-0"], [83, "index-1"], [149, "index-3"], [149, "index-6"], [290, "index-33"], [290, "index-34"], [290, "index-35"], [290, "index-36"], [290, "index-39"], [290, "index-40"], [290, "index-41"], [290, "index-42"], [290, "index-52"], [331, "index-3"], [345, "index-2"], [395, "index-2"], [395, "index-3"], [395, "index-4"], [399, "index-3"], [434, "index-4"], [446, "index-15"], [451, "index-34"], [456, "index-2"], [457, "index-10"], [457, "index-12"], [457, "index-13"], [457, "index-14"], [457, "index-18"], [457, "index-2"], [457, "index-20"], [457, "index-22"], [457, "index-23"], [457, "index-25"], [457, "index-3"], [457, "index-40"], [457, "index-5"], [457, "index-9"], [473, "index-55"], [473, "index-58"], [473, "index-59"], [477, "index-22"], [479, "index-211"], [479, "index-212"], [479, "index-52"], [479, "index-77"]], "pep 353": [[34, "index-40"], [463, "index-16"], [463, "index-17"], [463, "index-29"], [468, "index-117"], [479, "index-157"]], "pep 7": [[34, "index-37"], [34, "index-38"], [34, "index-39"], [452, "index-0"], [475, "index-34"]], "pydoc_str (c macro)": [[34, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[34, "c.PyDoc_STRVAR"]], "pyerr_clear()": [[34, "index-12"], [34, "index-17"]], "pyerr_exceptionmatches()": [[34, "index-17"]], "pyerr_occurred()": [[34, "index-11"]], "pyerr_setstring()": [[34, "index-12"]], "pylist_getitem()": [[34, "index-7"]], "pylist_setitem()": [[34, "index-5"]], "pysequence_getitem()": [[34, "index-7"]], "pytuple_setitem()": [[34, "index-5"]], "py_abs (c macro)": [[34, "c.Py_ABS"]], "py_always_inline (c macro)": [[34, "c.Py_ALWAYS_INLINE"]], "py_charmask (c macro)": [[34, "c.Py_CHARMASK"]], "py_decref()": [[34, "index-4"]], "py_deprecated (c macro)": [[34, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[34, "c.Py_GETENV"]], "py_getexecprefix()": [[34, "index-23"]], "py_getprefix()": [[34, "index-23"]], "py_getprogramfullpath()": [[34, "index-23"]], "py_incref()": [[34, "index-4"]], "py_isinitialized()": [[34, "index-26"]], "py_max (c macro)": [[34, "c.Py_MAX"]], "py_member_size (c macro)": [[34, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[34, "c.Py_MIN"]], "py_no_inline (c macro)": [[34, "c.Py_NO_INLINE"]], "py_stringify (c macro)": [[34, "c.Py_STRINGIFY"]], "py_unreachable (c macro)": [[34, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[34, "c.Py_UNUSED"]], "py_xdecref()": [[34, "index-17"]], "py_ssize_t (c type)": [[34, "c.Py_ssize_t"]], "exc_info() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[34, "index-13"]], "incr_item()": [[34, "index-15"], [34, "index-16"]], "set_all()": [[34, "index-6"]], "sum_list()": [[34, "index-8"]], "sum_sequence()": [[34, "index-14"], [34, "index-9"]], "type\uff08\u578b\u5225\uff09": [[34, "index-3"], [48, "index-7"], [60, "index-0"], [86, "term-type"], [222, "index-0"], [222, "index-12"], [341, "index-0"], [341, "index-14"], [341, "index-16"], [341, "index-20"], [341, "index-22"], [341, "index-23"], [341, "index-24"], [341, "index-52"], [341, "index-59"], [341, "index-65"], [424, "index-1"], [424, "index-4"], [424, "index-83"], [426, "index-7"]], "pyaiter_check (c function)": [[35, "c.PyAIter_Check"]], "pyiter_check (c function)": [[35, "c.PyIter_Check"]], "pyiter_next (c function)": [[35, "c.PyIter_Next"]], "pyiter_send (c function)": [[35, "c.PyIter_Send"]], "pysendresult (c type)": [[35, "c.PySendResult"]], "pycalliter_check (c function)": [[36, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[36, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[36, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[36, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[36, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[36, "c.PySeqIter_Type"]], "pylistobject (c type)": [[37, "c.PyListObject"]], "pylist_append (c function)": [[37, "c.PyList_Append"]], "pylist_astuple (c function)": [[37, "c.PyList_AsTuple"]], "pylist_check (c function)": [[37, "c.PyList_Check"]], "pylist_checkexact (c function)": [[37, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[37, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[37, "c.PyList_GET_SIZE"]], "pylist_getitem (c function)": [[37, "c.PyList_GetItem"]], "pylist_getslice (c function)": [[37, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[37, "c.PyList_Insert"]], "pylist_new (c function)": [[37, "c.PyList_New"]], "pylist_reverse (c function)": [[37, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[37, "c.PyList_SET_ITEM"]], "pylist_setitem (c function)": [[37, "c.PyList_SetItem"]], "pylist_setslice (c function)": [[37, "c.PyList_SetSlice"]], "pylist_size (c function)": [[37, "c.PyList_Size"]], "pylist_sort (c function)": [[37, "c.PyList_Sort"]], "pylist_type (c var)": [[37, "c.PyList_Type"]], "list\uff08\u4e32\u5217\uff09": [[37, "index-0"], [86, "term-list"], [341, "index-23"], [341, "index-24"], [341, "index-25"], [423, "index-6"], [424, "index-23"], [426, "index-15"], [426, "index-40"], [426, "index-42"], [426, "index-45"], [426, "index-91"], [432, "index-1"], [432, "index-10"], [432, "index-2"], [432, "index-21"], [432, "index-5"], [432, "index-6"]], "tuple\uff08\u5143\u7d44\uff09": [[37, "index-2"], [59, "index-0"], [341, "index-22"], [341, "index-26"], [424, "index-20"]], "long_max": [[38, "index-1"]], "overflowerror\uff08\u5185\u5efa\u4f8b\u5916\uff09": [[38, "index-1"], [38, "index-2"], [38, "index-3"], [38, "index-4"], [38, "index-5"], [38, "index-6"]], "py_ssize_t_max": [[38, "index-3"]], "pylongobject (c type)": [[38, "c.PyLongObject"]], "pylong_asdouble (c function)": [[38, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[38, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[38, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[38, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[38, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[38, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[38, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[38, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[38, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[38, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[38, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[38, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[38, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[38, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[38, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[38, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[38, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[38, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[38, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[38, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[38, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[38, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[38, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[38, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[38, "c.PyLong_Type"]], "pyunstable_long_compactvalue (c function)": [[38, "c.PyUnstable_Long_CompactValue"]], "pyunstable_long_iscompact (c function)": [[38, "c.PyUnstable_Long_IsCompact"]], "size_max": [[38, "index-5"]], "ulong_max": [[38, "index-4"]], "integer\uff08\u6574\u6570\uff09": [[38, "index-0"]], "long integer\uff08\u9577\u6574\u6570\uff09": [[38, "index-0"]], "pymapping_check (c function)": [[39, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[39, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[39, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[39, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[39, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[39, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[39, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[39, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[39, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[39, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[39, "c.PyMapping_Size"]], "pymapping_values (c function)": [[39, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[40, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[40, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[40, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[40, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[40, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[40, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[40, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[40, "c.PyMarshal_WriteObjectToString"]], "pymem_domain_mem (c macro)": [[41, "c.PYMEM_DOMAIN_MEM"]], "pymem_domain_obj (c macro)": [[41, "c.PYMEM_DOMAIN_OBJ"]], "pymem_domain_raw (c macro)": [[41, "c.PYMEM_DOMAIN_RAW"]], "pythonmalloc": [[41, "index-1"], [41, "index-3"], [41, "index-4"], [41, "index-5"], [185, "index-2"], [185, "index-3"], [451, "envvar-PYTHONMALLOC"], [451, "index-43"], [452, "index-34"], [475, "index-27"], [475, "index-38"], [479, "index-284"]], "pymemallocatordomain (c type)": [[41, "c.PyMemAllocatorDomain"]], "pymemallocatorex (c type)": [[41, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[41, "c.PyMem_Calloc"]], "pymem_del (c function)": [[41, "c.PyMem_Del"]], "pymem_free (c function)": [[41, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[41, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[41, "c.PyMem_Malloc"]], "pymem_new (c macro)": [[41, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[41, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[41, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[41, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[41, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[41, "c.PyMem_Realloc"]], "pymem_resize (c macro)": [[41, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[41, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[41, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[41, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[41, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[41, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[41, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[41, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[41, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[41, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[41, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[41, "c.PyTraceMalloc_Untrack"]], "calloc()": [[41, "index-0"]], "free()": [[41, "index-0"]], "malloc()": [[41, "index-0"]], "realloc()": [[41, "index-0"]], "pymemoryview_check (c function)": [[42, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[42, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[42, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[42, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[42, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[42, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[42, "c.PyMemoryView_GetContiguous"]], "memoryview\uff08\u8a18\u61b6\u9ad4\u8996\u5716\uff09": [[42, "index-0"], [341, "index-40"]], "pyinstancemethod_check (c function)": [[43, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[43, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[43, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[43, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[43, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[43, "c.PyMethod_Check"]], "pymethod_function (c function)": [[43, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[43, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[43, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[43, "c.PyMethod_New"]], "pymethod_self (c function)": [[43, "c.PyMethod_Self"]], "pymethod_type (c var)": [[43, "c.PyMethod_Type"]], "instancemethod": [[43, "index-0"]], "method\uff08\u65b9\u6cd5\uff09": [[43, "index-1"], [86, "index-26"], [86, "index-34"], [86, "term-method"], [341, "index-61"], [424, "index-35"], [424, "index-41"], [426, "index-53"], [436, "index-0"]], "pep 3121": [[44, "index-10"], [466, "index-34"], [479, "index-151"]], "pep 451": [[44, "index-7"], [86, "index-92"], [247, "index-6"], [299, "index-10"], [299, "index-11"], [321, "index-3"], [321, "index-5"], [321, "index-8"], [349, "index-20"], [428, "index-26"], [468, "index-112"], [470, "index-34"], [473, "index-23"], [473, "index-3"], [474, "index-27"], [479, "index-283"], [479, "index-43"]], "pymoduledef (c type)": [[44, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[44, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[44, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[44, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[44, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[44, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[44, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[44, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[44, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[44, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[44, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[44, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[44, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[44, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[44, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[44, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[44, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c macro)": [[44, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[44, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[44, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[44, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c macro)": [[44, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[44, "c.PyModule_AddType"]], "pymodule_check (c function)": [[44, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[44, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[44, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[44, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[44, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[44, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[44, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[44, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[44, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[44, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[44, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[44, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[44, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[44, "c.PyModule_GetState"]], "pymodule_new (c function)": [[44, "c.PyModule_New"]], "pymodule_newobject (c function)": [[44, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[44, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[44, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[44, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[44, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[44, "c.PyState_RemoveModule"]], "py_mod_create (c macro)": [[44, "c.Py_mod_create"]], "py_mod_create.create_module (c function)": [[44, "c.Py_mod_create.create_module"]], "py_mod_exec (c macro)": [[44, "c.Py_mod_exec"]], "py_mod_exec.exec_module (c function)": [[44, "c.Py_mod_exec.exec_module"]], "py_mod_multiple_interpreters (c macro)": [[44, "c.Py_mod_multiple_interpreters"]], "py_mod_multiple_interpreters.py_mod_multiple_interpreters_not_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"]], "py_mod_multiple_interpreters.py_mod_multiple_interpreters_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"]], "py_mod_multiple_interpreters.py_mod_per_interpreter_gil_supported (c macro)": [[44, "c.Py_mod_multiple_interpreters.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "systemerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[44, "index-4"], [44, "index-5"]], "__dict__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-3"]], "__doc__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "__file__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"], [44, "index-5"]], "__loader__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "__name__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"], [44, "index-4"]], "__package__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[44, "index-2"]], "object\uff08\u6a21\u7d44\uff09": [[44, "index-0"]], "none": [[45, "index-0"], [424, "index-6"], [432, "index-3"]], "py_none (c var)": [[45, "c.Py_None"]], "py_return_none (c macro)": [[45, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[46, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[46, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[46, "c.PyNumber_Add"]], "pynumber_and (c function)": [[46, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[46, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[46, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[46, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[46, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[46, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[46, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[46, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[46, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[46, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[46, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[46, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[46, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[46, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[46, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[46, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[46, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[46, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[46, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[46, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[46, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[46, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[46, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[46, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[46, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[46, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[46, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[46, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[46, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[46, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[46, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[46, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[46, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[46, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[46, "c.PyNumber_Xor"]], "abs": [[46, "index-2"], [424, "index-100"]], "divmod": [[46, "index-0"], [424, "index-97"], [424, "index-98"]], "float": [[46, "index-5"], [341, "index-13"], [424, "index-101"]], "int": [[46, "index-4"], [341, "index-13"], [424, "index-101"]], "pow": [[46, "index-1"], [46, "index-3"], [424, "index-97"], [424, "index-98"], [424, "index-99"]], "pyobject_ascharbuffer (c function)": [[47, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[47, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[47, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[47, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[48, "index-4"], [48, "index-5"], [114, "index-4"], [158, "index-7"], [424, "index-91"], [464, "index-16"]], "pyobject_ascii (c function)": [[48, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[48, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[48, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[48, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[48, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[48, "c.PyObject_Dir"]], "pyobject_format (c function)": [[48, "c.PyObject_Format"]], "pyobject_genericgetattr (c function)": [[48, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[48, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[48, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[48, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[48, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[48, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[48, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[48, "c.PyObject_GetItem"]], "pyobject_getitemdata (c function)": [[48, "c.PyObject_GetItemData"]], "pyobject_getiter (c function)": [[48, "c.PyObject_GetIter"]], "pyobject_gettypedata (c function)": [[48, "c.PyObject_GetTypeData"]], "pyobject_hasattr (c function)": [[48, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[48, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[48, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[48, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[48, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[48, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[48, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[48, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[48, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[48, "c.PyObject_Not"]], "pyobject_print (c function)": [[48, "c.PyObject_Print"]], "pyobject_repr (c function)": [[48, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[48, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[48, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[48, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[48, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[48, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[48, "c.PyObject_Size"]], "pyobject_str (c function)": [[48, "c.PyObject_Str"]], "pyobject_str\uff08c \u51fd\u5f0f\uff09": [[48, "index-2"]], "pyobject_type (c function)": [[48, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[48, "c.PyObject_TypeCheck"]], "pytype_gettypedatasize (c function)": [[48, "c.PyType_GetTypeDataSize"]], "py_notimplemented (c var)": [[48, "c.Py_NotImplemented"]], "py_return_notimplemented (c macro)": [[48, "c.Py_RETURN_NOTIMPLEMENTED"]], "_pyobject_getdictptr (c function)": [[48, "c._PyObject_GetDictPtr"]], "ascii": [[48, "index-1"], [430, "index-1"], [431, "index-17"]], "bulit-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[48, "index-0"], [48, "index-1"], [48, "index-3"], [48, "index-6"], [48, "index-7"], [48, "index-8"]], "hash\uff08\u96dc\u6e4a\uff09": [[48, "index-6"], [62, "index-2"], [341, "index-22"], [424, "index-77"]], "repr": [[48, "index-0"], [62, "index-1"], [74, "index-3"], [432, "index-3"]], "string\uff08\u5b57\u4e32\uff09": [[48, "index-2"], [74, "index-3"], [222, "index-11"], [222, "index-4"], [263, "index-6"], [341, "index-28"], [341, "index-30"], [341, "index-32"], [341, "index-35"], [424, "index-18"], [424, "index-73"], [424, "index-75"], [426, "index-42"], [426, "index-43"], [426, "index-45"], [431, "index-25"], [432, "index-3"]], "pyunstable_perfmapstate_fini (c function)": [[50, "c.PyUnstable_PerfMapState_Fini"]], "pyunstable_perfmapstate_init (c function)": [[50, "c.PyUnstable_PerfMapState_Init"]], "pyunstable_writeperfmapentry (c function)": [[50, "c.PyUnstable_WritePerfMapEntry"]], "py_clear (c function)": [[51, "c.Py_CLEAR"]], "py_decref (c function)": [[51, "c.Py_DECREF"], [51, "c.Py_DecRef"]], "py_incref (c function)": [[51, "c.Py_INCREF"], [51, "c.Py_IncRef"]], "py_newref (c function)": [[51, "c.Py_NewRef"]], "py_refcnt (c function)": [[51, "c.Py_REFCNT"]], "py_setref (c macro)": [[51, "c.Py_SETREF"]], "py_set_refcnt (c function)": [[51, "c.Py_SET_REFCNT"]], "py_xdecref (c function)": [[51, "c.Py_XDECREF"]], "py_xincref (c function)": [[51, "c.Py_XINCREF"]], "py_xnewref (c function)": [[51, "c.Py_XNewRef"]], "py_xsetref (c macro)": [[51, "c.Py_XSETREF"]], "pyeval_getbuiltins (c function)": [[52, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[52, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[52, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[52, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[52, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[52, "c.PyEval_GetLocals"]], "pysequence_check (c function)": [[53, "c.PySequence_Check"]], "pysequence_concat (c function)": [[53, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[53, "c.PySequence_Contains"]], "pysequence_count (c function)": [[53, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[53, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[53, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[53, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[53, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[53, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[53, "c.PySequence_Fast_ITEMS"]], "pysequence_getitem (c function)": [[53, "c.PySequence_GetItem"]], "pysequence_getslice (c function)": [[53, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[53, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[53, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[53, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[53, "c.PySequence_Index"]], "pysequence_length (c function)": [[53, "c.PySequence_Length"]], "pysequence_list (c function)": [[53, "c.PySequence_List"]], "pysequence_repeat (c function)": [[53, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[53, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[53, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[53, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[53, "c.PySequence_Tuple"]], "built-in function\uff08\u5185\u5efa\u51fd\u5f0f\uff09": [[53, "index-0"], [53, "index-1"]], "tuple\uff08\u5143\u7ec4\uff09": [[53, "index-1"]], "pyanyset_check (c function)": [[54, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[54, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[54, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[54, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[54, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[54, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[54, "c.PySetObject"]], "pyset_add (c function)": [[54, "c.PySet_Add"]], "pyset_check (c function)": [[54, "c.PySet_Check"]], "pyset_checkexact (c function)": [[54, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[54, "c.PySet_Clear"]], "pyset_contains (c function)": [[54, "c.PySet_Contains"]], "pyset_discard (c function)": [[54, "c.PySet_Discard"]], "pyset_get_size (c function)": [[54, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[54, "c.PySet_New"]], "pyset_pop (c function)": [[54, "c.PySet_Pop"]], "pyset_size (c function)": [[54, "c.PySet_Size"]], "pyset_type (c var)": [[54, "c.PySet_Type"]], "frozenset\uff08\u51cd\u7d50\u96c6\u5408\uff09": [[54, "index-0"], [424, "index-28"]], "set\uff08\u96c6\u5408\uff09": [[54, "index-0"], [341, "index-51"], [424, "index-27"], [426, "index-16"]], "pyslice_adjustindices (c function)": [[55, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[55, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[55, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[55, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[55, "c.PySlice_New"]], "pyslice_type (c var)": [[55, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[55, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[55, "c.Py_Ellipsis"]], "pep 387": [[56, "index-3"], [210, "index-10"], [210, "index-11"]], "pyunstable": [[56, "index-1"]], "py_limited_api (c macro)": [[56, "c.Py_LIMITED_API"]], "meth_class (c macro)": [[57, "c.METH_CLASS"]], "meth_coexist (c macro)": [[57, "c.METH_COEXIST"]], "meth_fastcall (c macro)": [[57, "c.METH_FASTCALL"]], "meth_keywords (c macro)": [[57, "c.METH_KEYWORDS"]], "meth_method (c macro)": [[57, "c.METH_METHOD"]], "meth_noargs (c macro)": [[57, "c.METH_NOARGS"]], "meth_o (c macro)": [[57, "c.METH_O"]], "meth_static (c macro)": [[57, "c.METH_STATIC"]], "meth_varargs (c macro)": [[57, "c.METH_VARARGS"]], "pycfunction (c type)": [[57, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[57, "c.PyCFunctionWithKeywords"]], "pycmethod (c type)": [[57, "c.PyCMethod"]], "pygetsetdef (c type)": [[57, "c.PyGetSetDef"]], "pygetsetdef.closure (c member)": [[57, "c.PyGetSetDef.closure"]], "pygetsetdef.doc (c member)": [[57, "c.PyGetSetDef.doc"]], "pygetsetdef.get (c member)": [[57, "c.PyGetSetDef.get"]], "pygetsetdef.name (c member)": [[57, "c.PyGetSetDef.name"]], "pygetsetdef.set (c member)": [[57, "c.PyGetSetDef.set"]], "pymemberdef (c type)": [[57, "c.PyMemberDef"]], "pymemberdef.doc (c member)": [[57, "c.PyMemberDef.doc"]], "pymemberdef.flags (c member)": [[57, "c.PyMemberDef.flags"]], "pymemberdef.name (c member)": [[57, "c.PyMemberDef.name"]], "pymemberdef.offset (c member)": [[57, "c.PyMemberDef.offset"]], "pymemberdef.type (c member)": [[57, "c.PyMemberDef.type"]], "pymember_getone (c function)": [[57, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[57, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[57, "c.PyMethodDef"]], "pymethoddef.ml_doc (c member)": [[57, "c.PyMethodDef.ml_doc"]], "pymethoddef.ml_flags (c member)": [[57, "c.PyMethodDef.ml_flags"]], "pymethoddef.ml_meth (c member)": [[57, "c.PyMethodDef.ml_meth"]], "pymethoddef.ml_name (c member)": [[57, "c.PyMethodDef.ml_name"]], "pyobject (c type)": [[57, "c.PyObject"]], "pyobject_head (c macro)": [[57, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[57, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[57, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[57, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[57, "c.PyVarObject_HEAD_INIT"]], "py_audit_read (c macro)": [[57, "c.Py_AUDIT_READ"]], "py_is_type (c function)": [[57, "c.Py_IS_TYPE"]], "py_is (c function)": [[57, "c.Py_Is"]], "py_isfalse (c function)": [[57, "c.Py_IsFalse"]], "py_isnone (c function)": [[57, "c.Py_IsNone"]], "py_istrue (c function)": [[57, "c.Py_IsTrue"]], "py_readonly (c macro)": [[57, "c.Py_READONLY"]], "py_relative_offset (c macro)": [[57, "c.Py_RELATIVE_OFFSET"]], "py_set_size (c function)": [[57, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[57, "c.Py_SET_TYPE"]], "py_size (c function)": [[57, "c.Py_SIZE"]], "py_type (c function)": [[57, "c.Py_TYPE"]], "py_t_bool (c macro)": [[57, "c.Py_T_BOOL"]], "py_t_byte (c macro)": [[57, "c.Py_T_BYTE"]], "py_t_char (c macro)": [[57, "c.Py_T_CHAR"]], "py_t_double (c macro)": [[57, "c.Py_T_DOUBLE"]], "py_t_float (c macro)": [[57, "c.Py_T_FLOAT"]], "py_t_int (c macro)": [[57, "c.Py_T_INT"]], "py_t_long (c macro)": [[57, "c.Py_T_LONG"]], "py_t_longlong (c macro)": [[57, "c.Py_T_LONGLONG"]], "py_t_object_ex (c macro)": [[57, "c.Py_T_OBJECT_EX"]], "py_t_pyssizet (c macro)": [[57, "c.Py_T_PYSSIZET"]], "py_t_short (c macro)": [[57, "c.Py_T_SHORT"]], "py_t_string (c macro)": [[57, "c.Py_T_STRING"]], "py_t_string_inplace (c macro)": [[57, "c.Py_T_STRING_INPLACE"]], "py_t_ubyte (c macro)": [[57, "c.Py_T_UBYTE"]], "py_t_uint (c macro)": [[57, "c.Py_T_UINT"]], "py_t_ulong (c macro)": [[57, "c.Py_T_ULONG"]], "py_t_ulonglong (c macro)": [[57, "c.Py_T_ULONGLONG"]], "py_t_ushort (c macro)": [[57, "c.Py_T_USHORT"]], "readonly": [[57, "index-3"]], "read_restricted": [[57, "index-2"]], "restricted": [[57, "index-2"]], "t_bool": [[57, "index-4"]], "t_byte": [[57, "index-4"]], "t_char": [[57, "index-4"]], "t_double": [[57, "index-4"]], "t_float": [[57, "index-4"]], "t_int": [[57, "index-4"]], "t_long": [[57, "index-4"]], "t_longlong": [[57, "index-4"]], "t_none (c macro)": [[57, "c.T_NONE"]], "t_object (c macro)": [[57, "c.T_OBJECT"]], "t_object_ex": [[57, "index-4"]], "t_pyssizet": [[57, "index-4"]], "t_short": [[57, "index-4"]], "t_string": [[57, "index-4"]], "t_string_inplace": [[57, "index-4"]], "t_ubyte": [[57, "index-4"]], "t_uint": [[57, "index-4"]], "t_ulong": [[57, "index-4"]], "t_ulongulong": [[57, "index-4"]], "t_ushort": [[57, "index-4"]], "write_restricted": [[57, "index-2"]], "_pycfunctionfast (c type)": [[57, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[57, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[57, "index-0"]], "staticmethod": [[57, "index-1"]], "structmember.h": [[57, "index-4"]], "pep 578": [[58, "index-0"], [140, "index-3"], [349, "index-42"], [477, "index-33"]], "pyos_afterfork (c function)": [[58, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[58, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[58, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[58, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[58, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[58, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[58, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[58, "c.PyOS_setsig"]], "pysys_addaudithook (c function)": [[58, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[58, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[58, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[58, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[58, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[58, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[58, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[58, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[58, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[58, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[58, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[58, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[58, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[58, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[58, "c.Py_AtExit"]], "py_decodelocale (c function)": [[58, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[58, "c.Py_EncodeLocale"]], "py_exit (c function)": [[58, "c.Py_Exit"]], "py_fatalerror (c function)": [[58, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[58, "c.Py_FdIsInteractive"]], "abort()": [[58, "index-1"]], "cleanup functions\uff08\u6e05\u7406\u51fd\u5f0f\uff09": [[58, "index-3"]], "exit()": [[58, "index-2"]], "pystructsequence_desc (c type)": [[59, "c.PyStructSequence_Desc"]], "pystructsequence_desc.doc (c member)": [[59, "c.PyStructSequence_Desc.doc"]], "pystructsequence_desc.fields (c member)": [[59, "c.PyStructSequence_Desc.fields"]], "pystructsequence_desc.n_in_sequence (c member)": [[59, "c.PyStructSequence_Desc.n_in_sequence"]], "pystructsequence_desc.name (c member)": [[59, "c.PyStructSequence_Desc.name"]], "pystructsequence_field (c type)": [[59, "c.PyStructSequence_Field"]], "pystructsequence_field.doc (c member)": [[59, "c.PyStructSequence_Field.doc"]], "pystructsequence_field.name (c member)": [[59, "c.PyStructSequence_Field.name"]], "pystructsequence_get_item (c function)": [[59, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[59, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[59, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[59, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[59, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[59, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[59, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[59, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[59, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[59, "c.PyTupleObject"]], "pytuple_check (c function)": [[59, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[59, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[59, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[59, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[59, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[59, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[59, "c.PyTuple_New"]], "pytuple_pack (c function)": [[59, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[59, "c.PyTuple_SET_ITEM"]], "pytuple_setitem (c function)": [[59, "c.PyTuple_SetItem"]], "pytuple_size (c function)": [[59, "c.PyTuple_Size"]], "pytuple_type (c var)": [[59, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[59, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[60, "c.PyTypeObject"]], "pytype_addwatcher (c function)": [[60, "c.PyType_AddWatcher"]], "pytype_check (c function)": [[60, "c.PyType_Check"]], "pytype_checkexact (c function)": [[60, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[60, "c.PyType_ClearCache"]], "pytype_clearwatcher (c function)": [[60, "c.PyType_ClearWatcher"]], "pytype_frommetaclass (c function)": [[60, "c.PyType_FromMetaclass"]], "pytype_frommoduleandspec (c function)": [[60, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[60, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[60, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[60, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[60, "c.PyType_GenericNew"]], "pytype_getdict (c function)": [[60, "c.PyType_GetDict"]], "pytype_getflags (c function)": [[60, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[60, "c.PyType_GetModule"]], "pytype_getmodulebydef (c function)": [[60, "c.PyType_GetModuleByDef"]], "pytype_getmodulestate (c function)": [[60, "c.PyType_GetModuleState"]], "pytype_getname (c function)": [[60, "c.PyType_GetName"]], "pytype_getqualname (c function)": [[60, "c.PyType_GetQualName"]], "pytype_getslot (c function)": [[60, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[60, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[60, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[60, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[60, "c.PyType_Modified"]], "pytype_ready (c function)": [[60, "c.PyType_Ready"]], "pytype_slot (c type)": [[60, "c.PyType_Slot"]], "pytype_slot.pfunc (c member)": [[60, "c.PyType_Slot.pfunc"]], "pytype_slot.slot (c member)": [[60, "c.PyType_Slot.slot"]], "pytype_spec (c type)": [[60, "c.PyType_Spec"]], "pytype_spec.basicsize (c member)": [[60, "c.PyType_Spec.basicsize"]], "pytype_spec.flags (c member)": [[60, "c.PyType_Spec.flags"]], "pytype_spec.itemsize (c member)": [[60, "c.PyType_Spec.itemsize"]], "pytype_spec.name (c member)": [[60, "c.PyType_Spec.name"]], "pytype_spec.slots (c member)": [[60, "c.PyType_Spec.slots"]], "pytype_type (c var)": [[60, "c.PyType_Type"]], "pytype_watch (c function)": [[60, "c.PyType_Watch"]], "pytype_watchcallback (c type)": [[60, "c.PyType_WatchCallback"]], "pyunstable_type_assignversiontag (c function)": [[60, "c.PyUnstable_Type_AssignVersionTag"]], "py_genericalias (c function)": [[61, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[61, "c.Py_GenericAliasType"]], "pep 442": [[62, "index-5"], [74, "index-2"], [224, "index-2"], [473, "index-15"], [473, "index-16"], [473, "index-45"], [473, "index-46"], [478, "index-20"], [479, "index-208"]], "pep 634": [[62, "index-3"], [62, "index-4"], [110, "index-1"], [423, "index-19"], [423, "index-25"], [424, "index-105"], [468, "index-80"], [468, "index-95"], [479, "index-109"], [479, "index-54"], [479, "index-97"]], "pyasyncmethods (c type)": [[62, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[62, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[62, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[62, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[62, "c.PyAsyncMethods.am_send"]], "pybufferprocs (c type)": [[62, "c.PyBufferProcs"]], "pybufferprocs.bf_getbuffer (c member)": [[62, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[62, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[62, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[62, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[62, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[62, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[62, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[62, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[62, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[62, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[62, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[62, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[62, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[62, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[62, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[62, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[62, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[62, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[62, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[62, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[62, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[62, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[62, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[62, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[62, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[62, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[62, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[62, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[62, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[62, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[62, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[62, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[62, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[62, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[62, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[62, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[62, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[62, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[62, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[62, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[62, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[62, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[62, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[62, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[62, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[62, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[62, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[62, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[62, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[62, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[62, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[62, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[62, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[62, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[62, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[62, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[62, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[62, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[62, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[62, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[62, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[62, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[62, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[62, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[62, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[62, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[62, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[62, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[62, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[62, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[62, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[62, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[62, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[62, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[62, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[62, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[62, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[62, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[62, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[62, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[62, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[62, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[62, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[62, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[62, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[62, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[62, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[62, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[62, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[62, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[62, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[62, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[62, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[62, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_setattr (c member)": [[62, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[62, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[62, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[62, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[62, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[62, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[62, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[62, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_watched (c member)": [[62, "c.PyTypeObject.tp_watched"]], "pytypeobject.tp_weaklist (c member)": [[62, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[62, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[62, "c.PyVarObject.ob_size"]], "py_eq (c macro)": [[62, "c.Py_EQ"]], "py_ge (c macro)": [[62, "c.Py_GE"]], "py_gt (c macro)": [[62, "c.Py_GT"]], "py_le (c macro)": [[62, "c.Py_LE"]], "py_lt (c macro)": [[62, "c.Py_LT"]], "py_ne (c macro)": [[62, "c.Py_NE"]], "py_return_richcompare (c macro)": [[62, "c.Py_RETURN_RICHCOMPARE"]], "py_tpflags_basetype (c macro)": [[62, "c.Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (c macro)": [[62, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (c macro)": [[62, "c.Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (c macro)": [[62, "c.Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (c macro)": [[62, "c.Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (c macro)": [[62, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (c macro)": [[62, "c.Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (c macro)": [[62, "c.Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (c macro)": [[62, "c.Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (c macro)": [[62, "c.Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (c macro)": [[62, "c.Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_items_at_end (c macro)": [[62, "c.Py_TPFLAGS_ITEMS_AT_END"]], "py_tpflags_list_subclass (c macro)": [[62, "c.Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (c macro)": [[62, "c.Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_managed_dict (c macro)": [[62, "c.Py_TPFLAGS_MANAGED_DICT"]], "py_tpflags_managed_weakref (c macro)": [[62, "c.Py_TPFLAGS_MANAGED_WEAKREF"]], "py_tpflags_mapping (c macro)": [[62, "c.Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (c macro)": [[62, "c.Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (c macro)": [[62, "c.Py_TPFLAGS_READY"]], "py_tpflags_readying (c macro)": [[62, "c.Py_TPFLAGS_READYING"]], "py_tpflags_sequence (c macro)": [[62, "c.Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (c macro)": [[62, "c.Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (c macro)": [[62, "c.Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (c macro)": [[62, "c.Py_TPFLAGS_UNICODE_SUBCLASS"]], "py_tpflags_valid_version_tag (c macro)": [[62, "c.Py_TPFLAGS_VALID_VERSION_TAG"]], "allocfunc (c type)": [[62, "c.allocfunc"]], "binaryfunc (c type)": [[62, "c.binaryfunc"]], "descrgetfunc (c type)": [[62, "c.descrgetfunc"]], "descrsetfunc (c type)": [[62, "c.descrsetfunc"]], "destructor (c type)": [[62, "c.destructor"]], "freefunc (c type)": [[62, "c.freefunc"]], "getattrfunc (c type)": [[62, "c.getattrfunc"]], "getattrofunc (c type)": [[62, "c.getattrofunc"]], "getbufferproc (c type)": [[62, "c.getbufferproc"]], "getiterfunc (c type)": [[62, "c.getiterfunc"]], "hashfunc (c type)": [[62, "c.hashfunc"]], "initproc (c type)": [[62, "c.initproc"]], "iternextfunc (c type)": [[62, "c.iternextfunc"]], "lenfunc (c type)": [[62, "c.lenfunc"]], "newfunc (c type)": [[62, "c.newfunc"]], "objobjargproc (c type)": [[62, "c.objobjargproc"]], "objobjproc (c type)": [[62, "c.objobjproc"]], "releasebufferproc (c type)": [[62, "c.releasebufferproc"]], "reprfunc (c type)": [[62, "c.reprfunc"]], "richcmpfunc (c type)": [[62, "c.richcmpfunc"]], "sendfunc (c type)": [[62, "c.sendfunc"]], "setattrfunc (c type)": [[62, "c.setattrfunc"]], "setattrofunc (c type)": [[62, "c.setattrofunc"]], "ssizeargfunc (c type)": [[62, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[62, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[62, "c.ternaryfunc"]], "unaryfunc (c type)": [[62, "c.unaryfunc"]], "pep 383": [[63, "index-2"], [63, "index-3"], [63, "index-4"], [155, "index-2"], [334, "index-1"], [479, "index-60"]], "pep 393": [[63, "index-0"], [155, "index-5"], [349, "index-19"], [468, "index-118"], [472, "index-30"], [472, "index-32"], [472, "index-33"], [472, "index-34"], [472, "index-38"], [472, "index-6"], [472, "index-7"], [472, "index-8"], [478, "index-25"], [478, "index-26"], [479, "index-95"]], "pep 623": [[63, "index-1"], [468, "index-91"], [470, "index-23"], [470, "index-3"], [470, "index-43"], [479, "index-108"], [479, "index-110"], [479, "index-63"]], "pyasciiobject (c type)": [[63, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[63, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[63, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[63, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[63, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[63, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[63, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[63, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[63, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_asasciistring (c function)": [[63, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[63, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[63, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[63, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[63, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[63, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[63, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[63, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[63, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[63, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[63, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[63, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[63, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicodeescapestring (c function)": [[63, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[63, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[63, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[63, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[63, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[63, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[63, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[63, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[63, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[63, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[63, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[63, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[63, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[63, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[63, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[63, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[63, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[63, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[63, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[63, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[63, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[63, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[63, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[63, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[63, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[63, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[63, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[63, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[63, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[63, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[63, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[63, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encodecodepage (c function)": [[63, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[63, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelocale (c function)": [[63, "c.PyUnicode_EncodeLocale"]], "pyunicode_fsconverter (c function)": [[63, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[63, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[63, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[63, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[63, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[63, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[63, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[63, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[63, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[63, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[63, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[63, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[63, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromwidechar (c function)": [[63, "c.PyUnicode_FromWideChar"]], "pyunicode_get_length (c function)": [[63, "c.PyUnicode_GET_LENGTH"]], "pyunicode_getlength (c function)": [[63, "c.PyUnicode_GetLength"]], "pyunicode_internfromstring (c function)": [[63, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[63, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[63, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[63, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[63, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c function)": [[63, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[63, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[63, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[63, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[63, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[63, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[63, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[63, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[63, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[63, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[63, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[63, "c.PyUnicode_Tailmatch"]], "pyunicode_translate (c function)": [[63, "c.PyUnicode_Translate"]], "pyunicode_type (c var)": [[63, "c.PyUnicode_Type"]], "pyunicode_write (c function)": [[63, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[63, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[63, "c.Py_UCS1"]], "py_ucs2 (c type)": [[63, "c.Py_UCS2"]], "py_ucs4 (c type)": [[63, "c.Py_UCS4"]], "py_unicode (c type)": [[63, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[63, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[63, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[63, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[63, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[63, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[63, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[63, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[63, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[63, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[63, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[63, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c function)": [[63, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c function)": [[63, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c function)": [[63, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c function)": [[63, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[63, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[63, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[63, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[63, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[63, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[63, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[65, "c.CO_FUTURE_DIVISION"]], "pep 238": [[65, "index-3"], [86, "index-93"], [111, "index-24"], [460, "index-11"], [460, "index-12"], [460, "index-13"], [466, "index-2"]], "pycompilerflags (c struct)": [[65, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[65, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[65, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[65, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[65, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[65, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[65, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[65, "c.PyEval_MergeCompilerFlags"]], "pyos_inputhook (c var)": [[65, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[65, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[65, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[65, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[65, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[65, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[65, "c.PyRun_File"]], "pyrun_fileex (c function)": [[65, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[65, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[65, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[65, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[65, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[65, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[65, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[65, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[65, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[65, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[65, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[65, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[65, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[65, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[65, "c.Py_BytesMain"]], "py_compilestring (c function)": [[65, "c.Py_CompileString"]], "py_compilestring()": [[65, "index-0"], [65, "index-1"], [65, "index-2"]], "py_compilestringexflags (c function)": [[65, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[65, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[65, "c.Py_CompileStringObject"]], "py_main (c function)": [[65, "c.Py_Main"]], "py_eval_input (c var)": [[65, "c.Py_eval_input"]], "py_file_input (c var)": [[65, "c.Py_file_input"]], "py_single_input (c var)": [[65, "c.Py_single_input"]], "pyobject_clearweakrefs (c function)": [[66, "c.PyObject_ClearWeakRefs"]], "pyweakref_check (c function)": [[66, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[66, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[66, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[66, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[66, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[66, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[66, "c.PyWeakref_NewRef"]], "pep 3101": [[67, "index-23"], [342, "index-0"], [342, "index-1"], [464, "index-9"], [466, "index-23"], [466, "index-24"], [480, "index-23"]], "rfc": [[67, "index-0"], [99, "index-0"], [100, "index-0"], [100, "index-1"], [100, "index-2"], [100, "index-3"], [100, "index-4"], [100, "index-5"], [107, "index-1"], [107, "index-2"], [107, "index-5"], [124, "index-3"], [124, "index-4"], [141, "index-10"], [141, "index-11"], [141, "index-12"], [141, "index-15"], [141, "index-16"], [141, "index-3"], [141, "index-4"], [141, "index-5"], [141, "index-6"], [141, "index-7"], [141, "index-8"], [141, "index-9"], [144, "index-1"], [144, "index-2"], [144, "index-3"], [155, "index-10"], [155, "index-11"], [155, "index-12"], [155, "index-13"], [155, "index-14"], [155, "index-6"], [155, "index-7"], [155, "index-8"], [155, "index-9"], [172, "index-6"], [191, "index-0"], [191, "index-1"], [191, "index-2"], [191, "index-3"], [191, "index-4"], [191, "index-5"], [191, "index-6"], [191, "index-7"], [193, "index-0"], [193, "index-1"], [193, "index-10"], [193, "index-11"], [193, "index-2"], [193, "index-3"], [193, "index-4"], [193, "index-5"], [193, "index-6"], [193, "index-7"], [193, "index-8"], [193, "index-9"], [194, "index-0"], [196, "index-0"], [197, "index-0"], [198, "index-0"], [198, "index-1"], [199, "index-0"], [199, "index-1"], [199, "index-10"], [199, "index-11"], [199, "index-12"], [199, "index-13"], [199, "index-2"], [199, "index-3"], [199, "index-4"], [199, "index-5"], [199, "index-6"], [199, "index-7"], [199, "index-8"], [199, "index-9"], [200, "index-0"], [200, "index-1"], [200, "index-10"], [200, "index-11"], [200, "index-12"], [200, "index-13"], [200, "index-14"], [200, "index-2"], [200, "index-3"], [200, "index-4"], [200, "index-5"], [200, "index-6"], [200, "index-7"], [200, "index-8"], [200, "index-9"], [202, "index-0"], [202, "index-1"], [202, "index-10"], [202, "index-2"], [202, "index-3"], [202, "index-4"], [202, "index-5"], [202, "index-6"], [202, "index-7"], [202, "index-8"], [202, "index-9"], [204, "index-0"], [204, "index-1"], [205, "index-0"], [205, "index-1"], [205, "index-2"], [205, "index-3"], [205, "index-4"], [205, "index-5"], [205, "index-6"], [205, "index-7"], [205, "index-8"], [205, "index-9"], [206, "index-0"], [206, "index-1"], [206, "index-10"], [206, "index-2"], [206, "index-3"], [206, "index-4"], [206, "index-5"], [206, "index-6"], [206, "index-7"], [206, "index-8"], [206, "index-9"], [220, "index-13"], [220, "index-14"], [220, "index-15"], [220, "index-16"], [220, "index-17"], [220, "index-18"], [227, "index-9"], [232, "index-1"], [232, "index-3"], [232, "index-5"], [234, "index-2"], [238, "index-152"], [238, "index-153"], [238, "index-154"], [238, "index-155"], [238, "index-156"], [238, "index-157"], [238, "index-158"], [238, "index-159"], [238, "index-160"], [238, "index-161"], [238, "index-162"], [238, "index-163"], [238, "index-164"], [238, "index-165"], [238, "index-166"], [238, "index-167"], [238, "index-168"], [238, "index-169"], [238, "index-170"], [238, "index-171"], [238, "index-172"], [238, "index-173"], [238, "index-174"], [238, "index-175"], [238, "index-176"], [238, "index-177"], [238, "index-178"], [238, "index-179"], [238, "index-180"], [238, "index-181"], [238, "index-182"], [238, "index-183"], [238, "index-184"], [238, "index-185"], [238, "index-186"], [238, "index-187"], [238, "index-188"], [238, "index-189"], [238, "index-190"], [238, "index-191"], [238, "index-192"], [238, "index-193"], [238, "index-194"], [238, "index-195"], [238, "index-196"], [238, "index-197"], [238, "index-198"], [238, "index-199"], [238, "index-200"], [238, "index-201"], [238, "index-202"], [238, "index-203"], [238, "index-204"], [238, "index-205"], [238, "index-206"], [238, "index-207"], [238, "index-208"], [238, "index-209"], [238, "index-210"], [238, "index-211"], [238, "index-212"], [238, "index-213"], [238, "index-214"], [238, "index-215"], [238, "index-216"], [238, "index-217"], [238, "index-218"], [238, "index-219"], [238, "index-220"], [238, "index-221"], [238, "index-222"], [238, "index-223"], [238, "index-224"], [238, "index-225"], [238, "index-226"], [238, "index-76"], [239, "index-2"], [239, "index-3"], [239, "index-4"], [239, "index-5"], [239, "index-6"], [239, "index-7"], [240, "index-0"], [240, "index-1"], [240, "index-10"], [240, "index-11"], [240, "index-12"], [240, "index-13"], [240, "index-14"], [240, "index-15"], [240, "index-16"], [240, "index-17"], [240, "index-18"], [240, "index-19"], [240, "index-2"], [240, "index-20"], [240, "index-21"], [240, "index-22"], [240, "index-23"], [240, "index-24"], [240, "index-25"], [240, "index-3"], [240, "index-4"], [240, "index-5"], [240, "index-6"], [240, "index-7"], [240, "index-8"], [240, "index-9"], [241, "index-0"], [241, "index-1"], [241, "index-2"], [241, "index-3"], [241, "index-4"], [241, "index-5"], [241, "index-6"], [241, "index-7"], [242, "index-1"], [242, "index-2"], [245, "index-1"], [245, "index-2"], [245, "index-3"], [245, "index-4"], [245, "index-5"], [245, "index-6"], [245, "index-7"], [245, "index-8"], [251, "index-0"], [253, "index-0"], [256, "index-0"], [256, "index-1"], [256, "index-10"], [256, "index-11"], [256, "index-12"], [256, "index-13"], [256, "index-2"], [256, "index-3"], [256, "index-4"], [256, "index-5"], [256, "index-6"], [256, "index-7"], [256, "index-8"], [256, "index-9"], [259, "index-0"], [259, "index-1"], [259, "index-2"], [259, "index-3"], [259, "index-4"], [263, "index-4"], [263, "index-5"], [266, "index-0"], [268, "index-0"], [269, "index-1"], [269, "index-2"], [285, "index-10"], [285, "index-2"], [285, "index-3"], [285, "index-4"], [285, "index-5"], [285, "index-6"], [285, "index-7"], [285, "index-8"], [285, "index-9"], [302, "index-1"], [302, "index-2"], [302, "index-3"], [302, "index-4"], [302, "index-5"], [302, "index-6"], [314, "index-10"], [314, "index-11"], [314, "index-12"], [314, "index-9"], [324, "index-1"], [332, "index-1"], [332, "index-10"], [332, "index-11"], [332, "index-12"], [332, "index-2"], [332, "index-3"], [332, "index-4"], [332, "index-5"], [332, "index-6"], [332, "index-7"], [332, "index-8"], [332, "index-9"], [334, "index-15"], [334, "index-3"], [338, "index-10"], [338, "index-11"], [338, "index-12"], [338, "index-13"], [338, "index-16"], [338, "index-17"], [338, "index-18"], [338, "index-19"], [338, "index-20"], [338, "index-21"], [338, "index-22"], [338, "index-5"], [338, "index-6"], [338, "index-7"], [338, "index-8"], [338, "index-9"], [343, "index-0"], [343, "index-1"], [355, "index-2"], [355, "index-3"], [362, "index-10"], [362, "index-19"], [362, "index-20"], [362, "index-21"], [362, "index-22"], [389, "index-2"], [390, "index-1"], [390, "index-10"], [390, "index-11"], [390, "index-16"], [390, "index-17"], [390, "index-2"], [390, "index-3"], [390, "index-4"], [390, "index-5"], [390, "index-6"], [390, "index-7"], [390, "index-8"], [390, "index-9"], [391, "index-10"], [391, "index-19"], [391, "index-20"], [391, "index-21"], [391, "index-5"], [391, "index-6"], [391, "index-7"], [391, "index-8"], [394, "index-0"], [394, "index-1"], [394, "index-10"], [394, "index-11"], [394, "index-2"], [394, "index-3"], [394, "index-4"], [403, "index-10"], [403, "index-5"], [404, "index-2"], [404, "index-3"], [404, "index-4"], [404, "index-5"], [415, "index-0"], [447, "index-3"], [460, "index-17"], [460, "index-18"], [460, "index-19"], [460, "index-20"], [460, "index-21"], [462, "index-18"], [463, "index-22"], [463, "index-23"], [464, "index-22"], [464, "index-23"], [465, "index-10"], [465, "index-11"], [465, "index-13"], [471, "index-11"], [471, "index-12"], [471, "index-13"], [471, "index-7"], [471, "index-8"], [472, "index-26"], [472, "index-27"], [474, "index-31"], [474, "index-32"], [474, "index-33"], [474, "index-34"], [474, "index-35"], [474, "index-36"], [474, "index-37"], [474, "index-38"], [474, "index-39"], [474, "index-40"], [474, "index-41"], [474, "index-42"], [474, "index-43"], [474, "index-44"], [474, "index-51"], [476, "index-34"], [476, "index-35"], [478, "index-22"], [479, "index-176"], [479, "index-217"], [479, "index-31"], [479, "index-32"], [479, "index-33"], [479, "index-42"], [479, "index-83"], [479, "index-90"], [479, "index-92"]], "rfc 4122": [[67, "index-0"], [251, "index-0"], [253, "index-0"], [394, "index-0"], [394, "index-1"], [394, "index-10"], [394, "index-11"], [394, "index-2"], [394, "index-3"], [394, "index-4"], [463, "index-22"], [463, "index-23"]], "pep 427": [[69, "index-3"]], "pypi": [[69, "index-1"]], "python package index (pypi)": [[69, "index-1"]], "\uff08\u8acb\u898b python package index (pypi)\uff09": [[69, "index-1"]], "pyinit_modulename (c function)": [[70, "c.PyInit_modulename"]], "philbrick, geoff": [[72, "index-4"]], "pyarg_parsetuple()": [[72, "index-2"]], "pyarg_parsetupleandkeywords()": [[72, "index-3"]], "pyobject_callobject()": [[72, "index-1"]], "pyerr_fetch()": [[74, "index-1"]], "pyerr_restore()": [[74, "index-1"]], "deallocation": [[74, "index-0"]], "deallocation, object": [[74, "index-0"]], "finalization": [[74, "index-0"]], "finalization, of objects": [[74, "index-0"]], "object representation\uff08\u7269\u4ef6\u8868\u793a\uff09": [[74, "index-3"]], "pep 572": [[77, "index-2"], [423, "index-24"], [426, "index-21"], [426, "index-87"], [470, "index-19"], [477, "index-24"], [477, "index-31"], [479, "index-192"], [479, "index-205"], [479, "index-215"], [479, "index-29"]], "pep 5": [[79, "index-8"], [459, "index-6"]], "pep 6": [[79, "index-6"]], "pep 602": [[79, "index-7"], [478, "index-10"]], "tcl_library": [[80, "index-4"]], "tk_library": [[80, "index-5"]], "pep 8": [[84, "index-0"], [84, "index-2"], [85, "index-2"], [89, "index-2"], [222, "index-10"], [426, "index-79"], [437, "index-18"], [453, "index-0"], [466, "index-21"], [479, "index-240"], [479, "index-302"]], "argument\uff08\u5f15\u6578\uff09": [[84, "index-1"], [86, "term-argument"], [423, "index-31"], [424, "index-32"], [426, "index-47"]], "parameter\uff08\u53c3\u6578\uff09": [[84, "index-1"], [86, "term-parameter"], [423, "index-27"], [423, "index-31"], [426, "index-48"]], "\u8207 argument\uff08\u5f15\u6578\uff09\u7684\u5dee\u7570": [[84, "index-1"]], "\u8207 parameter\uff08\u53c3\u6578\uff09\u7684\u5dee\u7570": [[84, "index-1"]], "...": [[86, "term-..."], [165, "index-0"], [190, "index-0"], [190, "index-3"], [304, "index-0"], [318, "index-0"], [341, "index-66"], [349, "index-27"], [360, "index-0"], [424, "index-8"]], "2to3": [[86, "term-2to3"]], ">>>": [[86, "term-0"], [190, "index-0"], [349, "index-27"]], "bdfl": [[86, "term-BDFL"]], "cpython": [[86, "term-CPython"]], "eafp": [[86, "term-EAFP"]], "gil": [[86, "term-GIL"]], "idle": [[86, "term-IDLE"], [244, "index-0"]], "lbyl": [[86, "term-LBYL"]], "mro": [[86, "term-MRO"]], "pep": [[86, "term-PEP"]], "pep 1": [[86, "index-103"], [458, "index-0"], [458, "index-1"]], "pep 278": [[86, "index-109"], [461, "index-9"]], "pep 302": [[86, "index-90"], [86, "index-99"], [222, "index-14"], [247, "index-12"], [247, "index-13"], [247, "index-14"], [247, "index-16"], [247, "index-2"], [262, "index-1"], [299, "index-0"], [299, "index-2"], [299, "index-3"], [299, "index-5"], [299, "index-6"], [299, "index-7"], [321, "index-1"], [349, "index-25"], [349, "index-26"], [419, "index-2"], [428, "index-1"], [428, "index-18"], [461, "index-17"], [461, "index-18"], [461, "index-19"], [461, "index-6"], [463, "index-21"], [467, "index-2"], [472, "index-20"], [472, "index-21"], [472, "index-37"]], "pep 3116": [[86, "index-110"], [464, "index-14"], [467, "index-3"]], "pep 3155": [[86, "index-106"], [472, "index-15"]], "pep 343": [[86, "index-86"], [111, "index-26"], [166, "index-2"], [423, "index-17"], [424, "index-104"], [463, "index-10"], [463, "index-14"], [464, "index-3"]], "pep 362": [[86, "index-101"], [86, "index-79"], [252, "index-0"], [472, "index-17"]], "pep 411": [[86, "index-105"], [349, "index-13"], [349, "index-14"], [349, "index-31"], [349, "index-32"]], "pep 420": [[86, "index-100"], [86, "index-104"], [86, "index-91"], [247, "index-5"], [428, "index-14"], [428, "index-15"], [428, "index-19"], [428, "index-2"], [428, "index-20"], [428, "index-21"], [428, "index-6"], [472, "index-2"], [472, "index-3"], [479, "index-282"], [479, "index-289"]], "pep 443": [[86, "index-95"], [473, "index-11"], [473, "index-36"]], "pep 483": [[86, "index-96"], [382, "index-1"], [382, "index-3"], [474, "index-12"]], "pep 484": [[86, "index-107"], [86, "index-108"], [86, "index-111"], [86, "index-77"], [86, "index-94"], [86, "index-97"], [120, "index-2"], [120, "index-3"], [120, "index-5"], [120, "index-6"], [341, "index-57"], [382, "index-0"], [382, "index-109"], [382, "index-2"], [382, "index-26"], [382, "index-27"], [382, "index-41"], [382, "index-54"], [423, "index-37"], [424, "index-92"], [432, "index-17"], [437, "index-17"], [468, "index-101"], [468, "index-103"], [468, "index-99"], [469, "index-94"], [469, "index-95"], [470, "index-11"], [470, "index-12"], [470, "index-14"], [474, "index-10"], [474, "index-11"], [475, "index-5"], [476, "index-20"], [477, "index-10"], [477, "index-12"]], "pep 492": [[86, "index-80"], [86, "index-81"], [86, "index-83"], [86, "index-84"], [86, "index-85"], [86, "index-87"], [86, "index-88"], [158, "index-3"], [252, "index-1"], [252, "index-2"], [423, "index-50"], [424, "index-108"], [426, "index-30"], [474, "index-1"], [474, "index-2"], [474, "index-47"], [474, "index-52"], [475, "index-35"], [475, "index-9"], [479, "index-245"], [479, "index-279"], [479, "index-290"], [479, "index-294"]], "pep 498": [[86, "index-89"], [431, "index-26"], [475, "index-3"], [475, "index-4"], [479, "index-286"]], "pep 519": [[86, "index-102"], [475, "index-16"], [479, "index-270"], [479, "index-275"], [479, "index-276"], [479, "index-277"], [479, "index-278"], [479, "index-281"]], "pep 525": [[86, "index-82"], [158, "index-2"], [252, "index-3"], [349, "index-30"], [349, "index-43"], [426, "index-29"], [475, "index-10"], [479, "index-263"]], "pep 526": [[86, "index-112"], [86, "index-78"], [120, "index-4"], [120, "index-7"], [178, "index-1"], [178, "index-2"], [382, "index-34"], [382, "index-4"], [382, "index-48"], [382, "index-50"], [423, "index-38"], [432, "index-16"], [468, "index-107"], [475, "index-33"], [475, "index-6"], [476, "index-1"], [477, "index-11"], [479, "index-264"]], "pep 585": [[86, "index-98"], [158, "index-0"], [341, "index-58"], [381, "index-5"], [382, "index-59"], [382, "index-6"], [382, "index-61"], [382, "index-62"], [382, "index-63"], [382, "index-64"], [382, "index-65"], [382, "index-66"], [382, "index-67"], [382, "index-68"], [382, "index-69"], [382, "index-70"], [382, "index-71"], [382, "index-72"], [382, "index-73"], [382, "index-74"], [382, "index-75"], [382, "index-76"], [382, "index-77"], [382, "index-78"], [382, "index-79"], [382, "index-80"], [382, "index-81"], [382, "index-82"], [382, "index-83"], [382, "index-84"], [382, "index-85"], [382, "index-86"], [382, "index-87"], [382, "index-88"], [382, "index-89"], [382, "index-90"], [382, "index-91"], [382, "index-92"], [382, "index-93"], [382, "index-95"], [382, "index-96"], [382, "index-97"], [382, "index-98"], [382, "index-99"], [478, "index-13"], [478, "index-2"], [479, "index-30"], [479, "index-80"], [479, "index-84"]], "python 3000": [[86, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[86, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[86, "term-Zen-of-Python"]], "__future__": [[86, "term-__future__"], [111, "module-__future__"], [432, "index-40"]], "__slots__": [[86, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[86, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[86, "term-annotation"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[86, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[86, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[86, "term-asynchronous-generator"], [424, "index-39"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[86, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[86, "term-asynchronous-iterator"], [424, "index-39"]], "attribute\uff08\u5c6c\u6027\uff09": [[86, "term-attribute"], [424, "index-45"], [424, "index-46"], [424, "index-49"], [424, "index-5"], [424, "index-50"], [426, "index-39"], [432, "index-23"], [432, "index-4"], [432, "index-8"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[86, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u5236\u6a94\u6848\uff09": [[86, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[86, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[86, "term-bytecode"], [424, "index-55"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[86, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[86, "term-callable"], [424, "index-32"], [426, "index-47"]], "callback\uff08\u56de\u547c\uff09": [[86, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[86, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[86, "term-class"], [423, "index-40"], [424, "index-45"], [424, "index-46"], [424, "index-49"], [424, "index-70"], [424, "index-88"], [426, "index-54"], [432, "index-24"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[86, "term-context-manager"], [341, "index-54"], [424, "index-103"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[86, "term-context-variable"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[86, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[86, "term-coroutine"], [424, "index-107"], [424, "index-38"], [426, "index-24"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[86, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[86, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[86, "term-dictionary-view"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[86, "term-docstring"], [423, "index-40"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[86, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[86, "term-expression"], [423, "index-35"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[86, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[86, "term-f-string"], [431, "index-25"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[86, "term-file-object"], [222, "index-5"], [255, "index-0"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[86, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[86, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[86, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[86, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[86, "term-function-annotation"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[86, "term-garbage-collection"], [424, "index-2"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[86, "index-20"], [86, "term-generator-expression"], [426, "index-22"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[86, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[86, "index-19"], [86, "term-generator"], [424, "index-37"], [424, "index-57"], [426, "index-22"], [426, "index-23"], [426, "index-31"], [432, "index-26"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[86, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[86, "term-generic-type"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[86, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[86, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[86, "term-immutable"]], "import path\uff08\u5f15\u5165\u8def\u5f91\uff09": [[86, "term-import-path"]], "importer\uff08\u5f15\u5165\u5668\uff09": [[86, "term-importer"]], "importing\uff08\u5f15\u5165\uff09": [[86, "term-importing"], [432, "index-34"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[86, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[86, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[86, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[86, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[86, "term-iterator"], [341, "index-18"], [432, "index-26"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[86, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[86, "term-keyword-argument"]], "lambda": [[86, "term-lambda"], [423, "index-35"], [426, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-list-comprehension"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[86, "term-loader"], [428, "index-8"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[86, "term-locale-encoding"]], "magic": [[86, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[86, "term-magic-method"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[86, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[86, "term-metaclass"], [424, "index-83"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[86, "term-method-resolution-order"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[86, "term-module-spec"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[86, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[86, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[86, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[86, "term-namespace"], [424, "index-34"], [424, "index-43"], [425, "index-3"], [428, "index-5"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[86, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[86, "term-new-style-class"]], "package\uff08\u5957\u4ef6\uff09": [[86, "term-package"], [331, "index-4"], [428, "index-3"], [428, "index-4"], [428, "index-5"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[86, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[86, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[86, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[86, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[86, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[86, "term-portion"], [428, "index-5"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[86, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[86, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[86, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[86, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[86, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[86, "term-regular-package"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[86, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[86, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[86, "term-slice"], [188, "index-1"], [341, "index-20"], [341, "index-24"], [424, "index-16"], [424, "index-22"], [424, "index-66"], [424, "index-96"], [426, "index-44"], [432, "index-12"]], "special": [[86, "index-34"], [424, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[86, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[86, "term-statement"], [210, "index-0"], [210, "index-1"], [210, "index-3"], [222, "index-13"], [331, "index-2"], [341, "index-1"], [341, "index-24"], [341, "index-52"], [423, "index-0"], [423, "index-13"], [423, "index-15"], [423, "index-16"], [423, "index-18"], [423, "index-28"], [423, "index-3"], [423, "index-4"], [423, "index-4"], [423, "index-40"], [423, "index-46"], [423, "index-48"], [423, "index-49"], [423, "index-5"], [423, "index-6"], [423, "index-6"], [423, "index-7"], [423, "index-9"], [424, "index-103"], [424, "index-22"], [424, "index-42"], [424, "index-64"], [424, "index-71"], [432, "index-0"], [432, "index-1"], [432, "index-14"], [432, "index-15"], [432, "index-18"], [432, "index-20"], [432, "index-21"], [432, "index-22"], [432, "index-24"], [432, "index-26"], [432, "index-27"], [432, "index-30"], [432, "index-30"], [432, "index-33"], [432, "index-33"], [432, "index-34"], [432, "index-4"], [432, "index-40"], [432, "index-43"], [432, "index-45"], [432, "index-47"], [437, "index-0"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[86, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[86, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[86, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[86, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[86, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[86, "term-type-hint"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[86, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[86, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[86, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[86, "term-virtual-machine"]], "pep 604": [[87, "index-0"], [341, "index-60"], [382, "index-11"], [468, "index-100"], [468, "index-85"], [479, "index-115"], [479, "index-156"]], "--converters": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters"]], "--force": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"]], "--help": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [120, "cmdoption-ast-h"], [231, "cmdoption-gzip-h"], [259, "cmdoption-json.tool-h"], [337, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [363, "cmdoption-timeit-h"], [374, "cmdoption-tokenize-h"], [376, "cmdoption-trace-help"], [394, "cmdoption-uuid-h"], [417, "cmdoption-zipapp-h"], [451, "cmdoption-help"]], "--make": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make"]], "--output": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [297, "cmdoption-pickletools-o"], [417, "cmdoption-zipapp-o"]], "--srcdir": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir"]], "--verbose": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"], [354, "cmdoption-tarfile-v"], [363, "cmdoption-timeit-v"], [384, "cmdoption-unittest-discover-v"]], "-f": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"], [160, "cmdoption-compileall-f"], [376, "cmdoption-trace-f"], [384, "cmdoption-unittest-f"]], "-h": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [120, "cmdoption-ast-h"], [231, "cmdoption-gzip-h"], [259, "cmdoption-json.tool-h"], [337, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [363, "cmdoption-timeit-h"], [374, "cmdoption-tokenize-h"], [394, "cmdoption-uuid-h"], [417, "cmdoption-zipapp-h"], [451, "cmdoption-h"]], "-o": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [160, "cmdoption-compileall-o"], [297, "cmdoption-pickletools-o"], [417, "cmdoption-zipapp-o"], [451, "cmdoption-O"]], "-v": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"], [337, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [354, "cmdoption-tarfile-v"], [363, "cmdoption-timeit-v"], [384, "cmdoption-unittest-discover-v"], [451, "cmdoption-V"], [451, "cmdoption-v"]], "./tools/clinic/clinic.py-[-h]-[-f]-[-o-output]-[-v]-\\-[--converters]-[--make]-[--srcdir-srcdir]-[file-...] \u547d\u4ee4\u5217\u9078\u9805": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-converters"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-f"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-h"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-make"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-o"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-srcdir"], [89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-v"]], "cconverter (clinic \u4e2d\u7684\u985e\u5225)": [[89, "clinic.CConverter"]], "file": [[89, "cmdoption-.-Tools-clinic-clinic.py-h-f-o-OUTPUT-v-converters-make-srcdir-SRCDIR-FILE-...-arg-FILE"], [160, "cmdoption-compileall-arg-file"], [231, "cmdoption-gzip-arg-file"]], "pep 257": [[89, "index-1"]], "pep 436": [[89, "index-0"], [473, "index-18"], [473, "index-48"], [473, "index-49"]], "pep 573": [[89, "index-5"], [478, "index-23"], [478, "index-6"], [479, "index-158"], [479, "index-163"]], "block": [[89, "term-block"], [425, "index-0"], [425, "index-1"]], "c_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.c_default"]], "c_ignored_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.c_ignored_default"]], "checksum": [[89, "term-checksum"]], "checksum line": [[89, "term-checksum-line"]], "clinic": [[89, "module-clinic"]], "converter (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.converter"]], "default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.default"]], "end line": [[89, "term-end-line"]], "impl_by_reference (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.impl_by_reference"]], "input": [[89, "term-input"]], "module": [[89, "module-clinic"], [110, "module-lib2to3"], [111, "module-__future__"], [112, "module-__main__"], [113, "module-_thread"], [114, "module-abc"], [115, "module-aifc"], [118, "module-argparse"], [119, "module-array"], [120, "module-ast"], [121, "module-asyncio"], [138, "module-atexit"], [139, "module-audioop"], [141, "module-base64"], [142, "module-bdb"], [144, "module-binascii"], [145, "module-bisect"], [146, "module-builtins"], [147, "module-bz2"], [148, "module-calendar"], [149, "module-cgi"], [150, "module-cgitb"], [151, "module-chunk"], [152, "module-cmath"], [153, "module-cmd"], [154, "module-code"], [155, "module-codecs"], [155, "module-encodings.idna"], [155, "module-encodings.mbcs"], [155, "module-encodings.utf_8_sig"], [156, "module-codeop"], [157, "module-collections"], [158, "module-collections.abc"], [159, "module-colorsys"], [160, "module-compileall"], [163, "module-concurrent.futures"], [164, "module-configparser"], [166, "module-contextlib"], [167, "module-contextvars"], [168, "module-copy"], [169, "module-copyreg"], [170, "module-crypt"], [172, "module-csv"], [173, "module-ctypes"], [174, "module-curses"], [174, "module-curses.textpad"], [175, "module-curses.ascii"], [176, "module-curses.panel"], [178, "module-dataclasses"], [180, "module-datetime"], [181, "module-dbm"], [181, "module-dbm.dumb"], [181, "module-dbm.gnu"], [181, "module-dbm.ndbm"], [183, "module-decimal"], [186, "module-tkinter.commondialog"], [186, "module-tkinter.filedialog"], [186, "module-tkinter.simpledialog"], [187, "module-difflib"], [188, "module-dis"], [190, "module-doctest"], [191, "module-email"], [192, "module-email.charset"], [194, "module-email.contentmanager"], [195, "module-email.encoders"], [196, "module-email.errors"], [198, "module-email.generator"], [199, "module-email.header"], [200, "module-email.headerregistry"], [201, "module-email.iterators"], [202, "module-email.message"], [203, "module-email.mime"], [204, "module-email.parser"], [205, "module-email.policy"], [206, "module-email.utils"], [207, "module-ensurepip"], [208, "module-enum"], [209, "module-errno"], [211, "module-faulthandler"], [212, "module-fcntl"], [213, "module-filecmp"], [215, "module-fileinput"], [217, "module-fnmatch"], [218, "module-fractions"], [220, "module-ftplib"], [223, "module-functools"], [224, "module-gc"], [225, "module-getopt"], [226, "module-getpass"], [227, "module-gettext"], [228, "module-glob"], [229, "module-graphlib"], [230, "module-grp"], [231, "module-gzip"], [232, "module-hashlib"], [233, "module-heapq"], [234, "module-hmac"], [235, "module-html"], [236, "module-html.entities"], [237, "module-html.parser"], [238, "module-http"], [239, "module-http.client"], [240, "module-http.cookiejar"], [241, "module-http.cookies"], [242, "module-http.server"], [244, "module-idlelib"], [245, "module-imaplib"], [246, "module-imghdr"], [247, "module-importlib"], [247, "module-importlib.abc"], [247, "module-importlib.machinery"], [247, "module-importlib.util"], [248, "module-importlib.metadata"], [249, "module-importlib.resources"], [250, "module-importlib.resources.abc"], [252, "module-inspect"], [255, "module-io"], [256, "module-ipaddress"], [258, "module-itertools"], [259, "module-json"], [259, "module-json.tool"], [260, "module-keyword"], [262, "module-linecache"], [263, "module-locale"], [264, "module-logging"], [265, "module-logging.config"], [266, "module-logging.handlers"], [267, "module-lzma"], [268, "module-mailbox"], [269, "module-mailcap"], [271, "module-marshal"], [272, "module-math"], [273, "module-mimetypes"], [275, "module-mmap"], [276, "module-modulefinder"], [278, "module-msilib"], [279, "module-msvcrt"], [280, "module-multiprocessing"], [280, "module-multiprocessing.connection"], [280, "module-multiprocessing.dummy"], [280, "module-multiprocessing.managers"], [280, "module-multiprocessing.pool"], [280, "module-multiprocessing.sharedctypes"], [281, "module-multiprocessing.shared_memory"], [283, "module-netrc"], [284, "module-nis"], [285, "module-nntplib"], [286, "module-numbers"], [288, "module-operator"], [289, "module-optparse"], [290, "module-os"], [291, "module-os.path"], [292, "module-ossaudiodev"], [293, "module-pathlib"], [294, "module-pdb"], [296, "module-pickle"], [297, "module-pickletools"], [298, "module-pipes"], [299, "module-pkgutil"], [300, "module-platform"], [301, "module-plistlib"], [302, "module-poplib"], [303, "module-posix"], [304, "module-pprint"], [305, "module-cProfile"], [305, "module-profile"], [305, "module-pstats"], [306, "module-pty"], [307, "module-pwd"], [308, "module-py_compile"], [309, "module-pyclbr"], [310, "module-pydoc"], [311, "module-xml.parsers.expat"], [311, "module-xml.parsers.expat.errors"], [311, "module-xml.parsers.expat.model"], [313, "module-queue"], [314, "module-quopri"], [315, "module-random"], [316, "module-re"], [317, "module-readline"], [318, "module-reprlib"], [319, "module-resource"], [320, "module-rlcompleter"], [321, "module-runpy"], [322, "module-sched"], [323, "module-secrets"], [325, "module-select"], [326, "module-selectors"], [327, "module-shelve"], [328, "module-shlex"], [329, "module-shutil"], [330, "module-signal"], [331, "module-site"], [332, "module-smtplib"], [333, "module-sndhdr"], [334, "module-socket"], [335, "module-socketserver"], [336, "module-spwd"], [337, "module-sqlite3"], [338, "module-ssl"], [339, "module-stat"], [340, "module-statistics"], [342, "module-string"], [343, "module-stringprep"], [344, "module-struct"], [345, "module-subprocess"], [346, "module-sunau"], [348, "module-symtable"], [349, "module-sys"], [351, "module-sysconfig"], [352, "module-syslog"], [353, "module-tabnanny"], [354, "module-tarfile"], [355, "module-telnetlib"], [356, "module-tempfile"], [357, "module-termios"], [358, "module-test"], [358, "module-test.support"], [358, "module-test.support.bytecode_helper"], [358, "module-test.support.import_helper"], [358, "module-test.support.os_helper"], [358, "module-test.support.script_helper"], [358, "module-test.support.socket_helper"], [358, "module-test.support.threading_helper"], [358, "module-test.support.warnings_helper"], [360, "module-textwrap"], [361, "module-threading"], [362, "module-time"], [363, "module-timeit"], [365, "module-tkinter"], [366, "module-tkinter.colorchooser"], [367, "module-tkinter.dnd"], [368, "module-tkinter.font"], [369, "module-tkinter.messagebox"], [370, "module-tkinter.scrolledtext"], [371, "module-tkinter.tix"], [372, "module-tkinter.ttk"], [373, "module-token"], [374, "module-tokenize"], [375, "module-tomllib"], [376, "module-trace"], [377, "module-traceback"], [378, "module-tracemalloc"], [379, "module-tty"], [380, "module-turtle"], [380, "module-turtledemo"], [381, "module-types"], [382, "module-typing"], [383, "module-unicodedata"], [384, "module-unittest"], [385, "module-unittest.mock"], [388, "module-urllib"], [389, "module-urllib.error"], [390, "module-urllib.parse"], [391, "module-urllib.request"], [391, "module-urllib.response"], [392, "module-urllib.robotparser"], [393, "module-uu"], [394, "module-uuid"], [395, "module-venv"], [396, "module-warnings"], [397, "module-wave"], [398, "module-weakref"], [399, "module-webbrowser"], [401, "module-winreg"], [402, "module-winsound"], [403, "module-wsgiref"], [403, "module-wsgiref.handlers"], [403, "module-wsgiref.headers"], [403, "module-wsgiref.simple_server"], [403, "module-wsgiref.types"], [403, "module-wsgiref.util"], [403, "module-wsgiref.validate"], [404, "module-xdrlib"], [405, "module-xml"], [406, "module-xml.dom"], [407, "module-xml.dom.minidom"], [408, "module-xml.dom.pulldom"], [409, "module-xml.etree.ElementTree"], [410, "module-xml.sax"], [411, "module-xml.sax.handler"], [412, "module-xml.sax.xmlreader"], [413, "module-xml.sax.saxutils"], [415, "module-xmlrpc.client"], [416, "module-xmlrpc.server"], [417, "module-zipapp"], [418, "module-zipfile"], [419, "module-zipimport"], [420, "module-zlib"], [421, "module-zoneinfo"]], "output": [[89, "term-output"], [432, "index-3"]], "parse_by_reference (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.parse_by_reference"]], "py_default (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.py_default"]], "start line": [[89, "term-start-line"]], "type (clinic.cconverter \u7684\u5c6c\u6027)": [[89, "clinic.CConverter.type"]], "pep 289": [[94, "index-4"], [462, "index-15"], [462, "index-2"]], "pep 342": [[94, "index-0"], [94, "index-2"], [158, "index-1"], [426, "index-27"], [463, "index-11"], [463, "index-31"], [463, "index-9"]], "rfc 3339": [[99, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[99, "logging.logging.Formatter.__init__"]], "rfc 3164": [[100, "index-5"]], "rfc 5424": [[100, "index-0"], [100, "index-2"], [100, "index-3"], [100, "index-4"], [266, "index-0"]], "rfc 5424#section-6": [[100, "index-1"]], "pep 263": [[106, "index-0"], [247, "index-1"], [374, "index-0"], [374, "index-1"], [461, "index-3"], [463, "index-19"], [479, "index-79"]], "rfc 2616": [[107, "index-1"], [107, "index-2"], [107, "index-5"], [389, "index-2"], [391, "index-10"], [391, "index-6"], [391, "index-7"], [403, "index-10"], [403, "index-5"], [471, "index-7"]], "http_proxy": [[107, "index-3"], [391, "index-18"], [391, "index-9"]], "cflags": [[108, "index-10"], [108, "index-9"], [452, "envvar-CFLAGS"], [452, "index-13"], [452, "index-14"], [452, "index-15"], [452, "index-16"], [452, "index-19"], [461, "index-25"]], "home": [[108, "index-4"], [108, "index-5"], [291, "index-16"], [291, "index-21"], [365, "index-1"], [477, "index-14"], [477, "index-21"], [479, "index-200"], [479, "index-201"]], "homedrive": [[108, "index-7"], [291, "index-19"]], "homepath": [[108, "index-8"], [291, "index-18"]], "userprofile": [[108, "index-6"], [291, "index-17"], [477, "index-13"], [477, "index-20"], [479, "index-199"]], "pep 617": [[110, "index-0"], [427, "index-0"], [468, "index-94"], [469, "index-115"], [470, "index-7"], [478, "index-14"], [478, "index-19"], [478, "index-7"], [479, "index-172"], [479, "index-89"]], "apply (2to3 fixer)": [[110, "to3fixer-apply"]], "asserts (2to3 fixer)": [[110, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[110, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[110, "to3fixer-buffer"]], "dict (2to3 fixer)": [[110, "to3fixer-dict"]], "except (2to3 fixer)": [[110, "to3fixer-except"]], "exec (2to3 fixer)": [[110, "to3fixer-exec"]], "execfile (2to3 fixer)": [[110, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[110, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[110, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[110, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[110, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[110, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[110, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[110, "to3fixer-idioms"]], "import (2to3 fixer)": [[110, "to3fixer-import"]], "imports (2to3 fixer)": [[110, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[110, "to3fixer-imports2"]], "input (2to3 fixer)": [[110, "to3fixer-input"]], "intern (2to3 fixer)": [[110, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[110, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[110, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[110, "to3fixer-itertools_imports"]], "lib2to3": [[110, "module-lib2to3"]], "long (2to3 fixer)": [[110, "to3fixer-long"]], "map (2to3 fixer)": [[110, "to3fixer-map"]], "metaclass (2to3 fixer)": [[110, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[110, "to3fixer-methodattrs"]], "ne (2to3 fixer)": [[110, "to3fixer-ne"]], "next (2to3 fixer)": [[110, "to3fixer-next"]], "nonzero (2to3 fixer)": [[110, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[110, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[110, "to3fixer-operator"]], "paren (2to3 fixer)": [[110, "to3fixer-paren"]], "print (2to3 fixer)": [[110, "to3fixer-print"]], "raise (2to3 fixer)": [[110, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[110, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[110, "to3fixer-reduce"]], "reload (2to3 fixer)": [[110, "to3fixer-reload"]], "renames (2to3 fixer)": [[110, "to3fixer-renames"]], "repr (2to3 fixer)": [[110, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[110, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[110, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[110, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[110, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[110, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[110, "to3fixer-types"]], "unicode (2to3 fixer)": [[110, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[110, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[110, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[110, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[110, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[110, "to3fixer-zip"]], "pep 227": [[111, "index-22"], [459, "index-2"], [460, "index-16"]], "pep 255": [[111, "index-23"], [426, "index-26"], [460, "index-8"], [460, "index-9"], [461, "index-1"], [461, "index-2"]], "pep 3105": [[111, "index-27"], [464, "index-10"], [466, "index-0"]], "pep 3112": [[111, "index-28"], [464, "index-12"]], "pep 328": [[111, "index-25"], [222, "index-15"], [247, "index-3"], [428, "index-23"], [462, "index-10"], [462, "index-17"], [463, "index-5"], [463, "index-6"], [466, "index-16"], [472, "index-36"]], "pep 479": [[111, "index-29"], [210, "index-5"], [210, "index-6"], [474, "index-17"], [474, "index-18"], [476, "index-37"], [479, "index-220"], [479, "index-228"], [479, "index-231"], [479, "index-253"], [479, "index-274"], [479, "index-288"]], "pep 563": [[111, "index-30"], [111, "index-31"], [382, "index-57"], [382, "index-60"], [423, "index-39"], [432, "index-41"], [469, "index-103"], [476, "index-2"], [479, "index-100"], [479, "index-133"]], "pep 649": [[111, "index-32"], [425, "index-11"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.LockType"]], "posix": [[113, "index-1"], [303, "module-posix"], [357, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.allocate_lock"]], "binary semaphores": [[113, "index-0"]], "error": [[113, "thread.error"], [139, "audioop.error"], [144, "binascii.Error"], [164, "configparser.Error"], [168, "copy.Error"], [172, "csv.Error"], [174, "curses.error"], [181, "dbm.dumb.error"], [181, "dbm.error"], [181, "dbm.gnu.error"], [181, "dbm.ndbm.error"], [225, "getopt.error"], [263, "locale.Error"], [268, "mailbox.Error"], [284, "nis.error"], [290, "os.error"], [311, "xml.parsers.expat.error"], [316, "re.error"], [319, "resource.error"], [325, "select.error"], [329, "shutil.Error"], [334, "socket.error"], [337, "sqlite3.Error"], [344, "struct.error"], [346, "sunau.Error"], [393, "uu.Error"], [397, "wave.Error"], [399, "webbrowser.Error"], [404, "xdrlib.Error"], [420, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.interrupt_main"]], "light-weight processes": [[113, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.locked"]], "processes, light-weight": [[113, "index-0"]], "pthreads": [[113, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[113, "thread.lock.release"]], "semaphores, binary": [[113, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[113, "thread.start_new_thread"]], "threads": [[113, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[114, "abc.ABCMeta"]], "pep 3141": [[114, "index-5"], [286, "index-2"], [464, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.__subclasshook__"]], "abc": [[114, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[114, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[114, "abc.update_abstractmethods"]], "a-law": [[115, "index-2"], [139, "index-1"], [333, "index-0"]], "aiff": [[115, "index-0"], [151, "index-0"]], "aiff-c": [[115, "index-0"], [151, "index-0"]], "audio interchange file format\uff08\u97f3\u8a0a\u4ea4\u63db\u6a94\u6848\u683c\u5f0f\uff09": [[115, "index-0"], [151, "index-0"]], "g.722": [[115, "index-2"]], "pep 594#aifc": [[115, "index-4"]], "aifc": [[115, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[115, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.tell"]], "u-law": [[115, "index-2"], [139, "index-1"], [333, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[115, "aifc.aifc.writeframesraw"]], "* \uff08\u661f\u865f\uff09": [[118, "index-1"], [120, "index-1"], [217, "index-2"], [228, "index-1"], [316, "index-3"], [341, "index-13"], [341, "index-36"], [341, "index-46"], [423, "index-32"], [426, "index-49"], [426, "index-65"], [426, "index-93"], [432, "index-37"], [432, "index-6"], [437, "index-3"]], "+ \uff08\u52a0\u865f\uff09": [[118, "index-2"], [190, "index-4"], [316, "index-4"], [341, "index-13"], [341, "index-37"], [341, "index-47"], [342, "index-4"], [426, "index-61"], [426, "index-69"]], "? \uff08\u554f\u865f\uff09": [[118, "index-0"], [120, "index-0"], [153, "index-0"], [155, "index-1"], [217, "index-2"], [228, "index-1"], [316, "index-5"], [337, "index-6"], [344, "index-2"], [344, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentDefaultsHelpFormatter"]], "argumenterror": [[118, "argparse.ArgumentError"], [173, "ctypes.ArgumentError"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.ArgumentParser"]], "argumenttypeerror": [[118, "argparse.ArgumentTypeError"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[118, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[118, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.get_default"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[118, "argparse.ArgumentParser.set_defaults"]], "\u65bc argparse \u6a21\u7d44\u4e2d": [[118, "index-0"], [118, "index-1"], [118, "index-2"]], "append() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.append"]], "array": [[119, "module-array"]], "array (array \u4e2d\u7684\u985e\u5225)": [[119, "array.array"]], "arrays\uff08\u9663\u5217\uff09": [[119, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[119, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[119, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[119, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[119, "array.typecodes"]], "--include-attributes": [[120, "cmdoption-ast-a"]], "--indent": [[120, "cmdoption-ast-indent"], [259, "cmdoption-json.tool-indent"]], "--mode": [[120, "cmdoption-ast-mode"]], "--no-type-comments": [[120, "cmdoption-ast-no-type-comments"]], "-a": [[120, "cmdoption-ast-a"], [297, "cmdoption-pickletools-a"]], "-i": [[120, "cmdoption-ast-i"], [160, "cmdoption-compileall-i"], [451, "cmdoption-I"], [451, "cmdoption-i"]], "-m": [[120, "cmdoption-ast-m"], [297, "cmdoption-pickletools-m"], [376, "cmdoption-trace-m"], [417, "cmdoption-zipapp-m"], [451, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Expr"]], "expression (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Expression"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FunctionDef"]], "functiontype (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.FunctionType"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.In"]], "interactive (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Interactive"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mod"]], "module (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Module"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Or"]], "paramspec (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.ParamSpec"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Try"]], "trystar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TryStar"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Tuple"]], "typealias (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeAlias"]], "typevar (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeVar"]], "typevartuple (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.TypeVarTuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.arguments"]], "ast": [[120, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[120, "cmdoption-ast-a"], [120, "cmdoption-ast-h"], [120, "cmdoption-ast-i"], [120, "cmdoption-ast-indent"], [120, "cmdoption-ast-m"], [120, "cmdoption-ast-mode"], [120, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.get_source_segment"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[120, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[120, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[120, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[120, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[120, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[120, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[120, "ast.NodeVisitor.visit"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[120, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[120, "ast.withitem"]], "\u65bc ast \u6587\u6cd5\u4e2d": [[120, "index-0"], [120, "index-1"]], "asyncio": [[121, "module-asyncio"]], "pythonasynciodebug": [[123, "index-2"], [124, "index-5"], [185, "index-5"], [451, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.Handle"]], "pep 567": [[124, "index-0"], [124, "index-1"], [124, "index-2"], [127, "index-2"], [167, "index-2"], [476, "index-28"], [476, "index-30"], [479, "index-223"], [479, "index-227"], [479, "index-232"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.ProactorEventLoop"]], "rfc 8305": [[124, "index-3"], [124, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[124, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.default_exception_handler"]], "get_context() (asyncio.handle \u7684\u65b9\u6cd5)": [[124, "asyncio.Handle.get_context"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[124, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.shutdown_default_executor"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recv_into"]], "sock_recvfrom() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recvfrom"]], "sock_recvfrom_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_recvfrom_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendfile"]], "sock_sendto() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.sock_sendto"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[124, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[124, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[124, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[124, "asyncio.TimerHandle.when"]], "cancellederror": [[125, "asyncio.CancelledError"], [163, "concurrent.futures.CancelledError"]], "incompletereaderror": [[125, "asyncio.IncompleteReadError"]], "invalidstateerror": [[125, "asyncio.InvalidStateError"], [163, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[125, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[125, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[125, "asyncio.TimeoutError"], [163, "concurrent.futures.TimeoutError"], [210, "TimeoutError"], [280, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[125, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[125, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[125, "asyncio.IncompleteReadError.partial"]], "__init__() (asyncio.future \u7684\u65b9\u6cd5)": [[126, "asyncio.Future.__init__"]], "__init__() (asyncio.task \u7684\u65b9\u6cd5)": [[126, "asyncio.Task.__init__"]], "_enter_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._enter_task"]], "_leave_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._leave_task"]], "_register_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._register_task"]], "_unregister_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio._unregister_task"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[127, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[127, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[127, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[130, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[130, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[130, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[131, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[131, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[131, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[131, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[131, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[131, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.Queue"]], "queueempty": [[132, "asyncio.QueueEmpty"]], "queuefull": [[132, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[132, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[132, "asyncio.Queue.task_done"]], "runner (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Runner"]], "close() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.close"]], "get_loop() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.get_loop"]], "run() (asyncio.runner \u7684\u65b9\u6cd5)": [[133, "asyncio.Runner.run"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[133, "asyncio.run"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.drain"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.start_server"]], "start_tls() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.start_tls"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[134, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[134, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[134, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[135, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[135, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[135, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[135, "asyncio.subprocess.Process.wait"]], "barrier (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Barrier"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.BoundedSemaphore"]], "brokenbarriererror": [[136, "asyncio.BrokenBarrierError"], [361, "threading.BrokenBarrierError"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.Semaphore"]], "abort() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.abort"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.acquire"]], "broken (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.broken"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.locked"]], "n_waiting (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.n_waiting"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.notify_all"]], "parties (asyncio.barrier \u7684\u5c6c\u6027)": [[136, "asyncio.Barrier.parties"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[136, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[136, "asyncio.Semaphore.release"]], "reset() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.reset"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.set"]], "wait() (asyncio.barrier \u7684\u65b9\u6cd5)": [[136, "asyncio.Barrier.wait"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[136, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[136, "asyncio.Condition.wait_for"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Task"]], "taskgroup (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.TaskGroup"]], "timeout (asyncio \u4e2d\u7684\u985e\u5225)": [[137, "asyncio.Timeout"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancelled"]], "cancelling() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.cancelling"]], "create_eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_eager_task_factory"]], "create_task() (asyncio.taskgroup \u7684\u65b9\u6cd5)": [[137, "asyncio.TaskGroup.create_task"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.done"]], "eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.eager_task_factory"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.exception"]], "expired() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.expired"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.gather"]], "get_context() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_context"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.get_stack"]], "iscoroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.iscoroutine"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.remove_done_callback"]], "reschedule() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.reschedule"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.result"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.sleep"]], "timeout() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.timeout"]], "timeout_at() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.timeout_at"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.to_thread"]], "uncancel() (asyncio.task \u7684\u65b9\u6cd5)": [[137, "asyncio.Task.uncancel"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.wait_for"]], "when() (asyncio.timeout \u7684\u65b9\u6cd5)": [[137, "asyncio.Timeout.when"]], "atexit": [[138, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[138, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[138, "atexit.unregister"]], "adpcm, intel/dvi": [[139, "index-1"]], "intel/dvi adpcm": [[139, "index-1"]], "pep 594#audioop": [[139, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.alaw2lin"]], "audioop": [[139, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[139, "audioop.ulaw2lin"]], "audit events\uff08\u7a3d\u6838\u4e8b\u4ef6\uff09": [[140, "index-0"]], "mime": [[141, "index-0"], [149, "index-0"], [273, "index-0"], [273, "index-1"], [314, "index-0"]], "rfc 1521": [[141, "index-12"], [314, "index-11"], [314, "index-9"]], "rfc 2045": [[141, "index-10"], [141, "index-4"], [141, "index-5"], [141, "index-9"], [191, "index-3"], [193, "index-4"], [193, "index-5"], [193, "index-6"], [193, "index-9"], [199, "index-4"], [200, "index-10"], [200, "index-9"], [202, "index-6"], [202, "index-7"], [202, "index-8"]], "rfc 4648": [[141, "index-11"], [141, "index-15"], [141, "index-16"], [141, "index-3"], [141, "index-6"], [141, "index-7"], [141, "index-8"], [324, "index-1"], [479, "index-92"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.b85encode"]], "base64": [[141, "index-0"], [141, "module-base64"], [144, "index-0"]], "base64 encoding\uff08base64 \u7de8\u78bc\uff09": [[141, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.encodebytes"]], "encoding\uff08\u7de8\u78bc\uff09": [[141, "index-0"], [314, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[141, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[142, "bdb.Bdb"]], "bdbquit": [[142, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[142, "bdb.Breakpoint"]], "bdb": [[142, "module-bdb"], [294, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[142, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.line"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[142, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[142, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[142, "bdb.Bdb.user_return"]], "incomplete": [[144, "binascii.Incomplete"]], "rfc 1522": [[144, "index-3"], [314, "index-10"], [314, "index-12"]], "rfc 3548": [[144, "index-1"], [144, "index-2"], [462, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_hex"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_hex"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.b2a_uu"]], "binascii": [[144, "module-binascii"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.hexlify"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[144, "binascii.unhexlify"]], "uu": [[144, "index-0"], [393, "module-uu"]], "bisect": [[145, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[145, "bisect.insort_right"]], "builtins": [[146, "module-builtins"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[147, "bz2.BZ2File"]], "bz2": [[147, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.eof"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[147, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[147, "bz2.BZ2File.peek"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[147, "bz2.BZ2Decompressor.unused_data"]], "april (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.APRIL"]], "august (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.AUGUST"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Calendar"]], "december (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.DECEMBER"]], "day (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Day"]], "february (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.FEBRUARY"]], "friday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.FRIDAY"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.HTMLCalendar"]], "january (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.JANUARY"]], "july (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.JULY"]], "june (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.JUNE"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.LocaleTextCalendar"]], "march (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.MARCH"]], "may (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.MAY"]], "monday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.MONDAY"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.MONDAY"]], "month (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.Month"]], "november (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.NOVEMBER"]], "october (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.OCTOBER"]], "saturday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.SATURDAY"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.SATURDAY"]], "september (calendar.month \u7684\u5c6c\u6027)": [[148, "calendar.Month.SEPTEMBER"]], "sunday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.SUNDAY"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.SUNDAY"]], "thursday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.THURSDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.THURSDAY"]], "tuesday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.TUESDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[148, "calendar.TextCalendar"]], "wednesday (calendar.day \u7684\u5c6c\u6027)": [[148, "calendar.Day.WEDNESDAY"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.WEDNESDAY"]], "calendar": [[148, "module-calendar"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[148, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.formatmonth"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.leapdays"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[148, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.timegm"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[148, "calendar.weekheader"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[148, "calendar.Calendar.yeardayscalendar"]], "cgi": [[149, "index-0"], [149, "index-2"], [149, "index-5"], [149, "module-cgi"], [150, "index-0"]], "common gateway interface\uff08\u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\uff09": [[149, "index-0"]], "http": [[149, "index-0"], [238, "index-0"], [238, "module-http"], [239, "index-0"], [242, "index-0"], [391, "index-11"], [391, "index-12"]], "pep 594#cgi": [[149, "index-8"]], "url\uff08\u7d71\u4e00\u8cc7\u6e90\u5b9a\u4f4d\u5668\uff09": [[149, "index-0"], [242, "index-0"], [390, "index-0"], [392, "index-0"]], "www": [[149, "index-0"], [242, "index-0"], [253, "index-0"], [390, "index-0"], [392, "index-0"]], "debugging\uff08\u9664\u932f\uff09": [[149, "index-5"], [294, "index-0"], [432, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[149, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[149, "cgi.FieldStorage.getlist"]], "headers\uff08\u6a19\u982d\uff09": [[149, "index-0"], [273, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.print_form"]], "protocol\uff08\u5354\u5b9a\uff09": [[149, "index-0"], [220, "index-0"], [238, "index-0"], [239, "index-0"], [242, "index-0"], [245, "index-0"], [285, "index-0"], [296, "index-5"], [302, "index-0"], [332, "index-0"], [341, "index-18"], [341, "index-54"], [355, "index-0"], [391, "index-11"], [391, "index-12"]], "security\uff08\u5b89\u5168\uff09": [[149, "index-2"], [242, "index-3"]], "server\uff08\u4f3a\u670d\u5668\uff09": [[149, "index-0"], [242, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[149, "cgi.test"]], "pep 594#cgitb": [[150, "index-4"]], "cgitb": [[150, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.enable"]], "excepthook() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[150, "index-2"]], "exceptions\uff08\u4f8b\u5916\uff09": [[150, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.html"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[150, "cgitb.text"]], "tracebacks\uff08\u56de\u6eaf\uff09": [[150, "index-0"]], "\u65bc cgi \u8173\u672c\u4e2d": [[150, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[151, "chunk.Chunk"]], "pep 594#chunk": [[151, "index-3"]], "rmff": [[151, "index-0"]], "real media file format\uff08real media \u6a94\u6848\u683c\u5f0f\uff09": [[151, "index-0"]], "chunk": [[151, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[151, "chunk.Chunk.tell"]], "pep 485": [[152, "index-0"], [272, "index-0"], [474, "index-19"], [474, "index-20"], [479, "index-295"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.atanh"]], "cmath": [[152, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.log10"]], "math\uff08\u6578\u5b78\uff09": [[152, "index-1"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[152, "cmath.tau"]], "! \uff08\u9a5a\u5606\u865f\uff09": [[153, "index-0"], [175, "index-0"], [217, "index-2"], [228, "index-1"], [342, "index-2"], [344, "index-1"], [431, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[153, "cmd.Cmd"]], "cmd": [[153, "module-cmd"], [294, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.cmdqueue"]], "columnize() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.columnize"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.default"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.identchars"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[153, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[153, "cmd.Cmd.use_rawinput"]], "\u65bc command interpreter\uff08\u6307\u4ee4\u76f4\u8b6f\u5668\uff09\u4e2d": [[153, "index-0"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[154, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[154, "code.InteractiveInterpreter"]], "code": [[154, "module-code"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[154, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[154, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[154, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[154, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[154, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[154, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[154, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[154, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[154, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[154, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[154, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.BOM_UTF8"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.CodecInfo"]], "codecs": [[155, "index-0"], [155, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.IncrementalEncoder"]], "rfc 3490": [[155, "index-13"], [155, "index-14"], [155, "index-6"], [155, "index-8"]], "rfc 3490#section-3.1": [[155, "index-12"]], "rfc 3492": [[155, "index-7"], [155, "index-9"]], "rfc 5891": [[155, "index-10"]], "rfc 5895": [[155, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[155, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[155, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[155, "encodings.idna.ToUnicode"]], "unicode": [[155, "index-0"], [383, "index-0"], [424, "index-19"]], "\\ \uff08\u53cd\u659c\u7dda\uff09": [[155, "index-1"], [290, "index-48"], [316, "index-12"], [316, "index-26"], [316, "index-9"], [431, "index-23"]], "\\n": [[155, "index-3"], [316, "index-37"], [316, "index-37"], [431, "index-23"], [431, "index-23"]], "\\u": [[155, "index-1"], [155, "index-1"], [316, "index-37"], [316, "index-37"], [431, "index-23"], [431, "index-23"]], "\\x": [[155, "index-1"], [316, "index-37"], [431, "index-23"]], "backslashreplace": [[155, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.backslashreplace_errors"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[155, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.decode"]], "decode\uff08\u89e3\u78bc\uff09": [[155, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[155, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.encode"]], "encode\uff08\u7de8\u78bc\uff09": [[155, "index-0"]], "encodings.idna": [[155, "module-encodings.idna"]], "encodings.mbcs": [[155, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[155, "module-encodings.utf_8_sig"]], "error handler's name\uff08\u932f\u8aa4\u8655\u7406\u5668\u540d\u7a31\uff09": [[155, "index-1"], [155, "index-3"], [155, "index-4"]], "escape sequence\uff08\u8df3\u812b\u5e8f\u5217\uff09": [[155, "index-1"], [155, "index-3"], [431, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.getwriter"]], "ignore": [[155, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[155, "encodings.idna.nameprep"]], "namereplace": [[155, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[155, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[155, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[155, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.register_error"]], "replace": [[155, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.replace_errors"]], "replacement character\uff08\u66ff\u4ee3\u5b57\u5143\uff09": [[155, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[155, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[155, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[155, "codecs.IncrementalEncoder.setstate"]], "stackable\uff08\u53ef\u5806\u758a\uff09": [[155, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.streamreader"]], "streams\uff08\u4e32\u6d41\uff09": [[155, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[155, "codecs.CodecInfo.streamwriter"]], "strict": [[155, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.strict_errors"]], "surrogateescape": [[155, "index-1"]], "surrogatepass": [[155, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[155, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[155, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[155, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[155, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[156, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[156, "codeop.Compile"]], "codeop": [[156, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[156, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.OrderedDict"]], "pep 468": [[157, "index-10"], [475, "index-24"], [479, "index-258"]], "pep 584": [[157, "index-11"], [157, "index-8"], [157, "index-9"], [290, "index-6"], [290, "index-7"], [381, "index-6"], [398, "index-1"], [398, "index-4"], [478, "index-1"], [478, "index-11"], [479, "index-173"], [479, "index-174"], [479, "index-175"], [479, "index-187"], [479, "index-188"], [479, "index-189"], [479, "index-190"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[157, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[157, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[157, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[157, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[157, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[157, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.clear"]], "collections": [[157, "module-collections"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[157, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[157, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[157, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[157, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[157, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[157, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[157, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[157, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[157, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[157, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[157, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[157, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[157, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[157, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Awaitable"]], "buffer (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Buffer"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.MutableSet"]], "pep 688": [[158, "index-4"], [424, "index-106"], [470, "index-1"], [470, "index-9"], [479, "index-9"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[158, "collections.abc.ValuesView"]], "collections.abc": [[158, "module-collections.abc"]], "colorsys": [[159, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[159, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[160, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[160, "cmdoption-compileall-invalidation-mode"]], "-b": [[160, "cmdoption-compileall-b"], [384, "cmdoption-unittest-b"], [451, "cmdoption-B"], [451, "cmdoption-b"]], "-d": [[160, "cmdoption-compileall-d"], [231, "cmdoption-gzip-d"], [451, "cmdoption-d"]], "-e": [[160, "cmdoption-compileall-e"], [354, "cmdoption-tarfile-e"], [374, "cmdoption-tokenize-e"], [418, "cmdoption-zipfile-e"], [451, "cmdoption-E"]], "-j": [[160, "cmdoption-compileall-j"], [451, "cmdoption-J"]], "-l": [[160, "cmdoption-compileall-l"], [297, "cmdoption-pickletools-l"], [354, "cmdoption-tarfile-l"], [376, "cmdoption-trace-l"], [418, "cmdoption-zipfile-l"]], "-p": [[160, "cmdoption-compileall-p"], [297, "cmdoption-pickletools-p"], [363, "cmdoption-timeit-p"], [384, "cmdoption-unittest-discover-p"], [417, "cmdoption-zipapp-p"], [451, "cmdoption-P"]], "-q": [[160, "cmdoption-compileall-q"], [308, "cmdoption-python-m-py_compile-q"], [451, "cmdoption-q"]], "-r": [[160, "cmdoption-compileall-r"], [363, "cmdoption-timeit-r"], [376, "cmdoption-trace-R"], [376, "cmdoption-trace-r"], [451, "cmdoption-R"]], "-s": [[160, "cmdoption-compileall-s"], [363, "cmdoption-timeit-s"], [376, "cmdoption-trace-s"], [384, "cmdoption-unittest-discover-s"], [451, "cmdoption-S"], [451, "cmdoption-s"]], "-x": [[160, "cmdoption-compileall-x"], [451, "cmdoption-X"], [451, "cmdoption-x"]], "source_date_epoch": [[160, "index-1"], [308, "index-3"], [308, "index-6"], [308, "index-7"], [476, "index-31"], [479, "index-218"], [479, "index-234"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[160, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[160, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[160, "compileall.compile_path"]], "compileall": [[160, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[160, "cmdoption-compileall-arg-directory"], [160, "cmdoption-compileall-arg-file"], [160, "cmdoption-compileall-b"], [160, "cmdoption-compileall-d"], [160, "cmdoption-compileall-e"], [160, "cmdoption-compileall-f"], [160, "cmdoption-compileall-hardlink-dupes"], [160, "cmdoption-compileall-i"], [160, "cmdoption-compileall-invalidation-mode"], [160, "cmdoption-compileall-j"], [160, "cmdoption-compileall-l"], [160, "cmdoption-compileall-o"], [160, "cmdoption-compileall-p"], [160, "cmdoption-compileall-q"], [160, "cmdoption-compileall-r"], [160, "cmdoption-compileall-s"], [160, "cmdoption-compileall-x"]], "directory": [[160, "cmdoption-compileall-arg-directory"]], "brokenexecutor": [[163, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[163, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[163, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[163, "concurrent.futures.Executor"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[163, "concurrent.futures.Future"]], "pep 3148": [[163, "index-2"], [471, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[163, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[163, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[163, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[163, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[163, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[163, "concurrent.futures.wait"]], "$ \uff08\u91d1\u9322\u7b26\u865f\uff09": [[164, "index-2"], [291, "index-9"], [316, "index-2"], [342, "index-13"]], "% \uff08\u767e\u5206\u865f\uff09": [[164, "index-1"], [180, "index-0"], [291, "index-9"], [341, "index-13"], [341, "index-35"], [341, "index-45"], [362, "index-11"], [362, "index-9"], [401, "index-0"], [426, "index-68"]], ".ini": [[164, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[164, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[164, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[164, "configparser.ConfigParser"]], "duplicateoptionerror": [[164, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[164, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[164, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[164, "configparser.InterpolationDepthError"]], "interpolationerror": [[164, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[164, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[164, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[164, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[164, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[164, "configparser.NoOptionError"]], "nosectionerror": [[164, "configparser.NoSectionError"]], "parsingerror": [[164, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[164, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[164, "configparser.ConfigParser.SECTCRE"]], "windows ini file\uff08windows ini \u6a94\u6848\uff09": [[164, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[164, "configparser.RawConfigParser.add_section"]], "configparser": [[164, "module-configparser"]], "configuration\uff08\u8a2d\u5b9a\uff09": [[164, "index-0"], [294, "index-2"], [331, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.has_section"]], "ini file\uff08ini \u6a94\u6848\uff09": [[164, "index-0"]], "interpolation in configuration files\uff08\u8a2d\u5b9a\u6a94\u4e2d\u7684\u63d2\u503c\uff09": [[164, "index-1"], [164, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.read_string"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[164, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[164, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[165, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[165, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[165, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[165, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[165, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[165, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[165, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[165, "credits"]], "ellipsis literal\uff08\u522a\u7bc0\u865f\uff09": [[165, "index-0"], [341, "index-66"], [424, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[165, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[165, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[165, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[166, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.ExitStack.callback"]], "chdir() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.chdir"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.closing"]], "contextlib": [[166, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[166, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[166, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[167, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[167, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[167, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[167, "contextvars.Token"]], "contextvars": [[167, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[167, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[167, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[167, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[167, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[167, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[167, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[167, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[167, "contextvars.Token.var"]], "__copy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[168, "index-1"]], "__deepcopy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[168, "index-1"]], "copy": [[168, "module-copy"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[168, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[168, "copy.deepcopy"]], "pickle": [[168, "index-0"], [169, "index-0"], [271, "index-0"], [296, "module-pickle"], [327, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[169, "copyreg.constructor"]], "copyreg": [[169, "module-copyreg"]], "copy\uff08\u8907\u88fd\uff09": [[169, "index-0"], [244, "index-4"], [296, "index-5"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[169, "copyreg.pickle"]], "des": [[170, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[170, "index-1"]], "cipher": [[170, "index-0"]], "crypt": [[170, "module-crypt"], [307, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.crypt"]], "crypt(3)": [[170, "index-0"], [170, "index-2"], [170, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[170, "crypt.mksalt"]], "cryptography\uff08\u5bc6\u78bc\u5b78\uff09": [[171, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.DictWriter"]], "pep 305": [[172, "index-7"], [461, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_NONNUMERIC"]], "quote_notnull (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_NOTNULL"]], "quote_strings (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.QUOTE_STRINGS"]], "rfc 4180": [[172, "index-6"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[172, "csv.csvreader.__next__"]], "csv": [[172, "index-0"], [172, "module-csv"]], "csv.reader \u51fd\u5f0f": [[172, "index-3"]], "data\uff08\u8cc7\u6599\uff09": [[172, "index-0"], [344, "index-0"], [424, "index-0"], [424, "index-4"], [426, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[172, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[172, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.field_size_limit"]], "fieldnames (csv.dictreader \u7684\u5c6c\u6027)": [[172, "csv.DictReader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[172, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[172, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[172, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[172, "csv.Dialect.strict"]], "tabular\uff08\u8868\u683c\uff09": [[172, "index-0"]], "universal newlines": [[172, "index-3"], [222, "index-7"], [247, "index-15"], [255, "index-4"], [255, "index-5"], [341, "index-34"], [341, "index-44"], [345, "index-1"], [461, "index-8"], [462, "index-7"], [463, "index-20"], [464, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[172, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[172, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[172, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[172, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[172, "csv.csvwriter.writerows"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.BigEndianStructure"]], "bigendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.BigEndianUnion"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.LittleEndianStructure"]], "littleendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.LittleEndianUnion"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[173, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.POINTER"], [173, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[173, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[173, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[173, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[173, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[173, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[173, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[173, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[173, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[173, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[173, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[173, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[173, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_ssize_t"]], "c_time_t (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_time_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[173, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.create_unicode_buffer"]], "ctypes": [[173, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[173, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[173, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[173, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[173, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[173, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[173, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[173, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[173, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[173, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[173, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[173, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[173, "ctypes.wstring_at"]], "acs_bbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BBSS"]], "acs_block (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BLOCK"]], "acs_board (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BOARD"]], "acs_bsbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BSBS"]], "acs_bssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BSSB"]], "acs_bsss (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BSSS"]], "acs_btee (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BTEE"]], "acs_bullet (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_BULLET"]], "acs_ckboard (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_CKBOARD"]], "acs_darrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_DARROW"]], "acs_degree (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_DEGREE"]], "acs_diamond (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_DIAMOND"]], "acs_gequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_GEQUAL"]], "acs_hline (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_HLINE"]], "acs_lantern (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LANTERN"]], "acs_larrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LARROW"]], "acs_lequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LEQUAL"]], "acs_llcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LLCORNER"]], "acs_lrcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LRCORNER"]], "acs_ltee (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_LTEE"]], "acs_nequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_NEQUAL"]], "acs_pi (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_PI"]], "acs_plminus (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_PLMINUS"]], "acs_plus (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_PLUS"]], "acs_rarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_RARROW"]], "acs_rtee (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_RTEE"]], "acs_s1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_S1"]], "acs_s3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_S3"]], "acs_s7 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_S7"]], "acs_s9 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_S9"]], "acs_sbbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SBBS"]], "acs_sbsb (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SBSB"]], "acs_sbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SBSS"]], "acs_ssbb (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SSBB"]], "acs_ssbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SSBS"]], "acs_sssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SSSB"]], "acs_ssss (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_SSSS"]], "acs_sterling (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_STERLING"]], "acs_ttee (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_TTEE"]], "acs_uarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_UARROW"]], "acs_ulcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_ULCORNER"]], "acs_urcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_URCORNER"]], "acs_vline (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ACS_VLINE"]], "a_altcharset (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_ALTCHARSET"]], "a_attributes (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_ATTRIBUTES"]], "a_blink (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_BLINK"]], "a_bold (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_BOLD"]], "a_chartext (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_CHARTEXT"]], "a_color (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_COLOR"]], "a_dim (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_DIM"]], "a_horizontal (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_HORIZONTAL"]], "a_invis (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_INVIS"]], "a_italic (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_ITALIC"]], "a_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_LEFT"]], "a_low (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_LOW"]], "a_normal (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_NORMAL"]], "a_protect (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_PROTECT"]], "a_reverse (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_REVERSE"]], "a_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_RIGHT"]], "a_standout (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_STANDOUT"]], "a_top (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_TOP"]], "a_underline (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_UNDERLINE"]], "a_vertical (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.A_VERTICAL"]], "button_alt (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTON_ALT"]], "button_ctrl (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTON_CTRL"]], "button_shift (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTON_SHIFT"]], "buttonn_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTONn_CLICKED"]], "buttonn_double_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTONn_DOUBLE_CLICKED"]], "buttonn_pressed (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTONn_PRESSED"]], "buttonn_released (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTONn_RELEASED"]], "buttonn_triple_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.BUTTONn_TRIPLE_CLICKED"]], "colors (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLORS"]], "color_black (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_BLACK"]], "color_blue (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_BLUE"]], "color_cyan (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_CYAN"]], "color_green (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_GREEN"]], "color_magenta (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_MAGENTA"]], "color_pairs (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_PAIRS"]], "color_red (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_RED"]], "color_white (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_WHITE"]], "color_yellow (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLOR_YELLOW"]], "cols (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.COLS"]], "columns": [[174, "index-4"], [174, "index-6"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ERR"]], "key_a1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_A1"]], "key_a3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_A3"]], "key_b2 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_B2"]], "key_backspace (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_BACKSPACE"]], "key_beg (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_BEG"]], "key_break (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_BREAK"]], "key_btab (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_BTAB"]], "key_c1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_C1"]], "key_c3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_C3"]], "key_cancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CANCEL"]], "key_catab (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CATAB"]], "key_clear (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CLEAR"]], "key_close (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CLOSE"]], "key_command (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_COMMAND"]], "key_copy (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_COPY"]], "key_create (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CREATE"]], "key_ctab (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_CTAB"]], "key_dc (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_DC"]], "key_dl (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_DL"]], "key_down (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_DOWN"]], "key_eic (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_EIC"]], "key_end (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_END"]], "key_enter (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_ENTER"]], "key_eol (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_EOL"]], "key_eos (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_EOS"]], "key_exit (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_EXIT"]], "key_f0 (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_F0"]], "key_find (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_FIND"]], "key_fn (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_Fn"]], "key_help (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_HELP"]], "key_home (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_HOME"]], "key_ic (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_IC"]], "key_il (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_IL"]], "key_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_LEFT"]], "key_ll (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_LL"]], "key_mark (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MARK"]], "key_max (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MAX"]], "key_message (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MESSAGE"]], "key_min (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MIN"]], "key_mouse (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MOUSE"]], "key_move (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_MOVE"]], "key_next (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_NEXT"]], "key_npage (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_NPAGE"]], "key_open (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_OPEN"]], "key_options (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_OPTIONS"]], "key_ppage (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_PPAGE"]], "key_previous (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_PREVIOUS"]], "key_print (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_PRINT"]], "key_redo (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_REDO"]], "key_reference (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_REFERENCE"]], "key_refresh (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_REFRESH"]], "key_replace (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_REPLACE"]], "key_reset (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_RESET"]], "key_resize (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_RESIZE"]], "key_restart (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_RESTART"]], "key_resume (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_RESUME"]], "key_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_RIGHT"]], "key_save (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SAVE"]], "key_sbeg (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SBEG"]], "key_scancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SCANCEL"]], "key_scommand (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SCOMMAND"]], "key_scopy (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SCOPY"]], "key_screate (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SCREATE"]], "key_sdc (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SDC"]], "key_sdl (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SDL"]], "key_select (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SELECT"]], "key_send (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SEND"]], "key_seol (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SEOL"]], "key_sexit (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SEXIT"]], "key_sf (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SF"]], "key_sfind (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SFIND"]], "key_shelp (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SHELP"]], "key_shome (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SHOME"]], "key_sic (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SIC"]], "key_sleft (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SLEFT"]], "key_smessage (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SMESSAGE"]], "key_smove (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SMOVE"]], "key_snext (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SNEXT"]], "key_soptions (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SOPTIONS"]], "key_sprevious (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SPREVIOUS"]], "key_sprint (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SPRINT"]], "key_sr (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SR"]], "key_sredo (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SREDO"]], "key_sreplace (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SREPLACE"]], "key_sreset (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SRESET"]], "key_sright (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SRIGHT"]], "key_srsume (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SRSUME"]], "key_ssave (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SSAVE"]], "key_ssuspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SSUSPEND"]], "key_stab (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_STAB"]], "key_sundo (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SUNDO"]], "key_suspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_SUSPEND"]], "key_undo (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_UNDO"]], "key_up (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.KEY_UP"]], "lines": [[174, "index-0"], [174, "index-3"], [174, "index-5"]], "lines (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.LINES"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.OK"]], "term": [[174, "index-1"], [174, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[174, "curses.textpad.Textbox"]], "__version__ (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.__version__"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.curs_set"]], "curses": [[174, "module-curses"]], "curses.textpad": [[174, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[174, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[174, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[174, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[174, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[174, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[174, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[174, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[174, "curses.wrapper"]], "ack (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ACK"]], "bel (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.BEL"]], "bs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.BS"]], "can (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.CAN"]], "cr (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.CR"]], "dc1 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DC1"]], "dc2 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DC2"]], "dc3 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DC3"]], "dc4 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DC4"]], "del (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DEL"]], "dle (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.DLE"]], "em (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.EM"]], "enq (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ENQ"]], "eot (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.EOT"]], "esc (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ESC"]], "etb (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ETB"]], "etx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ETX"]], "ff (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.FF"]], "fs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.FS"]], "gs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.GS"]], "ht (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.HT"]], "lf (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.LF"]], "nak (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.NAK"]], "nl (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.NL"]], "nul (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.NUL"]], "rs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.RS"]], "si (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SI"]], "so (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SO"]], "soh (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SOH"]], "sp (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SP"]], "stx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.STX"]], "sub (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SUB"]], "syn (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.SYN"]], "tab (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.TAB"]], "us (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.US"]], "vt (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.VT"]], "^ \uff08\u63d2\u5165\u7b26\u865f\uff09": [[175, "index-0"], [190, "index-1"], [316, "index-1"], [316, "index-13"], [341, "index-16"], [342, "index-3"], [377, "index-1"], [426, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ctrl"]], "curses.ascii": [[175, "module-curses.ascii"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[175, "curses.ascii.unctrl"]], "\u65bc curses \u6a21\u7d44\u4e2d": [[175, "index-0"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[176, "curses.panel.bottom_panel"]], "curses.panel": [[176, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[176, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[176, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[176, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[176, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[178, "dataclasses.Field"]], "frozeninstanceerror": [[178, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.MISSING"]], "pep 557": [[178, "index-0"], [476, "index-29"]], "__post_init__() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.__post_init__"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.dataclass"]], "dataclasses": [[178, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[178, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[180, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[180, "datetime.MINYEAR"]], "utc (\u65bc datetime \u6a21\u7d44\u4e2d)": [[180, "datetime.UTC"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.date"]], "datetime": [[180, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.datetime"]], "datetime format\uff08\u65e5\u671f\u6642\u9593\u683c\u5f0f\uff09": [[180, "index-0"], [362, "index-11"], [362, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[180, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[180, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[180, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[180, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[180, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[180, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[180, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[180, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[180, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[180, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[180, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[180, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[180, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[180, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[180, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[180, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[180, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[180, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[180, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[180, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[180, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[181, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[181, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[181, "dbm.ndbm.ndbm.close"]], "databases\uff08\u8cc7\u6599\u5eab\uff09": [[181, "index-0"]], "dbm": [[181, "module-dbm"]], "dbm.dumb": [[181, "module-dbm.dumb"]], "dbm.gnu": [[181, "module-dbm.gnu"], [327, "index-1"], [424, "index-31"]], "dbm.ndbm": [[181, "module-dbm.ndbm"], [327, "index-1"], [424, "index-31"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[181, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[181, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[181, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[181, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[181, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[181, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[181, "dbm.ndbm.open"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[181, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[181, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[181, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[181, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[183, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.create_decimal_from_float"]], "decimal": [[183, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[183, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[183, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[183, "decimal.Context.to_sci_string"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[186, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[186, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[186, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[186, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[186, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[186, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[186, "module-tkinter.commondialog"]], "tkinter.filedialog": [[186, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[186, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[187, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[187, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[187, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[187, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[187, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.diff_bytes"]], "difflib": [[187, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[187, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[187, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[187, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[187, "difflib.unified_diff"]], "before_async_with (opcode)": [[188, "opcode-BEFORE_ASYNC_WITH"]], "before_with (opcode)": [[188, "opcode-BEFORE_WITH"]], "binary_op (opcode)": [[188, "opcode-BINARY_OP"]], "binary_slice (opcode)": [[188, "opcode-BINARY_SLICE"]], "binary_subscr (opcode)": [[188, "opcode-BINARY_SUBSCR"]], "build_const_key_map (opcode)": [[188, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[188, "opcode-BUILD_LIST"]], "build_map (opcode)": [[188, "opcode-BUILD_MAP"]], "build_set (opcode)": [[188, "opcode-BUILD_SET"]], "build_slice (opcode)": [[188, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[188, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[188, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[188, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Bytecode.first_line"]], "cache (opcode)": [[188, "opcode-CACHE"]], "call (opcode)": [[188, "opcode-CALL"]], "call_function_ex (opcode)": [[188, "opcode-CALL_FUNCTION_EX"]], "call_intrinsic_1 (opcode)": [[188, "opcode-CALL_INTRINSIC_1"]], "call_intrinsic_2 (opcode)": [[188, "opcode-CALL_INTRINSIC_2"]], "check_eg_match (opcode)": [[188, "opcode-CHECK_EG_MATCH"]], "check_exc_match (opcode)": [[188, "opcode-CHECK_EXC_MATCH"]], "cleanup_throw (opcode)": [[188, "opcode-CLEANUP_THROW"]], "compare_op (opcode)": [[188, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[188, "opcode-CONTAINS_OP"]], "copy (opcode)": [[188, "opcode-COPY"]], "copy_free_vars (opcode)": [[188, "opcode-COPY_FREE_VARS"]], "delete_attr (opcode)": [[188, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[188, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[188, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[188, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[188, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[188, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[188, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[188, "opcode-DICT_UPDATE"]], "end_async_for (opcode)": [[188, "opcode-END_ASYNC_FOR"]], "end_for (opcode)": [[188, "opcode-END_FOR"]], "extended_arg (opcode)": [[188, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[188, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[188, "opcode-FOR_ITER"]], "get_aiter (opcode)": [[188, "opcode-GET_AITER"]], "get_anext (opcode)": [[188, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[188, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[188, "opcode-GET_ITER"]], "get_len (opcode)": [[188, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[188, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[188, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[188, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[188, "opcode-IMPORT_NAME"]], "is_op (opcode)": [[188, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[188, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.opname"]], "instruction.positions (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.positions"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Instruction.starts_line"]], "jump (opcode)": [[188, "opcode-JUMP"]], "jump_backward (opcode)": [[188, "opcode-JUMP_BACKWARD"]], "jump_backward_no_interrupt (opcode)": [[188, "opcode-JUMP_BACKWARD_NO_INTERRUPT"]], "jump_forward (opcode)": [[188, "opcode-JUMP_FORWARD"]], "jump_no_interrupt (opcode)": [[188, "opcode-JUMP_NO_INTERRUPT"]], "kw_names (opcode)": [[188, "opcode-KW_NAMES"]], "list_append (opcode)": [[188, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[188, "opcode-LIST_EXTEND"]], "load_assertion_error (opcode)": [[188, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[188, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[188, "opcode-LOAD_BUILD_CLASS"]], "load_closure (opcode)": [[188, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[188, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[188, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[188, "opcode-LOAD_FAST"]], "load_fast_and_clear (opcode)": [[188, "opcode-LOAD_FAST_AND_CLEAR"]], "load_fast_check (opcode)": [[188, "opcode-LOAD_FAST_CHECK"]], "load_from_dict_or_deref (opcode)": [[188, "opcode-LOAD_FROM_DICT_OR_DEREF"]], "load_from_dict_or_globals (opcode)": [[188, "opcode-LOAD_FROM_DICT_OR_GLOBALS"]], "load_global (opcode)": [[188, "opcode-LOAD_GLOBAL"]], "load_locals (opcode)": [[188, "opcode-LOAD_LOCALS"]], "load_method (opcode)": [[188, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[188, "opcode-LOAD_NAME"]], "load_super_attr (opcode)": [[188, "opcode-LOAD_SUPER_ATTR"]], "make_cell (opcode)": [[188, "opcode-MAKE_CELL"]], "make_function (opcode)": [[188, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[188, "opcode-MAP_ADD"]], "match_class (opcode)": [[188, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[188, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[188, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[188, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[188, "opcode-NOP"]], "pep 626": [[188, "index-0"], [468, "index-84"], [470, "index-29"], [479, "index-40"]], "pop_block (opcode)": [[188, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[188, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[188, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_none (opcode)": [[188, "opcode-POP_JUMP_IF_NONE"]], "pop_jump_if_not_none (opcode)": [[188, "opcode-POP_JUMP_IF_NOT_NONE"]], "pop_jump_if_true (opcode)": [[188, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[188, "opcode-POP_TOP"]], "push_exc_info (opcode)": [[188, "opcode-PUSH_EXC_INFO"]], "push_null (opcode)": [[188, "opcode-PUSH_NULL"]], "positions (dis \u4e2d\u7684\u985e\u5225)": [[188, "dis.Positions"]], "positions.col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Positions.col_offset"]], "positions.end_col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Positions.end_col_offset"]], "positions.end_lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Positions.end_lineno"]], "positions.lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.Positions.lineno"]], "raise_varargs (opcode)": [[188, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[188, "opcode-RERAISE"]], "resume (opcode)": [[188, "opcode-RESUME"]], "return_const (opcode)": [[188, "opcode-RETURN_CONST"]], "return_generator (opcode)": [[188, "opcode-RETURN_GENERATOR"]], "return_value (opcode)": [[188, "opcode-RETURN_VALUE"]], "send (opcode)": [[188, "opcode-SEND"]], "setup_annotations (opcode)": [[188, "opcode-SETUP_ANNOTATIONS"]], "setup_cleanup (opcode)": [[188, "opcode-SETUP_CLEANUP"]], "setup_finally (opcode)": [[188, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[188, "opcode-SETUP_WITH"]], "set_add (opcode)": [[188, "opcode-SET_ADD"]], "set_update (opcode)": [[188, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[188, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[188, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[188, "opcode-STORE_FAST"]], "store_global (opcode)": [[188, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[188, "opcode-STORE_NAME"]], "store_slice (opcode)": [[188, "opcode-STORE_SLICE"]], "store_subscr (opcode)": [[188, "opcode-STORE_SUBSCR"]], "swap (opcode)": [[188, "opcode-SWAP"]], "unary_invert (opcode)": [[188, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[188, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[188, "opcode-UNARY_NOT"]], "unpack_ex (opcode)": [[188, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[188, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[188, "opcode-WITH_EXCEPT_START"]], "yield_value (opcode)": [[188, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.code_info"]], "dis": [[188, "module-dis"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[188, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[188, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.get_instructions"]], "hasarg (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasarg"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasconst"]], "hasexc (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasexc"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[188, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.show_code"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[188, "dis.stack_effect"]], "# \uff08\u4e95\u5b57\u865f\uff09": [[190, "index-4"], [316, "index-38"], [331, "index-2"], [341, "index-37"], [341, "index-47"], [342, "index-7"], [431, "index-4"], [431, "index-5"]], "- \uff08\u6e1b\u865f\uff09": [[190, "index-4"], [217, "index-2"], [228, "index-1"], [316, "index-11"], [341, "index-13"], [341, "index-37"], [341, "index-47"], [342, "index-4"], [426, "index-60"], [426, "index-70"]], "<blankline>": [[190, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.DocTest"]], "doctestfailure": [[190, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[190, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.SKIP"]], "unexpectedexception": [[190, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[190, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.docstring"]], "doctest": [[190, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[190, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[190, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[190, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.exc_msg"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[190, "doctest.DocTestFailure.got"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.indent"]], "interpreter prompt\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[190, "index-0"], [349, "index-27"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.lineno"]], "marker\uff08\u6a19\u8a18\uff09": [[190, "index-1"], [377, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[190, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[190, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[190, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[190, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[190, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[190, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[190, "doctest.Example.want"]], "\u65bc doctests \u4e2d": [[190, "index-3"], [190, "index-4"]], "rfc 2046": [[191, "index-4"], [194, "index-0"], [199, "index-5"]], "rfc 2047": [[191, "index-5"], [199, "index-11"], [199, "index-13"], [199, "index-6"], [199, "index-8"], [200, "index-1"], [200, "index-4"], [200, "index-6"], [205, "index-3"], [205, "index-4"], [206, "index-1"], [471, "index-11"], [471, "index-8"]], "rfc 2183": [[191, "index-6"], [193, "index-11"], [202, "index-10"]], "rfc 2231": [[191, "index-7"], [193, "index-10"], [193, "index-2"], [193, "index-3"], [193, "index-7"], [193, "index-8"], [199, "index-7"], [202, "index-4"], [202, "index-5"], [202, "index-9"], [206, "index-5"], [206, "index-6"], [206, "index-7"], [206, "index-8"], [206, "index-9"]], "rfc 2821": [[191, "index-0"]], "rfc 5322": [[191, "index-1"], [193, "index-0"], [196, "index-0"], [198, "index-0"], [198, "index-1"], [200, "index-0"], [200, "index-11"], [200, "index-12"], [200, "index-14"], [200, "index-2"], [200, "index-3"], [200, "index-5"], [200, "index-7"], [200, "index-8"], [202, "index-0"], [202, "index-2"], [204, "index-0"], [205, "index-0"], [205, "index-1"], [205, "index-2"], [205, "index-5"], [205, "index-6"], [205, "index-9"], [332, "index-11"]], "rfc 6532": [[191, "index-2"], [202, "index-1"], [204, "index-1"], [205, "index-7"], [474, "index-31"]], "email": [[191, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[192, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[192, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[192, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[192, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.body_encoding"]], "email.charset": [[192, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[192, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[192, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[193, "email.message.Message"]], "rfc 2822": [[193, "index-1"], [199, "index-0"], [199, "index-10"], [199, "index-12"], [199, "index-2"], [199, "index-3"], [199, "index-9"], [206, "index-0"], [206, "index-10"], [206, "index-2"], [206, "index-3"], [206, "index-4"], [239, "index-2"], [242, "index-2"], [268, "index-0"], [362, "index-10"], [362, "index-22"], [447, "index-3"], [460, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[193, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[193, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[193, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[193, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[194, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[194, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[194, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[194, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[194, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[194, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[194, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[194, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[194, "email.contentmanager.set_content"]], "email.encoders": [[195, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[195, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[195, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[195, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[195, "email.encoders.encode_quopri"]], "boundaryerror": [[196, "email.errors.BoundaryError"]], "headerparseerror": [[196, "email.errors.HeaderParseError"]], "messageerror": [[196, "email.errors.MessageError"]], "messageparseerror": [[196, "email.errors.MessageParseError"]], "multipartconversionerror": [[196, "email.errors.MultipartConversionError"]], "email.errors": [[196, "module-email.errors"]], "rfc 822": [[197, "index-0"], [199, "index-1"], [227, "index-9"], [239, "index-6"], [332, "index-10"], [332, "index-12"], [332, "index-6"], [332, "index-9"], [362, "index-19"], [362, "index-20"], [460, "index-21"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[198, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[198, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[198, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[198, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[198, "email.generator.Generator.clone"]], "email.generator": [[198, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[198, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[198, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[198, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[198, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[199, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[199, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[199, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[199, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[199, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[199, "email.header.decode_header"]], "email.header": [[199, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[199, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[199, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[200, "index-13"], [472, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[200, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Address.domain"]], "email.headerregistry": [[200, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[200, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[200, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[200, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[201, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[201, "email.iterators.body_line_iterator"]], "email.iterators": [[201, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[201, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[202, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[202, "email.message.MIMEPart"]], "rfc 6531": [[202, "index-3"], [205, "index-8"], [332, "index-3"], [474, "index-32"], [474, "index-38"], [474, "index-39"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[202, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.del_param"]], "email.message": [[202, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[202, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[202, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[202, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[203, "email.mime.text.MIMEText"]], "email.mime": [[203, "module-email.mime"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[204, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[204, "email.parser.BytesFeedParser.close"]], "email.parser": [[204, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[204, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[204, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[204, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[204, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[204, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[204, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[204, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[204, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[204, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[205, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[205, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[205, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[205, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.default"]], "email.policy": [[205, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[205, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[205, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[205, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[205, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[205, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[205, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[205, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[205, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[205, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[205, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[205, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[205, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[205, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.decode_rfc2231"]], "email.utils": [[206, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[206, "email.utils.unquote"]], "pep 453": [[207, "index-0"], [465, "index-22"], [465, "index-23"], [465, "index-24"], [473, "index-1"], [473, "index-19"], [473, "index-20"], [473, "index-27"], [473, "index-42"], [473, "index-5"], [473, "index-53"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[207, "ensurepip.bootstrap"]], "ensurepip": [[207, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[207, "ensurepip.version"]], "conform (enum.flagboundary \u7684\u5c6c\u6027)": [[208, "enum.FlagBoundary.CONFORM"]], "continuous (enum.enumcheck \u7684\u5c6c\u6027)": [[208, "enum.EnumCheck.CONTINUOUS"]], "eject (enum.flagboundary \u7684\u5c6c\u6027)": [[208, "enum.FlagBoundary.EJECT"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.Enum"]], "enumcheck (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.EnumCheck"]], "enumtype (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.EnumType"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.Flag"]], "flagboundary (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.FlagBoundary"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.IntFlag"]], "keep (enum.flagboundary \u7684\u5c6c\u6027)": [[208, "enum.FlagBoundary.KEEP"]], "named_flags (enum.enumcheck \u7684\u5c6c\u6027)": [[208, "enum.EnumCheck.NAMED_FLAGS"]], "reprenum (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.ReprEnum"]], "strict (enum.flagboundary \u7684\u5c6c\u6027)": [[208, "enum.FlagBoundary.STRICT"]], "strenum (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.StrEnum"]], "unique (enum.enumcheck \u7684\u5c6c\u6027)": [[208, "enum.EnumCheck.UNIQUE"]], "__and__() (enum.flag \u7684\u65b9\u6cd5)": [[208, "enum.Flag.__and__"]], "__call__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__call__"]], "__contains__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__contains__"]], "__contains__() (enum.flag \u7684\u65b9\u6cd5)": [[208, "enum.Flag.__contains__"]], "__dir__() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum.__dir__"]], "__dir__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__dir__"]], "__format__() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum.__format__"]], "__getitem__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__getitem__"]], "__init_subclass__() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum.__init_subclass__"]], "__iter__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__iter__"]], "__len__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__len__"]], "__or__() (enum.flag \u7684\u65b9\u6cd5)": [[208, "enum.Flag.__or__"]], "__repr__() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum.__repr__"]], "__reversed__() (enum.enumtype \u7684\u65b9\u6cd5)": [[208, "enum.EnumType.__reversed__"]], "__str__() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum.__str__"]], "__xor__() (enum.flag \u7684\u65b9\u6cd5)": [[208, "enum.Flag.__xor__"]], "_generate_next_value_() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum._generate_next_value_"]], "_ignore_ (enum.enum \u7684\u5c6c\u6027)": [[208, "enum.Enum._ignore_"]], "_missing_() (enum.enum \u7684\u65b9\u6cd5)": [[208, "enum.Enum._missing_"]], "_numeric_repr_() (enum.flag \u7684\u65b9\u6cd5)": [[208, "enum.Flag._numeric_repr_"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[208, "enum.auto"]], "enum": [[208, "module-enum"]], "global_enum() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.global_enum"]], "member() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.member"]], "name (enum.enum \u7684\u5c6c\u6027)": [[208, "enum.Enum.name"]], "nonmember() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.nonmember"]], "property() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.property"]], "show_flag_values() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.show_flag_values"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.unique"]], "value (enum.enum \u7684\u5c6c\u6027)": [[208, "enum.Enum.value"]], "verify() (\u65bc enum \u6a21\u7d44\u4e2d)": [[208, "enum.verify"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EBUSY"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTBLK"]], "enotcapable (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTCAPABLE"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTNAM"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTSOCK"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EOVERFLOW"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EPROTOTYPE"]], "eqfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EQFULL"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.EXFULL"]], "errno": [[209, "module-errno"], [210, "index-4"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[209, "errno.errorcode"]], "arithmeticerror": [[210, "ArithmeticError"]], "assertionerror": [[210, "AssertionError"], [432, "index-19"]], "attributeerror": [[210, "AttributeError"], [426, "index-40"]], "baseexception": [[210, "BaseException"]], "baseexceptiongroup": [[210, "BaseExceptionGroup"]], "blockingioerror": [[210, "BlockingIOError"], [255, "io.BlockingIOError"]], "brokenpipeerror": [[210, "BrokenPipeError"]], "buffererror": [[210, "BufferError"]], "byteswarning": [[210, "BytesWarning"]], "childprocesserror": [[210, "ChildProcessError"]], "connectionabortederror": [[210, "ConnectionAbortedError"]], "connectionerror": [[210, "ConnectionError"]], "connectionrefusederror": [[210, "ConnectionRefusedError"]], "connectionreseterror": [[210, "ConnectionResetError"]], "deprecationwarning": [[210, "DeprecationWarning"]], "eoferror": [[210, "EOFError"]], "encodingwarning": [[210, "EncodingWarning"]], "environmenterror": [[210, "EnvironmentError"]], "exception": [[210, "Exception"], [426, "index-32"], [426, "index-33"], [426, "index-36"], [426, "index-37"], [426, "index-4"], [426, "index-40"], [426, "index-63"], [426, "index-67"], [426, "index-72"]], "exceptiongroup": [[210, "ExceptionGroup"]], "fileexistserror": [[210, "FileExistsError"]], "filenotfounderror": [[210, "FileNotFoundError"]], "floatingpointerror": [[210, "FloatingPointError"]], "futurewarning": [[210, "FutureWarning"]], "generatorexit": [[210, "GeneratorExit"], [426, "index-33"], [426, "index-37"]], "ioerror": [[210, "IOError"]], "importerror": [[210, "ImportError"], [432, "index-34"]], "importwarning": [[210, "ImportWarning"]], "indentationerror": [[210, "IndentationError"]], "indexerror": [[210, "IndexError"]], "interruptederror": [[210, "InterruptedError"]], "isadirectoryerror": [[210, "IsADirectoryError"]], "keyerror": [[210, "KeyError"]], "keyboardinterrupt": [[210, "KeyboardInterrupt"]], "lookuperror": [[210, "LookupError"]], "memoryerror": [[210, "MemoryError"]], "modulenotfounderror": [[210, "ModuleNotFoundError"]], "nameerror": [[210, "NameError"], [426, "index-4"]], "notadirectoryerror": [[210, "NotADirectoryError"]], "notimplementederror": [[210, "NotImplementedError"]], "oserror": [[210, "OSError"]], "overflowerror": [[210, "OverflowError"]], "pep 3134": [[210, "index-2"], [466, "index-12"], [466, "index-28"], [466, "index-29"], [479, "index-64"]], "pep 475": [[210, "index-7"], [222, "index-18"], [290, "index-22"], [290, "index-24"], [290, "index-25"], [290, "index-44"], [325, "index-3"], [325, "index-4"], [325, "index-5"], [325, "index-6"], [325, "index-7"], [326, "index-0"], [330, "index-0"], [330, "index-1"], [334, "index-10"], [334, "index-11"], [334, "index-12"], [334, "index-13"], [334, "index-4"], [334, "index-5"], [334, "index-7"], [334, "index-8"], [334, "index-9"], [362, "index-8"], [474, "index-15"], [474, "index-16"], [474, "index-49"], [479, "index-241"], [479, "index-298"]], "pep 565": [[210, "index-9"], [476, "index-19"]], "pendingdeprecationwarning": [[210, "PendingDeprecationWarning"]], "permissionerror": [[210, "PermissionError"]], "processlookuperror": [[210, "ProcessLookupError"]], "recursionerror": [[210, "RecursionError"]], "referenceerror": [[210, "ReferenceError"]], "resourcewarning": [[210, "ResourceWarning"]], "runtimeerror": [[210, "RuntimeError"]], "runtimewarning": [[210, "RuntimeWarning"]], "stopasynciteration": [[210, "StopAsyncIteration"], [426, "index-36"]], "stopiteration": [[210, "StopIteration"], [426, "index-32"], [432, "index-26"]], "syntaxerror": [[210, "SyntaxError"]], "syntaxwarning": [[210, "SyntaxWarning"]], "systemerror": [[210, "SystemError"]], "systemexit": [[210, "SystemExit"]], "taberror": [[210, "TabError"]], "typeerror": [[210, "TypeError"], [426, "index-63"]], "unboundlocalerror": [[210, "UnboundLocalError"], [425, "index-9"]], "unicodedecodeerror": [[210, "UnicodeDecodeError"]], "unicodeencodeerror": [[210, "UnicodeEncodeError"]], "unicodeerror": [[210, "UnicodeError"]], "unicodetranslateerror": [[210, "UnicodeTranslateError"]], "unicodewarning": [[210, "UnicodeWarning"]], "userwarning": [[210, "UserWarning"]], "valueerror": [[210, "ValueError"], [426, "index-72"]], "warning": [[210, "Warning"], [337, "sqlite3.Warning"]], "windowserror": [[210, "WindowsError"]], "zerodivisionerror": [[210, "ZeroDivisionError"], [426, "index-67"]], "__notes__ (baseexception \u7684\u5c6c\u6027)": [[210, "BaseException.__notes__"]], "add_note() (baseexception \u7684\u65b9\u6cd5)": [[210, "BaseException.add_note"]], "args (baseexception \u7684\u5c6c\u6027)": [[210, "BaseException.args"]], "assert": [[210, "index-3"], [432, "index-18"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[210, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[210, "SystemExit.code"]], "derive() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[210, "BaseExceptionGroup.derive"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[210, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[210, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[210, "OSError.errno"]], "except": [[210, "index-0"], [423, "index-9"]], "exceptions (baseexceptiongroup \u7684\u5c6c\u6027)": [[210, "BaseExceptionGroup.exceptions"]], "filename (oserror \u7684\u5c6c\u6027)": [[210, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[210, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.lineno"]], "message (baseexceptiongroup \u7684\u5c6c\u6027)": [[210, "BaseExceptionGroup.message"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[210, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.offset"]], "raise": [[210, "index-1"], [432, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[210, "UnicodeError.reason"]], "split() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[210, "BaseExceptionGroup.split"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[210, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[210, "OSError.strerror"]], "subgroup() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[210, "BaseExceptionGroup.subgroup"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[210, "SyntaxError.text"]], "try": [[210, "index-0"], [423, "index-9"], [424, "index-64"]], "winerror (oserror \u7684\u5c6c\u6027)": [[210, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[210, "BaseException.with_traceback"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.enable"]], "faulthandler": [[211, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[211, "faulthandler.unregister"]], "i/o control\uff08i/o \u63a7\u5236\uff09": [[212, "index-0"], [222, "index-8"], [334, "index-6"], [357, "index-0"]], "unix": [[212, "index-0"], [433, "index-4"]], "fcntl": [[212, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[212, "fcntl.fcntl"]], "file control\uff08\u6a94\u6848\u63a7\u5236\uff09": [[212, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[212, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[212, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[212, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[213, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[213, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[213, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[213, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[213, "filecmp.dircmp"]], "filecmp": [[213, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[213, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[213, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[213, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[213, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[215, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.close"]], "fileinput": [[215, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[215, "fileinput.nextfile"]], "[] \uff08\u65b9\u62ec\u865f\uff09": [[217, "index-2"], [228, "index-1"], [316, "index-10"], [342, "index-2"], [426, "index-15"], [426, "index-41"], [432, "index-6"]], "filenames\uff08\u6a94\u6848\u540d\u7a31\uff09": [[217, "index-0"], [228, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[217, "fnmatch.filter"]], "fnmatch": [[217, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[217, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[217, "fnmatch.fnmatchcase"]], "glob": [[217, "index-3"], [228, "module-glob"]], "re": [[217, "index-1"], [316, "module-re"], [341, "index-33"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[217, "fnmatch.translate"]], "wildcard expansion\uff08\u842c\u7528\u5b57\u5143\u5c55\u958b\uff09": [[217, "index-0"]], "\u65bc glob \u98a8\u683c\u7684\u842c\u7528\u5b57\u5143\u4e2d": [[217, "index-2"], [228, "index-1"], [228, "index-2"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[218, "fractions.Fraction"]], "pep 515": [[218, "index-0"], [342, "index-19"], [469, "index-109"], [475, "index-7"], [475, "index-8"], [479, "index-261"], [479, "index-262"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.__floor__"]], "__format__() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.__format__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[218, "fractions.Fraction.denominator"]], "fractions": [[218, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[218, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[218, "fractions.Fraction.from_float"]], "is_integer() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.is_integer"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[218, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[218, "fractions.Fraction.numerator"]], "ftp": [[220, "index-0"], [391, "index-11"], [391, "index-13"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[220, "ftplib.FTP"]], "rfc 2640": [[220, "index-14"], [220, "index-15"], [220, "index-17"], [478, "index-22"], [479, "index-176"]], "rfc 3659": [[220, "index-18"]], "rfc 4217": [[220, "index-16"]], "rfc 959": [[220, "index-13"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[220, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.dir"]], "error_perm": [[220, "ftplib.error_perm"]], "error_proto": [[220, "ftplib.error_proto"], [302, "poplib.error_proto"]], "error_reply": [[220, "ftplib.error_reply"]], "error_temp": [[220, "ftplib.error_temp"]], "ftplib": [[220, "module-ftplib"]], "ftplib\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[220, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[220, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[220, "ftplib.FTP.voidcmd"]], "boolean\uff08\u5e03\u6797\u503c\uff09": [[222, "index-0"]], "infinity\uff08\u7121\u7aae\uff09": [[222, "index-3"]], "nan": [[222, "index-3"]], "pythonbreakpoint": [[222, "index-1"], [349, "index-3"], [349, "index-4"], [349, "index-5"], [451, "envvar-PYTHONBREAKPOINT"], [476, "index-12"]], "pythoncaseok": [[222, "index-16"], [451, "envvar-PYTHONCASEOK"], [459, "index-11"], [478, "index-21"], [479, "index-191"]], "__format__": [[222, "index-4"]], "__import__()": [[222, "import__"]], "abs()": [[222, "abs"]], "aiter()": [[222, "aiter"]], "all()": [[222, "all"]], "anext()": [[222, "anext"]], "any()": [[222, "any"]], "ascii()": [[222, "ascii"]], "bin()": [[222, "bin"]], "binary mode\uff08\u4e8c\u9032\u4f4d\u6a21\u5f0f\uff09": [[222, "index-8"]], "bool (\u5167\u5efa\u985e\u5225)": [[222, "bool"]], "breakpoint()": [[222, "breakpoint"]], "buffer size, i/o\uff08\u7de9\u885d\u5340\u5927\u5c0f\u3001i/o\uff09": [[222, "index-8"]], "buffering\uff08\u7de9\u885d\uff09": [[222, "index-8"], [334, "index-6"]], "built-in function": [[222, "abs"], [222, "aiter"], [222, "all"], [222, "anext"], [222, "any"], [222, "ascii"], [222, "bin"], [222, "breakpoint"], [222, "callable"], [222, "chr"], [222, "classmethod"], [222, "compile"], [222, "delattr"], [222, "dir"], [222, "divmod"], [222, "enumerate"], [222, "eval"], [222, "exec"], [222, "filter"], [222, "format"], [222, "getattr"], [222, "globals"], [222, "hasattr"], [222, "hash"], [222, "help"], [222, "hex"], [222, "id"], [222, "import__"], [222, "input"], [222, "isinstance"], [222, "issubclass"], [222, "iter"], [222, "len"], [222, "locals"], [222, "map"], [222, "max"], [222, "min"], [222, "next"], [222, "oct"], [222, "open"], [222, "ord"], [222, "pow"], [222, "print"], [222, "repr"], [222, "reversed"], [222, "round"], [222, "setattr"], [222, "sorted"], [222, "staticmethod"], [222, "sum"], [222, "vars"], [222, "zip"], [280, "multiprocessing.Manager"], [409, "xml.etree.ElementInclude.default_loader"], [409, "xml.etree.ElementInclude.include"]], "callable()": [[222, "callable"]], "chr()": [[222, "chr"]], "classmethod()": [[222, "classmethod"]], "compile()": [[222, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[222, "complex"]], "delattr()": [[222, "delattr"]], "dir()": [[222, "dir"]], "divmod()": [[222, "divmod"]], "enumerate()": [[222, "enumerate"]], "eval()": [[222, "eval"]], "exec": [[222, "index-2"], [341, "index-64"], [432, "index-44"]], "exec()": [[222, "exec"]], "filter()": [[222, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[222, "float"]], "format()": [[222, "format"]], "format()\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[222, "index-4"]], "getattr()": [[222, "getattr"]], "globals()": [[222, "globals"]], "hasattr()": [[222, "hasattr"]], "hash()": [[222, "hash"]], "help()": [[222, "help"]], "hex()": [[222, "hex"]], "id()": [[222, "id"]], "import\uff08\u5f15\u5165\uff09": [[222, "index-13"], [331, "index-2"], [424, "index-42"], [428, "index-9"], [432, "index-34"], [432, "index-39"]], "input()": [[222, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[222, "int"]], "isinstance()": [[222, "isinstance"]], "issubclass()": [[222, "issubclass"]], "iter()": [[222, "iter"]], "len()": [[222, "len"]], "line-buffered i/o\uff08\u5217\u7de9\u885d i/o\uff09": [[222, "index-8"]], "locals()": [[222, "locals"]], "map()": [[222, "map"]], "max()": [[222, "max"]], "min()": [[222, "min"]], "modes\uff08\u6a21\u5f0f\uff09": [[222, "index-6"]], "next()": [[222, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[222, "object"]], "oct()": [[222, "oct"]], "open()": [[222, "open"]], "open() \u5167\u5efa\u51fd\u5f0f": [[222, "index-5"], [222, "index-7"]], "ord()": [[222, "ord"]], "pow()": [[222, "pow"]], "print()": [[222, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[222, "property"]], "repr()": [[222, "repr"]], "reversed()": [[222, "reversed"]], "round()": [[222, "round"]], "setattr()": [[222, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[222, "slice"]], "sorted()": [[222, "sorted"]], "staticmethod()": [[222, "staticmethod"]], "str() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[222, "index-11"]], "sum()": [[222, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[222, "super"]], "text mode\uff08\u6587\u5b57\u6a21\u5f0f\uff09": [[222, "index-8"]], "type (\u5167\u5efa\u985e\u5225)": [[222, "type"]], "unbuffered i/o\uff08\u975e\u7de9\u885d i/o\uff09": [[222, "index-8"]], "vars()": [[222, "vars"]], "zip()": [[222, "zip"]], "pep 412": [[223, "index-0"], [472, "index-16"]], "args (functools.partial \u7684\u5c6c\u6027)": [[223, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[223, "functools.partial.func"]], "functools": [[223, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[223, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[223, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[223, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[223, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.garbage"]], "gc": [[224, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[224, "gc.unfreeze"]], "getopterror": [[225, "getopt.GetoptError"]], "posixly_correct": [[225, "index-0"]], "getopt": [[225, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[225, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[225, "getopt.gnu_getopt"]], "getpasswarning": [[226, "getpass.GetPassWarning"]], "lname": [[226, "index-10"]], "logname": [[226, "index-8"], [290, "index-10"]], "user": [[226, "index-9"]], "username": [[226, "index-11"], [290, "index-11"], [291, "index-20"]], "getpass": [[226, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[226, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[226, "getpass.getuser"]], "gnome": [[227, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[227, "gettext.GNUTranslations"]], "lang": [[227, "index-3"], [227, "index-8"], [263, "index-1"], [263, "index-2"], [263, "index-3"]], "language": [[227, "index-0"], [227, "index-5"]], "lc_all": [[227, "index-1"], [227, "index-6"]], "lc_messages": [[227, "index-2"], [227, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[227, "gettext.NullTranslations"]], "_ \uff08\u5e95\u7dda\uff09": [[227, "index-4"], [342, "index-10"], [431, "index-28"], [431, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.add_fallback"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.find"]], "gettext": [[227, "index-4"], [227, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[227, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.install"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[227, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[227, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.npgettext"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[227, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[227, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.pgettext"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[227, "gettext.translation"]], "**": [[228, "index-2"], [341, "index-13"], [423, "index-32"], [426, "index-18"], [426, "index-50"], [426, "index-58"], [437, "index-4"]], ". \uff08\u9ede\uff09": [[228, "index-1"], [290, "index-45"], [290, "index-50"], [316, "index-0"], [341, "index-36"], [341, "index-46"], [342, "index-2"], [426, "index-39"], [431, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[228, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[228, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[228, "glob.iglob"]], "pathname expansion\uff08\u8def\u5f91\u540d\u7a31\u5c55\u958b\uff09": [[228, "index-0"]], "cycleerror": [[229, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[229, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[229, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[229, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[230, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[230, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[230, "grp.getgrnam"]], "grp": [[230, "module-grp"]], "--best": [[231, "cmdoption-gzip-best"]], "--decompress": [[231, "cmdoption-gzip-d"]], "--fast": [[231, "cmdoption-gzip-fast"]], "badgzipfile": [[231, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[231, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[231, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[231, "gzip.decompress"]], "gzip": [[231, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[231, "cmdoption-gzip-arg-file"], [231, "cmdoption-gzip-best"], [231, "cmdoption-gzip-d"], [231, "cmdoption-gzip-fast"], [231, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[231, "gzip.GzipFile.mtime"]], "name (gzip.gzipfile \u7684\u5c6c\u6027)": [[231, "gzip.GzipFile.name"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[231, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[231, "gzip.GzipFile.peek"]], "openssl": [[232, "index-2"], [338, "index-0"]], "rfc 1321": [[232, "index-1"]], "rfc 7693": [[232, "index-5"]], "rfc 7914": [[232, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2b"]], "blake2b, blake2s": [[232, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[232, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[232, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[232, "hashlib.shake.digest"]], "file_digest() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.file_digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.hash.digest_size"]], "hashlib": [[232, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[232, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[232, "hashlib.shake.hexdigest"]], "md5() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.md5"]], "message digest, md5": [[232, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[232, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha2, sha224, sha256, sha384, sha512, sha3, shake, blake2": [[232, "index-0"]], "sha1() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha1"]], "sha224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha224"]], "sha256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha256"]], "sha384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha384"]], "sha3_224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha3_224"]], "sha3_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha3_256"]], "sha3_384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha3_384"]], "sha3_512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha3_512"]], "sha512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.sha512"]], "shake_128() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.shake_128"]], "shake_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[232, "hashlib.shake_256"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[232, "hashlib.hash.update"]], "\uff08\u4f7f\u7528\u65bc hashlib \u6a21\u7d44\u4e2d\uff09": [[232, "index-2"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.heappushpop"]], "heapq": [[233, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[233, "heapq.nsmallest"]], "rfc 2014": [[234, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[234, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[234, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[234, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[234, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[234, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[234, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[234, "hmac.HMAC.hexdigest"]], "hmac": [[234, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[234, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[234, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[234, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[235, "html.escape"]], "html": [[235, "module-html"], [237, "index-0"], [391, "index-12"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[235, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[236, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[236, "html.entities.entitydefs"]], "html.entities": [[236, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[236, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[236, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[237, "html.parser.HTMLParser"]], "xhtml": [[237, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[237, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[237, "html.parser.HTMLParser.unknown_decl"]], "httpmethod (http \u4e2d\u7684\u985e\u5225)": [[238, "http.HTTPMethod"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[238, "http.HTTPStatus"]], "rfc 2295": [[238, "index-209"]], "rfc 2324": [[238, "index-192"]], "rfc 2518": [[238, "index-154"]], "rfc 2774": [[238, "index-212"]], "rfc 3229": [[238, "index-165"]], "rfc 4918": [[238, "index-163"], [238, "index-194"], [238, "index-195"], [238, "index-196"], [238, "index-210"]], "rfc 5789": [[238, "index-76"]], "rfc 5842": [[238, "index-164"], [238, "index-211"]], "rfc 6585": [[238, "index-199"], [238, "index-200"], [238, "index-201"], [238, "index-213"]], "rfc 7231": [[238, "index-152"], [238, "index-153"], [238, "index-156"], [238, "index-157"], [238, "index-158"], [238, "index-159"], [238, "index-160"], [238, "index-161"], [238, "index-166"], [238, "index-167"], [238, "index-168"], [238, "index-169"], [238, "index-171"], [238, "index-172"], [238, "index-174"], [238, "index-176"], [238, "index-177"], [238, "index-178"], [238, "index-179"], [238, "index-180"], [238, "index-182"], [238, "index-183"], [238, "index-184"], [238, "index-185"], [238, "index-187"], [238, "index-188"], [238, "index-189"], [238, "index-191"], [238, "index-198"], [238, "index-203"], [238, "index-204"], [238, "index-205"], [238, "index-206"], [238, "index-207"], [238, "index-208"], [238, "index-214"], [238, "index-215"], [238, "index-216"], [238, "index-217"], [238, "index-218"], [238, "index-219"], [238, "index-220"], [238, "index-221"], [238, "index-222"], [238, "index-223"], [238, "index-224"], [238, "index-225"], [238, "index-226"]], "rfc 7232": [[238, "index-170"], [238, "index-186"]], "rfc 7233": [[238, "index-162"], [238, "index-190"]], "rfc 7235": [[238, "index-175"], [238, "index-181"]], "rfc 7238": [[238, "index-173"]], "rfc 7540": [[238, "index-193"]], "rfc 7725": [[238, "index-202"]], "rfc 8297": [[238, "index-155"]], "rfc 8470": [[238, "index-197"]], "http\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[238, "index-0"]], "badstatusline": [[239, "http.client.BadStatusLine"]], "cannotsendheader": [[239, "http.client.CannotSendHeader"]], "cannotsendrequest": [[239, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[239, "http.client.HTTPConnection"]], "httpexception": [[239, "http.client.HTTPException"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[239, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[239, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[239, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[239, "http.client.HTTP_PORT"]], "improperconnectionstate": [[239, "http.client.ImproperConnectionState"]], "incompleteread": [[239, "http.client.IncompleteRead"]], "invalidurl": [[239, "http.client.InvalidURL"]], "linetoolong": [[239, "http.client.LineTooLong"]], "notconnected": [[239, "http.client.NotConnected"]], "rfc 2616#section-14.23": [[239, "index-4"]], "rfc 2616#section-5.1.2": [[239, "index-3"], [239, "index-5"]], "rfc 7230": [[239, "index-7"], [391, "index-19"]], "remotedisconnected": [[239, "http.client.RemoteDisconnected"]], "responsenotready": [[239, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[239, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[239, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[239, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[239, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.fileno"]], "get_proxy_response_headers() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.get_proxy_response_headers"]], "getcode() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.getcode"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.getresponse"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.headers"]], "http.client": [[239, "module-http.client"]], "http.client\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[239, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[239, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[239, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[239, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.url"]], "urllib.request": [[239, "index-1"], [391, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[239, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.LWPCookieJar"]], "loaderror": [[240, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[240, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[240, "index-1"], [240, "index-15"], [240, "index-21"], [240, "index-23"], [240, "index-24"], [240, "index-3"], [240, "index-4"], [240, "index-6"], [241, "index-0"], [241, "index-2"], [241, "index-3"], [241, "index-4"], [241, "index-5"], [241, "index-6"], [241, "index-7"]], "rfc 2964": [[240, "index-10"]], "rfc 2965": [[240, "index-0"], [240, "index-11"], [240, "index-12"], [240, "index-13"], [240, "index-14"], [240, "index-16"], [240, "index-17"], [240, "index-18"], [240, "index-19"], [240, "index-2"], [240, "index-20"], [240, "index-22"], [240, "index-25"], [240, "index-5"], [240, "index-7"], [240, "index-8"], [240, "index-9"], [391, "index-20"], [391, "index-21"], [391, "index-5"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[240, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.discard"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[240, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[240, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[240, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[240, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[240, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[241, "http.cookies.BaseCookie"]], "cookieerror": [[241, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[241, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[241, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[241, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[241, "http.cookies.Morsel.coded_value"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.copy"]], "http.cookies": [[241, "module-http.cookies"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[241, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[241, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[241, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[241, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.output"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[241, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[241, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[241, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[241, "http.cookies.BaseCookie.value_encode"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[242, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[242, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[242, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[242, "index-1"], [390, "index-2"], [390, "index-4"], [390, "index-5"], [390, "index-7"], [390, "index-8"], [465, "index-10"], [465, "index-13"], [474, "index-42"], [476, "index-35"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[242, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[242, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[242, "index-3"], [242, "module-http.server"]], "httpd": [[242, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[242, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[242, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[244, "index-4"]], "cut\uff08\u526a\u4e0b\uff09": [[244, "index-4"]], "idlestartup": [[244, "index-5"], [479, "index-224"], [479, "index-229"], [479, "index-254"]], "integrated development environment\uff08\u6574\u5408\u958b\u767c\u74b0\u5883\uff09": [[244, "index-0"]], "module browser\uff08\u6a21\u7d44\u700f\u89bd\u5668\uff09": [[244, "index-1"]], "pep 434": [[244, "index-7"], [465, "index-16"]], "pythonstartup": [[244, "index-6"], [317, "index-0"], [331, "index-7"], [349, "index-18"], [434, "index-5"], [451, "envvar-PYTHONSTARTUP"], [451, "index-8"], [473, "index-40"], [473, "index-41"], [479, "index-225"], [479, "index-230"], [479, "index-255"]], "paste\uff08\u8cbc\u4e0a\uff09": [[244, "index-4"]], "path browser\uff08\u8def\u5f91\u700f\u89bd\u5668\uff09": [[244, "index-1"]], "python editor\uff08python \u7de8\u8f2f\u5668\uff09": [[244, "index-0"]], "run script\uff08\u57f7\u884c\u8173\u672c\uff09": [[244, "index-2"]], "set breakpoint": [[244, "index-4"]], "breakpoints\uff08\u4e2d\u65b7\u9ede\uff09": [[244, "index-4"]], "debugger\uff08\u9664\u932f\u5668\uff09": [[244, "index-3"], [294, "index-2"], [349, "index-11"], [349, "index-29"], [361, "index-1"]], "idlelib": [[244, "module-idlelib"]], "stack viewer\uff08\u5806\u758a\u6aa2\u8996\u5668\uff09": [[244, "index-3"]], "imap4": [[245, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[245, "imaplib.IMAP4"]], "imap4.abort": [[245, "imaplib.IMAP4.abort"]], "imap4.error": [[245, "imaplib.IMAP4.error"]], "imap4.readonly": [[245, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[245, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[245, "imaplib.IMAP4_SSL"]], "imap4_stream": [[245, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[245, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[245, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[245, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[245, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[245, "imaplib.ParseFlags"]], "rfc 1730": [[245, "index-2"]], "rfc 2060": [[245, "index-1"], [245, "index-7"]], "rfc 2342": [[245, "index-6"], [460, "index-19"]], "rfc 3501": [[245, "index-8"]], "rfc 5161": [[245, "index-3"], [474, "index-33"]], "rfc 6855": [[245, "index-4"], [245, "index-5"], [474, "index-34"], [474, "index-35"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[245, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[245, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[245, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[245, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[245, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[246, "index-2"]], "imghdr": [[246, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[246, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[246, "imghdr.what"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.FileLoader"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[247, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.ModuleSpec"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[247, "index-0"]], "pep 3120": [[247, "index-10"], [431, "index-1"], [466, "index-4"]], "pep 366": [[247, "index-4"], [321, "index-7"], [428, "index-11"], [428, "index-12"], [428, "index-22"], [428, "index-24"], [472, "index-22"]], "pep 488": [[247, "index-22"], [247, "index-25"], [247, "index-7"], [308, "index-2"], [358, "index-4"], [451, "index-11"], [451, "index-13"], [451, "index-14"], [451, "index-15"], [474, "index-24"], [474, "index-25"], [474, "index-50"], [479, "index-297"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.PathFinder"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.ResourceLoader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[247, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.SourcelessFileLoader"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[247, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[247, "importlib.__import__"]], "_incompatible_extension_module_restrictions() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util._incompatible_extension_module_restrictions"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[247, "importlib.machinery.all_suffixes"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.cached"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[247, "importlib.util.LazyLoader.factory"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[247, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[247, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[247, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[247, "importlib.import_module"]], "importlib": [[247, "module-importlib"]], "importlib.abc": [[247, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source \u65b9\u6cd5": [[247, "index-15"]], "importlib.machinery": [[247, "module-importlib.machinery"]], "importlib.util": [[247, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[247, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[247, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[247, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[247, "importlib.invalidate_caches"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourcelessFileLoader.is_package"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.loader_state"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.module_from_spec"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[247, "importlib.abc.FileLoader.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.SourcelessFileLoader.name"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[247, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[247, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[247, "importlib.machinery.SourcelessFileLoader.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[247, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourceFileLoader.path_stats"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[247, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.resolve_name"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[247, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[247, "importlib.machinery.SourceFileLoader.set_data"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[247, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[247, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[247, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[248, "index-0"]], "importlib.metadata": [[248, "module-importlib.metadata"]], "anchor (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.Anchor"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.Package"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.Resource"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.as_file"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.contents"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.files"]], "importlib.resources": [[249, "module-importlib.resources"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.is_resource"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.open_binary"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.open_text"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.path"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.read_binary"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[249, "importlib.resources.read_text"]], "resourcereader (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.resources.abc.ResourceReader"]], "traversable (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.resources.abc.Traversable"]], "traversableresources (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.resources.abc.TraversableResources"]], "__truediv__() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.__truediv__"]], "contents() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.ResourceReader.contents"]], "files() (importlib.resources.abc.traversableresources \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.TraversableResources.files"]], "importlib.resources.abc": [[250, "module-importlib.resources.abc"]], "is_dir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.is_dir"]], "is_file() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.is_file"]], "is_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.ResourceReader.is_resource"]], "iterdir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.iterdir"]], "joinpath() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.joinpath"]], "name (importlib.resources.abc.traversable \u7684\u5c6c\u6027)": [[250, "importlib.resources.abc.Traversable.name"]], "open() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.open"]], "open_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.ResourceReader.open_resource"]], "read_bytes() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.read_bytes"]], "read_text() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.Traversable.read_text"]], "resource_path() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.resources.abc.ResourceReader.resource_path"]], "--details": [[252, "cmdoption-inspect-details"]], "any_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.ANY_CONTIGUOUS"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.BoundArguments"]], "bufferflags (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.BufferFlags"]], "contig (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.CONTIG"]], "contig_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.CONTIG_RO"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_NEWLOCALS"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.CO_VARKEYWORDS"]], "c_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.C_CONTIGUOUS"]], "format (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.FORMAT"]], "full (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.FULL"]], "full_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.FULL_RO"]], "f_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.F_CONTIGUOUS"]], "frameinfo (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.FrameInfo"]], "indirect (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.INDIRECT"]], "nd (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.ND"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.Parameter"]], "read (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.READ"]], "records (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.RECORDS"]], "records_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.RECORDS_RO"]], "simple (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.SIMPLE"]], "strided (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.STRIDED"]], "strided_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.STRIDED_RO"]], "strides (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.STRIDES"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.Signature"]], "traceback (inspect \u4e2d\u7684\u985e\u5225)": [[252, "inspect.Traceback"]], "writable (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.WRITABLE"]], "write (inspect.bufferflags \u7684\u5c6c\u6027)": [[252, "inspect.BufferFlags.WRITE"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[252, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[252, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[252, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[252, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[252, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.cleandoc"]], "code_context (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.code_context"]], "code_context (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.code_context"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[252, "inspect.Signature.empty"]], "filename (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.filename"]], "filename (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.filename"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.formatargvalues"]], "frame (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.frame"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[252, "inspect.Signature.from_callable"]], "function (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.function"]], "function (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.function"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.get_annotations"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getargvalues"]], "getasyncgenlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getasyncgenlocals"]], "getasyncgenstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getasyncgenstate"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getmembers"]], "getmembers_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getmembers_static"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.getsourcelines"]], "index (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.index"]], "index (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.index"]], "inspect": [[252, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[252, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.ismethoddescriptor"]], "ismethodwrapper() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.ismethodwrapper"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[252, "inspect.BoundArguments.kwargs"]], "lineno (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.lineno"]], "lineno (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.lineno"]], "markcoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.markcoroutinefunction"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[252, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[252, "inspect.Signature.parameters"]], "positions (inspect.frameinfo \u7684\u5c6c\u6027)": [[252, "inspect.FrameInfo.positions"]], "positions (inspect.traceback \u7684\u5c6c\u6027)": [[252, "inspect.Traceback.positions"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[252, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[252, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[252, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[252, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[252, "inspect.unwrap"]], "internet\uff08\u7db2\u969b\u7db2\u8def\uff09": [[253, "index-0"]], "world wide web \uff08\u5168\u7403\u8cc7\u8a0a\u7db2\uff09": [[253, "index-0"], [390, "index-0"], [392, "index-0"]], "socket": [[253, "index-1"], [334, "index-0"], [334, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[255, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[255, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[255, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[255, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[255, "io.IncrementalNewlineDecoder"]], "pep 597": [[255, "index-8"], [468, "index-93"], [479, "index-105"]], "pep 686": [[255, "index-1"], [290, "index-5"]], "pythonwarndefaultencoding": [[255, "index-9"], [451, "envvar-PYTHONWARNDEFAULTENCODING"], [451, "index-29"], [468, "index-98"], [479, "index-106"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[255, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[255, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[255, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[255, "io.TextIOWrapper"]], "unsupportedoperation": [[255, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[255, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[255, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[255, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[255, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[255, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[255, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[255, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[255, "io.StringIO.getvalue"]], "io": [[255, "module-io"], [424, "index-53"]], "io \u6a21\u7d44": [[255, "index-0"]], "io.incrementalnewlinedecoder \u985e\u5225": [[255, "index-5"]], "io.textiowrapper \u985e\u5225": [[255, "index-4"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[255, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[255, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[255, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[255, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[255, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[255, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[255, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[255, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[255, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[255, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[255, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[255, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[255, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[255, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[255, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[255, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[255, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[255, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[255, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[255, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[255, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[255, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[255, "io.IOBase.writelines"]], "addressvalueerror": [[256, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[256, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[256, "ipaddress.NetmaskValueError"]], "rfc 2373": [[256, "index-1"], [256, "index-3"], [256, "index-5"]], "rfc 3056": [[256, "index-12"]], "rfc 3171": [[256, "index-0"]], "rfc 3330": [[256, "index-4"]], "rfc 3879": [[256, "index-9"]], "rfc 3927": [[256, "index-6"]], "rfc 4007": [[256, "index-11"], [256, "index-8"]], "rfc 4193": [[256, "index-10"]], "rfc 4291": [[256, "index-7"], [479, "index-90"]], "rfc 4380": [[256, "index-13"]], "rfc 5735": [[256, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.ip_network"]], "ipaddress": [[256, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[256, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[256, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[256, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.accumulate"]], "batched() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.batched"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[258, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.islice"]], "itertools": [[258, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[258, "itertools.zip_longest"]], "--compact": [[259, "cmdoption-json.tool-indent"]], "--json-lines": [[259, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[259, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[259, "cmdoption-json.tool-indent"]], "--sort-keys": [[259, "cmdoption-json.tool-sort-keys"]], "--tab": [[259, "cmdoption-json.tool-indent"]], "jsondecodeerror": [[259, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[259, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[259, "json.JSONEncoder"]], "rfc 4627": [[259, "index-1"], [259, "index-3"]], "rfc 7159": [[259, "index-0"], [259, "index-2"], [259, "index-4"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[259, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[259, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[259, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[259, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[259, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[259, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[259, "json.JSONEncoder.encode"]], "infile": [[259, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[259, "json.JSONEncoder.iterencode"]], "json": [[259, "module-json"], [442, "index-1"]], "json.tool": [[259, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[259, "cmdoption-json.tool-arg-infile"], [259, "cmdoption-json.tool-arg-outfile"], [259, "cmdoption-json.tool-h"], [259, "cmdoption-json.tool-indent"], [259, "cmdoption-json.tool-json-lines"], [259, "cmdoption-json.tool-no-ensure-ascii"], [259, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[259, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[259, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[259, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[259, "json.JSONDecodeError.msg"]], "outfile": [[259, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[259, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[259, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[260, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[260, "keyword.issoftkeyword"]], "keyword": [[260, "module-keyword"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[260, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[260, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[262, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[262, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[262, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[262, "linecache.lazycache"]], "linecache": [[262, "module-linecache"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.CRNCYSTR"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.LC_TIME"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.RADIXCHAR"]], "rfc 1766": [[263, "index-4"], [263, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.YESEXPR"]], "_locale": [[263, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.atoi"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.dgettext"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.getdefaultlocale"]], "getencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.getencoding"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.gettext"]], "locale": [[263, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[263, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.BufferingFormatter"]], "critical (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.CRITICAL"]], "debug (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.DEBUG"]], "error (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.ERROR"]], "errors\uff08\u932f\u8aa4\uff09": [[264, "index-0"], [425, "index-15"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.Handler"]], "info (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.INFO"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[264, "logging.LoggerAdapter"]], "notset (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.NOTSET"]], "pep 282": [[264, "index-1"], [329, "index-2"], [461, "index-11"], [461, "index-12"]], "warning (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.WARNING"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.__init__"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.disable"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[264, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[264, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[264, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[264, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[264, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[264, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[264, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[264, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.getChild"]], "getchildren() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.getChildren"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.getEffectiveLevel"]], "gethandlerbyname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getHandlerByName"]], "gethandlernames() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getHandlerNames"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getLevelName"]], "getlevelnamesmapping() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getLevelNamesMapping"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[264, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.handleError"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.lastResort"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.log"]], "logging": [[264, "module-logging"]], "logging\uff08\u65e5\u8a8c\uff09": [[264, "index-0"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.makeRecord"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[264, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[264, "logging.Logger.propagate"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[264, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[264, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[264, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[265, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[265, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[265, "logging.config.listen"]], "logging.config": [[265, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[265, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[266, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[266, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[266, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[266, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[266, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[266, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.createSocket"]], "createsocket() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SysLogHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[266, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[266, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[266, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[266, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[266, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[266, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[266, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[266, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[266, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[266, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[266, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[266, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[266, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[267, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[267, "lzma.LZMADecompressor"]], "lzmaerror": [[267, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[267, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[267, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[267, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[267, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[267, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[267, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[267, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[267, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[267, "lzma.is_check_supported"]], "lzma": [[267, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[267, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[267, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[267, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[267, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.BabylMessage"]], "externalclasherror": [[268, "mailbox.ExternalClashError"]], "formaterror": [[268, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.Message"]], "nosuchmailboxerror": [[268, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[268, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.close"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[268, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[268, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[268, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[268, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[268, "mailbox.mbox.lock"]], "mailbox": [[268, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[268, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[268, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[268, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[268, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[268, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[268, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[268, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[268, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[269, "index-0"]], "rfc 1524": [[269, "index-1"], [269, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[269, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[269, "mailcap.getcaps"]], "mailcap": [[269, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[271, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[271, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[271, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[271, "marshal.loads"]], "marshal": [[271, "module-marshal"]], "shelve": [[271, "index-0"], [327, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[271, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.atanh"]], "cbrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.cbrt"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.exp"]], "exp2() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.exp2"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.log2"]], "math": [[272, "module-math"], [341, "index-15"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.sqrt"]], "sumprod() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.sumprod"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[272, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[273, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.common_types"]], "content type\uff08\u5167\u5bb9\u985e\u578b\uff09": [[273, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[273, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.knownfiles"]], "mime.types": [[273, "index-2"]], "mimetypes": [[273, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[273, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[273, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[273, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[273, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[273, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MADV_WILLNEED"]], "map_aligned_super (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_ALIGNED_SUPER"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_ANONYMOUS"]], "map_conceal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_CONCEAL"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_SHARED"]], "map_stack (\u65bc mmap \u6a21\u7d44\u4e2d)": [[275, "mmap.MAP_STACK"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[275, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.madvise"]], "mmap": [[275, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[275, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[275, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[276, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[276, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[276, "modulefinder.ReplacePackage"]], "modulefinder": [[276, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[276, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[276, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[276, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[278, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[278, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[278, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[278, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[278, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[278, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[278, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[278, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[278, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[278, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[278, "msilib.Database.OpenView"]], "pep 594#msilib": [[278, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[278, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[278, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[278, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[278, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[278, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[278, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[278, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[278, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[278, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[278, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[278, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[278, "msilib.Control.mapping"]], "msi": [[278, "index-0"]], "msilib": [[278, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[278, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[278, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[278, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[278, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[278, "msilib.Dialog.text"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.LK_UNLCK"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.locking"]], "msvcrt": [[279, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[279, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[280, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[280, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Process"]], "processerror": [[280, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[280, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[280, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[280, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[280, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[280, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[280, "module-multiprocessing"]], "multiprocessing.manager()": [[280, "multiprocessing.Manager"]], "multiprocessing.connection": [[280, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[280, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[280, "module-multiprocessing.managers"]], "multiprocessing.pool": [[280, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[280, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[280, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[280, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[280, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.set_executable"]], "set_forkserver_preload() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.set_forkserver_preload"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[280, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[280, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[280, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[280, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[280, "multiprocessing.connection.wait"]], "named shared memory\uff08\u9644\u540d\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[281, "index-0"]], "posix shared memory\uff08posix \u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[281, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory\uff08\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[281, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[281, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[281, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[281, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[281, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[281, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[281, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[281, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[281, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[281, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[281, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[281, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[281, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[283, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[283, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[283, "netrc.netrc.authenticators"]], "filename (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[283, "netrc.NetrcParseError.filename"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[283, "netrc.netrc.hosts"]], "lineno (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[283, "netrc.NetrcParseError.lineno"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[283, "netrc.netrc.macros"]], "msg (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[283, "netrc.NetrcParseError.msg"]], "netrc": [[283, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[283, "netrc.netrc"]], "pep 594#nis": [[284, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[284, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[284, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[284, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[284, "nis.match"]], "nis": [[284, "module-nis"]], "nntp": [[285, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[285, "nntplib.NNTP"]], "nntpdataerror": [[285, "nntplib.NNTPDataError"]], "nntperror": [[285, "nntplib.NNTPError"]], "nntppermanenterror": [[285, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[285, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[285, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[285, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[285, "nntplib.NNTP_SSL"]], "network news transfer protocol\uff08\u7db2\u8def\u65b0\u805e\u50b3\u8f38\u5354\u5b9a\uff09": [[285, "index-0"]], "pep 594": [[285, "index-12"], [469, "index-114"], [469, "index-85"], [470, "index-28"], [470, "index-30"], [470, "index-33"], [479, "index-36"], [479, "index-46"], [479, "index-56"], [479, "index-67"], [479, "index-68"], [479, "index-72"]], "rfc 2980": [[285, "index-4"], [285, "index-9"]], "rfc 3977": [[285, "index-10"], [285, "index-2"], [285, "index-6"], [285, "index-7"], [285, "index-8"]], "rfc 4642": [[285, "index-5"]], "rfc 977": [[285, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[285, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[285, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[285, "nntplib.NNTP.nntp_version"]], "nntplib": [[285, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[285, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[285, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[286, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[286, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[286, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[286, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[286, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[286, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[286, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[286, "numbers.Complex.imag"]], "numbers": [[286, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[286, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[286, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__and__"]], "__call__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__call__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.attrgetter"]], "call() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.call"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.not_"]], "operator": [[288, "module-operator"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[288, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "ambiguousoptionerror": [[289, "optparse.AmbiguousOptionError"]], "badoptionerror": [[289, "optparse.BadOptionError"]], "option (optparse \u4e2d\u7684\u985e\u5225)": [[289, "optparse.Option"]], "optionconflicterror": [[289, "optparse.OptionConflictError"]], "optionerror": [[289, "optparse.OptionError"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[289, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[289, "optparse.OptionParser"]], "optionvalueerror": [[289, "optparse.OptionValueError"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.TYPE_CHECKER"]], "values (optparse \u4e2d\u7684\u985e\u5225)": [[289, "optparse.Values"]], "action (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.nargs"]], "optparse": [[289, "module-optparse"]], "parse_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.parse_args"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[289, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[289, "optparse.Option.type"]], "..": [[290, "index-46"]], "/ \uff08\u659c\u7dda\uff09": [[290, "index-47"], [290, "index-49"], [341, "index-13"], [423, "index-32"], [426, "index-67"]], ": \uff08\u5192\u865f\uff09": [[290, "index-51"], [337, "index-7"], [342, "index-2"], [423, "index-16"], [423, "index-18"], [423, "index-28"], [423, "index-3"], [423, "index-34"], [423, "index-4"], [423, "index-40"], [423, "index-6"], [423, "index-9"], [426, "index-17"], [426, "index-44"], [426, "index-90"], [431, "index-25"], [432, "index-15"], [437, "index-6"]], "; \uff08\u5206\u865f\uff09": [[290, "index-51"], [423, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLD_TRAPPED"]], "clone_files (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_FILES"]], "clone_fs (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_FS"]], "clone_newcgroup (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWCGROUP"]], "clone_newipc (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWIPC"]], "clone_newnet (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWNET"]], "clone_newns (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWNS"]], "clone_newpid (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWPID"]], "clone_newtime (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWTIME"]], "clone_newuser (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWUSER"]], "clone_newuts (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_NEWUTS"]], "clone_sighand (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_SIGHAND"]], "clone_sysvsem (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_SYSVSEM"]], "clone_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_THREAD"]], "clone_vm (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.CLONE_VM"]], "comspec": [[290, "index-43"], [345, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[290, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.O_WRONLY"]], "pep 524": [[290, "index-53"], [475, "index-1"], [475, "index-31"], [475, "index-32"], [479, "index-267"], [479, "index-268"]], "pidfd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PIDFD_NONBLOCK"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.POSIX_SPAWN_OPEN"]], "prio_darwin_bg (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_DARWIN_BG"]], "prio_darwin_nonui (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_DARWIN_NONUI"]], "prio_darwin_process (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_DARWIN_PROCESS"]], "prio_darwin_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_DARWIN_THREAD"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[290, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SEEK_CUR"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SEEK_END"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SF_MNOWAIT"]], "sf_nocache (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SF_NOCACHE"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.SPLICE_F_NONBLOCK"]], "unc paths\uff08unc \u8def\u5f91\uff09": [[290, "index-28"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[290, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.altsep"]], "changing\uff08\u6539\u8b8a\uff09": [[290, "index-26"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[290, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[290, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.cpu_count"]], "creating\uff08\u5efa\u7acb\uff09": [[290, "index-28"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.defpath"]], "deleting\uff08\u522a\u9664\uff09": [[290, "index-21"], [290, "index-29"], [329, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.devnull"]], "directory\uff08\u76ee\u9304\uff09": [[290, "index-26"], [290, "index-28"], [290, "index-29"], [290, "index-31"], [290, "index-32"], [329, "index-1"], [331, "index-1"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.dup2"]], "effective id": [[290, "index-8"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.environb"]], "environment variables\uff08\u74b0\u5883\u8b8a\u6578\uff09": [[290, "index-17"], [290, "index-21"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getgroups"]], "gethostbyaddr()\uff08\u65bc socket \u6a21\u7d44\uff09": [[290, "index-20"]], "gethostname()\uff08\u65bc socket \u6a21\u7d44\uff09": [[290, "index-20"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.getxattr"]], "group\uff08\u7fa4\u7d44\uff09": [[290, "index-12"], [290, "index-9"]], "id": [[290, "index-13"], [290, "index-16"], [424, "index-1"]], "id of parent": [[290, "index-14"]], "id, setting\uff08\u8a2d\u5b9a\uff09": [[290, "index-19"]], "in pathnames (windows)\uff08\u5728\u8def\u5f91\u540d\u7a31\u4e2d (windows)\uff09": [[290, "index-48"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.is_file"]], "is_junction() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.is_junction"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.kill"]], "killing": [[290, "index-37"], [290, "index-38"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[290, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.listdir"]], "listdrives() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.listdrives"]], "listmounts() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.listmounts"]], "listvolumes() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.listvolumes"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lockf"]], "login_tty() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.login_tty"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[290, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.openpty"]], "os": [[290, "module-os"], [303, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[290, "os.DirEntry.path"]], "path separator (posix)\uff08\u8def\u5f91\u5206\u9694\u5668 (posix)\uff09": [[290, "index-51"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.preadv"]], "process": [[290, "index-12"], [290, "index-13"], [290, "index-14"], [290, "index-15"], [290, "index-18"], [290, "index-37"], [290, "index-38"], [290, "index-9"]], "pty": [[290, "index-23"], [306, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[290, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[290, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sched_yield"]], "scheduling priority\uff08\u6392\u7a0b\u512a\u5148\u6b0a\uff09": [[290, "index-15"], [290, "index-18"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setgroups"]], "setns() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setns"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setsid"]], "setting\uff08\u8a2d\u5b9a\uff09": [[290, "index-17"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.setxattr"]], "signalling\uff08\u4fe1\u865f\uff09": [[290, "index-37"], [290, "index-38"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_birthtime"]], "st_birthtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_birthtime_ns"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[290, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.startfile"]], "stat": [[290, "index-30"], [339, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[290, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[290, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[290, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.times"]], "traversal\uff08\u904d\u6b77\uff09": [[290, "index-31"], [290, "index-32"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.unsetenv"]], "unshare() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.unshare"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.urandom"]], "user\uff08\u4f7f\u7528\u8005\uff09": [[290, "index-16"], [290, "index-19"], [290, "index-8"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.walk"]], "walking": [[290, "index-31"], [290, "index-32"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[290, "os.writev"]], "\u4ee5\u53ca os.makedirs()": [[290, "index-28"]], "\u65bc pathnames\uff08\u8def\u5f91\u540d\u7a31\uff09\u4e2d": [[290, "index-45"], [290, "index-46"], [290, "index-47"], [290, "index-49"], [290, "index-50"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.dirname"]], "environment variables expansion (windows)\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[291, "index-9"]], "environment variables expansion\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b\uff09": [[291, "index-9"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.getsize"]], "home directory expansion\uff08\u5bb6\u76ee\u9304\u5c55\u958b\uff09": [[291, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.isabs"]], "isdevdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.isdevdrive"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.isfile"]], "isjunction() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.isjunction"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.normpath"]], "operations\uff08\u64cd\u4f5c\uff09": [[291, "index-0"], [293, "index-0"], [341, "index-1"], [341, "index-16"], [341, "index-5"]], "os.path": [[291, "module-os.path"]], "pwd": [[291, "index-2"], [307, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.splitext"]], "splitroot() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.splitroot"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[291, "os.path.supports_unicode_filenames"]], "~ \uff08\u6ce2\u6d6a\u865f\uff09": [[291, "index-1"], [341, "index-16"], [426, "index-62"]], "audiodev": [[292, "index-1"]], "mixerdev": [[292, "index-2"]], "ossaudioerror": [[292, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[292, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[292, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[292, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[292, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[292, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[292, "ossaudiodev.openmixer"]], "ossaudiodev": [[292, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[292, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[293, "index-1"], [473, "index-30"], [473, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.PurePath"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[293, "pathlib.WindowsPath"]], "absolute() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.absolute"]], "anchor (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.anchor"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[293, "pathlib.Path.cwd"]], "drive (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.drive"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[293, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_file"]], "is_junction() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_junction"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.lchmod"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.mkdir"]], "name (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.name"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.owner"]], "parent (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.parent"]], "parents (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.parents"]], "parts (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.parts"]], "pathlib": [[293, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.rmdir"]], "root (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.root"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.stat"]], "stem (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.stem"]], "suffix (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.suffix"]], "suffixes (pathlib.purepath \u7684\u5c6c\u6027)": [[293, "pathlib.PurePath.suffixes"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.unlink"]], "walk() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.walk"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.with_name"]], "with_segments() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.with_segments"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[293, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[293, "pathlib.Path.write_text"]], "! (pdb command)": [[294, "pdbcommand-0"]], ".pdbrc": [[294, "index-2"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[294, "pdb.Pdb"]], "pdb\uff08pdb \u4e2d\u7684\u985e\u5225\uff09": [[294, "index-1"]], "alias (pdb command)": [[294, "pdbcommand-alias"]], "args (pdb command)": [[294, "pdbcommand-args"]], "break (pdb command)": [[294, "pdbcommand-break"]], "clear (pdb command)": [[294, "pdbcommand-clear"]], "commands (pdb command)": [[294, "pdbcommand-commands"]], "condition (pdb command)": [[294, "pdbcommand-condition"]], "continue (pdb command)": [[294, "pdbcommand-continue"]], "debug (pdb command)": [[294, "pdbcommand-debug"]], "disable (pdb command)": [[294, "pdbcommand-disable"]], "display (pdb command)": [[294, "pdbcommand-display"]], "down (pdb command)": [[294, "pdbcommand-down"]], "enable (pdb command)": [[294, "pdbcommand-enable"]], "help (pdb command)": [[294, "pdbcommand-help"]], "ignore (pdb command)": [[294, "pdbcommand-ignore"]], "interact (pdb command)": [[294, "pdbcommand-interact"]], "jump (pdb command)": [[294, "pdbcommand-jump"]], "list (pdb command)": [[294, "pdbcommand-list"]], "ll (pdb command)": [[294, "pdbcommand-ll"]], "next (pdb command)": [[294, "pdbcommand-next"]], "p (pdb command)": [[294, "pdbcommand-p"]], "pdb": [[294, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.post_mortem"]], "pp (pdb command)": [[294, "pdbcommand-pp"]], "quit (pdb command)": [[294, "pdbcommand-quit"]], "restart (pdb command)": [[294, "pdbcommand-restart"]], "return (pdb command)": [[294, "pdbcommand-return"]], "retval (pdb command)": [[294, "pdbcommand-retval"]], "run (pdb command)": [[294, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[294, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[294, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[294, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[294, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[294, "pdb.set_trace"]], "source (pdb command)": [[294, "pdbcommand-source"]], "step (pdb command)": [[294, "pdbcommand-step"]], "tbreak (pdb command)": [[294, "pdbcommand-tbreak"]], "unalias (pdb command)": [[294, "pdbcommand-unalias"]], "undisplay (pdb command)": [[294, "pdbcommand-undisplay"]], "until (pdb command)": [[294, "pdbcommand-until"]], "up (pdb command)": [[294, "pdbcommand-up"]], "whatis (pdb command)": [[294, "pdbcommand-whatis"]], "where (pdb command)": [[294, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.DEFAULT_PROTOCOL"]], "external data representation\uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\u6cd5\uff09": [[296, "index-1"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[296, "index-2"], [461, "index-21"], [461, "index-22"], [461, "index-23"]], "pep 3154": [[296, "index-3"], [473, "index-12"], [473, "index-39"], [479, "index-221"]], "pep 574": [[296, "index-4"], [296, "index-8"], [477, "index-36"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[296, "pickle.PickleBuffer"]], "pickleerror": [[296, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[296, "pickle.Pickler"]], "picklingerror": [[296, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[296, "pickle.Unpickler"]], "unpicklingerror": [[296, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[296, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[296, "object.__getnewargs_ex__"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[296, "object.__getstate__"]], "__getstate__()\uff08copy \u5354\u5b9a\uff09": [[296, "index-7"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[296, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[296, "object.__reduce_ex__"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[296, "object.__setstate__"]], "__setstate__()\uff08copy \u5354\u5b9a\uff09": [[296, "index-7"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[296, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[296, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[296, "pickle.Pickler.fast"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[296, "pickle.Unpickler.find_class"]], "find_class()\uff08pickle \u5354\u5b9a\uff09": [[296, "index-9"]], "flattening\uff08\u6524\u5e73\uff09": [[296, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[296, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[296, "pickle.loads"]], "marshalling": [[296, "index-0"]], "objects\uff08\u7269\u4ef6\uff09": [[296, "index-0"], [341, "index-8"]], "persistence\uff08\u6301\u7e8c\u6027\uff09": [[296, "index-0"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[296, "pickle.Pickler.persistent_id"]], "persistent_id\uff08pickle \u5354\u5b9a\uff09": [[296, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[296, "pickle.Unpickler.persistent_load"]], "persistent_load\uff08pickle \u5354\u5b9a\uff09": [[296, "index-6"]], "persistent\uff08\u6301\u7e8c\uff09": [[296, "index-0"]], "pickling": [[296, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[296, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[296, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[296, "pickle.PickleBuffer.release"]], "serializing\uff08\u5e8f\u5217\u5316\uff09": [[296, "index-0"]], "--annotate": [[297, "cmdoption-pickletools-a"]], "--indentlevel": [[297, "cmdoption-pickletools-l"]], "--memo": [[297, "cmdoption-pickletools-m"]], "--preamble": [[297, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[297, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[297, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[297, "pickletools.optimize"]], "pickletools": [[297, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[297, "cmdoption-pickletools-a"], [297, "cmdoption-pickletools-l"], [297, "cmdoption-pickletools-m"], [297, "cmdoption-pickletools-o"], [297, "cmdoption-pickletools-p"]], "pep 594#pipes": [[298, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[298, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.open"]], "pipes": [[298, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[298, "pipes.Template.reset"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[299, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.iter_modules"]], "pkgutil": [[299, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[299, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.node"]], "platform": [[300, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[300, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[301, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[301, "plistlib.loads"]], "plist": [[301, "index-0"]], "plistlib": [[301, "module-plistlib"]], "property list\uff08\u5c6c\u6027\u6e05\u55ae\uff09": [[301, "index-0"]], "pop3": [[302, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[302, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[302, "poplib.POP3_SSL"]], "rfc 1939": [[302, "index-1"], [302, "index-2"]], "rfc 2449": [[302, "index-4"]], "rfc 2595": [[302, "index-3"], [302, "index-6"]], "rfc 6856": [[302, "index-5"], [474, "index-36"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.pass_"]], "poplib": [[302, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[302, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[303, "posix.environ"]], "large files\uff08\u5927\u578b\u6a94\u6848\uff09": [[303, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[304, "pprint.PrettyPrinter"]], "eval": [[304, "index-1"], [304, "index-2"], [341, "index-64"], [432, "index-44"], [433, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[304, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[304, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[304, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[304, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.pformat"]], "placeholder\uff08\u4f54\u4f4d\u7b26\u865f\uff09": [[304, "index-0"], [318, "index-0"], [360, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.pp"]], "pprint": [[304, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[304, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[304, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[305, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[305, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.add"]], "cprofile": [[305, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.create_stats"]], "deterministic profiling": [[305, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.print_stats"]], "profile": [[305, "module-profile"]], "profiling, deterministic": [[305, "index-0"]], "pstats": [[305, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[305, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[305, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[305, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[305, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[306, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[306, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[306, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[307, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[307, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[307, "pwd.getpwuid"]], "-": [[308, "cmdoption-python-m-py_compile"]], "--quiet": [[308, "cmdoption-python-m-py_compile-q"]], "<file>": [[308, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[308, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[308, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[308, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[308, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[308, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "byte-code\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[308, "index-0"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[308, "py_compile.compile"]], "py_compile": [[308, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[308, "cmdoption-python-m-py_compile"], [308, "cmdoption-python-m-py_compile-arg-file"], [308, "cmdoption-python-m-py_compile-q"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[309, "pyclbr.Function.parent"]], "pyclbr": [[309, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[309, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[309, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[309, "pyclbr.Class.super"]], "pager": [[310, "index-1"]], "pythondocs": [[310, "index-2"]], "documentation\uff08\u6587\u4ef6\uff09": [[310, "index-0"]], "generation\uff08\u7522\u751f\uff09": [[310, "index-0"]], "help\uff08\u5e6b\u52a9\uff09": [[310, "index-0"], [447, "index-0"]], "online\uff08\u7dda\u4e0a\uff09": [[310, "index-0"]], "pydoc": [[310, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.ErrorString"]], "expat": [[311, "index-0"]], "expaterror": [[311, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.GetInputContext"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_amplification_limit_breach (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_argument (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_buffer (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_NO_BUFFER"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_reserved_namespace_uri (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI"]], "xml_error_reserved_prefix_xml (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML"]], "xml_error_reserved_prefix_xmlns (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[311, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[311, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[311, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[311, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[311, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[311, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[311, "module-xml.parsers.expat.model"]], "empty": [[313, "queue.Empty"], [426, "index-15"], [426, "index-9"]], "full": [[313, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[313, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[313, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[313, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[313, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[313, "queue.SimpleQueue.qsize"]], "queue": [[313, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[313, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[314, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[314, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[314, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[314, "quopri.encodestring"]], "quopri": [[314, "module-quopri"]], "quoted-printable encoding\uff08\u53ef\u5217\u5370\u5b57\u5143\u7de8\u78bc\uff09": [[314, "index-0"]], "quoted-printable\uff08\u53ef\u5217\u5370\u5b57\u5143\uff09": [[314, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[315, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[315, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.betavariate"]], "binomialvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.binomialvariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.gauss"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.getrandbits"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.randint"]], "random": [[315, "module-random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.sample"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.seed"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[315, "random.weibullvariate"]], "() \uff08\u5713\u62ec\u865f\uff09": [[316, "index-15"], [341, "index-36"], [341, "index-46"], [423, "index-28"], [423, "index-40"], [426, "index-22"], [426, "index-47"], [426, "index-8"], [432, "index-6"]], "(?": [[316, "index-16"]], "(?!": [[316, "index-22"]], "(?#": [[316, "index-20"]], "(?(": [[316, "index-25"]], "(?:": [[316, "index-17"]], "(?<!": [[316, "index-24"]], "(?<=": [[316, "index-23"]], "(?=": [[316, "index-21"]], "(?p<": [[316, "index-18"]], "(?p=": [[316, "index-19"]], "*+": [[316, "index-7"]], "*?": [[316, "index-6"]], "++": [[316, "index-7"]], "+?": [[316, "index-6"]], "?+": [[316, "index-7"]], "??": [[316, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.MULTILINE"]], "noflag (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.NOFLAG"]], "regexflag (re \u4e2d\u7684\u985e\u5225)": [[316, "re.RegexFlag"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.S"]], "u (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.U"]], "unicode (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.UNICODE"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.X"]], "\\a": [[316, "index-27"], [316, "index-37"], [431, "index-23"]], "\\b": [[316, "index-29"], [316, "index-28"], [316, "index-37"], [431, "index-23"]], "\\d": [[316, "index-31"], [316, "index-30"]], "\\s": [[316, "index-33"], [316, "index-32"]], "\\w": [[316, "index-35"], [316, "index-34"]], "\\z": [[316, "index-36"]], "\\\\": [[316, "index-37"], [431, "index-23"]], "\\f": [[316, "index-37"], [431, "index-23"]], "\\g": [[316, "index-39"]], "\\r": [[316, "index-37"], [431, "index-23"]], "\\t": [[316, "index-37"], [431, "index-23"]], "\\v": [[316, "index-37"], [431, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[316, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[316, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[316, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[316, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.groups"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[316, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[316, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[316, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[316, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[316, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.re"]], "scanf()": [[316, "index-40"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[316, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[316, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[316, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[316, "re.subn"]], "{} \uff08\u82b1\u62ec\u865f\uff09": [[316, "index-8"], [342, "index-2"], [426, "index-16"], [426, "index-17"], [431, "index-25"]], "| \uff08\u5782\u76f4\u7dda\uff09": [[316, "index-14"], [341, "index-16"], [426, "index-76"]], "\u65bc\u6b63\u898f\u8868\u793a\u5f0f\u4e2d": [[316, "index-0"], [316, "index-1"], [316, "index-10"], [316, "index-11"], [316, "index-12"], [316, "index-13"], [316, "index-14"], [316, "index-15"], [316, "index-16"], [316, "index-17"], [316, "index-18"], [316, "index-19"], [316, "index-2"], [316, "index-20"], [316, "index-21"], [316, "index-22"], [316, "index-23"], [316, "index-24"], [316, "index-25"], [316, "index-26"], [316, "index-27"], [316, "index-28"], [316, "index-29"], [316, "index-3"], [316, "index-30"], [316, "index-31"], [316, "index-32"], [316, "index-33"], [316, "index-34"], [316, "index-35"], [316, "index-36"], [316, "index-37"], [316, "index-38"], [316, "index-39"], [316, "index-4"], [316, "index-5"], [316, "index-6"], [316, "index-7"], [316, "index-8"], [316, "index-9"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.read_init_file"]], "readline": [[317, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[317, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[318, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[318, "reprlib.aRepr"]], "fillvalue (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.fillvalue"]], "indent (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.indent"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[318, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[318, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[318, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[318, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[318, "reprlib.Repr.repr1"]], "reprlib": [[318, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.prlimit"]], "resource": [[319, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[319, "resource.setrlimit"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[320, "rlcompleter.Completer.complete"]], "rlcompleter": [[320, "module-rlcompleter"]], "pep 338": [[321, "index-6"], [428, "index-25"], [451, "index-1"], [463, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[321, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[321, "runpy.run_path"]], "runpy": [[321, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[322, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[322, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[322, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[322, "sched.scheduler.enterabs"]], "event scheduling\uff08\u4e8b\u4ef6\u6392\u7a0b\uff09": [[322, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[322, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[322, "sched.scheduler.run"]], "sched": [[322, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[322, "sched.scheduler"]], "pep 506": [[323, "index-0"], [475, "index-28"], [479, "index-287"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[323, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.randbits"]], "secrets": [[323, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[323, "secrets.token_urlsafe"]], "security considerations\uff08\u5b89\u5168\u6027\u8003\u91cf\uff09": [[324, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.PIPE_BUF"]], "winsock": [[325, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[325, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[325, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[325, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[325, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[325, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[325, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[325, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[325, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[325, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.poll"]], "popen() (\u65bc os \u6a21\u7d44)": [[325, "index-1"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[325, "select.poll.register"]], "select": [[325, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[325, "select.select"]], "socket() (\u65bc socket \u6a21\u7d44)": [[325, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[325, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[325, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[325, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[325, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.DevpollSelector"]], "event_read (\u65bc selectors \u6a21\u7d44\u4e2d)": [[326, "selectors.EVENT_READ"]], "event_write (\u65bc selectors \u6a21\u7d44\u4e2d)": [[326, "selectors.EVENT_WRITE"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[326, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[326, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[326, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[326, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[326, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[326, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[326, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[326, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.select"]], "selectors": [[326, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[326, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[327, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[327, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[327, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[327, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[327, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[327, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[328, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[328, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.read_token"]], "shlex": [[328, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[328, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[328, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[328, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[328, "shlex.shlex.wordchars"]], "samefileerror": [[329, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[329, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copyfileobj"]], "copying files\uff08\u8907\u88fd\u6a94\u6848\uff09": [[329, "index-0"]], "copying\uff08\u8907\u88fd\uff09": [[329, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.rmtree"]], "shutil": [[329, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[329, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.CTRL_C_EVENT"]], "handlers (signal \u4e2d\u7684\u985e\u5225)": [[330, "signal.Handlers"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.ITIMER_VIRTUAL"]], "itimererror": [[330, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGSEGV"]], "sigstkflt (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGSTKFLT"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.SIG_UNBLOCK"]], "sigmasks (signal \u4e2d\u7684\u985e\u5225)": [[330, "signal.Sigmasks"]], "signals (signal \u4e2d\u7684\u985e\u5225)": [[330, "signal.Signals"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.siginterrupt"]], "signal": [[330, "module-signal"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[330, "signal.valid_signals"]], "--user-base": [[331, "cmdoption-site-user-base"]], "--user-site": [[331, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.ENABLE_USER_SITE"]], "pep 370": [[331, "index-11"], [451, "index-19"], [451, "index-41"], [451, "index-42"], [464, "index-7"], [479, "index-45"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.PREFIXES"]], "pythonuserbase": [[331, "index-10"], [331, "index-9"], [451, "envvar-PYTHONUSERBASE"], [464, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.addsitedir"]], "comment\uff08\u8a3b\u89e3\uff09": [[331, "index-2"], [431, "index-4"], [445, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[331, "site.main"]], "site": [[331, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[331, "cmdoption-site-user-base"], [331, "cmdoption-site-user-site"]], "site-packages": [[331, "index-1"]], "sitecustomize": [[331, "index-5"]], "usercustomize": [[331, "index-6"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[332, "smtplib.LMTP"]], "rfc 1869": [[332, "index-2"], [332, "index-5"]], "rfc 4954": [[332, "index-7"], [332, "index-8"]], "rfc 821": [[332, "index-1"], [332, "index-4"]], "smtp": [[332, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[332, "smtplib.SMTP"]], "smtpauthenticationerror": [[332, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[332, "smtplib.SMTPConnectError"]], "smtpdataerror": [[332, "smtplib.SMTPDataError"]], "smtpexception": [[332, "smtplib.SMTPException"]], "smtpheloerror": [[332, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[332, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[332, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[332, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[332, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[332, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[332, "smtplib.SMTP_SSL"]], "simple mail transfer protocol\uff08\u7c21\u55ae\u90f5\u4ef6\u50b3\u8f38\u5354\u5b9a\uff09": [[332, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[332, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[332, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[333, "index-3"]], "sndhdr": [[333, "module-sndhdr"]], "tests (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[333, "sndhdr.tests"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[333, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[333, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_CAN"]], "af_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_DIVERT"]], "af_hyperv (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_HYPERV"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_UNIX"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.CMSG_SPACE"]], "ethertype_arp (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ETHERTYPE_ARP"]], "ethertype_ip (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ETHERTYPE_IP"]], "ethertype_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ETHERTYPE_IPV6"]], "ethertype_vlan (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ETHERTYPE_VLAN"]], "eth_p_all (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ETH_P_ALL"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HCI_TIME_STAMP"]], "hvsocket_address_flag_passthru (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU"]], "hvsocket_connected_suspend (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HVSOCKET_CONNECTED_SUSPEND"]], "hvsocket_connect_timeout (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HVSOCKET_CONNECT_TIMEOUT"]], "hvsocket_connect_timeout_max (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HVSOCKET_CONNECT_TIMEOUT_MAX"]], "hv_guid_broadcast (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_BROADCAST"]], "hv_guid_children (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_CHILDREN"]], "hv_guid_loopback (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_LOOPBACK"]], "hv_guid_parent (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_PARENT"]], "hv_guid_wildcard (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_WILDCARD"]], "hv_guid_zero (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_GUID_ZERO"]], "hv_protocol_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.HV_PROTOCOL_RAW"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "local_creds (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.LOCAL_CREDS"]], "local_creds_persistent (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.LOCAL_CREDS_PERSISTENT"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.PF_CAN"]], "pf_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.PF_DIVERT"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.PF_RDS"]], "rfc 3493": [[334, "index-15"]], "rfc 3542": [[334, "index-3"], [479, "index-217"]], "scm_creds2 (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SCM_CREDS2"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SOMAXCONN"]], "so_incoming_cpu (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SO_INCOMING_CPU"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[334, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.fromshare"]], "gaierror": [[334, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.has_ipv6"]], "herror": [[334, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[334, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[334, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[334, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[334, "socket.socketpair"]], "struct": [[334, "index-14"], [344, "module-struct"]], "timeout": [[334, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[334, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ForkingUDPServer"]], "forkingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ForkingUnixDatagramServer"]], "forkingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ForkingUnixStreamServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ThreadingUDPServer"]], "threadingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ThreadingUnixDatagramServer"]], "threadingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.ThreadingUnixStreamServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[335, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.allow_reuse_address"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.process_request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.request_queue_size"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.serve_forever"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.socket_type"]], "socketserver": [[335, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[335, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[335, "socketserver.BaseServer.verify_request"]], "pep 594#spwd": [[336, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[336, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[336, "spwd.getspnam"]], "spwd": [[336, "module-spwd"]], "--version": [[337, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [376, "cmdoption-trace-version"], [451, "cmdoption-version"]], "blob (sqlite3 \u4e2d\u7684\u985e\u5225)": [[337, "sqlite3.Blob"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[337, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[337, "sqlite3.Cursor"]], "dataerror": [[337, "sqlite3.DataError"]], "databaseerror": [[337, "sqlite3.DatabaseError"]], "integrityerror": [[337, "sqlite3.IntegrityError"]], "interfaceerror": [[337, "sqlite3.InterfaceError"]], "internalerror": [[337, "sqlite3.InternalError"]], "legacy_transaction_control (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.LEGACY_TRANSACTION_CONTROL"]], "notsupportederror": [[337, "sqlite3.NotSupportedError"]], "operationalerror": [[337, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[337, "index-8"], [479, "index-47"]], "pep 249": [[337, "index-0"], [337, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-2"], [337, "index-3"], [337, "index-4"], [337, "index-5"], [337, "index-9"], [463, "index-24"], [463, "index-25"], [470, "index-21"], [479, "index-37"], [479, "index-70"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[337, "sqlite3.PrepareProtocol"]], "programmingerror": [[337, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[337, "sqlite3.Row"]], "sqlite_dbconfig_defensive (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_DEFENSIVE"]], "sqlite_dbconfig_dqs_ddl (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_DQS_DDL"]], "sqlite_dbconfig_dqs_dml (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_DQS_DML"]], "sqlite_dbconfig_enable_fkey (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY"]], "sqlite_dbconfig_enable_fts3_tokenizer (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"]], "sqlite_dbconfig_enable_load_extension (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"]], "sqlite_dbconfig_enable_qpsg (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG"]], "sqlite_dbconfig_enable_trigger (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER"]], "sqlite_dbconfig_enable_view (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW"]], "sqlite_dbconfig_legacy_alter_table (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"]], "sqlite_dbconfig_legacy_file_format (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"]], "sqlite_dbconfig_no_ckpt_on_close (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"]], "sqlite_dbconfig_reset_database (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_RESET_DATABASE"]], "sqlite_dbconfig_trigger_eqp (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP"]], "sqlite_dbconfig_trusted_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA"]], "sqlite_dbconfig_writable_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.arraysize"]], "autocommit (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.autocommit"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.backup"]], "blobopen() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.blobopen"]], "close() (sqlite3.blob \u7684\u65b9\u6cd5)": [[337, "sqlite3.Blob.close"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.create_function"]], "create_window_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.create_window_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.description"]], "deserialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.deserialize"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.fetchone"]], "getconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.getconfig"]], "getlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.getlimit"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[337, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.paramstyle"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql] \u547d\u4ee4\u5217\u9078\u9805": [[337, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [337, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"]], "read() (sqlite3.blob \u7684\u65b9\u6cd5)": [[337, "sqlite3.Blob.read"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.row_factory"]], "row_factory (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[337, "sqlite3.Cursor.rowcount"]], "seek() (sqlite3.blob \u7684\u65b9\u6cd5)": [[337, "sqlite3.Blob.seek"]], "serialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.serialize"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.set_trace_callback"]], "setconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.setconfig"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.setinputsizes"]], "setlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[337, "sqlite3.Connection.setlimit"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[337, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[337, "module-sqlite3"]], "sqlite_errorcode (sqlite3.error \u7684\u5c6c\u6027)": [[337, "sqlite3.Error.sqlite_errorcode"]], "sqlite_errorname (sqlite3.error \u7684\u5c6c\u6027)": [[337, "sqlite3.Error.sqlite_errorname"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.sqlite_version_info"]], "tell() (sqlite3.blob \u7684\u65b9\u6cd5)": [[337, "sqlite3.Blob.tell"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[337, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[337, "sqlite3.version_info"]], "write() (sqlite3.blob \u7684\u65b9\u6cd5)": [[337, "sqlite3.Blob.write"]], "\u65bc sql \u9673\u8ff0\u5f0f\u4e2d": [[337, "index-6"], [337, "index-7"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[338, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_ktls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_ENABLE_KTLS"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_legacy_server_connect (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_LEGACY_SERVER_CONNECT"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[338, "index-2"], [468, "index-109"], [468, "index-110"], [468, "index-115"], [468, "index-89"], [470, "index-32"], [479, "index-101"], [479, "index-44"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.RAND_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.RAND_status"]], "rfc 1422": [[338, "index-16"], [338, "index-17"]], "rfc 1750": [[338, "index-5"]], "rfc 3280": [[338, "index-10"]], "rfc 4086": [[338, "index-18"]], "rfc 5246": [[338, "index-20"], [338, "index-9"]], "rfc 5280": [[338, "index-19"], [338, "index-6"], [474, "index-41"], [474, "index-51"]], "rfc 5929": [[338, "index-11"]], "rfc 6066": [[338, "index-13"], [338, "index-21"], [338, "index-8"]], "rfc 7301": [[338, "index-12"], [338, "index-7"], [474, "index-40"]], "rfc 7525": [[338, "index-22"]], "ssl": [[338, "index-1"], [338, "module-ssl"]], "sslcertverificationerror": [[338, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.SSLContext"]], "ssleoferror": [[338, "ssl.SSLEOFError"]], "sslerror": [[338, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[338, "index-3"], [338, "index-4"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.SSLSocket"]], "sslsyscallerror": [[338, "ssl.SSLSyscallError"]], "sslwantreaderror": [[338, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[338, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[338, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.SSLv3"]], "secure sockets layer\uff08\u5b89\u5168 socket \u5c64\uff09": [[338, "index-1"]], "tls": [[338, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[338, "ssl.TLSVersion.TLSv1_3"]], "transport layer security\uff08\u50b3\u8f38\u5c64\u5b89\u5168\uff09": [[338, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[338, "ssl.VerifyMode"]], "x509 certificate\uff08x509 \u6191\u8b49\uff09": [[338, "index-15"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.cert_time_to_seconds"]], "certificates\uff08\u6191\u8b49\uff09": [[338, "index-14"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[338, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[338, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[338, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[338, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[338, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[338, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.load_verify_locations"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[338, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[338, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[338, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[338, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[338, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[338, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[338, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[338, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[338, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[338, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[338, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[338, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[338, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[338, "ssl.SSLContext.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[338, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[338, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[338, "ssl.MemoryBIO.write_eof"]], "\uff08\u7528\u65bc ssl \u6a21\u7d44\uff09": [[338, "index-0"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[339, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[340, "statistics.NormalDist"]], "statisticserror": [[340, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[340, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[340, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[340, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[340, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.samples"]], "statistics": [[340, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[340, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[340, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[340, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[340, "statistics.NormalDist.zscore"]], "!=": [[341, "index-7"], [426, "index-77"]], "& \uff08\u548c\u865f\uff09": [[341, "index-16"], [426, "index-74"]], "//": [[341, "index-13"], [426, "index-67"]], "< \uff08\u5c0f\u65bc\uff09": [[341, "index-7"], [342, "index-3"], [344, "index-1"], [426, "index-77"]], "<<": [[341, "index-16"], [426, "index-71"]], "<=": [[341, "index-7"], [426, "index-77"]], "==": [[341, "index-7"], [426, "index-77"]], "> \uff08\u5927\u65bc\uff09": [[341, "index-7"], [342, "index-3"], [344, "index-1"], [426, "index-77"]], ">=": [[341, "index-7"], [426, "index-77"]], ">>": [[341, "index-16"], [426, "index-71"]], "alias\uff08\u5225\u540d\uff09": [[341, "index-56"]], "boolean\uff08\u5e03\u6797\uff09": [[341, "index-1"], [341, "index-11"], [341, "index-17"], [341, "index-5"], [424, "index-11"], [426, "index-82"]], "c": [[341, "index-11"], [344, "index-0"], [424, "index-13"], [424, "index-4"], [424, "index-40"], [426, "index-77"], [431, "index-23"]], "false": [[341, "index-17"], [341, "index-4"], [341, "index-1"], [424, "index-11"]], "false\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[341, "index-3"]], "genericalias\uff08\u6cdb\u578b\u5225\u540d\uff09": [[341, "index-56"]], "generic\uff08\u6cdb\u578b\uff09": [[341, "index-56"], [424, "index-5"]], "none\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[341, "index-3"]], "pep 237": [[341, "index-71"], [341, "index-72"], [460, "index-10"], [462, "index-1"], [462, "index-16"], [466, "index-1"]], "pep 3118": [[341, "index-50"], [464, "index-15"], [466, "index-33"], [472, "index-31"], [472, "index-4"], [472, "index-41"], [477, "index-8"], [479, "index-249"], [479, "index-256"], [479, "index-301"]], "pep 461": [[341, "index-49"], [474, "index-7"], [474, "index-8"]], "true": [[341, "index-17"], [341, "index-4"], [341, "index-2"], [424, "index-11"]], "union\uff08\u806f\u96c6\uff09": [[341, "index-59"], [341, "index-59"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[341, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[341, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[341, "instance.__class__"]], "__code__\uff08\u51fd\u5f0f\u7269\u4ef6\u5c6c\u6027\uff09": [[341, "index-63"]], "__dict__ (object \u7684\u5c6c\u6027)": [[341, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[341, "contextmanager.__enter__"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.__eq__"]], "__eq__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[341, "contextmanager.__exit__"]], "__ge__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__gt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[341, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[341, "iterator.__iter__"]], "__le__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__lt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__missing__()": [[341, "index-53"]], "__mro__ (class \u7684\u5c6c\u6027)": [[341, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[341, "definition.__name__"]], "__ne__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[341, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[341, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[341, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[341, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[341, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[341, "class.__subclasses__"]], "__type_params__ (definition \u7684\u5c6c\u6027)": [[341, "definition.__type_params__"]], "__unpacked__ (genericalias \u7684\u5c6c\u6027)": [[341, "genericalias.__unpacked__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.add"]], "and": [[341, "index-4"], [341, "index-6"], [426, "index-74"], [426, "index-84"]], "annotation\uff08\u8a3b\u8a18\uff09": [[341, "index-55"]], "append()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "arithmetic\uff08\u7b97\u8853\uff09": [[341, "index-13"]], "array\uff08\u9663\u5217\uff09": [[341, "index-40"], [424, "index-25"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[341, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[341, "int.as_integer_ratio"]], "assignment\uff08\u8ce6\u503c\uff09": [[341, "index-24"], [424, "index-22"], [424, "index-46"], [424, "index-50"], [432, "index-12"], [432, "index-14"], [432, "index-15"], [432, "index-4"], [432, "index-6"], [432, "index-8"], [432, "index-9"]], "binary operator\uff08\u4e8c\u5143\u904b\u7b97\u5b50\uff09": [[341, "index-13"], [426, "index-69"], [426, "index-70"]], "binary sequence types\uff08\u4e8c\u9032\u4f4d\u5e8f\u5217\u578b\u5225\uff09": [[341, "index-39"]], "binary\uff08\u4e8c\u9032\u4f4d\uff09": [[341, "index-12"], [344, "index-0"], [426, "index-64"], [426, "index-73"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[341, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[341, "int.bit_length"]], "bitwise\uff08\u4f4d\u5143\uff09": [[341, "index-16"], [426, "index-59"], [426, "index-73"], [426, "index-74"], [426, "index-75"], [426, "index-76"]], "buffer protocol\uff08\u7de9\u885d\u5340\u5354\u5b9a\uff09": [[341, "index-31"], [341, "index-39"]], "built-in\uff08\u5167\u5efa\uff09": [[341, "index-0"], [424, "index-41"]], "bytearray (%)": [[341, "index-45"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[341, "bytearray"]], "bytearray.splitlines \u65b9\u6cd5": [[341, "index-44"]], "bytearray\uff08\u4f4d\u5143\u7d44\u9663\u5217\uff09": [[341, "index-23"], [341, "index-40"], [341, "index-42"], [341, "index-43"], [341, "index-45"], [424, "index-24"]], "bytes (%)": [[341, "index-45"]], "bytes (\u5167\u5efa\u985e\u5225)": [[341, "bytes"]], "bytes.splitlines \u65b9\u6cd5": [[341, "index-44"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[341, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[341, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.cast"]], "ceil()\uff08\u65bc math \u6a21\u7d44\uff09": [[341, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[341, "str.center"]], "chaining\uff08\u93c8\u7d50\uff09": [[341, "index-7"], [432, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[341, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.clear"]], "clear()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "comparing\uff08\u6bd4\u8f03\uff09": [[341, "index-8"]], "comparisons\uff08\u6bd4\u8f03\uff09": [[341, "index-7"], [426, "index-78"]], "comparison\uff08\u6bd4\u8f03\uff09": [[341, "index-7"], [424, "index-76"], [426, "index-77"]], "complex\uff08\u8907\u6578\uff09": [[341, "index-13"], [424, "index-101"], [424, "index-14"]], "concatenation\uff08\u4e32\u63a5\uff09": [[341, "index-20"]], "conjugate()\uff08\u8907\u6578\u65b9\u6cd5\uff09": [[341, "index-14"]], "container\uff08\u5bb9\u5668\uff09": [[341, "index-18"], [424, "index-3"], [424, "index-45"]], "context management protocol\uff08\u60c5\u5883\u7ba1\u7406\u5354\u5b9a\uff09": [[341, "index-54"]], "context management\uff08\u60c5\u5883\u7ba1\u7406\uff09": [[341, "index-54"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.contiguous"]], "conversions\uff08\u8f49\u63db\uff09": [[341, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[341, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.copy"]], "copy()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.count"]], "count() (str \u7684\u65b9\u6cd5)": [[341, "str.count"]], "count()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-20"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.decode"]], "del": [[341, "index-24"], [341, "index-52"], [424, "index-71"], [432, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[341, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[341, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[341, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[341, "str.expandtabs"]], "extend()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[341, "str.find"]], "floating point\uff08\u6d6e\u9ede\u6578\uff09": [[341, "index-11"], [341, "index-12"]], "floor()\uff08\u65bc math \u6a21\u7d44\uff09": [[341, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[341, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[341, "str.format_map"]], "formatting\uff08\u683c\u5f0f\u5316\uff09": [[341, "index-45"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001printf": [[341, "index-35"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001\u5b57\u4e32 (%)": [[341, "index-35"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[341, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[341, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[341, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[341, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.hex"]], "hexadecimal\uff08\u5341\u516d\u9032\u4f4d\uff09": [[341, "index-12"]], "if": [[341, "index-1"], [423, "index-18"], [423, "index-3"], [426, "index-12"], [426, "index-88"]], "immutable\uff08\u4e0d\u53ef\u8b8a\uff09": [[341, "index-22"], [424, "index-17"]], "in": [[341, "index-10"], [341, "index-20"], [423, "index-6"], [426, "index-80"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.index"]], "index() (str \u7684\u65b9\u6cd5)": [[341, "str.index"]], "index()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-20"]], "insert()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "integer\uff08\u6574\u6578\uff09": [[341, "index-11"], [341, "index-12"], [341, "index-16"], [424, "index-10"], [424, "index-12"], [424, "index-19"]], "interpolation\uff08\u63d2\u503c\uff09": [[341, "index-45"]], "interpolation\uff08\u63d2\u503c\uff09\u3001printf": [[341, "index-35"]], "interpolation\uff08\u63d2\u503c\uff09\u3001\u5b57\u4e32 (%)": [[341, "index-35"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.intersection_update"]], "io.stringio": [[341, "index-29"]], "is": [[341, "index-7"], [426, "index-81"]], "is not": [[341, "index-7"], [426, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[341, "float.is_integer"]], "is_integer() (int \u7684\u65b9\u6cd5)": [[341, "int.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[341, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[341, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[341, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[341, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[341, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[341, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[341, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[341, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[341, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[341, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[341, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[341, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[341, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.itemsize"]], "iteration over\uff08\u758a\u4ee3\u65bc\uff09": [[341, "index-18"]], "iteration\uff08\u758a\u4ee3\uff09": [[341, "index-18"]], "iterator protocol\uff08\u758a\u4ee3\u5668\u5354\u5b9a\uff09": [[341, "index-18"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[341, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[341, "dict.keys"]], "language\uff08\u8a9e\u8a00\uff09": [[341, "index-11"], [424, "index-13"], [424, "index-4"], [424, "index-40"], [426, "index-77"]], "list (\u5167\u5efa\u985e\u5225)": [[341, "list"]], "literals\uff08\u5b57\u9762\u503c\uff09": [[341, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[341, "str.ljust"]], "loop over\uff08\u8ff4\u5708\uff09": [[341, "index-21"]], "loop\uff08\u8ff4\u5708\uff09": [[341, "index-21"], [423, "index-4"], [423, "index-6"], [432, "index-30"], [432, "index-33"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[341, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[341, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[341, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[341, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[341, "str.maketrans"]], "masking\uff08\u906e\u7f69\uff09": [[341, "index-16"]], "max": [[341, "index-20"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[341, "memoryview"]], "methods\uff08\u65b9\u6cd5\uff09": [[341, "index-32"], [341, "index-43"]], "min": [[341, "index-20"]], "mro() (class \u7684\u65b9\u6cd5)": [[341, "class.mro"]], "mutable sequence\uff08\u53ef\u8b8a\u5e8f\u5217\uff09": [[341, "index-21"], [424, "index-22"]], "mutable\uff08\u53ef\u8b8a\uff09": [[341, "index-23"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.ndim"]], "not": [[341, "index-6"], [426, "index-83"]], "not in": [[341, "index-10"], [341, "index-20"], [426, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.obj"]], "octal\uff08\u516b\u9032\u4f4d\uff09": [[341, "index-12"]], "operations on\uff08\u64cd\u4f5c\u65bc\uff09": [[341, "index-14"], [341, "index-16"], [341, "index-20"], [341, "index-24"], [341, "index-52"]], "operation\uff08\u64cd\u4f5c\uff09": [[341, "index-20"], [426, "index-58"], [426, "index-59"], [426, "index-64"], [426, "index-71"], [426, "index-73"], [426, "index-82"], [432, "index-20"]], "operator\uff08\u904b\u7b97\u5b50\uff09": [[341, "index-10"], [341, "index-13"], [341, "index-16"], [341, "index-20"], [341, "index-4"], [341, "index-6"], [341, "index-7"], [424, "index-68"], [426, "index-58"], [426, "index-60"], [426, "index-61"], [426, "index-62"], [426, "index-65"], [426, "index-66"], [426, "index-67"], [426, "index-68"], [426, "index-69"], [426, "index-70"], [426, "index-71"], [426, "index-74"], [426, "index-75"], [426, "index-76"], [426, "index-77"], [426, "index-80"], [426, "index-81"], [426, "index-83"], [426, "index-84"], [426, "index-85"], [426, "index-88"], [426, "index-97"]], "or": [[341, "index-4"], [341, "index-6"], [426, "index-75"], [426, "index-76"], [426, "index-85"]], "over mutable sequence\uff08\u65bc\u53ef\u8b8a\u5e8f\u5217\uff09": [[341, "index-21"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[341, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[341, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.pop"]], "pop()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[341, "dict.popitem"]], "printf \u98a8\u683c\u683c\u5f0f\u5316": [[341, "index-35"], [341, "index-45"]], "range": [[341, "index-27"], [423, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[341, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.remove"]], "remove()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[341, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[341, "str.removesuffix"]], "repetition\uff08\u91cd\u8907\uff09": [[341, "index-20"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[341, "str.replace"]], "reverse()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[341, "index-24"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[341, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[341, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[341, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[341, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[341, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[341, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[341, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[341, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.shape"]], "shifting\uff08\u79fb\u4f4d\uff09": [[341, "index-16"]], "sort() (list \u7684\u65b9\u6cd5)": [[341, "list.sort"]], "space\uff08\u7a7a\u767d\uff09": [[341, "index-37"], [341, "index-47"], [431, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[341, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[341, "str.splitlines"]], "sprintf \u98a8\u683c\u683c\u5f0f\u5316": [[341, "index-35"], [341, "index-45"]], "start (range \u7684\u5c6c\u6027)": [[341, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[341, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[341, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[341, "range.stop"]], "str (\u5167\u5efa\u985e\u5225)": [[341, "str"]], "str.splitlines \u65b9\u6cd5": [[341, "index-34"]], "strides (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[341, "str.strip"]], "str\uff08\u5167\u5efa\u985e\u5225\uff09": [[341, "index-28"], [341, "index-30"], [341, "index-31"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[341, "memoryview.suboffsets"]], "subscript\uff08\u4e0b\u6a19\uff09": [[341, "index-20"], [341, "index-24"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[341, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.symmetric_difference_update"]], "text sequence type\uff08\u6587\u5b57\u5e8f\u5217\u578b\u5225\uff09": [[341, "index-28"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[341, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[341, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[341, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[341, "str.translate"]], "trunc()\uff08\u65bc math \u6a21\u7d44\uff09": [[341, "index-15"]], "truth\uff08\u771f\uff09": [[341, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[341, "tuple"]], "type annotation\uff08\u578b\u5225\u8a3b\u8a18\uff09\uff1btype hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[341, "index-55"]], "unary operator\uff08\u4e00\u5143\u904b\u7b97\u5b50\uff09": [[341, "index-13"], [426, "index-60"], [426, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[341, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[341, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[341, "str.upper"]], "value": [[341, "index-1"]], "values": [[341, "index-17"], [432, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[341, "dict.values"]], "while": [[341, "index-1"], [423, "index-4"], [432, "index-30"], [432, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[341, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[341, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[341, "str.zfill"]], "\u65bc printf \u98a8\u683c\u683c\u5f0f\u5316": [[341, "index-36"], [341, "index-37"], [341, "index-46"], [341, "index-47"]], "\uff08\u4ea6\u8acb\u898b string\uff09": [[341, "index-28"]], ", \uff08\u9017\u865f\uff09": [[342, "index-8"], [423, "index-16"], [423, "index-28"], [423, "index-40"], [426, "index-10"], [426, "index-15"], [426, "index-16"], [426, "index-17"], [426, "index-44"], [426, "index-47"], [426, "index-91"], [432, "index-18"], [432, "index-34"], [432, "index-43"], [432, "index-45"], [432, "index-6"]], "= \uff08\u7b49\u65bc\uff09": [[342, "index-3"], [344, "index-1"], [423, "index-31"], [424, "index-83"], [426, "index-47"], [431, "index-25"], [432, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[342, "string.Formatter"]], "pep 292": [[342, "index-12"], [462, "index-3"]], "pep 378": [[342, "index-18"], [465, "index-3"], [467, "index-1"]], "pep 682": [[342, "index-17"], [469, "index-105"]], "template (string \u4e2d\u7684\u985e\u5225)": [[342, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.get_field"]], "get_identifiers() (string.template \u7684\u65b9\u6cd5)": [[342, "string.Template.get_identifiers"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.hexdigits"]], "is_valid() (string.template \u7684\u65b9\u6cd5)": [[342, "string.Template.is_valid"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[342, "string.Template.safe_substitute"]], "space": [[342, "index-4"]], "string": [[342, "module-string"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[342, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[342, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[342, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[342, "string.whitespace"]], "z": [[342, "index-5"]], "\u65bc template strings\uff08\u6a21\u677f\u5b57\u4e32\uff09": [[342, "index-13"]], "\u65bc\u5b57\u4e32\u683c\u5f0f\u5316": [[342, "index-10"], [342, "index-2"], [342, "index-3"], [342, "index-4"], [342, "index-5"], [342, "index-7"], [342, "index-8"]], "rfc 3454": [[343, "index-0"], [343, "index-1"], [479, "index-31"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[343, "stringprep.map_table_b3"]], "stringprep": [[343, "module-stringprep"]], "@ \uff08\u5728\uff09": [[344, "index-1"], [423, "index-29"], [423, "index-41"], [426, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[344, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[344, "struct.Struct.format"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[344, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[344, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[344, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.pack_into"]], "packing\uff08\u6253\u5305\uff09": [[344, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[344, "struct.Struct.size"]], "structures\uff08\u7d50\u69cb\uff09": [[344, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[344, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[344, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[344, "struct.unpack_from"]], "\u65bc struct format strings\uff08\u7d50\u69cb\u683c\u5f0f\u5b57\u4e32\uff09": [[344, "index-1"], [344, "index-2"], [344, "index-3"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[345, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[345, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[345, "index-0"], [462, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[345, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[345, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.SW_HIDE"]], "subprocesserror": [[345, "subprocess.SubprocessError"]], "systemroot": [[345, "index-4"]], "timeoutexpired": [[345, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[345, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[345, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[345, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[345, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[345, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[345, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[345, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[345, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[345, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[345, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[345, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[345, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[345, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[345, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[345, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[345, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[345, "module-subprocess"]], "subprocess \u6a21\u7d44": [[345, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[345, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[345, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[345, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[346, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[346, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.setsampwidth"]], "sunau": [[346, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[346, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[346, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[348, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[348, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[348, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[348, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[348, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[348, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[348, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[348, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[348, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[348, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[348, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[348, "symtable.SymbolTable.lookup"]], "symtable": [[348, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[348, "symtable.symtable"]], "pep 3149": [[349, "index-0"], [471, "index-6"], [479, "index-296"]], "pep 421": [[349, "index-15"], [349, "index-16"], [472, "index-19"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._debugmallocstats"]], "_emscripten_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._emscripten_info"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._getframe"]], "_getframemodulename() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._getframemodulename"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.abiflags"]], "activate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.activate_stack_trampoline"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.addaudithook"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.audit"]], "auditing": [[349, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.base_prefix"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.byteorder"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.copyright"]], "deactivate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.deactivate_stack_trampoline"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.dllhandle"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.dont_write_bytecode"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.excepthook"]], "exception() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.exception"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.gettrace"]], "getunicodeinternedsize() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getunicodeinternedsize"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.getwindowsversion"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.hash_info"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.hexversion"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.implementation"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.int_info"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.intern"]], "interpreter prompts\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[349, "index-27"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.is_finalizing"]], "is_stack_trampoline_active() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.is_stack_trampoline_active"]], "last_exc (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.last_exc"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.last_value"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.meta_path"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.modules"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.prefix"]], "profile function": [[349, "index-10"], [349, "index-28"], [361, "index-2"], [361, "index-3"]], "profiler": [[349, "index-10"], [349, "index-28"]], "prompts, interpreter\uff08\u63d0\u793a\u3001\u76f4\u8b6f\u5668\uff09": [[349, "index-27"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.ps2"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.pycache_prefix"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.settrace"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.stdout"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.thread_info"]], "trace function": [[349, "index-11"], [349, "index-29"], [361, "index-0"], [361, "index-1"]], "traceback": [[349, "index-8"], [377, "index-0"], [377, "module-traceback"], [423, "index-11"], [424, "index-63"], [432, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.unraisablehook"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.version_info"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.warnoptions"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[349, "sys.winver"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig._get_preferred_schemes"]], "configuration information\uff08\u8a2d\u5b9a\u8cc7\u8a0a\uff09": [[351, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[351, "sysconfig.parse_config_h"]], "sysconfig": [[351, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[352, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[352, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[352, "syslog.setlogmask"]], "syslog": [[352, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[352, "syslog.syslog"]], "nannynag": [[353, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[353, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[353, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[353, "tabnanny.process_tokens"]], "tabnanny": [[353, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[353, "tabnanny.verbose"]], "--create": [[354, "cmdoption-tarfile-create"], [418, "cmdoption-zipfile-create"]], "--extract": [[354, "cmdoption-tarfile-extract"], [418, "cmdoption-zipfile-extract"]], "--filter": [[354, "cmdoption-tarfile-filter"]], "--list": [[354, "cmdoption-tarfile-list"], [418, "cmdoption-zipfile-list"]], "--test": [[354, "cmdoption-tarfile-test"], [418, "cmdoption-zipfile-test"]], "-c": [[354, "cmdoption-tarfile-c"], [376, "cmdoption-trace-C"], [376, "cmdoption-trace-c"], [384, "cmdoption-unittest-c"], [417, "cmdoption-zipapp-c"], [418, "cmdoption-zipfile-c"], [451, "cmdoption-c"]], "-t": [[354, "cmdoption-tarfile-t"], [376, "cmdoption-trace-T"], [376, "cmdoption-trace-t"], [384, "cmdoption-unittest-discover-t"], [418, "cmdoption-zipfile-t"]], "absolutelinkerror": [[354, "tarfile.AbsoluteLinkError"]], "absolutepatherror": [[354, "tarfile.AbsolutePathError"]], "compressionerror": [[354, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.DEFAULT_FORMAT"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.ENCODING"]], "extracterror": [[354, "tarfile.ExtractError"]], "filtererror": [[354, "tarfile.FilterError"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.GNU_FORMAT"]], "headererror": [[354, "tarfile.HeaderError"]], "linkoutsidedestinationerror": [[354, "tarfile.LinkOutsideDestinationError"]], "outsidedestinationerror": [[354, "tarfile.OutsideDestinationError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.PAX_FORMAT"]], "pep 706": [[354, "index-0"], [470, "index-18"]], "readerror": [[354, "tarfile.ReadError"]], "specialfileerror": [[354, "tarfile.SpecialFileError"]], "streamerror": [[354, "tarfile.StreamError"]], "tarerror": [[354, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[354, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[354, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.addfile"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.close"]], "data_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.data_filter"]], "errorlevel (tarfile.tarfile \u7684\u5c6c\u6027)": [[354, "tarfile.TarFile.errorlevel"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.extractfile"]], "extraction_filter (tarfile.tarfile \u7684\u5c6c\u6027)": [[354, "tarfile.TarFile.extraction_filter"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[354, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[354, "tarfile.TarInfo.fromtarfile"]], "fully_trusted_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.fully_trusted_filter"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[354, "tarfile.TarFile.next"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[354, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[354, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.pax_headers"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.size"]], "tar_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[354, "tarfile.tar_filter"]], "tarfile": [[354, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[354, "cmdoption-tarfile-c"], [354, "cmdoption-tarfile-create"], [354, "cmdoption-tarfile-e"], [354, "cmdoption-tarfile-extract"], [354, "cmdoption-tarfile-filter"], [354, "cmdoption-tarfile-l"], [354, "cmdoption-tarfile-list"], [354, "cmdoption-tarfile-t"], [354, "cmdoption-tarfile-test"], [354, "cmdoption-tarfile-v"]], "tarinfo (tarfile.filtererror \u7684\u5c6c\u6027)": [[354, "tarfile.FilterError.tarinfo"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[354, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[354, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[355, "index-5"]], "rfc 854": [[355, "index-2"], [355, "index-3"]], "telnet": [[355, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[355, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[355, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[355, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[356, "tempfile.SpooledTemporaryFile"]], "temp": [[356, "index-8"], [457, "index-7"]], "tmp": [[356, "index-9"]], "tmpdir": [[356, "index-7"], [479, "index-49"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[356, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.TemporaryFile"]], "file name\uff08\u6a94\u6848\u540d\u7a31\uff09": [[356, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.mktemp"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[356, "tempfile.tempdir"]], "tempfile": [[356, "module-tempfile"]], "temporary\uff08\u81e8\u6642\uff09": [[356, "index-0"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcgetattr"]], "tcgetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcgetwinsize"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcsetattr"]], "tcsetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[357, "termios.tcsetwinsize"]], "termios": [[357, "module-termios"]], "tty": [[357, "index-0"], [379, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.ALWAYS_EQ"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[358, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[358, "index-2"]], "py_debug (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.Py_DEBUG"]], "resourcedenied": [[358, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[358, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[358, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[358, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[358, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[358, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[358, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.bind_unix_socket"]], "busy_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.busy_retry"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.findfile"]], "flush_std_streams() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.flush_std_streams"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[358, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.get_original_stdout"]], "get_pagesize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.get_pagesize"]], "ignore_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.warnings_helper.ignore_warnings"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.make_zip_script"]], "match_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.match_test"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[358, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[358, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_gzip"]], "requires_limited_api() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_limited_api"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[358, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.rmtree"]], "run_doctest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.run_doctest"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.run_python_until_end"]], "run_unittest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.run_unittest"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[358, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[358, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_match_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.set_match_tests"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.skip_unless_xattr"]], "sleeping_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.sleeping_retry"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.temp_umask"]], "test": [[358, "module-test"]], "test.support": [[358, "module-test.support"]], "test.support.bytecode_helper": [[358, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[358, "module-test.support.import_helper"]], "test.support.os_helper": [[358, "module-test.support.os_helper"]], "test.support.script_helper": [[358, "module-test.support.script_helper"]], "test.support.socket_helper": [[358, "module-test.support.socket_helper"]], "test.support.threading_helper": [[358, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[358, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[358, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[358, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[358, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[360, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[360, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[360, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[360, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[360, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[360, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.tabsize"]], "textwrap": [[360, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[360, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[360, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[360, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.BoundedSemaphore"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[361, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[361, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[361, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[361, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[361, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[361, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[361, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[361, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[361, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[361, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[361, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[361, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[361, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[361, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[361, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[361, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[361, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[361, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[361, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[361, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[361, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.setprofile"]], "setprofile_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.setprofile_all_threads"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.settrace"]], "settrace_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.settrace_all_threads"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[361, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[361, "threading.Thread.start"]], "threading": [[361, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[361, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[361, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[361, "threading.Condition.wait_for"]], "2-digit years\uff082 \u4f4d\u6578\u5e74\u4efd\uff09": [[362, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.CLOCK_UPTIME_RAW"]], "cpu time\uff08cpu \u6642\u9593\uff09": [[362, "index-12"], [362, "index-7"]], "coordinated universal time\uff08\u4e16\u754c\u5354\u8abf\u6642\u9593\uff09": [[362, "index-4"]], "daylight saving time\uff08\u65e5\u5149\u7bc0\u7d04\u6642\u9593\uff09": [[362, "index-5"]], "greenwich mean time\uff08\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\uff09": [[362, "index-4"]], "rfc 1123": [[362, "index-21"]], "tz": [[362, "index-13"], [362, "index-14"], [362, "index-15"], [362, "index-16"], [362, "index-17"], [362, "index-18"]], "utc": [[362, "index-4"]], "year 2038\uff082038 \u5e74\u554f\u984c\uff09": [[362, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.asctime"]], "benchmarking\uff08\u57fa\u6e96\u6e2c\u8a66\uff09": [[362, "index-12"], [362, "index-6"], [362, "index-7"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.daylight"]], "epoch\uff08\u7d00\u5143\uff09": [[362, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.process_time_ns"]], "processor time\uff08\u8655\u7406\u5668\u6642\u9593\uff09": [[362, "index-12"], [362, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[362, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[362, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.thread_time_ns"]], "time": [[362, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.timezone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[362, "time.tzset"]], "--number": [[363, "cmdoption-timeit-n"]], "--process": [[363, "cmdoption-timeit-p"]], "--repeat": [[363, "cmdoption-timeit-r"]], "--setup": [[363, "cmdoption-timeit-s"]], "--unit": [[363, "cmdoption-timeit-u"]], "-n": [[363, "cmdoption-timeit-n"], [394, "cmdoption-uuid-N"], [394, "cmdoption-uuid-n"]], "-u": [[363, "cmdoption-timeit-u"], [394, "cmdoption-uuid-u"], [451, "cmdoption-u"]], "benchmarking": [[363, "index-0"]], "performance": [[363, "index-0"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[363, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[363, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[363, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[363, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[363, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[363, "timeit.repeat"]], "timeit": [[363, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[363, "cmdoption-timeit-h"], [363, "cmdoption-timeit-n"], [363, "cmdoption-timeit-p"], [363, "cmdoption-timeit-r"], [363, "cmdoption-timeit-s"], [363, "cmdoption-timeit-u"], [363, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[363, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[363, "timeit.timeit"]], "gui": [[364, "index-0"]], "graphical user interface\uff08\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\uff09": [[364, "index-0"]], "tk": [[364, "index-0"]], "tkinter": [[364, "index-0"], [365, "module-tkinter"]], "display": [[365, "index-0"], [426, "index-15"], [426, "index-16"], [426, "index-17"]], "exception (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[365, "tkinter.EXCEPTION"]], "readable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[365, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[365, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[365, "tkinter.Tk"]], "tk option data types": [[365, "index-4"]], "writable (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[365, "tkinter.WRITABLE"]], "bind (widgets)": [[365, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[365, "tkinter.Tk.children"]], "createfilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[365, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (tkinter.widget.tk \u7684\u65b9\u6cd5)": [[365, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[365, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[365, "tkinter.Tk.master"]], "packing (widgets)": [[365, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[365, "tkinter.Tk.tk"]], "window manager (widgets)": [[365, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[366, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[366, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[366, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[367, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[367, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[367, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[367, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[367, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[367, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[367, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[368, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[368, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[368, "tkinter.font.nametofont"]], "tkinter.font": [[368, "module-tkinter.font"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[369, "tkinter.messagebox.Message"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.askyesnocancel"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[369, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[369, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[370, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[370, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[370, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.TList"]], "tix": [[371, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[371, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[371, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[372, "module-tkinter.ttk"]], "ttk": [[372, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[372, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ERRORTOKEN"]], "exclamation (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.EXCLAMATION"]], "fstring_end (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.FSTRING_END"]], "fstring_middle (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.FSTRING_MIDDLE"]], "fstring_start (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.FSTRING_START"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[373, "token.tok_name"]], "token": [[373, "module-token"], [431, "index-0"]], "--exact": [[374, "cmdoption-tokenize-e"]], "tokenerror": [[374, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[374, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[374, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[374, "tokenize.open"]], "tokenize": [[374, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[374, "cmdoption-tokenize-e"], [374, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[374, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[374, "tokenize.untokenize"]], "tomldecodeerror": [[375, "tomllib.TOMLDecodeError"]], "load() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[375, "tomllib.load"]], "loads() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[375, "tomllib.loads"]], "tomllib": [[375, "module-tomllib"]], "--count": [[376, "cmdoption-trace-c"]], "--coverdir": [[376, "cmdoption-trace-C"]], "--file": [[376, "cmdoption-trace-f"]], "--ignore-dir": [[376, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[376, "cmdoption-trace-ignore-module"]], "--listfuncs": [[376, "cmdoption-trace-l"]], "--missing": [[376, "cmdoption-trace-m"]], "--no-report": [[376, "cmdoption-trace-R"]], "--report": [[376, "cmdoption-trace-r"]], "--summary": [[376, "cmdoption-trace-s"]], "--timing": [[376, "cmdoption-trace-g"]], "--trace": [[376, "cmdoption-trace-t"]], "--trackcalls": [[376, "cmdoption-trace-T"]], "-g": [[376, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[376, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[376, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[376, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[376, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[376, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[376, "trace.Trace.runfunc"]], "trace": [[376, "module-trace"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[376, "cmdoption-trace-C"], [376, "cmdoption-trace-R"], [376, "cmdoption-trace-T"], [376, "cmdoption-trace-c"], [376, "cmdoption-trace-f"], [376, "cmdoption-trace-g"], [376, "cmdoption-trace-help"], [376, "cmdoption-trace-ignore-dir"], [376, "cmdoption-trace-ignore-module"], [376, "cmdoption-trace-l"], [376, "cmdoption-trace-m"], [376, "cmdoption-trace-r"], [376, "cmdoption-trace-s"], [376, "cmdoption-trace-t"], [376, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[376, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[376, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[377, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[377, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[377, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.__context__"]], "__notes__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.__notes__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.clear_frames"]], "end_lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.end_lineno"]], "end_offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.end_offset"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.exc_type"]], "exceptions (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.exceptions"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[377, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.extract_tb"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[377, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[377, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[377, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_exception_only"]], "format_frame_summary() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[377, "traceback.StackSummary.format_frame_summary"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[377, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[377, "traceback.StackSummary.from_list"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.msg"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.offset"]], "print() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[377, "traceback.TracebackException.print"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[377, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[377, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[378, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[378, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[378, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[378, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[378, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[378, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[378, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[378, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[378, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[378, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[378, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[378, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[378, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[378, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[378, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[378, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[378, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[378, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[378, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[378, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[378, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[378, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[378, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[378, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[378, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[378, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[378, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[378, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[378, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[378, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[378, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[378, "tracemalloc.Snapshot.traces"]], "cfmakecbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[379, "tty.cfmakecbreak"]], "cfmakeraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[379, "tty.cfmakeraw"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[379, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[379, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[380, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[380, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.stamp"]], "teleport() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.teleport"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.tracer"]], "turtle": [[380, "module-turtle"]], "turtledemo": [[380, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[380, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[381, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[381, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[381, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[381, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.NotImplementedType"]], "pep 3115": [[381, "index-0"], [423, "index-43"], [424, "index-87"], [466, "index-14"], [472, "index-29"]], "pep 560": [[381, "index-1"], [381, "index-2"], [381, "index-3"], [424, "index-84"], [424, "index-93"], [476, "index-21"], [476, "index-33"], [479, "index-237"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[381, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[381, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[381, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[381, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[381, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[381, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[381, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[381, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[381, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[381, "types.MappingProxyType.get"]], "get_original_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.get_original_bases"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[381, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[381, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.prepare_class"]], "replace() (types.codetype \u7684\u65b9\u6cd5)": [[381, "types.CodeType.replace"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[381, "types.resolve_bases"]], "types": [[381, "module-types"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[381, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Literal"]], "literalstring (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.LiteralString"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.NamedTuple"]], "never (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Never"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.NoReturn"]], "notrequired (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.NotRequired"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.OrderedDict"]], "pep 544": [[382, "index-28"], [382, "index-49"], [382, "index-5"], [477, "index-18"]], "pep 586": [[382, "index-33"], [382, "index-7"], [468, "index-111"], [477, "index-16"], [478, "index-27"]], "pep 589": [[382, "index-51"], [382, "index-8"], [477, "index-15"]], "pep 591": [[382, "index-35"], [382, "index-55"], [382, "index-9"], [477, "index-17"]], "pep 593": [[382, "index-10"], [382, "index-116"], [382, "index-38"], [478, "index-17"], [478, "index-5"], [479, "index-198"]], "pep 612": [[382, "index-12"], [382, "index-24"], [382, "index-25"], [382, "index-32"], [382, "index-47"], [382, "index-94"], [468, "index-102"], [468, "index-86"], [479, "index-113"], [479, "index-116"], [479, "index-118"], [479, "index-91"], [479, "index-98"]], "pep 613": [[382, "index-112"], [382, "index-13"], [468, "index-104"], [468, "index-87"], [479, "index-135"]], "pep 646": [[382, "index-14"], [382, "index-44"], [469, "index-96"], [469, "index-97"]], "pep 647": [[382, "index-15"], [382, "index-39"], [468, "index-105"], [468, "index-88"], [479, "index-99"]], "pep 655": [[382, "index-113"], [382, "index-114"], [382, "index-16"], [382, "index-52"], [469, "index-98"], [479, "index-59"]], "pep 673": [[382, "index-111"], [382, "index-17"], [469, "index-100"], [479, "index-75"]], "pep 675": [[382, "index-110"], [382, "index-18"], [469, "index-101"], [479, "index-65"]], "pep 681": [[382, "index-115"], [382, "index-19"], [469, "index-102"], [479, "index-57"]], "pep 692": [[382, "index-20"], [382, "index-40"], [470, "index-13"], [479, "index-12"], [479, "index-19"]], "pep 695": [[382, "index-100"], [382, "index-21"], [382, "index-42"], [382, "index-43"], [382, "index-45"], [382, "index-46"], [425, "index-12"], [432, "index-48"], [470, "index-15"], [470, "index-26"], [470, "index-47"], [479, "index-0"], [479, "index-1"], [479, "index-11"], [479, "index-2"], [479, "index-3"], [479, "index-6"]], "pep 698": [[382, "index-22"], [382, "index-56"], [470, "index-2"], [479, "index-23"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Protocol"]], "required (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Required"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Reversible"]], "self (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Self"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.TypeAlias"]], "typealiastype (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.TypeAliasType"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.TypeVar"]], "typevartuple (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.TypeVarTuple"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Union"]], "unpack (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.Unpack"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[382, "typing.ValuesView"]], "__bound__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__bound__"]], "__constraints__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__constraints__"]], "__contravariant__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__contravariant__"]], "__covariant__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__covariant__"]], "__infer_variance__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__infer_variance__"]], "__module__ (typing.newtype \u7684\u5c6c\u6027)": [[382, "typing.NewType.__module__"]], "__module__ (typing.typealiastype \u7684\u5c6c\u6027)": [[382, "typing.TypeAliasType.__module__"]], "__name__ (typing.newtype \u7684\u5c6c\u6027)": [[382, "typing.NewType.__name__"]], "__name__ (typing.paramspec \u7684\u5c6c\u6027)": [[382, "typing.ParamSpec.__name__"]], "__name__ (typing.typealiastype \u7684\u5c6c\u6027)": [[382, "typing.TypeAliasType.__name__"]], "__name__ (typing.typevar \u7684\u5c6c\u6027)": [[382, "typing.TypeVar.__name__"]], "__name__ (typing.typevartuple \u7684\u5c6c\u6027)": [[382, "typing.TypeVarTuple.__name__"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[382, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[382, "typing.TypedDict.__required_keys__"]], "__supertype__ (typing.newtype \u7684\u5c6c\u6027)": [[382, "typing.NewType.__supertype__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[382, "typing.TypedDict.__total__"]], "__type_params__ (typing.typealiastype \u7684\u5c6c\u6027)": [[382, "typing.TypeAliasType.__type_params__"]], "__value__ (typing.typealiastype \u7684\u5c6c\u6027)": [[382, "typing.TypeAliasType.__value__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[382, "typing.ParamSpec.args"]], "assert_never() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.assert_never"]], "assert_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.assert_type"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.cast"]], "clear_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.clear_overloads"]], "dataclass_transform() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.dataclass_transform"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.get_origin"]], "get_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.get_overloads"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[382, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.overload"]], "override() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.override"]], "reveal_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.reveal_type"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[382, "typing.type_check_only"]], "typing": [[382, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.category"]], "character\uff08\u5b57\u5143\uff09": [[383, "index-0"], [424, "index-19"], [426, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.combining"]], "database\uff08\u8cc7\u6599\u5eab\uff09": [[383, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.ucd_3_2_0"]], "unicodedata": [[383, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[383, "unicodedata.unidata_version"]], "--buffer": [[384, "cmdoption-unittest-b"]], "--catch": [[384, "cmdoption-unittest-c"]], "--durations": [[384, "cmdoption-unittest-durations"]], "--failfast": [[384, "cmdoption-unittest-f"]], "--locals": [[384, "cmdoption-unittest-locals"]], "--pattern": [[384, "cmdoption-unittest-discover-p"]], "--start-directory": [[384, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[384, "cmdoption-unittest-discover-t"]], "-k": [[384, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[384, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[384, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[384, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[384, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[384, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.addCleanup"]], "addduration() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addDuration"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[384, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[384, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.buffer"]], "collecteddurations (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.collectedDurations"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[384, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.doModuleCleanups"]], "enterasynccontext() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[384, "unittest.IsolatedAsyncioTestCase.enterAsyncContext"]], "enterclasscontext() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[384, "unittest.TestCase.enterClassContext"]], "entercontext() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.enterContext"]], "entermodulecontext() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.enterModuleContext"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[384, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[384, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[384, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[384, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[384, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[384, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[384, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[384, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[384, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[384, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[384, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[384, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[384, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[384, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[384, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[384, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[384, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[384, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[384, "cmdoption-unittest-b"], [384, "cmdoption-unittest-c"], [384, "cmdoption-unittest-durations"], [384, "cmdoption-unittest-f"], [384, "cmdoption-unittest-k"], [384, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[384, "cmdoption-unittest-discover-p"], [384, "cmdoption-unittest-discover-s"], [384, "cmdoption-unittest-discover-t"], [384, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[384, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[385, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[385, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[385, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[385, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[385, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[385, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[385, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[385, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[385, "module-unittest.mock"]], "urllib": [[388, "module-urllib"]], "contenttooshorterror": [[389, "urllib.error.ContentTooShortError"]], "httperror": [[389, "urllib.error.HTTPError"]], "urlerror": [[389, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[389, "urllib.error.HTTPError.code"]], "content (urllib.error.contenttooshorterror \u7684\u5c6c\u6027)": [[389, "urllib.error.ContentTooShortError.content"]], "fp (urllib.error.httperror \u7684\u5c6c\u6027)": [[389, "urllib.error.HTTPError.fp"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[389, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[389, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[389, "urllib.error.URLError.reason"]], "url (urllib.error.httperror \u7684\u5c6c\u6027)": [[389, "urllib.error.HTTPError.url"]], "urllib.error": [[389, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[390, "index-17"]], "rfc 1808": [[390, "index-1"], [390, "index-16"], [474, "index-43"]], "rfc 2368": [[390, "index-11"]], "rfc 2396": [[390, "index-10"], [390, "index-3"], [390, "index-6"], [474, "index-44"], [476, "index-34"]], "rfc 2732": [[390, "index-9"], [465, "index-11"], [471, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[390, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[390, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.parse_qsl"]], "parsing\uff08\u5256\u6790\uff09": [[390, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.quote_plus"]], "relative\uff08\u76f8\u5c0d\uff09": [[390, "index-0"], [432, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urljoin"]], "urllib.parse": [[390, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[390, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.ProxyHandler"]], "rfc 2397": [[391, "index-8"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[391, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[391, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[391, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[391, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[391, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[391, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.get_method"]], "getcode() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[391, "urllib.response.addinfourl.getcode"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.getproxies"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[391, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[391, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_308() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.http_error_308"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[391, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.method"]], "no_proxy": [[391, "index-4"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[391, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[391, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[391, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[391, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[391, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[391, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[391, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[391, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[391, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[391, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[391, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[391, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.urlcleanup"]], "urllib.response": [[391, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[391, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[391, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[392, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[392, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[392, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[392, "module-urllib.robotparser"]], "ellinghouse, lance": [[393, "index-1"]], "jansen, jack": [[393, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[393, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[393, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[393, "uu.encode"]], "--name": [[394, "cmdoption-uuid-name"]], "--namespace": [[394, "cmdoption-uuid-namespace"]], "--uuid": [[394, "cmdoption-uuid-uuid"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[394, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[394, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.bytes_le"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.fields"]], "getnode": [[394, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.is_safe"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[394, "uuid.SafeUUID.safe"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[394, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[394, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.urn"]], "uuid": [[394, "module-uuid"]], "uuid \u547d\u4ee4\u5217\u9078\u9805": [[394, "cmdoption-uuid-N"], [394, "cmdoption-uuid-h"], [394, "cmdoption-uuid-n"], [394, "cmdoption-uuid-name"], [394, "cmdoption-uuid-namespace"], [394, "cmdoption-uuid-u"], [394, "cmdoption-uuid-uuid"]], "uuid1": [[394, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.uuid1"]], "uuid3": [[394, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.uuid3"]], "uuid4": [[394, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.uuid4"]], "uuid5": [[394, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[394, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[394, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[395, "venv.EnvBuilder"]], "environments \uff08\u74b0\u5883\uff09": [[395, "index-0"]], "pep 405": [[395, "index-6"], [472, "index-1"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[395, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[395, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[395, "module-venv"]], "virtual \uff08\u865b\u64ec\uff09": [[395, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[396, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[396, "warnings.warn_explicit"]], "warnings": [[396, "module-warnings"]], "warnings \uff08\u8b66\u544a\uff09": [[396, "index-0"]], "wave_read (wave \u4e2d\u7684\u985e\u5225)": [[397, "wave.Wave_read"]], "wave_write (wave \u4e2d\u7684\u985e\u5225)": [[397, "wave.Wave_write"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[397, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[397, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.tell"]], "wave": [[397, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[397, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.CallableProxyType"]], "pep 205": [[398, "index-2"], [459, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[398, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[398, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[398, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[398, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[398, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[398, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[398, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[398, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[398, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[398, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[398, "module-weakref"]], "browser": [[399, "index-0"], [399, "index-1"]], "kdedir": [[399, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.get"]], "name (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.name"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[399, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[399, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[399, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[399, "webbrowser.register"]], "webbrowser": [[399, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[401, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[401, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[401, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[401, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[401, "winreg.PyHKEY.__exit__"]], "environment variables expansion (windows) \uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[401, "index-0"]], "winreg": [[401, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[402, "winsound.SND_PURGE"]], "winsound": [[402, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.handlers.CGIHandler"]], "errorstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.types.ErrorStream"]], "filewrapper (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.types.FileWrapper"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.handlers.IISCGIHandler"]], "inputstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.types.InputStream"]], "pep 3333": [[403, "index-0"], [403, "index-1"], [403, "index-11"], [403, "index-12"], [403, "index-13"], [403, "index-14"], [403, "index-15"], [403, "index-16"], [403, "index-17"], [403, "index-18"], [403, "index-2"], [403, "index-3"], [403, "index-4"], [403, "index-6"], [403, "index-7"], [403, "index-8"], [403, "index-9"], [469, "index-108"], [471, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.handlers.SimpleHandler"]], "startresponse (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.types.StartResponse"]], "wsgiapplication (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[403, "wsgiref.types.WSGIApplication"]], "wsgienvironment (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[403, "wsgiref.types.WSGIEnvironment"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[403, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[403, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[403, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[403, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[403, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[403, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[403, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[403, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[403, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[403, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[403, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[403, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[403, "module-wsgiref"]], "wsgiref.handlers": [[403, "module-wsgiref.handlers"]], "wsgiref.headers": [[403, "module-wsgiref.headers"]], "wsgiref.simple_server": [[403, "module-wsgiref.simple_server"]], "wsgiref.types": [[403, "module-wsgiref.types"]], "wsgiref.util": [[403, "module-wsgiref.util"]], "wsgiref.validate": [[403, "module-wsgiref.validate"]], "conversionerror": [[404, "xdrlib.ConversionError"]], "external data representation \uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\uff09": [[404, "index-0"]], "pep 594#xdrlib": [[404, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[404, "xdrlib.Packer"]], "rfc 1014": [[404, "index-2"], [404, "index-3"]], "rfc 1832": [[404, "index-4"], [404, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[404, "xdrlib.Unpacker"]], "xdr": [[404, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[404, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[404, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[404, "module-xdrlib"]], "xml": [[405, "module-xml"]], "domexception": [[406, "xml.dom.DOMException"]], "domstringsizeerr": [[406, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[406, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[406, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[406, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[406, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[406, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[406, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[406, "xml.dom.InvalidStateErr"]], "namespaceerr": [[406, "xml.dom.NamespaceErr"]], "nodataallowederr": [[406, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[406, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[406, "xml.dom.NotFoundErr"]], "notsupportederr": [[406, "xml.dom.NotSupportedErr"]], "python_dom": [[406, "index-0"]], "syntaxerr": [[406, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[406, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[406, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[406, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[406, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[406, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[406, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[406, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[406, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[406, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[406, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[406, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[406, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[406, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[406, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[406, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[406, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[406, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[406, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[406, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[406, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[406, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[406, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[406, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[406, "xml.dom.Attr.value"]], "xml.dom": [[406, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[407, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[407, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[407, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[407, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[407, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[407, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[407, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[408, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[408, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[408, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[408, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[408, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[408, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[408, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[408, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[409, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.data"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.findtext"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.getroot"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[409, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[409, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[409, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude.default_loader()": [[409, "xml.etree.ElementInclude.default_loader"]], "xml.etree.elementinclude.include()": [[409, "xml.etree.ElementInclude.include"]], "xml.etree.elementtree": [[409, "module-xml.etree.ElementTree"]], "saxexception": [[410, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[410, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[410, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[410, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[410, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[410, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[410, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[410, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[410, "xml.sax.parseString"]], "xml.sax": [[410, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[411, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[411, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[411, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[411, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[412, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[412, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[412, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[413, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[413, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[413, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[413, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[413, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[413, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[415, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[415, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[415, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[415, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[415, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[415, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[415, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[416, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[416, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[416, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[416, "module-xmlrpc.server"]], "--compress": [[417, "cmdoption-zipapp-c"]], "--info": [[417, "cmdoption-zipapp-info"]], "--main": [[417, "cmdoption-zipapp-m"]], "--python": [[417, "cmdoption-zipapp-p"]], "executable zip files\uff08\u53ef\u57f7\u884c\u7684 zip \u6a94\u6848\uff09": [[417, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[417, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[417, "zipapp.get_interpreter"]], "zipapp": [[417, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[417, "cmdoption-zipapp-c"], [417, "cmdoption-zipapp-h"], [417, "cmdoption-zipapp-info"], [417, "cmdoption-zipapp-m"], [417, "cmdoption-zipapp-o"], [417, "cmdoption-zipapp-p"]], "--metadata-encoding": [[418, "cmdoption-zipfile-metadata-encoding"]], "badzipfile": [[418, "zipfile.BadZipFile"], [418, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.CRC"]], "largezipfile": [[418, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[418, "zipfile.Path"]], "path.stem (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.Path.stem"]], "path.suffix (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.Path.suffix"]], "path.suffixes (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.Path.suffixes"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[418, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[418, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[418, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[418, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[418, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[418, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[418, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[418, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.joinpath"]], "mkdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.mkdir"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[418, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[418, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[418, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[418, "zipfile.ZipFile.writestr"]], "zipfile": [[418, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[418, "cmdoption-zipfile-c"], [418, "cmdoption-zipfile-create"], [418, "cmdoption-zipfile-e"], [418, "cmdoption-zipfile-extract"], [418, "cmdoption-zipfile-l"], [418, "cmdoption-zipfile-list"], [418, "cmdoption-zipfile-metadata-encoding"], [418, "cmdoption-zipfile-t"], [418, "cmdoption-zipfile-test"]], "pep 273": [[419, "index-0"], [419, "index-1"], [461, "index-4"], [461, "index-5"]], "zipimporterror": [[419, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[419, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.exec_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[419, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[419, "zipimport.zipimporter.prefix"]], "zipimport": [[419, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[419, "zipimport.zipimporter"]], "cyclic redundancy check\uff08\u5faa\u74b0\u5197\u9918\u6838\u5c0d\uff09": [[420, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.adler32"]], "checksum\uff08\u6838\u5c0d\u548c\uff09": [[420, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[420, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[420, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[420, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[420, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[420, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[420, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[420, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[420, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[420, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[420, "zlib.Decompress.unused_data"]], "zlib": [[420, "module-zlib"]], "invalidtzpathwarning": [[421, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[421, "index-1"], [475, "index-17"], [475, "index-18"], [479, "index-272"]], "pep 615": [[421, "index-0"], [478, "index-16"], [478, "index-9"], [479, "index-162"]], "pythontzpath": [[421, "envvar-PYTHONTZPATH"], [421, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[421, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[421, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[421, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[421, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[421, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[421, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[421, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[421, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[421, "zoneinfo.reset_tzpath"]], "zoneinfo": [[421, "module-zoneinfo"]], "! patterns": [[423, "index-23"]], "->": [[423, "index-34"], [437, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[423, "index-23"]], "dedent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[423, "index-2"], [431, "index-9"]], "newline token\uff08\u63db\u884c\u6a19\u8a8c\uff09": [[423, "index-2"], [431, "index-3"]], "pep 3107": [[423, "index-36"], [437, "index-16"], [466, "index-6"], [474, "index-9"], [476, "index-0"]], "pep 3129": [[423, "index-44"], [464, "index-18"]], "pep 318": [[423, "index-45"], [462, "index-12"], [462, "index-4"], [462, "index-5"]], "pep 570": [[423, "index-33"], [477, "index-23"], [477, "index-32"], [479, "index-213"]], "pep 614": [[423, "index-30"], [423, "index-42"], [478, "index-15"], [478, "index-3"], [479, "index-185"]], "pep 636": [[423, "index-20"], [423, "index-26"], [437, "index-15"], [468, "index-82"], [468, "index-97"]], "annotations\uff08\u8a3b\u91cb\uff09": [[423, "index-34"], [437, "index-6"]], "as": [[423, "index-10"], [423, "index-16"], [423, "index-18"], [423, "index-9"], [432, "index-34"], [432, "index-35"]], "async": [[423, "index-47"]], "async def": [[423, "index-46"]], "async for": [[423, "index-48"], [426, "index-12"]], "async with": [[423, "index-49"]], "await": [[423, "index-47"], [426, "index-13"], [426, "index-57"]], "binding\uff08\u7d81\u5b9a\uff09": [[423, "index-28"], [423, "index-40"]], "break": [[423, "index-13"], [423, "index-15"], [423, "index-5"], [423, "index-7"], [432, "index-30"]], "case": [[423, "index-18"], [423, "index-18"]], "case block": [[423, "index-22"]], "class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09": [[423, "index-40"], [423, "index-41"], [424, "index-83"]], "clause\uff08\u5b50\u53e5\uff09": [[423, "index-1"]], "compound statement\uff08\u8907\u5408\u9673\u8ff0\u5f0f\uff09": [[423, "index-16"], [423, "index-18"], [423, "index-28"], [423, "index-3"], [423, "index-4"], [423, "index-40"], [423, "index-6"], [423, "index-9"]], "compound\uff08\u8907\u5408\uff09": [[423, "index-0"]], "continue": [[423, "index-13"], [423, "index-15"], [423, "index-5"], [423, "index-7"], [432, "index-33"]], "dangling": [[423, "index-2"]], "def": [[423, "index-28"]], "default\uff08\u9810\u8a2d\uff09": [[423, "index-31"]], "definition\uff08\u5b9a\u7fa9\uff09": [[423, "index-28"], [423, "index-40"], [432, "index-24"]], "elif": [[423, "index-3"]], "else": [[423, "index-13"], [423, "index-2"], [423, "index-3"], [423, "index-4"], [423, "index-6"], [423, "index-9"], [426, "index-88"], [432, "index-31"]], "except clause\uff08\u4f8b\u5916\u5b50\u53e5\uff09": [[423, "index-10"]], "except_star": [[423, "index-12"]], "execution\uff08\u57f7\u884c\uff09": [[423, "index-40"], [424, "index-63"], [425, "index-13"], [425, "index-2"]], "expression list\uff08\u8868\u9054\u5f0f\u5217\u8868\uff09": [[423, "index-40"]], "finally": [[423, "index-14"], [423, "index-9"], [432, "index-25"], [432, "index-32"], [432, "index-33"]], "for": [[423, "index-6"], [426, "index-12"], [432, "index-30"], [432, "index-33"], [437, "index-0"]], "frame": [[423, "index-40"], [424, "index-60"], [425, "index-2"]], "function annotations\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[423, "index-34"], [437, "index-6"]], "function definition\uff08\u51fd\u5f0f\u5b9a\u7fa9\uff09": [[423, "index-27"], [423, "index-28"], [423, "index-29"], [423, "index-31"], [423, "index-32"]], "function \uff08\u51fd\u5f0f\uff09": [[423, "index-28"], [423, "index-34"], [424, "index-32"], [424, "index-33"], [424, "index-37"], [424, "index-38"], [424, "index-39"], [424, "index-40"], [426, "index-23"], [426, "index-52"], [426, "index-53"], [426, "index-90"], [432, "index-24"], [432, "index-26"]], "guard": [[423, "index-21"]], "inheritance\uff08\u7e7c\u627f\uff09": [[423, "index-40"]], "irrefutable case block": [[423, "index-22"]], "keyword\uff08\u95dc\u9375\u5b57\uff09": [[423, "index-12"], [423, "index-13"], [423, "index-14"], [423, "index-16"], [423, "index-18"], [423, "index-18"], [423, "index-3"], [423, "index-4"], [423, "index-47"], [423, "index-6"], [423, "index-9"], [426, "index-23"], [426, "index-57"], [431, "index-13"], [431, "index-14"], [432, "index-25"], [432, "index-31"], [432, "index-32"], [432, "index-33"], [432, "index-34"]], "match": [[423, "index-18"], [423, "index-18"]], "match statement\uff08\u5339\u914d\u9673\u8ff0\u5f0f\uff09": [[423, "index-18"]], "name\uff08\u540d\u7a31\uff09": [[423, "index-28"], [423, "index-40"], [425, "index-4"], [426, "index-3"], [426, "index-5"], [431, "index-10"], [432, "index-22"], [432, "index-34"], [432, "index-36"], [432, "index-4"], [432, "index-43"], [436, "index-1"]], "parameter list\uff08\u53c3\u6578\u5217\u8868\uff09": [[423, "index-28"]], "pattern matching\uff08\u6a21\u5f0f\u5339\u914d\uff09": [[423, "index-18"]], "return \uff08\u56de\u50b3\uff09": [[423, "index-13"], [423, "index-15"], [432, "index-24"]], "suite\uff08\u5957\u88dd\uff09": [[423, "index-1"]], "target": [[423, "index-6"], [432, "index-21"], [432, "index-31"], [432, "index-5"], [432, "index-6"]], "type parameter\uff08\u578b\u5225\u53c3\u6578\uff09": [[423, "index-51"]], "user-defined function\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u51fd\u5f0f\uff09": [[423, "index-28"], [424, "index-33"], [426, "index-52"]], "value\uff08\u503c\uff09": [[423, "index-31"], [426, "index-17"]], "with": [[423, "index-16"], [424, "index-103"]], "with statement\uff08with \u9673\u8ff0\u5f0f\uff09": [[423, "index-16"]], "ellipsis": [[424, "index-8"]], "java": [[424, "index-13"]], "notimplemented": [[424, "index-7"]], "pep 252": [[424, "index-82"], [460, "index-2"], [460, "index-4"]], "pep 3135": [[424, "index-90"], [466, "index-31"]], "pep 562": [[424, "index-112"], [476, "index-16"], [479, "index-233"], [479, "index-238"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[424, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[424, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[424, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[424, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[424, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[424, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[424, "object.__anext__"]], "__annotations__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__annotations__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-43"]], "__annotations__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__await__() (object \u7684\u65b9\u6cd5)": [[424, "object.__await__"]], "__bases__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[424, "object.__bool__"]], "__bool__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-95"]], "__buffer__() (object \u7684\u65b9\u6cd5)": [[424, "object.__buffer__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[424, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[424, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ceil__"]], "__class__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[424, "index-52"]], "__class__ \uff08\u65b9\u6cd5 cell\uff09": [[424, "index-89"]], "__class__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-80"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[424, "object.__class_getitem__"]], "__classcell__ \uff08\u985e\u5225\u547d\u540d\u7a7a\u9593\u9805\u76ee\uff09": [[424, "index-89"]], "__closure__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__code__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[424, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[424, "object.__contains__"]], "__defaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__del__() (object \u7684\u65b9\u6cd5)": [[424, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[424, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[424, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[424, "object.__delitem__"]], "__dict__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__dict__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[424, "index-52"]], "__dict__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-44"]], "__dict__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__dir__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-80"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[424, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[424, "object.__divmod__"]], "__doc__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__doc__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[424, "index-36"]], "__doc__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-43"]], "__doc__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[424, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[424, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[424, "object.__exit__"]], "__file__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-43"]], "__float__() (object \u7684\u65b9\u6cd5)": [[424, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[424, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__floordiv__"]], "__format__() (object \u7684\u65b9\u6cd5)": [[424, "object.__format__"]], "__format__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-75"]], "__func__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[424, "index-36"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[424, "object.__get__"]], "__getattr__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-80"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[424, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[424, "object.__getattribute__"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[424, "object.__getitem__"]], "__getitem__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-68"]], "__globals__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[424, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[424, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[424, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[424, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[424, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[424, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[424, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[424, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[424, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[424, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[424, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[424, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[424, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ixor__"]], "__kwdefaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__le__() (object \u7684\u65b9\u6cd5)": [[424, "object.__le__"]], "__len__() (object \u7684\u65b9\u6cd5)": [[424, "object.__len__"]], "__len__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-79"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[424, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[424, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[424, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[424, "object.__mod__"]], "__module__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__module__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[424, "index-36"]], "__module__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__mro_entries__() (object \u7684\u65b9\u6cd5)": [[424, "object.__mro_entries__"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__mul__"]], "__name__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__name__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[424, "index-36"]], "__name__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[424, "index-43"]], "__name__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[424, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[424, "object.__new__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[424, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[424, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[424, "object.__pow__"]], "__prepare__ \uff08\u5143\u985e\u5225\u65b9\u6cd5\uff09": [[424, "index-86"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[424, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rdivmod__"]], "__release_buffer__() (object \u7684\u65b9\u6cd5)": [[424, "object.__release_buffer__"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[424, "object.__repr__"]], "__repr__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-72"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[424, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[424, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[424, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[424, "object.__rxor__"]], "__self__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[424, "index-36"]], "__set__() (object \u7684\u65b9\u6cd5)": [[424, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[424, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[424, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[424, "object.__setitem__"]], "__str__() (object \u7684\u65b9\u6cd5)": [[424, "object.__str__"]], "__str__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[424, "index-73"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[424, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[424, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[424, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[424, "object.__trunc__"]], "__type_params__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[424, "index-34"]], "__type_params__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[424, "index-48"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[424, "object.__xor__"]], "body": [[424, "index-88"]], "built-in method\uff08\u5167\u5efa\u65b9\u6cd5\uff09": [[424, "index-41"], [426, "index-53"]], "byte\uff08\u4f4d\u5143\u7d44\uff09": [[424, "index-21"]], "call\uff08\u547c\u53eb\uff09": [[424, "index-32"], [424, "index-45"], [424, "index-47"], [424, "index-94"], [426, "index-47"], [426, "index-52"], [426, "index-53"], [426, "index-54"], [426, "index-55"], [426, "index-56"]], "chr": [[424, "index-19"]], "class instance\uff08\u985e\u5225\u5be6\u4f8b\uff09": [[424, "index-45"], [424, "index-49"], [424, "index-50"], [426, "index-55"]], "class object\uff08\u985e\u5225\u7269\u4ef6\uff09": [[424, "index-45"], [424, "index-47"], [426, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[424, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[424, "coroutine.close"]], "co_argcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_cellvars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_code \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_consts \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_filename \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_firstlineno \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_flags \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_freevars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_kwonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_lnotab \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_name \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_names \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_nlocals \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_positions() (codeobject \u7684\u65b9\u6cd5)": [[424, "codeobject.co_positions"]], "co_posonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_qualname \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_stacksize \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "co_varnames \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-56"]], "constructor\uff08\u5efa\u69cb\u51fd\u5f0f\uff09": [[424, "index-70"]], "conversion": [[424, "index-75"], [426, "index-1"], [432, "index-3"]], "destructor\uff08\u89e3\u69cb\u51fd\u5f0f\uff09": [[424, "index-71"], [432, "index-7"]], "documentation string\uff08\u6587\u4ef6\u5b57\u4e32\uff09": [[424, "index-58"]], "empty\uff08\u7a7a\u7684\uff09": [[424, "index-20"]], "exc_info \uff08sys \u6a21\u7d44\u4e2d\uff09": [[424, "index-63"]], "exception\uff08\u4f8b\u5916\uff09": [[424, "index-63"], [425, "index-14"], [432, "index-19"], [432, "index-26"], [432, "index-27"], [432, "index-29"], [432, "index-34"]], "extension\uff08\u64f4\u5145\uff09": [[424, "index-4"]], "f_back \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_builtins \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_code \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_globals \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_lasti \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_lineno \uff08frame \u5c6c\u6027\uff09": [[424, "index-62"]], "f_locals \uff08frame \u5c6c\u6027\uff09": [[424, "index-61"]], "f_trace \uff08frame \u5c6c\u6027\uff09": [[424, "index-62"]], "f_trace_lines \uff08frame \u5c6c\u6027\uff09": [[424, "index-62"]], "f_trace_opcodes \uff08frame \u5c6c\u6027\uff09": [[424, "index-62"]], "finalizer\uff08\u7d42\u7d50\u51fd\u5f0f\uff09": [[424, "index-71"]], "format() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[424, "index-73"]], "global\uff08\u5168\u57df\uff09": [[424, "index-34"]], "handler\uff08\u8655\u7406\u5668\uff09": [[424, "index-63"]], "hierarchy\uff08\u968e\u5c64\uff09": [[424, "index-4"]], "identity of an object\uff08\u7269\u4ef6\u7684\u8b58\u5225\uff09": [[424, "index-1"]], "immutable object\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[424, "index-1"]], "immutable sequences\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[424, "index-18"]], "immutable sequence\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[424, "index-17"]], "immutable types\uff08\u4e0d\u53ef\u8b8a\u578b\u5225\uff09": [[424, "index-69"]], "index operation\uff08\u7d22\u5f15\u64cd\u4f5c\uff09": [[424, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[424, "slice.indices"]], "instance\uff08\u5be6\u4f8b\uff09": [[424, "index-45"], [424, "index-49"], [424, "index-94"], [426, "index-55"], [426, "index-56"]], "internal type\uff08\u5167\u90e8\u578b\u5225\uff09": [[424, "index-54"]], "invocation\uff08\u8abf\u7528\uff09": [[424, "index-32"]], "item selection\uff08\u9805\u76ee\u9078\u53d6\uff09": [[424, "index-15"]], "itorator\uff08\u758a\u4ee3\u5668\uff09": [[424, "index-37"]], "last_traceback \uff08sys \u6a21\u7d44\u4e2d\uff09": [[424, "index-63"]], "makefile() \uff08socket \u65b9\u6cd5\uff09": [[424, "index-53"]], "metaclass hint\uff08\u5143\u985e\u5225\u63d0\u793a\uff09": [[424, "index-85"]], "mutable object\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[424, "index-1"]], "mutable\uff08\u53ef\u8b8a\u7684\uff09": [[424, "index-22"], [432, "index-4"], [432, "index-9"]], "number\uff08\u6578\u5b57\uff09": [[424, "index-13"], [424, "index-14"], [431, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[424, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[424, "object.__slots__"]], "open": [[424, "index-53"], [442, "index-0"]], "ord": [[424, "index-19"]], "overloading\uff08\u591a\u8f09\uff09": [[424, "index-68"]], "popen() \uff08\u65bc os \u6a21\u7d44\u4e2d\uff09": [[424, "index-53"]], "print": [[424, "index-75"]], "print() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[424, "index-73"]], "reference counting\uff08\u53c3\u7167\u8a08\u6578\uff09": [[424, "index-2"]], "repr() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[424, "index-72"]], "representation\uff08\u8868\u793a\uff09": [[424, "index-12"]], "round": [[424, "index-102"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[424, "coroutine.send"]], "set type\uff08\u96c6\u5408\u578b\u5225\uff09": [[424, "index-26"]], "singleton\uff08\u55ae\u4f8b\uff09": [[424, "index-20"]], "stack\uff08\u5806\u758a\uff09": [[424, "index-63"]], "start \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-67"]], "stderr \uff08sys \u6a21\u7d44\u4e2d\uff09": [[424, "index-53"]], "stdin \uff08sys \u6a21\u7d44\u4e2d\uff09": [[424, "index-53"]], "stdio": [[424, "index-53"]], "stdout \uff08sys \u6a21\u7d44\u4e2d\uff09": [[424, "index-53"]], "step \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-67"]], "stop \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[424, "index-67"]], "subclassing\uff08\u5b50\u985e\u5225\u5316\uff09": [[424, "index-69"]], "subscription\uff08\u4e0b\u6a19\uff09": [[424, "index-15"], [424, "index-22"], [424, "index-29"], [426, "index-41"], [432, "index-9"]], "sys.exc_info": [[424, "index-63"]], "sys.exception": [[424, "index-63"]], "sys.last_traceback": [[424, "index-63"]], "sys.stderr": [[424, "index-53"]], "sys.stdin": [[424, "index-53"]], "sys.stdout": [[424, "index-53"]], "tb_frame \uff08traceback \u5c6c\u6027\uff09": [[424, "index-64"]], "tb_lasti \uff08traceback \u5c6c\u6027\uff09": [[424, "index-64"]], "tb_lineno \uff08traceback \u5c6c\u6027\uff09": [[424, "index-64"]], "tb_next \uff08traceback \u5c6c\u6027\uff09": [[424, "index-65"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[424, "coroutine.throw"]], "trace\uff08\u8ffd\u8e64\uff09": [[424, "index-63"]], "type of an object\uff08\u7269\u4ef6\u7684\u578b\u5225\uff09": [[424, "index-1"]], "types\uff08\u578b\u5225\uff09, internal\uff08\u5167\u90e8\uff09": [[424, "index-54"]], "unreachable object\uff08\u4e0d\u53ef\u9054\u7269\u4ef6\uff09": [[424, "index-2"]], "user-defined method\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u65b9\u6cd5\uff09": [[424, "index-35"]], "user-defined\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\uff09": [[424, "index-33"], [424, "index-35"], [426, "index-52"]], "value of an object\uff08\u7269\u4ef6\u7684\u503c\uff09": [[424, "index-1"]], "nameerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[425, "index-9"]], "systemexit\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[425, "index-17"]], "binding\uff08\u7e6b\u7d50\uff09": [[425, "index-4"], [432, "index-34"], [432, "index-36"], [432, "index-4"], [432, "index-43"]], "environment\uff08\u74b0\u5883\uff09": [[425, "index-8"]], "error handling\uff08\u932f\u8aa4\u8655\u7406\uff09": [[425, "index-15"]], "exception handler\uff08\u4f8b\u5916\u8655\u7406\u5668\uff09": [[425, "index-15"]], "execution model\uff08\u57f7\u884c\u6a21\u578b\uff09": [[425, "index-0"]], "free": [[425, "index-6"]], "from": [[425, "index-5"], [426, "index-23"], [426, "index-25"], [432, "index-34"], [432, "index-36"]], "handle an exception\uff08\u8655\u7406\u4f8b\u5916\uff09": [[425, "index-15"]], "import statement\uff08\u5f15\u5165\u9673\u8ff0\u5f0f\uff09": [[425, "index-5"], [432, "index-34"], [432, "index-35"], [432, "index-36"], [432, "index-37"]], "raise an exception\uff08\u5f15\u767c\u4f8b\u5916\uff09": [[425, "index-15"]], "restricted\uff08\u53d7\u9650\uff09": [[425, "index-13"]], "scope\uff08\u4f5c\u7528\u57df\uff09": [[425, "index-3"], [425, "index-7"]], "termination model\uff08\u7d42\u6b62\u6a21\u578b\uff09": [[425, "index-16"]], "variable\uff08\u8b8a\u6578\uff09": [[425, "index-6"]], ":= \uff08\u5192\u865f\u7b49\u65bc\uff09": [[426, "index-86"]], "bnf": [[426, "index-0"], [430, "index-0"]], "conditional\uff08\u689d\u4ef6\u5f0f\uff09": [[426, "index-82"], [426, "index-88"]], "pep 308": [[426, "index-89"], [463, "index-1"], [463, "index-2"]], "pep 380": [[426, "index-28"], [472, "index-12"]], "pep 448": [[426, "index-19"], [426, "index-51"], [426, "index-94"], [474, "index-5"], [474, "index-6"], [479, "index-280"], [479, "index-291"], [479, "index-292"], [479, "index-293"]], "pep 530": [[426, "index-14"], [475, "index-11"], [475, "index-12"], [479, "index-266"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[426, "agen.__anext__"]], "__call__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[426, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[426, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[426, "agen.aclose"]], "addition\uff08\u52a0\uff09": [[426, "index-69"]], "anonymous\uff08\u533f\u540d\uff09": [[426, "index-90"]], "argument list\uff08\u5f15\u6578\u5217\u8868\uff09": [[426, "index-47"]], "arithmetic": [[426, "index-1"], [426, "index-59"], [426, "index-64"]], "asend() (agen \u7684\u65b9\u6cd5)": [[426, "agen.asend"]], "assignment expression\uff08\u8ce6\u503c\u904b\u7b97\u5f0f\uff09": [[426, "index-86"]], "asynchronous-generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[426, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[426, "agen.athrow"]], "atom": [[426, "index-2"]], "attribute reference\uff08\u5c6c\u6027\u53c3\u7167\uff09": [[426, "index-39"]], "call semantics\uff08\u547c\u53eb\u8a9e\u610f\uff09": [[426, "index-47"], [426, "index-48"]], "chaining\uff08\u93c8\u63a5\uff09": [[426, "index-78"]], "close() (generator \u7684\u65b9\u6cd5)": [[426, "generator.close"]], "comma": [[426, "index-10"], [426, "index-95"]], "comprehensions": [[426, "index-11"], [426, "index-15"], [426, "index-16"], [426, "index-17"]], "conditional expression\uff08\u689d\u4ef6\u904b\u7b97\u5f0f\uff09": [[426, "index-88"]], "dictionary expression\uff08\u5b57\u5178\u904b\u7b97\u5f0f\uff09": [[426, "index-17"]], "division\uff08\u9664\uff09": [[426, "index-67"]], "evaluation": [[426, "index-96"]], "exclusive\uff08\u6392\u5916\uff09": [[426, "index-75"]], "expression": [[426, "index-0"], [426, "index-22"], [426, "index-23"], [426, "index-82"], [426, "index-88"], [426, "index-90"], [426, "index-91"], [432, "index-1"], [432, "index-2"]], "expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[426, "index-15"], [426, "index-16"], [426, "index-91"]], "form": [[426, "index-90"]], "hashable\uff08\u53ef\u96dc\u6e4a\uff09": [[426, "index-20"]], "identifier": [[426, "index-3"]], "identity": [[426, "index-81"]], "immutable": [[426, "index-20"], [426, "index-7"]], "inclusive\uff08\u5305\u542b\uff09": [[426, "index-76"]], "inversion\uff08\u53cd\u8f49\uff09": [[426, "index-62"]], "item\uff08\u9805\u76ee\uff09": [[426, "index-42"], [426, "index-43"]], "iterable\uff08\u53ef\u758a\u4ee3\uff09": [[426, "index-93"]], "key/value pair\uff08\u9375/\u503c\u5c0d\uff09": [[426, "index-17"]], "key\uff08\u9375\uff09": [[426, "index-17"]], "lambda expression\uff08lambda \u904b\u7b97\u5f0f\uff09": [[426, "index-90"]], "list expression\uff08\u4e32\u5217\u904b\u7b97\u5f0f\uff09": [[426, "index-15"]], "literal": [[426, "index-6"]], "mangling": [[426, "index-5"]], "matrix multiplication\uff08\u77e9\u9663\u4e58\u6cd5\uff09": [[426, "index-66"]], "membership\uff08\u6210\u54e1\uff09": [[426, "index-80"]], "minus\uff08\u6e1b\uff09": [[426, "index-60"]], "modulo\uff08\u9918\u6578\uff09": [[426, "index-68"]], "multiplication\uff08\u4e58\uff09": [[426, "index-65"]], "named expression\uff08\u9644\u540d\u904b\u7b97\u5f0f\uff09": [[426, "index-86"]], "names": [[426, "index-5"]], "negation\uff08\u5426\u5b9a\uff09": [[426, "index-60"]], "order\uff08\u9806\u5e8f\uff09": [[426, "index-96"]], "parenthesized form": [[426, "index-8"]], "plus\uff08\u52a0\uff09": [[426, "index-61"]], "power\uff08\u6b21\u65b9\uff09": [[426, "index-58"]], "precedence\uff08\u512a\u5148\u9806\u5e8f\uff09": [[426, "index-97"]], "primary\uff08\u4e3b\u8981\uff09": [[426, "index-38"]], "private": [[426, "index-5"]], "reference\uff08\u53c3\u7167\uff09": [[426, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[426, "generator.send"]], "set expression\uff08\u96c6\u5408\u904b\u7b97\u5f0f\uff09": [[426, "index-16"]], "shifting\uff08\u79fb\u52d5\uff09": [[426, "index-71"]], "slicing\uff08\u5207\u7247\uff09": [[426, "index-44"]], "start\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-46"]], "step\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-46"]], "stop\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[426, "index-46"]], "subtraction\uff08\u6e1b\uff09": [[426, "index-70"]], "ternary\uff08\u4e09\u5143\uff09": [[426, "index-88"]], "test\uff08\u6e2c\u8a66\uff09": [[426, "index-80"], [426, "index-81"]], "throw() (generator \u7684\u65b9\u6cd5)": [[426, "generator.throw"]], "trailing": [[426, "index-95"]], "tuple": [[426, "index-42"], [426, "index-45"], [426, "index-9"], [426, "index-92"]], "tuple display": [[426, "index-8"]], "unary\uff08\u4e00\u5143\uff09": [[426, "index-59"]], "unpacking\uff08\u89e3\u5305\uff09": [[426, "index-18"], [426, "index-49"], [426, "index-93"]], "walrus operator\uff08\u6d77\u8c61\u904b\u7b97\u5b50\uff09": [[426, "index-86"]], "xor": [[426, "index-75"]], "yield": [[426, "index-23"], [426, "index-34"], [432, "index-26"], [472, "index-11"]], "yield from expression\uff08yield from \u904b\u7b97\u5f0f\uff09": [[426, "index-25"]], "\u65bc comprehensions\uff08\u7d9c\u5408\u904b\u7b97\uff09": [[426, "index-12"], [426, "index-13"]], "\u65bc expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[426, "index-93"]], "\u65bc\u51fd\u5f0f\u547c\u53eb\u4e2d": [[426, "index-47"], [426, "index-49"], [426, "index-50"], [437, "index-3"], [437, "index-4"]], "\u65bc\u5b57\u5178\u904b\u7b97\u5f0f": [[426, "index-17"]], "\u65bc\u5b57\u5178\u986f\u793a": [[426, "index-17"], [426, "index-18"]], "\u7bc4\u4f8b": [[426, "index-34"]], "__cached__": [[428, "cached__"]], "__file__": [[428, "file__"]], "__loader__": [[428, "loader__"]], "__name__": [[428, "name__"]], "__package__": [[428, "package__"]], "__path__": [[428, "path__"]], "__spec__": [[428, "spec__"]], "find_spec": [[428, "index-10"]], "finder\uff08\u641c\u5c0b\u5668\uff09": [[428, "index-10"], [428, "index-8"]], "hooks": [[428, "index-9"]], "import hooks": [[428, "index-9"]], "import machinery\uff08\u5f15\u5165\u6a5f\u5236\uff09": [[428, "index-0"]], "meta": [[428, "index-9"]], "meta hooks": [[428, "index-9"]], "module spec": [[428, "index-8"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u641c\u5c0b\u5668\uff09": [[428, "index-16"]], "path hooks": [[428, "index-9"]], "regular\uff08\u4e00\u822c\uff09": [[428, "index-4"]], "sys.meta_path": [[428, "index-10"]], "sys.modules": [[428, "index-7"]], "sys.path": [[428, "index-17"]], "sys.path_hooks": [[428, "index-17"]], "sys.path_importer_cache": [[428, "index-17"]], "grammar\uff08\u6587\u6cd5\uff09": [[430, "index-0"]], "lexical definitions\uff08\u8a5e\u6cd5\u5b9a\u7fa9\uff09": [[430, "index-1"]], "notation\uff08\u6a19\u8a18\u6cd5\uff09": [[430, "index-0"]], "syntax\uff08\u8a9e\u6cd5\uff09": [[430, "index-0"]], "\" \uff08\u96d9\u5f15\u865f\uff09": [[431, "index-17"]], "\"\"\"": [[431, "index-18"]], "' \uff08\u55ae\u5f15\u865f\uff09": [[431, "index-17"]], "'''": [[431, "index-18"]], "0b": [[431, "index-28"]], "0o": [[431, "index-28"]], "0x": [[431, "index-28"]], "indent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[431, "index-9"]], "pep 3131": [[431, "index-11"], [431, "index-12"], [466, "index-5"]], "pep 414": [[431, "index-21"], [472, "index-14"]], "standard c\uff08\u6a19\u6e96 c\uff09": [[431, "index-23"]], "unicode consortium": [[431, "index-18"]], "_, identifiers\uff08\u8b58\u5225\u5668\uff09": [[431, "index-15"]], "__, identifiers\uff08\u8b58\u5225\u5668\uff09": [[431, "index-15"]], "b\"": [[431, "index-19"]], "b'": [[431, "index-19"]], "backslash character\uff08\u53cd\u659c\u7dda\u5b57\u5143\uff09": [[431, "index-6"]], "binary literal\uff08\u4e8c\u9032\u4f4d\u5e38\u6578\uff09": [[431, "index-27"]], "blank line\uff08\u7a7a\u767d\u5217\uff09": [[431, "index-7"]], "bytes literal\uff08\u4f4d\u5143\u7d44\u5e38\u6578\uff09": [[431, "index-17"], [431, "index-19"]], "complex literal\uff08\u8907\u6578\u5e38\u6578\uff09": [[431, "index-27"]], "constant\uff08\u5e38\u6578\uff09": [[431, "index-16"]], "decimal literal\uff08\u5341\u9032\u4f4d\u5e38\u6578\uff09": [[431, "index-27"]], "delimiters\uff08\u5206\u9694\u7b26\u865f\uff09": [[431, "index-32"]], "e": [[431, "index-29"]], "encoding declarations (source file)\uff08\u7de8\u78bc\u5ba3\u544a\uff08\u539f\u59cb\u6a94\u6848\uff09\uff09": [[431, "index-5"]], "f\"": [[431, "index-22"]], "f'": [[431, "index-22"]], "floating point literal\uff08\u6d6e\u9ede\u6578\u5e38\u6578\uff09": [[431, "index-27"]], "for help in debugging using string literals\uff08\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u9032\u884c\u9664\u932f\uff09": [[431, "index-25"]], "formatted literal\uff08\u683c\u5f0f\u5316\u5e38\u6578\uff09": [[431, "index-25"]], "formatted string literal\uff08\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\uff09": [[431, "index-22"], [431, "index-25"]], "fstring\uff08f \u5b57\u4e32\uff09": [[431, "index-25"]], "grouping\uff08\u7fa4\u7d44\uff09": [[431, "index-8"]], "hash character\uff08\u4e95\u5b57\u865f\uff09": [[431, "index-4"]], "hexadecimal literal\uff08\u5341\u516d\u9032\u4f4d\u5e38\u6578\uff09": [[431, "index-27"]], "identifier\uff08\u8b58\u5225\u5668\uff09": [[431, "index-10"]], "imaginary literal\uff08\u865b\u6578\u5e38\u6578\uff09": [[431, "index-27"]], "indentation\uff08\u7e2e\u6392\uff09": [[431, "index-8"]], "integer literal\uff08\u6574\u6578\u5e38\u6578\uff09": [[431, "index-27"], [431, "index-28"]], "interpolated literal\uff08\u63d2\u503c\u5e38\u6578\uff09": [[431, "index-25"]], "interpolated string literal\uff08\u63d2\u503c\u5b57\u4e32\u5e38\u6578\uff09": [[431, "index-25"]], "j": [[431, "index-30"]], "leading whitespace\uff08\u524d\u7f6e\u7a7a\u767d\uff09": [[431, "index-8"]], "lexical analysis\uff08\u8a5e\u6cd5\u5206\u6790\uff09": [[431, "index-0"]], "line continuation\uff08\u5217\u5ef6\u7e8c\uff09": [[431, "index-6"]], "line joining\uff08\u5217\u9023\u63a5\uff09": [[431, "index-3"], [431, "index-6"]], "line structure\uff08\u5217\u7d50\u69cb\uff09": [[431, "index-2"]], "literal\uff08\u5e38\u6578\uff09": [[431, "index-16"]], "logical line\uff08\u908f\u8f2f\u5217\uff09": [[431, "index-3"]], "numeric literal\uff08\u6578\u503c\u5e38\u6578\uff09": [[431, "index-27"]], "octal literal\uff08\u516b\u9032\u4f4d\u5e38\u6578\uff09": [[431, "index-27"]], "operators\uff08\u904b\u7b97\u5b50\uff09": [[431, "index-31"]], "parser\uff08\u5256\u6790\u5668\uff09": [[431, "index-0"]], "physical line\uff08\u7269\u7406\u5217\uff09": [[431, "index-23"], [431, "index-3"], [431, "index-6"]], "r\"": [[431, "index-20"]], "r'": [[431, "index-20"]], "raw string literal\uff08\u539f\u59cb\u5b57\u4e32\u5e38\u6578\uff09": [[431, "index-20"]], "raw string\uff08\u539f\u59cb\u5b57\u4e32\uff09": [[431, "index-18"]], "reserved word\uff08\u4fdd\u7559\u5b57\uff09": [[431, "index-13"]], "soft keyword\uff08\u8edf\u95dc\u9375\u5b57\uff09": [[431, "index-14"]], "source character set\uff08\u539f\u59cb\u5b57\u5143\u96c6\u5408\uff09": [[431, "index-5"]], "source encoding declaration\uff08\u539f\u59cb\u7de8\u78bc\u5ba3\u544a\uff09": [[431, "index-5"]], "statement grouping\uff08\u9673\u8ff0\u5f0f\u7fa4\u7d44\uff09": [[431, "index-8"]], "string literal\uff08\u5b57\u4e32\u5e38\u6578\uff09": [[431, "index-17"], [431, "index-18"]], "tab\uff08\u5b9a\u4f4d\u5b57\u5143\uff09": [[431, "index-8"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5b57\u4e32\uff09": [[431, "index-18"]], "u\"": [[431, "index-17"]], "u'": [[431, "index-17"]], "unrecognized escape sequence\uff08\u7121\u6cd5\u8fa8\u8b58\u7684\u8df3\u812b\u5e8f\u5217\uff09": [[431, "index-24"]], "\u65bc\u6578\u503c\u5e38\u6578\u4e2d": [[431, "index-28"], [431, "index-29"], [431, "index-30"]], "\u65bc\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\u4e2d": [[431, "index-25"]], "%=": [[432, "index-14"]], "&=": [[432, "index-14"]], "**=": [[432, "index-14"]], "*=": [[432, "index-14"]], "+=": [[432, "index-14"]], "-=": [[432, "index-14"]], "//=": [[432, "index-14"]], "/=": [[432, "index-14"]], "<<=": [[432, "index-14"]], ">>=": [[432, "index-14"]], "pep 236": [[432, "index-42"], [459, "index-0"], [459, "index-1"], [459, "index-3"]], "pep 3104": [[432, "index-46"], [466, "index-8"]], "pep 3132": [[432, "index-13"], [466, "index-9"]], "^=": [[432, "index-14"]], "__all__\uff08\u53ef\u9078\u6a21\u7d44\u5c6c\u6027\uff09": [[432, "index-38"]], "__cause__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[432, "index-29"]], "__context__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[432, "index-29"]], "__debug__": [[432, "index-19"]], "__traceback__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[432, "index-27"]], "annotated variable\uff08\u8a3b\u91cb\u8b8a\u6578\uff09": [[432, "index-15"]], "annotated\uff08\u8a3b\u91cb\uff09": [[432, "index-15"]], "assertions\uff08\u65b7\u8a00\uff09": [[432, "index-18"]], "assignment statement\uff08\u8ce6\u503c\u9673\u8ff0\u5f0f\uff09": [[432, "index-4"]], "assignment\uff08\u8ce6\u503c\uff09\u3001annotated\uff08\u8a3b\u91cb\uff09": [[432, "index-15"]], "assignment\uff08\u8ce6\u503c\uff09\u3001augmented\uff08\u589e\u5f37\uff09": [[432, "index-14"]], "augmented assignment\uff08\u589e\u5f37\u8ce6\u503c\uff09": [[432, "index-14"]], "augmented\uff08\u589e\u5f37\uff09": [[432, "index-14"]], "call": [[432, "index-3"]], "deletion\uff08\u522a\u9664\uff09": [[432, "index-21"], [432, "index-23"]], "expression list\uff08\u904b\u7b97\u5f0f\u5217\u8868\uff09": [[432, "index-18"]], "future": [[432, "index-40"]], "future statement\uff08future \u9673\u8ff0\u5f0f\uff09": [[432, "index-40"]], "global": [[432, "index-22"], [432, "index-43"], [432, "index-43"]], "identifier list\uff08\u8b58\u5225\u7b26\u865f\u6e05\u55ae\uff09": [[432, "index-43"], [432, "index-45"]], "loop control\uff08\u8ff4\u5708\u63a7\u5236\uff09": [[432, "index-31"]], "nonlocal": [[432, "index-45"]], "null": [[432, "index-20"]], "pass": [[432, "index-20"]], "procedure": [[432, "index-3"]], "raiseing": [[432, "index-27"]], "rebinding\uff08\u91cd\u65b0\u7e6b\u7d50\uff09": [[432, "index-4"]], "simple": [[432, "index-0"]], "standard": [[432, "index-3"]], "type": [[432, "index-47"]], "unbinding\uff08\u89e3\u9664\u7e6b\u7d50\uff09": [[432, "index-22"]], "writing": [[432, "index-3"]], "|=": [[432, "index-14"]], "\u65bc\u76ee\u6a19\u5217\u8868\u4e2d": [[432, "index-6"]], "\u65bc\u8ce6\u503c\u76ee\u6a19\u5217\u8868\u4e2d": [[432, "index-6"]], "windows": [[433, "index-4"]], "command line\uff08\u547d\u4ee4\u5217\uff09": [[433, "index-4"]], "input\uff08\u8f38\u5165\uff09": [[433, "index-5"]], "interactive mode\uff08\u4e92\u52d5\u6a21\u5f0f\uff09": [[433, "index-3"]], "interpreter\uff08\u76f4\u8b6f\u5668\uff09": [[433, "index-0"]], "program\uff08\u7a0b\u5f0f\uff09": [[433, "index-1"]], "standard input\uff08\u6a19\u6e96\u8f38\u5165\uff09": [[433, "index-4"]], "mangling\uff08\u4fee\u98fe\uff09": [[436, "index-1"]], "coding\uff08\u7a0b\u5f0f\u7de8\u5beb\uff09": [[437, "index-9"]], "ddocumentation strings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[437, "index-2"], [437, "index-5"]], "docstrings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[437, "index-2"], [437, "index-5"]], "strings\uff08\u5b57\u4e32\uff09, documentation\uff08\u8aaa\u660e\u6587\u4ef6\uff09": [[437, "index-2"], [437, "index-5"]], "style\uff08\u98a8\u683c\uff09": [[437, "index-9"]], "# (hash)": [[445, "index-0"]], "--check-hash-based-pycs": [[451, "cmdoption-check-hash-based-pycs"]], "--help-all": [[451, "cmdoption-help-all"]], "--help-env": [[451, "cmdoption-help-env"]], "--help-xoptions": [[451, "cmdoption-help-xoptions"]], "-?": [[451, "cmdoption-0"]], "-oo": [[451, "cmdoption-OO"]], "-w": [[451, "cmdoption-W"]], "python*": [[451, "index-0"], [451, "index-10"], [451, "index-2"], [451, "index-5"], [473, "index-50"], [479, "index-41"]], "pythondumprefsfile=filename": [[451, "envvar-PYTHONDUMPREFSFILE-FILENAME"]], "\u547d\u4ee4\u5217\u9078\u9805": [[451, "cmdoption-0"], [451, "cmdoption-B"], [451, "cmdoption-E"], [451, "cmdoption-I"], [451, "cmdoption-J"], [451, "cmdoption-O"], [451, "cmdoption-OO"], [451, "cmdoption-P"], [451, "cmdoption-R"], [451, "cmdoption-S"], [451, "cmdoption-V"], [451, "cmdoption-W"], [451, "cmdoption-X"], [451, "cmdoption-b"], [451, "cmdoption-c"], [451, "cmdoption-check-hash-based-pycs"], [451, "cmdoption-d"], [451, "cmdoption-h"], [451, "cmdoption-help"], [451, "cmdoption-help-all"], [451, "cmdoption-help-env"], [451, "cmdoption-help-xoptions"], [451, "cmdoption-i"], [451, "cmdoption-m"], [451, "cmdoption-q"], [451, "cmdoption-s"], [451, "cmdoption-u"], [451, "cmdoption-v"], [451, "cmdoption-version"], [451, "cmdoption-x"], [452, "cmdoption-0"], [452, "cmdoption-1"], [452, "cmdoption-arg-CONFIG_SITE"], [452, "cmdoption-build"], [452, "cmdoption-disable-ipv6"], [452, "cmdoption-disable-test-modules"], [452, "cmdoption-enable-big-digits"], [452, "cmdoption-enable-bolt"], [452, "cmdoption-enable-framework"], [452, "cmdoption-enable-loadable-sqlite-extensions"], [452, "cmdoption-enable-optimizations"], [452, "cmdoption-enable-profiling"], [452, "cmdoption-enable-pystats"], [452, "cmdoption-enable-shared"], [452, "cmdoption-enable-universalsdk"], [452, "cmdoption-enable-wasm-dynamic-linking"], [452, "cmdoption-enable-wasm-pthreads"], [452, "cmdoption-exec-prefix"], [452, "cmdoption-host"], [452, "cmdoption-prefix"], [452, "cmdoption-with-address-sanitizer"], [452, "cmdoption-with-assertions"], [452, "cmdoption-with-build-python"], [452, "cmdoption-with-builtin-hashlib-hashes"], [452, "cmdoption-with-computed-gotos"], [452, "cmdoption-with-dbmliborder"], [452, "cmdoption-with-dtrace"], [452, "cmdoption-with-emscripten-target"], [452, "cmdoption-with-ensurepip"], [452, "cmdoption-with-framework-name"], [452, "cmdoption-with-hash-algorithm"], [452, "cmdoption-with-libc"], [452, "cmdoption-with-libm"], [452, "cmdoption-with-libs"], [452, "cmdoption-with-lto"], [452, "cmdoption-with-memory-sanitizer"], [452, "cmdoption-with-openssl"], [452, "cmdoption-with-openssl-rpath"], [452, "cmdoption-with-pkg-config"], [452, "cmdoption-with-platlibdir"], [452, "cmdoption-with-pydebug"], [452, "cmdoption-with-readline"], [452, "cmdoption-with-ssl-default-suites"], [452, "cmdoption-with-strict-overflow"], [452, "cmdoption-with-suffix"], [452, "cmdoption-with-system-expat"], [452, "cmdoption-with-system-libmpdec"], [452, "cmdoption-with-trace-refs"], [452, "cmdoption-with-tzpath"], [452, "cmdoption-with-undefined-behavior-sanitizer"], [452, "cmdoption-with-universal-archs"], [452, "cmdoption-with-valgrind"], [452, "cmdoption-with-wheel-pkg-dir"], [452, "cmdoption-without-c-locale-coercion"], [452, "cmdoption-without-decimal-contextvar"], [452, "cmdoption-without-doc-strings"], [452, "cmdoption-without-freelists"], [452, "cmdoption-without-pymalloc"], [452, "cmdoption-without-readline"], [452, "cmdoption-without-static-libpython"]], "--build": [[452, "cmdoption-build"]], "--disable-ipv6": [[452, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[452, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[452, "cmdoption-enable-big-digits"]], "--enable-bolt": [[452, "cmdoption-enable-bolt"]], "--enable-framework": [[452, "cmdoption-1"], [452, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[452, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[452, "cmdoption-enable-optimizations"]], "--enable-profiling": [[452, "cmdoption-enable-profiling"]], "--enable-pystats": [[452, "cmdoption-enable-pystats"]], "--enable-shared": [[452, "cmdoption-enable-shared"]], "--enable-universalsdk": [[452, "cmdoption-0"], [452, "cmdoption-enable-universalsdk"]], "--enable-wasm-dynamic-linking": [[452, "cmdoption-enable-wasm-dynamic-linking"]], "--enable-wasm-pthreads": [[452, "cmdoption-enable-wasm-pthreads"]], "--exec-prefix": [[452, "cmdoption-exec-prefix"]], "--host": [[452, "cmdoption-host"]], "--prefix": [[452, "cmdoption-prefix"]], "--with-address-sanitizer": [[452, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[452, "cmdoption-with-assertions"]], "--with-build-python": [[452, "cmdoption-with-build-python"]], "--with-builtin-hashlib-hashes": [[452, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[452, "cmdoption-with-computed-gotos"]], "--with-dbmliborder": [[452, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[452, "cmdoption-with-dtrace"]], "--with-emscripten-target": [[452, "cmdoption-with-emscripten-target"]], "--with-ensurepip": [[452, "cmdoption-with-ensurepip"]], "--with-framework-name": [[452, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[452, "cmdoption-with-hash-algorithm"]], "--with-libc": [[452, "cmdoption-with-libc"]], "--with-libm": [[452, "cmdoption-with-libm"]], "--with-libs": [[452, "cmdoption-with-libs"]], "--with-lto": [[452, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[452, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[452, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[452, "cmdoption-with-openssl-rpath"]], "--with-pkg-config": [[452, "cmdoption-with-pkg-config"]], "--with-platlibdir": [[452, "cmdoption-with-platlibdir"]], "--with-pydebug": [[452, "cmdoption-with-pydebug"]], "--with-readline": [[452, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[452, "cmdoption-with-ssl-default-suites"]], "--with-strict-overflow": [[452, "cmdoption-with-strict-overflow"]], "--with-suffix": [[452, "cmdoption-with-suffix"]], "--with-system-expat": [[452, "cmdoption-with-system-expat"]], "--with-system-libmpdec": [[452, "cmdoption-with-system-libmpdec"]], "--with-trace-refs": [[452, "cmdoption-with-trace-refs"]], "--with-tzpath": [[452, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[452, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[452, "cmdoption-with-universal-archs"]], "--with-valgrind": [[452, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[452, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[452, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[452, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[452, "cmdoption-without-doc-strings"]], "--without-freelists": [[452, "cmdoption-without-freelists"]], "--without-pymalloc": [[452, "cmdoption-without-pymalloc"]], "--without-readline": [[452, "cmdoption-without-readline"]], "--without-static-libpython": [[452, "cmdoption-without-static-libpython"]], "basecflags": [[452, "envvar-BASECFLAGS"]], "basecppflags": [[452, "envvar-BASECPPFLAGS"]], "bldshared": [[452, "envvar-BLDSHARED"]], "cc": [[452, "envvar-CC"], [461, "index-24"]], "ccshared": [[452, "envvar-CCSHARED"]], "cflagsforshared": [[452, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[452, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[452, "envvar-CFLAGS_NODIST"], [452, "index-12"], [452, "index-17"], [452, "index-22"]], "compileall_opts": [[452, "envvar-COMPILEALL_OPTS"]], "configure_cflags": [[452, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[452, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[452, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[452, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[452, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "config_site": [[452, "cmdoption-arg-CONFIG_SITE"]], "cppflags": [[452, "envvar-CPPFLAGS"], [452, "index-10"], [452, "index-27"], [452, "index-9"], [461, "index-28"]], "cxx": [[452, "envvar-CXX"]], "extra_cflags": [[452, "envvar-EXTRA_CFLAGS"]], "ldflags": [[452, "envvar-LDFLAGS"], [452, "index-11"], [452, "index-18"], [452, "index-20"], [452, "index-23"], [452, "index-24"], [452, "index-25"], [452, "index-28"], [461, "index-27"]], "ldflags_nodist": [[452, "envvar-LDFLAGS_NODIST"], [452, "index-21"], [452, "index-26"]], "ldshared": [[452, "envvar-LDSHARED"]], "libs": [[452, "envvar-LIBS"]], "linkcc": [[452, "envvar-LINKCC"]], "opt": [[452, "envvar-OPT"], [452, "index-8"]], "pep 11": [[452, "index-1"], [457, "index-0"], [457, "index-38"], [466, "index-19"], [469, "index-117"], [474, "index-48"], [476, "index-5"], [479, "index-251"], [479, "index-50"], [479, "index-51"]], "profile_task": [[452, "envvar-PROFILE_TASK"], [452, "index-4"]], "purify": [[452, "envvar-PURIFY"]], "py_builtin_module_cflags": [[452, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[452, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[452, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[452, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[452, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[452, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[452, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[452, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[452, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[457, "index-8"]], "pathext": [[457, "index-4"], [457, "index-6"], [473, "index-51"], [479, "index-136"]], "pep 397": [[457, "index-19"], [472, "index-9"], [474, "index-22"]], "pep 514": [[457, "index-21"], [469, "index-93"], [479, "index-273"], [479, "index-73"]], "pylauncher_allow_install": [[457, "index-29"], [479, "index-74"]], "pylauncher_always_install": [[457, "index-30"]], "pylauncher_debug": [[457, "index-27"]], "pylauncher_dryrun": [[457, "index-28"], [457, "index-31"]], "pylauncher_no_search_path": [[457, "index-24"]], "py_python": [[457, "index-26"]], "pep 100": [[458, "index-3"]], "pep 201": [[458, "index-2"]], "pep 207": [[459, "index-4"], [459, "index-5"]], "pep 208": [[459, "index-13"]], "pep 217": [[459, "index-12"]], "pep 229": [[459, "index-8"]], "pep 230": [[459, "index-7"]], "pep 232": [[459, "index-10"]], "pep 241": [[459, "index-14"], [459, "index-15"], [459, "index-16"]], "pep 243": [[459, "index-17"]], "pep 234": [[460, "index-7"]], "pep 253": [[460, "index-0"], [460, "index-1"], [460, "index-3"], [460, "index-5"], [460, "index-6"]], "pep 261": [[460, "index-14"], [460, "index-15"]], "pep 264": [[460, "index-22"]], "rfc 2104": [[460, "index-17"]], "rfc 2487": [[460, "index-18"]], "cpp": [[461, "index-26"]], "pep 218": [[461, "index-0"], [462, "index-0"], [462, "index-13"]], "pep 277": [[461, "index-7"]], "pep 279": [[461, "index-10"]], "pep 285": [[461, "index-13"], [461, "index-14"]], "pep 293": [[461, "index-15"]], "pep 301": [[461, "index-16"]], "what's new\uff08\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff09": [[461, "index-8"], [462, "index-7"], [463, "index-20"], [464, "index-13"]], "pep 322": [[462, "index-14"], [462, "index-6"]], "pep 327": [[462, "index-9"]], "pep 331": [[462, "index-11"]], "pep 288": [[463, "index-12"]], "pep 309": [[463, "index-3"]], "pep 314": [[463, "index-4"]], "pep 325": [[463, "index-13"]], "pep 333": [[463, "index-26"], [463, "index-27"]], "pep 339": [[463, "index-30"]], "pep 341": [[463, "index-8"]], "pep 347": [[463, "index-28"]], "pep 352": [[463, "index-15"], [464, "index-25"], [466, "index-25"]], "pep 356": [[463, "index-0"]], "pep 357": [[463, "index-18"]], "appdata": [[464, "index-5"]], "pep 3000": [[464, "index-1"]], "pep 3100": [[464, "index-2"]], "pep 3110": [[464, "index-11"], [466, "index-13"], [466, "index-27"]], "pep 3127": [[464, "index-17"]], "pep 361": [[464, "index-0"]], "pep 371": [[464, "index-8"]], "rfc 2033": [[464, "index-22"]], "rfc 3207": [[464, "index-23"]], "ldcxxshared": [[465, "index-12"]], "pep 3106": [[465, "index-6"]], "pep 3137": [[465, "index-7"]], "pep 372": [[465, "index-2"], [467, "index-0"]], "pep 373": [[465, "index-0"]], "pep 389": [[465, "index-4"], [471, "index-2"]], "pep 391": [[465, "index-5"], [471, "index-3"]], "pep 466": [[465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-20"]], "pep 476": [[465, "index-25"]], "pep 477": [[465, "index-21"]], "pep 493": [[465, "index-26"]], "pythonshowalloccount": [[465, "index-15"]], "pythonshowrefcount": [[465, "index-14"]], "user_base": [[465, "index-9"]], "pep 274": [[466, "index-10"]], "pep 3102": [[466, "index-7"]], "pep 3108": [[466, "index-17"], [466, "index-20"], [466, "index-22"]], "pep 3109": [[466, "index-11"], [466, "index-26"]], "pep 3111": [[466, "index-32"]], "pep 3113": [[466, "index-15"]], "pep 3114": [[466, "index-30"]], "pep 3123": [[466, "index-35"]], "pep 3138": [[466, "index-3"]], "pep 4": [[466, "index-18"]], "pep 384": [[468, "index-119"], [471, "index-1"], [479, "index-107"]], "pep 618": [[468, "index-106"], [468, "index-83"], [479, "index-150"]], "pep 624": [[468, "index-92"], [469, "index-122"], [469, "index-86"], [479, "index-96"]], "pep 632": [[468, "index-108"], [468, "index-90"], [470, "index-31"], [470, "index-4"], [479, "index-35"]], "pep 635": [[468, "index-81"], [468, "index-96"]], "pep 652": [[468, "index-116"], [479, "index-102"]], "pythonthreaddebug": [[468, "index-114"], [469, "index-116"], [479, "index-86"]], "pep 11#tier-3": [[469, "index-118"]], "pep 484#annotating-instance-and-class-methods": [[469, "index-99"]], "pep 624#alternative-apis": [[469, "index-123"]], "pep 654": [[469, "index-113"], [469, "index-90"], [469, "index-91"], [479, "index-39"], [479, "index-78"], [479, "index-81"]], "pep 657": [[469, "index-110"], [469, "index-88"], [479, "index-58"], [479, "index-87"]], "pep 659": [[469, "index-111"], [469, "index-112"]], "pep 670": [[469, "index-119"], [469, "index-87"]], "pep 678": [[469, "index-92"], [470, "index-20"], [479, "index-21"], [479, "index-55"], [479, "index-7"]], "pep 680": [[469, "index-107"], [469, "index-83"], [479, "index-69"]], "pep 683": [[470, "index-41"], [479, "index-5"]], "pep 684": [[470, "index-42"]], "pep 697": [[470, "index-38"], [470, "index-40"], [479, "index-20"]], "pep 699": [[470, "index-27"], [479, "index-28"]], "pep 701": [[470, "index-0"], [470, "index-22"], [470, "index-24"], [470, "index-35"], [470, "index-36"], [470, "index-37"], [470, "index-46"], [470, "index-5"]], "pep 709": [[470, "index-25"], [470, "index-8"], [479, "index-10"]], "pep 385": [[471, "index-14"]], "pep 392": [[471, "index-0"]], "rfc 2818": [[471, "index-12"]], "pep 3144": [[472, "index-42"]], "pep 398": [[472, "index-0"]], "pep 409": [[472, "index-13"]], "pep 418": [[472, "index-28"]], "rfc 1870": [[472, "index-27"]], "yield from\uff08\u5728\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\u4e2d\uff09": [[472, "index-11"]], "pep 247": [[473, "index-37"]], "pep 3156": [[473, "index-25"], [473, "index-26"], [473, "index-31"], [473, "index-4"], [473, "index-8"]], "pep 424": [[473, "index-24"], [473, "index-38"]], "pep 429": [[473, "index-0"]], "pep 435": [[473, "index-28"], [473, "index-29"], [473, "index-6"]], "pep 445": [[473, "index-17"], [473, "index-43"], [473, "index-44"], [473, "index-52"]], "pep 446": [[473, "index-14"], [473, "index-2"], [473, "index-21"], [473, "index-22"]], "pep 450": [[473, "index-32"], [473, "index-33"], [473, "index-9"]], "pep 454": [[473, "index-10"], [473, "index-34"], [473, "index-35"]], "pep 456": [[473, "index-13"], [473, "index-47"]], "pep 441": [[474, "index-29"], [474, "index-30"]], "pep 465": [[474, "index-3"], [474, "index-4"], [474, "index-46"], [479, "index-303"]], "pep 471": [[474, "index-13"], [474, "index-14"], [479, "index-299"]], "pep 478": [[474, "index-0"]], "pep 486": [[474, "index-21"], [474, "index-23"], [479, "index-300"]], "rfc 6152": [[474, "index-37"]], "pep 487": [[475, "index-13"], [475, "index-14"], [475, "index-15"], [475, "index-37"], [479, "index-250"], [479, "index-260"], [479, "index-269"]], "pep 494": [[475, "index-0"]], "pep 511": [[475, "index-36"]], "pep 520": [[475, "index-23"]], "pep 628": [[475, "index-29"], [475, "index-30"], [479, "index-271"]], "pep 545": [[476, "index-24"], [476, "index-40"]], "pep 553": [[476, "index-13"], [479, "index-244"]], "pep 564": [[476, "index-17"], [476, "index-18"], [476, "index-32"], [479, "index-242"]], "pep 596": [[478, "index-0"]], "pep 616": [[478, "index-12"], [478, "index-4"], [479, "index-170"]], "enablecontrolflowguard": [[479, "index-93"]], "pep 669": [[479, "index-8"]], "pep 676": [[479, "index-71"]], "pep 687": [[479, "index-13"], [479, "index-14"], [479, "index-15"], [479, "index-16"], [479, "index-17"], [479, "index-18"], [479, "index-22"], [479, "index-24"], [479, "index-25"]], "pep 689": [[479, "index-26"]], "pip_user": [[479, "index-207"]], "pythondumprefsfile": [[479, "index-85"]], "pythonregrtest_unicode_guard": [[479, "index-62"]], "rfc 3491": [[479, "index-33"]], "rfc 5894": [[479, "index-32"]], "rfc 7538": [[479, "index-83"]], "rfc 9239": [[479, "index-42"]]}})